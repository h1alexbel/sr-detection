repo,branch,readme,releases_count,open_issues_count,branches_count,license,pulls_count,headings,readme_hcount,mcw
ThomasVitale/langchain4j-spring-boot,main,"# LangChain4j Spring Boot

This project brings [LangChain4j](https://github.com/langchain4j) support in Spring Boot
to build AI and LLM-powered applications. It provides integrations with LLM services
and vector stores, as well as tools, chains, and AI services.

Using the starter projects in this repository, you gain the following advantages over
using the vanilla LangChain4j libraries in Spring Boot:

* Autoconfiguration and unified configuration properties for models and vector stores
* HTTP infrastructure with RestClient, WebClient, and Jackson for all integrations
* Built-in observability with Micrometer, including LLM-specific metrics and traces
* Dev services with Docker Compose and Testcontainers for models and vector stores
* Service bindings for automatic connection configuration when running on Kubernetes.

## üöÄ&nbsp; Quick Start

### Pre-Requisites

* Java 17+
* Docker/Podman
* [Spring CLI](https://docs.spring.io/spring-cli/reference/installation.html)

### Getting Started

Using the Spring CLI, you can easily bootstrap a new Spring Boot application with LangChain4j support.

First, add the LangChain4j Spring Boot catalog providing the project templates.

```shell
spring project-catalog add langchain4j https://github.com/ThomasVitale/langchain4j-spring-boot
```

Then, create a new Spring Boot project for building an LLM Applications with LangChain4j and Ollama.

```shell
spring boot new myapp langchain4j-chat-ollama
```

Finally, navigate to the `myapp` folder and run the Spring Boot application. The first time you run it,
it will take a while to download the Ollama container image used as a dev service based on the Testcontainers
Spring Boot integration.

```shell
cd myapp
./mvnw spring-boot:run
```

You can now call the application that will use Ollama and _llama3_ to generate a text response.
This example uses [httpie](https://httpie.io) to send HTTP requests.

```shell
http :8080/ai/chat message==""What is the capital of Italy?""
```

## ü¶ú Models

### OpenAI

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-openai-spring-boot-starter:0.9.0'
```

Configuration:

```yaml
langchain4j:
  open-ai:
    client:
      api-key: ${OPENAI_API_KEY}
```

Example:

```java
@RestController
class ChatController {
    private final ChatLanguageModel chatLanguageModel;

    ChatController(ChatLanguageModel chatLanguageModel) {
        this.chatLanguageModel = chatLanguageModel;
    }

    @GetMapping(""/ai/chat"")
    String chat(@RequestParam(defaultValue = ""What did Gandalf say to the Balrog?"") String message) {
        return chatLanguageModel.generate(message);
    }
}
```

### Ollama

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-ollama-spring-boot-starter:0.9.0'
```

Configuration:

```yaml
langchain4j:
  ollama:
    chat:
      model: llama3
```

Example:

```java
@RestController
class ChatController {
    private final ChatLanguageModel chatLanguageModel;

    ChatController(ChatLanguageModel chatLanguageModel) {
        this.chatLanguageModel = chatLanguageModel;
    }

    @GetMapping(""/ai/chat"")
    String chat(@RequestParam(defaultValue = ""What did Gandalf say to the Balrog?"") String message) {
        return chatLanguageModel.generate(message);
    }
}
```

## ü´ô Vector Stores

### Chroma

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-chroma-spring-boot-starter:0.9.0'
```

Example:

```java
class ChromaDataIngestor {
    private final ChromaEmbeddingStore embeddingStore;
    private final EmbeddingModel embeddingModel;

    ChatController(ChromaEmbeddingStore embeddingStore, EmbeddingModel embeddingModel) {
        this.embeddingStore = embeddingStore;
        this.embeddingModel = embeddingModel;
    }

    public void ingest(List<Document> documents) {
        EmbeddingStoreIngestor ingestor = EmbeddingStoreIngestor.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .documentSplitter(recursive(300, 0))
                .build();
        ingestor.ingest(documents);
    }
}
```

### Weaviate

Gradle:

```groovy
implementation 'io.thomasvitale.langchain4j:langchain4j-weaviate-spring-boot-starter:0.9.0'
```

Example:

```java
class WeaviateDataIngestor {
    private final WeaviateEmbeddingStore embeddingStore;
    private final EmbeddingModel embeddingModel;

    ChatController(WeaviateEmbeddingStore embeddingStore, EmbeddingModel embeddingModel) {
        this.embeddingStore = embeddingStore;
        this.embeddingModel = embeddingModel;
    }

    public void ingest(List<Document> documents) {
        EmbeddingStoreIngestor ingestor = EmbeddingStoreIngestor.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .documentSplitter(recursive(300, 0))
                .build();
        ingestor.ingest(documents);
    }
}
```

## üåü Examples

Check these [examples](https://github.com/ThomasVitale/llm-apps-java-langchain4j) to see LangChain4j and Spring Boot in action.

## üõ°Ô∏è&nbsp; Security

The security process for reporting vulnerabilities is described in [SECURITY.md](SECURITY.md).

## üñäÔ∏è&nbsp; License

This project is licensed under the **Apache License 2.0**. See [LICENSE](LICENSE) for more information.
",16,4,1,apache-2.0,5.0,"['spring', 'boot', 'nbsp', 'quick', 'start', 'get', 'start', 'model', 'openai', 'ollama', 'vector', 'store', 'chroma', 'weaviate', 'example', 'nbsp', 'security', 'nbsp', 'license']",13,"['nbsp', 'start', 'spring', 'boot', 'quick']"
arconia-io/arconia,main,"# Arconia

Arconia is a framework to build SaaS, multitenant applications using Java and Spring Boot.

<img src=""arconia-logo.png"" alt=""The Arconia logo"" height=""250px"" />

## üöÄ&nbsp; Quick Start

### Pre-Requisites

* Java 17+
* [Spring CLI](https://docs.spring.io/spring-cli/reference/installation.html)

### Getting Started

Using the Spring CLI, you can easily bootstrap a new Spring Boot application using the Arconia framework.

First, add the Arconia Spring catalog providing the project templates.

```shell
spring project-catalog add arconia https://github.com/arconia-io/arconia
```

Then, create a new Spring Boot project for building a multitenant web application.

```shell
spring boot new myapp arconia-web
```

Finally, navigate to the `myapp` folder and run the Spring Boot application.

```shell
cd myapp
./mvnw spring-boot:run
```

You can now call the application as one of the valid tenants (`dukes` or `beans`).
This example uses [httpie](https://httpie.io) to send HTTP requests.

```shell
http :8080/ X-TenantId:dukes
```

## üåü Examples

Check these [examples](https://github.com/arconia-io/arconia-samples) to see Arconia and Spring Boot in action.

## üõ°Ô∏è&nbsp; Security

The security process for reporting vulnerabilities is described in [SECURITY.md](SECURITY.md).

## üñäÔ∏è&nbsp; License

This project is licensed under the **Apache License 2.0**. See [LICENSE](LICENSE) for more information.
",5,9,1,apache-2.0,0.0,"['arconia', 'nbsp', 'quick', 'start', 'get', 'start', 'example', 'nbsp', 'security', 'nbsp', 'license']",7,"['nbsp', 'start', 'arconia', 'quick', 'get']"
borjavb/bq-lineage-tool,master,"# Bq-Lineage-tool


Bq-lineage tool is a column level lineage parser for BigQuery using ZetaSQL. This 
parser started as a fork of this [project by google](https://github.com/GoogleCloudPlatform/bigquery-data-lineage), but it
has been heavily modified to cover the whole bigquery syntax offered by ZetaSQL. The
output of this parser is a DAG of the columns used in a query from sources to outputs, including
auxiliary fields that could be used as part of filters or other operations that don't result in the
materialisation of a field. 



From any arbitrary BigQuery query, you will get the following outputs:
- `output_columns`: The columns that are part of the output of the query, with all the input 
  columns references that were needed to produce them.
- `joins`: List of joins used in the query, considering the columns used for the join
- `aggregations`: List of columns used for aggregations
- `filters`: List of columns used for filtering
- `other_used_columns`: Any other columns used across the query, like order by
- `selected_tables`: A list of all the tables that were selected in the query.
- `Type`: The type of sql statement `{SELECT, CREATE_VIEW, MERGE...}`

![image](./flow.png)


## What can this parser do?

* It's schema aware. This means that a query like `SELECT * FROM table` will generate a DAG
  with all the output columns of `table`, and not just a single node with a `*` symbol.
* It prunes unused columns. This means that for a query like `WITH base AS (SELECT * FROM
  table) SELECT aColumn FROM base` the output DAG will only contain the column `aColumn` and not the
  whole input table.
* It covers pretty much all the BigQuery syntax, including:
    * `WITH` (CTE) clauses
    * Subqueries
    * `UNNEST`-based `JOINS`
    * `STRUCTS` and `ARRAYS`
    * `JOINS`
    * Analytical functions (`QUALIFY`, `LAG`/`LEAD`, `WINDOWS` etc.)
    * Map aliases to original columns
    * `JSON` functions
    * Access to the `PATH` used in `JSON` functions (`JSON_EXTRACT(field,""$.path.to.field"")`)
    * Access to the literals used in the query, for example, in a `WHERE` clause
    * Access to fields that are not part of the output columns of the table (fields only used in a
      `WHERE` clause)
    * `PIVOT` and `UNPIVOT` transformations
    * `GROUP BY GROUPING SETS`, `ROLLUP` and `CUBE`
    * `UDF` and temporary functions
    * Usage of parameters @param
    * Recursive CTEs
    * It parses `SELECTS`, `CREATE {VIEWS}` and `MERGE` statements
    * It automatically infers internal BQ fields like `_TABLE_SUFFIX`

## What can't it do?

* This parser won't work with procedural SQL. For example, it will fail trying to parse a 
  DECLARE or SET operations.
* This parser won't read the logic within UDF functions. It only checks inputs and outputs.
* ZetaSQL might not be up-to-date with the latest BigQuery features, so if there's something
  super new, it will involve either waiting for ZetaSQL to be updated, or going deep into
  ZetaSQL to build the feature.
* It doesn't work while trying to parse queries accessing `INFORMATION_SCHEMA`-type of tables. I
  guess we could bypass this by using a different type of access, but never when through it deeply.
* This parser won't build the DAG of multiple queries. It only parses a single query at a
  time. To build a full dag of your dbt project, for example, you can use libraries like
  `networkx` to connect the edges from the output of this parser.
* Parse SQL syntax that is not supported by ZetaSQL (for example the + operator in Snowflake joins)
* When doing a `SELECT count(*) FROM table`, the output of the parser would act as if no columns
  were selected. This could be subject to interpretation: should all the columns of the input
  `table` be marked as used? Or should the output be an empty list because this query doesn't
  care about any specific column or number of columns?
* Unexpected bugs - even though this parser has been texted over more than 7000 SQL queries, 
  there still might be some edge cases that suddenly are not covered. SQL is hard.
* It doesn't work with `TVF` (Table Valued Functions) - although ZetaSQL parses it, the output 
  won't show the columns of the TVF.
* Automatically infer UDFs - they have to be defined as part of the script that is going to be parsed.

## How to use
The folder `/src/test/examples` has multiple examples of how to use this parser. The main caveat 
relies on how to build the catalog that ZetaSQL needs. Depending on how much you want the parser 
to automate the whole process for you, there are three different methods to build a catalog, 
from the ""let the parser to it for me"" to ""I'll build the catalog myself""

- `/src/test/examples/BigQuerySqlParserBQSchemaTest.java` shows how to rely on the metadata of 
  BiGQuery to build the catalog. To use this method the user has to be authenticated with gcloud.
  Note that there's zero data access/movement in this operation. The only access that is being 
  done is directly to the metadata of the tables, and only to the tables that are being used in 
  the parsed query, i.e., this parser won't scan the whole database. The access is done using 
  the bigquery API. You can use  `gcloud auth application-default login` to authenticate. 
- `/src/test/examples/BigQuerySqlParserLocalSchemaTest.java` shows how to use local json files 
  to build the schema. `/src/test/resources/schemas/` has examples of these files. They are 
  exact copies of the metadata information you can get 
[through the API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables). Note that 
  this is basically what we automate with the previous method.
- `/src/test/examples/ASTExplorerTest.java` Shows an example on how can manually create your own 
  catalog using ZetaSQL methods/constructors and feed it into the parser. 

### Example
The following example uses the first method to build the catalog -  it will use the bigquery API 
to request the metadata of the tables used in the query.
```java
    BigQueryZetaSqlSchemaLoader schemaLoader =
        new BigQueryZetaSqlSchemaLoader(
            BigQueryTableLoadService.usingServiceFactory(
                BigQueryServiceFactory.defaultFactory()
          )
        );

    ZetaSQLResolver parser = new ZetaSQLResolver(schemaLoader);
    
    String sql = """"""
        SELECT
              word,
              SUM(word_count) AS count
            FROM
              `bigquery-public-data.samples.shakespeare`
            WHERE
              word LIKE ""%raisin%""
            GROUP BY
              word;
        """""";
    
    ResolvedNodeExtended table = parser.extractLineage(sql);
    OutputLineage printer = new OutputLineage();
    printer.toYaml(table, ""test"", true);
```
Output:
```
name: ""test""
output_columns:
- name: ""word""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word""
- name: ""count""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word_count""
other_used_columns:
- name: ""_word_""
  references:
  - project_name: ""bigquery-public-data.samples.shakespeare""
    column_name: ""word""
    literal_value:
    - ""%raisin%""
type: ""select""
selected_tables:
- ""bigquery-public-data.samples.shakespeare""
```

### Notes
- This parser **never** accesses the data of the tables or any bigquery instance. The only 
  connection needed is to the metadata of the tables.
- The parser will use a default project+dataset if these are missing in the reference tables of 
  a project. Please refer to `src/main/java/com/borjav/data/options/Options.java` in case you 
  need to set a specific project.
- When using UDFs, they also have to be defined within the code. The parser won't be able to 
  resolve them if they are not defined in the code. Please refer to 
  `src/test/resources/sql/benchmark/udf.yaml`.
",0,1,1,mit,0.0,"['what', 'parser', 'do', 'what', 'ca', 'do', 'how', 'use', 'example', 'note']",6,"['what', 'do', 'parser', 'ca', 'how']"
linux-china/sieve-cache,main,"SIEVE Cache in Java
===================

SIEVE is simpler than LRU with following features:

* Simplicity: easy to implement and can be easily integrated into existing systems.
* Efficiency: achieves state-of-the-art efficiency on skewed workloads.
* Cache Primitive: facilitates the design of advanced eviction algorithms.

![How it works](how-it-works.png)

# Get started
 
* Add dependency to `pom.xml`:

```xml
<dependency>
    <groupId>org.mvnsearch</groupId>
    <artifactId>sieve-cache</artifactId>
    <version>0.1.0</version>
</dependency>
```
* Create a cache instance and use it:

```
   Cache<String> cache = new SieveCache<>();
   cache.put(""nick"", ""Jackie"");
   System.out.println(cache.get(""nick""));
```

# References
        
* SIEVE: https://cachemon.github.io/SIEVE-website/
* SIEVE is simpler than LRU: https://cachemon.github.io/SIEVE-website/blog/2023/12/17/sieve-is-simpler-than-lru/",1,1,1,apache-2.0,0.0,"['get', 'start', 'reference']",2,"['get', 'start', 'reference']"
ThomasVitale/llm-apps-java-langchain4j,main,"# LLM Applications with Java, Spring Boot, and LangChain4j

Samples showing how to build Java applications powered by Generative AI and LLMs
using the [LangChain4j Spring Boot](https://github.com/ThomasVitale/langchain4j-spring-boot) extension.

## Pre-Requisites

* Java 17+
* Docker/Podman
* [OpenAI](http://platform.openai.com) API Key (optional)
* [Ollama](https://ollama.ai) (optional)

## Content

### 1. Chat Models

| Project                                                                                                                   | Description                           |
|---------------------------------------------------------------------------------------------------------------------------|---------------------------------------|
| [chat-models-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/01-chat-models/chat-models-ollama) | Text generation with LLMs via Ollama. |
| [chat-models-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/01-chat-models/chat-models-openai) | Text generation with LLMs via OpenAI. |

### 2. Prompts

| Project                                                                                                                            | Description                                                         |
|------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|
| [prompts-basics-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-basics-ollama)        | Prompting using simple text with LLMs via Ollama.                   |
| [prompts-basics-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-basics-openai)        | Prompting using simple text with LLMs via OpenAI.                   |
| [prompts-messages-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-messages-ollama)    | Prompting using structured messages and roles with LLMs via Ollama. |
| [prompts-messages-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-messages-openai)    | Prompting using structured messages and roles with LLMs via OpenAI. |
| [prompts-templates-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-templates-ollama)  | Prompting using templates with LLMs via Ollama.                     |
| [prompts-templates-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/02-prompts/prompts-templates-openai)  | Prompting using templates with LLMs via OpenAI.                     |

### 3. Output Parsers

| Project                                                                                                                            | Description                                                                  |
|------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------|
| [output-parsers-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/03-output-parsers/output-parsers-ollama) | Parsing the LLM output as structured objects (Beans, Map, List) via Ollama.  |
| [output-parsers-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/03-output-parsers/output-parsers-openai) | Parsing the LLM output as structured objects (Beans, Map, List) via Open AI. |

### 4. Embedding Models

| Project                                                                                                                                    | Description                                              |
|--------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|
| [embedding-models-ollama](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/04-embedding-models/embedding-models-ollama) | Vector transformation (embeddings) with LLMs via Ollama. |
| [embedding-models-openai](https://github.com/ThomasVitale/llm-apps-java-langchain4j/tree/main/04-embedding-models/embedding-models-openai)   | Vector transformation (embeddings) with LLMs via OpenAI. |

### 5. Document Readers

_Coming soon_

### 6. Document Transformers

_Coming soon_

### 7. Document Writers

_Coming soon_

### 8. Vector Stores

_Coming soon_

### 9. Tools

_Coming soon_

### 10. Image Models

_Coming soon_

## References and Additional Resources

* [LangChain4j](https://github.com/langchain4j)
",0,0,1,apache-2.0,0.0,"['llm', 'application', 'java', 'spring', 'boot', 'content', 'chat', 'model', 'prompt', 'output', 'parser', 'embedding', 'model', 'document', 'reader', 'document', 'transformer', 'document', 'writer', 'vector', 'store', 'tool', 'image', 'model', 'reference', 'additional', 'resource']",14,"['model', 'document', 'llm', 'application', 'java']"
ThomasVitale/llm-apps-java-spring-ai,main,"# LLM and AI-Infused Applications with Java and Spring AI

Samples showing how to build Java applications powered by Generative AI and Large Language Models (LLMs) using [Spring AI](https://docs.spring.io/spring-ai/reference/).

## Pre-Requisites

* Java 23
* Docker/Podman

## Content

### 0. Use Cases

| Project                                                                                                                                 | Description                                                                 |
|-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
| [chatbot](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/chatbot)                                       | Chatbot using LLMs via Ollama.                                              |
| [question-answering](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/question-answering)                 | Question answering with documents (RAG) using LLMs via Ollama and PGVector. |
| [semantic-search](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/semantic-search)                       | Semantic search using LLMs via Ollama and PGVector.                         |
| [structured-data-extraction](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/structured-data-extraction) | Structured data extraction using LLMs via Ollama.                           |
| [text-classification](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/00-use-cases/text-classification)               | Text classification using LLMs via Ollama.                                  |

### 1. Chat Completion Models

| Project                                                                                                                                           | Description                                       |
|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------|
| [chat-models-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-mistral-ai)                 | Text generation with LLMs via Mistral AI.         |
| [chat-models-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-ollama)                         | Text generation with LLMs via Ollama.             |
| [chat-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-openai)                         | Text generation with LLMs via OpenAI.             |
| [chat-models-multiple-providers](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/01-chat-models/chat-models-multiple-providers) | Text generation with LLMs via multiple providers. |

### 2. Prompts, Messages, and Templates and Multimodality

| Project                                                                                                                                     | Description                                                              |
|---------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
| [prompts-basics-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-basics-ollama)                 | Prompting using simple text with LLMs via Ollama.                        |
| [prompts-basics-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-basics-openai)                 | Prompting using simple text with LLMs via OpenAI.                        |
| [prompts-messages-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-messages-ollama)             | Prompting using structured messages and roles with LLMs via Ollama.      |
| [prompts-messages-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-messages-openai)             | Prompting using structured messages and roles with LLMs via OpenAI.      |
| [prompts-templates-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-templates-ollama)           | Prompting using templates with LLMs via Ollama.                          |
| [prompts-templates-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/02-prompts/prompts-templates-openai)           | Prompting using templates with LLMs via OpenAI.                          |

### 3. Structured Output

| Project                                                                                                                               | Description                                                                     |
|---------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------|
| [structured-output-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/03-structured-output/structured-output-ollama) | Converting the LLM output to structured JSON and Java objects via Ollama.       |
| [structured-output-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/03-structured-output/structured-output-openai)    | Converting the LLM output to structured JSON and Java objects via Open AI. |

### 4. Multimodality

| Project                                                                                                                                | Description                                                              |
|----------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
| [multimodality-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/04-multimodality/multimodality-ollama) | Multimodality to include various media in a prompt with LLMs via Ollama. |
| [multimodality-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/04-multimodality/multimodality-openai)      | Multimodality to include various media in a prompt with LLMs via OpenAI. |

### 5. Function Calling

| Project                                                                                                                                          | Description                                |
|--------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------|
| [function-calling-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/05-function-calling/function-calling-mistral-ai) | Function calling with LLMs via Mistral AI. |
| [function-calling-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/05-function-calling/function-calling-ollama)         | Function calling with LLMs via Ollama.     |
| [function-calling-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/05-function-calling/function-calling-openai)         | Function calling with LLMs via OpenAI.     |

### 6. Embedding Models

| Project                                                                                                                                              | Description                                                                                     |
|------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|
| [embedding-models-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-mistral-ai)     | Vector transformation (embeddings) with LLMs via Mistral AI.                                    |
| [embedding-models-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-ollama)             | Vector transformation (embeddings) with LLMs via Ollama.                                        |
| [embedding-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-openai)             | Vector transformation (embeddings) with LLMs via OpenAI.                                        |
| [embedding-models-transformers](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/06-embedding-models/embedding-models-transformers) | Vector transformation (embeddings) with LLMs via ONNX Sentence Transformers. |

### 7. Data Ingestion

| Project                                                                                                                                                              | Description                                                                            |
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|
| [document-readers-json-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-json-ollama)                     | Reading and vectorizing JSON documents with LLMs via Ollama.                           |
| [document-readers-markdown-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-markdown-ollama)                 | Reading and vectorizing Markdown documents with LLMs via Ollama.                       |
| [document-readers-pdf-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-text-ollama)                      | Reading and vectorizing PDF documents with LLMs via Ollama.                            |
| [document-readers-text-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-text-ollama)                     | Reading and vectorizing text documents with LLMs via Ollama.                           |
| [document-readers-tika-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-readers-tika-ollama)                     | Reading and vectorizing documents with LLMs and Tika via Ollama.                       |
| [document-transformers-metadata-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-transformers-metadata-ollama)   | Enrich documents with keywords and summary metadata for enhanced retrieval via Ollama. |
| [document-transformers-splitters-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/07-data-ingestion/document-transformers-splitters-ollama) | Divide documents into chunks to fit the LLM context window via Ollama.                 |

### 8. Vector Stores

_Coming soon_

### 9. Retrieval Augmented Generation (RAG)

| Project                                                                                            | Description                                                                          |
|----------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|
| [rag-naive](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/09-rag/rag-naive)    | Basic question answering with documents (RAG) using LLMs via Ollama and PGVector.    |
| [rag-advanced](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/09-rag/rag-advanced) | Advanced question answering with documents (RAG) using LLMs via Ollama and PGVector. |

### 10. Memory

_Coming soon_

### 11. Image Models

| Project                                                                                                                      | Description                            |
|------------------------------------------------------------------------------------------------------------------------------|----------------------------------------|
| [image-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/11-image-models/image-models-openai) | Image generation with LLMs via OpenAI. |

### 12. Audio Models

| Project                                                                                                                                                  | Description                                |
|----------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------|
| [audio-models-speech-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/12-audio-models/audio-models-speech-openai)               | Speech generation with LLMs via OpenAI.    |
| [audio-models-transcription-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/12-audio-models/audio-models-transcription-openai) | Speech transcription with LLMs via OpenAI. |

### 13. Moderation Models

_Coming soon_

### 14. Observability

| Project                                                                                                                                                         | Description                              |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------|
| [observability-models-mistral-ai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-models-mistral-ai)            | LLM Observability for Mistral AI.        |
| [observability-models-ollama](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-models-ollama)                   | LLM Observability for Ollama.            |
| [observability-models-openai](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-models-openai)                   | LLM Observability for OpenAI.            |
| [observability-vector-stores-pgvector](https://github.com/ThomasVitale/llm-apps-java-spring-ai/tree/main/10-observability/observability-vector-stores-pgvector) | Vector Store Observability for PGVector. |

### 15. Evaluation

_Coming soon_

### 16. Agents

_Coming soon_

## References and Additional Resources

* [Spring AI Reference Documentation](https://docs.spring.io/spring-ai/reference/index.html)

### Conferences

* [Introducing Spring AI by Christian Tzolov and Mark Pollack (Spring I/O 2024)](https://www.youtube.com/watch?v=umKbaXsiCOY)
* [Spring AI Is All You Need by Christian Tzolov (GOTO Amsterdam 2024)](https://www.youtube.com/watch?v=vuhMti8B5H0)
* [Concerto for Java and AI - Building Production-Ready LLM Applications by Thomas Vitale (Spring I/O 2024)](https://www.youtube.com/watch?v=3zTf8NxF-6o)

### Videos

* [Building Intelligent Applications With Spring AI by Dan Vega (JetBrains Live Stream)](https://www.youtube.com/watch?v=x6KmUyPWy2Q)
* [Spring AI Series by Dan Vega](https://www.youtube.com/playlist?list=PLZV0a2jwt22uoDm3LNDFvN6i2cAVU_HTH)
* [Spring AI Series by Craig Walls](https://www.youtube.com/playlist?list=PLH5OU4wXVJc9aECkMUVPCi8g3pzs8pZ3E)
* [Spring AI Series by Josh Long](https://www.youtube.com/playlist?list=PLgGXSWYM2FpMXvYb681axdH5JSLEPPyrz)

### Demos

* [Airline Customer Support (Marcus Hellberg)](https://github.com/marcushellberg/java-ai-playground/tree/spring-ai)
* [Composer Assistant (Thomas Vitale)](https://github.com/ThomasVitale/concerto-for-java-and-ai)
* [Document Assistant (Marcus Hellberg)](https://github.com/marcushellberg/docs-assistant)
* [Flight Booking (Christian Tzolov)](https://github.com/tzolov/playground-flight-booking)

### Workshops

* [Spring AI - Zero to Hero (Adib Saikali, Christian Tzolov)](https://github.com/asaikali/spring-ai-zero-to-hero/tree/main)
",0,0,1,apache-2.0,3.0,"['llm', 'application', 'java', 'spring', 'ai', 'content', 'use', 'case', 'chat', 'completion', 'model', 'prompt', 'message', 'template', 'multimodality', 'structure', 'output', 'multimodality', 'function', 'call', 'embedding', 'model', 'data', 'ingestion', 'vector', 'store', 'retrieval', 'augmented', 'generation', 'rag', 'memory', 'image', 'model', 'audio', 'model', 'moderation', 'model', 'observability', 'evaluation', 'agent', 'reference', 'additional', 'resource', 'conference', 'video', 'demo', 'workshop']",25,"['model', 'multimodality', 'llm', 'application', 'java']"
JustAlittleWolf/ModDetectionPreventer,1.20.4,"<h1 style=""text-align: center"">Mod Detection Preventer</h1>

‚ö†Ô∏è For now please stop using this mod. Another method of detecting mods has been found, and I am not able to resolve it at this time. Using this mod might cause you to get banned. ‚ö†Ô∏è

<p align=""center"">
<img src=""src/main/resources/assets/moddetectionpreventer/icon.png"">
</p>

<p style=""text-align: center"">A simple mod that prevents a security vulnerability allowing servers to detect which mods are installed on
the client side.</p>


**While I try my best to keep this mod up to date, server admins might find a new method to access your mods-list. It is always recommended that you follow the server rules.**

## The Vulnerability

Minecraft has a feature that allows text (in chat, on signs, or in the bossbar) to be specified by a keybind the user
has set, or a translation key. The Client will then replace the translation key, or the keybind with the stored value.
This can be abused by the server by serving the client a sign with such a placeholder (for example Sodium:
`sodium.option_impact.low`). By immediately closing the sign screen, the client sends the edited text to the server
without ever seeing a sign open screen. The server can then detect wether you have that specific mod installed, by
checking if your client replaced the placeholder with the corresponding text (`sodium.option_impact.low -> Low`). If
you don't have Sodium installed, the placeholder will stay there
(`sodium.option_impact.low -> sodium.option_impact.low`).

This also works on the Anvil screen. The server could prompt you to open the anvil screen, with an item in the
renaming slot that has a translation key as it's name. The client would then rename the item to the corresponding
value and send an update to the server. (Huge thanks to Frog, `@croaak` on discord, for figuring this out)

This detection method works for any mod that has custom translations.

## The Fix

This mod fixes this issue by simply not resolving any translation or keybind placeholders on signs, except vanilla
ones. This makes it impossible for the server to use this method to detect installed mods.

To verify this works you can test it in a [test world](https://github.com/JustAlittleWolf/ModDetectionPreventer/raw/1.20.4/testWorld.zip).

## Intentions

~~While this feature can be used to prevent harm by detecting cheaters early, it is implemented improperly on some
servers, including [Cytooxien](CytooxienDetectedMods.md). Immediately banning players upon joining, simply because they
have tweakeroo installed, is unacceptable.~~
After a discussion with the developer of Cytooxien, they told me that players won't get banned for using tweakeroo, only kicked repeatedly.
",3,2,2,mit,0.0,"['the', 'vulnerability', 'the', 'fix', 'intention']",3,"['the', 'vulnerability', 'fix', 'intention']"
DJ-Raven/java-messenger,main,"# Java Messenger

This is a simple messenger app built using Java Swing for the client-side GUI, Node.js for the server-side API, and Socket-IO for real-time communication. The graphical user interface (GUI) is styled using FlatLaf.

**This project is still in development.**

<img src=""https://github.com/DJ-Raven/java-messenger/blob/main/screenshot/sample-2.png?raw=true"" alt=""sample 2"" width=""400""/>&nbsp;
<img src=""https://github.com/DJ-Raven/java-messenger/blob/main/screenshot/sample-3.png?raw=true"" alt=""sample 3"" width=""400""/>&nbsp;

## Demo
[Download Demo Test](messenger-client/demo/messenger-test-1.4.0.jar?raw=true)

Run demo with `java -jar messenger-test-<version>.jar` or `double-click` (Requires Java 8 or newer)

### Client libraries used (Java)
| Name | GitHub |
| ------------ | ------------ |
| FlatLaf | https://github.com/JFormDesigner/FlatLaf |
| MiG Layout | https://github.com/mikaelgrev/miglayout |
| REST Assured | https://github.com/rest-assured/rest-assured |
| Socket.IO Java client | https://github.com/socketio/socket.io-client-java |
| JSON-Java | https://github.com/stleary/JSON-java?tab=readme-ov-file |
| JLayer | https://github.com/umjammer/jlayer |
| mp3agic | https://github.com/mpatric/mp3agic |
| Thumbnailator | https://github.com/coobird/thumbnailator |
| Swing Modal Dialog | https://github.com/DJ-Raven/swing-modal-dialog |
### Server libraries used (Nodejs)
| Name | GitHub |
| ------------ | ------------ |
| Express | https://github.com/expressjs/express |
| socket.io | https://github.com/socketio/socket.io |
| jsonwebtoken | https://github.com/auth0/node-jsonwebtoken |
| bcrypt.js | https://github.com/dcodeIO/bcrypt.js |
| BlurHash | https://github.com/woltapp/blurhash/tree/master |
| Multer | https://github.com/expressjs/multer |
| MySQL2 | https://github.com/sidorares/node-mysql2 |
| nodemon `dev`| https://github.com/remy/nodemon |
| and more ... |  |
",0,0,1,mit,3.0,"['java', 'messenger', 'demo', 'client', 'library', 'use', 'java', 'server', 'library', 'use', 'nodejs']",4,"['java', 'library', 'use', 'messenger', 'demo']"
Yanyutin753/refresh-gpt-chat,main,"# refresh-gpt-chat

![Docker Image Size (tag)](https://img.shields.io/docker/image-size/yangclivia/refresh-gpt-chat/latest)![Docker Pulls](https://img.shields.io/docker/pulls/yangclivia/refresh-gpt-chat)[![GitHub Repo stars](https://img.shields.io/github/stars/Yanyutin753/refresh-gpt-chat?style=social)](https://github.com/Yanyutin753/refresh-gpt-chat/stargazers)

### ‰∏çËÆ∏ÁôΩÂ´ñÔºåËØ∑ÁªôÊàëÂÖçË¥πÁöÑstar‚≠êÂêßÔºåÂçÅÂàÜÊÑüË∞¢ÔºÅ

## ÁÆÄ‰ªã

#### [refresh-gpt-chat](https://github.com/Yanyutin753/refresh-gpt-chat) ‰∏≠ËΩ¨oaifreeÊàñËÄÖPandoraToV1ApiÁöÑ/v1/chat/completionsÂíåv1/images/generationsÊé•Âè£ÔºåÊäärefresh_tokenÂΩìkey‰ΩøÁî®ÔºåÂÜÖÂê´hashmap,Ëá™Âä®Êõ¥Êñ∞access_token,ÂÆåÁæéÁªßÊâøpandoraNextÁïô‰∏ãÁöÑrefresh_token,ÊîØÊåÅÂü∫Êú¨ÊâÄÊúâÁöÑÊ®°ÂûãÔºåÂ∞èÁôΩ‰πüËÉΩÂø´ÈÄü‰ΩøÁî®ÔºÅ

#### [refresh-gpt-chat](https://github.com/Yanyutin753/refresh-gpt-chat) Intercept the /v1/chat/completions and v1/images/generations interface of oaifree or PandoraToV1Api, use the refresh_token as the key, which contains a hashmap, automatically update the access_token, perfectly inherit the refresh_token left by pandoraNext, support almost all models, even beginners can use it quickly!

-----

> ## ÂäüËÉΩÁâπÊÄß
>
> * **ÈÄöËøárefresh_tokenËá™Âä®Êõ¥Êñ∞access_token**ÔºöÊñπ‰æø‰ΩøÁî®
>
> * **ÈÄöËøárefresh_token‰Ωú‰∏∫keyËøõË°å‰ΩøÁî®**ÔºöÊõ¥Â•ΩÊîæÂÖ•one-apiÈáåÈù¢
>
> * **ÊîØÊåÅÂèç‰ª£v1/images/generationsÊé•Âè£**ÔºöË∞ÉÁî®dall-e-3ÁîªÂõæÊõ¥Âá∫Ëâ≤
>
> * **ÊîØÊåÅÂèç‰ª£v1/audio/speechÊé•Âè£**ÔºöË∞ÉÁî®tts-1ÔºåÊñáÂ≠óËΩ¨ËØ≠Èü≥
>
> * **ÊîØÊåÅÂèç‰ª£v1/audio/transcriptionsÊé•Âè£**ÔºöË∞ÉÁî®whisper-1ÔºåËØ≠Ë®ÄËΩ¨ÊñáÂ≠ó
>
> * **ÂèØÈÄÇÁî®‰∫éoaifree„ÄÅPandoraToV1ApiÈ°πÁõÆ**ÔºöÂèç‰ª£ÊúçÂä°ÔºåÁõ¥Êé•‰ΩøÁî®
>
> * **Ëá™ÂÆö‰πâÂêéÁºÄ**ÔºöÈò≤Ê≠¢urlË¢´Êª•Áî®
>
> * **ÊîØÊåÅbase64ËØÜÂõæ**ÔºöËÉΩËΩ¨ÂèëËØÜÂõæÊé•Âè£
>
> * **ÂõûÂ§çÊâìÂ≠óÊú∫Â§ÑÁêÜ**ÔºöÂõûÂ§çÊõ¥ÊµÅÁïÖÔºåÂáèÂ∞ëÂç°È°ø
>
> * **‰∏™‰∫∫ÈÉ®ÁΩ≤**Ôºö‰øùÈöúÈöêÁßÅÂÆâÂÖ®
>

## [‚ú®ÁÇπÂáªÊü•ÁúãÊñáÊ°£Á´ô](https://apifox.com/apidoc/shared-4b9a7517-3f80-47a1-84fc-fcf78827a04a)

> [!important]
>
> * Êú¨È°πÁõÆÂè™Êèê‰æõËΩ¨ÂèëÊé•Âè£ü•∞
> * ÂºÄÊ∫êÈ°πÁõÆ‰∏çÊòìÔºåËØ∑ÁÇπ‰∏™ÊòüÊòüÂêßÔºÅÔºÅÔºÅ

## Sponsor

### Â¶ÇÊûú‰Ω†ËßâÂæóÊàëÁöÑÂºÄÊ∫êÈ°πÁõÆÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåÂèØ‰ª•ËµûÂä©Êàë‰∏ÄÊùØÂíñÂï°ÂòõÔºåÂçÅÂàÜÊÑüË∞¢ÔºÅÔºÅÔºÅ

<img src=""https://github.com/Yanyutin753/RefreshToV1Api/assets/132346501/e5ab5e80-1cf2-4822-ae36-f9d0b11ed1b1"" width=""300"" height=""300"">

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=Yanyutin753/refresh-gpt-chat&type=Date)](https://star-history.com/#Yanyutin753/refresh-gpt-chat&Date)
",10,1,1,mit,0.0,"['https', 'https', 'intercept', 'interface', 'oaifree', 'use', 'key', 'contain', 'hashmap', 'automatically', 'update', 'perfectly', 'inherit', 'leave', 'pandoranext', 'support', 'almost', 'model', 'even', 'beginner', 'use', 'quickly', 'http', 'sponsor', 'star', 'history']",10,"['https', 'use', 'intercept', 'interface', 'oaifree']"
xdev-software/spring-data-eclipse-store,develop,"[![Latest version](https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?logo=apache%20maven)](https://mvnrepository.com/artifact/software.xdev/spring-data-eclipse-store)
[![Build](https://img.shields.io/github/actions/workflow/status/xdev-software/spring-data-eclipse-store/check-build.yml?branch=develop)](https://github.com/xdev-software/spring-data-eclipse-store/actions/workflows/check-build.yml?query=branch%3Adevelop)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=xdev-software_spring-data-eclipse-store&metric=alert_status)](https://sonarcloud.io/dashboard?id=xdev-software_spring-data-eclipse-store)
[![Documentation](https://img.shields.io/maven-central/v/software.xdev/spring-data-eclipse-store?label=docs)](https://spring-eclipsestore.xdev.software/)

<div align=""center"">
    <img src=""assets/Logo.png"" height=""200"" alt=""XDEV Spring-Data Eclipse-Store Logo"">
</div>

# spring-data-eclipse-store

A library to simplify using [EclipseStore](https://eclipsestore.io/) in the [Spring environment](https://spring.io/projects/spring-data/).

What makes this library special is, that it creates a working copy of the data.
This way EclipseStore behaves almost exactly like relational database from a coding perspective.

## Features

The library provides following features:

* Enforces the
  **[Spring data repository concept](https://docs.spring.io/spring-data/jpa/reference/repositories/core-concepts.html)**
  for EclipseStore by
  using [working copies](https://xdev-software.github.io/spring-data-eclipse-store/working-copies.html)
* **[Drop in compatible](https://xdev-software.github.io/spring-data-eclipse-store/installation.html#drop-in-compatible)** for your existing Spring application
* Utilizes **ultra-fast EclipseStore serializing and storing**
* Enables your application to **select
  any [EclipseStore target](https://docs.eclipsestore.io/manual/storage/storage-targets/index.html)** (e.g.
  [PostgreSQL](https://docs.eclipsestore.io/manual/storage/storage-targets/sql-databases/postgresql.html),
  [AWS S3](https://docs.eclipsestore.io/manual/storage/storage-targets/blob-stores/aws-s3.html) or
  [IBM COS](https://github.com/xdev-software/eclipse-store-afs-ibm-cos))
* Can save up to **99%[^1] of monthly costs** in the IBM Cloud and up to 82%[^2] in the AWS Cloud

[^1]:If the COS Connector is used in the IBM Cloud instead of a PostgreSQL and approx. 10,000 entries with a total size
of 1
GB of data are stored. ([IBM Cloud Pricing](https://cloud.ibm.com/estimator/estimates), as of 08.01.2024)

[^2]: If the S3 connector is used instead of DynamoDB under the same conditions at
AWS. ([AWS Pricing Calculator](https://calculator.aws/#/estimate?id=ab85cddf77f0d1aa0457111ed82785dfb836b1d8), as of
08.01.2024)

## Installation & Usage

[**Installation
guide** for the latest release](https://github.com/xdev-software/spring-data-eclipse-store/releases/latest#Installation)

[**Detailed
instructions** are in the documentation](https://xdev-software.github.io/spring-data-eclipse-store/installation.html)

### Supported versions

| Spring-Data-Eclipse-Store | Java   | Spring Data | EclipseStore |
|---------------------------|--------|-------------|--------------|
| ``<= 1.0.2``              | ``17`` | ``3.2.2``   | ``1.1.0``    |
| ``1.0.3/1.0.4``           | ``17`` | ``3.2.3``   | ``1.2.0``    |
| ``1.0.5-1.0.7``           | ``17`` | ``3.2.5``   | ``1.3.2``    |
| ``1.0.8-1.0.10``          | ``17`` | ``3.3.1``   | ``1.3.2``    |
| ``2.0.0-2.1.0``           | ``17`` | ``3.3.2``   | ``1.4.0``    |
| ``>= 2.2.0``              | ``17`` | ``3.3.4``   | ``1.4.0``    |

## Demo

To see how easy it is to implement EclipseStore in your Spring project, take a look at
the [demos](./spring-data-eclipse-store-demo):

* [Simple demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/simple)
* [Complex demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/complex)
* [Demo with coexisting JPA](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-jpa/src/main/java/software/xdev/spring/data/eclipse/store/jpa)
* [Dual storage demo](https://github.com/xdev-software/spring-data-eclipse-store/tree/develop/spring-data-eclipse-store-demo/src/main/java/software/xdev/spring/data/eclipse/store/demo/dual/storage)

> [!NOTE]  
> Since the library is using reflection to copy data, the following JVM-Arguments may have to be set:
> ```
> --add-opens=java.base/java.util=ALL-UNNAMED
> --add-exports java.base/jdk.internal.misc=ALL-UNNAMED
> --add-opens=java.base/java.lang=ALL-UNNAMED
> --add-opens=java.base/java.time=ALL-UNNAMED 
> ```

## Support

If you need support as soon as possible, and you can't wait for any pull request, feel free to
use [our support](https://xdev.software/en/services/support).

## Contributing
See the [contributing guide](./CONTRIBUTING.md) for detailed instructions on how to get started with our project.

## Dependencies and Licenses

View the [license of the current project](LICENSE).
",18,2,11,apache-2.0,147.0,"['feature', 'installation', 'usage', 'support', 'version', 'demo', 'support', 'contribute', 'dependency', 'license']",8,"['support', 'feature', 'installation', 'usage', 'version']"
lgdd/liferay-client-extensions-samples,main,"![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/lgdd/liferay-client-extensions-samples/builder.yml?label=auto-update&style=flat)
![GitHub last commit](https://img.shields.io/github/last-commit/lgdd/liferay-client-extensions-samples?color=informational&label=latest%20update)

# Liferay Client Extensions Samples

Automatically mirror official client extensions samples you can find in the main repo here: https://github.com/liferay/liferay-portal/tree/master/workspaces/liferay-sample-workspace/client-extensions

The goal of this repository is to ease the process of trying out client extensions samples by removing the burden of cloning liferay-portal & by renaming ambiguous client extensions (e.g. `custom-element-1`).

The official readme file for those samples is mirrored in the [HOW-TO.md](HOW-TO.md).

The new naming is an arbitrary choice based on the description provided by Liferay in the readme file. Here's the correspondance for the renamed client extensions:

| **Original name** | **New name**                                                 |
|-------------------|--------------------------------------------------------------|
| liferay-sample-custom-element-1  | liferay-sample-custom-element-vanilla-js      |
| liferay-sample-custom-element-2  | liferay-sample-custom-element-react-scripts   |
| liferay-sample-custom-element-3  | liferay-sample-custom-element-angular         |
| liferay-sample-custom-element-4  | liferay-sample-custom-element-react-dom       |
| liferay-sample-custom-element-5  | liferay-sample-custom-element-react-clayui    |
| liferay-sample-etc-frontend      | liferay-sample-etc-frontend-shared-import-map |
| liferay-sample-global-js-1       | liferay-sample-global-js-page			           |
| liferay-sample-global-js-2       | liferay-sample-global-js-page-with-attributes |
| liferay-sample-global-js-2       | liferay-sample-global-js-instance      			 |
| liferay-sample-iframe-1          | liferay-sample-iframe-counter                 |
| liferay-sample-iframe-2          | liferay-sample-iframe-wikipedia               |
| liferay-sample-theme-css-1       | liferay-sample-theme-css-styled               |
| liferay-sample-theme-css-2       | liferay-sample-theme-css-unstyled             |
| liferay-sample-theme-css-3       | liferay-sample-theme-css-token-definition     |
| liferay-sample-theme-spritemap-1 | liferay-sample-theme-spritemap-single-svg     |
| liferay-sample-theme-spritemap-2 | liferay-sample-theme-spritemap-multiple-svg   |

## Aditional information

If the build fails because of the Node version, you can force the use of a specific version by changing the build.gradle with something like:

```gradle
apply plugin: ""com.liferay.node""

node {
	nodeVersion = ""20.10.0""
	global = false
}
```
> Note that you can apply this for a specific client extension or all client extensions if you change the value in the parent folder (`client-extensions` or your liferay workpace).",0,0,1,mit,1.0,"['liferay', 'client', 'extension', 'sample', 'aditional', 'information']",2,"['liferay', 'client', 'extension', 'sample', 'aditional']"
javpower/easy-flv,main,"<!-- Easy-FLV: Java RTSP/RTMP to FLV Converter -->
# üì∫ Easy-FLV: Java RTSP/RTMP to FLV Converter

[![GitHub stars](https://img.shields.io/github/stars/javpower/easy-flv.svg)](https://github.com/javpower/easy-flv) 
[![GitHub issues](https://img.shields.io/github/issues/javpower/easy-flv.svg)](https://github.com/javpower/easy-flv/issues) 
[![Apache License 2.0](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) 
[![Java Version](https://img.shields.io/badge/java-1.8+-orange.svg)](https://adoptopenjdk.net/) 
[![Spring Boot](https://img.shields.io/badge/spring--boot-2.7.+-blue.svg)](https://spring.io/projects/spring-boot) 

## üåü About Easy-FLV
Easy-FLV is a Java library that converts RTSP or RTMP video streams into FLV format for playback in web browsers. It provides an efficient, stable, and easily integrable solution for real-time video monitoring, live streaming, and video stream processing.

### Why Choose Easy-FLV?
- **Efficient Conversion**: Quickly converts video streams to FLV format with no complex configuration required.
- **Easy Integration**: Used as a Spring Boot Starter, it can be easily integrated into any Java project.
- **Modern Browser Support**: Supports all major modern browsers without the need for additional plugins.
- **Real-time Stream Processing**: Suitable for the conversion of real-time video streams, such as security monitoring and live broadcasting.

## üìÑ Screenshots
Below are screenshots of Easy-FLV in action:

![img_1.png](img_1.png)
![img.png](img.png)

## üöÄ Quick Start

### Add Maven Dependency
Include the following Maven dependency in your Spring Boot project:

```xml
<dependency>
    <groupId>io.github.javpower</groupId>
    <artifactId>rtsp-converter-flv-spring-boot-starter</artifactId>
    <version>1.5.9.1</version>
</dependency>
```

### Implement Interface
Create a service class that implements the `IOpenFLVService` interface to provide the stream address:

```java
@Service
public class RtspDataService implements IOpenFLVService {

    @Override
    public String getUrl(Integer channel) {
        // Retrieve the RTSP stream address based on the channel
        return ""rtsp://10.11.9.251:554/openUrl/16HV8mA"";
    }
}
```

### Configure YAML
Configure Easy-FLV in your `application.yml`:

```yaml
easy:
  flv:
    host: http://localhost:8200
```

### Use Interface
To get the converted stream address and play it in a browser:

- Conversion URL: `GET http://ip:port/get/flv/hls/stream_{channel}.flv`
- Direct Browser Playback: `GET http://ip:port/flv/hls/stream_{channel}.flv`

### Direct Usage
If you prefer not to implement an interface, you can directly encode the stream address and convert it:

```java
public static void main(String[] args) throws UnsupportedEncodingException {
    String url = ""rtsp://XXXXXXXX"";
    String encodedUrl = java.net.URLEncoder.encode(url, ""UTF-8"");
    System.out.println(""Encoded Stream URL: "" + encodedUrl);
}
```

- Conversion URL: `GET http://ip:port/get/flv/hls/stream?url=EncodedAddress`
- Direct Browser Playback: `GET http://ip:port/flv/hls/stream?url=EncodedAddress`

## üõ†Ô∏è Contribution
Contributions of any kind are welcome, including but not limited to reporting bugs, submitting fixes, adding new features, and improving documentation.

## üìÑ License
Easy-FLV is released under the [Apache License 2.0](LICENSE).

## üìß Contact
- Email: [javpower@163.com](mailto:javpower@163.com)
- GitHub: [https://github.com/javpower/easy-flv](https://github.com/javpower/easy-flv)
- Gitee: [https://gitee.com/giteeClass/easy-flv](https://gitee.com/giteeClass/easy-flv)
",0,3,1,apache-2.0,1.0,"['java', 'flv', 'converter', 'about', 'why', 'choose', 'screenshots', 'quick', 'start', 'add', 'maven', 'dependency', 'implement', 'interface', 'configure', 'yaml', 'use', 'interface', 'direct', 'usage', 'contribution', 'license', 'contact']",13,"['interface', 'java', 'flv', 'converter', 'about']"
oldmanpushcart/qianfan4j,main,"# qianfan4jÔºöÂçÉÂ∏Ü Java SDK
![License](https://img.shields.io/badge/License-Apache_2.0-green.svg)
![JDK17+](https://img.shields.io/badge/JDK-17+-blue.svg)
![LLM-ÊñáÂøÉ‰∏ÄË®Ä](https://img.shields.io/badge/LLM-%E6%96%87%E5%BF%83%E4%B8%80%E8%A8%80-blue.svg)

`qianfan4j`ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÂçÉÂ∏ÜÂ§ßÊ®°ÂûãÂπ≥Âè∞ÁöÑÈùûÂÆòÊñπJavaÂÆ¢Êà∑Á´ØÔºåÂü∫‰∫é`JDK17`ÊûÑÂª∫„ÄÇÂÆÉÊó®Âú®Êèê‰æõ‰∏Ä‰∏™ÂäüËÉΩ‰∏∞ÂØå„ÄÅÊòì‰∫éÈõÜÊàêÂíå‰ΩøÁî®ÁöÑJavaÂ∫ìÔºå‰ª•‰æøÂºÄÂèëËÄÖËÉΩÂ§üÈÄöËøáÂçÉÂ∏ÜAPIËΩªÊùæÂÆûÁé∞ÂØπËØù„ÄÅÁª≠ÂÜô„ÄÅÂêëÈáèÂµåÂÖ•ÂíåÂõæÂÉèÂ§ÑÁêÜÁ≠âÂäüËÉΩ„ÄÇ

> ËØ∑Ê≥®ÊÑèÔºöÂú®‰ΩøÁî®`qianfan4j`Êó∂Ôºå‰Ω†ÈúÄË¶ÅÈÅµÂÆàÂçÉÂ∏ÜAPIÁöÑ‰ΩøÁî®Êù°Ê¨æÂíåÊù°‰ª∂„ÄÇ

## ‰∏Ä„ÄÅ‰∏ªË¶ÅÂäüËÉΩ

`qianfan4j`ÊîØÊåÅ‰ª•‰∏ãÂçÉÂ∏ÜAPIÂäüËÉΩÔºö

- **ÂØπËØùÔºàChatÔºâ**
    - Êèê‰æõÁî®Êà∑‰∏éÂçÉÂ∏ÜÊ®°ÂûãËøõË°åËá™ÁÑ∂ËØ≠Ë®ÄÂØπËØù„ÄÇ
    - ÊîØÊåÅÁî®Êà∑Âú®‰∏ÄÊ¨°ÂØπËØù‰∏≠Ëß¶ÂèëÂ§ö‰∏™ÂáΩÊï∞Ë∞ÉÁî®„ÄÇ

- **Áª≠ÂÜôÔºàCompletionsÔºâ**
    - Êèê‰æõÊñáÊú¨Áª≠ÂÜôÂäüËÉΩÔºåÂèØ‰ª•Ê†πÊçÆÁªôÂÆöÁöÑÊñáÊú¨ÁâáÊÆµÁîüÊàêÂêéÁª≠ÂÜÖÂÆπ„ÄÇ

- **ÂêëÈáèÔºàEmbeddingsÔºâ**
    - Â∞ÜÊñáÊú¨ËΩ¨Êç¢‰∏∫ÂêëÈáèË°®Á§∫ÔºåÁî®‰∫éÊñáÊú¨Áõ∏‰ººÂ∫¶ÊØîËæÉ„ÄÅËÅöÁ±ªÁ≠â‰ªªÂä°„ÄÇ

- **ÂõæÂÉèÔºàImagesÔºâ**
    - **ÂõæÁîüÊñáÔºö** Ê†πÊçÆÊèê‰æõÁöÑÂõæÂÉèÁîüÊàêÊèèËø∞ÊÄßÊñáÊú¨„ÄÇ
    - **ÊñáÁîüÂõæÔºö** Â∞ÜÊñáÊú¨ÊèèËø∞ËΩ¨Êç¢‰∏∫Áõ∏Â∫îÁöÑÂõæÂÉè„ÄÇ

- **Êèí‰ª∂Â∫îÁî®ÔºàPluginÔºâ**
    - **Áü•ËØÜÂ∫ìÔºö** ËÆ©ÂºÄÂèëËÄÖÔºàÁîöËá≥ÈùûÊäÄÊúØ‰∫∫ÂëòÔºâ‰ª•ÁÆÄÂçïÁöÑÊñπÂºèÁÆ°ÁêÜÊï∞ÊçÆÈõÜÔºåÂåÖÊã¨ÂàÜÁâá„ÄÅÊ∏ÖÊ¥ó„ÄÅÂêëÈáèËÆ°ÁÆóÁ≠âËÉΩÂäõ„ÄÇ
    - **Êô∫ÊÖßÂõæÈóÆÔºö** ÂõæÁâáÁêÜËß£ËØÜÂà´ÔºåÂπ∂ÂØπÂõæÁâáÂÜÖÂÆπËøõË°åÊÄªÁªìÊ¶ÇËø∞ÔºåËæìÂá∫Áî®Êà∑ÂèØÁêÜËß£ÁöÑÂè•Â≠êÊàñÊÆµËêΩ„ÄÇ
    - **ÁôæÂ∫¶ÊêúÁ¥¢Ôºö** ÁôæÂ∫¶ÊêúÁ¥¢Êèí‰ª∂,ÂÆûÊó∂Ëé∑ÂèñÊñ∞Èóª„ÄÅËÇ°Á•®‰ø°ÊÅØÁ≠â
    - **ÁΩëÈ°µËß£ÊûêÔºö** ‰ªé‰ªª‰ΩïÁΩëÈ°µÈìæÊé•Ëé∑ÂèñÊâÄÈúÄÊñáÊú¨‰ø°ÊÅØ
    - **Â§©Ê∞îÊü•ËØ¢Ôºö** ËæìÂÖ•Âú∞ÂùÄÔºåÁªôÂá∫ÂΩìÂâçËØ•Âú∞ÂùÄÂ§©Ê∞îÔºõËæìÂÖ•Âú∞ÂùÄ+Êó∂Èó¥ÔºåÁªôÂá∫ËØ•Âú∞ÂùÄÊó∂Èó¥ÊÆµÂÜÖÁöÑÂ§©Ê∞î

## ‰∫å„ÄÅÁ≥ªÁªüË¶ÅÊ±Ç

1. **JDK17**ÊàñÊõ¥È´òÁâàÊú¨

## ‰∏â„ÄÅË∑ëÈÄöÊµãËØï

1. Âà∞[ÁôæÂ∫¶Êô∫ËÉΩ‰∫ë](https://cloud.baidu.com/)‰∏äÊ≥®ÂÜå‰∏Ä‰∏™Ë¥¶Âè∑
2. Âú®ÁôæÂ∫¶Êô∫ËÉΩ‰∫ë‰∏ä[ÂàõÂª∫‰∏Ä‰∏™Â∫îÁî®](https://console.bce.baidu.com/qianfan/ais/console/applicationConsole/application)Ôºå‰Ω†Â∞Ü‰ºöÂæóÂà∞‰∏Ä‰∏™API KeyÂíå‰∏Ä‰∏™Secret Key
3. Â£∞ÊòéÁéØÂ¢ÉÂèòÈáèÔºö
   ```shell
   export QIANFAN_AK=<YOUR APP-KEY>
   export QIANFAN_SK=<YOUR SECRET-KEY>
   ```
   Ê≥®ÊÑèÔºö[PluginAppTestCase](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/pluginapp/PluginAppTestCase.java)
   ÊµãËØïÁî®‰æãÂ¶ÇÊûúË¶ÅË∑ëÈÄöÔºåÈúÄË¶ÅÂú®ÂçÉÂ∏ÜÂ§ßÊ®°ÂûãÂπ≥Âè∞ÂàõÂª∫Êèí‰ª∂Â∫îÁî®ÔºåÂºÄÈÄö`ocr-chat`Êèí‰ª∂„ÄÇ Âπ∂Âú®ÈÖçÁΩÆÊñá‰ª∂‰∏≠ËøΩÂä†‰∏ÄË°å
   ```shell
   export QIANFAN_PLUGIN_APP_ID=<YOUR PLUGIN-APP ID>
   ```
4. ËøêË°åÊµãËØïÁî®‰æãÔºö`mvn test`

## Âõõ„ÄÅ‰æùËµñ‰ΩøÁî®

È°πÁõÆ‰ªìÂ∫ìÊâòÁÆ°Âú®Maven‰∏≠Â§Æ‰ªìÂ∫ìÔºå‰Ω†ÂèØ‰ª•Âú®`pom.xml`‰∏≠Ê∑ªÂä†‰ª•‰∏ã‰æùËµñÔºö
```xml
<dependency>
    <groupId>io.github.oldmanpushcart</groupId>
    <artifactId>qianfan4j</artifactId>
    <version>1.0.0</version>
</dependency>
```

### ÂàõÂª∫ÂÆ¢Êà∑Á´Ø

```java
// Á∫øÁ®ãÊ±†
final var executor = Executors.newFixedThreadPool(10);

// ÂçÉÂ∏ÜÂÆ¢Êà∑Á´Ø
final var client = QianFanClient.newBuilder()
    .ak(""***"") // API Key
    .sk(""***"") // Secret Key
    .executor(executor)
    .connectTimeout(Duration.ofSeconds(30))
    .build();
```

### ÂØπËØùÁ§∫‰æã

```java
// ÂØπËØùËØ∑Ê±Ç
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .messages(Message.ofUser(""hello!""))
    .build();

// ÂØπËØùÂìçÂ∫î
final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response);
```

ËæìÂá∫ÁªìÊûú

```text
2024-03-10 17:53:43 DEBUG qianfan://token/refresh success! expired=1712656423872;
2024-03-10 17:53:43 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""hello!""}]}
2024-03-10 17:53:45 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-7sntu8vk0p"",""object"":""chat.completion"",""created"":1710064425,""result"":""‰Ω†Â•ΩÔºÅÂæàÈ´òÂÖ¥‰∏é‰Ω†‰∫§ÊµÅ„ÄÇÊúâ‰ªÄ‰πàÊàëÂèØ‰ª•Â∏ÆÂä©‰Ω†ÁöÑÂêóÔºüËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ"",""is_truncated"":false,""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":2,""completion_tokens"":16,""total_tokens"":18}}
‰Ω†Â•ΩÔºÅÂæàÈ´òÂÖ¥‰∏é‰Ω†‰∫§ÊµÅ„ÄÇÊúâ‰ªÄ‰πàÊàëÂèØ‰ª•Â∏ÆÂä©‰Ω†ÁöÑÂêóÔºüËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ
```

### ÂáΩÊï∞Ë∞ÉÁî®Á§∫‰æã

Âú®`qianfan4j`‰∏≠ËøõË°åÂáΩÊï∞ÁöÑÂ£∞ÊòéÂ∞Ü‰ºöÂèòÊàê‰∏Ä‰∏™ÈùûÂ∏∏ÁÆÄÂçïÁöÑ‰∫ãÊÉÖ„ÄÇÊ°ÜÊû∂Ëá™Âä®Â∏Æ‰Ω†ÂÆåÊàê‰∫ÜÂáΩÊï∞ÁöÑÂ£∞ÊòéÂíåÂèÇÊï∞ÁöÑËß£Êûê„ÄÇËøôÊ†∑Ôºå‰Ω†Â∞±ÂèØ‰ª•‰∏ìÊ≥®‰∫éÂáΩÊï∞ÁöÑÂÆûÁé∞ÔºåËÄå‰∏çÁî®ÂÜçÂéªÂÖ≥ÂøÉÂáΩÊï∞ÁöÑÂ£∞ÊòéÂíåÂèÇÊï∞ÁöÑËß£Êûê‰∫Ü„ÄÇ

ÂáΩÊï∞Â£∞Êòé

```java
@ChatFn(name = ""echo"", description = ""echo words"", examples = {
    @ChatFn.Example(
        question = ""echo: words"",
        thoughts = ""ÂΩìÁî®Êà∑ËæìÂÖ•echo:ÂºÄÂ§¥ÁöÑÊ∂àÊÅØÊó∂ÔºåÊú∫Âô®‰∫∫‰ºöÂéüÊ†∑ËøîÂõûÁî®Êà∑ËæìÂÖ•ÁöÑÊ∂àÊÅØ"",
        arguments = """"""
            {
                ""words"": ""hello, world""
            }
            """"""
    )
})
public class EchoFunction implements ChatFunction<EchoFunction.Echo, EchoFunction.Echo> {

    @Override
    public CompletableFuture<Echo> call(Echo echo) {
        return CompletableFuture.completedFuture(new Echo(echo.words()));
    }

    public record Echo(String words) {

    }

}
```

ÂØπËØùËß¶ÂèëÂáΩÊï∞Ë∞ÉÁî®

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .functions(new EchoFunction())
    .messages(Message.ofUser(""echo: HELLO WORLD!""))
    .build();

final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response.content());
```

ËæìÂá∫ÁªìÊûú

```text
2024-03-10 17:58:37 DEBUG qianfan://token/refresh success! expired=1712656717750;
2024-03-10 17:58:37 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""echo: HELLO WORLD!""}],""functions"":[{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""ÂΩìÁî®Êà∑ËæìÂÖ•echo:ÂºÄÂ§¥ÁöÑÊ∂àÊÅØÊó∂ÔºåÊú∫Âô®‰∫∫‰ºöÂéüÊ†∑ËøîÂõûÁî®Êà∑ËæìÂÖ•ÁöÑÊ∂àÊÅØ""}}]]}]}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-aqte3cvapb"",""object"":""chat.completion"",""created"":1710064720,""result"":"""",""is_truncated"":false,""need_clear_history"":false,""function_call"":{""name"":""echo"",""thoughts"":""ÂΩìÁî®Êà∑ËæìÂÖ•echo:ÂºÄÂ§¥ÁöÑÊ∂àÊÅØÊó∂ÔºåÊú∫Âô®‰∫∫‰ºöÂéüÊ†∑ËøîÂõûÁî®Êà∑ËæìÂÖ•ÁöÑÊ∂àÊÅØ"",""arguments"":""{\""words\"":\""HELLO WORLD!\""}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":112,""completion_tokens"":24,""total_tokens"":136}}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0/function <= {""words"":""HELLO WORLD!""}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0/function => {""words"":""HELLO WORLD!""}
2024-03-10 17:58:40 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""echo: HELLO WORLD!""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\""words\"":\""HELLO WORLD!\""}"",""thoughts"":""ÂΩìÁî®Êà∑ËæìÂÖ•echo:ÂºÄÂ§¥ÁöÑÊ∂àÊÅØÊó∂ÔºåÊú∫Âô®‰∫∫‰ºöÂéüÊ†∑ËøîÂõûÁî®Êà∑ËæìÂÖ•ÁöÑÊ∂àÊÅØ""}},{""role"":""function"",""content"":""{\""words\"":\""HELLO WORLD!\""}"",""name"":""echo""}],""functions"":[{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""ÂΩìÁî®Êà∑ËæìÂÖ•echo:ÂºÄÂ§¥ÁöÑÊ∂àÊÅØÊó∂ÔºåÊú∫Âô®‰∫∫‰ºöÂéüÊ†∑ËøîÂõûÁî®Êà∑ËæìÂÖ•ÁöÑÊ∂àÊÅØ""}}]]},{""name"":""echo"",""description"":""echo words"",""parameters"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""responses"":{""type"":""object"",""properties"":{""words"":{""type"":""string""}}},""examples"":[[{""role"":""user"",""content"":""echo: words""},{""role"":""assistant"",""function_call"":{""name"":""echo"",""arguments"":""{\n    \""words\"": \""hello, world\""\n}\n"",""thoughts"":""ÂΩìÁî®Êà∑ËæìÂÖ•echo:ÂºÄÂ§¥ÁöÑÊ∂àÊÅØÊó∂ÔºåÊú∫Âô®‰∫∫‰ºöÂéüÊ†∑ËøîÂõûÁî®Êà∑ËæìÂÖ•ÁöÑÊ∂àÊÅØ""}}]]}]}
2024-03-10 17:58:42 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-tj5rhmj89g"",""object"":""chat.completion"",""created"":1710064722,""result"":""ÊÇ®Â•ΩÔºåÊÇ®ËæìÂÖ•ÁöÑÊ∂àÊÅØÊòØÔºöHELLO WORLD!ÔºåÊàëÂ∑≤ÂéüÊ†∑ËøîÂõû„ÄÇËØ∑ÈóÆÊúâÂÖ∂‰ªñÈúÄË¶ÅÂêóÔºü"",""is_truncated"":false,""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":225,""completion_tokens"":21,""total_tokens"":246}}
ÊÇ®Â•ΩÔºåÊÇ®ËæìÂÖ•ÁöÑÊ∂àÊÅØÊòØÔºöHELLO WORLD!ÔºåÊàëÂ∑≤ÂéüÊ†∑ËøîÂõû„ÄÇËØ∑ÈóÆÊúâÂÖ∂‰ªñÈúÄË¶ÅÂêóÔºü
```

### Â§öÂáΩÊï∞Ë∞ÉÁî®Á§∫‰æã

`qianfan4j`‰ºöÊ†πÊçÆLLMÁöÑÊé®ÁêÜËÉΩÂäõÔºåËá™Âä®ÊãÜËß£Â§öÂáΩÊï∞Ë∞ÉÁî®ÁöÑ‰ªªÂä°ÔºåÁÑ∂ÂêéÊåâÁÖßÊãÜËß£ÁöÑ‰ªªÂä°È°∫Â∫è‰æùÊ¨°Ë∞ÉÁî®ÂáΩÊï∞„ÄÇËøôÊ†∑Ôºå‰Ω†Â∞±ÂèØ‰ª•‰∏ìÊ≥®‰∫éÂáΩÊï∞ÁöÑÂÆûÁé∞ÔºåËÄå‰∏çÁî®ÂÜçÂéªÂÖ≥ÂøÉÂáΩÊï∞ÁöÑË∞ÉÁî®È°∫Â∫è‰∫Ü„ÄÇ
Êàë‰ª¨ÂÅáËÆæÊúâ‰∏§‰∏™ÂáΩÊï∞ [QueryScoreFunction](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/QueryScoreFunction.java)Âíå [ComputeAvgScoreFunction](https://github.com/oldmanpushcart/qianfan4j/blob/main/src/test/java/io/github/oldmanpushcart/test/qianfan4j/chat/function/ComputeAvgScoreFunction.java)ÔºåÂàÜÂà´Áî®‰∫éÊü•ËØ¢ÊàêÁª©ÂíåËÆ°ÁÆóÂπ≥ÂùáÂàÜ„ÄÇÊàë‰ª¨ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèÂÆûÁé∞Â§öÂáΩÊï∞Ë∞ÉÁî®Ôºö

```java
final var request = ChatRequest.newBuilder()
    .model(ChatModel.ERNIE_V4)
    .functions(new QueryScoreFunction(), new ComputeAvgScoreFunction())
    .option(ChatOptions.IS_STREAM, true)
    .option(ChatOptions.IS_ENABLE_SEARCH, false)
    .option(ChatOptions.TEMPERATURE, 0.01f)
    .messages(Message.ofUser(""ËÆ°ÁÆóÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶Âπ≥ÂùáÂàÜ""))
    .build();

final var response = client.chat(request)
    .async()
    .join();

// System.out.println(response.content());
```

ËæìÂá∫ÁªìÊûú

```text
2024-03-10 18:02:44 DEBUG qianfan://token/refresh success! expired=1712656964044;
2024-03-10 18:02:44 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""ËÆ°ÁÆóÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶Âπ≥ÂùáÂàÜ""}],""functions"":[{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""Âº†‰∏â\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""Êü•ËØ¢Âº†‰∏â„ÄÅÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""Âº†‰∏â\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""Áî®Êà∑ÈúÄË¶ÅÊü•ËØ¢Âº†‰∏â„ÄÅÊùéÂõõ„ÄÅÁéã‰∫îÁöÑÊï∞Â≠¶ÊàêÁª©Ôºå‰ΩÜÂáΩÊï∞‰∏ÄÊ¨°Âè™ËÉΩÊü•ËØ¢‰∏Ä‰∏™Â≠¶ÁîüÔºåÊâÄ‰ª•Êàë‰ª¨ÂÖàÊü•ËØ¢Âº†‰∏âÁöÑÊàêÁª©ÔºåÁÑ∂ÂêéÂÜçÂàÜÂà´Êü•ËØ¢ÊùéÂõõÂíåÁéã‰∫îÁöÑÊï∞Â≠¶ÊàêÁª©""}}],[{""role"":""user"",""content"":""Êü•ËØ¢ÊùéÂõõÁöÑÊï∞Â≠¶ÂíåËØ≠ÊñáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""ÊùéÂõõ\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""Áî®Êà∑ÈúÄË¶ÅÊü•ËØ¢ÊùéÂõõÁöÑÊï∞Â≠¶ÂíåËØ≠ÊñáÊàêÁª©ÔºåÂáΩÊï∞‰∏ÄÊ¨°ÂèØ‰ª•Êü•ËØ¢‰∏Ä‰∏™Â≠¶ÁîüÁöÑÂ§ö‰∏™ÊàêÁª©""}}]]},{""name"":""compute_avg_score"",""description"":""ËÆ°ÁÆóÂπ≥ÂùáÊàêÁª©"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""ÂàÜÊï∞ÈõÜÂêà"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""Âπ≥ÂùáÂàÜ""}}},""examples"":[[{""role"":""user"",""content"":""Âº†‰∏âÁöÑËØ≠Êñá30ÂàÜ„ÄÅÊï∞Â≠¶20ÂàÜ„ÄÅËã±ËØ≠100ÂàÜÔºõ\nÊùéÂõõÁöÑËØ≠Êñá50ÂàÜ„ÄÅÊï∞Â≠¶90ÂàÜ„ÄÅËã±ËØ≠60ÂàÜÔºõ\nËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÊàêÁª©\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•Â∞ÜÂº†‰∏âÁöÑÊâÄÊúâÂàÜÊï∞‰º†ÂÖ•ÔºåËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÂàÜ""}}],[{""role"":""user"",""content"":""Âº†‰∏âÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ50ÂàÜ„ÄÅËØ≠Êñá30ÂàÜ„ÄÅËã±ËØ≠20ÂàÜÔºõÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ60ÂàÜ„ÄÅËØ≠Êñá90ÂàÜÔºõËØ∑ËÆ°ÁÆó‰ªñ‰ª¨ÁöÑËØ≠ÊñáÂπ≥ÂùáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•ÊääÊâÄÊúâ‰∫∫ÁöÑËØ≠ÊñáÂàÜÊï∞‰º†ÂÖ•Ôºå‰ªéËÄåËÆ°ÁÆóÂá∫ËØ≠ÊñáÁöÑÂπ≥ÂùáÊàêÁª©""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gmjf3vyemg"",""object"":""chat.completion"",""created"":1710064967,""sentence_id"":0,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""function_call"":{""name"":""query_score"",""thoughts"":""ÊàëÈúÄË¶ÅÂÖàÊü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©ÔºåÁÑ∂ÂêéËÆ°ÁÆóÂπ≥ÂùáÂàÜ„ÄÇ‰ªªÂä°ÊãÜËß£Ôºö[sub-task1: ‰ΩøÁî®[query_score]Â∑•ÂÖ∑Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©Ôºåsub-task2: ‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆóÂπ≥ÂùáÂàÜ]„ÄÇÊé•‰∏ãÊù•ÈúÄË¶ÅË∞ÉÁî®[query_score]Â∑•ÂÖ∑Êù•Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©„ÄÇ"",""arguments"":""{\""name\"":\""ÊùéÂõõ\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":676,""completion_tokens"":92,""total_tokens"":768}}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0/function <= {""name"":""ÊùéÂõõ"",""subjects"":[""CHINESE"",""MATH""]}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0/function => {""message"":""Êü•ËØ¢ÊàêÂäü"",""data"":[{""name"":""ÊùéÂõõ"",""subject"":""CHINESE"",""value"":80.0},{""name"":""ÊùéÂõõ"",""subject"":""MATH"",""value"":70.0}],""success"":true}
2024-03-10 18:02:47 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""ËÆ°ÁÆóÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶Âπ≥ÂùáÂàÜ""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""ÊùéÂõõ\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""ÊàëÈúÄË¶ÅÂÖàÊü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©ÔºåÁÑ∂ÂêéËÆ°ÁÆóÂπ≥ÂùáÂàÜ„ÄÇ‰ªªÂä°ÊãÜËß£Ôºö[sub-task1: ‰ΩøÁî®[query_score]Â∑•ÂÖ∑Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©Ôºåsub-task2: ‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆóÂπ≥ÂùáÂàÜ]„ÄÇÊé•‰∏ãÊù•ÈúÄË¶ÅË∞ÉÁî®[query_score]Â∑•ÂÖ∑Êù•Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©„ÄÇ""}},{""role"":""function"",""content"":""{\""message\"":\""Êü•ËØ¢ÊàêÂäü\"",\""data\"":[{\""name\"":\""ÊùéÂõõ\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""ÊùéÂõõ\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""}],""functions"":[{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""Âº†‰∏â\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""Êü•ËØ¢Âº†‰∏â„ÄÅÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""Âº†‰∏â\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""Áî®Êà∑ÈúÄË¶ÅÊü•ËØ¢Âº†‰∏â„ÄÅÊùéÂõõ„ÄÅÁéã‰∫îÁöÑÊï∞Â≠¶ÊàêÁª©Ôºå‰ΩÜÂáΩÊï∞‰∏ÄÊ¨°Âè™ËÉΩÊü•ËØ¢‰∏Ä‰∏™Â≠¶ÁîüÔºåÊâÄ‰ª•Êàë‰ª¨ÂÖàÊü•ËØ¢Âº†‰∏âÁöÑÊàêÁª©ÔºåÁÑ∂ÂêéÂÜçÂàÜÂà´Êü•ËØ¢ÊùéÂõõÂíåÁéã‰∫îÁöÑÊï∞Â≠¶ÊàêÁª©""}}],[{""role"":""user"",""content"":""Êü•ËØ¢ÊùéÂõõÁöÑÊï∞Â≠¶ÂíåËØ≠ÊñáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""ÊùéÂõõ\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""Áî®Êà∑ÈúÄË¶ÅÊü•ËØ¢ÊùéÂõõÁöÑÊï∞Â≠¶ÂíåËØ≠ÊñáÊàêÁª©ÔºåÂáΩÊï∞‰∏ÄÊ¨°ÂèØ‰ª•Êü•ËØ¢‰∏Ä‰∏™Â≠¶ÁîüÁöÑÂ§ö‰∏™ÊàêÁª©""}}]]},{""name"":""query_score"",""description"":""query student's scores"",""parameters"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""the student name to query, example: \""Âº†‰∏â\""""},""subjects"":{""type"":""array"",""description"":""the subjects to query, example: [\""MATH\"", \""CHINESE\""]"",""items"":{""type"":""string"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]}}},""required"":[""name"",""subjects""]},""responses"":{""type"":""object"",""properties"":{""message"":{""type"":""string"",""description"":""message""},""data"":{""type"":""array"",""description"":""data"",""items"":{""type"":""object"",""properties"":{""name"":{""type"":""string"",""description"":""student name""},""subject"":{""type"":""string"",""description"":""subject items"",""enum"":[""CHINESE"",""MATH"",""ENGLISH""]},""value"":{""type"":""number"",""description"":""score value""}}}},""success"":{""type"":""boolean"",""description"":""success or not""}}},""examples"":[[{""role"":""user"",""content"":""Êü•ËØ¢Âº†‰∏â„ÄÅÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""Âº†‰∏â\"",\n     \""subjects\"": [\n         \""MATH\""\n     ]\n }\n"",""thoughts"":""Áî®Êà∑ÈúÄË¶ÅÊü•ËØ¢Âº†‰∏â„ÄÅÊùéÂõõ„ÄÅÁéã‰∫îÁöÑÊï∞Â≠¶ÊàêÁª©Ôºå‰ΩÜÂáΩÊï∞‰∏ÄÊ¨°Âè™ËÉΩÊü•ËØ¢‰∏Ä‰∏™Â≠¶ÁîüÔºåÊâÄ‰ª•Êàë‰ª¨ÂÖàÊü•ËØ¢Âº†‰∏âÁöÑÊàêÁª©ÔºåÁÑ∂ÂêéÂÜçÂàÜÂà´Êü•ËØ¢ÊùéÂõõÂíåÁéã‰∫îÁöÑÊï∞Â≠¶ÊàêÁª©""}}],[{""role"":""user"",""content"":""Êü•ËØ¢ÊùéÂõõÁöÑÊï∞Â≠¶ÂíåËØ≠ÊñáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\n     \""name\"": \""ÊùéÂõõ\"",\n     \""subjects\"": [\n         \""MATH\"",\n         \""CHINESE\""\n     ]\n }\n"",""thoughts"":""Áî®Êà∑ÈúÄË¶ÅÊü•ËØ¢ÊùéÂõõÁöÑÊï∞Â≠¶ÂíåËØ≠ÊñáÊàêÁª©ÔºåÂáΩÊï∞‰∏ÄÊ¨°ÂèØ‰ª•Êü•ËØ¢‰∏Ä‰∏™Â≠¶ÁîüÁöÑÂ§ö‰∏™ÊàêÁª©""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:48 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064968,""sentence_id"":0,""is_end"":false,""is_truncated"":false,""result"":""ÊùéÂõõ"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:49 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064969,""sentence_id"":1,""is_end"":false,""is_truncated"":false,""result"":""ÁöÑËØ≠ÊñáÊàêÁª©ÊòØ80ÂàÜÔºåÊï∞Â≠¶ÊàêÁª©ÊòØ70ÂàÜ„ÄÇ"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:49 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064970,""sentence_id"":2,""is_end"":false,""is_truncated"":false,""result"":""‰ªñÁöÑÂπ≥ÂùáÂàÜÊòØ75ÂàÜ„ÄÇ"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064971,""sentence_id"":3,""is_end"":false,""is_truncated"":false,""result"":""Â¶ÇÊûúÊÇ®ÈúÄË¶ÅÊõ¥ËØ¶ÁªÜÁöÑ‰ø°ÊÅØÊàñÊúâÂÖ∂‰ªñÈóÆÈ¢òÔºåËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":0,""total_tokens"":812}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-mghmq7fq8e"",""object"":""chat.completion"",""created"":1710064971,""sentence_id"":4,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":812,""completion_tokens"":36,""total_tokens"":848}}
2024-03-10 18:02:50 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""ËÆ°ÁÆóÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶Âπ≥ÂùáÂàÜ""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""ÊùéÂõõ\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""ÊàëÈúÄË¶ÅÂÖàÊü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©ÔºåÁÑ∂ÂêéËÆ°ÁÆóÂπ≥ÂùáÂàÜ„ÄÇ‰ªªÂä°ÊãÜËß£Ôºö[sub-task1: ‰ΩøÁî®[query_score]Â∑•ÂÖ∑Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©Ôºåsub-task2: ‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆóÂπ≥ÂùáÂàÜ]„ÄÇÊé•‰∏ãÊù•ÈúÄË¶ÅË∞ÉÁî®[query_score]Â∑•ÂÖ∑Êù•Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©„ÄÇ""}},{""role"":""function"",""content"":""{\""message\"":\""Êü•ËØ¢ÊàêÂäü\"",\""data\"":[{\""name\"":\""ÊùéÂõõ\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""ÊùéÂõõ\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""},{""role"":""assistant"",""content"":""ÊùéÂõõÁöÑËØ≠ÊñáÊàêÁª©ÊòØ80ÂàÜÔºåÊï∞Â≠¶ÊàêÁª©ÊòØ70ÂàÜ„ÄÇ‰ªñÁöÑÂπ≥ÂùáÂàÜÊòØ75ÂàÜ„ÄÇÂ¶ÇÊûúÊÇ®ÈúÄË¶ÅÊõ¥ËØ¶ÁªÜÁöÑ‰ø°ÊÅØÊàñÊúâÂÖ∂‰ªñÈóÆÈ¢òÔºåËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ""},{""role"":""user"",""content"":"" ‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆóÂπ≥ÂùáÂàÜ""}],""functions"":[{""name"":""compute_avg_score"",""description"":""ËÆ°ÁÆóÂπ≥ÂùáÊàêÁª©"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""ÂàÜÊï∞ÈõÜÂêà"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""Âπ≥ÂùáÂàÜ""}}},""examples"":[[{""role"":""user"",""content"":""Âº†‰∏âÁöÑËØ≠Êñá30ÂàÜ„ÄÅÊï∞Â≠¶20ÂàÜ„ÄÅËã±ËØ≠100ÂàÜÔºõ\nÊùéÂõõÁöÑËØ≠Êñá50ÂàÜ„ÄÅÊï∞Â≠¶90ÂàÜ„ÄÅËã±ËØ≠60ÂàÜÔºõ\nËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÊàêÁª©\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•Â∞ÜÂº†‰∏âÁöÑÊâÄÊúâÂàÜÊï∞‰º†ÂÖ•ÔºåËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÂàÜ""}}],[{""role"":""user"",""content"":""Âº†‰∏âÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ50ÂàÜ„ÄÅËØ≠Êñá30ÂàÜ„ÄÅËã±ËØ≠20ÂàÜÔºõÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ60ÂàÜ„ÄÅËØ≠Êñá90ÂàÜÔºõËØ∑ËÆ°ÁÆó‰ªñ‰ª¨ÁöÑËØ≠ÊñáÂπ≥ÂùáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•ÊääÊâÄÊúâ‰∫∫ÁöÑËØ≠ÊñáÂàÜÊï∞‰º†ÂÖ•Ôºå‰ªéËÄåËÆ°ÁÆóÂá∫ËØ≠ÊñáÁöÑÂπ≥ÂùáÊàêÁª©""}}]]},{""name"":""compute_avg_score"",""description"":""ËÆ°ÁÆóÂπ≥ÂùáÊàêÁª©"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""ÂàÜÊï∞ÈõÜÂêà"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""Âπ≥ÂùáÂàÜ""}}},""examples"":[[{""role"":""user"",""content"":""Âº†‰∏âÁöÑËØ≠Êñá30ÂàÜ„ÄÅÊï∞Â≠¶20ÂàÜ„ÄÅËã±ËØ≠100ÂàÜÔºõ\nÊùéÂõõÁöÑËØ≠Êñá50ÂàÜ„ÄÅÊï∞Â≠¶90ÂàÜ„ÄÅËã±ËØ≠60ÂàÜÔºõ\nËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÊàêÁª©\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•Â∞ÜÂº†‰∏âÁöÑÊâÄÊúâÂàÜÊï∞‰º†ÂÖ•ÔºåËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÂàÜ""}}],[{""role"":""user"",""content"":""Âº†‰∏âÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ50ÂàÜ„ÄÅËØ≠Êñá30ÂàÜ„ÄÅËã±ËØ≠20ÂàÜÔºõÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ60ÂàÜ„ÄÅËØ≠Êñá90ÂàÜÔºõËØ∑ËÆ°ÁÆó‰ªñ‰ª¨ÁöÑËØ≠ÊñáÂπ≥ÂùáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•ÊääÊâÄÊúâ‰∫∫ÁöÑËØ≠ÊñáÂàÜÊï∞‰º†ÂÖ•Ôºå‰ªéËÄåËÆ°ÁÆóÂá∫ËØ≠ÊñáÁöÑÂπ≥ÂùáÊàêÁª©""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-y42i2td7tk"",""object"":""chat.completion"",""created"":1710064973,""sentence_id"":0,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""function_call"":{""name"":""compute_avg_score"",""thoughts"":""ÊàëÈúÄË¶ÅË∞ÉÁî®[compute_avg_score]Â∑•ÂÖ∑Êù•ËÆ°ÁÆóÊùéÂõõÁöÑÂπ≥ÂùáÂàÜ„ÄÇ"",""arguments"":""{\""scores\"":[80,70]}""},""finish_reason"":""function_call"",""usage"":{""prompt_tokens"":680,""completion_tokens"":30,""total_tokens"":710}}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0/function <= {""scores"":[80,70]}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0/function => {""avg_score"":75.0}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 => {""messages"":[{""role"":""user"",""content"":""ËÆ°ÁÆóÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶Âπ≥ÂùáÂàÜ""},{""role"":""assistant"",""function_call"":{""name"":""query_score"",""arguments"":""{\""name\"":\""ÊùéÂõõ\"",\""subjects\"":[\""CHINESE\"",\""MATH\""]}"",""thoughts"":""ÊàëÈúÄË¶ÅÂÖàÊü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©ÔºåÁÑ∂ÂêéËÆ°ÁÆóÂπ≥ÂùáÂàÜ„ÄÇ‰ªªÂä°ÊãÜËß£Ôºö[sub-task1: ‰ΩøÁî®[query_score]Â∑•ÂÖ∑Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©Ôºåsub-task2: ‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆóÂπ≥ÂùáÂàÜ]„ÄÇÊé•‰∏ãÊù•ÈúÄË¶ÅË∞ÉÁî®[query_score]Â∑•ÂÖ∑Êù•Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©„ÄÇ""}},{""role"":""function"",""content"":""{\""message\"":\""Êü•ËØ¢ÊàêÂäü\"",\""data\"":[{\""name\"":\""ÊùéÂõõ\"",\""subject\"":\""CHINESE\"",\""value\"":80.0},{\""name\"":\""ÊùéÂõõ\"",\""subject\"":\""MATH\"",\""value\"":70.0}],\""success\"":true}"",""name"":""query_score""},{""role"":""assistant"",""content"":""ÊùéÂõõÁöÑËØ≠ÊñáÊàêÁª©ÊòØ80ÂàÜÔºåÊï∞Â≠¶ÊàêÁª©ÊòØ70ÂàÜ„ÄÇ‰ªñÁöÑÂπ≥ÂùáÂàÜÊòØ75ÂàÜ„ÄÇÂ¶ÇÊûúÊÇ®ÈúÄË¶ÅÊõ¥ËØ¶ÁªÜÁöÑ‰ø°ÊÅØÊàñÊúâÂÖ∂‰ªñÈóÆÈ¢òÔºåËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ""},{""role"":""user"",""content"":"" ‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆóÂπ≥ÂùáÂàÜ""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\""scores\"":[80,70]}"",""thoughts"":""ÊàëÈúÄË¶ÅË∞ÉÁî®[compute_avg_score]Â∑•ÂÖ∑Êù•ËÆ°ÁÆóÊùéÂõõÁöÑÂπ≥ÂùáÂàÜ„ÄÇ""}},{""role"":""function"",""content"":""{\""avg_score\"":75.0}"",""name"":""compute_avg_score""}],""functions"":[{""name"":""compute_avg_score"",""description"":""ËÆ°ÁÆóÂπ≥ÂùáÊàêÁª©"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""ÂàÜÊï∞ÈõÜÂêà"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""Âπ≥ÂùáÂàÜ""}}},""examples"":[[{""role"":""user"",""content"":""Âº†‰∏âÁöÑËØ≠Êñá30ÂàÜ„ÄÅÊï∞Â≠¶20ÂàÜ„ÄÅËã±ËØ≠100ÂàÜÔºõ\nÊùéÂõõÁöÑËØ≠Êñá50ÂàÜ„ÄÅÊï∞Â≠¶90ÂàÜ„ÄÅËã±ËØ≠60ÂàÜÔºõ\nËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÊàêÁª©\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•Â∞ÜÂº†‰∏âÁöÑÊâÄÊúâÂàÜÊï∞‰º†ÂÖ•ÔºåËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÂàÜ""}}],[{""role"":""user"",""content"":""Âº†‰∏âÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ50ÂàÜ„ÄÅËØ≠Êñá30ÂàÜ„ÄÅËã±ËØ≠20ÂàÜÔºõÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ60ÂàÜ„ÄÅËØ≠Êñá90ÂàÜÔºõËØ∑ËÆ°ÁÆó‰ªñ‰ª¨ÁöÑËØ≠ÊñáÂπ≥ÂùáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•ÊääÊâÄÊúâ‰∫∫ÁöÑËØ≠ÊñáÂàÜÊï∞‰º†ÂÖ•Ôºå‰ªéËÄåËÆ°ÁÆóÂá∫ËØ≠ÊñáÁöÑÂπ≥ÂùáÊàêÁª©""}}]]},{""name"":""compute_avg_score"",""description"":""ËÆ°ÁÆóÂπ≥ÂùáÊàêÁª©"",""parameters"":{""type"":""object"",""properties"":{""scores"":{""type"":""array"",""description"":""ÂàÜÊï∞ÈõÜÂêà"",""items"":{""type"":""number""}}}},""responses"":{""type"":""object"",""properties"":{""avg_score"":{""type"":""number"",""description"":""Âπ≥ÂùáÂàÜ""}}},""examples"":[[{""role"":""user"",""content"":""Âº†‰∏âÁöÑËØ≠Êñá30ÂàÜ„ÄÅÊï∞Â≠¶20ÂàÜ„ÄÅËã±ËØ≠100ÂàÜÔºõ\nÊùéÂõõÁöÑËØ≠Êñá50ÂàÜ„ÄÅÊï∞Â≠¶90ÂàÜ„ÄÅËã±ËØ≠60ÂàÜÔºõ\nËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÊàêÁª©\n""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         20,\n         100\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•Â∞ÜÂº†‰∏âÁöÑÊâÄÊúâÂàÜÊï∞‰º†ÂÖ•ÔºåËÆ°ÁÆóÂº†‰∏âÁöÑÂπ≥ÂùáÂàÜ""}}],[{""role"":""user"",""content"":""Âº†‰∏âÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ50ÂàÜ„ÄÅËØ≠Êñá30ÂàÜ„ÄÅËã±ËØ≠20ÂàÜÔºõÊùéÂõõÁöÑÊï∞Â≠¶ÊàêÁª©ÊòØ60ÂàÜ„ÄÅËØ≠Êñá90ÂàÜÔºõËØ∑ËÆ°ÁÆó‰ªñ‰ª¨ÁöÑËØ≠ÊñáÂπ≥ÂùáÊàêÁª©""},{""role"":""assistant"",""function_call"":{""name"":""compute_avg_score"",""arguments"":""{\n     \""scores\"": [\n         30,\n         90\n     ]\n }\n"",""thoughts"":""ÊàëÂ∫îËØ•ÊääÊâÄÊúâ‰∫∫ÁöÑËØ≠ÊñáÂàÜÊï∞‰º†ÂÖ•Ôºå‰ªéËÄåËÆ°ÁÆóÂá∫ËØ≠ÊñáÁöÑÂπ≥ÂùáÊàêÁª©""}}]]}],""stream"":true,""temperature"":0.01,""disable_search"":true}
2024-03-10 18:02:53 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064974,""sentence_id"":0,""is_end"":false,""is_truncated"":false,""result"":""Ê†πÊçÆÊÇ®ÁöÑË¶ÅÊ±Ç"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":0,""total_tokens"":689}}
2024-03-10 18:02:55 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064975,""sentence_id"":1,""is_end"":false,""is_truncated"":false,""result"":""ÔºåÊàëÂ∑≤Áªè‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆó‰∫ÜÊùéÂõõÁöÑÂπ≥ÂùáÂàÜ„ÄÇ"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":0,""total_tokens"":689}}
2024-03-10 18:02:55 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064976,""sentence_id"":2,""is_end"":false,""is_truncated"":false,""result"":""‰ªñÁöÑÂπ≥ÂùáÂàÜÊòØ75.0ÂàÜ„ÄÇ"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":29,""total_tokens"":718}}
2024-03-10 18:02:56 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064977,""sentence_id"":3,""is_end"":false,""is_truncated"":false,""result"":""Â¶ÇÊûúÊÇ®ËøòÊúâÂÖ∂‰ªñÈóÆÈ¢òÊàñÈúÄË¶ÅÊõ¥ËØ¶ÁªÜÁöÑ‰ø°ÊÅØÔºåËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ"",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":29,""total_tokens"":718}}
2024-03-10 18:02:56 DEBUG qianfan://chat/ernie-v4.0 <= {""id"":""as-gtbgh1agd9"",""object"":""chat.completion"",""created"":1710064977,""sentence_id"":4,""is_end"":true,""is_truncated"":false,""result"":"""",""need_clear_history"":false,""finish_reason"":""normal"",""usage"":{""prompt_tokens"":689,""completion_tokens"":42,""total_tokens"":731}}
Ê†πÊçÆÊÇ®ÁöÑË¶ÅÊ±ÇÔºåÊàëÂ∑≤Áªè‰ΩøÁî®[compute_avg_score]Â∑•ÂÖ∑ËÆ°ÁÆó‰∫ÜÊùéÂõõÁöÑÂπ≥ÂùáÂàÜ„ÄÇ‰ªñÁöÑÂπ≥ÂùáÂàÜÊòØ75.0ÂàÜ„ÄÇÂ¶ÇÊûúÊÇ®ËøòÊúâÂÖ∂‰ªñÈóÆÈ¢òÊàñÈúÄË¶ÅÊõ¥ËØ¶ÁªÜÁöÑ‰ø°ÊÅØÔºåËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ
```

Âú®‰∏ÄÊ¨°ÂØπËØù‰∏≠Ôºå`qianfan4j`Ê†πÊçÆÁî®Êà∑ÁöÑÈúÄÊ±ÇÔºå‰ΩøÁî®‰∫Ü`query_score`Â∑•ÂÖ∑Êù•Êü•ËØ¢ÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶ÊàêÁª©ÔºåÂàÜÂà´ÊòØ80ÂàÜÂíå70ÂàÜÔºå 
ÁÑ∂Âêé‰ΩøÁî®`compute_avg_score`Â∑•ÂÖ∑Êù•ËÆ°ÁÆó‰ªñ‰ª¨ÁöÑËØ≠ÊñáÂπ≥ÂùáÂàÜ„ÄÇÊúÄÁªàÔºåÂä©ÊâãËøîÂõû‰∫ÜÊùéÂõõÁöÑËØ≠ÊñáÂíåÊï∞Â≠¶Âπ≥ÂùáÂàÜ‰∏∫75ÂàÜ„ÄÇ

### ÊñáÁîüÂõæÁ§∫‰æã

`qianfan4j`‰ºöÂ∞ÜÊñáÂøÉ‰∏ÄË®ÄËøîÂõûÁöÑBASE64ÁºñÁ†ÅÂ∞ÅË£Ö‰∏∫`BufferedImage`Á±ªÂûãÔºåÊñπ‰æøÂºÄÂèëËÄÖËøõË°åÂêéÁª≠ÁöÑÂõæÂÉèÂ§ÑÁêÜ„ÄÇ
‰∏ãÈù¢ÊòØ‰∏Ä‰∏™ÁÆÄÂçïÁöÑÁ§∫‰æãÔºåÂ±ïÁ§∫‰∫ÜÂ¶Ç‰Ωï‰ΩøÁî®`qianfan4j`ËøõË°åÂõæÂÉèÂ§ÑÁêÜÔºö

```java
final var request = GenerationImageRequest.newBuilder()
    .model(GenerationImageModel.STABLE_DIFFUSION_XL)
    .prompt(""Áå´"")
    .negative(""ÁôΩËâ≤"")
    .option(GenerationImageOptions.NUMBERS, 2)
    .option(GenerationImageOptions.SIZE, GenerationImageRequest.Size.S_1024_1024)
    .build();

final var response = client.generationImage(request)
    .async()
    .join();
```

ÁÑ∂Âêé‰Ω†Â∞±ÂèØ‰ª•ÈÄöËøá`response.images().get(0)`ÊãøÂà∞ÁîüÊàêÁöÑÂõæÁâáÁöÑ`BufferedImage`Á±ªÂûãËøõË°åÂêéÁª≠Êìç‰Ωú‰∫Ü„ÄÇ

![ÊñáÁîüÂõæ-Áå´](https://ompc-images.oss-cn-hangzhou.aliyuncs.com/erniebot4j/gen-image-as-mr0hyfmsix-001.png)

## ‰∫î„ÄÅÂèÇ‰∏éË¥°ÁåÆ

Â¶ÇÊûú‰Ω†ÂØπ`qianfan4j`ÊÑüÂÖ¥Ë∂£Âπ∂Â∏åÊúõ‰∏∫ÂÖ∂ÂÅöÂá∫Ë¥°ÁåÆÔºåËØ∑ÈÅµÂæ™‰ª•‰∏ãÊ≠•È™§Ôºö

1. ForkÊú¨È°πÁõÆÂà∞‰Ω†ÁöÑGitHubË¥¶Êà∑„ÄÇ
2. ÂÖãÈöÜÈ°πÁõÆÂà∞‰Ω†ÁöÑÊú¨Âú∞ÁéØÂ¢É„ÄÇ
3. ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÂàÜÊîØÁî®‰∫é‰Ω†ÁöÑ‰øÆÊîπ„ÄÇ
4. Êèê‰∫§‰Ω†ÁöÑÊõ¥ÊîπÂπ∂ÈÄöËøá`Pull Request`ËØ∑Ê±ÇÂêàÂπ∂Âà∞‰∏ªÂàÜÊîØ„ÄÇ

Âú®Êèê‰∫§Pull Request‰πãÂâçÔºåËØ∑Á°Æ‰øù‰Ω†ÁöÑ‰ª£Á†ÅÁ¨¶ÂêàÈ°πÁõÆÁöÑÁºñÁ†ÅËßÑËåÉÂíåÊúÄ‰Ω≥ÂÆûË∑µÔºåÂπ∂‰∏îÂ∑≤ÁªèÈÄöËøá‰∫ÜÁõ∏ÂÖ≥ÁöÑÊµãËØï„ÄÇ

## ÂÖ≠„ÄÅÁâπÂà´Ëá¥Ë∞¢

È¶ñÂÖàÔºåÊàëË¶ÅÂêëÁôæÂ∫¶ÂçÉÂ∏ÜÂ§ßÊ®°ÂûãÂõ¢ÈòüÁöÑÂêåÂ≠¶‰ª¨Ë°®ËææÊàëÊúÄÊ∑±ÂàáÂú∞ÊÑüË∞¢„ÄÇÊ≠£ÊòØ‰ªñ‰ª¨‰∏çÊáàÁöÑÂä™ÂäõÂíåÂçìË∂äÁöÑÂ∑•‰ΩúÊàêÊûúÔºå‰ΩøÂæóÊàë‰ª¨ËÉΩÂ§üÂ¶ÇÊ≠§‰æøÊç∑Âú∞Âà©Áî®ÂçÉÂ∏ÜÁöÑAPI‰ΩøÁî®ÊñáÂøÉ‰∏ÄË®ÄÂú®ÂÜÖÁöÑLLMÂ§ßÊ®°ÂûãËøõË°åÂºÄÂèë„ÄÇ
‰ªñ‰ª¨‰∏∫Êï¥‰∏™ÂºÄÂèëËÄÖÁ§æÂå∫Ê†ëÁ´ã‰∫ÜÊ¶úÊ†∑ÔºåÊé®Âä®‰∫ÜÊäÄÊúØÁöÑËøõÊ≠•„ÄÇ

### ÂÖ≥‰∫éÊñáÂøÉ‰∏ÄË®Ä

‰Ωú‰∏∫‰∏™‰∫∫‰ΩøÁî®ËÄÖÔºåÊàëÂØπÊñáÂøÉ‰∏ÄË®ÄËøô‰∏™‰∫ßÂìÅÊÄÄÊúâÊûÅÈ´òÂú∞ËØÑ‰ª∑„ÄÇÁõ∏ËæÉ‰∫éOpenAiÁöÑGPT-4ÔºåËôΩÁÑ∂Âú®Êüê‰∫õÂäüËÉΩ‰∏äËøòÊúâÂæÖÂÆåÂñÑÔºå‰ΩÜÊñáÂøÉ‰∏ÄË®ÄÂú®Á®≥ÂÆöÊÄßÊñπÈù¢Â±ïÁé∞Âá∫‰∫ÜÊòæËëóÁöÑ‰ºòÂäø„ÄÇ
Âú®ÂÆûÈôÖÂ∫îÁî®‰∏≠ÔºåÂÆÉÁöÑÂèØÈù†ÂíåÁ®≥ÂÆöËÆ©ÊàëÂÄçÊÑü‰ø°ËµñÔºåËøô‰πüÊòØÊàëÈÄâÊã©ÂÆÉ‰Ωú‰∏∫ÂºÄÂèëÂü∫Á°ÄÁöÑÈáçË¶ÅÂéüÂõ†‰πã‰∏Ä„ÄÇ

ÂêåÊó∂Êàë‰πüÂ∏åÊúõÂú®Â§öÊ®°ÊÄÅÁöÑÊó∂‰ª£ÔºåÂçÉÂ∏ÜÂ§ßÊ®°ÂûãÂπ≥Âè∞ÂíåÊñáÂøÉ‰∏ÄË®Ä‰∏çË¶ÅËêΩÂêé„ÄÇ

### ÁºòËµ∑‰∏éÂä®Êú∫

ÂΩìÊàëÂæóÁü•ÂçÉÂ∏ÜÂ§ßÊ®°ÂûãÂèëÂ∏É‰∫ÜSDKÊó∂ÔºåÊàëËø´‰∏çÂèäÂæÖÂú∞ÊÉ≥Ë¶ÅÈõÜÊàêÂà∞ÊàëÁöÑÈ°πÁõÆ‰∏≠„ÄÇÁÑ∂ËÄåÔºåÊàëÈÅóÊÜæÂú∞ÂèëÁé∞‰ªñ‰ª¨ÁöÑSDKÂΩìÊó∂Âπ∂‰∏çÊîØÊåÅJava„ÄÇ
‰Ωú‰∏∫‰∏Ä‰∏™JavaÂºÄÂèëËÄÖÔºåÊàëÊ∑±Áü•JavaÂú®ÂºÄÂèëËÄÖÁ§æÂå∫‰∏≠ÁöÑÊôÆÂèäÁ®ãÂ∫¶ÂíåÈáçË¶ÅÊÄß„ÄÇÂõ†Ê≠§ÔºåÊàëÂÜ≥ÂÆöËá™Â∑±Âä®ÊâãÔºåÂ°´Ë°•Ëøô‰∏ÄÁ©∫ÁôΩÔºå‰∏∫JavaÂºÄÂèëËÄÖÊèê‰æõ‰∏Ä‰∏™Êñπ‰æø„ÄÅÊòìÁî®ÁöÑÊñáÂøÉ‰∏ÄË®ÄÂÆ¢Êà∑Á´Ø„ÄÇ

Ê≠£ÊòØÂú®ËøôÊ†∑ÁöÑËÉåÊôØ‰∏ãÔºåÊàëÂèëËµ∑‰∫Ü`qianfan4j`È°πÁõÆ„ÄÇÂÆÉÊó®Âú®Êàê‰∏∫ÊñáÂøÉ‰∏ÄË®ÄÁöÑJavaÂºÄÂèëËÄÖÊúÄ‰Ω≥‰º¥‰æ£ÔºåÊèê‰æõÁÆÄÊ¥ÅÊòé‰∫ÜÁöÑAPIÊé•Âè£ÔºåÂ∏ÆÂä©ÂºÄÂèëËÄÖÂø´ÈÄüÈõÜÊàêÂíå‰ΩøÁî®ÊñáÂøÉ‰∏ÄË®ÄÁöÑÂäüËÉΩ„ÄÇ
ÈÄöËøá`qianfan4j`ÔºåJavaÂºÄÂèëËÄÖÂèØ‰ª•ËΩªÊùæÂú∞ÂÆûÁé∞ÂØπËØù„ÄÅÁª≠ÂÜô„ÄÅÂêëÈáèÂµåÂÖ•ÂíåÂõæÂÉèÂ§ÑÁêÜÁ≠âÂäüËÉΩÔºåÊûÅÂ§ßÂú∞ÊèêÂçá‰∫ÜÂºÄÂèëÊïàÁéáÂíåÁî®Êà∑‰ΩìÈ™å„ÄÇ

### Â±ïÊúõ‰∏éÂëºÂêÅ

Â±ïÊúõÊú™Êù•ÔºåÊàëÂ∏åÊúõ`qianfan4j`ËÉΩÂ§üÊàê‰∏∫JavaÂºÄÂèëËÄÖ‰∏éÂçÉÂ∏ÜÂ§ßÊ®°ÂûãÂπ≥Âè∞‰πãÈó¥ÁöÑÊ°•Ê¢ÅÔºåÊé®Âä®ÂçÉÂ∏ÜÂíåÊñáÂøÉ‰∏ÄË®ÄÂú®Êõ¥Â§öÈ¢ÜÂüüÁöÑÂ∫îÁî®ÂíåÂèëÂ±ï„ÄÇ
ÂêåÊó∂ÔºåÊàë‰πüÂëºÂêÅÊõ¥Â§öÁöÑÂºÄÂèëËÄÖÂä†ÂÖ•Âà∞`qianfan4j`ÁöÑÂºÄÊ∫êÁ§æÂå∫‰∏≠Êù•ÔºåÂÖ±ÂêåÂÆåÂñÑÂíå‰ºòÂåñËøô‰∏™È°πÁõÆÔºåËÆ©ÂÆÉÊõ¥Â•ΩÂú∞ÊúçÂä°‰∫éÊï¥‰∏™ÂºÄÂèëËÄÖÁ§æÂå∫„ÄÇ

## ‰∏É„ÄÅÁõ∏ÂÖ≥ÈìæÊé•

- [ÂçÉÂ∏ÜÂ§ßÊ®°ÂûãÂπ≥Âè∞](https://console.bce.baidu.com/qianfan/overview)",1,0,1,apache-2.0,0.0,"['java', 'sdk']",16,"['java', 'sdk']"
1brc/nodejs,main,"# 1Ô∏è‚É£üêùüèéÔ∏è The One Billion Row Challenge with Node.js

## About the Challenge

The One Billion Row Challenge (1BRC) is a fun exploration of how far modern Java can be pushed for aggregating one billion rows from a text file.

Later the community created a dedicated @1brc organization to pay more attention to the implementations in other languages. This repository contains and accepts Node.js based implementations.

Grab all your (virtual) threads, reach out to SIMD, optimize your GC, or pull any other trick, and create the fastest implementation for solving this task!

<img src=""1brc.png"" alt=""1BRC"" style=""display: block; margin-left: auto; margin-right: auto; margin-bottom:1em; width: 50%;"">

The text file contains temperature values for a range of weather stations.
Each row is one measurement in the format `<string: station name>;<double: measurement>`, with the measurement value having exactly one fractional digit.
The following shows ten rows as an example:

```
Hamburg;12.0
Bulawayo;8.9
Palembang;38.8
St. John's;15.2
Cracow;12.6
Bridgetown;26.9
Istanbul;6.2
Roseau;34.4
Conakry;31.2
Istanbul;23.0
```

The task is to write a program which reads the file, calculates the min, mean, and max temperature value per weather station, and emits the results on stdout like this
(i.e. sorted alphabetically by station name, and the result values per station in the format `<min>/<mean>/<max>`, rounded to one fractional digit):

```
{Abha=-23.0/18.0/59.2, Abidjan=-16.2/26.0/67.3, Ab√©ch√©=-10.0/29.4/69.0, Accra=-10.1/26.4/66.4, Addis Ababa=-23.7/16.0/67.0, Adelaide=-27.8/17.3/58.5, ...}
```

Submit your implementation and become part of the leaderboard!

## Results

| #   | Result (m:s.ms) | Implementation                                                                        | Submitter                                        | Notes                                                                              |
| --- | --------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------ | ---------------------------------------------------------------------------------- |
| 1.  | 00:23.000       | [link](https://github.com/1brc/nodejs/blob/main/src/main/nodejs/Edgar-P-yan/index.js) | [Edgar Pogosyan](https://github.com/Edgar-P-yan) | Multi-threaded, optimized parsing, input-specific `float` to `int` parser, no mmap |
|     | 06:16.000       | [link](https://github.com/1brc/nodejs/blob/main/src/main/nodejs/baseline/index.js)    | [Edgar Pogosyan](https://github.com/Edgar-P-yan) | The baseline, single threaded, naive implementation                                |

See [below](#entering-the-challenge) for instructions how to enter the challenge with your own implementation.

## Prerequisites

1. [Java 21](https://openjdk.org/projects/jdk/21/) to generate the `measurements.txt` files and optionally run tests.
2. Node.js, preferably via nvm (node version manager) must be installed on your system.

## Running the Challenge

This repository contains two programs:

- `dev.morling.onebrc.CreateMeasurements` (invoked via _create_measurements.sh_): Creates the file _measurements.txt_ in the root directory of this project with a configurable number of random measurement values
- `src/main/nodejs/baseline/index.js` (invoked via _calculate_average_baseline.sh_): Calculates the average values for the file _measurements.txt_

Execute the following steps to run the challenge:

1. Build the project using Apache Maven:

   ```
   ./mvnw clean verify
   ```

2. Create the measurements file with 1B rows (just once):

   ```
   ./create_measurements.sh 1000000000
   ```

   This will take a few minutes.
   **Attention:** the generated file has a size of approx. **12 GB**, so make sure to have enough diskspace.

3. Calculate the average measurement values:

   ```
   ./calculate_average_baseline.sh
   ```

   The provided naive example implementation uses the Node.js Streams for processing the file and completes the task in ~6m16s on environment used for [result evaluation](#evaluating-results).
   It serves as the base line for comparing your own implementation.

4. Optimize the heck out of it:

   Adjust the `src/main/nodejs/baseline/index.js` program to speed it up, in any way you see fit (just sticking to a few rules described below).
   Options include parallelizing the computation, memory-mapping different sections of the file concurrently, choosing and tuning the garbage collector, and much more.

## Flamegraph/Profiling

> TODO: add instructions on how to profile node.js programs

## Rules and limits

- No external library dependencies may be used
<!-- - Implementations must be provided as a single source file -->
- The computation must happen at application _runtime_, i.e. you cannot process the measurements file at _build time_
  and just bake the result into the binary
- Input value ranges are as follows:
  - Station name: non null UTF-8 string of min length 1 character and max length 100 bytes (i.e. this could be 100 one-byte characters, or 50 two-byte characters, etc.)
  - Temperature value: non null double between -99.9 (inclusive) and 99.9 (inclusive), always with one fractional digit
- There is a maximum of 10,000 unique station names
- Implementations must not rely on specifics of a given data set, e.g. any valid station name as per the constraints above and any data distribution (number of measurements per station) must be supported

## Entering the Challenge

To submit your own implementation to 1BRC, follow these steps:

- Create a fork of the [1brc/nodejs](https://github.com/1brc/nodejs/) GitHub repository.
- Create a copy of `src/main/nodejs/baseline` directory, rename it to `src/main/nodejs/<your_GH_user>`, e.g. `src/main/nodejs/JohnDoe`.
- Make that implementation fast. Really fast.
- Create a copy of _calculate_average_baseline.sh_, named _calculate_average\_<your_GH_user>.sh_, e.g. _calculate_average_JohnDoe.sh_.
- Adjust that script so that it references your implementation file. If needed, provide any Node.js/V8 runtime arguments.
  Make sure that script does not write anything to standard output other than calculation results.
- Run the test suite by executing _/test.sh <your_GH_user>_; if any differences are reported, fix them before submitting your implementation.
- Create a pull request against the upstream repository, clearly stating
  - The execution time of the program on your system and specs of the same (CPU, number of cores, RAM). This is for informative purposes only, the official runtime will be determined as described below.
- I will run the program and determine its performance as described in the next section, and enter the result to the scoreboard.

**Note:** I reserve the right to not evaluate specific submissions if I feel doubtful about the implementation (I.e. I won't run your Bitcoin miner ;).

<!-- If you'd like to discuss any potential ideas for implementing 1BRC with the community,
you can use the [GitHub Discussions](https://github.com/gunnarmorling/onebrc/discussions) of this repository.
Please keep it friendly and civil. -->

## Evaluating Results

For now results are determined by running the program on a Apple MacBook M1 32GB (10 physical).
The `time` program is used for measuring execution times, i.e. end-to-end times are measured.
Each contender will be run five times in a row.
The slowest and the fastest runs are discarded.
The mean value of the remaining three runs is the result for that contender and will be added to the results table above.
The exact same _measurements.txt_ file is used for evaluating all contenders.

<!-- If you'd like to spin up your own box for testing on Hetzner Cloud, you may find these [set-up scripts](https://github.com/gunnarmorling/cloud-boxes/) (based on Terraform and Ansible) useful.
It has been reported that instances of the CCX33 machine class can significantly vary in terms of performance,
so results are only comparable when obtained from one and the same instance.
Note this will incur cost you are responsible for, I am not going to pay your cloud bill :) -->

<!-- ## Prize

If you enter this challenge, you may learn something new, get to inspire others, and take pride in seeing your name listed in the scoreboard above.
Rumor has it that the winner may receive a unique 1Ô∏è‚É£üêùüèéÔ∏è t-shirt, too! -->

## FAQ

<!-- _Q: Can I use Kotlin or other JVM languages other than Java?_\
A: No, this challenge is focussed on Java only. Feel free to inofficially share implementations significantly outperforming any listed results, though.

_Q: Can I use non-JVM languages and/or tools?_\
A: No, this challenge is focussed on Java only. Feel free to inofficially share interesting implementations and results though. For instance it would be interesting to see how DuckDB fares with this task.

_Q: I've got an implementation‚Äîbut it's not in Java. Can I share it somewhere?_\
A: Whilst non-Java solutions cannot be formally submitted to the challenge, you are welcome to share them over in the [Show and tell](https://github.com/gunnarmorling/1brc/discussions/categories/show-and-tell) GitHub discussion area.

_Q: Can I use JNI?_\
A: Submissions must be completely implemented in Java, i.e. you cannot write JNI glue code in C/C++. You could use AOT compilation of Java code via GraalVM though, either by AOT-compiling the entire application, or by creating a native library (see [here](https://www.graalvm.org/22.0/reference-manual/native-image/ImplementingNativeMethodsInJavaWithSVM/). -->

_Q: What is the encoding of the measurements.txt file?_\
A: The file is encoded with UTF-8.

_Q: Can I make assumptions on the names of the weather stations showing up in the data set?_\
A: No, while only a fixed set of station names is used by the data set generator, any solution should work with arbitrary UTF-8 station names
(for the sake of simplicity, names are guaranteed to contain no `;` character).

_Q: Can I copy code from other submissions?_\
A: Yes, you can. The primary focus of the challenge is about learning something new, rather than ""winning"". When you do so, please give credit to the relevant source submissions. Please don't re-submit other entries with no or only trivial improvements.

_Q: Which operating system is used for evaluation?_\
A: macOS Sonoma 14 (see [Evaluating Results](#evaluating-results))

_Q: My solution runs in 2 sec on my machine. Am I the fastest 1BRC-er in the world?_\
A: Probably not :) 1BRC results are reported in wallclock time, thus results of different implementations are only comparable when obtained on the same machine. If for instance an implementation is faster on a 32 core workstation than on the 8 core evaluation instance, this doesn't allow for any conclusions. When sharing 1BRC results, you should also always share the result of running the baseline implementation on the same hardware.

_Q: Why_ 1Ô∏è‚É£üêùüèéÔ∏è _?_\
A: It's the abbreviation of the project name: **One** **B**illion **R**ow **C**hallenge.

## License

This code base is available under the Apache License, version 2.

## Code of Conduct

Be excellent to each other!
More than winning, the purpose of this challenge is to have fun and learn something new.
",0,0,1,apache-2.0,3.0,"['the', 'one', 'billion', 'row', 'challenge', 'about', 'challenge', 'result', 'result', 'm', 'implementation', 'submitter', 'note', 'prerequisite', 'run', 'challenge', 'rule', 'limit', 'enter', 'challenge', 'evaluate', 'result', 'prize', 'faq', 'license', 'code', 'conduct']",14,"['challenge', 'result', 'the', 'one', 'billion']"
ismael221/OpenStreamify,main,"
---

# OpenStreamify - Movie Streaming Application

## Description

This is a web application developed in **Spring Boot** for movie and series management and streaming. The application includes features like JWT-based authentication, OAuth2 login, **Spring MVC** for handling HTTP requests, and an access control system based on user permissions. Additionally, it supports movie and series streaming using **HLS (HTTP Live Streaming)**, notifications when a new movie or series is added, and a one-time password (OTP) system for secure password recovery.

### Features

- **User Authentication**:
   - JWT-based authentication for secure API access.
   - OAuth2 login options (Google, GitHub) for simplified access.
- **Movie and Series Management**:
   - Create, update, delete, and list movies and series with role-based access control.
   - Notifications for users when new movies or series are added.
- **Streaming**:
   - Video streaming in HLS format for both movies and series.
- **Password Recovery**:
   - OTP system for secure password recovery through email.
- **Caching and Messaging**:
   - **Redis** for caching frequently accessed data, improving response times.
   - **RabbitMQ** for asynchronous messaging, supporting high-scale processing.
- **Storage and Monitoring**:
   - **minIO** for video file storage.
   - **Grafana and Prometheus** for system monitoring and performance tracking.


## Technologies Used

- **Java**: Main programming language.
- **Spring Boot**: Framework used for developing the application.
- **Spring Security**: For authentication and authorization using JWT.
- **JWT (JSON Web Token)**: For secure API authentication.
- **Spring MVC**: For managing HTTP requests and routing.
- **HLS (HTTP Live Streaming)**: For video streaming.
- **Thymeleaf**: Template engine to render HTML pages.
- **ModelMapper**: For entity-to-DTO conversion.
- **Docker**: For containerizing the application and monitoring services.
- **MySQL**: Relational database used for storing movies and users data.
- **Redis**: Caching system for optimizing queries.
- **RabbitMQ**: Messaging system for inter-service communication.
- **Grafana**: Monitoring and analytics platform.
- **Prometheus**: Monitoring and alerting toolkit.
- **minIO**: Object storage used to store movie files.



## System Requirements

- **JDK 17** or later
- **Maven** 3.6+
- **MySQL** or any other relational database
- **Redis** (optional, but recommended for caching)
- **Docker** (to run RabbitMQ, Grafana, and Prometheus)
- **Postman** (to test the API endpoints)
- **FFmpeg** (To convert videos into .m3u8 and .ts segments)
- **minIO** (to store video files)

---

## Setup and Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/ismael221/OpenStreamify
   ```

2. Update your `application.yml` with the following configurations:

```yaml
spring:
  output:
    ansi:
      enabled: ALWAYS
  datasource:
    username: your db user
    password: your db password
    url: jdbc:mysql://localhost:3306/yourDatabase
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  servlet:
    multipart:
      enabled: true
      max-file-size: 6048MB
      max-request-size: 6048MB
  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT}
    username: ${SMTP_USER}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    time-to-live: 1h
  rabbitmq:
    host: ${RABBIT_HOST}
    port: ${RABBIT_PORT}
    username: ${RABBIT_USERNAME}
    password: ${RABBIT_PASSWORD}
  resources:
    static-locations: file:videos/hls/
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENTID}
            client-secret: ${GITHUB_CLIENTSECRET}
            scope:
              - user:email
              - user
          google:
            client-id: ${GOOGLE_CLIENTID}
            client-secret: ${GOOGLE_CLIENTSECRET}
            scope:
              - profile
              - email
api:
  security:
    token:
      secret: ${JWT_SECRET}

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    prometheus:
      enabled: true

logging:
  level:
    root: DEBUG
    com.ismael.movie: ERROR
    org.hibernate.SQL: ERROR
    org.springframework.web: DEBUG

server:
  tomcat:
    max-swallow-size: -1
  url: ${SERVER_URL}
  port: ${SERVER_PORT}

minio:
  endpoint: ${MINIO_ENDPOINT}
  access-key: ${MINIO_ACCESSKEY}
  secret-key: ${MINIO_SECRETKEY}
  bucket:
    stream: ${MINIO_BUCKET}

TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
```

### Environment Variables

Make sure to set up the following environment variables in your system or in a `.env` file:

- `SMTP_HOST`: SMTP server for email.
- `SMTP_PORT`: Port for SMTP.
- `SMTP_USER`: Username for SMTP authentication.
- `SMTP_PASSWORD`: Password for SMTP authentication.
- `REDIS_HOST`: Host for Redis server.
- `REDIS_PORT`: Port for Redis server.
- `RABBIT_HOST`: Host for RabbitMQ.
- `RABBIT_PORT`: Port for RabbitMQ.
- `RABBIT_USERNAME`: Username for RabbitMQ.
- `RABBIT_PASSWORD`: Password for RabbitMQ.
- `GITHUB_CLIENTID`: OAuth client ID for GitHub.
- `GITHUB_CLIENTSECRET`: OAuth client secret for GitHub.
- `GOOGLE_CLIENTID`: OAuth client ID for Google.
- `GOOGLE_CLIENTSECRET`: OAuth client secret for Google.
- `JWT_SECRET`: Secret key for JWT token encryption.
- `SERVER_URL`: Base URL for the server.
- `SERVER_PORT`: Port on which the server will run.
- `MINIO_ENDPOINT`: URL for minIO.
- `MINIO_ACCESSKEY`: Access key for minIO.
- `MINIO_SECRETKEY`: Secret key for minIO.
- `MINIO_BUCKET`: Bucket name for video storage in minIO.
- `TELEGRAM_BOT_TOKEN`: Token for Telegram bot.
- `TELEGRAM_CHAT_ID`: Chat ID for Telegram notifications
   

3. Start Redis (if using Docker):
   ```bash
   docker run -d --name redis -p 6379:6379 redis
   ```

4. Start RabbitMQ with the following command:
   ```bash
   docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management
   ```

5. Configure **minIO** for storing video files. You can follow [this tutorial](https://www.digitalocean.com/community/tutorials/how-to-set-up-minio-object-storage-server-in-standalone-mode-on-ubuntu-20-04) to set up **minIO** on Ubuntu. For example, to start **minIO** on Docker:
   ```bash
   docker run -d -p 9000:9000 --name minio \
   -e ""MINIO_ACCESS_KEY=your_access_key"" \
   -e ""MINIO_SECRET_KEY=your_secret_key"" \
   minio/minio server /data
   ```

6. Run the project with the following command in the root directory:
   ```bash
   mvn spring-boot:run
   ```

7. Start Grafana and Prometheus in Docker containers by running:
   ```bash
   docker-compose up -d
   ```

8. Access the application in your browser:
   ```bash
   http://localhost:8080
   ```

9. Access Grafana for monitoring:
   ```bash
   http://localhost:3000
   ```
   - Username: `admin`
   - Password: `admin`

10. Access Prometheus to view collected data:
   ```bash
   http://localhost:9090
   ```

## Main Endpoints

### Authentication

- **POST** `/auth/register`: User registration.
- **POST** `/auth/login`: User authentication and JWT generation.

### Movies

- **GET** `/api/v1/movies`: Lists all movies.
- **POST** `/api/v1/movies`: Adds a new movie.
- **GET** `/api/v1/movies/{rid_movie}`: Retrieves details of a specific movie.
- **POST** `/api/v1/ratings`: Adds a review for a movie.

### Streaming

- **GET** `/api/v1/media/hls/{filename}.m3u8`: Streams the video using HLS based on the file name.


### Example of an Authenticated Request with JWT and OAuth2

All routes, except for login and registration, require authentication. The application supports two methods for authenticated requests:

1. **JWT Authentication**: Users can log in with username and password, receiving a JWT token in the response, which is stored as an HTTP-only cookie.
2. **OAuth2 Authentication**: Users can log in via OAuth2 providers (such as GitHub or Google), which returns an authentication cookie upon successful login.

#### JWT Authentication

When logging in with JWT, the server responds with a cookie named `access_token`, containing the JWT token. This cookie will be automatically sent with each request to protected routes.

To access protected routes with JWT authentication, ensure that the `access_token` cookie is included in your request headers. Alternatively, you may manually include the JWT token in the `Authorization` header as shown below.

### Login Request (JWT)

```http
POST /api/login
Content-Type: application/json

{
  ""username"": ""your-username"",
  ""password"": ""your-password""
}
```

### Swagger UI

To see all available endpoints and their descriptions, access Swagger UI:

http://localhost:8080/swagger-ui.html


## Project Structure

- `src/main/java/com/ismael/movies`: Contains the Java classes, including controllers, services, models, and repositories.
- `src/main/resources/templates`: Contains HTML pages rendered by Thymeleaf.
- `src/main/resources/static`: Contains static files like CSS and JavaScript.
- `src/main/resources/application.properties`: Application configuration.

## Security

The application uses **JWT tokens** and **OAuth2** for authentication and authorization. After logging in, the user receives a token or/and a cookie that must be included in the header of all subsequent requests to protected routes.

## Contributing

Contributions are welcome! Feel free to open an **issue** or submit a **pull request**.

## License

This project is licensed under the MIT License. See the [LICENSE](./LICENSE) file for more details.

---",0,0,3,mit,8.0,"['openstreamify', 'movie', 'streaming', 'application', 'description', 'feature', 'technology', 'use', 'system', 'requirement', 'setup', 'installation', 'environment', 'variable', 'main', 'endpoint', 'authentication', 'movie', 'stream', 'example', 'authenticated', 'request', 'jwt', 'jwt', 'authentication', 'login', 'request', 'jwt', 'swagger', 'ui', 'project', 'structure', 'security', 'contribute', 'license']",19,"['jwt', 'movie', 'authentication', 'request', 'openstreamify']"
xielong/ai-hub,main,"# AI Hub Project

## ÁÆÄ‰ªã

AI HubÊó®Âú®ÊåÅÁª≠ÊµãËØïÂíåËØÑ‰º∞‰∏ªÊµÅÂ§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÔºåÂêåÊó∂ÁßØÁ¥ØÂíåÁÆ°ÁêÜÂêÑÁßçÊúâÊïàÁöÑÊ®°ÂûãË∞ÉÁî®ÊèêÁ§∫ÔºàpromptÔºâ„ÄÇÁõÆÂâçÔºåAI HubÂ∑≤Êé•ÂÖ•ÂõΩÂÜÖÊâÄÊúâ‰∏ªÊµÅÁöÑÂ§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÔºåÂåÖÊã¨ÊñáÂøÉ‰∏ÄË®Ä„ÄÅËÖæËÆØÊ∑∑ÂÖÉ„ÄÅÊô∫Ë∞±AI„ÄÅMiniMax„ÄÅÁôæÂ∑ùÊô∫ËÉΩÁ≠âÔºåÂπ∂ËÆ°ÂàíÊåÅÁª≠ËøΩË∏™„ÄÅÊé•ÂÖ•ÂíåËØÑ‰º∞Êñ∞Ê®°Âûã„ÄÇ

Â∑≤ÊîØÊåÅÊ®°ÂûãÂàóË°®Ôºö
1. OpenAI / gpt-4-turbo
2. OpenAI / gpt-3.5-turbo
3. Baidu / ERNIE-Bot-4ÔºàÊñáÂøÉ‰∏ÄË®Ä4Ôºâ
4. Baidu / ERNIE-Bot-turboÔºàÊñáÂøÉ‰∏ÄË®ÄÔºâ
5. Zhipu / glm-4ÔºàÊô∫Ë∞±GLM-4Ôºâ
6. Zhipu / chatGLM_turboÔºàÊô∫Ë∞±chatGLMÔºâ
7. Ali / qwen-plusÔºàÈÄö‰πâÂçÉÈóÆplusÔºâ
8. Ali / qwen-turboÔºàÈÄö‰πâÂçÉÈóÆÔºâ
9. Tencent / ChatProÔºàËÖæËÆØÊ∑∑ÂÖÉÔºâ
10. Tencent / ChatStdÔºàËÖæËÆØÊ∑∑ÂÖÉÔºâ
11. Tencent / hunyuan-liteÔºàËÖæËÆØÊ∑∑ÂÖÉ)
12. Baichuan / Baichuan2-TurboÔºàÁôæÂ∑ùÔºâ
13. Minimax / abab5.5-chatÔºàMiniMaxÔºâ
14. Minimax / abab6-chatÔºàMiniMaxÔºâ
15. Xunfei / Spark3.1ÔºàËÆØÈ£ûÊòüÁÅ´Ôºâ
16. Moonshot / moonshot-v1-8k (Êúà‰πãÊöóÈù¢)
17. Xunfei / Spark3.5 (ËÆØÈ£ûÊòüÁÅ´3.5)
18. ByteDance / Skylark-chat (Â≠óËäÇË±ÜÂåÖ)
19. Lingyi / yi-34b-chat-0205 (Èõ∂‰∏Ä‰∏áÁâ©)
20. Lingyi / yi-34b-chat-200k (Èõ∂‰∏Ä‰∏áÁâ©)
21. Lingyi / yi-vl-plus (Èõ∂‰∏Ä‰∏áÁâ©)
22. Deepseek / DeepSeek-V2 (Deepseek)
23. Baidu / ERNIE-Lite-8KÔºàÊñáÂøÉ‰∏ÄË®ÄÔºâ
24. Baidu / ERNIE-Speed-8KÔºàÊñáÂøÉ‰∏ÄË®ÄÔºâ
25. Xunfei / Spark-LiteÔºàËÆØÈ£ûÊòüÁÅ´Ôºâ

Âú® [Â§ßÊ®°ÂûãÂàóË°®](#Â§ßÊ®°ÂûãÂàóË°®) ÈÉ®ÂàÜÔºåÊúâÊõ¥ÂÆåÊï¥ÁöÑÂ§ßËØ≠Ë®ÄÊ®°ÂûãÂàóË°®„ÄÇËØ∑Ê≥®ÊÑèÔºåÂÖ∂‰∏≠ÁöÑ‰∏Ä‰∫õÂ§ßËØ≠Ë®ÄÊ®°ÂûãÂ∞öÊú™ÁªèËøáËØÑ‰º∞ÔºåÊàëÂ∞ÜÈôÜÁª≠ÂØπËøô‰∫õÊ®°ÂûãËøõË°åËØÑ‰º∞„ÄÇ


![chat-demo](assets/chat-demo.png)

‰ΩøÁî®ÂâçËØ∑Âú® Settings È°µÈù¢ËÆæÁΩÆÊ®°ÂûãÁöÑ credentialsÔºö
![settings](assets/settings.png)

## ËØÑ‰º∞ÁªìÊûú
### Ëã±ÊñáÁøªËØë
[ÊµãËØïÁî®‰æãÁúãËøôÈáå](docs/use_cases/translation/)
![Ëã±ÊñáÁøªËØë](assets/assess_translation.png)

### ÁºñÁ®ã
[ÊµãËØïÁî®‰æãÁúãËøôÈáå](docs/use_cases/coding/)
![Ëã±ÊñáÁøªËØë](assets/assess_coding.png)

### Êåá‰ª§ËæìÂá∫
[ÊµãËØïÁî®‰æãÁúãËøôÈáå](docs/use_cases/instruction/)
![Ëã±ÊñáÁøªËØë](assets/assess_instruction.png)


## Â§ßÊ®°ÂûãÊé•ÂÖ•
Â¶ÇÊûú‰Ω†ÊÉ≥Ëá™Â∑±Êé•ÂÖ•ÂàóË°®‰∏≠ÁöÑÂ§ßÊ®°ÂûãÔºåÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºè„ÄÇ
### Rest ÊúçÂä°
ÂêØÂä® ai-hub-serverÔºåËÆøÈóÆ
```http
http://127.0.0.1:3000/api/v1/models/${provider}/${model}:chat
```
Post:
```json
{
    ""input"": ""${input}""
}
```
### Java ‰ª£Á†ÅÊé•ÂÖ•
ÂèØ‰ª•ÂèÇËÄÉ[ËøôÈáå](ai-hub-server/src/main/java/com/github/xielong/aihub/adapter)
```java
@Service
public class AIModelInvokerFactory {

    private final ApplicationContext context;

    @Autowired
    public AIModelInvokerFactory(ApplicationContext context) {
        this.context = context;
    }

    public AIModelInvoker getProviderAdapter(String providerName) {
        AIProvider provider = AIProvider.fromName(providerName);

        switch (provider) {
            case OPENAI:
                return context.getBean(OpenAIInvoker.class);
            case BAICHUAN:
                return context.getBean(BaichuanInvoker.class);
            case ALI:
                return context.getBean(AliInvoker.class);
            case BAIDU:
                return context.getBean(BaiduInvoker.class);
            case ZHIPU:
                return context.getBean(ZhipuInvoker.class);
            case TENCENT:
                return context.getBean(TencentInvoker.class);
            case XUNFEI:
                return context.getBean(XunfeiInvoker.class);
            case MINIMAX:
                return context.getBean(MiniMaxInvoker.class);
            default:
                throw new IllegalArgumentException(""Unknown provider: "" + provider);
        }
    }

}

```

## ËøêË°å

### Docker
Êé®Ëçê‰ΩøÁî® docker-compose ÂêØÂä®ÊúçÂä°
```shell
cd docker
docker-compose up -d
```

### Êï∞ÊçÆÂ∫ì
ÂèÇËÄÉ[ËÑöÊú¨](docker/init-db/init.sql)

### ÂâçÁ´Ø
```shell
cd ai-hub-fe
npm run start
```

### ÊúçÂä°Á´Ø
ÈúÄË¶Å JDK 11 ‰ª•‰∏äÁâàÊú¨
```shell
cd ai-hub-server
mvn clean package
java -jar ai-hub-server-1.0.0-SNAPSHOT-exec.jar
```

## ÊµãËØïÈõÜ

### [ÁøªËØë](docs/use_cases/translation/)
### [ÁºñÁ®ã](docs/use_cases/coding/)
### z-bench ÊµãËØïÈõÜ

## Â§ßÊ®°ÂûãÂàóË°®

### ‰ΩéÊàêÊú¨Ê®°Âûã

| Company   | Model          | Price(1M tokens)    | Context Length |
|-----------|----------------|---------------------|----------------|
| Baidu     | ERNIE Speed    | ÂÖçË¥π                | 8k             |
| Baidu     | ERNIE Lite     | ÂÖçË¥π                | 8k             |
| Tencent   | hunyuan-lite   | ÂÖçË¥π                | 256k           |
| ByteDance | Doubao-lite    | Input: 0.3 \| Output: 0.6 | 32k     |
| Zhipu     | GLM-3-Turbo    | 1                   | 128k           |
| Lingyi    | yi-spark       | 1                   | 16k            |
| Ali       | qwen-long      | Input: 0.5 \| Output: 2 | 10m      |
| ByteDance | Doubao-pro     | Input: 0.8 \| Output: 2 | 32k     |
| DeepSeek  | deepseek-chat  | Input: 1 \| Output: 2  | 32k     |
| Lingyi    | yi-medium      | 2.5                 | 16k            |

### ‰∏≠‰ΩéÊàêÊú¨Ê®°Âûã

| Company   | Model          | Price(1M tokens)    | Context Length |
|-----------|----------------|---------------------|----------------|
| Ali       | qwen-turbo     | Input: 2 \| Output: 6  | 8k          |
| Tencent   | hunyuan-standard | Input: 4.5 \| Output: 5 | 32k    |
| MiniMax   | abab5.5s       | 5                   | 8k             |
| OpenAI    | GPT-3.5 Turbo  | Input: $0.50 \| Output: $1.50 | 16k |
| ByteDance | Doubao-pro-128k | Input: 5 \| Output: 9 | 128k   |
| Baichuan  | Baichuan2-Turbo | 8                  | 32k            |
| MiniMax   | abab6.5s       | 10                  | 245k           |
| Ali       | qwen-plus      | Input: 4 \| Output: 12 | 32k     |
| Baidu     | ERNIE 3.0      | 12                  | 8k             |
| Baichuan  | Baichuan3-Turbo | 12                 | 32k            |
| Lingyi    | yi-large-turbo | 12                  | 16k            |
| Lingyi    | yi-medium-200k | 12                  | 200k           |
| Moonshot  | moonshot-v1-8k | 12                  | 8k             |

### ‰∏≠È´òÊàêÊú¨Ê®°Âûã

| Company   | Model              | Price(1M tokens)    | Context Length |
|-----------|--------------------|---------------------|----------------|
| Moonshot  | moonshot-v1-32k    | 24                  | 32k            |
| Baichuan  | Baichuan3-Turbo-128k | 24                | 128k           |
| MiniMax   | abab6.5            | 30                  | 8k             |
| Tencent   | hunyuan-standard-256k | Input: 15 \| Output: 60 | 256k |
| Moonshot  | moonshot-v1-128k   | 60                  | 128k           |

### È´òÊàêÊú¨Ê®°Âûã

| Company   | Model              | Price(1M tokens)    | Context Length |
|-----------|--------------------|---------------------|----------------|
| OpenAI    | GPT-4o             | Input: $5 \| Output: $15 | 128k     |
| Baidu     | ERNIE-3.5-128k     | Input: 48 \| Output: 96 | 128k     |
| Tencent   | hunyuan-pro        | Input: 30 \| Output: 100 | 32k     |
| Ali       | qwen-max           | Input: 40 \| Output: 120 | 8k      |
| Zhipu     | GLM-4              | 100                 | 128k           |
| Baichuan  | Baichuan4          | 100                 | 32k            |
| Baidu     | ERNIE 4.0          | 120                 | 8k             |",0,1,1,apache-2.0,0.0,"['ai', 'hub', 'project', 'rest', 'java', 'docker']",23,"['ai', 'hub', 'project', 'rest', 'java']"
koupleless/koupleless,main,"[![Coverage Status](https://codecov.io/gh/koupleless/koupleless/branch/main/graph/badge.svg)](https://codecov.io/gh/koupleless/koupleless/branch/main/graph/badge.svg)
![license](https://img.shields.io/badge/license-Apache--2.0-green.svg)
![Maven Central](https://img.shields.io/maven-central/v/com.alipay.sofa.koupleless/koupleless-runtime)

<h1 align=""center"">Koupleless: Modular Development Framework and Serving Platform</h1>

<div align=""center"">

English | [ÁÆÄ‰Ωì‰∏≠Êñá](./README-zh_CN.md)

</div>

Would you like your application to start in just 10 seconds, consuming only 20MB of memory? Have you encountered issues with large applications causing collaboration bottlenecks and low release efficiency? Are you struggling with the high resource and maintenance costs associated with numerous small applications? If you're facing these challenges, then Koupleless might be the solution you're looking for. Koupleless approaches application architecture from a modular perspective, offering an extremely low-cost solution to address pain points encountered throughout the entire lifecycle of application development, operation, and execution:

1. Excessive application fragmentation leading to high machine and long-term maintenance costs
2. Insufficient application fragmentation causing collaboration bottlenecks
3. Lengthy application build, startup, and deployment times resulting in low iteration efficiency
4. Severe fragmentation of SDK versions with high upgrade costs and long cycles
5. High costs associated with building platforms and middle platforms, as well as difficulties in business asset precipitation and architectural constraints
6. Long microservice chains leading to poor call performance
7. High costs associated with microservice decomposition and evolution

How does Koupleless address these issues? Koupleless vertically and horizontally splits traditional applications, with the vertical split separating the base and the horizontal split separating multiple modules. The base shields modules from infrastructure concerns, while modules contain only the business-specific portion, enabling quick startup and insulating them from infrastructure concerns, allowing module developers to experience a Serverless-like environment. Koupleless thus evolves into a low-cost, Serverless solution by refining the granularity of development and operations while shielding infrastructure. For detailed explanations of the principles, please refer to the official website.
Further detailed explanations of the principles are available on [the official website](https://koupleless.io/docs/introduction/architecture/arch-principle/).

![image](https://github.com/koupleless/koupleless/assets/3754074/004c0fa5-62f6-42d7-a77e-f7152ac89248)

The most important aspect is that Koupleless can **assist existing applications** in evolving into a modular development model **at an extremely low cost**, addressing the aforementioned issues and helping businesses reduce costs, increase efficiency, and enhance competitiveness.

## The Advantages of Koupleless

Koupleless is a mature development framework and operational scheduling platform capability that has been refined internally within Ant Group for 5 years. Compared to traditional image-based application models, it offers approximately 10 times improvement in development, operations, and runtime calling. Summarized into 5 key features: Fast, Cost-efficient, Flexible deployment, Smooth evolution, and Production-scale validation.

<img width=""788"" alt=""image"" src=""https://github.com/sofastack/sofa-serverless/assets/3754074/11d1d662-d33b-482b-946b-bf600aeb34da"">

Here are performance data comparing modular development and deployment with traditional image-based approaches for an actual production application.

<img width=""600"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/913a6f11-54cb-4c8b-b417-d014e53c920a""/>

## What is a Module?

Modules utilize extreme sharing and isolation technologies, which enable hot deployment (updating online code without restarting the machine).

Isolation is achieved through ClassLoader class isolation based on [SOFAArk](https://github.com/sofastack/sofa-ark) and object isolation based on [SpringBoot SpringContext](https://github.com/spring-projects/spring-boot).

Sharing is facilitated by class delegation loading based on [SOFAArk](https://github.com/sofastack/sofa-ark) and cross-SpringContext object lookup and invocation based on SpringBootManager.

So, in physical terms, a module can be considered as one ClassLoader + one SpringContext.

## What is the BaseÔºü
The base is just a regular application, same with the original app (such as standard SpringBoot).

## Quick start
Please check [the official website Quick Start](https://koupleless.io/docs/quick-start/).

https://github.com/koupleless/koupleless/assets/3754074/e44c9406-4bd4-4fcf-babc-4ae9e615984e

## Koupleless Components

![image](https://github.com/sofastack/sofa-serverless/assets/101314559/995f1e17-f3be-4672-b1b8-c0c041590fb0)

## Contributing
We appreciate anyone who contribute here together. Please scan the QR code to join the developer collaboration group.

| IAM                        | number      | QR code                                                                                                                          |
|----------------------------|-------------|----------------------------------------------------------------------------------------------------------------------------------|
| DingTalk group (recommand) | 24970018417 | <img width=""256"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/7ba1db74-20c1-43a4-a2ab-d38c99a920cd""> |
| WeChat                     | zzl_ing     | <img width=""256"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/35ebc2bc-86cd-4a24-b12e-e9f44cccc2d7""> |

you can also join us by [discord](https://discord.gg/bqx9RDbSfF)

## Long-term planning and our vision
We hope to further refine and open up these capabilities to be more extreme and applicable to a wider range of scenarios. Help more businesses solve application development problems, achieve cost reduction and efficiency improvement, and ultimately become an excellent research and development framework and solution for global green computing, achieving:

1. Speed as you need
2. Pay as you need
3. Deploy as you need
4. Evolution as you need

<img width=""1069"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/17ebd41d-38c7-46e8-a4ba-b6b8bf8f76dd"">
",17,61,16,apache-2.0,90.0,"['the', 'advantage', 'koupleless', 'what', 'module', 'what', 'quick', 'start', 'koupleless', 'component', 'contribute', 'planning', 'vision']",7,"['koupleless', 'what', 'the', 'advantage', 'module']"
easystartup-io/k3s-simplified,main,"<!-- PROJECT LOGO -->
<br />
<p align=""center"">
  <a href=""https://github.com/easystartup-io/k3s-simplified"">
    <img src=""https://github.com/easystartup-io/k3s-simplified/raw/main/docs/static/img/logo.png"" alt=""Logo"" width=""112"" height=""112"">

  </a>

<h2 align=""center"">k3s-simplified</h2>

  <p align=""center"">
    Best simplified way to create a fully functional kubernetes cluster in production on <a href=""https://hetzner.com"" target=""_blank"">Hetzner Cloud</a> using CLI (command line interface) 
  </p>
  <hr />
</p>

# Full Documentation

Access comprehensive instructions at: **[https://k3s-simplified.easystartup.io/docs/](https://k3s-simplified.easystartup.io)**

---

Its a fully open source(MIT LICENSE) drop in replacement to hetzner-k3s written in java, which runs as a single binary, no extra dependency needed


## Project Background

1. This project originated as a fork of [hetzner-k3s](https://github.com/vitobotta/hetzner-k3s).
2. Rewritten in Java for cross-platform compatibility and my familiarity with the language.
3. Actively maintained for production use.
4. I offer full support, including paid consultancy (contact details available [here](https://k3s-simplified.easystartup.io/docs/contact-me)).
5. Emphasis on developing a private, isolated cluster setup, crucial for production environments to safeguard against unauthorized external access.

## About the Tool

A command-line interface (CLI) for effortlessly creating and managing Kubernetes clusters in [Hetzner Cloud](https://www.hetzner.com/cloud). It utilizes [k3s](https://k3s.io/) by [Rancher](https://rancher.com/) for a lightweight Kubernetes experience.

## License

Distributed freely under the [MIT License](https://github.com/easystartup-io/k3s-simplified/blob/main/LICENSE.txt)

## Acknowledgments and shout out to

1. [hetzner-k3s](https://github.com/vitobotta/hetzner-k3s): was the starting point for this project. The inspiration for this project and the basis for expanding my own cluster.
2. [hetznercloud-java](https://github.com/tomsiewert/hetznercloud-java): Essential for cloud API integration. Contributing back to this community project was enriching, especially with the rapid acceptance of my PRs addressing Hetzner API changes.
",16,0,1,mit,1.0,"['full', 'documentation', 'project', 'background', 'about', 'tool', 'license', 'acknowledgment', 'shout']",5,"['full', 'documentation', 'project', 'background', 'about']"
Kamesuta/BungeePteroPower,main,"# BungeePteroPower
![LogoArt](https://github.com/Kamesuta/BungeePteroPower/assets/16362824/e8914f79-806b-436c-a0e6-e4eaf8ad5eca)  
[![License: MIT](https://img.shields.io/github/license/Kamesuta/BungeePteroPower?label=License)](LICENSE)
[![Spigotmc Version](https://img.shields.io/spiget/version/114883?logo=spigotmc&label=Spigotmc%20Version)](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/)
[![JitPack](https://img.shields.io/jitpack/version/com.github.Kamesuta/BungeePteroPower?logo=jitpack&label=JitPack)](https://jitpack.io/#Kamesuta/BungeePteroPower)  
[![Spigotmc Downloads](https://img.shields.io/spiget/downloads/114883?logo=spigotmc&label=Spigotmc%20Downloads)](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/)
[![bStats Servers](https://img.shields.io/bstats/servers/20917?label=bStats%20Servers)](https://bstats.org/plugin/bungeecord/BungeePteroPower/20917)  

BungeePteroPower is a plugin that can automatically start/stop servers based on the number of players.  
It can start and stop servers on the [Pterodactyl panel](https://pterodactyl.io/) when players join or leave the Bungeecord proxy server.  
This helps to save server resources and manage servers more efficiently.  

https://github.com/Kamesuta/BungeePteroPower/assets/16362824/019fdfc5-f0fc-4532-89f3-3342b5812593

## Key Features

- Automatically stops servers using Pterodactyl's API when there are no players on the server for a certain period of time.
    - The time until shutdown can be configured for each server.
- Automatically starts servers using Pterodactyl's API when players join the server.
- Permissions settings allow for specifying players who can manually start servers and players for whom automatic startup is enabled upon joining.
- You can reset the server from a backup when it shuts down.
    - This is useful when creating mini-game servers that reset once played.

![Overview](https://github.com/Kamesuta/BungeePteroPower/assets/16362824/3cece79e-b41a-4119-a6cd-4800dd4f705d)

## Download

- You can download it from [Spigot](https://www.spigotmc.org/resources/%E2%9A%A1-bungeepteropower-%E2%9A%A1-start-stop-servers-when-player-join-leave.114883/) or [GitHub Releases](https://github.com/Kamesuta/BungeePteroPower/releases).

## Requirements

- Java 11 or higher
    - uses `java.net.http.HttpClient` in Java 11 for REST API communication with Pterodactyl.

## Getting Started

1. Obtain an API key in the Pterodactyl panel.
    - The client API key for Pterodactyl can be found in the ""API Credentials"" tab on the account page.
2. Add the plugin to the BungeeCord server and start it.
3. Configure the [Required Settings](#required-settings) in the generated `plugins/BungeePteroPower/config.yml` file.
    ```yml
    # Pterodactyl configuration
    pterodactyl:
      # The URL of your pterodactyl panel
      # If you use Cloudflare Tunnel, you need to allow the ip in the bypass setting.
      url: ""https://panel.example.com""
      # The client api key of your pterodactyl panel. It starts with ""ptlc_"".
      # You can find the client api key in the ""API Credentials"" tab of the ""Account"" page.
      apiKey: ""ptlc_000000000000000000000000000000000000000000""
    
    # Per server configuration
    servers:
      pvp:
        # Pterodactyl server ID
        # You can find the Pterodactyl server ID in the URL of the server page.
        # For example, if the URL is https://panel.example.com/server/1234abcd, the server ID is 1234abcd.
        id: 1234abcd
        # The time in seconds to stop the server after the last player leaves.
        # If you don't want to stop the server automatically, set it to -1.
        # If you set it to 0, the server will be stopped immediately after the last player leaves.
        timeout: 30
    ```
4. Reload the config with the `/ptero reload` command.
5. Configure the [Permission Settings](#permission-settings).  
    (You **MUST** configure permission to use this plugin, otherwise the player will not be able to do anything!)  
    You can use either of the following methods.  
    - Use a permission plugin like [LuckPerms](https://luckperms.net/).
        1. For LuckPerms, use the following commands to set permissions:
            ```
            # The player can start all servers
            /lp user <player_name> permission set ptero.autostart.*
            # The player can start specific server
            /lp user <player_name> permission set ptero.autostart.<server_name>
            # All players can start all servers
            /lp group default permission set ptero.autostart.*
            ```
            ‚Äª `<player_name>` refers to the player's name, `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
    - Use built-in permission settings.
        1. Open `config.yml`.
        2. Add the following settings to the `config.yml` file.
            ```yml
            permissions:
                default:
                # All players can start all server
                - ptero.autostart.*
                # All players can start specific server
                - ptero.autostart.<server_name>
            ```  
            ‚Äª `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
        3. Restart the BungeeCord server.
  
## Usage

### Automatic Startup

- Servers will automatically start when players attempt to join each server on BungeeCord.
    - This feature is available only to players with the `ptero.autostart.<server_name>` permission.

### Manual Start/Stop

- Use the `/ptero start <server_name>` command to manually start a server.
    - This command is available only to players with the `ptero.start.<server_name>` permission.
- Use the `/ptero stop <server_name>` command to manually stop a server.
    - This command is available only to players with the `ptero.stop.<server_name>` permission.

‚Äª `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.

### Reloading config.yml/Language files

- Use `/ptero reload` to reload the config.yml and language files.

## Configuration

The `config.yml` file includes the following settings, but not all items need to be configured.

### Required Settings

- `pterodactyl`: Configure settings for Pterodactyl, including URL and API key.
    - `url`: Set the URL of your Pterodactyl panel. (Example: https://panel.example.com/)
        - If you are using services like Cloudflare Tunnel, ensure proper bypass settings for IP-based communication.
    - `apiKey`: Set the client API key for Pterodactyl.
        - It begins with `ptlc_`.
        - Client API keys for Pterodactyl can be found in the ""API Credentials"" tab on the account page.
- `servers`: Configure settings for each server. Set the server ID and the time until automatic shutdown.
    - `id`: Set the server ID on Pterodactyl.
        - Server IDs on Pterodactyl can be found in the URL of the server page.
        - For example, if the URL is https://panel.example.com/server/1234abcd, the server ID is 1234abcd.

### Optional Settings

- `version`: Set the version of the plugin.
    - When updating the plugin, a warning will be displayed if this value does not match the plugin version.
    - A `config.new.yml` file will be generated, and manual migration of settings using a merge tool is required.
    - After migration, please change this value to the new version.
- `checkUpdate`: Set whether to check for plugin updates. The default is `true`.
- `language`: Set the language to be used. The default is English (`en`).
    - Refer to the comments in the [config file](./src/main/resources/config.yml) for supported languages.
- `startTimeout`: After starting a server with this plugin, it will stop the server if there are no players for a certain period. The unit is seconds.
    - After starting, the server will stop after the `startTimeout` plus the server's timeout duration.
    - Setting it to 1 keeps the server running until players join and leave.
- `powerControllerType`: Set the type of power controller to be used.
    - The built-in PowerController currently supports only `pterodactyl`, which operates Pterodactyl.
    - By adding add-ons, you can add your own custom PowerController.
      Certainly! Here's the English translation of the provided description:
- `useSynchronousPing`: This setting determines whether to perform **synchronous** pinging to the server during login. (Experimental feature)
    - When enabled, pinging the server during login will happen synchronously rather than asynchronously.
    - This allows displaying BungeePteroPower messages (`join_autostart_login` in messages.yml) instead of the ""Could not connect to a default or fallback server"" message upon login.
    - The default value is `false`. Enabling this can be useful if you want to set servers (such as lobby servers) to a suspended state in BungeePteroPower immediately after login.
- `startupJoin`: After server startup, it is used to automatically join players to the server and check the server's status.
    - `timeout`: Set the maximum waiting time for players to join after server startup.
        - Set this value to the maximum time it takes for the server to start.
        - Setting it to 0 disables this feature, and players will not automatically join after startup.
    - `joinDelay`: Once the server is pingable, wait the specified amount of seconds before sending the player to the server
        - This is useful to wait for plugins like Luckperms to fully load
        - If you set it to 0, the player will be connected as soon as the server is pingable
    - `pingInterval`: Set the interval for checking the server's status.
- `restoreOnStop`: Configure settings for the feature to reset the server from a backup when it is stopped.
    - `timeout`: Set the maximum waiting time after sending the stop signal for the server to stop. (The restore will be performed after the server stops)
    - `pingInterval`: Set the interval for checking if the server is offline after sending the stop signal.
- `servers`: Configure settings for each server. Set the server ID and the time until automatic shutdown.
    - `timeout`: When there are no players on the server, it will stop after a certain period. The unit is seconds.
    - `backupId`: The UUID of the backup to restore when the server stops.
        - If this setting is empty or removed, no restore from backup will be performed when the server stops.
        - Useful for servers that need to be reset after each game.

### Permission Settings

BungeePteroPower plugin allows fine-grained control over commands available to players for each server using permissions.

- `ptero.autostart.<server_name>`: Servers will automatically start when players join each server on BungeeCord for players with this permission.
- `ptero.start.<server_name>`: Allows the `/ptero start <server_name>` command to manually start a server.
    - If a player doesn't have `ptero.autostart.<server_name>` permission but has this permission, they will see a manual start button when they join the server.
- `ptero.stop.<server_name>`: Allows the `/ptero stop <server_name>` command to manually stop a server.
- `ptero.reload`: Allows the `/ptero reload` command to reload the config.

‚Äª `<server_name>` refers to the server name specified in BungeeCord's `config.yml`.
‚Äª Specify `*` for `<server_name>` to apply permissions to all servers.

### About Language Files

- You can set the language in config.yml using the language option.
    - Please refer to the comments in the config file for the supported languages.
- Upon startup, a file for the language set in config.yml will be generated.
    - This file allows you to define only the messages you want to change.
    - Messages that are not defined will be loaded from the language file set within the plugin.
- You can edit and then reload the plugin's language by using the `/ptero reload` command.
- Contributions via Pull Requests for additional language files are welcome.

## Information for Plugin Developers

### About Power Controllers

BungeePteroPower provides a Power Controller API for supporting platforms other than Pterodactyl.  
By creating add-ons, you can add power controllers for platforms other than Pterodactyl!

We also welcome pull requests for adding built-in power controllers!  
Ideally, we would like to support the following:
- Power controllers that can start servers locally
- Power controllers compatible with management software other than Pterodactyl.  
    For example, we would like to support the following:
    - PufferPanel
    - Minecraft Server Manager
    - MCSManager
    - MC Server Soft
    - AMP

### Creating Add-ons

- BungeePteroPower provides an API for integration with other plugins.
    - If you want to support platforms other than Pterodactyl, it is possible by implementing the API.
- You can use the BungeePteroPower API by adding dependencies.
    1. Add the JitPack repository inside the pom.xml of your add-on:
        ```xml
        <repositories>
            <repository>
                <id>jitpack.io</id>
                <url>https://jitpack.io</url>
            </repository>
        </repositories>
        ```
    2. Add BungeePteroPower as a dependency:
        ```xml
        <dependency>
            <groupId>com.github.Kamesuta</groupId>
            <artifactId>BungeePteroPower</artifactId>
            <version>version</version>
        </dependency>
        ```
    3. Add the dependency to your plugin.yml:
        ```yml
        depends:
          - BungeePteroPower
        ```
    4. Use the API:
        ```java
        import com.kamesuta.bungeepteropower.api.BungeePteroPowerAPI;

        public class YourPlugin extends JavaPlugin {
            @Override
            public void onEnable() {
                // Get an instance of BungeePteroPowerAPI
                BungeePteroPowerAPI api = BungeePteroPowerAPI.getInstance();
                // Register your custom PowerController
                api.registerPowerController(""your_service"", new YourPowerController());
            }
        }
        ```
        For an example implementation of a PowerController for Pterodactyl, please refer to [PterodactylController.java](./src/main/java/com/kamesuta/bungeepteropower/power/PterodactylController.java).
- If you want your PowerController to be added to BungeePteroPower, please send a pull request.

### Building

Pull requests are welcome for BungeePteroPower.  
You can build it using the following steps:

```bash
git clone https://github.com/Kamesuta/BungeePteroPower.git
cd BungeePteroPower
mvn install
```
- This plugin needs to be built with Java 11 or higher.
- After building, a `BungeePteroPower-<version>.jar` file will be generated in the `target` directory.

## About Statistics Data

BungeePteroPower collects anonymous statistical data using [bStats](https://bstats.org/).  
You can find the statistics data [here](https://bstats.org/plugin/bungeecord/BungeePteroPower/20917).

bStats is used to understand the usage of the plugin and help improve it.  
To disable the collection of statistical data, please set `enabled` to `false` in `plugins/bStats/config.yml`
",9,2,3,mit,8.0,"['bungeepteropower', 'key', 'feature', 'download', 'requirement', 'get', 'start', 'pterodactyl', 'configuration', 'the', 'url', 'pterodactyl', 'panel', 'if', 'use', 'cloudflare', 'tunnel', 'need', 'allow', 'ip', 'bypass', 'setting', 'the', 'client', 'api', 'key', 'pterodactyl', 'panel', 'it', 'start', 'you', 'find', 'client', 'api', 'key', 'api', 'credential', 'tab', 'account', 'page', 'per', 'server', 'configuration', 'pterodactyl', 'server', 'id', 'you', 'find', 'pterodactyl', 'server', 'id', 'url', 'server', 'page', 'for', 'example', 'url', 'http', 'server', 'id', 'the', 'time', 'second', 'stop', 'server', 'last', 'player', 'leaf', 'if', 'want', 'stop', 'server', 'automatically', 'set', 'if', 'set', 'server', 'stop', 'immediately', 'last', 'player', 'leaf', 'the', 'player', 'start', 'server', 'the', 'player', 'start', 'specific', 'server', 'all', 'player', 'start', 'server', 'all', 'player', 'start', 'server', 'all', 'player', 'start', 'specific', 'server', 'usage', 'automatic', 'startup', 'manual', 'reload', 'file', 'configuration', 'require', 'setting', 'optional', 'setting', 'permission', 'setting', 'about', 'language', 'file', 'information', 'plugin', 'developer', 'about', 'power', 'controller', 'create', 'building', 'about', 'statistic', 'data']",36,"['server', 'start', 'player', 'pterodactyl', 'the']"
aliyun/dataworks-spec,master,"[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
![version](https://img.shields.io/badge/version-1.2.0-blue)
[![Java CI with Maven](https://github.com/aliyun/dataworks-spec/actions/workflows/main.yml/badge.svg)](https://github.com/aliyun/dataworks-spec/actions/workflows/main.yml)
[![CN doc](https://img.shields.io/badge/ÊñáÊ°£-‰∏≠ÊñáÁâà-blue.svg)](./README_zh_CN.md)

# Introduction

* In this project we defined a generic workflow description specification(FlowSpec)
* We developed a FlowSpec based migration tool(MigrationX) to migrate workflow models from different workflow scheduling systems to DataWorks workflow
  model.
* We can use this tool to develop conversion tools for other scheduling system workflow model.

# FlowSpec Field Reference

## CycleWorkflow

CycleWorkflow is the specification of a scheduled workflow that contains task nodes and dependencies

### Fields

| Field Name |                Field Type                 | Required | Description                            |
|:----------:|:-----------------------------------------:|----------|----------------------------------------|
| `version`  |                 `string`                  | Yes      | Version                                |
|   `kind`   |                 `string`                  | Yes      | CycleWorkflow                          |
| `metadata` |          [`Metadata`](#metadata)          | No       | define extra meta data of workflow     |
|   `spec`   | [`CycleWorkflowSpec`](#cycleworkflowspec) | Yes      | specific definition of `CycleWorkflow` |

## ManualWorkflow

ManualWorkflow is the specification of manual triggered workflow consist of task nodes and dependencies

### Fields

| Field Name |                 Field Type                  | Required | Description                             |
|:----------:|:-------------------------------------------:|----------|-----------------------------------------|
| `version`  |                  `string`                   | Yes      | version info                            |
|   `kind`   |                  `string`                   | Yes      | ManualWorkflow                          |
| `metadata` |           [`Metadata`](#metadata)           | No       | define extra meta data of workflow      |
|   `spec`   | [`ManualWorkflowSpec`](#manualworkflowspec) | Yes      | specific definition of `ManualWorkflow` |

## CycleWorkflowSpec

CycleWorkflowSpec the specification of `CycleWorkflow`

### Fields

|     Field Name     |                    Field Type                    | Required | Description                                      |
|:------------------:|:------------------------------------------------:|----------|--------------------------------------------------|
|      `nodes`       |            `Array<`[`Node`](#node)`>`            | Yes      | list of cycle node definition                    |
|    `variables`     |        `Array<`[`Variable`](#variable)`>`        | No       | list of variable definition                      |
|     `scripts`      |          `Array<`[`Script`](#script)`>`          | No       | list of script definition                        |
|     `triggers`     |         `Array<`[`Trigger`](#trigger)`>`         | No       | list of cycle trigger definition                 |
|    `artifacts`     |        `Array<`[`Artifact`](#Artifact)`>`        | No       | list of artifact definition                      |
| `runtimeResources` | `Array<`[`RuntimeResource`](#runtimeresource)`>` | No       | list of runtime resource definition              |
|  `fileResources`   |    `Array<`[`FileResource`](#fileResource)`>`    | No       | list of file resource definition                 |
|    `functions`     |        `Array<`[`Function`](#function)`>`        | No       | list of function definition                      |
|       `flow`       |            `Array<`[`Flow`](#flow)`>`            | No       | list of flow defines node dependent relationship |

## ManualWorkflowSpec

ManualWorkflowSpec is the specification of `ManualWorkflow`

### Fields

|     Field Name     |                    Field Type                    | Required | Description                                      |
|:------------------:|:------------------------------------------------:|----------|--------------------------------------------------|
|      `nodes`       |            `Array<`[`Node`](#node)`>`            | Yes      | list of manual node definition                   |
|    `variables`     |        `Array<`[`Variable`](#variable)`>`        | No       | list of variable definition                      |
|     `scripts`      |          `Array<`[`Script`](#script)`>`          | No       | list of script definition                        |
|    `artifacts`     |        `Array<`[`Artifact`](#Artifact)`>`        | No       | list of artifact definition                      |
| `runtimeResources` | `Array<`[`RuntimeResource`](#runtimeresource)`>` | No       | list of runtime resource definition              |
|  `fileResources`   |    `Array<`[`FileResource`](#fileResource)`>`    | No       | list of file resource definition                 |
|    `functions`     |        `Array<`[`Function`](#function)`>`        | No       | list of function definition                      |
|       `flow`       |            `Array<`[`Flow`](#flow)`>`            | No       | list of flow defines node dependent relationship |

## Metadata

Defines extra metadata of resource

### Fields

|  Field Name   | Field Type | Required | Description         |
|:-------------:|:----------:|----------|---------------------|
|    `owner`    |  `string`  | No       | owner of spec       |
| `description` |  `string`  | No       | description of spec |

## Node

Node is the definition of workflow node.

### Fields

|    Field Name     |                 Field Type                 | Required | Description                                                                                         |
|:-----------------:|:------------------------------------------:|----------|-----------------------------------------------------------------------------------------------------|
|       `id`        |                   String                   | Yes      | node local identifier in spec                                                                       |                     
|      `name`       |                   String                   | Yes      | node name                                                                                           |                     
|     `script`      |            [`Script`](#script)             | Yes      | referred script define or reference of the node                                                     |                     
|    `functions`    |     `Array<`[`Function`](#function)`>`     | No       | referred functions define or reference of the node                                                  |
|  `fileResources`  | `Array<`[`FileResource`](#fileResource)`>` | No       | referred file resources define or reference of the node                                             |                         
|     `inputs`      |            [`Inputs`](#inputs)             | No       | inputs of the node. `TableArtifact`, `NodeArtifcat`, `Variable` can be used as inputs of `Node`     |
|     `outputs`     |           [`Outputs`](#outputs)            | No       | outputs of the node. `TableArtifact`, `NodeArtifcat`, `Variable` can be used as outputs of `Node`   |
| `runtimeResource` |   [`RuntimeResource`](#runtimeResource)    | No       | runtime resource define or reference of the node                                                    |
|   `recurrence`    |                   string                   | No       | `recurrence` defines cycle schedule state of node, see enumerated values: [Recurrence](#recurrence) |
|    `priority`     |                  integer                   | No       | priority of the node, the larger the value, the higher the priority                                 |
|     `timeout`     |                  integer                   | No       | timeout in seconds of the node, node instance will be killed when timed out after specified seconds |
|  `instanceMode`   |                   string                   | No       | instance mode of the node, see enumerated values [InstanceMode](#instancemode)                      |
|    `rerunMode`    |                   string                   | No       | the rerun strategy of the node instance, see enumerated values [RerunMode](#rerunmode)              |

## Flow

The `flow` section of spec defines dependencies of related workflow nodes.

### Fields

| Field Name |               Field Type               | Required | Description                                      |
|:----------:|:--------------------------------------:|----------|--------------------------------------------------|
|  `nodeId`  |                `string`                | Yes      | node identifier of specific node defined in spec |
| `depends`  | `Array<`[`FlowDepend`](#flowDepend)`>` | Yes      | list of nodes depended by the node               |

## FlowDepend

`FlowDepend` define the dependency or relationship between workflow nodes.

| Field Name | Field Type | Required | Description                                                                          |
|:----------:|:----------:|----------|--------------------------------------------------------------------------------------|
|  `nodeId`  |  `string`  | Yes      | node identifier of specific node defined in spec                                     |
|   `type`   |  `string`  | Yes      | dependency type of the node, see enumerated values [DependencyType](#dependencyType) |

## Variable

`Variable` defines variables of workflow. Variables can be used in workflow nodes.

### Fields

| Field Name | Field Type | Required | Description                                                           |
|:----------:|:----------:|----------|-----------------------------------------------------------------------|
|    `id`    |  `string`  | Yes      | local identifier in spec                                              |
|   `name`   |  `string`  | Yes      | variable name                                                         |
|  `scope`   |  `string`  | Yes      | variable scope, see enumerated values [VariableScope](#variableScope) |
|   `type`   |  `string`  | Yes      | variable type, see enumerated values [VariableType](#variableType)    |
|  `value`   |  `string`  | Yes      | variable value expression                                             |

## Script

`Script` defines script source file resources. Scripts can be used in workflow by nodes, functions or resources.

### Fields

|  Field Name  |             Field Type             | Required | Description                                  |
|:------------:|:----------------------------------:|----------|----------------------------------------------|
|     `id`     |              `string`              | Yes      | local identifier in spec                     |
|    `path`    |              `string`              | Yes      | script path                                  |
|  `language`  |              `string`              | No       | script language                              |
|  `runtime`   |        [Runtime](#runtime)         | Yes      | runtime definition of script                 |
| `parameters` | `Array<`[`Variable`](#variable)`>` | No       | list of parameter definitions used by script |

## Trigger

`Trigger` defines the rules of firing time of scheduled nodes.

### Fields

| Field Name  | Field Type | Required | Description                                                                                                     |
|:-----------:|:----------:|----------|-----------------------------------------------------------------------------------------------------------------|
|    `id`     |  `string`  | Yes      | local identifier in spec                                                                                        |
|   `type`    |  `string`  | Yes      | trigger type, values: `Scheduler`, `Manual`                                                                     |
|   `cron`    |  `string`  | No       | cron expression of `Scheudler` Trigger                                                                          | 
| `startTime` |  `string`  | No       | start effect time of `Scheduler` Trigger. nodes will only instanced time in range from `startTime` to `endTime` | 
|  `endTime`  |  `string`  | No       | end of effect time of `Scheduler` Trigger.                                                                      |
| `timezone`  |  `string`  | No       | timezone of the `Scheduler` Trigger                                                                             |

## Artifact

Artifacts can be types like `NodeOutput`, `Table`, `Variable`. `Variable` can be a context variable produced by workflow nodes.

### Table

| Field Name | Field Type | Required | Description         |
|:----------:|:----------:|----------|---------------------|
|   `guid`   |  `string`  | Yes      | table artifact guid |

### NodeOutput

| Field Name | Field Type | Required | Description                      |
|:----------:|:----------:|----------|----------------------------------|
|  `output`  |  `string`  | Yes      | output string identifier of node |

## RuntimeResource

`RuntimeResource` defines runtime resources config are used to run workflow nodes runtime resources, like: resource group, YARN cluster etc.

### Fields

|   Field Name    | Field Type | Required | Description                      |
|:---------------:|:----------:|----------|----------------------------------|
|      `id`       |  `string`  | Yes      | local identifier in spec         |
| `resourceGroup` |  `string`  | Yes      | resource group global identifier |

## FileResource

`FileResource` defines the resource files used by workflow nodes. like jar, python, text file, archive files etc.

### Fields

| Field Name |    Field Type     | Required | Description                 |
|:----------:|:-----------------:|----------|-----------------------------|
|    `id`    |     `string`      | Yes      | local identifier in spec    |
|   `name`   |     `string`      | Yes      | resource file name          |
|  `script`  | [Script](#script) | Yes      | resource file script define |

## Function

User-Define-Function definition that used by workflow nodes.

### Fields

|   Field Name    |                 Field Type                 | Required | Description                    |
|:---------------:|:------------------------------------------:|----------|--------------------------------|
|      `id`       |                  `string`                  | Yes      | local identifier in spec       |
|     `name`      |                  `string`                  | Yes      | name of udf                    |
|    `script`     |             [Script](#script)              | Yes      | script file of udf             |
| `fileResources` | `Array<`[`FileResource`](#fileResource)`>` | No       | list of related file resources |

## Runtime

`Runtime` define the runtime environment of script. like command, runtime engine, image etc.

### Fields

| Field Name | Field Type | Required | Description                                                |
|:----------:|:----------:|----------|------------------------------------------------------------|
|  `engine`  |  `string`  | No       | runtime engine                                             |
| `command`  |  `string`  | No       | command identifier of script runtime execution environment |

## Outputs

Outputs hold parameters, artifacts, and results from a workflow node, `Outputs` can be consumed by another workflow node.

### Fields

|  Field Name   |               Field Type               | Required | Description                                                                           |
|:-------------:|:--------------------------------------:|----------|---------------------------------------------------------------------------------------|
|   `tables`    |      `Array<`[`Table`](#table)`>`      | No       | `tables` are list of artifact tables produced by node                                 |
|  `variables`  |   `Array<`[`Variable`](#variable)`>`   | No       | `variables` are list of `Variable` produced by node                                   |
| `nodeOutputs` | `Array<`[`NodeOutput`](#nodeOutput)`>` | No       | `nodeOutputs` are list of pre-defined node output identifier strings produced by node |

## Inputs

Inputs are the mechanism for passing parameters, artifacts, volumes from one workflow node to another

### Fields

|  Field Name   |              Field Type              | Required | Description                                                                            |
|:-------------:|:------------------------------------:|----------|----------------------------------------------------------------------------------------|
|   `tables`    |   `Array<`[`Artifact`](#table)`>`    | No       | `tables` are a list of artifact tables passed as inputs                                |
|  `variables`  |  `Array<`[`Variable`](#variable)`>`  | No       | `variables` are a list of `Variable` passed as inputs                                  |
| `nodeOutputs` | `Array<`[`Artifact`](#nodeOutput)`>` | No       | `nodeOutputs` are a list of pre-defined node output identifier string passed as inputs |

## Enumerations

### VariableScope

|   Enum Name   | Description                                                                                    |
|:-------------:|------------------------------------------------------------------------------------------------|
| NodeParameter | `NodeParameter` means the variable is avaliable in a specific node                             |
|  NodeContext  | `NodeContext` means the variable is avaliable in downstream nodes that depends on current node |
|   Workflow    | `Workflow` means the variable is avaliable in all nodes that in current workflow               |
|   Workspace   | `Workspace` means the variable is avaliable in all nodes that in current workspace             |
|    Tenant     | `Tenant` means the variable is avaliable in all nodes that in current tenant workspaces        |

### VariableType

| Enum Name | Description                                                                  |
|:---------:|------------------------------------------------------------------------------|
|  System   | `System` means the variable is avaliable a system variable like: `$yyyymmdd` |
| Constant  | `Constant` means the variable is constant value                              |

### DependencyType

|          Enum Name           | Description                                                                                                                                             |
|:----------------------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------|
|            Normal            | `Normal` means the node instance of current cycle instance depends on the specific node instance in the same cycle round                                |
|   CrossCycleDependsOnSelf    | `CrossCycleDependsOnSelf` means the current cycle instance of the node depends on the previous cycle round instance of the node itself                  |
| CrossCycleDependsOnChildren  | `CrossCycleDependsOnChildren` means the current cycle instance of the node depends on the children instance of itself in the previous cycle round       |
| CrossCycleDependsOnOtherNode | `CrossCycleDependsOnOtherNode` means the current cycle instance of the node depends on the specific node instance of itself in the previous cycle round |

### Recurrence

| Enum Name | Description                                                                                                         |
|:---------:|---------------------------------------------------------------------------------------------------------------------|
|  Normal   | `Normal` means node instance code will be executed as defined repeat cycle, node will be instanced by defined cycle |
|   Skip    | `Skip` means node instance will be set success without any code effects, node will be instanced by defined cycle    |
|   Pause   | `Pause` means node instance will be set failure without any code effects, node will be instanced by defined cycle   |

### RerunMode

|   Enum Name    | Description                                                         |
|:--------------:|---------------------------------------------------------------------|
|    Allowed     | `Allowed` means node instance can be rerun without any precondition |
|     Denied     | `Denied` means node instance cannot be rerun on any condition       |
| FailureAllowed | `FailureAllowed` means node instance can be rerun on failure state  |

### InstanceMode

|  Enum Name  | Description                                                              |
|:-----------:|--------------------------------------------------------------------------|
|     T+1     | `T+1` means node modification will be applied effect on the next day     |
| Immediately | `Immediately` means node modification will be applied effect immediately |    

# FlowSpec Examples

FlowSpec can be used to describe a workflow, it is a json file that contains a list of nodes.

## real case

### EMR/CDH case

* EMR: [yaml](./spec/src/main/spec/examples/yaml/emr.yaml) [json](./spec/src/main/spec/examples/json/emr.json)
* CDH: [yaml](./spec/src/main/spec/examples/yaml/cdh.yaml) [json](./spec/src/main/spec/examples/json/cdh.json)

### example without id variables references

* [yaml](./spec/src/main/spec/examples/yaml/real_case_expanded.yaml)
* [json](./spec/src/main/spec/examples/json/real_case_expanded.json)

### example with id variables references

* [yaml](./spec/src/main/spec/examples/yaml/real_case.yaml)
* [json](./spec/src/main/spec/examples/json/real_case.json)

## simple example

* [yaml](./spec/src/main/spec/examples/yaml/simple.yaml)
* [json](./spec/src/main/spec/examples/json/simple.json)

## branch node

* [yaml](./spec/src/main/spec/examples/yaml/branch.yaml)
* [json](./spec/src/main/spec/examples/json/branch.json)

## join node

* [yaml](./spec/src/main/spec/examples/yaml/join.yaml)
* [json](./spec/src/main/spec/examples/json/join.json)

## for-each/do-while node

* [yaml](./spec/src/main/spec/examples/yaml/innerflow.yaml)
* [json](./spec/src/main/spec/examples/json/innerflow.json)

## manual workflow

* [yaml](./spec/src/main/spec/examples/yaml/manual_flow.yaml)
* [json](./spec/src/main/spec/examples/json/manual_flow.json)

## emr nodes

* [yaml](./spec/src/main/spec/examples/yaml/script_runtime_template.yaml)
* [json](./spec/src/main/spec/examples/json/script_runtime_template.json)

## resource example

* [yaml](./spec/src/main/spec/examples/yaml/file_resource.yaml)
* [json](./spec/src/main/spec/examples/json/file_resource.json)

## function example

* [yaml](./spec/src/main/spec/examples/yaml/function.yaml)
* [json](./spec/src/main/spec/examples/json/function.json)

## param-hub node

* [yaml](./spec/src/main/spec/examples/yaml/parameter_node.yaml)
* [json](./spec/src/main/spec/examples/json/parameter_node.json)

# FlowSpec example

## DataWorks migration assistant spec package demo

* the directory structure of the spec package is consistent with the directory tree of the DataWorks DataStudio business process interface
* *.sql, *.sh, *.hql are user script source files
* *.flow is the spec file corresponding to the user script source file

```shell
‚ûú  project_c_dw tree
.
‚îî‚îÄ‚îÄ Business Flow
    ‚îú‚îÄ‚îÄ project_c_dag_3zq3ei4d6
    ‚îÇ   ‚îî‚îÄ‚îÄ ClickHouse
    ‚îÇ       ‚îî‚îÄ‚îÄ Data Analytics
    ‚îÇ           ‚îú‚îÄ‚îÄ clickhouse_sql_1.flow
    ‚îÇ           ‚îî‚îÄ‚îÄ clickhouse_sql_1.sql
    ‚îî‚îÄ‚îÄ project_c_demo_workflow_1
        ‚îú‚îÄ‚îÄ EMR
        ‚îÇ   ‚îî‚îÄ‚îÄ Data Analytics
        ‚îÇ       ‚îú‚îÄ‚îÄ demo_hive_sql_1.flow
        ‚îÇ       ‚îú‚îÄ‚îÄ demo_hive_sql_1.hql
        ‚îÇ       ‚îú‚îÄ‚îÄ demo_pg_sql_1.flow
        ‚îÇ       ‚îú‚îÄ‚îÄ demo_pg_sql_1.hql
        ‚îÇ       ‚îú‚îÄ‚îÄ demo_shell_1.flow
        ‚îÇ       ‚îú‚îÄ‚îÄ demo_shell_1.sh
        ‚îÇ       ‚îú‚îÄ‚îÄ demo_sql_1.flow
        ‚îÇ       ‚îî‚îÄ‚îÄ demo_sql_1.hql
        ‚îî‚îÄ‚îÄ General
            ‚îú‚îÄ‚îÄ dep_ck_1
            ‚îî‚îÄ‚îÄ dep_ck_1.flow
```

![DataWorks Migration Package FlowSpec example](docs/images/spec/dw_spec_package_demo-en.jpg)

# FlowSpec Client Tool

MigrationX is a workflow model transformation tool based on FlowSpec.

* [MigrationX](docs/migrationx/index.md)
    * Dolphinscheduler migrate to Dataworks DataStudio in one-click command run
    * Dolphinscheduler export command tool
    * Conversion dolphinscheduler workflow to DataWorks FlowSpec
    * Import FlowSpec package to DataWorks DataStudio with DataWorks OpenAPI

## Architecture

![image](docs/images/architecture-en.jpg)

### Domain Model

Define domain model for different workflow engine, containing domain entities and corresponding operation service

### Reader

Implementations of export reader tools for specific workflow engine.

### Transformer

Implementations of transformation logics between specific workflow engines.

### Writer

Implementations of import writer tools for specific workflow engine.

### Usage

[Usage](docs/migrationx/usage.md)

# Modules

* migrationx-common: common module
* migrationx-domain: domain model of specific workflow engine
* migrationx-reader: export reader implementation of specific workflow engine
* migrationx-transformer: transformer implementation of specific workflow engine
* migrationx-writer: import write implementation of specific workflow engine

# Develop guide

[Develop guide](docs/dev/develop-guide.md)

# Contributors

* Alibaba Cloud-DataWorks-Develop & Modeling & Analytics Team
",0,2,21,apache-2.0,13.0,"['introduction', 'flowspec', 'field', 'reference', 'cycleworkflow', 'field', 'manualworkflow', 'field', 'cycleworkflowspec', 'field', 'manualworkflowspec', 'field', 'metadata', 'field', 'node', 'field', 'flow', 'field', 'flowdepend', 'variable', 'field', 'script', 'field', 'trigger', 'field', 'artifact', 'table', 'nodeoutput', 'runtimeresource', 'field', 'fileresource', 'field', 'function', 'field', 'runtime', 'field', 'output', 'field', 'input', 'field', 'enumeration', 'variablescope', 'variabletype', 'dependencytype', 'recurrence', 'rerunmode', 'instancemode', 'flowspec', 'example', 'real', 'case', 'case', 'example', 'without', 'id', 'variable', 'reference', 'example', 'id', 'variable', 'reference', 'simple', 'example', 'branch', 'node', 'join', 'node', 'node', 'manual', 'workflow', 'emr', 'node', 'resource', 'example', 'function', 'example', 'node', 'flowspec', 'example', 'dataworks', 'migration', 'assistant', 'spec', 'package', 'demo', 'flowspec', 'client', 'tool', 'architecture', 'domain', 'model', 'reader', 'transformer', 'writer', 'usage', 'module', 'develop', 'guide', 'contributor']",71,"['field', 'example', 'node', 'flowspec', 'reference']"
Lord-of-Algorithms/DSA-in-Java,main,"# DSA in Java
This repository supplements a mobile app on algorithm and data structure visualization, providing code for the concepts demonstrated in the app. It's an essential resource for users seeking to understand and explore these implementations in detail.

## Contributing

While this project is open-source, it is not currently seeking contributions. You are welcome to fork and use the code according to the license, but please note that contributions or pull requests to this repository will not be accepted.

## Installation and Setup

To clone and run these examples locally, follow these steps:

```
git clone https://github.com/Lord-of-Algorithms/DSA-in-Java.git
```

## Usage

To run an example, navigate to the corresponding file and execute it using your Java environment:

```
cd DSA-in-Java/src/binarytree
javac BinarySearchTreeMain.java
java BinarySearchTreeMain.java
```

## License

This project is licensed under the MIT License. See the LICENSE file for more details.

## About the Mobile App

This repository is a supplement to our mobile app ""Algorithms and Data Structures"", which offers interactive visualizations of algorithms and data structures. Learn more about the app: [App Store](https://apps.apple.com/us/app/algorithms-data-structures/id1484525469), [Google Play](https://play.google.com/store/apps/details?id=com.iov.lordofalgorithms).
",0,0,1,mit,0.0,"['dsa', 'java', 'contribute', 'installation', 'setup', 'usage', 'license', 'about', 'mobile', 'app']",6,"['dsa', 'java', 'contribute', 'installation', 'setup']"
TFyre/bambu-farm,main,"# Cannot print with latest firmware
> [!IMPORTANT]  
> https://wiki.bambulab.com/en/p1/manual/p1p-firmware-release-history
>
> Bambulab decided to block printing via MQTT unless you enable lanmode only.
>
> Consider downgrading firmware Reference [!142](https://github.com/TFyre/bambu-farm/issues/142)
>
> **OR**
>
> Check the [Cloud Section](#cloud-section) about enabling cloud mode


# Bambu Farm
[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/tfyre)


Web based application to monitor multiple bambu printers using mqtt / ftp / rtsp (**no custom firmware required**)

Technologies used:
* Java 21 https://www.azul.com/
* Quarkus https://quarkus.io/
* Vaadin https://vaadin.com/

# Features / Supported Devices

| Feature | A1 | A1 Mini | P1P | P1S | X1C|
|--|:--:|:--:|:--:|:--:|:--:|
|**Remote View**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>3</sup></li></ul>|
|**Upload to SD card**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**Print .3mf from SD card**<sup>1</sup>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**Print .gcode from SD card**|?|?|?|?|?|
|**Batch Printing**<sup>4</sup>|?|?|?|<ul><li>[x] </li></ul>|<ul><li>[x] <sup>2</sup></li></ul>|
|**AMS**|?|?|?|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|
|**Send Custom GCode**|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|<ul><li>[x] </li></ul>|

1. **Currently only .3mf sliced projects are supported.**
  > In Bambu Studio/Orca slicer, make sure to slice the place and then use the ""File -> Export -> Export plate sliced file"". This creates a `.3mf` project with embedded `.gcode` plate.
2. **FTPS Connections needs SSL Session Reuse via [Bouncy Castle](#bouncy-castle)**
> Without enabling bouncy castle, you will see `552 SSL connection failed: session resuse required`
3. Getting the **LiveView** to work requires additional software. For more details check the [docker/bambu-liveview](docker/bambu-liveview) README.
4. **Batch Priting** allows you to upload a single/multi sliced .3mf and select which plate to send to multiple printers, each with their own filament mapping.

# Screenshots

* Dashboard
![Desktop browser](/docs/bambufarm1.jpg)
* Batch printing
![Batch Printing](/docs/batchprint.png)

*More screenshots in [docs](/docs)*

# I just want to run it

* Make sure you have Java 21 installed, verify with `java -version`
```bash
[user@build:~]# java -version
openjdk version ""21.0.1"" 2023-10-17 LTS
OpenJDK Runtime Environment Zulu21.30+15-CA (build 21.0.1+12-LTS)
OpenJDK 64-Bit Server VM Zulu21.30+15-CA (build 21.0.1+12-LTS, mixed mode, sharing)
```
* Download the latest `bambu-web-*-runner.jar` from [releases](https://github.com/TFyre/bambu-farm/releases/latest) into a new folder (or use the 1 liner below):
```bash
curl -s https://api.github.com/repos/tfyre/bambu-farm/releases/latest \
  | grep browser_download_url | cut -d'""' -f4 | xargs curl -LO
```
* Create a `.env` config file from [Minimal Config](#minimal-config)
  * *Check out the [Full Config Options](#full-config-options) section if you want to tweak some settings*
* Run with `java -jar bambu-web-x.x.x-runner.jar`
```bash
[user@build:~]# java -jar bambu-web-1.0.1-runner.jar
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2024-01-23 08:49:05,586 INFO  [io.und.servlet] (main) Initializing AtmosphereFramework
...
...
2024-01-23 08:49:05,666 INFO  [com.vaa.flo.ser.DefaultDeploymentConfiguration] (main) Vaadin is running in production mode.
2024-01-23 08:49:05,912 INFO  [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) Bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime
2024-01-23 08:49:05,913 INFO  [org.apa.cam.mai.MainSupport] (main) Apache Camel (Main) 4.2.0 is starting
...
...
2024-01-23 08:49:06,029 INFO  [com.tfy.bam.cam.CamelController] (main) configured
2024-01-23 08:49:06,074 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.2.0 (camel-1) is starting
2024-01-23 08:49:06,081 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Routes startup (total:10 started:0 disabled:10)
...
...
2024-01-23 08:49:06,085 INFO  [org.apa.cam.imp.eng.AbstractCamelContext] (main) Apache Camel 4.2.0 (camel-1) started in 10ms (build:0ms init:0ms start:10ms)
2024-01-23 08:49:06,193 INFO  [io.quarkus] (main) bambu-web 1.0.1 on JVM (powered by Quarkus 3.6.6) started in 1.421s. Listening on: http://0.0.0.0:8084
2024-01-23 08:49:06,194 INFO  [io.quarkus] (main) Profile prod activated.
2024-01-23 08:49:06,194 INFO  [io.quarkus] (main) Installed features: [camel-core, camel-direct, camel-paho, cdi, resteasy-reactive, resteasy-reactive-jackson, 
scheduler, security, servlet, smallrye-context-propagation, vaadin-quarkus, vertx, websockets, websockets-client]
```
* If starting correctly, it will show `Routes startup (total:10 started:0 disabled:10)` with a number that is 2x your printer count
* Head over to http://127.0.0.1:8080 and log in with `admin` / `admin`

# Building & Running

Building:
```bash
mvn clean install -Pproduction
```

Create a new directory and copy `bambu/target/bambu-web-1.0.0-runner.jar` into it, example:
```bash
tfyre@fsteyn-pc:/mnt/c/bambu-farm$ ls -al
total 64264
drwxrwxrwx 1 tfyre tfyre     4096 Jan 17 16:47 .
drwxrwxrwx 1 tfyre tfyre     4096 Jan 18 20:42 ..
-rw-rw-rw- 1 tfyre tfyre     4557 Jan 18 14:01 .env
-rw-rw-rw- 1 tfyre tfyre 65796193 Jan 18 20:38 bambu-web-1.0.0-runner.jar
```

Running
```bash
java -jar bambu-web-1.0.0-runner.jar
```

You can now access it via http://127.0.0.1:8080 (username: admin / password: admin)

# Running as a service

Refer to [README.service.md](/docs/README.service.md)

# Example Config

## Minimal config

**!!Remeber to replace `REPLACE_*` fields!!**

Create an `.env` file with  the following config:
```properties
quarkus.http.host=0.0.0.0
quarkus.http.port=8080

bambu.printers.myprinter1.device-id=REPLACE_WITH_DEVICE_SERIAL
bambu.printers.myprinter1.access-code=REPLACE_WITH_DEVICE_ACCESSCODE
bambu.printers.myprinter1.ip=REPLACE_WITH_DEVICE_IP

bambu.users.admin.password=admin
bambu.users.admin.role=admin
```

## Full Config Options

**All default options are displayed (only add to the config if you want to change)**

### Dark Mode
```properties
# Gobal
bambu.dark-mode=false
# Per user (will default to global if omitted)
bambu.users.myUserName.dark-mode=false
```

### Printer section
```properties
bambu.printers.myprinter1.enabled=true
bambu.printers.myprinter1.name=Name With Spaces
bambu.printers.myprinter1.device-id=REPLACE_WITH_DEVICE_SERIAL
bambu.printers.myprinter1.username=bblp
bambu.printers.myprinter1.access-code=REPLACE_WITH_DEVICE_ACCESSCODE
bambu.printers.myprinter1.ip=REPLACE_WITH_DEVICE_IP
bambu.printers.myprinter1.use-ams=true
bambu.printers.myprinter1.timelapse=true
bambu.printers.myprinter1.bed-levelling=true
bambu.printers.myprinter1.flow-calibration=true
bambu.printers.myprinter1.vibration-calibration=true
bambu.printers.myprinter1.model=unknown / a1 / a1mini / p1p / p1s / x1c
bambu.printers.myprinter1.mqtt.port=8883
bambu.printers.myprinter1.mqtt.url=ssl://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.mqtt.port}
bambu.printers.myprinter1.mqtt.report-topic=device/${bambu.printers.myprinter1.device-id}/report
bambu.printers.myprinter1.mqtt.request-topic=device/${bambu.printers.myprinter1.device-id}/request
#Requesting full status interval
bambu.printers.myprinter1.mqtt.full-status=10m
bambu.printers.myprinter1.ftp.port=990
bambu.printers.myprinter1.ftp.url=ftps://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.ftp.port}
bambu.printers.myprinter1.ftp.log-commands=false
bambu.printers.myprinter1.stream.port=6000
bambu.printers.myprinter1.stream.live-view=false
bambu.printers.myprinter1.stream.url=ssl://${bambu.printers.myprinter1.ip}:${bambu.printers.myprinter1.stream.port}
#Restart stream if no images received interval
bambu.printers.myprinter1.stream.watch-dog=5m
```

### Cloud Section

Enable MQTT connection via cloud instead of directly to printer. You can either provide the username/password or a access token.

* Option 1 - username/password

Provide the username and password for https://bambulab.com/ in the format below

* Option 2 - access token

The access token can be fetched from your browser cookies or a 1 liner curl
```bash
curl -v -X POST -H 'Content-Type: application/json' -d '{""account"":""YOUR_USER_NAME"",""password"":""YOUR_PASSWORD""}' https://bambulab.com/api/sign-in/form 2>&1 | grep token= | awk '{print$3}'
```

Configuration:

```properties
bambu.cloud.enabled=true

# Option1: Let bambufarm login and fetch token
bambu.cloud.login.username=YOUR_LOGIN_USER
bambu.cloud.login.password=YOUR_LOGIN_PASSWORD

# Option2: fetch token via curl and paste here
bambu.cloud.token=FULL_JWT_TOKEN_FROM_COOKIES
```

### User Section

**Remember to encrypt your passwords with bcrypt (eg https://bcrypt-generator.com/)**

Current roles supported:

* `admin` - full access
* `normal` - only dashboard with readonly access

```properties
# https://bcrypt-generator.com/
#bambu.users.REPLACE_WITH_USERNAME.password=REPLACE_WITH_PASSWORD

# Insecure version:
#bambu.users.myUserName.password=myPassword
# Secure version:
bambu.users.myUserName.password=$2a$12$GtP15HEGIhqNdeKh2tFguOAg92B3cPdCh91rj7hklM7aSOuTMh1DC 
bambu.users.myUserName.role=admin
bambu.users.myUserName.dark-mode=false

#Guest account with readonly role
bambu.users.guest.password=guest
bambu.users.guest.role=normal

# Skip users and automatically login as admin (default: false)
bambu.auto-login=true
```

### Preheat

Default preheat configuration is below:
```properties
bambu.preheat[0].name=Off 0/0
bambu.preheat[0].bed=0
bambu.preheat[0].nozzle=0
bambu.preheat[1].name=PLA 55/220
bambu.preheat[1].bed=55
bambu.preheat[1].nozzle=220
bambu.preheat[2].name=ABS 90/270
bambu.preheat[2].bed=90
bambu.preheat[2].nozzle=270
```

### Remote View

Remote View is the ability to remotely view or stream the printer's camera.

```properties
# defaults to true, when false, disables remote view globally
bambu.remote-view=true

# defaults to true, when false, disables remote view for dashboard, but will still be available in detail view
bambu.dashboard.remote-view=true

# defaults to true, when false, disables per printer
bambu.printers.myprinter1.stream.enable=true
```


### Live View

Live View is the ability to remotely stream the X1C camera (or any other webcam) and requires Remote View to be enabled.

> [!NOTE]
> Getting the **LiveView** to work requires additional software. For more details check the [docker/bambu-liveview](docker/bambu-liveview) README.


```properties
bambu.live-view-url=/_camerastream/

# For each printer:
bambu.printers.PRINTER_ID.stream.live-view=true

# Default LiveView URL
bambu.printers.PRINTER_ID.stream.url=${bambu.live-view-url}${PRINTER_ID}

# Custom LiveView URL
bambu.printers.PRINTER_ID.stream.url=https://my_stream_domain.com/mystream
# 
```


### Bouncy Castle
`X1C` needs SSL Session Reuse so that SD Card functionality can work. Reference: https://stackoverflow.com/a/77587106/23289205

Without this you will see `552 SSL connection failed: session resuse required`.

Add to `.env`:
```properties
bambu.use-bouncy-castle=true
```
Add JVM startup flag:

bash / cmd:
```bash
java -Djdk.tls.useExtendedMasterSecret=false -jar bambu-web-x.x.x-runner.jar
```

powershell:
```powershell
java ""-Djdk.tls.useExtendedMasterSecret=false"" -jar bambu-web-x.x.x-runner.jar
```

### Uploading bigger files

Add to `.env`:
```properties
quarkus.http.limits.max-body-size=30M
```

### Configure XY/Z movement speeds

Add to `.env`:
```properties
# values are in mm/minute
bambu.move-xy=5000
bambu.move-z=3000
```

### Use Right click for menus

Add to `.env`:
```properties
bambu.menu-left-click=false
```

### Custom CSS

If you want to modify the CSS, create a file next to the `.jar` file called `styles.css`

* Changing the display columns

*Display columns is a ratio and scale based on screen width*

Refer to [bambu.css](/bambu/frontend/themes/bambu-theme/bambu.css#L1-L25)

| Example | value for XXX |
| -- | -- |
| always 1 column | 1 |
| 2 columns with 1080p | 3 |
| 4 columns with 1080p | 5 |

```css
:root {
  --bambu-default-columns: XXX;
}
```

# Debug

For debugging the application, add the following to .env and uncomment DEBUG or TRACE logging sections

```properties
### Log To File
quarkus.log.file.enable=true
quarkus.log.file.path=application.log


### DEBUG logging
#quarkus.log.category.""com.tfyre"".level=DEBUG


### TRACE logging
#quarkus.log.min-level=TRACE
#quarkus.log.category.""com.tfyre"".min-level=TRACE
#quarkus.log.category.""com.tfyre"".level=TRACE
```

# Links

## Inspirational Web interface

* https://github.com/davglass/bambu-farm/tree/main

## Printer MQTT Interface

* https://github.com/Doridian/OpenBambuAPI/blob/main/mqtt.md
* https://github.com/xperiments-in/xtouch/blob/main/src/xtouch/device.h
* https://github.com/SoftFever/OrcaSlicer/blob/main/src/slic3r/GUI/DeviceManager.hpp

## Remoteview

* https://github.com/bambulab/BambuStudio/issues/1536#issuecomment-1811916472


## Images from

* https://github.com/SoftFever/OrcaSlicer/tree/main/resources/images

## Json to Proto

* https://json-to-proto.github.io/
* https://formatter.org/protobuf-formatter
",14,28,4,apache-2.0,12.0,"['can', 'not', 'print', 'late', 'firmware', 'bambu', 'farm', 'feature', 'supported', 'device', 'screenshots', 'i', 'want', 'run', 'java', 'java', 'building', 'running', 'run', 'service', 'example', 'config', 'minimal', 'config', 'full', 'config', 'option', 'dark', 'mode', 'gobal', 'per', 'user', 'will', 'default', 'global', 'omit', 'printer', 'section', 'cloud', 'section', 'let', 'bambufarm', 'login', 'fetch', 'token', 'fetch', 'token', 'via', 'curl', 'paste', 'user', 'section', 'http', 'insecure', 'version', 'secure', 'version', 'skip', 'user', 'automatically', 'login', 'admin', 'default', 'false', 'preheat', 'remote', 'view', 'default', 'true', 'false', 'disables', 'remote', 'view', 'globally', 'default', 'true', 'false', 'disables', 'remote', 'view', 'dashboard', 'still', 'available', 'detail', 'view', 'default', 'true', 'false', 'disables', 'per', 'printer', 'live', 'view', 'for', 'printer', 'default', 'liveview', 'url', 'custom', 'liveview', 'url', 'bouncy', 'castle', 'upload', 'big', 'file', 'configure', 'movement', 'speed', 'value', 'use', 'right', 'click', 'menu', 'custom', 'cs', 'debug', 'log', 'to', 'file', 'debug', 'logging', 'trace', 'log', 'link', 'inspirational', 'web', 'interface', 'printer', 'mqtt', 'interface', 'remoteview', 'image', 'json', 'proto']",50,"['default', 'view', 'printer', 'false', 'config']"
Trendyol/kafkathena-jakarta,master,"<div id=""top""></div>
<p align=""center"">
<img src=""docs/images/kafkathena_logo.png"" width=""250"" alt=""Kafkathena""/>
</p>

<h1 align=""center"">Smart, Fast, Customizable Consumer Configurations</h1>

<p align=""center"">
<a href=""https://github.com/Trendyol/kafkathena-commons/blob/next/LICENSE"">
    <img src=""https://img.shields.io/github/v/release/Trendyol/kafkathena-commons"" alt=""Release"" />
  </a>
<a href=""https://img.shields.io/badge/spring%20boot-2.x%7C3.x-orange"">
    <img src=""https://img.shields.io/badge/spring%20boot-2.x%7C3.x-orange"" alt=""License"" />
  </a>
  <a href=""https://github.com/Trendyol/kafkathena-commons/blob/next/LICENSE"">
    <img src=""https://img.shields.io/github/license/trendyol/baklava"" alt=""Spring Boot Version"" />
  </a>
</p>

<!-- ABOUT THE PROJECT -->
## About The Project

There are many great kafka configurations libraries; however, we didn't find one that really suited our needs so we created this enhanced one. Kafkathena provided by [Trendyol](https://github.com/trendyol)

Here's why:
* Your time should be focused on creating only consumer business. This library that solves a kafka configuration time complexity on your projects.
* Add as dependency, create consumer/producer configs, create consumer class and go!

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- Features -->
## Features

* Config as a consumer and producers
* Consumer Acknowledge Customize Support
* Multiple Kafka Cluster Support
* Failover Error Topic and Custom Class Implementation
* Fixed Retry and Exponential Retry Support
* Consumer base ignore exceptions in failover
* Single Error Topic With Multiple Consumers
* Single Error Topic With Header Key Listening
* Filtered Consume Message
* Seperated Consume and Error Cluster
* Avro/Protobuffer Deserializer Support
* Authentication Base Cluster Support
* Kafka Message Sender Utility
* Spring 2.x/3.x, JDK 11/17 Support

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- Build With -->
### Built With

This section should list any major frameworks/libraries used to bootstrap your project. Leave any add-ons/plugins for the acknowledgements section. Here are a few examples.

* [Spring Starter 3+]
* [Spring Kafka Starter]
* [Jdk 17]

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- GETTING STARTED -->
## Getting Started

This is an example of how you may give instructions on setting up your project locally.
To get a local copy up and running follow these simple example steps.

### Prerequisites

This is an example of how to list things you need to use the software and how to install them.
* Maven 3+
* Jdk 17

### Installation
1. Copy and paste this inside your pom.xml dependencies block.
```xml
<dependency>
  <groupId>com.trendyol</groupId>
  <artifactId>kafkathena-jakarta</artifactId>
  <version>RELEASE</version>
</dependency>
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- USAGE EXAMPLES -->
## Usage

1. Add kafkathena
1. Add $`\textcolor{red}{\text{@EnableKafkathena}}`$ annotation as a configuration on SpringBoot Application
2. Create kafkathena config.yml

```
kafkathena:
  shared-factory-props:
    producer:
      interceptor: ""com.trendyol.mpc.kafkathena.commons.interceptor.KSProducerInterceptor""
    consumer:
      interceptor: ""com.trendyol.mpc.kafkathena.commons.interceptor.KSConsumerInterceptor""
      autoStartup: true
      missingTopicAlertEnable: false
      concurrency: 1
      syncCommitTimeoutSecond: 5
      syncCommit: true
      batch: false
      ackMode: RECORD
    clusters:
      ""[confluent]"":
        servers: localhost:9092
    
  producers:
    default:
      cluster: confluent
      props:
        ""[batch.size]"": 16384
        ""[linger.ms]"": 0
        ""[buffer.memory]"": 33554432
        ""[key.serializer]"": org.apache.kafka.common.serialization.StringSerializer
        ""[value.serializer]"": org.springframework.kafka.support.serializer.JsonSerializer
        ""[acks]"": ""1""
        ""[request.timeout.ms]"": 30000
  consumers:
    ""[consumer-one]"":
      type: JSON # AVRO/PROTO/JSON it can be empty
      topic: kafkathena.topic.one
      factory-bean-name: consumerOneKafkaListenerContainerFactory
      data-class: com.trendyol.kafkathena.demo.model.ConsumerOneMessage
      error-producer-name: default
      cluster: confluent
      filter-header:
        error-producer-filter-key: one-filter
        consumer-filter-key: one-filter
      failover:
        error-topic: kafkathena.topic.error
        handler-bean-name: defaultConsumerFailoverHandler
      fixed-retry:
        retry-count: 1
        backoff-interval-millis: : 5000 #wait time for retry
      exponential-retry:
        retry-count: : 1
        multiplier: 2
        maxInterval: 5
        backoff-interval-millis: : 1000
      factory-props:
        auto-startup: : true
        missing-topic-alert-enable: : false
        concurrency: 1
        sync-commit-timeout-second: : 5
        sync-commit: : true
        ack-mode: : RECORD
        interceptor-class-path: : com.trendyol.kafkathena.demo.interceptor.KafkaConsumerInterceptor
      props:
        ""[group.id]"": kafkathena.topicOneGroup
        ""[value.deserializer]"": org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        ""[spring.deserializer.value.delegate.class]"": org.springframework.kafka.support.serializer.JsonDeserializer
        ""[key.deserializer]"": org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
        ""[spring.deserializer.key.delegate.class]"": org.apache.kafka.common.serialization.StringDeserializer
        ""[max.poll.records]"": 100
        ""[max.poll.interval.ms]"": 300000
        ""[session.timeout.ms]"": 300000
        ""[heartbeat.interval.ms]"": 3000
        ""[enable.auto.commit]"": true
        ""[auto.offset.reset]"": earliest
        ""[fetch.max.bytes]"": 52428800
        ""[fetch.max.wait.ms]"": 500
```
```
@Component
@DependsOnKafkathena
public class ConsumerOne {

    @KafkaListener(
            topics = ""${kafkathena.consumers[consumer-one].topic}"",
            groupId = ""${kafkathena.consumers[consumer-one].props[group.id]}"",
            containerFactory = ""${kafkathena.consumers[consumer-one].factory-bean-name}""
    )
    public void consume(@Payload ConsumerOneMessage message) {

    }
}
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

",1,0,1,mit,0.0,"['about', 'the', 'project', 'feature', 'build', 'with', 'get', 'start', 'prerequisite', 'installation', 'usage', 'empty']",8,"['about', 'the', 'project', 'feature', 'build']"
caolib/book_management_system,master,"[![Typing SVG](https://readme-typing-svg.herokuapp.com?font=cascadia+code&size=38&duration=3500&pause=1000&color=00ADFF&center=true&vCenter=true&random=false&width=1000&height=100&lines=Book+lending+management+system;Âõæ‰π¶ÂÄüÈòÖÁÆ°ÁêÜÁ≥ªÁªü)](https://git.io/typing-svg)

&emsp;&emsp;

![springboot](https://img.shields.io/badge/springboot-v3.0.9-%236DB33F?style=flat&logo=springboot&logoColor=236DB33F&labelColor=white)
![maven](https://img.shields.io/badge/Maven-v3.9.5-blue?style=flat&logo=apachemaven&logoColor=red&labelColor=white)
![mybatisplus](https://img.shields.io/badge/MybatisPlus-v3.5.3.1-red?style=flat&labelColor=white)
![mysql](https://img.shields.io/badge/MySQL-v8.2.0-blue?style=flat&logo=mysql&logoColor=blue&labelColor=white)
![redis](https://img.shields.io/badge/Redis-v7.0.12-red?style=flat&logo=redis&logoColor=%23DC382D&labelColor=white)
![GitHub Release](https://img.shields.io/github/v/release/tankingcao/java_design?include_prereleases&sort=date&display_name=release&style=flat&labelColor=red&cacheSeconds=3600)
![‰∏ãËΩΩÈáè](https://img.shields.io/github/downloads/caolib/book_management_system/total.svg)

<!-- 
![GitHub License](https://img.shields.io/github/license/caolib/book_management_system?style=flat)
![opened issues](https://img.shields.io/github/issues/caolib/book_management_system?color=red&cacheSeconds=3600)
![closed issues](https://img.shields.io/github/issues-closed/caolib/book_management_system?color=green&cacheSeconds=3600)
![GitHub commit activity](https://img.shields.io/github/commit-activity/y/caolib/book_management_system?labelColor=red)
-->

‰ΩøÁî®`springboot+mybatis-plus`Ê°ÜÊû∂Âà∂‰ΩúÁöÑ‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂõæ‰π¶ÂÄüÈòÖÁÆ°ÁêÜÁ≥ªÁªüÂêéÂè∞ÊúçÂä°Âô®

> [!important]
>
> **È°πÁõÆÈááÁî®ÂâçÂêéÁ´ØÂàÜÁ¶ªÂºÄÂèëÔºåËøôÊòØÂêéÁ´ØÈ°πÁõÆÔºåÂØπÂ∫îÁöÑ[ÂâçÁ´ØÈ°πÁõÆÂú∞ÂùÄ](https://github.com/caolib/vue3-vite)ÔºåÊ≥®ÊÑèÁõ∏ÂÖ≥ÊäÄÊúØÊ†àÁâàÊú¨‰∏çË¶ÅÁõ∏Â∑ÆÂ§™Â§ß**

> [!caution]
>
> - **ÊúÄËøëÊõ¥Êñ∞‰∏≠Âõ†‰∏∫‰ΩøÁî®`redis`‰∫åÊ¨°Ê†°È™åtokenÂÆûÁé∞token‰∏ªÂä®ËøáÊúüÔºå`redis`ÂèòÊàêÂøÖÈúÄÈ°π!!!**
> - **Âú®[ÂèëË°åÁâà](https://github.com/caolib/book_management_system/releases)ÁöÑËµÑÊ∫ê‰∏≠ÊúâÊ≠§È°πÁõÆÂØπÂ∫îÁöÑÊï∞ÊçÆÂ∫ìÁªìÊûÑÁöÑ`sql`Êñá‰ª∂**

> [!tip]
> - ‰ΩøÁî®ÂâçÂÖà‰ΩøÁî®maven‰∏ãËΩΩÁõ∏ÂÖ≥‰æùËµñÔºåÂª∫ËÆÆ‰ΩøÁî®IDEAÁºñËØëÂô®ÔºåÊçÜÁªë‰∫ÜmavenÔºåÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®
> - Ê≥®ÊÑèÂâçÂêéÁ´Ø‰∏ÄËà¨ÊòØÂêåÊó∂‰øÆÊîπÁöÑÔºåÂøÖÈ°ªÂåπÈÖçÁâàÊú¨ÔºåÊ≤°ÊúâÁâπÂà´ÈúÄÊ±ÇÔºà‰∏çÊÉ≥‰ΩøÁî®redisÔºâÁõ¥Êé•‰ΩøÁî®ÊúÄÊñ∞ÁöÑ

## Âø´ÈÄüÂºÄÂßã

### 1.ÂèÇÁÖßÊ≥®Èáä‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂

Ë∑ØÂæÑÔºö`src/main/resources/application.yml`

```yml
# È°πÁõÆÂêØÂä®Á´ØÂè£ÔºåÈªòËÆ§8080Ôºå‰øÆÊîπÂêéÂâçÁ´Ø‰∏≠ÁöÑËØ∑Ê±ÇÂú∞ÂùÄ‰πüË¶ÅÂØπÂ∫î‰øÆÊîπ
server:
  port: 8080

# mybatis-plusÈÖçÁΩÆ
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true # ‰∏ãÂàíÁ∫øÂëΩÂêçËΩ¨È©ºÂ≥∞
  type-aliases-package: com.clb.domain # Âà´ÂêçÊâ´ÊèèÂåÖ
  mapper-locations: classpath:mapper/*.xml # mapperÊñá‰ª∂Êâ´Êèè

spring:
  # mysql
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/java_design?serverTimezone=Asia/Shanghai
    # Ê≥®ÊÑè‰øÆÊîπÁî®Êà∑ÂêçÂíåÂØÜÁ†Å‰∏∫‰Ω†Ëá™Â∑±ÁöÑ
    username: root
    password: 123456
    type: com.alibaba.druid.pool.DruidDataSource

  # redis
  data:
    redis:
      # ‰øÆÊîπhostÂíåÂØÜÁ†Å‰∏∫‰Ω†ÁöÑÔºåÂ¶ÇÊûúÊ≤°ÊúâÂØÜÁ†ÅÂàôÂà†Èô§passwordÈ°πÔºåredisÈªòËÆ§Ê≤°ÊúâÂØÜÁ†Å
      host: localhost
      password: 123456
      port: 6379
      database: 0
      timeout: 5000ms
  cache:
    type: redis  
    redis:
      time-to-live: 3600000 # ÁºìÂ≠òËøáÊúüÊó∂Èó¥,Âçï‰Ωçms(Ê≠§Â§Ñ‰∏ÄÂ∞èÊó∂)

  # ÁÉ≠ÈáçËΩΩÊéíÈô§adviceÊñá‰ª∂
  devtools:
    restart:
      additional-exclude: com/clb/util/Advice.class
  # ÊîØÊåÅÊéßÂà∂Âè∞ansiÈ¢úËâ≤ËæìÂá∫(‰ΩøÁî®javaÂëΩ‰ª§Ë°åÈÉ®ÁΩ≤Êó∂),Â¶ÇÊûú‰π±Á†ÅÂàôÂà†Èô§‰∏ãÈù¢3Ë°å
  output:
    ansi:
      enabled: always
      
# Êó•Âøó
logging:
  level:
    com.clb: debug
  pattern:
    dateformat: MM-dd HH:mm:ss.SSS

```

### 2.ÂêØÂä®È°πÁõÆ

‰ΩøÁî®ÁºñËØëÂô®‰∏ÄÈîÆÂêØÂä®È°πÁõÆ(ÂâçÊèê:mysqlÂíåredisÊï∞ÊçÆÂ∫ìÈÖçÁΩÆÊ≠£Á°Æ‰∏îÂ∑≤ÁªèÂêØÂä®)

## È°πÁõÆÁõÆÂΩïÁªìÊûÑ

- `src/main/java/com/clb/`
  - `config`ÔºöÈÖçÁΩÆÊñá‰ª∂
  - `constant`ÔºöÊûö‰∏æÂ≠óÊÆµ
  - `controller`ÔºöË°®Áé∞Â±Ç
  - `domain`ÔºöÂÆû‰ΩìÁ±ªÁ≠â
  - `exception`ÔºöÂºÇÂ∏∏Á±ª
  - `handle`ÔºöÂ§ÑÁêÜÂô®Á±ª
  - `interceptor`ÔºöÊã¶Êà™Âô®Á±ª
  - `mapper`ÔºöÊåÅ‰πÖÂ±Ç
  - `service`Ôºö‰∏öÂä°Â±Ç
  - `util`ÔºöÂ∑•ÂÖ∑Á±ª
- `src/main/resources`
  - `mapper`ÔºöÊò†Â∞ÑÊñá‰ª∂mapper
  - `application.yml`ÔºöÈÖçÁΩÆÊñá‰ª∂
  - `banner.txt`ÔºöspringÈ°πÁõÆÂêØÂä®logo
- `src/test/`ÔºöÊµãËØïÁ±ª
- `pom.xml`Ôºö‰æùËµñÁÆ°ÁêÜ

## ÊâìÂåÖ‰ΩøÁî®

> Â∞ÜÈ°πÁõÆ‰ΩøÁî®mavenÊâìÊàêjarÂåÖÂêéÂèØ‰ª•ÈÄöËøáÂëΩ‰ª§Ë°åÊâßË°åjarÂåÖ

```cmd
java -jar .\book-1.0.0.RELEASE.jar
```

> ÂèØ‰ª•‰øÆÊîπÁ´ØÂè£Âè∑

```cmd
java -jar .\book-1.0.0.RELEASE.jar --server.port=8081
```

> ~‰πüÂèØ‰ª•ÂÖ≥Èó≠redis~

```cmd
java -jar .\book-1.0.0.RELEASE.jar --server.port=8081 --spring.cache.type=none
```

> [!tip]
> Ê≠§È°πÁõÆÂØπÂ∫îÁöÑ[ÂæÆÊúçÂä°ÁâàÊú¨](https://github.com/caolib/cloud-book)

## Êèê‰∫§ÂàÜÊûê
![Alt](https://repobeats.axiom.co/api/embed/fff6dbaa9aa86bbe35a974910b89f89dd10a3383.svg ""Repobeats analytics image"")

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=caolib/book_management_system,caolib/vue3-vite&type=Timeline)](https://star-history.com/#caolib/book_management_system&caolib/vue3-vite&Timeline)
",1,0,1,mit,0.0,"['mysql', 'redis', 'star', 'history']",20,"['mysql', 'redis', 'star', 'history']"
GaoSSR/OnePRO,main,"<div align=center>
  <img width=""365"" src=""./READMEIMG/Project-Name.png"" />
</div>


<div align=""center"">
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%9E%84%E5%BB%BA"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%B5%8B%E8%AF%95"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/appveyor/build/gruntjs/grunt?label=%E6%96%87%E6%A1%A3"" /></a>
  <a href=""javascript:;""><img src=""https://img.shields.io/badge/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE-Apache-brightgreen"" alt=""License""></a>
 </div>
<br />

## ËΩªÈáèÁ∫ßÁÆóÊ≥ïÈ©±Âä®‰ºòÊÉ†Âè†Âä†Âô®

#### RTÔºö
 <img width=""1000"" src=""./READMEIMG/211690962797_.pic.jpg"" />


#### ËÉåÊôØÔºö

‰ºòÊÉ†ÊòØÊé®Âä®Ê∂àË¥πËÄÖËΩ¨ÂåñÁöÑÂÖ≥ÈîÆÂõ†Á¥†ÔºåÂÆÉÂú®ÊøÄÂèëÁî®Êà∑Ê∂àË¥πË°å‰∏∫‰∏äËµ∑ÁùÄÊ†∏ÂøÉ‰ΩúÁî®„ÄÇÁõÆÂâçÂ∏ÇÂú∫‰∏äÁöÑ‰ºòÊÉ†Á≠ñÁï•‰∏ªË¶ÅÊ∂µÁõñ‰∫ÜÂêÑÁßçÊ¥ªÂä®Ôºà‰æãÂ¶ÇÊãºÂ§öÂ§öÁöÑ‚ÄúÁ†ç‰∏ÄÂàÄ‚ÄùÔºåÂ§©Áå´ÂÜúÂú∫ÁöÑ‰∫íÂä®ÔºåÊñ∞Áî®Êà∑ÁöÑÈ¶ñÊ¨°Ë¥≠‰π∞ÔºåÂ§çË¥≠ÔºåÁßØÂàÜÁ≠âÔºâÂíå‰ºòÊÉ†Âà∏ÔºàÂ¶ÇÊäòÊâ£Âà∏Ôºå‰ª£ÈáëÂà∏ÔºåÂïÜÂìÅÂà∏Ôºå‰π∞‰∏ÄËµ†‰∏ÄÁ≠âÔºâ„ÄÇÁÑ∂ËÄåÔºåËøô‰∫õÂ§çÊùÇÁöÑ‰ºòÊÉ†ËßÑÂàô‰ΩøÂæóÁî®Êà∑Âú®ËÆ°ÁÆó‰ºòÊÉ†Âè†Âä†ÁöÑÈ°∫Â∫èÊó∂ÊÑüÂà∞Âõ∞Êâ∞„ÄÇËøôÂèØËÉΩÂØºËá¥Áî®Êà∑Âú®Èù¢ÂØπÂ§öÈáç‰ºòÊÉ†Êó∂Èôç‰ΩéË¥≠‰π∞ÂïÜÂìÅÁöÑÊ¨≤ÊúõÔºåÂ∞§ÂÖ∂ÊòØÂΩì‰ªñ‰ª¨ÂèÇ‰∏é‰∫ÜÂ§ö‰∏™Ê¥ªÂä®Âπ∂ÊåÅÊúâÂ§ö‰∏™‰ºòÊÉ†Âà∏Êó∂ÔºåËøôÁßçÊÉÖÂÜµÊõ¥‰∏∫ÊòéÊòæ„ÄÇ

‰ºòÊÉ†ÁöÑËÆ°ÁÆóÈ°∫Â∫èÂèØ‰ª•ÂàÜ‰∏∫Âπ≥Ë°åÂºèÂíåÊ∏êËøõÂºèÔºåÂÖ∂‰∏≠Âπ≥Ë°åÂºè‰ºòÊÉ†‰πãÈó¥Ê≤°ÊúâÁõ∏‰∫í‰æùËµñÂÖ≥Á≥ªÔºåËÄåÊ∏êËøõÂºè‰ºòÊÉ†‰πãÈó¥ÂàôÂ≠òÂú®‰æùËµñÂÖ≥Á≥ªÔºåÂç≥‰∏ã‰∏Ä‰∏™‰ºòÊÉ†ÁöÑËß¶ÂèëÂèñÂÜ≥‰∫é‰∏ä‰∏Ä‰∏™‰ºòÊÉ†ÁöÑÂÆûÊñΩÁªìÊûú„ÄÇ

ËÆæÊÉ≥Â∞èÊô¥Ê∂àË¥π‰∫Ü100ÂÖÉÔºåÂ•πÊâãÂ§¥Êúâ‰∏ÄÂº†7Êäò‰ºòÊÉ†Âà∏Âíå‰∏ÄÂº†Êª°100ÂÖÉÂáè30ÂÖÉÁöÑ‰ºòÊÉ†Âà∏„ÄÇËøô‰∏§‰∏™‰ºòÊÉ†Âà∏ÁöÑ‰ΩøÁî®È°∫Â∫èÂèØËÉΩ‰ºö‰∫ßÁîü‰∏çÂêåÁöÑÊïàÊûúÔºåÂàôËøô2‰∏™‰ºòÊÉ†Âà∏ÁöÑ‰ΩøÁî®È°∫Â∫èÊúâ‰ª•‰∏ã‰∏§ÁßçÊÉÖÂÜµÔºö

<img src=""./READMEIMG/imageÔºà1Ôºâ.png"" width=""75%"">

`OnePRO`ÈááÁî®‰∫Ü‰∏ÄÁ≥ªÂàóÊñ∞È¢ñÁöÑÁÆóÊ≥ïÔºåÂÆûÁé∞‰∫ÜÈ´òÊïàÊ±ÇËß£‰ºòÊÉ†ÊéíÂàóÁöÑÊúÄ‰ºòËß£„ÄÇ

<img src=""./READMEIMG/imageÔºà2Ôºâ.png"" width=""100%"">

#### Ê†∏ÂøÉËÆ°ÁÆóÁ±ª Permutation&lt;T extends GoodsItem&gt;

`Permutation`ÊòØ‰∏Ä‰∏™ÈáçË¶ÅÁöÑÊäΩË±°Á±ªÔºå‰Ωú‰∏∫`OnePRO`ÁöÑÊ†∏ÂøÉÔºåÂÆÉÈááÁî®‰∫ÜÂ§öÁßç‰ºòÂåñÁ≠ñÁï•Êù•Á°Æ‰øùÈ´òÊÄßËÉΩÔºåËøô‰∫õÁ≠ñÁï•ÁöÑËøêÁî®Êó®Âú®ÊèêÂçáËÆ°ÁÆóÊïàÁéáÂíåÈôç‰ΩéËµÑÊ∫êÊ∂àËÄóÔºåËøô‰∫õÁ≠ñÁï•ÂåÖÊã¨Ôºö

- È¢ÑÂ≠òÁöÑÊéíÂàóÊï∞ÁªìÊûúÈõÜ

‰πãÊâÄ‰ª•ÈááÁî®ËøôÁßçËÆæËÆ°ÔºåÊòØÂõ†‰∏∫Âú®‰∏öÂä°Âú∫ÊôØ‰∏≠ÔºåÊàë‰ª¨ÈúÄË¶ÅÈ¢ëÁπÅËøõË°åÊéíÂàóËÆ°ÁÆó„ÄÇÂØπ‰∫éÁªôÂÆöÈïøÂ∫¶ÁöÑÂ∫èÂàóÔºåÂÖ∂ÊéíÂàóÁªìÊûúÊòØÂõ∫ÂÆöÁöÑ„ÄÇÂú®`Permutation`Á±ª‰∏≠Ôºå`PERMUTATIONS`Â±ûÊÄßÂ≠òÂÇ®‰∫Ü7‰ª•ÂÜÖÁöÑÊéíÂàóÊï∞ÁªìÊûúÈõÜ„ÄÇÁî±‰∫éËøôÈáå‰ΩøÁî®‰∫Ü`Byte`Êù•Â≠òÂÇ®Êï∞ÊçÆÔºåÂõ†Ê≠§Âç†Áî®ÁöÑÂÜÖÂ≠òÁ©∫Èó¥ÈùûÂ∏∏Â∞èÔºåËøôÊúâÂä©‰∫éÊèêÈ´òÊÄßËÉΩÂπ∂Èôç‰ΩéÂÜÖÂ≠òÊ∂àËÄó„ÄÇ

```Java
private final static Map<Integer,Collection<List<Byte>>> PERMUTATIONS = Maps.newHashMap();

```
Ëøô‰∏™Âä®‰ΩúÂú®Á±ªÂä†ËΩΩÂÆåÊàêÊó∂ÊâßË°åÔºåÂ¶ÇÊûúËßâÂæó7‰∏çÂêàÈÄÇÔºåÂØπ7‰∏çÊª°ÊÑèÔºåÂèØ‰ª•ÈÄöËøáË∞ÉÊï¥`SUPPORTEDSIZE`ÁöÑÂ§ßÂ∞èÊù•Êª°Ë∂≥‰∏öÂä°ÂíåÊÄßËÉΩÁöÑÈúÄÊ±Ç„ÄÇ

Êàë‰ª¨Âú®ÂÆûÁé∞‰∏≠ÁªèËøáÊµãËØïÂíåË∞ÉÊï¥ÔºåÁ°ÆÂÆö‰∫Ü7ÊòØ‰∏Ä‰∏™Áõ∏ÂØπÂπ≥Ë°°ÁöÑÂèÇÊï∞ÔºåÂÆÉÂÖºÈ°æ‰∫Ü‰∏öÂä°‰∏éÊÄßËÉΩÔºåÂΩìÁÑ∂ÔºåÊ†πÊçÆÂÆûÈôÖÈúÄÊ±ÇÔºåÂ§ßÂÆ∂ÂèØ‰ª•Ê†πÊçÆËá™Â∑±ÁöÑÊÉÖÂÜµÊù•Ë∞ÉÊï¥Ëøô‰∏™ÂèÇÊï∞„ÄÇ

```Java
public final static int SUPPORTEDSIZE = 7;

static{
      //ÂâçÁΩÆËÆ°ÁÆó 1-SUPPORTEDSIZE ‰πãÈó¥ÊâÄÊúâÊéíÂàóÁªÑÂêà
    for(byte i=1;i<=SUPPORTEDSIZE;i++){
       PERMUTATIONS.put((int)i,Collections2.permutations(IntStream.range(0,i).boxed().map(x->(byte)x.intValue()).collect(Collectors.toList())));
      }
  }

```

- $A_n^3$Á∫ßÂà´ÁºìÂ≠ò

Áõ∏ÂØπ‰∫é‰º†ÁªüÁöÑ`Key-Value`ÁªìÊûÑÔºåËß£ÂÜ≥ $A_n^n$ÈóÆÈ¢òÁöÑÁºìÂ≠òÈúÄË¶ÅËøõË°åÁâπÊÆäËÆæËÆ°ÔºåÂØπ‰∫é‰∏Ä‰∏™‰ºòÊÉ†ÈõÜÂêàËÄåË®ÄÔºå $A_n^3$ÊÑèÂë≥ÁùÄÈúÄË¶ÅÁºìÂ≠ò*n*√ó(*n*‚àí1)√ó(*n*‚àí2)Êù°Êï∞ÊçÆ„ÄÇÂΩìn=7Êó∂ÔºåÈúÄË¶ÅÁºìÂ≠ò210Êù°Êï∞ÊçÆ„ÄÇ‰∏∫‰∫ÜÂú®ÂÜÖÂ≠òÂ§ßÂ∞èÂíåÁºìÂ≠òÂ∏¶Êù•ÁöÑÊÄßËÉΩÊî∂Áõä‰πãÈó¥ÂèñÂæóÂπ≥Ë°°Ôºå $A_n^3$ÊòØÊúÄÂêàÈÄÇÁöÑÁ∫ßÂà´„ÄÇ

`Permutation`Á±ªÈÄöËøáÂÖ∂ÊàêÂëòÂèòÈáè`cache`ÂÆûÁé∞‰∫ÜÈ´òÊÄßËÉΩÁºìÂ≠ò„ÄÇ

```Java
private final Map<Integer, CalcState<T>> cache = Maps.newHashMap();
```
‰Ω†ÊàñËÆ∏Â∑≤ÁªèÊ≥®ÊÑèÂà∞Ôºå`cache`ÁöÑÈîÆÂÄº‰ΩøÁî®ÁöÑÊòØ`Integer`Á±ªÂûã„ÄÇÂú®Â§ßÂ§öÊï∞ÊÉÖÂÜµ‰∏ãÔºåÊàë‰ª¨Êõ¥ÂÄæÂêë‰∫é‰ΩøÁî®`String`Á±ªÂûãÔºå‰ΩÜÂú®ÈúÄË¶ÅËøõË°åÂ§ßÈáèËÆ°ÁÆóÁöÑÂú∫ÊôØ‰∏≠ÔºåÊØîÂ¶ÇÂú®‰∏áÊ¨°ËÆ°ÁÆóÁöÑÂú∫ÊôØ‰∏ãÔºåStringÂ≠óÁ¨¶‰∏≤ÁöÑÊãºÊé•Âç¥Êàê‰∫ÜÊÄßËÉΩÁì∂È¢à„ÄÇ

‰∏∫‰∫ÜÂÆûÁé∞È´òÊÄßËÉΩÁöÑÈîÆÁîüÊàêÔºå`Permutation`ÈááÁî®‰∫ÜÁã¨ÁâπÁöÑÊñπÊ≥ï„ÄÇÂÆÉÈÄöËøá‰ΩçÁßªÂØπ`Byte`Êï∞ÁªÑÁöÑÂâç‰∏â‰∏™Â≠óËäÇËøõË°åÊâ∞Âä®Ôºå‰ª•Á°Æ‰øùÊØè‰∏™ÈîÆÁöÑÂîØ‰∏ÄÊÄßÔºåÂêåÊó∂ÊèêÂçáÊÄßËÉΩ„ÄÇ

```Java
private static Integer calcKey(List<Byte> a){
       return  a.size()>=3?(a.get(0) << 6)+ (a.get(1) << 3) + a.get(2):0;
}
```

`Permutation`Êèê‰æõ‰∫Ü‰øùÂ≠òÁÇπÊù•ÂÆûÁé∞  $A_n^3$ Á∫ßÂà´ÁºìÂ≠òÔºå`CalcState` ËÆ∞ÂΩï‰∫ÜËÆ°ÁÆóÂà∞Á¨¨3Ê≠•ÁöÑÁä∂ÊÄÅÔºåÂåÖÊã¨ÂΩìÂâçËÆ¢Âçï‰ºòÊÉ†ÈáëÈ¢ùÂíåËÆ°ÁÆóËøáÁ®ã„ÄÅÂ∑≤‰∫´Áî®‰ºòÊÉ†ÁöÑÂïÜÂìÅÁ≠âÔºåËøô‰∫õÂ±ûÊÄßÁöÑ‰øùÂ≠òÂíåÂõûÊîæ`Permutation`Â∑≤ÁªèÂ∏Æ‰Ω†ÂÅöÂ•Ω‰∫ÜÔºå`Permutation`È¢ùÂ§ñÊèê‰æõ‰∫ÜÊäΩË±°ÁöÑ‰øùÂ≠òÂíåÂõûÊîæÊñπÊ≥ïÊù•Êª°Ë∂≥‰Ω†ÁöÑ‰∏™ÊÄßÂåñËØâÊ±Ç„ÄÇ

```Java
   /**
     * ‰∏öÂä°Â∞ÜÁä∂ÊÄÅËÆ∞ÂΩïÂà∞‰øùÂ≠òÁÇπ
     * @param state ‰øùÂ≠òÁÇπÂØπË±°
     */
    protected abstract void makeSnapshot(CalcState<T> state,DiscountContext<T> context);

    /**
     * ‰∏öÂä°ËøîÂõû‰øùÂ≠òÁÇπÁä∂ÊÄÅ
     * @param state ‰øùÂ≠òÁÇπÂØπË±°
     */
    protected abstract void backToSnapshot(CalcState<T> state,DiscountContext<T> context);
```

Âú®‰ºòÊÉ†ËÆ°ÁÆó‰∏≠ÔºåÂ≠òÂú®‰∏Ä‰∏™‰ºòÂÖàÁ∫ßËßÑÂàôÔºåÂç≥‰ºòÊÉ†ËÆ°ÁÆóÊòØÊúâ‰ºòÂÖàÁ∫ßÁöÑÔºåÈúÄË¶ÅÁ°Æ‰øùÂ±ûÊÄß`calculateGroup`ÂÄºËæÉÂ∞èÁöÑ‰ºòÊÉ†ÂÖàË°åËÆ°ÁÆó„ÄÇÂΩìÂèëÁîü`backToSnapshot`Êó∂ÔºåÊàë‰ª¨ÈúÄË¶ÅÈ¢ùÂ§ñÊ£ÄÊü•ÁºìÂ≠ò‰∏≠ÊúÄÂêé‰∏Ä‰∏™‰ºòÊÉ†‰∏éÂΩìÂâçÊ≠£ÂáÜÂ§áË¶ÅËÆ°ÁÆóÁöÑ‰ºòÊÉ†‰πãÈó¥ÁöÑÂÖ≥Á≥ªÔºåÂ¶ÇÊûú‰∏çÊª°Ë∂≥ÁâπÂÆöÊù°‰ª∂ÔºåÂàôÁõ¥Êé•ÁªàÊ≠¢ËÆ°ÁÆóÔºåÁõ¥Êé•Ë∑≥Âá∫„ÄÇËÄå`checkIfWakeUpJump`ÊñπÊ≥ï‰ºöÂú®ÁºìÂ≠òË¢´‰ΩøÁî®ÂêéÁ´ãÂç≥Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÁªßÁª≠‰∏ãÂéª„ÄÇ

#### ‰∏ä‰∏ãÊñáÁ±ª DiscountContext&lt;T extends GoodsItem&gt;

`DiscountContext`ÊòØ‰∏ä‰∏ãÊñáÔºå‰πüÊòØ`Permutation`ÁöÑÊàêÂëòÂèòÈáèÔºå`DiscountContext`ÂêåÊ†∑ÂåÖÂê´ÂæàÂ§ö‰ºòÂåñÁ≠ñÁï•Ôºö

- CalcStageÊï∞ÁªÑ

Âú®ÂèòÊõ¥ÊúÄÈ¢ëÁπÅ‰πüÊòØÊúÄÈáçË¶ÅÁöÑËÆ°ÁÆóÊ≠•È™§ÂØπË±°`CalcStage`‰ΩøÁî®Êï∞ÁªÑÂ≠òÂÇ®ÔºåËØ•Êï∞ÁªÑÈöèÁùÄ‰∏ä‰∏ãÊñáÂàõÂª∫ËÄåÂàõÂª∫ÔºåÂú®`Permutation`‰∏≠‰ΩøÁî®

```Java
Arrays.fill(arr,null);
```

Â∞ÜËØ•Êï∞ÁªÑÊ∏ÖÁ©∫Âπ∂ËÆ©ÂÆÉÊäïÂÖ•‰∏ã‰∏ÄÊ¨°ËÆ°ÁÆóÔºåËøôÊ†∑‰∏ÄÊ¨°ÂÖ®ÊéíÂàóËøáÁ®ã‰∏≠ÔºåÊï∞ÁªÑÂè™‰ºöË¢´ÂàõÂª∫‰∏ÄÊ¨°ÔºåÈÅøÂÖç‰∫ÜÈ¢ëÁπÅÂàõÂª∫Êï∞ÁªÑÂ∏¶Êù•ÁöÑÊÄßËÉΩÊçüËÄó„ÄÇ

- È¢ÑËÆ°ÁÆó

`DiscountContext`ÁöÑÂàùÂßãÂåñÊòØÈÄöËøáÈùôÊÄÅÁöÑ`create`ÊñπÊ≥ïÂÆåÊàêÁöÑÔºåËØ•ÊñπÊ≥ïÂ∞ÜÂïÜÂìÅ‰∏é‰ºòÊÉ†ÁªëÂÆöÂú®‰∏ÄËµ∑ÔºåÂêåÊó∂ÊâßË°å‰∏Ä‰∫õÁî®Êà∑Ëá™ÂÆö‰πâÁöÑÈÄªËæëÔºåÊàë‰ª¨Áß∞‰πã‰∏∫‚ÄúÈ¢ÑËÆ°ÁÆó‚ÄùÔºåÈ¢ÑËÆ°ÁÆóÁöÑÁªìÊûúË¢´‰øùÂ≠òÂú®`DiscountContext`ÁöÑ`preCompute`Â±ûÊÄß‰∏≠Ôºå‰ª•‰æøÂú®ÂêéÁª≠ÁöÑËÆ°ÁÆó‰∏≠Áõ¥Êé•ÂèñÁî®ÔºåËøôÁßçÊñπÊ≥ïÈÅøÂÖç‰∫ÜÂú®ÂêéÁª≠ÁöÑÈ´òÈÄüËø≠‰ª£‰∏≠ÈáçÂ§çÊâßË°åÁõ∏ÂêåÁöÑÊìç‰ΩúÔºåÂ¶ÇÂïÜÂìÅÂàÜÁªÑÂíå„ÄÅÊ±ÇÂíåÁ≠âÔºå‰ªéËÄåÊèêÈ´ò‰∫ÜËÆ°ÁÆóÊïàÁéá„ÄÇ

#### È¢ÑËÆ°ÁÆó PreCompute&lt;T extends GoodsItem&gt;

È¢ÑËÆ°ÁÆóÊèê‰æõ‰∫ÜÊé•Âè£ÔºåË¶Å‰ΩøÁî®È¢ÑËÆ°ÁÆóÈ¶ñÂÖàÈúÄË¶ÅÂÆûÁé∞PreComputeÊé•Âè£

```Java
public interface PreCompute<T extends GoodsItem> {
    /**
     * Âà§Êñ≠Á¨¶ÂêàÊù°‰ª∂ÁöÑÊ¥ªÂä®Á±ªÂûãÔºåÁ¨¶ÂêàÊâç‰ºöÊâßË°åpreComputeItems
     */
    Set<String> matchTypes();

    /**
     * ÂØπÂïÜÂìÅÂÅö‰∏Ä‰∫õÂ§çÊùÇÈõÜÂêàÊìç‰Ωú
     * @param items ÂΩìÂâçÂèÇ‰∏é‰ºòÊÉ†ÁöÑÂïÜÂìÅ
     * @param discount ÂΩìÂâç‰ºòÊÉ†
     * @param preCompute Â≠òÂÇ®ËÆ°ÁÆóÁöÑÁªìÊûú
     */
     void preComputeItems(List<T> items, DiscountWrapper discount, Map<String,Object> preCompute);
}
```

Ê≠§Â§ñÈúÄË¶ÅÂú®ËµÑÊ∫êÁõÆÂΩï‰∏ãÂª∫Á´ã`calculator-core.properties`Êñá‰ª∂ÔºåÈÖçÁΩÆÂÜÖÂÆπÂ¶Ç‰∏ã

```Java
precompute.path=‰Ω†Ë¶ÅÊâ´ÊèèÁöÑÂåÖ
```
`PreComputeHolder`Â∞ÜÂ§ÑÁêÜÊâÄÊúâÁöÑ`PreCompute`ÂÆûÁé∞Á±ªÔºåÂè™Êúâ`matchTypes`ÂåπÈÖçÁöÑÊÉÖÂÜµ‰∏ãÔºåÊâç‰ºöÊâßË°å`preComputeItems`ÊñπÊ≥ï„ÄÇ

```Java
public class PreComputeHolder {
    public static Set<PreCompute> COMPUTES= Sets.newHashSet();
    private final static String PATH = ""precompute.path"";

    static{
        Properties properties = new Properties();
        try {
              properties = PropertiesLoaderUtils.loadProperties(new FileSystemResource(Objects.requireNonNull(PreComputeHolder.class.getClassLoader().getResource(""calculator-core.properties"")).getPath()));
        } catch (Exception ignore) {
        }
        String path = properties.getProperty(PATH);
        if(StringUtils.isNotBlank(path)){
            Reflections reflections = new Reflections(path);
            Set<Class<? extends PreCompute>> subTypes = reflections.getSubTypesOf(PreCompute.class);
            for(Class<? extends PreCompute> clazz:subTypes){
                try {
                    COMPUTES.add(clazz.newInstance());
                } catch (Exception ignore) {
                }
            }
        }
    }
}
```

#### ËÆ°ÁÆóÂô® Calculator

`Calculator`ÊòØÂçï‰∏™‰ºòÊÉ†ÁöÑËÆ°ÁÆóÊé•Âè£ÔºàÂç≥Áî®‰∫é‰ºòÊÉ†ËÆ°ÁÆóÁöÑÊé•Âè£ÔºâÔºåÂÆÉÂÖ∂‰∏≠ÂÆö‰πâ‰∫Ü‰∏Ä‰∏™`calcWarp`ÊñπÊ≥ïÔºåË¥üË¥£ÂÖ∑‰ΩìÁöÑ‰ºòÊÉ†ËÆ°ÁÆóÈÄªËæëÔºå‰ΩÜÁî±‰∫é`calcWarp`ÈúÄË¶ÅÊâøÊãÖ‰∏Ä‰∫õÂÜÖÈÉ®ÁöÑ‰∫ãÊÉÖÔºåÈúÄË¶ÅÂ§ÑÁêÜ‰∏Ä‰∫õÂÜÖÈÉ®ÁªÜËäÇÔºåÂõ†Ê≠§‰∏∫‰∫ÜÁÆÄÂåñ‰ΩøÁî®ËÄÖÁöÑÂºÄÂèëÂ∑•‰ΩúÔºåÊàë‰ª¨Êèê‰æõ‰∫Ü‰∏Ä‰∏™ÊäΩË±°Á±ª`AbstractCalculator`ÔºåÂÆÉÂÆûÁé∞‰∫Ü`calcWarp`ÊñπÊ≥ïÔºåÂπ∂ÊúÄÁªàÊö¥Èú≤‰∫Ü‰∏Ä‰∏™Êõ¥ÁÆÄÂçïÊõ¥Áõ¥ËßÇÁöÑ`calc`ÊñπÊ≥ï‰æõ‰ΩøÁî®ËÄÖ‰ΩøÁî®„ÄÇ

`AbstractCalculator`ÁöÑÂÜÖÂÆπÂ¶Ç‰∏ãÔºåÂú®`AbstractCalculator`‰∏≠Ôºå`calcWarp`ÊñπÊ≥ïË¥üË¥£ÂàõÂª∫`CalcStage`ÂØπË±°ÔºåÁª¥Êä§`CalcStage`Êï∞ÁªÑÁ≠âÂÜÖÈÉ®Â∑•‰ΩúÔºåËøô‰∫õÁªÜËäÇÂØπ‰∫é‰ΩøÁî®ËÄÖÊù•ËØ¥ÊòØÈÄèÊòéÁöÑÔºå‰ªñ‰ª¨Âè™ÈúÄË¶ÅÂÖ≥Ê≥®Âπ∂ÂÆûÁé∞`calc`ÊñπÊ≥ïÂç≥ÂèØ„ÄÇ

```Java
public abstract class AbstractCalculator<T extends GoodsItem> implements Calculator<T> {
    public long calcWarp(DiscountContext<T> context, DiscountWrapper discountWrapper, Map<Long, T> records, byte idx, int i) {
        CalcStage stage = new CalcStage();
        CalcResult cr = context.getCalcResult();
        long price= cr.getCurPrice();
        stage.setBeforeCalcPrice(price);
        price = calc(context, discountWrapper,records, price, stage);
        if(price<0){
            return price;
        }
        stage.setAfterCalcPrice(price);
        stage.setIndex(idx);
        stage.setStageType(discountWrapper.getType());
        cr.setCurPrice(price);
        if(stage.getBeforeCalcPrice()>stage.getAfterCalcPrice()) {
            cr.getCurStages()[i] = stage;
        }
        return price;
    }

    /**
     * ËøîÂõûËØ•‰ºòÊÉ†‰∏ãÁöÑÊúÄÁªàË¶ÅÊîØ‰ªòÁöÑÈáëÈ¢ù,Ëã•‰∏çÁ¨¶ÂêàÂàôËøîÂõû prevStagePrice
     * @param context ‰∏ä‰∏ãÊñá
     * @param discountWrapper ‰ºòÊÉ†‰ø°ÊÅØ
     * @param records ËÆ∞ÂΩï‰∫´ÂèóËøá‰ºòÊÉ†ÁöÑÂçïÂìÅÔºåkeyÊòØcalculateIdÔºåËøôÈáåÂè™Êèê‰æõÂÆπÂô®ÔºåÊ∑ªÂä†ÂíåÂà§Êñ≠ËßÑÂàôÁî±‰ΩøÁî®ËÄÖËá™Ë°åÂÜ≥ÂÆö
     * @param prevStagePrice ‰∏ä‰∏ÄÊ≠•ËÆ°ÁÆóÁöÑËÆ¢ÂçïÁöÑ‰ª∑Ê†º
     * @param curStage ÂΩìÂâçstage
     * @return
     */
    public abstract  long calc(DiscountContext<T> context, DiscountWrapper discountWrapper, Map<Long,T> records, long prevStagePrice, CalcStage curStage);

}

```
ÊúÄÁªàÁî®Êà∑ÈÄöËøáÁªßÊâø`AbstractCalculator`Á±ªÔºåÂπ∂Âú®`Component`Ê≥®Ëß£‰∏≠ÊåáÂÆö‰∏Ä‰∏™ÂÄºÔºåËÄå`CalculatorRouter`ÂàôÈÄöËøáËøô‰∏™ÂÄºÂ∞ÜËØ∑Ê±ÇË∑ØÁî±Âà∞Áõ∏Â∫îÁöÑ‰ºòÊÉ†ËÆ°ÁÆóÂô®ÔºåËøô‰∏™ÂÄº‰∏é`DiscountWrapper`‰∏≠ÁöÑ`type`Â±ûÊÄßÁõ∏ÂØπÂ∫î„ÄÇ

```Java
@Component(""manjian"")
public class ManjianCalc extends AbstractCalculator<GoodsItem> {
......
}
```


#### ÂÖ±‰∫´‰∫íÊñ•ÂçèËÆÆ DiscountGroup

ÂÖ±‰∫´‰∫íÊñ•ÂçèËÆÆÊòØ‰∏Ä‰∏™Êï∞ÊçÆÁªìÊûÑÔºåÂÆÉÊòØ‰∏Ä‰∏™Êï∞ÁªÑÔºåÊï∞ÁªÑ‰∏≠ÊúÄÂ§öÂèØ‰ª•ÂåÖÂê´‰∏§‰∏™ÂØπË±°ÔºåÊúÄÂ∞ëÂåÖÂê´‰∏Ä‰∏™ÂØπË±°„ÄÇÂ¶ÇÊûúÊï∞ÁªÑ‰∏≠Âè™Êúâ‰∏Ä‰∏™ÂØπË±°ÔºåÈÇ£‰πàËØ•ÂØπË±°ÂøÖÁÑ∂‰∏∫ÂÖ±‰∫´ÁªÑÔºåÂç≥ÁªÑÂÜÖÁöÑ‰ºòÊÉ†ÂèØ‰ª•Âè†Âä†‰ΩøÁî®„ÄÇ

```JavaScript
[
    {
        ""relation"": ""share"",
        ""items"":
        [
            {
                ""type"": ""activity0"",
                ""id"": ""11""
            }
            ,
            {
                ""type"": ""activity4"",
                ""id"": ""13""
            } 
            ,
            {
                ""type"": ""coupon1"",
                 ""id"": ""14""
            }
        ]
    }]
```
Áõ∏Â∫îÁöÑÔºåÂΩìÊï∞ÁªÑ‰∏≠ÂåÖÂê´‰∏§‰∏™ÂØπË±°Êó∂ÔºåÁ¨¨‰∏Ä‰∏™ÂØπË±°ÁöÑ`relation`Â±ûÊÄßÂèØ‰ª•‰∏∫`share`Êàñ`exclude`ÔºåËÄåÁ¨¨‰∫å‰∏™ÂØπË±°ÁöÑ`relation`Â±ûÊÄßÂøÖÈ°ª‰∏∫`exclude`„ÄÇ

```JavaScript
[
    {
        ""relation"": ""share"",
        ""items"":
        [
            {
                ""type"": ""activity0"",
                ""id"": ""11""
            },
            {
                ""type"": ""card3"",
                ""id"":""12""
            }
        ]
    },
    {
        ""relation"": ""exclude"",
        ""items"":
        [
            {
                ""type"": ""card1"",
                ""id"": ""18""
            },
            {
                ""type"": ""coupon1"",
                ""id"": ""22""
            }
        ]
    }
]
```
ÊúÄÁªàÔºå‰∏äËø∞ÂçèËÆÆÂ∞ÜËΩ¨Âåñ‰∏∫Â¶Ç‰∏ã‰∏§‰∏™ÂÖ±‰∫´ÁªÑÔºö

- `activity0-card3-card1` Âíå `activity0-card3-coupon1`

Â∑•ÂÖ∑Á±ª `DiscountGroupUtil` Êèê‰æõ‰∫Ü‰∏Ä‰∏™ÊñπÊ≥ïÔºåÁî®‰∫éÂ∞ÜÂçèËÆÆËΩ¨Êç¢‰∏∫ÂÖ±‰∫´ÁªÑ„ÄÇÁî±‰∫éÂÖ±‰∫´ÁªÑÂèØËÉΩÂåÖÂê´Â§ßÈáè‰ºòÊÉ†Ôºå‰∏∫‰∫ÜÊèêÈ´òËøáÊª§ÊÄßËÉΩÔºåÊàë‰ª¨Â∞ÜÂΩìÂâçÂèØÁî®ÁöÑ‰ºòÊÉ†ËΩ¨Êç¢‰∏∫‰∫åÁ∫ß`Map`„ÄÇËøô‰∏™`Map`ÁöÑÂ§ñÂ±ÇÈîÆÊòØÂçèËÆÆ‰∏≠ÁöÑ`type`ÔºåËÄåÁ¨¨‰∫åÂ±ÇÈîÆÊòØÂçèËÆÆ‰∏≠ÁöÑ`id`„ÄÇÈÄöËøáËøôÁßçÊñπÂºèÔºåÊàë‰ª¨ÂèØ‰ª•Âø´ÈÄüÂú∞ËøõË°å‰∫§ÂèâËøáÊª§Ôºå‰ªéËÄåÊèêÂçáÊÄßËÉΩ„ÄÇ

```Java
public static List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> transform(List<List<DiscountGroup>> groups, Map<String, Map<String,DiscountWrapper>> inMap);
```
‰∏∫‰∫ÜÁ°Æ‰øùËÆ°ÁÆóÊÄßËÉΩÔºåÊàë‰ª¨Â∞ÜÁî®Êà∑Âú®ÂΩìÂâçËÆ¢Âçï‰∏≠ÂèØ‰∫´ÂèóÁöÑ‰ºòÊÉ†ÂàÜ‰∏∫‰∏§‰∏™ÈõÜÂêà„ÄÇÂ∑¶‰æßÈõÜÂêàÁöÑÂ§ßÂ∞èÈôêÂà∂‰∏∫`SUPPORTEDSIZE`ÔºåÂç≥Êàë‰ª¨ÈáçÁÇπ‰øùÈöúÁöÑ„ÄÅÂú®ËÆ°ÁÆóËÉΩÂäõËåÉÂõ¥ÂÜÖÁöÑ‰ºòÊÉ†„ÄÇËÄåÂè≥‰æßÈõÜÂêàÂàôÂ∞ΩÂèØËÉΩÂú∞ËøõË°åÂè†Âä†„ÄÇ

‰ªéÁ®≥ÂÆöÊÄßËßíÂ∫¶ËÄÉËôëÔºåÊàë‰ª¨ÈúÄË¶ÅÂØπËÆ°ÁÆóÊ¨°Êï∞ËøõË°åÁªüËÆ°„ÄÇÂú®ÂéãÂäõÊµãËØï‰∏≠ÔºåÊàë‰ª¨ÈÄöËøá`LimitingUtil.count`ÊñπÊ≥ïÊù•ÁªüËÆ°ËøõÂÖ•`calc`ÊñπÊ≥ïÁöÑÊ¨°Êï∞„ÄÇÊòæÁÑ∂ÔºåÂú®Ê≤°ÊúâÂºÄÂêØÁºìÂ≠òÁöÑÊÉÖÂÜµ‰∏ãÔºåËÆ°ÁÆóÊ¨°Êï∞‰∏∫ $A_n^n$√ónÔºåËÄåÂΩìÂºÄÂêØÁºìÂ≠òÊó∂ÔºåËÆ°ÁÆóÊ¨°Êï∞‰∏∫ $A_n^n$√ó(n‚àí3)+ $A_n^3$„ÄÇ

#### CASE

Áúã‰∫ÜËøô‰πàÂ§öÊ¶ÇÂøµÔºåÊàë‰ª¨ÂèØ‰ª•Âú®`com.gch.discount.demo`ÂåÖ‰∏≠ÊâæÂà∞ÂÆûÈôÖË∞ÉÁî®ÁöÑÂÖ∑‰ΩìcaseÔºö

```Java
@Controller
public class TestController {

    private final CalculatorRouter calculatorRouter;

    public TestController(CalculatorRouter calculatorRouter) {
        this.calculatorRouter = calculatorRouter;
    }

    @RequestMapping(""test"")
    @ResponseBody
    public Object test() {
        //mockÂïÜÂìÅ
        List<GoodsItem> items = mockItems();
        //mockÁªÑÂÖ≥Á≥ªÂπ∂ËΩ¨Âåñ‰∏∫ÂÖ±‰∫´ÁªÑ
        List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> pairs = transform(mockGroups());
        //ÂÖ®Â±ÄÊúÄ‰ºòËÆ°ÁÆóËøáÁ®ã
        List<CalcStage> globalStages=Lists.newArrayList();
        int count = 0;
        //ËÆ¢ÂçïÊÄªÈáëÈ¢ù
        long totalPrice = items.stream().mapToLong(GoodsInfo::getSalePrice).sum();
        long globalPrice = totalPrice;
        //ÊûÑÂª∫ËÆ°ÁÆóÊµÅ
        Flowable flowable = (Flowable) new Flowable().build(calculatorRouter);
        for(Pair<Set<DiscountWrapper>,Set<DiscountWrapper>> set:pairs) {
            //ÁªüËÆ°ÁÆóÂäõ
            count += LimitingUtil.count(set.getLeft().size());
            if(count>N){
                break;
            }
            List<DiscountWrapper> wrappers = Lists.newArrayList(set.getLeft());
            DiscountContext<GoodsItem> ctx = DiscountContext.create(totalPrice, Lists.newArrayList(items), wrappers);
            flowable.perm(ctx);
            if(ctx.getCalcResult().getFinalPrice() < globalPrice) {
                globalStages = Arrays.asList(ctx.getCalcResult().getStages());
                globalPrice = ctx.getCalcResult().getFinalPrice();
            }
        }
        return Pair.of(globalPrice,globalStages);
    }

    private List<List<DiscountGroup>> mockGroups(){
        List<List<DiscountGroup>> groups = Lists.newArrayList();
        DiscountGroup group = new DiscountGroup();
        group.setRelation(GroupRelation.SHARE.getType());
        group.setItems(Lists.newArrayList(new Item(""zhekou"",""1""),new Item(""manjian"",""2""),new Item(""manzeng"",""3"")));
        groups.add(Lists.newArrayList(group));
        return groups;
    }

    private List<GoodsItem> mockItems(){
        IdGenerator idGenerator = IdGenerator.getInstance();
        GoodsInfo goodsInfo = GoodsInfo.of(1001L,2001L,null,4,20 * 100,""‰∫ßÂìÅ1"",null);
        GoodsInfo goodsInfo2 = GoodsInfo.of(1001L,2002L,null,2,10 * 100,""‰∫ßÂìÅ1"",null);
        List<GoodsItem> items = GoodsItem.generateItems(goodsInfo,idGenerator,x->x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice()));
        items.addAll(GoodsItem.generateItems(goodsInfo2,idGenerator,x->x.getExtra().put(Constant.UPDATEABLEPRICE,x.getSalePrice())));
        return items;
    }

    private List<Pair<Set<DiscountWrapper>,Set<DiscountWrapper>>> transform(List<List<DiscountGroup>> groups){
        List<DiscountWrapper> wrapperList = Lists.newArrayList(
                DiscountWrapper.of(""zhekou"", ""1"", ""ÊäòÊâ£"", false, new DiscountConfig()),
                DiscountWrapper.of(""manjian"", ""2"", ""Êª°Âáè"", false, new DiscountConfig())
        );
        Map<String, Map<String,DiscountWrapper>> inMap = wrapperList.stream().collect(Collectors.toMap(DiscountWrapper::getType, x->ImmutableMap.of(x.getId(),x)));
        return DiscountGroupUtil.transform(groups,inMap);
    }
}

```





",0,0,1,apache-2.0,0.0,"['permutation', 'lt', 't', 'extend', 'goodsitem', 'gt', 'discountcontext', 'lt', 't', 'extend', 'goodsitem', 'gt', 'precompute', 'lt', 't', 'extend', 'goodsitem', 'gt', 'calculator', 'discountgroup', 'case']",9,"['lt', 't', 'extend', 'goodsitem', 'gt']"
Incendo/cloud-minecraft,master,"<div align=""center"">
<img src=""https://github.com/Incendo/cloud/raw/master/img/CloudNew.png"" width=""300px""/>
<br/>
<h1>cloud-minecraft</h1>

![license](https://img.shields.io/github/license/incendo/cloud.svg)
[![central](https://img.shields.io/maven-central/v/org.incendo/cloud-paper)](https://search.maven.org/search?q=org.incendo)
![build](https://img.shields.io/github/actions/workflow/status/incendo/cloud-minecraft/build.yml?logo=github)
[![docs](https://img.shields.io/readthedocs/incendocloud?logo=readthedocs)](https://cloud.incendo.org)
</div>

## links

- JavaDoc: https://javadoc.io/doc/org.incendo
- Docs: https://cloud.incendo.org/minecraft
- Incendo Discord: https://discord.gg/aykZu32

## modules

- cloud-brigadier: integration with [Mojang Brigadier](https://github.com/Mojang/brigadier)
- cloud-paper: integration for Bukkit-based platforms with specific support for [Paper API](https://papermc.io/software/paper)
- cloud-bukkit: integration for Bukkit-based platforms, dependency of cloud-paper
- cloud-velocity: integration for [Velocity API](https://papermc.io/software/velocity)
- cloud-sponge7: integration for [Sponge API](https://spongepowered.org) v7
- cloud-bungee: integration for Bungeecord API
- cloud-cloudburst: integration for cloudburst
- cloud-minecraft-extras: optional extras using [adventure](https://github.com/KyoriPowered/adventure) API
- cloud-minecraft-bom: [bill of materials](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies) for cloud-minecraft dependencies
",10,7,8,mit,33.0,"['link', 'module']",2,"['link', 'module']"
StandardSolvers/ps-code-snippets,main,"![logo](./docs/img/logo.png)


<div align=""center"">
    <a href=""https://www.apache.org/licenses/LICENSE-2.0""><img src=""https://img.shields.io/badge/license-Apache2-green.svg?style=for-the-badge"" alt=""Apache2""></a>
    <img src=""https://img.shields.io/maintenance/yes/2024?style=for-the-badge"" alt=""Maintenance"">
    <a href=""https://github.com/StandardSolvers/ps-code-snippets/graphs/contributors""><img src=""https://img.shields.io/github/contributors/StandardSolvers/ps-code-snippets?style=for-the-badge"" alt=""GitHub contributors""></a>
    <a href=""https://github.com/StandardSolvers/ps-code-snippets/contribute""><img src=""https://img.shields.io/github/issues/StandardSolvers/ps-code-snippets/good%20first%20issue?style=for-the-badge"" alt=""GitHub issues by-label""></a>        
</div>

# Problem Solving Code Snippets
- Unlock the potential of your code with the Algorithm Codesnippet.
- A unique and creative rendering of standard solvers' algorithms, showcasing the beauty and complexity of coding!

# Getting Started
## IntelliJ

# Contributing
- Contributing to ps-code-snippets is very welcome. For basic contributions, all you need is being comfortable with GitHub and Git.
- The best ways to contribute are:
    - Work on new Algorithm (Ps, Statement pair set)
    - Work on documentation
- To ensure equal and positive communication, we adhere to our [Code of Conduct](./CODE_OF_CONDUCT.md). Before starting any interactions with this repository, please read it and make sure to follow.
- Please before contributing check out our [Contributing Guide](./CONTRIBUTING.md) and issues labeled ""good first issue"": [![GitHub issues by-label](https://img.shields.io/github/issues/StandardSolvers/ps-code-snippets/good%20first%20issue?style=for-the-badge)](https://github.com/StandardSolvers/ps-code-snippets/contribute)
<br>

# Features
- Take exactly what's written in the code

![gif](./docs/img/disjoint-set.gif)

# Model
- intellij
    - completion
        - PsCompletionContributor
        - PsCompletionProvider
    - action
        - PsPopUp
    - DialogWrapper
        - PsDailogWrapper
- core
  - PsManager
  - PsProvider
- solution
  - ps
  - statement

## UML: Class Diagram
![uml](./docs/img/uml.png)




",1,0,7,apache-2.0,25.0,"['problem', 'solving', 'code', 'snippet', 'get', 'start', 'intellij', 'contribute', 'feature', 'model', 'uml', 'class', 'diagram']",7,"['problem', 'solving', 'code', 'snippet', 'get']"
quarkiverse/quarkus-fx,main,"# quarkus-fx

[![Version](https://img.shields.io/maven-central/v/io.quarkiverse.fx/quarkus-fx-parent?logo=apache-maven&style=flat-square)](https://search.maven.org/artifact/io.quarkiverse.fx/quarkus-fx)

<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->
This Quarkus extension allows you to use JavaFX in your Quarkus application. \
It will allow component injection in FX Controllers and will allow you to use CDI events to register on primary stage creation.

Please refer to documentation available at https://docs.quarkiverse.io/quarkus-fx/dev/index.html

You will be able to register on primary stage creation event via such code example.
```java
public class QuarkusFxApp {

  @Inject
  FXMLLoader fxmlLoader;

  public void start(@Observes final FxPostStartupEvent event) {
    try {
      InputStream fxml = this.getClass().getResourceAsStream(""/app.fxml"");
      Parent fxmlParent = this.fxmlLoader.load(fxml);

      Stage stage = event.getPrimaryStage();
      
      Scene scene = new Scene(fxmlParent);
      stage.setScene(scene);
      stage.show();

    } catch (IOException e) {
      // Handle error
    }
  }
}
```
To load multiple FXML files, you can use :
```java
@Inject
Instance<FXMLLoader> fxmlLoader;
```

Also, setting the location is required by some use cases (use of relative paths in FXML)
```java
FXMLLoader loader = this.fxmlLoader.get();
// Set location for relative path resolution
loader.setLocation(xxx);
```

For some sample apps and usage, check the `samples/` directory.

## Contributors ‚ú®

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/CodeSimcoe""><img src=""https://avatars.githubusercontent.com/u/110094118?v=4?s=100"" width=""100px;"" alt=""Cl√©ment de Tastes""/><br /><sub><b>Cl√©ment de Tastes</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=CodeSimcoe"" title=""Code"">üíª</a> <a href=""#maintenance-CodeSimcoe"" title=""Maintenance"">üöß</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/ghazyami""><img src=""https://avatars.githubusercontent.com/u/7247810?v=4?s=100"" width=""100px;"" alt=""Ghazy Abdallah""/><br /><sub><b>Ghazy Abdallah</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=ghazyami"" title=""Code"">üíª</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""http://www.jboss.org""><img src=""https://avatars.githubusercontent.com/u/332210?v=4?s=100"" width=""100px;"" alt=""Scott M Stark""/><br /><sub><b>Scott M Stark</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=starksm64"" title=""Code"">üíª</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://fouad.io""><img src=""https://avatars.githubusercontent.com/u/1194488?v=4?s=100"" width=""100px;"" alt=""Fouad Almalki""/><br /><sub><b>Fouad Almalki</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-fx/commits?author=Eng-Fouad"" title=""Code"">üíª</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!
",4,5,2,apache-2.0,65.0,['contributor'],2,['contributor']
hardingadonis/saledock,main,"# Sale Dock

[![build](https://github.com/hardingadonis/saledock/actions/workflows/build.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/build.yml)
[![publish](https://github.com/hardingadonis/saledock/actions/workflows/publish.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/publish.yml)
[![release](https://github.com/hardingadonis/saledock/actions/workflows/release.yml/badge.svg)](https://github.com/hardingadonis/saledock/actions/workflows/release.yml)
[![CodeFactor](https://www.codefactor.io/repository/github/hardingadonis/saledock/badge)](https://www.codefactor.io/repository/github/hardingadonis/saledock)
![GitHub contributors](https://img.shields.io/github/contributors/hardingadonis/saledock)
![GitHub top language](https://img.shields.io/github/languages/top/hardingadonis/saledock)
![GitHub repo size](https://img.shields.io/github/repo-size/hardingadonis/saledock)
![GitHub License](https://img.shields.io/github/license/hardingadonis/saledock)

> SWP391 project, ERP system, Sales module

## Requirements

- JDK 17
- MySQL 8.2.0
- Tomcat 10
- Maven 3+

## Database

<details>
  <summary>Database</summary>

  <div style=""margin-top: 20px"">
    <a href=""https://github.com/hardingadonis/saledock"">
      <img src=""database/database.svg""/>
    </a>
  </div>
</details>

## Development

- You need to install the requirements above.

#### 1. Clone `Sale Dock`:

```bash
git clone https://github.com/hardingadonis/saledock.git
```

#### 2. Open `Sale Dock`:

- You can open `Sale Dock` with your favorite IDE:
  - [IntelliJ IDEA](https://www.jetbrains.com/idea/)
  - [Eclipse](https://www.eclipse.org/)
  - [NetBeans](https://netbeans.apache.org/)

#### 3. Build `Sale Dock` with `Maven` (Optional):

```bash
cd saledock
mvn verify
```

## Deployment

- Open Installation Guide: [Installation Guide](docs/INSTALLATION_GUIDE.md)

## Contributors

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/hardingadonis""><img src=""https://avatars.githubusercontent.com/u/34091632?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Minh V∆∞∆°ng</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/bakaqc""><img src=""https://avatars.githubusercontent.com/u/126387856?v=4"" width=""100px;"" alt=""""/><br /><sub><b>ƒêinh Qu·ªëc Ch∆∞∆°ng</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/htnghia1423""><img src=""https://avatars.githubusercontent.com/u/137130942?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Thunder</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/yuhtnguyen""><img src=""https://avatars.githubusercontent.com/u/137138731?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Yuht</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/linhlm0210""><img src=""https://avatars.githubusercontent.com/u/147788973?v=4"" width=""100px;"" alt=""""/><br /><sub><b>linhlm0210</b></sub></a></td>
    </tr>
    <tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/thson58""><img src=""https://avatars.githubusercontent.com/u/152074875?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Nguyen Son</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://allcontributors.org""><img src=""https://avatars.githubusercontent.com/u/46410174?v=4"" width=""100px;"" alt=""""/><br /><sub><b>All Contributors</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://imgbot.net""><img src=""https://avatars.githubusercontent.com/u/31427850?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Imgbot</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://www.codefactor.io""><img src=""https://avatars.githubusercontent.com/u/13309880?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Automated code reviews</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/AnkitaGhosh2000""><img src=""https://avatars.githubusercontent.com/u/152983487?v=4"" width=""100px;"" alt=""""/><br /><sub><b>AnkitaGhosh2000</b></sub></a></td>
	</tr>
	<tr>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/SaibalCts23""><img src=""https://avatars.githubusercontent.com/u/153187590?v=4"" width=""100px;"" alt=""""/><br /><sub><b>SaibalCts23</b></sub></a></td>
      <td align=""center"" valign=""top"" width=""20%""><a href=""https://github.com/AdrishOfHogwarts""><img src=""https://avatars.githubusercontent.com/u/152976845?v=4"" width=""100px;"" alt=""""/><br /><sub><b>Adrish Bose</b></sub></a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

## Licenses:

- [Sale Dock](https://github.com/hardingadonis/saledock) is under the [Apache-2.0 license](https://github.com/hardingadonis/saledock/blob/main/LICENSE).
- [favicon](https://github.com/hardingadonis/saledock/blob/main/src/main/webapp/assets/images/favicon/favicon.png) is under the [flaticon](https://www.flaticon.com/free-icon/sale_791968).
",10,0,2,apache-2.0,113.0,"['sale', 'dock', 'requirement', 'database', 'development', 'clone', 'sale', 'dock', 'open', 'sale', 'dock', 'build', 'sale', 'dock', 'maven', 'optional', 'deployment', 'contributor', 'license']",10,"['sale', 'dock', 'requirement', 'database', 'development']"
begcode/begcode-admin,main,"# monolithMybatis

Êú¨Â∫îÁî®Á®ãÂ∫èÁî±BegCode8.6.3ÁîüÊàê, ‰Ω†ÂèØ‰ª•Âú® [https://www.begcode.com](https://www.begcode.com) ÊâæÂà∞ÊñáÊ°£ÂíåÂ∏ÆÂä©„ÄÇ

## Êà™ÂõæÂ±ïÁ§∫

### ÁôªÂΩï

![ÁôªÂΩï](./doc/images/login.png)

### È¶ñÈ°µ

![È¶ñÈ°µ](./doc/images/index.png)

### ËèúÂçïÂàóË°®

![ËèúÂçïÂàóË°®](./doc/images/view_permission.png)

### ËßíËâ≤ÂàóË°®

![ËßíËâ≤ÂàóË°®](./doc/images/authority.png)

### Áî®Êà∑ÂàóË°®

![Áî®Êà∑ÂàóË°®](./doc/images/user-list.png)

### Áü≠‰ø°ÈÖçÁΩÆ

![Áü≠‰ø°ÈÖçÁΩÆ](./doc/images/sms_config.png)

### ÂõæÁâá‰∏ä‰º†

![ÂõæÁâá‰∏ä‰º†](./doc/images/upload_image.png)

### Â≠óÂÖ∏ÁÆ°ÁêÜ

![Â≠óÂÖ∏ÁÆ°ÁêÜ](./doc/images/dictionary.png)

### Êìç‰ΩúÊó•Âøó

![Êìç‰ΩúÊó•Âøó](./doc/images/sys_log.png)

### Ê∂àÊÅØÂèëÂ∏É

![Ê∂àÊÅØÂèëÂ∏É](./doc/images/announcement.png)

### ApiÂàóË°®

![ApiÂàóË°®](./doc/images/api.png)

### IconÈÄâÊã©ÂèÇËÄÉ

![IconÈÄâÊã©ÂèÇËÄÉ](./doc/images/icon_picker.png)

### Êü•ÁúãÈÄöÁü•

![Êü•ÁúãÈÄöÁü•](./doc/images/notice.png)

## È°πÁõÆÁªìÊûÑ

ÁîüÊàêÊó∂ÈúÄË¶Å NodeÔºåÂπ∂Âª∫ËÆÆÂú®ÂºÄÂèëËøáÁ®ã‰∏≠‰ΩøÁî®ÂÆÉ„ÄÇpackage.json Êñá‰ª∂ÂßãÁªà‰ºöÁîüÊàêÔºå‰ª•Êèê‰æõÊõ¥Â•ΩÁöÑÂºÄÂèë‰ΩìÈ™åÔºåÂåÖÊã¨ prettier„ÄÅcommit hooks„ÄÅËÑöÊú¨Á≠âÁ≠â„ÄÇ

Âú®È°πÁõÆÁöÑÊ†πÁõÆÂΩï‰∏≠ÔºåJHipster‰ºöÁîüÊàêÁî®‰∫éÈÖçÁΩÆËØ∏Â¶Çgit„ÄÅprettier„ÄÅeslint„ÄÅhuskyÁ≠â‰ºóÂ§öÂ∏∏ËßÅÂ∑•ÂÖ∑ÁöÑÈÖçÁΩÆÊñá‰ª∂„ÄÇ‰Ω†ÂèØ‰ª•Âú®ÁΩëÁªú‰∏äÊâæÂà∞ÊúâÂÖ≥Ëøô‰∫õÂ∑•ÂÖ∑ÁöÑÂèÇËÄÉÊñáÊ°£„ÄÇ

`/src/*` ÁõÆÂΩïÁªìÊûÑÈÅµÂæ™ÈªòËÆ§ÁöÑJavaÁªìÊûÑ„ÄÇ

- `.yo-rc.json` - YeomanÈÖçÁΩÆÊñá‰ª∂ÔºàBegCode/JHipsterÈÖçÁΩÆÊñá‰ª∂Ôºâ
  BegCodeÁöÑÈÖçÁΩÆÂ≠òÂÇ®Âú®key‰∏∫generator-begcodeÁöÑÂ±ûÊÄß‰∏≠ÔºåËøôÈáåÂÆö‰πâ‰∫ÜBegCodeÁîüÊàêÂô®ÁöÑÂÖ®Â±ÄÈÖçÁΩÆ„ÄÇÊ≠§Â§ñÔºå‰Ω†ÂèØËÉΩ‰ºöÂú®È°πÁõÆÊ†πÁõÆÂΩï‰∏ãÁöÑ.yo-rc.jsonÊñá‰ª∂‰∏≠ÊâæÂà∞Á±ª‰ººgenerator-begcode-\*ÁöÑËìùÂõæÈÖçÁΩÆÔºåÂÆÉÂåÖÂê´‰∫ÜÈ°πÁõÆÁâπÂÆöÁöÑÈÖçÁΩÆÈÄâÈ°π„ÄÇ
- `.yo-resolve` (ÂèØÈÄâ) - Yeoman ÂÜ≤Á™ÅËß£ÂÜ≥Âô®
  ÂÖÅËÆ∏Âú®ÂèëÁé∞ÂÜ≤Á™ÅÊó∂‰ΩøÁî®ÁâπÂÆöÊìç‰ΩúÔºåË∑≥ËøáÂåπÈÖçÊ®°ÂºèÁöÑÊñá‰ª∂ÁöÑÊèêÁ§∫„ÄÇÊØè‰∏ÄË°åÂ∫îËØ•ÂåπÈÖç [Ê®°Âºè] [Êìç‰Ωú]ÔºåÂÖ∂‰∏≠Ê®°ÂºèÊòØ‰∏Ä‰∏™ Minimatch Ê®°ÂºèÔºåÊìç‰ΩúÊòØ skipÔºàÂ¶ÇÊûúÁúÅÁï•Âàô‰∏∫ÈªòËÆ§Êìç‰ΩúÔºâÊàñËÄÖ force ‰∏≠ÁöÑ‰∏Ä‰∏™„ÄÇ‰ª• # ÂºÄÂ§¥ÁöÑË°åË¢´ËßÜ‰∏∫Ê≥®ÈáäÔºåÂ∞ÜË¢´ÂøΩÁï•„ÄÇ
- `.jhipster/*.json` - JHipsterÂÆû‰ΩìÈÖçÁΩÆÊñá‰ª∂

- `npmw` - Áî®‰∫éÊú¨Âú∞ÂÆâË£ÖÁöÑnpmÁöÑÂåÖË£ÖÂô®
  BegCodeÈªòËÆ§‰ΩøÁî®ÊûÑÂª∫Â∑•ÂÖ∑Âú®Êú¨Âú∞ÂÆâË£ÖNodeÂíåpnpm„ÄÇÊ≠§ÂåÖË£ÖÂô®Á°Æ‰øùÊú¨Âú∞ÂÆâË£ÖpnpmÂπ∂‰ΩøÁî®ÂÆÉÔºåÈÅøÂÖç‰∫Ü‰∏çÂêåÁâàÊú¨ÂèØËÉΩÂºïËµ∑ÁöÑ‰∏Ä‰∫õÂ∑ÆÂºÇ„ÄÇÈÄöËøá‰ΩøÁî®./npmwËÄå‰∏çÊòØ‰º†ÁªüÁöÑnpmÔºåÊÇ®ÂèØ‰ª•ÈÖçÁΩÆ‰∏Ä‰∏™Êó†ÈúÄNodeÁöÑÁéØÂ¢ÉÊù•ÂºÄÂèëÊàñÊµãËØïÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇ
- `/src/main/docker` - Â∫îÁî®Á®ãÂ∫èÂèäÂÖ∂‰æùËµñÁöÑÊúçÂä°ÁöÑDockerÈÖçÁΩÆ

## ÂºÄÂèë

    ÊûÑÂª∫Á≥ªÁªüÂ∞ÜËá™Âä®ÂÆâË£ÖÊé®ËçêÁöÑNodeÂíåpnpmÁâàÊú¨„ÄÇ
    Êàë‰ª¨Êèê‰æõ‰∫Ü‰∏Ä‰∏™ÂåÖË£ÖÂô®Êù•ÂêØÂä® pnpm„ÄÇ

‰ªÖÂΩì [package.json](package.json) ‰∏≠ÁöÑ‰æùËµñÈ°πÂèëÁîüÊõ¥ÊîπÊó∂ÔºåÊÇ®ÊâçÈúÄË¶ÅÂÜçÊ¨°ËøêË°åÊ≠§ÂëΩ‰ª§„ÄÇ

```
./npmw install
```

Êàë‰ª¨‰ΩøÁî® pnpm ËÑöÊú¨Âíå [Vite][] ‰Ωú‰∏∫Êàë‰ª¨ÁöÑÊûÑÂª∫Á≥ªÁªü„ÄÇ

Âú®‰∏§‰∏™ÂçïÁã¨ÁöÑÁªàÁ´Ø‰∏≠ËøêË°å‰ª•‰∏ãÂëΩ‰ª§Ôºå‰ª•ÂàõÂª∫Êõ¥Â•ΩÁöÑÂºÄÂèë‰ΩìÈ™åÔºåÂÖ∂‰∏≠ÂΩìÁ°¨Áõò‰∏äÁöÑÊñá‰ª∂ÂèëÁîüÊõ¥ÊîπÊó∂ÊÇ®ÁöÑÊµèËßàÂô®Ëá™Âä®Âà∑Êñ∞„ÄÇ

```
./mvnw
./npmw start
```

Npm ËøòÁî®‰∫éÁÆ°ÁêÜÊ≠§Â∫îÁî®Á®ãÂ∫è‰∏≠‰ΩøÁî®ÁöÑ CSS Âíå JavaScript ‰æùËµñÈ°π„ÄÇ ÊÇ®ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèÂçáÁ∫ß‰æùËµñÈ°π
Âú® [package.json](package.json) ‰∏≠ÊåáÂÆöËæÉÊñ∞ÁâàÊú¨„ÄÇ ÊÇ®ËøòÂèØ‰ª•ËøêË°å`pnpm update`Âíå`pnpm install`Êù•ÁÆ°ÁêÜ‰æùËµñÈ°π„ÄÇ
Âú®‰ªª‰ΩïÂëΩ‰ª§‰∏äÊ∑ªÂä†`help`Ê†áÂøó‰ª•Êü•ÁúãÂ¶Ç‰Ωï‰ΩøÁî®ÂÆÉ„ÄÇ ‰æãÂ¶ÇÔºå`pnpm help update`„ÄÇ

`./npmw run` ÂëΩ‰ª§Â∞ÜÂàóÂá∫ÂèØÁî®‰∫éËØ•È°πÁõÆËøêË°åÁöÑÊâÄÊúâËÑöÊú¨„ÄÇ

## Á≥ªÁªüÊûÑÂª∫

### ÂàõÂª∫JarÂåÖ

Ë¶Å‰ºòÂåñmonolithMybatisÂ∫îÁî®Á®ãÂ∫èÂàõÂª∫JarÂåÖÂπ∂ËøõË°åÁîü‰∫ßÈÉ®ÁΩ≤ÔºåËØ∑ËøêË°åÔºö

```
./mvnw package -Pprod clean verify -DskipTests
```

ËøôÂ∞ÜÂéãÁº©ÂÆ¢Êà∑Á´ØÂíåÈáçÊñ∞ÊâìÂåÖCSSÂíåJavaScriptÊñá‰ª∂„ÄÇ ÂÆÉËøòÂ∞Ü‰øÆÊîπ`index.html`Ôºå‰ª•‰æøÂºïÁî®Ëøô‰∫õÊñ∞Êñá‰ª∂„ÄÇ
‰∏∫‰∫ÜÁ°Æ‰øù‰∏ÄÂàáÊ≠£Â∏∏ÔºåËØ∑ËøêË°åÔºö

```
java -jar target/*.jar
```

ÁÑ∂ÂêéÂú®ÊµèËßàÂô®ÊâìÂºÄÔºö[http://localhost:8080](http://localhost:8080)„ÄÇ

ËØ∑ÂèÇÈòÖ[Using JHipster in production][] ‰∫ÜËß£Êõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ

### ÂàõÂª∫WarÂåÖ

Ë¶ÅÂ∞ÜÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫èÊâìÂåÖ‰∏∫ war ‰ª•‰æøÂ∞ÜÂÖ∂ÈÉ®ÁΩ≤Âà∞Â∫îÁî®Á®ãÂ∫èÊúçÂä°Âô®ÔºåËØ∑ËøêË°åÔºö

```
./mvnw package -Pprod,war clean verify
```

### JHipster Control Center

JHipster Control Center ÂèØ‰ª•Â∏ÆÂä©ÊÇ®ÁÆ°ÁêÜÂíåÊéßÂà∂ÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇ ÊÇ®ÂèØ‰ª•‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§ÂêØÂä®Êú¨Âú∞ÊéßÂà∂‰∏≠ÂøÉÊúçÂä°Âô®ÔºàÂèØÈÄöËøá http://localhost:7419 ËÆøÈóÆÔºâÔºö

```
docker compose -f src/main/docker/jhipster-control-center.yml up
```

## ÊµãËØï

### ËøêË°åSpring Boot ÊµãËØï

Ë¶ÅÂêØÂä®Â∫îÁî®Á®ãÂ∫èÁöÑÊµãËØïÔºåËØ∑ËøêË°åÔºö

```
./mvnw verify
```

### Client tests

Unit tests are run by [Jest][]. They're located in [front/src/test/javascript/](front/src/test/javascript/) and can be run with:

```
./npmw test
```

## ÂÖ∂‰ªñ

### ‰ΩøÁî®SonarËøõË°å‰ª£Á†ÅË¥®ÈáèÊéßÂà∂

SonarÁî®‰∫éÂàÜÊûê‰ª£Á†ÅË¥®Èáè„ÄÇ ÊÇ®ÂèØ‰ª•‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§ÂêØÂä®Êú¨Âú∞ Sonar ÊúçÂä°Âô®ÔºàÂèØÈÄöËøá http://localhost:9001 ËÆøÈóÆÔºâÔºö

```
docker compose -f src/main/docker/sonar.yml up -d
```

Note: we have turned off forced authentication redirect for UI in [src/main/docker/sonar.yml](src/main/docker/sonar.yml) for out of the box experience while trying out SonarQube, for real use cases turn it back on.

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner) or by using the maven plugin.

Then, run a Sonar analysis:

```
./mvnw -Pprod clean verify sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

If you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.

```
./mvnw initialize sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

Additionally, Instead of passing `sonar.password` and `sonar.login` as CLI arguments, these parameters can be configured from [sonar-project.properties](sonar-project.properties) as shown below:

```
sonar.login=admin
sonar.password=admin
```

For more information, refer to the [Code quality page][].

### Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.

For example, to start a mysql database in a docker container, run:

```
docker compose -f src/main/docker/mysql.yml up -d
```

To stop it and remove the container, run:

```
docker compose -f src/main/docker/mysql.yml down
```

You can also fully dockerize your application and all the services that it depends on.
To achieve this, first build a docker image of your app by running:

```
npm run java:docker
```

Or build a arm64 docker image when using an arm64 processor os like MacOS with M1 processor family running:

```
npm run java:docker:arm64
```

Then run:

```
docker compose -f src/main/docker/app.yml up -d
```

When running Docker Desktop on MacOS Big Sur or later, consider enabling experimental `Use the new Virtualization framework` for better processing performance ([disk access performance is worse](https://github.com/docker/roadmap/issues/7)).

For more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.

## Continuous Integration (optional)

To configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.

[BegCodeÊúÄÊñ∞ÊñáÊ°£]: https://www.begcode.com
[Node.js]: https://nodejs.org/
[NPM]: https://www.npmjs.com/
[Webpack]: https://webpack.github.io/
[BrowserSync]: https://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Leaflet]: https://leafletjs.com/
[DefinitelyTyped]: https://definitelytyped.org/
",0,1,1,mit,0.0,"['monolithmybatis', 'jhipster', 'control', 'center', 'boot', 'client', 'test', 'use', 'docker', 'simplify', 'development', 'optional', 'continuous', 'integration', 'optional']",29,"['optional', 'monolithmybatis', 'jhipster', 'control', 'center']"
charmy/react-native-stroke-text,main,"# React Native Stroke/Outline Text

[![npm version](https://badge.fury.io/js/@charmy.tech%2Freact-native-stroke-text.svg)](https://badge.fury.io/js/@charmy.tech%2Freact-native-stroke-text)

Allows you to add stylish text with stroke effects to your mobile applications. It is perfect for creating visually
appealing text elements with outline effects.

<h1 align=""center"">
  <img width=""550"" src=""docs/example.jpeg""/>
</h1>

## Installation

```bash
npm install @charmy.tech/react-native-stroke-text
# or
yarn add @charmy.tech/react-native-stroke-text
```

## Android
min ```compileSdkVersion``` is required to be ```34```
## iOS
Go to your ios folder and run:

```
pod install
```

## Usage

Here's a quick example to get you started with StrokeText:

```jsx
import React from ""react"";
import { StrokeText } from ""@charmy.tech/react-native-stroke-text"";
import { View } from ""react-native"";

export default function Screen() {
  return (
    <View style={{ flex: 1, justifyContent: ""center"", alignItems: ""center"" }}>
      <StrokeText
        text=""Test""
        fontSize={50}
        color=""#000000""
        strokeColor=""#c334eb""
        strokeWidth={20}
        fontFamily=""Nunito-Black""
      />
    </View>
  );
}

```

### Props

The following table outlines the props available for the `StrokeText` component:

| Prop            | Type    | Description                                                     |
|-----------------|---------|-----------------------------------------------------------------|
| `text`          | string  | The text content you want to display.                           |
| `fontSize`      | number  | Size of the text font, defining how large the text will be.     |
| `color`         | string  | Color of the text, can use any valid color format.              |
| `strokeColor`   | string  | Color of the stroke (outline) around the text.                  |
| `strokeWidth`   | number  | Width of the stroke, determining the thickness of the outline.  |
| `fontFamily`    | string  | Font family for the text, should match available project fonts. |
| `align`         | string  | Text alignment (default: `center`)                              |
| `numberOfLines` | number  | Number of lines (default: `0`)                                  |
| `ellipsis`      | boolean | Ellipsis (...) (default: `false`)                               |
| `width`         | number  | Text width to enable ellipsis (default: `undefined`)            |

## Ellipsis

```jsx
<StrokeText
  text=""Lorem ipsum""
    width={150} // +
    ellipsis={true} // +
    numberOfLines={1} // +
  fontSize={32}
  color=""#FFFFFF""
  strokeColor=""#000000""
  strokeWidth={2}
  fontFamily=""Nunito-Black""
  align=""center""
/>

```

<h1 align=""center"">
  <img width=""450"" src=""docs/ellipsis.jpeg""/>
</h1>

## Custom Font

### Bare React Native

Create a `react-native.config.js` file in the root directory

```javascript
module.exports = {
  project: {
    ios: {},
    android: {},
  },
  assets: ['/assets/fonts'], // or './src/assets/fonts'
};
```

### Expo ([expo-font](https://docs.expo.dev/versions/latest/sdk/font/))

```tsx
import { useFonts } from ""expo-font"";
import { Dosis_400Regular } from ""@expo-google-fonts/dosis"";


const [fontsLoaded, fontError] = useFonts({
  Danfo: require(""./src/assets/fonts/Danfo-Regular.ttf""),
  ""Dosis-Regular"": Dosis_400Regular,
});
```

## Contributing

We welcome contributions to improve this component. Feel free to submit issues and enhancement requests.

## License

Please refer to the project's license for usage rights and limitations.
",11,4,1,mit,3.0,"['react', 'native', 'text', 'installation', 'android', 'io', 'usage', 'prop', 'ellipsis', 'custom', 'font', 'bare', 'react', 'native', 'expo', 'http', 'contribute', 'license']",13,"['react', 'native', 'text', 'installation', 'android']"
6tail/tyme4j,master,"# Tyme [![License](https://img.shields.io/badge/license-MIT-4EB1BA.svg?style=flat-square)](https://github.com/6tail/tyme4j/blob/master/LICENSE)

TymeÊòØ‰∏Ä‰∏™ÈùûÂ∏∏Âº∫Â§ßÁöÑÊó•ÂéÜÂ∑•ÂÖ∑Â∫ìÔºåÂèØ‰ª•Áúã‰Ωú [Lunar](https://6tail.cn/calendar/api.html ""https://6tail.cn/calendar/api.html"") ÁöÑÂçáÁ∫ßÁâàÔºåÊã•ÊúâÊõ¥‰ºòÁöÑËÆæËÆ°ÂíåÊâ©Â±ïÊÄßÔºåÊîØÊåÅÂÖ¨ÂéÜÂíåÂÜúÂéÜ„ÄÅÊòüÂ∫ß„ÄÅÂπ≤ÊîØ„ÄÅÁîüËÇñ„ÄÅËäÇÊ∞î„ÄÅÊ≥ïÂÆöÂÅáÊó•Á≠â„ÄÇ

### Maven

```xml
<dependency>
  <groupId>cn.6tail</groupId>
  <artifactId>tyme4j</artifactId>
  <version>1.1.5</version>
</dependency>
```

## Á§∫‰æã

    import com.tyme.solar.SolarDay;
     
    public class Sample {
      public static void main(String[] args) {
        SolarDay solarDay = SolarDay.fromYmd(1986, 5, 29);
         
        // 1986Âπ¥5Êúà29Êó•
        System.out.println(solarDay);
         
        // ÂÜúÂéÜ‰∏ôÂØÖÂπ¥ÂõõÊúàÂªø‰∏Ä
        System.out.println(solarDay.getLunarDay());
      }
    }

## ÊñáÊ°£

ËØ∑ÁßªÊ≠•Ëá≥ [https://6tail.cn/tyme.html](https://6tail.cn/tyme.html ""https://6tail.cn/tyme.html"")

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=6tail/tyme4j&type=Date)](https://star-history.com/#6tail/tyme4j&Date)
",15,2,1,mit,3.0,"['tyme', 'license', 'http', 'http', 'maven', 'star', 'history']",5,"['http', 'tyme', 'license', 'maven', 'star']"
lokerxx/JavaVul,master,"# JavaVul

![](https://socialify.git.ci/lokerxx/JavaVul/image?description=1&font=Inter&forks=1&name=1&owner=1&pattern=Circuit%20Board&stargazers=1&theme=Light)

## ‰ªãÁªç

Java ÂÆâÂÖ®ÊºèÊ¥ûÈù∂Âú∫ÔºåÁî®‰∫éÊµãËØïIASTÂíåÊâ´ÊèèÂô®ÁöÑË¢´Âä®Êâ´ÊèèÂäüËÉΩÔºåÈõÜÂêà‰∫ÜÂ§ö‰∏™ÂÆâÂÖ®ÊºèÊ¥ûÔºåÂà©Áî®dockerÈïúÂÉè‰∏∫ÊØè‰∏™Èù∂Âú∫Áã¨Á´ãÁéØÂ¢ÉËøêË°å„ÄÇ

ÊñáÁ´†Ôºö[IASTÂÆûË∑µÊÄªÁªì](https://mp.weixin.qq.com/s/ahxKXv5eKcULVF_VqAjbyg)

## ÈÉ®ÁΩ≤

mvnÁâàÊú¨

```sh
# mvn --version
Apache Maven 3.0.5 (Red Hat 3.0.5-17)
Maven home: /usr/share/maven
Java version: 1.8.0_192, vendor: Oracle Corporation
Java home: /usr/java/jdk1.8.0_192/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.10.0-1160.el7.x86_64"", arch: ""amd64"", family: ""unix""
```

dockerÂíådocker-composeÁâàÊú¨

```sh
# docker version
Client:
 Version:         1.13.1
 API version:     1.26
 Package version: docker-1.13.1-209.git7d71120.el7.centos.x86_64
 Go version:      go1.10.3
 Git commit:      7d71120/1.13.1
 Built:           Wed Mar  2 15:25:43 2022
 OS/Arch:         linux/amd64

Server:
 Version:         1.13.1
 API version:     1.26 (minimum version 1.12)
 Package version: docker-1.13.1-209.git7d71120.el7.centos.x86_64
 Go version:      go1.10.3
 Git commit:      7d71120/1.13.1
 Built:           Wed Mar  2 15:25:43 2022
 OS/Arch:         linux/amd64
 Experimental:    false

# docker-compose version
docker-compose version 1.18.0, build 8dd22a9
docker-py version: 2.6.1
CPython version: 3.6.8
OpenSSL version: OpenSSL 1.0.2k-fips  26 Jan 2017
```

> ÈªòËÆ§dockerÂíådocker-composeÂ§™‰ΩéÔºåÈúÄË¶ÅÂÆâË£ÖÊØîËæÉÊñ∞ÁöÑ
>
> ```
>  yum remove docker \
>               docker-client \
>               docker-client-latest \
>               docker-common \
>               docker-latest \
>               docker-latest-logrotate \
>               docker-logrotate \
>               docker-engine
> 
> sudo yum install -y yum-utils
> sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
> 
> sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
> ```

‰∏ãËΩΩÈ°πÁõÆ

```sh
git clone https://github.com/lokerxx/JavaVul
```

‰ª•‰∏ãÊòØËøêË°åËÑöÊú¨Ôºö

|            Êñá‰ª∂            |                             ‰ΩúÁî®                             |            ËøêË°å            |
| :------------------------: | :----------------------------------------------------------: | :------------------------: |
| docker-compose-build.yaml  | Âú®ÂÆπÂô®ÈáåÈù¢ÊûÑÂª∫jarÂåÖÔºåÊØè‰∏™Èù∂Âú∫ÊûÑÂª∫‰ºöÈáçÂ§çÊûÑÂª∫Ôºà**ÊûÑÂª∫ÈÄüÂ∫¶‰ºöÂæàÊÖ¢Ôºå‰∏çÂª∫ËÆÆ**Ôºâ | `bash run-build_images.sh` |
| docker-compose-local.yaml  | ÂÆø‰∏ªÊú∫mavenÊûÑÂª∫ÂêÑ‰∏™Èù∂Âú∫ÁöÑjarÂåÖÔºåÂ§ö‰∏™Èù∂Âú∫ÂèØ‰ª•Âü∫‰∫émavenÁºìÂ≠òÂø´ÈÄüÊûÑÂª∫Ôºà**Êé®Ëçê**Ôºâ | `bash run-local-build.sh`  |
| docker-compose-remote.yaml | Áõ¥Êé•Âéªdockerhub‰∏ãËΩΩÊàëÊûÑÂª∫‰∏ä‰º†ÊàêÂäüÁöÑÈïúÂÉèÔºà**ÈïúÂÉèÊõ¥Êñ∞‰∏çÂèäÊó∂**Ôºâ |    `bash run-remote.sh`    |

> Ê≠§Â§ñÔºåÈúÄ‰øÆÊîπyamlÊñá‰ª∂ÈáåÈù¢`flask.environment.HOST`‰∏∫ÂÆø‰∏ªÊú∫ÁöÑIPÔºåÁî®‰∫éË∑ëÊµãËØïÁî®‰æã„ÄÇ**ÁÑ∂ÂêéÊàëÂú®yamlÊñá‰ª∂Â∑≤ÁªèÈªòËÆ§ÊåÇËΩΩagent.jar**ÔºåÂ¶ÇÊûú‰Ω†‰ª¨Ë¶ÅÊµãËØïIAST agentÂäüËÉΩÔºåÁõ¥Êé•ÊõøÊç¢Âà∞`agent/agent.jar`Âç≥ÂèØ„ÄÇÊàëËøôËæπËá™Â∑±ÂÜô‰∫Ü‰∏Ä‰∏™ÁÆÄÂçïÁöÑjava agentÔºåÂèÇËÄÉ‰∏ãÈù¢[SimpleAgent]()

> Â¶ÇÊûúË¶ÅÊµãËØïË¢´Âä®‰ª£ÁêÜÊâ´ÊèèÔºåÈúÄË¶Å‰øÆÊîπ`index/app.py`ÈáåÈù¢`proxy_mode`‰∏∫`True`Ôºå‰øÆÊîπËá™Â∑±ÁöÑ‰ª£ÁêÜÂú∞ÂùÄÔºö`proxies`

> **‰øÆÊîπÂÆåÊàê‰πãÂêéÔºåÊ†πÊçÆËá™Â∑±ÁöÑÈúÄÊ±ÇÔºåËøêË°å‰∏äÈù¢Ë°®Ê†ºÁöÑshËÑöÊú¨ÈÉ®ÁΩ≤ËøêË°åÂç≥ÂèØ**„ÄÇ

> Âõ†‰∏∫ÊºèÊ¥ûÂ∫îÁî®ÊØîËæÉÂ§ö**‰ΩÜÊòØÊé•Âè£ÊØîËæÉÂ∞ë**ÔºåÊàëÁªôÊØè‰∏™Â∫îÁî®ÈÖçÁΩÆ512-1024MÂÜÖÂ≠òÔºàÊµãËØïËøêË°åË¶Å16GÂÜÖÂ≠òÔºâ„ÄÇÂ¶ÇÊûúË¶ÅÈÖçÁΩÆÂ§ß‰∏ÄÁÇπÊµãËØï IAST AGENTÔºåÂàôÂèØ‰ª•ÊâπÈáè‰øÆÊîπ`docker-compose.yaml`ÁöÑ`-Xms512m -Xmx1024m`ÁöÑÁéØÂ¢ÉÂèòÈáè

> Âü∫Êú¨webÊºèÊ¥ûÁöÑ‰ª£Á†ÅÂÆ°ËÆ°ÁöÑÁªÜËäÇÔºåÂèÇËÄÉËøôÈáåÔºöhttps://github.com/lokerxx/CybersecurityNote/tree/master/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/JAVA%E6%BC%8F%E6%B4%9E



### ÂéãÂäõÊµãËØï

ÈÉ®ÁΩ≤ËøêË°å

|              Êñá‰ª∂               |                         ‰ΩúÁî®                         |          ËøêË°å          |
| :-----------------------------: | :--------------------------------------------------: | :--------------------: |
| docker-compose-microservice.yml | ËøêË°åÂ§ö‰∏™springcloudÂæÆÊúçÂä°ÔºåÁî®‰∫éÊµãËØïÂ§öÈìæË∑Ø IAST agent | `run-local-service.sh` |

ÊµãËØïÁî®‰æã

| Êé•Âè£                                            | ÂéãÊµãÂëΩ‰ª§                                                     |
| ----------------------------------------------- | ------------------------------------------------------------ |
| http://ip:29998/process-user-data?userData=test | ` ab -n 1000 -c 20 ""http://IP:29998/process-user-data?userData=test""` |



## ÊîØÊåÅÈù∂Âú∫

|          Êñá‰ª∂Â§π           |                           ÂÆâÂÖ®ÊºèÊ¥û                           |  ÊµãËØïÁî®ÈÄî  |                       Â§áÊ≥®                        |
| :-----------------------: | :----------------------------------------------------------: | :--------: | :-----------------------------------------------: |
|  actuator_authorized_1.X  |                   actuator Êú™ÊéàÊùÉËÆøÈóÆ 1.X                    |    ‰øÆÂ§ç    |                                                   |
|  actuator_authorized_2.X  |                   actuator Êú™ÊéàÊùÉËÆøÈóÆ 2.X                    |    ‰øÆÂ§ç    |                                                   |
| actuator_unauthorized_1.X |                   actuator Êú™ÊéàÊùÉËÆøÈóÆ 1.X                    |    ÊºèÊ¥û    |                                                   |
| actuator_unauthorized_2.X |                   actuator Êú™ÊéàÊùÉËÆøÈóÆ 2.X                    |    ÊºèÊ¥û    |                                                   |
|         base_vul          | SQLÊ≥®ÂÖ•„ÄÅXSS„ÄÅ‰∏çÂÆâÂÖ®Êñá‰ª∂Êìç‰Ωú„ÄÅÈáçÂÆöÂêëÊºèÊ¥û„ÄÅÊ≠£ÂàôDOSÊºèÊ¥û„ÄÅCrlfÊ≥®ÂÖ•ÊºèÊ¥û„ÄÅÂëΩ‰ª§Ê≥®ÂÖ•ÊºèÊ¥û„ÄÅSPELÊºèÊ¥û„ÄÅSSRFÊºèÊ¥û„ÄÅSSTIÊºèÊ¥û„ÄÅ‰∏çÂÆâÂÖ®ÂèçÂ∞ÑÊºèÊ¥û„ÄÅXXEÊºèÊ¥û |    ÊºèÊ¥û    |                                                   |
|      base_vul_repair      | SQLÊ≥®ÂÖ•„ÄÅXSS„ÄÅ‰∏çÂÆâÂÖ®Êñá‰ª∂Êìç‰Ωú„ÄÅÈáçÂÆöÂêëÊºèÊ¥û„ÄÅÊ≠£ÂàôDOSÊºèÊ¥û„ÄÅCrlfÊ≥®ÂÖ•ÊºèÊ¥û„ÄÅÂëΩ‰ª§Ê≥®ÂÖ•ÊºèÊ¥û„ÄÅSPELÊºèÊ¥û„ÄÅSSRFÊºèÊ¥û„ÄÅSSTIÊºèÊ¥û„ÄÅ‰∏çÂÆâÂÖ®ÂèçÂ∞ÑÊºèÊ¥û„ÄÅXXEÊºèÊ¥û |    ‰øÆÂ§ç    |                                                   |
|          cas_xxe          |                           XXEÊºèÊ¥û                            |    ÊºèÊ¥û    | casÂú®3.1.1-3.5.1Â≠òÂú®XXEÊºèÊ¥û<br />‰øÆÂ§çÁâàÊú¨‰∏∫3.6.0- |
|        collections        |                     collections ÂèçÂ∫èÂàóÂåñ                     | **Êú™ÂÆåÊàê** |                                                   |
|      CVE-2019-10173       |                     XStreamÂèçÂ∫èÂàóÂåñÊºèÊ¥û                      |    ÊºèÊ¥û    |                                                   |
|      CVE-2019-12384       |                jackson-databind ÂèçÂ∫èÂàóÂåñÊºèÊ¥û                 |    ÊºèÊ¥û    |                                                   |
|     druid_authorized      |                       druidÊú™ÊéàÊùÉÊºèÊ¥û                        |    ‰øÆÂ§ç    |                                                   |
|    druid_unauthorized     |                       druidÊú™ÊéàÊùÉÊºèÊ¥û                        |    ÊºèÊ¥û    |                                                   |
|        fastjson-*         |                 ÂêÑ‰∏™ÁâàÊú¨fastjsonÂèçÂ∫èÂàóÂåñÊºèÊ¥û                 |    ÊºèÊ¥û    |                                                   |
|         Hibernate         |                      Hibernate Ê≥®ÂÖ•ÊºèÊ¥û                      | ‰øÆÂ§ç„ÄÅÊºèÊ¥û |                                                   |
|          HSQLDB           |                       HSQLDB Ê≥®ÂÖ•ÊºèÊ¥û                        | ‰øÆÂ§ç„ÄÅÊºèÊ¥û |                                                   |
|            jsp            |                                                              | **Êú™ÂÆåÊàê** |                  jspÁâàÁöÑbase_vul                  |
|         log4jvul          |                         log4j2 ÊºèÊ¥û                          |    ÊºèÊ¥û    |                                                   |
|  microservice-*-service   |                          ÂàÜÂ∏ÉÂºèÊúçÂä°                          |  ÊÄßËÉΩÊµãËØï  |            Áî®‰∫éÈ™åËØÅÂàÜÂ∏ÉÂºèÂæÆÊúçÂä°ÁöÑÊÄßËÉΩ             |
|         wxpay-xxe         |                       ÂæÆ‰ø°ÊîØ‰ªòXXEÊºèÊ¥û                        |    ÊºèÊ¥û    |                                                   |
|         logic_vul         |                        ‰∏öÂä°ÈÄªËæëÊºèÊ¥ûÔºö                        |            |                                                   |
|                           |                                                              |            |                                                   |
|                           |                                                              |            |                                                   |
|                           |                                                              |            |                                                   |





## ËøêË°å

ËÆøÈóÆÔºö`http://ÂÆø‰∏ªÊú∫IP:5000/`

ÊàëÈÖçÁΩÆ‰∫Ü‰∏âÁßçÊ®°ÂºèÔºö

- ÊîªÂáªÔºöÂèëÈÄÅ‰∏Ä‰∫õpayloadÔºåËß¶ÂèëÊºèÊ¥û
- Ê≠£Â∏∏ÔºöÊúâÂèØËÉΩÊòØÊºèÊ¥ûÔºå‰ΩÜÊòØÂèëÈÄÅÊòØÊ≠£Â∏∏ÁöÑÊï∞ÊçÆ
- ‰øÆÂ§çÔºöÊºèÊ¥ûÂ∑≤Áªè‰øÆÂ§çÔºå‰ΩÜÊòØpayload‰∏çÁîüÊïàÔºàËøáÊª§ÊàñËÄÖÊä•ÈîôÔºâ
- ËØØÊä•ÔºöIASTÊàñSASTËØØÊä•Ê£ÄÊµãÁöÑÂÆâÂÖ®ÊºèÊ¥û

ÂÖ∂‰∏≠Âè≥ËæπÊµãËØïÊåâÈíÆÔºåÂèØ‰ª•ÂØπËøô‰∏™Êé•Âè£ËøõË°åÁî®‰æãÊµãËØï„ÄÇ

![image-20240306164920221](.gitbook/assets/image-20240306164920221.png)

‰πüÂèØ‰ª•Ëá™ÂÆö‰πâÂèëÈÄÅpayloadÔºåËøõË°åË∞ÉËØï

![image-20240306165001240](.gitbook/assets/image-20240306165001240.png)

‰πüÂèØ‰ª•ÊâπÈáèÂèëÈÄÅËØ∑Ê±ÇÔºåÂêÑ‰∏™ÊºèÊ¥ûÁöÑÂõûÊòæÔºå‰ºöÂú®‰∏ãÈù¢ÊòæÁ§∫„ÄÇ

![image-20240127215349622](.gitbook/assets/image-20240127215349622.png)



## SimpleAgent

Java Agent ÊòØ‰∏ÄÁßçÂ∑•ÂÖ∑ÔºåÂÆÉÂèØ‰ª•‰ΩøÁî® Java Instrumentation API Âú®ËøêË°åÊó∂‰øÆÊîπÂ≠óËäÇÁ†Å„ÄÇ‰∏Ä‰∏™ÈùûÂ∏∏ÁÆÄÂçïÁöÑ Java Agent ÂèØ‰ª•‰ªÖ‰ªÖËÆ∞ÂΩï‰∏Ä‰∏™Ê∂àÊÅØÔºå‰ª•Ë°®ÊòéÂÆÉÂ∑≤Ë¢´Âä†ËΩΩ„ÄÇ

È¶ñÂÖàÔºåÂàõÂª∫ Agent Á±ª `SimpleAgent.java`Ôºö

```java
package my.agent;

import java.lang.instrument.Instrumentation;

public class SimpleAgent {
    public static void premain(String agentArgs, Instrumentation inst) {
        System.out.println(""SimpleAgent Â∑≤Âä†ËΩΩ"");
    }
}
```

Âú®ËøôÊÆµ‰ª£Á†Å‰∏≠Ôºå`premain` ÊñπÊ≥ïÊòØ Java Agent ÁöÑÂÖ•Âè£ÁÇπ„ÄÇÂÆÉÂú®Â∫îÁî®Á®ãÂ∫èÁöÑ `main` ÊñπÊ≥ï‰πãÂâçË¢´Ë∞ÉÁî®„ÄÇ

Êé•‰∏ãÊù•Ôºå‰Ω†ÈúÄË¶Å‰∏Ä‰∏™ manifest Êñá‰ª∂Êù•ÊåáÂÆö Agent-Class„ÄÇÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ `MANIFEST.MF` ÁöÑÊñá‰ª∂ÔºåÂÜÖÂÆπÂ¶Ç‰∏ãÔºö

```
Manifest-Version: 1.0
Premain-Class: my.agent.SimpleAgent
Can-Redefine-Classes: true
Can-Retransform-Classes: true
```

Ëøô‰∏™ manifest Êñá‰ª∂ÊåáÂÆö‰∫Ü agent Á±ªÂπ∂ÂêØÁî®‰∫Ü‰∏Ä‰∫õÂäüËÉΩÔºåÂ¶ÇÁ±ªÁöÑÈáçÂÆö‰πâÂíåÈáçËΩ¨Êç¢„ÄÇ

Áé∞Âú®ÔºåÂ∞Ü Java Agent ÁºñËØëÂπ∂ÊâìÂåÖÊàê JAR Êñá‰ª∂„ÄÇÂÅáËÆæ‰Ω†ÁöÑ Java Êñá‰ª∂Âú® `src` ÁõÆÂΩï‰∏≠Ôºå‰ΩøÁî® `javac` Âíå `jar` ÂëΩ‰ª§Ôºå‰Ω†ÂèØ‰ª•ËøôÊ†∑ÂÅöÔºö

1. ÁºñËØë agent Á±ªÔºö

```sh
# javac -source 1.8 -target 1.8 -d . src/main/java/my/agent/SimpleAgent.java
```

2. Â∞ÜÁºñËØëÂêéÁöÑÁ±ªÊâìÂåÖÊàêÂ∏¶Êúâ manifest ÁöÑ JAR Êñá‰ª∂Ôºö

```sh
# jar cvfm SimpleAgent.jar MANIFEST.MF my/agent/SimpleAgent.class
added manifest
adding: my/agent/SimpleAgent.class(in = 492) (out= 320)(deflated 34%)
```

Áé∞Âú®‰Ω†Êúâ‰∫Ü‰∏Ä‰∏™ÂèØ‰ª•‰Ωú‰∏∫ Java Agent ‰ΩøÁî®ÁöÑ `SimpleAgent.jar`„ÄÇË¶ÅÂ∞ÜËøô‰∏™ agent ÈôÑÂä†Âà∞‰Ω†ÁöÑÂ∫îÁî®Á®ãÂ∫è‰∏äÔºåÂêØÂä® Java Â∫îÁî®Á®ãÂ∫èÊó∂‰ΩøÁî® `-javaagent` ÈÄâÈ°πÔºåÂ∞Ü`SimpleAgent.jar`ÈáçÂëΩÂêçÂà∞`./agent/agent.jar`

```sh
# mv SimpleAgent.jar ../agent/agent.jar
```



## ÊîØÊåÅÊµãËØïÁöÑÊºèÊ¥û

| Êé•Âè£ | ÊºèÊ¥ûÂêçÂ≠ó | ËØ∑Ê±ÇÊñπÊ≥ï | url | Êé•Âè£Á±ªÂûã |
| :----------------------------------------: | :---------------------------------------------------------: | -------- | :----------------------------------------------------------: | :------: |
| druid_authorized | druidÊú™ÊéàÊùÉÊºèÊ¥û | GET | http://192.168.0.9:9996/druid | ‰øÆÂ§ç |
| actuator2_authorized | SpringBoot ActuatorÊú™ÊéàÊùÉËÆøÈóÆÊºèÊ¥û2.X | GET | http://192.168.0.9:9994/actuator | ‰øÆÂ§ç |
| actuator1_authorized | SpringBoot ActuatorÊú™ÊéàÊùÉËÆøÈóÆÊºèÊ¥û1.X | GET | http://192.168.0.9:9992/trace | ‰øÆÂ§ç |
| sql_injection_id_repair | SQLÊ≥®ÂÖ•-mybatics-Êï∞Â≠ó | GET | http://192.168.0.9:9990/users/1'/ | ‰øÆÂ§ç |
| sql_injection_ids_repair | SQLÊ≥®ÂÖ•-mybatics-Êï∞ÁªÑ | GET | http://192.168.0.9:9990/users/ids/?ids=1,2,3' | ‰øÆÂ§ç |
| sql_injection_like_repair | SQLÊ≥®ÂÖ•-mybatics-likeÊ®°Á≥äÂåπÈÖç | GET | http://192.168.0.9:9990/users/name?name=A' | ‰øÆÂ§ç |
| sql_injection_strs_repair | SQLÊ≥®ÂÖ•-mybatics-Â≠óÁ¨¶‰∏≤Êï∞ÁªÑ | GET | http://192.168.0.9:9990/users/names?names=Alice&names=Bob' | ‰øÆÂ§ç |
| sql_injection_orderby_repair | SQLÊ≥®ÂÖ•-mybatics-ÊéíÂ∫è | GET | http://192.168.0.9:9990/users/sort?orderByColumn=name&orderByDirection=asc' | ‰øÆÂ§ç |
| xss_reflect_htmlEscape_repair | ÂèçÂ∞ÑÂûãXSSÊºèÊ¥û-htmlEscapeÁ±ª | GET | http://192.168.0.9:9990/xss_reflect_htmlEscape?name=<script>alert(123)</script> | ‰øÆÂ§ç |
| xss_reflect_escapeHtml4_repair | ÂèçÂ∞ÑÂûãXSSÊºèÊ¥û-escapeHtml4Á±ª | GET | http://192.168.0.9:9990/xss_reflect_escapeHtml4?name=<script>alert(123)</script> | ‰øÆÂ§ç |
| xss_reflect_escapeHtml_reparir | ÂèçÂ∞ÑÂûãXSSÊºèÊ¥û-htmlÁºñÁ†Å | GET | http://192.168.0.9:9990/xss_reflect_escapeHtml?name=<script>alert(123)</script> | ‰øÆÂ§ç |
| xss_storage_thymeleaf_reparir | Â≠òÂÇ®ÂûãXSSÊºèÊ¥û-thymeleafÊ®°ÊùøËøáÊª§ | GET | http://192.168.0.9:9990/xss_storage_thymeleaf?name=<script>alert(123)</script> | ‰øÆÂ§ç |
| file_upload_repair | ‰ªªÊÑèÊñá‰ª∂‰∏ä‰º†ÊºèÊ¥û | POST | http://192.168.0.9:9990/file_upload | ‰øÆÂ§ç |
| file_read_repair | Êñá‰ª∂ËØªÂèñÊºèÊ¥û | GET | http://192.168.0.9:9990/file_read?filePath=pom.xml | ‰øÆÂ§ç |
| file_write_repair | ‰ªªÊÑèÊñá‰ª∂ÂÜôÂÖ•ÊºèÊ¥û | GET | http://192.168.0.9:9990/file_write?fileName=test.txt&data=test | ‰øÆÂ§ç |
| file_download_repair | ‰ªªÊÑèÊñá‰ª∂‰∏ãËΩΩÊºèÊ¥û | GET | http://192.168.0.9:9990/file_download?fileName=../test.log | ‰øÆÂ§ç |
| file_delete_repair | ‰ªªÊÑèÊñá‰ª∂Âà†Èô§ÊºèÊ¥û | GET | http://192.168.0.9:9990/file_delete?fileName=test.txt | ‰øÆÂ§ç |
| runtime_command_execute_repair | ÂëΩ‰ª§ÊâßË°åÊºèÊ¥û-Runtime | GET | http://192.168.0.9:9990/runtime_command_execute?command=whoami | ‰øÆÂ§ç |
| process_builder_command_repair | ÂëΩ‰ª§ÊâßË°åÊºèÊ¥û-ProcessBuilder | GET | http://192.168.0.9:9990/process_builder_command_execute?command=whoami | ‰øÆÂ§ç |
| crlf_injection_repair | CRLFÊ≥®ÂÖ• | GET | http://192.168.0.9:9990/crlf_injection?name=%0D%0ASet-Cookie: sessionid=123456 | ‰øÆÂ§ç |
| spel_expression_repair | SPELË°®ËææÂºèÊîªÂáª | GET | http://192.168.0.9:9990/spel_expression?input=T(java.lang.Runtime).getRuntime().exec('whoami') | ‰øÆÂ§ç |
| ssrf_openStream_repair | SSRFÊîªÂáª-openStream | GET | http://192.168.0.9:9990/ssrf_openStream?url=https://www.baidu.com | ‰øÆÂ§ç |
| ssrf_openConnection_repair | SSRFÊîªÂáª-openConnection | GET | http://192.168.0.9:9990/ssrf_openConnection?url=http://www.baidu.com | ‰øÆÂ§ç |
| ssrf_requestGet_repair | SSRFÊîªÂáª-requestGet | GET | http://192.168.0.9:9990/ssrf_requestGet?url=http://www.baidu.com | ‰øÆÂ§ç |
| ssrf_okhttp_repair | SSRFÊîªÂáª-okhttp | GET | http://192.168.0.9:9990/ssrf_okhttp?url=http://www.baidu.com | ‰øÆÂ§ç |
| ssrf_defaultHttpClient_repair | SSRFÊîªÂáª-defaultHttpClient | GET | http://192.168.0.9:9990/ssrf_defaultHttpClient?url=http://www.baidu.com | ‰øÆÂ§ç |
| ssti_velocity_repair | SSTIÊîªÂáª-velocity | GET | http://192.168.0.9:9990/ssti_velocity?content=%23set (%24exp %3d ""exp"")%3b%24exp.getClass().forName(""java.lang.Runtime"").getRuntime().exec(""whoami"") | ‰øÆÂ§ç |
| xxe_saxparserfactory_repair | XXE-saxparserfactory | POST | http://192.168.0.9:9990/xxe_saxparserfactory | ‰øÆÂ§ç |
| xxe_xmlreaderfactory_repair | XXE-xmlreaderfactory | POST | http://192.168.0.9:9990/xxe_xmlreaderfactory | ‰øÆÂ§ç |
| xxe_saxbuilder_repair | XXE-saxbuilder | POST | http://192.168.0.9:9990/xxe_saxbuilder | ‰øÆÂ§ç |
| xxe_saxreader_repair | XXE-saxreader | POST | http://192.168.0.9:9990/xxe_saxreader | ‰øÆÂ§ç |
| xxe_documentbuilderfactory_repair | XXE-documentbuilderfactory | POST | http://192.168.0.9:9990/xxe_documentbuilderfactory | ‰øÆÂ§ç |
| xxe_documentbuilderfactory_xinclude_repair | XXE-documentbuilderfactory_xinclude | POST | http://192.168.0.9:9990/xxe_documentbuilderfactory_xinclude | ‰øÆÂ§ç |
| OpenRedirector_ModelAndView_repair | URLÈáçÂÆöÂêëÊºèÊ¥û-ModelAndView | GET | http://192.168.0.9:9990/OpenRedirector_ModelAndView?url=https://www.baidu.com | ‰øÆÂ§ç |
| OpenRedirector_sendRedirect_repair | URLÈáçÂÆöÂêëÊºèÊ¥û-sendRedirect | GET | http://192.168.0.9:9990/OpenRedirector_sendRedirect?url=https://www.baidu.com | ‰øÆÂ§ç |
| OpenRedirector_lacation_repair | URLÈáçÂÆöÂêëÊºèÊ¥û-location | GET | http://192.168.0.9:9990/OpenRedirector_lacation?url=https://www.baidu.com | ‰øÆÂ§ç |
| swagger-ui_repair | swagger-ui-Êú™ÊéàÊùÉËÆøÈóÆÊºèÊ¥û | GET | http://192.168.0.9:9990/swagger-ui.html | ‰øÆÂ§ç |
| sql_injection_Optional_repair | SQLÊ≥®ÂÖ•-Optional<String> | GET | http://192.168.0.9:9990/users/findByOptionalUsername?username=test' | ‰øÆÂ§ç |
| sql_injection_Object_repair | SQLÊ≥®ÂÖ•-Object[] | POST | http://192.168.0.9:9990/users/get_name_object | ‰øÆÂ§ç |
| sql_injection_Annotation_repair | SQLÊ≥®ÂÖ•-MyBatisÊ≥®Ëß£ÊñπÂºè | GET | http://192.168.0.9:9990/users/by-username?name=test | ‰øÆÂ§ç |
| sql_injection_lombok_repair | SQLÊ≥®ÂÖ•-lombok | POST | http://192.168.0.9:9990/users/lombok | ‰øÆÂ§ç |
| sql_injection_hsqldb_repair | SQLÊ≥®ÂÖ•-hsqldb | GET | http://192.168.0.9:9989/hsqldb_repair?username=1' | ‰øÆÂ§ç |
| sql_injection_Hibernate_repair | SQLÊ≥®ÂÖ•-Hibernate | GET | http://192.168.0.9:9988/Hibernate_injection_repair?username=foobar' OR (SELECT COUNT(*) FROM User)>=0 OR 'foobar'=' | ‰øÆÂ§ç |
| log4j2_attack | Log4j2 ËøúÁ®ã‰ª£Á†ÅÊâßË°åÊºèÊ¥ûÔºàCVE-2021-44228Ôºâ | POST | http://192.168.0.9:9998/log4j2 | ÊîªÂáª |
| fastjson1_2_24_attack | fastjson-1.2.24ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9999/fastjson1.2.24-process | ÊîªÂáª |
| fastjson1_2_25_attack | fastjson-1.2.25-1.2.47ÂèçÂ∫èÂàóÊºèÊ¥û-‰∏çÈúÄË¶ÅAutoTypeSupport-ÈÄöÊùÄ | POST | http://192.168.0.9:9987/fastjson1.2.25-process | ÊîªÂáª |
| fastjson1_2_41_attack | fastjson-1.2.25-1.2.41ÂèçÂ∫èÂàóÊºèÊ¥û-setAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.41-process-setAutoTypeSupport | ÊîªÂáª |
| fastjson1_2_42_attack | fastjson-1.2.42ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9986/fastjson1.2.42-process | ÊîªÂáª |
| fastjson1_2_43_attack | fastjson-1.2.43ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9985/fastjson1.2.43-process | ÊîªÂáª |
| fastjson1_2_45_attack | fastjson-1.2.45ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9984/fastjson1.2.45-process | ÊîªÂáª |
| fastjson1_2_59_attack_1 | fastjson-1.2.59ÂèçÂ∫èÂàóÊºèÊ¥û(1.2.5 <= 1.2.59)-payload1 | POST | http://192.168.0.9:9983/fastjson1.2.59-process | ÊîªÂáª |
| fastjson1_2_59_attack_2 | fastjson-1.2.59ÂèçÂ∫èÂàóÊºèÊ¥û(1.2.5 <= 1.2.59)-payload2 | POST | http://192.168.0.9:9983/fastjson1.2.59-process | ÊîªÂáª |
| fastjson1_2_60_attack_1 | fastjson-1.2.60ÂèçÂ∫èÂàóÊºèÊ¥û(1.2.5 <= 1.2.60)-payload1 | POST | http://192.168.0.9:9982/fastjson1.2.60-process | ÊîªÂáª |
| fastjson1_2_60_attack_2 | fastjson-1.2.60ÂèçÂ∫èÂàóÊºèÊ¥û(1.2.5 <= 1.2.60)-payload2 | POST | http://192.168.0.9:9982/fastjson1.2.60-process | ÊîªÂáª |
| fastjson1_2_61_attack_1 | fastjson-1.2.61ÂèçÂ∫èÂàóÊºèÊ¥û-payload1 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | ÊîªÂáª |
| fastjson1_2_61_attack_2 | fastjson-1.2.61ÂèçÂ∫èÂàóÊºèÊ¥û-payload2 | POST | http://192.168.0.9:9981/fastjson1.2.61-process | ÊîªÂáª |
| fastjson1_2_62_attack_1 | fastjson-1.2.62ÂèçÂ∫èÂàóÊºèÊ¥û-payload1 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | ÊîªÂáª |
| fastjson1_2_62_attack_2 | fastjson-1.2.62ÂèçÂ∫èÂàóÊºèÊ¥û-payload2 | POST | http://192.168.0.9:9980/fastjson1.2.62-process | ÊîªÂáª |
| fastjson1_2_66_attack_1 | fastjson-1.2.66ÂèçÂ∫èÂàóÊºèÊ¥û-payload1 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | ÊîªÂáª |
| fastjson1_2_66_attack_2 | fastjson-1.2.66ÂèçÂ∫èÂàóÊºèÊ¥û-payload2 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | ÊîªÂáª |
| fastjson1_2_66_attack_3 | fastjson-1.2.66ÂèçÂ∫èÂàóÊºèÊ¥û-payload3 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | ÊîªÂáª |
| fastjson1_2_66_attack_4 | fastjson-1.2.66ÂèçÂ∫èÂàóÊºèÊ¥û-payload4 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | ÊîªÂáª |
| fastjson1_2_66_attack_5 | fastjson-1.2.66ÂèçÂ∫èÂàóÊºèÊ¥û-payload5 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | ÊîªÂáª |
| fastjson1_2_66_attack_6 | fastjson-1.2.66ÂèçÂ∫èÂàóÊºèÊ¥û-payload6 | POST | http://192.168.0.9:9979/fastjson1.2.66-process | ÊîªÂáª |
| fastjson1_2_67_attack_1 | fastjson-1.2.67ÂèçÂ∫èÂàóÊºèÊ¥û-payload1 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | ÊîªÂáª |
| fastjson1_2_67_attack_2 | fastjson-1.2.67ÂèçÂ∫èÂàóÊºèÊ¥û-payload2 | POST | http://192.168.0.9:9978/fastjson1.2.67-process | ÊîªÂáª |
| fastjson1_2_68_attack_1 | fastjson-1.2.68ÂèçÂ∫èÂàóÊºèÊ¥û-payload1 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | ÊîªÂáª |
| fastjson1_2_68_attack_2 | fastjson-1.2.68ÂèçÂ∫èÂàóÊºèÊ¥û-payload2 | POST | http://192.168.0.9:9977/fastjson1.2.68-process | ÊîªÂáª |
| fastjson1_2_80_attack | fastjson-1.2.80ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9976/fastjson1.2.80-process | ÊîªÂáª |
| druid_unauthorized | druidÊú™ÊéàÊùÉÊºèÊ¥û | GET | http://192.168.0.9:9997/druid | ÊîªÂáª |
| actuator2_unauthorized | SpringBoot ActuatorÊú™ÊéàÊùÉËÆøÈóÆÊºèÊ¥û2.X | GET | http://192.168.0.9:9995/actuator | ÊîªÂáª |
| actuator1_unauthorized | SpringBoot ActuatorÊú™ÊéàÊùÉËÆøÈóÆÊºèÊ¥û1.X | GET | http://192.168.0.9:9993/trace | ÊîªÂáª |
| sql_injection_id_attack | SQLÊ≥®ÂÖ•-mybatics-Êï∞Â≠ó | GET | http://192.168.0.9:9991/users/1'/ | ÊîªÂáª |
| sql_injection_ids_attack | SQLÊ≥®ÂÖ•-mybatics-Êï∞ÁªÑ | GET | http://192.168.0.9:9991/users/ids/?ids=1,2,3' | ÊîªÂáª |
| sql_injection_like_attack | SQLÊ≥®ÂÖ•-mybatics-likeÊ®°Á≥äÂåπÈÖç | GET | http://192.168.0.9:9991/users/name?name=A' | ÊîªÂáª |
| sql_injection_strs_attack | SQLÊ≥®ÂÖ•-mybatics-Â≠óÁ¨¶‰∏≤Êï∞ÁªÑ | GET | http://192.168.0.9:9991/users/names?names=Alice&names=Bob' | ÊîªÂáª |
| sql_injection_orderby_attack | SQLÊ≥®ÂÖ•-mybatics-ÊéíÂ∫è | GET | http://192.168.0.9:9991/users/sort?orderByColumn=name&orderByDirection=asc' | ÊîªÂáª |
| sql_injection_Optional_attack | SQLÊ≥®ÂÖ•-Optional<String> | GET | http://192.168.0.9:9991/users/findByOptionalUsername?username=test' | ÊîªÂáª |
| sql_injection_Object_attack | SQLÊ≥®ÂÖ•-Object<String> | POST | http://192.168.0.9:9991/users/get_name_object | ÊîªÂáª |
| sql_injection_Annotation_attack | SQLÊ≥®ÂÖ•-MyBatisÊ≥®Ëß£ÊñπÂºè | GET | http://192.168.0.9:9991/users/by-username?name=test' | ÊîªÂáª |
| sql_injection_lombok_attack | SQLÊ≥®ÂÖ•-lombok | POST | http://192.168.0.9:9991/users/lombok | ÊîªÂáª |
| sql_injection_hsqldb_attack | SQLÊ≥®ÂÖ•-hsqldb | GET | http://192.168.0.9:9989/hsqldb?username=1' | ÊîªÂáª |
| sql_injection_Hibernate_attack | SQLÊ≥®ÂÖ•-Hibernate | GET | http://192.168.0.9:9988/Hibernate_injection?username=foobar' OR (SELECT COUNT(*) FROM User)>=0 OR 'foobar'=' | ÊîªÂáª |
| xss_reflect_attack | ÂèçÂ∞ÑÂûãXSSÊºèÊ¥û | GET | http://192.168.0.9:9991/xss_reflect?name=<script>alert(123)</script> | ÊîªÂáª |
| xss_storage_attack | Â≠òÂÇ®ÂûãXSSÊºèÊ¥û | GET | http://192.168.0.9:9991/xss_storage?name=<script>alert(123)</script> | ÊîªÂáª |
| xss_dom_attack | DOM XSSÊºèÊ¥û | POST | http://192.168.0.9:9991/xss_dom | ÊîªÂáª |
| file_upload_attack | ‰ªªÊÑèÊñá‰ª∂‰∏ä‰º†ÊºèÊ¥û | POST | http://192.168.0.9:9991/file_upload | ÊîªÂáª |
| file_read_attack | ‰ªªÊÑèÊñá‰ª∂ËØªÂèñÊºèÊ¥û | GET | http://192.168.0.9:9991/file_read?filePath=/etc/passwd | ÊîªÂáª |
| file_write_attack | ‰ªªÊÑèÊñá‰ª∂ÂÜôÂÖ•ÊºèÊ¥û | GET | http://192.168.0.9:9991/file_write?fileName=test.txt&data=test | ÊîªÂáª |
| file_download_attack | ‰ªªÊÑèÊñá‰ª∂‰∏ãËΩΩÊºèÊ¥û | GET | http://192.168.0.9:9991/file_download?fileName=../pom.xml | ÊîªÂáª |
| file_delete_attack | ‰ªªÊÑèÊñá‰ª∂Âà†Èô§ÊºèÊ¥û | GET | http://192.168.0.9:9991/file_delete?fileName=test.txt | ÊîªÂáª |
| runtime_command_execute | ÂëΩ‰ª§ÊâßË°åÊºèÊ¥û-runtime | GET | http://192.168.0.9:9991/runtime_command_execute?command=whoami | ÊîªÂáª |
| process_builder_command_execute | ÂëΩ‰ª§ÊâßË°åÊºèÊ¥û-ProcessBuilder | GET | http://192.168.0.9:9991/process_builder_command_execute?command=whoami | ÊîªÂáª |
| crlf_injection_attack | CRLFÊ≥®ÂÖ• | GET | http://192.168.0.9:9991/crlf_injection?name=%0D%0ASet-Cookie: sessionid=123456 | ÊîªÂáª |
| spel_expression_attack | SPELË°®ËææÂºèÊîªÂáª | GET | http://192.168.0.9:9991/spel_expression?input=T(java.lang.Runtime).getRuntime().exec('whoami') | ÊîªÂáª |
| ssrf_openStream_attack | SSRFÊîªÂáª-openStream | GET | http://192.168.0.9:9991/ssrf_openStream?url=https://www.baidu.com | ÊîªÂáª |
| ssrf_openConnection_attack | SSRFÊîªÂáª-openConnection | GET | http://192.168.0.9:9991/ssrf_openConnection?url=http://www.baidu.com | ÊîªÂáª |
| ssrf_requestGet_attack | SSRFÊîªÂáª-requestGet | GET | http://192.168.0.9:9991/ssrf_requestGet?url=https://www.baidu.com | ÊîªÂáª |
| ssrf_okhttp_attack | SSRFÊîªÂáª-okhttp | GET | http://192.168.0.9:9991/ssrf_okhttp?url=https://www.baidu.com | ÊîªÂáª |
| ssrf_defaultHttpClient_attack | SSRFÊîªÂáª-defaultHttpClient | GET | http://192.168.0.9:9991/ssrf_defaultHttpClient?url=https://www.baidu.com | ÊîªÂáª |
| ssti_velocity_attack | SSTIÊîªÂáª-velocity | GET | http://192.168.0.9:9991/ssti_velocity?content=%23set (%24exp %3d ""exp"")%3b%24exp.getClass().forName(""java.lang.Runtime"").getRuntime().exec(""whoami"") | ÊîªÂáª |
| ssti_freemarker_attack | SSTIÊîªÂáª-freemarker | GET | http://192.168.0.9:9991/ssti_freemarker?templateContent=%3C%23assign%20ex%3D%22freemarker.template.utility.Execute%22%3Fnew%28%29%3E%24%7B%20ex%28%22bash%20-c%20whoami%22%29%20%7D | ÊîªÂáª |
| xxe_saxparserfactory_attack | XXE-saxparserfactory | POST | http://192.168.0.9:9991/xxe_saxparserfactory | ÊîªÂáª |
| xxe_xmlreaderfactory_attack | XXE-xmlreaderfactory | POST | http://192.168.0.9:9991/xxe_xmlreaderfactory | ÊîªÂáª |
| xxe_saxbuilder_attack | XXE-saxbuilder | POST | http://192.168.0.9:9991/xxe_saxbuilder | ÊîªÂáª |
| xxe_saxreader_attack | XXE-saxreader | POST | http://192.168.0.9:9991/xxe_saxreader | ÊîªÂáª |
| xxe_documentbuilderfactory_attack | XXE-documentbuilderfactory | POST | http://192.168.0.9:9991/xxe_documentbuilderfactory | ÊîªÂáª |
| xxe_documentbuilderfactory_xinclude_attack | XXE-documentbuilderfactory_xinclude | POST | http://192.168.0.9:9991/xxe_documentbuilderfactory_xinclude | ÊîªÂáª |
| OpenRedirector_ModelAndView_attack | URLÈáçÂÆöÂêëÊºèÊ¥û-ModelAndView | GET | http://192.168.0.9:9991/OpenRedirector_ModelAndView?url=https://www.baidu.com | ÊîªÂáª |
| OpenRedirector_sendRedirect_attack | URLÈáçÂÆöÂêëÊºèÊ¥û-sendRedirect | GET | http://192.168.0.9:9991/OpenRedirector_sendRedirect?url=https://www.baidu.com | ÊîªÂáª |
| OpenRedirector_lacation_attack | URLÈáçÂÆöÂêëÊºèÊ¥û-location | GET | http://192.168.0.9:9991/OpenRedirector_lacation?url=https://www.baidu.com | ÊîªÂáª |
| swagger-ui_attack | swagger-ui-Êú™ÊéàÊùÉËÆøÈóÆÊºèÊ¥û | GET | http://192.168.0.9:9991/swagger-ui.html | ÊîªÂáª |
| xxe_wxpay_attack | ÂæÆ‰ø°ÊîØ‰ªòXXEÊºèÊ¥û | POST | http://192.168.0.9:9974/wxpay-xxe | ÊîªÂáª |
| xstream_CVE-2019-10173 | xstream ÂèçÂ∫èÂàóÂåñÊºèÊ¥û(CVE-2019-10173) | POST | http://192.168.0.9:9973/CVE-2019-10173 | ÊîªÂáª |
| jackson-databind_CVE-2019-12384 | jackson-databind ÂèçÂ∫èÂàóÂåñÊºèÊ¥û(CVE-2019-12384) | GET | http://192.168.0.9:9971/CVE-2019-12384 | ÊîªÂáª |
| log4j2_normal | Log4j2 ËøúÁ®ã‰ª£Á†ÅÊâßË°åÊºèÊ¥ûÔºàCVE-2021-44228Ôºâ | POST | http://192.168.0.9:9998/log4j2 | Ê≠£Â∏∏ |
| fastjson_1_2_24_normal | fastjson-1.2.24ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9999/fastjson1.2.24-process | Ê≠£Â∏∏ |
| fastjson1_2_25_normal | fastjson-1.2.25-1.2.41ÂèçÂ∫èÂàóÊºèÊ¥û-disableAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.25-process | Ê≠£Â∏∏ |
| fastjson1_2_41_normal | fastjson-1.2.25-1.2.41ÂèçÂ∫èÂàóÊºèÊ¥û-setAutoTypeSupport | POST | http://192.168.0.9:9987/fastjson1.2.41-process-setAutoTypeSupport | Ê≠£Â∏∏ |
| fastjson1_2_42_normal | fastjson-1.2.42ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9986/fastjson1.2.42-process | Ê≠£Â∏∏ |
| fastjson1_2_43_normal | fastjson-1.2.43ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9985/fastjson1.2.43-process | Ê≠£Â∏∏ |
| fastjson1_2_45_normal | fastjson-1.2.45ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9984/fastjson1.2.45-process | Ê≠£Â∏∏ |
| fastjson1_2_59_normal | fastjson-1.2.59ÂèçÂ∫èÂàóÊºèÊ¥û(1.2.5 <= 1.2.59) | POST | http://192.168.0.9:9983/fastjson1.2.59-process | Ê≠£Â∏∏ |
| fastjson1_2_60_normal | fastjson-1.2.60ÂèçÂ∫èÂàóÊºèÊ¥û(1.2.5 <= 1.2.60) | POST | http://192.168.0.9:9982/fastjson1.2.60-process | Ê≠£Â∏∏ |
| fastjson1_2_61_normal | fastjson-1.2.61ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9981/fastjson1.2.61-process | Ê≠£Â∏∏ |
| fastjson1_2_62_normal | fastjson-1.2.62ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9980/fastjson1.2.62-process | Ê≠£Â∏∏ |
| fastjson1_2_66_normal | fastjson-1.2.66ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9979/fastjson1.2.66-process | Ê≠£Â∏∏ |
| fastjson1_2_67_normal | fastjson-1.2.67ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9978/fastjson1.2.67-process | Ê≠£Â∏∏ |
| fastjson1_2_68_normal | fastjson-1.2.68ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9977/fastjson1.2.68-process | Ê≠£Â∏∏ |
| fastjson1_2_80_normal | fastjson-1.2.80ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9976/fastjson1.2.80-process | Ê≠£Â∏∏ |
| fastjson1_2_83_normal | fastjson-1.2.83-ÂèçÂ∫èÂàóÊºèÊ¥û | POST | http://192.168.0.9:9975/fastjson1.2.83-process | Ê≠£Â∏∏ |
| sql_injection_hsqldb_normal | SQLÊ≥®ÂÖ•-hsqldb | GET | http://192.168.0.9:9989/hsqldb?username=1' | Ê≠£Â∏∏ |
| sql_injection_lombok_normal | SQLÊ≥®ÂÖ•-lombok | POST | http://192.168.0.9:9991/users/lombok | Ê≠£Â∏∏ |
| sql_injection_longlist_normal | SQLÊ≥®ÂÖ•-longlist | POST | http://192.168.0.9:9991/users/findByIds | Ê≠£Â∏∏ |
| sql_injection_longint_normal | SQLÊ≥®ÂÖ•-longint | POST | http://192.168.0.9:9991/users/getUserByUId | Ê≠£Â∏∏ |
| sql_injection_jpaone_normal | SQLÊ≥®ÂÖ•-jpaone | GET | http://192.168.0.9:9991/users/jpaone?name=test | Ê≠£Â∏∏ |
| sql_injection_jpawithAnnotations_normal | SQLÊ≥®ÂÖ•-jpawithAnnotations | GET | http://192.168.0.9:9991/users/jpawithAnnotations?name=test | Ê≠£Â∏∏ |
| sql_injection_Annotation_normal | SQLÊ≥®ÂÖ•-MyBatisÊ≥®Ëß£ÊñπÂºè | GET | http://192.168.0.9:9991/users/by-username?name=test | Ê≠£Â∏∏ |
| sql_injection_id_normal | SQLÊ≥®ÂÖ•-mybatics-Êï∞Â≠ó | GET | http://192.168.0.9:9991/users/1/ | Ê≠£Â∏∏ |
| sql_injection_ids_normal | SQLÊ≥®ÂÖ•-mybatics-Êï∞ÁªÑ | GET | http://192.168.0.9:9991/users/ids/?ids=1,2,3 | Ê≠£Â∏∏ |
| sql_injection_like_normal | SQLÊ≥®ÂÖ•-mybatics-likeÊ®°Á≥äÂåπÈÖç | GET | http://192.168.0.9:9991/users/name?name=A | Ê≠£Â∏∏ |
| sql_injection_strs_normal | SQLÊ≥®ÂÖ•-mybatics-Â≠óÁ¨¶‰∏≤Êï∞ÁªÑ | GET | http://192.168.0.9:9991/users/names?names=Alice&names=Bob | Ê≠£Â∏∏ |
| sql_injection_orderby_normal | SQLÊ≥®ÂÖ•-mybatics-ÊéíÂ∫è | GET | http://192.168.0.9:9991/users/sort?orderByColumn=name&orderByDirection=asc | Ê≠£Â∏∏ |
| sql_injection_Optional_normal | SQLÊ≥®ÂÖ•-Optional<String> | GET | http://192.168.0.9:9991/users/findByOptionalUsername?username=test | Ê≠£Â∏∏ |
| sql_injection_Object_normal | SQLÊ≥®ÂÖ•-Object<String> | POST | http://192.168.0.9:9991/users/get_name_object | Ê≠£Â∏∏ |
| xss_reflect_normal | ÂèçÂ∞ÑÂûãXSSÊºèÊ¥û | GET | http://192.168.0.9:9991/xss_reflect?name=1 | Ê≠£Â∏∏ |
| xss_dom_normal | DOM XSSÊºèÊ¥û | POST | http://192.168.0.9:9991/xss_dom | Ê≠£Â∏∏ |
| file_download_normal | ‰ªªÊÑèÊñá‰ª∂‰∏ãËΩΩÊºèÊ¥û | GET | http://192.168.0.9:9990/file_download?fileName=test.log | Ê≠£Â∏∏ |
| ReDos_normal_1 | ReDoSÊîªÂáª-(a+)+ | GET | http://192.168.0.9:9991/testReDos1?input=1 | Ê≠£Â∏∏ |
| ReDos_normal_2 | ReDoSÊîªÂáª-([a-zA-Z]+)* | GET | http://192.168.0.9:9991/testReDos2?input=1 | Ê≠£Â∏∏ |
| ReDos_normal_3 | ReDoSÊîªÂáª-(a\|aa)+ | GET | http://192.168.0.9:9991/testReDos3?input=1 | Ê≠£Â∏∏ |
| ReDos_normal_4 | ReDoSÊîªÂáª-(a\|a?)+ | GET | http://192.168.0.9:9991/testReDos4?input=1 | Ê≠£Â∏∏ |
| ReDos_normal_5 | ReDoSÊîªÂáª-(.*a){20} | GET | http://192.168.0.9:9991/testReDos5?input=1 | Ê≠£Â∏∏ |
| file_write_normal | ‰ªªÊÑèÊñá‰ª∂ÂÜôÂÖ•ÊºèÊ¥û | GET | http://192.168.0.9:9990/file_write?fileName=test.log&data=test | Ê≠£Â∏∏ |
| runtime_command_execute_normal | ÂëΩ‰ª§ÊâßË°åÊºèÊ¥û-Runtime | GET | http://192.168.0.9:9990/runtime_command_execute?command=ls | Ê≠£Â∏∏ |
| process_builder_command_normal | ÂëΩ‰ª§ÊâßË°åÊºèÊ¥û-ProcessBuilder | GET | http://192.168.0.9:9990/process_builder_command_execute?command=ls | Ê≠£Â∏∏ |
| spel_expression_normal | SPELË°®ËææÂºèÊîªÂáª | GET | http://192.168.0.9:9990/spel_expression?input=1 | Ê≠£Â∏∏ |
| ssrf_openStream_normal | SSRFÊîªÂáª-openStream | GET | http://192.168.0.9:9990/ssrf_openStream?url=http://example.com | Ê≠£Â∏∏ |
| ssrf_openConnection_normal | SSRFÊîªÂáª-openConnection | GET | http://192.168.0.9:9990/ssrf_openConnection?url=http://example.com | Ê≠£Â∏∏ |
| ssrf_requestGet_normal | SSRFÊîªÂáª-requestGet | GET | http://192.168.0.9:9990/ssrf_requestGet?url=http://example.com | Ê≠£Â∏∏ |
| ssrf_okhttp_normal | SSRFÊîªÂáª-okhttp | GET | http://192.168.0.9:9990/ssrf_okhttp?url=http://example.com | Ê≠£Â∏∏ |
| ssrf_defaultHttpClient_normal | SSRFÊîªÂáª-defaultHttpClient | GET | http://192.168.0.9:9990/ssrf_defaultHttpClient?url=http://example.com | Ê≠£Â∏∏ |
| OpenRedirector_ModelAndView_normal | URLÈáçÂÆöÂêëÊºèÊ¥û-ModelAndView | GET | http://192.168.0.9:9990/OpenRedirector_ModelAndView?url=https://example.com | Ê≠£Â∏∏ |
| OpenRedirector_sendRedirect_normal | URLÈáçÂÆöÂêëÊºèÊ¥û-sendRedirect | GET | http://192.168.0.9:9990/OpenRedirector_sendRedirect?url=https://example.com | Ê≠£Â∏∏ |
| OpenRedirector_lacation_normal | URLÈáçÂÆöÂêëÊºèÊ¥û-location | GET | http://192.168.0.9:9990/OpenRedirector_lacation?url=https://example.com | Ê≠£Â∏∏ |
| druid_sqlwall | druid-SQLÈò≤ÁÅ´Â¢ô | GET | http://192.168.0.9:9997/druid_sql?id=1 | ËØØÊä• |


## ÂèÇËÄÉÂºÄÂèë‰ª£Á†Å

- https://github.com/vulhub/vulhub
- https://github.com/l4yn3/micro_service_seclab
- https://github.com/ffffffff0x/JVWA
- https://github.com/mamba-2021/myjavavul
- https://github.com/zhlu32/range_java_micro_service_seclab
- https://rasp.baidu.com/doc/install/testcase.html
- https://github.com/lemono0/FastJsonParty/
- https://github.com/roottusk/vapi

## Star History Chart

[![Star History Chart](https://api.star-history.com/svg?repos=lokerxx/JavaVul&type=Date)](https://star-history.com/#lokerxx/JavaVul&Date)

## ÂæÖËøõË°å

- [x] cas-client xxeÔºàÊºèÊ¥ûÂíå‰øÆÂ§çÔºâ
- [ ] SQLÊ≥®ÂÖ•‰º† order by ÂèÇÊï∞, ÁôΩÂêçÂçïÂàóË°®ÔºàËØØÊä•Ôºâ
",0,0,1,apache-2.0,0.0,"['javavul', 'mvn', 'version', 'docker', 'version', 'version', 'simpleagent', 'javac', 'jar', 'cvfm', 'mv', 'star', 'history', 'chart']",17,"['version', 'javavul', 'mvn', 'docker', 'simpleagent']"
ShafiqSadat/IPTVTelegramBot,master,"# IPTV Telegram Bot

IPTV Telegram Bot is a bot that lets you watch IPTV streams right in Telegram App. IPTV stands for Internet Protocol Television, which is a way of delivering live TV channels over the internet. With this bot, you can send the name of the channel you want to watch, and the bot will respond with available streams to watch. There are over 60000+ online streams from all over the world, covering various genres and languages.

![Screenshot of IPTV Telegram Bot](https://i.imgur.com/XVsp1Nd.png)

![Screenshot of IPTV Telegram Bot](https://raw.githubusercontent.com/ShafiqSadat/IPTVTelegramBot/master/screenshots/1.gif)
## How to use

- Clone this repository or download the zip file.
- Install the requirements using `mvn install`.
- Create a bot using [@BotFather](https://t.me/BotFather) and get the bot token.
- In BotFather, send the ""/setmenubutton"" command, select your bot, and send the following link: ```https://iptvnator.vercel.app/```. Then, provide a name for the button, such as ""Open Player.""
- Rename example_local.properties into local.properties under /src/main/resources/example_local.properties
- Edit the local.properties file and enter your bot token and username.
- Run the Main.java file using `java Main`.
- Start your bot and enjoy watching IPTV streams.

## Credits

- IPTV API: [iptv-org/iptv](https://github.com/iptv-org/iptv)
- Telegram API: [rubenlagus/TelegramBots](https://github.com/rubenlagus/TelegramBots)
- IPTV Player: [4gray/iptvnator](https://github.com/4gray/iptvnator)

## License

This project is licensed under the MIT License - see the [LICENSE] file for details.

## Contributing

If you want to contribute to this project, you are welcome to do so. Please follow these steps:

- Fork this repository and create a new branch for your feature or bug fix.
- Write your code and test it locally.
- Commit and push your changes to your forked repository.
- Create a pull request with a clear description of your changes and a link to the issue (if any) that you are addressing.
- Wait for the maintainer to review and merge your pull request.

## Contact

If you have any questions, suggestions, or feedback, you can contact me via:

- Email: ShafiqSadat2012@gmail.com
- Telegram: [@Shafiq](https://t.me/Shafiq)

## License
IPTVTelegramBot is licensed under the MIT License. The terms are as follows:

```
The MIT License (MIT)

Copyright (c) 2024 Shafiq Sadat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
",1,0,1,mit,0.0,"['iptv', 'telegram', 'bot', 'how', 'use', 'credit', 'license', 'contribute', 'contact', 'license']",7,"['license', 'iptv', 'telegram', 'bot', 'how']"
sasmithx/Chat_Application_Socket_Progrmming,master,"![Logo](https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Client-Server-Network-Model.jpg)

# PLAY TECH PVT LTD.

This project is a simple chat application built using Java Socket programming. It features a client-server architecture, enabling real-time text and image communication between multiple clients. The application also includes an emoji picker, allowing users to send emojis in their chat messages.

## Table of Contents

- Features
- Technologies Used
- Setup
- How to Run
- Usage
- Screenshots
- Contributing
- License
- Contact

## Features

- Real-time text communication between clients.
- Ability to send and receive images.
- Emoji picker for sending emojis in chat.
- User authentication based on a simple name validation.
- Responsive and intuitive user interface.

## Technologies Used

- **Java:** Core programming language.
- **JavaFX:** Used for the graphical user interface.
- **Socket Programming:** Used for client-server communication.
- **FXML:** For defining the UI layout.
- **CSS:** For styling the UI components.

## Setup

To set up the project locally, follow these steps:

**1.** **Clone the repository:**
```bash
https://github.com/sasmithx/Chat_Application_Socket_Progrmming.git
```
**2.** **Import the project:**

- Open your favorite IDE (like IntelliJ IDEA, Eclipse, or NetBeans).
- Import the project as a Maven/Gradle project.
- Ensure that the JavaFX library is properly configured in your IDE.

**3.** **Configure JavaFX:**

- Download JavaFX SDK if you haven't already.
- Configure the JavaFX SDK path in your project settings.

## How to Run

**1.** **Run the Server:**

- Run the Server.java file to start the server.
- The server will start listening on port 5003 by default.


**2.** **Run the Client:**

- Run the ClientController.java file to start the client.
- Enter your username in the login screen.
- Start chatting with other connected clients.

## Usage

- **Login:** Enter a username (between 4 and 15 alphabetic characters) to join the chat.
- **Send a Message:** Type your message in the input field and press enter or click the send button.
- **Send an Image:** Click on the image icon to select and send an image.
- **Send an Emoji:** Click on the emoji icon to select and send an emoji.
- **Receive Messages:** All incoming messages, images, and emojis will be displayed in the chat window.

## Screenshots

<img src=""https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Screenshots/Screenshot%202024-08-22%20184323.png"" width=""600px"" height=""auto"">

<img src=""https://github.com/sasmithx/Chat_Application_Socket_Progrmming/blob/master/src/main/resources/assests/Screenshots/Screenshot%202024-08-22%20184245.png"" width=""600px"" height=""auto"">

## Contributing

Contributions are welcome! Please fork this repository and submit a pull request with your changes.


## License

This project is licensed under the MIT License - see the [MIT License](LICENSE)  file for details.

## 
<br>

<div align=""center""> 
<a href=""https://github.com/sasmithx"" target=""_blank""><img src = ""https://img.shields.io/badge/GitHub-000000?style=for-the-badge&logo=github&logoColor=white""></a>
<a href=""https://git-scm.com/"" target=""_blank""><img src = ""https://img.shields.io/badge/Git-000000?style=for-the-badge&logo=git&logoColor=white""></a>
<a href=""https://maven.apache.org/download.cgi"" target=""_blank""><img src = ""https://img.shields.io/badge/Maven-000000?style=for-the-badge&logo=apachemaven&logoColor=white""></a>
<a href=""https://www.jetbrains.com/idea/download/?section=windows"" target=""_blank""><img src = ""https://img.shields.io/badge/intellij-000000?style=for-the-badge&logo=intellijidea&logoColor=white""></a>
<a href=""https://www.asus.com/lk/"" target=""_blank""><img src = ""https://img.shields.io/badge/asus%20laptop-000000?style=for-the-badge&logo=asus&logoColor=white""
<a href=""https://ubuntu.com/"" target=""_blank""><img src = ""https://img.shields.io/badge/Ubuntu-E95420?style=for-the-badge&logo=ubuntu&logoColor=white""
                                                
</div>

<br>

<p align=""center"">
  &copy; 2024 Sasmith Manawadu
</p>

",0,0,1,mit,0.0,"['play', 'tech', 'pvt', 'ltd', 'table', 'content', 'feature', 'technology', 'use', 'setup', 'how', 'run', 'usage', 'screenshots', 'contribute', 'license']",10,"['play', 'tech', 'pvt', 'ltd', 'table']"
OpenCubicChunks/CubicChunks3,1.20.4,"# Cubic Chunks 3

## Not yet usable or functional, don't try.

Rewrite of the previous rewrite, targeting NeoForge/MC 1.20.4. 

This Minecraft mod extends Minecraft height and depth to be nearly infinite (at least a million blocks).

For the most up-to-date information about this mod and its related mods, as well as the newest downloads, please join us on the [**Cubic Chunks Discord**](https://discord.gg/kMfWg9m).

### Cubic Chunks (CC) - Links:

Github - [Cubic Chunks - 1.20.4 and above](https://github.com/OpenCubicChunks/CubicChunks3)  
Github - [Cubic Chunks - 1.12.2 and lower](https://github.com/OpenCubicChunks/CubicChunks)

### Cloning the repository

Note: you need git installed to do the following:
```
git clone --recursive
```
You need a git submodule for the project to compile.
If you don't yet have the submodule but already cloned the repository:
```
git submodule update --init --recursive
```

To get latest version of the submodule:
```
git submodule update --recursive --remote
```

### .git-blame-ignore-revs
Configure commits to be ignored for git blame:

```shell
git config blame.ignoreRevsFile .git-blame-ignore-revs
```

### Running the game

If running with IntelliJ, ensure that `io.github.opencubicchunks.[folder name].main` is selected, not `[folder name].main`:

![image](https://github.com/OpenCubicChunks/CubicChunks2/assets/18627001/0d88d6b5-0944-44f1-9461-fc90daef5766)

### Contributing

#### PR Guidelines
- All mixin methods and fields _**must**_ have a `cc_` prefix // todo automate this check in gh workflows.
- If a class is significantly modified with mixins, it _**must**_ have documentation explaining:
	- The original vanilla behaviour, can mention important fields/methods.
		- If the vanilla class has sufficient javadoc (through parchment), this can be skipped. Our javadoc should link to the parchment javadoc.
	- The goal of all mixins targeting the class.
- Any merged mixins _**must**_ have tests associated with them. 
	- If a mixin is ""untestable"" its test class should have a comment explaining *why* it's untestable. 
		- Optionally a to-do (project task? issue?) suggesting integration tests when possible.
	- All non-trivial mixins _**must**_ have a comment explaining their purpose.
	- _**Must**_ pass checkstyle.
	- _**Must**_ build.
	- All tests _**must**_ pass (no regressions).
	-  //todo Investigate code coverage for mixin tests ([jacoco?](https://docs.gradle.org/current/userguide/jacoco_plugin.html) [other link maybe it's bad](https://igorski.co/generating-junit-test-coverage-using-gradle-and-jacoco/)) .
- Any non-mixin class _**must**_ have tests associated with it.
	- The tests should reasonably cover all expected usage of the class (its external api).
	- Any method(s) that can be reasonably unit tested _**must**_ be.
(TODO more contributing docs)
",0,8,1,mit,32.0,"['cubic', 'chunk', 'not', 'yet', 'usable', 'functional', 'try', 'cubic', 'chunk', 'cc', 'link', 'clone', 'repository', 'run', 'game', 'contribute', 'pr', 'guideline']",8,"['cubic', 'chunk', 'not', 'yet', 'usable']"
swan-io/react-native-browser,main,"# @swan-io/react-native-browser

An easy-to-use in-app browser module for React Native, powered by **[Chrome Custom Tabs](https://developer.chrome.com/docs/android/custom-tabs)** / **[SFSafariViewController](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller)**.

[![mit licence](https://img.shields.io/dub/l/vibe-d.svg?style=for-the-badge)](https://github.com/swan-io/react-native-browser/blob/main/LICENSE)
[![npm version](https://img.shields.io/npm/v/@swan-io/react-native-browser?style=for-the-badge)](https://www.npmjs.org/package/@swan-io/react-native-browser)
[![bundlephobia](https://img.shields.io/bundlephobia/minzip/@swan-io/react-native-browser?label=size&style=for-the-badge)](https://bundlephobia.com/result?p=@swan-io/react-native-browser)
<br />
[![platform - android](https://img.shields.io/badge/platform-Android-3ddc84.svg?logo=android&style=for-the-badge)](https://www.android.com)
[![platform - ios](https://img.shields.io/badge/platform-iOS-000.svg?logo=apple&style=for-the-badge)](https://developer.apple.com/ios)

<p>
  <img width=""261"" src=""./docs/demo.png"" alt=""Demo"">
</p>

## Installation

```bash
$ yarn add @swan-io/react-native-browser
# --- or ---
$ npm install --save @swan-io/react-native-browser
```

## Quickstart

```tsx
import { openBrowser } from ""@swan-io/react-native-browser"";
import { useCallback } from ""react"";
import { Button, SafeAreaView } from ""react-native"";
import parseUrl from ""url-parse"";

const App = () => {
  const handleOnPress = useCallback(() => {
    openBrowser(""https://swan.io"", {
      onClose: (url) => {
        if (url) {
          const { protocol, host, query } = parseUrl(url, true);
          const origin = `${protocol}//${host}`;

          if (origin === ""com.company.myapp://close"") {
            console.log(JSON.stringify(query, null, 2));
          }
        }
      },
    }).catch((error) => {
      console.error(error);
    });
  }, []);

  return (
    <SafeAreaView>
      <Button title=""Open browser"" onPress={handleOnPress} />
    </SafeAreaView>
  );
};
```

## API

### openBrowser(url: string, options: Options)

```tsx
import { openBrowser } from ""@swan-io/react-native-browser"";

openBrowser(""https://swan.io"", {
  animationType: """", // ""fade"" | ""slide"" (default to ""slide"")
  dismissButtonStyle: ""close"", // ""cancel"" | ""close"" | ""done"" (default to ""close"")
  barTintColor: ""#FFF"", // in-app browser UI background color
  controlTintColor: ""#000"", // in-app browser buttons color
  onOpen: () => {
    // fired on browser opened
    // useful to switch the StatusBar color, for example
  },
  onClose: (url) => {
    // fired on browser closed
    // url will be defined if the browser has been closed via deeplink
  },
}).catch((error) => {
  console.error(error);
});
```

> [!IMPORTANT]
> On Android, the Chrome app must be opened at least once for this to work ‚Äî a step often overlooked when using emulators in development.

## Handle deeplinks

In order to receive deeplink on browser close event, you have to setup them first. We **highly** recommand defining a custom schema + url for this specific task. For example, `com.company.myapp://close`.

### On iOS

First, you need to **[enable react-native deeplinks support](https://reactnative.dev/docs/linking#enabling-deep-links)**. Then, edit your `Info.plist` file to add:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Viewer</string>
    <key>CFBundleURLName</key>
    <string>com.company.myapp</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>com.company.myapp</string>
    </array>
  </dict>
</array>
```

### On Android

Edit your `AndroidManifest.xml` to add ([more documentation](https://developer.android.com/training/app-links/deep-linking)):

```xml
<activity android:name="".MainActivity"">
  <intent-filter>
    <action android:name=""android.intent.action.VIEW"" />
    <category android:name=""android.intent.category.BROWSABLE"" />
    <category android:name=""android.intent.category.DEFAULT"" />
    <data android:scheme=""com.company.myapp"" android:host=""close"" />
  </intent-filter>
</activity>
```

> [!TIP]
> Once the redirect URL is visited (a `GET` hits your server), handle the result and perform a server redirect to `com.company.myapp://close?success=true` to close the browser (and pass any data back to your app using query params ‚ú®).

## Run the example app

```bash
$ git clone git@github.com:swan-io/react-native-browser.git
$ cd react-native-browser/example

$ yarn install && yarn start
# --- or ---
$ npm install && npm run start
```
",9,1,1,mit,7.0,"['installation', 'quickstart', 'api', 'openbrowser', 'url', 'string', 'option', 'option', 'handle', 'deeplinks', 'on', 'io', 'on', 'android', 'run', 'example', 'app']",11,"['option', 'on', 'installation', 'quickstart', 'api']"
JAgentSphere/bytebuddy-agent-demo,main,"# Agent-Demo

‰ΩøÁî® Byte Buddy Âíå Gradle ÊûÑÂª∫‰∏Ä‰∏™ÊúÄÁÆÄÂçïÁöÑ Java Agent

Java Agent ÁöÑÂÖ•Âè£Á±ªÊòØ `com.jas.agent.Main`

```java
public class Main {
    public static void premain(String args, Instrumentation inst) {
        launch(args, inst);
    }

    public static void agentmain(String args, Instrumentation inst) {
        launch(args, inst);
    }

    private static void launch(String args, Instrumentation inst) {
        System.out.println(""hello java agent"");
    }
}
```

Êèê‰æõ AgentBuilder ÊúÄÁÆÄÂåñ‰æøÂà©ÊµãËØïÁöÑÈÖçÁΩÆÈ°π

```java
AgentBuilder agentBuilder = new AgentBuilder.Default()
        .ignore(ElementMatchers.none()) // ÂøΩÁï•Á©∫ÔºåÂç≥ÂÖÅËÆ∏ hook ÊâÄÊúâÁ±ª
        .with(AgentBuilder.RedefinitionStrategy.REDEFINITION) // ÂºÄÂêØÁ±ªË¢´Âä†ËΩΩÂêé‰πüÂÖÅËÆ∏ËøõË°åÂ≠óËäÇÁ†Å‰øÆÊîπ
        .with(AgentBuilder.Listener.StreamWriting.toSystemError().withErrorsOnly()) // Â≠óËäÇÁ†Å‰øÆÊîπÂ§±Ë¥•ÊâìÂç∞ÈîôËØØ‰ø°ÊÅØÂà∞ÊéßÂà∂Âè∞
        .with(AgentBuilder.Listener.StreamWriting.toSystemOut().withTransformationsOnly()) // Â≠óËäÇÁ†Å‰øÆÊîπÊàêÂäü‰πüËæìÂá∫Âà∞ÊéßÂà∂Âè∞
        .with(new DumpClassListener()); // Â≠óËäÇÁ†Å‰øÆÊîπÊàêÂäüÊääÁ±ª‰ø°ÊÅØÁªôÊä•ÈîôÂà∞ weaving/classes ÁõÆÂΩï‰∏ã
```

## ÁºñËØë

Âú®È°πÁõÆÁõÆÂΩï‰∏ãÊâßË°åÂ¶Ç‰∏ãÂëΩ‰ª§Ôºå‰ºöÂú® test Êñá‰ª∂Â§π‰∏≠ÁîüÊàê agent.jar Âíå demo.jar

```shell

# linux or macos
./gradlew jar

# windows
gradlew.bat jar
```

## ÂêØÂä® Java Agent

‰ΩøÁî®Â¶Ç‰∏ãÂëΩ‰ª§ÊåÇËΩΩ agent ÂêØÂä® SpringBoot Á®ãÂ∫èÔºå‰ºöÊâìÂç∞ `hello java agent`

```shell
cd test && \
  java -javaagent:agent.jar -jar demo.jar
```",4,0,3,mit,0.0,"['linux', 'macos', 'window', 'java', 'agent']",5,"['linux', 'macos', 'window', 'java', 'agent']"
seifrajhi/Kubernetes-practical-exercises-Hands-on,main,"# Practical Kubernetes Exercices

This repo provides some resources to learn Kubernetes through practical exercises for self study to learn how easy it is to understand and master Kubernetes complexity and problems.

Kubernetes is easy to understand, even if it looks hard at the first look on the icons or the resources map, this course is about to help you to understand K8s and learn how to start!

![icons-all](images/icons-all.png ""icons-all"")

![k8s-resources-map](images/k8s-resources-map.png ""k8s-resources-map"")


## Prerequisites

It would be nice if you know what `kubectl` is and have a basic understanding of running conatiners with docker / containerd or cri-o.

## Preparation

To get prepared please install at least kubectx and kns with krew from this list and make sure to have bash completion for kubectl in place:

## Tools we use

- [mkcert](https://github.com/FiloSottile/mkcert)
- watch  
  - Mac setup:
    ````
    brew install watch
- [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh)
  - activate autocompletion
    - [Mac setup](https://docs.brew.sh/Shell-Completion)
    - [kubectl plugin](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kubectl)
- [git](https://git-scm.com/)
- [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)  
  - mac setup:
    ```
    brew install kubernetes-cli
- [kubectx & kubens](https://github.com/ahmetb/kubectx)


[The Golden Kubernetes Tooling and Helpers list](http://bit.ly/kubernetes-tooling-list)

We can use any Kubernetes cluster (> 1.21) on our local machine or in the cloud. For online trainings we recommend to have either k3s installed with k3d, use Kind, or Docker for Desktop.  

We'll use some slides from:

[Kubernauts Kubernetes Trainings Slides](https://goo.gl/Hzk2sd)

and refer to some resources from:

[Kubernauts Kubernetes Learning Resources List](https://goo.gl/Rywkpd)

## Kubernetes  Guides

### Networking

The purpose of [this website](https://www.tkng.io/) is to provide an overview of various Kubernetes networking components with a specific focus on exactly how they implement the required functionality.

The guide is split into multiple parts which can be studied mostly independently, however they all work together to provide a complete end-to-end cluster network abstractions.

Where possible, every topic in this guide will include a dedicated [hands-on labs](https://www.tkng.io/lab/) which can be spun up locally in a matter of minutes. 

### Security
 
The Security checklist aims at providing a basic list of guidance with links to more comprehensive documentation on each topic. It does not claim to be exhaustive and is meant to evolve.

1- https://kubernetes.io/docs/concepts/security/security-checklist/

2- https://github.com/magnologan/awesome-k8s-security

3- https://github.com/freach/kubernetes-security-best-practice

4- https://medium.com/@seifeddinerajhi/kubernetes-security-assessment-guidelines-and-necessary-checklist-9a326f341b68

5- https://medium.com/@seifeddinerajhi/owasp-kubernetes-top-10-a-comprehensive-guide-f03af6fd66ed

6- https://eksclustergames.com:  Kubernetes CTF (Capture The Flag) challenges for EKS.

7- https://github.com/andifalk/secure-development-on-kubernetes: Slides and Demos for ""Secure Development on Kubernetes"" talk


7- [A curated list for Awesome Kubernetes Security resources](https://github.com/magnologan/awesome-k8s-security) - A curated list for Kubernetes (K8s) Security resources such as articles, books, tools, talks and videos.


8- [Kubernetes Security Checklist and Requirements](https://github.com/Vinum-Security/kubernetes-security-checklist) - Kubernetes Security Checklist and Requirements - All in One (authentication, authorization, logging, secrets, configuration, network, workloads, dockerfile).

9- [Kubernetes Hardening Manual](https://github.com/seifrajhi/kubernetes-hardening-checklist-guidance) -  Kubernetes Hardening Guidance.


### Storage

- The key concepts of Kubernetes storage, including [PVs, PVCs, and StorageClass](https://medium.com/@seifeddinerajhi/understanding-storage-in-kubernetes-ee2c19001aae)

### Misc

- Kelsey Hightower's open-source guide, [Kubernetes the Hard Way](https://github.com/kelseyhightower/kubernetes-the-hard-way), goes through how to bootstrap a Kubernetes cluster without the use of installers or scripts. 


- [Learnk8s](https://learnk8s.io/): Develop the knowledge and skills to get the most out of Kubernetes with hands-on online courses and instructor-led classes.

- [Introduction to Kubernetes Lecture Notes](https://github.com/kaan-keskin/introduction-to-kubernetes/tree/main): Notes about Kubernetes resources  

- [Kubernetes Handbook](https://github.com/rootsongjc/kubernetes-handbook)

- [Kubeapps](https://github.com/vmware-tanzu/kubeapps): A web-based UI for deploying and managing applications in Kubernetes clusters

- [Start learning Kubernetes today](https://kubebyexample.com/)

- [Step by step guide to learning Kubernetes](https://roadmap.sh/kubernetes)

- [Kubernetes the Harder Way](https://github.com/ghik/kubernetes-the-harder-way) A guide to setting up a production-like Kubernetes cluster on a local machine


- [Kubernetes mind map](https://betterprogramming.pub/6-important-things-you-need-to-run-kubernetes-in-production-d573d61258c5): 6 Important Things You Need to Run Kubernetes in Production.

- [Awesome Kubernetes Resources](https://github.com/tomhuang12/awesome-k8s-resources) - A curated list of awesome Kubernetes tools and resources.

### Useful aliases

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
alias k=""kubectl""
alias kx=""kubectx""
alias kn=""kubens""
alias kgp=""kubectl get pods""
alias kgel=""k get events --sort-by=.metadata.creationTimestamp""
```
</p>
</details>


## Kubectl CheatSheet and Goodies

https://kubernetes.io/docs/reference/kubectl/cheatsheet/

https://github.com/dennyzhang/cheatsheet-kubernetes-A4

<details><summary>Expand here to see the solution</summary>
<p>

```bash
k get events --sort-by=.metadata.creationTimestamp # List Events sorted by timestamp

k get services --sort-by=.metadata.name # List Services Sorted by Name

k get pods --sort-by=.metadata.name

k get endpoints

k explain pods,svc

k get pods -A # --all-namespaces 

k get nodes -o jsonpath='{.items[*].spec.podCIDR}'

k get pods -o wide

k get pod my-pod -o yaml --export > my-pod.yaml  # Get a pod's YAML without cluster specific information

k get pods --show-labels # Show labels for all pods (or other objects)

k get pods --sort-by='.status.containerStatuses[0].restartCount'

k cluster-info

k api-resources

k api-resources -o wide

kubectl api-resources --verbs=list,get # All resources that support the ""list"" and ""get"" request verbs

k get apiservice
```
</p>
</details>

### k create namespace imperative via declarative

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k create ns <namespace name, e.g. your name or your project!>
k create ns --dry-run test -o yaml > test-ns.yaml
k create -f test-ns.yaml
k delete ns test
```

</p>
</details>

### k create / run pods or deploymens with dry-run

<details>
   <summary>Expand here to see the solution</summary>
<p>

```yaml
# old school (going to get deprecated)
k run --generator=run-pod/v1 <pod name> --image=<image name> --dry-run -o yaml > <podname.yaml>

k run --generator=run-pod/v1 ""nginx-pod"" --image=nginx -o yaml --dry-run > nginx-pod.yaml

or

k run --restart=Never <pod name> --image=<image name> --dry-run -o yaml > <podname.yaml>

or (new school with --dry-run=client)

k run nginx-pod --image=nginx -o yaml --dry-run=client > nginx-pod.yaml

k create <object> <name> <options> --dry-run -o yaml > <objectname.yaml>

k create deployment nginx-deployment --image=nginx --dry-run -o yaml > nginx-deployment.yaml

cat nginx-pod.yaml

cat nginx-deployment.yaml

k create -f nginx-pod.yaml

# create a service via exposing the pod

k expose pod nginx-pod --port=80

k get svc

k port-forward service/nginx-pod 8080:80

or

k proxy

open http://127.0.0.1:8001/api/v1/namespaces/default/pods/nginx-pod/proxy/

# open a new terminal session

curl http://127.0.0.1:8080/

k delete all --all # with caution!!!

k create -f nginx-deployment.yaml

k get all

k get all -A

k expose deployment nginx-deployment --port=80

k port-forward service/nginx-deployment 8080:80

k scale --replicas 3 deployment nginx-deployment

k edit deployment nginx-deployment

vi nginx-deployment.yaml # adapt the number of replicas, e.g. to 2

k apply -f nginx-deployment.yaml

```
</p>
</details>

### k get events and logs, describe objects

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
kx
kn
k delete all --all # with caution!!!
k apply -f 0-nginx-all.yaml
k get all
# where is the ingress?
k get ingress # ingress objects are not namespaced
k get events
k get events -A
k get events -n <namespace name>
k logs nginx-<press tab>
k describe pod nginx-<press tab>
k describe deployment nginx
k describe replicasets nginx-<press tab>
```
</p>
</details>

### Merging contexts (e.g. merge 2 kubeconfigs from 2 cluster contexts)

Sometimes you'll need to merge multiple kubeconfigs into a single file, here you go:

<details><summary>Expand here to see the solution</summary>
<p>

```bash
KUBECONFIG=file1:file2:file3 kubectl config view --merge --flatten > my_new_kubeconfig
or
cp ~/.kube/config ~/.kube/config.bak
KUBECONFIG=/my/new/kubeconfig:~/.kube/config.bak kubectl config view --flatten > my_new_kubeconfig
# test it
export KUBECONFIG=my_new_kubeconfig
kx
cp my_new_kubeconfig ~/.kube/config
```
</p>
</details>

Don't miss: Mastering the KUBECONFIG file by Ahmet Alp Balkan:

https://ahmet.im/blog/mastering-kubeconfig/

### Kubernetes Secrets are not secret

Secrets are resources containing keys with base64 encoded values. Secrets are not encrypted by default, they are only encoded and can get decoded easily by everyone who has access to a namespace or to the whole cluster.

Secret values can be exposed to pods as environment variables or mounted as files.

In order to create a secret from a text file, you can run the following, This creates a generic secret named secretname and automatically encodes the value as base64:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
echo -n ""yourvalue"" > ./secret.txt
k create secret generic secretname --from-file=./secret.txt
k describe secrets secretname
k get secret secretname -o yaml
echo 'eW91cnZhbHVl' | base64 --decode
# or
k create secret generic mysecret --dry-run -o yaml --from-file=./secret.txt > secret.yaml
k create -f secret.yaml
# or
k create secret generic mysecret --dry-run -o yaml --from-literal=secret.txt=yourvalue > secret.yaml
```
</p>
</details>

#### Further reading:

Since K8s secrets are not so secret, there are some ways to keep you secrets secret:

https://learnk8s.io/kubernetes-secrets-in-git

https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-environment-variables



### Kubernetes ConfigMaps

A ConfigMap is an object consisting of key-value pairs which can be injected into your application.

With a ConfigMap you can separate configuration from your Pods. This way, you can prevent hardcoding configuration data.

ConfigMaps are useful for storing and sharing non-sensitive, unencrypted configuration information. Sensitive information should be stored in a Secret instead.

Exercise:

Create a ConfigMap named kubernauts that contains a key named dev with the value ops.

With the --from-literal argument passed to the k create configmap command you can create a ConfigMap containing a text value.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k create cm kubernauts --from-literal=dev=ops --dry-run -o yaml > cm-kubernauts.yaml
cat cm-kubernauts.yaml
echo -n ""ops"" > dev
k create cm kubernauts --from-file=./dev
k get cm
k describe cm kubernauts
k delete cm kubernauts
k create -f cm-kubernauts.yaml
k describe cm kubernauts
```
</p>
</details>

Using this ConfigMap, we can inject data in our application:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cat 0-nginx-configmap.yaml
k create -f 0-nginx-configmap.yaml
```
</p>
</details>



## Whoami, Whoareyou and Whereami Problems

### What We‚Äôll Do

We‚Äôll use a pre-made container ‚Äî containous/whoami ‚Äî capable of telling you where it is hosted and what it receives when you call it.

If you'd like to build the container image with docker, do:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
git clone https://github.com/containous/whoami.git
docker build -t whoami .
docker tag whoami kubernautslabs/whoami
docker push kubernautslabs/whoami
docker images | head
```

</p>
</details>

We‚Äôll define two different deployments, a whoami and a whoareyou deployment that will use `containous/whoami` container image.

We‚Äôll create a deployment to ask Kubernetes to deploy 2 replicas of whoami and 3 replicas of whoareyou.

We‚Äôll define two services, one for each of our Pods.

We‚Äôll define Ingress objects to define the routes to our services to the outside world.

We‚Äôll use our Nginx Ingress Controller on our Rancher Cluster.

Explanations about the file content of whoami-deployment.yaml:

We define a ‚Äúdeployment‚Äù (kind: Deployment)

The name of the object is ‚Äúwhoami-deployment‚Äù (name: whoami-deployment)

We want two replica (replicas: 2)

It will deploy pods that have the label app:whoami (selector: matchLabels: app:whoami)

Then we define the pods with the (template: ‚Ä¶) which will have the whoami label (metadata:labels:app:whoami)

The Pods will host a container using the image containous/whoami (image:containous/whoami)

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k apply -f 1-whoami-deployment.yaml
k get all
# we expose the deployment with a service of type ClusterIP
k create -f 1-whoami-service-ClusterIP.yaml
k get svc
k port-forward service/whoami-service 8080:80
# in a new terminal session call
curl 127.0.0.1:8080
k delete svc whoami-service
# create a service of type NodePort
k create -f 1-whoami-service-nodeport.yaml
k get svc
curl csky08:30056 # adapt the nodeport for your env. please !
curl csky09:30056
curl csky10:30056
k delete svc whoami-service-nodeport
k create -f 1-whoami-service-loadbalancer.yaml
k get svc
curl <EXTERNAL-IP> # the external-ip is given from the LB IP pool above
k create -f 2-whoareyou-all.yml
k get all
k get svc
k get ing
curl <HOSTS value from ingress>
# are you happy? ;-)
```

</p>
</details>

## DNS based Service discovery with whereami kubia pod

### What We‚Äôll Do

We'll use a slightly extended node.js app (which is a simple web server) from the [Kubernetes in Action book by Marko Luk≈°a](https://www.amazon.com/-/en/Marko-Luksa/dp/1617293725) in 2 different namespaces ns1 and ns2 to demonstrate the DNS based services discovery. 

A service provides a Virtual IP (VIP) address, which means the Service IP is not bound to a physical network interface. A service acts like an internal loadbalancer in K8s! The magic of of routing trafic through the VIP is implemented by IPtable rules managed by kube-proxy!

A service can be called through its FQDN in the form of:

`$SERVICE_NAME.$NAMESPACE.svc.cluster.local`

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cd whereami
k create ns ns1
k create ns ns2
kn ns1
cat kubia-deployment.yaml   
k create -f kubia-deployment.yaml
k create -f kubia-deployment.yaml -n ns2
k expose deployment kubia
k get svc
k expose deployment kubia -n ns2
k get svc -n ns2
k exec -it kubia-<press tab> -- curl kubia.ns2.svc.cluster.local:8080
k scale deployment kubia -n ns2 --replicas 3
# repeat the service call many times and see how loadbalancing works
k exec -it kubia-<press tab> -- curl kubia.ns2.svc.cluster.local:8080
k exec -n ns2 -it kubia-<press tab> -- curl kubia.ns1.svc.cluster.local:8080
k exec -it kubia-<press tab> -- ping kubia.ns2.svc.cluster.local
--> PING kubia.ns2.svc.cluster.local (10.43.109.89) 56(84) bytes of data.
# you don't get any pong, why?
# ssh into a node and examine the IPtable rules
sudo iptables-save | grep kubia
```
</p>
</details>

### Headless Services for Stickiness

![hadless](images/headless-cluster-ip.png ""headless-cluster-ip"")

As we learned services are exposed by default through the type ClusterIP, they work as an internal layer 4 load-balancer and provide a VIP with a stable DNS address, where the clients can connect to. The service forwards the connections to one of the pods which are backing the service via round robin.

This works fine and is desired for stateless apps which need to connect to one of the pods randomly and gain more performance through trafic routing via load balancing.

But in some cases where stickiness is needed and the clients need to connect to a particular pod for session or data stickiness, then we need to define our service without ClusterIP, which is by default the head of the service (that's the VIP).

To do that we need to define our service as a `headless` service, let's see that in action with the whereami service and our utils pod.

In the following we expose the kubia deployment as a headless service by setting the ClusterIP to `None`, scale the deployment and do a DNS query to both services with `host kubia-headless` and `host kubia-clusterip` from within the util client pod. As you'll see our client pod always connects to the first IP from the DNS response, if we curl the headless service. This means no load balancing happens, the call is `Sticky`!

The second curl to the service with ClusterIP does load balancing and distributes the traffic between pods.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k delete svc kubia
k expose deployment kubia --name kubia-headless --cluster-ip None
k expose deployment kubia --name kubia-clusterip
k expose deployment kubia --name kubia-lb --type=LoadBalancer
k scale deployment kubia --replicas 3
k run --generator=run-pod/v1 utils -it --image kubernautslabs/utils -- bash
# inside the utils container
host kubia-headless
host kubia-clusterip
# what is the difference here?
for i in $(seq 1 10) ; do curl kubia-headless:8080; done
# hits kubia only on one node? 
for i in $(seq 1 10) ; do curl kubia-clusterip:8080; done
# does load balancing via the head ;-)
exit
mkcert '*.whereami.svc'
k create secret tls whereami-secret --cert=_wildcard.whereami.svc.pem --key=_wildcard.whereami.svc-key.pem
cat kubia-ingress-tls.yaml
k create -f kubia-ingress-tls.yaml
# Please provide the host entry mapping in your /etc/hosts file like this:
# 192.168.64.23 my.whereami.svc
# the IP should be the IP of the traefik loadbalancer / ingress controller
curl https://my.whereami.svc
for i in $(seq 1 10) ; do curl https://my.whereami.svc; done
# the ingress controller does load balancing, although the kubia-headless is defined as the backend with serviceName: kubia-headless!
```

</p>
</details>

## Ingress with TLS

![ingress-controller](images/ingress-controller-traefik.png ""ingress-controller-traefik"")

Often we need to use an ingress object to provide path based or (sub-) domain based routing with TLS termination and other capabilities defined through annotations in the ingress resource.

By creating an ingress for a service, the ingress controller will create a single entry-point to the defined service in the ingress resource on every node in the cluster.

In the follwoing we're using the traefik ingress controller and an ingress object to provide path based or (sub-) domain based routing with TLS termination with a valid mkcert made TLS certificate on our lab environment.


<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cd ..
kn default
mkcert '*.ghost.svc'
k create secret tls ghost-secret --cert=_wildcard.ghost.svc.pem --key=_wildcard.ghost.svc-key.pem
# alternatively, if you can't or you don't want to use mkcert, you can create a selfsigned cert with:
# openssl genrsa -out tls.key 2048
# openssl req -new -x509 -key tls.key -out tls.cert -days 360 -subj /CN=my.ghost.svc
# k create secret tls ghost-secret --cert=tls.cert --key=tls.key
cat 3-ghost-deployment.yaml
k create -f 3-ghost-deployment.yaml
k expose deployment ghost --port=2368
cat 3-ghost-ingress-tls.yaml
k create -f 3-ghost-ingress-tls.yaml
# Please provide the host entry mapping in your /etc/hosts file like this:
# 192.168.64.23 my.ghost.svc admin.ghost.svc
# the IP should be the IP of the traefik loadbalancer / ingress controller
open https://my.ghost.svc
open https://admin.ghost.svc/ghost
# change the service type to LoadBalancer and access ghost with the loadbalancer IP on port 2368 or on any other node (works on k3s with trafik only), e.g.:
open http://node2:2368
# scale the deployment to have 2 replicas and see how the backend ghost backened https://admin.ghost.svc/ghost doesn't work.
```

</p>
</details>

## Multi-Container Pods

Create a Pod with two containers, both with image alpine and command ""echo hello; sleep 3600"". Connect to the second container and run 'ls'.

The easiest way to do it is to create a pod with a single container and save its definition in a YAML file and extend it with an additional container:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k run alpine-2-containers --image=alpine --restart=Never -o yaml --dry-run -- /bin/sh -c 'echo hello;sleep 3600' > alpine-pod.yaml
```

Copy/paste the container related values, so your final YAML should contain the following two containers (make sure those containers have a different name):

```YAML
containers:
  - args:
    - /bin/sh
    - -c
    - echo hello;sleep 3600
    image: alpine
    name: alpine1
    resources: {}
  - args:
    - /bin/sh
    - -c
    - echo hello;sleep 3600
    image: alpine
    name: alpine2
    resources: {}
```

```yaml
k create -f alpine-pod-2-containers.yaml # alpine-pod-2-containers.yaml is in this repo
# exec / ssh into to the alpine2 container
k exec -it alpine-2-containers -c alpine2 -- sh
ls
exit

# or just an one-liner
k exec -it alpine2 -c alpine2 -- ls

# cleanup
k delete pod alpine-2-containers
```

</p>
</details>


### Shared Volume

We'll extend the above alpine-2-containers with a shared volume of type emptyDir named `share` with a volumeMount for each container with a mountPath `/tmp/share1` and `/tmp/share2` as follow:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
cat alpine-pod-share-volumes.yaml
k apply -f alpine-pod-share-volumes.yaml
k exec -it alpine-2-containers-share-volume -c alpine1 -- sh
touch /tmp/share1/sharefile
echo ""test-share1"" > /tmp/share1/sharefile
cat /tmp/share1/sharefile
exit
k exec -it alpine-2-containers-share-volume -c alpine2 -- cat /tmp/share2/sharefile
```

</p>
</details>

## Security

Kubernetes Security is a huge topic and security hardening is a nice problem which everyone has to implement according to their security requirements and the governance model of their organization. We're going only to scratch the surface of K8s security here and highly recommend to go through the following resources by Michael Hausenblas, Liz Rice and the community.

https://kubernetes-security.info/

https://learn.hashicorp.com/vault/getting-started-k8s/sidecar

https://github.com/k8s-sec/k8s-sec.github.io


### Service Accounts

In K8s each namespace has a default ServiceAccount, named `default`. A ServiceAccount is a namespaced resource used by containers running in a Pod, to communicate with the API server of the Kubernetes cluster. ServiceAccounts with limited permissions are often used to apply the principle of least priviledge.

```bash
k get sa --all-namespaces | grep default
k get sa default -o yaml
k get secret default-<press tab> -o yaml
```

The data key of this Secret has several key/pairs:

```yaml
apiVersion: v1
kind: Secret
data:
  ca.crt: LS0tLS1CRUdJTi...
  namespace: ZGVmYXVsdA==
  token: ZXlKaGJHY2lP...
metadata:
  annotations:
    kubernetes.io/service-account.name: default
...
```

The token is the Base64 encoding of the JWT used to authenticate against the API server.
Let's get the token and head to jwt.io and use the debugger to decode the token.

```bash
kubectl run -it alpine --restart=Never --image=alpine -- sh
ls /var/run/secrets/kubernetes.io/serviceaccount/
cat /var/run/secrets/kubernetes.io/serviceaccount/token
exit
open https://jwt.io/
```

Paste the token and get the payload, which looks similar to this:

```
{
  ""iss"": ""kubernetes/serviceaccount"",
  ""kubernetes.io/serviceaccount/namespace"": ""default"",
  ""kubernetes.io/serviceaccount/secret.name"": ""default-token-24pbl"",
  ""kubernetes.io/serviceaccount/service-account.name"": ""default"",
  ""kubernetes.io/serviceaccount/service-account.uid"": ""147e134a-43d0-4c76-ad01-bccc59f8acb9"",
  ""sub"": ""system:serviceaccount:default:default""
}
```

We can see the service account default is linked to the namespace where it exists and is using the secret default-token-24pbl. This token is available in the filesystem of each container of the Pod of the attached ServiceAccount.

### Using a Custom ServiceAccount

A Service Account on its own is on not so useful, we need to provide rome rights and permissions to it through a set of rules defined through roles or cluster roles using the RBAC implementation in K8s.  


### RBAC (Role Based Access Control)

RBAC in K8s is activated by default and helps to provide access to resources (objects) like namespaces, pods, services, etc. to those Subjects or Entities like users, group or service accounts who need access to some resources and deny access to other resources who do not need access to them. RBAC increases security in K8s projects and shall be defined through a governance model in each organization (but in the theorie, you know we are all admins ;-)).

RBAC is implemented through Role, ClusterRole, RoleBinding, and ClusterRoleBinding.

#### Role

A Role defines what you or a subject can do to a set of resources, like get, set, delete, etc.A Role contains a set of rules which define a set of permissions. Roles are used to assigning permissions to resources on the namespace level.

#### ClusterRole

Similar to Role, ClusterRole can grant permissions on the Cluster Level such as giving resource permissions across all namespaces in the cluster.

#### RoleBinding and ClusterRoleBinding

RoleBinding and ClusterRoleBinding are used to grant permissions and priviledges to Subjects or Entities on the namespace (project RoleBinding) level or on the cluster level (ClusterRoleBinding).

![RBAC](images/rbac.png ""rbac"")

#### What We‚Äôll Do

We create a new namespace myapp and a new custom ServiceAccount `mysa`, create a new role `podreader` with the permission to get and list pods and create a rolebinding `mypodviewer` to bind the ServiceAccount to the role podreader in the namespace `myapp`.

<details><summary>Expand here to see the solution</summary>
<p>

```yaml
k get clusterroles | wc -l
# 62
k get clusterroles
k describe clusterrole view
k describe clusterrole view | grep pods
# the view role allows your application access to many other resources such as deployments and services.
k create namespace myapp
k -n=myapp create serviceaccount mysa
k -n myapp create role podreader --verb=get --verb=list --resource=pods
k -n myapp describe role/podreader
# nice, the role podreader can only view now, but we need to attach the role podreader to our application, represented by the service account myapp. 
k -n myapp create rolebinding mypodviewer --role=podreader --serviceaccount=myapp:mysa
k -n myapp describe rolebindings mypodviewer
k -n myapp auth can-i --as=system:serviceaccount:myapp:mysa list pods
# yes :-)
k -n myapp auth can-i --as=system:serviceaccount:myapp:mysa list services
# no :-)
```
</p>
</details>

We extend our alpine pod with the key `serviceAccountName` and the value `mysa`, apply the change and run a shell in the alpine-pod, get the toke belonging to the `mysa` ServiceAccountand use it to list the pods in the default namespace and the myapp namespace to see the differences:

<details><summary>Expand here to see the solution</summary>
<p>

```yaml

kn myapp
cat alpine-pod-service-account.yaml
k apply -f alpine-pod-service-account.yaml
k describe pod alpine-sa
k get sa
k get secrets
k exec -it alpine-sa -- sh
apk add curl
TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
curl -H ""Authorization: Bearer $TOKEN"" https://node1:6443/api/v1/namespaces/default/pods/ --insecure
curl -H ""Authorization: Bearer $TOKEN"" https://node1:6443/api/v1/namespaces/myapp/pods/ --insecure
# what works, what doesn't work?

```
</p>
</details>

#### Further reading:

[Kubernetes Tips: Using a ServiceAccount](https://medium.com/better-programming/k8s-tips-using-a-serviceaccount-801c433d0023)

#### Permission Manager

--> ToDo

## 3-Tier App (MVC)

Please read the README and the related blog post in the [subfolder](3-tier-app/README.md)  3-tier-app and try to understand and get the todo list app up and running.

# Day 2 Operation

Day 2 operation is mainly about implementing some principles like selfhealing and autoscaling for our apps AND the infrastructure components like nodes and K8s components itself and define resources limits, liveness and readiness probes for our apps, run continious security auditing, apply GitOps principles and style, etc.

In this first section we'll go through app auto scaling with Horizontal Pod Autoscaler.

![hpa](images/pod-autoscaling-hpa.png ""hap"")

## Pod AutoScaling with HPA (Horizontal Pod Autoscaler)

```bash
kubectl run hpa-example --image=k8s.gcr.io/hpa-example --requests=cpu=200m --expose --port=80
# create HPA based on CPU usage
kubectl autoscale deployment hpa-example --cpu-percent=50 --min=1 --max=10
# In another terminal run
kubectl run -i --tty generate-load --image=busybox /bin/sh
# Inside the above container run a loop bash command to stress the CPU
while true; do wget -q -O- http://hpa-example.default.svc.cluster.local; done
# Check HPA Status
kubectl get hpa
```

- [Simplify Kubernetes day 2 ops with Palette Cluster Profiles](https://www.spectrocloud.com/blog/kubernetes-day-2-operations-with-cluster-profiles)

## Labs and exercises and hackaton:

[Labs and exercises and hackaton repo](./Labs-and-exercises/)  to help you learn Kubernetes. 

## GitOps

GitOps is an operating model for Kubernetes and other cloud native technologies. It provides a set of best practices that unifies deployment, management, and monitoring for clusters and applications. Another way to put it is: a path towards a developer experience for managing applications; where end-to-end CI and CD pipelines and Git workflows

- https://www.eksworkshop.com/docs/automation/gitops/

- https://medium.com/@seifeddinerajhi/gitops-ci-cd-automation-workflow-using-github-actions-argocd-and-helm-charts-deployed-on-k8s-3811b253030b


- [Provides our opinionated point of view on how GitOps can be used to manage the infrastructure, services and application layers of K8s based systems](https://github.com/cloud-native-toolkit/multi-tenancy-gitops): GitOps Production Deployment Guide

## TroubleShooting

- [COMMON KUBERNETES ERRORS AND HOW THEY IMPACT CLOUD DEPLOYMENTS](https://cloudtweaks.com/2023/01/common-kubernetes-errors/)

- [Exit Codes In Containers & Kubernetes ‚Äì The Complete Guide](https://komodor.com/learn/exit-codes-in-containers-and-kubernetes-the-complete-guide/)

- [How to identify and troubleshoot common Kubernetes errors](https://newrelic.com/blog/how-to-relic/monitoring-kubernetes-part-three)

- [Kubernetes Troubleshooting: 5 Common Errors & How to Fix Them](https://lumigo.io/kubernetes-troubleshooting/)

- [Kubernetes Troubleshooting ‚Äì The Complete Guide](https://komodor.com/learn/kubernetes-troubleshooting-the-complete-guide/)


- [A visual guide on troubleshooting Kubernetes deployments](https://learnk8s.io/troubleshooting-deployments)

- [Kubernetes Troubleshooting: Effective Strategies for Unraveling the Puzzle](https://www.groundcover.com/kubernetes-troubleshooting)


- [node-problem-detector](https://github.com/kubernetes/node-problem-detector): This is a place for various problem detectors running on the Kubernetes nodes.


- [Kubernetes Goat](https://github.com/madhuakula/kubernetes-goat): ""Vulnerable by Design"" cluster environment to learn and practice Kubernetes security using an interactive hands-on playground üöÄ

##  Kubernetes in the cloud:

### AWS EKS

- [Terraform module to create AWS Elastic Kubernetes (EKS) resources](https://github.com/terraform-aws-modules/terraform-aws-eks)

- [This project](https://github.com/aws-ia/terraform-aws-eks-blueprints) contains a collection of Amazon EKS cluster patterns implemented in Terraform that demonstrate how fast and easy it is for customers to adopt Amazon EKS. The patterns can be used by AWS customers, partners, and internal AWS teams to configure and manage complete EKS clusters that are fully bootstrapped with the operational software that is needed to deploy and operate workloads.

- [EKS Workshop](https://www.eksworkshop.com/)

- [ (Amazon EKS) Best Practices](https://aws.github.io/aws-eks-best-practices/): A best practices guide for day 2 operations, including operational excellence, security, reliability, performance efficiency, and cost optimization.

- [AWS EKS Kubernetes - Masterclass | DevOps, Microservices](https://github.com/stacksimplify/aws-eks-kubernetes-masterclass)


### Azure AKS

- [Azure AKS Kubernetes Masterclass](https://github.com/stacksimplify/azure-aks-kubernetes-masterclass).

- [Official repository for the AKS Landing Zone Accelerator program](https://github.com/Azure/AKS-Landing-Zone-Accelerator): Azure Landing Zone Accelerators are architectural guidance, reference architecture, reference implementations and automation packaged to deploy workload platforms on Azure at Scale and aligned with industry proven practices.

- [Azure Kubernetes Service Checklist](https://www.the-aks-checklist.com/): This checklist contains a large set of best practices and some of them may not be relevant to your context and thus the rating may be incorrect in your case. Please choose and apply them wisely.


### Google GKE

- [Configures opinionated GKE clusters in terraform](https://github.com/terraform-google-modules/terraform-google-kubernetes-engine)

- [Sample applications for Google Kubernetes Engine (GKE)](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples)


### Common

- [Elastic Cloud on Kubernetes](https://github.com/elastic/cloud-on-k8s): Elastic Cloud on Kubernetes automates the deployment, provisioning, management, and orchestration of Elasticsearch, Kibana, APM Server, Enterprise Search, Beats, Elastic Agent, Elastic Maps Server, and Logstash on Kubernetes based on the operator pattern.


## playgrounds 

- [Kubernetes Playground](https://github.com/netgroup/kubernetes-playground) - Let's play with Kubernetes in a safe sandbox.

- [Gluster file system with Kubernetes](https://github.com/bwolf/gluster-k8s-playground) - Playground to experiment with Gluster and Kubernetes.

- [A standalone Kubernetes cluster](https://github.com/nextbreakpoint/kubernetes-playground)  - Scripts for creating a standalone Kubernetes cluster for development.

- [Playground](https://labs.play-with-k8s.com/) -  Play with Kubernetes is a playground which allows users to run K8s clusters in a matter of seconds.

## CNCF certifications:

- [Kubernetes CKS Full Course](https://www.youtube.com/watch?v=d9xfB5qaOfg) Theory + Practice + Browser Scenarios by Kim Wuestkamp

- [Kubernetes CKS Course Environment](https://github.com/killer-sh/cks-course-environment)

- [Certified Kubernetes Security Specialist - CKS](https://github.com/walidshaari/Certified-Kubernetes-Security-Specialist): Curated resources help you prepare for the CNCF/Linux Foundation CKS 2021 ""Kubernetes Certified Security Specialist"" Certification exam.

- [Kubernetes Certified Administration](https://github.com/walidshaari/Kubernetes-Certified-Administrator): Online resources that will help you prepare for taking the CNCF CKA 2020 ""Kubernetes Certified Administrator"" Certification exam.

- [CKA preparation](https://github.com/alijahnas/CKA-practice-exercises): This is a guide for passing the CNCF Certified Kubernetes Administrator (CKA) with practice exercises.

- [CKA Exercises](https://github.com/chadmcrowell/CKA-Exercises): Practice for the Certified Kubernetes Administrator (CKA) Exam.

## Kubernetes IAC:

Certainly! Here's a list of some popular tools for managing Kubernetes Infrastructure as Code (IAC):

1. **Helm:**
   - Overview: Helm is a package manager for Kubernetes that simplifies the deployment and management of applications.
   - GitHub: [Helm GitHub Repository](https://github.com/helm/helm)

2. **Kustomize:**
   - Overview: Kustomize is a tool for customizing Kubernetes manifests, allowing you to manage configuration variations in a declarative way.
   - GitHub: [Kustomize GitHub Repository](https://github.com/kubernetes-sigs/kustomize)

3. **Kubeconfig Management:**
   - Tools like `kubectx` and `kubens` help manage and switch between multiple Kubernetes contexts and namespaces.
   - GitHub: [kubectx GitHub Repository](https://github.com/ahmetb/kubectx)

4. **Kubeval:**
   - Overview: Kubeval is a tool for validating Kubernetes manifests against the Kubernetes API schema.
   - GitHub: [Kubeval GitHub Repository](https://github.com/instrumenta/kubeval)

5. **Kops:**
   - Overview: Kops helps you create, destroy, upgrade, and maintain Kubernetes clusters on AWS.
   - GitHub: [Kops GitHub Repository](https://github.com/kubernetes/kops)

6. **Terraform:**
   - Overview: While not specific to Kubernetes, Terraform is widely used for IAC and can be used to provision and manage Kubernetes infrastructure.
   - Website: [Terraform](https://www.terraform.io/)

7. **Pulumi:**
   - Overview: Pulumi allows you to define infrastructure as code using familiar programming languages, including TypeScript, Python, and Go.
   - GitHub: [Pulumi GitHub Repository](https://github.com/pulumi/pulumi)

8. **Helmfile:**
   - Overview: Declaratively deploy your Kubernetes manifests, Kustomize configs, and Charts as Helm releases. Generate all-in-one manifests for use with ArgoCD.
   - GitHub: [Kubeform GitHub Repository](https://github.com/helmfile/helmfile)

9. **Jsonnet:**
   - Overview: Jsonnet is a data templating language that can be used to generate Kubernetes manifests.
   - GitHub: [Jsonnet GitHub Repository](https://github.com/google/jsonnet)

10. **Skaffold:**
    - Overview: Skaffold is a command-line tool that facilitates continuous development for Kubernetes applications.
    - GitHub: [Skaffold GitHub Repository](https://github.com/GoogleContainerTools/skaffold)

This is not an exhaustive list, and the choice of tools depends on your specific use case and preferences. Always check the official documentation and community support for each tool for the most accurate and up-to-date information.

### Coming next

* Cluster Operation and maintanance

* Nodes AutoScaling and AutoSpotting (on AWS)

* Logging and Monitoring with Operators

* Cloud Native Storage for Statefulsets

* Backup & Recovery

* Service Mesh


## ‚ù§ Show your support

Give a ‚≠êÔ∏è if this project helped you, Happy learning!
",0,0,76,apache-2.0,41.0,"['practical', 'kubernetes', 'exercices', 'prerequisite', 'preparation', 'tool', 'use', 'kubernetes', 'guide', 'network', 'security', 'storage', 'misc', 'useful', 'alias', 'kubectl', 'cheatsheet', 'goody', 'list', 'event', 'sort', 'timestamp', 'list', 'service', 'sort', 'name', 'get', 'pod', 'yaml', 'without', 'cluster', 'specific', 'information', 'show', 'label', 'pod', 'or', 'object', 'all', 'resource', 'support', 'list', 'get', 'request', 'verb', 'k', 'create', 'namespace', 'imperative', 'via', 'declarative', 'k', 'create', 'run', 'pod', 'deploymens', 'old', 'school', 'go', 'get', 'deprecate', 'create', 'service', 'via', 'expose', 'pod', 'open', 'new', 'terminal', 'session', 'caution', 'adapt', 'number', 'replica', 'k', 'get', 'event', 'log', 'describe', 'object', 'caution', 'ingres', 'ingress', 'object', 'namespaced', 'merge', 'context', 'merge', 'kubeconfigs', 'cluster', 'context', 'test', 'kubernetes', 'secret', 'secret', 'further', 'reading', 'kubernetes', 'configmaps', 'whoami', 'whoareyou', 'whereami', 'problem', 'what', 'we', 'll', 'do', 'expose', 'deployment', 'service', 'type', 'clusterip', 'new', 'terminal', 'session', 'call', 'create', 'service', 'type', 'nodeport', 'adapt', 'nodeport', 'env', 'please', 'give', 'lb', 'ip', 'pool', 'happy', 'dns', 'base', 'service', 'discovery', 'whereami', 'kubia', 'pod', 'what', 'we', 'll', 'do', 'repeat', 'service', 'call', 'many', 'time', 'see', 'loadbalancing', 'work', 'get', 'pong', 'why', 'ssh', 'node', 'examine', 'iptable', 'rule', 'headless', 'service', 'stickiness', 'inside', 'utils', 'container', 'difference', 'here', 'hit', 'kubia', 'one', 'node', 'load', 'balance', 'via', 'head', 'please', 'provide', 'host', 'entry', 'mapping', 'file', 'like', 'this', 'ip', 'ip', 'traefik', 'loadbalancer', 'ingres', 'controller', 'ingress', 'controller', 'load', 'balancing', 'although', 'define', 'backend', 'servicename', 'ingres', 'tl', 'alternatively', 'ca', 'want', 'use', 'mkcert', 'create', 'selfsigned', 'cert', 'with', 'openssl', 'genrsa', 'openssl', 'req', 'k', 'create', 'secret', 'tls', 'please', 'provide', 'host', 'entry', 'mapping', 'file', 'like', 'this', 'ip', 'ip', 'traefik', 'loadbalancer', 'ingres', 'controller', 'change', 'service', 'type', 'loadbalancer', 'access', 'ghost', 'loadbalancer', 'ip', 'port', 'node', 'work', 'trafik', 'only', 'scale', 'deployment', 'replica', 'see', 'backend', 'ghost', 'backened', 'http', 'work', 'pod', 'repo', 'exec', 'ssh', 'container', 'cleanup', 'share', 'volume', 'security', 'service', 'account', 'use', 'custom', 'serviceaccount', 'rbac', 'role', 'base', 'access', 'control', 'role', 'clusterrole', 'rolebinding', 'clusterrolebinding', 'what', 'we', 'll', 'do', 'view', 'role', 'allow', 'application', 'access', 'many', 'resource', 'deployment', 'service', 'nice', 'role', 'podreader', 'view', 'now', 'need', 'attach', 'role', 'podreader', 'application', 'represent', 'service', 'account', 'myapp', 'yes', 'work', 'work', 'further', 'reading', 'permission', 'manager', 'app', 'mvc', 'day', 'operation', 'pod', 'autoscaling', 'hpa', 'horizontal', 'pod', 'autoscaler', 'create', 'hpa', 'base', 'cpu', 'usage', 'in', 'another', 'terminal', 'run', 'inside', 'container', 'run', 'loop', 'bash', 'command', 'stress', 'cpu', 'check', 'hpa', 'status', 'lab', 'exercise', 'hackaton', 'gitops', 'troubleshoot', 'kubernetes', 'cloud', 'aws', 'eks', 'azure', 'ak', 'google', 'gke', 'common', 'playground', 'cncf', 'certification', 'kubernetes', 'iac', 'come', 'next', 'show', 'support']",109,"['service', 'pod', 'create', 'kubernetes', 'ip']"
kafbat/kafka-ui,main,"<div align=""center"">
<img src=""documentation/images/logo_new.png"" alt=""logo""/>
<h3>Kafbat UI</h3>

Versatile, fast and lightweight web UI for managing Apache Kafka¬Æ clusters.
</div>

<div align=""center"">
<a href=""https://github.com/kafbat/kafka-ui/blob/main/LICENSE""><img src=""https://img.shields.io/badge/License-Apache%202.0-blue.svg"" alt=""License""/></a>
<img src=""documentation/images/free-open-source.svg"" alt=""price free""/>
<a href=""https://github.com/kafbat/kafka-ui/releases""><img src=""https://img.shields.io/github/v/release/kafbat/kafka-ui"" alt=""latest release version""/></a>
<a href=""https://discord.gg/4DWzD7pGE5""><img src=""https://img.shields.io/discord/897805035122077716"" alt=""discord online number count""/></a>
<a href=""https://github.com/sponsors/kafbat""><img src=""https://img.shields.io/github/sponsors/kafbat?style=flat&logo=githubsponsors&logoColor=%23EA4AAA&label=Support%20us"" alt="""" /></a>
</div>

<p align=""center"">
    <a href=""https://ui.docs.kafbat.io/"">Documentation</a> ‚Ä¢ 
    <a href=""https://ui.docs.kafbat.io/configuration/quick-start"">Quick Start</a> ‚Ä¢ 
    <a href=""https://discord.gg/4DWzD7pGE5"">Community</a>
    <br/>
    <a href=""https://aws.amazon.com/marketplace/pp/{replaceMe}"">AWS Marketplace</a>  ‚Ä¢
    <a href=""https://www.producthunt.com/products/ui-for-apache-kafka/reviews/new"">ProductHunt</a>
</p>

<p align=""center"">
  <img src=""https://repobeats.axiom.co/api/embed/88d2bd9887380c7d86e2f986725d9af52ebad7f4.svg"" alt=""stats""/>
</p>

#### Kafbat UI is a free, open-source web UI to monitor and manage Apache Kafka clusters.

Kafbat UI is a simple tool that makes your data flows observable, helps find and troubleshoot issues faster and deliver optimal performance. Its lightweight dashboard makes it easy to track key metrics of your Kafka clusters - Brokers, Topics, Partitions, Production, and Consumption.

<i>
Kafbat UI, developed by <b>Kafbat</b>*, proudly carries forward the legacy of the UI Apache Kafka project.
Our dedication is reflected in the continuous evolution of the project, ensuring adherence to its foundational vision while adapting to meet modern demands.
We extend our gratitude to Provectus for their past support in groundbreaking work, which serves as a cornerstone for our ongoing innovation and dedication.

<b>*</b> - The <b>Kafbat</b> team comprises key contributors from the project's inception, bringing a wealth of experience and insight to this renewed endeavor.
</i>

# Interface

![Interface](https://raw.githubusercontent.com/kafbat/kafka-ui/images/overview.gif)

# Features
* **Multi-Cluster Management** ‚Äî monitor and manage all your clusters in one place
* **Performance Monitoring with Metrics Dashboard** ‚Äî  track key Kafka metrics with a lightweight dashboard
* **View Kafka Brokers** ‚Äî view topic and partition assignments, controller status
* **View Kafka Topics** ‚Äî view partition count, replication status, and custom configuration
* **View Consumer Groups** ‚Äî view per-partition parked offsets, combined and per-partition lag
* **Browse Messages** ‚Äî browse messages with JSON, plain text, and Avro encoding
* **Dynamic Topic Configuration** ‚Äî create and configure new topics with dynamic configuration
* **Configurable Authentification** ‚Äî [secure](https://ui.docs.kafbat.io/configuration/authentication) your installation with optional Github/Gitlab/Google OAuth 2.0
* **Custom serialization/deserialization plugins** - [use](https://ui.docs.kafbat.io/configuration/serialization-serde) a ready-to-go serde for your data like AWS Glue or Smile, or code your own!
* **Role based access control** - [manage permissions](https://ui.docs.kafbat.io/configuration/rbac-role-based-access-control) to access the UI with granular precision
* **Data masking** - [obfuscate](https://ui.docs.kafbat.io/configuration/data-masking) sensitive data in topic messages

## Feature overview

<details>
    <summary>Click here for the feature overview</summary>

# The Interface
Kafbat UI wraps major functions of Apache Kafka with an intuitive user interface.

![Interface](documentation/images/Interface.gif)

## Topics
Kafbat UI makes it easy for you to create topics in your browser by several clicks,
pasting your own parameters, and viewing topics in the list.

![Create Topic](documentation/images/Create_topic_kafka-ui.gif)

It's possible to jump from connectors view to corresponding topics and from a topic to consumers (back and forth) for more convenient navigation.
connectors, overview topic settings.

![Connector_Topic_Consumer](documentation/images/Connector_Topic_Consumer.gif)

### Messages
Let's say we want to produce messages for our topic. With the Kafbat UI we can send or write data/messages to the Kafka topics without effort by specifying parameters, and viewing messages in the list.

![Produce Message](documentation/images/Create_message_kafka-ui.gif)

## Schema registry
There are 3 supported types of schemas: Avro¬Æ, JSON Schema, and Protobuf schemas.

![Create Schema Registry](documentation/images/Create_schema.gif)

Before producing avro/protobuf encoded messages, you have to add a schema for the topic in Schema Registry. Now all these steps are easy to do
with a few clicks in a user-friendly interface.

![Avro Schema Topic](documentation/images/Schema_Topic.gif)

</details>

# Getting Started

To run Kafbat UI, you can use either a pre-built Docker image or build it (or a jar file) yourself.

## Quick start (Demo run)

```
docker run -it -p 8080:8080 -e DYNAMIC_CONFIG_ENABLED=true ghcr.io/kafbat/kafka-ui
```

Then access the web UI at [http://localhost:8080](http://localhost:8080)

The command is sufficient to try things out. When you're done trying things out, you can proceed with a [persistent installation](https://ui.docs.kafbat.io/quick-start/persistent-start)

## Persistent installation

```
services:
  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
```

Please refer to our [configuration](https://ui.docs.kafbat.io/configuration/configuration-file) page to proceed with further app configuration.

## Some useful configuration related links

[Web UI Cluster Configuration Wizard](https://ui.docs.kafbat.io/configuration/configuration-wizard)

[Configuration file explanation](https://ui.docs.kafbat.io/configuration/configuration-file)

[Docker Compose examples](https://ui.docs.kafbat.io/configuration/compose-examples)

[Misc configuration properties](https://ui.docs.kafbat.io/configuration/misc-configuration-properties)

## Helm charts

[Quick start](https://ui.docs.kafbat.io/configuration/helm-charts/quick-start)

## Building from sources

[Quick start](https://ui.docs.kafbat.io/development/building/prerequisites) with building

## Liveliness and readiness probes
Liveliness and readiness endpoint is at `/actuator/health`.<br/>
Info endpoint (build info) is located at `/actuator/info`.

# Configuration options

All the environment variables/config properties could be found [here](https://ui.docs.kafbat.io/configuration/misc-configuration-properties).

# Contributing

Please refer to [contributing guide](https://ui.docs.kafbat.io/development/contributing), we'll guide you from there.

# Support

As we're fully independent, team members contribute in their free time.
Your support is crucial for us, if you wish to sponsor us, take a look [here](https://github.com/sponsors/kafbat) 
",1,137,51,apache-2.0,180.0,"['kafbat', 'ui', 'free', 'web', 'ui', 'monitor', 'manage', 'apache', 'kafka', 'cluster', 'interface', 'feature', 'feature', 'overview', 'the', 'interface', 'topic', 'message', 'schema', 'registry', 'get', 'start', 'quick', 'start', 'demo', 'run', 'persistent', 'installation', 'some', 'useful', 'configuration', 'relate', 'link', 'helm', 'chart', 'building', 'source', 'liveliness', 'readiness', 'probe', 'configuration', 'option', 'contribute', 'support']",18,"['ui', 'interface', 'feature', 'start', 'configuration']"
brenoepics/at4j,main,"# Azure Translator for Java (AT4J)

[![Maven Central](https://img.shields.io/maven-central/v/io.github.brenoepics/at4j?color=blue)](https://central.sonatype.com/artifact/io.github.brenoepics/at4j)
![Static Badge](https://img.shields.io/badge/azure--api-3.0-blue?style=flat&logo=microsoftazure&logoColor=%230080FF&color=%230080FF&link=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fai-services%2Ftranslator%2Freference%2Fv3-0-reference)
[![Static Badge](https://img.shields.io/badge/run-l?logo=postman&label=Postman&color=EF5B25)](https://www.postman.com/maintenance-astronaut-2993290/workspace/brenoepics/collection/18589822-dfe7a640-9b94-47a8-b19f-46cb9cc8843e?action=share&creator=18589822)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=coverage)](https://sonarcloud.io/summary/new_code?id=brenoepics_at4j)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=brenoepics_at4j&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=brenoepics_at4j)

An unofficial Java library for translating text using Azure AI Cognitive Services.

## ‚ú® Features

- Text Translation: Translate text from one language (or detect) to another or to a list of languages.
- Language Detection: Detect the language of a given text.
- Profanity Handling: Options for handling profanity in translations.
- Text Type Support: We support both plain text and HTML text translation.
- And more.

## üìù Documentation

- [AT4J Docs](https://brenoepics.github.io/at4j/)
- [JavaDoc](https://brenoepics.github.io/at4j/javadoc/)

## üéâ Basic Usage

> [!NOTE]
> Example repository [Azure-Translator-Example](https://github.com/brenoepics/Azure-Translator-Example)

The following example translates a simple Hello World to Portuguese, Spanish and French.

```java
public class ExampleTranslator {
  public static void main(String[] args) {
    // Insert your Azure key and region here
    String azureKey = ""<Your Azure Subscription Key>"";
    String azureRegion = ""<Your Azure Subscription Region>"";
    AzureApi api = new AzureApiBuilder().setKey(azureKey).region(azureRegion).build();

    // Set up translation parameters
    List < String > targetLanguages = List.of(""pt"", ""es"", ""fr"");
    TranslateParams params =
            new TranslateParams(""Hello World!"", targetLanguages).setSourceLanguage(""en"");

    // Translate the text
    Optional < TranslationResponse > translationResult = api.translate(params).join();

    // Print the translations
    translationResult.ifPresent(
            response ->
                    response.getFirstResult().getTranslations().forEach(ExampleTranslator::logLanguage));
  }

  public static void logLanguage(Translation translation) {
    System.out.println(translation.getLanguageCode() + "": "" + translation.getText());
  }
}
```

<details>
     <summary>Expected Output</summary>

```console
pt: Ol√°, Mundo!
es: ¬°Hola mundo!
fr: Salut tout le monde!
```

</details>

## üì¶ Download / Installation

The recommended way to get AT4J is to use a build manager, like Gradle or Maven.

### [AT4J Dependency](https://central.sonatype.com/artifact/io.github.brenoepics/at4j)

<details>
  <summary>Gradle</summary>

```gradle
implementation group: 'io.github.brenoepics', name: 'at4j', version: '1.2.0'
```

</details>
<details>
  <summary>Maven</summary>

```xml

<dependency>
    <groupId>io.github.brenoepics</groupId>
    <artifactId>at4j</artifactId>
    <version>1.2.0</version>
</dependency>
```

</details>
<details>
  <summary>Sbt</summary>

```sbt
libraryDependencies += ""io.github.brenoepics"" % ""at4j"" % ""1.2.0""
```

</details>

### Frequently Asked Questions (FAQ)

**Q:** How do I access Azure Translator Keys for my project?

**A:** You can access your Azure Translator Keys through your Azure portal. Remember to keep your keys secure and
refrain from sharing them publicly. If you suspect a key has been compromised, it's crucial to regenerate it promptly.
For detailed instructions on generating your own keys, refer
to [this guide](https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-subscription). Additionally, you
can explore the [Azure Free Tier](https://brenoepics.github.io/at4j/guide/azure-subscription.html#azure-free-tier) for
more information.

## ü§ù Thank You!

- **Microsoft Azure**: Supporting our project with a generous grant of $10,000+ in Azure credits, enabling us to use
  virtual machines, document translation and other essential cloud resources for our development needs.
- We extend our sincere thanks to all contributors for their invaluable contributions.

## üßë‚Äçüíª Contributing

Contributions of any kind are welcome. You can start contributing to this library by creating issues, submitting pull
requests or giving a star to the project.

## üìÉ License

AT4J is distributed under the [Apache license version 2.0](./LICENSE).
",4,2,8,apache-2.0,48.0,"['azure', 'translator', 'java', 'feature', 'documentation', 'basic', 'usage', 'download', 'installation', 'dependency', 'http', 'frequently', 'ask', 'question', 'faq', 'thank', 'you', 'contribute', 'license']",10,"['azure', 'translator', 'java', 'feature', 'documentation']"
Missuo0o/FoodDeliveryBackend,main,"# Food Delivery Backend System

This is the backend system for a food delivery application, built using Spring Boot. The application leverages a range of technologies including MySQL, Redis, RabbitMQ, and integrates with Alibaba Cloud's OSS and WeChat Pay. This system is designed to be scalable, secure, and efficient, utilizing Spring Boot's extensive support for enterprise-grade applications.

## Configuration

The application is configured to run on port 8080 and is set up with production profiles. It uses MyBatis for ORM, JWT for authentication, and includes advanced logging configurations.

### Technologies Used

- **Spring Boot** - Framework for building Java-based applications.
- **MySQL** - Database for storing user and order data.
- **Redis** - Used as a cache and session store.
- **RabbitMQ** - Messaging broker for handling asynchronous processing.
- **JWT** - For securing REST APIs by providing tokens to verify user identity.
- **MyBatis** - Persistence framework integrating with Spring Boot for data handling.
- **Knife4j** - Enhanced Swagger-compatible interface for visualizing RESTful APIs.
- **Alibaba Cloud OSS** - For storage solutions.
- **WeChat Pay** - Payment integration for handling transactions and refunds.

## Installation

### Prerequisites

You need the following installed on your system:

- Java JDK 23
- Maven
- MySQL
- RabbitMQ
- Redis

### Setup

1. Clone the repository:

   ```bash
   git clone https://github.com/yourusername/food-delivery-backend.git
   ```

2. Navigate to the project directory:

   ```bash
   cd food-delivery-backend
   ```

3. Install dependencies:

   ```bash
   mvn install
   ```

### Configuration

Update the `application.yml` or `application.properties` with your specific settings for MySQL, Redis, RabbitMQ, OSS, and WeChat Pay. This typically includes hosts, ports, usernames, passwords, and other essential configuration details.

Certainly! Here's the section of the README updated to reflect how to run the application using the `java -jar` command instead of Maven directly:

---

## Running the Application

Instead of using Maven to run the application, you can build a jar file and run it directly using the Java command. This is often more suitable for production environments or when deploying the application.

1. First, package the application into a runnable jar file with Maven:

   ```bash
   mvn clean package
   ```

   This command will create a `.jar` file in the `target` directory.

2. Run the application using:

   ```bash
   java -jar target/your-application-name.jar
   ```

   Replace `your-application-name.jar` with the actual name of your jar file generated by Maven.

The application will start running on `http://localhost:8080`.

---

## API Documentation

API documentation is available via Swagger UI and Knife4j at:

- **Swagger UI**: [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)
- **Knife4j**: [http://localhost:8080/doc.html](http://localhost:8080/doc.html)

## Security

This application uses JWT for authentication. Ensure you configure your JWT settings properly, including secret keys and token names for both admin and user levels.

## Contributing

We appreciate contributions. Please follow the standard GitHub fork-and-pull-request workflow.

## License

This project is licensed under the MIT License - see the LICENSE.md file for details.

---

This README includes detailed instructions for setting up and running your application, along with configuration management practices, to ensure smooth deployment and operation. Adjustments may be necessary to fit your exact setup or additional features.



",0,0,1,mit,0.0,"['food', 'delivery', 'backend', 'system', 'configuration', 'technology', 'use', 'installation', 'prerequisite', 'setup', 'configuration', 'run', 'application', 'api', 'documentation', 'security', 'contribute', 'license']",12,"['configuration', 'food', 'delivery', 'backend', 'system']"
seregamorph/spring-test-smart-context,master,"## Improving Spring Boot Test efficiency

### Problem statement
Spring test framework creates an application context according to test class configuration.
The context is cached and reused for all subsequent tests. If there is an existing context
with the same configuration, it will be reused. Otherwise, the new context will be created.
This is a very efficient and flexible approach, but it has a drawback: eventually this may
lead to out of memory errors if the number of unique configurations is too high and context
has a lot of heavyweight beans like TestContainers. In many cases simple static bean 
definition can help, but this project suggests another approach: reordering test classes
and eager context cleanup.

Consider a sample test suite of 8 classes that use 4 different configurations, classes that have the same configuration
are marked with the same colour:

<img src=""doc/sample-test-suite.png"" alt=""Sample test suite"" width=""700""/>

In a large test suites as well as in shared CI/CD environments with lots of test pipelines
working simultaneously this may eventually lead to out of memory errors
in Java process or Docker host.

### Proposed solution
It's recommended to use statically-defined TestContainers beans, optimize reusing same configuration between tests 
e.g. via common test super-classes.
But additionally this library makes two optimizations:
* test class execution is reordered to group tests with the same context configuration so they
can be executed sequentially
* the order of tests is known, so if current test class is last per current configuration, the spring context
will be automatically closed (it's called `Smart DirtiesContext`) and the beans will be disposed releasing resources

As a result, in a suite of single module there will always be not more than 1 active spring contexts:

<img src=""doc/reorder-and-smart-dirties-context.png"" alt=""Reordered suite with smart DirtiesContext"" width=""700""/>

This chart is done via calculating the number of active docker containers while executing a suite of 120 integration
test classes that actively uses TestContainers for databases (several datasources simultaneously) and other services:

<img src=""doc/active-docker-containers.png"" alt=""Number of active docker containers"" width=""700""/>

As shown on the chart, the suite just fails with OOM without the optimization.
As an advantage, the total test execution time will also become less, because resource consumption (especially memory)
will be reduced, hence tests are executed faster.

### References
This idea was submitted to the Spring Framework team as a feature request:
* https://github.com/spring-projects/spring-framework/issues/32289

Public presentation with AtomicJar (TestContainers creators):
* https://www.youtube.com/watch?v=_Vci_5nr8R0

### Limitations
At the moment only single thread test execution per module is supported. Parallel test execution is work in progress.
Also there can be problems with Jupiter
[Nested](https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested) test classes.

### Supported versions
`Java` 8+ (`Java` 17+ for spring-boot 3.x projects)

`Spring Boot` 2.4+, 3.x as well as bare Spring framework

Supported test frameworks:
* `JUnit 4` (via JUnit 5 [junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running))
* `JUnit 5 Jupiter`
* `TestNG` (both bare TestNG and JUnit platform [testng-engine](https://github.com/junit-team/testng-engine))

`Gradle Enterprise Maven Extension` (test execution caching) correctly supports changed behaviour

### How to use
Add maven dependency (available in maven central):
```xml
<dependency>
    <groupId>com.github.seregamorph</groupId>
    <artifactId>spring-test-smart-context</artifactId>
    <version>0.3</version>
    <scope>test</scope>
</dependency>
```
Or Gradle dependency:
```groovy
testImplementation(""com.github.seregamorph:spring-test-smart-context:0.3"")
```
It's recommended to check [Demo projects](demo).

### How it works

<details>
  <summary>JUnit 5 Jupiter</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesClassOrderer](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnitSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/AbstractJUnitSpringIntegrationTest.java)
</details>

<details>
  <summary>TestNG</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesSuiteListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
The integration test classes should add
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
Note: the annotation is inherited, so it makes sense to annotate the base test class or use
[AbstractTestNGSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/AbstractTestNGSpringIntegrationTest.java)
parent.
</details>

<details>
  <summary>JUnit 4</summary>

Note: support of JUnit 4 is planned to be removed in version 1.0 (will stay available in 0.x versions).

The JUnit 4 does not provide standard way to reorder test class execution, but it's still possible via
[junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running).
This dependency should be added to test scope of the module:
```xml
<dependency>
    <groupId>org.junit.vintage</groupId>
    <artifactId>junit-vintage-engine</artifactId>
    <scope>test</scope>
</dependency>
```
or for Gradle (see [detailed instruction](https://docs.gradle.org/current/userguide/java_testing.html#executing_legacy_tests_with_junit_vintage)):
```groovy
testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
testRuntimeOnly('org.junit.platform:junit-platform-launcher')
```
Also the `surefire`/`failsafe` plugins should be configured to use junit-platform:
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-failsafe-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
```
or for Gradle:
```groovy
tasks.named('test', Test) {
    useJUnitPlatform()
}
```

For projects with JUnit 4 it will automatically setup
[SmartDirtiesPostDiscoveryFilter](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesPostDiscoveryFilter.java)
which will reorder test classes on the level of junit-launcher and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnit4SpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/junit4/AbstractJUnit4SpringIntegrationTest.java)
</details>

### Additional materials
* See the online presentation of the project https://www.youtube.com/watch?v=_Vci_5nr8R0 hosted by 
[AtomicJar](https://www.atomicjar.com/), the creators of [TestContainers](https://testcontainers.com/) framework.
* Presentation slides: [Miro board](https://miro.com/app/board/uXjVN3KJeCI=/?share_link_id=309027962805)

### Known projects using library
<img src=""doc/miro-logo.png"" alt=""Miro"" width=""120""/>

[Miro](https://miro.com/) is using this approach to optimize huge integration test suites and it saved a lot of resource
for CI/CD pipelines.
",3,0,3,apache-2.0,6.0,"['improve', 'spring', 'boot', 'test', 'efficiency', 'problem', 'statement', 'propose', 'solution', 'reference', 'limitation', 'support', 'version', 'how', 'use', 'how', 'work', 'additional', 'material', 'know', 'project', 'use', 'library']",10,"['how', 'use', 'improve', 'spring', 'boot']"
mitre-public/open-aria,main,"
![aria logo picture](./docs/assets/DFW-Airspace-Graph.gif)

[![Java CI with Gradle](https://github.com/mitre-public/open-aria/actions/workflows/gradle.yml/badge.svg)](https://github.com/mitre-public/open-aria/actions/workflows/gradle.yml)
[![License](https://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)

# Welcome to OpenARIA

This repository contains an open-source edition of the _Aviation Risk Identification and Assessment_ (ARIA) software
program developed by MITRE on behalf of the Federal Aviation Administration's (FAA) Safety and Technical Training (AJI)
Service Unit.

## OpenARIA's Goal

Our goal is to build a community focused on improving aviation safety & efficiency by extracting value from aircraft
location data.

## How OpenARIA can achieve this Goal

1. Provide a publicly available solution for **detecting aviation risks** within aircraft location data.
    - This tangible working solution can be critiqued by the community and improved as necessary.


2. Provide a publicly available solution for detecting **and then aggregating** aviation risks for bulk
   analysis.
    - Someone operating `OpenARIA` for a day will have one day's worth of output
    - Someone operating `OpenARIA` for a year will have a year's worth of output.
    - We must facilitate capturing and utilizing large amounts of output data.


3. Provide a publicly available solution for **archiving and replaying** aircraft location data
    - E.g., when `OpenARIA` detects _an event_, we will want to be able to replay the event to understand what happened.


4. Provide solutions that work with near-real time data streams as well as archival data.

---

# Getting Started

- Learn about important ongoing work [here](./docs/ADRs/supportingNewFormats.md)
  and [here](./docs/ADRs/pointInterfaceCritique2.md)
- Learn about the supported data formats [here](./docs/csv-data-format.md)
    - **Important Caveat:** The initial code commit includes a dependency that is not available in the open source
      domain.
    - We are working to remove this blocker by:
        1. Proposing [this](./docs/csv-data-format.md) data format (which will replace the legacy format)
        2. Adding support for this new data format
        3. Refactoring the code so the closed-source dependency is no longer used or required.
        4. Building the project using **only** GitHub Actions and publicly available dependencies
    - You can view the progress of this work by browsing the branches of the project.
- To begin **detecting aviation events** see [here](./docs/how-to/detect-encounters.md)
- To begin **archiving and replaying** aircraft location data see [here](./docs/how-to/replay-encounters.md)
- To begin detecting **and then aggregating** aviation data see [here](./docs/how-to/aggregate-encounters.md)_

## Building from Source

1. First clone the project: `git clone git@github.com:mitre-public/open-aria.git`
2. Navigate to project directory `cd {PATH_TO_REPOSITORY}/open-aria`
3. Run: `./gradlew shadowJar`
    - This command launches a build plugin that collects all compiled code and dependencies into a single
      jar (aka _uber jar_, _shadow jar_, or _fat jar_)
4. Find the _uber jar_ in: 
    - `{PATH_TO_REPOSITORY}/open-aria/open-aria-deploy/libs/build`
    - The _uber jar_ will have a name like: `open-aria-0.1.0-SNAPSHOT-uber.jar`

## Downloading Pre-Built Artifact
There are 2 places to simply download a pre-built artifact
1. Download a full release from [here](https://github.com/mitre-public/open-aria/releases)
   - **Coming soon** (ETA = June 1st)
2. Download the artifact produced during a recent execution of the CI/CD system.
   - Click [here](https://github.com/mitre-public/open-aria/actions/workflows/gradle.yml) to see the list of recent builds
   - Click on any build from the last 90 days (GitHub stores build artifacts for 90-days)
   - Download the Artifact named: `Deployable-Uber-Jar`

- [ ] TODO: Publish full releases to Maven Central.

---

# Documentation

- [High-level source code summary](docs/codeIntro.md)


- **About ARIA's Airborne Event Data**
    - An example of this JSON output data is [here](open-aria-airborne/src/test/resources/scaryTrackOutput.json)
    - A PDF describing the output data is [here](open-aria-airborne/airborneDataSpec_v3.pdf)


- **Architectural Decision Records (ADRs)**
    - [Supporting New Data Formats](./docs/ADRs/supportingNewFormats.md)
    - [Critique of Point and Track interfaces](docs/ADRs/pointInterfaceCritique.md)
    - [Why YAML configs are preferable to Properties](docs/ADRs/yamlOverProperties.md)
    - [How to compute an event's uniqueId](docs/ADRs/computingUniqueId.md)

---

# Using and Contributing

First of all, **Welcome to the community!**

### Contributing as a User

- **Please submit feedback.**
- Do you have a technical question? If so, please ask. We are here to help. Your question could lead to improvements.
  User questions lead to improved documentation, understanding defects, and eventually code improvements the reach
  everyone in the community.
- Do you have a feature request? If so, please ask. We'll see what we can do given the development time we have
  available.

### Contributing as a Developer

- We will use GitHub's Issue tracking features when the project launches.
- Anyone interested in making technical contributions is welcomed to communicate with the dev team on GitHub. Feel free
  to submit issues, fix issues, and submit PRs.
- We may write a _""contributing guidelines""_ document in the future should the need arise. But for now, our focus will
  be on making high-quality, high-value improvements to the code (not policy documents).

### Contributing as a Data Provider

- OpenARIA is **extremely** interested in collecting shareable aircraft position datasets. Publicly available datasets
  can become the benchmarks dataset by which OpenARIA algorithms are measured and optimized. Read more [here](docs/shared-datasets.md) about
  the fundamental project need.

---

# Near-Term Project RoadMap

![Road Map Figure](docs/assets/OpenARIA-Roadmap.png)

### Version History & Release Notes

See [here](docs/version-release-notes.md)

### MITRE Public Release

- Content approved for public release via The MITRE Corporation's ""Public Release System"" (PRS)
- Reference:  `Public Release Case Number: 23-3623`

### Legal Statement

- **Copyright:** The contents of this project is copyright `The MITRE Corporation`. See details [here](COPYRIGHT.txt) .
- **Open Source License:** This project is released under the Apache License Version 2.0. See details [here](LICENSE).
",1,11,2,apache-2.0,36.0,"['welcome', 'openaria', 'openaria', 'goal', 'how', 'openaria', 'achieve', 'goal', 'get', 'start', 'building', 'source', 'download', 'artifact', 'documentation', 'use', 'contribute', 'contribute', 'user', 'contribute', 'developer', 'contribute', 'data', 'provider', 'project', 'roadmap', 'version', 'history', 'release', 'note', 'mitre', 'public', 'release', 'legal', 'statement']",15,"['contribute', 'openaria', 'goal', 'release', 'welcome']"
microcks/microcks-testcontainers-java-spring-demo,main,"# Microcks Testcontainers Spring Boot Demo

![Microcks Testcontainers Spring demo](./assets/microcks-testcontainers-java-spring-demo.png)

This application is a demonstration on how to integrate Microcks via [Testcontainers]([https://www.testcontainers.com]) within your development inner-loop.

You will work with a Spring Boot application and explore how to:
* Use Microcks for **provisioning third-party API mocks**,
* Use Microcks for **simulating external Kafka events publishers**,
* Write tests using Microcks **contract-testing** features for both **REST/OpenAPI based APIs and Events/AsyncAPI** based messaging

## Table of contents

* [Step 1: Getting Started](step-1-getting-started.md)
* [Step 2: Exploring the app](step-2-exploring-the-app.md)
* [Step 3: Local Development Experience with Microcks](step-3-local-development-experience.md)
* [Step 4: Write Tests for REST](step-4-write-rest-tests.md)
* [Step 5: Write Tests for Async](step-5-write-async-tests.md)

## License Summary

The code in this repository is made available under the MIT license. See the [LICENSE](LICENSE) file for details.
",0,0,6,mit,12.0,"['microcks', 'testcontainers', 'spring', 'boot', 'demo', 'table', 'content', 'license', 'summary']",3,"['microcks', 'testcontainers', 'spring', 'boot', 'demo']"
oviva-ag/ehealthid-relying-party,main,"[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=alert_status&token=ee904c8acea811b217358c63297ebe91fd6aee14)](https://sonarcloud.io/summary/new_code?id=oviva-ag_ehealthid-relying-party)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=oviva-ag_ehealthid-relying-party&metric=coverage&token=ee904c8acea811b217358c63297ebe91fd6aee14)](https://sonarcloud.io/summary/new_code?id=oviva-ag_ehealthid-relying-party)

# OpenID Connect Relying Party for GesundheitsID (eHealthID)

The goal is to provide a simple standalone server exposing Germany's 'GesundheitsID' (eHealthID) as
a good old OpenID Connect Relying Party (OIDC RP).

Identity Providers such as Keycloak can link accounts with OIDC out-of-the-box

## State of Compatibility

### Productive Environment (PU)

| Sectoral IdP           | End-to-End | Provider |
|------------------------|------------|----------|
| Techniker Krankenkasse | ‚úÖ          | IBM      |
| Gothaer                | üö´         | RISE     |

> [!NOTE]  
> Most providers can not be independently tested as there are no test accounts available.

## Authentication Flow IDP / Relying Party

```mermaid
sequenceDiagram
    participant app as Mobile App
    participant idp as Your IDP
    participant rp as Relying Party
    app ->> idp: login
    idp -->> app: redirect to Relying Party (OIDC)
    app ->> rp: login
    note over app, rp: login via eHealthID handled by Relying Party (RP)
    rp -->> app: redirect to IDP with code
    app ->> idp: success, callback to IDP
    idp ->> rp: redeem code
    rp -->> idp: id_token
    idp -->> app: success! redirect
```

## Contents

- [ehealthid-rp](./ehealthid-rp) - A standalone application to act as a OpenID Connect (OIDC)
  Relying Party. Bridges OIDC and Germany's GesundheitsID OpenID federation.
- [ehealthid-cli](./ehealthid-cli) - A script to generate keys and federation registration forms.
- [ehealthid](./ehealthid) - A plain Java library to build RelyingParties for GesundheitsID.
    - API clients
    - Models for the EntityStatments, IDP list endpoints etc.
    - Narrow support for the 'Fachdienst' use-case.

# Quickstart

```shell

#---- 1. generate keys
# the URI where your relying-party will run, 
# for the registration this _MUST_ be publicly reachable
export ISSUER_URI=https://mydiga.example.com

# generate keys for the application, keep those safe and secure
./cli.sh keygen --issuer-uri=$ISSUER_URI

#---- 2. deploy the relying party
docker run --rm \
    -v ""$(pwd)""/sig_mydiga_example_com_jwks.json:/secrets/sig_jwks.json:ro \
    -e ""EHEALTHID_RP_APP_NAME=Awesome DiGA"" \
    -e ""EHEALTHID_RP_BASE_URI=$ISSUER_URI"" \
    -e 'EHEALTHID_RP_FEDERATION_ES_JWKS_PATH=/secrets/sig_jwks.json' \
    -e 'EHEALTHID_RP_FEDERATION_MASTER=https://app-test.federationmaster.de' \
    -e 'EHEALTHID_RP_REDIRECT_URIS=https://sso-mydiga.example.com/auth/callback' \
    -e 'EHEALTHID_RP_ES_TTL=PT5M' \
    -e 'EHEALTHID_RP_IDP_DISCOVERY_URI=https://sso-mydiga.example.com/.well-known/openid-configuration' \
    -p 1234:1234 \
    ghcr.io/oviva-ag/ehealthid-relying-party:latest

#---- 3. register with the federation master

# a string received from Gematik as part of the registration process
# see: https://wiki.gematik.de/pages/viewpage.action?pageId=544316583
export MEMBER_ID=FDmyDiGa0112TU

# generate the registration XML from an existing entity statement
./cli.sh fedreg \
    --environment=TU \
    --contact-email=bobby.tables@example.com \
    --issuer-uri=$ISSUER_URI \
    --member-id=""$MEMBER_ID""
    
# this prints the XML for registration in the federation, send it
# as an email attachment to Gematik 
# see: https://wiki.gematik.de/pages/viewpage.action?pageId=544316583
```

**IMPORTANT:**

- The relying party __MUST__
  be [registered within the OpenID federation](https://wiki.gematik.de/pages/viewpage.action?pageId=544316583)
  to work fully.
- In order to register for the federation, your entity statment __MUST__ be publicly available.

Once the server is booted, it will:

1. Expose an OpenID Discovery document at `$EHEALTHID_RP_BASE_URI/.well-known/openid-configuration`
   ```shell
    curl $BASE_URI/.well-known/openid-configuration | jq .
    ```

2. Expose an OpenID Federation entity configuration
   at `$EHEALTHID_RP_BASE_URI/.well-known/openid-federation`
   ```shell
    curl $BASE_URI/.well-known/openid-federation | jwt decode -j - | jq .payload
    ```

3. Be ready to handle OpenID Connect flows and handle them via Germany's GesundheitsID federation.

## Configure Identity Provider

Generic settings:

- the relying party OpenID configuration is at `$ISSUER_URI/.well-known/openid-configuration`
    - token_url: `/auth/token`
    - auth_url: `/auth`
    - jwks_url: `/jwks.json`
- the only supported client authentication is `private_key_jwt`, the public keys will be discovered

## Example: Keycloak OpenID Connect Identity Provider Settings

As an example with `https://t.oviva.io` as the relying party issuer.
![](./keycloak_config.png)

# Configuration

Use environment variables to configure the relying party server.

(*) required configuration

| Name                                         | Description                                                                                                                                                                | Example                                                           |
|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|
| `EHEALTHID_RP_FEDERATION_ES_JWKS_PATH`*      | Path to a JWKS with at least one keypair for signature of the entity statement. All these keys __MUST__ be registered with the federation master.                          | `./sig_jwks.json`                                                 |
| `EHEALTHID_RP_OPENID_RP_SIG_JWKS_PATH`*      | Path to a JWKS with signing keys of our relying party, i.e. for mTLS client certificates                                                                                   | `./openid_rp_sig_jwks.json`                                       | 
| `EHEALTHID_RP_OPENID_RP_ENC_JWKS_PATH`*      | Path to a JWKS with the keys used for encryption between the federation and the relying party, i.e. to encrypt id_tokens                                                   | `./openid_rp_enc_jwks.json`                                       |
| `EHEALTHID_RP_REDIRECT_URIS`*                | Valid redirection URIs for OpenID connect.                                                                                                                                 | `https://sso-mydiga.example.com/auth/callback`                    |
| `EHEALTHID_RP_BASE_URI`*                     | The external base URI of the relying party. This is also the `issuer` towards the OpenID federation. Additional paths are unsupported for now.                             | `https://mydiga-rp.example.com`                                   |
| `EHEALTHID_RP_IDP_DISCOVERY_URI`*            | The URI of the discovery document of your identity provider. Used to fetch public keys for client authentication.                                                          | `https://sso-mydiga.example.com/.well-known/openid-configuration` |
| `EHEALTHID_RP_FEDERATION_MASTER`*            | The URI of the federation master.                                                                                                                                          | `https://app-test.federationmaster.de`                            |
| `EHEALTHID_RP_APP_NAME`*                     | The application name within the federation.                                                                                                                                | `Awesome DiGA`                                                    |
| `EHEALTHID_RP_HOST`                          | Host to bind to.                                                                                                                                                           | `0.0.0.0`                                                         |
| `EHEALTHID_RP_PORT`                          | Port to bind to.                                                                                                                                                           | `1234`                                                            |
| `EHEALTHID_RP_ES_TTL`                        | The time to live for the entity statement. In ISO8601 format.                                                                                                              | `PT12H`                                                           |
| `EHEALTHID_RP_SCOPES`                        | The comma separated list of scopes requested in the federation. This __MUST__ match what was registered with the federation master.                                        | `openid,urn:telematik:versicherter`                               |
| `EHEALTHID_RP_SESSION_STORE_TTL`             | The time to live for sessions. In ISO8601 format.                                                                                                                          | `PT20M`                                                           |
| `EHEALTHID_RP_SESSION_STORE_MAX_ENTRIES`     | The maximum number of sessions to store. Keeps memory bounded.                                                                                                             | `1000`                                                            |
| `EHEALTHID_RP_CODE_STORE_TTL`                | The time to live for codes, i.e. successful logins where the code is not redeemed yet. In ISO8601 format.                                                                  | `PT5M`                                                            |
| `EHEALTHID_RP_CODE_STORE_MAX_ENTRIES`        | The maximum number of codes to store. Keeps memory bounded.                                                                                                                | `1000`                                                            |
| `EHEALTHID_RP_LOG_LEVEL`                     | The log level.                                                                                                                                                             | `INFO`                                                            |
| `EHEALTHID_RP_OPENID_PROVIDER_SIG_JWKS_PATH` | Path to a JWKS with signing keys for our openIdProvider, for example the id_token issued by the relying party will be signed with it. Will be generated if not configured. | `./openid_provider_sig_jwks.json`                                 |

# Generate Keys & Register for Federation

In order to participate in the GesundheitsID one needs to register the entity statement of the IDP
or in this case the relying party here.

To simplify matter, here a script to generate fresh keys as well as the XML necessary to register
with Gematik.

See [Gematik documentation](https://wiki.gematik.de/pages/viewpage.action?pageId=544316583) for
details on the registration process.

```shell
./cli.sh --help
```

## Authentication flow between all involved parties

**NOTE:** There are some additional interactions within the federation, for a more complete flow see
[AppFlow](https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster) in the
Gematik documentation.

```mermaid
sequenceDiagram
    participant app as Mobile App
    participant idp as Your IDP
    participant rp as Relying Party
    participant secIdp as Sectoral IDP
    participant fedmaster as Federation Master
    app ->> idp: login
    idp -->> app: redirect to Relying Party (OIDC)
    app ->> rp: login
    alt relying party & eHealthID federation
        rp ->> fedmaster: fetch list of sectoral IDPs
        fedmaster -->> rp: list of sectoral IDPs
        rp -->> app: show list of IDPs to select from
        app ->> rp: select an IDP
        rp ->> secIdp: get redirect url (PAR)
        secIdp -->> rp: redirect_uri
        rp -->> app: redirect to sectoral authentication (e.g. ident app)
        alt proprietary flow
            app ->> secIdp: authenticate
            secIdp ->> app: success, redirect to relying party
        end
        app ->> rp: success, callback to relying party
        rp ->> secIdp: fetch id_token
        secIdp -->> rp: id_token
    end
    rp -->> app: redirect to IDP with code
    app ->> idp: success, callback to IDP
    idp ->> rp: redeem code
    alt client authentication
        note right of rp: client authenticated via 'private_key_jwt'
        rp ->> idp: fetch OpenID discovery document
        idp -->> rp: discovery document
        rp ->> idp: fetch JWKS
        idp -->> rp: JWKS
        note right of rp: verifies client JWT with discovered JWKS
    end
    rp -->> idp: id_token
    idp -->> app: success! redirect
```

# Testing

**See [TESTING](./TESTING.md).**

# Limitations

- for now sessions are stored in-memory, this implies:
    - rebooting the server will force users currently logging-in to restart
    - if multiple instances run, sessions must be sticky (e.g. use `session_id` cookie)
    - though it would be relatively straight forward to use a database instead
- this is tested in the 'Testumgebung' (TU) against the Gematik IDP due to a lack of other options

# Open Points

- end-to-end tests with Verimi, Gematik, RISE and IBM IDPs, most lack options to test currently

# Wishlist

- Accept base URI's with paths.
- MySQL or Postgres backed session and code repos
- PKCE flow on OIDC side
- Integration with other IDPs such as [FusionAuth](https://fusionauth.io/)

# Helpful Links

- [OpenID Federation Spec](https://openid.net/specs/openid-federation-1_0.html)
- [Gematik Fachdienst Specifications](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FD/latest/)
- [Gematik Fedmaster Specification](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_FedMaster/latest/)
- [Gematik Sectoral IDP Specifications](https://gemspec.gematik.de/docs/gemSpec/gemSpec_IDP_Sek/latest/)
- [AppFlow - Authentication flow to implement](https://wiki.gematik.de/display/IDPKB/App-App+Flow#AppAppFlow-0-FederationMaster)
- [Sektoraler IDP - Examples & Reference Implementation](https://wiki.gematik.de/display/IDPKB/Sektoraler+IDP+-+Referenzimplementierung+und+Beispiele)
",22,3,46,apache-2.0,69.0,"['openid', 'connect', 'relying', 'party', 'gesundheitsid', 'ehealthid', 'state', 'compatibility', 'productive', 'environment', 'pu', 'authentication', 'flow', 'idp', 'relying', 'party', 'content', 'quickstart', 'uri', 'run', 'registration', 'publicly', 'reachable', 'generate', 'key', 'application', 'keep', 'safe', 'secure', 'string', 'receive', 'gematik', 'part', 'registration', 'process', 'see', 'http', 'generate', 'registration', 'xml', 'exist', 'entity', 'statement', 'print', 'xml', 'registration', 'federation', 'send', 'email', 'attachment', 'gematik', 'see', 'http', 'configure', 'identity', 'provider', 'example', 'keycloak', 'openid', 'connect', 'identity', 'provider', 'setting', 'configuration', 'generate', 'key', 'register', 'federation', 'authentication', 'flow', 'involve', 'party', 'test', 'limitation', 'open', 'point', 'wishlist', 'helpful', 'link']",25,"['registration', 'party', 'generate', 'openid', 'connect']"
kousen/springaiexamples,main,"## Spring AI Examples

A set of examples for use with the Spring AI project, based on their original Azure workshop (but without Azure).

### Links

* https://docs.spring.io/spring-ai/reference/index.html (Spring AI reference page)
* https://github.com/spring-projects/spring-ai (Spring AI GitHub repository)
* https://github.com/Azure-Samples/spring-ai-azure-workshop (Spring AI Azure workshop)
* https://platform.openai.com/docs/overview (OpenAI documentation)
* https://platform.openai.com/signup (OpenAI signup for key)
* https://github.com/kousen/OpenAIClient (My GitHub repo)
* https://github.com/kousen/springaiexamples (solutions to our exercises)
* https://kenkousen.substack.com (_Tales from the jar side_ newsletter)
* https://youtube.com/@talesfromthejarside (_Tales from the jar side_ YouTube channel)
",0,0,1,mit,0.0,"['spring', 'ai', 'example', 'link']",2,"['spring', 'ai', 'example', 'link']"
VovaStelmashchuk/nest2D,main,"# NestApp

The online platform for Nest algorithm.

![screen of working](./samples/web_screen.png)

## How to use?

#### [Visit Nest2D](https://nest2d.online/)

# What is Nest Problem?

Given a square piece of material and some letters to be laser-cut:

We want to pack all the letters into the square, using as little material as possible. If a single square is not enough,
we also want to minimize the number of squares used.

In the CNC world this is called ""nesting"", and software that does this is typically targeted at industrial customers and
very expensive.

for more detail , please go to [SVGNest](https://github.com/Jack000/SVGnest)

## The repository based on few github project, I keep the original history of commits.

Also, i have some plane to modify the project. The project will be support DXF file. The SVG format available only for
the preview. The project will be migrate to Kotlin fully or majority.

Fill free to create issues or pull requests. The main goal of the project is mainly free and open source solution for
nesting problem. I try to find the way to compensate the price of cloud server. **You Star of the project can help to
apply to some open source program.**

### Big Thanks to [JeroenGar](https://github.com/JeroenGar)

He is the author of [jagua-rs](https://github.com/JeroenGar/jagua-rs). I use his project as the core service for the
service. Without his project, I can't make this project.

I use slightly modified version of his project. Can be found [here](https://github.com/VovaStelmashchuk/jagua-rs)

### Credits:

- [SVGNest](https://github.com/Jack000/SVGnest)
- [DXFReader](https://github.com/wholder/DXFReader)
- [NEST4J fork](https://github.com/micycle1/Nest4J/tree/master)

### Referenced Paper

- [L√≥pez-Camacho *et al.* 2013](http://www.cs.stir.ac.uk/~goc/papers/EffectiveHueristic2DAOR2013.pdf)
- [Kendall 2000](http://www.graham-kendall.com/papers/k2001.pdf)
- [E.K. Burke *et al.* 2006](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.440.379&rep=rep1&type=pdf)

### Hollow Polygon

For those hollow polygons, Nest4J provides a simple way to express by 2d coordinate system. If one polygon is inside in
another by their coordinates, the Nest4J will detect it automatically.

### DXF tags support

| Tag          | Support status |
|--------------|----------------|
| `Line`       | Supported      |
| `Circle`     | In plan        |
| `LwPolyline` | In plan        |
| `Polyline`   | In plan        |
| `Arc`        | In plan        |
| `Spline`     | In plan        |
| `Other`      | Not supported  |

### Backend doc

Backend read me is [here](./backend/ReadMe.md)",2,1,2,mit,3.0,"['nestapp', 'how', 'use', 'visit', 'http', 'what', 'nest', 'problem', 'the', 'repository', 'base', 'github', 'project', 'i', 'keep', 'original', 'history', 'commits', 'big', 'thanks', 'jeroengar', 'http', 'credit', 'reference', 'paper', 'hollow', 'polygon', 'dxf', 'tag', 'support', 'backend', 'doc']",11,"['http', 'nestapp', 'how', 'use', 'visit']"
manusa/helm-java,main,"# Helm Client for Java

Run Helm commands directly from Java with this client library without the need for a Helm CLI.

It allows you to execute Helm commands directly from Java without requiring a separate Helm installation.
Despite this, it still leverages the native Helm libraries, which are written in Go, to function.
As a result, you can expect the same behavior as you would get from using Helm directly.

## Getting started

Add the dependency to your project:

```xml
<dependency>
  <groupId>com.marcnuri.helm-java</groupId>
  <artifactId>helm-java</artifactId>
  <version>0.0.12</version>
</dependency>
```

Start using it:

```java
public static void main(String... args) {
  new Helm(Paths.get(""path"", ""to"", ""chart"")).install().call();
}
```

Check the features section for more examples and documentation.

## Features

### Create

Equivalent of [`helm create`](https://helm.sh/docs/helm/helm_create/).

Creates a chart directory along with the common files and directories used in a chart.

``` java
Helm.create()
  // Name of the chart to create
  .withName(""test"")
  // Path to the directory where the new chart directory will be created
  .withDir(Paths.get(""/tmp""))
  .call();
```

### Dependency

Equivalent of [`helm dependency`](https://helm.sh/docs/helm/helm_dependency/).

Manage a chart's dependencies.

#### Dependency build

Equivalent of [`helm dependency build`](https://helm.sh/docs/helm/helm_dependency_build/).

Rebuild the chart's on-disk dependencies (`charts/`) based on the Chart.lock file.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().build()
  // Optionally specify a keyring containing public keys (used for verification)
  .keyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally skip refreshing the local repository cache
  .skipRefresh()
  // Optionally verify the packages against signatures
  .verify()
  // Optionally enable verbose output
  .debug()
  .call();
```

#### Dependency list

Equivalent of [`helm dependency list`](https://helm.sh/docs/helm/helm_dependency_list/).

List the dependencies for the given chart.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().list()
  .getDependencies();
```

#### Dependency update

Equivalent of [`helm dependency update`](https://helm.sh/docs/helm/helm_dependency_update/).

Update chart's on-disk dependencies (`charts/`) to mirror the contents of Chart.yaml.

``` java
new Helm(Paths.get(""path"", ""to"", ""chart"")).dependency().update()
  // Optionally specify a keyring containing public keys (used for verification)
  .keyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally skip refreshing the local repository cache
  .skipRefresh()
  // Optionally verify the packages against signatures
  .verify()
  // Optionally enable verbose output
  .debug()
  .call();
```

### Install

Equivalent of [`helm install`](https://helm.sh/docs/helm/helm_install/).

Installs a chart archive.

``` java
// Instantiate the command with chart reference
InstallCommand installCommand = Helm.install(""chart/reference"");
// Instatiate the command with chart archive
InstallCommand installCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).install();
Release result = installCommand
  // Name of the release to install
  .withName(""release-name"")
  // Optionally generate a release name (and omit the name parameter)
  .generateName()
  // Optionally specify a template for the name generation
  .withNameTemplate(""a-chart-{{randAlpha 6 | lower}}"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace to install the release into
  .withNamespace(""namespace"")
  // Optionally create the namespace if not present
  .createNamespace()
  // Optionally, if set, the installation process deletes the installation on failure
  .atomic()
  // Optionally specify a custom description for the release
  .withDescription(""the-description"")
  // Optionally enable the use of development versions too
  .devel()
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally disable the validation of rendered templates against the Kubernetes OpenAPI Schema
  .disableOpenApiValidation()
  // Optionally enable dry run mode to simulate an install
  .dryRun()
  // Optionally specify the dry run strategy (client, server, or none). If unset, defaults to client
  .withDryRunOption(DryRun.CLIENT)
  // Optionally wait until all Pods are in a ready state, PVCs are bound, Deployments have
  // minimum (Desired minus maxUnavailable) Pods in ready state and Services have an IP
  // address (and Ingress if a LoadBalancer) before marking the release as successful. 
  .waitReady()
  // Optionally set typed values for the chart (can be repeated)
  .set(""key"", ""value"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable verbose output
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Lint

Equivalent of [`helm lint`](https://helm.sh/docs/helm/helm_lint/).

Examine a chart for possible issues.

``` java
LintResult result = new Helm(Paths.get(""path"", ""to"", ""chart"")).lint()
  // Optionally enable strict mode (fail on lint warnings)
  .strict()
  // Optionally enable quiet mode (only show warnings and errors) 
  .quiet()
  .call();
result.isFailed(); // true if linting failed
result.getMessages(); // list of linting messages
```

### List

Equivalent of [`helm list`](https://helm.sh/docs/helm/helm_list/).

Lists all the releases for a specified namespace (uses current namespace context if namespace not specified).

``` java
List<Release> releases = Helm.list()
  // Optionally specify the Kubernetes namespace to list the releases from
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally show all releases without any filter applied
  .all()
  // Optionally show releases across all namespaces
  .allNamespaces()
  // Optionally show deployed releases
  // If no other option is specified, this will be automatically enabled
  .deployed()
  // Optionally show failed releases
  .failed()
  // Optionally show pending releases
  .pending()
  // Optionally show superseded releases
  .superseded()
  // Optionally show uninstalled releases (if 'helm uninstall --keep-history' was used)
  .uninstalled()
  // Optionally show releases that are currently being uninstalled
  .uninstalling()
  .call();
```

### Package

Equivalent of [`helm package`](https://helm.sh/docs/helm/helm_package/).

Package a chart directory into a chart archive.

``` java
Path result = new Helm(Paths.get(""path"", ""to"", ""chart"")).package()
  // Optionally specify a target directory
  .destination(Paths.get(""path"", ""to"", ""destination""))
  // Optionally enable signing
  .sign()
  // Optionally specify a key UID (required if signing)
  .withKey(""KEY_UID"")
  // Optionally specify a keyring (required if signing)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally specify a file containing the passphrase for the signing key
  .withPassphraseFile(Paths.get(""path"", ""to"", ""passphrase""))
  .call();
```

### Push

Equivalent of [`helm push`](https://helm.sh/docs/helm/helm_push/).

Upload a chart to a registry.

``` java
Helm.push()
  // Location of the packaged chart (.tgz) to push
  .withChart(Paths.get(""path"", ""to"", ""chart"", ""package""))
  // URI of the remote registry to push the chart to
  .withRemote(""oci://remote-server.example.com:12345"");
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Registry

Equivalent of [`helm registry`](https://helm.sh/docs/helm/helm_registry/).

Log in to or log out from a registry.

#### Registry login

Equivalent of [`helm registry login`](https://helm.sh/docs/helm/helm_registry_login/).

Log in to a registry.

``` java
Helm.registry().login()
  // The host to log in to.
  .withHost(""host"")
  // Registry username
  .withUsername(""username"");
  // Registry password or identity token.
  .withPassword(""password"");
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Registry logout

Equivalent of [`helm registry logout`](https://helm.sh/docs/helm/helm_registry_logout/).

Log out from a registry.

``` java
Helm.registry().logout()
  // The host to log out from.
  .withHost(""host"")
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Repo

Equivalent of [`helm repo`](https://helm.sh/docs/helm/helm_repo/).

Add, list, remove, update, and index chart repositories.

#### Repo add

Equivalent of [`helm repo add`](https://helm.sh/docs/helm/helm_repo_add/).

Add a chart repository.

``` java
Helm.repo().add()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Name of the repository to add
  .withName(""repo-1"")
  // URL of the repository to add
  .withUrl(URI.create(""https://charts.helm.sh/stable""))
  // Optionally specify a username for HTTP basic authentication
  .withUsername(""user"")
  // Optionally specify a password for HTTP basic authentication
  .withPassword(""pass"")
  // Optionally specify an SSL certificate file to identify the HTTPS client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the HTTPS client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  .call()
```

#### Repo list

Equivalent of [`helm repo list`](https://helm.sh/docs/helm/helm_repo_list/).

List chart repositories.

``` java
List<Repository> respositories = Helm.repo().list()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

#### Repo remove

Equivalent of [`helm repo remove`](https://helm.sh/docs/helm/helm_repo_remove/).

Remove one or more chart repositories.

``` java
Helm.repo().remove()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Add a repository name to the list of repos to remove
  .withRepo(""repo-1"")
  // Add another repository name to the list of repos to remove
  .withRepo(""repo-2"")
  .call();
```

#### Repo update

Equivalent of [`helm repo update`](https://helm.sh/docs/helm/helm_repo_update/).

Update information of available charts locally from chart repositories.

``` java
Helm.repo().update()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Add a repository name to the list of repos to remove
  .withRepo(""repo-1"")
  // Add another repository name to the list of repos to remove
  .withRepo(""repo-2"")
  .call();
```

### Search

Equivalent of [`helm search`](https://helm.sh/docs/helm/helm_search/).

This command provides the ability to search for Helm charts in various places including the Artifact Hub and the repositories you have added.

#### Repo

Equivalent of [`helm search repo`](https://helm.sh/docs/helm/helm_search_repo/).

Search repositories for a keyword in charts.

``` java
List<SearchResult> results = Helm.search().repo()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  // Optionally set the keyword to match against the repo name, chart name, chart keywords, and description.
  .withKeyword(""keyword"")
  // Optionally use regular expressions for searching.
  .regexp()
  // Optionally search for development versions too (alpha, beta, and release candidate releases).
  .devel()
  // Optionally search using semantic versioning constraints
  .withVersion("">=1.0.0"")
  .call();
```

### Show

Equivalent of [`helm show`](https://helm.sh/docs/helm/helm_show/).

Show information about a chart.

#### Show all

Equivalent of [`helm show all`](https://helm.sh/docs/helm/helm_show_all/).

Show **all** information about a chart.

``` java
// Instantiate the command with chart reference
ShowCommand showCommand = Helm.show(""chart/reference"");
// Instatiate the command with chart archive
ShowCommand showCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).show();
String result = showCommand.all()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show chart

Equivalent of [`helm show chart`](https://helm.sh/docs/helm/helm_show_chart/).

Show the chart's definition.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .chart()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show CRDs

Equivalent of [`helm show crds`](https://helm.sh/docs/helm/helm_show_crds/).

Show the chart's CRDs.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .crds()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show README

Equivalent of [`helm show readme`](https://helm.sh/docs/helm/helm_show_readme/).

Show the chart's README.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .readme()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

#### Show values

Equivalent of [`helm show values`](https://helm.sh/docs/helm/helm_show_values/).

Show the chart's values.

``` java
String result = new Helm(Paths.get(""path"", ""to"", ""chart"")).show()
  .values()
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally specify an SSL CA bundle file to verify the HTTPS-enabled registry server certificates
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally use insecure HTTP connections for the chart upload
  .plainHttp()
  // Optionally enable debug mode to print out verbose information
  .debug()
  .call();
```

### Template

Equivalent of [`helm template`](https://helm.sh/docs/helm/helm_template/).

This command renders chart templates locally and displays the output.

``` java
// Instantiate the command with chart reference
TemplateCommand templateCommand = Helm.template(""chart/reference"");
// Instatiate the command with chart archive
TemplateCommand templateCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).template();
String result = templateCommand
  // Optionally specify a name for the release
  .withName(""release-name"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace for the release
  .withNamespace(""namespace"")
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally set values for the chart
  .set(""key"", ""value"")
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable debug mode to print out verbose information
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Test

Equivalent of [`helm test`](https://helm.sh/docs/helm/helm_test/).

This command runs the tests for a release.

``` java
Release result = Helm.test(""chart/reference"")
  // Optionally specify the time (in seconds) to wait for any individual Kubernetes operation (like Jobs for hooks) (default 300)
  .withTimeout(int timeout)
  // Optionally specify the Kubernetes namespace
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally enable verbose output
  .debug()
  .call();
```

### Uninstall

Equivalent of [`helm uninstall`](https://helm.sh/docs/helm/helm_uninstall/).

This command takes a release name and uninstalls the release.

``` java
String result = Helm.uninstall(""chart/reference"")
  // Optionally enable dry run mode to simulate an uninstall
  .dryRun()
  // Optionally prevent hooks from running during uninstallation
  .noHooks()
  // Optionally treat ""release not found"" as a successful uninstall
  .ignoreNotFound()
  // Optionally remove all associated resources and mark the release as deleted, but retain the release history
  .keepHistory()
  // Optionally select the deletion cascading strategy for the dependents. If unset, defaults to background
  .withCascade(Cascade.BACKGROUND)
  // Optionally specify the Kubernetes namespace to uninstall the release from
  .withNamespace(""namespace"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally enable verbose output
  .debug()
  .call();
```

### Upgrade

Equivalent of [`helm upgrade`](https://helm.sh/docs/helm/helm_upgrade/).

Upgrades a release to a new version of a chart.

``` java
// Instantiate the command with chart reference
UpgradeCommand upgradeCommand = Helm.upgrade(""chart/reference"");
// Instatiate the command with chart archive
UpgradeCommand upgradeCommand = new Helm(Paths.get(""path"", ""to"", ""chart"")).upgrade();
Release result = upgradeCommand
  // Name of the release to upgrade
  .withName(""release-name"")
  // Optionally specify a version constraint for the chart version to use.
  .withVersion(""^1.0.0"")
  // Optionally specify the Kubernetes namespace to upgrade the release
  .withNamespace(""namespace"")
  // Optionally run an installation if a release by this name doesn't already exist
  .install()
  // Optionally force resource updates through a replacement strategy
  .force()
  // Optionally reset the values to the ones built into the chart when upgrading
  .resetValues()
  // Optionally reuse the last release's values and merge in any overrides from the current values when upgrading
  // Ignored if used in combination with resetValues()
  .reuseValues()
  // Optionally reset the values to the ones built into the chart,
  // apply the last release's values and merge in any overrides from the current values when upgrading
  // Ignored if used in combination with resetValues() or reuseValues()
  .resetThenReuseValues()
  // Optionally, if set, upgrade process rolls back changes made in case of failed upgrade
  .atomic()
  // Optionally allow deletion of new resources created in this upgrade when upgrade fails
  .cleanupOnFail()
  // Optionally create the release namespace if not present (if install() is set)
  .createNamespace()
  // Optionally specify a custom description
  .withDescription(""the-description"")
  // Optionally enable the use of development versions too
  .devel()
  // Optionally update dependencies if they are missing before installing the chart
  .dependencyUpdate()
  // Optionally disable the validation of rendered templates against the Kubernetes OpenAPI Schema
  .disableOpenApiValidation()
  // Optionally enable dry run mode to simulate an install
  .dryRun()
  // Optionally specify the dry run strategy (client, server, or none). If unset, defaults to client
  .withDryRunOption(DryRun.CLIENT)
  // Optionally wait until all Pods are in a ready state, PVCs are bound, Deployments have
  // minimum (Desired minus maxUnavailable) Pods in ready state and Services have an IP
  // address (and Ingress if a LoadBalancer) before marking the release as successful. 
  .waitReady()
  // Optionally set typed values for the chart (can be repeated)
  .set(""key"", ""value"")
  // Optionally specify the path to the kubeconfig file to use for CLI requests
  .withKubeConfig(Paths.get(""path"", ""to"", ""kubeconfig""))
  // Optionally specify an SSL certificate file to identify the registry client
  .withCertFile(Paths.get(""path"", ""to"", ""cert""))
  // Optionally specify an SSL key file to identify the registry client
  .withKey(Paths.get(""path"", ""to"", ""key""))
  // Optionally verify certificates of HTTPS-enabled servers using this CA bundle
  .withCaFile(Paths.get(""path"", ""to"", ""ca""))
  // Optionally skip TLS certificate checks of HTTPS-enabled servers
  .insecureSkipTlsVerify()
  // Optionally allow insecure plain HTTP connections for the chart download
  .plainHttp()
  // Optionally specify a keyring (used for verification)
  .withKeyring(Paths.get(""path"", ""to"", ""keyring""))
  // Optionally enable verbose output
  .debug()
  // Optionally set the path to the file containing repository names and URLs
  // Defaults to ""~/.config/helm/repositories.yaml""
  .withRepositoryConfig(Paths.get(""path"", ""to"", ""config""))
  .call();
```

### Version

Similar to [`helm version`](https://helm.sh/docs/helm/helm_version/).

Returns the version of the underlying Helm library.

``` java
String version = Helm.version();
```

## Development

### Project Structure

- Go:
  - `native`: contains the Go project that creates the native c bindings
- Java:
  - `helm-java`: contains the actual Helm Java client library
  - `lib`: contains the Java modules related to the native c binding libraries
    - `api`: contains the API for the native interfaces
    - `darwin-amd64`: contains the Java native access library for darwin/amd64
    - `darwin-arm64`: contains the Java native access library for darwin/arm64
    - `linux-amd64`: contains the Java native access library for linux/amd64
    - `linux-arm64`: contains the Java native access library for linux/arm64
    - `windows-amd64`: contains the Java native access library for windows/amd64

### Release Process

#### Release to Maven Central

To release a new version automatically:

```shell
make release V=X.Y.Z VS=X.Y
```
- `V`: New version to release.
- `VS`: New SNAPSHOT version for Maven.

To release a new version manually:

1. Update the version in the `pom.xml` file.
   ```shell
   mvn versions:set -DnewVersion=X.Y.Z -DgenerateBackupPoms=false
   ```
2. Commit and tag the release with the  `pom.xml` version.
   ```shell
   git add .
   git commit -m ""[RELEASE] vX.Y.Z released""
   git tag vX.Y.Z
   git push origin vX.Y.Z
   ```
3. Update the version in the `pom.xml` file to the next snapshot version.
   ```shell
   mvn versions:set -DnewVersion=X.Y-SNAPSHOT -DgenerateBackupPoms=false
   ```
4. Commit the changes with the following message:
   ```shell
   git add .
   git commit -m ""[RELEASE] v0.0.11 released, prepare for next development iteration""
   git push origin master
   ```

#### Create GitHub Release

Once the release is published to Maven Central, create a new [GitHub release](https://github.com/manusa/helm-java/releases/new) for the released tag.

### License Headers

Whenever a new file is created, the license header must be added. To add the license header to all files:

```shell
make license
```
",12,10,1,apache-2.0,67.0,"['helm', 'client', 'java', 'get', 'start', 'feature', 'create', 'dependency', 'dependency', 'build', 'dependency', 'list', 'dependency', 'update', 'install', 'lint', 'list', 'package', 'push', 'registry', 'registry', 'login', 'registry', 'logout', 'repo', 'repo', 'add', 'repo', 'list', 'repo', 'remove', 'repo', 'update', 'search', 'repo', 'show', 'show', 'show', 'chart', 'show', 'crds', 'show', 'readme', 'show', 'value', 'template', 'test', 'uninstall', 'upgrade', 'version', 'development', 'project', 'structure', 'release', 'process', 'release', 'maven', 'central', 'create', 'github', 'release', 'license', 'header']",40,"['repo', 'show', 'dependency', 'list', 'registry']"
