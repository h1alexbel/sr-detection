repo,branch,readme,releases,open_issues,branches,license,workflows
GreenJAB/fixed-minecraft,main,"# fixed-minecraft-1.20.4
 
",0,1,3,MIT,
prakarshs/Jhethia,master,"# Jhethia : Where Fafda Meets Code
<p align=""center"">
  <img src=""https://images.pexels.com/photos/20693518/pexels-photo-20693518.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" alt=""jhethia"" width=""630"" height=""400"">
</p>

## What Is Jhethia?
Jhethia is a fun programming language modeled in Java, spiced up with the hilarious antics of Jhethalal. Its syntax somewhat mixes Rust and Python, promising a coding experience full of laughs and fun! Jhethia allows users to perform a wide range of basic operations typical of any programming language, all while injecting a dose of fun into the process. 

Know More [✨Here✨](https://prakarshs.github.io/JhethiaWeb/)

### Run this program
- Firstly, Clone the repository in your system.
- Secondly, Compile and package the program into a uber jar, go to the ./target folder and then run the following command
```
java -cp Jhethia.jar org.prakarshs.JhethiaRun src/test/resources/hello_world.jhethia
```
>You can add your own .(dot)jhethia files and run the code from the test/resources/{your_file} location

🙏🏻 Jai Jinendra 🙏🏻



",0,0,2,,
kkbo8005/dicttools,main,"
**本工具不存在任何的社工库信息的采集及贩卖，任何利用本软件宣传或则利用的违法事情与本作者无关，请立即删除!**

**本工具仅供安全测试人员运用于授权测试, 禁止用于未授权测试, 违者责任自负。**


## 简介



该工具是使用javaFX开发的基于信息收集进行组合生成密码字典的工具，可以快速组成密码字典。



## 使用说明


直接下载releases版本即可

**使用JDK8启动，命令如下：**

```
java -jar dicttools-1.0-SNAPSHOT.jar 
```
![img.png](./README.assets/img.png)

## 免责声明



该开源工具是由作者按照开源许可证发布的，仅供个人学习和研究使用。作者不对您使用该工具所产生的任何后果负任何法律责任。

## 特别鸣谢

本工具开发过程中参考过网上的大佬的文章，在此表示感谢！

特别感谢**长风安全（sik)**、**湘安无事-湘南第一深情** ，对于工具的完善提供了很多建议和帮助。大家多多关注他们的公众号与知识星球。

更多完善建议和技术交流可以加v:**kkbo680** ，谢谢。

![image-20240406180609618](README.assets/image-20240406180609618.png)

![image-20240421230001329](README.assets/image-20240421230001329.png)",1,1,1,,
openfga/spring-boot-starter,main,"# OpenFGA Spring Boot Starter

[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](./LICENSE)
[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fopenfga%2Ffga-spring-boot.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fopenfga%2Ffga-spring-boot?ref=badge_shield)
[![Join our community](https://img.shields.io/badge/slack-cncf_%23openfga-40abb8.svg?logo=slack)](https://openfga.dev/community)
[![Twitter](https://img.shields.io/twitter/follow/openfga?color=%23179CF0&logo=twitter&style=flat-square ""@openfga on Twitter"")](https://twitter.com/openfga)

A Spring Boot Starter for OpenFGA.

## About

[OpenFGA](https://openfga.dev) is an open source Fine-Grained Authorization solution inspired by [Google's Zanzibar paper](https://research.google/pubs/pub48190/). It was created by the FGA team at [Auth0](https://auth0.com) based on [Auth0 Fine-Grained Authorization (FGA)](https://fga.dev), available under [a permissive license (Apache-2)](https://github.com/openfga/rfcs/blob/main/LICENSE) and welcomes community contributions.

OpenFGA is designed to make it easy for application builders to model their permission layer, and to add and integrate fine-grained authorization into their applications. OpenFGA’s design is optimized for reliability and low latency at a high scale.

## Resources

- [OpenFGA Documentation](https://openfga.dev/docs)
- [OpenFGA API Documentation](https://openfga.dev/api/service)
- [Twitter](https://twitter.com/openfga)
- [OpenFGA Community](https://openfga.dev/community)
- [Zanzibar Academy](https://zanzibar.academy)
- [Google's Zanzibar Paper (2019)](https://research.google/pubs/pub48190/)

## Installation

The OpenFGA Spring Boot Starter is available on [Maven Central](https://central.sonatype.com/).

It can be used with the following:

* Gradle (Groovy)

```groovy
implementation 'dev.openfga:openfga-spring-boot-starter:0.0.1'
```

* Gradle (Kotlin)

```kotlin
implementation(""dev.openfga:openfga-spring-boot-starter:0.0.1"")
```

* Apache Maven

```xml
<dependency>
    <groupId>dev.openfga</groupId>
    <artifactId>openfga-spring-boot-starter</artifactId>
    <version>0.0.1</version>
</dependency>
```

## Getting Started

### Requirements

Java 17 and Spring Boot 3

### Configuring the starter

The OpenFGA Spring Boot Starter can be configured via standard [Spring configuration](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config).
The configuration properties are used to create an [OpenFgaClient](https://github.com/openfga/java-sdk/blob/main/src/main/java/dev/openfga/sdk/api/client/OpenFgaClient.java) instance.

#### No Credentials

```yaml
# src/main/resources/application.yaml

openfga:
  api-url: YOUR_FGA_API_URL
  store-id: YOUR_FGA_STORE_ID
  authorization-model-id: YOUR_FGA_AUTHORIZATION_MODEL_ID
```

#### API Token

```yaml
# src/main/resources/application.yaml

openfga:
  api-url: YOUR_FGA_API_URL
  store-id: YOUR_FGA_STORE_ID
  authorization-model-id: YOUR_FGA_AUTHORIZATION_MODEL_ID
  credentials:
    method: API_TOKEN # constant
    config:
      api-token: YOUR_API_TOKEN
```

#### Client Credentials

```yaml
# src/main/resources/application.yaml

openfga:
  api-url: YOUR_FGA_API_URL
  store-id: YOUR_FGA_STORE_ID
  authorization-model-id: YOUR_FGA_AUTHORIZATION_MODEL_ID
  credentials:
    method: CLIENT_CONFIGURATION # constant
    config:
        client-id: YOUR_CLIENT_ID
        client-secret: YOUR_CLIENT_SECRET
        api-token-issuer: YOUR_API_TOKEN_ISSUER
        api-audience: YOUR_API_AUDIENCE
        scopes: YOUR_SPACE_SEPERATED_SCOPES
```

### Using the `fgaClient` bean

Once configured, an `fgaClient` bean is available to be injected into your Spring components:

```java
@Service
public class MyService {
    
    @Autowired
    private OpenFgaClient fgaClient;
}
```

This can be used to interact with the FGA API, for example to write authorization data:

```java
public Document createDoc(String id) {
    // ...
    ClientWriteRequest writeRequest =  new ClientWriteRequest()
            .writes(List.of(new ClientTupleKey()
                    .user(String.format(""user:%s"", SecurityContextHolder.getContext().getAuthentication()))
                    .relation(""owner"")
                    ._object(String.format(""document:%s"", id))));

    try {
        fgaClient.write(writeRequest).get();
    } catch (InterruptedException | ExecutionException | FgaInvalidParameterException e) {
        throw new RuntimeException(""Error writing to FGA"", e);
    }
    // ...
}
```

### Using the `fga` bean

The starter also creates an `fga` bean, which can be used in conjunction with Spring Security's method
security to protect access to resources using FGA:

```java
// Method body will only execute if the FGA check returns true. 403 otherwise.
@PreAuthorize(""@fga.check('document', #docId, 'reader', 'user', authentication?.name)"")
public Document getDocument(@PathVariable String docId) {
    return repository.findById(id);
}
```

You may also omit the user ID, in which case the name of the currently authenticated principal
will be used as the user ID:

```java
// Method body will only execute if the FGA check returns true. 403 otherwise.
@PreAuthorize(""@fga.check('document', #docId, 'reader', 'user')"")
public Document getDocument(@PathVariable String docId) {
    return repository.findById(id);
}
```

## Contributing

### Issues

If you have found a bug or if you have a feature request, please [create an issue](https://github.com/openfga/fga-spring-boot/issues). Please do not report security vulnerabilities on the public GitHub issue tracker.

### Pull Requests

Pull requests are welcome, however we do kindly ask that for non-trivial changes or feature additions, that you create an [issue]((https://github.com/openfga/fga-spring-boot/issues)) first.

## Author

[OpenFGA](https://github.com/openfga)

## License

This project is licensed under the Apache-2.0 license. See the [LICENSE](https://github.com/openfga/fga-spring-boot/blob/main/LICENSE) file for more info.
",1,4,7,Apache-2.0,"fossa.yaml,main.yaml,semgrep.yaml"
f-lab-edu/dongchimi,main,"## 소개
<p align=""center"">
  <img src=""https://github.com/f-lab-edu/dong-chi-mi/assets/51324045/f7cc15e4-8592-4eab-a3ec-15c346fe5ec9"" alt=""동치미logo"" />
</p>

<h1 align=""center"">동치미</h1>

<h3 align=""center"">🏸 동네에서 취미를 갖고 싶을 때는 동치미 🏀</h3>

### 동치미란?
동치미는 '동네 친구들과 함께하는 미팅'의 의미를 지니는 용어입니다. 이는 동네에서 취미가 비슷한 사람들끼리 모여 함께 취미 생활을 즐기는 서비스입니다. 사용자는 플랫폼을 통해 자신의 취미를 공유하고, 같은 관심사를 가진 이웃과 연결될 수 있습니다. 
</br>
</br>
동치미 로고는 서로 다른 사람들 하나의 취미를 함께 하기 위해 한 곳에 모여 이루어진다는 의미를 가지도록 디자인 되었습니다.

### 프로젝트 정보
- [테이블 설계](https://github.com/f-lab-edu/dongchimi/wiki/%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%84%A4%EA%B3%84)
- [USECASE](https://github.com/f-lab-edu/dongchimi/wiki/USECASE)
- [코드 컨벤션](https://github.com/f-lab-edu/dongchimi/wiki/%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC)
- [Git 컨벤션](https://github.com/f-lab-edu/dongchimi/wiki/Git-%EC%BB%A8%EB%B2%A4%EC%85%98)


## 프로젝트 멀티 모듈 구조
### api 모듈
- 이 모듈은 각 서비스의 API 인터페이스를 정의합니다.
- 비즈니스 로직만을 포함하여 도메인과의 의존성을 최소화합니다.

### reactive 모듈
- 실시간 기능을 처리하는 모듈로, 채팅 및 알림 기능을 구현합니다.
- 비동기 처리와 이벤트 기반 아키텍처 사용을 중점적으로 다룹니다.

### consumer 모듈
- Message를 구독하는 Consumer들을 구현하는 모듈입니다.
- Redis, Kafaka 등 외부에서 전달 받은 Message를 활용

### domain 모듈
- 동치미에 구성된 모든 도메인 정보를 제공하는 모듈입니다.
![image](https://github.com/f-lab-edu/dong-chi-mi/assets/51324045/d93ea816-9f26-4537-a792-275492ced1c8)



## 아키텍처 구성도
![20240511_구성도](https://github.com/f-lab-edu/dong-chi-mi/assets/51324045/7f700826-d2e6-4504-8c6a-e0ac2f6f7e5e)



## 기술 소개
### 백엔드
![백엔드2](https://github.com/f-lab-edu/dong-chi-mi/assets/51324045/ebe18f8f-9643-46e1-96b0-4b321df5538c)









## 개발자
| Backend |
| ------- |
| <img src=""https://github.com/stc9606.png"" width=""100"" height=""100""> |
| [노승철](https://github.com/stc9606) |
",0,8,25,,"gradle.yml,sonarcloud-analyze.yml"
guybedo/sugar,master,"Sugar
===================

Sugar for Java


What is this?
--------------

Sugar is a small utils library providing static functions to write less verbose Java code. 

Nothing groundbreaking here, just some sugar.

Features:
- Create/Manipulate collections: set, list, map, partition, product, intersect, counts, sums
- Collection helpers: first, last, sorted, max, min, mean, sum, prepend, append, concat, zip
- Random: random string, random char, choose elements in collection
- Parallel: pEach, pMap


# Examples

## Collections
```Java
Map<String, String> newMap = map(kv(""key1"", ""value1""), kv(""key1"", ""value1""), kv(""key1"", ""value1""));

List<Integer> values = list(1,2,3,4);
Integer min = min(values);
Integer last = last(values);
Integer one = first(filter(values,v -> v == 1));
values = map(values, v -> v + 1);

Map<Profile, Integer> counts = counts(objects, o -> o.getProfile());

```

## POJOs
```Java
orElse(""test"", s -> s + ""_ok"", null);
ifPresent(""test"", s -> System.out.println(s));
isoDateTime(LocalDateTime.now());
```


Getting Started
---------------

Maven
-----

```xml
<dependency>
    <groupId>com.akalea</groupId>
    <artifactId>sugar</artifactId>
    <version>0.0.11</version>
</dependency>
```

Import functions
----------------

```Java
import static com.akalea.sugar.Collections.*;
import static com.akalea.sugar.Pojos.*;
```
",0,0,2,,
RustamKuramshin/right-devops,main,# Правильный DevOps для Spring Boot и Java,0,0,1,,
peterchenhdu/td-genie,master,"<p align=""center"">
	<img alt=""logo"" src=""https://gitee.com/dbquery/td-genie/raw/master/tdengine/src/main/resources/images/logo.png"" width=""150"" height=""150"">
</p>

<h1 align=""center"" style=""margin: 30px 0 30px; font-weight: bold;"">Td-Genie v2.1.2</h1>
<p align=""center"">免费开源的TDengine时序数据库图形用户界面工具，为用户提供直观、易用的数据库管理和操作体验！</p>

----

简体中文|[English](README.en.md)

#### 介绍
Td-Genie是一款功能全面、操作简便的TDengine时序数据库图形界面工具，V2.1.2目前支持的TDengine Server版本列表如下：
1. TDengine2.x版本（2.6.0.34已测试）
2. TDengine3.x版本（3.2.3.0已测试）

主要功能：
1. 数据连接维护（新增、修改、查询、删除）
2. 数据库维护（新增、修改、查询、删除）
3. 超级表维护（新增、修改、查询、删除）
4. 超级表数据查询（支持按时间查询，自动分页展示）
5. 普通表数据查看（支持按库、超级表、表名查询，支持查看普通表数据）
6. 数据操作（新增、更新、复制字段值，复制为Insert语句）
7. 自定义SQL执行(可执行更新SQL或查询SQL，可展示查询结果、执行耗时、错误信息等) 
8. 资源监控查看(可查看数据库CPU、内存、磁盘使用趋势) 
9. 库表DDL导出（数据库创建SQL、表创建SQL）
10. 集群查看（查看数据节点、管理节点）
11. 用户查看
12. 连接监控（监控已建立的连接）
13. 查询监控（监控正在执行的查询SQL）
#### 软件架构
基于JavaFX实现UI功能。


#### 安装教程

1.  从发行版中下载最新版本，解压，双击执行td-genie.exe文件即可(https://gitee.com/dbquery/td-genie/releases)

#### 使用说明

1.  初始界面
![输入图片说明](tdengine/src/main/resources/images/readme/start.png)
2.  创建连接(输入连接名称、IP、端口、用户名、密码)
![输入图片说明](tdengine/src/main/resources/images/readme/createConnection.png)
3.  创建数据库(输入数据库名、副本个数、数据保留天数、VNODE内存块数目、文件压缩标志位)
![输入图片说明](tdengine/src/main/resources/images/readme/createDB.png)
4.  创建超级表(输入表名称，字段信息)
![输入图片说明](tdengine/src/main/resources/images/readme/createSTB.png)
5. 查看超级表数据（查看连接下的所有数据库、数据库下的所有超级表，支持按时间搜索超级表中数据，分页查询，可复制表格中的查询结果）
![输入图片说明](tdengine/src/main/resources/images/readme/queryStbRecord.png)
6. 查看普通表（支持按库、超级表、表名查询，支持查看普通表数据）
![输入图片说明](tdengine/src/main/resources/images/readme/tableQuery.png)
![输入图片说明](tdengine/src/main/resources/images/readme/tableDataQuery.png)
7. 新增数据（输入字段和Tag信息）
![输入图片说明](tdengine/src/main/resources/images/readme/insertData.png)
8. 编辑数据 (输入字段信息)
![输入图片说明](tdengine/src/main/resources/images/readme/updateDataSelectItem.png)
![输入图片说明](tdengine/src/main/resources/images/readme/updateData.png)
9. 自定义SQL执行(可执行任意SQL，对于查询SQL，可展示查询结果，支持保存SQL、美化SQL)
![输入图片说明](tdengine/src/main/resources/images/readme/executeSQL.png)
10. 资源监控查看(可查看数据库CPU、内存、磁盘使用趋势)
![输入图片说明](tdengine/src/main/resources/images/resourceMonitor.png)
11. 导出库表DDL
![输入图片说明](tdengine/src/main/resources/images/readme/exportDDL.png)
12. 集群查看（查看数据节点、管理节点）
![输入图片说明](tdengine/src/main/resources/images/readme/clusterquery.png)
13. 用户查看
![输入图片说明](tdengine/src/main/resources/images/readme/userquery.png)
14. 连接监控（监控已建立的连接）
![输入图片说明](tdengine/src/main/resources/images/readme/connectionquery.png)
15. 查询监控（监控正在执行的查询SQL）
![输入图片说明](tdengine/src/main/resources/images/readme/querymonitor.png)
#### 参与贡献

1.  Fork 本仓库
2.  新建 Feat_xxx 分支
3.  提交代码
4.  新建 Pull Request
",2,3,2,Apache-2.0,
mitang0320/leetcodeHot100,main,"# leetcode com.cannedmitang.hot100
Code with bilibili tv show : https://space.bilibili.com/444731546/channel/collectiondetail",0,0,1,,
giteecode/tourismvue2Public,master,"## 基于Java+Springboot+Vue的景区旅游门票管理系统(源代码+数据库)130

## 一、系统介绍
本项目前后端分离，分为管理员、用户两种角色

### 1、用户：
- 注册、登录、旅游线路查询、线路购买、购物车、旅游咨询、客服咨询、地址管理、充值、订单管理、个人中心、个人收藏管理、密码修改
### 2、管理员：
- 用户管理、线路分类管理、旅游线路管理、最新线路管理、轮播图管理、旅游资讯管理、客服管理、订单管理

## 二、所用技术

后端技术栈：

- Springboot
- MybatisPlus
- Mysql
- Maven

前端技术栈：

- Vue 
- Vue-router 
- axios 
- element-ui

## 三、环境介绍

基础环境 :IDEA/eclipse, JDK1.8, Mysql5.7及以上,Maven3.6, node14，navicat

所有项目以及源代码本人均调试运行无问题 可支持远程调试运行

## 四、页面截图
### 1、用户
![contents](./picture/picture1.png)
![contents](./picture/picture2.png)
![contents](./picture/picture3.png)
![contents](./picture/picture4.png)
![contents](./picture/picture5.png)
![contents](./picture/picture6.png)
![contents](./picture/picture7.png)
![contents](./picture/picture8.png)
![contents](./picture/picture9.png)
![contents](./picture/picture10.png)
![contents](./picture/picture11.png)
![contents](./picture/picture12.png)
![contents](./picture/picture13.png)
![contents](./picture/picture14.png)
![contents](./picture/picture15.png)
![contents](./picture/picture16.png)
![contents](./picture/picture17.png)
![contents](./picture/picture18.png)

### 2、管理员：
![contents](./picture/picture19.png)
![contents](./picture/picture20.png)
![contents](./picture/picture21.png)
![contents](./picture/picture22.png)
![contents](./picture/picture23.png)
![contents](./picture/picture24.png)
![contents](./picture/picture25.png)
![contents](./picture/picture26.png)
![contents](./picture/picture27.png)
![contents](./picture/picture28.png)
![contents](./picture/picture29.png)

## 五、浏览地址

前台访问地址：http://localhost:8080/springbootmt74k/front/index.html
- 用户账号/密码：用户1/123456

后台访问地址：http://localhost:8081/
- 管理员账号/密码：abo/abo

## 六、部署教程
1. 使用Navicat或者其它工具，在mysql中创建对应名称的数据库，并执行项目的sql文件
2. 使用IDEA/Eclipse导入springbootmt74k项目，若为maven项目请选择maven，等待依赖下载完成
3. 进入src/main/resources修改application.yml里面的数据库配置
4. src/main/java/com/SpringbootSchemaApplication.java启动后端项目
5. vscode或idea打开admin项目
6. 在编译器中打开terminal，执行npm install 依赖下载完成后执行 npm run serve,执行成功后会显示访问地址

",0,1,1,,
codebaorg/redis-keeper,main,"<h4 align=""right""><strong>English</strong> | <a href=""./README_zh.md"">简体中文</a></h4>

# Redis keeper - Lightweight Redis Multi-datasource Management Tool
[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.redisson/redisson/badge.svg)](https://central.sonatype.com/artifact/org.codeba/redis-keeper)
[![License](http://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)


**Supported JDK: 1.8 ... 21**

**Supported Redisson: 3.15.5 ... 3.35.0**

**Supported Redis: 3.0 ... 7.2**

## Features

* Based on redisson package, retain all the powerful features of redisson
* Support for multiple data source configuration and real-time updates for redis
* Support ""read-only"", ""write-only"", ""read-write"" and ""skip"" state switching for redis data sources
* Excellent expandability and compatibility to meet all your needs


## Quick start

#### Maven
    <dependency>
       <groupId>org.codeba</groupId>
       <artifactId>redis-keeper-core</artifactId>
       <version>2024.2.0</version>
    </dependency> 

    <dependency>
       <groupId>org.codeba</groupId>
       <artifactId>redis-keeper-support</artifactId>
       <version>2024.2.0</version>
    </dependency> 

#### Gradle

    implementation group: 'org.codeba', name: 'redis-keeper-core', version: '2024.2.0'

    implementation group: 'org.codeba', name: 'redis-keeper-support', version: '2024.2.0'

#### Sbt

    libraryDependencies += ""org.codeba"" % ""redis-keeper-core"" % ""2024.2.0""
    
    libraryDependencies += ""org.codeba"" % ""redis-keeper-support"" % ""2024.2.0""


#### Java

```java
// 1. Create config object
Config config = new Config();
config.useSingleServer().setAddress(""redis://localhost:6379"").setPassword(yourPass);
```

```java
// 2. Create datasource
DefaultCacheDatasource datasource = new DefaultCacheDatasource();

Map<String, CacheTemplate> dsMap = datasource.initialize(new HashMap<String, CacheKeeperConfig>() {{
    put(""ds1"", new CacheKeeperConfig(config));
}});

Map<String, List<CacheTemplate>> dssMap = datasource.initializeMulti(new HashMap<String, List<CacheKeeperConfig>>() {{
    put(""ds2"", Collections.singletonList(new CacheKeeperConfig(config)));
}});
```

```java
// 3. Create datasource provider
CacheTemplateProvider<CacheTemplate> provider = new CacheTemplateProvider<>(dsMap, dssMap);
```

```java
// 4. Get redis template
Optional<CacheTemplate> templateOptional = provider.getTemplate(""ds1"");
final CacheTemplate cacheTemplate = templateOptional.get();
cacheTemplate.set(""foo"", ""bar"");

// or get the read and write state of the cacheTemplate
Optional<CacheTemplate> templateOptionalRW = provider.getTemplate(""ds1"", CacheDatasourceStatus.RW);

// or get multiple cacheTemplates
Collection<CacheTemplate> cacheTemplates = provider.getTemplates(""ds2"");

// or load balanced polling to get cacheTemplate from multiple data sources
Optional<CacheTemplate> polledTemplate = provider.pollTemplate(""ds2"");

// or randomize cacheTemplate from multiple data sources
Optional<CacheTemplate> randomedTemplate = provider.randomTemplate(""ds2"");
```

## Springboot

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. Example datasource configuration as follows：

```yaml
redis-keeper:
  redis:
    datasource:
      ds1:
        host: localhost
        port: 6379
        password: yourPass
        invoke-params-print: true

    datasources:
      ds2:
        - host: localhost
          port: 6379
          database: 1
          password: yourPass
          invoke-params-print: true

        - host: localhost
          port: 6379
          database: 2
          password: yourPass
          invoke-params-print: true

```

3. Examples of common methods：

```java
@SpringBootTest
public class AppTest {

    @Autowired
    private CacheTemplateProvider<CacheTemplate> provider;

    @Test
    public void test() {
        String key = ""foo"";
        String value = ""bar"";

        final CacheTemplate cacheTemplate = provider.getTemplate(""ds1"").get();
        // set
        cacheTemplate.set(key, value);
        cacheTemplate.setObject(key, value);
        // get
        cacheTemplate.get(key);
        cacheTemplate.getObject(key);
        cacheTemplate.getLong(key);
        cacheTemplate.getDouble(key);
        // incr
        cacheTemplate.incr(key);
        // set get bit
        cacheTemplate.setBit(key, 7, true);
        cacheTemplate.getBit(key, 7);
        // del exists expire ttl unlink
        cacheTemplate.del(key);
        cacheTemplate.exists(key);
        cacheTemplate.expire(key, 10, TimeUnit.SECONDS);
        cacheTemplate.expireAt(key, System.currentTimeMillis());
        cacheTemplate.ttl(key);
        cacheTemplate.unlink(key);
        // geo
        cacheTemplate.geoAdd(key, 13.361389, 38.115556, ""Sicily"");
        cacheTemplate.geoAdd(key, 15.087269, 37.502669, ""Palermo"");
        cacheTemplate.geoDist(key, ""Sicily"", ""Palermo"", ""km"");
        // hash
        cacheTemplate.hSet(key, ""field1"", value);
        cacheTemplate.hGet(key, ""field1"");
        // hyberloglog
        cacheTemplate.pfAdd(key, Arrays.asList(""a""));
        cacheTemplate.pfCount(key);
        // list
        cacheTemplate.rPush(key, ""world"", ""hello"");
        cacheTemplate.lRange(key, 0, -1);
        // set
        cacheTemplate.sAdd(key, ""hello"");
        cacheTemplate.sAdd(key, ""world"");
        cacheTemplate.sAdd(key, ""world"");
        cacheTemplate.sMembers(key);
        // zset
        cacheTemplate.zAdd(key, 1, ""one"");
        cacheTemplate.zAdd(key, 2, ""two"");
        cacheTemplate.zAdd(key, 3, ""three"");
        cacheTemplate.zRange(key, 0, -1);
        // bloom filter
        cacheTemplate.bfReserve(key, 1000, 0.01);
        cacheTemplate.bfAdd(key, ""item1"");
        cacheTemplate.bfAdd(key, ""item1"");
        cacheTemplate.bfExists(key, ""item2"");
        // lock
        cacheTemplate.tryLock(key, 3, TimeUnit.SECONDS);
        cacheTemplate.unlock(key);
        cacheTemplate.forceUnlock(key);
        // rate limiter
        cacheTemplate.trySetRateLimiter(key, 100, 1);
        cacheTemplate.tryAcquire(key);
        cacheTemplate.tryAcquire(key, 10);
        // pipeline execute
        cacheTemplate.pipeline(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute and get response
        final List<?> responses = cacheTemplate.pipelineWithResponses(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute async
        final CompletableFuture<Void> voidCompletableFuture = cacheTemplate.pipelineAsync(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute and get response async
        final CompletableFuture<List<?>> listCompletableFuture = cacheTemplate.pipelineWithResponsesAsync(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
    }

}

```

## Unlimited Expansion

#### CacheTemplate adds new custom methods

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. CacheTemplate adds new custom methods

MyCacheTemplate.java

```java
import org.codeba.redis.keeper.support.CacheKeeperConfig;
import org.codeba.redis.keeper.support.DefaultRedissonTemplate;

public class MyCacheTemplate extends DefaultRedissonTemplate implements CacheTemplate {

    public MyCacheTemplate(CacheKeeperConfig cacheKeeperConfig) {
        super(cacheKeeperConfig);
    }

    public void test() {
	    final RedissonClient redissonClient = getDataSource();
        redissonClient.someMehotd();
        System.out.println(""hello world"");
    }

}
```

MyCacheDatasource.java

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.codeba.redis.keeper.support.CacheKeeperConfig;

public class MyCacheDatasource implements CacheDatasource<MyCacheTemplate> {

    @Override
    public MyCacheTemplate instantTemplate(CacheKeeperConfig config) {
        return new MyCacheTemplate(config);
    }

}
```

Enabling the new MyCacheDatasource

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyConfiguration {

    @Bean
    public CacheDatasource<MyCacheTemplate> cacheDatasource() {
        return new MyCacheDatasource();
    }

}
```

3. Enabling the new CacheTemplate

```java
@SpringBootTest
public class AppTest {

    @Autowired
    private CacheTemplateProvider<MyCacheTemplate> myProvider;

    @Test
    public void testMyProvider() {
        final Optional<MyCacheTemplate> templateOptional = myProvider.getTemplate(""ds1"");

        if (templateOptional.isPresent()) {
            final MyCacheTemplate cacheTemplate = templateOptional.get();

            // Custom Methods
            cacheTemplate.test();

        }
    }

}
```

#### CacheDatasource custom redisson configuration

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. For example, custom setting the encoding of redisson serialization and deserialization while enabling the new CacheDatasource.

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyConfiguration {

    @Bean
    public CacheDatasource<CacheTemplate> cacheDatasource() {
        return new DefaultCacheDatasource(){
            @Override
            public Consumer<CacheKeeperConfig> configPostProcessor(Consumer<CacheKeeperConfig> consumer) {
                return v -> v.getConfig().setCodec(new JsonJacksonCodec());
            }
        };
    }

}
```

## More Samples

1. [Redis-Keeper only](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-standalone)
2. [Redis-Keeper with Spring boot](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springboot)
3. [Redis-Keeper with Spring cloud](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springcloud)


## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=codebaorg/redis-keeper&type=Date)](https://star-history.com/#codebaorg/redis-keeper&Date)

",4,0,4,Apache-2.0,
Maithri1234/Java,main,,0,0,3,,
NodeMedia/react-native-nodemediaclient,main,"# react-native-nodemediaclient
[![npm](https://img.shields.io/npm/v/react-native-nodemediaclient.svg)](https://www.npmjs.com/package/react-native-nodemediaclient)
[![npm](https://img.shields.io/npm/dm/react-native-nodemediaclient.svg)](https://www.npmjs.com/package/react-native-nodemediaclient)  
This project is the react-native packaging of NodeMediaClient-Android and NodeMediaClient-iOS SDK.

Complete live publish and play functions, providing the exact same API call. You can publish two platforms just by developing one set of programs.  

A commercial license is required.

## 1.Install
npm i react-native-nodemediaclient

## 2.Install dependencies
npx pod-install ios

## 3.Permission

### Android
Open AwesomeProject/android/app/src/main/AndroidManifest.xml, Add

```  
<uses-feature android:name=""android.hardware.camera""/>
<uses-feature android:name=""android.hardware.camera.autofocus""/>

<uses-permission android:name=""android.permission.CAMERA""/>
<uses-permission android:name=""android.permission.RECORD_AUDIO""/>
<uses-permission android:name=""android.permission.FLASHLIGHT""/>
<uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""/>
```

https://reactnative.dev/docs/permissionsandroid

### iOS
Open AwesomeProject/ios/QLive/Info.plist , Add:
```
<key>NSCameraUsageDescription</key>
<string>AwesomeProject requires access to your phone’s camera.</string>
<key>NSMicrophoneUsageDescription</key>
<string>AwesomeProject requires access to your phone’s Microphone.</string>
```

## Demo
https://github.com/NodeMedia/iShow
",0,16,1,,
