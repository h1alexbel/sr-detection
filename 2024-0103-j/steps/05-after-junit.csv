repo,branch,readme,releases,open_issues,branches,license,workflows,pulls,w_jobs,w_oss,w_steps,has_release_workflow,tests
GreenJAB/fixed-minecraft,main,"# fixed-minecraft-1.20.4
 
",0,1,3,MIT,0,15.0,0.0,0.0,0.0,False,0.0
prakarshs/Jhethia,master,"# Jhethia : Where Fafda Meets Code
<p align=""center"">
  <img src=""https://images.pexels.com/photos/20693518/pexels-photo-20693518.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"" alt=""jhethia"" width=""630"" height=""400"">
</p>

## What Is Jhethia?
Jhethia is a fun programming language modeled in Java, spiced up with the hilarious antics of Jhethalal. Its syntax somewhat mixes Rust and Python, promising a coding experience full of laughs and fun! Jhethia allows users to perform a wide range of basic operations typical of any programming language, all while injecting a dose of fun into the process. 

Know More [‚ú®Here‚ú®](https://prakarshs.github.io/JhethiaWeb/)

### Run this program
- Firstly, Clone the repository in your system.
- Secondly, Compile and package the program into a uber jar, go to the ./target folder and then run the following command
```
java -cp Jhethia.jar org.prakarshs.JhethiaRun src/test/resources/hello_world.jhethia
```
>You can add your own .(dot)jhethia files and run the code from the test/resources/{your_file} location

üôèüèª Jai Jinendra üôèüèª



",0,0,2,,0,1.0,0.0,0.0,0.0,False,0.0
openfga/spring-boot-starter,main,"# OpenFGA Spring Boot Starter

[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](./LICENSE)
[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fopenfga%2Ffga-spring-boot.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fopenfga%2Ffga-spring-boot?ref=badge_shield)
[![Join our community](https://img.shields.io/badge/slack-cncf_%23openfga-40abb8.svg?logo=slack)](https://openfga.dev/community)
[![Twitter](https://img.shields.io/twitter/follow/openfga?color=%23179CF0&logo=twitter&style=flat-square ""@openfga on Twitter"")](https://twitter.com/openfga)

A Spring Boot Starter for OpenFGA.

## About

[OpenFGA](https://openfga.dev) is an open source Fine-Grained Authorization solution inspired by [Google's Zanzibar paper](https://research.google/pubs/pub48190/). It was created by the FGA team at [Auth0](https://auth0.com) based on [Auth0 Fine-Grained Authorization (FGA)](https://fga.dev), available under [a permissive license (Apache-2)](https://github.com/openfga/rfcs/blob/main/LICENSE) and welcomes community contributions.

OpenFGA is designed to make it easy for application builders to model their permission layer, and to add and integrate fine-grained authorization into their applications. OpenFGA‚Äôs design is optimized for reliability and low latency at a high scale.

## Resources

- [OpenFGA Documentation](https://openfga.dev/docs)
- [OpenFGA API Documentation](https://openfga.dev/api/service)
- [Twitter](https://twitter.com/openfga)
- [OpenFGA Community](https://openfga.dev/community)
- [Zanzibar Academy](https://zanzibar.academy)
- [Google's Zanzibar Paper (2019)](https://research.google/pubs/pub48190/)

## Installation

The OpenFGA Spring Boot Starter is available on [Maven Central](https://central.sonatype.com/).

It can be used with the following:

* Gradle (Groovy)

```groovy
implementation 'dev.openfga:openfga-spring-boot-starter:0.0.1'
```

* Gradle (Kotlin)

```kotlin
implementation(""dev.openfga:openfga-spring-boot-starter:0.0.1"")
```

* Apache Maven

```xml
<dependency>
    <groupId>dev.openfga</groupId>
    <artifactId>openfga-spring-boot-starter</artifactId>
    <version>0.0.1</version>
</dependency>
```

## Getting Started

### Requirements

Java 17 and Spring Boot 3

### Configuring the starter

The OpenFGA Spring Boot Starter can be configured via standard [Spring configuration](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config).
The configuration properties are used to create an [OpenFgaClient](https://github.com/openfga/java-sdk/blob/main/src/main/java/dev/openfga/sdk/api/client/OpenFgaClient.java) instance.

#### No Credentials

```yaml
# src/main/resources/application.yaml

openfga:
  api-url: YOUR_FGA_API_URL
  store-id: YOUR_FGA_STORE_ID
  authorization-model-id: YOUR_FGA_AUTHORIZATION_MODEL_ID
```

#### API Token

```yaml
# src/main/resources/application.yaml

openfga:
  api-url: YOUR_FGA_API_URL
  store-id: YOUR_FGA_STORE_ID
  authorization-model-id: YOUR_FGA_AUTHORIZATION_MODEL_ID
  credentials:
    method: API_TOKEN # constant
    config:
      api-token: YOUR_API_TOKEN
```

#### Client Credentials

```yaml
# src/main/resources/application.yaml

openfga:
  api-url: YOUR_FGA_API_URL
  store-id: YOUR_FGA_STORE_ID
  authorization-model-id: YOUR_FGA_AUTHORIZATION_MODEL_ID
  credentials:
    method: CLIENT_CONFIGURATION # constant
    config:
        client-id: YOUR_CLIENT_ID
        client-secret: YOUR_CLIENT_SECRET
        api-token-issuer: YOUR_API_TOKEN_ISSUER
        api-audience: YOUR_API_AUDIENCE
        scopes: YOUR_SPACE_SEPERATED_SCOPES
```

### Using the `fgaClient` bean

Once configured, an `fgaClient` bean is available to be injected into your Spring components:

```java
@Service
public class MyService {
    
    @Autowired
    private OpenFgaClient fgaClient;
}
```

This can be used to interact with the FGA API, for example to write authorization data:

```java
public Document createDoc(String id) {
    // ...
    ClientWriteRequest writeRequest =  new ClientWriteRequest()
            .writes(List.of(new ClientTupleKey()
                    .user(String.format(""user:%s"", SecurityContextHolder.getContext().getAuthentication()))
                    .relation(""owner"")
                    ._object(String.format(""document:%s"", id))));

    try {
        fgaClient.write(writeRequest).get();
    } catch (InterruptedException | ExecutionException | FgaInvalidParameterException e) {
        throw new RuntimeException(""Error writing to FGA"", e);
    }
    // ...
}
```

### Using the `fga` bean

The starter also creates an `fga` bean, which can be used in conjunction with Spring Security's method
security to protect access to resources using FGA:

```java
// Method body will only execute if the FGA check returns true. 403 otherwise.
@PreAuthorize(""@fga.check('document', #docId, 'reader', 'user', authentication?.name)"")
public Document getDocument(@PathVariable String docId) {
    return repository.findById(id);
}
```

You may also omit the user ID, in which case the name of the currently authenticated principal
will be used as the user ID:

```java
// Method body will only execute if the FGA check returns true. 403 otherwise.
@PreAuthorize(""@fga.check('document', #docId, 'reader', 'user')"")
public Document getDocument(@PathVariable String docId) {
    return repository.findById(id);
}
```

## Contributing

### Issues

If you have found a bug or if you have a feature request, please [create an issue](https://github.com/openfga/fga-spring-boot/issues). Please do not report security vulnerabilities on the public GitHub issue tracker.

### Pull Requests

Pull requests are welcome, however we do kindly ask that for non-trivial changes or feature additions, that you create an [issue]((https://github.com/openfga/fga-spring-boot/issues)) first.

## Author

[OpenFGA](https://github.com/openfga)

## License

This project is licensed under the Apache-2.0 license. See the [LICENSE](https://github.com/openfga/fga-spring-boot/blob/main/LICENSE) file for more info.
",1,4,7,Apache-2.0,3,31.0,6.0,1.0,9.0,False,4.0
guybedo/sugar,master,"Sugar
===================

Sugar for Java


What is this?
--------------

Sugar is a small utils library providing static functions to write less verbose Java code. 

Nothing groundbreaking here, just some sugar.

Features:
- Create/Manipulate collections: set, list, map, partition, product, intersect, counts, sums
- Collection helpers: first, last, sorted, max, min, mean, sum, prepend, append, concat, zip
- Random: random string, random char, choose elements in collection
- Parallel: pEach, pMap


# Examples

## Collections
```Java
Map<String, String> newMap = map(kv(""key1"", ""value1""), kv(""key1"", ""value1""), kv(""key1"", ""value1""));

List<Integer> values = list(1,2,3,4);
Integer min = min(values);
Integer last = last(values);
Integer one = first(filter(values,v -> v == 1));
values = map(values, v -> v + 1);

Map<Profile, Integer> counts = counts(objects, o -> o.getProfile());

```

## POJOs
```Java
orElse(""test"", s -> s + ""_ok"", null);
ifPresent(""test"", s -> System.out.println(s));
isoDateTime(LocalDateTime.now());
```


Getting Started
---------------

Maven
-----

```xml
<dependency>
    <groupId>com.akalea</groupId>
    <artifactId>sugar</artifactId>
    <version>0.0.11</version>
</dependency>
```

Import functions
----------------

```Java
import static com.akalea.sugar.Collections.*;
import static com.akalea.sugar.Pojos.*;
```
",0,0,2,,0,1.0,0.0,0.0,0.0,False,1.0
mitang0320/leetcodeHot100,main,"# leetcode com.cannedmitang.hot100
Code with bilibili tv show : https://space.bilibili.com/444731546/channel/collectiondetail",0,0,1,,0,0.0,0.0,0.0,0.0,False,0.0
codebaorg/redis-keeper,main,"<h4 align=""right""><strong>English</strong> | <a href=""./README_zh.md"">ÁÆÄ‰Ωì‰∏≠Êñá</a></h4>

# Redis keeper - Lightweight Redis Multi-datasource Management Tool
[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.redisson/redisson/badge.svg)](https://central.sonatype.com/artifact/org.codeba/redis-keeper)
[![License](http://img.shields.io/:license-apache-brightgreen.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)


**Supported JDK: 1.8 ... 21**

**Supported Redisson: 3.15.5 ... 3.35.0**

**Supported Redis: 3.0 ... 7.2**

## Features

* Based on redisson package, retain all the powerful features of redisson
* Support for multiple data source configuration and real-time updates for redis
* Support ""read-only"", ""write-only"", ""read-write"" and ""skip"" state switching for redis data sources
* Excellent expandability and compatibility to meet all your needs


## Quick start

#### Maven
    <dependency>
       <groupId>org.codeba</groupId>
       <artifactId>redis-keeper-core</artifactId>
       <version>2024.2.0</version>
    </dependency> 

    <dependency>
       <groupId>org.codeba</groupId>
       <artifactId>redis-keeper-support</artifactId>
       <version>2024.2.0</version>
    </dependency> 

#### Gradle

    implementation group: 'org.codeba', name: 'redis-keeper-core', version: '2024.2.0'

    implementation group: 'org.codeba', name: 'redis-keeper-support', version: '2024.2.0'

#### Sbt

    libraryDependencies += ""org.codeba"" % ""redis-keeper-core"" % ""2024.2.0""
    
    libraryDependencies += ""org.codeba"" % ""redis-keeper-support"" % ""2024.2.0""


#### Java

```java
// 1. Create config object
Config config = new Config();
config.useSingleServer().setAddress(""redis://localhost:6379"").setPassword(yourPass);
```

```java
// 2. Create datasource
DefaultCacheDatasource datasource = new DefaultCacheDatasource();

Map<String, CacheTemplate> dsMap = datasource.initialize(new HashMap<String, CacheKeeperConfig>() {{
    put(""ds1"", new CacheKeeperConfig(config));
}});

Map<String, List<CacheTemplate>> dssMap = datasource.initializeMulti(new HashMap<String, List<CacheKeeperConfig>>() {{
    put(""ds2"", Collections.singletonList(new CacheKeeperConfig(config)));
}});
```

```java
// 3. Create datasource provider
CacheTemplateProvider<CacheTemplate> provider = new CacheTemplateProvider<>(dsMap, dssMap);
```

```java
// 4. Get redis template
Optional<CacheTemplate> templateOptional = provider.getTemplate(""ds1"");
final CacheTemplate cacheTemplate = templateOptional.get();
cacheTemplate.set(""foo"", ""bar"");

// or get the read and write state of the cacheTemplate
Optional<CacheTemplate> templateOptionalRW = provider.getTemplate(""ds1"", CacheDatasourceStatus.RW);

// or get multiple cacheTemplates
Collection<CacheTemplate> cacheTemplates = provider.getTemplates(""ds2"");

// or load balanced polling to get cacheTemplate from multiple data sources
Optional<CacheTemplate> polledTemplate = provider.pollTemplate(""ds2"");

// or randomize cacheTemplate from multiple data sources
Optional<CacheTemplate> randomedTemplate = provider.randomTemplate(""ds2"");
```

## Springboot

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. Example datasource configuration as followsÔºö

```yaml
redis-keeper:
  redis:
    datasource:
      ds1:
        host: localhost
        port: 6379
        password: yourPass
        invoke-params-print: true

    datasources:
      ds2:
        - host: localhost
          port: 6379
          database: 1
          password: yourPass
          invoke-params-print: true

        - host: localhost
          port: 6379
          database: 2
          password: yourPass
          invoke-params-print: true

```

3. Examples of common methodsÔºö

```java
@SpringBootTest
public class AppTest {

    @Autowired
    private CacheTemplateProvider<CacheTemplate> provider;

    @Test
    public void test() {
        String key = ""foo"";
        String value = ""bar"";

        final CacheTemplate cacheTemplate = provider.getTemplate(""ds1"").get();
        // set
        cacheTemplate.set(key, value);
        cacheTemplate.setObject(key, value);
        // get
        cacheTemplate.get(key);
        cacheTemplate.getObject(key);
        cacheTemplate.getLong(key);
        cacheTemplate.getDouble(key);
        // incr
        cacheTemplate.incr(key);
        // set get bit
        cacheTemplate.setBit(key, 7, true);
        cacheTemplate.getBit(key, 7);
        // del exists expire ttl unlink
        cacheTemplate.del(key);
        cacheTemplate.exists(key);
        cacheTemplate.expire(key, 10, TimeUnit.SECONDS);
        cacheTemplate.expireAt(key, System.currentTimeMillis());
        cacheTemplate.ttl(key);
        cacheTemplate.unlink(key);
        // geo
        cacheTemplate.geoAdd(key, 13.361389, 38.115556, ""Sicily"");
        cacheTemplate.geoAdd(key, 15.087269, 37.502669, ""Palermo"");
        cacheTemplate.geoDist(key, ""Sicily"", ""Palermo"", ""km"");
        // hash
        cacheTemplate.hSet(key, ""field1"", value);
        cacheTemplate.hGet(key, ""field1"");
        // hyberloglog
        cacheTemplate.pfAdd(key, Arrays.asList(""a""));
        cacheTemplate.pfCount(key);
        // list
        cacheTemplate.rPush(key, ""world"", ""hello"");
        cacheTemplate.lRange(key, 0, -1);
        // set
        cacheTemplate.sAdd(key, ""hello"");
        cacheTemplate.sAdd(key, ""world"");
        cacheTemplate.sAdd(key, ""world"");
        cacheTemplate.sMembers(key);
        // zset
        cacheTemplate.zAdd(key, 1, ""one"");
        cacheTemplate.zAdd(key, 2, ""two"");
        cacheTemplate.zAdd(key, 3, ""three"");
        cacheTemplate.zRange(key, 0, -1);
        // bloom filter
        cacheTemplate.bfReserve(key, 1000, 0.01);
        cacheTemplate.bfAdd(key, ""item1"");
        cacheTemplate.bfAdd(key, ""item1"");
        cacheTemplate.bfExists(key, ""item2"");
        // lock
        cacheTemplate.tryLock(key, 3, TimeUnit.SECONDS);
        cacheTemplate.unlock(key);
        cacheTemplate.forceUnlock(key);
        // rate limiter
        cacheTemplate.trySetRateLimiter(key, 100, 1);
        cacheTemplate.tryAcquire(key);
        cacheTemplate.tryAcquire(key, 10);
        // pipeline execute
        cacheTemplate.pipeline(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute and get response
        final List<?> responses = cacheTemplate.pipelineWithResponses(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute async
        final CompletableFuture<Void> voidCompletableFuture = cacheTemplate.pipelineAsync(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
        // pipeline execute and get response async
        final CompletableFuture<List<?>> listCompletableFuture = cacheTemplate.pipelineWithResponsesAsync(kBatch -> {
            kBatch.getString().setAsync(key, ""bar"");
            kBatch.getGeo().geoAddAsync(key, 13.361389, 38.115556, ""Sicily"");
            kBatch.getList().llenAsync(key);
        });
    }

}

```

## Unlimited Expansion

#### CacheTemplate adds new custom methods

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. CacheTemplate adds new custom methods

MyCacheTemplate.java

```java
import org.codeba.redis.keeper.support.CacheKeeperConfig;
import org.codeba.redis.keeper.support.DefaultRedissonTemplate;

public class MyCacheTemplate extends DefaultRedissonTemplate implements CacheTemplate {

    public MyCacheTemplate(CacheKeeperConfig cacheKeeperConfig) {
        super(cacheKeeperConfig);
    }

    public void test() {
	    final RedissonClient redissonClient = getDataSource();
        redissonClient.someMehotd();
        System.out.println(""hello world"");
    }

}
```

MyCacheDatasource.java

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.codeba.redis.keeper.support.CacheKeeperConfig;

public class MyCacheDatasource implements CacheDatasource<MyCacheTemplate> {

    @Override
    public MyCacheTemplate instantTemplate(CacheKeeperConfig config) {
        return new MyCacheTemplate(config);
    }

}
```

Enabling the new MyCacheDatasource

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyConfiguration {

    @Bean
    public CacheDatasource<MyCacheTemplate> cacheDatasource() {
        return new MyCacheDatasource();
    }

}
```

3. Enabling the new CacheTemplate

```java
@SpringBootTest
public class AppTest {

    @Autowired
    private CacheTemplateProvider<MyCacheTemplate> myProvider;

    @Test
    public void testMyProvider() {
        final Optional<MyCacheTemplate> templateOptional = myProvider.getTemplate(""ds1"");

        if (templateOptional.isPresent()) {
            final MyCacheTemplate cacheTemplate = templateOptional.get();

            // Custom Methods
            cacheTemplate.test();

        }
    }

}
```

#### CacheDatasource custom redisson configuration

1. Maven

```java
<dependency>
	<groupId>org.codeba</groupId>
	<artifactId>redis-keeper-spring-boot-starter</artifactId>
	<version>2024.2.0</version>
</dependency>
```

2. For example, custom setting the encoding of redisson serialization and deserialization while enabling the new CacheDatasource.

```java
import org.codeba.redis.keeper.support.CacheDatasource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyConfiguration {

    @Bean
    public CacheDatasource<CacheTemplate> cacheDatasource() {
        return new DefaultCacheDatasource(){
            @Override
            public Consumer<CacheKeeperConfig> configPostProcessor(Consumer<CacheKeeperConfig> consumer) {
                return v -> v.getConfig().setCodec(new JsonJacksonCodec());
            }
        };
    }

}
```

## More Samples

1. [Redis-Keeper only](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-standalone)
2. [Redis-Keeper with Spring boot](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springboot)
3. [Redis-Keeper with Spring cloud](https://github.com/codebaorg/redis-keeper/tree/main/redis-keeper-example/redis-keeper-example-springcloud)


## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=codebaorg/redis-keeper&type=Date)](https://star-history.com/#codebaorg/redis-keeper&Date)

",4,0,4,Apache-2.0,0,1.0,0.0,0.0,0.0,False,10.0
NodeMedia/react-native-nodemediaclient,main,"# react-native-nodemediaclient
[![npm](https://img.shields.io/npm/v/react-native-nodemediaclient.svg)](https://www.npmjs.com/package/react-native-nodemediaclient)
[![npm](https://img.shields.io/npm/dm/react-native-nodemediaclient.svg)](https://www.npmjs.com/package/react-native-nodemediaclient)  
This project is the react-native packaging of NodeMediaClient-Android and NodeMediaClient-iOS SDK.

Complete live publish and play functions, providing the exact same API call. You can publish two platforms just by developing one set of programs.  

A commercial license is required.

## 1.Install
npm i react-native-nodemediaclient

## 2.Install dependencies
npx pod-install ios

## 3.Permission

### Android
Open AwesomeProject/android/app/src/main/AndroidManifest.xml, Add

```  
<uses-feature android:name=""android.hardware.camera""/>
<uses-feature android:name=""android.hardware.camera.autofocus""/>

<uses-permission android:name=""android.permission.CAMERA""/>
<uses-permission android:name=""android.permission.RECORD_AUDIO""/>
<uses-permission android:name=""android.permission.FLASHLIGHT""/>
<uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""/>
```

https://reactnative.dev/docs/permissionsandroid

### iOS
Open AwesomeProject/ios/QLive/Info.plist , Add:
```
<key>NSCameraUsageDescription</key>
<string>AwesomeProject requires access to your phone‚Äôs camera.</string>
<key>NSMicrophoneUsageDescription</key>
<string>AwesomeProject requires access to your phone‚Äôs Microphone.</string>
```

## Demo
https://github.com/NodeMedia/iShow
",0,16,1,,0,1.0,0.0,0.0,0.0,False,0.0
