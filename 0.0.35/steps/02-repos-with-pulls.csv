repo,branch,readme,releases,open_issues,branches,license,workflows,pulls
jocrugon/Pokedex,main,"# Pokedex
API desarrollado en java con spring boot, usando arquitectura hexagonal, swagger, manejador de excepciones y 2 bases de datos MySQL y MongoDB
las bases de datos están en el archivo docker-compose, también la creación de la imagen del API indicado en el Dockerfile

- SWAGGER

![imagen](https://github.com/jocrugon/Pokedex/assets/93726141/5ddeaab8-61ac-41cb-b435-452ebdf30091)

- Arquitectura Hexagonal

![imagen](https://github.com/jocrugon/Pokedex/assets/93726141/b692b471-88d9-43e6-9a75-4e8732a4cf4e)

- Docker

![imagen](https://github.com/jocrugon/Pokedex/assets/93726141/49cfcd81-be7a-4594-88db-892525dd5bd2)

",0,0,1,,,0.0
retrogemHK/codingtest_java,main,"# 코딩 테스트 합격자 되기(자바 편)
- 프로그래머스에서 엄선한 기출 문제에 대한 상세한 풀이 제공
- 들고 다닐 수 있는 요약 노트 제공
- 실전 문제 위주로 출제된 기출 문제 5회분 제공(회당 3 문제)


## 📖 도서 구매 링크
- Yes24 : https://www.yes24.com/Product/Goods/125183948
- 교보문고 : https://product.kyobobook.co.kr/detail/S000212576322
- 알라딘 : https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=335109613
- 리디북스(Ebook) : https://ridibooks.com/books/4547000036

<img width=""464"" alt=""image"" src=""https://github.com/retrogemHK/codingtest_java/assets/14954690/16687a4f-c529-407c-a44b-15a9677f0eac"">

# 정오표
[클릭](https://docs.google.com/spreadsheets/d/16ZWyC2xlylfsGBdyt2YMT8ogpukNh7sXsHrfx5qQuFk/edit#gid=0)

# 책소개
![image](https://github.com/retrogemHK/codingtest_java/blob/main/assets/java_image.jpg)


# 진행중인 이벤트
| Event    | 세부내용                                    |기간 |
| ---------- | ---------------------------------------------- |---------------------------------------------- |
|코딩테스트 스터디       |[참여방법 및 스터디 세부사항](https://cafe.naver.com/dremdeveloper/948)              | 상시 |



# 코딩테스트 소통공간(저자가 직접운영)
| Title    | Description                                    |
| ---------- | ---------------------------------------------- |
|카카오톡 오픈채팅        |[클릭](https://open.kakao.com/o/gQOVhU3f)              |

# 연락처
- 해당 코드들에 대해 문의사항이 있거나, 연락이 필요한 경우 아래 참조

| Title             | Description                                     |
|-------------------|-------------------------------------------------|
| Cafe              | http://cafe.naver.com/dremdeveloper             |
| Business Mail     | kylados@naver.com                               |
| Codingtest Python | https://github.com/dremdeveloper/codingtest_python |
| Codingtest CPP    | https://github.com/dremdeveloper/codingtest_cpp |
# 폴더 구조
- 깃 허브의 폴더 구조에 대한 설명

| Title    | Description                                    |
| ---------- | ---------------------------------------------- |
| errorcode        | 구현시 자주 발생하는 에러메시지                |
| mistake        | 구현시 자주 실수할수 있는 사항                |
| performance        | 비슷한 동작을 하는데 시간복잡도가 다른 경우에 대한 시간비교             |
| reference        | 코딩테스트에서 많이 사용하는 문법                         |
| solution        | 책에 있는 문제에 대한 해설                         |
| Algorithm_with_DataStructure        | 코딩테스트에 등장하는 알고리즘과 자료구조                        |
",0,0,1,,,0.0
arconia-io/arconia,main,"# Arconia

Arconia is a framework to build SaaS, multitenant applications using Java and Spring Boot.

<img src=""arconia-logo.png"" alt=""The Arconia logo"" height=""250px"" />

## 🚀&nbsp; Quick Start

### Pre-Requisites

* Java 21+
* [Spring CLI](https://docs.spring.io/spring-cli/reference/installation.html)

### Getting Started

Using the Spring CLI, you can easily bootstrap a new Spring Boot application using the Arconia framework.

First, add the Arconia Spring catalog providing the project templates.

```shell
spring project-catalog add arconia https://github.com/arconia-io/arconia
```

Then, create a new Spring Boot project for building a multitenant web application.

```shell
spring boot new myapp arconia-web
```

Finally, navigate to the `myapp` folder and run the Spring Boot application.

```shell
cd myapp
./mvnw spring-boot:run
```

You can now call the application as one of the valid tenants (`dukes` or `beans`).
This example uses [httpie](https://httpie.io) to send HTTP requests.

```shell
http :8080/ X-TenantId:dukes
```

## 🌟 Examples

Check these [examples](https://github.com/arconia-io/arconia-samples) to see Arconia and Spring Boot in action.

## 🛡️&nbsp; Security

The security process for reporting vulnerabilities is described in [SECURITY.md](SECURITY.md).

## 🖊️&nbsp; License

This project is licensed under the **Apache License 2.0**. See [LICENSE](LICENSE) for more information.
",5,9,1,Apache-2.0,commit-stage.yml,0.0
linux-china/sieve-cache,main,"SIEVE Cache in Java
===================

SIEVE is simpler than LRU with following features:

* Simplicity: easy to implement and can be easily integrated into existing systems.
* Efficiency: achieves state-of-the-art efficiency on skewed workloads.
* Cache Primitive: facilitates the design of advanced eviction algorithms.

![How it works](how-it-works.png)

# Get started
 
* Add dependency to `pom.xml`:

```xml
<dependency>
    <groupId>org.mvnsearch</groupId>
    <artifactId>sieve-cache</artifactId>
    <version>0.1.0</version>
</dependency>
```
* Create a cache instance and use it:

```
   Cache<String> cache = new SieveCache<>();
   cache.put(""nick"", ""Jackie"");
   System.out.println(cache.get(""nick""));
```

# References
        
* SIEVE: https://cachemon.github.io/SIEVE-website/
* SIEVE is simpler than LRU: https://cachemon.github.io/SIEVE-website/blog/2023/12/17/sieve-is-simpler-than-lru/",1,1,1,Apache-2.0,,0.0
CleanroomMC/Fugue,master,"# Fugue
Fix dead mods. [Explain](https://www.etymonline.com/cn/word/fugue)

Also check [The Fugue Plane](https://forgottenrealms.fandom.com/wiki/Fugue_Plane).

## Download
https://github.com/CleanroomMC/Fugue/releases/latest

If you are still using 0.1.0 Cleanroom, use 0.5.4. But that's not recommended.

## List
* Charset
* CodeChickenLib
* Custom Main Menu
* Hammer Lib
* Forge Multipart
* Project:Red
* Solar Flux Reborn
* Xaero Plus
* EnderCore
* Lag Goggles
* Snow! Real Magic
* Botania Tweaks
* Advanced Rocketry
* Entity Distance
* FoamFix
* Shoulder Surfing Reloaded
* SplashAnimation
* Logistics Pipes
* OpenDisks
* OpenSecurity
* Enchantments Control
* GregTech CE Unofficial (Before 2.8.8)
* TFC Medicinal
* Mcjty Core
* LoliASM
* Howling Moon
* Custom NPCs
* XNet
* ZeroCore (ExtremeReactor)
* Smooth Font
* Water Power
* Survival Inc.
* Subauqatic (Temporary)
* Nothirium
* IC2C Extra
* Simply Hot Spring
* OpenModsLib
* Valkyrie (Temporary)
* ReplayMod
* Thaumic Speedup (Temporary)
* Astral Sorcery
* Armourer's Workshop
* Vampirism
* MAGE (Graphical Tweaks)
* Extra Utilities 2
* In Control!
* More Refined Storage
* Better Formatting Code
* 5zig
* Ears
* Colytra
* Crossbow
* Polyfrost mods
* Carry On
* Litematica
* Better Records
* Aqua Acrobatics
* Refined Relocation 2
* Integrated Proxy
* Thaumic Fixes
* Erebus Fix
* Uncrafting Blacklist
* Unilib

## Note
Add + to start of the file if it's not there.",62,4,1,GPL-3.0,"gradle.yml,release.yml",12.0
udhayakumar2701/cricketTournamentSetting,main,,0,0,1,,,0.0
xyzeva/ender-relay,main,"
<div align=""center"">

  <img width=""384"" height=""384"" src=""https://github.com/xyzeva/ender-relay/assets/133499694/0a9b6ff3-a7bd-42ba-ba3c-0845913f9917""></img>
  <h1>The Ender Relay</h1>
  <div>
    <a href=""https://modrinth.com/mod/end-relay""><img alt=""modrinth"" height=""56"" src=""https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/cozy/available/modrinth_vector.svg""></a>
    <a href=""https://modrinth.com/mod/fabric-api""><img alt=""fabric-api"" height=""56"" src=""https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/cozy/requires/fabric-api_vector.svg""></a>
<a href=""https://buymeacoffee.com/xyzeva""><img alt=""buymeacoffee-singular"" height=""56"" src=""https://cdn.jsdelivr.net/npm/@intergrav/devins-badges@3/assets/cozy/donate/buymeacoffee-singular_vector.svg""></a>
  </div>
</div>

This is a one-to-one replica of the [ender relay concept](https://www.youtube.com/watch?v=L1i4izl25V4) a youtuber by the name of Kenadian made.

The resources for the block were provided by Kenadian.

The Ender Relay is a block that can only be used in the end, it is crafted with a lodestone compass and can be charged like a respawn anchor, instead with a end crystal. When a player clicks the block, it teleports to the lodestone compasses location, ontop of the lodestone.

This completes the trilogy of the bed, respawn anchor by introducing a transportation item for the end dimension.

For more on the concept (and the mod, since its a 1:1), watch the video linked above!
",3,2,1,MIT,release.yml,0.0
dnwwdwd/homieMatching,release_2.0,"# homie 匹配系统

> 作者：C1own
>
> [Github 主页](https://github.com/dnwwdwd)
>
> [CSDN 主页](https://blog.csdn.net/xyendjsj?type=blog)

![](https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609142339.png)



## 项目介绍

homie 匹配系统是一个移动端网页的在线云交友平台。实现了按标签匹配、查找用户，基于 Redis GEO 实现搜索附近用户，同时个人还可以建队、组队以打造个人学习队伍。除了添加好友、搜索好友外，还基于 Websocket 实现好友间私聊，方便用户寻找志同道合的学习搭子。

### 线上地址

[厚米匹配系统](http://hm.hejiajun.icu/)

### 前端地址

[homie 匹配前端地址](https://github.com/dnwwdwd/homieMatching-fronted)

### 后端地址

[homie 匹配后端地址](https://github.com/dnwwdwd/homieMatching)

### 项目部署教程

[homie 匹配部署教程](https://blog.csdn.net/xyendjsj/article/details/135921460?spm=1001.2014.3001.5501)



## 技术选型

### 前端

| 技术       | 用途                       | 版本   |
| ---------- | -------------------------- | ------ |
| Vue        | 前端经典框架，方便开发页面 | 3.3.11 |
| Vue-Router | 细致的导航控制             | 4      |
| Axios      | 发送请求至后端             | 1.6.2  |
| Vant       | 移动端样式组件库           | 4.8.0  |
| Vite       | 前端构建工具               | 5.0.8  |



### 后端

| 技术                 | 用途                                         | 版本    |
| -------------------- | -------------------------------------------- | ------- |
| Spring Boot          | 快构建 Spring 应用                           | 2.7.6   |
| JDK                  | Java 应用开发工具                            | 1.8     |
| MyBatis              | 操作数据库的框架                             | 3.5.2   |
| MyBatis-Plus         | MyBatis的增强框架，无需编写 SQL 语句         | 3.5.2   |
| MySQL                | 一个关系型数据库产品，用于存储数据           | 8.0..33 |
| Redis                | 一个非关系型数据库产品，用于存储数据         | 5.      |
| WebSocket            | 使得客户端和服务器之间的数据交换变得更加简单 | 2.4.1   |
| Lombok               | 实体类方法的快速生成工具                     |         |
| knife4j              | 在线接口文档生成的库                         | 2.0.9   |
| EasyExcel            | 快速、低占用地操作 Excel                     | 3.3.2   |
| hutool               | 强而全的工具库                               | 5.7.17  |
| Guava-Retrying       | 提供重试机制的库                             | 1.0.6   |
| Apache-commons-lang3 | 工具库                                       | 3.12.0  |



## 个人介绍

一个普通学校的大三学生，即将大四毕业了，正在做毕设。

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609142050.jpg"" alt=""597f123b20d2e350ad2916f61c377ef"" style=""zoom: 33%;"" />

> 觉得项目还不错的同学可否给我项目点个 Star 呢？如果可以，小弟不胜感激，谢谢！

## 功能展示

登录

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143001.png"" alt=""image-20240609143001885"" style=""zoom: 67%;"" />

注册

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609142952.png"" alt=""image-20240609142952622"" style=""zoom: 67%;"" />

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143117.png"" alt=""image-20240609143117032"" style=""zoom: 67%;"" />

首页

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145323.png"" alt=""image-20240609145323203"" style=""zoom:67%;"" />

按标签匹配相似用户

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145335.png"" alt=""image-20240609145335696"" style=""zoom:67%;"" />

按标签搜索用户

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145012.png"" alt=""image-20240609145012357"" style=""zoom:67%;"" />

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145002.png"" alt=""image-20240609145002577"" style=""zoom:67%;"" />

按距离搜索用户

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145122.png"" alt=""image-20240609145122634"" style=""zoom:67%;"" />

好友页面

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145434.png"" alt=""image-20240609145434695"" style=""zoom:67%;"" />

搜索好友

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609171231.png"" alt=""image-20240609171231079"" style=""zoom:67%;"" />

好友私聊

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145534.png"" alt=""image-20240609145534153"" style=""zoom:67%;"" />

建队

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609145549.png"" alt=""image-20240609145549455"" style=""zoom:67%;"" />

个人页面

<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143327.png"" alt=""image-20240609143327588"" style=""zoom: 67%;"" />



<img src=""https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609143357.png"" alt=""image-20240609143357705"" style=""zoom:67%;"" />



## 项目亮点

1. 基于 Spring AOP + Axios 实现前端登录拦截
2. 基于 Redis 实现分布式 Session 存储
3. 使用 Redis List 结构配合 Vue-infinite-loading 组件实现滑动加载
4. Spring Scheduling + Redis 分布式锁实现缓存预热
5. 了解编辑距离算法，可用于匹配相似字符串，单词校验
6. 基于 Redis GEO 存储用户地理微信信息，实现搜索附近用户
7. 基于 Redis 分布式锁防止用户重复入队
8. 通过 Guava 库实现重试机制，保证缓存数据一致性
9. 基于 Websocket 实现用户间私聊
10. 集成第三方库生成接口测试文档，方便测试项目接口
11. 熟悉 EasyExcel 的使用
12. 基于 Axios 封装请求实例，方便请求后端接口
13. 熟悉 Vant 组件库的使用
14. 熟悉 Vue3 setup 语法
15. 掌握 Vue-Router 基本使用



## 数据库表

> 如果大家拉取了后端源码，直接找到 sql/create_sql.sql 文件直接运行即可创建相应数据库和表结构

### 用户表

```sql
/*用户表*/
create table hjj.user
(
    id           bigint auto_increment comment 'id'
        primary key,
    username     varchar(256)                       null comment '用户昵称',
    userAccount  varchar(256)                       null comment '账户',
    avatarUrl    varchar(1024)                      null comment '用户头像' default 'https://www.keaitupian.cn/cjpic/frombd/0/253/936677050/470164789.jpg',
    gender       tinyint                            null comment '用户性别',
    profile      varchar(512)                       null comment '个人简介',
    userPassword varchar(512)                       not null comment '用户密码',
    phone        varchar(128)                       null comment '电话',
    email        varchar(512)                       null comment '邮箱',
    userStatus   int      default 0                 not null comment '状态 0 - 正常',
    createTime   datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete     tinyint  default 0                 not null comment '是否删除',
    userRole     int      default 0                 not null comment '用户角色 0 - 普通用户 1 - 管理员',
    planetCode   varchar(512)                       null comment '星球编号',
    tags         varchar(1024)                      null comment '标签列表(json)',
    longitude    decimal(10, 6)                     null comment '经度',
    dimension    decimal(10, 6)                     null comment '纬度'
)
    comment '用户';
```



### 队伍表

```sql
/*队伍表*/
create table if not exists hjj.team
(
    id           bigint auto_increment comment 'id'
        primary key,
    teamName   		varchar(256)                        not null comment '队伍名称',
    description 	varchar(1024)                       null comment ' 描述',
    maxNum        	int    default 1              		null comment '最大人数',
    expireTime      datetime							null comment '过期时间',
    userId 			bigint                              not null comment '队伍创建者/队长id',
    status         	tinyint default 0 		        	null comment '队伍状态 - 0 - 公开， 1 - 私有，2 - 加密
- ',
    password        varchar(512)                       null comment '队伍密码',
    createTime   	datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   	datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete     	tinyint  default 0                 not null comment '是否删除'
)
    comment '队伍信息';
```



### 用户关系表

```sql
/*用户队伍关系*/
create table if not exists hjj.user_team
(
    id           bigint auto_increment comment 'id'
        primary key,
    userId 			bigint                             	comment '用户id',
    teamId 			bigint                             	comment '队伍id',
    joinTime   	datetime 							    comment '加入时间',
    createTime   	datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime   	datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete     	tinyint  default 0                 not null comment '是否删除'
)
    comment '用户队伍关系表';
```



### 好友表

```sql
/*好友表*/
create table hjj.friend
(
    id         bigint auto_increment comment 'id'
        primary key,
    userId     bigint                             not null comment '用户id（即自己id）',
    friendId   bigint                             not null comment '好友id',
    createTime datetime default CURRENT_TIMESTAMP null comment '创建时间',
    updateTime datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '更新时间',
    isDelete   tinyint  default 0                 not null comment '是否删除'
)
    comment '好友表';
```



### 聊天表

```sql
/*聊天表*/
CREATE TABLE `chat`  (
                         `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '聊天记录id',
                         `fromId` bigint(20) NOT NULL COMMENT '发送消息id',
                         `toId` bigint(20) NULL DEFAULT NULL COMMENT '接收消息id',
                         `text` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
                         `chatType` tinyint(4) NOT NULL COMMENT '聊天类型 1-私聊 2-群聊',
                         `createTime` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
                         `updateTime` datetime NULL DEFAULT CURRENT_TIMESTAMP,
                         `teamId` bigint(20) NULL DEFAULT NULL,
                         `isDelete` tinyint(4) NULL DEFAULT 0,
                         PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '聊天消息表' ROW_FORMAT = COMPACT;
```



## 项目初始化

### 前端

基础环境

- 软件：WebStorm 2022.2.5 / Vscode
- 环境：Node 版本：18.0.2

1）拉取项目

```bash
git clone https://github.com/dnwwdwd/homeiMatching-frontend.git
```

2）安装依赖

```bash
npm install
```

3）运行项目

```bash
npm run dev
```

4）打包项目

```bash
npm run build
```



### 数据库

1）对于拉去后端项目的同学直接运行 /sql/create_sql.ql 文件即可，前提电脑装了 MySQL（5.7 或 8.x 都可）

2）完事后将 application.yml 文件中数据库的账号密码改为自己的即可，对了此项目还用了 Redis，所以还要修改 Redis 的连接配置，有密码的加上密码

```yml
spring:
  profiles:
    active: dev
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  application:
    name: homieMatching
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/hjj?characterEncoding=UTF-8
    username: root
    password: 123456
  session:
    timeout: 86400
    store-type: redis
  redis:
    port: 6379
    host: localhost
    database: 0
server:
  port: 8080
  servlet:
    context-path: /api
    session:
      cookie:
        domain: localhost
        same-site: none
        secure: true
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: false
  global-config:
    db-config:
      logic-delete-field: isDelete
      logic-delete-value: 1
      logic-not-delete-value: 0
```



### 后端

基础环境

- 软件：IDEA 2023.1.6
- JDK 1.8 + MySQL 8.0.33 + Redis 5.x（最好是 5.x 以上） + Spring Boot 2.7.6 

> 更细的环境请看上面的技术选型，上面有具体的依赖关系和版本。
>
> **各位一定要注意在启动后端前，一定要先建好数据库表和安装 Redis，改好 yml 文件的连接信息再启动后端。**

1）拉取项目

```bash
git clone https://github.com/dnwwdwd/homieMatching.git
```

2）点击小圆圈重新加载所有 Maven 项目 ，下载依赖。

![image-20240609154936738](https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609154936.png)

3）启动后端

找到 HomieMatchingApplication 主类，点击运行即可。

![image-20240609154419326](https://hejiajun-img-bucket.oss-cn-wuhan-lr.aliyuncs.com/img/20240609154419.png)



## 项目部署

[homie 匹配部署教程](https://blog.csdn.net/xyendjsj/article/details/135921460?spm=1001.2014.3001.5501)

跟着上面的教程一步一步来即可，不行你不会，如果中间有任何问题欢迎在这个网站，或者 CSDN 上，亦或者是微信上向我提问。觉得项目还不错的话，请给我点个 Star 呗，谢谢！
",0,2,2,,,2.0
GDSC-Hongik/gdsc-server,develop,,35,31,14,,"develop_build_deploy.yml,develop_deploy.yml,production_build_deploy.yml,production_deploy.yml,pull_request_gradle_build.yml",404.0
MirnaGama/hospital-management-api,master,"# Hospital Management - API Module ![Build Status](https://github.com/MirnaGama/hospital-management-api/actions/workflows/maven.yml/badge.svg)

## About the project
Hospital Management API built in Spring Boot

### Prerequisites:
- Spring Boot 3.2.1 
- JDK 17
- Maven 4.0.0

### Running the application
1. `git clone https://github.com/MirnaGama/hospital-management-api/`
2. `cd hospital-management-api`
3. `mvn clean install`<br>
It will build the jar file in the target folder
4. `mvn spring-boot:run`<br>
It will compile and run the application on default port (8080)

### Running tests
- `mvn test`<br>
It will executes all the tests.

- `mvn -Dtest=packageName.className test`<br>
It will execute only one test class

- `mvn -Dtest=packageName.className#methodName test`<br>
It will run only one test method from one test class

### Features - v1.0
- [X] R1 - Doctor Registration
- [X] R2 - List of Doctors
- [X] R3 - Doctor Update
- [X] R4 - Doctor Exclusion
- [X] R5 - Patient Registration
- [X] R6 - List of Patients
- [X] R7 - Patient Update
- [X] R8 - Patient Exclusion
- [X] R9 - Consultation Scheduling
- [X] R10 - Consultation Cancellation

## API Documentation - /swagger-ui/index.html

### authentication

#### POST - [**/api/auth/register**] - Register a new user

- **Body:**
```
{   
    ""login"" (string, required),  
    ""password"" (string, required), 
}
```

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |

#### POST - [**/api/auth/login**] - Perform the login

- **Body:**
```
{   
    ""login"" (string, required),  
    ""password"" (string, required), 
}
```

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `403` | _Incorrect credentials_ | 


### doctors

#### POST - [**/api/v1.0/doctors**] - Adds a new doctor

- **Body:**
```
{   
    ""name"" (string, required),  
    ""email"" (string, required),  
    ""crm"" (string, required),  
    ""telephone"" (string, required), 
    ""specialty"" (string, required), 
    ""address"": {   
        ""street"" (string, required),
        ""neighborhood"" (string, required), 
        ""zipCode"" (string, required),  
        ""city"" (string, required),  
        ""state"" (string, required),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional)
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `201` | _Successfully created_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 

#### GET - [**/api/v1.0/doctors/{id}**] - Get an existing doctor

- **Response Body Example:**
```
{
    ""id"": 1,
    ""name"": ""DOCTOR TEST"",
    ""email"": ""test@gmail.com"",
    ""crm"": ""12456"",
    ""telephone"": ""(81) 99999999"",
    ""specialty"": ""ORTHOPEDICS"",
    ""active"": true,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the doctor who will be fetched_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

#### GET - [**/api/v1.0/doctors**] - Get a list of doctors

- **Response Body Example:**
```
{
    ""content"": [
        {
            ""name"": ""Test1"",
            ""email"": ""test1@gmail.com"",
            ""crm"": ""123456"",
            ""specialty"": ""ORTHOPEDICS""
        },
        {
            ""name"": ""Test2"",
            ""email"": ""test2@gmail.com"",
            ""crm"": ""789101"",
            ""specialty"": ""ORTHOPEDICS""
        },
        {
            ""name"": ""Test3"",
            ""email"": ""test3@gmail.com"",
            ""crm"": ""112131"",
            ""specialty"": ""ORTHOPEDICS""
        },
    ],
    ""pageable"": {
        ""pageNumber"": 0,
        ""pageSize"": 10,
        ""sort"": {
            ""sorted"": true,
            ""unsorted"": false,
            ""empty"": false
        },
        ""offset"": 0,
        ""paged"": true,
        ""unpaged"": false
    },
    ""totalPages"": 1,
    ""totalElements"": 3,
    ""last"": true,
    ""sort"": {
        ""sorted"": true,
        ""unsorted"": false,
        ""empty"": false
    },
    ""number"": 0,
    ""size"": 10,
    ""first"": true,
    ""numberOfElements"": 3,
    ""empty"": false
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `size` | _Number of records that should be returned_ |
| `sort` | _Sort by object attribute in descending order_ |
| `page` | _Page number_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `403` | _Unauthorized / Invalid token_ | 


#### PUT - [**/api/v1.0/doctors**] - Updates an existing doctor

- **Body:**
```
{   
    ""id"" (number, required),
    ""name"" (string, optional), 
    ""telephone"" (string, optional),  
    ""address"": {   
        ""street"" (string, optional),
        ""neighborhood"" (string, optional), 
        ""zipcode"" (string, optional),  
        ""city"" (string, optional),  
        ""state"" (string, optional),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional),
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 


#### DELETE - [**/api/v1.0/doctors/{id}**] - Deactivates an existing doctor

- **Response Body Example:**
```
{
    ""id"": 2,
    ""name"": ""DEACTIVATED DOCTOR TEST"",
    ""email"": ""test@gmail.com"",
    ""crm"": ""12456"",
    ""telephone"": ""(81) 99999999"",
    ""specialty"": ""ORTHOPEDICS"",
    ""active"": false,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the doctor who will be deactivated_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

### patients

#### POST - [**/api/v1.0/patients**] - Adds a new patient

- **Body:**
```
{   
    ""name"" (string, required),  
    ""email"" (string, required),  
    ""cpf"" (string, required),  
    ""telephone"" (string, required), 
    ""address"": {   
        ""street"" (string, required),
        ""neighborhood"" (string, required), 
        ""zipCode"" (string, required),  
        ""city"" (string, required),  
        ""state"" (string, required),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional)
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `201` | _Successfully created_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 


#### GET - [**/api/v1.0/patients/{id}**] - Get an existing patient

- **Response Body Example:**
```
{
    ""id"": 1,
    ""name"": ""PATIENT TEST"",
    ""email"": ""test@gmail.com"",
    ""cpf"": ""11111111111"",
    ""telephone"": ""(81) 99999999"",
    ""active"": true,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the patient who will be fetched_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

#### GET - [**/api/v1.0/patients**] - Get a list of patients

- **Response Body Example:**
```
{
    ""content"": [
        {
            ""name"": ""Test1"",
            ""email"": ""test1@gmail.com"",
            ""cpf"": ""123456""
        },
        {
            ""name"": ""Test2"",
            ""email"": ""test2@gmail.com"",
            ""cpf"": ""789101""
        },
        {
            ""name"": ""Test3"",
            ""email"": ""test3@gmail.com"",
            ""cpf"": ""112131""
        },
    ],
    ""pageable"": {
        ""pageNumber"": 0,
        ""pageSize"": 10,
        ""sort"": {
            ""sorted"": true,
            ""unsorted"": false,
            ""empty"": false
        },
        ""offset"": 0,
        ""paged"": true,
        ""unpaged"": false
    },
    ""totalPages"": 1,
    ""totalElements"": 3,
    ""last"": true,
    ""sort"": {
        ""sorted"": true,
        ""unsorted"": false,
        ""empty"": false
    },
    ""number"": 0,
    ""size"": 10,
    ""first"": true,
    ""numberOfElements"": 3,
    ""empty"": false
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `size` | _Number of records that should be returned_ |
| `sort` | _Sort by object attribute in descending order_ |
| `page` | _Page number_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `403` | _Unauthorized / Invalid token_ | 

#### PUT - [**/api/v1.0/patients**] - Updates an existing patient

- **Body:**
```
{   
    ""id"" (number, required),
    ""name"" (string, optional), 
    ""telephone"" (string, optional),  
    ""address"": {   
        ""street"" (string, optional),
        ""neighborhood"" (string, optional), 
        ""zipcode"" (string, optional),  
        ""city"" (string, optional),  
        ""state"" (string, optional),
        ""additionalDetails"" (string, optional),  
        ""houseNumber"" (string, optional),
    } 
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 

#### DELETE - [**/api/v1.0/patients/{id}**] - Deactivates an existing patient

- **Response Body Example:**
```
{
    ""id"": 1,
    ""name"": ""DEACTIVATED PATIENT TEST"",
    ""email"": ""test@gmail.com"",
    ""cpf"": ""11111111111"",
    ""telephone"": ""(81) 99999999"",
    ""active"": false,
    ""address"": {
        ""street"": ""TEST STR."",
        ""neighborhood"": ""TEST NEIGHBORHOOD"",
        ""zipCode"": ""12345678"",
        ""city"": ""TEST CITY"",
        ""state"": ""ST"",
        ""additionalDetails"": null,
        ""houseNumber"": null
    }
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the patient who will be deactivated_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `400` | _Validation Error_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

### consultations

#### POST - [**/api/v1.0/consultations**] - Adds a new consultation

- **Body:**
```
{   
    ""patientId"" (number, required),  
    ""consultationDate"" (string, required),  
    ""doctorId"" (number, required if _specialty_ field is not filled),
    ""specialty"" (string, required if _doctorId_ field is not filled)
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `201` | _Successfully created_ |
| `400` | _Validation Error_ |
| `403` | _Unauthorized / Invalid token_ | 
| `404` | _Entity not found_ |

#### GET - [**/api/v1.0/consultations/{id}**] - Get an existing consultation

- **Response Body Example:**
```
{
    ""id"": 1,
    ""consultationDate"": ""22/04/2024 10:34"",
    ""patient"": {...},
    ""doctor"": {...},
    ""canceled"": false,
    ""reasonCancellation: """"
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Request Parameters:**

| Key  | Description |
| ------------- | ------------- |
| `id` | _Unique identifier of the consultation that will be fetched_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `404` | _Entity not found_ |
| `403` | _Unauthorized / Invalid token_ | 

#### DELETE - [**/api/v1.0/consultations**] - Cancels a scheduled consultation

- **Body:**
```
{   
    ""consultationId"" (number, required),  
    ""reasonCancellation"" (string, required),  
}
```

- **Request Headers:**

| Key  | Description |
| ------------- | ------------- |
| `Authorization` | _Authorization token_ |

- **Responses:**

| Code  | Description |
| ------------- | ------------- |
| `200` | _Successful operation_ |
| `403` | _Unauthorized / Invalid token_ | 
| `404` | _Entity not found_ |
",0,0,12,,maven.yml,11.0
stuetzlec/merrimack_cs_examples,main,"# merrimack_cs_examples
Coding examples used in Merrimack College Computer Science courses
",0,0,1,GPL-3.0,,0.0
lgdd/liferay-client-extensions-samples,main,"![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/lgdd/liferay-client-extensions-samples/builder.yml?label=auto-update&style=flat)
![GitHub last commit](https://img.shields.io/github/last-commit/lgdd/liferay-client-extensions-samples?color=informational&label=latest%20update)

# Liferay Client Extensions Samples

Automatically mirror official client extensions samples you can find in the main repo here: https://github.com/liferay/liferay-portal/tree/master/workspaces/liferay-sample-workspace/client-extensions

The goal of this repository is to ease the process of trying out client extensions samples by removing the burden of cloning liferay-portal & by renaming ambiguous client extensions (e.g. `custom-element-1`).

The official readme file for those samples is mirrored in the [HOW-TO.md](HOW-TO.md).

The new naming is an arbitrary choice based on the description provided by Liferay in the readme file. Here's the correspondance for the renamed client extensions:

| **Original name** | **New name**                                                 			|
|-------------------|-------------------------------------------------------------------|
| liferay-sample-custom-element-1  | liferay-sample-custom-element-vanilla-js      			|
| liferay-sample-custom-element-2  | liferay-sample-custom-element-react-scripts   			|
| liferay-sample-custom-element-3  | liferay-sample-custom-element-angular         			|
| liferay-sample-custom-element-4  | liferay-sample-custom-element-react-dom       			|
| liferay-sample-custom-element-5  | liferay-sample-custom-element-react-clayui    			|
| liferay-sample-etc-frontend      | liferay-sample-etc-frontend-shared-import-map 			|
| liferay-sample-global-js-1       | liferay-sample-global-js-page			           			|
| liferay-sample-global-js-2       | liferay-sample-global-js-page-with-attributes 			|
| liferay-sample-global-js-2       | liferay-sample-global-js-instance      			 			|
| liferay-sample-iframe-1          | liferay-sample-iframe-counter                 			|
| liferay-sample-iframe-2          | liferay-sample-iframe-wikipedia               			|
| liferay-sample-theme-css-1       | liferay-sample-theme-css-styled               			|
| liferay-sample-theme-css-2       | liferay-sample-theme-css-unstyled             			|
| liferay-sample-theme-css-3       | liferay-sample-theme-css-token-definition     			|
| liferay-sample-theme-css-4       | liferay-sample-theme-css-unstyled-token-definition |
| liferay-sample-theme-spritemap-1 | liferay-sample-theme-spritemap-single-svg     			|
| liferay-sample-theme-spritemap-2 | liferay-sample-theme-spritemap-multiple-svg   			|

## Aditional information

If the build fails because of the Node version, you can force the use of a specific version by changing the build.gradle with something like:

```gradle
apply plugin: ""com.liferay.node""

node {
	nodeVersion = ""20.10.0""
	global = false
}
```
> Note that you can apply this for a specific client extension or all client extensions if you change the value in the parent folder (`client-extensions` or your liferay workpace).",0,0,1,MIT,builder.yml,1.0
MehVahdJukaar/polytone,1.21.3,"## Polytone
[![polytone_banner](https://github.com/MehVahdJukaar/polytone/assets/24719182/7c5bb84a-5aa8-4883-9e23-c27e8ce60c22)](https://legacy.curseforge.com/minecraft/mc-mods/polytone)

Polytone is a powerful client-side customization mod which allows tweaking various aspect with the game via Resource Packs

These include:

* Customize Map Colors 🗺️
* Customize Dye Colors 🖌️
* Change Block Sounds 🎵
* Custom Colormaps 🎨
* Block Offset Type 📐
* Customize Biome Effects 🌊

For some things the mod also offers backwards compatibility with the system previously offered by Optifine (color.properties file), allowing said features from existing packs to work aswell

The mod is designed to be fast and as lightweight as possible while keeping the most customization it can. 
Not only does it offer a replacement for color.properties system but also offer way, way more features and customization options that were previously not available.

The mod can work both in VANILLA and in MODDED environment, working flawlessly with ANY Biome, Particle, Blocks and so on, unlike what previous mods did.

The mod is meant to be used by anyone


For extensive documentation follow the mod Wiki here

https://github.com/MehVahdJukaar/polytone/wiki/Custom-Colors

https://github.com/MehVahdJukaar/polytone/wiki/Custom-Block-Properties

https://github.com/MehVahdJukaar/polytone/wiki/Custom-Biome-Effects
",0,30,9,NOASSERTION,,7.0
guandasheng/adguardhome,main,"<div align=""center"">
<h1 align=""center"">TheBestAdrules<br></h1>
  <p>TheBestAdrules，适用于Adguard Home的去广告dns规则，由关圣云®整理上游优秀的规则，合并去重而来，集百家之所长，取其精华去其糟粕。
关圣云®官网https://dns.dns1.top 官方微信群及QQ群见官网公布。
关圣云®DNS，一个人人可加入的公益去广告dns团队，目前拥有7条公益dns节点。
捐赠，或者提供服务器均可加入“关圣云®爱发电”团队。 
由于目前网络上发布的规则众多，逐个添加难免有重复的，而且不方便维护，因此创建此仓库，方便关圣云更新dns规则，也可以方便其他自建dns的小伙伴一键导入。
  </p>
</h1>
<p>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/last-commit/guandasheng/TheBestAdrules?style=flat-square"" alt=""last update"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/forks/guandasheng/TheBestAdrules?style=flat-square"" alt=""forks"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/stars/guandasheng/TheBestAdrules?style=flat-square"" alt=""stars"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules/issues/"">
    <img src=""https://img.shields.io/github/issues/guandasheng/TheBestAdrules?style=flat-square"" alt=""open issues"" />
  </a>
  <a href=""https://github.com/guandasheng/TheBestAdrules"">
    <img src=""https://img.shields.io/github/license/guandasheng/TheBestAdrules?style=flat-square"" alt=""license"" />
  </a>
</p>

<h4>
    <a href=""#a"">规则订阅</a>
  <span> · </span>
    <a href=""#b"">上游列表</a>
  <span> · </span>
    <a href=""#c"">拦截效果</a>
  <span> · </span>
    <a href=""#d"">完善项目</a>
  </h4>

</div>

<h2 id=""a"">🎯 规则订阅</h2>

```
更新时间: 2024-01-05 16:47:17 （北京时间） 

拦截规则数量: 786040 
白名单规则数量: 7263 
``` 
<details open>
<summary>规则列表</summary>
<ul>
  
- **[黑名单规则（Github）](https://raw.githubusercontent.com/guandasheng/TheBestAdrules/main/rule/all.txt)**
- **[黑名单规则(CF国内加速-推荐)](https://github.guanmengkai.bf/https://raw.githubusercontent.com/guandasheng/TheBestAdrules/main/rule/all.txt)**
- **[黑名单规则(Gitee国内加速-延迟12H)](https://gitee.com/guanmengkai/TheBestAdrules/raw/main/rule/all.txt)**

</ul>
</details>



<h2 id=""c"">🚫 拦截效果</h2>

[AdBlock Tester](https://adblock-tester.com)

[Block Ads! Adblock test](https://blockads.fivefilters.org/)

[Ad Blocker Test](https://d3ward.github.io/toolz/adblock.html)

<h2 id=""d"">💬 完善项目</h2>

大家可以提交 Issue (不及时)
或者加入微信QQ群（及时）
QQ群号786113957
微信群加gmk2099备注dns
来帮助我完善规则 我审核之后会加入到规则，如果规则有误杀我会尽快处理



**提交范围**

- 漏拦截的广告
- 误杀的网站


",0,0,1,MIT,auto-update.yml,0.0
sameh-tarek/Fawry-Internship,main,"# Fawry Full Stack Engineering Internship

<details>
  <summary>Click to view Fawry image</summary>
  
  ![Fawry](https://github.com/user-attachments/assets/0c4189f6-cdea-4a4f-984a-90a2520f661c)
  
</details>


## About 

This repository serves as a record of the resources and tasks I'm working on during my internship at [Fawry](https://www.fawry.com/). My focus is on mastering full-stack development using **Spring Boot** and **Angular**. By documenting my learning journey, I hope to keep things organized and make it easier for others to access valuable knowledge. I believe that the content shared here will benefit anyone interested in full-stack development and contribute to the broader learning community.

## Table of Contents

| Week         | Content                                              |
|--------------|------------------------------------------------------|
| 01           | [Week 01](./Week01#readme)                           |
| 02           | [Week 02](./Week02#readme)                           |
| 03           | [Week 03](./Week03#readme)                           |
| 04           | [Week 04](./Week04#readme)                           |
| 05           | [Week 05](./Week05#readme)                           |
| 06           | [Week 06](./Week06#readme)                           |
| Final Project| [Final Project](https://github.com/Fawry-Internship)  |

## Exploration Tips
- Explore the weekly sections to find detailed insights and resources for each phase of the internship. 🕵️‍♂️
- The resources shared include articles, videos, and documentation that I personally found useful for learning full-stack development. 📚


<details>
  <summary>Some Memorable pictures</summary>
  
  ![IMG-20240419-WA0031](https://github.com/user-attachments/assets/d4c6f53f-c781-4557-b2a2-b681dab0a01c)
  ![1714424120186](https://github.com/user-attachments/assets/4320e0df-a27b-4c0a-bc6c-dc53ce23e0de)

</details>
",0,0,2,,,4.0
DomainDrivers/dd-java,main,,0,0,1,GPL-3.0,,0.0
Apress/ChatGPT-for-Java,main,"# Apress Source Code

This repository accompanies [*ChatGPT for Java*](https://www.link.springer.com/book/10.1007/979-8-8688-0116-7) by Bruce Hopkins (Apress, 2024).

[comment]: #cover
![Cover image](979-8-8688-0115-0.jpg)

Download the files as a zip using the green button, or clone the repository to your machine using Git.

## Releases

Release v1.0 corresponds to the code in the published book, without corrections or updates.

## Contributions

See the file Contributing.md for more information on how you can contribute to this repository.",1,0,1,NOASSERTION,,0.0
ttoklip/BackEnd,develop,,3,2,4,,"deploy-ec2.yml,deploy-ecs-previous.txt",164.0
koupleless/koupleless,main,"[![Coverage Status](https://codecov.io/gh/koupleless/koupleless/branch/main/graph/badge.svg)](https://codecov.io/gh/koupleless/koupleless/branch/main/graph/badge.svg)
![license](https://img.shields.io/badge/license-Apache--2.0-green.svg)
![Maven Central](https://img.shields.io/maven-central/v/com.alipay.sofa.koupleless/koupleless-runtime)

<h1 align=""center"">Koupleless: Modular Development Framework and Serving Platform</h1>

<div align=""center"">

English | [简体中文](./README-zh_CN.md)

</div>

Would you like your application to start in just 10 seconds, consuming only 20MB of memory? Have you encountered issues with large applications causing collaboration bottlenecks and low release efficiency? Are you struggling with the high resource and maintenance costs associated with numerous small applications? If you're facing these challenges, then Koupleless might be the solution you're looking for. Koupleless approaches application architecture from a modular perspective, offering an extremely low-cost solution to address pain points encountered throughout the entire lifecycle of application development, operation, and execution:

1. Excessive application fragmentation leading to high machine and long-term maintenance costs
2. Insufficient application fragmentation causing collaboration bottlenecks
3. Lengthy application build, startup, and deployment times resulting in low iteration efficiency
4. Severe fragmentation of SDK versions with high upgrade costs and long cycles
5. High costs associated with building platforms and middle platforms, as well as difficulties in business asset precipitation and architectural constraints
6. Long microservice chains leading to poor call performance
7. High costs associated with microservice decomposition and evolution

How does Koupleless address these issues? Koupleless vertically and horizontally splits traditional applications, with the vertical split separating the base and the horizontal split separating multiple modules. The base shields modules from infrastructure concerns, while modules contain only the business-specific portion, enabling quick startup and insulating them from infrastructure concerns, allowing module developers to experience a Serverless-like environment. Koupleless thus evolves into a low-cost, Serverless solution by refining the granularity of development and operations while shielding infrastructure. For detailed explanations of the principles, please refer to the official website.
Further detailed explanations of the principles are available on [the official website](https://koupleless.io/docs/introduction/architecture/arch-principle/).

![image](https://github.com/koupleless/koupleless/assets/3754074/004c0fa5-62f6-42d7-a77e-f7152ac89248)

The most important aspect is that Koupleless can **assist existing applications** in evolving into a modular development model **at an extremely low cost**, addressing the aforementioned issues and helping businesses reduce costs, increase efficiency, and enhance competitiveness.

## The Advantages of Koupleless

Koupleless is a mature development framework and operational scheduling platform capability that has been refined internally within Ant Group for 5 years. Compared to traditional image-based application models, it offers approximately 10 times improvement in development, operations, and runtime calling. Summarized into 5 key features: Fast, Cost-efficient, Flexible deployment, Smooth evolution, and Production-scale validation.

<img width=""788"" alt=""image"" src=""https://github.com/sofastack/sofa-serverless/assets/3754074/11d1d662-d33b-482b-946b-bf600aeb34da"">

Here are performance data comparing modular development and deployment with traditional image-based approaches for an actual production application.

<img width=""600"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/913a6f11-54cb-4c8b-b417-d014e53c920a""/>

## What is a Module?

Modules utilize extreme sharing and isolation technologies, which enable hot deployment (updating online code without restarting the machine).

Isolation is achieved through ClassLoader class isolation based on [SOFAArk](https://github.com/sofastack/sofa-ark) and object isolation based on [SpringBoot SpringContext](https://github.com/spring-projects/spring-boot).

Sharing is facilitated by class delegation loading based on [SOFAArk](https://github.com/sofastack/sofa-ark) and cross-SpringContext object lookup and invocation based on SpringBootManager.

So, in physical terms, a module can be considered as one ClassLoader + one SpringContext.

## What is the Base？
The base is just a regular application, same with the original app (such as standard SpringBoot).

## Quick start
Please check [the official website Quick Start](https://koupleless.io/docs/quick-start/).

https://github.com/koupleless/koupleless/assets/3754074/e44c9406-4bd4-4fcf-babc-4ae9e615984e

## Koupleless Components

![image](https://github.com/sofastack/sofa-serverless/assets/101314559/995f1e17-f3be-4672-b1b8-c0c041590fb0)

## Contributing
We appreciate anyone who contribute here together. Please scan the QR code to join the developer collaboration group.

| IAM                        | number      | QR code                                                                                                                          |
|----------------------------|-------------|----------------------------------------------------------------------------------------------------------------------------------|
| DingTalk group (recommand) | 24970018417 | <img width=""256"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/7ba1db74-20c1-43a4-a2ab-d38c99a920cd""> |
| WeChat                     | zzl_ing     | <img width=""256"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/35ebc2bc-86cd-4a24-b12e-e9f44cccc2d7""> |

you can also join us by [discord](https://discord.gg/bqx9RDbSfF)

## Long-term planning and our vision
We hope to further refine and open up these capabilities to be more extreme and applicable to a wider range of scenarios. Help more businesses solve application development problems, achieve cost reduction and efficiency improvement, and ultimately become an excellent research and development framework and solution for global green computing, achieving:

1. Speed as you need
2. Pay as you need
3. Deploy as you need
4. Evolution as you need

<img width=""1069"" alt=""image"" src=""https://github.com/koupleless/koupleless/assets/3754074/17ebd41d-38c7-46e8-a4ba-b6b8bf8f76dd"">
",19,84,16,Apache-2.0,sync_submodules_commits.yml,90.0
alegian/thaumcraft7,main,"# Thaumcraft 7 (Thavma)

## Preface

A complete rewrite & re-imagination of azanor's Thaumcraft for modern versions of Minecraft.
I am in no way associated with azanor and will not use any of their assets,
except perhaps temporarily the mod name (which I will also change upon release).

What version of Thaumcraft am I rewriting? None specifically. I am going to implement what
I enjoyed most from each version (my favorite being Thaumcraft 4.2). I plan to add
features that did not exist in the original mod, and change old features to give them
fresh new mechanics, visuals and names.

I happen to be Greek, Thaumaturgy literally means ""the act of performing miracles"".
Good pick azanor ;-)

## Credit

- Azanor, for being the original author of my favorite mod
- The NeoForge Project discord community, for answering my questions countless times
- Team CoFH, for allowing anyone to learn from their code. Also, modified versions of their license and their package
  structure are used here
- McJTy, for their minecraft modding tutorials
- The JEI team, for being open source. Their codebase taught me how to use custom Texture Atlases
- The https://game-icons.net/ team, for their free icons, under
  the [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/) license. All icons were taken as-is
- Reaves, for their awesome original models & textures
- Gigaherz, for
  their [custom core shader tutorial gist](https://gist.github.com/gigaherz/b8756ff463541f07a644ef8f14cb10f5), pretty
  much the only resource online that describes this process
- The Artifacts team, for being open source. Their codebase taught me how to use Attribute Modifiers and how to render
  custom cuboids on HumanoidModels

## License

This repository uses a modified version of the CoFH ""Don't Be a Jerk"" License v2. [Read the file](LICENSE.md) for
details.
",0,0,1,NOASSERTION,build.yml,2.0
Eanya-Tonic/CCTV_Viewer,master,"<p align=""center""> <img src=""https://github.com/Eanya-Tonic/CCTV_Viewer/blob/master/app/src/main/res/drawable/icon.png"" style=""width:200px;"" /> </p>  <h1 align=""center"">电视浏览器</h1>  <p align=""center"">一个电视机顶盒及Android TV收看网页视频的浏览器 </p>


## 下载安装包
从Github Release下载：https://github.com/Eanya-Tonic/CCTV_Viewer/releases/latest
<br>
从百度网盘下载：https://pan.baidu.com/s/1e5wMCorJIp9oi5yN8mJ1KA?pwd=qozp 提取码：qozp
<br>
从 VoidTech 实验室下载（X5 内核 1.7.4 测试版）：https://void-tech.cn/wp-content/uploads/2024/10/CCTV_Viewer_1.7.4-X5Beta.zip

## 演示视频
**B站：**

[央视浏览器v1.2更新——支持遥控器的电视直播观看软件](https://www.bilibili.com/video/BV1Gc41187D6)

[央视浏览器——一款支持遥控器的便捷电视直播观看软件](https://www.bilibili.com/video/BV1Cg4y1r7Hv)

## 使用方法
**电视盒子：**

![2024-10-03_23-09-27](https://github.com/user-attachments/assets/9dbda531-1976-438a-b293-fd5b5fa002e6#pic_center)

<div align=center><p>频道切换列表界面</p></div>

![2024-10-03_23-09-43](https://github.com/user-attachments/assets/0771c85a-9957-4554-bb98-ebab6f49dba8#pic_center)

<div align=center><p>菜单键功能菜单</p></div>

![2024-10-03_23-09-51](https://github.com/user-attachments/assets/bca3b30b-7ca4-4fa3-a975-05230011ff2f#pic_center)

![2024-10-03_23-09-59](https://github.com/user-attachments/assets/a9f3b5a8-5546-4e95-9eef-ba0e389fd22d#pic_center)

<div align=center><p>设置界面</p></div>

使用上下键切换频道，使用确认键显示当前频道和节目信息、并打开频道切换列表，单击菜单键打开功能菜单，输入数字键换到指定台，双击返回键退出程序。

**其他设备：**

使用键盘方向键上下控制切换频道，使用Enter键显示当前频道和节目信息、并打开频道切换列表，单击键盘M键打开功能菜单，单击键盘B键触发返回，输入数字键换到指定台。

## 目前可看网页

1 CCTV-1 综合

2 CCTV-2 财经

3 CCTV-3 综艺

4 CCTV-4 中文国际（亚）

5 CCTV-5 体育

6 CCTV-6 电影

7 CCTV-7 国防军事

8 CCTV-8 电视剧

9 CCTV-9 纪录

10 CCTV-10 科教

11 CCTV-11 戏曲

12 CCTV-12 社会与法

13 CCTV-13 新闻

14 CCTV-14 少儿

15 CCTV-15 音乐

16 CCTV-16 奥林匹克

17 CCTV-17 农业农村

18 CCTV-5+ 体育赛事

19 CCTV-4 中文国际（欧）

20 CCTV-4 中文国际（美）

21 北京卫视

22 江苏卫视

23 东方卫视

24 浙江卫视

25 湖南卫视

26 湖北卫视

27 广东卫视

28 广西卫视

29 黑龙江卫视

30 海南卫视

31 重庆卫视

32 深圳卫视

33 四川卫视

34 河南卫视

35 福建东南卫视

36 贵州卫视

37 江西卫视

38 辽宁卫视

39 安徽卫视

40 河北卫视

41 山东卫视

## 更新日志
**v1.7.3 更新日志（2024.10.09）**

1.【紧急】修复安卓5以下设备设置闪退导致无法安装X5内核

2.在安卓4.4.2测试X5内核可正常安装启动和播放网页视频

**v1.7.2 更新日志（2024.10.06）**

1.尝试修复本地X5内核安装问题，修改内核包存储目录

2.修改设置中启用X5按钮的用户交互，提升使用体验

3.增加一个X5安装界面，尝试安装X5内核直至安装完成（可能导致app无限重启，如出现无限app重启，清除全部数据或卸载重装app即可恢复系统WebView）

4.默认关闭双缓冲加载

5.降低安装限制到SDK 17

6.64位设备需要46XXX版本的X5内核，但32位设备需要45XXX版本的内核，考虑到大多数需要X5内核的设备都是32位机器，故在apk集成32位X5内核，并在64位设备暂时禁用X5安装（经测试，在64位设备安装32位X5内核会导致闪退和无限重启）

**v1.7.1 更新日志（2024.10.03）**

1.修复应用程序版本号未更新

2.允许用户设置是否按上下键时直接换台，而不是弹出换台抽屉

3.允许用户设置是否在换台抽屉中按返回键时直接关闭抽屉，而不是返回上一级

4.设置界面布局优化

5.尝试修复低网速环境下页面无法正常加载问题

**v1.7 更新日志（2024.09.22）**

_体验调整_

1.精简Android Studio创建Android TV项目时产生的无用模板文件

2.增加一个设置二级界面，增加可自定义换台抽屉字体大小、可定义是否开启双缓冲、可自主决定是否启用X5（仅可用一次）三个选项

3.换台抽屉布局文件调整，提供较小、适中（默认）、偏大、特大四种字体大小可自定义

4.加入双标签页缓冲加载，使用两个WebView分别加载，换台时继续收看上一个频道等待加载；性能较弱设备可在设置中关闭该功能，提升使用体验

5.加入系统webview开关，可自主决定是否启用X5，如系统Webview可以播放则无需关闭该开关（关闭后无法重新开启，关闭后重启后即进入尝试加载X5内核模式）

6.上下键打开换台抽屉，再按确认后换台，避免误触

7.优化换台体验，修改js代码，提高换台速度

8优化央视网换台速度，精简网页元素

9.尝试启用X5无图模式，提高网页加载速度

10.尝试启用硬件加速

11.底部菜单最后一个按钮由“退出程序”修改为“打开设置”

12.取消自动开始播放定时任务，降低程序运行资源占用

_修复Bug_

1.修复x5内核下异常暂停

2.修复WebView抢占焦点

3.修正双击返回逻辑错误

4.修复后台错误驻留

5.启动白屏颜色降低

6.精简换台抽屉布局文件，改为程序生成内容，边框设为自适应

**建议卸载旧版后重新安装，避免出现无法安装、闪退等可能的错误；安卓版本较低的机器，如果已经能够正常使用旧版本，不建议卸载旧版更新，避免新版本无法运行，请以稳定使用优先**

**v1.6.1 更新日志 (2024.06.17)**

1.修复闪退的问题

**v1.6.1 更新日志 (2024.06.06)**

1.修复无限全屏的问题

**v1.6 更新日志 (2024.06.06)**

1.【严重】无法打开地方频道

2.修复无法在程序内修改音量的问题

3.不再自动切换清晰度

4.启用网页缓存（仅系统 WebView）

5.显示系统 WebView 版本号（安卓 7及以上版本才能显示）

6.支持在 GitHub Action 构建，方便调试发版，或者魔改

7.加载网页时禁用自动加载图片，减少卡顿（仅系统 WebView）

**v1.5 更新日志（2024.01.27）**

1.更新菜单键事件逻辑，加入一个底部菜单，并取消原本复杂的双击、单击等机制，使程序更加易用。

2.修改换台菜单逻辑，将原本的弹出界面调整为二级抽屉式菜单，同时改为按确认键触发，更加符合用户的使用习惯；在打开换台界面时，自动切换到目前正在播放的频道。

3.增加一个提示，在换台时会提示目前调用的是系统Webview内核还是腾讯X5内核。

4.修复偶发性的卫视频道播放静音问题。

5.额外更新一个调用系统WebView的版本

**v1.4 更新日志（2024.01.21）**

1.增加央视频的北京卫视、江苏卫视等21个地方卫视频道。

2.尝试修复视频播放暂停的问题，暂时恢复确认键的暂停功能，但是暂停后会自动重新开始播放，仅用于增强兼容性。

3.增加双击确认键可以调整全屏/退出全屏的功能。

4.遥控器左右键可以缩放网页，增强应用兼容性。

5.修改图标、应用名称、增加leanback设置，在原生Android TV启动器上也可以正常显示图标。

6.增加频道选择界面的台号显示，方便数字键换台使用。

7.最低安装限制调整为安卓4.4，API 19。

8.本次更新中，出现了偶发性的卫视频道缩放不正常问题，经测试退出应用再重新打开后可以解决；由于较难复现，我目前不知道问题产生的原因。

**v1.3 更新日志（2024.01.20）**

1.调用本地x5内核，将x5内核集成到安装包中，提高x5内核调用的成功率。

2.自动播放视频，并且禁用确认键暂停功能。

3.修复清晰度选择导致的无法全屏和播放的问题，解决CCTV-6、CCTV-3两个频道由于没有超清清晰度无法选择导致不能全屏和正常播放的问题。 

4.增加频道选择菜单，按菜单键激活后可直接选择需要切换的频道。 

5.修改操作逻辑，按确定键显示当前频道信息、单击菜单键显示频道列表、双击菜单键刷新当前网页。 

**v1.2 更新日志（2024.01.05）**

1.在换台时显示一个“正在切换频道”覆盖层，优化使用体验

2.增加换台后当前频道和当前频道节目预告提示

3.修改按键逻辑，单击菜单键改为显示当前频道和节目信息，长按菜单键改为刷新当前页面

4.改为使用腾讯x5内核，提高程序兼容性

> 下载并安装本软件，即代表您已阅读并同意[腾讯浏览服务X5网页引擎隐私保护规则](https://rule.tencent.com/rule/preview/1c4e2b4b-d0f6-4a75-a5c6-1cfce00a390d)

**v1.1 更新日志（2024.01.04）**

1.优化返回退出逻辑，需要按两次返回键才会退出，避免误触

2.增加数字键换台功能，用户可以通过遥控器上的数字键直接输入台号换台。备注：18号 CCTV-5+ 体育赛事、19号 CCTV-4 中文国际（欧）、20号 CCTV-4 中文国际（美）

",14,58,1,,gradle.yml,14.0
spon-us/SponUs-BE,develop,"# Spon-us | 기업과 학생의 만남

![sponus](https://github.com/spon-us/SponUs-BE/assets/121790935/3e0b7908-187a-486a-9802-f85d79864112)
Spon-us(스포너스)는 대학생 단체와 기업 간의 협찬, 제휴, 그리고 연계 프로그램을 원활히 이끌어가는 서비스입니다.

### 📎 [API 명세서 v1](https://spon-us.notion.site/API-f9abab1bc7f448d4bcc010cfb935c5f9?pvs=4)

### 📎 API 명세서 v2 (개발중)

<br>

## ✨ 팀원

|                         앤디/이유제                         |                            마루/김대휘                            |                         소피/이소정                         |                          세헌/호세헌                          |                        태태/권정태                        |
|:------------------------------------------------------:|:------------------------------------------------------------:|:------------------------------------------------------:|:--------------------------------------------------------:|:----------------------------------------------------:|
|  <img src=""https://github.com/dbwp031.png?size=100"">   |    <img src=""https://github.com/kimday0326.png?size=100"">    |  <img src=""https://github.com/xxoznge.png?size=100"">   |   <img src=""https://github.com/seheonnn.png?size=100"">   | <img src=""https://github.com/oxdjww.png?size=100"">:  |
|            Part Lead<br/>Backend Developer             |                      Backend Developer                       |                   Backend Developer                    |                    Backend Developer                     |                  Backend Developer                   |
| <center>[dbwp031](https://github.com/dbwp031)</center> | <center>[kimday0326](https://github.com/kimday0326)</center> | <center>[xxoznge](https://github.com/xxoznge)</center> | <center>[seheonnn](https://github.com/seheonnn)</center> | <center>[oxdjww](https://github.com/oxdjww)</center> |

## 📆 프로젝트 기간

- 1차 개발(MVP): **2024.01.05 ~ 2024.02.19**
- 2차 개발(리빌딩): **2024.05 ~ ing**

<br>

## 🛠️ 기술 스택

### 개발 환경

<p>
<img src=""https://img.shields.io/badge/JAVA 17-007396?style=for-the-badge&logo=java&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring-6DB33F?style=for-the-badge&logo=Spring&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring Boot 3-6DB33F?style=for-the-badge&logo=Spring boot&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring Security 6-6DB33F?style=for-the-badge&logo=Spring Security&logoColor=white"">
<img src=""https://img.shields.io/badge/Spring Data JPA-6DB33F?style=for-the-badge&logo=Spring&logoColor=white"">
<img src=""https://img.shields.io/badge/QueryDsl-3B66BC?style=for-the-badge&logo=QueryDsl&logoColor=white"">
</p>

<p>
<img src=""https://img.shields.io/badge/MySql-00758F?style=for-the-badge&logo=MySql&logoColor=white"">
<img src=""https://img.shields.io/badge/Redis-DC382D?style=for-the-badge&logo=redis&logoColor=white"">
</p>

<p>
<img src=""https://img.shields.io/badge/Gradle-02303A?style=for-the-badge&logo=gradle&logoColor=white"">
<img src=""https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white"">
<img src=""https://img.shields.io/badge/EC2-FF9900?style=for-the-badge&logo=AMAZON EC2&logoColor=white"">
<img src=""https://img.shields.io/badge/RDS-527FFF?style=for-the-badge&logo=AMAZON RDS&logoColor=white"">
<img src=""https://img.shields.io/badge/S3-569A31?style=for-the-badge&logo=AMAZON S3&logoColor=white"">
</p>

### 협업 도구

<p>
<img src=""https://img.shields.io/badge/Git-F05032?style=for-the-badge&logo=Git&logoColor=white"">
<img src=""https://img.shields.io/badge/Github-000000?style=for-the-badge&logo=github&logoColor=white"">
<img src=""https://img.shields.io/badge/Slack-4A154B?style=for-the-badge&logo=slack&logoColor=white"">
<img src=""https://img.shields.io/badge/Notion-000000?style=for-the-badge&logo=notion&logoColor=white"">
<img src=""https://img.shields.io/badge/Swagger-85EA2D?style=for-the-badge&logo=swagger&logoColor=white"">
<img src=""https://img.shields.io/badge/Discord-5865FE?style=for-the-badge&logo=discord&logoColor=white"">
</p>

<br>

## 🏗️ 아키텍처

<img width=""1646"" alt=""arch"" src=""https://github.com/user-attachments/assets/b8663103-4bcf-4e44-bb22-9c33ef464fa9"">


<br>

## 📢 커밋 컨벤션

| 태그이름       | 내용                                          |
|------------|---------------------------------------------|
| `feat`     | 새로운 기능을 추가할 경우                              |
| `fix `     | 버그를 고친 경우                                   |
| `!hotfix`  | 급하게 치명적인 버그를 고쳐야하는 경우                       |
| `style`    | 코드 포맷 변경, 세미 콜론 누락, 코드 수정이 없는 경우            |
| `refactor` | 코드 리팩토링                                     |
| `comment`  | 필요한 주석 추가 및 변경                              |
| `docs`	    | 문서, Swagger 를 수정한 경우                        |
| `test`     | 테스트 추가, 테스트 리팩토링(프로덕션 코드 변경 X)              |
| `chore`	   | 빌드 태스트 업데이트, 패키지 매니저를 설정하는 경우(프로덕션 코드 변경 X) |
| `rename`   | 파일 혹은 폴더명을 수정하거나 옮기는 작업만인 경우                |
| `remove`   | 파일을 삭제하는 작업만 수행한 경우                         |
| `ci`       | 배포 방식 수정 및 새로 추가 / 기존 배포 스크립트 수정            |
",1,3,3,,"cd_gradle.yml,ci_gradle.yml",180.0
d1tto/Rengar,master,"# Rengar

**Rengar** is the prototype of paper ""Effective ReDoS Detection by Principled Vulnerability Modeling and Exploit Generation"" published in S&P'23.",0,1,1,,,0.0
flynt-3650/java-exam-practice,main,"# README

**ДИСКЛЕЙМЕР: СОЗДАТЕЛЬ И КОНТРИБЬЮТОРЫ НЕ ОДОБРЯЮТ СПИСЫВАНИЕ НА ЭКЗАМЕНАХ.
РЕПОЗИТОРИЙ СОЗДАН ИСКЛЮЧИТЕЛЬНО В ОБРАЗОВАТЕЛЬНЫХ ЦЕЛЯХ. ДУМАЙТЕ СВОЕЙ ГОЛОВОЙ.**

Чтобы найти решение интересующего задания:

1. Зайдите в файл ""[Tasks.md](Tasks.md)"" и используйте сочетание клавиш CTRL + F для поиска текста вашего задания в файле.
2. Сопоставьте номер билета с названием пакета в папке ""[src](src)"".


Для того, чтобы склонировать репозиторий на свой ПК, откройте Git Bash в месте куда вы хотите сохранить реп. и введите: `git clone https://github.com/fl-3650/JavaExamPractice.git`. Лайфхак: нажмите по пустому месту в начале поля ввода команды правой кнопкой мыши, команда вставится автоматически.

",0,0,1,,,3.0
Rozmir-Rohi/mo-creatures-legacy,main,"# Mo Creatures Legacy
<strong> Project Status:</strong> On Hold (future update(s) planned)

<br><br>


The final version of Mo' Creatures for 1.7.10 was unfinished and was riddled with bugs. This project fixes that.

The main aim of Mo' Creatures Legacy is to provide a fully working legacy version of Mo' Creatures for 1.7.10.

<br><br>

<strong> DISCLAIMER: </strong>
* This project is not endorsed by Dr Zhark or anyone from the original Mo' Creatures team.
* This project does not backport features from newer versions of Mo' Creatures.
 

 
## How to Install:
Mo' Creatures Legacy is a stand-alone mod and does NOT require any other mods as dependencies.
Assuming you have Java 8 installed on your computer and Forge installed for 1.7.10, just download the mod and put it into the mods folder. 

Do NOT try to use this mod with the Custom Mob Spawner mod, if you need to adjust entity spawns use the Just Another Mob Spawner instead.

Do NOT try to load this mod into a world that previously had the original Mo' Creatures mod.

 


<details>
<summary><h2>Credits & Assets Used:</h2></summary>
<strong>DrZhark, Bloodshot, BlockDaddy and remaining Original Mo' Creatures contributers </strong> - This project is a modified version of DrZhark's Mo' Creatures Mod v6.3.1 for Minecraft 1.7.10 and is licensed under the ""GNU General Public License v3.0 and Further Conditions"" custom license which satisfies the GNU General Public License Version 3 as per the conditions of the original project's license. DrZhark's Mo' Creatures Mod Original Forum Post:  http://www.minecraftforum.net/viewtopic.php?f=25&t=86929
<br><br>

<strong> crazyspacekid </strong> - Entity textures were overhauled with the application of modified textures from the Mo' Creatures 16x texture pack. This asset was used with permission from the owner and proof of permission can be found inside the assets folder of the mod jar archive as an image file. All changes to original 16x textures have been documented in the ""Rozmirs modifications to Mo Creature 16x Textures"" text file inside the assets folder of the jar archive. Curseforge Project Link: https://www.curseforge.com/minecraft/texture-packs/mo-creatures-16x
<br><br>
 
<strong> Azanor </strong>  - Thaumcraft 4.2.2 API was used as a library under the MIT License to add Thaumcraft aspects to mod content.
<br><br>

<strong> WildBamaBoy </strong> - The horse achievement icon textures were directly based of the Cooconed Horse item texture from the Spider Queen mod. This asset was used under the Public Domain license through the condition of section 8 of the MCA Minecraft Mod License v1.1.1 (""In the event that no public declaration of the mod’s end-of-life is made within 1 year after the previous update, announcement regarding status, or official statement from an author, the mod is released into the public domain.""). Additionally, all the skins for the Minecraft Comes Alive Witchery werewolf villager forms were sourced from the Minecraft Comes Alive mod, the use of these assets are satisfied through the application of the ""GNU General Public License v3.0 and Further Conditions"" custom license which satisfies the GNU General Public License Version 3 of the Minecraft Comes Alive mod.
<br><br>
 
<strong> ganymedes01 </strong> - Code for proper damaging and item dropping for kitty litter box, kitty bed, and fish bowl was sourced from EntityArmourStand.class from the etfuturum mod. This asset was used under the Public Domain license.
<br><br>

<strong> Thornack </strong> - Provided the code for replacing the Witchery player wolf and player werewolf models with the Mo Creatures dire wolf and werewolf models (https://forums.minecraftforge.net/topic/28566-1710-how-to-change-player-model-and-texture/).
<br><br>
 
<strong> TheAetherTeam </strong> - The AchievementsAether.class and Aether.class code from the 1.7.10 Aether Mod helped me understand how to add an achievements class that is separate to the main mod class file. This asset was used under the GNU Lesser General Public License v3.0 through the custom license condition of The Aether mod ""The source code of The Aether mod for Minecraft 1.7+ is under the LGPL v3.0 license"".TheAetherTeam - The AchievementsAether.class and Aether.class code from the 1.7.10 Aether Mod helped me understand how to add an achievements class that is separate to the main mod class file. This asset was used under the GNU Lesser General Public License v3.0 through the custom license condition of The Aether mod ""The source code of The Aether mod for Minecraft 1.7+ is under the LGPL v3.0 license"".The different custom license of this project is permitted under the GNU Lesser General Public License v3.0 from the following sections:

	GNU Lesser General Public License v3.0 - Section 0:
		   ""...""The Library"" refers to a covered work governed by this License"",
		   ""A “Combined Work” is a work produced by combining or linking an Application with the Library""

	GNU Lesser General Public License v3.0 - Section 4:
		""You may convey a Combined Work under terms of your choice"" provided that:
			- Private modifications are allowed.
 		     	- Notice is given that the Library is used
		      	- A copy of the GNU Lesser Public License is provided along with a copy of the GNU General Public License.
 		     	- Access is provided to the source code of the Library.


A copy of the GNU Lesser General Public License (1.7.10 Aether Source Code License) can be found in the ""Negligable Licenses"" folder inside the assets folder of the mod jar archive. 

A copy of the GNU General Public license can be found inside the assets folder of the mod jar archive.

The source code for the 1.7.10 Aether mod can be found here: https://github.com/The-Aether-Team/The-Aether-Archived/tree/1.7.10
 
<br><br><br>  
 
 <h3> Sounds Files: </h3>
 
 <strong> Mike Koenig </strong> - Kitty using Litter box sound was sourced from: https://soundbible.com/313-Dig-In-A-Cat-Litter-Box.html. This was used under the CC BY 3.0 DEED Attribution 3.0 Unported license. A different license for this project as a whole is acceptable under section 4a ""this does not require the Collection apart from the Work itself to be made subject to the terms of this License"".
 
 <strong> Fesliyan Studios </strong> - Rattle Snake Rattle sound effects were sourced from https://www.fesliyanstudios.com/royalty-free-sound-effects-download/rattlesnake-281 This was used under the Fesliyan Studios Sound Effects Policy license (see ""Negligable Licenses"" folder inside the assets folder of the mod jar archive ).
 
  
 
The following assets were used under the Unlicense license:
 
 Panda Cub Grunt:
 
 - https://quicksounds.com/sound/2742/panda-bear-bark-1
 - https://quicksounds.com/sound/2743/panda-bear-bark-2
 
 
 Panda Cub Hurt & Death: https://www.youtube.com/watch?v=YRmGZIENeq4&ab_channel=audiofreeHD 
 
 Panda Cub Hurt: https://www.youtube.com/watch?v=AyY70jPsZcc&ab_channel=nosoundeffects
 
 
 Panda Adult Grunt: https://www.youtube.com/watch?v=4TANecQTYPY&ab_channel=SFX-SoundEffectsForContentCreators
 
 
 Panda Adult Hurt and Death: https://www.youtube.com/watch?v=i5Y_8s6qDdk&ab_channel=FreeSoundEffect


<br><br><br>

 <h3> Language File Translations: </h3>
	Omgise - Chinese (Simplified) (zh_CN.lang)
	<br><br>
 	Hudhand - Russian (ru_RU.lang)
  
<br><br><br>

<h3> Beta Testers Who Helped Solve Major Bugs: </h3>
	Omgise
 	<br><br>
	quentin452
 	<br><br>
	brandyyn
 	<br><br>
	yoruki_167
  
<br><br><br>
 
 ===========================================================================
  <h3> Original Mo'Creatures Contributor Credits </h3>
 
 
 - Kent C Jensen (BlockDaddy) for his amazing Ogres and fish textures. And for his incredible help with ostriches and fish bowls. He is the main force behind the horse overhaul and did all of the textures and art, as well as many of the ideas for the new horses. He has also been helping with the remodelling and retexturing. Most models and textures on this mod have been done by Kent.
 - blood (Bloodshot    AKA     bloodmc)  for his invaluable help with updating to 1.8.1 and Mo'Creatures SMP, and maintaning the SMP code on MoCreatures 4.2.0
 - ScottKillen for his help with the Extrabiomes XL
 - AtomicStryker for the SMP port for Minecraft 1.2.5
 - Cojomax for his help with adding the sounds without audiomod
 - Freakstricth for his help with the Forge sprites.
 - Resuke for his sprites
 - Vaprtek, for his awesome Horse Model.
 - Dorino1 quack sounds plus painterly pack's duck texture.
 - Macaque for his boar textures.
 - KodaichiZero for his Bunnies!
 - Rondaround: fox idea, AI, sounds and texture
 - _303 and Risugami for their help with ModLoader and AudioMod
 - Corosus for pointing some optimization changes in the code
 - charle88 for shark's model inspiration
 - cdrumer11 for his help with the pink and white dolphin skins

 ===========================================================================

<br><br><br>

## Use of anatawa12's Fork of ForgeGradle 1.2 within Project:
The source code of this project uses anatawa12's fork of ForgeGradle 1.2 as a library under the GNU Lesser General Public License v2.1 (https://choosealicense.com/licenses/lgpl-2.1/).
 

Compiled versions of this mod are permitted under section 5 of the original license, ""A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a ""work that uses the Library"". Such a work...is not a derivative work of the Library""; consequently the conditions of the original license do not apply to the work.


The source code of this mod is permitted under section 6 of the original license, ""you may also combine or link a ""work that uses the Library"" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice"" provided that:
* Private modifications are allowed.
* Notice is given that the Library is used and a copy of it's original license is provided.
* Access is provided to the source code of the Library.


The source code for anatawa12's fork of ForgeGradle 1.2 can be found here: https://github.com/anatawa12/ForgeGradle-1.2

</details>
",1,1,1,NOASSERTION,gradle.yml,24.0
AutoAccountingOrg/Qianji_auto,dev,"
<p align=""center"">
<img src=""https://cdn.jsdelivr.net/gh/dreamncn/picBed@master/uPic/2022_01_02_21_04_42_1641128682_1641128682216_WVHsgT.png"" width=120 style=""text-align:center"">
 <h1 align=""center"">自动记账</h1>
 <h3 align=""center"">🚀一款基于Xposed和无障碍的记账插件</h3>
<p align=""center"">
<img src=""https://img.shields.io/static/v1?label=framework&message=Xposed%2F%E6%97%A0%E9%9A%9C%E7%A2%8D&color=success&style=for-the-badge""/>
 <img src=""https://img.shields.io/static/v1?label=licenes&message=GPL3.0&color=important&style=for-the-badge""/>
 <img src=""https://img.shields.io/github/stars/dreamncn/Qianji_auto.svg?style=for-the-badge""/>
 <img src=""https://img.shields.io/static/v1?label=download&message=44K&color=9cf&style=for-the-badge""/>
</p>
</p>


> 缘起
> 
> 资本在行动，他们用消费主义四处撒网，少年们纷纷卷入陷阱之中，原本富足的少年开始慢慢变穷。
> 
> 少年们很费解，为什么赚的钱越来越多，生活却越来越拮据。
> 
> 少年们找到了阅历丰富的老人，老人告诉他们：你们要学会理财。**理财？**
> 
> 哦！那可真是个大难题。
> 
> 可少年们还是行动了，年轻人总是那么的勇敢。
> 
> 想要理财，首先得弄清每一笔财富的去向。
> 
> 于是，少年们找到了记账软件：[钱迹](https://www.coolapk.com/apk/com.mutangtech.qianji)
> 
> 它是一款好软件。
> 
> 但，记录那些琐碎而零散的消费，会耗费大量的精力。这对于疲惫不堪的少年们来说，简直就是灾难。
> 
> 如果这些工作由机器来完成，那该多好啊！
> 
> 仿佛听到了群山中少年们的呼唤，光芒自迷雾中降生，**自动记账**——他来了！
> 
> 他，是你账单的守护者，记录你的每一笔收支。
> 
> 他，是支付与记账的桥梁，随付随到，从不缺席。
> 
> 无需苦思冥想，无需左右切换，只需在付款后轻轻一点，即可完成记账。
> 
> **自动记账：** 一款真正人性化的插件。


 注意 

 1、自动记账是一款辅助记账软件，基于[钱迹](https://www.coolapk.com/apk/com.mutangtech.qianji)自动记账接口开发。因此本插件需搭配[钱迹](https://www.coolapk.com/apk/com.mutangtech.qianji)App使用。<br/>

 2、自动记账3.0版本中已经加入了对其他记账软件的支持，详情请参考[使用其他记账软件]()



## 📖 文字教程

[点击开始教程](https://auto.ankio.net)


## 📺 视频教程

[点击开始视频教程](https://player.bilibili.com/player.html?aid=289448844&bvid=BV1Hf4y147Yi&cid=303785417&page=1)

## 🛠️ 编译步骤

- 下载源代码到本地

```bash
git clone https://github.com/dreamncn/Qianji_auto
```

- 使用[Android Studio](https://developer.android.com/studio)打开，等待自动配置完成，如出现失败请配置科学上网

- 点击菜单中 `Run` - `Build`

## ⬇️ 下载

- [酷安](https://www.coolapk.com/apk/cn.dreamn.qianji_auto)
- [LSPosed仓库](https://github.com/Xposed-Modules-Repo/cn.dreamn.qianji_auto/releases/tag/v3.2.4)


## 📝 License

Copyright © 2022 [Ankio](https://www.ankio.net).<br />
This project is [GPL3.0](https://github.com/dreamncn/Qianji_auto/blob/master/LICENSE) licensed.




 
",0,5,4,,android-release.yml,0.0
sidduganeshsid/Core-Java,main,"# Core Java Codes
<!--<iframe width=""600"" height=""400"" frameBorder=""0"" src=""https://www.mindmeister.com/maps/public_map_shell/3067400300/core-java-java-se-made-by-sidduganesh?width=600&height=400&z=auto&no_share=1&no_logo=1"" scrolling=""no"" style=""overflow:hidden;margin-bottom:5px"">Your browser is not able to display frames. -->Please visit <a href=""https://www.mindmeister.com/3067400300/core-java-java-se-made-by-sidduganesh"" target=""_blank"">Core Java (Java SE) made by sidduganesh</a> on MindMeister.
",0,0,2,,,1.0
wuchubuzai2018/lantu-pay-sdk,master,"# 蓝兔支付SDK：lantu-pay-sdk

# 一、项目介绍

支持个人用户签约使用的蓝兔支付平台的Java SDK项目。API接口来源：https://www.ltzf.cn/doc

我的邀请注册链接：https://www.ltzf.cn/?invite=owbryg

蓝兔支付申请教程：https://juejin.cn/post/7312273015873732649

# 二、项目内容

针对支持个人签约的蓝兔支付平台的提供的Java SDK工具包，SDK设计思想可以参考开源项目wxjava中相关的类设计，抽取了其中的核心设计。通过这个项目你可以学习到：

1、统一抽象的HTTP请求框架的设计与实现

2、多个模板方法模式、策略模式、建造者设计与实现

3、请求三方时的@Require注解校验设计与实现

4、错误重试的设计与实现

5、泛型的设计与实现

6、请求参数的签名的设计与实现

# 三、工程结构

docs：工程的相关文档

SDK支付的Demo工程：lantu-sdk-demo

SDK的JAVA工程：lantu-sdk-java

Spring Boot Starter工程：lantu-sdk-spring-boot-starter


# 四、功能列表

1、目前正在develop分支进行开发，定期合并到主分支

2、开发进度如下：

- 20231218：开发Starter：Lantu SDK Spring Starter
- 20231229：开发HTTP请求框架：HTTP请求框架与存储层配置
- 20231231：开发PC端二维码下单接口：PC下单支付请求流程
- 20240102：开发订单退款接口：订单退款API
- 20240103：开发订单查询接口：订单查询API

3、目前实现功能如下：

- PC端扫码支付API(LantuWxPayNativeOrderRequest)
- 订单退款API(LantuWxPayRefundOrderRequest)
- 订单查询API(LantuWxPayQueryOrderRequest)
- 查询微信授权连接API(LantuWxPayGetWechatOpenIdRequest)

# 五、使用步骤

1、在业务项目工程中，引入maven依赖，目前需要手动导入，后续会上传到maven仓库:

```
<dependency>
    <groupId>cn.ltzf</groupId>
    <artifactId>lantu-sdk-spring-boot-starter</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
```

2、在配置文件中，配置需要的商户号、回调地址、秘钥等信息：

```
ltzf:
  wx:
    mch-id: """"
    secret-key: """"
    notify-url: """"
```

3、在业务代码中，注入Service类，并定义PC端下单生成接口：

```java
@RestController
@RequestMapping(""/demo"")
public class DemoController {
    
    /**
    * 注入蓝兔支付Service
    */
    @Autowired
    private LantuWxPayService lantuWxPayService;
    
    /**
     * 测试蓝兔支付 PC端扫描请求
     *
     * @return
     */
    @GetMapping(""/native"")
    public LantuWxPayNativeOrderResult nativeOrder() {
        // 定义蓝兔支付二维码生成请求
        LantuWxPayNativeOrderRequest request = new LantuWxPayNativeOrderRequest();
        String tradeNo = ""2023"" + System.currentTimeMillis();
        request.setOutTradeNo(tradeNo);
        request.setTotalFee(""0.01"");
        request.setBody(""测试商品"");
        LantuWxPayNativeOrderResult result = lantuWxPayService.createNativeOrder(request);
        return result;
    }
    
}
```

# 六、参与贡献

1、工程中采用checkstyle.xml文件作为代码风格的统一与质量检测，在开发时需要导入项目中的该文件进行检测，需要使用maven的validate进行参数的校验

2、fork当前仓库到自己的仓库，然后在develop分支上进行开发，然后提交PR

3、加入知识星球，与作者沟通交流自己的想法


# 七、知识星球

知识星球：觉醒的新世界程序员
",0,0,2,,,1.0
frc-862/rhapsody,main,"# Rhapsody

<p align = ""Center"">
   <img src=""https://github.com/frc-862/Rhapsody/assets/92895537/05e5b36d-0b52-47e8-891f-d0e9886f86b1"" width=554 height=240 />
   <img src=""https://cdn.discordapp.com/attachments/1201511131370508331/1201511198080909393/IMG_3730.png?ex=65d35000&is=65c0db00&hm=1c2111ba0e1921cb1f15ecc6da83d6418ce2d2d9720ad434f2483d6682e6c208&"" width=768 height=576/>
</p>
 
<h4 align = ""Center"">
  2024 Crescendo robot code for our robot, Rhapsody
</h4>
",5,16,14,GPL-3.0,"gradle.yml,linter.yml",247.0
dromara/warm-flow,master,"<p align=""center"">
	<img alt=""logo"" src=""https://foruda.gitee.com/images/1726820610127990120/c8c5f3a4_2218307.png"" width=""100"">
</p>
<h1 align=""center"" style=""margin: 30px 0 30px; font-weight: bold;"">Warm-Flow工作流</h1>
<p align=""center"">
    <a href=""https://gitee.com/dromara/warm-flow.git""><img src=""https://gitee.com/dromara/warm-flow/badge/star.svg?theme=dark""></a>
    <a href='https://gitee.com/dromara/warm-flow/members'><img src='https://gitee.com/dromara/warm-flow/badge/fork.svg?theme=dark' alt='fork'></a>
    <a href='https://github.com/dromara/warm-flow.git'><img src='https://img.shields.io/github/stars/dromara/warm-flow.svg' alt='fork'></a>
    <a href='https://github.com/dromara/warm-flow.git'><img src='https://img.shields.io/github/forks/dromara/warm-flow.svg' alt='fork'></a>
    <a href='https://gitcode.com/dromara/warm-flow'><img src='https://gitcode.com/dromara/warm-flow/star/badge.svg' alt='fork'></a>
    <a href='https://gitee.com/dromara/warm-flow/blob/master/LICENSE'><img src='https://img.shields.io/badge/License-Apache2.0-blue.svg' alt='fork'></a>
</p>


**项目代码、文档 均开源免费可商用 遵循开源协议即可**  
**开发完成请务必登记使用项目列表，[登记地址](https://gitee.com/dromara/warm-flow/issues/I7Y57D)**

## 介绍

Warm-Flow国产工作流引擎🎉，其特点简洁轻量，五脏俱全，可扩展，是一个可通过jar引入设计器的工作流。

1. 简洁易用：只有7张表，代码量少，可快速上手和集成
2. 审批功能：支持通过、退回、任意跳转、转办、终止、会签、票签、委派和加减签、互斥和并行网关
3. 监听器与流程变量：支持四种监听器，可应对不同场景，灵活可扩展，参数传递，动态权限
4. 流程图：流程引擎自带流程图，可在不集成流程设计器情况下使用
5. 流程设计器：可通过jar包形式快速集成到项目，减少繁琐代码搬运和适配
6. 条件表达式：内置常见的和spel条件表达式，并且支持自定义扩展
7. 办理人变量表达式：内置${handler}和spel格式的表达式，可满足不同场景，灵活可扩展
8. orm框架扩展：目前支持MyBatis、Mybatis-Plus、Mybatis-Flex和Jpa，后续会由社区提供其他支持，扩展方便
9. 数据库支持：目前支持MySQL 、Oracle 和PostgreSQL，后续会继续支持其他数据库或者国产数据库
10. 多租户与软删除：流程引擎自身维护多租户和软删除实现，也可使用对应orm框架的实现方式
11. 同时支持spring和solon
12. 兼容java8和java17,理论11也可以
13. 官方提供基于ruoyi-vue封装实战项目，很实用

```shell
希望一键三连，你的⭐️ Star ⭐️是我持续开发的动力，项目也活的更长
```

>   **[github地址](https://github.com/dromara/warm-flow.git)** | **[gitee地址](https://gitee.com/dromara/warm-flow.git)** | **[gitCode地址](https://gitcode.com/dromara/warm-flow)**

## 演示地址

- admin/admin123

演示地址：http://www.hhzai.top

## 使用文档与联系方式

https://warm-flow.dromara.org/

## 组件所需脚本

- 首次导入，先创建数据库，找到对应数据库的全量脚本[warm-flow-all.sql](https://gitee.com/dromara/warm-flow/tree/master/sql/mysql)，执行
- 如果版本更新，找到对应数据库的更新版本，比如xx-upgrade，[warm-flow_x.x.x.sql](https://gitee.com/dromara/warm-flow/tree/master/sql/mysql/v1-upgrade)，执行

## 官网流程定义案例xml

[官网流程定义案例xml](https://gitee.com/dromara/warm-flow-test/tree/master/warm-flow-core-test/src/main/resources)

## 测试代码

> 测试代码[warm-flow-test](https://gitee.com/dromara/warm-flow-test)项目中，warm-flow-xxx-test模块的测类

## 支持数据库类型

* [x] mysql
* [x] oracle
* [x] postgresql
* [ ] 达梦
* [ ] 人大金仓
* [ ] GaussDB
* [ ] oceanbase
* [ ] sqlserver
* [ ] ......

## orm扩展包

* [x] mybatis
* [x] mybatis-plus
* [x] jpa
* [x] mybatis-flex
* [x] easy-query
* [ ] ......




> **有想扩展其他orm框架和数据库的可加qq群联系群主**


## 推荐

大家在使用本项目时，推荐结合贺波老师的书
[《深入Flowable流程引擎：核心原理与高阶实战》](https://item.jd.com/14804836.html)学习。这本书得到了Flowable创始人Tijs Rademakers亲笔作序推荐，对系统学习和深入掌握Flowable的用法非常有帮助。

<img src=""https://gitee.com/cai_xiao_feng/lowflow-design/raw/main/public%2Fflowable.jpg"" width=""500px""/>

## 你可以请作者喝杯咖啡表示鼓励

![输入图片说明](https://foruda.gitee.com/images/1697770422557390406/7efa04d6_2218307.png ""屏幕截图"")

## 特别感谢JetBrains对开源项目支持


<a href=""https://jb.gg/OpenSourceSupport"">
  <img src=""https://user-images.githubusercontent.com/8643542/160519107-199319dc-e1cf-4079-94b7-01b6b8d23aa6.png"" align=""left"" height=""100"" width=""100""  alt=""JetBrains"">
</a>
<br>
<br>
<br>


## git提交规范

    [init] 初始化  
    [feat] 增加新功能  
    [fix] 修复问题/BUG  
    [perf] 优化/性能提升  
    [refactor] 重构  
    [revert] 撤销修改  
    [style] 代码风格相关无影响运行结果的  
    [update] 其他修改  
    [upgrade] 升级版本  
    
",7,0,11,Apache-2.0,release.yml,16.0
MincraftEinstein/SubtleEffects,main,"# Subtle Effects

![Banner](https://imgur.com/yVBI5Qb.png)

![](https://img.shields.io/badge/Mod%20Loaders-NeoForge%20%26%20Fabric-green?style=for-the-badge)
[![Curseforge Page](https://img.shields.io/badge/Curseforge-Page-orange?style=for-the-badge&logo=curseforge ""Curseforge page"")](https://curseforge.com/minecraft/mc-mods/subtle-effects)
[![Modrinth Page](https://img.shields.io/badge/Modrinth-Page-1bd96a?style=for-the-badge&logo=modrinth)](https://modrinth.com/mod/subtle-effects)
[![Github](https://img.shields.io/badge/GitHub-Repository-blueviolet?style=for-the-badge&logo=github)](https://github.com/MincraftEinstein/SubtleEffects)
[![Discord Invite](https://img.shields.io/badge/Discord-Einstein%27s%20Lab-blue?style=for-the-badge&logo=discord)](https://discord.gg/gSsaFAvrBM)

### **📘 Description**
Adding many new subtle details through particles and a few sounds. All of which can be toggled and some can be customized. The mod also comes with built-in particle culling and a particle render distance

**✨ Some Key Features**
- Particle culling
- Particle render distance
- Fire related blocks (fire, campfires, candles, torches, etc) have sparks
- Villagers and players snore and have Z particles
- Slimes leave a trail of slime
- Glowstone and redstone blocks emit dust particles
- Allay and Vexes emit magic
- Shearing a sheep drops fluff
- Burning entities have sparks, smoke and flames
- Vanilla smoke has been replaced with updated textures similar to campfire smoke
- Players with 3 hearts or less have a heartbeat
- Players with 3 hunger or less have stomach growling
- Wearing a mob head will apply the spectator shader for that mob (currently only for the creeper head and Enderman head from Supplemenaries)
- Players and a few mobs have running dust clouds
- Mobs have dust clouds when they hit the ground
- And much more...

A full list of features can be found on the [wiki](https://github.com/MincraftEinstein/SubtleEffects/wiki).

Requires [Fzzy Config](https://modrinth.com/mod/fzzy-config).

<br>
<details>
<summary><b>📜 Terms of Use</b></summary>

```
You may
✅ Use this mod as a reference to understand and or create something of your own, as long as it is not a copy or recreation
✅ Use this mod in modpacks with credit and one or more links to any of the project pages*
✅ Edit for personal use
✅ Use this mod for/in YouTube videos with credit and one or more links to any of the project pages*
✅ Create resource packs, data packs, and addon mods for this mod

You may not
❌ Reupload/publish this mod to any website without explicit permission from me and one or more links to any of the project pages*
❌ Redistibute edited or unedited assets** from this mod without permission from me and credit

* Project pages include CurseForge, Modrinth, Planet Minecraft, GitHub
** Assets include logos, banners, textures, models etc
```
</details>

[<img alt=""Ko-fi Badge"" height=""15%"" width=""15%"" src=""https://storage.ko-fi.com/cdn/brandasset/kofi_bg_tag_dark.png"" alt=""Ko-fi badge"">](https://ko-fi.com/mincrafteinstein)

---

### 📚 F.A.Q

**Q:** Can XYZ feature be disabled?
<br>
**A:** Yes, all features can be disabled in the config menu.
If you find that a feature/change cannot be disabled please report it as a bug

**Q:** Can vanilla clients or clients without the mod join if the mod is installed on the server?
<br>
**A:** Yes, the mod does not need to be installed on the client to join

**Q:** Does this mod work with Fancy Block Particles, Particle Core, Visuality, or Particular?
<br>
**A:** Yes

**Q:** Particular's leaves aren't showing, how do I fix them?
<br>
**A:** Disable the 'Cull Particles With No Alpha' config inside the 'General' config section

**Q:** Do you take suggestions/feature requests?
<br>
**A:** Yes, suggestions and feedback in general are much appreciated.
You can provide feedback/suggestions in a GitHub issue, the CurseForge comments, or on my Discord Server.
Please keep your suggestions somewhat Minecraft-y, e.g. no blood.
Please also try not to suggest things that multiple other mods implement, such as rain ripples.

---

### **💬 Translations**
Feel free to translate this mod into any language or update existing translations.
To get your translation into the mod, make a pull request on GitHub with the translated language file.

All translators are credited in the list below.

- Simplified Chinese: [kuhananxianglai](https://github.com/kuhananxianglai)
- Japanese: [gohkenytp](https://github.com/gohkenytp)

---

Want to play with your friends on a server? Get 15% off your first month with code `einstein`.
Click [here](https://billing.kinetichosting.net/aff.php?aff=124) or on the banner below to get started!

[![Kinetic Hosting Banner](https://i.imgur.com/u6Fn0I0.png)](https://billing.kinetichosting.net/aff.php?aff=124)

---

Repository created from [MultiLoader-Template](https://github.com/jaredlll08/MultiLoader-Template)
",0,10,2,,,4.0
6tail/tyme4j,master,"# Tyme [![License](https://img.shields.io/badge/license-MIT-4EB1BA.svg?style=flat-square)](https://github.com/6tail/tyme4j/blob/master/LICENSE)

Tyme是一个非常强大的日历工具库，可以看作 [Lunar](https://6tail.cn/calendar/api.html ""https://6tail.cn/calendar/api.html"") 的升级版，拥有更优的设计和扩展性，支持公历和农历、星座、干支、生肖、节气、法定假日等。

### Maven

```xml
<dependency>
  <groupId>cn.6tail</groupId>
  <artifactId>tyme4j</artifactId>
  <version>1.1.7</version>
</dependency>
```

## 示例

    import com.tyme.solar.SolarDay;
     
    public class Sample {
      public static void main(String[] args) {
        SolarDay solarDay = SolarDay.fromYmd(1986, 5, 29);
         
        // 1986年5月29日
        System.out.println(solarDay);
         
        // 农历丙寅年四月廿一
        System.out.println(solarDay.getLunarDay());
      }
    }

## 文档

请移步至 [https://6tail.cn/tyme.html](https://6tail.cn/tyme.html ""https://6tail.cn/tyme.html"")

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=6tail/tyme4j&type=Date)](https://star-history.com/#6tail/tyme4j&Date)
",17,4,1,MIT,,3.0
begcode/begcode-admin,main,"# monolithMybatis

本应用程序由BegCode8.6.6生成, 你可以在 [https://www.begcode.com](https://www.begcode.com) 找到文档和帮助。

## 截图展示

### 登录

![登录](./doc/images/login.png)

### 首页

![首页](./doc/images/index.png)

### 菜单列表

![菜单列表](./doc/images/view_permission.png)

### 角色列表

![角色列表](./doc/images/authority.png)

### 用户列表

![用户列表](./doc/images/user-list.png)

### 短信配置

![短信配置](./doc/images/sms_config.png)

### 图片上传

![图片上传](./doc/images/upload_image.png)

### 字典管理

![字典管理](./doc/images/dictionary.png)

### 操作日志

![操作日志](./doc/images/sys_log.png)

### 消息发布

![消息发布](./doc/images/announcement.png)

### Api列表

![Api列表](./doc/images/api.png)

### Icon选择参考

![Icon选择参考](./doc/images/icon_picker.png)

### 查看通知

![查看通知](./doc/images/notice.png)

## 项目结构

生成时需要 Node，并建议在开发过程中使用它。package.json 文件始终会生成，以提供更好的开发体验，包括 prettier、commit hooks、脚本等等。

在项目的根目录中，JHipster会生成用于配置诸如git、prettier、eslint、husky等众多常见工具的配置文件。你可以在网络上找到有关这些工具的参考文档。

`/src/*` 目录结构遵循默认的Java结构。

- `.yo-rc.json` - Yeoman配置文件（BegCode/JHipster配置文件）
  BegCode的配置存储在key为generator-begcode的属性中，这里定义了BegCode生成器的全局配置。此外，你可能会在项目根目录下的.yo-rc.json文件中找到类似generator-begcode-\*的蓝图配置，它包含了项目特定的配置选项。
- `.yo-resolve` (可选) - Yeoman 冲突解决器
  允许在发现冲突时使用特定操作，跳过匹配模式的文件的提示。每一行应该匹配 [模式] [操作]，其中模式是一个 Minimatch 模式，操作是 skip（如果省略则为默认操作）或者 force 中的一个。以 # 开头的行被视为注释，将被忽略。
- `.jhipster/*.json` - JHipster实体配置文件

- `npmw` - 用于本地安装的npm的包装器
  BegCode默认使用构建工具在本地安装Node和pnpm。此包装器确保本地安装pnpm并使用它，避免了不同版本可能引起的一些差异。通过使用./npmw而不是传统的npm，您可以配置一个无需Node的环境来开发或测试您的应用程序。
- `/src/main/docker` - 应用程序及其依赖的服务的Docker配置

## 开发

    构建系统将自动安装推荐的Node和pnpm版本。
    我们提供了一个包装器来启动 pnpm。

仅当 [package.json](package.json) 中的依赖项发生更改时，您才需要再次运行此命令。

```
./npmw install
```

我们使用 pnpm 脚本和 [Vite][] 作为我们的构建系统。

在两个单独的终端中运行以下命令，以创建更好的开发体验，其中当硬盘上的文件发生更改时您的浏览器自动刷新。

```
./mvnw
./npmw start
```

Npm 还用于管理此应用程序中使用的 CSS 和 JavaScript 依赖项。 您可以通过以下方式升级依赖项
在 [package.json](package.json) 中指定较新版本。 您还可以运行`pnpm update`和`pnpm install`来管理依赖项。
在任何命令上添加`help`标志以查看如何使用它。 例如，`pnpm help update`。

`./npmw run` 命令将列出可用于该项目运行的所有脚本。

## 系统构建

### 创建Jar包

要优化monolithMybatis应用程序创建Jar包并进行生产部署，请运行：

```
./mvnw package -Pprod clean verify -DskipTests
```

这将压缩客户端和重新打包CSS和JavaScript文件。 它还将修改`index.html`，以便引用这些新文件。
为了确保一切正常，请运行：

```
java -jar target/*.jar
```

然后在浏览器打开：[http://localhost:8080](http://localhost:8080)。

请参阅[Using JHipster in production][] 了解更多详细信息。

### 创建War包

要将您的应用程序打包为 war 以便将其部署到应用程序服务器，请运行：

```
./mvnw package -Pprod,war clean verify
```

### JHipster Control Center

JHipster Control Center 可以帮助您管理和控制您的应用程序。 您可以使用以下命令启动本地控制中心服务器（可通过 http://localhost:7419 访问）：

```
docker compose -f src/main/docker/jhipster-control-center.yml up
```

## 测试

### 运行Spring Boot 测试

要启动应用程序的测试，请运行：

```
./mvnw verify
```

### Client tests

Unit tests are run by [Jest][]. They're located in [front/src/test/javascript/](front/src/test/javascript/) and can be run with:

```
./npmw test
```

## 其他

### 使用Sonar进行代码质量控制

Sonar用于分析代码质量。 您可以使用以下命令启动本地 Sonar 服务器（可通过 http://localhost:9001 访问）：

```
docker compose -f src/main/docker/sonar.yml up -d
```

Note: we have turned off forced authentication redirect for UI in [src/main/docker/sonar.yml](src/main/docker/sonar.yml) for out of the box experience while trying out SonarQube, for real use cases turn it back on.

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner) or by using the maven plugin.

Then, run a Sonar analysis:

```
./mvnw -Pprod clean verify sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

If you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.

```
./mvnw initialize sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

Additionally, Instead of passing `sonar.password` and `sonar.login` as CLI arguments, these parameters can be configured from [sonar-project.properties](sonar-project.properties) as shown below:

```
sonar.login=admin
sonar.password=admin
```

For more information, refer to the [Code quality page][].

### Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.

For example, to start a mysql database in a docker container, run:

```
docker compose -f src/main/docker/mysql.yml up -d
```

To stop it and remove the container, run:

```
docker compose -f src/main/docker/mysql.yml down
```

You can also fully dockerize your application and all the services that it depends on.
To achieve this, first build a docker image of your app by running:

```
npm run java:docker
```

Or build a arm64 docker image when using an arm64 processor os like MacOS with M1 processor family running:

```
npm run java:docker:arm64
```

Then run:

```
docker compose -f src/main/docker/app.yml up -d
```

When running Docker Desktop on MacOS Big Sur or later, consider enabling experimental `Use the new Virtualization framework` for better processing performance ([disk access performance is worse](https://github.com/docker/roadmap/issues/7)).

For more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.

## Continuous Integration (optional)

To configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.

[BegCode最新文档]: https://www.begcode.com
[Node.js]: https://nodejs.org/
[NPM]: https://www.npmjs.com/
[Webpack]: https://webpack.github.io/
[BrowserSync]: https://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Leaflet]: https://leafletjs.com/
[DefinitelyTyped]: https://definitelytyped.org/
",0,1,1,MIT,,0.0
youdeyunke/app,master,"![友得云客房产小程序-社区版](https://tcdn.udeve.net/udyk/readme-free-license.png)

<div align=""center"">

[产品官网](https://www.youdeyunke.com/?statId=6) | [帮助文档](https://youdeyunke.yuque.com/r/organizations/homepage) | [加入群聊](https://tcdn.udeve.net/udyk/66064f7e8ecade73b2385bb3.jpg)

</div>

# 友得云客房产营销系统【社区版】


## 系统简介
友得云客房产营销系统是一款专为房产行业打造的线上营销获客小程序系统，致力于帮助房产企业搭建私域流量平台，以数字化精准营销提升销售效果，驱动业绩增长。作为行业先行者，我们深谙互联网线上营销的要义，将多年的经验与技术融汇于一身，为您提供完善的、已成型的房产小程序系统。基于此【社区版】您无需授权即可获取全部源代码，并进行二次开发，允许用于商业用途，但需要保留版权信息。

## 文件结构

* panel 管理后台前端代码（vue项目）
* server 管理后台服务端接口代码（springboot）
* weapp 小程序端代码（小程序原生框架）



## 安装教程

本项目采用前后端分离部署,你可以选择自行编译后端服务进行部署，但是更建议通过宝塔面板的""Docker应用商店""搜索“友得云客”进行一键安装。

![通过宝塔面板安装友得云客社区版服务端](https://tcdn.udeve.net/udyk/6745a850e4b080e6edec3dad.png)

*  服务端部署： [从宝塔面板docker应用商店一键安装友得云客社区版服务端](https://youdeyunke.yuque.com/fbxh1v/install/bt)
*  小程序端部署： [小程序端搭建教程](https://youdeyunke.yuque.com/fbxh1v/install/dt57os0gz4dk8h5b)

如果是通过宝塔面板一键装，则不需要自行部署服务端，只需要下载weapp目录导入微信开发者工具即可。


## 在线演示

| 内容 | 社区版|  专业版   |
| --- | --- | --- |
| 管理端演示地址 | https://demo2.youdeyunke.com/ | https://demo.youdeyunke.com/admin/index.html |
| 管理端演示用户名 | 	`gitee@youdeyunke.com` | `pro@youdeyunke.com` |
| 管理端演示用户密码 | `88888888` | `88888888` |
| 网站端演示地址 | `不支持` | https://demo.youdeyunke.com |
| 小程序演示 | ![](https://tcdn.udeve.net/udyk/672eec7ae4b07694cf4cb409.png) |  ![](https://tcdn.udeve.net/udyk/65a0d469b33aac0d968a3529.jpg) |

## 功能介绍

![友得云客社区版与专业版功能对比](https://tcdn.udeve.net/udyk/features.png)


## 界面截图
![友得云客房产小程序界面截图](https://demo-1255998955.cos.ap-shanghai.myqcloud.com/udyk/screens.png)


## 明星案例

友得云客房产系统深受国内外客户好评，包括房地产开发商、房产自媒体、海外房产中介等，以下明星案例均采用友得云客房产系统源码搭建（排名不分先后）

|                  ![](https://tcdn.udeve.net/udyk/6763e9f8e4b0c65a95b09f68.jpg)                   | ![](https://tcdn.udeve.net/fang2021/58e662ca-e7af-4e57-bed3-d2280831127f.jpg) |                  ![](https://tcdn.udeve.net/udyk/6763eac5e4b0c65a95b09f69.jpg)                   |
|:------------------------------------------------------------------------------------------------:|:-------------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------:|
|                                               美聚找房                                               |                                              学长看房笔记                                               |                                              沪上工业通                                               |
| ![](https://tcdn.udeve.net/fang2021/2fb1dc49-a444-4d66-8de2-7dac4221f166.jpg?imageView2/2/w/400) | ![](https://tcdn.udeve.net/udyk/6763eb8de4b0c65a95b09f6a.jpg)  |                  ![](https://tcdn.udeve.net/udyk/6763ec6ee4b0c65a95b09f6b.jpg)                   |
|                                             汉普顿英国地产                                              |                                               泰缘之家                                                |                                            洛杉矶NGHOME                                             |
| ![](https://tcdn.udeve.net/udyk/6763ed19e4b0c65a95b09f6c.jpg?imageView2/2/w/400) | ![](https://tcdn.udeve.net/fang2021/2a013aa5-466e-436a-85fc-aa1c8f62e6d9.jpg?imageView2/2/w/400)  | ![](https://tcdn.udeve.net/fang2021/0fada889-b400-4b29-bc14-bf2e2202490d.jpg?imageView2/2/w/400) |
|                                                 幸福E家                                                 |                                               青特云置业                                                |                                             宁波甬房摇号助手                                             |




## 商用须知

社区版允许用于商业用途，而无需取得授权。但需要在小程序首页底部保留“友得云客”标志，未经许可不可移除此标志，否则将构成侵权。

* 示例：
![](https://tcdn.udeve.net/udyk/readme-footer-remark.png)

* 素材图片:https://tcdn.udeve.net/udyk/65ae2b4db33ac5e0e29f7ccf.png
* 尺寸规范：宽度不少于120rpx，高度不少于60rpx
* 显示位置：小程序首页底部居中显示


## 参与贡献

1. Fork 本仓库
2. 新建 feature-xxx 分支
3. 提交代码
4. 新建 Merge Request


## 特别鸣谢
特别感谢以下开源项目

 * vant-ui
 * ElementUI
 * mysql
 * docker
 * 宝塔面板
 

## 版权须知

Apache License 2.0 许可的主要内容包括：

授权：允许任何人以任何目的使用、复制、修改和分发该软件。

版权声明：要求在软件和相关文档中包含原始版权声明和许可证声明。

保证免责：表明该软件是按现状提供的，没有任何明示或暗示的担保或保证。作者不承担任何赔偿责任。

贡献者授权：要求所有贡献者授予 Apache 软件基金会永久性的、免费的、不可撤销的许可，以使用、复制、修改和分发其贡献。

专利许可：为了保护使用该软件的用户，该许可要求贡献者授权任何必要的专利许可，以便将其用于 Apache 软件基金会的项目。

Apache License 2.0 是一种宽松的开源许可，允许人们自由使用、修改和分发软件。

本项目包含的第三方源码和二进制文件之版权信息另行标注。

*友得云客®* 商标和著作权所有者为优得（西安）信息科技有限公司。侵权必究

**本软件已登记软著，必须保留原始版权文字信息，违者将依法追究法律责任。**


![](https://tcdn.udeve.net/udyk/672eef97e4b07694cf4cb40a.png?t=1)
",1,0,1,Apache-2.0,,0.0
JAgentSphere/bytebuddy-agent-demo,main,"# Agent-Demo

使用 Byte Buddy 和 Gradle 构建一个最简单的 Java Agent

Java Agent 的入口类是 `com.jas.agent.Main`

```java
public class Main {
    public static void premain(String args, Instrumentation inst) {
        launch(args, inst);
    }

    public static void agentmain(String args, Instrumentation inst) {
        launch(args, inst);
    }

    private static void launch(String args, Instrumentation inst) {
        System.out.println(""hello java agent"");
    }
}
```

提供 AgentBuilder 最简化便利测试的配置项

```java
AgentBuilder agentBuilder = new AgentBuilder.Default()
        .ignore(ElementMatchers.none()) // 忽略空，即允许 hook 所有类
        .with(AgentBuilder.RedefinitionStrategy.REDEFINITION) // 开启类被加载后也允许进行字节码修改
        .with(AgentBuilder.Listener.StreamWriting.toSystemError().withErrorsOnly()) // 字节码修改失败打印错误信息到控制台
        .with(AgentBuilder.Listener.StreamWriting.toSystemOut().withTransformationsOnly()) // 字节码修改成功也输出到控制台
        .with(new DumpClassListener()); // 字节码修改成功把类信息给报错到 weaving/classes 目录下
```

## 编译

在项目目录下执行如下命令，会在 test 文件夹中生成 agent.jar 和 demo.jar

```shell

# linux or macos
./gradlew jar

# windows
gradlew.bat jar
```

## 启动 Java Agent

使用如下命令挂载 agent 启动 SpringBoot 程序，会打印 `hello java agent`

```shell
cd test && \
  java -javaagent:agent.jar -jar demo.jar
```",4,2,3,MIT,,0.0
hctestedu/api-test-project,main,"## 纯接口项目-完整接口文档

> 数据库和接口服务部署运行在你自己的电脑上面
>
> ！！任何时候都可以实战
>
> ！！ 接口自动化测试 结合 数据库校验

## 不会编译运行安装环境？

> 项目涉及数据库和JAVA项目的编译，不会操作单独联系我

[点我免费获取可运行版本](https://wtnjm.xet.tech/s/4fmrTx)

[点我免费获取可运行版本](https://wtnjm.xet.tech/s/4fmrTx)

[点我免费获取可运行版本](https://wtnjm.xet.tech/s/4fmrTx)



## 考试系统功能说明及接口文档

### 学生系统功能

| 模块     | 介绍                                                     |
| -------- | -------------------------------------------------------- |
| 登录     | 用户名、密码                                             |
| 注册     | 年级、用户名、密码                                       |
| 任务中心 | 管理员发布的年级任务，每个学生只能做一次                 |
| 考试     | 题干支持文本、图片、数学公式、表格等，学生答题支持：文本 |
| 固定试卷 | 可重复练习、自行批改的试卷                               |
| 时段试卷 | 在时间限制内，可重复练习、自行批改的试卷                 |
| 考试记录 | 查看答卷记录和试卷信息                                   |
| 错题本   | 答错题目会自动进入错题本，显示题目基本信息               |
| 个人信息 | 显示学生个人资料                                         |
| 更新信息 | 修改个人资料、头像                                       |
| 个人动态 | 显示用户最近的个人动态                                   |
| 消息中心 | 用于接收管理员发送的消息                                 |

### 1.2 管理系统功能

| 模块       | 介绍                                                         |
| ---------- | ------------------------------------------------------------ |
| 登录       | 用户名、密码                                                 |
| 主页       | 试卷总数、题目总数、用户活跃度、题目月数量                   |
| 学生列表   | 显示系统所有的学生，新增、修改、删除、禁用                   |
| 管理员列表 | 显示系统所有的管理员，新增、修改、删除、禁用                 |
| 学科列表   | 学科查询、修改、删除                                         |
| 学科创编   | 创建学科                                                     |
| 试卷列表   | 试卷查询、修改、删除                                         |
| 试卷创编   | 创建的试卷为时段试卷、固定试卷、任务试卷                     |
| 题目列表   | 题目查询、修改、删除                                         |
| 题目创建   | 题目支持单选题、多选题、判断题、填空题、简答题，题干支持文本、图片、表格、数学公式 |
| 任务列表   | 任务查询、修改、删除                                         |
| 消息列表   | 显示已发送的消息，消息已读人数等信息                         |
| 消息发送   | 发送消息给多个用户                                           |
| 用户日志   | 显示所有用户日志                                             |
| 个人资料   | 显示管理员用户名、真实姓名                                   |
| 时间线     | 显示管理员创建时间                                           |
| 修改资料   | 修改姓名、手机号                                             |

# 数据库设计

### 3.1 试卷表

- 表名：t_exam_paper
- 字段注释：

| 字段名                | 类型     | 注释                                         |
| --------------------- | -------- | -------------------------------------------- |
| id                    | int      |                                              |
| name                  | varchar  | 试卷名称                                     |
| subject_id            | int      | 学科                                         |
| paper_type            | int      | 试卷类型( 1.固定试卷 4.时段试卷 6.任务试卷 ) |
| grade_level           | int      | 年级                                         |
| score                 | int      | 试卷总分(千分制)                             |
| question_count        | int      | 题目数量                                     |
| suggest_time          | int      | 建议时长(分钟)                               |
| limit_start_time      | datetime | 时段试卷 开始时间                            |
| limit_end_time        | datetime | 时段试卷 结束时间                            |
| frame_text_content_id | int      | 试卷框架 内容为JSON                          |
| create_user           | int      |                                              |
| create_time           | datetime |                                              |
| deleted               | bit      |                                              |
| task_exam_id          | int      |                                              |

### 3.2 试卷答案表

- 表名：t_exam_paper_answer
- 字段注释：

| 字段名           | 类型     | 注释                                         |
| ---------------- | -------- | -------------------------------------------- |
| id               | int      |                                              |
| exam_paper_id    | int      |                                              |
| paper_name       | varchar  | 试卷名称                                     |
| paper_type       | int      | 试卷类型( 1.固定试卷 4.时段试卷 6.任务试卷 ) |
| subject_id       | int      | 学科                                         |
| system_score     | int      | 系统判定得分                                 |
| user_score       | int      | 最终得分(千分制)                             |
| paper_score      | int      | 试卷总分                                     |
| question_correct | int      | 做对题目数量                                 |
| question_count   | int      | 题目总数量                                   |
| do_time          | int      | 做题时间(秒)                                 |
| status           | int      | 试卷状态(1待判分 2完成)                      |
| create_user      | int      | 学生                                         |
| create_time      | datetime | 提交时间                                     |
| task_exam_id     | int      |                                              |

### 3.3 试卷题目答案表

- 表名：t_exam_paper_question_customer_answer
- 字段注释：

| 字段名                   | 类型     | 注释         |
| ------------------------ | -------- | ------------ |
| id                       | int      |              |
| question_id              | int      | 题目Id       |
| exam_paper_id            | int      | 答案Id       |
| exam_paper_answer_id     | int      |              |
| question_type            | int      | 题型         |
| subject_id               | int      | 学科         |
| customer_score           | int      | 得分         |
| question_score           | int      | 题目原始分数 |
| question_text_content_id | int      | 问题内容     |
| answer                   | varchar  | 做题答案     |
| text_content_id          | int      | 做题内容     |
| do_right                 | bit      | 是否正确     |
| create_user              | int      | 做题人       |
| create_time              | datetime |              |
| item_order               | int      |              |

### 3.4 消息表

- 表名：t_message
- 字段注释：

| 字段名             | 类型     | 注释           |
| ------------------ | -------- | -------------- |
| id                 | int      |                |
| title              | varchar  | 标题           |
| content            | varchar  | 内容           |
| create_time        | datetime |                |
| send_user_id       | int      | 发送者用户ID   |
| send_user_name     | varchar  | 发送者用户名   |
| send_real_name     | varchar  | 发送者真实姓名 |
| receive_user_count | int      | 接收人数       |
| read_count         | int      | 已读人数       |

### 3.5 用户消息表

- 表名：t_message_user
- 字段注释：

| 字段名            | 类型     | 注释           |
| ----------------- | -------- | -------------- |
| id                | int      |                |
| message_id        | int      | 消息内容ID     |
| receive_user_id   | int      | 接收人ID       |
| receive_user_name | varchar  | 接收人用户名   |
| receive_real_name | varchar  | 接收人真实姓名 |
| readed            | bit      | 是否已读       |
| create_time       | datetime |                |
| read_time         | datetime | 阅读时间       |

### 3.6 题目表

- 表名：t_question
- 字段注释：

| 字段名               | 类型     | 注释                                         |
| -------------------- | -------- | -------------------------------------------- |
| id                   | int      |                                              |
| question_type        | int      | 1.单选题 2.多选题 3.判断题 4.填空题 5.简答题 |
| subject_id           | int      | 学科                                         |
| score                | int      | 题目总分(千分制)                             |
| grade_level          | int      | 级别                                         |
| difficult            | int      | 题目难度                                     |
| correct              | text     | 正确答案                                     |
| info_text_content_id | int      | 题目 填空、 题干、解析、答案等信息           |
| create_user          | int      | 创建人                                       |
| status               | int      | 1.正常                                       |
| create_time          | datetime | 创建时间                                     |
| deleted              | bit      |                                              |

### 3.7 学科表

- 表名：t_subject
- 字段注释：

| 字段名     | 类型    | 注释                            |
| ---------- | ------- | ------------------------------- |
| id         | int     |                                 |
| name       | varchar | 语文 数学 英语 等               |
| level      | int     | 年级 (1-12) 小学 初中 高中 大学 |
| level_name | varchar | 一年级、二年级等                |
| item_order | int     | 排序                            |
| deleted    | bit     |                                 |

### 3.8 任务表

- 表名：t_task_exam
- 字段注释：

| 字段名                | 类型     | 注释                |
| --------------------- | -------- | ------------------- |
| id                    | int      |                     |
| title                 | varchar  |                     |
| grade_level           | int      | 级别                |
| frame_text_content_id | int      | 任务框架 内容为JSON |
| create_user           | int      |                     |
| create_time           | datetime |                     |
| deleted               | bit      |                     |
| create_user_name      | varchar  |                     |

### 3.9 用户任务表

- 表名：t_task_exam_customer_answer
- 字段注释：

| 字段名          | 类型     | 注释               |
| --------------- | -------- | ------------------ |
| id              | int      |                    |
| task_exam_id    | int      |                    |
| create_user     | int      |                    |
| create_time     | datetime |                    |
| text_content_id | int      | 任务完成情况(Json) |

### 3.10 文本表

- 表名：t_text_content
- 字段注释：

| 字段名      | 类型     | 注释 |
| ----------- | -------- | ---- |
| id          | int      |      |
| content     | text     |      |
| create_time | datetime |      |

### 3.11 用户表

- 表名：t_user
- 字段注释：

| 字段名           | 类型     | 注释            |
| ---------------- | -------- | --------------- |
| id               | int      |                 |
| user_uuid        | varchar  |                 |
| user_name        | varchar  | 用户名          |
| password         | varchar  |                 |
| real_name        | varchar  | 真实姓名        |
| age              | int      |                 |
| sex              | int      | 1.男 2女        |
| birth_day        | datetime |                 |
| user_level       | int      | 学生年级(1-12)  |
| phone            | varchar  |                 |
| role             | int      | 1.学生 3.管理员 |
| status           | int      | 1.启用 2禁用    |
| image_path       | varchar  | 头像地址        |
| create_time      | datetime |                 |
| modify_time      | datetime |                 |
| last_active_time | datetime |                 |
| deleted          | bit      | 是否删除        |
| wx_open_id       | varchar  | 微信openId      |

### 3.12 用户日志表

- 表名：t_user_event_log
- 字段注释：

| 字段名      | 类型     | 注释     |
| ----------- | -------- | -------- |
| id          | int      |          |
| user_id     | int      | 用户id   |
| user_name   | varchar  | 用户名   |
| real_name   | varchar  | 真实姓名 |
| content     | text     | 内容     |
| create_time | datetime | 时间     |

### 3.13 用户Token表

- 表名：t_user_token
- 字段注释：

| 字段名      | 类型     | 注释       |
| ----------- | -------- | ---------- |
| id          | int      |            |
| token       | varchar  |            |
| user_id     | int      | 用户Id     |
| wx_open_id  | varchar  | 微信openId |
| create_time | datetime |            |
| end_time    | datetime |            |
| user_name   | varchar  | 用户名     |

# 学生端

### 4.1.1 登录

- 接口地址：/api/user/login
- 请求参数：

```text
{
    ""userName"": ""student"",  //用户名
    ""password"": """",  //密码
    ""remember"": false  //下次自动登录
}
```

- 返回参数：

```text
{
        ""userName"": ""student"",  //用户名
        ""imagePath"": """",  //头像
}
```

### 4.1.2 注册

- 接口地址：/api/student/user/register
- 请求参数：

```text
{
    ""userName"": ""student5"", //用户名
    ""password"": ""123456"",  //密码
    ""userLevel"": 1  //年级
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.1.3 登出

- 接口地址：/api/user/logout
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.1.4 首页

- 接口地址：/api/student/dashboard/index
- 请求参数：无
- 返回参数：

```text
{
    ""fixedPaper"": [  //固定试卷
        {
            ""id"": 2399,  //试卷Id
            ""name"": ""test33333"",  //试卷名称
            ""limitStartTime"": null,  //考试开始时间
            ""limitEndTime"": null     //考试结束时间
        }
    ],
    ""timeLimitPaper"": []    //时段试卷
}
```

### 4.1.5 任务中心

- 接口地址：/api/student/dashboard/task
- 请求参数：无
- 返回参数：

```text
[
        {
            ""id"": 14,  //任务id
            ""title"": ""2021-04-25作业"",  //任务标题
            ""paperItems"": [
                {
                    ""examPaperId"": 181,   //任务试卷id
                    ""examPaperName"": ""第一次出卷"",  //任务试卷名称
                    ""examPaperAnswerId"": 579,  //答卷id
                    ""status"": 2  //答卷状态
                }
            ]
        }
    ]
```

### 4.1.6 学科列表

- 接口地址：/api/student/education/subject/list
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": [
        {
            ""id"": ""18"",  //学科id
            ""name"": ""英语""  //学科名称
        }
    ]
}
```

### 4.1.7 试卷分页

- 接口地址：/api/student/exam/paper/pageList
- 请求参数：

```text
{
    ""paperType"": 1, //试卷类型
    ""subjectId"": 158, //学科id
    ""pageIndex"": 1, //页数
    ""pageSize"": 10  //每页条数
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 1,
        ""list"": [
            {
                ""id"": 2520,  //试卷id
                ""name"": ""生理卫生"",  //试卷名称
                ""questionCount"": 1,  //题目数
                ""score"": 20,  //试卷分数
                ""createTime"": ""2021-05-31 13:34:49"", //创建时间
                ""createUser"": 2,   //创建人
                ""subjectId"": 158,  //学科
                ""subjectName"": ""英语"",  //学科
                ""paperType"": 1,   //试卷类型
                ""frameTextContentId"": 9016  //试卷内容
            }
        ]
    }
}
```

### 4.1.8 试卷查询

- 接口地址：/api/student/exam/paper/select/9
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 14,  //试卷id
        ""level"": 1,  //年级
        ""subjectId"": 1,  //学科
        ""paperType"": 1,  //试卷类型
        ""name"": ""测试一"",  //试卷名称
        ""suggestTime"": 22,  //建议时长
        ""limitDateTime"": null,  //考试时间限制
        ""titleItems"": [  
            {
                ""name"": ""一、选择题"",  //试卷标题
                ""questionItems"": [
                    {
                        ""id"": 14,      //题目id
                        ""questionType"": 5,  //题型
                        ""subjectId"": 1,  //学科
                        ""title"": ""默写咏鹅"",  //标题
                        ""gradeLevel"": 1,  //年级
                        ""items"": [],  //选项
                        ""analyze"": ""咏鹅可以带拼音"",  //解析
                        ""correctArray"": null,  //标答
                        ""correct"": ""鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。"",  //标答
                        ""score"": ""10"", //分数
                        ""difficult"": 3,  //难度
                        ""itemOrder"": 1  //顺序
                    }
                ]
            }
        ],
        ""score"": ""10""
    }
}
```

### 4.1.9 试卷提交

- 接口地址：/api/student/exampaper/answer/answerSubmit
- 请求参数：

```text
{
    ""questionId"": null, 
    ""doTime"": 14,    //耗时
    ""answerItems"": [
        {
            ""questionId"": 4,  //题目id
            ""content"": null,  //答题内容
            ""contentArray"": [   //填空题内容
                ""测试"",
                ""1""
            ],
            ""completed"": true, //是否完成
            ""itemOrder"": 1   //题目序号
        } 
    ],
    ""id"": 4   //试卷id
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": ""2""   //试卷得分
}
```

### 4.1.10 答卷查询

- 接口地址：/api/student/exampaper/answer/read/4
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""paper"": {  //试卷信息
            ""id"": 14,  //试卷id
            ""level"": 1, //年级
            ""subjectId"": 1,  //学科
            ""paperType"": 4,  //试卷类型
            ""name"": ""限时考试二"",  //试卷名称
            ""suggestTime"": 20,  //考试时长
            ""limitDateTime"": [  //考试时间限制
                ""2021-06-22 00:00:00"",
                ""2021-08-06 00:00:00""
            ],
            ""titleItems"": [
                {
                    ""name"": ""一、完成题目"",  //标题
                    ""questionItems"": [   //题目列表
                        {
                            ""id"": 14,  //题目id
                            ""questionType"": 4,   //题目类型
                            ""subjectId"": 1,  //学科
                            ""title"": ""曲项向天歌红掌拨清波"",  //题目标题
                            ""gradeLevel"": 1,  //年级
                            ""items"": [   //题目选项
                                {
                                    ""prefix"": ""1"",   //选项标识
                                    ""content"": ""鹅鹅鹅"",   //选项内容
                                    ""score"": ""2""  //选项分数
                                },
                                {
                                    ""prefix"": ""2"",
                                    ""content"": ""白毛浮绿水"",
                                    ""score"": ""2""
                                }
                            ],
                            ""analyze"": ""咏鹅"",  //解析
                            ""correctArray"": [  //标答
                                ""鹅鹅鹅"",
                                ""白毛浮绿水""
                            ],
                            ""correct"": """",  //标答
                            ""score"": ""4"",  //题目分数
                            ""difficult"": 4, //题目难度
                            ""itemOrder"": 1 //题目顺序
                        }
                    ]
                }
            ],
            ""score"": ""18""   //试卷分数
        },
        ""answer"": {  //答卷信息
            ""id"": 14,  //答卷id
            ""doTime"": 14,  //耗时
            ""score"": ""2"",  //得分
            ""answerItems"": [   //答题信息
                {
                    ""id"": 14,  //答题id
                    ""questionId"": 4,  //题目id
                    ""doRight"": null,  //是否正确
                    ""content"": null, //答题内容
                    ""itemOrder"": 1, //题序
                    ""contentArray"": [  //答题内容
                        ""测试"",
                        ""1""
                    ],
                    ""score"": ""0"", //得分
                    ""questionScore"": ""4""  //题目分数
                }
            ]
        }
    }
}
```

### 4.1.11 试卷批改

- 接口地址：/api/student/exampaper/answer/edit
- 请求参数：

```text
{
    ""id"": 14,  //答卷id
    ""doTime"": 14,  //耗时
    ""score"": ""2"",  //得分数
    ""answerItems"": [
        {
            ""id"": 14, //答题id
            ""questionId"": 4, //题目id
            ""doRight"": null,  //是否正确
            ""content"": null,  //答题内容
            ""itemOrder"": 1,  //题目顺序
            ""contentArray"": [  //答题内容
                ""测试"",
                ""1""
            ],
            ""score"": ""4"",  //得分
            ""questionScore"": ""4""  //题目分数
        }
    ]
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": ""16""  //试卷得分
}
```

### 4.1.12 考试记录分页

- 接口地址：/api/student/exampaper/answer/pageList
- 请求参数：

```text
{
    ""pageIndex"": 1, //页码
    ""pageSize"": 10  //每页条数
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 6204,
        ""list"": [
            {
                ""id"": 6534,  //试卷id
                ""createTime"": ""2021-06-01 17:56:38"",  //创建时间
                ""userScore"": ""0"",  //考试分数
                ""subjectName"": ""数学"",  //考试学科
                ""subjectId"": 129, //学科id
                ""questionCount"": 1,  //题目数量
                ""questionCorrect"": 0,  //题目正确数
                ""paperScore"": ""3"",  //试卷总分
                ""doTime"": ""4 秒"",  //耗时
                ""paperType"": 7,  //试卷类型
                ""systemScore"": ""0"",  //系统批改得分
                ""status"": 2,   //试卷状态
                ""paperName"": ""智能训练试卷 - 1845"",  //试卷名称
                ""userName"": null  //用户名
            }
        ]
    }
}
```

### 4.1.13 错题本分页

- 接口地址：/api/student/question/answer/page
- 请求参数：

```text
{
    ""pageIndex"": 1, //页码
    ""pageSize"": 10  //每页条数
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 17002,
        ""list"": [
            {
                ""id"": 24928,   //题目id
                ""questionType"": 1,  //题型
                ""createTime"": ""2021-06-02 16:07:11"",  //创建时间
                ""subjectName"": ""语文"",  //学科
                ""shortTitle"": ""666""  //题干
            }
        ]
    }
}
```

### 4.1.14 答题详情

- 接口地址：/api/student/question/answer/select/25067
- 请求参数：

```text
{
    ""pageIndex"": 1, //页码
    ""pageSize"": 10  //每页条数
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""questionVM"": {
            ""id"": 507,    //题目id
            ""questionType"": 1,   //题目类型
            ""subjectId"": 46,  //学科id
            ""title"": ""111"",   //题干
            ""gradeLevel"": 12,    //年级
            ""items"": [        //选项
                {
                    ""prefix"": ""A"",  //选项
                    ""content"": ""A"",  //选项内容
                    ""score"": null    //选项分数
                }
            ],
            ""analyze"": ""D"",     //解析
            ""correctArray"": null,  //标答
            ""correct"": ""D"",   //标答
            ""score"": ""2"",  //分数
            ""difficult"": 3,  //难度
            ""itemOrder"": null  //排序
        },
        ""questionAnswerVM"": {   //用户答案
            ""id"": 25067,  
            ""questionId"": 507,  //题目id
            ""doRight"": false,   //是否正确
            ""content"": ""A"",   //用户答案
            ""itemOrder"": 2,   //排序
            ""contentArray"": null,   //用户答案
            ""score"": ""0"",  //得分
            ""questionScore"": ""2""  //题目分数
        }
    }
}
```

### 4.1.15 用户动态

- 接口地址：/api/student/user/log
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": [
        {
            ""id"": 1812,  
            ""userId"": 1,  //用户id
            ""userName"": ""student"",  //用户名
            ""realName"": ""Test"",  //用户真实姓名
            ""content"": ""student 登录了学之思开源考试系统"",  //动态内容
            ""createTime"": ""2021-06-08 17:12:50""  //创建时间
        }
    ]
}
```

### 4.1.16 当前用户信息

- 接口地址：/api/student/user/current
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 14,
        ""userUuid"": ""d2d29da2-dcb3-4013-b874-727626236f47"",
        ""userName"": ""student"",  //用户名
        ""realName"": ""Test"",  //真实姓名
        ""age"": 18,   //年龄
        ""role"": 1,   //角色
        ""sex"": 1,  //性别
        ""birthDay"": ""2019-09-01 00:00:00"",  //生日
        ""phone"": ""158800882"",  //手机号
        ""lastActiveTime"": """",
        ""createTime"": ""2019-09-07 18:55:02"",
        ""modifyTime"": ""2021-06-09 17:04:31"",
        ""status"": 1,  //状态
        ""userLevel"": 1,   //年级
        ""classes"": ""1班"",  //用户班级
        ""imagePath"": """"  //用户头像
    }
}
```

### 4.1.17 修改用户信息

- 接口地址：/api/student/user/update
- 请求参数：

```text
{
    ""id"": 14,
    ""userUuid"": ""d2d29da2-dcb3-4013-b874-727626236f47"",
    ""userName"": ""student"",  //用户名
    ""realName"": ""Test"",  //真实姓名
    ""age"": 18,   //年龄
    ""role"": 1,   //角色
    ""sex"": 1,  //性别
    ""birthDay"": ""2019-09-01 00:00:00"",  //生日
    ""phone"": ""158800882"",  //手机号
    ""lastActiveTime"": """",
    ""createTime"": ""2019-09-07 18:55:02"",
    ""modifyTime"": ""2021-06-09 17:04:31"",
    ""status"": 1,  //状态
    ""userLevel"": 1,   //年级
    ""classes"": ""1班"",  //用户班级
    ""imagePath"": """"  //用户头像
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.1.18 消息分页

- 接口地址：/api/student/user/message/page
- 请求参数：

```text
{
    ""pageIndex"": 1, //页码
    ""pageSize"": 10  //每页条数
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 5,
        ""list"": [
            {
                ""id"": 14,
                ""title"": ""rwerw"",   //消息标题
                ""messageId"": 10,
                ""content"": ""sfsdf"",  //消息内容
                ""readed"": true, //是否已读
                ""createTime"": ""2021-06-11 16:32:40"",   //创建时间
                ""sendUserName"": ""admin""  //发送人
            }
        ]
    }
}
```

### 4.1.19 消息标记已读

- 接口地址：/api/student/user/message/read/14
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### [#](https://www.mindskip.net:999/guide/student.html#_4-1-20-未读消息数量)4.1.20 未读消息数量

- 接口地址：/api/student/user/message/unreadCount
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": 0  //未读消息数量
}
```

# 管理端

### 4.3.1 登录

- 接口地址：/api/user/login
- 请求参数：

```text
{
    ""userName"": ""admin"",  //用户名
    ""password"": """",  //密码
    ""remember"": false  //记住我
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": null,
        ""userUuid"": null,
        ""userName"": ""admin"",  //用户名
        ""password"": null,
        ""realName"": null,
        ""age"": null,
        ""sex"": null,
        ""birthDay"": null,
        ""userLevel"": null,
        ""phone"": null,
        ""role"": null,
        ""status"": null,
        ""imagePath"": null,
        ""createTime"": null,
        ""modifyTime"": null,
        ""lastActiveTime"": null,
        ""deleted"": null,
        ""wxOpenId"": null
    }
}
```

### 4.3.2 登出

- 接口地址：/api/user/logout
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.3.3 首页

- 接口地址：/api/admin/dashboard/index
- 请求参数：无
- 返回参数：

```text
 {
    ""examPaperCount"": 2413,  //试卷总数
    ""questionCount"": 1025,  //题目总数
    ""doExamPaperCount"": 6148,  //总答卷数
    ""doQuestionCount"": 23945,  //总题数
    ""mothDayUserActionValue"": [  //活跃度
        85
    ],
    ""mothDayDoExamQuestionValue"": [  //月做题数
        22
    ],
    ""mothDayText"": [  //本月天数
        ""1""
    ]
}    
```

### 4.3.4 用户分页

- 接口地址：/api/admin/user/page/list
- 请求参数：

```text
{
    ""userName"": """",  //用户名
    ""role"": 1,   //角色
    ""pageIndex"": 1,  //页码
    ""pageSize"": 10   //每页条数
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 81,  //总数
        ""list"": [
            {
                ""id"": 100,     //用户id
                ""userUuid"": ""fd31ab62-c32f-433c-8dc4-c07e653d390a"",  //用户uuid
                ""userName"": ""王"",  //用户名
                ""realName"": null,  //真实姓名
                ""age"": null,  //年龄
                ""role"": 1,  //角色
                ""sex"": null,  //性别
                ""birthDay"": """",  //出生日期          
                ""phone"": null,   //手机号                 
                ""lastActiveTime"": ""2021-06-21 20:01:26"",  //最后活动时间
                ""createTime"": ""2021-06-21 20:01:26"",  //创建时间
                ""modifyTime"": ""2021-06-21 20:01:35"",  //修改时间
                ""status"": 1,  //状态
                ""userLevel"": 1,  //年级
                ""imagePath"": null   //头像
            }
        ]
    }
}
```

### 4.3.5 用户查询

- 接口地址：/api/admin/user/select/1
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 100,     //用户id
        ""userUuid"": ""fd31ab62-c32f-433c-8dc4-c07e653d390a"",  //用户uuid
        ""userName"": ""王"",  //用户名
        ""realName"": null,  //真实姓名
        ""age"": null,  //年龄
        ""role"": 1,  //角色
        ""sex"": null,  //性别
        ""birthDay"": """",  //出生日期          
        ""phone"": null,   //手机号                 
        ""lastActiveTime"": ""2021-06-21 20:01:26"",  //最后活动时间
        ""createTime"": ""2021-06-21 20:01:26"",  //创建时间
        ""modifyTime"": ""2021-06-21 20:01:35"",  //修改时间
        ""status"": 1,  //状态
        ""userLevel"": 1,  //年级
        ""imagePath"": null   //头像
    }
}
```

### 4.3.6 用户编辑

- 接口地址：/api/admin/user/edit
- 请求参数：

```text
{
    ""id"": null,
    ""userName"": ""testzz"",  //用户名
    ""password"": ""123456"",  //密码
    ""realName"": ""tesx"",  //真实姓名
    ""role"": 1,  //角色
    ""status"": 1, //状态
    ""age"": """", //年龄
    ""sex"": """", //性别
    ""birthDay"": null, //生日
    ""phone"": null,  //手机号
    ""userLevel"": 1  //年级
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 109,
        ""userUuid"": ""321dec89-0656-4736-ae4c-e2b07f4fcc67"",  //用户id
        ""userName"": ""testzz"", //用户名
        ""password"": """" //密码
        ""realName"": ""tesx"",  //真实姓名
        ""age"": null, //年龄
        ""sex"": null, //性别
        ""birthDay"": null, //生日
        ""userLevel"": 1, //年级
        ""phone"": null, //手机号
        ""role"": 1, //角色
        ""status"": 1, //状态
        ""imagePath"": null, //头像
        ""createTime"": 1624538837259, //创建日期
        ""modifyTime"": null, //修改时间
        ""lastActiveTime"": 1624538837259, //最后活动时间
        ""deleted"": false, //是否删除
        ""wxOpenId"": null //微信openId
    }
}
```

### 4.3.7 用户删除

- 接口地址：/api/admin/user/delete/3
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,  //返回状态
    ""message"": ""成功"", //返回消息
    ""response"": null
}
```

### 4.3.8 用户状态修改

- 接口地址：/api/admin/user/changeStatus/1
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": 2
}
```

### 4.3.9 学科列表

- 接口地址：/api/admin/education/subject/list
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": [
        {
            ""id"": 64,  //学科id
            ""name"": ""语文"",  //学科名称
            ""level"": 1,  //年级
            ""levelName"": ""一年级"",  //年级名称
            ""itemOrder"": null,  //排序
            ""deleted"": false  //是否删除
        }
    ]
}
```

### 4.3.10 学科分页

- 接口地址：/api/admin/education/subject/page
- 请求参数：

```text
{
    ""level"": null,  //年级
    ""pageIndex"": 1,
    ""pageSize"": 10
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 2,
        ""list"": [
            {
                ""id"": 64,
                ""name"": ""数学"",  //学科名称
                ""level"": 1,  //年级
                ""levelName"": ""一年级""  //年级名称
            }
        ]
    }
}
```

### 4.3.11 学科查询

- 接口地址：/api/admin/education/subject/select/2
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 64,
        ""name"": ""数学"",  //学科名称
        ""level"": 1,    //年级
        ""levelName"": ""一年级""   //年级名称
    }
}
```

### 4.3.12 学科编辑

- 接口地址：/api/admin/education/subject/edit
- 请求参数：

```text
{
    ""id"": 64,
    ""name"": ""数学"",  //学科名称
    ""level"": 2,   //年级
    ""levelName"": ""二年级""  //年级名称
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.3.13 学科删除

- 接口地址：/api/admin/education/subject/delete/3
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.3.14 试卷分页

- 接口地址：/api/admin/exam/paper/page
- 请求参数：

```text
{
    ""id"": null,
    ""level"": null,   //年级
    ""subjectId"": null,  //学科
    ""pageIndex"": 1,  //页码
    ""pageSize"": 10  //每页数量
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 9,
        ""list"": [
            {
                ""id"": 64,     //试卷id
                ""name"": ""中级任务二"",    //试卷名称
                ""questionCount"": 5,  //题目总数
                ""score"": 180, //试卷分数
                ""createTime"": ""2021-01-21 11:49:31"",  //创建时间
                ""createUser"": 2,  //创建人
                ""subjectId"": 1,  //学科
                ""paperType"": 6, //试卷类型
                ""frameTextContentId"": 13  //试卷内容
            }
        ]
    }
}
```

### 4.3.15 试卷查询

- 接口地址：/api/admin/exam/paper/select/9
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 64,   //试卷id
        ""level"": 1,  //年级
        ""subjectId"": 1,  //学科
        ""paperType"": 1,  //试卷类型
        ""name"": ""语文试卷"", //试卷名称  
        ""suggestTime"": 20,  //考试时间
        ""limitDateTime"": null,  //限时考试
        ""titleItems"": [
            {
                ""name"": ""一、选择题"",  //试卷标题
                ""questionItems"": [
                    {
                        ""id"": 64,   //题目id
                        ""questionType"": 5,  //题目类型
                        ""subjectId"": 1,  //学科
                        ""title"": ""默写咏鹅"", //题干
                        ""gradeLevel"": 1, //年级
                        ""items"": [], //题目选项
                        ""analyze"": ""咏鹅可以带拼音"",  //解析
                        ""correctArray"": null,  //标答数组
                        ""correct"": ""鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。"",  //标答
                        ""score"": ""10"",  //题目分数
                        ""difficult"": 3,  //难度
                        ""itemOrder"": 1  //题序
                    }
                ]
            }
        ],
        ""score"": ""10""  //试卷总分
    }
}
```

### [#](https://www.mindskip.net:999/guide/admin.html#_4-3-16-试卷编辑)4.3.16 试卷编辑

- 接口地址：/api/admin/exam/paper/edit
- 请求参数：

```text
{
    ""id"": 64,  //试卷id
    ""level"": 1,  //年级
    ""subjectId"": 1,  //学科
    ""paperType"": 6,  //试卷类型
    ""name"": ""中级任务二"",  //试卷名称
    ""suggestTime"": 20,  //考试时长
    ""limitDateTime"": null,  //限时
    ""titleItems"": [
        {
            ""name"": ""一、选择题"",  //标题
            ""questionItems"": [   //题目列表
                {
                    ""id"": 64,   //题目id
                    ""questionType"": 2,  //题型
                    ""subjectId"": 1,  //学科
                    ""title"": ""以下哪些诗句是静夜思的？"",  //题干
                    ""gradeLevel"": 1,  //年级
                    ""items"": [   //选项
                        {
                            ""prefix"": ""A"",   //选项标记
                            ""content"": ""床前明月光"",  //选项内容
                            ""score"": null,  //选项分数
                            ""itemUuid"": null  //选项标识
                        }
                    ],
                    ""analyze"": ""床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。"",  //解析
                    ""correctArray"": [  //正确答案
                        ""A"",
                        ""C""
                    ],
                    ""correct"": ""A,C"", //正确答案
                    ""score"": ""0"",  //题目分数
                    ""difficult"": 3,  //难度
                    ""itemOrder"": 1  //题序
                }
            ]
        }
    ],
    ""score"": ""18""  //试卷总分
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 64,  //试卷id
        ""level"": 1,  //年级
        ""subjectId"": 1,   //学科
        ""paperType"": 6,   //试卷类型
        ""name"": ""中级任务二"",   //试卷名称
        ""suggestTime"": 20,  //考试时长
        ""limitDateTime"": null,  //限时
        ""titleItems"": [
            {
                ""name"": ""一、选择题"",  //标题
                ""questionItems"": [
                    {
                        ""id"": 64,   //题目id
                        ""questionType"": 2,    //题型
                        ""subjectId"": 1,   //学科
                        ""title"": ""以下哪些诗句是静夜思的？"",   //题干
                        ""gradeLevel"": 1,    //年级
                        ""items"": [   //选项
                            {
                                ""prefix"": ""A"",   //选项标记
                                ""content"": ""床前明月光"",     //选项内容
                                ""score"": null,   //选项分数
                                ""itemUuid"": null  //选项标识
                            }
                        ],
                        ""analyze"": ""床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。"",   //解析
                        ""correctArray"": [   //正确答案
                            ""A"",
                            ""C""
                        ],
                        ""correct"": ""A,C"",   //正确答案
                        ""score"": ""0"",   //题目分数
                        ""difficult"": 3,   //难度
                        ""itemOrder"": 1   //题序
                    }
                ]
            }
        ],
        ""score"": ""18""  //题序
    }
}
```

### 4.3.17 试卷删除

- 接口地址：/api/admin/exam/paper/delete/9
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.3.18 任务试卷分页

- 接口地址：/api/admin/exam/paper/taskExamPage
- 请求参数：

```text
{
    ""subjectId"": null,  //学科
    ""level"": 1,  //年级
    ""paperType"": 6,  //试卷类型
    ""pageIndex"": 1,  //页面
    ""pageSize"": 5  
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 1,
        ""list"": [
            {
                ""id"": 64,
                ""name"": ""任务试卷五"",   //试卷名称
                ""questionCount"": 2,   //题目总数
                ""score"": 60,   //试卷分数
                ""createTime"": ""2021-08-02 14:36:26"",  //创建时间
                ""createUser"": 2,  //创建人
                ""subjectId"": 1,  //学科
                ""paperType"": 6,  //试卷类型
                ""frameTextContentId"": 26  //试卷内容
            }
        ]
    }
}
```

### 4.3.19 题目分页

- 接口地址：/api/admin/question/page
- 请求参数：

```text
{
    ""id"": null,
    ""questionType"": null,
    ""level"": null,
    ""subjectId"": null,
    ""pageIndex"": 1,
    ""pageSize"": 10
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 7,
        ""list"": [
            {
                ""id"": 64,
                ""questionType"": 5,  //题型
                ""textContentId"": null,
                ""createTime"": ""2021-01-21 11:45:57"",  //创建时间
                ""subjectId"": 1,  //学科
                ""createUser"": 2,  //创建人
                ""score"": ""10"", //得分
                ""status"": 1,  //状态
                ""correct"": ""鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。"",  //标答
                ""analyzeTextContentId"": null,   //解析
                ""difficult"": 3,  //难度
                ""shortTitle"": ""默写咏鹅""  //题干
            }
        ]
    }
}
```

### 4.3.20 题目查询

- 接口地址：/api/admin/question/select/508
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 508,  //题目id
        ""questionType"": 5,  //题型
        ""subjectId"": 4,  //学科
        ""title"": ""<p>什么是快乐星球？</p>"",   //题干
        ""gradeLevel"": 1,  //年级
        ""items"": [],  //选项
        ""analyze"": ""照抄即可"",  //解析
        ""correctArray"": null,  //标答
        ""correct"": ""什么是快乐星球"",  //正确答案
        ""score"": ""5"",  //题目分数
        ""difficult"": 5,  //难度
        ""itemOrder"": null
    }
}
```

### 4.3.21 题目编辑

- 接口地址：/api/admin/question/edit
- 请求参数：

```text
{
    ""id"": 64, //题目id
    ""questionType"": 5, //题型
    ""subjectId"": 1,  //学科
    ""title"": ""默写咏鹅"",   //题干
    ""gradeLevel"": 1,  //年级
    ""items"": [],  //选项
    ""analyze"": ""咏鹅可以带拼音"",   //解析
    ""correctArray"": null, //标答
    ""correct"": ""鹅鹅鹅， 曲项向天歌。 白毛浮绿水， 红掌拨清波。"", //正确答案
    ""score"": 10,  //题目分数
    ""difficult"": 3, //难度
    ""itemOrder"": null
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.3.22 题目删除

- 接口地址：/api/admin/question/delete/7
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.3.23 任务分页

- 接口地址：/api/admin/task/page
- 请求参数：

```text
{
    ""gradeLevel"": null,
    ""pageIndex"": 1,
    ""pageSize"": 10
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 2,
        ""list"": [
            {
                ""id"": 64,   //任务id
                ""title"": ""中级任务"",   //任务标题
                ""gradeLevel"": 1,  //年级
                ""createUserName"": ""admin"",  //创建人用户名
                ""createTime"": ""2021-01-21 11:50:24"",  //创建时间
                ""deleted"": false  //是否删除
            }
        ]
    }
}
```

### 4.3.24 任务查询

- 接口地址：/api/admin/task/select/22
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 64,  //任务id
        ""gradeLevel"": 12,  //年级
        ""title"": ""考试"",  //任务标题
        ""paperItems"": [
            {
                ""id"": 592,  //试卷id
                ""name"": ""考试"",  //试卷名称
                ""questionCount"": 5,  //题目数量
                ""score"": 275,  //试卷分数
                ""createTime"": ""2021-08-12 15:02:50"",  //创建时间
                ""createUser"": 2,  //创建人
                ""subjectId"": 46,  //学科
                ""paperType"": 6,  //试卷类型
                ""frameTextContentId"": 2897,  //试卷内容
                ""allClasses"": null
            }
        ]
    }
}
```

### 4.3.25 任务编辑

- 接口地址：/api/admin/task/edit
- 请求参数：

```text
{
    ""id"": 64,
    ""gradeLevel"": 1,
    ""title"": ""中级任务"",
    ""paperItems"": [
        {
            ""id"": 64,  //试卷id
            ""name"": ""中级任务一"",  //试卷名称
            ""questionCount"": 5,  //题目数量
            ""score"": 180,  //试卷分数
            ""createTime"": ""2021-01-21 11:49:11"",  //创建时间
            ""createUser"": 2,  //创建人
            ""subjectId"": 1,  //学科
            ""paperType"": 6,  //试卷类型
            ""frameTextContentId"": 12  //试卷内容
        }
    ]
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 64,  //任务id
        ""gradeLevel"": 1,   //年级
        ""title"": ""中级任务"",  //任务标题
        ""paperItems"": [
            {
                ""id"": 64,  //试卷id
                ""name"": ""中级任务一"",  //试卷名称
                ""questionCount"": 5,  //题目数量
                ""score"": 180,  //试卷分数
                ""createTime"": ""2021-01-21 11:49:11"",  //创建时间
                ""createUser"": 2,  //创建人
                ""subjectId"": 1,  //学科
                ""paperType"": 6,  //试卷类型
                ""frameTextContentId"": 12  //试卷内容
            }
        ]
    }
}
```

### 4.3.26 任务删除

- 接口地址：/api/admin/task/delete/1
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,  //返回状态
    ""message"": ""成功"", //返回消息
    ""response"": null
}
```

### 4.3.27 消息分页

- 接口地址：/api/admin/message/page
- 请求参数：

```text
{
    ""sendUserName"": null,
    ""pageIndex"": 4,
    ""pageSize"": 10
}
```

- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 36,
        ""list"": [
            {
                ""id"": 64,   //消息id
                ""title"": ""你好，同学！"",  //消息标题
                ""content"": ""考试请不要作弊"",  //消息内容
                ""sendUserName"": ""admin"",  //发送人用户名
                ""receives"": ""student"",  //接收人用户名
                ""receiveUserCount"": 1,  //接收人数量
                ""readCount"": 1,  //已读数量
                ""createTime"": ""2020-09-22 11:37:49"" //创建时间
            }
        ]
    }
}
```

### 4.3.28 消息发送

- 接口地址：/api/admin/message/send
- 请求参数：

```text
{
    ""title"": ""全校师生请注意"",  //消息标题
    ""content"": ""大家好"",  //消息内容
    ""receiveUserIds"": [  //接收人
        1
    ]
}
```

- 返回参数：

```text
{
    ""code"": 1,  //返回状态
    ""message"": ""成功"", //返回消息
    ""response"": null
}
```

### 4.3.29 答卷分页

- 接口地址：/api/admin/examPaperAnswer/page
- 请求参数：

```text
{
    ""subjectId"": null,  //学科
    ""pageIndex"": 1,
    ""pageSize"": 10
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 4,
        ""list"": [
            {
                ""id"": 64,
                ""createTime"": ""2021-07-07 14:03:02"",  //提交时间
                ""userScore"": ""16"",  //用户得分
                ""subjectName"": ""语文"",  //学科名称
                ""subjectId"": 1,  //学科Id  
                ""questionCount"": 5,  //题目数量
                ""questionCorrect"": 4,  //正确题目数
                ""paperScore"": ""18"", //试卷总分
                ""doTime"": ""14 秒"",  //耗时
                ""paperType"": 4,  //试卷类型
                ""systemScore"": ""2"",  //自动批改得分
                ""status"": 2,  //答卷状态
                ""paperName"": ""限时考试二"",  //试卷名称
                ""userName"": ""student"" //用户名
            }
        ]
    }
}
```

### 4.3.30 用户日志

- 接口地址：/api/admin/user/event/page/list
- 请求参数：

```text
{
    ""userId"": null,
    ""userName"": null,
    ""pageIndex"": 1,
    ""pageSize"": 10
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""total"": 68,
        ""list"": [
            {
                ""id"": 64,  //日志id
                ""userId"": 2,  //用户id
                ""userName"": ""admin"",  //用户名
                ""realName"": ""管理员"", //真实姓名
                ""content"": ""admin 登录了学之思开源考试系统"", //日志内容
                ""createTime"": ""2021-08-24 20:05:02"" //创建时间
            }
        ]
    }
}
```

### 4.3.31 当前用户信息

- 接口地址：/api/admin/user/current
- 请求参数：无
- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": {
        ""id"": 64,
        ""userUuid"": ""52045f5f-a13f-4ccc-93dd-f7ee8270ad4c"", //用户uuid
        ""userName"": ""admin"",  //用户名
        ""realName"": ""管理员"", //真实姓名
        ""age"": 30, //年龄
        ""role"": 3, //角色
        ""sex"": 1, //性别
        ""birthDay"": ""2019-09-07 18:56:07"", //出生日期
        ""phone"": null, //手机号
        ""lastActiveTime"": """",  //最后活动时间
        ""createTime"": ""2019-09-07 18:56:21"",  //创建时间
        ""modifyTime"": """", //修改时间
        ""status"": 1, //状态
        ""userLevel"": null, //用户年级
        ""imagePath"": null  //头像
    }
}
```

### 4.3.32 用户信息更新

- 接口地址：/api/admin/user/update
- 请求参数：

```text
{
    ""id"": 64,  //用户id
    ""userUuid"": ""52045f5f-a13f-4ccc-93dd-f7ee8270ad4c"", //用户标识
    ""userName"": ""admin"", //用户名
    ""realName"": ""管理员"", //真实姓名
    ""age"": 30, //年龄
    ""role"": 3, //角色
    ""sex"": 1,  //性别
    ""birthDay"": ""2019-09-07 18:56:07"", //生日
    ""phone"": ""11"", //手机号
    ""lastActiveTime"": """", //最后活动时间
    ""createTime"": ""2019-09-07 18:56:21"", //创建时间
    ""modifyTime"": ""2021-08-17 11:28:52"", //修改时间
    ""status"": 1, //状态
    ""userLevel"": null, //年级
    ""imagePath"": null //头像
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```

### 4.3.32 用户信息更新

- 接口地址：/api/admin/user/selectByUserName
- 请求参数：

```text
student  //用户名
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": [
        {
            ""name"": ""student"",  //用户名
            ""value"": 1  //用户id
        }
    ]
}
```

### 4.3.33 图片上传

- 接口地址：/api/admin/upload/configAndUpload
- 请求参数：无
- 返回参数：

```text
{
    ""original"": ""头像.jpg"",
    ""name"": ""头像.jpg"",
    ""url"": ""http://xzs.file.mindskip.net/Fi4vlEf1ri4VMGSONwN2Ch0o8Ed_"",
    ""size"": 19665,
    ""type"": "".jpg"",
    ""state"": ""SUCCESS""
}
```

### 4.3.34 个人信息修改

- 接口地址：/api/admin/user/update
- 请求参数：

```text
{
    ""id"": 64,
    ""userUuid"": ""52045f5f-a13f-4ccc-93dd-f7ee8270ad4c"",  //用户uuid
    ""userName"": ""admin"", //用户名
    ""realName"": ""管理员"", //真实姓名
    ""age"": 30, //年龄
    ""role"": 3, //角色
    ""sex"": 1, //性别
    ""birthDay"": ""2021-09-07 18:56:07"",  //出生日期
    ""phone"": ""2112112"", //手机号
    ""lastActiveTime"": """", //最后活动时间
    ""createTime"": ""2019-09-07 18:56:21"",  //创建时间
    ""modifyTime"": ""2021-08-31 10:08:03"", //修改时间
    ""status"": 1, //状态
    ""userLevel"": null,  //年级
    ""imagePath"": null //头像
}
```

- 返回参数：

```text
{
    ""code"": 1,
    ""message"": ""成功"",
    ""response"": null
}
```
",0,0,1,,,0.0
simasch/cqrs-meets-modern-java,main,"# CQRS Meets Modern Java

This project is used as an example for my
talk [CQRS meets modern Java](https://speakerdeck.com/simas/cqrs-meets-modern-java)

## Prerequisite: jOOQ Build

The CQRS project uses jOOQ and therefore the database model classes must be created with Maven.

Change into the cqrs directory and run:

    ./mvnw compile

## Running the applications

Both applications use Testcontainers support of Spring Boot. Run the TestCqrsApplication and the
TestTraditionalApplication in src/test

## Testing

The file requests.http contains the http test requests to test the endpoints.",0,0,2,,,0.0
mt1006/mc-ar-mod,FABRIC-1.20.1,"### This mod (especially in its current state) is more of a proof of concept than actual optimization mod!
It has many issues and greatly reduces performance of main rendering thread (even when disabled),
so for comparing performance use instance without mod installed.

# About
**Asynchronous Reprojection** is a Minecraft mod that creates second rendering context to asynchronously reproject frames from main rendering thread with new camera rotation and player position.

It was inspired by Comrade Stinger's demo, which was also base for shader code:
https://www.youtube.com/watch?v=VvFyOFacljg

Known issues:
- Fabric version works only on Windows and Linux (I haven't tested it on macos). Forge version works only on Windows.
- Screenshots (F2) and world icons don't work - they're black.
- Minor visual glitches.
- Camera bobbing is disabled.
- ""Fabulous"" graphics doesn't change anything compared to ""Fancy"".
- Camera sometimes rotates itself when opening or closing GUI.
- Forge version crashes when trying to resize window during startup.
- It sometimes just crashes (for no particular reason).

CurseForge page: https://www.curseforge.com/minecraft/mc-mods/asynchronous-reprojection

Modrinth page: https://modrinth.com/mod/asynchronous-reprojection

# Examples

![](https://raw.githubusercontent.com/mt1006/mc-ar-mod/_common/screenshots/example1.png)

![](https://raw.githubusercontent.com/mt1006/mc-ar-mod/_common/screenshots/example2.png)

![](https://raw.githubusercontent.com/mt1006/mc-ar-mod/_common/screenshots/example3.png)
",1,5,3,LGPL-3.0,,0.0
D0g3-8Bit/OFBiz-Attack,main,"# OFBiz-Attack
A Tool For CVE-2023-49070/CVE-2023-51467 Attack

### 测试环境

vulhub/ofbiz:18.12.09

### 使用

启动

````
java -jar OFBiz-Attack.jar
````

共有三个模块，分别是：

- 漏洞检测

  ![1](./img/1.png)

  仅输入目标URL即可，无限额外添加路由，否则影响后续模块利用。仅支持发送Https请求，运行速度取决于Web服务器性能

  验证完成后请勿修改URL，后续利用会从此框获取URL

- 命令执行

  使用前需完成漏洞校验，使用的是CVE-2023-51467来执行命令，也方便回显

  ![2](./img/2.png)

  

  执行失败会返回Not executed for security reason信息

  部分命令无法执行原因是（可能是因为）security.properties文件中设置了黑名单

  ![3](./img/3.png)

  但还是能执行到反弹shell，该模块体验不佳的话请移步下一个模块

- 注入内存马

  ⚠️慎用，伤害不可逆

  使用前需完成漏洞校验，使用CVE-2023-49070反序列化注入内存马，模块支持注入CMD/Behinder内存马，原则上只能注入一种

  ![4](./img/4.png)

  

  连接Behinder，默认密码，不要忘记最后的`/`

  ![5](./img/5.png)

  两种内存马都是注入到`/webtool/*`的Filter

### 结语

⚠️此工具仅用于学习交流，切勿用于非法用途

如果模块给你带来了不好的体验，在此深表歉意，还请为工具提出建议，后续进行改进🙏

感谢使用
",2,2,1,,,0.0
ArtformGames/BungeeAuthProxy,master,"```text
   ___                         ___       __  __   ___                   
  / _ )__ _____  ___ ____ ___ / _ |__ __/ /_/ /  / _ \_______ __ ____ __
 / _  / // / _ \/ _ `/ -_) -_) __ / // / __/ _ \/ ___/ __/ _ \\ \ / // /
/____/\_,_/_//_/\_, /\__/\__/_/ |_\_,_/\__/_//_/_/  /_/  \___/_\_\\_, / 
               /___/                                             /___/  
```

README LANGUAGES [ [**English**](README.md) | [中文](README_CN.md)  ]

![CodeSize](https://img.shields.io/github/languages/code-size/ArtformGames/BungeeAuthProxy)
[![Download](https://img.shields.io/github/downloads/ArtformGames/BungeeAuthProxy/total)](https://github.com/ArtformGames/BungeeAuthProxy/releases)
[![Java CI with Maven](https://github.com/ArtformGames/BungeeAuthProxy/actions/workflows/maven.yml/badge.svg?branch=master)](https://github.com/ArtformGames//actions/workflows/maven.yml)
![Support](https://img.shields.io/badge/Minecraft-Java%201.16--Latest-green)

# **BungeeAuthProxy**

Authentication proxy injector for BungeeCord servers,
which is trying to solve the problem of inability to access the MineCraft online session and auth service in some areas.

## Usage

**Before using this injector, make sure that your Java version is 11 or above.**

1. Download latest release from [here](https://github.com/ArtformGames/BungeeAuthProxy/releases) .
2. Put the jar file into the folder of your BungeeCord server (same path with server jar).
3. Add the `-javaagent:BungeeAuthProxy.jar[=<CONFIG-FILE-NAME>]` before `-jar <server-jar>.jar` to the start command of
   your BungeeCord server.
    - For example: `java -javaagent:BungeeAuthProxy.jar -jar BungeeCord.jar`
    - Using custom config file name: `java -javaagent:BungeeAuthProxy.jar=auth-proxy.yml -jar BungeeCord.jar`
4. Start your bungeecord server, and configured the proxy (Default is `auth.yml` in server folder).

## Configurations

Will be generated on the first boot up.

```yaml
debug: false

# MineCraft service settings
service:
  # Timeout duration for single request in milliseconds.
  time-out: 5000
  # Authentication url dns-cache expire duration in milliseconds
  # If this value ≤0, will disable dns-cache.
  dns-cache-expire: 60000

# Proxy server settings
proxy:
  # Proxy protocol, -1 = NO_PROXY ,0 = HTTP/HTTPS, 1 = SOCKS4, 2 = SOCKS5
  protocol: -1
  # Proxy host
  host: 127.0.0.1
  # Proxy port
  port: 7890
  # Proxy authentication settings
  auth:
    # Whether to enable proxy authentication
    enabled: false
    username: proxy-username
    password: proxy-password

advance:
   # Remove unused field after injection.
   # If any 'NoSuchFieldException' or 'IllegalAccessException' occurred, try to set this to false.
   remove-unused-field: true
```

## Open Source Licence

The source code of this project adopts the [GNU General Public License v3.0](https://opensource.org/licenses/GPL-3.0).

## Supports

This project is mainly developed by the [Artfrom Games](https://github.com/ArtformGames/) .

Many thanks to Jetbrains for kindly providing a license for us to work on this and other open-source projects.  
[![](https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg)](https://www.jetbrains.com/?from=https://github.com/ArtformGames/BungeeAuthProxy)

",5,0,1,GPL-3.0,"deploy.yml,maven.yml",0.0
ProgrammerLMS/mini-git,master,"目录

- [mini-git：用Java实现一个简易版Git](#mini-git用java实现一个简易版git)
  - [0. 介绍与说明](#0-介绍与说明)
  - [1. 内部数据结构](#1-内部数据结构)
    - [1.1 blob](#11-blob)
    - [1.2 tree](#12-tree)
    - [1.3 commit](#13-commit)
    - [1.4 stage](#14-stage)
  - [2. 支持的指令](#2-支持的指令)
    - [2.1 init](#21-init)
    - [2.2 add](#22-add)
    - [2.3 commit](#23-commit)
    - [2.4 status](#24-status)
    - [2.5 log](#25-log)
    - [2.6 rm](#26-rm)
    - [2.7 branch](#27-branch)
    - [2.8 checkout](#28-checkout)
  - [3. 额外功能](#3-额外功能)
  - [4. 文件目录](#4-文件目录)
  - [5. 运行截图](#5-运行截图)
# mini-git：用Java实现一个简易版Git

特此鸣谢`UCB`提供的`skeleton code`！

![](image/icon.png)

## 0. 介绍与说明

本玩具项目基于作者对`Git`的理解与`Git`操作，基本实现了`Git`部分指令的底层运行原理。在技术上只使用到了`Java 8 `官方库，包括序列化、文件、集合等，适合对`Git`或`Java`基础不够熟悉的计算机新手进行源码阅读或调试。

本系统已实现的指令在下方，由于代码量小及水平有限，部分命令和`Git`软件的真实使用效果并不相同，并对一些复杂指令作出简化，请阅读下方指令的**注意事项**，避免运行中由于人工误操作出现Bug。

同时，该系统不能完全代表`Git`内部真正的工作流程，**仅仅代表**本人理解与对`Git`实操的认识，借此抛砖引玉。（另外安利一个可视化学习`Git`的网站，[Learn Git Branching](https://learngitbranching.js.org/?locale=zh_CN)

## 1. 内部数据结构

### 1.1 blob

存在于`.git/object`文件夹，`blob`表示保存的文件内容。由于 `Git `会保存多个版本的文件，因此一个文件可能对应多个 `blob`：每个 `blob `在不同的`commit`中被跟踪。

### 1.2 tree

存在于`.git/object`文件夹，`tree`表示文件目录，即将名称映射为 `blob` 和其他子`tree`（子目录）引用的目录结构。在本项目中为了简化，没有包含实际的`tree`对象，而是直接通过文件路径。具体原理可见：[Git基础 — 16、Tree对象详解 - 繁华似锦Fighting - 博客园 ](https://www.cnblogs.com/liuyuelinfighting/p/16194504.html)

### 1.3 commit

存在于`.git/object`文件夹。`commit`包含了日志信息、元数据（提交日期、作者等）、对`tree`对象的引用以及对父`commit`的引用等。同时`Git`还会维护从分支头部到提交引用的映射。

### 1.4 stage

暂存区，对应`.git`中的`index`文件，在本项目中，`stage`包含了**新增文件暂存区**和**删除文件暂存区**。在下文中，我们称之为“**暂存-新增区**”与“**暂存-删除区**”。

## 2. 支持的指令

### 2.1 init

指令

- ##### `git init`

说明

- 该指令会在当前目录下创建一个新的 `mini-git` 版本控制系统。该系统将自动从一个`commit`开始：并且该提交不包含任何文件。初始状态下只有一个默认当前分支：`master`。由于 `mini-git`创建的所有版本库的初始提交内容完全相同，因此所有版本库都会自动共享该`commit`（它们都有相同的 `UID`），所有版本库中的所有`commit`都会追溯到该次提交。

### 2.2 add

指令

- ##### `git add .`

- ##### `git add [file/folder] [file/folder] ...`

说明

- 将当前存在的文件副本添加到暂存区。因此，被添加文件也称为暂存文件。重新暂存已暂存的文件会用新内容覆盖暂存区域中的前一个条目。如果文件的当前工作版本与当前提交的版本相同，则不要将其添加到暂存区；如果文件已经在暂存区，则应将其从暂存区移除（这可能发生在文件被修改、添加，然后又改回原始版本的情况下）。如果该文件在执行`git rm`命令时已在暂存区，则不会再被暂存。
- 具体原理同上。

注意事项

- 其中，`folder`为工作目录下的相对路径，如`git add a/b.txt`，如果你的路径包含空格，请加入**双引号**，如`git add ""a b""`，表示名为`a b`的文件夹。由于本系统无`vim`编辑模式，**请不要只输入一个引号**。

### 2.3 commit

指令

- ##### `git commit -m [message]`

说明

- 该操作会保存当前`commit`和暂存-新增区中跟踪文件的快照，并创建一个新的`commit`,新的`commit`的父`commit`为当前`commit`。在默认情况下，每个`commit`的文件快照与其父`commit`的文件快照完全相同；它将保持文件版本的原样。新`commit`只会更新已经被添加到暂存-新增区的文件，在这种情况下，新`commit`将包含在暂存区的文件版本，而不是从父`commit`中获得的版本。同时，新`commit`将保存并开始跟踪任何父`commit`没有跟踪的文件。最后，在当前`commit`中被跟踪的文件可能会在新`commit`中被取消跟踪，因为这些文件已被 `rm `命令删除。


### 2.4 status

指令

- ##### `git status`

说明

- 表示当前工作目录的状态，包含的内容信息如下：

  ```markdown
  === Staged Files ===
  
    
  === Removed Files ===
  
    
  === Modifications Not Staged For Commit ===
  
    
  === Untracked Files ===
  
  ```

### 2.5 log

指令

- ##### `git log`

- ##### `git log -[number]`

- ##### `git log --grep=[message]`

说明

- 按时间先后，展示所有`commit`记录
- 展示给定数量的`commit`记录
- 展示包含`message`信息的`commit`记录

### 2.6 rm

指令

- ##### `git rm [file/folder] [file/folder] ...`

- ##### `git rm -f [file/folder] [file/folder] ...`

- ##### `git rm -cached [file/folder] [file/folder] ...`

说明

- 从暂存区和工作目录，删除文件或文件夹
- 强制删除
- 只删除暂存区的文件或文件夹，保留工作目录的文件或文件夹

### 2.7 branch

指令

- ##### `git branch`

- ##### `git branch [branch name]`

- ##### `git branch -d [branch name]`

说明

- 查看当前所有本地分支

- 创建分支

- 删除分支

### 2.8 checkout

指令

- ##### `git checkout [branch name]`

- ##### `git checkout -b [branch name]`

- ##### `git checkout -- [file] [file] ...`

- ##### `git checkout [commit id] -- [file] [file] ...`

说明

- 所有文件切换到给定分支
- 创建分支，并切换到该分支
- 使用当前`head commit`的文件版本覆写该文件
- 根据指定commit的文件版本覆写该文件

## 3. 额外功能

- 支持`git [command] -h`查看指令帮助
- 支持八位`commit id`检索，如`d2ee103f`
- 系统会缓存上一次最近打开的工作目录
- 系统会缓存指令，通过键盘上的`↑`与`↓`按键，即可切换指令

## 4. 文件目录

```
├─src
    │  Main.java
    │
    ├─command
    │      AddCommand.java
    │      BranchCommand.java
    │      CheckoutCommand.java
    │      CommitCommand.java
    │      ICommand.java
    │      InitCommand.java
    │      LogCommand.java
    │      MergeCommand.java
    │      ResetCommand.java
    │      RmCommand.java
    │      StatusCommand.java
    │
    ├─engine
    │      Engine.java
    │      Repository.java
    │
    ├─object
    │      Blob.java
    │      Commit.java
    │      Stage.java
    │
    ├─utils
    │      FileTreeUtils.java
    │      PersistanceUtils.java
    │
    └─view
            CommandPromptGUI.java
            ViewResponseEntity.java
            ViewResponseEnum.java
```

## 5. 运行截图

![](image/running.png)

如有疑问，欢迎`emali`至programmerlms@163.com；如有`bug`，那是正常的:)",0,1,1,,,1.0
jinho-yoo-jack/wanted-preonboarding-challenge-backend-16,master,"# wanted-preonboarding-challenge-backend-16
원티드 프리온보딩 백엔드 챌린지 사전과제

## 프로젝트 필수 패키지 및 버전 정보
### 버전 정보
- Spring Boot; 3.2.1
- JDK(Java Development Kit); Java 17 이상
  - Intellij에서 JDK 버전 변경하는 방법(참고 URL: https://inpa.tistory.com/entry/IntelliJ-%F0%9F%92%BD-%EC%9E%90%EB%B0%94-JDK-%EB%B2%84%EC%A0%84-%EB%B3%80%EA%B2%BD-%EB%B0%A9%EB%B2%95)
### 필수 설치 패키지
- Docker Desktop

## 과제1 - 필수
- 고객의 요구사항: 빠르게 변화는 고객의 니즈를 빠른 시간 내에 적용할 수 있는 Wanted Ticket 서비스를 아래와 같이 개발 해주세요.
- 비즈니스 요구사항:
  - 예약 시스템
    - Request Message: 고객의 이름, 휴대 전화, 결제 가능한 금액(잔고), 예약을 원하는 공연 또는 전시회ID, 회차, 좌석 정보
    - Response Message: 예매가 완료된 공연의 정보(회차, 공연명, 좌석정보, 공연ID) + 예매자 정보(이름, 연락처)
    - 특이사항: 예약 결제 시, 다양한 할인 정책이 적용될 수 있음.
  - 예약 조회 시스템
    - Request Message: 고객의 이름, 휴대 전화
    - Response Message: 예매가 완료된 공연의 정보(회차, 공연명, 좌석정보, 공연ID) + 예매자 정보(이름, 연락처)
  - 공연 및 전시 정보 조회(목록, 상세 조회)
    - Request Message: 예매 가능 여부
    - Response Message: 예매 가능한 공연 리스트(정보: 공연명, 회차, 시작 일시, 예매 가능 여부)
  - 예약 가능 알림 서비스
    - 특정 공연에 대해서 취소 건이 발생하는 경우, 알림 신청을 해놓은 고객에게 취소된 예약이 있다는 사실을 알리는 알림 서비스
    - Send Message: 공연ID, 공연명, 회차, 시작 일시 예매 가능한 좌석 정보 
    
- 기초 과제
  1. 위에서 이야기 하고 있는 비즈니스 요구사항을 만족하는 Application을 만들어주세요.
     - 개발 실력 브실골 이하: 기존에 작성 되어 있는 코드를 삭제 하지 않고! 기존 코드 위에 코드를 작성해주세요!
     - 다이아 이상: ticket 패키지를 삭제하고 새롭게 패키지를 만든 후에 Application을 개발해주세요!
  2. 데이터베이스는 MySQL를 사용 해주시고 프로젝트 내에 docker-compose.yml를 이용하여 MySQL 서비스를 Running 시키면 됩니다.
     - DB의 데이터를 저장하는 경로(`/Users/black/dev/mysql_docker/data`)와 DB 초기화 쿼리 파일의 경로(`/Users/black/IdeaProjects/backend-preonboarding/src/main/resources/initd`)는 개인의 환경에 맞게 수정 해주세요!
  3. 스키마 정보 및 테스트 데이터는 ""./resources/initdb""에 디렉토리에 *.sql 확장자로 정의 되어 있습니다. Application의 DTO와 Entity를 구성할 때 참고 해주세요!
     - Application 개발 중 새로운 테이블이 필요하다면 테이블을 추가는 마음대로 하셔도 됩니다.
- 심화 과제
  1. Application을 모두 작성 했다면! 코드를 읽는 동료가 코드를 쉽게 이해할 수 있도록 코드를 리팩토링 해주세요!
  2. 리팩토링을 진행할 때는! 기술 위주가 아니라! ""변경""에 쉽게 적응할 수 있는 코드 구조로 리팩토링 해주세요!

### 환경 설정과 Github에 대한 궁금증이 있다면! Issues에 등록해주시면 답변 드리겠습니다.
- https://github.com/jinho-yoo-jack/wanted-preonboarding-challenge-backend-16/issues
- 참고 URL: https://devlog-wjdrbs96.tistory.com/227
       

## 과제2 - 선택사항
- 다른 사람의 PR 염탐하기!
- **백문이 불여일견**이라고 했습니다! 다른 사람의 코드를 보고 궁금한 점이나 코드 작성의 의도를 물어봐 주세요! 또는 코드에 대해서 자신의 생각을 코멘트로 달아주세요! 
- 코드 리뷰를 통해서 내가 놓친 부분이나 미처 생각 하지 못했던 부분을 깨닫을 수 있고, 좋은 코드와 나쁜 코드가 무엇인지 경험할 수 있습니다!
- PR에 코멘트를 달아도! 잔디가 심어진다는 사실 알고 계신가요?!!!!
- 과제2의 베네핏
  1. 질 높은 코드 리뷰를 진행 주신 분들은 수업의 마지막 날에 진행 되는 커피챗 및 맥주챗 뽑기 진행 시, 이름을 3개 더 넣어 드리도록 하겠습니다.
  2. 열심히 코드 리뷰 활동을 하시는 분의 PR은 제가 무조건 처음부터 끝까지 코드 리뷰를 진행하도록 하겠습니다!!

## 과제 제출 방법
1. master 브랜치로 프로젝트를 clone 해주세요.
2. 로컬 레파지토리에 `feature/이름or닉네임`으로 피쳐 브랜치를 생성해주세요.
4. 이제부터 사전과제를 풀어봅니다.
5. 모든 사전과제를 풀었다면 이제 원격 레파지토리에 commit 및 push 후 PR을 올려 해주세요.
6. Example
   ```shell
    1. git checkout -b feature/migration2TcAsMasterSlaveStructure
    # 브랜치를 생성하고 해당 브랜치로 checkout.
    # feature의 브랜치명은 내부적으로 관리하는 issues번호나 프로젝트 관리도구에의 ID 값을 이용
    2. git add .
    # 모든 변경사항을 tracking 되는 상태로 변경할거에요.
    3. git commit -m “Commit Messsage for Modify Information”
    # git commit를 수행하고 작업내용을 팀 내부 규약대로 작성
    3-1. git push --set-upstream origin feature/migration2TcAsMasterSlaveStructure
    # 해당 내용을 remote repository로 push
    4. push하면 gitlab/github에 Pull Request나 Merge Request 생성하는 버튼이 활성화
    5. Merge Request 버튼을 클릭 후, 숙제에 관한 내용 작성 후 PR 요청을 보내면 끝
    6. Merge 승인이되면 WEB UI화면에서 merge 버튼이 활성화 됨.
   ```",0,3,2,,,34.0
seregamorph/spring-test-smart-context,master,"## Improving Spring Boot Test efficiency

### Problem statement
Spring test framework creates an application context according to test class configuration.
The context is cached and reused for all subsequent tests. If there is an existing context
with the same configuration, it will be reused. Otherwise, the new context will be created.
This is a very efficient and flexible approach, but it has a drawback: eventually this may
lead to out of memory errors if the number of unique configurations is too high and context
has a lot of heavyweight beans like TestContainers. In many cases simple static bean 
definition can help, but this project suggests another approach: reordering test classes
and eager context cleanup.

Consider a sample test suite of 8 classes that use 4 different configurations, classes that have the same configuration
are marked with the same colour:

<img src=""doc/sample-test-suite.png"" alt=""Sample test suite"" width=""700""/>

In a large test suites as well as in shared CI/CD environments with lots of test pipelines
working simultaneously this may eventually lead to out of memory errors
in Java process or Docker host.

### Proposed solution
It's recommended to use statically-defined TestContainers beans, optimize reusing same configuration between tests 
e.g. via common test super-classes.
But additionally this library makes two optimizations:
* test class execution is reordered to group tests with the same context configuration so they
can be executed sequentially
* the order of tests is known, so if current test class is last per current configuration, the spring context
will be automatically closed (it's called `Smart DirtiesContext`) and the beans will be disposed releasing resources

As a result, in a suite of single module there will always be not more than 1 active spring contexts:

<img src=""doc/reorder-and-smart-dirties-context.png"" alt=""Reordered suite with smart DirtiesContext"" width=""700""/>

This chart is done via calculating the number of active docker containers while executing a suite of 120 integration
test classes that actively uses TestContainers for databases (several datasources simultaneously) and other services:

<img src=""doc/active-docker-containers.png"" alt=""Number of active docker containers"" width=""700""/>

As shown on the chart, the suite just fails with OOM without the optimization.
As an advantage, the total test execution time will also become less, because resource consumption (especially memory)
will be reduced, hence tests are executed faster.

### References
This idea was submitted to the Spring Framework team as a feature request:
* https://github.com/spring-projects/spring-framework/issues/32289

Public presentation with AtomicJar (TestContainers creators):
* https://www.youtube.com/watch?v=_Vci_5nr8R0

### Limitations
At the moment only single thread test execution per module is supported. Parallel test execution is work in progress.
Also there can be problems with Jupiter
[Nested](https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested) test classes if they declare
own `@ContextConfiguration` or `@Import` of spring beans.

### Supported versions
`Java` 8+ (`Java` 17+ for spring-boot 3.x projects)

`Spring Boot` 2.4+, 3.x as well as bare Spring framework

Supported test frameworks:
* `JUnit 4` (via JUnit 5 [junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running))
* `JUnit 5 Jupiter`
* `TestNG` (both bare TestNG and JUnit platform [testng-engine](https://github.com/junit-team/testng-engine))

`Develocity Maven Extension` (test execution caching) correctly supports changed behaviour

### How to use
Add maven dependency (available in maven central):
```xml
<dependency>
    <groupId>com.github.seregamorph</groupId>
    <artifactId>spring-test-smart-context</artifactId>
    <version>0.8</version>
    <scope>test</scope>
</dependency>
```
Or Gradle dependency:
```groovy
testImplementation(""com.github.seregamorph:spring-test-smart-context:0.8"")
```
Also it's recommended to configure `""INFO""` level for `com.github.seregamorph.testsmartcontext` logger.
It's recommended to check [Demo projects](demo).

### How it works

<details>
  <summary>JUnit 5 Jupiter</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesClassOrderer](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/SmartDirtiesClassOrderer.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnitSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/jupiter/AbstractJUnitSpringIntegrationTest.java)
</details>

<details>
  <summary>TestNG</summary>

Add the dependency to the library in test scope, it will automatically setup
[SmartDirtiesSuiteListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/SmartDirtiesSuiteListener.java)
which will reorder test classes on each execution and prepare the list of last test class per context configuration.
The integration test classes should add
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
Note: the annotation is inherited, so it makes sense to annotate the base test class or use
[AbstractTestNGSpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/testng/AbstractTestNGSpringIntegrationTest.java)
parent.
</details>

<details>
  <summary>JUnit 4</summary>

Note: support of JUnit 4 is planned to be removed in version 1.0 (will stay available in 0.x versions).

The JUnit 4 does not provide standard way to reorder test class execution, but it's still possible via
[junit-vintage-engine](https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running).
This dependency should be added to test scope of the module:
```xml
<dependency>
    <groupId>org.junit.vintage</groupId>
    <artifactId>junit-vintage-engine</artifactId>
    <scope>test</scope>
</dependency>
```
or for Gradle (see [detailed instruction](https://docs.gradle.org/current/userguide/java_testing.html#executing_legacy_tests_with_junit_vintage)):
```groovy
testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
testRuntimeOnly('org.junit.platform:junit-platform-launcher')
```
Also the `surefire`/`failsafe` plugins should be configured to use junit-platform:
```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-failsafe-plugin</artifactId>
    <version>${maven-surefire.version}</version>
    <dependencies>
        <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit-platform</artifactId>
            <version>${maven-surefire.version}</version>
        </dependency>
    </dependencies>
</plugin>
```
or for Gradle:
```groovy
tasks.named('test', Test) {
    useJUnitPlatform()
}
```

For projects with JUnit 4 it will automatically setup
[SmartDirtiesPostDiscoveryFilter](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesPostDiscoveryFilter.java)
which will reorder test classes on the level of junit-launcher and prepare the list of last test class per context configuration.
Then this test execution listener
[SmartDirtiesContextTestExecutionListener](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/SmartDirtiesContextTestExecutionListener.java)
will be auto-discovered via [spring.factories](spring-test-smart-context/src/main/resources/META-INF/spring.factories).
Alternatively it can be defined explicitly
```java
@TestExecutionListeners(SmartDirtiesContextTestExecutionListener.class)
```
or even inherited from
[AbstractJUnit4SpringIntegrationTest](spring-test-smart-context/src/main/java/com/github/seregamorph/testsmartcontext/junit4/AbstractJUnit4SpringIntegrationTest.java)
</details>

### Additional materials
* See the online presentation of the project https://www.youtube.com/watch?v=_Vci_5nr8R0 hosted by 
[AtomicJar](https://www.atomicjar.com/), the creators of [TestContainers](https://testcontainers.com/) framework.
* Presentation slides: [Miro board](https://miro.com/app/board/uXjVN3KJeCI=/?share_link_id=309027962805)

### Known projects using library
<img src=""doc/miro-logo.png"" alt=""Miro"" width=""120""/>

[Miro](https://miro.com/) is using this approach to optimize huge integration test suites and it saved a lot of resource
for CI/CD pipelines.
",8,0,3,Apache-2.0,,13.0
giteecode/JwSystemPublic,master,"## 基于Java+Springboot+Vue的教务管理系统(源代码+数据库)115

## 一、系统介绍
本项目前后端分离，本系统分为管理员、教务人员、教师、学生四种角色

### 1、学生：
登录、首页统计、学生选课、成绩查询、个人课表、学生评价、教学计划、培养方案、个人中心、密码修改

### 2、教师：
成绩录入、课程评价查询、选课申请、个人信息、个人课表、成绩统计

### 3、教务人员：
学院管理、专业管理、班级管理、教学计划管理、培养方案管理、教学评价管理、档案管理、结课申请管理、开课申请管理、选课分配管理、学生管理

### 4、管理员：
拥有全部功能的权限、权限管理、角色管理。用户管理

## 二、所用技术

后端技术栈：

- Springboot
- MybatisPlus
- Mysql
- Maven
- Shiro
- SpringSecurity

前端技术栈：

- Vue 
- Vue-router 
- axios 
- elementUi

## 三、环境介绍

基础环境 :IDEA/eclipse, JDK1.8, Mysql5.7及以上,Maven3.6, node14

所有项目以及源代码本人均调试运行无问题 可支持远程调试运行

## 四、页面截图
### 1、学生
![contents](./picture/picture01.png)
![contents](./picture/picture1.png)
![contents](./picture/picture2.png)
![contents](./picture/picture3.png)
![contents](./picture/picture4.png)
![contents](./picture/picture5.png)
![contents](./picture/picture6.png)
![contents](./picture/picture7.png)
![contents](./picture/picture8.png)
![contents](./picture/picture9.png)
![contents](./picture/picture10.png)
![contents](./picture/picture11.png)

### 2、老师
![contents](./picture/picture12.png)
![contents](./picture/picture13.png)
![contents](./picture/picture14.png)
![contents](./picture/picture15.png)
![contents](./picture/picture16.png)
![contents](./picture/picture17.png)
![contents](./picture/picture18.png)
![contents](./picture/picture19.png)
![contents](./picture/picture20.png)
![contents](./picture/picture21.png)

### 3、教务人员
![contents](./picture/picture22.png)
![contents](./picture/picture23.png)
![contents](./picture/picture24.png)
![contents](./picture/picture25.png)
![contents](./picture/picture26.png)
![contents](./picture/picture27.png)
![contents](./picture/picture28.png)
![contents](./picture/picture29.png)
![contents](./picture/picture30.png)

### 4、管理员
![contents](./picture/picture31.png)
![contents](./picture/picture32.png)
![contents](./picture/picture33.png)
![contents](./picture/picture34.png)
![contents](./picture/picture35.png)
![contents](./picture/picture36.png)
![contents](./picture/picture37.png)
![contents](./picture/picture38.png)

## 五、浏览地址

访问地址：http://localhost:8081
- 学生账号/密码：20001/123456
- 教师账号/密码：9/123456
- 教务人员账号/密码：3/123456
- 管理员账号/密码：1/123456

## 六、部署教程
1. 使用Navicat或者其它工具，在mysql中创建对应名称的数据库，并执行项目的sql文件；
2. 使用IDEA/Eclipse导入Jwsystem项目，若为maven项目请选择maven，等待依赖下载完成；
3. 修改application.yml里面的数据库配置和文件路径配置，启动后端项目
4. vscode或idea打开Jwsystem-front项目，
5. 在编译器中打开terminal，执行npm install 依赖下载完成后执行 npm run dev,执行成功后会显示访问地址

",0,5,1,,,0.0
